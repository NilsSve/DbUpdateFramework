Use DFAllEnt.pkg
Use cCJStandardCommandBarSystem.pkg
Use cDbUpdateHandler.pkg

Object oHtmlHelp is a cHtmlHelp
End_Object

Object oApplication is a cApplication
    Set peHelpType to htHtmlHelp
    Set psProgram to "DUFFileListRepair"
    Set psProduct to "DUF - FileList Repair"
    
    Property Handle phoDbUpdateHandler 0
    Property String psFilelistFrom ""
    Property String private.psFilelistFromOrg ""
    Property String psOrgOpenPath ""

    Object oConnection is a cConnection
        Use LoginEncryption.pkg
        Use DatabaseLoginDialog.dg
    End_Object  

    // Removes any trailing backslash from a path.
    Function RemoveTrailingBackslash String sPath Returns String    
        If (Right(sPath, 1) ="\") Begin
            Move (Left(sPath, Length(sPath) -1)) to sPath
        End
        Function_Return sPath
    End_Function

    Procedure OnCreate
        Integer eOpened iRetval
        Handle hoCmdLine hoIniFile
        String sArgument sPath sWsFile sFileList
        Boolean bExists

        Get phoCommandLine to hoCmdLine
        Get Argument of hoCmdLine 1 to sArgument
        // 1. Open the .sws file and look for the config.ws file
        // 2. Open the config.ws file and read the filelist.cfg param.
        If (Lowercase(sArgument) contains ".sws") Begin
            Get Create (RefClass(cIniFile)) to hoIniFile
            Set psFileName of hoIniFile to sArgument
            Get ParseFolderName sArgument to sPath  
            Get RemoveTrailingBackslash sPath to sPath
            Get ReadString of hoIniFile "WorkspacePaths" "ConfigFile" "" to sWsFile 
            Move (Replace(".", sWsFile, "")) to sWsFile
            Move (sPath + sWsFile) to sWsFile
            Set psFileName of hoIniFile to sWsFile
            Get ReadString of hoIniFile "Workspace" "Filelist" "" to sFileList
            Move (Replace(".", sFileList, "")) to sFileList
            Move (sPath + sFileList) to sFileList
            Set psFilelistFrom to sFileList 
            Send Destroy of hoIniFile
        End
    End_Procedure
    
    Function psWorkspaceHomePath Returns String
        String sPath 
        Get psHome of (phoWorkspace(Self)) to sPath
        Function_Return sPath
    End_Function

    // Set psOrgOpenPath at startup
    Procedure Save_DF_OPEN_PATH
        String sOrgOpenPath sDataPath sFileListPath
        
        Get psFileList of (phoWorkspace(ghoApplication)) to sFileListPath
        Set private.psFilelistFromOrg to sFileListPath
        Get_Attribute DF_OPEN_PATH to sOrgOpenPath
        // First remove the current Data folder path
        Get PathAtIndex of (phoWorkspace(Self)) sOrgOpenPath 1 to sDataPath
        Move (Replace(sDataPath, sOrgOpenPath, "")) to sOrgOpenPath
        If (Left(sOrgOpenPath, 2) = "\;") Begin
            Move (Replace("\;", sOrgOpenPath, "")) to sOrgOpenPath
        End
        Set psOrgOpenPath to sOrgOpenPath
    End_Procedure

    Procedure OnWorkspaceOpened
        Send Save_DF_OPEN_PATH
    End_Procedure

    Procedure Restore_DF_OPEN_PATH
        String sOrgOpenpath
        Get psOrgOpenPath to sOrgOpenpath
        Set_Attribute DF_OPEN_PATH to sOrgOpenPath
    End_Procedure

    Procedure ResetFilelistPathing
        String sDriverID sServer sFileList sDataPath
        Send Restore_DF_OPEN_PATH
        Close DF_ALL DF_PERMANENT
        Get psDriverID of ghoDbUpdateFunctionLibrary to sDriverID
        Get psServer   of ghoDbUpdateFunctionLibrary to sServer  
        If (sDriverID <> "") Begin
            Logout sDriverID sServer
        End
        Set psDriverID of ghoDbUpdateFunctionLibrary to DATAFLEX_ID
        Set psServer   of ghoDbUpdateFunctionLibrary to ""
        Get private.psFilelistFromOrg to sFileList
        Get ParseFolderName sFileList                      to sDataPath
        If (Right(sDataPath, 1) = "\") Begin
            Move (Left(sDataPath, (Length(sDataPath) -1))) to sDataPath
        End
        Set psDataPath of (phoWorkspace(Self))  to sDataPath
        Set psFileList of (phoWorkspace(Self))  to sFileList
        Set_Attribute DF_FILELIST_NAME          to sFileList
    End_Procedure

    Function ChangeFilelistPathing String sFileList Returns Boolean
        String sPath sSQLConnectionsIniName sDataPath sDriverID sServer sOrgOpenPath
        Boolean bExists bEmbedded bIsSQLDriver bErr bDFConnId
        Handle hoDbUpdateHandler hoSQLConnectionHandler hoSQLConnectionIniFile
        tSQLConnection SQLConnection
        Integer iRetval iDriverID
        
        Get pbDFConnId of ghoSQLConnectionHandler to bDFConnId
        Move False to Err
        Move (Trim(sFileList)) to sFileList
        Get vFilePathExists sFileList to bExists
        If (bExists = False) Begin
            Send Info_Box "Can't find Filelist.cfg"
            Function_Return False
        End

        Send Cursor_Wait of Cursor_Control
        Get psDriverID of ghoDbUpdateFunctionLibrary to sDriverID
        Get psServer   of ghoDbUpdateFunctionLibrary to sServer
        Send Restore_DF_OPEN_PATH
        Close DF_ALL DF_PERMANENT
        Logout sDriverID sServer

        Get ParseFolderName sFileList                      to sDataPath
        If (Right(sDataPath, 1) = "\") Begin
            Move (Left(sDataPath, (Length(sDataPath) -1))) to sDataPath
        End
        Set psDataPath of (phoWorkspace(Self))  to sDataPath
        Set psFileList of (phoWorkspace(Self))  to sFileList

        // Temporarily "redirect" the Open path to the current Data folder
        Get psOrgOpenPath to sOrgOpenPath
        Set_Attribute DF_OPEN_PATH to (sDataPath + ";" + sOrgOpenPath)
        Set_Attribute DF_FILELIST_NAME to sFileList
        Get UtilIsAnyFilelistEntrySQLtable of ghoDbUpdateFunctionLibrary to sDriverID
        Get IsSQLDriver of ghoDbUpdateFunctionLibrary sDriverID to bIsSQLDriver
        
        // If none of the tables in the Filelist.cfg are SQL, we're done. Let's get out of here!
        If (bIsSQLDriver = False) Begin
            Send Cursor_Ready of Cursor_Control
            Function_Return True
        End

        // Note: We delete all cache files (*.cch) before attempting to open any
        // tables as a precausion, in case a table has been changed at the SQL back-end,
        // because then the .cch file is out-of-sync with the SQL table.
        Get DriverIndex of ghoDbUpdateFunctionLibrary sDriverID to iDriverID
        Move Err to bErr 
        Send Ignore_Error of Error_Object_Id DFERR_OPERATION_NOT_ALLOWED
        Get_Attribute DF_DRIVER_CACHE_PATH of iDriverID to sPath
        If (sPath = "") Begin 
            If (LastErr = DFERR_OPERATION_NOT_ALLOWED and bErr = False) Begin
                Move False to Err
            End
            Move sDataPath to sPath
        End
        Get vFolderFormat sPath to sPath
        Get vDeleteFile (sPath + "*.cch") to iRetval

        // Try to make a database connection by reading the SQLConnections.ini file:
        Get vFolderFormat sDataPath to sPath
        Get vParentPath sDataPath   to sPath
        Get vFolderFormat sPath     to sPath
        Move (sPath + "Programs")   to sPath
        Get vFolderFormat sPath     to sPath
        Move CS_SQLIniFileName to sSQLConnectionsIniName
        Get vFilePathExists (sPath + sSQLConnectionsIniName) to bExists
        If (bExists = False) Begin
            Get UtilIsAllFilelistEntriesDataFlexTables of ghoDbUpdateFunctionLibrary to bEmbedded
            If (bEmbedded = False) Begin     
                If (bDFConnId = False) Begin
                    // Get YesNo_Box ("Couldn't find the DUF SQLConnections.ini file in the workspace Programs folder. Is there a DataFlex DFConnId.ini file in the Data folder that you want to open instead?") to iRetval
                    Move MBR_Yes to iRetval
                End
                If (iRetval = MBR_Yes) Begin
                    Set pbDFConnId of ghoSQLConnectionHandler to True
                    Send Cursor_Wait of Cursor_Control
                    #IF (!@ > 182)
                        Send UnRegisterAllConnections of ghoConnection
                        Get AddAllConnections of ghoConnection to bExists
                        Set psIniFilePath of (phoSQLConnectionIniFile(ghoSQLConnectionHandler)) to sPath
                        Get SetupSQLConnection of ghoSQLConnectionHandler True False to SQLConnection
                    #ENDIF
                End
            End
        End
        Else Begin
            Get phoDbUpdateHandler to hoDbUpdateHandler
            Get phoSQLConnectionHandler of hoDbUpdateHandler to hoSQLConnectionHandler
            Get phoSQLConnectionIniFile of hoSQLConnectionHandler to hoSQLConnectionIniFile
            Set psIniFilePath of hoSQLConnectionIniFile to sPath
            Set psIniFileName of hoSQLConnectionIniFile to sSQLConnectionsIniName

            Get SetupSQLConnection of hoSQLConnectionHandler True True to SQLConnection
            Set pSQLConnection     of hoSQLConnectionHandler to SQLConnection
        End

        Send Cursor_Ready of Cursor_Control
        Function_Return (Err = False)
    End_Function

End_Object

Object oDbUpdateHandler is a cDbUpdateHandler
    Set piDbVersionFileNumber  to 255
    Set piDbVersionFieldNumber to 1
    Set phIntFilesTable to 256
    Set pbUseIntFilesBackup to True
    Set pbExitIfDebuggerActive to False
    Set piDbType to EN_DbTypeMSSQL
    Set pbExitIfDebuggerActive to False
    Set phoDbUpdateHandler of ghoApplication to Self

    Procedure OnPreUpdate
    End_Procedure  

    Object oDbUpdateVersion1_0 is a cDbUpdateVersion
        Set pnVersionNumber to 1.0
    End_Object

End_Object

Object oToolTipController is a cToolTipController
    Move Self to ghoToolTipController
End_Object

Use oEditContextMenu.pkg
Use oDEOEditContextMenu17.pkg

Object oMain is a Panel
    Set Label to (psProduct(ghoApplication))
    Set Location to 4 3
    Set Size to 442 572

    Object oCommandBarSystem is a cCJCommandBarSystem
        Set pbTimerUpdate to True
        Set peVisualTheme to xtpThemeOffice2013Outlook
        Set pbAutoResizeIcons to True
        Set pbLargeIcons to True

        Procedure OnCreateCommandBars
            Handle hoOptions
            Get OptionsObject to hoOptions
            Forward Send OnCreateCommandBars
        End_Procedure

//        Object oMenuBar is a cCJMenuBar
//
//            Object oFileMenu is a cCJMenuItem
//                Set peControlType to xtpControlPopup          
//                Set psCaption   to "&File"
//                Set psDescription to "Find, Save, Delete, Clear information or quit this application."
//                Set psCategory to "Menus"
//
//                Object oClearMenuItem is a cCJClearMenuItem
//                    Set pbAddToDesignerMenu to True
//                End_Object
//
//                Object oClearAllMenu is a cCJClearAllMenuItem
//                    Set pbAddToDesignerMenu to True
//                End_Object
//
//                Object oPromptMenuItem is a cCJPromptMenuItem
//                    Set pbAddToDesignerMenu to True
//                    Set pbControlBeginGroup to True
//                End_Object
//
//                Object oFindMenuItem is a cCJFindMenuItem
//                    Set pbAddToDesignerMenu to True
//                    Set pbControlBeginGroup to True
//                End_Object
//
//                Object oFindNextMenu is a cCJFindNextMenuItem
//                    Set pbAddToDesignerMenu to True
//                End_Object
//
//                Object oFindPreviousMenu is a cCJFindPreviousMenuItem
//                    Set pbAddToDesignerMenu to True
//                End_Object
//
//                Object oFindFirstMenu is a cCJFindFirstMenuItem
//                    Set pbAddToDesignerMenu to True
//                End_Object
//
//                Object oFindLastMenu is a cCJFindLastMenuItem
//                    Set pbAddToDesignerMenu to True
//                End_Object
//
//                Object oSaveMenuItem is a cCJSaveMenuItem
//                    Set pbAddToDesignerMenu to True
//                    Set pbControlBeginGroup to True
//                End_Object
//
//                Object oDeleteMenuItem is a cCJDeleteMenuItem
//                    Set pbAddToDesignerMenu to True
//                End_Object
//
//                Object oExitMenu is a cCJExitMenuItem
//                    Set pbControlBeginGroup to True
//                End_Object
//
//            End_Object
//
//            Object oHelpMenu is a cCJMenuItem
//                Set peControlType to xtpControlPopup    
//                Set psCaption to "&Help"
//                Set psDescription to "Access Information for learning and using this DataFlex application."
//                Set psToolTip to "Help"
//
//                Object oHelpMenuItem is a cCJHelpMenuItem 
//                End_Object
//
//                Object oAboutMenuItem is a cCJAboutMenuItem
//                End_Object
//
//            End_Object
//
//        End_Object
//
//        Object oEditToolBar is a cCJToolbar
//            Set psTitle to "Edit Toolbar"
//
//            Object oCutToolbarItem is a cCJCutMenuItem
//            End_Object
//
//            Object oCopyToolbarItem is a cCJCopyMenuItem
//            End_Object
//
//            Object oPasteToolbarItem is a cCJPasteMenuItem
//            End_Object
//
//            Object oAddToStudio_MenuItem is a cCJMenuItem
//                Set psCaption to "Add to Studio"
//                Set psDescription to "Add to Studio"
//                Set psToolTip to "Add this tool to the DataFlex Studio's 'Tools' menu"
//                Set psImage to "ActionAddStudio1.ico"
//                Set pbControlBeginGroup to True   
//                
//                Procedure OnExecute Variant vCommandBarControl
//                    Forward Send OnExecute vCommandBarControl 
//                    Set psTag of (oAddToStudio_dg(oAddToStudio_dg(Client_Id(phoMainPanel(ghoApplication))))) ;
//                        to "<workspace>"
//                    Send Popup of (oAddToStudio_dg(Client_Id(phoMainPanel(ghoApplication))))
//                End_Procedure
//                
//            End_Object
//
//        End_Object
        
        Object oEditToolBar is a cCJToolbar
            Set psTitle to "Edit Toolbar"
            Set pbCloseable to False
            Set pbCustomizable to False
            Set pbShowExpandButton to False

            Object oCutToolbarItem is a cCJCutMenuItem
                Set psImage to "ActionCut1.ico"
            End_Object

            Object oCopyToolbarItem is a cCJCopyMenuItem
                Set psImage to "ActionCopy1.ico"

            End_Object

            Object oPasteToolbarItem is a cCJPasteMenuItem
                Set psImage to "ActionPaste1.ico"
            End_Object

//            Object oDeleteEditToolbarItem is a cCJDeleteEditMenuItem
//                Set psImage to "ActionDelete1.ico"
//                Set pbControlBeginGroup to True
//            End_Object

            Object oPromptToolItem is a cCJPromptMenuItem
                Set psImage to "ActionPrompt1.ico"
                Set pbControlBeginGroup to True
            End_Object

//            Object oClearToolItem is a cCJClearMenuItem
//                Set peControlStyle to xtpButtonIconAndCaption
//                Set psCaption      to "Clear/Add"
//                Set pbControlBeginGroup to True
//                Set psImage to "ActionClear1.ico"  
//                
//                Function IsEnabled Returns Boolean
//                    Function_Return True
//                End_Function
//
//            End_Object

            Object oOpenContainingFolder_MenuItem is a cCJMenuItem
                Set psImage to "ActionOpenContainingFolder1.ico"
                Set psCaption to "Containing Folder"
                Set psToolTip to "Open containing folder"
                Set psDescription to "Open Containing Folder"
                Set pbActiveUpdate to True
                Set pbControlBeginGroup to True

                Procedure OnExecute Variant vCommandBarControl
                    String sPath sFile       
                    Boolean bExists

                    Forward Send OnExecute vCommandBarControl
                    Get psFilelistFrom of ghoApplication to sFile
                    Get ParseFolderName sFile to sPath
                    Get vFilePathExists sFile to bExists
                    // We want to have that file to be selected in Windows Explorer;
                    If (bExists = True) Begin
                        Move ("/select, " + sFile) to sPath
                    End
                    Send vShellExecute "open" "explorer.exe" sPath ""
                End_Procedure

                Function IsEnabled Returns Boolean
                    String sFile
                    Boolean bExists
                    Get psFilelistFrom of ghoApplication to sFile
                    Get vFilePathExists sFile to bExists
                    Function_Return (bExists = True)
                End_Function

            End_Object

            Object oAddToStudio_MenuItem is a cCJMenuItem
                Set psCaption to "Add to Studio"
                Set psDescription to "Add to Studio"
                Set psToolTip to "Add this tool to the DataFlex Studio's 'Tools' menu"
                Set psImage to "ActionAddStudio1.ico"
                Set pbControlBeginGroup to True   
                
                Procedure OnExecute Variant vCommandBarControl
                    Forward Send OnExecute vCommandBarControl
                    Set psTag of (oAddToStudio_dg(oAddToStudio_dg(Client_Id(phoMainPanel(ghoApplication))))) ;
                        to "<workspace>"
                    Send Popup of (oAddToStudio_dg(Client_Id(phoMainPanel(ghoApplication))))
                End_Procedure
                
            End_Object

            Object oAbout_MenuItem is a cCJMenuItem
                Set psCaption to "About"
                Set psToolTip to "About Info"
                Set psDescription to "About the program"
                Set psImage to "ActionAbout1.ico"
                Set pbControlBeginGroup to True
                Procedure OnExecute Variant vCommandBarControl
                    Forward Send OnExecute vCommandBarControl
                    Send Activate_About of (Client_Id(ghoCommandBars))
                End_Procedure
            End_Object

            Object oHelpMenuItem is a cCJHelpMenuItem
                Set peControlType to xtpControlSplitButtonPopup
                Set psImage to "ActionHelp1.ico"

                Procedure OnExecute Variant vCommandBarControl
                    Send ShowProgramHelp
                End_Procedure

                Object oHelpMenuItemLocal is a cCJMenuItem
                    Set psCaption to "Local HTML Help"
                    Set psImage to "ActionHelp1.ico"
                    Procedure OnExecute Variant vCommandBarControl
                        Send ShowProgramHelp
                    End_Procedure
                End_Object

                Object oHelpMenuItemInternetBrowser is a cCJMenuItem
                    Set psCaption to "Online HTML Help"
                    Set psImage to "ActionHelpInternet1.ico"
                    Procedure OnExecute Variant vCommandBarControl
                        Runprogram Shell Background "http://www.rdctools.com/HTMLHelpDUF/Developer5.htm"
                    End_Procedure

                End_Object

            End_Object

            Object oExitMenuItem is a cCJExitMenuItem
                Set psToolTip to "Exit application"
                Set psDescription to "Exit the program (Alt+F4)"
                Set psImage to "ActionExit1.ico"
                Set pbControlBeginGroup to True
            End_Object

        End_Object

        Object oStatusBar is a cCJStatusBar
            Set StatusBar_Id to Self
            Set psIdleText to "No Action"  

            Object oStatusPane1 is a cCJStatusBarPane
                Set piID to sbpIDIdlePane
                Set pbStyleStretch to True
            End_Object

            Object oStatusPane2 is a cCJStatusBarPane
                Set phoViewPane to Self
                Set pbStyleStretch to True
            End_Object
            
        End_Object

    End_Object

    Object oClientArea is a ClientArea
        Use AddToStudio.dg     
        Use FileListFixerView.vw

        Use StdAbout.pkg
        Procedure Activate_About
            Send DoAbout "" "" "" "" ""
        End_Procedure

    End_Object

    // Note that we have overriden the cHtmlHelp "GetHelpFile" function
    // in the oHtmlHelp object, so we need to explitetly send the message
    // to that object.
    Procedure ShowProgramHelp
        Set psHelpFile of ghoApplication to "Developer5.chm"
        Send DoDisplayKeyword of oHtmlHelp "" //"DUF Code Generator"
    End_Procedure

End_Object

Start_UI
