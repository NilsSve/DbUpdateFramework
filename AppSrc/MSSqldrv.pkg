//     Package that declares MS SQL driver constants and functions.
//     This package can be used by developers who want to add Data Access
//     MS SQL Client specific code to a DataFlex application.

Use Cli.pkg
Use SQL.pkg

//   Driver Indentification
#Replace MSSQLDRV_ID  "MSSQLDRV"

//   Error number constants
#Replace DFMSSQL_GENERAL_ERROR                            CLIERR_GENERAL_ERROR
#Replace DFMSSQLERR_CANT_INITIALIZE                       CLIERR_CANT_INITIALIZE
#Replace DFMSSQLERR_CANT_DEINITIALIZE                     CLIERR_CANT_DEINITIALIZE
#Replace DFMSSQLERR_BAD_OR_NO_PRIMARY_INDEX_SPECIFIED     CLIERR_BAD_OR_NO_PRIMARY_INDEX_SPECIFIED
#Replace DFMSSQLERR_LOGIN_UNSUCCESSFUL                    CLIERR_LOGIN_UNSUCCESSFUL
#Replace DFMSSQLERR_LOGOUT_UNSUCCESSFUL                   CLIERR_LOGOUT_UNSUCCESSFUL
#Replace DFMSSQLERR_TABLE_NOT_IN_CONNECTION               CLIERR_TABLE_NOT_IN_CONNECTION
#Replace DFMSSQLERR_NULL_VALUE_NOT_ALLOWED                CLIERR_NULL_VALUE_NOT_ALLOWED
#Replace DFMSSQLERR_SEGMENT_NUMBER_RANGE                  CLIERR_SEGMENT_NUMBER_RANGE
#Replace DFMSSQLERR_INDEX_NUMBER_RANGE                    CLIERR_INDEX_NUMBER_RANGE
#Replace DFMSSQLERR_LOGIN_ATTRIBUTE_MUST_BE_SET           CLIERR_LOGIN_ATTRIBUTE_MUST_BE_SET
#Replace DFMSSQLERR_PHYSICAL_NAME_MUST_BE_SET             CLIERR_PHYSICAL_NAME_MUST_BE_SET
#Replace DFMSSQLERR_INVALID_REGISTRATION_FILE             CLIERR_INVALID_REGISTRATION_FILE
#Replace DFMSSQLERR_LICENSE_EXPIRED                       CLIERR_LICENSE_EXPIRED
#Replace DFMSSQLERR_DEADLOCK_OR_TIMEOUT                   CLIERR_DEADLOCK_OR_TIMEOUT
#Replace DFMSSQLERR_SQL_ERROR                             CLIERR_SQL_ERROR
#Replace DFMSSQLERR_SQLINVALID_CLI_STMT_HANDLE            CLIERR_SQLINVALID_CLI_STMT_HANDLE
#Replace DFMSSQLERR_SQLINVALID_CLI_CONN_HANDLE            CLIERR_SQLINVALID_CLI_CONN_HANDLE
#Replace DFMSSQLERR_SQLINVALID_DRIVER_ID                  CLIERR_SQLINVALID_DRIVER_ID
#Replace DFMSSQLERR_SQLINVALID_BIND_FILE                  CLIERR_SQLINVALID_BIND_FILE
#Replace DFMSSQLERR_SQLINVALID_COLUMN                     CLIERR_SQLINVALID_COLUMN
#Replace DFMSSQLERR_SQLINVALID_ATTRIBUTE                  CLIERR_SQLINVALID_ATTRIBUTE
#Replace DFMSSQLERR_SQLINVALID_BUFFER                     CLIERR_SQLINVALID_BUFFER
#Replace DFMSSQLERR_INVALID_CONFIGURATION_KEYWORD         CLIERR_INVALID_CONFIGURATION_KEYWORD
#Replace DFMSSQLERR_NOUNIQUEINDEX                         CLIERR_NOUNIQUEINDEX
#Replace DFMSSQLERR_UCSEGMENT_NOT_SUPPORTED               CLIERR_UCSEGMENT_NOT_SUPPORTED
#Replace DFMSSQLERR_FIELDREADONLY                         CLIERR_FIELDREADONLY
#Replace DFMSSQLERR_DBPROPERROR                           CLIERR_DBPROPERROR
#Replace DFMSSQLERR_CANTSETRECNUMINACTIVE                 CLIERR_CANTSETRECNUMINACTIVE
#Replace DFMSSQLERR_CANTCHANGEINACTIVECOLUMN              CLIERR_CANTCHANGEINACTIVECOLUMN
#Replace DFMSSQLERR_FIELDISINACTIVE                       CLIERR_FIELDISINACTIVE
#Replace DFMSSQLERR_NOT_INSTALLED                         CLIERR_NOT_INSTALLED
#Replace DFMSSQLERR_CANT_FIND_TERMLIST                    CLIERR_CANT_FIND_TERMLIST
#Replace DFMSSQLERR_CANT_READ_TERMLIST                    CLIERR_CANT_READ_TERMLIST
#Replace DFMSSQLERR_MAX_USERS_EXCEEDED                    CLIERR_MAX_USERS_EXCEEDED
#Replace DFMSSQLERR_USER_COUNT_FILE_ERROR                 CLIERR_USER_COUNT_FILE_ERROR
#Replace DFMSSQLERR_CANT_INIT_USER_COUNT                  CLIERR_CANT_INIT_USER_COUNT
#Replace DFMSSQLERR_USER_COUNT_FILE_NOT_FOUND             CLIERR_USER_COUNT_FILE_NOT_FOUND
#Replace DFMSSQLERR_USER_COUNT_FILE_CANT_READ             CLIERR_USER_COUNT_FILE_CANT_READ
#Replace DFMSSQLERR_USER_COUNT_FILE_CANT_DECRYPT          CLIERR_USER_COUNT_FILE_CANT_DECRYPT
#Replace DFMSSQLERR_USER_COUNT_FILE_BAD_VERSION           CLIERR_USER_COUNT_FILE_BAD_VERSION
#Replace DFMSSQLERR_CANTCREATE_RECNUMISZERO               CLIERR_CANTCREATE_RECNUMISZERO


//   Possible DF_DRIVER_SQLSERVER_CLIENT_VERSION values
#Replace SQLSERVERUNKNOWNCLIENT  0
#Replace SQLSERVER2000CLIENT     8          //   "SQL Server"
#Replace SQLSERVER2005CLIENT     9          //   "SQL Native Client"
#Replace SQLSERVER2008CLIENT    10          //   "SQL Server Native Client 10.0"
#Replace SQLSERVER2012CLIENT    11          //   "SQL Server Native Client 11.0"
#Replace SQLSERVER2014CLIENT    12          //   "ODBC Driver 11 for SQL Server"
#Replace SQLSERVER2016CLIENT    13          //   "ODBC Driver 13 for SQL Server"
#Replace SQLSERVER2017CLIENT    17          //   "ODBC Driver 17 for SQL Server"
#Replace SQLSERVER2019CLIENT    18          //   "ODBC Driver 18 for SQL Server"


#Replace SQLSERVER2000DRVRSTR "SQL Server"
#Replace SQLSERVER2005DRVRSTR "SQL Native Client"
#Replace SQLSERVER2008DRVRSTR "SQL Server Native Client 10.0"
#Replace SQLSERVER2012DRVRSTR "SQL Server Native Client 11.0"
#Replace SQLSERVER2014DRVRSTR "ODBC Driver 11 for SQL Server"
#Replace SQLSERVER2016DRVRSTR "ODBC Driver 13 for SQL Server"
#Replace SQLSERVER2017DRVRSTR "ODBC Driver 17 for SQL Server"
#Replace SQLSERVER2019DRVRSTR "ODBC Driver 18 for SQL Server"


#Replace SQLSERVERUNKNOWNCLIENTNAME "Unknown SQL Server client"
#Replace SQLSERVER2000CLIENTNAME "SQL Server (SQL Server 2000 client)"
#Replace SQLSERVER2005CLIENTNAME "SQL Native Client (SQL Server 2005 client)"
#Replace SQLSERVER2008CLIENTNAME "SQL Server Native Client 10.0 (SQL Server 2008 client)"
#Replace SQLSERVER2012CLIENTNAME "SQL Server Native Client 11.0 (SQL Server 2012 client)"
#Replace SQLSERVER2014CLIENTNAME "ODBC Driver 11 for SQL Server (SQL Server 2014 client)"
#Replace SQLSERVER2016CLIENTNAME "ODBC Driver 13 for SQL Server (SQL Server 2016 client)"
#Replace SQLSERVER2017CLIENTNAME "ODBC Driver 17 for SQL Server (SQL Server 2017 client)"
#Replace SQLSERVER2019CLIENTNAME "ODBC Driver 18 for SQL Server (SQL Server 2019 client)"


// SQL Server spcific types.
Define SQL_SS_TIMESTAMPOFFSET   for   (-155) //SQL server datetimeoffset type */
Define SQL_SS_TIME2             for   (-154) //SQL server time type */
Define SQL_SS_XML               for   (-152) //SQL server xml type */
Define SQL_SS_VARIANT           for   (-150) //SQL server variant type */

// SQL Server spcific types.
Define SQL_TYPE_TIMESTAMP2      for   (-200) //SQL server datetime2 type */
Define SQL_VARCHARMAX           for   (-201) //SQL server varchar(max) type */
Define SQL_WVARCHARMAX          for   (-202) //SQL server wvarchar(max) type */
Define SQL_VARBINARYMAX         for   (-203) //SQL server varbinary(max) type */
Define SQL_TYPE_MONEY           for   (-204) //SQL server money type */
Define SQL_TYPE_SMALLMONEY      for   (-205) //SQL server smallmoney type */
Define SQL_TYPE_SMALLDATETIME   for   (-206) //SQL server smalldatetype type */


//   MSSQL_SetConstraint <FileNum> <ConstraintText>
//
//     Setup a constraint for a file.
#COMMAND MSSQL_SetConstraint R R .
    WarningEx GENERAL DFERR_COMP_WARNING_OBSOLETE_CMD "Obsolete_Command: MSSQL_SetConstraint. Use Set_Attribute DF_FILE_SQL_FILTER"
    
    CLI_SetConstraint !1 !2 MSSQLDRV_ID
#ENDCOMMAND


Class cMSSQLHandler is a cCLIHandler
    
    Procedure Construct_Object
        Forward Send Construct_Object
        
        Set psDriverID to MSSQLDRV_ID
    End_Procedure
    
    
    
    //   Extract the list from the out connect string.
    Function ExtractList String sOutConnStr Integer hoStore Returns Integer
        String  sItem
        Integer iStart
        Integer iEnd
        
        If (hoStore = 0) ;
            Move Current_object to hoStore
        
        Send Delete_Data to hoStore
        Move (Pos("{", sOutConnStr)) to iStart
        While (iStart > 0)
            Move (Right(sOutConnStr, Length(sOutConnStr) - iStart)) to sOutConnStr
            If (Left(sOutConnStr, 1) = "}") ;
                Move 0 to iStart
            Else Begin
                Move (Pos(",", sOutConnStr)) to iStart
                Move (Pos("}", sOutConnStr)) to iEnd
                If ((iStart = 0) or (iEnd < iStart)) ;
                    Move iEnd to iStart
                
                If (iStart > 0) ;
                    Set Value of hoStore  (Item_Count(Current_Object)) to (Left(sOutConnStr, iStart - 1))
                
                If (iStart = iEnd) ;
                    Move 0 to iStart
            End
        Loop
        
        Function_Return (Item_Count(hoStore))
    End_Procedure
    
    
    
    //   Call the driver's browse connect function
    Function BrowseConnect String sInConnStr Returns String
        String  sDriver
        String  sOutConnStr
        Integer iArg
        Integer iRetval
        
        Get psDriverID to sDriver
        If (sDriver <> "") Begin
            Move (Repeat(" ", 8192)) to sOutConnStr
            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
        End
        
        Function_Return sOutConnStr
    End_Function// BrowseConnect
    
    
    Function BrowseConnectLocal String sInConnStr Returns String
        String  sDriver
        String  sOutConnStr
        Integer iArg
        Integer iRetval
        
        Move 1 to iArg // Browses only local
        
        Get psDriverID to sDriver
        If (sDriver <> "") Begin
            Move (Repeat(" ", 8192)) to sOutConnStr
            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
        End
        
        Function_Return sOutConnStr
    End_Function// BrowseConnect
    
    
    Function EnumerateServersNetworkOrLocal Integer iNetworkLocal  Returns Integer
        String  sServerList
        Integer iNumServers
        Integer iDriver
        Integer iClientVersion
        String  sDriver
        
        Get DriverIndex MSSQLDRV_ID to iDriver
        
        If (iDriver) Begin
            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
            
            Get SqlServerClientDriverName iClientVersion to sDriver
            
            Move ("DRIVER={" + sDriver + "};") to sDriver
            If (iNetworkLocal = 0) Begin
                Get BrowseConnect sDriver to sServerList
            End
            Else Begin
                Get BrowseConnectLocal sDriver to sServerList
            End
            Get ExtractList sServerList Current_object to iNumServers
        End
        
        Function_Return iNumServers
    End_Function
    
    //   Enumerate the available SQL Server database servers
    //   This function will return all SQL Server instances on the network.
    //   This may take a long time.
    //   To enumerate only local SQL Server instances use EnumerateServersLocal
    Function EnumerateServers Returns Integer
        Integer iNumServers
        Integer iNetworkLocal
        
        Move 0 to iNetworkLocal // 0 = enumerate network servers
        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers

        Function_Return iNumServers
    End_Function
    
    //   Enumerate the available SQL Server database servers
    //   This function will return only return SQL Server instance on the local machine
    //   To enumerate all SQL Server instances in a network use EnumerateServers
    Function EnumerateServersLocal Returns Integer
        Integer iNumServers
        Integer iNetworkLocal
        
        Move 1 to iNetworkLocal // 1 = enumerate local servers
        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
        
        Function_Return iNumServers
    End_Function
    
    //   Enumerate database in a given server.
    Function EnumerateDatabases String sServer String sUser String sPassWord Returns Integer
        Integer hoSQL
        String  sConnect
        String  sDatabase
        Integer hdbc
        Integer hstmt
        Integer iFetchResult iDriver iClientVersion
        
        If (Num_Arguments < 3) ;
            Move "" to sPassWord
        If (Num_Arguments < 2) ;
            Move "" to sUser
        
        If (sUser <> "") ;
            Move ("SERVER=" + Trim(sServer) + ";UID=" + Trim(sUser) + ";PWD=" + Trim(sPassword) + ";") to sConnect
        Else ;
            Move ("SERVER=" + Trim(sServer) + ";Trusted_Connection=yes") to sConnect

        Get DriverIndex MSSQLDRV_ID to iDriver
        Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
        If (iClientVersion >= 18) Begin
            Append sConnect ";Encrypt=Optional;TrustServerCertificate=Yes"
            Move (Replaces(" ", sConnect, "")) to sConnect
        End
        
        Object oEnumDBSQLmanager is a cSQLHandleManager
            Move Current_Object to hoSQL
        End_Object
        
        If (hoSQL <> 0) Begin
            Get SQLConnect of hoSQL "MSSQLDRV" sConnect to hdbc
            If (hdbc <> 0) Begin
                Get SQLOpen of hdbc to hstmt
                If (hstmt <> 0) Begin
                    //   We could do a direct select on the sysdatabases table but we use
                    //   the stored procedure sp_database instead. SQL Server recommends this
                    //   approach in case meta data might change, the stored procedure will
                    //   stay the same.
                    Send SQLSetProcedureName to hstmt "sp_databases"
                    Send SQLCall to hstmt
                    Repeat
                        Get SQLFetch of hstmt to iFetchResult
                        If (iFetchResult <> 0) Begin
                            Get SQLColumnValue of hstmt 1 to sDatabase
                            Set Value  (Item_Count(Current_Object)) to sDatabase
                        End
                    Until (iFetchResult = 0)
                    
                    Send SQLClose to hstmt
                End
                Send SQLDisconnect to hdbc
            End
        End
        Send Destroy_Object to hoSQL
        
        Function_Return (Item_Count(Current_Object))
    End_Function
    
    Function SqlServerClientVersionName Integer iClientVersion  Returns String
        String  sSqlServerClientVersionName
        
        Case Begin
            Case (iClientVersion = SQLSERVER2019CLIENT)
                Move SQLSERVER2019CLIENTNAME to sSqlServerClientVersionName
                Case Break
            
            Case (iClientVersion = SQLSERVER2017CLIENT)
                Move SQLSERVER2017CLIENTNAME to sSqlServerClientVersionName
                Case Break
                
            Case (iClientVersion = SQLSERVER2016CLIENT)
                Move SQLSERVER2016CLIENTNAME to sSqlServerClientVersionName
                Case Break
            
            Case (iClientVersion = SQLSERVER2014CLIENT)
                Move SQLSERVER2014CLIENTNAME to sSqlServerClientVersionName
                Case Break
            
            Case (iClientVersion = SQLSERVER2012CLIENT)
                Move SQLSERVER2012CLIENTNAME to sSqlServerClientVersionName
                Case Break
            
            Case (iClientVersion = SQLSERVER2008CLIENT)
                Move SQLSERVER2008CLIENTNAME to sSqlServerClientVersionName
                Case Break
            
            Case (iClientVersion = SQLSERVER2005CLIENT)
                Move SQLSERVER2005CLIENTNAME to sSqlServerClientVersionName
                Case Break
            
            Case (iClientVersion = SQLSERVER2000CLIENT)
                Move SQLSERVER2000CLIENTNAME to sSqlServerClientVersionName
                Case Break
            
            Case Else
                Move (SFormat("%1 (version %2) ",SQLSERVERUNKNOWNCLIENTNAME,iClientVersion)) to sSqlServerClientVersionName
        Case End
        
        Function_Return sSqlServerClientVersionName
    End_Function

    Function SqlServerClientDriverName Integer iClientVersion  Returns String
        String  sSqlServerClientDriverName
        
        Case Begin
            Case (iClientVersion = SQLSERVER2019CLIENT)
                Move SQLSERVER2019DRVRSTR to sSqlServerClientDriverName
                Case Break

            Case (iClientVersion = SQLSERVER2017CLIENT)
                Move SQLSERVER2017DRVRSTR to sSqlServerClientDriverName
                Case Break
                
            Case (iClientVersion = SQLSERVER2016CLIENT)
                Move SQLSERVER2016DRVRSTR to sSqlServerClientDriverName
                Case Break
            
            Case (iClientVersion = SQLSERVER2014CLIENT)
                Move SQLSERVER2014DRVRSTR to sSqlServerClientDriverName
                Case Break
            
            Case (iClientVersion = SQLSERVER2012CLIENT)
                Move SQLSERVER2012DRVRSTR to sSqlServerClientDriverName
                Case Break
            
            Case (iClientVersion = SQLSERVER2008CLIENT)
                Move SQLSERVER2008DRVRSTR to sSqlServerClientDriverName
                Case Break
            
            Case (iClientVersion = SQLSERVER2005CLIENT)
                Move SQLSERVER2005DRVRSTR to sSqlServerClientDriverName
                Case Break
            
            Case (iClientVersion = SQLSERVER2000CLIENT)
                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
                Case Break
            
            Case Else
                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
        Case End
        
        Function_Return sSqlServerClientDriverName
    End_Function
    
End_Class
