Compiling Program: C:\Projects\DF20\DbUpdateFramework\AppSrc\ReadDFDriverDefXML.src
Memory Available: 2147483646
1>    CompilerLevelWarning All On
1>Use cApplication.pkg
Including file: cApplication.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cApplication.pkg)
1>>>Use Windows.pkg
Using pre-compiled package WINDOWS.PKG
Including file: windows.pkd    (C:\Program Files\DataFlex 20.1\Pkg\windows.pkd)
8163>>>
8163>>>Use LanguageText.pkg
8163>>>Use WinUser.pkg
8163>>>Use WinShell.pkg
Including file: WinShell.pkg    (C:\Program Files\DataFlex 20.1\Pkg\WinShell.pkg)
8163>>>>>Use DLL.pkg
8163>>>>>
8163>>>>>Define S_OK                                     for |CI$00000000 // Operation successful
8163>>>>>Define E_ABORT                                  for |CI$80004004 // Operation aborted
8163>>>>>Define E_ACCESSDENIED                               for |CI$80070005 // General access denied error 
8163>>>>>Define E_FAIL                                   for |CI$80004005 // Unspecified failure
8163>>>>>Define E_HANDLE                                 for |CI$80070006 // Handle that is not valid
8163>>>>>Define E_INVALIDARG                             for |CI$80070057 // One or more arguments are not valid
8163>>>>>Define E_NOINTERFACE                            for |CI$80004002 // No such interface supported
8163>>>>>Define E_NOTIMPL                                for |CI$80004001 // not implemented
8163>>>>>Define E_OUTOFMEMORY                            for |CI$8007000E // Failed to allocate necessary memory
8163>>>>>Define E_POINTER                                for |CI$80004003 // Pointer that is not valid
8163>>>>>Define E_UNEXPECTED                             for |CI$8000FFFF // Unexpected failure
8163>>>>>
8163>>>>>External_Function PathFileExists "PathFileExistsW" shlwapi.dll ;    WString wsPath ;    Returns Integer // Boolean
8164>>>>>
8164>>>>>External_Function PathIsRelative "PathIsRelativeW" shlwapi.dll ;    WString wsPath ;    Returns Integer // Boolean
8165>>>>>
8165>>>>>// When called directly, be sure to use WString types.
8165>>>>>External_Function PathRemoveExtensionW "PathRemoveExtensionW" shlwapi.dll ;    Pointer lpwPath ;    Returns Integer // void
8166>>>>>
8166>>>>>// Compatibility Wrapper Function PathRemoveExtension
8166>>>>>Function PathRemoveExtension Global ;    Pointer lpPath ;    Returns Integer // Boolean
8168>>>>>    
8168>>>>>    Integer iResult
8168>>>>>    UWide   uwPath
8168>>>>>    UWide   uwPath
8168>>>>>
8168>>>>>    Send StringToWide lpPath (&uwPath)
8169>>>>>                    
8169>>>>>    Move (PathRemoveExtensionW (uwPath.lpUText)) to iResult 
8170>>>>>    
8170>>>>>    Send WideToString (&uwPath) lpPath
8171>>>>>        
8171>>>>>    Function_Return iResult
8172>>>>>End_Function
8173>>>>>
8173>>>>>// When called directly, be sure to use WString types.
8173>>>>>External_Function PathRemoveFileSpecW "PathRemoveFileSpecW" shlwapi.dll ;    Pointer lpwPath ;    Returns Integer
8174>>>>>    
8174>>>>>// Compatibility Wrapper Function PathRemoveFileSpec
8174>>>>>Function PathRemoveFileSpec Global ;    Pointer lpPath ;    Returns Integer // Boolean
8176>>>>>    
8176>>>>>    Integer iResult
8176>>>>>    UWide   uwPath
8176>>>>>    UWide   uwPath
8176>>>>>
8176>>>>>    Send StringToWide lpPath (&uwPath)
8177>>>>>                    
8177>>>>>    Move (PathRemoveFileSpecW (uwPath.lpUText)) to iResult 
8178>>>>>
8178>>>>>    Send WideToString (&uwPath) lpPath
8179>>>>>        
8179>>>>>    Function_Return iResult
8180>>>>>End_Function 
8181>>>>>
8181>>>>>Define URL_UNESCAPE_INPLACE                     for |CI$00100000
8181>>>>>Define URL_UNESCAPE_AS_UTF8                     for |CI$00040000
8181>>>>>Define URL_ESCAPE_SEGMENT_ONLY                  for |CI$00002000
8181>>>>>
8181>>>>>// When called directly, be sure to use WString types.
8181>>>>>External_Function UrlUnescapeW "UrlUnescapeW" shlwapi.dll;    Pointer pszwURL;    Pointer pszwUnescaped;    Pointer pcchUnescaped;    DWord   dwFlags;    Returns Integer // S_OK if succesfull
8182>>>>>
8182>>>>>// Compatibility Wrapper Function UrlUnescape
8182>>>>>Function UrlUnescape Global ;    Pointer pszURL;    Pointer pszUnescaped;    Pointer pcchUnescaped;    DWord   dwFlags;    Returns Integer // S_OK if succesfull
8184>>>>>    
8184>>>>>    Integer iResult
8184>>>>>    UWide   uwUrl uwUnescaped
8184>>>>>    UWide   uwUrl uwUnescaped
8184>>>>>
8184>>>>>    Send StringToWide pszURL (&uwUrl)
8185>>>>>
8185>>>>>    Send WideSetBuffer pszUnescaped pcchUnescaped (&uwUnescaped)
8186>>>>>                        
8186>>>>>    Move (UrlUnescapeW (uwUrl.lpUText, uwUnescaped.lpUText, uwUnescaped.lpSize, dwFlags)) to iResult
8187>>>>>    
8187>>>>>    If (dwFlags = URL_UNESCAPE_INPLACE) Begin
8189>>>>>        Send WideToString (&uwUrl) pszUrl 
8190>>>>>    End
8190>>>>>>
8190>>>>>    Else Begin
8191>>>>>        Send WideToString (&uwUnescaped) pszUnescaped  
8192>>>>>    End    
8192>>>>>>
8192>>>>>    
8192>>>>>    Function_Return iResult
8193>>>>>End_Function  
8194>>>>>
8194>>>>>// When called directly, be sure to use WString types.
8194>>>>>External_Function UrlEscapeW "UrlEscapeW" shlwapi.dll;    Pointer pszwUrl;    Pointer pszwEscaped;    Pointer pcchEscaped;    DWord   dwFlags;    Returns Integer
8195>>>>>    
8195>>>>>// Compatibility Wrapper Function UrlEscape
8195>>>>>Function UrlEscape Global ;    Pointer pszUrl;    Pointer pszEscaped;    Pointer pcchEscaped;    DWord   dwFlags;    Returns Integer
8197>>>>>    
8197>>>>>    Integer iResult
8197>>>>>    UWide   uwUrl uwEscaped
8197>>>>>    UWide   uwUrl uwEscaped
8197>>>>>
8197>>>>>    Send StringToWide pszURL (&uwUrl)
8198>>>>>
8198>>>>>    Send WideSetBuffer pszEscaped pcchEscaped (&uwEscaped)
8199>>>>>                        
8199>>>>>    Move (UrlEscapeW (uwUrl.lpUText, uwEscaped.lpUText, pcchEscaped, dwFlags)) to iResult
8200>>>>>
8200>>>>>    Send WideToString (&uwEscaped) pszEscaped      
8201>>>>>    
8201>>>>>    Function_Return iResult
8202>>>>>End_Function 
8203>>>Use cWorkspace.pkg
Including file: cWorkspace.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cWorkspace.pkg)
8203>>>>>Use VdfBase.pkg
8203>>>>>Use tWinStructs.pkg
8203>>>>>Use LanguageText.pkg
8203>>>>>Use WinShell.pkg // Shell API functions
8203>>>>>Use seq_chnl.pkg
Including file: seq_chnl.pkg    (C:\Program Files\DataFlex 20.1\Pkg\seq_chnl.pkg)
8203>>>>>>>Use LanguageText.pkg
8203>>>>>>>Use VDFBase.pkg
Including file: errornum.inc    (C:\Program Files\DataFlex 20.1\Pkg\errornum.inc)
8203>>>>>>>>
8203>>>>>>>>//
8203>>>>>>>>// these will get defined in fmac
8203>>>>>>>>//
8203>>>>>>>>// already defined
8203>>>>>>>>//    #REPLACE DFERR_COMP_BAD_IMAGE_NAME                 |CI4293
8203>>>>>>>>//    #REPLACE DFERR_COMP_CONSTANT_EXPECTED              |CI4299
8203>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_RETURN_TYPE            |CI4310
8203>>>>>>>>//    #REPLACE DFERR_COMP_IMAGE_NOT_FOUND                |CI4311
8203>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_DATATYPE               |CI4315
8203>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_TYPE                   |CI4317
8203>>>>>>>>//    #REPLACE DFERR_COMP_MISSING_ARGUMENT               |CI4320
8203>>>>>>>>//    #REPLACE DFERR_COMP_MISSING_END_OBJECT             |CI4323
8203>>>>>>>>//    #REPLACE DFERR_COMP_UNDEFINED_SYMBOL_IN_ARGUMENT   |CI4328
8203>>>>>>>>//    #REPLACE DFERR_COMP_SYMBOL_ALREADY_DEFINED         |CI4332
8203>>>>>>>>//    #REPLACE DFERR_COMP_TOO_MANY_MESSAGES              |CI4339
8203>>>>>>>>//    #REPLACE DFERR_COMP_UNRESOVLED_CONTROL_BLOCK       |CI4348
8203>>>>>>>>// new compiler errors used by fmac
8203>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_OBJECT_DEFINTION       |CI4388 // object name used is not valid
8203>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_PROPERTY_DEFINTION     |CI4389 // property name cannot be used
8203>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_METHOD_DEFINTION       |CI4390 // method name cannot be used
8203>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_CODE_PLACEMENT         |CI4391 // Location of code, nesting, is wrong
8203>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_METHOD_SYNTAX          |CI4392 // syntax is incorrect for method definition
8203>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_MESSAGE_SYNTAX         |CI4393 // sysntax is incorrect for sending message
8203>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_OBJECT_REFERENCE       |CI4394 // object named in message is invalid
8203>>>>>>>>//    #REPLACE DFERR_COMP_OBSOLETE_UNSUPPORTED_FEATURE   |CI4395 // Obsolete - was 101 (Moveused by fmac)
8203>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_ARGUMENT               |CI4396 // Agument in line is incorrect
8203>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_EXTERNAL_FUNCTION_DEFINITION |CI4397 // name cannot be used
8203>>>>>>>>//    #REPLACE DFERR_COMP_MISSING_DEBUG_INFORMATION      |CI4500 // debug information is not provided
8203>>>>>>>>//    #REPLACE DFERR_COMP_INCOMPATIBLE_DEBUG_INFORMATION |CI4501 // debug inforamtion is is not correct
8203>>>>>>>>//    #REPLACE DFERR_COMP_RECURSIVE_STRUCT_DECLARATION   |CI4513 // recursive struct definition
8203>>>>>>>>//    #REPLACE DFERR_COMP_AMBIGUOUS_SYNTAX               |CI4514 // either Left of "'[' is not array, use '(' if indicator" or "Left of '.' is not of type struct or table"
8203>>>>>>>>
8203>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_STRING_CMD       |CI4531 // pertaining to string commands
8203>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_TYPE_CMD         |CI4532 // pertaining to type/end_type commands
8203>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_CMD              |CI4533 // pertaining to a more generic obsolete command 
8203>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_GLOBAL_FUNCTION  |CI4534 // Global function is obsolete
8203>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_TECHNIQUE        |CI4535 // Using some older technique
8203>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_PACKAGE          |CI4536 // Package is obsolete, remove it if you can
8203>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_CLASS            |CI4537 // Class is obsolete, remove it if you can
8203>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_INDICATOR_USE    |CI4538 // Using indicators anywhere
8203>>>>>>>>//    
8203>>>>>>>>//    #Replace DFERR_COMP_ILLEGAL_CONVERSION                            |CI4539 // Datatype conversion is illegal, would cause runtime-error
8203>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_OBJECT_FUNCTION  |CI4540 // Global function is obsolete
8203>>>>>>>>//    #Replace DFERR_INVALID_LOCALE_CODE                    |CI4541 // Error thown by Set_Attribute DF_LOCALE_CODE on invalid value
8203>>>>>>>>//    #Replace DFERR_STRING_COMPARISON_ERROR                |CI4542 // Error during string comparison (ICU returned an error)
8203>>>>>>>>//    #Replace DFERR_COMP_WARNING_REDEFINING_RETURN_TYPE    |CI4543 // Warning when redefining a function with a different return type
8203>>>>>>>>//    #Replace DFERR_COMP_AMBIGUOUS_FUNCTION_EXPRESSION     |CI4544 // Error when using ambiguous function in expression
8203>>>>>>>>    
8203>>>>>>>>
8203>>>>>>>>
8203>>>>>>>
8203>>>>>>>Define DF_SEQ_CHANNEL_NOT_AVAILABLE for -2
8203>>>>>>>Define DF_SEQ_CHANNEL_ERROR         for -1
8203>>>>>>>Define DF_SEQ_CHANNEL_MIN           for 0
8203>>>>>>>Define DF_SEQ_CHANNEL_MAX           for 9
8203>>>>>>>Define DF_SEQ_START_CHANNEL         for 2 // leave 0 and 1 til last
8203>>>>>>>// so that programs that use direct_input/output
8203>>>>>>>// w/o specifying a channel will work.
8203>>>>>>>Enum_List
8203>>>>>>>    Define DF_SEQ_CHANNEL_MODE_CLOSED
8203>>>>>>>    Define DF_SEQ_CHANNEL_MODE_OPEN
8203>>>>>>>    Define DF_SEQ_CHANNEL_MODE_OUTPUT
8203>>>>>>>    Define DF_SEQ_CHANNEL_MODE_INPUT
8203>>>>>>>End_Enum_List
8203>>>>>>>
8203>>>>>>>Enum_List
8203>>>>>>>    Define DF_SEQ_CHANNEL_ERROR_MODE_NONE
8203>>>>>>>    Define DF_SEQ_CHANNEL_ERROR_MODE_ALL
8203>>>>>>>End_Enum_List
8203>>>>>>>
8203>>>>>>>Integer Seq$Channel$Error$Mode
8203>>>>>>>
8203>>>>>>>Procedure Set Seq_Channel_Error_Mode Global Integer Mode
8205>>>>>>>    Move Mode to Seq$Channel$Error$Mode
8206>>>>>>>End_Procedure
8207>>>>>>>
8207>>>>>>>Function Seq_Channel_Error_Mode Global Returns Integer
8209>>>>>>>    Function_Return Seq$Channel$Error$Mode
8210>>>>>>>End_Function
8211>>>>>>>
8211>>>>>>>Object Seq_Channel_List is an Array
8213>>>>>>>    Procedure Initialize
8216>>>>>>>        Integer Itm
8216>>>>>>>        
8216>>>>>>>        Move DF_SEQ_CHANNEL_MIN to Itm
8217>>>>>>>        
8217>>>>>>>        While Itm LE DF_SEQ_CHANNEL_MAX
8221>>>>>>>            Set Array_Value  Itm to DF_SEQ_CHANNEL_MODE_CLOSED
8222>>>>>>>            Increment Itm
8223>>>>>>>        Loop
8224>>>>>>>>
8224>>>>>>>    End_Procedure
8225>>>>>>>    
8225>>>>>>>    Send Initialize
8226>>>>>>>End_Object
8227>>>>>>>
8227>>>>>>>Set Seq_Channel_Error_Mode to DF_SEQ_CHANNEL_ERROR_MODE_ALL
8228>>>>>>>
8228>>>>>>>Function Seq_Channel_Mode Global Integer Chnl Returns Integer
8230>>>>>>>    Function_Return (Integer_Value(Seq_Channel_List(Self), Chnl))
8231>>>>>>>End_Function
8232>>>>>>>
8232>>>>>>>Procedure Set Seq_Channel_Mode Global Integer Chnl Integer Mode
8234>>>>>>>    Set Array_Value of (Seq_Channel_List(Self))  Chnl to Mode
8235>>>>>>>End_Procedure
8236>>>>>>>
8236>>>>>>>Function Seq_New_Channel Global Returns Integer
8238>>>>>>>    Integer Obj Chnl
8238>>>>>>>    
8238>>>>>>>    Move DF_SEQ_START_CHANNEL to Chnl
8239>>>>>>>    
8239>>>>>>>    While Chnl LE DF_SEQ_CHANNEL_MAX
8243>>>>>>>        If (Seq_Channel_Mode(Chnl) = DF_SEQ_CHANNEL_MODE_CLOSED) Begin
8245>>>>>>>            Set Seq_Channel_Mode Chnl to DF_SEQ_CHANNEL_MODE_OPEN
8246>>>>>>>            Function_Return Chnl
8247>>>>>>>        End
8247>>>>>>>>
8247>>>>>>>        
8247>>>>>>>        Increment Chnl
8248>>>>>>>    Loop
8249>>>>>>>>
8249>>>>>>>    
8249>>>>>>>    // wrap back to beginning
8249>>>>>>>    Move 0 to Chnl
8250>>>>>>>    
8250>>>>>>>    While Chnl LT DF_SEQ_START_CHANNEL
8254>>>>>>>        If (Seq_Channel_Mode(Chnl) = DF_SEQ_CHANNEL_MODE_CLOSED) Begin
8256>>>>>>>            Set Seq_Channel_Mode Chnl to DF_SEQ_CHANNEL_MODE_OPEN
8257>>>>>>>            Function_Return Chnl
8258>>>>>>>        End
8258>>>>>>>>
8258>>>>>>>        
8258>>>>>>>        Increment Chnl
8259>>>>>>>    Loop
8260>>>>>>>>
8260>>>>>>>    
8260>>>>>>>    Function_Return DF_SEQ_CHANNEL_NOT_AVAILABLE
8261>>>>>>>End_Function
8262>>>>>>>
8262>>>>>>>Procedure Seq_Release_Channel Global Integer Chnl
8264>>>>>>>    If ((Chnl >= DF_SEQ_CHANNEL_MIN) and (Chnl <= DF_SEQ_CHANNEL_MAX)) ;        Set Seq_Channel_Mode Chnl to DF_SEQ_CHANNEL_MODE_CLOSED
8267>>>>>>>End_Procedure
8268>>>>>>>
8268>>>>>>>Function Seq_Open_Input_Channel Global String Dvc Returns Integer
8270>>>>>>>    Integer Chnl
8270>>>>>>>    
8270>>>>>>>    Move (Seq_New_Channel()) to Chnl
8271>>>>>>>    
8271>>>>>>>    If (Chnl <= DF_SEQ_CHANNEL_ERROR) Begin
8273>>>>>>>        If (Seq_Channel_Error_Mode() = DF_SEQ_CHANNEL_ERROR_MODE_ALL) ;            Error DFERR_CANT_OPEN_INPUT_FILE (Dvc + ":" *C_$NoOpenChannels)
8276>>>>>>>        Function_Return Chnl
8277>>>>>>>    End
8277>>>>>>>>
8277>>>>>>>    
8277>>>>>>>    Move False to Err
8278>>>>>>>    Direct_Input channel Chnl Dvc
8280>>>>>>>    
8280>>>>>>>    If (Err) Begin
8282>>>>>>>        Send Seq_Release_Channel Chnl
8283>>>>>>>        Function_Return DF_SEQ_CHANNEL_ERROR
8284>>>>>>>    End
8284>>>>>>>>
8284>>>>>>>    
8284>>>>>>>    Set Seq_Channel_Mode Chnl to DF_SEQ_CHANNEL_MODE_INPUT
8285>>>>>>>    
8285>>>>>>>    Function_Return Chnl
8286>>>>>>>End_Function
8287>>>>>>>
8287>>>>>>>Function Seq_Open_Output_Channel Global String Dvc Returns Integer
8289>>>>>>>    Integer Chnl
8289>>>>>>>    
8289>>>>>>>    Move (Seq_New_Channel()) to Chnl
8290>>>>>>>    
8290>>>>>>>    If (Chnl <= DF_SEQ_CHANNEL_ERROR) Begin
8292>>>>>>>        If (Seq_Channel_Error_Mode() = DF_SEQ_CHANNEL_ERROR_MODE_ALL) Begin
8294>>>>>>>            Error DFERR_CANT_OPEN_OUTPUT_FILE (Dvc + ":" *C_$ChannelNotAvailable)
8295>>>>>>>>
8295>>>>>>>            Move DF_SEQ_CHANNEL_ERROR to Chnl
8296>>>>>>>        End
8296>>>>>>>>
8296>>>>>>>        
8296>>>>>>>        Function_Return Chnl
8297>>>>>>>    End
8297>>>>>>>>
8297>>>>>>>    
8297>>>>>>>    Move False to Err
8298>>>>>>>    Direct_Output channel Chnl Dvc
8300>>>>>>>    
8300>>>>>>>    If (Err) Begin
8302>>>>>>>        Send Seq_Release_Channel Chnl
8303>>>>>>>        Function_Return DF_SEQ_CHANNEL_ERROR
8304>>>>>>>    End
8304>>>>>>>>
8304>>>>>>>    
8304>>>>>>>    Set Seq_Channel_Mode Chnl to DF_SEQ_CHANNEL_MODE_OUTPUT
8305>>>>>>>    
8305>>>>>>>    Function_Return Chnl
8306>>>>>>>End_Function
8307>>>>>>>
8307>>>>>>>Function Seq_Append_Output_Channel Global String Dvc Returns Integer
8309>>>>>>>    Integer Chnl
8309>>>>>>>    
8309>>>>>>>    Move (Seq_New_Channel()) to Chnl
8310>>>>>>>    
8310>>>>>>>    If (Chnl <= DF_SEQ_CHANNEL_ERROR) Begin
8312>>>>>>>        If (Seq_Channel_Error_Mode() = DF_SEQ_CHANNEL_ERROR_MODE_ALL) Begin
8314>>>>>>>            Error DFERR_CANT_OPEN_OUTPUT_FILE (Dvc + ":" *C_$ChannelNotAvailable)
8315>>>>>>>>
8315>>>>>>>            Move DF_SEQ_CHANNEL_ERROR to Chnl
8316>>>>>>>        End
8316>>>>>>>>
8316>>>>>>>        
8316>>>>>>>        Function_Return Chnl
8317>>>>>>>    End
8317>>>>>>>>
8317>>>>>>>    
8317>>>>>>>    Move False to Err
8318>>>>>>>    Append_Output channel Chnl Dvc
8320>>>>>>>    
8320>>>>>>>    If (Err) Begin
8322>>>>>>>        Send Seq_Release_Channel Chnl
8323>>>>>>>        Function_Return DF_SEQ_CHANNEL_ERROR
8324>>>>>>>    End
8324>>>>>>>>
8324>>>>>>>    
8324>>>>>>>    Set Seq_Channel_Mode Chnl to DF_SEQ_CHANNEL_MODE_OUTPUT
8325>>>>>>>    
8325>>>>>>>    Function_Return Chnl
8326>>>>>>>End_Function
8327>>>>>>>
8327>>>>>>>Procedure Seq_Close_Channel Global Integer Chnl
8329>>>>>>>    Integer Mode
8329>>>>>>>    
8329>>>>>>>    If ((Chnl >= DF_SEQ_CHANNEL_MIN) and (Chnl <= DF_SEQ_CHANNEL_MAX)) Begin
8331>>>>>>>        Move (Seq_Channel_Mode(Chnl)) to Mode
8332>>>>>>>        
8332>>>>>>>        If (Mode = DF_SEQ_CHANNEL_MODE_OUTPUT) ;            Close_Output channel Chnl
8336>>>>>>>        Else If (Mode = DF_SEQ_CHANNEL_MODE_INPUT) ;            Close_Input channel Chnl
8341>>>>>>>        // If channel not open, release it! No (fatal) Error.
8341>>>>>>>        Send Seq_Release_Channel Chnl
8342>>>>>>>    End
8342>>>>>>>>
8342>>>>>>>End_Procedure
8343>>>>>>>
8343>>>>>Use GlobalFunctionsProcedures.pkg
8343>>>>>
8343>>>>>Register_Function IsRegistered String sWorkspace Returns Boolean
8343>>>>>Register_Function VdfSystemDfPath   Returns String
8343>>>>>Register_Function VdfSystemMakePath Returns String
8343>>>>>
8343>>>>>Enum_List
8343>>>>>    Define wsWorkspaceOpened       // WS opened ok
8343>>>>>    Define wsWorkspaceNotFound     // the named WS was not found in the global list
8343>>>>>    Define wsWorkspaceFileNotFound // the WS file was not found
8343>>>>>    Define wsDataPathEmpty         // the DataPath entry was empty
8343>>>>>    Define wsFileListEmpty         // The FileList entry was empty
8343>>>>>    Define wsFileListNotExist      // The FileList.cfg file could not be found
8343>>>>>End_Enum_List
8343>>>>>
8343>>>>>
8343>>>>>Define INVALID_HANDLE_VALUE for -1
8343>>>>>Define MAX_PATH for 260   // Symbol for maximum length of a path
8343>>>>>
8343>>>>>
8343>>>>>// Wide version
8343>>>>>External_Function winFindFirstFileW "FindFirstFileW" Kernel32.dll ;    WString wFileSpec ;    Pointer lpsWin32FindData ;    Returns Handle
8344>>>>>
8344>>>>>// Wrapper Function winFindFirstFile
8344>>>>>Function winFindFirstFile Global ;    String  sFileSpec ;    Pointer lpsWin32FindData ;    Returns Handle
8346>>>>>    
8346>>>>>    Handle  hResult
8346>>>>>    Integer iVoid iFilenameSize iAltFilenameSize
8346>>>>>    Integer iSizeOfStructWithoutStrings
8346>>>>>    String  sFileName sAlternateFileName
8346>>>>>    WString wFileName wAlternateFileName
8346>>>>>    Pointer pWFD
8346>>>>>    tWin32FindDataW tWFD
8346>>>>>    tWin32FindDataW tWFD
8346>>>>>    
8346>>>>>    // lpsWin32FindData is a pointer to a WIN32_FIND_DATAW struct, which contains pointers to UTF-8 strings.
8346>>>>>    // These string must be converted to UTF-16 and afterwards back to UTF-8.
8346>>>>>
8346>>>>>    Move (SizeOfType(tWin32FindData) - MAX_PATH - MAX_ALTPATH) to iSizeOfStructWithoutStrings
8347>>>>>    Move (AddressOf(tWFD)) to pWFD
8348>>>>>    
8348>>>>>    // Call the function
8348>>>>>    Move (winFindFirstFileW (sFileSpec, pWFD)) to hResult
8349>>>>>
8349>>>>>    // Copy the struct contents back to the incoming one.
8349>>>>>    Move (CopyMemory(lpsWin32FindData, pWFD, iSizeOfStructWithoutStrings)) to iVoid
8350>>>>>    
8350>>>>>    // But do the strings separately and convert them to UTF8
8350>>>>>    Move (PointerToWString(pWFD + iSizeOfStructWithoutStrings)) to sFileName
8351>>>>>    Move (PointerToWString(pWFD + iSizeOfStructWithoutStrings + (MAX_PATH*2))) to sAlternateFileName
8352>>>>>    
8352>>>>>    // Extend string with 0 to the maximum number of characters
8352>>>>>    If (SizeOfString(sFileName)<MAX_PATH) ;        Append sFileName (Repeat(Character(0), MAX_PATH - SizeOfString(sFileName)))
8355>>>>>    If (SizeOfString(sAlternateFileName)<MAX_ALTPATH) ;        Append sAlternateFileName (Repeat(Character(0), MAX_ALTPATH - SizeOfString(sAlternateFileName)))
8358>>>>>        
8358>>>>>    Move (MemCopy(lpsWin32FindData + iSizeOfStructWithoutStrings, AddressOf(sFileName), MAX_PATH)) to iVoid
8359>>>>>    Move (MemCopy(lpsWin32FindData + iSizeOfStructWithoutStrings + MAX_PATH, AddressOf(sAlternateFileName), MAX_ALTPATH)) to iVoid
8360>>>>>    
8360>>>>>    Function_Return hResult
8361>>>>>End_Function
8362>>>>>
8362>>>>>// When used directly, be sure to use WString types (UTF16).
8362>>>>>External_Function winFindNextFileW "FindNextFileW" Kernel32.dll ;    Handle  hFindFile ;    Pointer lpsWin32FindData ;    Returns Integer
8363>>>>>
8363>>>>>// Wrapper Function winFindNextFile
8363>>>>>Function winFindNextFile Global ;    Handle  hFindFile ;    Pointer lpsWin32FindData ;    Returns Integer
8365>>>>>    
8365>>>>>    Integer iResult iVoid iFilenameSize iAltFilenameSize
8365>>>>>    Integer iSizeOfStructWithoutStrings
8365>>>>>    String  sFileName sAlternateFileName
8365>>>>>    WString wFileName wAlternateFileName
8365>>>>>    Pointer pWFD
8365>>>>>    tWin32FindDataW tWFD
8365>>>>>    tWin32FindDataW tWFD
8365>>>>>
8365>>>>>    // lpsWin32FindData is a pointer to a WIN32_FIND_DATAW struct, which contains pointers to UTF-8 strings.
8365>>>>>    // These string must be converted to UTF-16 and afterwards back to UTF-8.
8365>>>>>
8365>>>>>    // Copy the struct to a local struct that can be modified to UTF-16.
8365>>>>>    Move (SizeOfType(tWin32FindData) - MAX_PATH - MAX_ALTPATH) to iSizeOfStructWithoutStrings
8366>>>>>    Move (AddressOf(tWFD)) to pWFD
8367>>>>>    Move (MemCopy(pWFD, lpsWin32FindData, iSizeOfStructWithoutStrings)) to iVoid
8368>>>>>    // But do the strings separately and convert them to wide strings (UTF16).
8368>>>>>    Move (PointerToString(lpsWin32FindData + iSizeOfStructWithoutStrings)) to wFileName
8369>>>>>    Move (PointerToString(lpsWin32FindData + iSizeOfStructWithoutStrings + MAX_PATH)) to wAlternateFileName
8370>>>>>    Move (MemCopy(pWFD + iSizeOfStructWithoutStrings, AddressOf(wFileName), SizeOfString(wFileName)*2)) to iVoid
8371>>>>>    Move (MemCopy(pWFD + iSizeOfStructWithoutStrings + (MAX_PATH*2), AddressOf(wAlternateFileName), SizeOfString(wAlternateFileName)*2)) to iVoid
8372>>>>>    
8372>>>>>    // Call the function
8372>>>>>    Move (winFindNextFileW (hFindFile, pWFD)) to iResult  
8373>>>>>
8373>>>>>    // Copy the struct contents back to the incoming one.
8373>>>>>    Move (CopyMemory(lpsWin32FindData, pWFD, iSizeOfStructWithoutStrings)) to iVoid
8374>>>>>    
8374>>>>>    // But do the strings separately and convert them to UTF8
8374>>>>>    Move (PointerToWString(pWFD + iSizeOfStructWithoutStrings)) to sFileName
8375>>>>>    Move (PointerToWString(pWFD + iSizeOfStructWithoutStrings + (MAX_PATH*2))) to sAlternateFileName
8376>>>>>    
8376>>>>>    // Extend string with 0 to the maximum number of characters
8376>>>>>    If (SizeOfString(sFileName)<MAX_PATH) ;        Append sFileName (Repeat(Character(0), MAX_PATH - SizeOfString(sFileName)))
8379>>>>>    If (SizeOfString(sAlternateFileName)<MAX_ALTPATH) ;        Append sAlternateFileName (Repeat(Character(0), MAX_ALTPATH - SizeOfString(sAlternateFileName)))
8382>>>>>        
8382>>>>>    Move (MemCopy(lpsWin32FindData + iSizeOfStructWithoutStrings, AddressOf(sFileName), MAX_PATH)) to iVoid
8383>>>>>    Move (MemCopy(lpsWin32FindData + iSizeOfStructWithoutStrings + MAX_PATH, AddressOf(sAlternateFileName), MAX_ALTPATH)) to iVoid
8384>>>>>    
8384>>>>>    Function_Return iResult
8385>>>>>End_Function
8386>>>>>
8386>>>>>
8386>>>>>External_Function winFindClose "FindClose" Kernel32.dll ;    Handle hOpenFile Returns Integer
8387>>>>>
8387>>>>>Function DoesFileExist Global String sFilename Returns Boolean
8389>>>>>    tWin32FindDataW Win32FindData
8389>>>>>    tWin32FindDataW Win32FindData
8389>>>>>    String sMask
8389>>>>>    Integer iVoid
8389>>>>>    Handle hFileFind
8389>>>>>    
8389>>>>>    Move (winFindFirstFileW(sFilename, AddressOf(Win32FindData))) to hFileFind
8390>>>>>    If (hFileFind <> INVALID_HANDLE_VALUE) Begin
8392>>>>>        Move (winFindClose(hFileFind)) to iVoid
8393>>>>>    End
8393>>>>>>
8393>>>>>    
8393>>>>>    Function_Return (hFileFind <> INVALID_HANDLE_VALUE)
8394>>>>>End_Function
8395>>>>>
8395>>>>>
8395>>>>>Use cIniFile.pkg
Including file: cIniFile.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cIniFile.pkg)
8395>>>>>>>Use Dll.pkg
8395>>>>>>>Use errornum.inc
8395>>>>>>>Use LanguageText.pkg
8395>>>>>>>Use GlobalFunctionsProcedures.pkg
8395>>>>>>>Use seq_chnl.pkg
8395>>>>>>>Use CharTranslate.pkg
8395>>>>>>>Use cCharTranslate.pkg
Including file: cCharTranslate.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCharTranslate.pkg)
8395>>>>>>>>>Use Variant.pkg
Including file: Variant.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Variant.pkg)
8395>>>>>>>>>>>Use ui
8395>>>>>>>>>>>Use errornum.inc
8395>>>>>>>>>>>
8395>>>>>>>>>>>// OLE VARENUM usage keys (from wtypes.h)
8395>>>>>>>>>>>
8395>>>>>>>>>>>
8395>>>>>>>>>>>External_Function SysAllocString "SysAllocString" oleaut32.dll Pointer pStr Returns Pointer
8396>>>>>>>>>>>External_Function SysStringLen "SysStringLen" oleaut32.dll Pointer vStr Returns Integer
8397>>>>>>>>>>>
8397>>>>>>>>>>>// Returns the character length of the variant string. 
8397>>>>>>>>>>>Function VariantStringLength Global Variant bStr Returns Integer
8399>>>>>>>>>>>    Pointer pVariant
8399>>>>>>>>>>>    Integer iLen iType
8399>>>>>>>>>>>
8399>>>>>>>>>>>    Move (AddressOf(bStr)) to pVariant
8400>>>>>>>>>>>    Move (DeRefW(pVariant,0)) to iType
8401>>>>>>>>>>>    If (iType=OLE_VT_Empty) Begin
8403>>>>>>>>>>>        Function_Return 0
8404>>>>>>>>>>>    End
8404>>>>>>>>>>>>
8404>>>>>>>>>>>    If (iType<>OLE_VT_Bstr) Begin
8406>>>>>>>>>>>        Error DFERR_BAD_TYPE_EXPRESSION "In variable is not a variant bstr"
8407>>>>>>>>>>>>
8407>>>>>>>>>>>        Function_Return 0
8408>>>>>>>>>>>    End
8408>>>>>>>>>>>>
8408>>>>>>>>>>>    Move (SysStringLen(DeRefPtr(pVariant,8))) to iLen
8409>>>>>>>>>>>    Function_Return iLen
8410>>>>>>>>>>>End_Function
8411>>>>>>>>>>>
8411>>>>>>>>>>>
8411>>>>>>>>>>>// returns true if char string in the buffer can fit into a string.
8411>>>>>>>>>>>// Changed this to always return True, because the Max_Argument_Size limitation has been removed.
8411>>>>>>>>>>>Function ValidStringBufferLength Global Pointer pData Returns Boolean
8413>>>>>>>>>>>    Function_Return True
8414>>>>>>>>>>>End_Function
8415>>>>>>>>>>>    
8415>>>>>>>>>Use CharTranslate.pkg
8415>>>>>>>>>Use GlobalFunctionsProcedures.pkg
8415>>>>>>>>>
8415>>>>>>>>>// special for UTF16, which is really not a code page at all
8415>>>>>>>>>Define CP_UTF16 for -1
8415>>>>>>>>>
8415>>>>>>>>>Class cCharTranslate is a cObject
8416>>>>>>>>>    
8416>>>>>>>>>    
8416>>>>>>>>>    // UTF16 functions that allow you to move between a char (UTF8, ANS, OEM) and a UTF16 buffer
8416>>>>>>>>>    
8416>>>>>>>>>    // converts from buffer of encoded eCharType to a new UTF16 buffer
8416>>>>>>>>>    // note: Utf16FromBuffer with eCharType of CP_OEM can replace OEMToUTF16Buffer
8416>>>>>>>>>    Function Utf16FromBuffer  Pointer pMultiCharBuffer Integer eCharType Integer ByRef iLen Returns Pointer
8418>>>>>>>>>        Pointer pWideBuf
8418>>>>>>>>>        Integer iWideBufLen iStrLen
8418>>>>>>>>>        Move 0 to pWideBuf
8419>>>>>>>>>        Move 0 to iLen
8420>>>>>>>>>        If (pMultiCharBuffer) Begin
8422>>>>>>>>>            Move (CStringSize(pMultiCharBuffer)) to iStrLen
8423>>>>>>>>>            If (iStrLen) Begin
8425>>>>>>>>>                Move (MultiToWideBuffer(eCharType,pMultiCharBuffer, iStrLen, AddressOf(pWideBuf))) to iLen
8426>>>>>>>>>                If (iLen=0) Begin
8428>>>>>>>>>                    Function_Return 0
8429>>>>>>>>>                End
8429>>>>>>>>>>
8429>>>>>>>>>            End
8429>>>>>>>>>>
8429>>>>>>>>>        End
8429>>>>>>>>>>
8429>>>>>>>>>        Function_Return pWideBuf
8430>>>>>>>>>    End_Function
8431>>>>>>>>>    
8431>>>>>>>>>    Function Utf16FromStr String sValue Integer eCharType Integer ByRef iLen Returns Pointer
8433>>>>>>>>>        Pointer pValue
8433>>>>>>>>>        Get Utf16FromBuffer (AddressOf(sValue)) eCharType (&iLen) to pValue
8434>>>>>>>>>        Function_Return pValue
8435>>>>>>>>>    End_Function
8436>>>>>>>>>    
8436>>>>>>>>>    // converts from utf16 buffer to a new buffer of encoded eCharType
8436>>>>>>>>>    // note: Utf16ToBuffer with eCharType of CP_OEM can replace UTFtoOEMBuffer
8436>>>>>>>>>    Function Utf16ToBuffer Pointer pWideBuf Integer eCharType Integer iLen Returns Pointer
8438>>>>>>>>>        Pointer pRetBuf
8438>>>>>>>>>        Integer iRetBufLen
8438>>>>>>>>>        Move 0 to pRetBuf
8439>>>>>>>>>        If (pWideBuf and iLen) Begin
8441>>>>>>>>>            Move (WideToMultiBuffer(eCharType,pWideBuf,iLen,AddressOf(pRetBuf))) to iRetBufLen
8442>>>>>>>>>            If (iRetBufLen=0) Begin
8444>>>>>>>>>                Function_Return 0
8445>>>>>>>>>            End
8445>>>>>>>>>>
8445>>>>>>>>>        End
8445>>>>>>>>>>
8445>>>>>>>>>        Function_Return pRetBuf
8446>>>>>>>>>    End_Function
8447>>>>>>>>>    
8447>>>>>>>>>    Function Utf16ToStr Pointer pWideBuf Integer eCharType Integer iLen Returns String
8449>>>>>>>>>        String sValue
8449>>>>>>>>>        Pointer pValue
8449>>>>>>>>>        Boolean bOk
8449>>>>>>>>>        Get Utf16ToBuffer pWideBuf eCharType iLen to pValue
8450>>>>>>>>>        If (not(ValidStringBufferLength(pValue))) Begin
8452>>>>>>>>>            Error DFERR_PROGRAM "Buffer exceeds maximum string size"
8453>>>>>>>>>>
8453>>>>>>>>>        End
8453>>>>>>>>>>
8453>>>>>>>>>        Move (PointerToString(pValue)) to sValue
8454>>>>>>>>>        Move (Free(pValue)) to bOk
8455>>>>>>>>>        Function_Return sValue
8456>>>>>>>>>    End_Function
8457>>>>>>>>>    
8457>>>>>>>>>    
8457>>>>>>>>>    // UTF8 functions that allow you to move between a UTF8 buffer and other single char OEM/ASNI
8457>>>>>>>>>    
8457>>>>>>>>>    Function Utf8FromBuffer Pointer pMultiCharBuffer Integer eCharType Returns Pointer
8459>>>>>>>>>        Pointer pWideBuf
8459>>>>>>>>>        Pointer pUtf8Buf
8459>>>>>>>>>        Integer iLen iMultiBufLen
8459>>>>>>>>>        Boolean bOk
8459>>>>>>>>>        Get Utf16FromBuffer pMultiCharBuffer eCharType (&iLen) to pWideBuf
8460>>>>>>>>>        If (iLen=0) Begin
8462>>>>>>>>>            Function_Return 0
8463>>>>>>>>>        End
8463>>>>>>>>>>
8463>>>>>>>>>        Move 0 to pUtf8Buf
8464>>>>>>>>>        Move (WideToMultiBuffer(CP_UTF8,pWideBuf,iLen,AddressOf(pUtf8Buf))) to iMultiBufLen
8465>>>>>>>>>        Move (Free(pWideBuf)) to bOk
8466>>>>>>>>>        Function_Return pUtf8Buf
8467>>>>>>>>>    End_Function
8468>>>>>>>>>    
8468>>>>>>>>>    Function Utf8FromStr String sValue Integer eCharType Returns Pointer
8470>>>>>>>>>        Pointer pValue
8470>>>>>>>>>        Get Utf8FromBuffer (AddressOf(sValue)) eCharType to pValue
8471>>>>>>>>>        Function_Return pValue
8472>>>>>>>>>    End_Function
8473>>>>>>>>>    
8473>>>>>>>>>    Function Utf8ToBuffer Pointer pMultiCharBuffer Integer eCharType Returns Pointer
8475>>>>>>>>>        Pointer pRetBuf pWideBuf
8475>>>>>>>>>        Integer iWideBufLen
8475>>>>>>>>>        Integer iRetBufLen
8475>>>>>>>>>        Boolean bOk
8475>>>>>>>>>        Get Utf16FromBuffer pMultiCharBuffer CP_UTF8 (&iWideBufLen) to pWideBuf
8476>>>>>>>>>        If (iWideBufLen=0) Begin
8478>>>>>>>>>            Function_Return 0
8479>>>>>>>>>        End
8479>>>>>>>>>>
8479>>>>>>>>>        Move 0 to pRetBuf
8480>>>>>>>>>        Move (WideToMultiBuffer(eCharType,pWideBuf,iWideBufLen,AddressOf(pRetBuf))) to iRetBufLen
8481>>>>>>>>>        Move (Free(pWideBuf)) to bOk
8482>>>>>>>>>        Function_Return pRetBuf
8483>>>>>>>>>    End_Function
8484>>>>>>>>>    
8484>>>>>>>>>    Function Utf8ToStr Pointer pWideBuf Integer eCharType Returns String
8486>>>>>>>>>        String sValue
8486>>>>>>>>>        Pointer pValue
8486>>>>>>>>>        Boolean bOk
8486>>>>>>>>>        Get Utf8ToBuffer pWideBuf eCharType to pValue
8487>>>>>>>>>        If (not(ValidStringBufferLength(pValue))) Begin
8489>>>>>>>>>            Error DFERR_PROGRAM "Buffer exceeds maximum string size"
8490>>>>>>>>>>
8490>>>>>>>>>        End
8490>>>>>>>>>>
8490>>>>>>>>>        Move (PointerToString(pValue)) to sValue
8491>>>>>>>>>        Move (Free(pValue)) to bOk
8492>>>>>>>>>        Function_Return sValue
8493>>>>>>>>>    End_Function
8494>>>>>>>>>    
8494>>>>>>>>>    // Variant functions that allow you to move between a variant string (wide char) and other
8494>>>>>>>>>    // buffer and string types. Normally a Move vVar to sVar does a OEM/Unicode translation. These
8494>>>>>>>>>    // allow you translate to other formats (UTF8, OEM and ANSI)
8494>>>>>>>>>    
8494>>>>>>>>>    // Create data buffer from variant string. data buffer is encoded by eCharType
8494>>>>>>>>>    Function VariantStrToBuffer Variant vValue Integer eCharType Returns Pointer
8496>>>>>>>>>        Pointer pBSTR pRetStr
8496>>>>>>>>>        Integer iLen iBufLen
8496>>>>>>>>>        Boolean bOk
8496>>>>>>>>>        Move 0 to pRetStr
8497>>>>>>>>>        Move (VariantStringLength( vValue)) to iLen
8498>>>>>>>>>        If (iLen) Begin
8500>>>>>>>>>            Move (DeRefPtr(AddressOf(vValue),8)) to pBSTR
8501>>>>>>>>>            Move (WideToMultiBuffer(eCharType,pBSTR,iLen,AddressOf(pRetStr))) to iBufLen
8502>>>>>>>>>        End
8502>>>>>>>>>>
8502>>>>>>>>>        Function_Return pRetStr
8503>>>>>>>>>    End_Function
8504>>>>>>>>>    
8504>>>>>>>>>    // Create string from variant string. data buffer is encoded by eCharType
8504>>>>>>>>>    
8504>>>>>>>>>    Function VariantStrToStr Variant vValue Integer eCharType Returns String
8506>>>>>>>>>        String sValue
8506>>>>>>>>>        Pointer pValue
8506>>>>>>>>>        Boolean bOk
8506>>>>>>>>>        Get VariantStrToBuffer vValue eCharType to pValue
8507>>>>>>>>>        If (not(ValidStringBufferLength(pValue))) Begin
8509>>>>>>>>>            Error DFERR_PROGRAM "Buffer exceeds maximum string size"
8510>>>>>>>>>>
8510>>>>>>>>>        End
8510>>>>>>>>>>
8510>>>>>>>>>        Move (PointerToString(pValue)) to sValue
8511>>>>>>>>>        Move (Free(pValue)) to bOk
8512>>>>>>>>>        Function_Return sValue
8513>>>>>>>>>    End_Function
8514>>>>>>>>>    
8514>>>>>>>>>    // Create variant string from data buffer. data buffer is encoded by eCharType
8514>>>>>>>>>    
8514>>>>>>>>>    Function VariantStrFromBuffer Pointer pSource Integer eCodeType Returns Variant
8516>>>>>>>>>        Variant vValue
8516>>>>>>>>>        Pointer pvValue
8516>>>>>>>>>        Boolean bOk
8516>>>>>>>>>        Pointer pWStr
8516>>>>>>>>>        Move "" to vValue
8517>>>>>>>>>        If (pSource) Begin
8519>>>>>>>>>            //Initialize pWstr variable so it has the correct type and AddressOf will return a proper pointer
8519>>>>>>>>>            Move 0 to pWStr
8520>>>>>>>>>            //Convert the Ansi string to Unicode
8520>>>>>>>>>            Move (MultiToWideBuffer( eCodeType, pSource, CStringSize(pSource), AddressOf(pWStr))) to bOk
8521>>>>>>>>>            //Initialize vValue variable so it has the correct type and AddressOf will return a proper pointer
8521>>>>>>>>>            Move 0 to vValue
8522>>>>>>>>>            Move (AddressOf(vValue)) to pvValue
8523>>>>>>>>>            //Change the Variant type to VT_BSTR
8523>>>>>>>>>            Move (StoreDw(pvValue,0,OLE_VT_Bstr)) to bOk
8524>>>>>>>>>            //Allocate a proper COM BSTR, assign the Unicode string, and store the BSTR in the Variant variable
8524>>>>>>>>>            Move (StorePtr(pvValue,8,SysAllocString(pWStr))) to bOk
8525>>>>>>>>>            //Now clear up the Unicode string, the Variant owns a BSTR copy of the string
8525>>>>>>>>>            Move (Free(pWStr)) to bOk
8526>>>>>>>>>        End
8526>>>>>>>>>>
8526>>>>>>>>>        Function_Return vValue
8527>>>>>>>>>    End_Function
8528>>>>>>>>>    
8528>>>>>>>>>    // Create variant string from data string. data string is encoded by eCharType
8528>>>>>>>>>    
8528>>>>>>>>>    Function VariantStrFromStr String sValue Integer eCodeType Returns Variant
8530>>>>>>>>>        Variant vValue
8530>>>>>>>>>        Get VariantStrFromBuffer (AddressOf(sValue)) eCodeType to vValue
8531>>>>>>>>>        Function_Return vValue
8532>>>>>>>>>    End_Function
8533>>>>>>>>>    
8533>>>>>>>>>    // Create buffer of utf16 data from variant.
8533>>>>>>>>>    // Returns newly created memory address and length (by reference)
8533>>>>>>>>>    Function VariantStrToUTF16 Variant vValue Integer ByRef iLen Returns Pointer
8535>>>>>>>>>        Pointer pBSTR pRetStr
8535>>>>>>>>>        Boolean bOk
8535>>>>>>>>>        Move 0 to pRetStr
8536>>>>>>>>>        Move (VariantStringLength( vValue)) to iLen
8537>>>>>>>>>        If (iLen) Begin
8539>>>>>>>>>            Move (DeRefPtr(AddressOf(vValue),8)) to pBSTR
8540>>>>>>>>>            Move (Alloc(iLen+1 * 2)) to pRetStr
8541>>>>>>>>>            Move (MemCopy(pRetStr,pBSTR,(iLen+1 * 2))) to bOk
8542>>>>>>>>>        End
8542>>>>>>>>>>
8542>>>>>>>>>        Function_Return pRetStr
8543>>>>>>>>>    End_Function
8544>>>>>>>>>    
8544>>>>>>>>>    // Create variant from buffer of utf16 data
8544>>>>>>>>>    Function VariantStrFromUTF16 Pointer pSource Returns Variant
8546>>>>>>>>>        Variant vValue
8546>>>>>>>>>        Pointer pvValue
8546>>>>>>>>>        Boolean bOk
8546>>>>>>>>>        Move "" to vValue
8547>>>>>>>>>        If (pSource) Begin
8549>>>>>>>>>            //Initialize pWstr variable so it has the correct type and AddressOf will return a proper pointer
8549>>>>>>>>>            //Initialize vValue variable so it has the correct type and AddressOf will return a proper pointer
8549>>>>>>>>>            Move 0 to vValue
8550>>>>>>>>>            Move (AddressOf(vValue)) to pvValue
8551>>>>>>>>>            //Change the Variant type to VT_BSTR
8551>>>>>>>>>            Move (StoreDw(pvValue,0,OLE_VT_Bstr)) to bOk
8552>>>>>>>>>            //Allocate a proper COM BSTR, assign the Unicode string, and store the BSTR in the Variant variable
8552>>>>>>>>>            Move (StorePtr(pvValue,8,SysAllocString(pSource))) to bOk
8553>>>>>>>>>        End
8553>>>>>>>>>>
8553>>>>>>>>>        Function_Return vValue
8554>>>>>>>>>    End_Function
8555>>>>>>>>>    
8555>>>>>>>>>    // Create Uchar array from variant string.
8555>>>>>>>>>    // Data buffer is encoded by eCharType
8555>>>>>>>>>    Function VariantStrToUCharArray Variant vValue Integer eCharType Returns UChar[]
8557>>>>>>>>>        Pointer pBSTR pRetStr
8557>>>>>>>>>        Integer iLen iBufLen
8557>>>>>>>>>        Boolean bOk
8557>>>>>>>>>        UChar[] UC1
8558>>>>>>>>>        Move 0 to pRetStr
8559>>>>>>>>>        Move (VariantStringLength( vValue)) to iLen
8560>>>>>>>>>        If (iLen) Begin
8562>>>>>>>>>            Move (DeRefPtr(AddressOf(vValue),8)) to pBSTR
8563>>>>>>>>>            If (eCharType=CP_UTF16) Begin
8565>>>>>>>>>                Move (iLen*2) to iBufLen
8566>>>>>>>>>                Move (ResizeArray(UC1,iBufLen)) to UC1
8567>>>>>>>>>                Move (MemCopy(AddressOf(UC1),pBSTR,iBufLen)) to bOk
8568>>>>>>>>>            End
8568>>>>>>>>>>
8568>>>>>>>>>            Else Begin
8569>>>>>>>>>                Move (WideToMultiBuffer(eCharType,pBSTR,iLen,AddressOf(pRetStr))) to iBufLen
8570>>>>>>>>>                Move (ResizeArray(UC1,iBufLen)) to UC1
8571>>>>>>>>>                Move (MemCopy(AddressOf(UC1),pRetStr,iBufLen)) to bOk
8572>>>>>>>>>                Move (Free(pRetStr)) to bOk
8573>>>>>>>>>            End
8573>>>>>>>>>>
8573>>>>>>>>>        End
8573>>>>>>>>>>
8573>>>>>>>>>        Function_Return UC1
8574>>>>>>>>>    End_Function
8575>>>>>>>>>    
8575>>>>>>>>>    // Create variant string from UChar array. data is encoded by eCharType
8575>>>>>>>>>    Function VariantStrFromUCharArray UChar[] ucSource Integer eCodeType Returns Variant
8577>>>>>>>>>        Variant vValue
8577>>>>>>>>>        Pointer pvValue
8577>>>>>>>>>        Boolean bOk
8577>>>>>>>>>        Pointer pWStr
8577>>>>>>>>>        Move "" to vValue
8578>>>>>>>>>        
8578>>>>>>>>>        //Initialize pWstr variable so it has the correct type and AddressOf will return a proper pointer
8578>>>>>>>>>        Move 0 to pWStr
8579>>>>>>>>>        //Convert the Ansi string to Unicode
8579>>>>>>>>>        If (eCodeType=CP_UTF16) Begin
8581>>>>>>>>>            Move 0 to ucSource[SizeOfArray(ucSource)]
8582>>>>>>>>>            Move 0 to ucSource[SizeOfArray(ucSource)]
8583>>>>>>>>>            Move (AddressOf(ucSource)) to pWStr
8584>>>>>>>>>        End
8584>>>>>>>>>>
8584>>>>>>>>>        Else Begin
8585>>>>>>>>>            Move (MultiToWideBuffer( eCodeType, AddressOf(ucSource), SizeOfArray(ucSource), AddressOf(pWStr))) to bOk
8586>>>>>>>>>        End
8586>>>>>>>>>>
8586>>>>>>>>>        //Initialize vValue variable so it has the correct type and AddressOf will return a proper pointer
8586>>>>>>>>>        Move 0 to vValue
8587>>>>>>>>>        Move (AddressOf(vValue)) to pvValue
8588>>>>>>>>>        //Change the Variant type to VT_BSTR
8588>>>>>>>>>        Move (StoreDw(pvValue,0,OLE_VT_Bstr)) to bOk
8589>>>>>>>>>        //Allocate a proper COM BSTR, assign the Unicode string, and store the BSTR in the Variant variable
8589>>>>>>>>>        Move (StorePtr(pvValue,8,SysAllocString(pWStr))) to bOk
8590>>>>>>>>>        //Now clear up the Unicode string, the Variant owns a BSTR copy of the string
8590>>>>>>>>>        If (eCodeType<>CP_UTF16) Begin
8592>>>>>>>>>            Move (Free(pWStr)) to bOk
8593>>>>>>>>>        End
8593>>>>>>>>>>
8593>>>>>>>>>        Function_Return vValue
8594>>>>>>>>>    End_Function
8595>>>>>>>>>    
8595>>>>>>>>>    
8595>>>>>>>>>    // UChar array conversions. Converts a passed uchar array with from-encoding to
8595>>>>>>>>>    // a new UChar array with to-encoding
8595>>>>>>>>>    
8595>>>>>>>>>    Function ConvertUCharArray UChar[] UCharData Integer iFromCP Integer iToCP Returns UChar[]
8597>>>>>>>>>        Pointer pFromBuf pToBuf
8597>>>>>>>>>        Integer iBytes iChars
8597>>>>>>>>>        Boolean bOk
8597>>>>>>>>>        
8597>>>>>>>>>        Move (SizeOfArray(UCharData)) to iBytes
8598>>>>>>>>>        If (iFromCP=iToCP or iBytes=0) Begin
8600>>>>>>>>>            Function_Return UCharData
8601>>>>>>>>>        End
8601>>>>>>>>>>
8601>>>>>>>>>        
8601>>>>>>>>>        If (iFromCP<>CP_UTF16) Begin
8603>>>>>>>>>            Move 0 to UCharData[iBytes] // extend to make sure we have 0 at end
8604>>>>>>>>>            Get Utf16FromBuffer (AddressOf(UCharData)) iFromCP (&iChars) to pFromBuf
8605>>>>>>>>>        End
8605>>>>>>>>>>
8605>>>>>>>>>        Else Begin
8606>>>>>>>>>            Move (iBytes/2) to iChars // if from is utf16
8607>>>>>>>>>        End
8607>>>>>>>>>>
8607>>>>>>>>>        
8607>>>>>>>>>        If (iToCP<>CP_UTF16) Begin
8609>>>>>>>>>            If (iFromCP=CP_UTF16) Begin
8611>>>>>>>>>                Get Utf16ToBuffer (AddressOf(UCharData)) iToCP iChars to pToBuf
8612>>>>>>>>>            End
8612>>>>>>>>>>
8612>>>>>>>>>            Else Begin
8613>>>>>>>>>                Get Utf16ToBuffer pFromBuf iToCP iChars to pToBuf
8614>>>>>>>>>                Move (Free(pFromBuf)) to bOk
8615>>>>>>>>>            End
8615>>>>>>>>>>
8615>>>>>>>>>            Move (CStringSize(pToBuf)) to iBytes
8616>>>>>>>>>        End
8616>>>>>>>>>>
8616>>>>>>>>>        Else Begin
8617>>>>>>>>>            Move (iChars*2) to iBytes
8618>>>>>>>>>            Move pFromBuf to pToBuf
8619>>>>>>>>>        End
8619>>>>>>>>>>
8619>>>>>>>>>        Move (ResizeArray(UCharData,iBytes)) to UCharData
8620>>>>>>>>>        Move (MemCopy(AddressOf(UCharData),pToBuf,iBytes)) to bOk
8621>>>>>>>>>        Move (Free(pToBuf)) to bOk
8622>>>>>>>>>        Function_Return UCharData
8623>>>>>>>>>    End_Function
8624>>>>>>>>>    
8624>>>>>>>>>    // Base64 Encoding functions that allow you to encode to and decode from strings and
8624>>>>>>>>>    // Variant strings. Binary data is always buffer
8624>>>>>>>>>    
8624>>>>>>>>>    Function Base64EncodeToStr Pointer pBinaryData Integer iBinaryLen Returns String
8626>>>>>>>>>        Pointer pBase64
8626>>>>>>>>>        String sResult
8626>>>>>>>>>        Integer iVoid
8626>>>>>>>>>        Move (Base64Encode(pBinaryData, iBinaryLen)) to pBase64
8627>>>>>>>>>        Move (PointerToString(pBase64)) to sResult
8628>>>>>>>>>        Move (Free(pBase64)) to iVoid
8629>>>>>>>>>        Function_Return sResult
8630>>>>>>>>>    End_Function
8631>>>>>>>>>    
8631>>>>>>>>>    Function Base64DecodeFromStr String sBase64 Integer ByRef iBinaryLen Returns Pointer
8633>>>>>>>>>        Pointer pBinaryData
8633>>>>>>>>>        String sBinary
8633>>>>>>>>>        Integer iVoid
8633>>>>>>>>>        Move (Base64Decode(AddressOf(sBase64), &iBinaryLen)) to pBinaryData
8634>>>>>>>>>        Function_Return pBinaryData
8635>>>>>>>>>    End_Function
8636>>>>>>>>>    
8636>>>>>>>>>    Function Base64EncodeToVariantStr Pointer pBinaryData Integer iBinaryLen Returns Variant
8638>>>>>>>>>        Pointer pBase64
8638>>>>>>>>>        Variant vVar
8638>>>>>>>>>        Integer iBase64Len iVoid
8638>>>>>>>>>        If (pBinaryData and iBinaryLen) Begin
8640>>>>>>>>>            Move (Base64Encode(pBinaryData,iBinaryLen)) to pBase64
8641>>>>>>>>>            Get  VariantStrFromBuffer pBase64 CP_ACP to vVar
8642>>>>>>>>>            Move (Free(pBase64)) to iVoid
8643>>>>>>>>>        End
8643>>>>>>>>>>
8643>>>>>>>>>        Function_Return vVar
8644>>>>>>>>>    End_Function
8645>>>>>>>>>    
8645>>>>>>>>>    Function Base64DecodeFromVariantStr Variant vBase64Str Integer ByRef iBinaryLen Returns Pointer
8647>>>>>>>>>        Pointer pBase64 pBinaryData
8647>>>>>>>>>        Integer iVoid
8647>>>>>>>>>        Move 0 to iBinaryLen
8648>>>>>>>>>        Get VariantStrToBuffer vBase64Str CP_ACP to pBase64
8649>>>>>>>>>        If (pBase64) Begin
8651>>>>>>>>>            Move (Base64Decode(pBase64,&iBinaryLen)) to pBinaryData
8652>>>>>>>>>            Move (Free(pBase64)) to iVoid
8653>>>>>>>>>        End
8653>>>>>>>>>>
8653>>>>>>>>>        Function_Return pBinaryData
8654>>>>>>>>>    End_Function
8655>>>>>>>>>    
8655>>>>>>>>>    // base 64 Encode from Uchar array to a Uchar array
8655>>>>>>>>>    Function Base64EncodeUCharArray UChar[] UCharData Returns UChar[]
8657>>>>>>>>>        Pointer pBase64
8657>>>>>>>>>        Integer iLen
8657>>>>>>>>>        Boolean bOk
8657>>>>>>>>>        
8657>>>>>>>>>        Move (SizeOfArray(UCharData)) to iLen
8658>>>>>>>>>        If (iLen) Begin
8660>>>>>>>>>            Move (Base64Encode(AddressOf(UCharData), iLen)) to pBase64
8661>>>>>>>>>            Move (CStringSize(pBase64)) to iLen
8662>>>>>>>>>            Move (ResizeArray(UCharData,iLen)) to UCharData
8663>>>>>>>>>            Move (MemCopy(AddressOf(UCharData),pBase64,iLen)) to bOk
8664>>>>>>>>>            Move (Free(pBase64)) to bOk
8665>>>>>>>>>        End
8665>>>>>>>>>>
8665>>>>>>>>>        Function_Return UCharData
8666>>>>>>>>>    End_Function
8667>>>>>>>>>    
8667>>>>>>>>>    // base 64 Decode from Uchar array to a Uchar array
8667>>>>>>>>>    Function Base64DecodeUCharArray UChar[] UCharData Returns UChar[]
8669>>>>>>>>>        Pointer pData
8669>>>>>>>>>        Integer iLen
8669>>>>>>>>>        Boolean bOk
8669>>>>>>>>>        
8669>>>>>>>>>        Move (SizeOfArray(UCharData)) to iLen
8670>>>>>>>>>        If (iLen) Begin
8672>>>>>>>>>            Move 0 to UCharData[iLen]
8673>>>>>>>>>            Move (Base64Decode(AddressOf(UCharData),&iLen)) to pData
8674>>>>>>>>>            Move (ResizeArray(UCharData,iLen)) to UCharData
8675>>>>>>>>>            Move (MemCopy(AddressOf(UCharData),pData,iLen)) to bOk
8676>>>>>>>>>            Move (Free(pData)) to bOk
8677>>>>>>>>>        End
8677>>>>>>>>>>
8677>>>>>>>>>        Function_Return UCharData
8678>>>>>>>>>    End_Function
8679>>>>>>>>>    
8679>>>>>>>>>End_Class
8680>>>>>>>>>
8680>>>>>>>>>
8680>>>>>>>
8680>>>>>>>// it is important that psFileName is defined. If blank, the registry may be accessed. We will check all WritePrivateProfileString
8680>>>>>>>// and GetPrivateProfileString to make sure that a file is defined.
8680>>>>>>>
8680>>>>>>>
8680>>>>>>>External_Function WritePrivateProfileStringW "WritePrivateProfileStringW" Kernel32.dll ;    WString sSection ;    WString sKeyName ;    WString sValue ;    WString sFileName ;    Returns Integer
8681>>>>>>>
8681>>>>>>>
8681>>>>>>>// When called directly, be sure to use WString types.
8681>>>>>>>External_Function GetPrivateProfileStringW "GetPrivateProfileStringW" Kernel32.dll ;    Pointer lpSection ;    Pointer lpKeyName ;    Pointer lpDefault ;    Pointer lpsValue ;    Integer nSize ;    WString lpFileName ;    Returns Integer
8682>>>>>>>
8682>>>>>>>External_Function WritePrivateProfileStringA "WritePrivateProfileStringA" Kernel32.dll ;    String sSection ;    String sKeyName ;    String sValue ;    String sFileName ;    Returns Integer
8683>>>>>>>    
8683>>>>>>>// When called directly, be sure to use String types.
8683>>>>>>>External_Function GetPrivateProfileStringA "GetPrivateProfileStringA" Kernel32.dll ;    Pointer lpSection ;    Pointer lpKeyName ;    Pointer lpDefault ;    Pointer lpsValue ;    Integer nSize ;    String lpFileName ;    Returns Integer
8684>>>>>>>    
8684>>>>>>>// Wrapper redirecting direct access to the wide for backwards compatibility (parameters will be auto converted)
8684>>>>>>>Define WritePrivateProfileString for WritePrivateProfileStringW
8684>>>>>>>    
8684>>>>>>>
8684>>>>>>>// Wrapper Function GetPrivateProfileString for backwards compatibility
8684>>>>>>>Function GetPrivateProfileString Global ;    Pointer pSection ;    Pointer pKeyName ;    Pointer pDefault ;    Pointer lpsValue ;    Integer nSize ;    String  sFileName ;    Returns Integer
8686>>>>>>>    
8686>>>>>>>    Integer iResult
8686>>>>>>>    UWide   uwSection uwKeyName uwDefault uwValue uwFileName
8686>>>>>>>    UWide   uwSection uwKeyName uwDefault uwValue uwFileName
8686>>>>>>>
8686>>>>>>>    Send StringToWide pSection (&uwSection)
8687>>>>>>>    Send StringToWide pKeyName (&uwKeyName)
8688>>>>>>>    Send StringToWide pDefault (&uwDefault)    
8689>>>>>>>    Send StringToWide (AddressOf(sFileName)) (&uwFileName)
8690>>>>>>>                           
8690>>>>>>>    Send WideSetBuffer lpsValue (AddressOf(nSize)) (&uwValue) 
8691>>>>>>>       
8691>>>>>>>    Move (GetPrivateProfileStringW (uwSection.lpUText, uwKeyName.lpUText, uwDefault.lpUText, uwValue.lpUText, nSize, uwFileName.lpUText)) to iResult
8692>>>>>>>        
8692>>>>>>>    Send WideToStringSized (&uwValue) lpsValue iResult      // iResult is number of characters
8693>>>>>>>    
8693>>>>>>>    Function_Return iResult
8694>>>>>>>End_Function
8695>>>>>>> 
8695>>>>>>>
8695>>>>>>>Class cIniFile is a cObject
8696>>>>>>>    Procedure Construct_Object
8698>>>>>>>        Forward Send Construct_Object
8700>>>>>>>        
8700>>>>>>>        
8700>>>>>>>        // Set to false to use the narrow windows API's to access the ini files. This allows UTF-8 data to be written
8700>>>>>>>        // and read (except if the file is stored as UTF-16) but has the downside of not supporting unicode file paths.
8700>>>>>>>        Property Boolean pbWideAPI True
8701>>>>>>>        
8701>>>>>>>        // Set to true to save the ini file as UTF-16LE (with a BOM). This allows unicode data to be saved properly
8701>>>>>>>        // using the wide API's. Note that pbWideAPI should be true to use this property. Existing ini files will be
8701>>>>>>>        // converted on first write (WriteString).
8701>>>>>>>        Property Boolean pbStoreAsUTF16 False
8702>>>>>>>        
8702>>>>>>>        Property String psPrivate_FileName ""
8703>>>>>>>        Property Boolean pbPrivate_FirstWrite True
8704>>>>>>>    End_Procedure
8705>>>>>>>    
8705>>>>>>>    Procedure Set psFileName String sVal
8707>>>>>>>        Set pbPrivate_FirstWrite to True
8708>>>>>>>        Set psPrivate_FileName to sVal
8709>>>>>>>    End_Procedure
8710>>>>>>>    
8710>>>>>>>    Function psFileName Returns String
8712>>>>>>>        Function_Return (psPrivate_FileName(Self))
8713>>>>>>>    End_Function
8714>>>>>>>    
8714>>>>>>>    Procedure InitFile
8716>>>>>>>        Boolean bExists bHasBom
8716>>>>>>>        Integer iChnl
8716>>>>>>>        UChar[] ucData
8717>>>>>>>        Handle hoTranslate
8717>>>>>>>        
8717>>>>>>>        If (pbPrivate_FirstWrite(Self) and pbStoreAsUTF16(Self) and pbWideAPI(Self)) Begin
8719>>>>>>>            File_Exist (psPrivate_FileName(Self)) bExists
8720>>>>>>>            If (not(bExists)) Begin
8722>>>>>>>                //  Create the file with a UTF-16 BOM so
8722>>>>>>>                Move (Seq_New_Channel()) to iChnl
8723>>>>>>>                Direct_Output channel iChnl ("binary:" + psPrivate_FileName(Self))
8725>>>>>>>                Write channel iChnl C_BOM_UTF16LE
8727>>>>>>>                Close_Output channel iChnl
8729>>>>>>>                Send Seq_Release_Channel iChnl
8730>>>>>>>            End
8730>>>>>>>>
8730>>>>>>>            Else Begin
8731>>>>>>>                //  Check for BOM
8731>>>>>>>                Move (Seq_New_Channel()) to iChnl
8732>>>>>>>                Direct_Input channel iChnl ("binary:" + psPrivate_FileName(Self))
8734>>>>>>>                Read_Block channel iChnl ucData 2
8736>>>>>>>                
8736>>>>>>>                Move (SizeOfArray(ucData) >= 2 and ucData[0] = C_BOM_UTF16LEc1 and ucData[1] = C_BOM_UTF16LEc2) to bHasBom
8737>>>>>>>                
8737>>>>>>>                //  If no BOM we'll have to read the entire file to convert it
8737>>>>>>>                If (not(bHasBom)) Begin
8739>>>>>>>                    Set_Channel_Position iChnl to 0
8740>>>>>>>>
8740>>>>>>>                    Read_Block ucData -1
8741>>>>>>>                End
8741>>>>>>>>
8741>>>>>>>
8741>>>>>>>                Close_Input channel iChnl
8743>>>>>>>                
8743>>>>>>>                If (not(bHasBom)) Begin
8745>>>>>>>                    //  Convert thedata
8745>>>>>>>                    Get Create (RefClass(cCharTranslate)) to hoTranslate
8746>>>>>>>                    Get ConvertUCharArray of hoTranslate ucData CP_OEMCP CP_UTF16 to ucData
8747>>>>>>>                    
8747>>>>>>>                    //  Write out the UTF 16 file with BOM
8747>>>>>>>                    Direct_Output channel iChnl ("binary:" + psPrivate_FileName(Self))
8749>>>>>>>                    Write channel iChnl C_BOM_UTF16LE
8751>>>>>>>                    
8751>>>>>>>                    Write channel iChnl ucData
8753>>>>>>>                    
8753>>>>>>>                    Close_Output channel iChnl
8755>>>>>>>                    
8755>>>>>>>                    Send Destroy of hoTranslate
8756>>>>>>>                End
8756>>>>>>>>
8756>>>>>>>                
8756>>>>>>>                Send Seq_Release_Channel iChnl
8757>>>>>>>            End
8757>>>>>>>>
8757>>>>>>>            
8757>>>>>>>            Set pbPrivate_FirstWrite to False
8758>>>>>>>        End
8758>>>>>>>>
8758>>>>>>>    End_Procedure
8759>>>>>>>    
8759>>>>>>>    Procedure WriteString String sSection String sKey String sValue
8761>>>>>>>        Boolean bSuccess
8761>>>>>>>        String sFileName
8761>>>>>>>        
8761>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8763>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8764>>>>>>>>
8764>>>>>>>            Procedure_Return
8765>>>>>>>        End
8765>>>>>>>>
8765>>>>>>>        
8765>>>>>>>        Send InitFile
8766>>>>>>>        
8766>>>>>>>        // All parameters are Strings and are converted to WString upon invoking the external function.
8766>>>>>>>        If (pbWideAPI(Self)) Begin
8768>>>>>>>            Move (WritePrivateProfileStringW(sSection, sKey, sValue, psPrivate_FileName(Self))) to bSuccess
8769>>>>>>>        End
8769>>>>>>>>
8769>>>>>>>        Else Begin
8770>>>>>>>            Move (Utf8ToAnsi(psPrivate_FileName(Self))) to sFileName
8771>>>>>>>            Move (WritePrivateProfileStringA(sSection, sKey, sValue, sFilename)) to bSuccess 
8772>>>>>>>        End
8772>>>>>>>>
8772>>>>>>>        If (bSuccess = False) ;            Error DFERR_INI_FILE C_$CannotWriteToTheIniFile
8775>>>>>>>    End_Procedure
8776>>>>>>>    
8776>>>>>>>    
8776>>>>>>>    Function ReadString String sSection String sKey String sDefault Returns String
8778>>>>>>>        Integer iNumChars iSizeValue
8778>>>>>>>        WString wValue wFileName wSection wKey wDefault
8778>>>>>>>        String sFileName sValue
8778>>>>>>>        
8778>>>>>>>        Move 2047 to iSizeValue
8779>>>>>>>        Move (Repeat(" ", iSizeValue)) to sValue
8780>>>>>>>        
8780>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8782>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8783>>>>>>>>
8783>>>>>>>            Function_Return ''
8784>>>>>>>        End
8784>>>>>>>>
8784>>>>>>>        
8784>>>>>>>        If (pbWideAPI(Self)) Begin
8786>>>>>>>            Move sSection to wSection
8787>>>>>>>            Move sKey to wKey
8788>>>>>>>            Move sDefault to wDefault
8789>>>>>>>            Move sValue to wValue
8790>>>>>>>            Move (GetPrivateProfileStringW(AddressOf(wSection), AddressOf(wKey), AddressOf(wDefault), AddressOf(wValue), iSizeValue, psPrivate_FileName(Self))) to iNumChars
8791>>>>>>>            Move wValue to sValue
8792>>>>>>>        End
8792>>>>>>>>
8792>>>>>>>        Else Begin
8793>>>>>>>            Move (Utf8ToAnsi(psPrivate_FileName(Self))) to sFileName
8794>>>>>>>            Move (GetPrivateProfileStringA(AddressOf(sSection), AddressOf(sKey), AddressOf(sDefault), AddressOf(sValue), iSizeValue, sFileName)) to iNumChars
8795>>>>>>>        End
8795>>>>>>>>
8795>>>>>>>        
8795>>>>>>>        Function_Return  (CString(sValue))
8796>>>>>>>    End_Function
8797>>>>>>>    
8797>>>>>>>    Function SectionExists String sSection Returns Boolean
8799>>>>>>>        // A section exists only if it has at least one Key. A section with no keys is said not to exist
8799>>>>>>>        Handle hoKeys
8799>>>>>>>        Integer icKey iKey
8799>>>>>>>        
8799>>>>>>>        Get Create U_ARRAY to hoKeys
8800>>>>>>>        Send ReadSection sSection hoKeys
8801>>>>>>>        Get Item_Count of hoKeys to icKey
8802>>>>>>>        Send Destroy of hoKeys
8803>>>>>>>        
8803>>>>>>>        Function_Return (icKey >0)
8804>>>>>>>    End_Function
8805>>>>>>>    
8805>>>>>>>    Procedure ReadSection WString wSection Handle hoArray
8807>>>>>>>        Integer iNumChars iSizeValue iPos
8807>>>>>>>        Pointer lpsKeys
8807>>>>>>>        WString wKeys wKey
8807>>>>>>>        
8807>>>>>>>        Move 16384 to iSizeValue
8808>>>>>>>        Move (Repeat(character(0),  iSizeValue)) to wKeys
8809>>>>>>>        
8809>>>>>>>        Move (AddressOf(wKeys)) to lpsKeys
8810>>>>>>>        
8810>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8812>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8813>>>>>>>>
8813>>>>>>>            Procedure_Return
8814>>>>>>>        End
8814>>>>>>>>
8814>>>>>>>        // The last parameter is a String and is converted to WString upon invoking the external function.
8814>>>>>>>        Move (GetPrivateProfileStringW(AddressOf(wSection), 0, 0, lpsKeys, Length(wKeys), psPrivate_FileName(Self))) to iNumChars
8815>>>>>>>        If (iNumChars >0) Begin
8817>>>>>>>            Repeat
8817>>>>>>>>
8817>>>>>>>                Move (Pos(Character(0),wKeys)) to iPos
8818>>>>>>>                If (iPos >1) Begin
8820>>>>>>>                    Move (Left(wKeys,iPos -1))  to wKey
8821>>>>>>>                    Move (Right(wKeys,Length(wKeys) - iPos)) to wKeys
8822>>>>>>>                    Set Value of hoArray (Item_Count(hoArray)) to wKey
8823>>>>>>>                End
8823>>>>>>>>
8823>>>>>>>            Until (iPos <=1)
8825>>>>>>>        End
8825>>>>>>>>
8825>>>>>>>    End_Procedure
8826>>>>>>>    
8826>>>>>>>    Procedure ReadSections Handle hoArray
8828>>>>>>>        Integer iNumChars iSizeValue iPos
8828>>>>>>>        Pointer lpwSections
8828>>>>>>>        WString wSections
8828>>>>>>>        String sSection
8828>>>>>>>        
8828>>>>>>>        Move 16384 to iSizeValue
8829>>>>>>>        
8829>>>>>>>        Move (Repeat(character(0),  iSizeValue)) to wSections
8830>>>>>>>        Move (AddressOf(wSections)) to lpwSections
8831>>>>>>>        
8831>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8833>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8834>>>>>>>>
8834>>>>>>>            Procedure_Return
8835>>>>>>>        End
8835>>>>>>>>
8835>>>>>>>        // The last parameter is a String and is converted to WString upon invoking the external function.
8835>>>>>>>        Move (GetPrivateProfileStringW(0, 0, 0, lpwSections, Length(wSections), psPrivate_FileName(Self))) to iNumChars
8836>>>>>>>        If (iNumChars >0) Begin
8838>>>>>>>            Repeat
8838>>>>>>>>
8838>>>>>>>                Move (Pos(Character(0),wSections)) to iPos
8839>>>>>>>                If (iPos >1) Begin
8841>>>>>>>                    Move (Left(wSections,iPos -1)) to sSection
8842>>>>>>>                    Move (Right(wSections, Length(wSections) - iPos)) to wSections
8843>>>>>>>                    Set Value of hoArray (Item_Count(hoArray)) to sSection
8844>>>>>>>                End
8844>>>>>>>>
8844>>>>>>>            Until (iPos <=1)
8846>>>>>>>        End
8846>>>>>>>>
8846>>>>>>>        
8846>>>>>>>    End_Procedure
8847>>>>>>>    
8847>>>>>>>    Procedure DeleteSection String sSection
8849>>>>>>>        
8849>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8851>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8852>>>>>>>>
8852>>>>>>>            Procedure_Return
8853>>>>>>>        End
8853>>>>>>>>
8853>>>>>>>        If (WritePrivateProfileString(sSection, "", "", psPrivate_FileName(Self)) = 0) ;            Error DFERR_INI_FILE C_$CanNotDeleteSection
8856>>>>>>>    End_Procedure
8857>>>>>>>    
8857>>>>>>>    Procedure DeleteKey String sSection String sKey
8859>>>>>>>        Integer iVoid
8859>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8861>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8862>>>>>>>>
8862>>>>>>>            Procedure_Return
8863>>>>>>>        End
8863>>>>>>>>
8863>>>>>>>        Move (WritePrivateProfileString(sSection, sKey, "", psPrivate_FileName(Self))) to iVoid
8864>>>>>>>    End_Procedure
8865>>>>>>>    
8865>>>>>>>    Function KeyExists String sSection String sKey Returns Boolean
8867>>>>>>>        Handle hoKeys
8867>>>>>>>        Integer iKey
8867>>>>>>>        Boolean bExists
8867>>>>>>>        
8867>>>>>>>        Move (False) to bExists
8868>>>>>>>        
8868>>>>>>>        Move (Uppercase(sKey)) to sKey
8869>>>>>>>        
8869>>>>>>>        Get Create U_ARRAY to hoKeys
8870>>>>>>>        
8870>>>>>>>        Send ReadSection sSection hoKeys
8871>>>>>>>        For iKey from 0 to (Item_Count(hoKeys) -1)
8877>>>>>>>>
8877>>>>>>>            If (sKey = Uppercase(Value(hoKeys, iKey))) Begin
8879>>>>>>>                Move (True) to bExists
8880>>>>>>>            End
8880>>>>>>>>
8880>>>>>>>        Loop
8881>>>>>>>>
8881>>>>>>>        
8881>>>>>>>        Send Destroy of hoKeys
8882>>>>>>>        
8882>>>>>>>        Function_Return bExists
8883>>>>>>>    End_Function
8884>>>>>>>    
8884>>>>>>>End_Class
8885>>>>>
8885>>>>>Class cWorkspace is a cObject
8886>>>>>    
8886>>>>>    Procedure Construct_Object
8888>>>>>        Forward Send Construct_Object
8890>>>>>        
8890>>>>>        
8890>>>>>        Property String psAppSrcPath
8891>>>>>        Property String psBitmapPath
8892>>>>>        Property String psDataPath
8893>>>>>        Property String psDdSrcPath
8894>>>>>        Property String psDescription
8895>>>>>        Property String psFileList
8896>>>>>        Property String psHelpPath
8897>>>>>        Property String psHome
8898>>>>>        Property String psIdeSrcPath
8899>>>>>        Property String psProgramPath
8900>>>>>        Property String psAppHtmlPath
8901>>>>>        Property String psWorkspaceName
8902>>>>>        Property String psWorkspaceWSFile
8903>>>>>        Property String psConnectionIni
8904>>>>>        
8904>>>>>        Property String psSystemDfPath // took from the Registry!
8905>>>>>        Property String psSystemMakePath // took from the Registry!
8906>>>>>        Property String psDfPath        // Calculated
8907>>>>>        
8907>>>>>        Property Boolean pbWorkspaceOpened False // used internally to tell if we are switching workspaces
8908>>>>>        
8908>>>>>    End_Procedure
8909>>>>>    
8909>>>>>    Function FullPathNames String sShortPathNames Returns String
8911>>>>>        String sFileName
8911>>>>>        String sFullPathNames 
8911>>>>>        WString sFullPathName sShortPathName
8911>>>>>        Pointer lpsFilePart
8911>>>>>        Integer icChar // the number of characters returned
8911>>>>>        Integer iPos
8911>>>>>        
8911>>>>>        Move (Pos(";", sShortPathNames)) to iPos
8912>>>>>        While (length(sShortPathNames) >0)
8916>>>>>            If (iPos =0) Begin
8918>>>>>                Move sShortPathNames to sShortPathName
8919>>>>>                Move "" to sShortPathNames
8920>>>>>            End
8920>>>>>>
8920>>>>>            Else Begin // multiple paths
8921>>>>>                Move (Left(sShortPathNames, iPos -1)) to sShortPathName
8922>>>>>                Move (Right(sShortPathNames, length(sShortPathNames) -iPos)) to sShortPathNames // remove this path from the paths
8923>>>>>            End
8923>>>>>>
8923>>>>>            Move (Repeat(character(0), 4096)) to sFullPathName
8924>>>>>            Move -1 to lpsFilePart
8925>>>>>            Move (GetFullPathNameW(sShortPathName, 4096, AddressOf(sFullPathName), AddressOf(lpsFilePart))) to icChar
8926>>>>>            Append sFullPathNames (CString(sFullPathName))
8927>>>>>            If (sShortPathNames <>"") ;                Append sFullPathNames ";"
8930>>>>>            Move (Pos(";", sShortPathNames)) to iPos
8931>>>>>        Loop
8932>>>>>>
8932>>>>>        
8932>>>>>        Function_Return sFullPathNames
8933>>>>>    End_Function
8934>>>>>    
8934>>>>>    Function GetApplicationPath Returns String
8936>>>>>        // Returns the path of the Application (no trailing "\")
8936>>>>>        WString wApplicationFileName 
8936>>>>>        Boolean bRemoved
8936>>>>>        Integer iNumChars
8936>>>>>        String sFilename sPath
8936>>>>>        
8936>>>>>        Move (Repeat(Character(0), 1024)) to wApplicationFileName
8937>>>>>        Move (GetModuleFileNameW(0, AddressOf(wApplicationFileName), 1024)) to iNumChars
8938>>>>>        Move (CString(wApplicationFileName)) to wApplicationFileName
8939>>>>>        
8939>>>>>        Move (PathRemoveFileSpecW(AddressOf(wApplicationFileName))) to bRemoved
8940>>>>>        Move (CString(wApplicationFileName)) to sPath
8941>>>>>        
8941>>>>>        If (Right(sPath, 1) ="\") ;            Move (Left(sPath, Length(sPath) -1)) to sPath
8944>>>>>        Function_Return sPath
8945>>>>>    End_Function
8946>>>>>    
8946>>>>>    Procedure DoClearPaths
8948>>>>>        // Call this prior to changing from one WorkspAce to another
8948>>>>>        // if you don't, OpenWorkspaceFile will ignore the new paths.
8948>>>>>        Set psHome           to ""
8949>>>>>        Set psAppSrcPath     to ""
8950>>>>>        Set psBitmapPath     to ""
8951>>>>>        Set psDataPath       to ""
8952>>>>>        Set psDdSrcPath      to ""
8953>>>>>        Set psDescription    to ""
8954>>>>>        Set psFileList       to ""
8955>>>>>        Set psHelpPath       to ""
8956>>>>>        Set psIdeSrcPath     to ""
8957>>>>>        Set psAppHtmlPath    to ""
8958>>>>>        Set psProgramPath    to ""
8959>>>>>        Set psWorkspaceName  to ""
8960>>>>>        Set psSystemDfPath   to ""
8961>>>>>        Set psSystemMakePath to ""
8962>>>>>        Set psWorkspaceWSFile to ""
8963>>>>>        Set psConnectionIni to ""
8964>>>>>    End_Procedure
8965>>>>>    
8965>>>>>    Function OpenWorkspaceFile String sWorkspaceFile Returns Integer
8967>>>>>        WString wApplicationStartPath
8967>>>>>        String sWsName // name of Workspace is inferred from the Workspacefile name
8967>>>>>        Boolean bRemoved
8967>>>>>        Handle hoIniFile
8967>>>>>        Boolean bSuccess // call succeeded?
8967>>>>>        String sOldDirectory
8967>>>>>        String sSystemDfPath sSystemMakePath
8967>>>>>        Boolean bExist // does the WS file exist?
8967>>>>>        Boolean bChangingWorkspace
8967>>>>>        
8967>>>>>        String sHome sAppSrcPath sBitmapPath sDataPath sDdSrcPath sDescription sAppHtmlPath
8967>>>>>        String sFileList sHelpPath sIdeSrcPath sProgramPath sWorkspaceName sConnectionIni
8967>>>>>        
8967>>>>>        Set psWorkspaceWSFile to ""
8968>>>>>        If (sWorkspaceFile ="") ;            Function_Return wsWorkspaceFileNotFound
8971>>>>>        
8971>>>>>        // Append extension if not supplied...
8971>>>>>        If (Uppercase(Right(Trim(sWorkspaceFile),3)) <> ".WS") Begin
8973>>>>>            Move (sWorkspaceFile-".ws") to sWorkspaceFile
8974>>>>>        End
8974>>>>>>
8974>>>>>        
8974>>>>>        Get pbWorkspaceOpened to bChangingWorkspace // if we had an existing workspace. We are changing
8975>>>>>        
8975>>>>>        If (IsFilenameQualified(sWorkspaceFile) = False) Begin
8977>>>>>            // Set the properties to the paths of the Workspace
8977>>>>>            // Find the WS file (with program)...
8977>>>>>            Get GetApplicationPath to wApplicationStartPath
8978>>>>>            
8978>>>>>            Move sWorkspaceFile to sWsName
8979>>>>>            Move (wApplicationStartPath +"\" +sWorkspaceFile) to sWorkspaceFile
8980>>>>>        End
8980>>>>>>
8980>>>>>        Else Begin
8981>>>>>            Move (ExtractFileName(sWorkspaceFile)) to sWsName
8982>>>>>            
8982>>>>>            Move sWorkspaceFile to wApplicationStartPath
8983>>>>>            Move (PathRemoveFileSpecW(AddressOf(wApplicationStartPath))) to bRemoved
8984>>>>>        End
8984>>>>>>
8984>>>>>        
8984>>>>>        // Ensure that the file can be found...
8984>>>>>        //File_Exist (ToAnsi(sWorkspaceFile)) bExist        // [JVH] 8.3.8.0 Convert filename to Ansi
8984>>>>>        // [JVH] Turn off support for
8984>>>>>        // Ansi extended characters in workspace until we can
8984>>>>>        // resolve all open issues
8984>>>>>        Set psWorkspaceWSFile to sWorkspaceFile
8985>>>>>        File_Exist sWorkspaceFile bExist
8986>>>>>        If (bExist = False) ;            Function_Return wsWorkspaceFileNotFound
8989>>>>>        
8989>>>>>        Get psHome           to sHome
8990>>>>>        Get psAppSrcPath     to sAppSrcPath
8991>>>>>        Get psAppHtmlPath    to sAppHtmlPath
8992>>>>>        Get psBitmapPath     to sBitmapPath
8993>>>>>        Get psDataPath       to sDataPath
8994>>>>>        Get psDdSrcPath      to sDdSrcPath
8995>>>>>        Get psDescription    to sDescription
8996>>>>>        Get psFileList       to sFileList
8997>>>>>        Get psHelpPath       to sHelpPath
8998>>>>>        Get psIdeSrcPath     to sIdeSrcPath
8999>>>>>        Get psProgramPath    to sProgramPath
9000>>>>>        Get psSystemDfPath   to sSystemDfPath
9001>>>>>        Get psSystemMakePath to sSystemMakePath
9002>>>>>        Get psWorkspaceName  to sWorkspaceName
9003>>>>>        Get psConnectionIni to sConnectionIni
9004>>>>>        
9004>>>>>        Get_Current_Directory to sOldDirectory
9005>>>>>        // Note- this conversion is temporarily rolled back
9005>>>>>        //Move (SetCurrentDirectory(ToAnsi(CString(wApplicationStartPath)))) To bSuccess    // [JVH] 8.3.8.0 Convert AppStartPath to ANSI
9005>>>>>        Move (SetCurrentDirectory(CString(wApplicationStartPath))) to bSuccess
9006>>>>>        
9006>>>>>        Get Create U_cIniFile to hoIniFile
9007>>>>>        Set pbWideAPI of hoIniFile to False
9008>>>>>        Set psFilename of hoIniFile to sWorkspaceFile
9009>>>>>        
9009>>>>>        If (sHome ="") ;            Get ReadString of hoIniFile "Workspace" "Home" ""          to sHome
9012>>>>>        If (sAppSrcPath ="") ;            Get ReadString of hoIniFile "Workspace" "AppSrcPath" ""    to sAppSrcPath
9015>>>>>        If (sAppHtmlPath ="") ;            Get ReadString of hoIniFile "Workspace" "AppHtmlPath" ""   to sAppHtmlPath
9018>>>>>        If (sBitmapPath ="") ;            Get ReadString of hoIniFile "Workspace" "BitmapPath" ""    to sBitmapPath
9021>>>>>        If (sDataPath ="") ;            Get ReadString of hoIniFile "Workspace" "DataPath" ""      to sDataPath
9024>>>>>        If (sDdSrcPath ="") ;            Get ReadString of hoIniFile "Workspace" "DdSrcPath" ""     to sDdSrcPath
9027>>>>>        If (sDescription ="") ;            Get ReadString of hoIniFile "Workspace" "Description" ""   to sDescription
9030>>>>>        If (sFileList ="") ;            Get ReadString of hoIniFile "Workspace" "FileList" ""      to sFileList
9033>>>>>        If (sHelpPath ="") ;            Get ReadString of hoIniFile "Workspace" "HelpPath" ""      to sHelpPath
9036>>>>>        If (sIdeSrcPath ="") ;            Get ReadString of hoIniFile "Workspace" "IdeSrcPath" ""    to sIdeSrcPath
9039>>>>>        If (sProgramPath ="") ;            Get ReadString of hoIniFile "Workspace" "ProgramPath" ""   to sProgramPath
9042>>>>>        If (sWorkspaceName ="") ;            Move (Left(sWsName, Length(sWsName) -3))                   to sWorkspaceName
9045>>>>>        If (sConnectionIni ="") ;            Get ReadString of hoIniFile "Workspace" "ConnectionIni" ""   to sConnectionIni
9048>>>>>        
9048>>>>>        If (sSystemDfPath ="") ;            Set psSystemDfPath   to (VdfSystemDfPath(Self))
9051>>>>>        If (sSystemMakePath ="") ;            Set psSystemMakePath to (VdfSystemMakePath(Self))
9054>>>>>        
9054>>>>>        Set psHome          to (FullPathNames(Self, sHome))
9055>>>>>        
9055>>>>>        // Set CWD to Home...
9055>>>>>        Move (SetCurrentDirectory(sHome)) to bSuccess
9056>>>>>        Set psAppSrcPath    to (FullPathNames(Self, sAppSrcPath))
9057>>>>>        Set psAppHtmlPath   to (FullPathNames(Self, sAppHtmlPath))
9058>>>>>        Set psBitmapPath    to (FullPathNames(Self, sBitmapPath))
9059>>>>>        Set psDataPath      to (FullPathNames(Self, sDataPath))
9060>>>>>        Set psDdSrcPath     to (FullPathNames(Self, sDdSrcPath))
9061>>>>>        Set psFileList      to (FullPathNames(Self, sFileList))
9062>>>>>        Set psHelpPath      to (FullPathNames(Self, sHelpPath))
9063>>>>>        Set psIdeSrcPath    to (FullPathNames(Self, sIdeSrcPath))
9064>>>>>        Set psProgramPath   to (FullPathNames(Self, sProgramPath))
9065>>>>>        Set psConnectionIni to (FullPathNames(Self, sConnectionIni))
9066>>>>>        
9066>>>>>        Set psWorkspaceName to sWorkspaceName
9067>>>>>        Set psDescription   to sDescription
9068>>>>>        
9068>>>>>        Send Destroy of hoIniFile // destroy dynaically created inifile object
9069>>>>>        
9069>>>>>        // Restore CWD...
9069>>>>>        Move (SetCurrentDirectory(sOldDirectory)) to sOldDirectory
9070>>>>>        
9070>>>>>        // Check for error conditions:
9070>>>>>        // DataPath and FileList must be defined; the FileList entry must point to a valid FileList.cfg
9070>>>>>        If (psDataPath(Self) = "") ;            Function_Return wsDataPathEmpty
9073>>>>>        If (psFileList(Self) = "") ;            Function_Return wsFileListEmpty
9076>>>>>        
9076>>>>>        Move (DoesFileExist(psFileList(Self))) to bExist
9077>>>>>        If (bExist = False) ;            Function_Return wsFileListNotExist
9080>>>>>        
9080>>>>>        If bChangingWorkspace ;            Close DF_ALL // if there is a WS open, we must close all the files
9083>>>>>        
9083>>>>>        Send DoAssignPaths // set psDfPath
9084>>>>>        Send DoSetPaths    // Set the application's Attributes of Filelist_Name and Open_Path
9085>>>>>        Set pbWorkspaceOpened to True
9086>>>>>        
9086>>>>>        Function_Return wsWorkspaceOpened
9087>>>>>    End_Function
9088>>>>>    
9088>>>>>    Function OpenWorkspace String sWorkspace Returns Integer
9090>>>>>        // Look in the Workspaces.ini file for the name, then open it by path
9090>>>>>        
9090>>>>>        Handle hoSections hoIniFile
9090>>>>>        Integer iWorkspace eOpened
9090>>>>>        String sWorkspaceName sPath
9090>>>>>        String sVdfRootDir
9090>>>>>        
9090>>>>>        Get Create U_Array    to hoSections
9091>>>>>        Get Create U_cIniFile to hoIniFile
9092>>>>>        
9092>>>>>        Get_Profile_String "Defaults" "VdfRootDir" to sVdfRootDir
9095>>>>>        If (Right(sVdfRootDir,1) <>"\") ;            Move (sVdfRootDir +"\") to sVdfRootDir
9098>>>>>        
9098>>>>>        Set psFilename of hoIniFile to (sVdfRootDir +"bin\Workspaces.ini")
9099>>>>>        
9099>>>>>        Send ReadSections of hoIniFile hoSections
9100>>>>>        
9100>>>>>        For iWorkspace from 0 to (Item_Count(hoSections) -1)
9106>>>>>>
9106>>>>>            Get Value of hoSections iWorkspace to sWorkspaceName
9107>>>>>            If (Uppercase(sWorkspaceName) = Uppercase(sWorkspace)) Begin
9109>>>>>                Get ReadString of hoIniFile sWorkspace "Path" "" to sPath
9110>>>>>                If (Right(sPath,1) <>"\") ;                    Move (sPath +"\") to sPath
9113>>>>>                
9113>>>>>                Get OpenWorkspaceFile (sPath + sWorkspace) to eOpened
9114>>>>>                Send Destroy of hoSections
9115>>>>>                Send Destroy of hoIniFile
9116>>>>>                Function_Return eOpened
9117>>>>>            End
9117>>>>>>
9117>>>>>        Loop
9118>>>>>>
9118>>>>>        
9118>>>>>        Send Destroy of hoSections
9119>>>>>        Send Destroy of hoIniFile
9120>>>>>        Function_Return wsWorkspaceNotFound
9121>>>>>    End_Function
9122>>>>>    
9122>>>>>    Function IsRegistered String sWorkspace Returns Boolean
9124>>>>>        Boolean bRegistered
9124>>>>>        Handle hoIniFile
9124>>>>>        String sVdfRootDir
9124>>>>>        
9124>>>>>        Get Create U_cIniFile to hoIniFile
9125>>>>>        
9125>>>>>        Get_Profile_String "Defaults" "VdfRootDir" to sVdfRootDir
9128>>>>>        If (Right(sVdfRootDir,1) <>"\") ;            Move (sVdfRootDir +"\") to sVdfRootDir
9131>>>>>        Set psFilename of hoIniFile to (sVdfRootDir +"bin\Workspaces.ini")
9132>>>>>        Move (SectionExists(hoIniFile, sWorkspace)) to bRegistered
9133>>>>>        
9133>>>>>        Send Destroy of hoIniFile
9134>>>>>        
9134>>>>>        Function_Return bRegistered
9135>>>>>    End_Function
9136>>>>>    
9136>>>>>    Function VdfSystemDfPath Returns String
9138>>>>>        String sSystemDfPath
9138>>>>>        Get_Profile_String "Workspaces" "SystemDfPath" to sSystemDfPath
9141>>>>>        
9141>>>>>        Function_Return sSystemDfPath
9142>>>>>    End_Function
9143>>>>>    
9143>>>>>    Function VdfSystemMakePath Returns String
9145>>>>>        String sSystemMakePath
9145>>>>>        Get_Profile_String "Workspaces" "SystemMakePath" to sSystemMakePath
9148>>>>>        
9148>>>>>        Function_Return sSystemMakePath
9149>>>>>    End_Function
9150>>>>>    
9150>>>>>    Procedure DoAssignPaths
9152>>>>>        String sDataPath sBitmapPath sHelpPath sProgramPath sSystemDfPath
9152>>>>>        
9152>>>>>        Get psDataPath     to sDataPath
9153>>>>>        Get psBitmapPath   to sBitmapPath
9154>>>>>        Get psHelpPath     to sHelpPath
9155>>>>>        Get psProgramPath  to sProgramPath
9156>>>>>        Get psSystemDfPath to sSystemDfPath
9157>>>>>        
9157>>>>>        Set psDfPath to (sDataPath +';' + sBitmapPath +';' + sHelpPath +';' + sProgramPath +';' + sSystemDfPath)
9158>>>>>        
9158>>>>>    End_Procedure
9159>>>>>    
9159>>>>>    Procedure DoSetPaths
9161>>>>>        // [JVH] must convert paths to Ansi before setting these values
9161>>>>>        // Note- this conversion is temporarily rolled back
9161>>>>>        //Set_Attribute DF_FILELIST_NAME To (ToAnsi(psFileList(self)))
9161>>>>>        //Set_Attribute DF_OPEN_PATH     To (ToAnsi(psDfPath(self)))
9161>>>>>        Set_Attribute DF_FILELIST_NAME to (psFileList(Self))
9164>>>>>        Set_Attribute DF_OPEN_PATH     to (psDfPath(Self))
9167>>>>>    End_Procedure
9168>>>>>    
9168>>>>>    Procedure EnumerateWorkspaceData Handle hoCallBack Handle hmGeneric
9170>>>>>        String sPath
9170>>>>>        
9170>>>>>        If (psWorkspaceName(Self)="") ;            Send hmGeneric to hoCallBack C_$WorkspaceNotUsed
9173>>>>>        Else Begin
9174>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$WorkspaceDesc, psDescription(Self)))
9175>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$WorkspaceName, psWorkspaceName(Self)))
9176>>>>>            Send hmGeneric to hoCallBack ""
9177>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$Filelist, psFileList(Self)))
9178>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$DataPath, psDataPath(Self)))
9179>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$ProgramPath, psProgramPath(Self)))
9180>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$HelpPath, psHelpPath(Self)))
9181>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$BitmapsPath, psBitmapPath(Self)))
9182>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$SystemPaths, psSystemDfPath(Self)))
9183>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$FullDFPath, psDfPath(Self)))
9184>>>>>        End
9184>>>>>>
9184>>>>>    End_Procedure
9185>>>>>    
9185>>>>>    Function OpenWorkspaceErrorMessage Integer eErrorCode Returns String
9187>>>>>        // Decodes the enumerated integer returned by OpenWorkspace and
9187>>>>>        // returns a corresponding message string.
9187>>>>>        String sError
9187>>>>>        
9187>>>>>        Case Begin
9187>>>>>            Case (eErrorCode = wsWorkspaceOpened)
9189>>>>>                Move C_$NoErrors to sError
9190>>>>>                Case Break
9191>>>>>            Case (eErrorCode = wsWorkspaceNotFound)
9194>>>>>                Move C_$NoWsName to sError
9195>>>>>                Case Break
9196>>>>>            Case (eErrorCode = wsWorkspaceFileNotFound)
9199>>>>>                Move C_$NoWsFileFound to sError
9200>>>>>                Case Break
9201>>>>>            Case (eErrorCode = wsDataPathEmpty)
9204>>>>>                Move C_$NoWsDataPath to sError
9205>>>>>                Case Break
9206>>>>>            Case (eErrorCode = wsFileListEmpty)
9209>>>>>                Move C_$NoWsFileList to sError
9210>>>>>                Case Break
9211>>>>>            Case (eErrorCode = wsFileListNotExist)
9214>>>>>                Move C_$NoFileListCfg to sError
9215>>>>>                Case Break
9216>>>>>            Case Else
9216>>>>>                Move C_$UnknownError to sError
9217>>>>>                Case Break
9218>>>>>        Case End
9218>>>>>        
9218>>>>>        Function_Return (sError-".")
9219>>>>>    End_Function
9220>>>>>    
9220>>>>>    Function GetWorkspaceFileName String sWorkspace Returns String
9222>>>>>        // Returns the name of the physical Workspace file for the passed Workspace name.
9222>>>>>        String sVdfRootDir
9222>>>>>        Handle hoIniFile
9222>>>>>        String sPath
9222>>>>>        String sFileName
9222>>>>>        String sWorkspacePath
9222>>>>>        
9222>>>>>        Move "" to sFileName
9223>>>>>        
9223>>>>>        Get_Profile_String "Defaults" "VdfRootDir" to sVdfRootDir
9226>>>>>        If (Right(sVdfRootDir,1) <>"\") ;            Move (sVdfRootDir +"\") to sVdfRootDir
9229>>>>>        
9229>>>>>        Get Create U_cIniFile to hoIniFile
9230>>>>>        Set psFilename of hoIniFile to (sVdfRootDir +"bin\Workspaces.ini")
9231>>>>>        Get ReadString of hoIniFile sWorkspace "Path" "" to sWorkspacePath
9232>>>>>        If (sWorkspacePath <>"") Begin
9234>>>>>            If (Right(sWorkspacePath,1) <>"\") ;                Move (sWorkspacePath +"\") to sWorkspacePath
9237>>>>>            Move (sWorkspacePath +sWorkspace +".ws") to sFileName
9238>>>>>        End
9238>>>>>>
9238>>>>>        Send Destroy of hoIniFile
9239>>>>>        
9239>>>>>        Function_Return sFileName
9240>>>>>    End_Function
9241>>>>>    
9241>>>>>    Function CountOfPaths String sPaths Returns Integer
9243>>>>>        // Returns the number of paths defined in a string of paths
9243>>>>>        Integer iChar icChar icPath
9243>>>>>        
9243>>>>>        If (sPaths ="") ;            Function_Return 0
9246>>>>>        
9246>>>>>        Move (Length(sPaths) -1) to icChar
9247>>>>>        For iChar from 1 to icChar
9253>>>>>>
9253>>>>>            If (Mid(sPaths, 1, iChar) =";") ;                Increment icPath
9256>>>>>        Loop
9257>>>>>>
9257>>>>>        
9257>>>>>        Function_Return (icPath +1)
9258>>>>>    End_Function
9259>>>>>    
9259>>>>>    Function PathAtIndex String sPaths Integer iIndex Returns String
9261>>>>>        // Returns the path at the 1-based index of passed paths.
9261>>>>>        // If the path contains a trailing "\", it will be removed
9261>>>>>        Integer iChar icPath iPath iPos
9261>>>>>        String sPath
9261>>>>>        
9261>>>>>        Move (sPaths +";") to sPaths
9262>>>>>        For iPath from 1 to iIndex
9268>>>>>>
9268>>>>>            Move (Pos(";", sPaths)) to iPos
9269>>>>>            If iPos Begin
9271>>>>>                Move (Left(sPaths, iPos -1)) to sPath
9272>>>>>                If (Right(sPath,1) = '\') ;                    Move (Left(sPath, Length(sPath) -1)) to sPath
9275>>>>>                Move (Right(sPaths, Length(sPaths) -iPos)) to sPaths
9276>>>>>            End
9276>>>>>>
9276>>>>>            Else ;                Function_Return "" // index past number of paths
9278>>>>>        Loop
9279>>>>>>
9279>>>>>        
9279>>>>>        Function_Return sPath
9280>>>>>    End_Function
9281>>>>>    
9281>>>>>End_Class
9282>>>Use cCommandLine.pkg
Including file: cCommandLine.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCommandLine.pkg)
9282>>>>>Use VDFBase.pkg
9282>>>>>
9282>>>>>Class cCommandLine is a cObject
9283>>>>>    
9283>>>>>    Procedure Construct_Object
9285>>>>>        Forward Send Construct_Object
9287>>>>>        
9287>>>>>        Property Handle phoArgs // private object-handle of internal array of arguments
9288>>>>>    End_Procedure
9289>>>>>    
9289>>>>>    Procedure Private_DoCreateArgsArray
9291>>>>>        // creates the array for holding the arguments. Created upon demand only!
9291>>>>>        Integer icArg
9291>>>>>        String sArg
9291>>>>>        
9291>>>>>        Object oArgs is an Array
9293>>>>>            Delegate Set phoArgs to Self
9295>>>>>            Repeat
9295>>>>>>
9295>>>>>                CmdLine sArg
9296>>>>>>
9296>>>>>                If (sArg <> "") Begin
9298>>>>>                    Increment icArg
9299>>>>>                    Set Value  (icArg -1) to sArg
9300>>>>>                End
9300>>>>>>
9300>>>>>            Until (sArg = "")
9302>>>>>        End_Object
9303>>>>>    End_Procedure
9304>>>>>    
9304>>>>>    Function CountOfArgs Returns Integer
9306>>>>>        //Returns the number of arguments passed
9306>>>>>        If (phoArgs(Self) =0) ;            Send Private_DoCreateArgsArray
9309>>>>>        Function_Return (Item_Count(phoArgs(Self)))
9310>>>>>    End_Function
9311>>>>>    
9311>>>>>    Function Argument Integer iIndex Returns String
9313>>>>>        //Returns the one-based argument string
9313>>>>>        If (phoArgs(Self) =0) ;            Send Private_DoCreateArgsArray
9316>>>>>        Function_Return (Value(phoArgs(Self), iIndex -1))
9317>>>>>    End_Function
9318>>>>>    
9318>>>>>End_Class
9319>>>>>
9319>>>Use cRegistry.pkg
Including file: cRegistry.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cRegistry.pkg)
9319>>>>>Use Dll.pkg
9319>>>>>Use RegistryAPI.pkg
9319>>>>>Use tWinStructs.pkg
9319>>>>>
9319>>>>>Enum_List // Registry Data types
9319>>>>>    Define rdString
9319>>>>>    Define rdDword
9319>>>>>    Define rdBinary
9319>>>>>    Define rdUnknown
9319>>>>>End_Enum_List
9319>>>>>
9319>>>>>
9319>>>>>Class cRegistry is a cObject
9320>>>>>    Procedure Construct_Object
9322>>>>>        Forward Send Construct_Object
9324>>>>>        
9324>>>>>        Property Handle phRootKey HKEY_CURRENT_USER
9325>>>>>        Property UInteger pfAccessRights  KEY_ALL_ACCESS // what access level should be used to open a Key?
9326>>>>>        Property Handle phCurrentKey
9327>>>>>        Property Boolean pbLazyWrite True
9328>>>>>    End_Procedure
9329>>>>>    
9329>>>>>    Function CountOfSubkeys Returns Integer
9331>>>>>        Integer dwCountOfSubkeys
9331>>>>>        Integer iError
9331>>>>>        String sError
9331>>>>>        
9331>>>>>        Move 0 to dwCountOfSubkeys
9332>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, AddressOf(dwCountOfSubkeys), 0, 0, 0, 0, 0, 0, 0)) to iError
9333>>>>>        If iError Begin
9335>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9336>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9337>>>>>>
9337>>>>>        End
9337>>>>>>
9337>>>>>        Function_Return dwCountOfSubkeys
9338>>>>>    End_Function
9339>>>>>    
9339>>>>>    Function CountOfValues Returns Integer
9341>>>>>        Integer dwCountOfValues
9341>>>>>        Integer iError
9341>>>>>        String sError
9341>>>>>        
9341>>>>>        Move 0 to dwCountOfValues
9342>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, 0, 0, 0, AddressOf(dwCountOfValues), 0, 0, 0, 0)) to iError
9343>>>>>        If iError Begin
9345>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9346>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9347>>>>>>
9347>>>>>        End
9347>>>>>>
9347>>>>>        
9347>>>>>        Function_Return dwCountOfValues
9348>>>>>    End_Function
9349>>>>>    
9349>>>>>    Function LongestSubkeyLength Returns Integer
9351>>>>>        Integer dwLongestSubkeyLength
9351>>>>>        Integer iError
9351>>>>>        String sError
9351>>>>>        
9351>>>>>        Move 0 to dwLongestSubkeyLength
9352>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, 0, AddressOf(dwLongestSubkeyLength), 0, 0, 0, 0, 0, 0)) to iError
9353>>>>>        If iError Begin
9355>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9356>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9357>>>>>>
9357>>>>>        End
9357>>>>>>
9357>>>>>        
9357>>>>>        Function_Return dwLongestSubkeyLength
9358>>>>>    End_Function
9359>>>>>    
9359>>>>>    Function LongestValueLength Returns Integer
9361>>>>>        Integer dwLongestValueLength
9361>>>>>        Integer iError
9361>>>>>        String sError
9361>>>>>        
9361>>>>>        Move 0 to dwLongestValueLength
9362>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, 0, 0, 0, 0, AddressOf(dwLongestValueLength), 0, 0, 0)) to iError
9363>>>>>        If iError Begin
9365>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9366>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9367>>>>>>
9367>>>>>        End
9367>>>>>>
9367>>>>>        
9367>>>>>        Function_Return dwLongestValueLength
9368>>>>>    End_Function
9369>>>>>    
9369>>>>>    Function LongestDataLength Returns Integer
9371>>>>>        Integer dwLongestDataLength
9371>>>>>        Integer iError
9371>>>>>        String sError
9371>>>>>        
9371>>>>>        Move 0 to dwLongestDataLength
9372>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, 0, 0, 0, 0, 0, AddressOf(dwLongestDataLength), 0, 0)) to iError
9373>>>>>        If iError Begin
9375>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9376>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9377>>>>>>
9377>>>>>        End
9377>>>>>>
9377>>>>>        
9377>>>>>        Function_Return dwLongestDataLength
9378>>>>>    End_Function
9379>>>>>    
9379>>>>>    Function ValueType String sValueName Returns Integer
9381>>>>>        Integer dwType
9381>>>>>        Integer iError eType
9381>>>>>        String sError
9381>>>>>        
9381>>>>>        Move 0 to dwType
9382>>>>>        Move (RegQueryValueExW(phCurrentKey(Self), sValueName, 0, AddressOf(dwType), 0, 0)) to iError
9383>>>>>        If iError Begin
9385>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9386>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9387>>>>>>
9387>>>>>        End
9387>>>>>>
9387>>>>>        
9387>>>>>        If (dwType = REG_SZ) ;            Move rdString to eType
9390>>>>>        Else If (dwType = REG_DWORD)  ;            Move rdDword to eType
9394>>>>>        Else If (dwType = REG_BINARY) ;            Move rdBinary to eType
9398>>>>>        Else ;            Move rdUnknown to eType
9400>>>>>        
9400>>>>>        Function_Return eType
9401>>>>>    End_Function
9402>>>>>    
9402>>>>>    Function ValueLength String sValueName Returns Integer
9404>>>>>        Integer dwSize
9404>>>>>        Integer iError
9404>>>>>        String sError
9404>>>>>        
9404>>>>>        Move 0 to dwSize
9405>>>>>        Move (RegQueryValueExW(phCurrentKey(Self), sValueName, 0, 0, 0, AddressOf(dwSize))) to iError
9406>>>>>        If iError Begin
9408>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9409>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9410>>>>>>
9410>>>>>        End
9410>>>>>>
9410>>>>>        
9410>>>>>        Function_Return dwSize
9411>>>>>    End_Function
9412>>>>>    
9412>>>>>    Function CreateKey String sKeyName Returns Integer // return=error code
9414>>>>>        // Calling CreateKey for an existing Key, merely opens it without error.
9414>>>>>        Handle hKey hKeyOpened
9414>>>>>        Integer iError
9414>>>>>        String sError
9414>>>>>        
9414>>>>>        Move 0 to hKeyOpened // initialize it so we can get its address
9415>>>>>        
9415>>>>>        Get phRootKey to hKey
9416>>>>>        
9416>>>>>        Move (RegCreateKeyEx(hKey, sKeyName, 0, 0, REG_OPTION_NON_VOLATILE, pfAccessRights(Self), 0, AddressOf(hKeyOpened), 0)) to iError
9417>>>>>        If (iError =0) ;            Set phCurrentKey to hKeyOpened
9420>>>>>        Else Begin
9421>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9422>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9423>>>>>>
9423>>>>>        End
9423>>>>>>
9423>>>>>        Function_Return iError
9424>>>>>    End_Function
9425>>>>>    
9425>>>>>    Procedure CloseKey
9427>>>>>        Integer iError
9427>>>>>        Handle hKey
9427>>>>>        
9427>>>>>        Get phCurrentKey to hKey
9428>>>>>        
9428>>>>>        If (hKey <>0) Begin
9430>>>>>            If (pbLazyWrite(Self)) ;                Move (RegCloseKey(hKey)) to iError
9433>>>>>            Else ;                Move (RegFlushKey(hKey)) to iError
9435>>>>>            
9435>>>>>            Set phCurrentKey to 0
9436>>>>>        End
9436>>>>>>
9436>>>>>    End_Procedure
9437>>>>>    
9437>>>>>    Function OpenKey String sKeyName Returns Boolean
9439>>>>>        Handle hKey hKeyOpened
9439>>>>>        Integer iError
9439>>>>>        
9439>>>>>        Move 0 to hKeyOpened // initialize it so we can get its address
9440>>>>>        
9440>>>>>        Get phRootKey to hKey
9441>>>>>        Move (RegOpenKeyEx(hKey, sKeyName, 0, pfAccessRights(Self), AddressOf(hKeyOpened))) to iError
9442>>>>>        If (iError =0) ;            Set phCurrentKey to hKeyOpened
9445>>>>>        
9445>>>>>        Function_Return (iError=0)
9446>>>>>    End_Function
9447>>>>>    
9447>>>>>    Procedure WriteInteger WString sValue Integer iValueData
9449>>>>>        Handle hKey
9449>>>>>        Integer iError
9449>>>>>        Integer iData
9449>>>>>        String sError
9449>>>>>        
9449>>>>>        Move iValueData to iData
9450>>>>>        Get phCurrentKey to hKey
9451>>>>>        Move (RegSetValueExW(hKey, sValue, 0, REG_DWORD, AddressOf(iData), SizeOfType(Integer))) to iError
9452>>>>>        If iError Begin
9454>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9455>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9456>>>>>>
9456>>>>>        End
9456>>>>>>
9456>>>>>    End_Procedure
9457>>>>>    
9457>>>>>    // WriteDword is obsolete. Please use WriteInteger or WriteUInt, depending on whether you use a signed or unsigned value.
9457>>>>>    Procedure WriteDword String sValue Integer iValueData
9459>>>>>        Send WriteInteger of Self sValue iValueData
9460>>>>>    End_Procedure
9461>>>>>    
9461>>>>>    Procedure WriteUInt WString sValue UInteger uValueData
9463>>>>>        Handle hKey
9463>>>>>        Integer iError
9463>>>>>        UInteger uData
9463>>>>>        String sError
9463>>>>>        
9463>>>>>        Move uValueData to uData
9464>>>>>        Get phCurrentKey to hKey
9465>>>>>        Move (RegSetValueExW(hKey, sValue, 0, REG_DWORD, AddressOf(uData), SizeOfType(UInteger))) to iError
9466>>>>>        If iError Begin
9468>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9469>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9470>>>>>>
9470>>>>>        End
9470>>>>>>
9470>>>>>    End_Procedure
9471>>>>>
9471>>>>>    Procedure WriteString WString sValue WString wValueData
9473>>>>>        Handle hKey
9473>>>>>        Integer iError cbData
9473>>>>>        String sError
9473>>>>>        
9473>>>>>        If (wValueData = "") Begin
9475>>>>>            Move (Character(0)) to wValueData
9476>>>>>            Move 1 to cbData
9477>>>>>        End
9477>>>>>>
9477>>>>>        Else Begin
9478>>>>>            Move ((SizeOfWString(wValueData) +1)*2) to cbData
9479>>>>>        End
9479>>>>>>
9479>>>>>        Get phCurrentKey to hKey
9480>>>>>        Move (RegSetValueExW(hKey, sValue, 0, REG_SZ, AddressOf(wValueData), cbData)) to iError
9481>>>>>        If iError Begin
9483>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9484>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9485>>>>>>
9485>>>>>        End
9485>>>>>>
9485>>>>>    End_Procedure
9486>>>>>    
9486>>>>>    Procedure WriteBinary WString sValue Pointer pValueData Integer iDataLength
9488>>>>>        Handle hKey
9488>>>>>        Integer iError
9488>>>>>        String sError
9488>>>>>        
9488>>>>>        Get phCurrentKey to hKey
9489>>>>>        Move (RegSetValueExw(hKey, sValue, 0, REG_BINARY, pValueData, iDataLength)) to iError
9490>>>>>        If iError Begin
9492>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9493>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9494>>>>>>
9494>>>>>        End
9494>>>>>>
9494>>>>>    End_Procedure
9495>>>>>    
9495>>>>>    Function ReadInteger WString sValueName Returns Integer
9497>>>>>        Handle hKey
9497>>>>>        Integer iError
9497>>>>>        Integer iValueData iValueDataLength
9497>>>>>        String sError
9497>>>>>        
9497>>>>>        Move 0           to iValueData
9498>>>>>        Move (SizeOfType(Integer)) to iValueDataLength
9499>>>>>        
9499>>>>>        Get phCurrentKey to hKey
9500>>>>>        Move (RegQueryValueExW(hKey, sValueName, 0, 0, AddressOf(iValueData), AddressOf(iValueDataLength))) to iError
9501>>>>>        If iError Begin
9503>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9504>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9505>>>>>>
9505>>>>>        End
9505>>>>>>
9505>>>>>        
9505>>>>>        Function_Return iValueData
9506>>>>>    End_Function
9507>>>>>    
9507>>>>>    // ReadDword is obsolete. Please use ReadInteger or ReadUInt, depending on whether you expect a signed or unsigned value.
9507>>>>>    Function ReadDword String sValueName Returns Integer
9509>>>>>        Function_Return (ReadInteger(Self, sValueName))
9510>>>>>    End_Function
9511>>>>>
9511>>>>>    Function ReadUInt WString sValueName Returns UInteger
9513>>>>>        Handle hKey
9513>>>>>        Integer iError
9513>>>>>        UInteger uValueData uValueDataLength
9513>>>>>        String sError
9513>>>>>        
9513>>>>>        Move 0           to uValueData
9514>>>>>        Move (SizeOfType(UInteger)) to uValueDataLength
9515>>>>>        
9515>>>>>        Get phCurrentKey to hKey
9516>>>>>        Move (RegQueryValueExW(hKey, sValueName, 0, 0, AddressOf(uValueData), AddressOf(uValueDataLength))) to iError
9517>>>>>        If iError Begin
9519>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9520>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9521>>>>>>
9521>>>>>        End
9521>>>>>>
9521>>>>>        
9521>>>>>        Function_Return uValueData
9522>>>>>    End_Function
9523>>>>>    
9523>>>>>    Function ReadString String sValueName Returns String
9525>>>>>        Handle hKey
9525>>>>>        Integer iError
9525>>>>>        WString wValueData
9525>>>>>        DWord dwValueDataLength dwType
9525>>>>>        Pointer lpsValueData
9525>>>>>        String sError
9525>>>>>        
9525>>>>>        Move (Repeat(character(0), ValueLength(Self, sValueName))) to wValueData
9526>>>>>        Move (AddressOf(wValueData)) to lpsValueData
9527>>>>>        
9527>>>>>        Move (SizeOfWString(wValueData)) to dwValueDataLength
9528>>>>>        
9528>>>>>        Move REG_SZ to dwType
9529>>>>>        
9529>>>>>        Get phCurrentKey to hKey
9530>>>>>        Move (RegQueryValueExW(hKey, sValueName, 0, (AddressOf(dwType)), lpsValueData, AddressOf(dwValueDataLength))) to iError
9531>>>>>        If iError Begin
9533>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9534>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9535>>>>>>
9535>>>>>        End
9535>>>>>>
9535>>>>>        
9535>>>>>        Function_Return (CString(wValueData))
9536>>>>>    End_Function
9537>>>>>    
9537>>>>>    Function ReadBinary String sValueName Pointer pValueData Integer iDataLength Returns Boolean
9539>>>>>        Handle hKey
9539>>>>>        Integer iError
9539>>>>>        String sError
9539>>>>>        
9539>>>>>        Get phCurrentKey to hKey
9540>>>>>        Move (RegQueryValueExW(hKey, sValueName, 0, 0, pValueData, AddressOf(iDataLength))) to iError
9541>>>>>        If iError Begin
9543>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9544>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9545>>>>>>
9545>>>>>        End
9545>>>>>>
9545>>>>>        
9545>>>>>        Function_Return (iDataLength >0)
9546>>>>>    End_Function
9547>>>>>    
9547>>>>>    
9547>>>>>    // Private....
9547>>>>>    Function GetBaseKey Returns Handle
9549>>>>>        Handle hBaseKey
9549>>>>>        If (phCurrentKey(Self) = 0) ;            Get phRootKey to hBaseKey
9552>>>>>        Else ;            Get phCurrentKey to hBaseKey
9554>>>>>        
9554>>>>>        Function_Return hBaseKey
9555>>>>>    End_Function
9556>>>>>    
9556>>>>>    Function GetKey String sKeyName Returns Handle
9558>>>>>        Handle hKeyOpened
9558>>>>>        Integer iError
9558>>>>>        
9558>>>>>        Move 0 to hKeyOpened // initialize so we can get its address
9559>>>>>        
9559>>>>>        Move (RegOpenKeyEx(GetBaseKey(Self), sKeyName, 0, pfAccessRights(Self), AddressOf(hKeyOpened))) to iError
9560>>>>>        
9560>>>>>        If (iError =0) ;            Function_Return hKeyOpened
9563>>>>>        Else ;            Function_Return 0
9565>>>>>    End_Function
9566>>>>>    
9566>>>>>    // Public
9566>>>>>    Function KeyExists String sKeyName Returns Boolean
9568>>>>>        Handle hKey
9568>>>>>        Integer iVoid
9568>>>>>        
9568>>>>>        If (Trim(sKeyName) = "") ;            Function_Return False
9571>>>>>        
9571>>>>>        Get GetKey sKeyName to hKey
9572>>>>>        If hKey ;            Move (RegCloseKey(hKey)) to iVoid
9575>>>>>        Function_Return (hKey <>0)
9576>>>>>    End_Function
9577>>>>>    
9577>>>>>    Function ValueExists String sValueName Returns Boolean
9579>>>>>        // Determines whether a Value exists for the currently-opened Key.
9579>>>>>        Integer iError
9579>>>>>        DWord dwDataType
9579>>>>>        Move 0 to dwDataType // must initialize the variable to get its address
9580>>>>>        
9580>>>>>        Move (RegQueryValueExW(phCurrentKey(Self), sValueName, 0, AddressOf(dwDataType), 0, 0)) to iError
9581>>>>>        
9581>>>>>        Function_Return (iError=0)
9582>>>>>    End_Function
9583>>>>>    
9583>>>>>    Function DeleteKey String sKeyName Returns Boolean // Deleted successfully?
9585>>>>>        Function_Return (ShDeleteKey(phRootKey(Self), sKeyName) =0)
9586>>>>>    End_Function
9587>>>>>    
9587>>>>>    Function DeleteValue String sValueName Returns Boolean // Deleted successfully?
9589>>>>>        Function_Return (RegDeleteValue(phCurrentKey(Self), sValueName) =0)
9590>>>>>    End_Function
9591>>>>>    
9591>>>>>    Function Subkeys Returns String[]
9593>>>>>        Integer iError
9593>>>>>        Integer icValue iLongestSubkey
9593>>>>>        Handle hKey
9593>>>>>        DWord dwSubkeyNameLength
9593>>>>>        String sSubkeyName sFileTime
9593>>>>>        Pointer lpsSubkeyName
9593>>>>>        String[] aResult
9594>>>>>        tWinFileTime fileTime
9594>>>>>        tWinFileTime fileTime
9594>>>>>
9594>>>>>        Get LongestSubkeyLength to iLongestSubkey
9595>>>>>        Move (Repeat(character(0), iLongestSubkey +1)) to sSubkeyName
9596>>>>>        Move (AddressOf(sSubkeyName)) to lpsSubkeyName
9597>>>>>
9597>>>>>        Get phCurrentKey to hKey
9598>>>>>        Repeat
9598>>>>>>
9598>>>>>            Move (iLongestSubkey +1) to dwSubkeyNameLength
9599>>>>>
9599>>>>>            Move (RegEnumKeyEx(hKey, icValue, lpsSubkeyName, AddressOf(dwSubkeyNameLength), 0, 0, 0, AddressOf(fileTime))) to iError
9600>>>>>            If (iError =0) Begin
9602>>>>>                Move (CString(sSubkeyName)) to aResult[icValue]
9603>>>>>                Increment icValue
9604>>>>>            End
9604>>>>>>
9604>>>>>        Until (iError)
9606>>>>>        Function_Return aResult
9607>>>>>    End_Function
9608>>>>>    
9608>>>>>    Function GetSubkeys Handle hoArray Returns Integer // count of Values
9610>>>>>        Integer iError
9610>>>>>        Integer icValue iLongestSubkey
9610>>>>>        Handle hKey
9610>>>>>        DWord dwSubkeyNameLength
9610>>>>>        WString wSubkeyName
9610>>>>>        tWinFileTime FileTime
9610>>>>>        tWinFileTime FileTime
9610>>>>>        
9610>>>>>        Get LongestSubkeyLength to iLongestSubkey
9611>>>>>        Move (Repeat(character(0), iLongestSubkey +1)) to wSubkeyName
9612>>>>>        
9612>>>>>        Get phCurrentKey to hKey
9613>>>>>        Repeat
9613>>>>>>
9613>>>>>            Move (iLongestSubkey +1) to dwSubkeyNameLength
9614>>>>>            
9614>>>>>            Move (RegEnumKeyExW(hKey, icValue, AddressOf(wSubkeyName), AddressOf(dwSubkeyNameLength), 0, 0, 0, AddressOf(FileTime))) to iError
9615>>>>>            If (iError =0) Begin
9617>>>>>                Increment icValue
9618>>>>>                Set Value of hoArray (Item_Count(hoArray)) to (CString(wSubkeyName))
9619>>>>>            End
9619>>>>>>
9619>>>>>        Until (iError)
9621>>>>>        Function_Return icValue
9622>>>>>        
9622>>>>>    End_Function
9623>>>>>    
9623>>>>>    Function GetValues Handle hoArray Returns Integer // count of Values
9625>>>>>        Integer iError
9625>>>>>        Integer icValue iLongestValue
9625>>>>>        Handle hKey
9625>>>>>        DWord dwValueNameLength
9625>>>>>        WString wValueName 
9625>>>>>        String sValueNameSize
9625>>>>>        Pointer lpsValueName
9625>>>>>        
9625>>>>>        Get LongestValueLength to iLongestValue
9626>>>>>        Move (Repeat(character(0), iLongestValue +1)) to wValueName
9627>>>>>        Move (AddressOf(wValueName)) to lpsValueName
9628>>>>>        
9628>>>>>        Get phCurrentKey to hKey
9629>>>>>        Repeat
9629>>>>>>
9629>>>>>            Move (iLongestValue +1) to dwValueNameLength
9630>>>>>            Move (RegEnumValueW(hKey, icValue, lpsValueName, AddressOf(dwValueNameLength), 0, 0, 0, 0)) to iError
9631>>>>>            If (iError =0) Begin
9633>>>>>                Increment icValue
9634>>>>>                Set Value of hoArray (Item_Count(hoArray)) to (CString(wValueName))
9635>>>>>            End
9635>>>>>>
9635>>>>>        Until (iError)
9637>>>>>        Function_Return icValue
9638>>>>>        
9638>>>>>    End_Function
9639>>>>>    
9639>>>>>End_Class
9640>>>Use cVersionInfo.pkg
Including file: cVersionInfo.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cVersionInfo.pkg)
9640>>>>>Use VdfBase.pkg
9640>>>>>Use DLL.pkg
9640>>>>>Use tWinStructs.pkg
9640>>>>>Use WinKern.pkg
9640>>>>>
9640>>>>>Define VS_FF_DEBUG         for |CI$00000001
9640>>>>>Define VS_FF_PRERELEASE    for |CI$00000002
9640>>>>>Define VS_FF_PATCHED       for |CI$00000004
9640>>>>>Define VS_FF_PRIVATEBUILD  for |CI$00000008
9640>>>>>Define VS_FF_INFOINFERRED  for |CI$00000010
9640>>>>>Define VS_FF_SPECIALBUILD  for |CI$00000020
9640>>>>>
9640>>>>>// Note: String pointer lpFilename must refer to WString type.
9640>>>>>External_Function GetFileVersionInfoSizeW "GetFileVersionInfoSizeW" version.dll ;    Pointer lpFilename ;    Pointer lpdwHandle ;    Returns DWord
9641>>>>>    
9641>>>>>// Wrapper Function GetFileVersionInfoSize (when using strings)
9641>>>>>Function GetFileVersionInfoSize Global ;    Pointer aFilename ;    Pointer lpdwHandle ;    Returns DWord
9643>>>>>    
9643>>>>>    DWord  dwResult
9643>>>>>    UWide  uwFileName
9643>>>>>    UWide  uwFileName
9643>>>>>
9643>>>>>    Send StringToWide aFilename (&uwFileName)
9644>>>>>    
9644>>>>>    Move (GetFileVersionInfoSizeW (uwFileName.lpUText, lpdwHandle)) to dwResult        
9645>>>>>    Function_Return dwResult
9646>>>>>End_Function
9647>>>>>
9647>>>>>// Note: String pointers should be referring to WString items.
9647>>>>>External_Function GetFileVersionInfoW "GetFileVersionInfoW" version.dll ;    Pointer lpFilename ;    DWord   dwHandle ;    DWord   dwLen ;    Pointer lpData ;    Returns Integer
9648>>>>>    
9648>>>>>// Wrapper Function GetFileVersionInfo (when using strings)
9648>>>>>Function GetFileVersionInfo Global ;    Pointer aFilename ;    DWord   dwHandle ;    DWord   dwLen ;    Pointer pData ;    Returns Integer
9650>>>>>    
9650>>>>>    Integer iResult
9650>>>>>    UWide   uwFileName
9650>>>>>    UWide   uwFileName
9650>>>>>
9650>>>>>    Send StringToWide aFilename (&uwFileName)
9651>>>>>    
9651>>>>>    Move (GetFileVersionInfoW (uwFileName.lpUText, dwHandle, dwLen, pData)) to iResult
9652>>>>>    Function_Return iResult
9653>>>>>End_Function    
9654>>>>>
9654>>>>>// Note: String pointers should be referring to WString items.
9654>>>>>External_Function VerQueryValueW "VerQueryValueW" version.dll ;    Pointer pBlock ;    Pointer pSubBlock ;    Pointer paBuffer ;    Pointer puLen ;    Returns Integer
9655>>>>>
9655>>>>>// Wrapper Function VerQueryValue (when using strings)
9655>>>>>Function VerQueryValue Global ;    Pointer pBlock ;    Pointer pSubBlock ;    Pointer paBuffer ;    Pointer puLen ;    Returns Integer
9657>>>>>    
9657>>>>>    Integer iResult
9657>>>>>    UWide   uwSubBlock
9657>>>>>    UWide   uwSubBlock
9657>>>>>    
9657>>>>>    Send StringToWide pSubBlock (&uwSubBlock)
9658>>>>>    
9658>>>>>    Move (VerQueryValueW (pBlock, uwSubBlock.lpUText, paBuffer, puLen)) to iResult        
9659>>>>>    
9659>>>>>    Function_Return iResult
9660>>>>>End_Function
9661>>>>>
9661>>>>>
9661>>>>>Class cVersionInfo is a cObject
9662>>>>>    Procedure Construct_Object
9664>>>>>        Forward Send Construct_Object
9666>>>>>        
9666>>>>>        
9666>>>>>        Property Integer piVersionMajor
9667>>>>>        Property Integer piVersionMinor
9668>>>>>        Property Integer piVersionRelease
9669>>>>>        Property Integer piVersionBuild
9670>>>>>        
9670>>>>>        Property Boolean pbIncluded
9671>>>>>        Property Boolean pbSpecialBuild
9672>>>>>        Property Boolean pbPrivateBuild
9673>>>>>        
9673>>>>>    End_Procedure
9674>>>>>    
9674>>>>>    Procedure DoCreate WString sFileName
9676>>>>>        DWord dwHandle
9676>>>>>        Integer iInfoSize iVerSize iSuccess iVersion iVoid iFlags
9676>>>>>        WString sData
9676>>>>>        tWinVs_FixedFileInfo VsFixedFileInfo
9676>>>>>        tWinVs_FixedFileInfo VsFixedFileInfo
9676>>>>>        WString sSubBlock
9676>>>>>        Pointer pVsFixedFileInfo
9676>>>>>        
9676>>>>>        Move 0 to pVsFixedFileInfo
9677>>>>>        Move 0 to dwHandle
9678>>>>>        Move 0 to iVerSize
9679>>>>>        
9679>>>>>        Move (GetFileVersionInfoSizeW(AddressOf(sFilename), AddressOf(dwHandle))) to iInfoSize
9680>>>>>        Set pbIncluded to (iInfoSize <>0)
9681>>>>>        
9681>>>>>        If (pbIncluded(Self)) Begin
9683>>>>>            Move (Repeat(Character(0), iInfoSize)) to sData
9684>>>>>            Move (GetFileVersionInfoW(AddressOf(sFilename), 0, iInfoSize, AddressOf(sData))) to iSuccess
9685>>>>>            
9685>>>>>            If (iSuccess <>0) Begin
9687>>>>>                Move "\" to sSubBlock
9688>>>>>                If (VerQueryValueW(AddressOf(sData), AddressOf(sSubBlock), AddressOf(pVsFixedFileInfo), AddressOf(iVerSize))) Begin
9690>>>>>                    Move (memcopy(AddressOf(VsFixedFileInfo), pVsFixedFileInfo, iVerSize)) to iVoid // copy the structure
9691>>>>>                    
9691>>>>>                    Move VsFixedFileInfo.dwFileVersionMS to iVersion
9692>>>>>                    Set piVersionMajor to (Hi(iVersion))
9693>>>>>                    Set piVersionMinor to (Low(iVersion))
9694>>>>>                    
9694>>>>>                    Move VsFixedFileInfo.dwFileVersionLS to iVersion
9695>>>>>                    Set piVersionRelease to (Hi(iVersion))
9696>>>>>                    Set piVersionBuild   to (Low(iVersion))
9697>>>>>                    
9697>>>>>                    Move VsFixedFileInfo.dwFileFlags to iFlags
9698>>>>>                    Set pbSpecialBuild    to (iFlags iand VS_FF_SPECIALBUILD)
9699>>>>>                    Set pbPrivateBuild    to (iFlags iand VS_FF_PRIVATEBUILD)
9700>>>>>                End
9700>>>>>>
9700>>>>>            End
9700>>>>>>
9700>>>>>            
9700>>>>>        End
9700>>>>>>
9700>>>>>    End_Procedure
9701>>>>>    
9701>>>>>End_Class
9702>>>Use GlobalFunctionsProcedures.pkg
9702>>>Use tWinStructs.pkg
9702>>>Use HelpSystemConstants.pkg // constants used by help system (not used by web)
9702>>>
9702>>>Register_Function phoWorkspace Returns Handle
9702>>>Register_Function phoCommandLine Returns Handle
9702>>>Register_Function pbEnterKeyAsTabKey Returns Boolean
9702>>>Register_Function GetApplicationName Returns String
9702>>>Register_Function GetApplicationFileName Returns String
9702>>>
9702>>>Register_Function Statusbar_State Returns Integer
9702>>>Register_Function Toolbar_State Returns Integer
9702>>>Register_Procedure Set Statusbar_State
9702>>>Register_Procedure Set Toolbar_State
9702>>>
9702>>>
9702>>>Class cApplication is a cObject
9703>>>    Procedure Construct_Object
9705>>>        Forward Send Construct_Object
9707>>>        
9707>>>        Move Self to ghoApplication
9708>>>        
9708>>>        Property Handle phoVersionInfo
9709>>>        Property Handle phoWorkspace
9710>>>        Property Handle phoCommandLine
9711>>>        Property Handle phoMainPanel       // main panel will set this for us.
9712>>>        Property String psHelpFile         // type of file is determined by peHelpType
9713>>>        Property Integer peHelpType htWinHelp // htNoHelp htHtmlHelp htWinHelp
9714>>>        
9714>>>        Property String psCompany "Data Access Worldwide"
9715>>>        Property String psProduct "DataFlex Applications"
9716>>>        Property String psVersion C_DFVersion
9717>>>        Property String psProgram (Module_Name(desktop))
9718>>>        
9718>>>        // set to '' to stop the auto open workspace behavior
9718>>>        Property String psAutoOpenWorkspace 'Config.ws'
9719>>>        
9719>>>        
9719>>>        Property Boolean pbPreserveEnvironment True
9720>>>        
9720>>>        Object oCommandLine is a cCommandLine
9722>>>            Delegate Set phoCommandLine to Self
9724>>>        End_Object
9725>>>        
9725>>>        Object oWorkspace is a cWorkspace
9727>>>            Delegate Set phoWorkspace to Self
9729>>>        End_Object
9730>>>        
9730>>>        Object oVersionInfo is a cVersionInfo
9732>>>            Delegate Set phoVersionInfo to Self
9734>>>            Send DoCreate (GetApplicationFileName(parent(Self)))
9735>>>        End_Object
9736>>>        
9736>>>        Set pbUseWindowsFont to True
9737>>>        
9737>>>    End_Procedure
9738>>>    
9738>>>    Procedure Destroy_Object
9740>>>        If (ghoApplication=Self) Begin
9742>>>            Move 0 to ghoApplication
9743>>>        End
9743>>>>
9743>>>        Forward Send Destroy_Object
9745>>>    End_Procedure
9746>>>    
9746>>>    // Determines if the Enter key should act like the Tab key (and send msg_Next)
9746>>>    // The use of a global variable, gbKEnterNext, makes this an application-wide property
9746>>>    Procedure Set pbEnterKeyAsTabKey Boolean bNext
9748>>>        Move bNext to gbKEnterNext
9749>>>    End_Procedure
9750>>>    
9750>>>    Function pbEnterKeyAsTabKey Returns Boolean
9752>>>        Function_Return gbKEnterNext
9753>>>    End_Function
9754>>>    
9754>>>    Procedure DoLoadEnvironment Handle hoContainer Boolean bProgram
9756>>>// not used with webapp
9756>>>        Handle hoRegistry hoCommandBars
9756>>>        Handle hMonitor
9756>>>        Integer iError cxy
9756>>>        tWinWindowPlacement WindowPlacement
9756>>>        tWinWindowPlacement WindowPlacement
9756>>>        String sKey
9756>>>        Boolean bSuccess
9756>>>        String sObjectName
9756>>>        
9756>>>        If (pbPreserveEnvironment(Self)) Begin
9758>>>            Get Create U_cRegistry to hoRegistry
9759>>>            Set pfAccessRights of hoRegistry to KEY_READ
9760>>>            
9760>>>            Get RegistryKeyString to sKey
9761>>>            
9761>>>            If (bProgram = False) Begin
9763>>>                Move (sKey +"\WINDOWS") to sKey
9764>>>                Get Object_Label of hoContainer to sObjectName  // just get the local name
9765>>>                Move (sKey +"\" +sObjectName) to sKey
9766>>>            End
9766>>>>
9766>>>            Else ;                Move (sKey + "\Preferences") to sKey
9768>>>            
9768>>>            Get OpenKey of hoRegistry sKey to bSuccess
9769>>>            
9769>>>            If bSuccess Begin
9771>>>                If (ValueExists(hoRegistry, 'Placement')) Begin
9773>>>                    Get ReadBinary of hoRegistry "Placement" (AddressOf(WindowPlacement)) (SizeOfType(tWinWindowPlacement)) to bSuccess
9774>>>                    If bSuccess Begin
9776>>>                        // Do not restore size if the window is not resizable
9776>>>                        If (Border_Style(hoContainer) <> BORDER_THICK) Begin
9778>>>                            // restore always works with outer size
9778>>>                            Get GuiWindowSize     of hoContainer to cxy
9779>>>                            Move (WindowPlacement.NormalPosition.left + Low(cxy)) to WindowPlacement.NormalPosition.right
9780>>>                            Move (WindowPlacement.NormalPosition.top + Hi(cxy)) to WindowPlacement.NormalPosition.bottom
9781>>>                        End
9781>>>>
9781>>>                        
9781>>>                        // Test that the main window's placement location will appear on some connected monitor. If none
9781>>>                        // of the main window is visible then set the location to 0,0 and adjust the size....
9781>>>                        If (bProgram) Begin
9783>>>                            // Test the top left point
9783>>>                            Move (MonitorFromPoint(WindowPlacement.NormalPosition.left, WindowPlacement.NormalPosition.top, MONITOR_DEFAULTONNULL)) to hMonitor
9784>>>                            
9784>>>                            If (hMonitor = 0) Begin
9786>>>                                // test the bottom right point
9786>>>                                Move (MonitorFromPoint(WindowPlacement.NormalPosition.right, WindowPlacement.NormalPosition.bottom, MONITOR_DEFAULTONNULL)) to hMonitor
9787>>>                            End
9787>>>>
9787>>>                            
9787>>>                            // hMonitor = 0 means that the window location is not in any current monitor (probably the monitor layout has changed)
9787>>>                            // or that the window begins and ends outside all monitors (even though it may span across some monitor). We will adjust!
9787>>>                            If (hMonitor = 0) Begin
9789>>>                                Send ResetWindowPos (&WindowPlacement.NormalPosition)
9790>>>                            End
9790>>>>
9790>>>                        End
9790>>>>
9790>>>                        
9790>>>                        // Set the placement
9790>>>                        Move (SetWindowPlacement(Window_Handle(hoContainer), AddressOf(WindowPlacement))) to bSuccess
9791>>>                    End
9791>>>>
9791>>>                End
9791>>>>
9791>>>                If bProgram Begin
9793>>>                    Get phoCommandBars of hoContainer to hoCommandBars
9794>>>                    If not hoCommandBars Begin
9796>>>                        If (ValueExists(hoRegistry, 'IsStatusBarVisible')) ;                            Set Statusbar_State of hoContainer to (ReadDword(hoRegistry, 'IsStatusBarVisible'))
9799>>>                        If (ValueExists(hoRegistry, 'IsToolBarVisible'))   ;                            Set Toolbar_State   of hoContainer to (ReadDword(hoRegistry, 'IsToolBarVisible'))
9802>>>                    End
9802>>>>
9802>>>                End
9802>>>>
9802>>>                
9802>>>                Send CloseKey of hoRegistry
9803>>>            End
9803>>>>
9803>>>            
9803>>>            Send Destroy of hoRegistry
9804>>>        End
9804>>>>
9804>>>    End_Procedure
9805>>>    
9805>>>    Procedure DoSaveEnvironment Handle hoContainer Boolean bProgram
9807>>>// not used with webapp
9807>>>        Handle hoRegistry
9807>>>        Integer iError
9807>>>        tWinWindowPlacement WindowPlacement
9807>>>        tWinWindowPlacement WindowPlacement
9807>>>        String sKey
9807>>>        Boolean bSuccess
9807>>>        Integer eShowCmd
9807>>>        String sObjectName
9807>>>        
9807>>>        If (pbPreserveEnvironment(Self)) Begin
9809>>>            Get Create U_cRegistry to hoRegistry
9810>>>            Get RegistryKeyString to sKey
9811>>>            
9811>>>            If (bProgram = False) Begin
9813>>>                Move (sKey +"\WINDOWS") to sKey
9814>>>                Get Object_Label of hoContainer to sObjectName  // just get the local name
9815>>>                Move (sKey +"\" +sObjectName) to sKey
9816>>>            End
9816>>>>
9816>>>            Else ;                Move (sKey +"\Preferences") to sKey
9818>>>            
9818>>>            Get CreateKey of hoRegistry sKey to iError
9819>>>            If (iError = 0) Begin
9821>>>                Move (SizeOfType(tWinWindowPlacement)) to WindowPlacement.length
9822>>>                Move (GetWindowPlacement(Window_Handle(hoContainer), AddressOf(WindowPlacement))) to bSuccess
9823>>>                If bSuccess Begin
9825>>>                    // if minimized, assume restored, as we don't want to restart minimized!
9825>>>                    If (WindowPlacement.showCmd = SW_SHOWMINIMIZED) Begin
9827>>>                        Move SW_SHOWNORMAL to WindowPlacement.showCmd
9828>>>                    End
9828>>>>
9828>>>                    Send WriteBinary of hoRegistry "Placement" (AddressOf(WindowPlacement)) WindowPlacement.length
9829>>>                End
9829>>>>
9829>>>                
9829>>>                If bProgram Begin
9831>>>                    Send WriteInteger of hoRegistry 'IsStatusBarVisible' (Statusbar_State(hoContainer))
9832>>>                    Send WriteInteger of hoRegistry 'IsToolBarVisible'   (Toolbar_State(hoContainer))
9833>>>                End
9833>>>>
9833>>>                
9833>>>                
9833>>>                Send CloseKey of hoRegistry
9834>>>            End
9834>>>>
9834>>>            
9834>>>            Send Destroy of hoRegistry
9835>>>        End
9835>>>>
9835>>>    End_Procedure
9836>>>    
9836>>>    
9836>>>    Procedure ResetWindowPos tWinRect ByRef WindowPos
9838>>>        Integer ixySize ixSize iySize
9838>>>        Integer ixOffset iyOffset
9838>>>        
9838>>>        // first calculate the offset needed to move onto the main monitor at 0,0
9838>>>        Move (0 - WindowPos.left) to ixOffset
9839>>>        Move (0 - WindowPos.top) to iyOffset
9840>>>        
9840>>>        Move 0 to WindowPos.left
9841>>>        Move 0 to WindowPos.top
9842>>>        
9842>>>        Move (WindowPos.right + ixOffset) to WindowPos.right
9843>>>        Move (WindowPos.bottom + iyOffset) to WindowPos.bottom
9844>>>        
9844>>>        // also make sure that the size of the window is <= the size of the main monitor
9844>>>        Move (GUIScreen_Size(1)) to ixySize    // parameter of 1 means return "available" screen size
9845>>>        Move (low(ixySize))      to ixSize
9846>>>        Move (hi(ixySize))       to iySize
9847>>>        
9847>>>        Move (ixSize min WindowPos.right) to WindowPos.right
9848>>>        Move (iySize min WindowPos.bottom) to WindowPos.bottom
9849>>>    End_Procedure
9850>>>    
9850>>>    
9850>>>    Function RegistryKeyString Returns String
9852>>>        String sCompany sProduct sVersion sProgram
9852>>>        
9852>>>        Get psCompany to sCompany
9853>>>        Get psProduct to sProduct
9854>>>        Get psVersion to sVersion
9855>>>        Get psProgram to sProgram
9856>>>        
9856>>>        If (sCompany = "") ;            Move "Data Access Worldwide" to sCompany
9859>>>        If (sProduct = "") ;            Move "DataFlex Applications" to sProduct
9862>>>        If (sVersion = "") ;            Move C_DFVersion             to sVersion
9865>>>        If (sProgram ="") ;            Move (Module_Name(desktop))   to sProgram
9868>>>        
9868>>>        Function_Return ("SOFTWARE\" +sCompany +"\" +sProduct +"\" +sVersion +"\" +sProgram)
9869>>>    End_Function
9870>>>    
9870>>>    Procedure WriteString String sSubKey String sValueName String sValueData
9872>>>        String sKey
9872>>>        Handle hoRegistry
9872>>>        Integer iError
9872>>>        
9872>>>        Get Create U_cRegistry to hoRegistry
9873>>>        Get RegistryKeyString to sKey
9874>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9877>>>        Get CreateKey of hoRegistry sKey to iError
9878>>>        If (iError = 0) Begin
9880>>>            Send WriteString of hoRegistry sValueName sValueData
9881>>>            Send CloseKey of hoRegistry
9882>>>        End
9882>>>>
9882>>>        
9882>>>        Send Destroy of hoRegistry
9883>>>    End_Procedure
9884>>>    
9884>>>    Procedure WriteInteger String sSubKey String sValueName Integer iValueData
9886>>>        String sKey
9886>>>        Handle hoRegistry
9886>>>        Integer iError
9886>>>        
9886>>>        Get Create U_cRegistry to hoRegistry
9887>>>        Get RegistryKeyString to sKey
9888>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9891>>>        Get CreateKey of hoRegistry sKey to iError
9892>>>        If (iError = 0) Begin
9894>>>            Send WriteInteger of hoRegistry sValueName iValueData
9895>>>            Send CloseKey of hoRegistry
9896>>>        End
9896>>>>
9896>>>        
9896>>>        Send Destroy of hoRegistry
9897>>>    End_Procedure
9898>>>    
9898>>>    // WriteDword is obsolete. Please use WriteInteger or WriteUInt, depending on whether you use a signed or unsigned value.
9898>>>    Procedure WriteDword String sSubKey String sValueName Integer iValueData
9900>>>        Send WriteInteger of Self sSubKey sValueName iValueData 
9901>>>    End_Procedure
9902>>>    
9902>>>    Procedure WriteUInteger String sSubKey String sValueName UInteger uValueData
9904>>>        String sKey
9904>>>        Handle hoRegistry
9904>>>        Integer iError
9904>>>        
9904>>>        Get Create U_cRegistry to hoRegistry
9905>>>        Get RegistryKeyString to sKey
9906>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9909>>>        Get CreateKey of hoRegistry sKey to iError
9910>>>        If (iError = 0) Begin
9912>>>            Send WriteUInt of hoRegistry sValueName uValueData
9913>>>            Send CloseKey of hoRegistry
9914>>>        End
9914>>>>
9914>>>        
9914>>>        Send Destroy of hoRegistry
9915>>>    End_Procedure
9916>>>
9916>>>    Procedure WriteBinary String sSubKey String sValueName Pointer pValueData Integer iDataLength
9918>>>        String sKey
9918>>>        Handle hoRegistry
9918>>>        Integer iError
9918>>>        
9918>>>        Get Create U_cRegistry to hoRegistry
9919>>>        Get RegistryKeyString to sKey
9920>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9923>>>        Get CreateKey of hoRegistry sKey to iError
9924>>>        If (iError = 0) Begin
9926>>>            Send WriteBinary of hoRegistry sValueName pValueData iDataLength
9927>>>            Send CloseKey of hoRegistry
9928>>>        End
9928>>>>
9928>>>        
9928>>>        Send Destroy of hoRegistry
9929>>>    End_Procedure
9930>>>    
9930>>>    // returns true if both sub-key and value exists.
9930>>>    Function ValueExists String sSubKey String sValueName Returns Boolean
9932>>>        String sKey
9932>>>        Handle hoRegistry
9932>>>        Boolean bOK
9932>>>        Get Create U_cRegistry to hoRegistry
9933>>>        Get RegistryKeyString to sKey
9934>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9937>>>        Get OpenKey of hoRegistry sKey to bOk
9938>>>        If (bOK) Begin
9940>>>            Move (ValueExists(hoRegistry, sValueName)) to bOk
9941>>>            Send CloseKey of hoRegistry
9942>>>        End
9942>>>>
9942>>>        Send Destroy of hoRegistry
9943>>>        Function_Return bOk
9944>>>    End_Function
9945>>>    
9945>>>    Function ReadString String sSubKey String sValueName String sDefault Returns String
9947>>>        String sKey sData
9947>>>        Handle hoRegistry
9947>>>        Boolean bOK
9947>>>        
9947>>>        Move sDefault to sData
9948>>>        Get Create U_cRegistry to hoRegistry
9949>>>        Get RegistryKeyString to sKey
9950>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9953>>>        Get OpenKey of hoRegistry sKey to bOk
9954>>>        If (bOK) Begin
9956>>>            If (ValueExists(hoRegistry, sValueName)) ;                Get ReadString of hoRegistry sValueName to sData
9959>>>            Send CloseKey of hoRegistry
9960>>>        End
9960>>>>
9960>>>        
9960>>>        Send Destroy of hoRegistry
9961>>>        Function_Return sData
9962>>>    End_Function
9963>>>    
9963>>>    Function ReadInteger String sSubKey String sValueName Integer iDefault Returns Integer
9965>>>        String sKey
9965>>>        Integer iData
9965>>>        Handle hoRegistry
9965>>>        Boolean bOK
9965>>>        
9965>>>        Move iDefault to iData
9966>>>        Get Create U_cRegistry to hoRegistry
9967>>>        Get RegistryKeyString to sKey
9968>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9971>>>        Get OpenKey of hoRegistry sKey to bOk
9972>>>        If bOK Begin
9974>>>            If (ValueExists(hoRegistry, sValueName)) ;                Get ReadInteger of hoRegistry sValueName to iData
9977>>>            Send CloseKey of hoRegistry
9978>>>        End
9978>>>>
9978>>>        
9978>>>        Send Destroy of hoRegistry
9979>>>        Function_Return iData
9980>>>    End_Function
9981>>>
9981>>>    // ReadDword is obsolete. Please use ReadInteger or ReadUInt, depending on whether you expect a signed or unsigned value.
9981>>>    Function ReadDword String sSubKey String sValueName Integer iDefault Returns Integer
9983>>>        Function_Return (ReadInteger(Self, sSubKey, sValueName, iDefault))
9984>>>    End_Function
9985>>>    
9985>>>    Function ReadUInt String sSubKey String sValueName UInteger uDefault Returns UInteger
9987>>>        String sKey
9987>>>        UInteger uData
9987>>>        Handle hoRegistry
9987>>>        Boolean bOK
9987>>>        
9987>>>        Move uDefault to uData
9988>>>        Get Create U_cRegistry to hoRegistry
9989>>>        Get RegistryKeyString to sKey
9990>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9993>>>        Get OpenKey of hoRegistry sKey to bOk
9994>>>        If bOK Begin
9996>>>            If (ValueExists(hoRegistry, sValueName)) ;                Get ReadUInt of hoRegistry sValueName to uData
9999>>>            Send CloseKey of hoRegistry
10000>>>        End
10000>>>>
10000>>>        
10000>>>        Send Destroy of hoRegistry
10001>>>        Function_Return uData
10002>>>    End_Function
10003>>>    
10003>>>    Function ReadBinary String sSubKey String sValueName Pointer pValueData Integer iDataLength Returns Boolean
10005>>>        String sKey
10005>>>        Handle hoRegistry
10005>>>        Boolean bOK bSuccess
10005>>>        
10005>>>        Get Create U_cRegistry to hoRegistry
10006>>>        Get RegistryKeyString to sKey
10007>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
10010>>>        Get OpenKey of hoRegistry sKey to bOk
10011>>>        If bOK Begin
10013>>>            Get ReadBinary of hoRegistry sValueName pValueData iDataLength to bSuccess
10014>>>            Send CloseKey of hoRegistry
10015>>>        End
10015>>>>
10015>>>        
10015>>>        Send Destroy of hoRegistry
10016>>>        Function_Return bSuccess
10017>>>    End_Function
10018>>>    
10018>>>    Procedure DoOpenWorkspace String sWorkspace
10020>>>        // Tries to open in this order:
10020>>>        // 1) if absolute path, use that; otherwise
10020>>>        // 2) try to open in the path of the EXE; otherwise
10020>>>        // 3) load it via the Registered list
10020>>>        
10020>>>        Integer eOpened
10020>>>        String sError sWSFile
10020>>>        Handle hoWorkspace
10020>>>        Boolean bChangingWorkspace
10020>>>        
10020>>>        // As soon as an open is attempted, the application's object psAutoOpenWorkspace property
10020>>>        // is cleared. This way any attempt to manually open a workspace during its construction,
10020>>>        // which includes OnCreate, will stop the object from attempting to automatically open the
10020>>>        // workspace. This was added to make psAutoOpenWorkspace compatible with older applications.
10020>>>        // Typically these application will open a workspace in OnCreate. If this happens we assume
10020>>>        // that there should be no automatic opening of a worskpace.
10020>>>        Set psAutoOpenWorkspace to ""
10021>>>        
10021>>>        Get phoWorkspace to hoWorkspace
10022>>>        
10022>>>        Get pbWorkspaceOpened of hoWorkspace to bChangingWorkspace
10023>>>        If (bChangingWorkspace and ghoConnection) Begin
10025>>>            Send AutoDisconnect
10026>>>        End
10026>>>>
10026>>>        
10026>>>        Get OpenWorkspaceFile of hoWorkspace sWorkspace to eOpened
10027>>>        If (eOpened = wsWorkspaceFileNotFound) Begin
10029>>>            If (IsRegistered(hoWorkspace, sWorkspace) =True) Begin
10031>>>                Get OpenWorkspace of hoWorkspace sWorkspace to eOpened
10032>>>            End
10032>>>>
10032>>>        End
10032>>>>
10032>>>        If (eOpened <> wsWorkspaceOpened) Begin
10034>>>            Get OpenWorkspaceErrorMessage of hoWorkspace eOpened to sError
10035>>>            Get psWorkspaceWSFile of hoWorkspace to sWSFile
10036>>>            Error DFERR_CAPPLICATION (SFormat(C_$TheProgramCannotRun, sWorkspace) + ":\n\n" + If(sWSFile<>"",sWSfile+"\n\n","") +sError)
10037>>>>
10037>>>            Abort
10038>>>>
10038>>>        End
10038>>>>
10038>>>        Else Begin
10039>>>            Send AutoConnect
10040>>>            Send OnWorkspaceOpened
10041>>>        End
10041>>>>
10041>>>    End_Procedure
10042>>>    
10042>>>    Procedure AutoConnect
10044>>>        If (ghoConnection) Begin
10046>>>            Send AutoConnect of ghoConnection
10047>>>        End
10047>>>>
10047>>>    End_Procedure
10048>>>    
10048>>>    Procedure AutoDisconnect
10050>>>        If (ghoConnection) Begin
10052>>>            Send AutoDisconnect of ghoConnection
10053>>>        End
10053>>>>
10053>>>    End_Procedure
10054>>>    
10054>>>    // send after a workspace is successfully opened and connected
10054>>>    Procedure OnWorkspaceOpened
10056>>>    End_Procedure
10057>>>    
10057>>>    Procedure OnCreate
10059>>>        // Event called when the Application object is ready to be used
10059>>>        // to open a Workspace, etc.
10059>>>    End_Procedure
10060>>>    
10060>>>    Procedure End_Construct_Object
10062>>>        String sName
10062>>>        Forward Send End_Construct_Object
10064>>>        Send OnCreate
10065>>>        // note that psAutoOpenWorkspace will get cleared of OnCreate attempts to open a workspace
10065>>>        Get psAutoOpenWorkspace to sName
10066>>>        If (sName<>"") Begin
10068>>>            Send DoOpenWorkspace sName
10069>>>        End
10069>>>>
10069>>>    End_Procedure
10070>>>    
10070>>>    Function GetApplicationFileName Returns String
10072>>>        // Returns the filename from Windows
10072>>>        Integer iNumChars
10072>>>        WString wFilename
10072>>>                
10072>>>        Move (Repeat(Character(0), 1024)) to wFilename
10073>>>        Move (GetModuleFileNameW(0, AddressOf(wFilename), 1024)) to iNumChars
10074>>>        
10074>>>        Function_Return (CString(wFilename))
10075>>>    End_Function
10076>>>    
10076>>>    Function GetApplicationPath Returns String
10078>>>        // Returns the path of the Application (no trailing "\")
10078>>>        WString wApplicationFileName 
10078>>>        String sPath
10078>>>        Boolean bRemoved
10078>>>        
10078>>>        Get GetApplicationFileName  to wApplicationFileName
10079>>>        Move (PathRemoveFileSpecW(AddressOf(wApplicationFileName))) to bRemoved
10080>>>        Move (CString(wApplicationFileName)) to sPath
10081>>>        
10081>>>        If (Right(sPath, 1) ="\") ;            Move (Left(sPath, Length(sPath) -1)) to sPath
10084>>>        Function_Return sPath
10085>>>    End_Function
10086>>>    
10086>>>    Function GetApplicationName Returns String
10088>>>        // Returns the name of the Application (without its Path or Extension)
10088>>>        String sApplicationFileName 
10088>>>        WString wApplicationName
10088>>>        Boolean bRemoved
10088>>>        Integer iVoid
10088>>>        
10088>>>        Get GetApplicationFileName to sApplicationFileName
10089>>>        Move (ExtractFileName(sApplicationFileName)) to wApplicationName
10090>>>        Move (PathRemoveExtensionW(AddressOf(wApplicationName))) to iVoid
10091>>>        Function_Return (CString(wApplicationName))
10092>>>    End_Function
10093>>>    
10093>>>    Function DFRootPath Returns String
10095>>>        String sRoot
10095>>>        Get_Profile_String "Defaults" "VDFRootDir" to sRoot
10098>>>        // Ensure it does not contain a trailing "\"
10098>>>        If (Right(sRoot,1) = "\") Begin
10100>>>            Move (Left(sRoot, Length(sRoot)-1)) to sRoot
10101>>>        End
10101>>>>
10101>>>        Function_Return sRoot
10102>>>    End_Function
10103>>>    
10103>>>    Function DFBinPath Returns String
10105>>>        String sRoot
10105>>>        Get DFRootPath to sRoot
10106>>>        If (sRoot<>"") Begin
10108>>>            Move (sRoot+"\bin") to sRoot
10109>>>        End
10109>>>>
10109>>>        Else Begin
10110>>>            // if the root from the registry (vdfrootdir) is empty, we will assume that the
10110>>>            // bin path must be the same as the application path.
10110>>>            Get GetApplicationPath to sRoot
10111>>>        End
10111>>>>
10111>>>        Function_Return sRoot
10112>>>    End_Function
10113>>>    
10113>>>    // this just directs to the desktop property. If you are using an application object you are
10113>>>    // encouraged to set this here.
10113>>>    Procedure Set pbUseWindowsFont Boolean bUseWindowsFont
10115>>>        Set pbUseWindowsFont of Desktop to bUseWindowsFont
10116>>>    End_Procedure
10117>>>    
10117>>>    Function pbUseWindowsFont Returns Boolean
10119>>>        Boolean bUseWindowsFont
10119>>>        Get pbUseWindowsFont of Desktop to bUseWindowsFont
10120>>>        Function_Return bUseWindowsFont
10121>>>    End_Function
10122>>>    
10122>>>    // this just directs to the desktop property. If you are using an application object you are
10122>>>    // encouraged to set this here.
10122>>>    Procedure Set pbLegacyDialogRatio Boolean bLegacy
10124>>>        Set pbLegacyDialogRatio of Desktop to bLegacy
10125>>>    End_Procedure
10126>>>    
10126>>>    Function pbLegacyDialogRatio Returns Boolean
10128>>>        Boolean bLegacy
10128>>>        Get pbLegacyDialogRatio of Desktop to bLegacy
10129>>>        Function_Return bLegacy
10130>>>    End_Function
10131>>>End_Class
10132>>>
10132>>>
10132>Use Dferror.pkg                 // Error handling class and object
Including file: Dferror.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Dferror.pkg)
10132>>>Use LanguageText.pkg
10132>>>Use Windows.pkg
10132>>>Use msgbox.pkg
10132>>>Use GlobalFunctionsProcedures.pkg
10132>>>
10132>>>// Include or define all useful symbols.
10132>>>Use errornum.inc
10132>>>// these are kept for compatibility. Don't use them
10132>>>
10132>>>// used by error handler and UserError to pull a caption out of the error string
10132>>>Define C_ErrorCaption for "*CAPTION*="
10132>>>
10132>>>// This array stores the set of trapped errors as toggled ranges starting
10132>>>// with the errors that are trapped. The array should always contain 0 and
10132>>>// MAX_ERROR_NUMBER + 1, which are the limits. If an array contained the
10132>>>// following items...
10132>>>//
10132>>>// { 0, 5, 10, MAX_ERROR_NUMBER + 1 }.
10132>>>//
10132>>>// This would mean that errors 1 - 4 are trapped, 5 - 9 are ignored, and
10132>>>// 10 through the rest are trapped.
10132>>>//
10132>>>Class Trapped_Errors_Array is an array
10133>>>    
10133>>>    // Find largest error LE targetError. Assumes array is sorted.
10133>>>    Function findErrorLE Integer targetError Returns Integer
10135>>>        
10135>>>        Integer lowIndex hiIndex midIndex currError
10135>>>        
10135>>>        // If error is outside of boudary conditions, use
10135>>>        // value of closest valid error# instead.
10135>>>        If (targetError <= 0);            Move 1 to targetError
10138>>>        Else If (targetError >= MAX_ERROR_NUMBER) ;            Move ( MAX_ERROR_NUMBER - 1 ) to targetError
10142>>>        
10142>>>        Move 0 to lowIndex
10143>>>        Move ( item_count( Self ) - 1 ) to hiIndex
10144>>>        
10144>>>        // midIndex will contain the closest error LE to target upon exit.
10144>>>        Repeat
10144>>>>
10144>>>            
10144>>>            Move ( ( lowIndex + hiIndex ) / 2 ) to midIndex
10145>>>            Move ( integer_value( Self, midIndex ) )  to currError
10146>>>            
10146>>>            // midIndex is targetIndex if a match occurs
10146>>>            If (currError = targetError) ;                Function_Return midIndex
10149>>>            
10149>>>            // We are either on it or just below it.
10149>>>            If ( lowIndex = midIndex ) Begin
10151>>>                
10151>>>                If ( integer_value( Self, hiIndex ) <= targetError ) ;                    Move hiIndex to midIndex
10154>>>                
10154>>>                Function_Return midIndex
10155>>>                
10155>>>            End
10155>>>>
10155>>>            
10155>>>            // No match, so move the boundaries.
10155>>>            If (currError > targetError) ;                Move ( midIndex - 1 ) to hiIndex
10158>>>            Else ;                Move midIndex to lowIndex
10160>>>            
10160>>>        Until (lowIndex > hiIndex)
10162>>>        
10162>>>        Function_Return midIndex        
10163>>>    End_Function
10164>>>    
10164>>>    // Boundaries of the table are assumed to hold error limits.
10164>>>    Procedure initArray
10166>>>        Send delete_data
10167>>>        Set array_value 0 to 0
10168>>>        Set array_value 1 to ( MAX_ERROR_NUMBER + 1 )
10169>>>    End_Procedure
10170>>>    
10170>>>    // Return 1 if Error is trapped, 0 otherwise.
10170>>>    Function IsTrapped Integer Error# Returns Integer
10172>>>        Function_Return ( not ( mod( findErrorLE( Self, Error# ), 2 ) ) )
10173>>>    End_Function
10174>>>    
10174>>>    // Add the error as long as it doesn't violate boundary conditions.
10174>>>    // This routine leaves the array unsorted.
10174>>>    Procedure addError Integer Error#
10176>>>        If ( ( Error# < MAX_ERROR_NUMBER ) and ( Error# > 0 ) ) ;            Set array_value ( item_count( Self ) ) to ( Integer( Error# ) )
10179>>>    End_Procedure
10180>>>    
10180>>>    // Set error to flagged state.
10180>>>    Procedure handleError Integer Error# Integer trapFlag
10182>>>        
10182>>>        Integer prevErrIndex prevErrFlag prevErrValue nextErrValue
10182>>>        
10182>>>        If ( ( Error# > MAX_ERROR_NUMBER ) or ( Error# < 0 ) ) Begin
10184>>>            Error DFERR_ERROR_NUMBER_OUT_OF_RANGE
10185>>>>
10185>>>            Procedure_Return
10186>>>        End
10186>>>>
10186>>>        
10186>>>        Get findErrorLE Error# to prevErrIndex
10187>>>        Get isTrapped   Error# to prevErrFlag
10188>>>        
10188>>>        // if eq, Error already handled in some range.
10188>>>        If (prevErrFlag <> trapFlag) Begin
10190>>>            
10190>>>            // This is kind of complicated. If we are adding an error,
10190>>>            // we have to account for the error already being in the
10190>>>            // array as well as rejoining ranges that have been previously
10190>>>            // split and splitting ranges when adding a new flag.
10190>>>            
10190>>>            Get integer_value ( prevErrIndex + 1 ) to nextErrValue
10191>>>            Get integer_value prevErrIndex         to prevErrValue
10192>>>            
10192>>>            // Do this first so prevErrIndex stays valid.
10192>>>            If (nextErrValue = ( Error# + 1 )) ;                Send delete_item ( prevErrIndex + 1 )
10195>>>            Else ;                Send addError ( Error# + 1 )
10197>>>            
10197>>>            If ( prevErrValue < Error# ) ;                Send addError Error#
10200>>>            Else ;                Send delete_item prevErrIndex
10202>>>        End
10202>>>>
10202>>>        Send sort_items UPWARD_DIRECTION
10203>>>        
10203>>>    End_Procedure
10204>>>    
10204>>>    // Flag error as trappable
10204>>>    Procedure Trap_Error Integer Error#
10206>>>        Send handleError Error# 1
10207>>>    End_Procedure
10208>>>    
10208>>>    // Flag error as non-trappable
10208>>>    Procedure Ignore_Error Integer Error#
10210>>>        Send handleError Error# 0
10211>>>    End_Procedure
10212>>>    
10212>>>    // Flag all errors as trappable
10212>>>    Procedure Trap_All
10214>>>        Send initArray
10215>>>    End_Procedure
10216>>>    
10216>>>    // Flag all errors as non-trappable
10216>>>    Procedure Ignore_All
10218>>>        Send delete_data
10219>>>        Set array_value 0 to 0
10220>>>        Set array_value 1 to 1
10221>>>        Set array_value 2 to ( MAX_ERROR_NUMBER + 1 )
10222>>>    End_Procedure
10223>>>    
10223>>>End_Class
10224>>>
10224>>>
10224>>>Class ErrorSystem is a cObject
10225>>>    
10225>>>    Procedure construct_object
10227>>>        Forward Send construct_object
10229>>>        
10229>>>        Set delegation_mode to no_delegate_or_error
10230>>>        
10230>>>        Property Integer Verbose_State            True
10231>>>        Property Integer Current_Error_Number     0
10232>>>        Property Integer Error_Line_Number        0
10233>>>        
10233>>>        // If set false, this makes the error handler work the old way which
10233>>>        // does not use the new unhandled dialog. Only exists for compatibility reasons
10233>>>        Property Boolean pbUnhandledErrorSupport       True
10234>>>        
10234>>>        // shows error numbers with user errors. Only set this true if your
10234>>>        // application has meaningful numbers that helps the end user. Note that
10234>>>        // unhandled errors always show numbers.
10234>>>        // this is ignored if pbUnhandledErrorSupport is false
10234>>>        Property Boolean pbShowErrorNumber        False
10235>>>        
10235>>>        
10235>>>        // This is the caption that appears for unhandled errors dialog box
10235>>>        Property String psUnhandledErrorCaption C_$UnhandledProgramError
10236>>>        
10236>>>        // This is the caption that appears for standard user errors
10236>>>        Property String psUserErrorCaption C_$Error
10237>>>        
10237>>>        // Flag which is sent when error is being processed. This
10237>>>        // stops error recursion.
10237>>>        Property Integer Error_Processing_State  False
10238>>>        
10238>>>        // array of errors that we consider User Errors
10238>>>        Property Integer[] pUserErrorsArray
10239>>>        
10239>>>        //  This allows us to skip find errors (GT & LT) and to only
10239>>>        //  ring a bell when these occur.
10239>>>        //
10239>>>        Property Integer Bell_on_Find_Error_State True
10240>>>        
10240>>>        Object TrappedErrors is a Trapped_Errors_Array
10242>>>            Send initArray
10243>>>        End_Object
10244>>>        
10244>>>        Send Trap_All
10245>>>        
10245>>>        // define the standard user error numbers
10245>>>        Send AddUserError 0
10246>>>        Send AddUserError DFERR_NUMBER_TOO_LARGE
10247>>>        Send AddUserError DFERR_WINDOW_RANGE
10248>>>        Send AddUserError DFERR_ENTRY_REQUIRED
10249>>>        Send AddUserError DFERR_ENTER_A_NUMBER
10250>>>        Send AddUserError DFERR_BAD_ENTRY
10251>>>        Send AddUserError DFERR_ENTER_VALID_DATE
10252>>>        Send AddUserError DFERR_NUMERIC_RANGE
10253>>>        Send AddUserError DFERR_DUPLICATE_REC
10254>>>        Send AddUserError DFERR_TEXT_FIELD_TOO_LONG
10255>>>        Send AddUserError DFERR_FIND_PRIOR_BEG_OF_FILE
10256>>>        Send AddUserError DFERR_FIND_PAST_END_OF_FILE
10257>>>        Send AddUserError DFERR_NO_REC_TO_DELETE
10258>>>        Send AddUserError DFERR_FIELD_NOT_INDEXED // can be invoked w/ find keys
10259>>>        Send AddUserError DFERR_REC_NUMBER_RANGE
10260>>>        Send AddUserError DFERR_ENTER_VALID_REC_ID
10261>>>        Send AddUserError DFERR_OPERATOR_ERROR
10262>>>        Send AddUserError DFERR_CANT_CHANGE_KEY_FIELD
10263>>>        Send AddUserError DFERR_NO_DELETE_RELATED_RECORDS_EXIST
10264>>>        Send AddUserError DFERR_OPERATION_NOT_ALLOWED
10265>>>        Send AddUserError DFERR_OPERATOR
10266>>>        Send AddUserError DFERR_XML_HTTP
10267>>>        Send AddUserError DFERR_CLIENT_SOAP_TRANSFER
10268>>>        Send AddUserError DFERR_CLIENT_SOAP_FAULT
10269>>>        Send AddUserError DFERR_TEXT_TOO_LARGE_FOR_FIELD
10270>>>        Send AddUserError DFERR_WINPRINT
10271>>>        Send AddUserError DFERR_CRYSTAL_REPORT
10272>>>        Send AddUserError DFERR_MAPI
10273>>>        Send AddUserError DFERR_FILE_ACCESS_VIOLATION
10274>>>        Send AddUserError DFERR_DATAFLEX_REPORTS
10275>>>        Send AddUserError DFERR_CANT_REFIND_RECORD
10276>>>        Send AddUserError 999 // This is defined as DD_DEFAULT_ERROR_NUMBER in DataDict.pkg and is the default Field_error
10277>>>        // number of DDs.
10277>>>        Move Self to Error_Object_Id
10278>>>    End_Procedure
10279>>>    
10279>>>    Function Help_Context Integer Context_Type Returns String
10281>>>        Function_Return (Current_Error_Number(Self))
10282>>>    End_Function
10283>>>    
10283>>>    // Return true if Error is trapped, false otherwise.
10283>>>    Function IsTrapped Integer iError  Returns Boolean
10285>>>        Function_Return (IsTrapped(TrappedErrors(Self),iError))
10286>>>    End_Function
10287>>>    
10287>>>    // Pass error iError on to the regular DataFlex error handler.
10287>>>    Procedure IgnoreError Integer iError
10289>>>        Send Ignore_Error of (TrappedErrors(Self)) iError
10290>>>    End_Procedure
10291>>>    
10291>>>    // Catch and display error iError
10291>>>    Procedure TrapError Integer iError
10293>>>        Send Trap_Error of (TrappedErrors(Self)) iError
10294>>>    End_Procedure
10295>>>    
10295>>>    // Forward all error to regular DataFlex error handler.
10295>>>    Procedure IgnoreAllErrors
10297>>>        Send Ignore_All of (TrappedErrors(Self))
10298>>>    End_Procedure
10299>>>    
10299>>>    // Catch and display all errors.
10299>>>    Procedure TrapAllErrors
10301>>>        Send Trap_All of (TrappedErrors(Self))
10302>>>    End_Procedure
10303>>>        
10303>>>    // Catch and display error Error#.
10303>>>    Procedure Trap_Error Integer Error#
10305>>>        Send TrapError Error#
10306>>>    End_Procedure
10307>>>    
10307>>>    // Pass error Error# on to the regular DataFlex error handler.
10307>>>    Procedure Ignore_Error Integer Error#
10309>>>        Send IgnoreError Error#
10310>>>    End_Procedure
10311>>>    
10311>>>    // Catch and display all errors.
10311>>>    Procedure Trap_All
10313>>>        Send TrapAllErrors
10314>>>    End_Procedure
10315>>>    
10315>>>    // Forward all error to regular DataFlex error handler.
10315>>>    Procedure Ignore_All
10317>>>        Send IgnoreAllErrors
10318>>>    End_Procedure
10319>>>    
10319>>>    // Build complete error description from Flexerrs and user error message.
10319>>>    Function Error_Description Integer Error# String ErrMsg Returns String
10321>>>        String Full_Error_Text
10321>>>        
10321>>>        Move (Trim(ErrMsg)) to ErrMsg
10322>>>        Move (trim(error_text(DESKTOP,Error#))) to Full_Error_Text
10323>>>        
10323>>>        If (ErrMsg<>"") Begin
10325>>>            
10325>>>            If ( ( Full_Error_Text<>"" ) and ;                error_text_available( DESKTOP, Error# ) ) Begin
10327>>>                // Make sure last character of error text is a separating symbol.
10327>>>                // if not, add a "." So we have format of "error-text. error-detail"
10327>>>                If ( pos(right(Full_error_text,1),".,:;")=0 ) ;                    Move (Full_Error_Text - ".") to Full_Error_Text
10330>>>                Move (Full_Error_Text * ErrMsg) to Full_Error_Text
10331>>>            End
10331>>>>
10331>>>            Else ;                Move ErrMsg to Full_Error_Text
10333>>>            
10333>>>        End
10333>>>>
10333>>>        
10333>>>        Function_Return Full_Error_Text
10334>>>    End_Function
10335>>>    
10335>>>    // return true if an error number is critical
10335>>>    Function Is_Critical Integer Error# Returns Integer
10337>>>        Function_Return (".3.10.18.19.20.21.22.43.70.72.74.75.78.80.97.";            contains ("."+String(Error#)+"."))
10338>>>    End_Function
10339>>>    
10339>>>    // adds a user error to the array
10339>>>    Procedure AddUserError Integer iError
10341>>>        Integer[] UserErrors
10342>>>        Get pUserErrorsArray to UserErrors
10343>>>        // We assume that there are few enough user errors to worry about speed of finding
10343>>>        // the an array item. It always does a linear seach, which should be plenty fast.
10343>>>        If (SearchArray(iError,UserErrors)=-1) Begin
10345>>>            Move iError to UserErrors[SizeOfArray(UserErrors)]
10346>>>            Set pUserErrorsArray to UserErrors
10347>>>        End
10347>>>>
10347>>>    End_Procedure
10348>>>    
10348>>>    // removes an error from the user array
10348>>>    Procedure RemoveUserError Integer iError
10350>>>        Integer[] UserErrors
10351>>>        Integer iIndex iSize
10351>>>        Get pUserErrorsArray to UserErrors
10352>>>        Move (SearchArray(iError,UserErrors)) to iIndex
10353>>>        If (iIndex<>-1) Begin
10355>>>            // replace the removed error with the last error and resize the array
10355>>>            Move (SizeOfArray(UserErrors)) to iSize
10356>>>            Move UserErrors[iSize-1] to UserErrors[iIndex]
10357>>>            Set pUserErrorsArray to (ResizeArray(UserErrors,iSize-1))
10358>>>        End
10358>>>>
10358>>>    End_Procedure
10359>>>    
10359>>>    // removes all user errors
10359>>>    Procedure RemoveAllUserErrors
10361>>>        Integer[] UserErrors
10362>>>        Set pUserErrorsArray to UserErrors
10363>>>    End_Procedure
10364>>>    
10364>>>    // returns true if this is an unhandled error (i.e., not a user error
10364>>>    Function IsUnhandledError Integer iError Returns Boolean
10366>>>        Integer[] UserErrors
10367>>>        Get pUserErrorsArray to UserErrors
10368>>>        Function_Return (SearchArray(iError,UserErrors)=-1)
10369>>>    End_Function
10370>>>    
10370>>>    Procedure UnhandledErrorDisplay Integer iErrorLine String sMessage
10372>>>        String sCaption sCRLF
10372>>>        Move (Character(13)+Character(10)) to sCRLF
10373>>>        Get psUnhandledErrorCaption to sCaption
10374>>>        Move (Replaces("\n",sMessage,sCRLF)) to sMessage
10375>>>        Move (Replaces("\"+sCRLF, sMessage, "\n")) to sMessage
10376>>>        ErrorDisplay iErrorLine sMessage sCaption C_$OK C_$Copy
10377>>>    End_Procedure
10378>>>    
10378>>>    // Handle error event, displaying error info to user.
10378>>>    Procedure Error_Report Integer ErrNum Integer Err_Line String ErrMsg
10380>>>        Integer iReply iIcon
10380>>>        String  sErrorText sMess
10380>>>        String  sSource sCaption
10380>>>        Integer iSrcPos iSrc iTxtLen
10380>>>        Boolean bIsUnhandled bUnhandledSupport bCritical bVerbose
10380>>>        
10380>>>        If (Error_processing_State(Self)) Begin // don't allow error
10382>>>            Procedure_Return                     // recursion
10383>>>        End
10383>>>>
10383>>>        
10383>>>        Set Error_Processing_State to True // we are now in an error reporting state
10384>>>        
10384>>>        Set Current_Error_Number to ErrNum
10385>>>        Set Error_Line_Number    to Err_Line
10386>>>        
10386>>>        // if this is false, this will work old-style -- all errors go through message box
10386>>>        Get pbUnhandledErrorSupport to bUnhandledSupport
10387>>>        
10387>>>        Get Is_Critical errnum to bCritical
10388>>>        Get IsUnhandledError ErrNum to bIsUnhandled
10389>>>        
10389>>>        
10389>>>        //
10389>>>        //   Changes made so find errors don't report - just beep
10389>>>        //
10389>>>        
10389>>>        If ( Bell_On_find_Error_State(Self) and ;            ErrNum=DFERR_FIND_PRIOR_BEG_OF_FILE or ErrNum=DFERR_FIND_PAST_END_OF_FILE) Begin
10391>>>            Send Bell
10392>>>        End
10392>>>>
10392>>>        Else If not ( isTrapped( TrappedErrors( Self ), ErrNum ) ) Begin
10395>>>            // if not trapped, do nothing
10395>>>            
10395>>>            // We used to forward send. Since this is based on array, it does not understand this message, the forward was
10395>>>            // not understood. Since arrays don't delegate or error, nothing happened.
10395>>>            // An easier way to do nothing, is to do nothing, hence this line if removed
10395>>>            //forward send Error_Report ErrNum Err_Line ErrMsg
10395>>>        End
10395>>>>
10395>>>        Else Begin
10396>>>            
10396>>>            // See if source information is provided (Source = module.function). If so remove
10396>>>            // as detail. Must find last instance of this in string
10396>>>            Move (pos(C_ErrorContextSourceText,ErrMsg)) to iSrc
10397>>>            If iSrc Begin
10399>>>                Move (iSrc-1) to iSrcPos
10400>>>                Move (length(C_ErrorContextSourceText)) to  iTxtLen
10401>>>                Move ErrMsg to sSource
10402>>>                Repeat // this makes sure we find last instance of this
10402>>>>
10402>>>                    Move (remove(sSource, 1, iSrc-1 + iTxtLen )) to sSource // right part of string
10403>>>                    Move (pos(C_ErrorContextSourceText,sSource)) to iSrc           // see if it was the last
10404>>>                    If iSrc ;                                               // if not, track length                        Move (iSrcPos + iTxtLen + iSrc-1) to iSrcPos
10407>>>                Until (iSrc=0)
10409>>>                Move (trim(left(ErrMsg,iSrcPos))) to ErrMsg
10410>>>                If (right(ErrMsg,1)=',') ;                    Move (left(ErrMsg,length(ErrMsg)-1)) to ErrMsg
10413>>>            End
10413>>>>
10413>>>            
10413>>>            // the caption normally used for handled user errors
10413>>>            Get psUserErrorCaption to sCaption
10414>>>            // if an operator error this may be a Procedure UserError situation where the
10414>>>            // caption is passed in the error text. If so, get the caption
10414>>>            If (ErrNum=DFERR_OPERATOR) Begin
10416>>>                Move (pos(C_ErrorCaption,ErrMsg)) to iSrc
10417>>>                If iSrc Begin
10419>>>                    Move (length(C_ErrorCaption)) to  iTxtLen
10420>>>                    Move (remove(ErrMsg, 1, iSrc-1 + iTxtLen )) to sCaption
10421>>>                    Move (Left(ErrMsg,iSrc-1)) to ErrMsg
10422>>>                End
10422>>>>
10422>>>            End
10422>>>>
10422>>>            
10422>>>            Get Error_Description ErrNum ErrMsg to sErrorText
10423>>>            
10423>>>            // if the error source is identified we can get extended error
10423>>>            // text for our error message
10423>>>            If ghoErrorSource Begin
10425>>>                Get extended_error_Message of ghoErrorSource to sMess
10426>>>                If (sMess <> '') ;                    Move (sErrorText + "\n\n" + sMess ) to sErrorText
10429>>>            End
10429>>>>
10429>>>            
10429>>>            If (bUnhandledSupport) Begin
10431>>>                // as of 14.1, this is the preferred way to do errors
10431>>>                If ( bCritical or bIsUnhandled) Begin
10433>>>                    Move ( sErrorText + "\n\n" + C_$Error + ":" * String(ErrNum) ) to sErrorText
10434>>>                    If (sSource<>"") Begin
10436>>>                        Move (sErrorText + "\n" + C_$ErrorSource +" =" * sSource) to sErrorText
10437>>>                    End
10437>>>>
10437>>>                End
10437>>>>
10437>>>                Else If (pbShowErrorNumber(Self)) Begin
10440>>>                    // if a user error, we provide a way to see error numbers.
10440>>>                    Move ( sErrorText + "\n\n" + C_$Error + ":" * String(ErrNum) ) to sErrorText
10441>>>                End
10441>>>>
10441>>>            End
10441>>>>
10441>>>            Else Begin
10442>>>                // we get here if we want it to work the old (less good) way. This is provided
10442>>>                // only for backwards compatibility. All errors go through the message box
10442>>>                Get Verbose_State to bVerbose
10443>>>                If (bVerbose)  Begin
10445>>>                    Move ( sErrorText + "\n\n" + SFormat(C_$TechnicalDetails, ErrNum, Err_Line) ) to sErrorText
10446>>>                    If (sSource<>"") Begin
10448>>>                        Move (sErrorText + "\n" + C_$ErrorSource +" =" * sSource) to sErrorText
10449>>>                    End
10449>>>>
10449>>>                End
10449>>>>
10449>>>            End
10449>>>>
10449>>>            
10449>>>            If ( (bCritical or bIsUnhandled) and bUnhandledSupport) Begin
10451>>>                Send UnhandledErrorDisplay Err_Line sErrorText
10452>>>            End
10452>>>>
10452>>>            Else Begin
10453>>>                Move (If(bCritical,MB_IconHand,MB_IconExclamation)) to iIcon
10454>>>                Move (Message_Box(sErrorText, sCaption, MB_Ok, iIcon)) to iReply
10455>>>            End
10455>>>>
10455>>>            
10455>>>            // abort on critical errors
10455>>>            If bCritical ;                Abort
10458>>>            
10458>>>        End
10458>>>>
10458>>>        Move 0 to ghoErrorSource
10459>>>        Set Error_Processing_State to False // no longer reporting an error
10460>>>    End_Procedure
10461>>>    
10461>>>    
10461>>>    // The following functions are rarely or never used.
10461>>>    
10461>>>    // The functions below are used to construct a general help
10461>>>    // name for errors that are generated by the system.  If processing
10461>>>    // comes here, then there was no module specific help found.  These
10461>>>    // functions will provide a more general help name that appears in
10461>>>    // the form of SYSTEM..ERROR:#.  All global errors should be
10461>>>    // places in the help file under this application and module name.
10461>>>    
10461>>>    // Returns "ERROR:errornum" to supply error help.
10461>>>    Function Help_Name Returns String
10463>>>        Function_Return (Append("ERROR:",lastErr))
10464>>>    End_Function
10465>>>    
10465>>>    Function Application_Name Returns String
10467>>>        Function_Return 'SYSTEM'
10468>>>    End_Function
10469>>>    
10469>>>    Function Module_Name Returns String
10471>>>        Function_Return ''
10472>>>    End_Function
10473>>>End_Class
10474>>>
10474>>>Object Error_Info_Object is a ErrorSystem
10476>>>End_Object
10477>>>
10477>>>Procedure UserError Global String sMessage String sCaption
10479>>>    String sCapt
10479>>>    If (Error_Object_Id=0) Begin
10481>>>        Error DFERR_PROGRAM "No Error Handler"
10482>>>>
10482>>>        Procedure_Return
10483>>>    End
10483>>>>
10483>>>    
10483>>>    // Accept not passing a caption in which case the error handler's
10483>>>    // default caption. It had been the intention to require a caption ("" if none)
10483>>>    // but having no caption kind of worked where the caption would be "0". Since it
10483>>>    // kind of worked, I don't want to remove this which might generate runtime errors.
10483>>>    If (num_arguments>1) Begin
10485>>>        Move sCaption to sCapt
10486>>>    End
10486>>>>
10486>>>    
10486>>>    Error DFERR_OPERATOR (sMessage + If(sCapt<>"",C_ErrorCaption + sCapt,""))
10487>>>>
10487>>>End_Procedure
10488>Use seq_chnl.pkg                // Sequential channel management
10488>Use Statpnl.pkg                 // StatusPanel class
Including file: Statpnl.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Statpnl.pkg)
10488>>>// creates the standard status_panel object.
10488>>>//
10488>>>// This is the default Status Panel object used by any of the DataFlex classes that
10488>>>// invoke the standard status panel. The standard has always been that the package name
10488>>>// is StatPnl.pkg and the name of the object is Status_Panel. As of 12.0, there are major
10488>>>// changes in the way the status panel operates The Sentinel based external status panel used in
10488>>>// prior revisions has been replace with status panel that is part of the application.
10488>>>// This should work much better and faster than the old sentinel based solution.
10488>>>// While the way this operates has changed, the interface has not and therefore this should work
10488>>>// with most applications.
10488>>>//
10488>>>// As of 12.0, we have added a global handle that contains the object ID of this status panel.
10488>>>// This variable ghoStatusPanel can be used in place of the object name Status_Panel. This provides
10488>>>// a cleaner more robust interface.
10488>>>//
10488>>>//
10488>>>// Compatibility Note:
10488>>>//
10488>>>// When used in the standard way, this change will require no changes. A developer will only need to
10488>>>// change their code if they've modified the sentinel program, which was a difficult thing to do.
10488>>>//
10488>>>// If for some reason you application will not work using this as a replacement for the old status
10488>>>// panel, you've probably done something special with the old status-panel. If you don't want to
10488>>>// figure out how to use the new one and you want to continue using the old one you are going to need
10488>>>// to add some code to include the old status panel in your application. Add the following to your project (your src).
10488>>>//
10488>>>// Use StatPnl.pkg    // Make sure you load the new status panel object first. this is not optional!
10488>>>// Use OldStatPnl.pkg // load the old status panel. Status_Panel is now this old object
10488>>>//
10488>>>// If you do this, you will lose access to the new status-panel via Status_Panel. However, you
10488>>>// can still access the new object via the ghoStatusPanel handle.
10488>>>//
10488>>>//
10488>>>// Creating your own Status Panel objects
10488>>>//
10488>>>// If a developer wishes to create a custom panel, they should use this package as their template.
10488>>>// This panel can be visually modeled and changed any way you wish. Just save your new custom panel
10488>>>// with a different file and object name and direct your status panel request to the new object.
10488>>>//
10488>>>// If the new panel changes the interface and updates objects that are not currently defined, you
10488>>>// want to make sure you send the message ProcessEvents after you've updated the object. This allows
10488>>>// the object to paint when inside of a tight loop. For example, if you wanted to add a progress
10488>>>// bar (cProgressBar) you would want to Send ProcessEvents after you update the progress bar.
10488>>>// e.g.
10488>>>//       Procedure UpdateStatusBar
10488>>>//           Send DoAdvance of oProgressBar
10488>>>//           Send ProcessEvents
10488>>>//       End_Procedure
10488>>>//
10488>>>// Of course, if you use the standard interfaces in status bar and your forward send these
10488>>>// messages this will be done for you.
10488>>>//
10488>>>// the standard Interface for status panels are:
10488>>>//
10488>>>// Send Initialize_StatusPanel - initializes values for caption, title & message
10488>>>// Send Start_StatusPanel      - start the status panel
10488>>>// Send Stop_StatusPanel       - stop the status panel
10488>>>// Send Update_StatusPanel     - update the status panel's action area
10488>>>// Get  Check_StatusPanel      - check for cancel (if cancel or pbCancel is set, close the panel)
10488>>>//
10488>>>// Get/Set Caption_Text - updates the caption bar
10488>>>// Get/Set Title_Text   - updates the title area
10488>>>// Get/Set Message_Text - updates the Message area
10488>>>// Get/Set Action_Text  - updates the action area
10488>>>// Get/Set Button_Text  - updates the button area
10488>>>//
10488>>>// Get/Set Allow_cancel_state - determines if panel can be canceled
10488>>>// Send EnableCancelButton - code you should provide to enable/disable cancel button
10488>>>//
10488>>>// ghoStatusPanel - global handle that points to the standard status panel.
10488>>>
10488>>>Use cProcessStatusPanel.pkg
Including file: cProcessStatusPanel.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cProcessStatusPanel.pkg)
10488>>>>>// cProcessStatusPanel.pkg
10488>>>>>//
10488>>>>>// Class used to create StatusPanels.
10488>>>>>//
10488>>>>>// This class does not provide any of the inner objects that make up a status panel. Instead an
10488>>>>>// interface is provided that is used to update the various areas of status panel. At this level,
10488>>>>>// those areas (title area, message area, action area, button area) are logical. You create the
10488>>>>>// physical objects at the object level and then bind these objects to the interface.
10488>>>>>// Take a look at StatPnl.pkg to see how this is used.
10488>>>>>//
10488>>>>>// the standard Interface for status panels are:
10488>>>>>//
10488>>>>>// Send Initialize_StatusPanel - initializes values for caption, title & message
10488>>>>>// Send Start_StatusPanel      - start the status panel
10488>>>>>// Send Stop_StatusPanel       - stop the status panel
10488>>>>>// Send Update_StatusPanel     - update the status panel's action area
10488>>>>>// Get  Check_StatusPanel      - check for cancel (if cancel or pbCancel is set, close the panel)
10488>>>>>//
10488>>>>>// Get/Set Caption_Text - updates the caption bar
10488>>>>>// Get/Set Title_Text   - updates the title area
10488>>>>>// Get/Set Message_Text - updates the Message area
10488>>>>>// Get/Set Action_Text  - updates the action area
10488>>>>>// Get/Set Button_Text  - updates the button area
10488>>>>>//
10488>>>>>// Get/Set Allow_cancel_state - determines if panel can be canceled
10488>>>>>// Send EnableCancelButton - code must be provided in the cancel button object to enable/disable cancel button
10488>>>>>//
10488>>>>>
10488>>>>>Use cStatusPanel.pkg
Including file: cStatusPanel.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cStatusPanel.pkg)
10488>>>>>>>// This is an abstract class that can be used to create status panels. The interface at this level
10488>>>>>>>// is very simple. You can start, stop, request a cancel and allow the object to paint.
10488>>>>>>>//
10488>>>>>>>// Look at cProcessStatusPanel.pkg to see how this is used.
10488>>>>>>>
10488>>>>>>>Use Windows.pkg
10488>>>>>>>
10488>>>>>>>
10488>>>>>>>
10488>>>>>>>
10488>>>>>>>Class cStatusPanel is a FloatingPanel
10489>>>>>>>    
10489>>>>>>>    Procedure Construct_Object
10491>>>>>>>        Forward Send Construct_object
10493>>>>>>>        
10493>>>>>>>        Property Boolean pbCancel False
10494>>>>>>>        
10494>>>>>>>        Set Extended_Window_Style to WS_EX_DLGMODALFRAME True // kills sysmenu as long as there is no icon
10495>>>>>>>        Set Icon to '' // this must be cleared so there will be no icon
10496>>>>>>>        Set locate_mode to CENTER_ON_PANEL
10497>>>>>>>        Set Border_Style  to Border_Dialog
10498>>>>>>>        // should be scoped so it will not try to change the focus if there is no focusable button inside
10498>>>>>>>        Set Scope_State to True
10499>>>>>>>        
10499>>>>>>>        On_Key KEXIT_APPLICATION Send Close_Panel
10500>>>>>>>    End_Procedure
10501>>>>>>>    
10501>>>>>>>    // this is private and required. Never send this.
10501>>>>>>>    Procedure Deactivate_Group
10503>>>>>>>        If (Active_State(Self)) Begin
10505>>>>>>>            Send SuspendGUI of Desktop False
10506>>>>>>>        End
10506>>>>>>>>
10506>>>>>>>        Forward Send Deactivate_Group
10508>>>>>>>    End_Procedure
10509>>>>>>>    
10509>>>>>>>    // Send this message to stop the panel
10509>>>>>>>    Procedure Deactivate
10511>>>>>>>        If (Active_State(Self)) Begin
10513>>>>>>>            Send SuspendGUI of Desktop False
10514>>>>>>>        End
10514>>>>>>>>
10514>>>>>>>        Forward Send Deactivate
10516>>>>>>>    End_Procedure
10517>>>>>>>    
10517>>>>>>>    // Send this message to start the panel
10517>>>>>>>    Procedure Activate
10519>>>>>>>        If not (Active_State(Self)) Begin
10521>>>>>>>            Set pbCancel to False
10522>>>>>>>            Send SuspendGUI of Desktop True
10523>>>>>>>        End
10523>>>>>>>>
10523>>>>>>>        Forward Send Activate
10525>>>>>>>    End_Procedure
10526>>>>>>>    
10526>>>>>>>    // This allows the panel to paint when used in a tight loop, which is what status panels are
10526>>>>>>>    // used for. Any time you update the panel or wish to check for a cancel, you should call this.
10526>>>>>>>    Procedure ProcessEvents
10528>>>>>>>        If (Active_State(Self)) Begin
10530>>>>>>>            Send PumpMsgQueue of Desktop
10531>>>>>>>        End
10531>>>>>>>>
10531>>>>>>>    End_Procedure
10532>>>>>>>    
10532>>>>>>>    // note close panel does not actually close the panel. It just sets pbCancel to True, informing the
10532>>>>>>>    // process using this that it wants to close. It is then up the process close the panel.
10532>>>>>>>    Procedure Close_Panel
10534>>>>>>>        Set pbCancel to True
10535>>>>>>>    End_Procedure
10536>>>>>>>    
10536>>>>>>>End_Class
10537>>>>>
10537>>>>>
10537>>>>>
10537>>>>>Class cProcessStatusPanel is a cStatusPanel
10538>>>>>    
10538>>>>>    Procedure Construct_Object
10540>>>>>        Forward Send Construct_object
10542>>>>>        // determines if panel can be canceled
10542>>>>>        Property Boolean Allow_Cancel_State True
10543>>>>>    End_Procedure
10544>>>>>    
10544>>>>>    // Any of the properties that change the text of a status panel must also send
10544>>>>>    // ProcessEvents which allows the panel to process painting messages. The ProcessEvents
10544>>>>>    // is essential when using status panels within a tight loop
10544>>>>>    
10544>>>>>    Procedure Set Caption_text String sText
10546>>>>>        Set Label to sText
10547>>>>>        Send ProcessEvents
10548>>>>>    End_Procedure
10549>>>>>    
10549>>>>>    Function Caption_Text Returns String
10551>>>>>        Function_Return (Label(Self))
10552>>>>>    End_Function
10553>>>>>    
10553>>>>>    Procedure Set Message_Text String sText
10555>>>>>        Send ProcessEvents
10556>>>>>    End_Procedure
10557>>>>>    
10557>>>>>    Function Message_Text Returns String
10559>>>>>    End_Function
10560>>>>>    
10560>>>>>    Procedure Set Action_Text String sText
10562>>>>>        Send ProcessEvents
10563>>>>>    End_Procedure
10564>>>>>    
10564>>>>>    Function Action_Text Returns String
10566>>>>>    End_Function
10567>>>>>    
10567>>>>>    Procedure Set Button_Text String sText
10569>>>>>        Send ProcessEvents
10570>>>>>    End_Procedure
10571>>>>>    
10571>>>>>    Function Button_Text Returns String
10573>>>>>    End_Function
10574>>>>>    
10574>>>>>    Procedure Set Title_Text String sText
10576>>>>>        Send ProcessEvents
10577>>>>>    End_Procedure
10578>>>>>    
10578>>>>>    Function Title_Text Returns String
10580>>>>>    End_Function
10581>>>>>    
10581>>>>>    // initializes values for caption, title & message
10581>>>>>    Procedure Initialize_StatusPanel String sCaption String sTitle String sMessage
10583>>>>>        Set Caption_text to sCaption
10584>>>>>        Set Title_Text   to sTitle
10585>>>>>        Set Message_Text to sMessage
10586>>>>>    End_Procedure
10587>>>>>    
10587>>>>>    // update the status panel's action area
10587>>>>>    Procedure Update_StatusPanel String sAction
10589>>>>>        Set Action_Text to sAction
10590>>>>>    End_Procedure
10591>>>>>    
10591>>>>>    // stop the status panel
10591>>>>>    Procedure Close_Panel
10593>>>>>        If (Allow_cancel_state(Self)) Begin
10595>>>>>            Forward Send Close_Panel
10597>>>>>        End
10597>>>>>>
10597>>>>>    End_Procedure
10598>>>>>    
10598>>>>>    // Code must be provided in the cancel button object to enable/disable cancel button
10598>>>>>    Procedure EnableCancelButton Boolean bEnable
10600>>>>>    End_Procedure
10601>>>>>    
10601>>>>>    // check for cancel (if cancel or pbCancel is set, close the panel)
10601>>>>>    Function Check_StatusPanel Returns Integer
10603>>>>>        Boolean bCancel
10603>>>>>        If (Active_state(Self)) Begin
10605>>>>>            Send ProcessEvents
10606>>>>>            Get pbCancel to bCancel
10607>>>>>            If bCancel Begin
10609>>>>>                Send Stop_StatusPanel // the old status panel removed this when canceled.
10610>>>>>            End
10610>>>>>>
10610>>>>>        End
10610>>>>>>
10610>>>>>        Function_Return (If(bCancel, MSG_CANCEL, 0)) // the old check status panel returns msg_cancel
10611>>>>>    End_Function
10612>>>>>    
10612>>>>>    // start the status panel
10612>>>>>    Procedure Start_StatusPanel
10614>>>>>        If not (Active_state(Self)) Begin
10616>>>>>            Send EnableCancelButton (Allow_cancel_state(Self))
10617>>>>>            Send Activate
10618>>>>>        End
10618>>>>>>
10618>>>>>    End_Procedure
10619>>>>>    
10619>>>>>    // stop the status panel
10619>>>>>    Procedure Stop_StatusPanel
10621>>>>>        If (Active_state(Self)) Begin
10623>>>>>            Send Deactivate
10624>>>>>        End
10624>>>>>>
10624>>>>>    End_Procedure
10625>>>>>    
10625>>>>>End_Class
10626>>>
10626>>>
10626>>>Global_Variable Handle ghoStatusPanel // will contain the ID of the global StatusPanel object
10626>>>
10626>>>
10626>>>Object Status_Panel is a cProcessStatusPanel
10628>>>    
10628>>>    Move Self to ghoStatusPanel // this can be used throughout your applicaton to access this object
10629>>>    
10629>>>    Set Size to 80 166
10630>>>    
10630>>>    Object oTitleTxt is a TextBox
10632>>>        Set location to 10 10
10633>>>        Set Auto_Size_State to False
10634>>>        Set size to 20 150
10635>>>        Set Justification_Mode to JMode_Center
10636>>>    End_Object
10637>>>    
10637>>>    Object oMessageTxt is a TextBox
10639>>>        Set location to 25 10
10640>>>        Set Auto_Size_State to False
10641>>>        Set size to 20 150
10642>>>    End_Object
10643>>>    
10643>>>    Object oActionTxt is a TextBox
10645>>>        Set location to 45 10
10646>>>    End_Object
10647>>>    
10647>>>    Object oStopButton is a Button
10649>>>        Set Location to 60 58
10650>>>        Set Label to C_$Cancel
10651>>>        
10651>>>        Procedure OnClick
10654>>>            Send Close_panel
10655>>>        End_Procedure
10656>>>        
10656>>>    End_Object
10657>>>    
10657>>>    // These messages bind the standard cProcessStatusPanel interface to the actual
10657>>>    // objects defined within this instance of the status panel.
10657>>>    
10657>>>    // note: all of the messages that change text should be forwarded
10657>>>    // as the forwarded messages allows the panel to paint when in a tight loop
10657>>>    
10657>>>    Procedure Set Message_Text String sText
10660>>>        Set Label of oMessageTxt to sText
10661>>>        Forward Set Message_Text to sText
10663>>>    End_Procedure
10664>>>    
10664>>>    Function Message_Text Returns String
10667>>>        Function_Return (Label(oMessageTxt))
10668>>>    End_Function
10669>>>    
10669>>>    Procedure Set Action_Text String sText
10672>>>        Set Label of oActionTxt to sText
10673>>>        Forward Set Action_Text to sText
10675>>>    End_Procedure
10676>>>    
10676>>>    Function Action_Text Returns String
10679>>>        Function_Return (Label(oActionTxt))
10680>>>    End_Function
10681>>>    
10681>>>    Procedure Set Button_Text String sText
10684>>>        Set Label of oStopButton to sText
10685>>>        Forward Set Button_Text to sText
10687>>>    End_Procedure
10688>>>    
10688>>>    Function Button_Text Returns String
10691>>>        Function_Return (Label(oStopButton))
10692>>>    End_Function
10693>>>    
10693>>>    Procedure Set Title_Text String sText
10696>>>        Set Label of oTitleTxt to sText
10697>>>        Forward Set Title_Text to sText
10699>>>    End_Procedure
10700>>>    
10700>>>    Function Title_Text Returns String
10703>>>        Function_Return (Label(oTitleTxt))
10704>>>    End_Function
10705>>>    
10705>>>    // gets called when status panel is activated passing whether a button
10705>>>    // should appear
10705>>>    Procedure EnableCancelButton Boolean bEnable
10708>>>        Set Enabled_State of oStopButton to bEnable
10709>>>    End_Procedure
10710>>>    
10710>>>End_Object
10711>>>
10711>Use File_dlg.pkg                // SaveAsDialog & OpenDialog class
Including file: File_dlg.pkg    (C:\Program Files\DataFlex 20.1\Pkg\File_dlg.pkg)
10711>>>Use Windows.pkg
10711>>>Use GlobalFunctionsProcedures.pkg
10711>>>
10711>>>
10711>>>// Unicode support, wide version of GetOpenFileName - Gets called directly from Show_Dialog.
10711>>>External_Function GetOpenFileNameW "GetOpenFileNameW" Comdlg32.DLL Pointer OpenStruct Returns Integer
10712>>>
10712>>>// Unicode support, wide version of GetSaveFileName
10712>>>External_Function GetSaveFileNameW "GetSaveFileNameW" Comdlg32.DLL Pointer OpenStruct Returns Integer
10713>>>
10713>>>Struct TOpenFileName
10713>>>    DWord    lStructSize          // length, in bytes, of the structure.
10713>>>    Handle   hwndOwner            // Handle to the window that owns the dialog box.
10713>>>    Handle   hInstance            // handle to a memory object containing a dialog box template.
10713>>>    Pointer  lpstrFilter          // pointer to a buffer containing pairs of null-terminated filter strings.
10713>>>    Pointer  lpstrCustomFilter    // Pointer to a static buffer that contains a pair of null-terminated filter strings for preserving the filter pattern chosen by the user.
10713>>>    DWord    nMaxCustFilter       // size, in chars, of the buffer identified by lpstrCustomFilter.
10713>>>    DWord    nFilterIndex         // index of the currently selected filter
10713>>>    Pointer  lpstrFile            // Pointer to a buffer that contains the file name(s)
10713>>>    DWord    nMaxFile             // Size, in CHARs, of the buffer pointed to by lpstrFile.
10713>>>    Pointer  lpstrFileTitle       // Pointer to a buffer that receives the file name and extension
10713>>>    DWord    nMaxFileTitle        // size, in CHARs, of the buffer pointed to by lpstrFileTitle
10713>>>    Pointer  lpstrInitialDir      // Pointer to a NULL terminated string that can specify the initial directory.
10713>>>    Pointer  lpstrTitle           // Pointer to a string to be placed in the title bar of the dialog box.
10713>>>    DWord    ofnFlags             // set of bit flags you can use to initialize the dialog box.
10713>>>    Short    nFileOffset          // Specifies the zero-based offset, in TCHARs, from the beginning of the path to the file name in the string pointed to by lpstrFile.
10713>>>    Short    nFileExtension       // Specifies the zero-based offset, in TCHARs, from the beginning of the path to the file name extension in the string pointed to by lpstrFile.
10713>>>    Pointer  lpstrDefExt          // Pointer to a buffer that contains the default extension.
10713>>>    Longptr  lCustData            // Specifies application-defined data that the system passes to the hook procedure identified by the lpfnHook member.
10713>>>    Pointer  lpfnHook             // Pointer to a hook procedure.
10713>>>    Pointer  lpTemplateName       // Pointer to a null-terminated string that names a dialog template resource in the module identified by the hInstance member.
10713>>>    Pointer  lpvReserved          // Reserved
10713>>>    DWord    dwReserved           // Reserved
10713>>>    DWord    FlagsEx              // A set of bit flags you can use to initialize the dialog box.
10713>>>End_Struct
10713>>>
10713>>>Define OFN_READONLY               for |CI$000001
10713>>>Define OFN_OVERWRITEPROMPT        for |CI$000002
10713>>>Define OFN_HIDEREADONLY           for |CI$000004
10713>>>Define OFN_NOCHANGEDIR            for |CI$000008
10713>>>Define OFN_NOVALIDATE             for |CI$000100
10713>>>Define OFN_ALLOWMULTISELECT       for |CI$000200
10713>>>Define OFN_EXTENSIONDIFFERENT     for |CI$000400
10713>>>Define OFN_PATHMUSTEXIST          for |CI$000800
10713>>>Define OFN_FILEMUSTEXIST          for |CI$001000
10713>>>Define OFN_CREATEPROMPT           for |CI$002000
10713>>>Define OFN_SHAREAWARE             for |CI$004000
10713>>>Define OFN_NOREADONLYRETURN       for |CI$008000
10713>>>Define OFN_NOTESTFILECREATE       for |CI$010000
10713>>>Define OFN_EXPLORER               for |CI$080000     // new look commdlg
10713>>>
10713>>>Class AbstractFileDialog is a cObject
10714>>>    
10714>>>    Procedure Construct_Object
10716>>>        Forward Send Construct_Object
10718>>>        
10718>>>        Property String  Filter_String
10719>>>        Property String  Initial_Folder
10720>>>        Property String  File_Name
10721>>>        Property String  File_Title
10722>>>        Property String  Dialog_Caption
10723>>>        Property Integer Filter_Index          1
10724>>>        Property Integer HideReadOnly_State    False
10725>>>        Property Integer TickReadOnly_State    False
10726>>>        Property Integer AllowReadOnly_State   True
10727>>>        Property Integer FileMustExist_State   True
10728>>>        Property Integer PathMustExist_State   True
10729>>>        Property Integer CreatePrompt_State    True
10730>>>        Property Integer ShowFileTitle_State   False
10731>>>        Property Integer OverwritePrompt_State False
10732>>>        Property Integer NoChangeDir_State     False
10733>>>        
10733>>>        Property Boolean Private_MultiSelect_State False
10734>>>        
10734>>>        Property String[] Private_Selected_Files
10735>>>        
10735>>>        Property Integer PrivateExternal_msg
10736>>>        
10736>>>        //Set Focus_Mode To No_Activate
10736>>>    End_Procedure
10737>>>    
10737>>>    Function OwnerHandle Returns Handle
10739>>>        Handle hWnd
10739>>>        Handle hoObj
10739>>>        Get Focus of desktop to hoObj // start with the focus
10740>>>        Move (gOwnerWindowHandle(hoObj)) to hWnd // global function finds the right handle for us
10741>>>        Function_Return hWnd
10742>>>    End_Function
10743>>>    
10743>>>    
10743>>>    Function Show_Dialog Returns Integer // bool
10745>>>        Handle hWnd
10745>>>        Integer bOK iFilter iFlags bHideRO bTickRO bFileExist bPathExist iMsg
10745>>>        Integer icInitDir bCreatePrompt bOverwritePrompt bAllowReadOnly
10745>>>        Integer iPos iCount
10745>>>        Integer bNoChangeDir
10745>>>        Pointer lpsFileTitle lpsFileName lpsFilter lpsInitDir
10745>>>        Pointer lpsTitle lpsDefExt
10745>>>        WString sFileName sFileTitle sFilter sInitDir sTitle sDefExt
10745>>>        Pointer lpOpenFileData
10745>>>        Boolean bMultiSelect
10745>>>        String[] sFiles
10746>>>        TOpenFileName OpenFileData
10746>>>        TOpenFileName OpenFileData
10746>>>        
10746>>>        //Delegate Get Container_Handle To hWnd
10746>>>        Get OwnerHandle to hWnd
10747>>>        
10747>>>        If (ShowFileTitle_State(Self)) Begin
10749>>>            Get File_Title to sFileName
10750>>>        End
10750>>>>
10750>>>        
10750>>>        Get private_MultiSelect_State to bMultiSelect
10751>>>        
10751>>>        Get Initial_Folder        to sInitDir
10752>>>        Get Dialog_Caption        to sTitle
10753>>>        Get Filter_String         to sFilter
10754>>>        Get HideReadOnly_State    to bHideRO
10755>>>        Get TickReadOnly_State    to bTickRO
10756>>>        Get FileMustExist_State   to bFileExist
10757>>>        Get PathMustExist_State   to bPathExist
10758>>>        Get CreatePrompt_State    to bCreatePrompt
10759>>>        Get OverwritePrompt_State to bOverwritePrompt
10760>>>        Get AllowReadOnly_State   to bAllowReadOnly
10761>>>        Get NoChangeDir_State     to bNoChangeDir
10762>>>        Get Filter_Index          to iFilter
10763>>>        
10763>>>        Move (sFilter + Character(0) + Character(0)) to sFilter
10764>>>        Move (Replaces('|', sFilter, Character(0))) to sFilter
10765>>>        
10765>>>        Append sInitDir   (character(0))
10766>>>        Append sFileTitle (Repeat(character(0),32000))
10767>>>        Append sFileName  (Repeat(character(0),32000))
10768>>>        Append sTitle     (Repeat(character(0),255))
10769>>>        Append sDefExt    (character(0))
10770>>>        
10770>>>        Move (AddressOf(sInitDir))   to lpsInitDir
10771>>>        Move (AddressOf(sFileName))  to lpsFileName
10772>>>        Move (AddressOf(sFileTitle)) to lpsFileTitle
10773>>>        Move (AddressOf(sTitle))     to lpsTitle
10774>>>        Move (AddressOf(sDefExt))    to lpsDefExt
10775>>>        Move (AddressOf(sFilter))    to lpsFilter
10776>>>        
10776>>>        
10776>>>        If (bMultiSelect) Begin
10778>>>            Move (OFN_EXPLORER + OFN_ALLOWMULTISELECT) to iFlags  // Multi-select!
10779>>>        End
10779>>>>
10779>>>        
10779>>>        If bFileExist ;            Move (iFlags + OFN_FILEMUSTEXIST)    to iFlags
10782>>>        If bPathExist ;            Move (iFlags + OFN_PATHMUSTEXIST)    to iFlags
10785>>>        If bHideRO ;            Move (iFlags + OFN_HIDEREADONLY)     to iFlags
10788>>>        If bTickRO ;            Move (iFlags + OFN_READONLY)         to iFlags
10791>>>        If bCreatePrompt ;            Move (iFlags + OFN_CREATEPROMPT)     to iFlags
10794>>>        If bOverwritePrompt ;            Move (iFlags + OFN_OVERWRITEPROMPT)  to iFlags
10797>>>        If not bAllowReadOnly ;            Move (iFlags + OFN_NOREADONLYRETURN) to iFlags
10800>>>        If bNoChangeDir ;            Move (iFlags + OFN_NOCHANGEDIR)      to iFlags
10803>>>        
10803>>>        Move (SizeOfType(TOpenFileName)) to OpenFileData.lStructSize
10804>>>        Move hWnd         to OpenFileData.hWndOwner
10805>>>        Move iFilter      to OpenFileData.nFilterIndex
10806>>>        Move lpsFileName  to OpenFileData.lpstrFile
10807>>>        
10807>>>        If (sInitDir <> '') Begin
10809>>>            Move lpsInitDir    to OpenFileData.lpstrInitialDir
10810>>>        End
10810>>>>
10810>>>        
10810>>>        If (sTitle <> '') Begin
10812>>>            Move lpsTitle      to OpenFileData.lpstrTitle
10813>>>        End
10813>>>>
10813>>>        
10813>>>        Move 32000             to OpenFileData.nMaxFileTitle
10814>>>        Move 32000             to OpenFileData.nMaxFile
10815>>>        Move lpsFileTitle      to OpenFileData.lpstrFileTitle
10816>>>        Move iFlags            to OpenFileData.ofnFlags
10817>>>        Move lpsFilter         to OpenFileData.lpstrFilter
10818>>>        Move lpsDefExt         to OpenFileData.lpstrDefExt
10819>>>        
10819>>>        Move (AddressOf(OpenFileData)) to lpOpenFileData
10820>>>        
10820>>>        Get PrivateExternal_msg to iMsg
10821>>>        If (iMsg = Get_GetOpenFileNameW) ;            Move (GetOpenFileNameW (lpOpenFileData)) to bOK
10824>>>        If (iMsg = Get_GetSaveFileNameW) ;            Move (GetSaveFileNameW (lpOpenFileData)) to bOK
10827>>>        
10827>>>        If bOK Begin
10829>>>            Move OpenFileData.ofnFlags     to iFlags
10830>>>            Move OpenFileData.nFilterIndex to iFilter
10831>>>            Move OpenFileData.nFileOffset  to icInitDir
10832>>>            
10832>>>            Move (CString(Left(sFileName, icInitDir))) to sInitDir    // Trim trailing null
10833>>>            Set Initial_Folder     to sInitDir
10834>>>            
10834>>>            Set TickReadOnly_State to (iFlags iand OFN_READONLY)
10835>>>            Set Filter_Index       to iFilter
10836>>>
10836>>>            Set File_Name          to (CString( sFileName ))
10837>>>            Set File_Title         to (CString( sFileTitle ))
10838>>>            
10838>>>            If (bMultiSelect) Begin
10840>>>                // If this is a multi-files dialog then parse out the array of selected files....
10840>>>                If (Right(sInitDir, 1) = "\") ;                    Move (Left(sInitDir, Length(sInitDir)-1)) to sInitDir     // Trim trailing :\". This is only there if 1 file was selected!
10843>>>                
10843>>>                // Get the null delimited string of file names into the sFiles array....
10843>>>                Move 0 to iCount
10844>>>                Move (Right(sFileName, Length(sFileName) - icInitDir)) to sFileName    // Strip the path info (we already have it)
10845>>>                
10845>>>                Repeat
10845>>>>
10845>>>                    // Get the next filename....
10845>>>                    Move (Pos(Character(0), sFileName)) to iPos   // Filenames are null delimeted
10846>>>                    
10846>>>                    If (iPos > 1) Begin
10848>>>                        Move (sInitDir + "\" + CString(Left(sFileName, iPos))) to sFiles[iCount]
10849>>>                        Move (Right(sFileName, Length(sFileName) - iPos)) to sFileName
10850>>>                        Increment iCount
10851>>>                    End
10851>>>>
10851>>>                Until (iPos <= 1)
10853>>>            End
10853>>>>
10853>>>            Else Begin
10854>>>                Move (CString(sFileName)) to sFiles[0]
10855>>>            End
10855>>>>
10855>>>            
10855>>>            Set private_Selected_Files to sFiles
10856>>>        End
10856>>>>
10856>>>        Function_Return (bOK)
10857>>>    End_Function
10858>>>End_Class
10859>>>
10859>>>Class OpenDialog is an AbstractFileDialog
10860>>>    Procedure Construct_Object
10862>>>        Forward Send Construct_Object
10864>>>        Set PrivateExternal_msg to get_GetOpenFileNameW
10865>>>    End_Procedure
10866>>>    
10866>>>    Procedure Set MultiSelect_State Boolean bState
10868>>>        Set private_MultiSelect_State to bState
10869>>>    End_Procedure
10870>>>    
10870>>>    Function MultiSelect_State Returns Boolean
10872>>>        Boolean bState
10872>>>        Get private_MultiSelect_State to bState
10873>>>        Function_Return bState
10874>>>    End_Function
10875>>>    
10875>>>    Function Selected_Files Returns String[]
10877>>>        String[] sFiles
10878>>>        Get private_Selected_Files to sFiles
10879>>>        Function_Return sFiles
10880>>>    End_Function
10881>>>End_Class
10882>>>
10882>>>Class SaveAsDialog is an AbstractFileDialog
10883>>>    Procedure Construct_Object
10885>>>        Forward Send Construct_Object
10887>>>        Set FileMustExist_State   to False
10888>>>        Set CreatePrompt_State    to False
10889>>>        Set ShowFileTitle_State   to True
10890>>>        Set OverwritePrompt_State to True
10891>>>        Set HideReadOnly_State    to True
10892>>>        Set PrivateExternal_msg to get_GetSaveFileNameW
10893>>>    End_Procedure
10894>>>End_Class
10895>>>
10895>Use Flexml.pkg
Including file: Flexml.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Flexml.pkg)
10895>>>Use VdfBase.pkg
10895>>>Use LanguageText.pkg
10895>>>Use GlobalFunctionsProcedures.pkg
10895>>>
10895>>>
10895>>>// Used to designate that a handle is a handle to an Xml Dom object. This
10895>>>// is used/required by server web-services but could be used elsewhere .
10895>>>
10895>>>
10895>>>// Types of Nodes
10895>>>
10895>>>
10895>>>// classes and methods defined in fmac
10895>>>
10895>>>
10895>>>Register_Function transformNode Handle infcXSLNode Returns String
10895>>>
10895>>>
10895>>>
10895>>>
10895>>>
10895>>>
10895>>>
10895>>>
10895>>>
10895>>>// XML function & procedure registration
10895>>>
10895>>>Register_Procedure Set XmlInterface Handle iHandle
10895>>>Register_Function XmlInterface Returns Handle
10895>>>
10895>>>// NODE Properties
10895>>>Register_Function phAttributes Returns Handle
10895>>>Register_Function psBaseName Returns String
10895>>>Register_Function phChildNodes Returns Handle
10895>>>Register_Function phDefinition Returns Handle
10895>>>Register_Function phFirstChild Returns Handle
10895>>>Register_Function phLastChild Returns Handle
10895>>>Register_Function phNextSibling Returns Handle
10895>>>Register_Function psNameSpaceURI Returns String
10895>>>Register_Function psNodeName Returns String
10895>>>Register_Function piNodeType Returns Integer
10895>>>Register_Function psNodeTypeString Returns String
10895>>>Register_Function phOwnerDocument Returns Handle
10895>>>Register_Function phParentNode Returns Handle
10895>>>Register_Function pbParsed Returns Integer
10895>>>Register_Function psPrefix Returns String
10895>>>Register_Function phPreviousSibling Returns Handle
10895>>>Register_Function pbSpecified Returns Integer
10895>>>Register_Function psText Returns String
10895>>>Register_Procedure Set psText String sText
10895>>>Register_Function psXML Returns String
10895>>>
10895>>>// Node Read write properties
10895>>>
10895>>>Register_Procedure Set psDataType String sTypeName
10895>>>Register_Function psDataType Returns String
10895>>>Register_Procedure Set pvNodeTypedValue Integer iType Integer iAddress
10895>>>Register_Function pvNodeTypedValue Integer iType Returns Integer  // address of data
10895>>>Register_Procedure Set psNodeValue String sValue
10895>>>Register_Function psNodeValue Returns String
10895>>>
10895>>>// Node Methods
10895>>>
10895>>>Register_Function AppendChild Handle iChildInfc Returns Handle
10895>>>Register_Function CloneInfcNode Handle bRecurse Returns Handle
10895>>>Register_Function HasChildNodes Returns Integer
10895>>>Register_Function InsertBefore Handle infcNodeToInsert Handle iWhere Returns Handle
10895>>>Register_Function RemoveChild Handle iChildToRemove Returns Handle
10895>>>Register_Function ReplaceChild Handle iNewChild Handle iChildToReplace Returns Handle
10895>>>Register_Function SelectNodes String selectstring Returns Handle
10895>>>Register_Function SelectSingleNode String selectstring Returns Handle
10895>>>
10895>>>// Node Collections
10895>>>// READONLY PROPERTIES
10895>>>
10895>>>Register_Function phItem Integer iItem Returns Handle
10895>>>Register_Function phElementItem Integer iItem Returns Handle
10895>>>
10895>>>Register_Function piLength Returns Integer
10895>>>
10895>>>Register_Function NamedItem String sName Returns Handle
10895>>>Register_Function QualifiedItem String sBaseName String sNameSpace Returns Handle
10895>>>Register_Function RemoveNamedItem String sName Returns Handle
10895>>>Register_Function RemoveQualifiedItem String sBaseName String sNameSpace Returns Handle
10895>>>Register_Function SetNamedItem Handle iInterface Returns Handle
10895>>>
10895>>>// XML DOM Document
10895>>>// Read only properties
10895>>>
10895>>>Register_Function phDocType Returns Handle
10895>>>Register_Function phImplementation Returns Handle
10895>>>Register_Function phParseError Returns Handle
10895>>>Register_Function piReadyState Returns Integer
10895>>>Register_Function psURL Returns String
10895>>>
10895>>>// Read Write Properties
10895>>>
10895>>>Register_Procedure Set pbAsync Integer bValue
10895>>>Register_Function pbAsync Returns Integer
10895>>>Register_Procedure Set phDocumentElement Handle iElement
10895>>>Register_Function phDocumentElement Returns Handle
10895>>>Register_Procedure Set pbPreserveWhiteSpace Integer bValue
10895>>>Register_Function pbPreserveWhiteSpace Returns Integer
10895>>>Register_Procedure Set pbResolveExternals Integer bValue
10895>>>Register_Function pbResolveExternals Returns Integer
10895>>>Register_Procedure Set pbValidateOnParse Integer bValue
10895>>>Register_Function pbValidateOnParse Returns Integer
10895>>>
10895>>>// Events
10895>>>
10895>>>// Methods
10895>>>
10895>>>Register_Function Abort Returns Integer
10895>>>Register_Function ElementsByTagName String sTagName Returns Handle
10895>>>Register_Function LoadDocument String sURLName Returns Integer
10895>>>Register_Function LoadXML String sXMLText Returns Integer
10895>>>Register_Function NodeFromID String sNodeName Returns Handle
10895>>>Register_Function SaveDocument String sURLName Returns Integer
10895>>>
10895>>>// Parse Error
10895>>>// Read Only Properties
10895>>>
10895>>>Register_Function piErrorCode Returns Integer
10895>>>Register_Function piFilePos Returns Integer
10895>>>Register_Function piLine Returns Integer
10895>>>Register_Function piLinePos Returns Integer
10895>>>Register_Function psReason Returns String
10895>>>Register_Function psSrcText Returns String
10895>>>Register_Function psURL Returns String
10895>>>
10895>>>// DOM Implementation
10895>>>// Method
10895>>>
10895>>>Register_Function HasFeature String sSystem String sFeature Returns Integer
10895>>>
10895>>>// Methods
10895>>>
10895>>>Register_Function substringData Integer iOffset Integer iCount Returns String
10895>>>Register_Function appendData String sData Returns Handle
10895>>>Register_Function insertData Integer iOffset String sData Returns Handle
10895>>>Register_Function deleteData Integer iOffset Integer iCount Returns Handle
10895>>>Register_Function replaceData Integer iOffset Integer iCount String sData Returns Handle
10895>>>
10895>>>// Attributes
10895>>>
10895>>>Register_Function psName Returns String
10895>>>
10895>>>// Elements
10895>>>// Read Only properties
10895>>>
10895>>>Register_Function psTagName Returns String
10895>>>
10895>>>// Methods
10895>>>
10895>>>Register_Procedure Set attributeValue String sName String sValue
10895>>>Register_Function attributeValue String sName Returns String
10895>>>Register_Function removeAttribute String sName Returns Handle
10895>>>Register_Function attributeNode String sName Returns Handle
10895>>>Register_Procedure Set attributeNode Handle iNode Returns Handle
10895>>>Register_Function removeAttributeNode Handle iNode Returns Handle
10895>>>
10895>>>// DOM Text
10895>>>// Methods
10895>>>
10895>>>Register_Function splitText Integer iOffset Returns Integer
10895>>>
10895>>>// DOM Processing Instruction
10895>>>// Read Only Properties
10895>>>Register_Function psTarget Returns String
10895>>>
10895>>>// DOM Document Type
10895>>>
10895>>>Register_Function phEntities Returns Handle
10895>>>Register_Function phNotations Returns Handle
10895>>>
10895>>>// DOM Notations
10895>>>
10895>>>Register_Function psPublicID Returns String
10895>>>Register_Function psSystemID Returns String
10895>>>Register_Function psNotationName Returns String
10895>>>
10895>>>// create nodes
10895>>>
10895>>>Register_Function createAttribute String sName Returns Handle
10895>>>Register_Function createCDataSection String sValue Returns Handle
10895>>>Register_Function createComment String sValue Returns Handle
10895>>>Register_Function createDocumentFragment Returns Handle
10895>>>Register_Function createElement String sTagName Returns Handle
10895>>>Register_Function createEntityReference String sEntityName Returns Handle
10895>>>Register_Function createNode Integer iNodeType String sName String sNameSpace Returns Handle
10895>>>Register_Function createProcessingInstruction String sTarget String sData Returns Handle
10895>>>Register_Function createTextNode String sData Returns Handle
10895>>>
10895>>>Register_Function ChangeNodeType Integer iTypeOfNode Integer bSetInterface Returns Handle
10895>>>
10895>>>
10895>>>//          Part 1:  Base Document Logic Specialized For Templates
10895>>>
10895>>>//
10895>>>//  XML Collections
10895>>>//
10895>>>//  Collection mixin has common functions to both node lists and named node maps
10895>>>//
10895>>>
10895>>>// This provides functions required of all XMLDOM objects.
10895>>>//
10895>>>Class cXMLDOMMixin is a Mixin
10896>>>    
10896>>>    // Create an XML object of passed class Id and bind passed interface. returns
10896>>>    // the object handle. All dynamic XML object can be created using this syntax
10896>>>    
10896>>>    Function CreateXMLObject Integer iClassId Handle hinfXMLInterface Returns Handle
10898>>>        Handle hoId hoDocument
10898>>>        // We will always create objects at the DOMDocument level.
10898>>>        Get DocumentObject to hoDocument
10899>>>        If (hoDocument=0) Begin  // this should never happen.
10901>>>            Error DFERR_XML_INTERNAL_ERROR C_$XmlFailedNoDocObject
10902>>>>
10902>>>            Function_Return 0
10903>>>        End
10903>>>>
10903>>>        If hinfXMLInterface Begin
10905>>>            Get Create of hoDocument iClassId to hoID
10906>>>            Set XMLInterface of hoID to hinfXMLInterface
10907>>>        End
10907>>>>
10907>>>        Function_Return hoID
10908>>>    End_Function
10909>>>    
10909>>>    // create an XML Node object based on the interface type.
10909>>>    // this will convert the interface to the proper type and will create
10909>>>    // an appropriate DF object.
10909>>>    // This requires that a DocumentObject exists
10909>>>    
10909>>>    Function CreateXMLNode Handle hinfc Returns Handle
10911>>>        Integer iType iClassId
10911>>>        Handle  hoDocument hoNode
10911>>>        // Get the node type of the infc handle w/o creating a DF object
10911>>>        Move (invokexml(DF_IXMLDOMNODE, GET_piNodeType, hinfc, 0, 0, 0, 0)) to iType
10912>>>        Move (invokexml(DF_IXMLDOMNODE, GET_ChangeNodeType, hinfc, iType, 1, 0, 0)) to hInfc
10913>>>        If (hinfc=0) Begin
10915>>>            // this should not happen and we would need to know about this.
10915>>>            Error DFERR_XML_INTERNAL_ERROR (C_$XmlFailedNoDocObject + String(iType))
10916>>>>
10916>>>            Function_Return 0
10917>>>        End
10917>>>>
10917>>>        Get DocumentObject to hoDocument
10918>>>        // you can augment your class IDs in a single place.
10918>>>        Get NodeClassId of hoDocument iType to iClassId
10919>>>        Get CreateXMLObject of hoDocument iClassId hinfc to hoNode
10920>>>        
10920>>>        Function_Return hoNode
10921>>>    End_Function
10922>>>    
10922>>>    
10922>>>    // Change object's class. This let's you change the class id of an object
10922>>>    // on an object by object basis. This would let you create nodes (e.g. elements)
10922>>>    // that have a custom interface for each node type. Normally, this would be sent
10922>>>    // after a node has been created using one of the default classes
10922>>>    Function ChangeNodeClass Handle hoNode Integer iClassID Returns Handle
10924>>>        Integer iType
10924>>>        Handle  hinfcNew
10924>>>        Get piNodeType of hoNode to iType
10925>>>        Get ChangeNodeType of hoNode iType False to hInfcNew
10926>>>        Send Destroy to hoNode // destroy object and old infc handle.
10927>>>        Get CreateXMLObject iClassId hinfcNew to hoNode
10928>>>        Function_Return hoNode
10929>>>    End_Function
10930>>>    
10930>>>End_Class
10931>>>
10931>>>
10931>>>Class cXMLDOMCollectionMixin is a Mixin
10932>>>    
10932>>>    Import_Class_Protocol cXMLDOMMixin
10933>>>    
10933>>>    //  Returns number of items in the collection
10933>>>    //
10933>>>    Function NodeListLength Returns Integer
10935>>>        Integer iLength
10935>>>        Get piLength to iLength
10936>>>        Function_Return iLength
10937>>>    End_Function
10938>>>    
10938>>>    // Returns an XML node object for pass item
10938>>>    //
10938>>>    Function CollectionNode Integer I Returns Handle
10940>>>        Handle hoNewNode
10940>>>        Handle infcItem
10940>>>        Get phItem i to infcItem
10941>>>        If (infcItem) ;            Get CreateXMLNode infcItem to hoNewNode
10944>>>        Function_Return hoNewNode
10945>>>    End_Function
10946>>>    
10946>>>    
10946>>>End_Class
10947>>>
10947>>>// Simple declarations of collections.
10947>>>
10947>>>Class cXMLDOMNodeList is a BaseXmlDomNodeList
10948>>>    Import_Class_Protocol cXMLDOMCollectionMixin
10949>>>End_Class
10950>>>
10950>>>Class cXMLDOMNamedNodeMap is a BaseXmlDomNamedNodeMap
10951>>>    
10951>>>    Import_Class_Protocol cXMLDOMCollectionMixin
10952>>>    
10952>>>    // returns a node attribute that matches passed name, zero if none
10952>>>    Function NamedNode String sName Returns Handle
10954>>>        Handle hoNewNode
10954>>>        Handle infcItem
10954>>>        Get NamedItem sName to infcItem
10955>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
10958>>>        Function_Return hoNewNode
10959>>>    End_Function
10960>>>    
10960>>>    // Adds or changes a node attribute
10960>>>    // This should return the passed object Id which is now bound to the attribute. If an error, returns 0
10960>>>    Function SetNamedNode Handle hoNode Returns Handle
10962>>>        Handle hinfcNode hinfcItem
10962>>>        Get XMLInterface of hoNode to hinfcNode // node of passed attribute
10963>>>        Get SetNamedItem hinfcNode to hinfcItem
10964>>>        If hinfcItem ;            Set XMLInterface of hoNode to hinfcItem
10967>>>        Else ;            Move 0 to hoNode // zero indicates error
10969>>>        Function_Return hoNode
10970>>>    End_Function
10971>>>    
10971>>>    // removes named attribute, Returns handle of removed node or zero if not found.
10971>>>    // Note that returned object must be disposed of or moved somewhere else.
10971>>>    Function RemoveNamedNode String sName Returns Handle
10973>>>        Handle hoNewNode
10973>>>        Handle infcItem
10973>>>        Get RemoveNamedItem sName to infcItem
10974>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
10977>>>        Function_Return hoNewNode
10978>>>    End_Function
10979>>>    
10979>>>    Function QualifiedNode String sNameSpace String sBaseName Returns Handle
10981>>>        Handle hoNewNode
10981>>>        Handle infcItem
10981>>>        Get QualifiedItem  sBaseName sNameSpace  to infcItem
10982>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
10985>>>        Function_Return hoNewNode
10986>>>    End_Function
10987>>>    
10987>>>    Function RemoveQualifiedNode String sNameSpace String sBaseName Returns Handle
10989>>>        Handle hoNewNode
10989>>>        Handle infcItem
10989>>>        Get RemoveQualifiedItem sBaseName sNameSpace to infcItem
10990>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
10993>>>        Function_Return hoNewNode
10994>>>    End_Function
10995>>>    
10995>>>End_Class
10996>>>
10996>>>
10996>>>
10996>>>// Mixin for nodes.
10996>>>//
10996>>>//  First the declaration of functions that have no object references.
10996>>>//
10996>>>
10996>>>
10996>>>Class cXMLDOMNodeMixin is a Mixin
10997>>>    
10997>>>    Import_Class_Protocol cXMLDOMMixin
10998>>>    
10998>>>    //  Append Node to the end of list. Returns passed Object handle if Ok, 0 if error
10998>>>    
10998>>>    Function AppendNode Handle hoNode Returns Handle
11000>>>        Handle hinfcNode
11000>>>        Handle infcReturned
11000>>>        // Get COM Interface to call Append child.
11000>>>        Get XMLInterface of hoNode to hinfcNode
11001>>>        If (hinfcNode=0) ;            Function_Return 0
11004>>>        Get AppendChild hinfcNode to infcReturned
11005>>>        // Interface returned is stored in DataFlex object.
11005>>>        If (infcReturned=0) ;            Function_Return 0
11008>>>        Set XMLInterface of hoNode to infcReturned
11009>>>        Function_Return hoNode
11010>>>    End_Function
11011>>>    
11011>>>    //  Insert NewNode before Node. Returns passed newnode Object handle if Ok, 0 if error
11011>>>    
11011>>>    Function InsertBeforeNode Handle hoNewNode Handle hoNode Returns Handle
11013>>>        Handle hinfcNewNode hinfcNode hoRefNode infcReturned
11013>>>        Integer iType
11013>>>        // DOM says if no refnode argument passed or it is 0, append to end
11013>>>        If (Num_Arguments=1) ;            Move 0 to hoRefNode
11016>>>        Else ;            Move hoNode to hoRefNode
11018>>>        Get XMLInterface of hoNewNode to hinfcNewNode
11019>>>        If (hinfcNewNode=0) ;            Function_Return 0
11022>>>        If hoRefNode Begin
11024>>>            Get XMLInterface of hoRefNode to hinfcNode
11025>>>            If (hinfcNode=0) ;                Function_Return 0
11028>>>        End
11028>>>>
11028>>>        Get InsertBefore hinfcNewNode hinfcNode to infcReturned
11029>>>        If (infcReturned=0) ;            Function_Return 0
11032>>>        // Interface returned is stored in DataFlex object.
11032>>>        Set XMLInterface of hoNewNode to infcReturned
11033>>>        Function_Return hoNewNode
11034>>>    End_Function
11035>>>    
11035>>>    //  Remove Node. Returns object Id of removed node, zero if error
11035>>>    //  Important: The node is not destroyed! This lets you move it elsewhere if you want
11035>>>    
11035>>>    Function RemoveNode Handle hoNode Returns Handle
11037>>>        Handle hInfcNode
11037>>>        Get XMLInterface of hoNode to hInfcNode
11038>>>        If (hinfcNode=0) ;            Function_Return 0
11041>>>        Get RemoveChild hInfcNode to hinfcNode
11042>>>        If (hinfcNode=0) ;            Function_Return 0
11045>>>        Set XMLInterface of hoNode to hinfcNode
11046>>>        Function_Return hoNode
11047>>>    End_Function
11048>>>    
11048>>>    //  Replace Node. Returns object Id of replaced node, zero if error
11048>>>    //  Important: The replaced node is not destroyed! This lets you move it elsewhere if you want
11048>>>    
11048>>>    Function ReplaceNode Handle hoNewNode Handle hoNodeToReplace Returns Handle
11050>>>        Handle hInfcNewNode hinfcNodetoReplace hinfcNode
11050>>>        Get XMLInterface of hoNewNode       to hInfcNewNode
11051>>>        Get XMLInterface of hoNodetoReplace to hInfcNodetoreplace
11052>>>        If (hinfcNewNode=0 or hInfcNodeToReplace=0) ;            Function_Return 0
11055>>>        Get ReplaceChild hInfcNewNode hinfcNodeToReplace to hinfcNode
11056>>>        If (hinfcNode=0) ;            Function_Return 0
11059>>>        Set XMLInterface of hoNodetoReplace to hinfcNode
11060>>>        Function_Return hoNodetoReplace
11061>>>    End_Function
11062>>>    
11062>>>    // Remove the named node. Returns handle to removed node. You must destroy
11062>>>    // or move this removed object as needed
11062>>>    
11062>>>    Function RemoveNamedNode String sQueryString Returns Handle
11064>>>        Handle hoNode
11064>>>        Handle hInfcTemplate hinfcNode
11064>>>        Integer iRet
11064>>>        Get SelectSingleNode sQueryString to hinfcTemplate
11065>>>        If (hinfcTemplate) Begin
11067>>>            // Remove child returns an interface to the disassociated node.
11067>>>            // It should be disposed by setting it to an object and then calling destroy
11067>>>            Get RemoveChild hInfcTemplate to hInfcNode
11068>>>            // Even if hInfcTemplate and hInfcNode are the same their reference count will be incremented.
11068>>>            // Therefore we must destroy one the interfaces which will decrement the reference count thus
11068>>>            // avoding a memory leak
11068>>>            Move (invokexml(DF_IXMLDOMNODE, DESTROY_XML_INTERFACE, hInfcTemplate, 0, 0, 0, 0)) to iRet
11069>>>            If hInfcNode ;                Get CreateXMLNode hinfcNode to hoNode
11072>>>        End
11072>>>>
11072>>>        Function_Return hoNode
11073>>>    End_Function
11074>>>    
11074>>>    // This function creates a clone of the passed Node. if bRecurse all child nodes are also
11074>>>    // cloned. The object Id of the new clone object is returned.
11074>>>    // The interface of the object returned can be used in AppendChild to add
11074>>>    // the node to the XML Document.
11074>>>    
11074>>>    Function CloneNode Integer bRecurse Returns Handle
11076>>>        Handle hoNewNode
11076>>>        Handle hinfcNewNode
11076>>>        Get CloneInfcNode (If(bRecurse,-1,0)) to hinfcNewNode
11077>>>        If hinfcNewNode ;            Get CreateXMLNode hinfcNewNode to hoNewNode
11080>>>        Function_Return hoNewNode
11081>>>    End_Function
11082>>>    
11082>>>    //  Create a collection of all nodes. returns handle of a cXMLDomNodeList
11082>>>    
11082>>>    Function ChildNodes Returns Handle
11084>>>        Handle infcNodeList
11084>>>        Handle hoNodeList
11084>>>        Get phChildNodes to infcNodeList
11085>>>        If (infcNodeList) ;            Get CreateXMLObject U_cXMLDOMNodeList infcNodeList to hoNodeList
11088>>>        Function_Return hoNodeList
11089>>>    End_Function
11090>>>    
11090>>>    //  Create a collection of all attributes. returns handle of a cXMLDomNodeMapList
11090>>>    
11090>>>    Function AttributeNodes Returns Handle
11092>>>        Handle hoCollectionId   // Object to hold collection
11092>>>        Handle hinfcAttributes  // XML Interface for collection
11092>>>        Get phAttributes to hinfcAttributes
11093>>>        If (hinfcAttributes) ;            Get CreateXMLObject U_cXMLDOMNamedNodeMap hinfcAttributes to hoCollectionId
11096>>>        Function_Return hoCollectionId
11097>>>    End_Function
11098>>>    
11098>>>    //  Create a collection of all attributes for the temporary attribute node object.
11098>>>    //  Using this saves a small amount of time creating and destroying this object but
11098>>>    //  it must be used with care. This binding is temporary!
11098>>>    Function TempAttributeNodes Returns Handle
11100>>>        Handle hoCollectionId hoDocument
11100>>>        Handle hinfcAttributes  // XML Interface for collection
11100>>>        Get phAttributes to hinfcAttributes
11101>>>        If (hinfcAttributes) Begin
11103>>>            Get DocumentObject to hoDocument
11104>>>            Get phoTempDomNodeMap of hoDocument to hoCollectionId
11105>>>            Set XMLInterface of hoCollectionId to hinfcAttributes
11106>>>        End
11106>>>>
11106>>>        Function_Return hoCollectionId
11107>>>    End_Function
11108>>>    
11108>>>    
11108>>>    // Returns a collection of just elements
11108>>>    
11108>>>    Function ElementNodes String sQueryString Returns Handle
11110>>>        Handle hoNodeList
11110>>>        Handle hinfcNodeList
11110>>>        Get ElementsByTagName sQueryString to hinfcNodeList
11111>>>        If (hinfcNodeList <> 0) ;            Get CreateXMLObject U_cXMLDOMNodeList hinfcNodeList to hoNodeList
11114>>>        Function_Return hoNodeList
11115>>>    End_Function
11116>>>    
11116>>>    
11116>>>    
11116>>>    // Return object handle for query.
11116>>>    
11116>>>    Function FindNode String sQueryString Returns Handle
11118>>>        Handle hoNode
11118>>>        Handle hinfcNode
11118>>>        Get SelectSingleNode sQueryString to hinfcNode
11119>>>        If (hinfcNode <> 0) ;            Get CreateXMLNode hInfcNode to hoNode
11122>>>        Function_Return hoNode
11123>>>    End_Function
11124>>>    
11124>>>    // Return object handle for a collection node.
11124>>>    
11124>>>    
11124>>>    Function FindNodeList String sQueryString Returns Handle
11126>>>        Handle hoNodeList
11126>>>        Handle hinfcNodeList
11126>>>        Get SelectNodes sQueryString to hinfcNodeList
11127>>>        If (hinfcNodeList <> 0) ;            Get CreateXMLObject U_cXMLDOMNodeList hinfcNodeList to hoNodeList
11130>>>        Function_Return hoNodeList
11131>>>    End_Function
11132>>>    
11132>>>    // The CreatexxxxxNode messages creates an node object for the type specified. Both
11132>>>    // the interface and the object or of the correct type (i.e. element, comment)
11132>>>    // These all return an object handle which can be used to place the object via
11132>>>    // appendNode or InsertBeforeNode
11132>>>    
11132>>>    // This function creates a child element, returning a dataflex object.
11132>>>    // The interface of the object returned can be used in AppendChild to add
11132>>>    // the element to the XML Document.
11132>>>    
11132>>>    Function CreateElementNode String sTagName String sValue Returns Handle
11134>>>        Handle hoNewElement
11134>>>        Handle hoDocumentObject
11134>>>        Handle infcNewElement
11134>>>        Integer iClassId
11134>>>        // The DataFlex objects are created inside the nodes (elements).
11134>>>        // Create an element in the document and assign its interface to the new DF object.
11134>>>        Get DocumentObject to hoDocumentObject
11135>>>        Get createElement of hoDocumentObject sTagName to infcNewElement
11136>>>        If infcNewElement Begin // if there was an error, no infc handle would be returned
11138>>>            Get NodeClassId of hoDocumentObject NODE_ELEMENT to iClassId
11139>>>            Get CreateXMLObject iClassId infcNewElement to hoNewElement
11140>>>            If hoNewElement ; // very unlikely this will be zero                Set psText of hoNewElement to sValue
11143>>>        End
11143>>>>
11143>>>        Function_Return hoNewElement
11144>>>    End_Function
11145>>>    
11145>>>    // This function creates an attribute in a document. Attributes are _NOT_ children of an element.
11145>>>    // A DataFlex object is returned. An attribute can be added to an xml document using
11145>>>    // get AddAttributeNode.
11145>>>    
11145>>>    Function CreateAttributeNode String sName String sValue Returns Handle
11147>>>        Handle hoNewAttribute
11147>>>        Handle hoDocumentObject
11147>>>        Handle infcNewAttribute
11147>>>        Integer iClassId
11147>>>        Get DocumentObject to hoDocumentObject
11148>>>        // Create an Attribute in the document and assign its interface to the new DF object.
11148>>>        Get createAttribute of hoDocumentObject sName to infcNewAttribute
11149>>>        If infcNewAttribute Begin // if there was an error, no infc handle would be returned
11151>>>            Get NodeClassId of hoDocumentObject NODE_ATTRIBUTE to iClassId
11152>>>            Get CreateXMLObject iClassId infcNewAttribute to hoNewAttribute
11153>>>            // Set the value of the attribute.
11153>>>            If hoNewAttribute ; // very unlikely this will be 0                Set psText of hoNewAttribute to sValue
11156>>>        End
11156>>>>
11156>>>        Function_Return hoNewAttribute
11157>>>    End_Function
11158>>>    
11158>>>    // This function creates a child comment, returning a dataflex object.
11158>>>    // The interface of the object returned can be used in AppendChild to add
11158>>>    // the comment to the XML Document.
11158>>>    
11158>>>    Function CreateChildComment String sValue Returns Handle
11160>>>        Handle hoNewComment
11160>>>        Handle hoDocumentObject
11160>>>        Handle infcNewComment
11160>>>        Integer iClassID
11160>>>        Get DocumentObject to hoDocumentObject
11161>>>        // Create an Comment in the document and assign its interface to the new DF object.
11161>>>        Get createComment of hoDocumentObject sValue to infcNewComment
11162>>>        If infcNewComment Begin // if there was an error, no infc handle would be returned
11164>>>            Get NodeClassId of hoDocumentObject NODE_COMMENT to iClassId
11165>>>            Get CreateXMLObject iClassId infcNewComment to hoNewComment
11166>>>            If hoNewComment ; // very unlikely this will be 0                Set psText of hoNewComment to sValue
11169>>>        End
11169>>>>
11169>>>        Function_Return hoNewComment
11170>>>    End_Function
11171>>>    
11171>>>    // This function creates a child processing instruction, returning a dataflex object.
11171>>>    // The interface of the object returned can be used in AppendChild to add
11171>>>    // the processing instruction to the XML Document.
11171>>>    
11171>>>    Function CreateChildProcessingInstruction String sTarget String sValue Returns Handle
11173>>>        Handle hoNewProcessingInstruction
11173>>>        Handle hoDocumentObject
11173>>>        Handle infcNewProcessingInstruction
11173>>>        Integer iClassID
11173>>>        Get DocumentObject to hoDocumentObject
11174>>>        // Create an ProcessingInstruction in the document and assign its interface to the new DF object.
11174>>>        Get createProcessingInstruction of hoDocumentObject sTarget sValue to infcNewProcessingInstruction
11175>>>        If infcNewProcessingInstruction  Begin // if there was an error, no infc handle would be returned
11177>>>            Get NodeClassId of hoDocumentObject NODE_PROCESSING_INSTRUCTION to iClassId
11178>>>            Get CreateXMLObject iClassID infcNewProcessingInstruction to hoNewProcessingInstruction
11179>>>        End
11179>>>>
11179>>>        Function_Return hoNewProcessingInstruction
11180>>>    End_Function
11181>>>    
11181>>>    // This function creates a child text node, returning a dataflex object.
11181>>>    // The interface of the object returned can be used in AppendChild to add
11181>>>    // the text node to the XML Document.
11181>>>    
11181>>>    Function CreateChildTextNode String sValue Returns Handle
11183>>>        Handle hoNewTextNode
11183>>>        Handle hoDocumentObject
11183>>>        Handle infcNewTextNode
11183>>>        Integer iClassID
11183>>>        Get DocumentObject to hoDocumentObject
11184>>>        // Create an TextNode in the document and assign its interface to the new DF object.
11184>>>        Get createTextNode of hoDocumentObject sValue to infcNewTextNode
11185>>>        If infcNewTextNode Begin // if there was an error, no infc handle would be returned
11187>>>            Get NodeClassId of hoDocumentObject NODE_TEXT to iClassId
11188>>>            Get CreateXMLObject iClassId infcNewTextNode to hoNewTextNode
11189>>>        End
11189>>>>
11189>>>        Function_Return hoNewTextNode
11190>>>    End_Function
11191>>>    
11191>>>    // This function creates a cdata text node, returning a dataflex object.
11191>>>    // The interface of the object returned can be used in AppendChild to add
11191>>>    // the cdata node to the XML Document.
11191>>>    
11191>>>    Function CreateCDATASectionNode String sValue Returns Handle
11193>>>        Handle hoNewNode
11193>>>        Handle hoDocumentObject
11193>>>        Handle infcNewNode
11193>>>        Integer iClassId
11193>>>        // The DataFlex objects are created inside the nodes (elements).
11193>>>        // Create an element in the document and assign its interface to the new DF object.
11193>>>        Get DocumentObject to hoDocumentObject
11194>>>        Get createCDATASection of hoDocumentObject sValue to infcNewNode
11195>>>        If infcNewNode Begin
11197>>>            Get NodeClassId of hoDocumentObject NODE_CDATA_SECTION to iClassId
11198>>>            Get CreateXMLObject iClassId infcNewNode to hoNewNode
11199>>>        End
11199>>>>
11199>>>        Function_Return hoNewNode
11200>>>    End_Function
11201>>>    
11201>>>    // Create a document fragment.  Document fragments can be used to house nodes temporarily. When
11201>>>    // You append or insert a document fragment (appendNode InsertBeforeNode) child nodes are appended
11201>>>    // to the destination object and not the fragment node itself. This is useful!
11201>>>    
11201>>>    Function CreateDocumentFragmentNode Returns Handle
11203>>>        Handle hoNew
11203>>>        Handle hoDocumentObject
11203>>>        Handle infcNew
11203>>>        Integer iClassID
11203>>>        Get DocumentObject to hoDocumentObject
11204>>>        // Create an Comment in the document and assign its interface to the new DF object.
11204>>>        Get createDocumentFragment of hoDocumentObject to infcNew
11205>>>        If infcNew Begin // if there was an error, no infc handle would be returned
11207>>>            Get NodeClassId of hoDocumentObject NODE_DOCUMENT_FRAGMENT to iClassId
11208>>>            Get CreateXMLObject iClassId infcNew to hoNew
11209>>>        End
11209>>>>
11209>>>        Function_Return hoNew
11210>>>    End_Function
11211>>>    
11211>>>    //  Create a Node of any passed Type (e.g. Node_element). Normally you don't need this as there are
11211>>>    //  specific messages to do this for each node type. Node that this lets you pass namespaces as a separate
11211>>>    //  parameter. With all of the other messages (e.g. createElementNode) you pass namespaces as prefixed to
11211>>>    // the tagname (e.g. Get CreateElementNode "MyNameSpace:MyTag" "MyValue" to hoEle)
11211>>>    
11211>>>    Function CreateChildNode Integer iNodeType String sTagName String sNameSpace Returns Handle
11213>>>        Handle hoNewNode hoDocumentObject
11213>>>        Handle infcNewNode
11213>>>        Integer iClassid iType
11213>>>        Get DocumentObject to hoDocumentObject
11214>>>        Get NodeClassId iNodeType to iClassId
11215>>>        If (iClassId<>0) Begin
11217>>>            // Create a node in the document and assign its interface to the new DF object.
11217>>>            Get createNode of hoDocumentObject iNodeType sTagName sNameSpace to infcNewNode
11218>>>            // this is required to force the interface type to be correct.
11218>>>            Move (invokexml(DF_IXMLDOMNODE, GET_piNodeType, infcNewNode, 0, 0, 0, 0)) to iType
11219>>>            Move (invokexml(DF_IXMLDOMNODE, GET_ChangeNodeType, infcNewNode, iType, 1, 0, 0)) to infcNewNode
11220>>>            
11220>>>            If infcNewNode ;                Get CreateXMLObject iClassId infcNewNode to hoNewNode
11223>>>        End
11223>>>>
11223>>>        Function_Return hoNewNode
11224>>>    End_Function
11225>>>    
11225>>>    
11225>>>    
11225>>>    // The Addxxxxx messages create a new node and appends it to the list. When used as a function,
11225>>>    // the object handle is returned and must be disposed of later by the programmer.
11225>>>    // When used as a procedure, the object is destroyed--it just does it and is done.
11225>>>    
11225>>>    Function AddElement String sTagName String sValue Returns Handle
11227>>>        Handle hoNewElement
11227>>>        Get CreateElementNode sTagName sValue to hoNewElement
11228>>>        If hoNewElement ;            Get AppendNode hoNewElement to hoNewElement
11231>>>        Function_Return hoNewElement
11232>>>    End_Function
11233>>>    
11233>>>    Procedure AddElement String sTagName String sValue
11235>>>        Handle hoNewElement
11235>>>        Get AddElement sTagName sValue to hoNewElement
11236>>>        If hoNewElement ;            Send Destroy to hoNewElement
11239>>>        Else ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddElement"))
11241>>>    End_Procedure
11242>>>    
11242>>>    // this returns the object, This is often needed
11242>>>    Function CreateElementNodeNS String sNameSpace String sTagName String sValue Returns Handle
11244>>>        Handle hoNewElement
11244>>>        Get CreateChildNode NODE_ELEMENT sTagName sNameSpace to hoNewElement
11245>>>        If (hoNewElement and sValue<>"") ;            Set psText of hoNewElement to sValue
11248>>>        Function_Return hoNewElement
11249>>>    End_Function
11250>>>    
11250>>>    
11250>>>    // this returns the object, This is often needed
11250>>>    Function AddElementNS String sNameSpace String sTagName String sValue Returns Handle
11252>>>        Handle hoNewElement
11252>>>        Get CreateElementNodeNS sNameSpace sTagName sValue to hoNewElement
11253>>>        If hoNewElement Begin
11255>>>            Get AppendNode hoNewElement to hoNewElement
11256>>>        End
11256>>>>
11256>>>        Function_Return hoNewElement
11257>>>    End_Function
11258>>>    
11258>>>    Procedure AddElementNS String sNameSpace String sTagName String sValue
11260>>>        Handle hoNewElement
11260>>>        Get AddElementNS sNameSpace sTagName sValue to hoNewElement
11261>>>        If hoNewElement ;            Send Destroy to hoNewElement
11264>>>        Else ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddElementNS"))
11266>>>    End_Procedure
11267>>>    
11267>>>    Function AddAttributeNode Handle hoNode Returns Handle
11269>>>        Handle hInfc
11269>>>        Get Set_AttributeNode (XmlInterface(hoNode)) to hInfc
11270>>>        If hInfc ; // if ret value we have a replacement            Set XmlInterface of hoNode to hInfc
11273>>>        Function_Return hoNode
11274>>>    End_Function
11275>>>    
11275>>>    Function AttributeValueNode String sName Returns Handle
11277>>>        Handle hInfc
11277>>>        Handle hoNode
11277>>>        Get AttributeNode sName to hInfc
11278>>>        If hInfc ; // if ret value we have a replacement            Get CreateXMLNode hInfc to hoNode
11281>>>        Function_Return hoNode
11282>>>    End_Function
11283>>>    
11283>>>    Function AttributeValueNodeNS String sNameSpace String sBaseName Returns Handle
11285>>>        Handle hoAttrs hoAttr
11285>>>        String sValue
11285>>>        Get TempAttributeNodes to hoAttrs
11286>>>        If hoAttrs Begin
11288>>>            Get QualifiedNode of hoAttrs sNamespace sBaseName to hoAttr
11289>>>            Set XMLInterface of hoAttrs to 0
11290>>>        End
11290>>>>
11290>>>        Function_Return hoAttr
11291>>>    End_Function
11292>>>    
11292>>>    
11292>>>    Function CreateAttributeNodeNS String sNameSpace String sName String sValue Returns Handle
11294>>>        Handle hoNewAttribute
11294>>>        Get CreateChildNode NODE_ATTRIBUTE sName sNameSpace to hoNewAttribute
11295>>>        If hoNewAttribute ;            Set psText of hoNewAttribute to sValue
11298>>>        Function_Return hoNewAttribute
11299>>>    End_Function
11300>>>    
11300>>>    Procedure AddAttributeNS String sNameSpace String sName String sValue
11302>>>        Handle hoNode
11302>>>        Get CreateAttributeNodeNS sNameSpace sName sValue to hoNode
11303>>>        If hoNode Begin
11305>>>            Get AddAttributeNode hoNode to hoNode
11306>>>            If hoNode ;                Send Destroy of hoNode
11309>>>        End
11309>>>>
11309>>>        Else ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddAttributeNS"))
11311>>>    End_Procedure
11312>>>    
11312>>>    
11312>>>    // This function encapsulates creation and addition of attributes to a node.
11312>>>    // should only work with element class
11312>>>    Procedure AddAttribute String sName String sValue
11314>>>        Set AttributeValue sName to sValue
11315>>>    End_Procedure
11316>>>    
11316>>>    // This function encapsulates creation and addition of comments to a node.
11316>>>    // The return value is a Boolean that is currently unused.
11316>>>    
11316>>>    Procedure AddChildComment String sValue
11318>>>        Handle hoNewNode
11318>>>        Get createChildComment sValue to hoNewNode
11319>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddChildComment"))
11322>>>        Else Begin
11323>>>            Get AppendNode hoNewNode to hoNewNode
11324>>>            Send Destroy to hoNewNode
11325>>>        End
11325>>>>
11325>>>    End_Procedure
11326>>>    
11326>>>    // This function encapsulates creation and addition of processing instructions to a node.
11326>>>    // The return value is a Boolean that is currently unused.
11326>>>    
11326>>>    Procedure AddChildProcessingInstruction String sTarget String sValue
11328>>>        Handle hoNewNode
11328>>>        Get createChildProcessingInstruction sTarget sValue to hoNewNode
11329>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddChildProcessingInstruction"))
11332>>>        Else Begin
11333>>>            Get AppendNode hoNewNode to hoNewNode
11334>>>            Send Destroy to hoNewNode
11335>>>        End
11335>>>>
11335>>>    End_Procedure
11336>>>    
11336>>>    
11336>>>    // This function encapsulates creation and addition of text nodes to a node.
11336>>>    // The return value is a Boolean that is currently unused.
11336>>>    
11336>>>    Procedure AddChildTextNode String sValue
11338>>>        Handle hoNewNode
11338>>>        Get createChildTextNode sValue to hoNewNode
11339>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddChildTextNode"))
11342>>>        Else Begin
11343>>>            Get AppendNode hoNewNode to hoNewNode
11344>>>            Send Destroy to hoNewNode
11345>>>        End
11345>>>>
11345>>>    End_Procedure
11346>>>    
11346>>>    // This procedure encapsulates creation and addition of cdata text nodes to a node.
11346>>>    Procedure AddCDataSection String sValue
11348>>>        Handle hoNewNode
11348>>>        Get CreateCDATASectionNode sValue to hoNewNode
11349>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddCDataSection"))
11352>>>        Else Begin
11353>>>            Get AppendNode hoNewNode to hoNewNode
11354>>>            Send Destroy to hoNewNode
11355>>>        End
11355>>>>
11355>>>    End_Procedure
11356>>>    
11356>>>    
11356>>>    Function AddChildNode Integer iNodeType String sTagName String sNameSpace Returns Handle
11358>>>        Handle hoNewNode
11358>>>        Handle hoDocumentObject
11358>>>        Get DocumentObject to hoDocumentObject
11359>>>        Get createChildNode of hoDocumentObject iNodeType sTagName sNamespace to hoNewNode
11360>>>        If hoNewNode ;            Get AppendNode hoNewNode to hoNewNode
11363>>>        Function_Return hoNewNode
11364>>>    End_Function
11365>>>    
11365>>>    // don't use the runtime/msxml version of this. Instead just return the
11365>>>    // first text from the first child node. This is much faster
11365>>>    Function psText Returns String
11367>>>        Handle hText
11367>>>        String sValue
11367>>>        Get phFirstChild to hText
11368>>>        Get InfcNodeValue hText to sValue
11369>>>        Function_Return sValue
11370>>>    End_Function
11371>>>    
11371>>>    // Use this to call the internal Text property. This returns all text for all child
11371>>>    // node. You rarely would want to do this. The is uses the msxml psText which can
11371>>>    // get slow with very large files. If for some reason you need all of the child node's
11371>>>    // text and the file is large, you might want to consider doing this process manually.
11371>>>    Function AllChildNodesText Returns String
11373>>>        String sValue
11373>>>        Forward Get psText to sValue
11375>>>        Function_Return sValue
11376>>>    End_Function
11377>>>    
11377>>>    // return the interface NodeValue without having to create a
11377>>>    // new object. This also disposes the hInfc interface
11377>>>    Function InfcNodeValue Handle hInfc Returns String
11379>>>        Handle hoDocument hoTempNode
11379>>>        String sValue
11379>>>        If (hinfc) Begin
11381>>>            Get DocumentObject to hoDocument
11382>>>            Get phoTempDomNode of hoDocument to hoTempNode
11383>>>            Set XMLInterface of hoTempNode to hInfc
11384>>>            Get psNodeValue of hoTempNode to sValue
11385>>>            // This disposes of hInfc which was passed in. After
11385>>>            // calling this you can no longer use it (which is good).
11385>>>            Set XMLInterface of hoTempNode to 0
11386>>>        End
11386>>>>
11386>>>        Function_Return sValue
11387>>>    End_Function
11388>>>    
11388>>>    // ChildNodeValue is used to get the "value" of an element. This is useful when the element
11388>>>    // only has a single value (similar to an attribute).
11388>>>    
11388>>>    Function ChildNodeValue String sTagName Returns String
11390>>>        Handle hoTempNode hoDocument
11390>>>        Handle hinfcTempNode
11390>>>        String sRetVal
11390>>>        Get SelectSingleNode sTagName to hinfcTempNode
11391>>>        If (hinfcTempNode <> 0) Begin
11393>>>            Get DocumentObject to hoDocument
11394>>>            Get phoTempDomNode of hoDocument to hoTempNode
11395>>>            Set XMLInterface of hoTempNode to hinfcTempNode
11396>>>            Get phFirstChild of hoTempNode to hinfcTempNode
11397>>>            Set XMLInterface of hoTempNode to 0
11398>>>            If hinfcTempNode Begin
11400>>>                Get InfcNodeValue hinfcTempNode to sRetVal
11401>>>            End
11401>>>>
11401>>>        End
11401>>>>
11401>>>        Function_Return sRetVal
11402>>>    End_Function
11403>>>    
11403>>>    // This simple function allows a parent to change the text of one of its elements.
11403>>>    // This actually occurs quite a bit, because (as stated above) lowest level
11403>>>    // elements are frequently used as properties.
11403>>>    //
11403>>>    Procedure SetChildNodeValue String sTagName String sValue
11405>>>        Handle hoTempNode
11405>>>        Handle hinfcTempNode
11405>>>        // Search for the node that matches.
11405>>>        Get SelectSingleNode sTagName to hinfcTempNode
11406>>>        // If no match is found, add a new element with the tag.
11406>>>        If (hinfcTempNode = 0) ;            Send AddElement sTagName sValue
11409>>>        Else Begin
11410>>>            Get CreateXMLObject U_BaseXMLDOMNode hinfcTempNode to hoTempNode
11411>>>            If hoTempNode Begin
11413>>>                // Set the text of the element.
11413>>>                Set psText of hoTempNode to sValue
11414>>>                Send Destroy to hoTempNode
11415>>>            End
11415>>>>
11415>>>            Else ;                Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_SetChildNodeValue"))
11417>>>        End
11417>>>>
11417>>>    End_Procedure
11418>>>    
11418>>>    // These messages are used to allow you to travese through a nodes.
11418>>>    
11418>>>    Function FirstChild Returns Handle
11420>>>        Handle hoChild
11420>>>        Handle hinfcChild
11420>>>        Get phFirstChild  to hinfcChild
11421>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
11424>>>        Function_Return hoChild
11425>>>    End_Function
11426>>>    
11426>>>    Function NextSibling Returns Handle
11428>>>        Handle hoChild
11428>>>        Handle hinfcChild
11428>>>        Get phNextSibling  to hinfcChild
11429>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
11432>>>        Function_Return hoChild
11433>>>    End_Function
11434>>>    
11434>>>    Function PreviousSibling Returns Handle
11436>>>        Handle hoChild
11436>>>        Handle hinfcChild
11436>>>        Get phPreviousSibling  to hinfcChild
11437>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
11440>>>        Function_Return hoChild
11441>>>    End_Function
11442>>>    
11442>>>    Function LastChild Returns Handle
11444>>>        Handle hoChild
11444>>>        Handle hinfcChild
11444>>>        Get phLastChild  to hinfcChild
11445>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
11448>>>        Function_Return hoChild
11449>>>    End_Function
11450>>>    
11450>>>    // return an object that is the parent of the current node
11450>>>    Function ParentNode Returns Handle
11452>>>        Handle hoId
11452>>>        Handle hinfcXMLInterface
11452>>>        Get phParentNode to hinfcXMLInterface
11453>>>        If (hinfcXMLInterface) ;            Get CreateXmlNode hinfcXMLInterface to hoID
11456>>>        Function_Return hoID
11457>>>    End_Function
11458>>>    
11458>>>    // Same as NextSibling except it uses or destroys the current node
11458>>>    //
11458>>>    // optimized version does not destroy/create object unless it needs to.
11458>>>    // if the next node is the same node type we will resuse this object
11458>>>    // else this object is destroyed
11458>>>    Function NextNode Returns Handle
11460>>>        Handle hoNode hoDocument
11460>>>        Handle hInfc
11460>>>        Get phNextSibling to hInfc
11461>>>        If hInfc Begin
11463>>>            Get DocumentObject to hoDocument
11464>>>            Move Self to hoNode
11465>>>            Send BindXMLInfc of hoDocument hInfc (&hoNode)
11466>>>        End
11466>>>>
11466>>>        Else Begin
11467>>>            Send Destroy
11468>>>            Move 0 to hoNode
11469>>>        End
11469>>>>
11469>>>        Function_Return hoNode
11470>>>    End_Function
11471>>>    
11471>>>    
11471>>>    // Enumerate through all nodes.
11471>>>    
11471>>>    Procedure EnumerateNodes Integer iMsg Handle hoReceiver String sVal1 String sVal2
11473>>>        Integer i iLen
11473>>>        Handle hoNode
11473>>>        Handle hoNodeCollection
11473>>>        Get ChildNodes to hoNodeCollection
11474>>>        If (hoNodeCollection <> 0) Begin
11476>>>            Get NodeListLength of hoNodeCollection to iLen
11477>>>            Decrement iLen
11478>>>            For i from 0 to iLen
11484>>>>
11484>>>                // For each record, process its fields.
11484>>>                Get CollectionNode of hoNodeCollection i to hoNode
11485>>>                Send iMsg of hoReceiver hoNode sVal1 sVal2
11486>>>                Send Destroy of hoNode
11487>>>            Loop
11488>>>>
11488>>>            Send Destroy of hoNodeCollection
11489>>>        End
11489>>>>
11489>>>    End_Procedure
11490>>>    
11490>>>    // Enumerate through all elements.
11490>>>    
11490>>>    Procedure EnumerateElements Integer iMsg Handle hoReceiver String sVal1 String sVal2
11492>>>        Integer i iLen
11492>>>        Handle hoNode
11492>>>        Handle hoNodeCollection
11492>>>        Get ChildNodes to hoNodeCollection
11493>>>        If (hoNodeCollection <> 0) Begin
11495>>>            Get NodeListLength of hoNodeCollection to iLen
11496>>>            Decrement iLen
11497>>>            For i from 0 to iLen
11503>>>>
11503>>>                // For each record, process its fields.
11503>>>                Get CollectionNode of hoNodeCollection i to hoNode
11504>>>                If (piNodeType(hoNode)=NODE_ELEMENT) ;                    Send iMsg of hoReceiver hoNode sVal1 sVal2
11507>>>                Send Destroy of hoNode
11508>>>            Loop
11509>>>>
11509>>>            Send Destroy of hoNodeCollection
11510>>>        End
11510>>>>
11510>>>    End_Procedure
11511>>>    
11511>>>    
11511>>>    // enumerate through all attributes. There is no recurse here because attributes will not
11511>>>    // contain attributes.
11511>>>    
11511>>>    Procedure EnumerateAttributes Integer iMsg Handle hoReceiver String sSomeValue
11513>>>        Integer i iLen
11513>>>        Handle hoNode
11513>>>        Handle hoNodeMapCollection
11513>>>        // we don't use tempattributenodes because we don't know what the enum message will do.
11513>>>        Get AttributeNodes to hoNodeMapCollection
11514>>>        If (hoNodeMapCollection <> 0) Begin
11516>>>            Get NodeListLength of hoNodeMapCollection to iLen
11517>>>            Decrement iLen
11518>>>            For i from 0 to iLen
11524>>>>
11524>>>                // For each record, process its fields.
11524>>>                Get CollectionNode of hoNodeMapCollection i to hoNode
11525>>>                Send iMsg of hoReceiver hoNode sSomeValue
11526>>>                Send Destroy of hoNode
11527>>>            Loop
11528>>>>
11528>>>            Send Destroy of hoNodeMapCollection
11529>>>        End
11529>>>>
11529>>>    End_Procedure
11530>>>    
11530>>>    
11530>>>    Function XSLTransformation Handle hoXSLDocument Returns String
11532>>>        Handle infcXSLStartAt
11532>>>        String sBuffer
11532>>>        // Transformation is of current object using passed XSLDocument.
11532>>>        Get XMLInterface of hoXSLDocument to infcXSLStartAt
11533>>>        Get TransformNode infcXSLStartAt to sBuffer
11534>>>        Function_Return sBuffer
11535>>>    End_Function
11536>>>    
11536>>>    // This allows for transformations not limited to the size of the string buffer
11536>>>    //
11536>>>    // Note that it is up to the programmer to dispose of the memory allocated at pBuffer
11536>>>    // by using the free(pBuffer) function
11536>>>    //
11536>>>    Function XSLTransformationToAddress Handle hoXSLDocument Returns Pointer
11538>>>        Handle infcXSLStartAt
11538>>>        Pointer pBuffer
11538>>>        // Transformation is of current object using passed XSLDocument.
11538>>>        Get XMLInterface of hoXSLDocument to infcXSLStartAt
11539>>>        Get TransformNodeToAddress infcXSLStartAt to pBuffer
11540>>>        Function_Return pBuffer
11541>>>    End_Function
11542>>>    
11542>>>    
11542>>>    // extract base name from string. e.g.: ns:name --> name
11542>>>    //
11542>>>    Function BaseNameFromQName String sName Returns String
11544>>>        Integer iPos
11544>>>        Move (Pos(":",sName)) to iPos
11545>>>        If iPos Begin
11547>>>            Move (remove(sName,1,iPos)) to sName
11548>>>        End
11548>>>>
11548>>>        Function_Return sName
11549>>>    End_Function
11550>>>    
11550>>>    // extract prefix name from string. e.g.: ns:name --> ns
11550>>>    //
11550>>>    Function PrefixNameFromQName String sName Returns String
11552>>>        String sPreFix
11552>>>        Integer iPos
11552>>>        Move (Pos(":",sName)) to iPos
11553>>>        If iPos Begin
11555>>>            Move (Left(sName,iPos-1)) to sPreFix
11556>>>        End
11556>>>>
11556>>>        Function_Return sPreFix
11557>>>    End_Function
11558>>>    
11558>>>    
11558>>>    // Returns true if node is element and namespace and base name match
11558>>>    //
11558>>>    Function IsElementNS String sNamespaceURI String sBaseName Returns Boolean
11560>>>        Function_Return (piNodeType(Self)=NODE_ELEMENT and ;            psNameSpaceURI(Self)=sNamespaceURI and ;            psBaseName(Self)=sBaseName )
11561>>>    End_Function
11562>>>    
11562>>>    // Returns node of first occurence of child node matching namespace and base name
11562>>>    //
11562>>>    Function ChildElementNS String sNameSpaceURI String sBaseName Returns Handle
11564>>>        Handle hoNode
11564>>>        Get FirstChild to hoNode
11565>>>        While (hoNode and not(IsElementNS(hoNode, sNameSpaceURI, sBaseName)))
11569>>>            Get NextNode of hoNode to hoNode
11570>>>        Loop
11571>>>>
11571>>>        Function_Return hoNode
11572>>>    End_Function
11573>>>    
11573>>>    Function NextElementNS String sNameSpaceURI String sBaseName Returns Handle
11575>>>        Handle hoNode
11575>>>        // NextNode may return the same object or it may destroy the object and
11575>>>        // return nothing or a different object
11575>>>        Get NextNode to hoNode
11576>>>        While (hoNode and not(IsElementNS(hoNode, sNameSpaceURI, sBaseName)))
11580>>>            // use of hoNode is required. This can be different than self
11580>>>            Get NextNode of hoNode to hoNode
11581>>>        Loop
11582>>>>
11582>>>        
11582>>>        Function_Return hoNode
11583>>>    End_Function
11584>>>    
11584>>>    
11584>>>    // Returns value (string) first occurence of child node matching namespace and base name
11584>>>    //
11584>>>    Function ChildElementValueNS String sNameSpaceURI String sBaseName Returns String
11586>>>        Handle hoNext
11586>>>        String sText
11586>>>        Get ChildElementNS sNameSpaceURI sBaseName to hoNext
11587>>>        If hoNext Begin
11589>>>            Get psText of hoNext to sText
11590>>>            Send destroy of hoNext
11591>>>        End
11591>>>>
11591>>>        Function_Return sText
11592>>>    End_Function
11593>>>    
11593>>>    Procedure SetChildElementValueNS String sNameSpaceURI String sBaseName String sValue
11595>>>        Handle hoNode
11595>>>        Handle hinfcTempNode
11595>>>        Get ChildElementNS sNameSpaceURI sBaseName to hoNode
11596>>>        If (hoNode=0) Begin
11598>>>            Send AddElementNS sNameSpaceURI sBaseName sValue
11599>>>        End
11599>>>>
11599>>>        Else Begin
11600>>>            Set psText of hoNode to sValue
11601>>>            Send destroy of hoNode
11602>>>        End
11602>>>>
11602>>>    End_Procedure
11603>>>    
11603>>>    // pass a prefix and try to finds its NameSpaceURI. Start at current node and work up to parent.
11603>>>    // This can be useful when a qualified name is found in an attribute value
11603>>>    //
11603>>>    Function PrefixToNamespaceURI String sPrefix Returns String
11605>>>        Handle hoNode
11605>>>        Integer i iNodes
11605>>>        Handle hoNodes hoParentNode hoAttNode
11605>>>        Boolean bDone bParent
11605>>>        String sAttPrefix sName sNameSpace
11605>>>        
11605>>>        Move Self to hoNode
11606>>>        While not bDone
11610>>>            Get TempAttributeNodes of hoNode to hoNodes
11611>>>            If (hoNodes <> 0) Begin
11613>>>                Get NodeListLength of hoNodes to iNodes
11614>>>                For i from 0 to (iNodes-1)
11620>>>>
11620>>>                    // For each record, process its fields.
11620>>>                    Get CollectionNode of hoNodes i to hoAttNode
11621>>>                    Get psPrefix of hoAttNode to sAttPrefix
11622>>>                    Get psBaseName of hoAttNode to sName
11623>>>                    // with legacy msxml, xmlns="foo" returns psPrefix="xmlns" and pbBaseName=""
11623>>>                    // with newer msxml, xmlns="foo" returns psPrefix="" and pbBaseName="xmlns"
11623>>>                    // We handle both cases here.
11623>>>                    
11623>>>                    If ( (sAttPrefix="xmlns" and sName=sPrefix) or ; // if a normal xmlns:xx="foo" match (sPrefix="xx") or a legacy xmlns="foo" match (sPrefix="")                        (sPrefix="" and sAttPrefix="" and sName="xmlns") ) Begin // special test for newer msxml xmlns="foo" match (sPrefix="")
11625>>>                        
11625>>>                        Get Value of hoAttNode to sNameSpace
11626>>>                        Move True to bDone
11627>>>                        Move (iNodes-1) to i
11628>>>                        
11628>>>                    End
11628>>>>
11628>>>                    
11628>>>                    Send Destroy of hoAttNode
11629>>>                Loop
11630>>>>
11630>>>                Set XMLInterface of hoNodes to 0
11631>>>            End
11631>>>>
11631>>>            
11631>>>            Get ParentNode of hoNode to hoParentNode
11632>>>            If bParent ;                Send destroy of hoNode
11635>>>            If not bDone Begin
11637>>>                If not hoParentNode ;                    Move True to bDone
11640>>>                Else Begin
11641>>>                    Move True to bParent
11642>>>                    Move hoParentNode to hoNode
11643>>>                End
11643>>>>
11643>>>            End
11643>>>>
11643>>>        Loop
11644>>>>
11644>>>        Function_Return sNameSpace
11645>>>    End_Function
11646>>>    
11646>>>    
11646>>>    
11646>>>End_Class
11647>>>
11647>>>// Set up basic inheritance for specialized forms of XML classes.
11647>>>// This needs to be done so we can make objects of these types.
11647>>>
11647>>>Class cXMLDOMElement is a BaseXmlDomElement
11648>>>    Import_Class_Protocol cXMLDOMNodeMixin
11649>>>    
11649>>>    // Should use AddAttributeValue...does same thing
11649>>>    Procedure SetAttributeValue String sName String sValue
11651>>>        Send AddAttribute sName sValue
11652>>>    End_Procedure
11653>>>    
11653>>>    // Note: Get_AttributeValue already there
11653>>>    
11653>>>    Procedure RemoveAttribute String sName
11655>>>        Integer iVal
11655>>>        Get RemoveAttribute sName to iVal
11656>>>    End_Procedure
11657>>>    
11657>>>    Function AttributeValueNS String sNameSpace String sBaseName Returns String
11659>>>        String sValue
11659>>>        Handle hinfcItem
11659>>>        Handle hoDoc hoTempAttributeNodes hoNode
11659>>>        Integer hinfcAttributes
11659>>>        
11659>>>        Get TempAttributeNodes to hoTempAttributeNodes
11660>>>        Get QualifiedItem of hoTempAttributeNodes sBaseName sNameSpace  to hinfcItem
11661>>>        Set XMLInterface of hoTempAttributeNodes to 0
11662>>>        If hinfcItem Begin
11664>>>            Get DocumentObject to hoDoc
11665>>>            Get phoTempDomNode of hoDoc to hoNode
11666>>>            Set XMLInterface of hoNode to hinfcItem
11667>>>            Get psNodeValue of hoNode to sValue
11668>>>            Set XMLInterface of hoNode to 0
11669>>>        End
11669>>>>
11669>>>        Function_Return sValue
11670>>>    End_Function
11671>>>    
11671>>>    Procedure RemoveAttributeNS String sNameSpace String sBaseName
11673>>>        Handle hoAttrs hoAttr
11673>>>        String sValue
11673>>>        Get TempAttributeNodes to hoAttrs
11674>>>        If hoAttrs Begin
11676>>>            Get RemoveQualifiedNode of hoAttrs sNamespace sBaseName to hoAttr
11677>>>            Set XMLInterface of hoAttrs to 0
11678>>>            If hoAttr ;                Send destroy of hoAttr
11681>>>        End
11681>>>>
11681>>>    End_Procedure
11682>>>    
11682>>>End_Class
11683>>>
11683>>>Class cXMLDOMNode is a BaseXmlDomNode
11684>>>    Import_Class_Protocol cXMLDOMNodeMixin
11685>>>End_Class
11686>>>
11686>>>Class cXMLDOMAttribute is a BaseXmlDomAttribute
11687>>>    Import_Class_Protocol cXMLDOMNodeMixin
11688>>>End_Class
11689>>>
11689>>>Class cXMLDOMComment is a BaseXmlDomComment
11690>>>    Import_Class_Protocol cXMLDOMNodeMixin
11691>>>End_Class
11692>>>
11692>>>Class cXMLDOMProcessingInstruction is a BaseXmlDomProcessingInstruction
11693>>>    Import_Class_Protocol cXMLDOMNodeMixin
11694>>>End_Class
11695>>>
11695>>>Class cXMLDOMTextNode is a BaseXmlDomTextNode
11696>>>    Import_Class_Protocol cXMLDOMNodeMixin
11697>>>End_Class
11698>>>
11698>>>Class cXMLDOMCDATASection is a BaseXmlDomCDATASection
11699>>>    Import_Class_Protocol cXMLDOMNodeMixin
11700>>>End_Class
11701>>>
11701>>>Class cXMLDOMDocumentType is a BaseXmlDomDocumentType
11702>>>    Import_Class_Protocol cXMLDOMNodeMixin
11703>>>    
11703>>>End_Class
11704>>>
11704>>>Class cXMLDOMNotation is a BaseXmlDomNotation
11705>>>    Import_Class_Protocol cXMLDOMNodeMixin
11706>>>End_Class
11707>>>
11707>>>Class cXMLDOMEntity is a BaseXmlDomEntity
11708>>>    Import_Class_Protocol cXMLDOMNodeMixin
11709>>>End_Class
11710>>>
11710>>>Class cXMLDOMEntityReference is a BaseXmlDomEntityReference
11711>>>    Import_Class_Protocol cXMLDOMNodeMixin
11712>>>End_Class
11713>>>
11713>>>Class cXMLDOMDocumentFragment is a BaseXmlDomDocumentFragment
11714>>>    Import_Class_Protocol cXMLDOMNodeMixin
11715>>>End_Class
11716>>>
11716>>>
11716>>>Class cXMLDOMParseError is a BaseXMLDomParseError
11717>>>    // returns an error sub-object as a sibling of this error object
11717>>>    Function ErrorItemNode Integer iItem Returns Handle
11719>>>        Handle hoParseErrorNode hoParent
11719>>>        Handle hParseErrorIntf
11719>>>        Get ErrorItem iItem to hParseErrorIntf
11720>>>        If (hParseErrorIntf) Begin
11722>>>            // add to parent in case developer destroys the current object
11722>>>            Get Parent to hoParent
11723>>>            Get Create of hoParent U_cXMLDOMParseError to hoParseErrorNode
11724>>>            Set XmlInterface of hoParseErrorNode to hParseErrorIntf
11725>>>        End
11725>>>>
11725>>>        Function_Return hoParseErrorNode
11726>>>    End_Function
11727>>>End_Class
11728>>>
11728>>>// Base document class with Base functions.
11728>>>
11728>>>Class cXMLDOMDocument is an BaseXmlDomDocument
11729>>>    
11729>>>    Import_Class_Protocol cXMLDOMNodeMixin
11730>>>    
11730>>>    Procedure Construct_Object
11732>>>        Handle hInfc
11732>>>        Forward Send Construct_Object
11734>>>        Property String psDocumentName ""
11735>>>        Property Integer phPrivateDocumentElement 0
11736>>>        Property Handle phoTempDomNode (Create(Self,U_cXMLDomNode))
11737>>>        Property Handle phoTempDomNodeMap (Create(Self,U_cXMLDOMNamedNodeMap))
11738>>>        
11738>>>        // added in 15.1. If no COM pointer, msxml6 is most likely not installed. This will
11738>>>        // raise an unhandled error, which could be augmented to do something else.
11738>>>        Get XmlInterface to hInfc
11739>>>        If (hInfc=0) Begin
11741>>>            Send ErrorCreatingXMLObject
11742>>>        End
11742>>>>
11742>>>        
11742>>>        // as of 18.0 pbAsync now defaults to False. In most cases, this is what you want
11742>>>        Set pbAsync to False
11743>>>    End_Procedure
11744>>>    
11744>>>    // returns the classId for the passed NodeType. This is a good augmentation point. All nodes
11744>>>    // within an xml document come here to get a class. So, if you want to augment and return a
11744>>>    // different class, just check the node type and return whatever -- else forward
11744>>>    
11744>>>    Function NodeClassId Integer iType Returns Integer
11746>>>        Integer iClassId
11746>>>        Case Begin
11746>>>            Case (iType=NODE_ELEMENT) ;                Move U_cXMLDOMElement      to iClassId
11749>>>            Case (iType=NODE_ATTRIBUTE) ;                Move U_cXMLDOMAttribute    to iClassId
11753>>>            Case (iType=NODE_TEXT) ;                Move U_cXMLDOMTextNode     to iClassId
11757>>>            Case (iType=NODE_CDATA_SECTION) ;                Move U_cXMLDOMCDATASection to iClassId
11761>>>            Case (iType=NODE_ENTITY_REFERENCE) ;                Move U_cXMLDOMEntityReference to iClassId
11765>>>            Case (iType=NODE_ENTITY) ;                Move U_cXMLDOMEntity       to iClassId
11769>>>            Case (iType=NODE_PROCESSING_INSTRUCTION) ;                Move U_cXMLDOMProcessingInstruction to iClassId
11773>>>            Case (iType=NODE_COMMENT) ;                Move U_cXMLDOMComment      to iClassId
11777>>>            Case (iType=NODE_DOCUMENT) ;                Move U_cXMLDOMDocument     to iClassId
11781>>>            Case (iType=NODE_DOCUMENT_TYPE) ;                Move U_cXMLDOMDocumentType to iClassId
11785>>>            Case (iType=NODE_DOCUMENT_FRAGMENT) ;                Move U_cXMLDOMDocumentFragment to iClassId
11789>>>            Case (iType=NODE_NOTATION) ;                Move U_cXMLDOMNotation     to iClassId
11793>>>            Case (iType=0) ;                Move 0                     to iClassId // this is an error!!
11797>>>            Case Else ;                Move U_cXMLDOMNode         to iClassId
11799>>>        Case End
11799>>>        Function_Return iClassId
11800>>>    End_Function
11801>>>    
11801>>>    // Load an XML Document. The name of the document is stored in a property
11801>>>    // that must be set for this function to work correctly.
11801>>>    
11801>>>    Function LoadXMLDocument Returns Integer
11803>>>        String sDocumentName
11803>>>        Integer bRetVal
11803>>>        Get psDocumentName to sDocumentName
11804>>>        Get LoadDocument sDocumentName to bRetVal
11805>>>        If (bRetVal = 0);            Function_Return True
11808>>>        Else;            Function_Return False
11810>>>    End_Function
11811>>>    
11811>>>    Function SaveXMLDocument Returns Integer
11813>>>        String sDocumentName
11813>>>        Integer bRetVal
11813>>>        Get psDocumentName to sDocumentName
11814>>>        Get SaveDocument sDocumentName to bRetVal
11815>>>        Function_Return bRetVal
11816>>>    End_Function
11817>>>    
11817>>>    // Load an XML from a string. This aguments the C message to ret 1 if Ok and 0 if error.
11817>>>    //
11817>>>    Function LoadXML String sXML Returns Integer
11819>>>        Integer bRetVal
11819>>>        // for some reason the parser will not work properly with embedded double quotes.
11819>>>        // Change all " to ' in document.
11819>>>        //Move (replaces('"',sXML,"'")) to sXML  // removed this. Bad Idea.
11819>>>        Forward Get LoadXml sXML to bRetVal
11821>>>        If (bRetVal = 0) ;            Function_Return True
11824>>>        Else;            Function_Return False
11826>>>    End_Function
11827>>>    
11827>>>    // Load an XML string from an address. This aguments the C message to ret 1 if Ok and 0 if error.
11827>>>    //
11827>>>    Function LoadXMLFromAddress Pointer pXML Returns Integer
11829>>>        Integer bRetVal
11829>>>        Forward Get LoadXmlFromAddress pXML to bRetVal
11831>>>        If (bRetVal = 0) ;            Function_Return True
11834>>>        Else;            Function_Return False
11836>>>    End_Function
11837>>>    
11837>>>    
11837>>>    // Allow Nodes and Node node lists to get the parent document.
11837>>>    
11837>>>    Function DocumentObject Returns Handle
11839>>>        Function_Return Self
11840>>>    End_Function
11841>>>    
11841>>>    // Access to the root node allows for searches and iterations.
11841>>>    // The root node is a cNode.
11841>>>    
11841>>>    Function DocumentElement Returns Handle
11843>>>        Handle hNewNode       // Object ID of Root Node
11843>>>        Handle infcNode   // XML Element Interface
11843>>>        Get phDocumentElement to infcNode
11844>>>        If infcNode Begin
11846>>>            Get CreateXMLObject U_cXMLDOMElement infcNode to hNewNode
11847>>>            Set phPrivateDocumentElement to hNewNode // we no longer use this at all
11848>>>        End
11848>>>>
11848>>>        Function_Return hNewNode
11849>>>    End_Function
11850>>>    
11850>>>    //  CreateRootNode is used to set up the first element in a document.
11850>>>    //  It should only be used when creating new files.
11850>>>    
11850>>>    Function CreateDocumentElement String sTagName Returns Handle
11852>>>        Handle hNewNode       // Object ID of Root Node
11852>>>        Handle infcNode   // XML Element Interface
11852>>>        // Call XML to create an element in the document.
11852>>>        Get CreateElement sTagName to infcNode
11853>>>        // Tie the element interface to the DataFlex object.
11853>>>        If infcNode ;            Get CreateXMLObject U_cXMLDOMElement infcNode to hNewNode
11856>>>        // Call XML to set the root element of the document.
11856>>>        Set phDocumentElement to infcNode
11857>>>        Set phPrivateDocumentElement to hNewNode
11858>>>        Function_Return hNewNode
11859>>>    End_Function
11860>>>    
11860>>>    Function CreateDocumentElementNS String sNamespace String sTagName Returns Handle
11862>>>        Handle hNewNode       // Object ID of Root Node
11862>>>        Handle infcNode iType  // XML Element Interface
11862>>>        Get CreateElementNodeNS sNameSpace sTagName "" to hNewNode
11863>>>        Get XmlInterface of hNewNode to infcNode
11864>>>        Set phDocumentElement to infcNode
11865>>>        Set phPrivateDocumentElement to hNewNode
11866>>>        Function_Return hNewNode
11867>>>    End_Function
11868>>>    
11868>>>    
11868>>>    
11868>>>    // return the DocType as a document-type object. Returns 0 if no dtd
11868>>>    // Access to information from the doc type object is limited. Use get psXML
11868>>>    Function DocTypeNode Returns Handle
11870>>>        Handle hinfcDocType hoDocType
11870>>>        Get phDocType to hinfcDocType
11871>>>        If hinfcDocType ;            Get CreateXMLObject U_cXMLDOMDocumentType hinfcDocType to hoDocType
11874>>>        Function_Return hoDocType
11875>>>    End_Function
11876>>>    
11876>>>    Function phXMLErrorObject Returns Handle
11878>>>        Handle hoParseErrorObject
11878>>>        Handle hInfcParseError
11878>>>        Get phParseError to hInfcParseError
11879>>>        If hInfcParseError ;            Get CreateXMLObject U_cXMLDOMParseError hinfcParseError to hoParseErrorObject
11882>>>        Function_Return hoParseErrorObject
11883>>>    End_Function
11884>>>    
11884>>>    //  The following procedure is meant to be overridden by one provided by the developer.
11884>>>    
11884>>>    Procedure BasicParseErrorReport
11886>>>        String sProblem
11886>>>        String sLinePosition
11886>>>        String sDescr
11886>>>        String sReason
11886>>>        String sSource
11886>>>        Handle hoParseErrorObject
11886>>>        Get phXMLErrorObject to hoParseErrorObject
11887>>>        If hoParseErrorObject Begin
11889>>>            Move (SFormat(C_$CannotLoad, psDocumentName(Self)) + "."+character(13)+character(10)) to sProblem
11890>>>            Move (SFormat(C_$ParsingError, piLine(hoParseErrorObject), piLinePos(hoParseErrorObject))) to sLinePosition
11891>>>            Move (sLinePosition +character(13)+character(10)) to sLinePosition
11892>>>            
11892>>>            Move (C_$Reason + ":" * (psReason(hoParseErrorObject))  +character(13)+character(10)) to sReason
11893>>>            Move (C_$Source + ":" * (psSrcText(hoParseErrorObject))) to sSource
11894>>>            Move (sProblem + sLinePosition + sReason + sSource) to sDescr
11895>>>            Error DFERR_XML_INTERNAL_ERROR sDescr
11896>>>>
11896>>>            Send Destroy of hoParseErrorObject
11897>>>        End
11897>>>>
11897>>>        Else ;            Error DFERR_XML_INTERNAL_ERROR C_$NotCreatedParseObject
11899>>>    End_Procedure
11900>>>    
11900>>>    // bind an xml interface node to the passed XML object. If the
11900>>>    // object type is of the wrong type, we will destroy it and recreate it
11900>>>    // which is why hoNode is passed byRef.
11900>>>    // to use this you'd have to use the lower level private messages to get the
11900>>>    // xml interface handles and then bind them to an object. Just like in COM you could
11900>>>    // bind these to the same object, which might save some parsing time. This is made private
11900>>>    // because the time savings would probably be small and would not justify the extra
11900>>>    // complexity.
11900>>>    // It is a programming error to pass this a zero handle.
11900>>>    Procedure BindXMLInfc Handle hInfc Handle ByRef hoNode
11902>>>        Integer iType iClassId iType2
11902>>>        Get piNodeType of hoNode to iType2 // type of the DF XML object
11903>>>        
11903>>>        // Get the node type of the infc handle w/o creating a DF object
11903>>>        Move (invokexml(DF_IXMLDOMNODE, GET_piNodeType, hinfc, 0, 0, 0, 0)) to iType
11904>>>        Move (invokexml(DF_IXMLDOMNODE, GET_ChangeNodeType, hinfc, iType, 1, 0, 0)) to hInfc
11905>>>        If (hinfc=0) Begin
11907>>>            // this should not happen and we would need to know about this.
11907>>>            Error DFERR_XML_INTERNAL_ERROR (C_$XmlFailedNoDocObject + String(iType))
11908>>>>
11908>>>            Procedure_Return 0
11909>>>        End
11909>>>>
11909>>>        // if the type is the same we can reuse the current object and binding it to the interface pointer
11909>>>        If (iType=iType2) Begin
11911>>>            // resuse Self and return
11911>>>            Set XMLInterface of hoNode to hInfc
11912>>>        End
11912>>>>
11912>>>        // if diffrent type, destroy the existing object and recreate it
11912>>>        Else Begin
11913>>>            Send Destroy of hoNode
11914>>>            Get NodeClassId iType to iClassId
11915>>>            Get CreateXMLObject iClassId hInfc to hoNode
11916>>>        End
11916>>>>
11916>>>    End_Procedure
11917>>>    
11917>>>    Function ValidateDocument Returns Handle
11919>>>        Handle hParseErrorIntf hoParseError
11919>>>        Forward Get ValidateDocument to hParseErrorIntf
11921>>>        If hParseErrorIntf Begin
11923>>>            Get CreateXMLObject U_cXMLDOMParseError hParseErrorIntf to hoParseError
11924>>>        End
11924>>>>
11924>>>        Function_Return hoParseError
11925>>>    End_Function
11926>>>    
11926>>>    Function AddExternalSchemaDocument String sSchema Handle hoSchema Returns Boolean
11928>>>        Handle hInfc
11928>>>        Boolean bOk
11928>>>        Get XmlInterface of hoSchema to hInfc
11929>>>        Forward Get AddExternalSchemaDocument sSchema hInfc to bOk
11931>>>        Function_Return (not(bOk))
11932>>>    End_Function
11933>>>    
11933>>>    Function AddExternalSchemaFile String sSchema String sFile Returns Boolean
11935>>>        Boolean bOk
11935>>>        Forward Get AddExternalSchemaFile sSchema sFile to bOk
11937>>>        Function_Return (not(bOk))
11938>>>    End_Function
11939>>>    
11939>>>    Procedure Set psSelectionNamespaces String sNamespaces
11941>>>        Set psDomSecondLevelProperty "SelectionNamespaces" to sNamespaces
11942>>>    End_Procedure
11943>>>    
11943>>>    Function psSelectionNamespaces Returns String
11945>>>        String  sNamespaces
11945>>>        Get psDomSecondLevelProperty "SelectionNamespaces" to sNamespaces
11946>>>        Function_Return sNamespaces
11947>>>    End_Function
11948>>>    
11948>>>    Procedure Set pbMultipleErrorMessages Boolean bMultipleErrors
11950>>>        Set pbDomSecondLevelProperty "MultipleErrorMessages" to bMultipleErrors
11951>>>    End_Procedure
11952>>>    
11952>>>    Function pbMultipleErrorMessages Returns Boolean
11954>>>        Boolean bMultipleErrors
11954>>>        Get pbDomSecondLevelProperty "MultipleErrorMessages" to bMultipleErrors
11955>>>        Function_Return bMultipleErrors
11956>>>    End_Function
11957>>>    
11957>>>    Procedure ErrorCreatingXMLObject
11959>>>        Error DFERR_XML_INTERNAL_ERROR "Could not create XML COM object. MSXML6 may not be properly installed and registered."
11960>>>>
11960>>>    End_Procedure
11961>>>    
11961>>>    // returns the last parse error. If 0, you know everything parsed. This can be
11961>>>    // used along wit pbReadyState to load XML documents in async mode.
11961>>>    Function LastParseError Returns Integer
11963>>>        Integer iErr
11963>>>        Handle hoParseErrorReport
11963>>>        Get phXMLErrorObject to hoParseErrorReport
11964>>>        Get piErrorCode of hoParseErrorReport to iErr
11965>>>        Send Destroy of hoParseErrorReport
11966>>>        Function_Return iErr
11967>>>    End_Function
11968>>>    
11968>>>    
11968>>>End_Class
11969>Use cli.pkg
Including file: cli.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cli.pkg)
11969>>>//                                                              
11969>>>//   CLI specific functionality. There are several connectivity kits     
11969>>>//   based on  SQL/92 CLI. Those are:                                    
11969>>>//    - ODBC_DRV  The Data Access CK for ODBC                            
11969>>>//    - DB2_DRV   The Data Access CK for DB2                             
11969>>>//    - MSSQLDRV  The Data Access CK for Microsoft SQL Server            
11969>>>//                                                                       
11969>>>//   This package defines the common functionality for all CLI based     
11969>>>//   drivers.                                                            
11969>>>
11969>>>Define DF_FILE_TABLE_CHARACTER_FORMAT   for 601
11969>>>Define DF_FILE_MAX_ROWS_FETCHED         for 602
11969>>>Define DF_FILE_PRIMARY_INDEX_TRIGGER    for 604      // Replaced by DF_FILE_GENERATE_RECORD_ID_METHOD !
11969>>>Define DF_FILE_TRANSLATE_OEM_TO_ANSI    for 606      // Deprecated !!! Only defined for decent error reporting
11969>>>Define DF_FILE_REFIND_AFTER_SAVE        for 608
11969>>>Define DF_FILE_TABLE_NAME               for 609
11969>>>Define DF_FILE_GET_RID_AFTER_CREATE     for 610
11969>>>Define DF_FILE_SQL_FILTER               for 611
11969>>>Define DF_FILE_USE_DUMMY_ZERO_DATE      for 612
11969>>>Define DF_FILE_GENERATE_RECORD_ID_METHOD for 614
11969>>>Define DF_FILE_DUMMY_UPDATE_COLUMN      for 616
11969>>>Define DF_FILE_FETCH_ALL_COLUMNS        for 620
11969>>>Define DF_FILE_DATABASE_ID              for 622
11969>>>Define DF_FILE_SQL_FILTER_ACTIVE        for 624
11969>>>Define DF_FILE_NUMBER_SQL_RELATIONS     for 626
11969>>>Define DF_FILE_BLOCK_SIZE               for 628
11969>>>Define DF_FILE_JIT_BINDING              for 630
11969>>>Define DF_FILE_FINDCACHE_HITS           for 632
11969>>>Define DF_FILE_FINDCACHE_TIMEOUTS       for 634
11969>>>Define DF_FILE_SQL_FILTER_EQ            for 636
11969>>>Define DF_FILE_RESTRUCTURE_INT_ONLY     for 638
11969>>>Define DF_FILE_ALLOWED_STRUCTURE_CHANGES for 640
11969>>>
11969>>>Define DF_FIELD_STORE_TIME              for 702
11969>>>Define DF_FIELD_TIME                    for 703
11969>>>Define DF_FIELD_IS_NULL                 for 704
11969>>>Define DF_FIELD_NULL_ALLOWED            for 706
11969>>>Define DF_FIELD_DEFAULT_VALUE           for 707
11969>>>Define DF_FIELD_FETCH_STATE             for 708
11969>>>Define DF_FIELD_READ_ONLY               for 710
11969>>>Define DF_FIELD_NATIVE_TYPE_NAME        for 711
11969>>>Define DF_FIELD_NATIVE_TYPE             for 712
11969>>>Define DF_FIELD_NO_OEM_ANSI_TRANSLATE   for 714
11969>>>Define DF_SQL_RELATION_COLUMN           for 716
11969>>>Define DF_SQL_RELATION_RELATED_SCHEMA   for 717
11969>>>Define DF_FIELD_NATIVE_SIZE             for 718
11969>>>Define DF_SQL_RELATION_RELATED_TABLE    for 719
11969>>>Define DF_SQL_RELATION_RELATED_COLUMN   for 721
11969>>>Define DF_FIELD_IS_IDENTITY             for 722
11969>>>
11969>>>Define DF_INDEX_NAME                    for 801
11969>>>Define DF_INDEX_UNIQUE                  for 802
11969>>>Define DF_INDEX_ON_BACKEND              for 804
11969>>>
11969>>>Define DF_INDEX_CLUSTERED               for 806
11969>>>Define DF_INDEX_SQL_PRIMARY_KEY         for 808
11969>>>Define DF_INDEX_SQL_TYPE                for 810
11969>>>Define DF_INDEX_NUMBER                  for 812
11969>>>
11969>>>Define DF_DATABASE_LOCK_STATE                    for 1001
11969>>>Define DF_DATABASE_ID                            for 1002
11969>>>Define DF_DATABASE_MYSQLTABLETYPE                for 1003
11969>>>Define DF_DATABASE_NUMBER_TYPES                  for 1004
11969>>>Define DF_DATABASE_TYPE_NAME                     for 1005
11969>>>Define DF_DATABASE_TYPE_ID                       for 1006
11969>>>Define DF_DATABASE_TYPE_CREATE_PARAMS            for 1007
11969>>>Define DF_DATABASE_TYPE_AUTOINC                  for 1008
11969>>>Define DF_DATABASE_DEFAULT_DEFAULT_ASCII         for 1009
11969>>>Define DF_DATABASE_TYPE_UNSIGNED                 for 1010
11969>>>Define DF_DATABASE_DEFAULT_DEFAULT_NUMERIC       for 1011
11969>>>Define DF_DATABASE_TYPE_MAXSIZE                  for 1012
11969>>>Define DF_DATABASE_DEFAULT_DEFAULT_DATE          for 1013
11969>>>Define DF_DATABASE_DEFAULT_NULLABLE_ASCII        for 1014
11969>>>Define DF_DATABASE_DEFAULT_DEFAULT_TEXT          for 1015
11969>>>Define DF_DATABASE_DEFAULT_NULLABLE_NUMERIC      for 1016
11969>>>Define DF_DATABASE_DEFAULT_DEFAULT_BINARY        for 1017
11969>>>Define DF_DATABASE_DEFAULT_NULLABLE_DATE         for 1018
11969>>>Define DF_DATABASE_DUMMY_ZERO_DATE_VALUE         for 1019
11969>>>Define DF_DATABASE_DEFAULT_NULLABLE_TEXT         for 1020
11969>>>Define DF_DATABASE_DUPREC_STATE                  for 1021
11969>>>Define DF_DATABASE_DEFAULT_NULLABLE_BINARY       for 1022
11969>>>Define DF_DATABASE_MAX_ACTIVE_STATEMENTS         for 1024
11969>>>Define DF_DATABASE_DRIVER_DECIMAL_SEPARATOR      for 1026
11969>>>Define DF_DATABASE_DRIVER_THOUSANDS_SEPARATOR    for 1028
11969>>>
11969>>>Define DF_DATABASE_DRIVER_DATE_FORMAT            for 1030
11969>>>Define DF_DATABASE_DRIVER_DATE_SEPARATOR         for 1032
11969>>>Define DF_DATABASE_IGNORE_UCASE_SUPPORT          for 1034
11969>>>Define DF_DATABASE_INDEX_CREATE                  for 1036
11969>>>Define DF_DATABASE_INDEX_DROP                    for 1038
11969>>>Define DF_DATABASE_INDEX_ASC                     for 1040
11969>>>Define DF_DATABASE_INDEX_DESC                    for 1042
11969>>>Define DF_DATABASE_COLUMN_CREATE_DEFAULTCLAUSE   for 1044
11969>>>Define DF_DATABASE_DUPREC_ERRORNUMBER            for 1046
11969>>>Define DF_DATABASE_USE_IDENTITY_TYPE             for 1048
11969>>>Define DF_DATABASE_NUMBER_NATIVE_LOCKERRORS      for 1050
11969>>>Define DF_DATABASE_NATIVE_LOCKERROR              for 1052
11969>>>Define DF_DATABASE_DEFAULT_MAX_ROWS              for 1054
11969>>>Define DF_DATABASE_IGNORE_WARNINGS               for 1056
11969>>>Define DF_DATABASE_USE_DF_LOCKERROR              for 1058
11969>>>Define DF_DATABASE_FIND_CACHE_TIMEOUT            for 1060
11969>>>Define DF_DATABASE_JIT_TRESHOLD                  for 1062
11969>>>Define DF_DATABASE_TRUNCATE_BINARY_ZEROES        for 1064
11969>>>Define DF_DATABASE_DEFAULT_DEFAULT_DATETIME      for 1065
11969>>>Define DF_DATABASE_DEFAULT_NULLABLE_DATETIME     for 1066
11969>>>Define DF_DATABASE_MAP_DFDATE_TO_ODBCTYPE         for 1068
11969>>>Define DF_DATABASE_MAP_DFDATETIME_TO_ODBCTYPE     for 1070
11969>>>Define DF_DATABASE_MAP_DFASCII_TO_ODBCTYPE        for 1072
11969>>>Define DF_DATABASE_MAP_DFTEXT_TO_ODBCTYPE         for 1074
11969>>>Define DF_DATABASE_MAP_DFBINARY_TO_ODBCTYPE       for 1076
11969>>>Define DF_DATABASE_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA for 1078
11969>>>
11969>>>Define DF_DATABASE_MAP_DFDATE_TO_SQLTYPE         for 1069
11969>>>Define DF_DATABASE_MAP_DFDATETIME_TO_SQLTYPE     for 1071
11969>>>Define DF_DATABASE_MAP_DFASCII_TO_SQLTYPE        for 1073
11969>>>Define DF_DATABASE_MAP_DFTEXT_TO_SQLTYPE         for 1075
11969>>>Define DF_DATABASE_MAP_DFBINARY_TO_SQLTYPE       for 1077
11969>>>Define DF_DATABASE_DEFAULT_DATABASE              for 1079
11969>>>Define DF_DATABASE_TRIM_VARCHAR_VALUES           for 1084
11969>>>Define DF_DATABASE_IDENTIFIER_QUOTE              for 1085
11969>>>
11969>>>Define DF_DRIVER_DEFAULT_DEFAULT_ASCII           for 1101
11969>>>Define DF_DRIVER_DEFAULT_NULLABLE_ASCII          for 1102
11969>>>Define DF_DRIVER_DEFAULT_DEFAULT_NUMERIC         for 1103
11969>>>Define DF_DRIVER_DEFAULT_NULLABLE_NUMERIC        for 1104
11969>>>Define DF_DRIVER_DEFAULT_DEFAULT_DATE            for 1105
11969>>>Define DF_DRIVER_DEFAULT_NULLABLE_DATE           for 1106
11969>>>Define DF_DRIVER_DEFAULT_DEFAULT_TEXT            for 1107
11969>>>Define DF_DRIVER_DEFAULT_NULLABLE_TEXT           for 1108
11969>>>Define DF_DRIVER_DEFAULT_DEFAULT_BINARY          for 1109
11969>>>Define DF_DRIVER_DEFAULT_NULLABLE_BINARY         for 1110
11969>>>Define DF_DRIVER_DUMMY_ZERO_DATE_VALUE           for 1111
11969>>>Define DF_DRIVER_MAX_ACTIVE_STATEMENTS           for 1112
11969>>>Define DF_DRIVER_CACHE_PATH                      for 1113
11969>>>Define DF_DRIVER_DRIVER_DECIMAL_SEPARATOR        for 1114
11969>>>Define DF_DRIVER_DEFAULT_TABLE_CHARACTER_FORMAT  for 1115
11969>>>Define DF_DRIVER_DRIVER_THOUSANDS_SEPARATOR      for 1116
11969>>>Define DF_DRIVER_APPLICATION_CHARACTER_FORMAT    for 1117
11969>>>Define DF_DRIVER_DRIVER_DATE_FORMAT              for 1118
11969>>>Define DF_DRIVER_LAST_ERROR_TEXT                 for 1119
11969>>>Define DF_DRIVER_DRIVER_DATE_SEPARATOR           for 1120
11969>>>Define DF_DRIVER_CONNECTION_ID                   for 1121
11969>>>Define DF_DRIVER_IGNORE_UCASE_SUPPORT            for 1122
11969>>>Define DF_DRIVER_CONNECTION_ID_STRING            for 1123
11969>>>Define DF_DRIVER_IGNORE_WARNINGS                 for 1124
11969>>>Define DF_DRIVER_USE_DF_LOCKERROR                for 1126
11969>>>Define DF_DRIVER_FIND_CACHE_TIMEOUT              for 1128
11969>>>Define DF_DRIVER_JIT_TRESHOLD                    for 1130
11969>>>Define DF_DRIVER_TRUNCATE_BINARY_ZEROES          for 1132
11969>>>Define DF_DRIVER_ERROR_DEBUG_MODE                for 1134
11969>>>Define DF_DRIVER_USE_CACHE                       for 1136
11969>>>Define DF_DRIVER_REPORT_CACHE_ERRORS             for 1138
11969>>>Define DF_DRIVER_USE_CACHE_EXPIRATION            for 1140
11969>>>Define DF_DRIVER_DEFAULT_USE_DUMMY_ZERO_DATE     for 1142
11969>>>Define DF_DRIVER_DEFAULT_RECORD_IDENTITY_HIDING  for 1144
11969>>>Define DF_DRIVER_REPORT_ACTIVE_COLUMN_ERRORS     for 1146
11969>>>Define DF_DRIVER_SILENT_LOGIN                    for 1148
11969>>>Define DF_DRIVER_DEFAULT_MAP_TO_RECNUM           for 1150
11969>>>Define DF_DRIVER_CONNECTION_ID_OPTIONS           for 1152
11969>>>Define DF_DRIVER_NUMBER_CONNECTION_IDS           for 1154
11969>>>Define DF_DRIVER_DEFAULT_DEFAULT_DATETIME        for 1155
11969>>>Define DF_DRIVER_DEFAULT_NULLABLE_DATETIME       for 1156
11969>>>Define DF_DRIVER_MATCH_CLIENT_SERVER_VERSION     for 1158
11969>>>Define DF_DRIVER_SQLSERVER_CLIENT_VERSION        for 1160
11969>>>Define DF_DRIVER_MAP_DFDATE_TO_ODBCTYPE          for 1168
11969>>>Define DF_DRIVER_MAP_DFDATETIME_TO_ODBCTYPE      for 1170
11969>>>Define DF_DRIVER_MAP_DFASCII_TO_ODBCTYPE         for 1172
11969>>>Define DF_DRIVER_MAP_DFTEXT_TO_ODBCTYPE          for 1174
11969>>>Define DF_DRIVER_MAP_DFBINARY_TO_ODBCTYPE        for 1176
11969>>>Define DF_DRIVER_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA for 1178
11969>>>Define DF_DRIVER_LOGIN_ON_OPEN                   for 1180
11969>>>Define DF_DRIVER_MINIMUM_CLIENT_VERSION          for 1182
11969>>>Define DF_DRIVER_TRIM_VARCHAR_VALUES             for 1184
11969>>>
11969>>>Define DF_DRIVER_MAP_DFDATE_TO_SQLTYPE           for 1169
11969>>>Define DF_DRIVER_MAP_DFDATETIME_TO_SQLTYPE       for 1171
11969>>>Define DF_DRIVER_MAP_DFASCII_TO_SQLTYPE          for 1173
11969>>>Define DF_DRIVER_MAP_DFTEXT_TO_SQLTYPE           for 1175
11969>>>Define DF_DRIVER_MAP_DFBINARY_TO_SQLTYPE         for 1177
11969>>>
11969>>>
11969>>>// Replacement for logical column number that indicates all columns
11969>>>Define DF_ALL_COLUMNS for -1
11969>>>
11969>>>// Possible DF_FILE_GENERATE_RECORD_ID_METHOD values
11969>>>Define RIM_NONE            for 0
11969>>>Define RIM_IDENTITY_COLUMN for 1
11969>>>Define RIM_DISPENSER_TABLE for 2
11969>>>Define RIM_EXTERNAL        for 3
11969>>>
11969>>>// Possible DF_FIELD_READ_ONLY values
11969>>>Define RO_NO            for 0
11969>>>Define RO_IGNORECHANGE  for 1
11969>>>Define RO_ACCEPTCHANGE  for 2
11969>>>Define RO_ERRORONCHANGE for 3
11969>>>
11969>>>
11969>>>// Possible DF_DRIVER_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA values
11969>>>Define MAP_DF_TO_SQL_TYPE_UNKNOWN    for 0
11969>>>Define MAP_DF_TO_SQL_TYPE_SQL2000    for 3
11969>>>Define MAP_DF_TO_SQL_TYPE_SQL2005    for 4
11969>>>Define MAP_DF_TO_SQL_TYPE_SQL2008    for 5
11969>>>Define MAP_DF_TO_SQL_TYPE_SQL2012    for 6
11969>>>Define MAP_DF_TO_SQL_TYPE_DB2_LEGACY  for 7
11969>>>Define MAP_DF_TO_SQL_TYPE_DB2_10      for 8
11969>>>Define MAP_DF_TO_SQL_TYPE_ODBC_SCHEMA for 9
11969>>>Define MAP_DF_TO_SQL_TYPE_UNICODE     for 11
11969>>>
11969>>>
11969>>>// Possible DF_DRIVER_SQLSERVER_CLIENT_VERSION values are defined in Mssqldrv.pkg
11969>>>
11969>>>// Possible SQL Column type values
11969>>>//      SQL Server specific types defined in mssqldrv.pkg
11969>>>//      DB2 specific typesm defined in db2_drv.pkg
11969>>>
11969>>>Define SQL_UNKNOWN_TYPE   for    0
11969>>>Define SQL_CHAR           for    1
11969>>>Define SQL_NUMERIC        for    2
11969>>>Define SQL_DECIMAL        for    3
11969>>>Define SQL_INTEGER        for    4
11969>>>Define SQL_SMALLINT       for    5
11969>>>Define SQL_FLOAT          for    6
11969>>>Define SQL_REAL           for    7
11969>>>Define SQL_DOUBLE         for    8
11969>>>Define SQL_DATETIME       for    9
11969>>>Define SQL_VARCHAR        for   12
11969>>>Define SQL_TYPE_DATE      for   91
11969>>>Define SQL_TYPE_TIME      for   92
11969>>>Define SQL_TYPE_TIMESTAMP for   93
11969>>>
11969>>>Define SQL_DATE           for    9
11969>>>Define SQL_INTERVAL       for   10
11969>>>Define SQL_TIME           for   10
11969>>>Define SQL_TIMESTAMP      for   11
11969>>>Define SQL_LONGVARCHAR    for  (-1)
11969>>>Define SQL_BINARY         for  (-2)
11969>>>Define SQL_VARBINARY      for  (-3)
11969>>>Define SQL_LONGVARBINARY  for  (-4)
11969>>>Define SQL_BIGINT         for  (-5)
11969>>>Define SQL_TINYINT        for  (-6)
11969>>>Define SQL_BIT            for  (-7)
11969>>>Define SQL_WCHAR          for  (-8)
11969>>>Define SQL_WVARCHAR       for  (-9)
11969>>>Define SQL_WLONGVARCHAR   for (-10)
11969>>>Define SQL_GUID           for (-11)
11969>>>
11969>>>// Possible DF_INDEX_SQL_TYPE values
11969>>>Define DF_INDEX_CLIENT      for  1
11969>>>Define DF_INDEX_SERVER      for  2
11969>>>Define DF_INDEX_SERVER_ONLY for  3
11969>>>Define DF_INDEX_TEMPORARY   for  4
11969>>>
11969>>>// Possible DF_FILE_ALLOWED_STRUCTURE_CHANGES values
11969>>>Define ALL_TABLE_CHANGES_ALLOWED            for  0
11969>>>Define ONLY_TABLE_INT_FILE_CHANGES_ALLOWED  for  1
11969>>>Define NO_TABLE_CHANGES_ALLOWED             for  2
11969>>>
11969>>>// Driver level attributes
11969>>>Define DRVR_TOKEN_BASE                       for 1000
11969>>>Define DRVR_ATTRIBUTE_START                  for (DRVR_TOKEN_BASE + 19)
11969>>>Define DRVR_DEFAULT_NULLABLE_ASCII           for (DRVR_ATTRIBUTE_START)
11969>>>Define DRVR_DEFAULT_NULLABLE_NUMERIC         for (DRVR_ATTRIBUTE_START +  1)
11969>>>Define DRVR_DEFAULT_NULLABLE_DATE            for (DRVR_ATTRIBUTE_START +  2)
11969>>>Define DRVR_DEFAULT_NULLABLE_TEXT            for (DRVR_ATTRIBUTE_START +  3)
11969>>>Define DRVR_DEFAULT_NULLABLE_BINARY          for (DRVR_ATTRIBUTE_START +  4)
11969>>>Define DRVR_DEFAULT_DEFAULT_ASCII            for (DRVR_ATTRIBUTE_START +  5)
11969>>>Define DRVR_DEFAULT_DEFAULT_NUMERIC          for (DRVR_ATTRIBUTE_START +  6)
11969>>>Define DRVR_DEFAULT_DEFAULT_DATE             for (DRVR_ATTRIBUTE_START +  7)
11969>>>Define DRVR_DEFAULT_DEFAULT_TEXT             for (DRVR_ATTRIBUTE_START +  8)
11969>>>Define DRVR_DEFAULT_DEFAULT_BINARY           for (DRVR_ATTRIBUTE_START +  9)
11969>>>Define DRVR_MAX_ACTIVE_STATEMENTS            for (DRVR_ATTRIBUTE_START + 10)
11969>>>Define DRVR_ERROR_DEBUG_MODE                 for (DRVR_ATTRIBUTE_START + 11)
11969>>>Define DRVR_DRIVER_DECIMAL_SEPARATOR         for (DRVR_ATTRIBUTE_START + 12)
11969>>>Define DRVR_DRIVER_THOUSANDS_SEPARATOR       for (DRVR_ATTRIBUTE_START + 13)
11969>>>Define DRVR_DRIVER_DATE_FORMAT               for (DRVR_ATTRIBUTE_START + 14)
11969>>>Define DRVR_DRIVER_DATE_SEPARATOR            for (DRVR_ATTRIBUTE_START + 15)
11969>>>Define DRVR_USE_CACHE                        for (DRVR_ATTRIBUTE_START + 16)
11969>>>Define DRVR_REPORT_CACHE_ERRORS              for (DRVR_ATTRIBUTE_START + 17)
11969>>>Define DRVR_CACHE_PATH                       for (DRVR_ATTRIBUTE_START + 18)
11969>>>Define DRVR_USE_CACHE_EXPIRATION             for (DRVR_ATTRIBUTE_START + 19)
11969>>>Define DRVR_DEFAULT_TABLE_CHARACTER_FORMAT   for (DRVR_ATTRIBUTE_START + 20)
11969>>>Define DRVR_APPLICATION_CHARACTER_FORMAT     for (DRVR_ATTRIBUTE_START + 21)
11969>>>Define DRVR_DUMMY_ZERO_DATE_VALUE            for (DRVR_ATTRIBUTE_START + 22)
11969>>>Define DRVR_DEFAULT_USE_DUMMY_ZERO_DATE      for (DRVR_ATTRIBUTE_START + 23)
11969>>>Define DRVR_IGNORE_UCASE_SUPPORT             for (DRVR_ATTRIBUTE_START + 24)
11969>>>Define DRVR_LASTERRORTEXTLENGTH              for (DRVR_ATTRIBUTE_START + 25)
11969>>>Define DRVR_LASTERRORTEXT                    for (DRVR_ATTRIBUTE_START + 26)
11969>>>Define DRVR_DEFAULTRECORDIDHIDING            for (DRVR_ATTRIBUTE_START + 35)
11969>>>Define DRVR_REPORTACTIVECOLUMNERRORS         for (DRVR_ATTRIBUTE_START + 36)
11969>>>
11969>>>
11969>>>// Error Number constants
11969>>>Define CLIERR_GENERAL_ERROR                       for 12289
11969>>>Define CLIERR_CANT_INITIALIZE                     for 12290
11969>>>Define CLIERR_CANT_DEINITIALIZE                   for 12291
11969>>>Define CLIERR_BAD_OR_NO_PRIMARY_INDEX_SPECIFIED   for 12292
11969>>>Define CLIERR_LOGIN_UNSUCCESSFUL                  for 12293
11969>>>Define CLIERR_LOGOUT_UNSUCCESSFUL                 for 12294
11969>>>Define CLIERR_TABLE_NOT_IN_CONNECTION             for 12295
11969>>>Define CLIERR_NULL_VALUE_NOT_ALLOWED              for 12296
11969>>>Define CLIERR_SEGMENT_NUMBER_RANGE                for 12297
11969>>>Define CLIERR_INDEX_NUMBER_RANGE                  for 12298
11969>>>Define CLIERR_LOGIN_ATTRIBUTE_MUST_BE_SET         for 12299
11969>>>Define CLIERR_PHYSICAL_NAME_MUST_BE_SET           for 12300
11969>>>Define CLIERR_INVALID_REGISTRATION_FILE           for 12301
11969>>>Define CLIERR_LICENSE_EXPIRED                     for 12302
11969>>>Define CLIERR_DEADLOCK_OR_TIMEOUT                 for 12303
11969>>>Define CLIERR_SQL_ERROR                           for 12304
11969>>>Define CLIERR_SQLINVALID_CLI_STMT_HANDLE          for 12305
11969>>>Define CLIERR_SQLINVALID_CLI_CONN_HANDLE          for 12306
11969>>>Define CLIERR_SQLINVALID_DRIVER_ID                for 12307
11969>>>Define CLIERR_SQLINVALID_BIND_FILE                for 12308
11969>>>Define CLIERR_SQLINVALID_COLUMN                   for 12309
11969>>>Define CLIERR_SQLINVALID_ATTRIBUTE                for 12310
11969>>>Define CLIERR_SQLINVALID_BUFFER                   for 12311
11969>>>Define CLIERR_INVALID_CONFIGURATION_KEYWORD       for 12312
11969>>>Define CLIERR_NOUNIQUEINDEX                       for 12313
11969>>>Define CLIERR_UCSEGMENT_NOT_SUPPORTED             for 12314
11969>>>Define CLIERR_FIELDREADONLY                       for 12315
11969>>>Define CLIERR_DBPROPERROR                         for 12316
11969>>>Define CLIERR_CANTSETRECNUMINACTIVE               for 12317
11969>>>Define CLIERR_CANTCHANGEINACTIVECOLUMN            for 12318
11969>>>Define CLIERR_FIELDISINACTIVE                     for 12319
11969>>>Define CLIERR_NOT_INSTALLED                       for 12320
11969>>>Define CLIERR_CANT_FIND_TERMLIST                  for 12321
11969>>>Define CLIERR_CANT_READ_TERMLIST                  for 12322
11969>>>Define CLIERR_MAX_USERS_EXCEEDED                  for 12323
11969>>>Define CLIERR_USER_COUNT_FILE_ERROR               for 12324
11969>>>Define CLIERR_CANT_INIT_USER_COUNT                for 12325
11969>>>Define CLIERR_USER_COUNT_FILE_NOT_FOUND           for 12326
11969>>>Define CLIERR_USER_COUNT_FILE_CANT_READ           for 12327
11969>>>Define CLIERR_USER_COUNT_FILE_CANT_DECRYPT        for 12328
11969>>>Define CLIERR_USER_COUNT_FILE_BAD_VERSION         for 12329
11969>>>Define CLIERR_CANTCREATE_RECNUMISZERO             for 12330
11969>>>Define CLIERR_CANTGETCOLUMNINFO                   for 12331
11969>>>Define CLIERR_INVALIDDATABASEHANDLE               for 12332
11969>>>Define CLIERR_TYPENUMBEROUTOFRANGE                for 12333
11969>>>Define CLIERR_LOCKERRORNUMBEROUTOFRANGE           for 12334
11969>>>Define CLIERR_CONNECTIONIDOUTOFRANGE              for 12335
11969>>>Define CLIERR_CONNECTIONIDNOTFOUND                for 12336
11969>>>Define CLIERR_RELATIONOUTOFRANGE                  for 12337
11969>>>Define CLIERR_NOTANEXPRESSEDITION                 for 12338
11969>>>Define CLIERR_INVALID_CONFIGURATION_VALUE         for 12339
11969>>>Define CLIERR_NOCLIENTSERVERVERSIONMATCH          for 12340
11969>>>Define CLIERR_CONNECTIONIDALREADYEXISTS           for 12341
11969>>>Define CLIERR_INVALIDCONNECTSTRINGOPENOPTION      for 12342
11969>>>Define CLIERR_DATABASECONNECTIONLOST              for 12343
11969>>>Define CLIERR_STRUCTURECHANGENOTALLOWED           for 12344
11969>>>Define CLIERR_MINIMUMCLIENTVERSIONNOTFOUND        for 12345
11969>>>
11969>>>
11969>>>// Call driver Function identifiers
11969>>>Define CLI_CONSTRAINT             for 10000
11969>>>Define CLI_SETDRIVERATTRIBUTE     for 10001
11969>>>Define CLI_GETDRIVERATTRIBUTE     for 10002
11969>>>Define CLI_BROWSECONNECT          for 10003
11969>>>Define CLI_DATASOURCES            for 10004
11969>>>Define CLI_CKREVISION             for 10005
11969>>>Define CLI_INITDATASOURCES        for 10006
11969>>>Define CLI_ENUMERATE_TABLES       for 10007
11969>>>Define CLI_TABLENAME              for 10008
11969>>>Define CLI_TABLESCHEMA            for 10009
11969>>>Define CLI_TABLETYPE              for 10010
11969>>>Define CLI_TABLECOMMENT           for 10011
11969>>>Define CLI_ENUMERATE_COLUMNS      for 10012
11969>>>Define CLI_COLUMNNAME             for 10013
11969>>>Define CLI_DUMPSTATUS             for 10014
11969>>>Define CLI_READCONFIGURATION      for 10015
11969>>>Define CLI_GETDBATTRIBUTE0        for 10016
11969>>>Define CLI_GETDBATTRIBUTE         for 10017
11969>>>Define CLI_GETREGNAME             for 10018
11969>>>Define CLI_GETSERIALNUM           for 10019
11969>>>Define CLI_GETMAXUSERS            for 10020
11969>>>Define CLI_BCP                    for 10021
11969>>>Define CLI_DROPINDICES            for 10022
11969>>>Define CLI_CREATEINDICES          for 10023
11969>>>Define CLI_REDIRECTCONNECTION     for 10024
11969>>>Define CLI_CREATECONNECTIONID     for 10025
11969>>>Define CLI_DELETECONNECTIONID     for 10026
11969>>>
11969>>>
11969>>>// Init data source types
11969>>>Define SQL_FETCH_ALL     for  2
11969>>>Define SQL_FETCH_USER    for 31
11969>>>Define SQL_FETCH_SYSTEM  for 32
11969>>>
11969>>>
11969>>>// Dummy strings used in the commands
11969>>>String  CLI$StrDummy 255
11969>>>Integer CLI$IntDummy
11969>>>
11969>>>
11969>>>//   Setup a constraint for a file.                                    
11969>>>
11969>>>
11969>>>
11969>>>// Set or get an attribute at driver level. These attributes, when set,
11969>>>// will be set for the remainder of the session or until set again. To 
11969>>>// permanently set driver level attributes change the driver           
11969>>>// configuration file.                                                 
11969>>>
11969>>>
11969>>>
11969>>>
11969>>>
11969>>>
11969>>>
11969>>>// An instance of this class can be used as a broker object to
11969>>>// call several CLI releated methods.                         
11969>>>
11969>>>//Class cCLIHandler is a cObject
11969>>>Class cCLIHandler is an Array
11970>>>    
11970>>>    Procedure Construct_Object 
11972>>>        Forward Send Construct_object 
11974>>>        
11974>>>        Property String  psDriverID        ""
11975>>>    End_Procedure
11976>>>    
11976>>>    
11976>>>    
11976>>>    // The revsion of a CLI Connectivity Kit
11976>>>    Function CKRevision Returns String
11978>>>        String  sDriverID
11978>>>        String  sRevision
11978>>>        String  sVoid
11978>>>        Integer iRetval
11978>>>        
11978>>>        Get psDriverID to sDriverID
11979>>>        If (sDRiverID <> "") Begin
11981>>>            Move (Repeat(" ", 255)) to sRevision
11982>>>            Call_Driver 0 sDRiverID Function CLI_CKREVISION Callback 0 Passing sRevision sVoid 0 Result iRetval
11987>>>        End
11987>>>>
11987>>>        
11987>>>        Function_Return sRevision
11988>>>    End_Function
11989>>>    
11989>>>    
11989>>>    
11989>>>    // Extarct the Nth part of a a.b.c.d revsion string.
11989>>>    // Returns : The part version number or -1 if there is no such part number.
11989>>>    //
11989>>>    Function ExtractPartFromRevision Integer iPartNum String sRevision Returns Integer
11991>>>        Integer iPartRev
11991>>>        Integer iCurrentPart
11991>>>        Integer iSeparatorPos
11991>>>        
11991>>>        If (iPartNum > 4) ;            Function_Return -1
11994>>>        
11994>>>        Move 0 to iCurrentPart
11995>>>        Repeat
11995>>>>
11995>>>            Move (Pos(".", sRevision)) to iSeparatorPos
11996>>>            If (iSeparatorPos > 0) Begin
11998>>>                Move (Left(sRevision, iSeparatorPos - 1)) to iPartRev
11999>>>                Move (Right(sRevision, Length(sRevision) - iSeparatorPos)) to sRevision
12000>>>                Increment iCurrentPart
12001>>>            End
12001>>>>
12001>>>            Else If (sRevision <> "") Begin
12004>>>                Move sRevision to iPartRev
12005>>>                Move "" to sRevision
12006>>>                Increment iCurrentPart
12007>>>            End
12007>>>>
12007>>>            Else ;                Move -1 to iPartRev
12009>>>        Until (iCurrentPart >= iPartNum or iPartRev = -1)
12011>>>        
12011>>>        Function_Return iPartRev
12012>>>    End_Function
12013>>>    
12013>>>    
12013>>>    
12013>>>    // Returns the major revision of the CK
12013>>>    //
12013>>>    Function CKMajorRevision Returns Integer
12015>>>        Function_Return (ExtractPartFromRevision (Self, 1, CKRevision(Self)))
12016>>>    End_Function
12017>>>    
12017>>>    
12017>>>    
12017>>>    // Returns the minor revision of the CK
12017>>>    //
12017>>>    Function CKMinorRevision Returns Integer
12019>>>        Function_Return (ExtractPartFromRevision (Self, 2, CKRevision(Self)))
12020>>>    End_Function
12021>>>    
12021>>>    
12021>>>    
12021>>>    // Returns the release revision of the CK
12021>>>    //
12021>>>    Function CKReleaseRevision Returns Integer
12023>>>        Function_Return (ExtractPartFromRevision (Self, 3, CKRevision(Self)))
12024>>>    End_Function
12025>>>    
12025>>>    
12025>>>    
12025>>>    // Returns the major revision of the CK
12025>>>    //
12025>>>    Function CKBuildRevision Returns Integer
12027>>>        Function_Return (ExtractPartFromRevision (Self, 4, CKRevision(Self)))
12028>>>    End_Function
12029>>>    
12029>>>    
12029>>>    
12029>>>    // Determines if the CK conforms to a passed minimal revsion.
12029>>>    //
12029>>>    Function IsMinimalRevision Integer iMajor Integer iMinor Integer iRelease Integer iBuild Returns Integer
12031>>>        If (iMajor < CKMajorRevision(Self)) ;            Function_Return (True)
12034>>>        Else If (iMajor = CKMajorRevision(Self)) Begin
12037>>>            If (iMinor < CKMinorRevision(Self)) ;                Function_Return (True)
12040>>>            Else If (iMinor = CKMinorRevision(Self)) Begin
12043>>>                If (iRelease < CKReleaseRevision(Self)) ;                    Function_Return (True)
12046>>>                Else If (iRelease = CKReleaseRevision(Self) and iBuild <= CKBuildRevision(Self)) ;                    Function_Return (True)
12050>>>            End
12050>>>>
12050>>>        End
12050>>>>
12050>>>        
12050>>>        Function_Return (False)
12051>>>    End_Function
12052>>>    
12052>>>    
12052>>>    
12052>>>    // Returns the Connectiivty Kit registration name.
12052>>>    //
12052>>>    Function RegistrationName Returns String
12054>>>        String  sRegistration
12054>>>        String  sDRiverId
12054>>>        String  sVoid
12054>>>        Integer iRetval
12054>>>        
12054>>>        Get psDriverID to sDriverID
12055>>>        If (sDRiverID <> "") Begin
12057>>>            Move (Repeat(" ", 255)) to sRegistration
12058>>>            Call_Driver 0 sDRiverID Function CLI_GETREGNAME Callback 0 Passing sRegistration sVoid 0 Result iRetval
12063>>>        End
12063>>>>
12063>>>        
12063>>>        Function_Return sRegistration
12064>>>    End_Function
12065>>>    
12065>>>    // Returns the Connectiivty Kit serial number.
12065>>>    //
12065>>>    Function SerialNumber Returns Integer
12067>>>        String  sDRiverId
12067>>>        String  sVoid
12067>>>        Integer iRetval
12067>>>        
12067>>>        Get psDriverID to sDriverID
12068>>>        If (sDRiverID <> "") Begin
12070>>>            Call_Driver 0 sDRiverID Function CLI_GETSERIALNUM Callback 0 Passing sVoid sVoid 0 Result iRetval
12075>>>        End
12075>>>>
12075>>>        
12075>>>        Function_Return iRetval
12076>>>    End_Function
12077>>>    
12077>>>    
12077>>>    // Returns the Connectiivty Kit maximum number of users.
12077>>>    //
12077>>>    Function MaxUsers Returns Integer
12079>>>        String  sDRiverId
12079>>>        String  sVoid
12079>>>        Integer iRetval
12079>>>        
12079>>>        Get psDriverID to sDriverID
12080>>>        If (sDRiverID <> "") Begin
12082>>>            Call_Driver 0 sDRiverID Function CLI_GETMAXUSERS Callback 0 Passing sVoid sVoid 0 Result iRetval
12087>>>        End
12087>>>>
12087>>>        
12087>>>        Function_Return iRetval
12088>>>    End_Function
12089>>>    
12089>>>    
12089>>>    
12089>>>    // Dump the current status of the drver in the passed disk file.
12089>>>    //
12089>>>    Procedure DumpStatus String sFileName
12091>>>        String  sVoid
12091>>>        String  sDriverID
12091>>>        Integer iVoid
12091>>>        
12091>>>        Get psDriverID to sDriverID
12092>>>        If (sDriverID <> "") ;            Call_Driver 0 sDriverID Function CLI_DUMPSTATUS Callback 0 Passing sFileName sVoid iVoid Result iVoid
12099>>>    End_Procedure
12100>>>    
12100>>>    
12100>>>    
12100>>>    // Reset all driver level configurable attributes to the
12100>>>    // default value and then reread the configuration.
12100>>>    //
12100>>>    Procedure ReadConfiguration
12102>>>        String  sVoid
12102>>>        String  sDriverID
12102>>>        Integer iVoid
12102>>>        
12102>>>        Get psDriverID to sDriverID
12103>>>        If (sDriverID <> "") ;            Call_Driver 0 sDriverID Function CLI_READCONFIGURATION Callback 0 Passing sVoid sVoid iVoid Result iVoid
12110>>>    End_Procedure
12111>>>    
12111>>>    
12111>>>    
12111>>>    // Convert a text to the corresponding
12111>>>    // Generate_Record_ID_Method attribute value
12111>>>    //
12111>>>    Function TextToRIMValue String sText Returns Integer
12113>>>        If (sText = "None") ;            Function_Return RIM_NONE
12116>>>        Else If (sText = "Identity Column") ;            Function_Return RIM_IDENTITY_COLUMN
12120>>>        Else If (sText = "Dispenser Table") ;            Function_Return RIM_DISPENSER_TABLE
12124>>>        Else If (sText = "External") ;            Function_Return RIM_EXTERNAL
12128>>>    End_Function
12129>>>    
12129>>>    
12129>>>    
12129>>>    // Convert a Generate_Record_ID_Method attribute value to the
12129>>>    // corresponding text.
12129>>>    //
12129>>>    Function RIMValueToText Integer iAttrValue Returns String
12131>>>        If (iAttrValue = RIM_NONE) ;            Function_Return "None"
12134>>>        Else If (iAttrValue = RIM_IDENTITY_COLUMN) ;            Function_Return "Identity Column"
12138>>>        Else If (iAttrValue = RIM_DISPENSER_TABLE) ;            Function_Return "Dispenser Table"
12142>>>        Else If (iAttrValue = RIM_EXTERNAL) ;            Function_Return "External"
12146>>>    End_Function
12147>>>    
12147>>>    
12147>>>    
12147>>>    // Convert a text to the corresponding
12147>>>    // Generate_Record_ID_Method attribute value
12147>>>    //
12147>>>    Function TextToROValue String sText Returns Integer
12149>>>        If (sText = "No") ;            Function_Return RO_NO
12152>>>        Else If (sText = "Ignore Change") ;            Function_Return RO_IGNORECHANGE
12156>>>        Else If (sText = "Accept Change") ;            Function_Return RO_ACCEPTCHANGE
12160>>>        Else If (sText = "Error On Change") ;            Function_Return RO_ERRORONCHANGE
12164>>>    End_Function
12165>>>    
12165>>>    
12165>>>    
12165>>>    // Convert a Generate_Record_ID_Method attribute value to the
12165>>>    // corresponding text.
12165>>>    //
12165>>>    Function ROValueToText Integer iAttrValue Returns String
12167>>>        If (iAttrValue = RO_NO) ;            Function_Return "No"
12170>>>        Else If (iAttrValue = RO_IGNORECHANGE) ;            Function_Return "Ignore Change"
12174>>>        Else If (iAttrValue = RO_ACCEPTCHANGE) ;            Function_Return "Accept Change"
12178>>>        Else If (iAttrValue = RO_ERRORONCHANGE) ;            Function_Return "Error On Change"
12182>>>    End_Function
12183>>>    
12183>>>    
12183>>>    
12183>>>    // Return the text f the last error geneated by the driver.
12183>>>    //
12183>>>    Function LastDriverError Returns String
12185>>>        String  sDriverID
12185>>>        String  sLastError
12185>>>        String  sLastErrorLength
12185>>>        Integer iLastErrorLength
12185>>>        Integer iVoid
12185>>>        
12185>>>        // Initialize
12185>>>        Move "" to sLastError
12186>>>        
12186>>>        Get psDriverID to sDriverID
12187>>>        If (sDriverID <> "") Begin
12189>>>            // Get the text of the last error
12189>>>            Move (Repeat(Character(" "), 14)) to sLastErrorlength
12190>>>            Call_Driver 0 sDriverID Function CLI_GETDRIVERATTRIBUTE Callback 0 Passing sLastErrorLength iVoid DRVR_LASTERRORTEXTLENGTH Result iVoid
12195>>>            Move (Left(sLastErrorLength, Pos(Character(0), sLastErrorLength) - 1)) to iLastErrorLength
12196>>>            
12196>>>            If (iLastErrorLength > 0) Begin
12198>>>                Move (Repeat(Character(" "), iLastErrorLength + 1)) to sLastError
12199>>>                Call_Driver 0 sDriverID Function CLI_GETDRIVERATTRIBUTE Callback 0 Passing sLastError iVoid DRVR_LASTERRORTEXT Result iVoid
12204>>>                Move (Left(sLastError, Pos(Character(0), sLastError) - 1)) to sLastError
12205>>>            End
12205>>>>
12205>>>        End
12205>>>>
12205>>>        
12205>>>        Function_Return sLastError
12206>>>    End_Function
12207>>>    
12207>>>    
12207>>>    
12207>>>    // Enumerate the tables in a database
12207>>>    //
12207>>>    Function EnumerateTables String sLogin Returns Integer
12209>>>        String  sDriver
12209>>>        String  sVoid
12209>>>        Integer iNumTables
12209>>>        Integer iVoid
12209>>>        
12209>>>        Get psDriverID to sDriver
12210>>>        If (sDriver <> "") ;            Call_Driver 0 sDriver Function CLI_ENUMERATE_TABLES Callback 0 Passing sLogin sVoid iVoid Result iNumTables
12217>>>        
12217>>>        Function_Return iNumTables
12218>>>    End_Function
12219>>>    
12219>>>    
12219>>>    
12219>>>    // Returns the name of the table enumerated at the given position
12219>>>    //
12219>>>    Function TableName Integer iIndex Returns String
12221>>>        String  sDriver
12221>>>        String  sTableName
12221>>>        String  sVoid
12221>>>        Integer iVoid
12221>>>        
12221>>>        Get psDriverID to sDriver
12222>>>        If (sDriver <> "") Begin
12224>>>            Move (Repeat(" ", 255)) to sTableName
12225>>>            Call_Driver 0 sDriver Function CLI_TABLENAME Callback 0 Passing sTableName sVoid iIndex Result iVoid
12230>>>        End
12230>>>>
12230>>>        
12230>>>        Function_Return sTableName
12231>>>    End_Function
12232>>>    
12232>>>    
12232>>>    
12232>>>    // Returns the name of the schema of the table enumerated at the given position
12232>>>    //
12232>>>    Function SchemaName Integer iIndex Returns String
12234>>>        String  sDriver
12234>>>        String  sSchemaName
12234>>>        String  sVoid
12234>>>        Integer iVoid
12234>>>        
12234>>>        Get psDriverID to sDriver
12235>>>        If (sDriver <> "") Begin
12237>>>            Move (Repeat(" ", 255)) to sSchemaName
12238>>>            Call_Driver 0 sDriver Function CLI_TABLESCHEMA Callback 0 Passing sSchemaName sVoid iIndex Result iVoid
12243>>>        End
12243>>>>
12243>>>        
12243>>>        Function_Return sSchemaName
12244>>>    End_Function
12245>>>    
12245>>>    // Returns the type of the table enumerated at the given position.
12245>>>    // Types can be "TABLE", "VIEW", "SYSTEM TABLE", "GLOBAL TEMPORARY",
12245>>>    // "LOCAL TEMPORARY", "ALIAS", "SYNONYM"
12245>>>    Function TableType Integer iIndex Returns String
12247>>>        String  sDriver
12247>>>        String  sTableType
12247>>>        String  sVoid
12247>>>        Integer iVoid
12247>>>        
12247>>>        Get psDriverID to sDriver
12248>>>        If (sDriver <> "") Begin
12250>>>            Move (Repeat(" ", 25)) to sTableType
12251>>>            Call_Driver 0 sDriver Function CLI_TABLETYPE Callback 0 Passing sTableType sVoid iIndex Result iVoid
12256>>>        End
12256>>>>
12256>>>        
12256>>>        Function_Return sTableType
12257>>>    End_Function
12258>>>    
12258>>>    
12258>>>    // Returns the comment of the table enumerated at the given position
12258>>>    //
12258>>>    Function TableComment Integer iIndex Returns String
12260>>>        String  sDriver
12260>>>        String  sTableComment
12260>>>        String  sVoid
12260>>>        Integer iVoid
12260>>>        
12260>>>        Get psDriverID to sDriver
12261>>>        If (sDriver <> "") Begin
12263>>>            Move (Repeat(" ", 1024)) to sTableComment
12264>>>            Call_Driver 0 sDriver Function CLI_TABLECOMMENT Callback 0 Passing sTableComment sVoid iIndex Result iVoid
12269>>>        End
12269>>>>
12269>>>        
12269>>>        Function_Return sTableComment
12270>>>    End_Function
12271>>>    
12271>>>    // Enumerate the columns in a table
12271>>>    //
12271>>>    Function EnumerateColumns String sLogin String sTableName Returns Integer
12273>>>        String  sDriver
12273>>>        Integer iNumColumns
12273>>>        Integer iVoid
12273>>>        
12273>>>        Get psDriverID to sDriver
12274>>>        If (sDriver <> "") ;            Call_Driver 0 sDriver Function CLI_ENUMERATE_COLUMNS Callback 0 Passing sLogin sTablename iVoid Result iNumColumns
12281>>>        
12281>>>        Function_Return iNumColumns
12282>>>    End_Function
12283>>>    
12283>>>    
12283>>>    
12283>>>    // Returns the name of the column enumerated at the given position
12283>>>    //
12283>>>    Function ColumnName Integer iIndex Returns String
12285>>>        String  sDriver
12285>>>        String  sColumnName
12285>>>        String  sVoid
12285>>>        Integer iVoid
12285>>>        
12285>>>        Get psDriverID to sDriver
12286>>>        If (sDriver <> "") Begin
12288>>>            Move (Repeat(" ", 255)) to sColumnName
12289>>>            Call_Driver 0 sDriver Function CLI_COLUMNNAME Callback 0 Passing sColumnName sVoid iIndex Result iVoid
12294>>>        End
12294>>>>
12294>>>        
12294>>>        Function_Return sColumnName
12295>>>    End_Function
12296>>>    
12296>>>    // Convert a DataFlex date to a SQL date using the dummy zero date value.
12296>>>    //
12296>>>    Function CLIDFDateToSQLDate String sDriver Date dDFDate Returns String
12298>>>        
12298>>>        Integer iDriverIndex
12298>>>        
12298>>>        String sSQLDate
12298>>>        Integer iOrgDateFmt
12298>>>        Integer iOrgDateSep
12298>>>        
12298>>>        // Change date format to military, SQL dates are military dates
12298>>>        Get_Attribute DF_DATE_FORMAT to iOrgDateFmt
12301>>>        Get_Attribute DF_DATE_SEPARATOR to iOrgDateSep
12304>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_MILITARY
12307>>>        Set_Attribute DF_DATE_SEPARATOR to (Ascii('-'))
12310>>>        
12310>>>        If (Integer(dDFDate = 0)) Begin
12312>>>            // Return the dummy zero date
12312>>>            Get DriverIndex sDriver to iDriverIndex
12313>>>            If (iDriverIndex <> 0) Begin
12315>>>                Get_Attribute DF_DRIVER_DUMMY_ZERO_DATE_VALUE of iDriverIndex to sSQLDate
12318>>>            End
12318>>>>
12318>>>            Else Begin
12319>>>                Move '0001-01-01' to sSQLDate
12320>>>            End
12320>>>>
12320>>>        End
12320>>>>
12320>>>        Else Begin
12321>>>            Move dDFDate to sSQLDate
12322>>>        End
12322>>>>
12322>>>        
12322>>>        // Change date format back to original
12322>>>        Set_Attribute DF_DATE_FORMAT to iOrgDateFmt
12325>>>        Set_Attribute DF_DATE_SEPARATOR to iOrgDateSep
12328>>>        
12328>>>        Function_Return sSQLDate
12329>>>    End_Function
12330>>>    
12330>>>    
12330>>>    
12330>>>    // Convert a SQL date to a DataFlex date using the dummy zero date value.
12330>>>    Function CLISQLDateToDFDate String sDriver String sSQLDate Returns Date
12332>>>        
12332>>>        Integer iDriverIndex
12332>>>        
12332>>>        Date dDFDate
12332>>>        String sDummyDateValue
12332>>>        Integer iOrgDateFmt
12332>>>        Integer iOrgDateSep
12332>>>        
12332>>>        // Change date format to military, SQL dates are military dates
12332>>>        Get_Attribute DF_DATE_FORMAT to iOrgDateFmt
12335>>>        Get_Attribute DF_DATE_SEPARATOR to iOrgDateSep
12338>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_MILITARY
12341>>>        Set_Attribute DF_DATE_SEPARATOR to (Ascii('-'))
12344>>>        
12344>>>        // We only need to convert if the date is the dummy zero date value
12344>>>        Get DriverIndex sDriver to iDriverIndex
12345>>>        If (iDriverIndex <> 0) Begin
12347>>>            Get_Attribute DF_DRIVER_DUMMY_ZERO_DATE_VALUE of iDriverIndex to sDummyDateValue
12350>>>        End
12350>>>>
12350>>>        Else Begin
12351>>>            Move '0001-01-01' to sDummyDateValue
12352>>>        End
12352>>>>
12352>>>        If (sDummyDateValue = sSQLDate) ;            Move 0 to dDFDate
12355>>>        Else ;            Move sSQLDate to dDFDate
12357>>>        
12357>>>        // Change date format back to original
12357>>>        Set_Attribute DF_DATE_FORMAT to iOrgDateFmt
12360>>>        Set_Attribute DF_DATE_SEPARATOR to iOrgDateSep
12363>>>        
12363>>>        Function_Return dDFDate
12364>>>    End_Function
12365>>>    
12365>>>    Function DriverIndex String sDriver Returns Integer
12367>>>        
12367>>>        String  sCurrentDriver
12367>>>        Integer iNumberOfDrivers iDriver iCount
12367>>>        
12367>>>        Move 0 to iDriver
12368>>>        
12368>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
12371>>>        For iCount from 1 to iNumberOfDrivers
12377>>>>
12377>>>            
12377>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
12380>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriver) ) Begin
12382>>>                Move iCount to iDriver
12383>>>            End
12383>>>>
12383>>>        Loop
12384>>>>
12384>>>        
12384>>>        Function_Return iDriver
12385>>>        
12385>>>    End_Function
12386>>>    
12386>>>    
12386>>>    // Redirect an exisitng connection. The existing connection
12386>>>    // will point to another database but all tables will stay
12386>>>    // open!
12386>>>    Function RedirectConnection String sOldConnection String sNewConnection Returns Integer
12388>>>        String  sDriver
12388>>>        String  sVoid
12388>>>        Integer iResult
12388>>>        Integer iVoid
12388>>>        
12388>>>        Get psDriverID to sDriver
12389>>>        If (sDriver <> "") Begin
12391>>>            Call_Driver 0 sDriver Function CLI_REDIRECTCONNECTION Callback 0 Passing sOldConnection sNewConnection iVoid Result iResult
12396>>>        End
12396>>>>
12396>>>        Function_Return iResult
12397>>>    End_Function
12398>>>    
12398>>>    // Redirect a connection of a connection ID
12398>>>    // sConnectionId must contain a valid ConnectionId ("DFCONNID=MyID")
12398>>>    // sConnectString must contain a valid connectstring ("SERVER=MyServer;DATABASE=MyDatabase;UID=MyName;PWD=MyPassword")
12398>>>    //
12398>>>    // RedirectIDConnectString will redirect from the old connection (Server/Database the connectionId currently points to)
12398>>>    // to the new connection (Server/Database specified in sConnectString)
12398>>>    // All opened tables will be moved from old connection to new connection. (Tables must have identical structure in both connections)
12398>>>    //
12398>>>    // If bKeepLoggedIn = false, the new connection will be logged in, the old connection will be logged out
12398>>>    // If bKeepLoggedIn = true, connections will remain open and re-used on next redirectIdConnection
12398>>>    //
12398>>>    // Returns:
12398>>>    //     0 when the redirection was successful.
12398>>>    //     1 if the connection ID does not exist or can not be found.
12398>>>    //     2 login into the new connection failed.
12398>>>    //
12398>>>    Function RedirectIdConnectString String sConnectionId String sConnectString Boolean bKeepLoggedIn Returns Integer
12400>>>        String  sDriver
12400>>>        String  sVoid
12400>>>        Integer iResult
12400>>>        
12400>>>        Integer iOption
12400>>>        
12400>>>        // iOption
12400>>>        // 0 = RedirectConnection
12400>>>        // 1 = RedirectIdConnectString
12400>>>        // 2 = RedirectIdConnectStringKeepLoggedIn
12400>>>        If (bKeepLoggedIn) Begin
12402>>>            Move 2 to iOption
12403>>>        End
12403>>>>
12403>>>        Else Begin
12404>>>            Move 1 to iOption
12405>>>        End
12405>>>>
12405>>>        
12405>>>        Get psDriverID to sDriver
12406>>>        If (sDriver <> "") Begin
12408>>>            Call_Driver 0 sDriver Function CLI_REDIRECTCONNECTION Callback 0 Passing sConnectionId sConnectString iOption Result iResult
12413>>>        End
12413>>>>
12413>>>        Function_Return iResult
12414>>>    End_Function
12415>>>    
12415>>>    
12415>>>    // Create a DataFlex side connection id that can be used later on.
12415>>>    //
12415>>>    Function CreateConnectionID String sID String sConnStr Integer iOpt Returns Integer
12417>>>        String  sDriver
12417>>>        Integer iResult
12417>>>        Integer iOptions
12417>>>        
12417>>>        Get psDriverID to sDriver
12418>>>        If (Num_Arguments = 2) ;            Move 0 to iOptions
12421>>>        Else ;            Move iOpt to iOptions
12423>>>        If (sDriver <> "") Begin
12425>>>            Call_Driver 0 sDriver Function CLI_CREATECONNECTIONID Callback 0 Passing sID sConnStr iOptions Result iResult
12430>>>        End
12430>>>>
12430>>>        Function_Return iResult
12431>>>    End_Function
12432>>>    
12432>>>    
12432>>>    
12432>>>    // Delete a DataFlex side connection id.
12432>>>    //
12432>>>    Function DeleteConnectionID String sID Integer iIndex Returns Integer
12434>>>        String  sDriver
12434>>>        Integer iResult
12434>>>        String sVoid
12434>>>        
12434>>>        Get psDriverID to sDriver
12435>>>        If (sDriver <> "") Begin
12437>>>            Call_Driver 0 sDriver Function CLI_DELETECONNECTIONID Callback 0 Passing sID sVoid iIndex Result iResult
12442>>>        End
12442>>>>
12442>>>        Function_Return iResult
12443>>>    End_Function
12444>>>    
12444>>>End_Class
12445>Use vWin32fh.pkg
Including file: vWin32fh.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\vwin32fh\vWin32fh.pkg)
12445>>>// This code is part of VDF GUIdance
12445>>>// Visit us @ http://www.vdf-guidance.com
12445>>>// e-Mail us @ info@vdf-guidance.com
12445>>>// VDF GUIdance is a mutual project of
12445>>>// Frank Vandervelpen - Vandervelpen Systems and
12445>>>// Wil van Antwerpen  - Antwise Solutions
12445>>>// All software source code should be used <<AS IS>> without any warranty.
12445>>>//
12445>>>//
12445>>>// *** Windows 32bit file handling wrapper class ***
12445>>>//
12445>>>
12445>>>// 05-09-2000 **WvA: Changed namingconvention of all classes and methods to new standard
12445>>>//                   This may be painfull for some of you, but it was really needed as it was
12445>>>//                   getting messy. The "vs" -prefix we used before was confusing and could
12445>>>//                   unintentionally have been interpreted as "Vdf-GUIdance String".
12445>>>//
12445>>>// The used naming-convention is:
12445>>>//     - a prefix of "vWin32_" for every external function declaration
12445>>>//     - a prefix of the letter "v" for the full API name for the vdf-wrapper function.
12445>>>//
12445>>>// By using this we are guarding ourselves for conflicts with variable declarations
12445>>>// of DataAccess in the future.
12445>>>// Or at least almost as the letter "v" is now also synonym for variant (duh~!)
12445>>>//
12445>>>// mm-dd-yyyy Author Description
12445>>>//
12445>>>//                   vSHGetFolderPath added to retrieve the new shell folders
12445>>>//                   vGetWindowsDirectory
12445>>>//
12445>>>//                   vGetTempFileName
12445>>>//                   vGetTempPath
12445>>>// 11-17-2001 **WvA: Removed User Interface Error popups such as Error handling.
12445>>>//                   This is an absolute need for WebApp. We expect you to handle the
12445>>>//                   error in your application anyways. Changed this for:
12445>>>//                   vDeleteFile, vCopyFile, vMoveFile and vRenameFile
12445>>>// 03-02-2002 **WvA: vRemoveDirectory added
12445>>>// 03-11-2002 **WvA: The parameter lpdword in the external function declaration for
12445>>>//                   vWin32_SHBrowsForFolder can cause compiler errors.
12445>>>//                   It is renamed too avoid this.
12445>>>// 11-11-2002 **WvA: Codecleanup, vcSelectFile_Dialog is now cvSelectFile_Dialog, its
12445>>>//                   function vSelectedFileName is now just SelectedFileName
12445>>>//                   Removed the local keyword in the variable declarations
12445>>>// 10-17-2003 **WvA: Cleaned up function vSelect_File and added code to destroy the dynamically
12445>>>//                   created file-open dialog
12445>>>// 02-12-2004 **WvA: Allan Ankerstjeme pointed me into a bug for the vCreateTempFileInPath
12445>>>//                   in that it didn't exactly return the correct filename of the file created.
12445>>>//                   This has now been taken care of.
12445>>>// 02-19-2004 **WvA: Removed all API declarations from the package itself to improve readability
12445>>>//                   These declarations are now included from the vWin32fh header file.
12445>>>// 02-19-2004 **WvA: Changed the default way in which the standard file handling works
12445>>>//                   Before today one could always undo the operation, as of now you cannot as
12445>>>//                   the default was a silly one using unnecessary resources (mainly diskspace)
12445>>>//                   Since i don't really expect someone to use that feature it has been removed.
12445>>>//                   One can however restore to the old way of handling by simply calling the
12445>>>//                   vWin32fhCompatibilityMode procedure ONE time before accessing any of the
12445>>>//                   filehandling operations
12445>>>// 02-19-2004 **WvA: The functions ParseFolderName, ParseFileName and ParseFileExtenstion added
12445>>>//                   as well as the StringFromRightOfChar function.
12445>>>// 02-19-2004 **WvA: sfoFormatDisk function added which can use to format a floppydisk
12445>>>//                   DISABLED now as testing shows that it does not work as advertised...
12445>>>// 02-20-2004 **WvA: The function vDDE_Error_Handler didn't pass the errornumber on to the DDE_Error_To_String function
12445>>>//                   Moved the hardcoded strings from vDDE_Error_Handler to define declarations for easier translation later on.
12445>>>// 09-10-2004 **WvA: Added the ToAnsi function to the fileoperations method so that
12445>>>//                   extended characters are treated ok too.
12445>>>//                   Reported by Flemming from
12445>>>// 12-17-2004 **WvA: Changed vFilePathExists to be global, reported by Peter van Mil
12445>>>// 12-28-2004 **WvA: WebApp compatibility added by introducing compiler directives
12445>>>// 03-10-2006 **WvA: Added more CSIDL types to our header file for use with the vSHGetFolderPath function
12445>>>// 01-02-2007 **WvA: Set NoChangeDir_State on vSelect_File and vSelectSaveFile to True but changed it back due to side effects.
12445>>>//                   Added vSelectSavefile function to create a file save dialog
12445>>>//                   Fixed ParseFolderName which was horribly broken (thanks for the reports)
12445>>>//                   Added vParentPath function to retrieve the parent "node" of a path
12445>>>// 01-04-2008 **WvA: Fixed vCreateTempFileInPath as the function wasn't working
12445>>>// 10-04-2009 **WvA: Added vshCreateDirectoryEx from Micheal Mullan, moved filedialogs to cvFileDialogs.pkg
12445>>>// 01-11-2010 **WvA: Added vWin32_APIFilesize as supplied by Renato Villa, to get the filesize of the specified file. See http://support.dataaccess.com/forums/showthread.php?t=41982
12445>>>// 10-02-2011 **WvA: Added vCSIDL_SYSTEMX86, courtesy of Ola Eldoy for pointing this out and providing the define statement.
12445>>>// 20-12-2012 **WvA: Default behavior on copy/move is now to autocreate subfolders, tip by Frank Cheng
12445>>>// 29-09-2014 **WvA: Added function vFolderFileCount to count the number of files in a folder, add vCSIDL_PROGRAM_FILESx86
12445>>>// 04-10-2014 **WvA: Added extra checks on vFilePathExists and vFolderExists courtesy of Nils Svedmyr
12445>>>
12445>>>Use File_Dlg.pkg      // Contains OpenDialog class definition
12445>>>Use cvFileDialogs.pkg
Including file: cvFileDialogs.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\vwin32fh\cvFileDialogs.pkg)
12445>>>>>//***************************************************************************
12445>>>>>//*
12445>>>>>//* Class:        cvSaveAsDialog
12445>>>>>//* Package Name: cvFileDialogs.pkg
12445>>>>>//*
12445>>>>>//***************************************************************************
12445>>>>>
12445>>>>>Use File_dlg.pkg
12445>>>>>
12445>>>>>// *WvA: 13-01-1999 Created
12445>>>>>// The Class cSelectFile_Dialog is created to support the function Select_File
12445>>>>>// This function opens the Windows standard file open dialog and returns the selected
12445>>>>>// file_name.
12445>>>>>Class cvSelectFile_Dialog is an OpenDialog
12446>>>>>
12446>>>>>    Procedure Construct_Object Integer iImage_Id
12448>>>>>        Forward Send Construct_Object iImage_Id
12450>>>>>        Set HideReadOnly_State to True
12451>>>>>    End_Procedure
12452>>>>>
12452>>>>>    Function SelectedFileName Returns String
12454>>>>>        String sFileName
12454>>>>>        Move "" to sFileName
12455>>>>>        If (Show_Dialog(Self)) Begin
12457>>>>>            Move (RTrim(File_Name(Self))) to sFileName
12458>>>>>        End
12458>>>>>>
12458>>>>>        Function_Return sFileName
12459>>>>>    End_Function
12460>>>>>End_Class
12461>>>>>
12461>>>>>// *WvA: 13-01-1999 Created
12461>>>>>// This function opens the Windows standard file open dialog and returns the selected
12461>>>>>// file_name. Returns '' if the user didn't make a selection.
12461>>>>>// **WvA: 17-10-2003 Cleaned up and added code to destroy the dynamically created
12461>>>>>//                   file-open dialog
12461>>>>>Function vSelect_File Global String sSupportedFileTypes String sCaptionText String sInitialFolder Returns String
12463>>>>>    String sSelectedFile
12463>>>>>    Integer hoOpenFileDialog
12463>>>>>
12463>>>>>    Object oOpenFileDialog is a cvSelectFile_Dialog
12465>>>>>
12465>>>>>        Set Dialog_Caption    to sCaptionText
12466>>>>>        Set Filter_String     to sSupportedFileTypes
12467>>>>>        Set Initial_Folder    to sInitialFolder
12468>>>>>
12468>>>>>        Move Self       to hoOpenFileDialog
12469>>>>>    End_Object
12470>>>>>
12470>>>>>    Get SelectedFileName of hoOpenFileDialog to sSelectedFile
12471>>>>>    Send Destroy_Object to hoOpenFileDialog
12472>>>>>    Function_Return sSelectedFile
12473>>>>>End_Function
12474>>>>>
12474>>>>>Class cvSaveAsDialog is a SaveAsDialog
12475>>>>>
12475>>>>>    Procedure Construct_Object
12477>>>>>        Forward Send Construct_Object
12479>>>>>        Set HideReadOnly_State to True
12480>>>>>    End_Procedure
12481>>>>>
12481>>>>>    Function SelectedFileName Returns String
12483>>>>>        String sFileName
12483>>>>>        Move "" to sFileName
12484>>>>>        If (Show_Dialog(Self)) Begin
12486>>>>>            Move (RTrim(File_Name(Self))) to sFileName
12487>>>>>        End
12487>>>>>>
12487>>>>>        Function_Return sFileName
12488>>>>>    End_Function
12489>>>>>
12489>>>>>End_Class
12490>>>>>
12490>>>>>// Added optional default filename as suggested by Nils
12490>>>>>Function vSelectSaveFile Global String sSupportedFileTypes String sCaptionText String sInitialFolder String sDefaultFileName Returns String
12492>>>>>    String sSelectedFile
12492>>>>>    Integer hoDialog
12492>>>>>
12492>>>>>    Move "" to sSelectedFile
12493>>>>>    Get Create (RefClass(cvSaveAsDialog)) to hoDialog
12494>>>>>    If (hoDialog) Begin
12496>>>>>    //Set NoChangeDir_State Of hoDialog To True
12496>>>>>        Set Dialog_Caption    of hoDialog to sCaptionText
12497>>>>>        Set Filter_String     of hoDialog to sSupportedFileTypes
12498>>>>>        Set Initial_Folder    of hoDialog to sInitialFolder
12499>>>>>        If (Num_Arguments = 4) Begin
12501>>>>>            Set File_Title        of hoDialog to sDefaultFileName
12502>>>>>        End
12502>>>>>>
12502>>>>>        Get SelectedFileName  of hoDialog to sSelectedFile
12503>>>>>        Send Destroy of hoDialog
12504>>>>>    End
12504>>>>>>
12504>>>>>    Function_Return sSelectedFile
12505>>>>>End_Function
12506>>>Use Seq_chnl.pkg
12506>>>
12506>>>Use windows.pkg
12506>>>Use Dll.pkg
12506>>>Use vWin32fh.h       // Header file with WinAPI declarations
Including file: vwin32fh.h    (C:\Projects\DF20\DbUpdateFramework\Libraries\vwin32fh\vwin32fh.h)
12506>>>>>//TH-Header
12506>>>>>//*****************************************************************************************
12506>>>>>// Copyright (c)  2004 KURANT Project
12506>>>>>// All rights reserved.
12506>>>>>//
12506>>>>>// $FileName    : G:\Projects\vWin32fh\vWin32fh.h
12506>>>>>// $ProjectName : Windows 32 bits file handling
12506>>>>>// $Authors     : Wil van Antwerpen
12506>>>>>// $Created     : 19.02.2004  19:25
12506>>>>>// $Type        : BSD (as in do with it whatever you like)
12506>>>>>//
12506>>>>>// Contents:
12506>>>>>//  This file contains the Windows API external function call definitions and
12506>>>>>//  constants as they are used in the vWin32fh package.
12506>>>>>//*****************************************************************************************
12506>>>>>//TH-RevisionStart
12506>>>>>//TH-RevisionEnd
12506>>>>>
12506>>>>>Define CS_DDE_ERR_FILE_NOT_FOUND  For "The specified file was not found.\n"
12506>>>>>Define CS_DDE_ERR_PATH_NOT_FOUND  For "The specified path was not found.\n"
12506>>>>>Define CS_DDE_ERR_BAD_FORMAT      For "The .EXE file is invalid.\n"
12506>>>>>Define CS_DDE_ERR_ACCESSDENIED    For "The operating system denied access to the specified file.\n"
12506>>>>>Define CS_DDE_ERR_ASSOCINCOMPLETE For "The filename association is incomplete or invalid.\n"
12506>>>>>Define CS_DDE_ERR_DDEBUSY         For "The DDE transaction could not be completed because other DDE\ntransactions were being processed.\n"
12506>>>>>Define CS_DDE_ERR_DDEFAIL         For "The DDE transaction failed.\n"
12506>>>>>Define CS_DDE_ERR_DDETIMEOUT      For "The DDE transaction could not be completed,\nbecause the request timed out.\n"
12506>>>>>Define CS_DDE_ERR_DLLNOTFOUND     For "The specified dynamic-link library was not found.\n"
12506>>>>>Define CS_DDE_ERR_NOASSOC         For "There is no application associated with the given filename extension.\n"
12506>>>>>Define CS_DDE_ERR_OOM             For "There is not enough free memory available to complete the operation.\n"
12506>>>>>Define CS_DDE_ERR_PNF             For "The specified path was not found.\n"
12506>>>>>Define CS_DDE_ERR_SHARE           For "A sharing violation occurred.\n"
12506>>>>>Define CS_DDE_ERR_UNKNOWN_LINE1   For "Unknown DDE-error occurred.\nErrornumber"
12506>>>>>Define CS_DDE_ERR_UNKNOWN_LINE2   For ".\n"
12506>>>>>Define CS_DDE_ERR_HANDL_PAKTC     For "\nPress a key to continue...\n\n"
12506>>>>>Define CS_DDE_ERR_HANDL_CAPTION   For "a DDE-error occurred"
12506>>>>>
12506>>>>>
12506>>>>>Define vMax_Path     For |CI260
12506>>>>>Define vMinChar      For |CI$80
12506>>>>>Define vMaxChar      For |CI$7F
12506>>>>>Define vMinShort     For |CI$8000
12506>>>>>Define vMaxShort     For |CI$7FFF
12506>>>>>Define vMinLong      For |CI$80000000
12506>>>>>Define vMaxLong      For |CI$7FFFFFFF
12506>>>>>Define vMaxByte      For |CI$FF
12506>>>>>Define vMaxWord      For |CI$FFFF
12506>>>>>Define vMaxDword     For |CI$FFFFFFFF
12506>>>>>
12506>>>>>
12506>>>>>
12506>>>>>// For FindFirstFile
12506>>>>>Define vINVALID_HANDLE_VALUE   For |CI-1
12506>>>>>Define vINVALID_FILE_SIZE      For |CI$FFFFFFFF
12506>>>>>Define vERROR_NO_MORE_FILES    For |CI18
12506>>>>>
12506>>>>>// The defines below can be used to find out what kind of error has occurred if
12506>>>>>// the API-call ShellExecute is used.
12506>>>>>Define vERROR_FILE_NOT_FOUND   For |CI0002
12506>>>>>Define vERROR_PATH_NOT_FOUND   For |CI0003
12506>>>>>Define vERROR_BAD_FORMAT       For |CI0011
12506>>>>>Define vSE_ERR_ACCESSDENIED    For |CI0005
12506>>>>>Define vSE_ERR_ASSOCINCOMPLETE For |CI0027
12506>>>>>Define vSE_ERR_DDEBUSY         For |CI0030
12506>>>>>Define vSE_ERR_DDEFAIL         For |CI0029
12506>>>>>Define vSE_ERR_DDETIMEOUT      For |CI0028
12506>>>>>Define vSE_ERR_DLLNOTFOUND     For |CI0032
12506>>>>>Define vSE_ERR_FNF             For |CI0002
12506>>>>>Define vSE_ERR_NOASSOC         For |CI0031
12506>>>>>Define vSE_ERR_OOM             For |CI0008
12506>>>>>Define vSE_ERR_PNF             For |CI0003
12506>>>>>Define vSE_ERR_SHARE           For |CI0026
12506>>>>>
12506>>>>>
12506>>>>>// C-Structure
12506>>>>>//typedef struct _browseinfo {
12506>>>>>//    HWND hwndOwner;
12506>>>>>//    LPCITEMIDLIST pidlRoot;
12506>>>>>//    LPSTR pszDisplayName;
12506>>>>>//    LPCSTR lpszTitle;
12506>>>>>//    UINT ulFlags;
12506>>>>>//    BFFCALLBACK lpfn;
12506>>>>>//    LPARAM lParam;
12506>>>>>//    int iImage;
12506>>>>>//} BROWSEINFO, *PBROWSEINFO, *LPBROWSEINFO;
12506>>>>>
12506>>>>>//declare C structure struct_browseinfo
12506>>>>>//as documented in MSDN under Windows Shell API
12506>>>>>Struct tvBrowseInfo
12506>>>>>  Handle    hWndOwner
12506>>>>>  Pointer   pIDLRoot
12506>>>>>  Pointer   pszDisplayName
12506>>>>>  Pointer   lpszTitle
12506>>>>>  dWord     ulFlags
12506>>>>>  Pointer   lpfnCallback
12506>>>>>  dWord     lParam
12506>>>>>  DWord     iImage
12506>>>>>End_Struct // tvBrowseInfo
12506>>>>>
12506>>>>>// Browsing for directory.
12506>>>>>Define vBIF_RETURNONLYFSDIRS   For |CI$0001  // For finding a folder to start document searching
12506>>>>>Define vBIF_DONTGOBELOWDOMAIN  For |CI$0002  // For starting the Find Computer
12506>>>>>Define vBIF_STATUSTEXT         For |CI$0004  // Includes a status area in the dialog box.
12506>>>>>                                            // The callback function can set the status text by
12506>>>>>                                            // sending messages to the dialog box.
12506>>>>>Define vBIF_RETURNFSANCESTORS  For |CI$0008  // Only returns file system ancestors.
12506>>>>>
12506>>>>>Define vBIF_BROWSEFORCOMPUTER  For |CI$1000  // Browsing for Computers.
12506>>>>>Define vBIF_BROWSEFORPRINTER   For |CI$2000  // Browsing for Printers
12506>>>>>
12506>>>>>// message from browser
12506>>>>>//Define BFFM_INITIALIZED        1
12506>>>>>//Define BFFM_SELCHANGED         2
12506>>>>>
12506>>>>>// messages to browser
12506>>>>>//Define BFFM_SETSTATUSTEXT      (WM_USER + 100)
12506>>>>>//Define BFFM_ENABLEOK           (WM_USER + 101)
12506>>>>>//Define BFFM_SETSELECTION       (WM_USER + 102)
12506>>>>>
12506>>>>>
12506>>>>>External_function vWin32_SHBrowseForFolder "SHBrowseForFolder" shell32.dll ;  Pointer lpsBrowseInfo Returns dWord
12507>>>>>
12507>>>>>External_function vWin32_SHGetPathFromIDList "SHGetPathFromIDList" shell32.dll ;  Pointer pidList Pointer lpBuffer Returns dWord
12508>>>>>
12508>>>>>External_function vWin32_CoTaskMemFree "CoTaskMemFree" ole32.dll Pointer pV Returns Integer
12509>>>>>
12509>>>>>
12509>>>>>
12509>>>>>
12509>>>>>Struct tvSecurity_attributes
12509>>>>>  DWord   nLength
12509>>>>>  Pointer lpDescriptor
12509>>>>>  Integer bInheritHandle
12509>>>>>End_Struct // tvSecurity_attributes
12509>>>>>
12509>>>>>//nLength:
12509>>>>>// Specifies the size, in bytes, of this structure. Set this value to the size of the
12509>>>>>// SECURITY_ATTRIBUTES structure.
12509>>>>>// Windows NT: Some functions that use the SECURITY_ATTRIBUTES structure do not verify the
12509>>>>>// value of the nLength member. However, an application should still set it properly.
12509>>>>>// That ensures current, future, and cross-platform compatibility.
12509>>>>>//
12509>>>>>//lpSecurityDescriptor:
12509>>>>>// Points to a security descriptor for the object that controls the sharing of it.
12509>>>>>// If NULL is specified for this member, the object may be assigned the default security
12509>>>>>// descriptor of the calling process.
12509>>>>>//
12509>>>>>//bInheritHandle:
12509>>>>>// Specifies whether the returned handle is inherited when a new process is created.
12509>>>>>// If this member is TRUE, the new process inherits the handle.
12509>>>>>
12509>>>>>
12509>>>>>// BOOL CreateDirectory(
12509>>>>>//    LPCTSTR lpPathName,
12509>>>>>//    LPSECURITY_ATTRIBUTES lpSecurityAttributes  // pointer to a security descriptor
12509>>>>>//   );
12509>>>>>//
12509>>>>>// lpPathName
12509>>>>>//  Points to a null-terminated string that specifies the path of the directory
12509>>>>>//  to be created.
12509>>>>>//  There is a default string size limit for paths of MAX_PATH characters.
12509>>>>>//  This limit is related to how the CreateDirectory function parses paths.
12509>>>>>// lpSecurityAttributes
12509>>>>>//  Pointer to a SECURITY_ATTRIBUTES structure als called a security descriptor that
12509>>>>>//  determines whether the returned handle can be inherited by child processes.
12509>>>>>//  If lpSecurityAttributes is NULL, the handle cannot be inherited.
12509>>>>>// Returns:
12509>>>>>//  If the function succeeds, the return value is nonzero.
12509>>>>>//  If the function fails, the return value is zero. To get extended error information, call GetLastError.
12509>>>>>External_function vWin32_CreateDirectory "CreateDirectoryA" kernel32.dll ;  Pointer lpPathName Pointer lpSecurity_Attributes Returns Integer
12510>>>>>
12510>>>>>
12510>>>>>// lpPathName
12510>>>>>//  Points to a null-terminated string that specifies the path of the directory
12510>>>>>//  to be removed.
12510>>>>>//  There is a default string size limit for paths of MAX_PATH characters.
12510>>>>>// Returns:
12510>>>>>//  If the function succeeds, the return value is nonzero.
12510>>>>>//  If the function fails, the return value is zero. To get extended error information, call GetLastError.
12510>>>>>External_function vWin32_RemoveDirectory "RemoveDirectoryA" kernel32.dll ;  Pointer lpPathName Returns Integer
12511>>>>>
12511>>>>>
12511>>>>>
12511>>>>>// The ShellExecute function opens or prints a specified file. The file can be an
12511>>>>>// executable file or a document file.
12511>>>>>//
12511>>>>>// Operation can be one of the following:
12511>>>>>//    "OPEN"  The function opens the file specified by lpFile.
12511>>>>>//            The file can be an executable file or a document file.
12511>>>>>//            The file can be a folder to open.
12511>>>>>//    "PRINT" The function prints the file specified by lpFile.
12511>>>>>//            The file should be a document file. If the file is an executable file,
12511>>>>>//            the function opens the file, as if "open" had been specified.
12511>>>>>//  "EXPLORE" The function explores the folder specified by lpFile.
12511>>>>>//
12511>>>>>// Return Values:
12511>>>>>//
12511>>>>>// If the function succeeds, the return value is the instance handle of the application that
12511>>>>>// was run, or the handle of a dynamic data exchange (DDE) server application.
12511>>>>>// If the function fails, the return value is an error value that is less than or equal to 32.
12511>>>>>//
12511>>>>>// The following table lists these error values:
12511>>>>>// Public Const ERROR_FILE_NOT_FOUND = 2&
12511>>>>>// Public Const ERROR_PATH_NOT_FOUND = 3&
12511>>>>>// Public Const ERROR_BAD_FORMAT = 11&
12511>>>>>// Public Const SE_ERR_ACCESSDENIED = 5
12511>>>>>// Public Const SE_ERR_ASSOCINCOMPLETE = 27
12511>>>>>// Public Const SE_ERR_DDEBUSY = 30
12511>>>>>// Public Const SE_ERR_DDEFAIL = 29
12511>>>>>// Public Const SE_ERR_DDETIMEOUT = 28
12511>>>>>// Public Const SE_ERR_DLLNOTFOUND = 32
12511>>>>>// Public Const SE_ERR_FNF = 2
12511>>>>>// Public Const SE_ERR_NOASSOC = 31
12511>>>>>// Public Const SE_ERR_OOM = 8
12511>>>>>// Public Const SE_ERR_PNF = 3
12511>>>>>// Public Const SE_ERR_SHARE = 26
12511>>>>>
12511>>>>>
12511>>>>>
12511>>>>>// Code to open the program that is associated with the selected file.
12511>>>>>//
12511>>>>>// External function call used in Procedure DoStartDocument
12511>>>>>External_function vWin32_ShellExecute "ShellExecuteA" shell32.dll ;  Handle hWnd ;  Pointer lpOperation ;  Pointer lpFile ;  Pointer lpParameters ;  Pointer lpDirectory ;  Dword iShowCmd Returns Handle
12512>>>>>
12512>>>>>
12512>>>>>
12512>>>>>
12512>>>>>Define vFO_MOVE                For |CI$0001
12512>>>>>Define vFO_COPY                For |CI$0002
12512>>>>>Define vFO_DELETE              For |CI$0003
12512>>>>>Define vFO_RENAME              For |CI$0004
12512>>>>>
12512>>>>>Define vFOF_MULTIDESTFILES     For |CI$0001
12512>>>>>Define vFOF_CONFIRMMOUSE       For |CI$0002
12512>>>>>Define vFOF_SILENT             For |CI$0004  // don't create progress/report
12512>>>>>Define vFOF_RENAMEONCOLLISION  For |CI$0008
12512>>>>>Define vFOF_NOCONFIRMATION     For |CI$0010  // Don't prompt the user.
12512>>>>>Define vFOF_WANTMAPPINGHANDLE  For |CI$0020  // Fill in SHFILEOPSTRUCT.hNameMappings
12512>>>>>                                          // Must be freed using SHFreeNameMappings
12512>>>>>Define vFOF_ALLOWUNDO          For |CI$0040
12512>>>>>Define vFOF_FILESONLY          For |CI$0080  // on *.*, do only files
12512>>>>>Define vFOF_SIMPLEPROGRESS     For |CI$0100  // means don't show names of files
12512>>>>>Define vFOF_NOCONFIRMMKDIR     For |CI$0200  // don't confirm making any needed dirs
12512>>>>>
12512>>>>>Struct tvShFileOpStruct
12512>>>>>  Handle  hWnd
12512>>>>>  Integer wFunc
12512>>>>>  Pointer pFrom
12512>>>>>  Pointer pTo
12512>>>>>  Short   fFlags
12512>>>>>  Short   fAnyOperationsAborted
12512>>>>>  Pointer hNameMappings
12512>>>>>  Pointer lpszProgressTitle      // only used if FOF_SIMPLEPROGRESS
12512>>>>>End_Struct // tvShFileOpStruct
12512>>>>>
12512>>>>>// hwnd
12512>>>>>//   Handle of the dialog box to use to display information about the status of the operation.
12512>>>>>
12512>>>>>// wFunc
12512>>>>>//   Operation to perform. This member can be one of the following values:
12512>>>>>//     FO_COPY     Copies the files specified by pFrom to the location specified by pTo.
12512>>>>>//     FO_DELETE   Deletes the files specified by pFrom (pTo is ignored).
12512>>>>>//     FO_MOVE     Moves the files specified by pFrom to the location specified by pTo.
12512>>>>>//     FO_RENAME   Renames the files specified by pFrom.
12512>>>>>
12512>>>>>// pFrom
12512>>>>>//   Pointer to a buffer that specifies one or more source file names. Multiple names must
12512>>>>>//   be null-separated. The list of names must be double null-terminated.
12512>>>>>
12512>>>>>// pTo
12512>>>>>//   Pointer to a buffer that contains the name of the destination file or directory. The
12512>>>>>//   buffer can contain mutiple destination file names if the fFlags member specifies
12512>>>>>//   FOF_MULTIDESTFILES. Multiple names must be null-separated. The list of names must be
12512>>>>>//   double null-terminated.
12512>>>>>
12512>>>>>// fAnyOperationsAborted
12512>>>>>//   Value that receives TRUE if the user aborted any file operations before they
12512>>>>>//   were completed or FALSE otherwise.
12512>>>>>
12512>>>>>
12512>>>>>// Performs a copy, move, rename, or delete operation on a file system object.
12512>>>>>// This can be a file or a folder.
12512>>>>>// With thanks to Andrew S Kaplan
12512>>>>>External_function vWin32_SHFileOperation "SHFileOperationA" Shell32.dll ;        Pointer lpFileOp Returns Integer
12513>>>>>
12513>>>>>
12513>>>>>// Thanks To Oliver Nelson for posting this code on the newsgroups
12513>>>>>External_function vWin32_GetWindowsDirectory "GetWindowsDirectoryA" kernel32.dll ;                           Pointer lpBuffer Integer nSize Returns Integer
12514>>>>>
12514>>>>>
12514>>>>>
12514>>>>>// Courtesy Of Vincent Oorsprong
12514>>>>>//External_Function vWin32_GetTempFileName "GetTempFileNameA" Kernel32.Dll ;
12514>>>>>//   Pointer lpPathName ;
12514>>>>>//   Pointer lpPrefixString ;
12514>>>>>//   Integer uUnique ;
12514>>>>>//   Pointer lpTempFileName ;
12514>>>>>//   Returns Integer
12514>>>>>// **WvA: 28-04-2005 Changed string parameter type into pointers
12514>>>>>External_function vWin32_GetTempFileName "GetTempFileNameA" kernel32.dll Pointer lpsPath ;        Pointer lpsPrefix Integer iUnique Pointer pLoad Returns Integer
12515>>>>>
12515>>>>>External_function vWin32_GetTempPath "GetTempPathA" Kernel32.Dll ;   Dword nBufferLength ;   Pointer lpBuffer ;   Returns Integer
12516>>>>>
12516>>>>>External_function vWin32_DeleteFile "DeleteFileA" Kernel32.Dll ;   Pointer lpFileName ;   Returns Integer
12517>>>>>
12517>>>>>// from:
12517>>>>>// http://msdn.microsoft.com/library/default.asp?url=/library/en-us/shellcc/platform/shell/reference/enums/csidl.asp
12517>>>>>//
12517>>>>>Define vCSIDL_FLAG_CREATE       For |CI$8000 // IE5+, use this to create a special folder
12517>>>>>Define vCSIDL_ADMIN_TOOLS       For |CI$0030 // IE5+, The file system directory that is used to store administrative tools for an individual user
12517>>>>>Define vCSIDL_ALT_STARTUP       For |CI$001D // The file system directory that corresponds to the user's nonlocalized Startup program group
12517>>>>>Define vCSIDL_APPDATA           For |CI$001A // Version 4.71. The file system directory that serves as a common repository for application-specific data. A typical path is C:\Documents and Settings\<username>\Application Data
12517>>>>>Define vCSIDL_BITBUCKET         For |CI$000A // The virtual folder containing the objects in the user's Recycle Bin
12517>>>>>Define vCSIDL_CDBURN_AREA       For |CI$003B // IE6+ The file system directory acting as a staging area for files waiting to be written to CD. A typical path is C:\Documents and Settings\<username>\Local Settings\Application Data\Microsoft\CD Burning
12517>>>>>Define vCSIDL_COMMON_ADMINTOOLS For |CI$002F // IE5+ The file system directory containing administrative tools for all users of the computer
12517>>>>>Define vCSIDL_COMMON_ALTSTARTUP For |CI$001E // The file system directory that corresponds to the nonlocalized Startup program group for all users
12517>>>>>Define vCSIDL_COMMON_APPDATA    For |CI$0023 // IE5+ The file system directory containing application data for all users. A typical path is C:\Documents and Settings\All Users\Application Data
12517>>>>>Define vCSIDL_COMMON_DESKTOPDIRECTORY for |CI$0019 // WinNT+ Only, The file system directory that contains files and folders that appear on the desktop for all users. A typical path is C:\Documents and Settings\All Users\Desktop
12517>>>>>Define vCSIDL_COMMON_DOCUMENTS  For |CI$002E // IE5+ The file system directory that contains documents that are common to all users. A typical paths is C:\Documents and Settings\All Users\Documents
12517>>>>>Define vCSIDL_COMMON_FAVORITES  For |CI$001F // The file system directory that serves as a common repository for favorite items common to all users
12517>>>>>Define vCSIDL_COMMON_MUSIC      For |CI$0035 // IE6+ The file system directory that serves as a repository for music files common to all users. A typical path is C:\Documents and Settings\All Users\Documents\My Music
12517>>>>>Define vCSIDL_COMMON_PICTURES   For |CI$0036 // The file system directory that serves as a repository for image files common to all users. A typical path is C:\Documents and Settings\All Users\Documents\My Pictures
12517>>>>>Define vCSIDL_COMMON_PROGRAMS   For |CI$0017 // WinNT+ The file system directory that contains the directories for the common program groups that appear on the Start menu for all users. A typical path is C:\Documents and Settings\All Users\Start Menu\Programs
12517>>>>>Define vCSIDL_COMMON_STARTMENU  For |CI$0016 // WinNT+ The file system directory that contains the programs and folders that appear on the Start menu for all users. A typical path is C:\Documents and Settings\All Users\Start Menu
12517>>>>>Define vCSIDL_COMMON_STARTUP    For |CI$0018 // WinNT+ The file system directory that contains the programs that appear in the Startup folder for all users. A typical path is C:\Documents and Settings\All Users\Start Menu\Programs\Startup
12517>>>>>Define vCSIDL_COMMON_TEMPLATES  For |CI$002D // WinNT+ The file system directory that contains the templates that are available to all users. A typical path is C:\Documents and Settings\All Users\Templates
12517>>>>>Define vCSIDL_COMMON_VIDEO      For |CI$0037 // IE6+ The file system directory that serves as a repository for video files common to all users. A typical path is C:\Documents and Settings\All Users\Documents\My Videos
12517>>>>>Define vCSIDL_COMPUTERSNEARME   For |CI$003D // The folder representing other machines in your workgroup
12517>>>>>Define vCSIDL_CONNECTIONS       For |CI$0031 // The virtual folder representing Network Connections, containing network and dial-up connections
12517>>>>>Define vCSIDL_CONTROLS          For |CI$0003 // The virtual folder containing icons for the Control Panel applications
12517>>>>>Define vCSIDL_COOKIES           For |CI$0021 // The file system directory that serves as a common repository for Internet cookies. A typical path is C:\Documents and Settings\username\Cookies
12517>>>>>Define vCSIDL_DESKTOP           For |CI$0000 // The virtual folder representing the Windows desktop, the root of the namespace
12517>>>>>Define vCSIDL_DESKTOPDIRECTORY  For |CI$0010 // The file system directory used to physically store file objects on the desktop (not to be confused with the desktop folder itself). A typical path is C:\Documents and Settings\username\Desktop
12517>>>>>Define vCSIDL_DRIVES            For |CI$0011 // The virtual folder representing My Computer, containing everything on the local computer: storage devices, printers, and Control Panel. The folder may also contain mapped network drives
12517>>>>>Define vCSIDL_FAVORITES         For |CI$0006 // The file system directory that serves as a common repository for the user's favorite items. A typical path is C:\Documents and Settings\username\Favorites
12517>>>>>Define vCSIDL_FONTS             For |CI$0014 // A virtual folder containing fonts. A typical path is C:\Windows\Fonts
12517>>>>>Define vCSIDL_HISTORY           For |CI$0022 // The file system directory that serves as a common repository for Internet history items
12517>>>>>Define vCSIDL_INTERNET          For |CI$0001 // A virtual folder representing the Internet
12517>>>>>Define vCSIDL_INTERNET_CACHE    For |CI$0020 // Comctl4.72+, The file system directory that serves as a common repository for temporary Internet files. A typical path is C:\Documents and Settings\username\Local Settings\Temporary Internet Files
12517>>>>>Define vCSIDL_LOCAL_APPDATA     For |CI$001C // IE5+ The file system directory that serves as a data repository for local (nonroaming) applications. A typical path is C:\Documents and Settings\username\Local Settings\Application Data
12517>>>>>Define vCSIDL_MYDOCUMENTS       For |CI$000C // IE6+ The virtual folder representing the My Documents desktop item
12517>>>>>Define vCSIDL_MYMUSIC           For |CI$000D // The file system directory that serves as a common repository for music files. A typical path is C:\Documents and Settings\User\My Documents\My Music
12517>>>>>Define vCSIDL_MYPICTURES        For |CI$0027 // IE5+ The file system directory that serves as a common repository for image files. A typical path is C:\Documents and Settings\username\My Documents\My Pictures
12517>>>>>Define vCSIDL_MYVIDEO           For |CI$000E // IE6+ The file system directory that serves as a common repository for video files. A typical path is C:\Documents and Settings\username\My Documents\My Videos
12517>>>>>Define vCSIDL_NETHOOD           For |CI$0013 // A file system directory containing the link objects that may exist in the My Network Places virtual folder. It is not the same as CSIDL_NETWORK, which represents the network namespace root. A typical path is C:\Documents and Settings\username\NetHood
12517>>>>>Define vCSIDL_NETWORK           For |CI$0012 // A virtual folder representing Network Neighborhood, the root of the network namespace hierarchy
12517>>>>>Define vCSIDL_PERSONAL          For |CI$0005 // (Documents folder) IE6 The virtual folder representing the My Documents desktop item.
12517>>>>>                                             // This is equivalent to CSIDL_MYDOCUMENTS. Previous to Version 6.0. The file system directory used to physically store a user's common repository of documents. A typical path is C:\Documents and Settings\username\My Documents
12517>>>>>Define vCSIDL_PHOTOALBUMS       For |CI$0045 // Vista+ The virtual folder used to store photo albums, typically username\My Pictures\Photo Albums
12517>>>>>Define vCSIDL_PLAYLISTS         For |CI$003F // Vista+ The virtual folder used to store play albums, typically username\My Music\Playlists
12517>>>>>Define vCSIDL_PRINTERS          For |CI$0004 // The virtual folder containing installed printers
12517>>>>>Define vCSIDL_PRINTHOOD         For |CI$001B // The file system directory that contains the link objects that can exist in the Printers virtual folder. A typical path is C:\Documents and Settings\username\PrintHood
12517>>>>>Define vCSIDL_PROFILE           For |CI$0028 // IE5+ The user's profile folder. A typical path is C:\Documents and Settings\username
12517>>>>>Define vCSIDL_PROGRAM_FILES     For |CI$0026 // IE5+ The Program Files folder. A typical path is C:\Program Files
12517>>>>>Define vCSIDL_PROGRAM_FILESx86  for |CI$002A // The Program Files folder for x86 programs. A typical path is C:\Program Files (x86)
12517>>>>>Define vCSIDL_PROGRAM_FILES_COMMON For |CI$002B // IE5+, WinNT+ A folder for components that are shared across applications. A typical path is C:\Program Files\Common
12517>>>>>Define vCSIDL_PROGRAMS          For |CI$0002 // The file system directory that contains the user's program groups (which are themselves file system directories). A typical path is C:\Documents and Settings\username\Start Menu\Programs
12517>>>>>Define vCSIDL_RECENT            For |CI$0008 // The file system directory that contains shortcuts to the user's most recently used documents. A typical path is C:\Documents and Settings\username\My Recent Documents
12517>>>>>Define vCSIDL_RESOURCES         For |CI$0038 // undocumented
12517>>>>>Define vCSIDL_SAMPLE_MUSIC      For |CI$0040 // Vista+, The file system directory that contains sample music. A typical path is C:\Documents and Settings\username\My Documents\My Music\Sample Music
12517>>>>>Define vCSIDL_SAMPLE_PLAYLISTS  For |CI$0041 // Vista+, The file system directory that contains sample playlists. A typical path is C:\Documents and Settings\username\My Documents\My Music\Sample Playlists
12517>>>>>Define vCSIDL_SAMPLE_PICTURES   For |CI$0042 // Vista+, The file system directory that contains sample pictures. A typical path is C:\Documents and Settings\username\My Documents\My Pictures\Sample Pictures
12517>>>>>Define vCSIDL_SAMPLE_VIDEOS     For |CI$0043 // Vista+, The file system directory that contains sample videos. A typical path is C:\Documents and Settings\username\My Documents\My Videos\Sample Videos
12517>>>>>Define vCSIDL_SENDTO            For |CI$0009 // The file system directory that contains Send To menu items. A typical path is C:\Documents and Settings\username\SendTo
12517>>>>>Define vCSIDL_STARTMENU         For |CI$000B // The file system directory containing Start menu items. A typical path is C:\Documents and Settings\username\Start Menu
12517>>>>>Define vCSIDL_STARTUP           For |CI$0007 // The file system directory that corresponds to the user's Startup program group. The system starts these programs whenever any user logs onto Windows NT or starts Windows 95. A typical path is C:\Documents and Settings\username\Start Menu\Programs\Startup
12517>>>>>Define vCSIDL_SYSTEM            For |CI$0025 // The Windows System folder. A typical path is C:\Windows\System32
12517>>>>>Define vCSIDL_SYSTEMX86         For |CI$0029 //
12517>>>>>Define vCSIDL_TEMPLATES         For |CI$0015 // The file system directory that serves as a common repository for document templates. A typical path is C:\Documents and Settings\username\Templates
12517>>>>>Define vCSIDL_WINDOWS           For |CI$0024 // The Windows directory or SYSROOT. This corresponds to the %windir% or %SYSTEMROOT% environment variables. A typical path is C:\Windows
12517>>>>>
12517>>>>>
12517>>>>>//HRESULT SHGetFolderPath(
12517>>>>>//    HWND hwndOwner,
12517>>>>>//    int nFolder,
12517>>>>>//    HANDLE hToken,
12517>>>>>//    DWORD dwFlags,
12517>>>>>//    LPTSTR pszPath
12517>>>>>//);
12517>>>>>// This function is a superset of SHGetSpecialFolderPath, included with earlier versions of
12517>>>>>// the shell. It is implemented in a redistributable DLL, SHFolder.dll, that also simulates
12517>>>>>// many of the new shell folders on older platforms such as Windows 95, Windows 98, and
12517>>>>>// Windows NT 4.0. This DLL always calls the current platform's version of this function.
12517>>>>>// If that fails, it will try to simulate the appropriate behavior.
12517>>>>>//
12517>>>>>External_function vWin32_SHGetFolderPath "SHGetFolderPathA" SHFolder.Dll ;   Pointer hWnd ;   Integer nFolder ;   Pointer hToken ;   DWord   dwFlags ;   Pointer lpszPath ;   Returns Integer
12518>>>>>
12518>>>>>
12518>>>>>
12518>>>>>Struct tvWin32FindData
12518>>>>> Dword            dwFileAttributes
12518>>>>> Dword            ftCreationLowDateTime
12518>>>>> Dword            ftCreationHighDateTime
12518>>>>> dword            ftLastAccessLowDateTime
12518>>>>> Dword            ftLastAccessHighDateTime
12518>>>>> Dword            ftLastWriteLowDateTime
12518>>>>> Dword            ftLastWriteHighDateTime
12518>>>>> Dword            nFileSizeHigh
12518>>>>> Dword            nFileSizeLow
12518>>>>> Dword            dwReserved0
12518>>>>> Dword            dwReserved1
12518>>>>> UChar[vMax_Path] cFileName
12518>>>>> UChar[14]        cAlternateFileName
12518>>>>>End_Struct
12518>>>>>
12518>>>>>// Courtesy Of Vincent Oorsprong
12518>>>>>// lpFileName      : address of name of file to search for
12518>>>>>// lpFindFileData  : address of returned information
12518>>>>>External_function vWin32_FindFirstFile "FindFirstFileA"  Kernel32.dll Pointer lpFileName ;          Pointer lpFindFileData Returns Handle
12519>>>>>
12519>>>>>// Courtesy Of Vincent Oorsprong
12519>>>>>// hFindFile       : handle of search
12519>>>>>// lpFindFileData  : address of structure for data on found file
12519>>>>>External_function vWin32_FindNextFile "FindNextFileA" Kernel32.dll Handle hFindFile ;          Pointer lpFindFileData Returns Integer
12520>>>>>
12520>>>>>//
12520>>>>>// Unicode equivalents
12520>>>>>//
12520>>>>>// lpFileName      : address of name of file to search for
12520>>>>>// lpFindFileData  : address of returned information
12520>>>>>External_function vWin32W_FindFirstFile "FindFirstFileW"  Kernel32.dll Pointer lpFileName ;          Pointer lpFindFileData Returns Handle
12521>>>>>
12521>>>>>// hFindFile       : handle of search
12521>>>>>// lpFindFileData  : address of structure for data on found file
12521>>>>>External_function vWin32W_FindNextFile "FindNextFileW" Kernel32.dll Handle hFindFile ;          Pointer lpFindFileData Returns Integer
12522>>>>>
12522>>>>>
12522>>>>>// Courtesy Of Vincent Oorsprong
12522>>>>>//  hFindFile      : file search handle
12522>>>>>External_function vWin32_FindClose "FindClose" Kernel32.dll Handle hFindFile Returns Integer
12523>>>>>
12523>>>>>
12523>>>>>
12523>>>>>Struct tvFileTime
12523>>>>>  DWord dwLowDateTime
12523>>>>>  DWord dwHighDateTime
12523>>>>>End_Struct
12523>>>>>
12523>>>>>
12523>>>>>Struct tvSystemTime
12523>>>>>  UShort wYear
12523>>>>>  UShort wMonth
12523>>>>>  UShort wDayOfWeek
12523>>>>>  UShort wDay
12523>>>>>  UShort wHour
12523>>>>>  UShort wMinute
12523>>>>>  UShort wSecond
12523>>>>>  UShort wMilliSeconds
12523>>>>>End_Struct
12523>>>>>
12523>>>>>
12523>>>>>// Courtesy Of Vincent Oorsprong
12523>>>>>//  lpFileTime     : pointer to file time to convert
12523>>>>>//  lpSystemTime   : pointer to structure to receive system time
12523>>>>>External_function vWin32_FileTimeToSystemTime "FileTimeToSystemTime" Kernel32.Dll ;          Pointer lpFileTime Pointer lpsystemTime Returns Integer
12524>>>>>
12524>>>>>// Courtesy Of Vincent Oorsprong
12524>>>>>// This function formats the time in a picture-string passed
12524>>>>>//
12524>>>>>// Picture      Meaning
12524>>>>>//    h         Hours with no leading zero for single-digit hours; 12-hour clock
12524>>>>>//    hh        Hours with leading zero for single-digit hours; 12-hour clock
12524>>>>>//    H         Hours with no leading zero for single-digit hours; 24-hour clock
12524>>>>>//    HH        Hours with leading zero for single-digit hours; 24-hour clock
12524>>>>>//    m         Minutes with no leading zero for single-digit minutes
12524>>>>>//    mm        Minutes with leading zero for single-digit minutes
12524>>>>>//    s         Seconds with no leading zero for single-digit seconds
12524>>>>>//    ss        Seconds with leading zero for single-digit seconds
12524>>>>>//    t         One character time marker string, such as A or P
12524>>>>>//    tt        Multicharacter time marker string, such as AM or PM
12524>>>>>//
12524>>>>>// For example, to get the time string  "11:29:40 PM"
12524>>>>>//    use the following picture string: "hh" : "mm" : "ss tt"
12524>>>>>
12524>>>>>External_function vWin32_GetTimeFormat "GetTimeFormatA" Kernel32.Dll ;  Dword LCID Dword dwFlags Pointer lpsSystemTime Pointer lpFormat Pointer lpTimeStr ;  Integer cchTime Returns Integer
12525>>>>>
12525>>>>>
12525>>>>>// Courtesy Of Vincent Oorsprong
12525>>>>>// This function formats the date in a picture-string passed
12525>>>>>//
12525>>>>>// Picture      Meaning
12525>>>>>//    d         Day of month as digits with no leading zero for single-digit days.
12525>>>>>//    dd        Day of month as digits with leading zero for single-digit days.
12525>>>>>//    ddd       Day of week as a three-letter abbreviation. The function uses the
12525>>>>>//              LOCALE_SABBREVOAYMAME value associated with the specified locale.
12525>>>>>//    dddd      Day of week as its full name. The function uses the LOCALE_SDAYNAME
12525>>>>>//              value associated with the specified locale.
12525>>>>>//    M         Month as digits with no leading zero for single-digit months.
12525>>>>>//    MM        Month as digits with leading zero for single-digit months.
12525>>>>>//    MMM       Month as a three-letter abbreviation. The function uses the
12525>>>>>//              LOCALE_SABBREVMONTHNAME value associated with the specified locale.
12525>>>>>//    MMMM      Month as its full name. The function uses the LOCALE_SMONTHNAME value
12525>>>>>//              associated with the specified locale.
12525>>>>>//    y         Year as last two digits, but with no leading zero for years less than 10.
12525>>>>>//    yy        Year as last two digits, but with leading zero for years less than 10.
12525>>>>>//    yyyy      Year represented hy full four digits.
12525>>>>>//    gg        Period/era string. The function uses the CAL_SERASTRING value associated
12525>>>>>//              with the specified locale. This element is ignored if the date to be formatted
12525>>>>>//              does not have an associated era or period string.
12525>>>>>// For example, to get the date string  "Wed, Aug 31 94"
12525>>>>>// use the following picture string:    "ddd","MMM dd yy"
12525>>>>>
12525>>>>>External_function vWin32_GetDateFormat "GetDateFormatA" Kernel32.Dll ;  Dword LCID Dword dwFlags Pointer lpsSystemTime Pointer lpFormat Pointer lpDateStr ;  Integer cchDate Returns Integer
12526>>>>>
12526>>>>>Define LOCALE_NOUSEROVERRIDE    For |CI$80000000  //  do not use user overrides
12526>>>>>Define TIME_NOMIHUTESORSECONDS  For |CI$00000001  //  do not use minutes or seconds
12526>>>>>Define TIME_NOSECONDS           For |CI$00000002  //  do not use seconds
12526>>>>>Define TIME_NOTIMEMARKER        For |CI$00000004  //  do not use time marker
12526>>>>>Define TIME_FORCE24HOURFORMAT   For |CI$00000008  //  always use 24 hour format
12526>>>>>
12526>>>>>//  Date Flags for GetDateFormatW.
12526>>>>>//
12526>>>>>Define DATE_SHORTDATE           For |CI$00000001  //  use short date picture
12526>>>>>Define DATE_LONGDATE            For |CI$00000002  //  use long date picture
12526>>>>>Define DATE_USE_ALT_CALENDAR    For |CI$00000004  //  use alternate calendar (if any)
12526>>>>>
12526>>>>>
12526>>>>>External_function vWin32_SetLastError "SetLastError" Kernel32.Dll Dword dwLastError Returns Integer
12527>>>>>
12527>>>>>
12527>>>>>// **WvA: 20-02-2004
12527>>>>>// While i was testing the format capabilities i stumbled over a very
12527>>>>>// weird problem where it looks like that the integer value gets somehow translated
12527>>>>>// incorrectly into an unsigned integer.
12527>>>>>// I don't have the time to dive into this.. so added a workaround (and removed it again)
12527>>>>>// It does smell a bit fishy though
12527>>>>>// Tested it with the same results on both VDF7 and VDF9.1
12527>>>>>
12527>>>>>Define SHFMT_ID_DEFAULT        For |CI$0000FFFF // The default format ID
12527>>>>>Define SHFMT_OPT_DEFAULT       For |CI$00000000 // The default "Quick Format" option.
12527>>>>>Define SHFMT_OPT_FULL          For |CI$00000001 // Deselects the "Quick Format" option, providing a full format instead. This is useful when an unformatted disk is detected.
12527>>>>>Define SHFMT_OPT_SYSONLY       For |CI$00000002 // Selects the "Create an MS-DOS startup disk" option, creating a system boot disk.
12527>>>>>
12527>>>>>// Possible errors that can be returned by the shellformat function
12527>>>>>Define SHFMT_ERROR             For (|CI$FFFFFFFF+1) // An error occurred during the last format or no drive parameter passed. This does not indicate that the disk is unformatable.
12527>>>>>Define SHFMT_CANCEL            For (|CI$FFFFFFFE+1) // The last format was canceled.
12527>>>>>Define SHFMT_NOFORMAT          For (|CI$FFFFFFFD+1) // The drive cannot be formatted.
12527>>>>>
12527>>>>>
12527>>>>> // Courtesy Of Steve Walter,
12527>>>>> // USA Software, Inc
12527>>>>> // Format a disk
12527>>>>> // Called By:  Move (vWin32_ShFormatDrive(hWnd,0,$FFFF,1)) To dwReturn
12527>>>>>External_function vWin32_ShFormatDrive "SHFormatDrive" shell32.dll Handle hWnd ;         Integer iDrive Integer iFormatID Integer iOptions Returns DWORD
12528>>>>>
12528>>>>>// Michael Mullan.  I Wanted to create all the folders in one statement...
12528>>>>>
12528>>>>>// SHCreateDirectoryEx
12528>>>>>
12528>>>>>//    Note  This function is available through Microsoft Windows XP Service Pack 2 (SP2) and Windows Server 2003.
12528>>>>>//    It might be altered or unavailable in subsequent versions of Windows.
12528>>>>>//
12528>>>>>//    This function creates a file system folder whose fully qualified path is given by pszPath. If one or more
12528>>>>>//    of the intermediate folders do not exist, they are created as well. SHCreateDirectoryEx also verifies that
12528>>>>>//    the files are visible. If they are not visible, expect one of the following:
12528>>>>>//
12528>>>>>//        * If hwnd is set to a valid window handle, a message box is displayed warning the user that he or she
12528>>>>>//        might not be able to access the files. If the user chooses not to proceed, the function returns
12528>>>>>//        ERROR_CANCELLED.
12528>>>>>//        * If hwnd is set to NULL, no user interface is displayed and the function returns ERROR_CANCELLED.
12528>>>>>
12528>>>>>//        Returns ERROR_SUCCESS if successful. If the operation fails, other error codes can be returned,
12528>>>>>//        including those listed here. For values not specifically listed, see System Error Codes.
12528>>>>>//      161  ERROR_BAD_PATHNAME                The pszPath parameter was set to a relative path.
12528>>>>>//      206  ERROR_FILENAME_EXCED_RANGE     The path pointed to by pszPath is too long.
12528>>>>>//      3    ERROR_PATH_NOT_FOUND            The system cannot find the path pointed to by pszPath. The path may contain an invalid entry.
12528>>>>>//      80   ERROR_FILE_EXISTS                The directory exists.
12528>>>>>//      183  ERROR_ALREADY_EXISTS            The directory exists.
12528>>>>>//      1223 ERROR_CANCELLED                The user canceled the operation.
12528>>>>>
12528>>>>>//        int SHCreateDirectoryEx(
12528>>>>>//            HWND hwnd,
12528>>>>>//            LPCTSTR pszPath,
12528>>>>>//            const SECURITY_ATTRIBUTES *psa
12528>>>>>//        );
12528>>>>>
12528>>>>>External_function vWin32_SHCreateDirectoryEx "SHCreateDirectoryExA" shell32.dll Handle hWnd;                  pointer pszPath  Pointer lpSecurity_Attributes Returns Integer
12529>>>>>
12529>>>>> External_Function vWin32_PathIsDirectory "PathIsDirectoryA" SHLWAPI.DLL Pointer lpszPath Returns Integer
12530>>>
12530>>>
12530>>>//
12530>>>// Gets the string from the right of the last sStopChar in sFrom
12530>>>// If sStopChar has no occurences in the string an empty string is
12530>>>// returned.
12530>>>Function StringFromRightOfChar Global String sFrom String sStopChar Returns String
12532>>>    String  sRetVal
12532>>>    String  sChar
12532>>>    Integer iLength
12532>>>    Integer iPos
12532>>>    Boolean bStopChar
12532>>>    Move "" to sRetval
12533>>>    Move (Length(sFrom)) to iLength
12534>>>    If ((iLength>0) And (Pos(sStopChar,sFrom) <> 0)) Begin
12536>>>        Move iLength   to iPos
12537>>>        Move (False)   to bStopChar
12538>>>        While Not bStopChar
12542>>>            Move (Mid(sFrom,1,iPos)) to sChar
12543>>>            Decrement iPos
12544>>>            If ((sChar=sStopChar) Or (iPos<1)) Begin
12546>>>                Move (True) to bStopChar
12547>>>            End
12547>>>>
12547>>>            Else Begin
12548>>>                Move (sChar+sRetVal) to sRetVal
12549>>>            End
12549>>>>
12549>>>        Loop
12550>>>>
12550>>>    End
12550>>>>
12550>>>    Function_Return sRetVal
12551>>>End_Function
12552>>>
12552>>>// Pre:  sFileName contains the complete path of the file.
12552>>>// Post: returns the complete path of the file.
12552>>>// This function is inspired on function SEQ_ExtractPathFromFileName of Sture Andersen.
12552>>>Function ParseFolderName Global String sFileName Returns String
12554>>>    String sFile
12554>>>    String sFolderName
12554>>>    String sDirSep // this is "\" for windows, or "/" for unix
12554>>>
12554>>>    Move "" to sFolderName
12555>>>    Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
12556>>>    If sDirSep In sFileName Begin
12558>>>        Move (StringFromRightOfChar(sFileName,sDirSep)) to sFile
12559>>>        Move (Left(sFileName,Length(sFileName)-Length(sFile))) to sFolderName
12560>>>    End
12560>>>>
12560>>>    Else If ":" In sFileName Begin
12563>>>        Move (StringFromRightOfChar(sFileName,":")) to sFile
12564>>>        Move (Replace(sFile,sFileName,"")) to sFolderName
12565>>>    End
12565>>>>
12565>>>    Function_Return sFolderName
12566>>>End_Function
12567>>>
12567>>>// Pre:  sFileName contains the complete path of the file.
12567>>>// post: The returned filename has it's path removed, but will have a extension
12567>>>Function ParseFileName Global String sFileName Returns String
12569>>>    String sFolderName
12569>>>    String sDirSep // this is "\" for windows, or "/" for unix
12569>>>
12569>>>    Move (sysconf(SYSCONF_DIR_SEPARATOR)) to sDirSep
12570>>>    Get ParseFolderName sFileName to sFolderName
12571>>>    If (sFolderName <> "") Begin
12573>>>        Move (Replace(sFolderName,sFileName,"")) to sFileName
12574>>>    End
12574>>>>
12574>>>    Move (Replace(sDirSep,sFileName,"")) to sFileName
12575>>>    Function_Return sFilename
12576>>>End_Function
12577>>>
12577>>>// Pre:  sFileName may contain the complete path of the file.
12577>>>//       or contain multiple dots in the filename, so temp.gif.bak will
12577>>>//       return "bak" as the extension and not "gif"
12577>>>// Post: returns the extension only, this extension can be a valid unixlike extension
12577>>>//       such as "html" or "java"
12577>>>Function ParseFileExtension Global String sFileName Returns String
12579>>>    String  sFileExtension
12579>>>    Get ParseFileName sFileName to sFileName // takes care of corner case with path containing a ".". eg. c:\frank.cheng\hello
12580>>>    Get StringFromRightOfChar sFileName "." to sFileExtension
12581>>>    Function_Return sFileExtension
12582>>>End_Function
12583>>>
12583>>>Define CS_DDE_ERR_UNKNOWN_LINE2   For ".\n"
12583>>>
12583>>>Function DDE_Error_To_String Integer iErrorID Returns String
12585>>>    String sMessage
12585>>>    Case Begin
12585>>>        Case (iErrorID = vERROR_FILE_NOT_FOUND)
12587>>>            Move CS_DDE_ERR_FILE_NOT_FOUND to sMessage
12588>>>            Case Break
12589>>>        Case (iErrorID = vERROR_PATH_NOT_FOUND)
12592>>>            Move CS_DDE_ERR_PATH_NOT_FOUND to sMessage
12593>>>            Case Break
12594>>>        Case (iErrorID = vERROR_BAD_FORMAT)
12597>>>            Move CS_DDE_ERR_BAD_FORMAT to sMessage
12598>>>            Case Break
12599>>>        Case (iErrorID = vSE_ERR_ACCESSDENIED)
12602>>>            Move CS_DDE_ERR_ACCESSDENIED to sMessage
12603>>>            Case Break
12604>>>        Case (iErrorID = vSE_ERR_ASSOCINCOMPLETE)
12607>>>            Move CS_DDE_ERR_ASSOCINCOMPLETE to sMessage
12608>>>            Case Break
12609>>>        Case (iErrorID = vSE_ERR_DDEBUSY)
12612>>>            Move CS_DDE_ERR_DDEBUSY to sMessage
12613>>>            Case Break
12614>>>        Case (iErrorID = vSE_ERR_DDEFAIL)
12617>>>            Move CS_DDE_ERR_DDEFAIL to sMessage
12618>>>            Case Break
12619>>>        Case (iErrorID = vSE_ERR_DDETIMEOUT)
12622>>>            Move CS_DDE_ERR_DDETIMEOUT to sMessage
12623>>>            Case Break
12624>>>        Case (iErrorID = vSE_ERR_DLLNOTFOUND)
12627>>>            Move CS_DDE_ERR_DLLNOTFOUND to sMessage
12628>>>            Case Break
12629>>>        Case (iErrorID = vSE_ERR_NOASSOC)
12632>>>            Move CS_DDE_ERR_NOASSOC to sMessage
12633>>>            Case Break
12634>>>        Case ((iErrorID = vSE_ERR_OOM) Or (iErrorID = 0))
12637>>>            Move CS_DDE_ERR_OOM to sMessage
12638>>>            Case Break
12639>>>        Case (iErrorID = vSE_ERR_PNF)
12642>>>            Move CS_DDE_ERR_PNF to sMessage
12643>>>            Case Break
12644>>>        Case (iErrorID = vSE_ERR_SHARE)
12647>>>            Move CS_DDE_ERR_SHARE to sMessage
12648>>>            Case Break
12649>>>        Case Else
12649>>>            Move CS_DDE_ERR_UNKNOWN_LINE1 to sMessage
12650>>>            Move (sMessage*Trim(iErrorID)*CS_DDE_ERR_UNKNOWN_LINE2) to sMessage
12651>>>            Case Break
12652>>>    Case End
12652>>>    Function_Return sMessage
12653>>>End_Function
12654>>>
12654>>>Procedure vDDE_Error_Handler Integer iErrorID
12656>>>    String sMessage
12656>>>    Get DDE_Error_To_String iErrorID to sMessage
12657>>>    Append sMessage CS_DDE_ERR_HANDL_PAKTC //  "Press a key to continue..."
12658>>>    Send Stop_Box sMessage CS_DDE_ERR_HANDL_CAPTION
12659>>>End_Procedure
12660>>>
12660>>>// Does the directory exist? - No = false, Yes = True
12660>>>// This also works with UNC path encoding and wildcards
12660>>>Function vFolderExists Global String sFolderName Returns Boolean
12662>>>    Boolean bFolderExists
12662>>>    Boolean bStop
12662>>>    String  sFolder sTmp
12662>>>    Integer iCh
12662>>>
12662>>>    // 2013-09-29 NGS Check for empty folder name and convert to ANSI
12662>>>    Move (Utf8ToAnsi(Trim(sFolderName))) to sFolderName
12663>>>    If (sFolderName = "") Begin
12665>>>        Function_Return False
12666>>>    End
12666>>>>
12666>>>
12666>>>    Move True  to bFolderExists
12667>>>    Move False to bStop
12668>>>    Move "dir:" to sFolder
12669>>>    Append sFolder sFolderName
12670>>>    Get Seq_New_Channel to iCh  // get free channel for input
12671>>>    Direct_Input channel iCh sFolder
12673>>>    Repeat
12673>>>>
12673>>>        Readln channel iCh sTmp
12675>>>        Move (SeqEof) to bStop
12676>>>        If (Trim(sTmp)="") Begin
12678>>>            Move False to bFolderExists
12679>>>        End
12679>>>>
12679>>>        Else Begin
12680>>>            Move True to bFolderExists
12681>>>            Move True to bStop
12682>>>        End
12682>>>>
12682>>>    Until (bStop)
12684>>>    Close_Input channel iCh
12686>>>    Send Seq_Release_Channel iCh
12687>>>    Function_Return bFolderExists
12688>>>End_Function
12689>>>
12689>>>// returns folder name if a folder was selected, otherwise returns ""
12689>>>Function vSHBrowseForFolder Global String sDialogTitle Returns String
12691>>>    String sFolder sTitle sPath
12691>>>    Pointer lpItemIdList
12691>>>    Integer iFolderSelected iRetval
12691>>>    tvBrowseInfo BrowseInfo
12691>>>    tvBrowseInfo BrowseInfo
12691>>>
12691>>>    Move "" to sPath
12692>>>    If (sDialogTitle<>"") Begin
12694>>>        Move sDialogTitle to sTitle
12695>>>        // Torben Lund suggested converting the string with toansi. Doing it like that
12695>>>        // disables showing some commonly used ascii characters like ascii 137 (├½)
12695>>>        // These chars are correctly shown if no toansi is used.
12695>>>        // I can imagine that he wanted to path to be ANSI, but as long as it isa just
12695>>>        // selected it will always be valid.
12695>>>        Move (AddressOf(sTitle)) to BrowseInfo.lpszTitle
12696>>>    End
12696>>>>
12696>>>
12696>>>    Move vBIF_RETURNONLYFSDIRS to BrowseInfo.ulFlags
12697>>>
12697>>>    // Torben Lund added line below. Move handle of focus object to structure before
12697>>>    // calling function. Otherwise, the folderdialog will be started as a seperate task.
12697>>>    Move (window_handle(focus(desktop))) to BrowseInfo.hWndOwner
12698>>>
12698>>>    // null 128 chars into var (make space)
12698>>>    Move (Repeat(Character(0), vMAX_PATH)) to sFolder
12699>>>
12699>>>    // select folder
12699>>>    Move (vWin32_SHBrowseForFolder(AddressOf(BrowseInfo))) to lpItemIdList
12700>>>    // get selected folder name
12700>>>    Move (vWin32_SHGetPathFromIDList(lpItemIdList, AddressOf(sFolder))) to iFolderSelected
12701>>>
12701>>>    // release memory resources that are used by the ItemIdList
12701>>>    Move (vWin32_CoTaskMemFree(lpItemIdList)) to iRetval
12702>>>
12702>>>    If (iFolderSelected<>0) Begin
12704>>>        Move (CString(sFolder)) to sPath
12705>>>    End
12705>>>>
12705>>>    Function_Return  sPath
12706>>>End_Function
12707>>>
12707>>>// returns 0 if the folder is created.
12707>>>//         1 if the API-call returned an error.
12707>>>Function vCreateDirectory Global String sNewFolder Returns Integer
12709>>>    String  sFolder
12709>>>    Integer iRetval bFolderCreated
12709>>>    tvSecurity_attributes SA
12709>>>    tvSecurity_attributes SA
12709>>>
12709>>>    Move False to bFolderCreated
12710>>>
12710>>>    // null MAX_PATH chars into var (make space)
12710>>>    Move (Repeat(Character(0), vMAX_PATH)) to sFolder
12711>>>
12711>>>    If (sNewFolder <> "") Begin
12713>>>
12713>>>        Move (SizeOfType(tvSecurity_attributes)) to SA.nLength
12714>>>        Move  0  to SA.lpDescriptor
12715>>>        Move  1  to SA.bInheritHandle
12716>>>
12716>>>        //
12716>>>        Move (sNewFolder+"") to sFolder
12717>>>        Move (vWin32_CreateDirectory(AddressOf(sFolder), AddressOf(SA))) to bFolderCreated
12718>>>    End
12718>>>>
12718>>>
12718>>>    If (bFolderCreated=false) Begin
12720>>>        Move 1 to iRetVal
12721>>>    End
12721>>>>
12721>>>    Function_Return iRetVal
12722>>>End_Function
12723>>>
12723>>>// **WvA: 03-02-2002 Function created.
12723>>>// With this function one can remove a directory.
12723>>>// returns 0 if the folder is removed.
12723>>>//         1 if the API-call returned an error (Use GetLastError API to get the details)
12723>>>//         2 if the folder did not exist
12723>>>//         3 if the sFolder parameter passed is equal to ""
12723>>>Function vRemoveDirectory Global String sFolder Returns Integer
12725>>>    Boolean bRemoved
12725>>>    String  sPath
12725>>>    Integer iRetval
12725>>>
12725>>>    Move 0     to iRetVal
12726>>>    Move False to bRemoved
12727>>>    Move (Trim(sFolder)) to sFolder
12728>>>    If (sFolder="") Begin
12730>>>        Move 3 to iRetVal
12731>>>    End
12731>>>>
12731>>>    If (vFolderExists(sFolder)=False) Begin
12733>>>        Move 2 to iRetVal
12734>>>    End
12734>>>>
12734>>>    If (iRetVal=0) Begin
12736>>>    // null MAX_PATH chars into var (make space)
12736>>>        Move (Repeat(Character(0), vMAX_PATH)) to sPath
12737>>>        //
12737>>>        Move (Insert(sFolder,sPath,1)) to sPath
12738>>>        Move (vWin32_RemoveDirectory(AddressOf(sPath))) to bRemoved
12739>>>    End
12739>>>>
12739>>>
12739>>>    If (iRetVal=0 And bRemoved=False) Begin
12741>>>        Move 1 to iRetVal
12742>>>    End
12742>>>>
12742>>>    Function_Return iRetVal
12743>>>End_Function
12744>>>
12744>>>// This function informs the user that he entered a yet unknown folder and
12744>>>// asks if he/she wants to create the folder (Yes/No)
12744>>>// Choice: "Yes" - this creates the folder
12744>>>//                 if successful, the function returns false
12744>>>//                 else it will be true.
12744>>>// Choice: "No"  - returns TRUE, This allows the programmer to take action
12744>>>//                 For example: to stop a save
12744>>>// Precondition: A foldername must be entered. We do not check for empty paths
12744>>>// This function returns a non-zero value if the folder isn't created afterwards
12744>>>Function vVerifyNewFolder Global String sFolderName Returns Integer
12746>>>    Integer bIsNotValid
12746>>>    Integer iUsers_Choice
12746>>>    String  sMessage
12746>>>
12746>>>    If (vFolderExists(sFolderName) Eq 0) Begin
12748>>>        Move "The folder '" to sMessage
12749>>>        Append sMessage sFolderName
12750>>>        Append sMessage "' does not yet exist,\n"
12751>>>        Append sMessage "Do you want to create it now?"
12752>>>        Get YesNo_Box sMessage "Confirm" MB_DefButton1 to iUsers_Choice
12753>>>        Case Begin
12753>>>            Case (iUsers_Choice = MBR_Yes)
12755>>>                Move (vCreateDirectory(sFolderName)) to bIsNotValid
12756>>>                If bIsNotValid Begin
12758>>>                    Move "An error occurred while trying to create folder '" to sMessage
12759>>>                    Append sMessage sFolderName "'.\n\n"
12761>>>                    Send Info_Box sMessage "Info"
12762>>>                End
12762>>>>
12762>>>                Case Break
12763>>>            Case (iUsers_Choice = MBR_No)
12766>>>                Move dfTrue to bIsNotValid // Cancel the save
12767>>>                Case Break
12768>>>        Case End
12768>>>    End
12768>>>>
12768>>>    Function_Return bIsNotValid
12769>>>End_Function
12770>>>
12770>>>// This will perform an operation on a file (e.g. open) with the application
12770>>>// registered in the Windows Registry to open that type of file (via its extension)
12770>>>// sOperation would be "OPEN" (it could also be "PRINT" etc).
12770>>>Procedure vShellExecute Global String sOperation String sDocument String sParameters String sPath
12772>>>    Handle  hInstance hWnd
12772>>>    // remove any leading/trailing spaces in the string
12772>>>    Move (Trim(sDocument)) to sDocument
12773>>>    Move (Trim(sPath))     to sPath
12774>>>    // Make the strings readable for windows API, by converting them to null-terminated
12774>>>    Append sOperation   (Character(0))
12775>>>    Append sDocument    (Character(0))
12776>>>    Append sParameters  (Character(0))
12777>>>    Append sPath        (Character(0))
12778>>>
12778>>>    Get Window_Handle to hWnd
12779>>>    Move (vWin32_ShellExecute (hWnd, AddressOf(sOperation), AddressOf(sDocument), AddressOf(sParameters), AddressOf(sPath), 1)) to hInstance
12780>>>    If (hInstance <= 32) Begin
12782>>>        Send vDDE_Error_Handler hInstance
12783>>>    End
12783>>>>
12783>>>End_Procedure
12784>>>
12784>>>Class cShellFileOperations is a Array
12785>>>
12785>>>    Procedure Construct_Object
12787>>>        Forward Send Construct_Object
12789>>>        Property Integer piDeleteFlags        0
12790>>>        Property Integer piCopyFlags          0
12791>>>        Property Integer piMoveFlags          0
12792>>>        Property Integer piRenameFlags        0
12793>>>
12793>>>        Set piDeleteFlags to (vFOF_SILENT Ior vFOF_NOCONFIRMATION)
12794>>>        Set piCopyFlags   to (vFOF_SILENT iOr vFOF_NOCONFIRMMKDIR Ior vFOF_NOCONFIRMATION)
12795>>>        Set piMoveFlags   to (vFOF_SILENT iOr vFOF_NOCONFIRMMKDIR iOr vFOF_NOCONFIRMATION)
12796>>>        Set piRenameFlags to (vFOF_SILENT Ior vFOF_NOCONFIRMATION)
12797>>>    End_Procedure
12798>>>
12798>>>    // This function uses the shell API to perform a file operation on the
12798>>>    // files supplied.
12798>>>    //
12798>>>    Function FileOperation String sSource String sDestination Integer eOperation Integer iFlags Returns Integer
12800>>>        Integer  iRetVal
12800>>>        Integer  iUserAbort
12800>>>        tvShFileOpStruct FOS
12800>>>        tvShFileOpStruct FOS
12800>>>
12800>>>        Move (Utf8ToAnsi(sSource)+Character(0)+Character(0))      to sSource
12801>>>        Move (Utf8ToAnsi(sDestination)+Character(0)+Character(0)) to sDestination
12802>>>        If (eOperation <> vFO_DELETE) Begin
12804>>>            Move (AddressOf(sDestination)) to FOS.pTo
12805>>>        End
12805>>>>
12805>>>
12805>>>        Move eOperation           to FOS.wFunc
12806>>>        Move (AddressOf(sSource)) to FOS.pFrom
12807>>>        Move iFlags               to FOS.fFlags
12808>>>
12808>>>        Move (vWin32_SHFileOperation(AddressOf(FOS))) to iRetVal
12809>>>        Move FOS.fAnyOperationsAborted to iUserAbort
12810>>>        If (iUserAbort <> 0) Begin
12812>>>            Move 80 to iRetVal  // file Operation Aborted by USER
12813>>>        End
12813>>>>
12813>>>        Function_Return (iRetVal)
12814>>>    End_Function
12815>>>
12815>>>    Function sfoDeleteFile String sFileName Returns Integer
12817>>>        Integer  iRetVal
12817>>>        Integer  iFlags
12817>>>
12817>>>        Get piDeleteFlags to iFlags
12818>>>        Get FileOperation sFileName "" vFO_DELETE iFlags to iRetVal
12819>>>        Function_Return iRetVal
12820>>>    End_Function
12821>>>
12821>>>    Function sfoCopyFile String sSource String sDestination Returns Integer
12823>>>        Integer  iRetVal
12823>>>        Integer  iFlags
12823>>>
12823>>>        Get piCopyFlags to iFlags
12824>>>        Get FileOperation sSource sDestination vFO_COPY iFlags to iRetVal
12825>>>        Function_Return iRetVal
12826>>>    End_Function
12827>>>
12827>>>    Function sfoMoveFile String sSource String sDestination Returns Integer
12829>>>        Integer  iRetVal
12829>>>        Integer  iFlags
12829>>>
12829>>>        Get piMoveFlags to iFlags
12830>>>        Get FileOperation sSource sDestination vFO_MOVE iFlags to iRetVal
12831>>>        Function_Return iRetVal
12832>>>    End_Function
12833>>>
12833>>>    // Rename a file or folder
12833>>>    // Returns a nonzero value if the operation failed.
12833>>>    Function sfoRenameFile String sSource String sDestination Returns Integer
12835>>>        Integer  iRetVal
12835>>>        Integer  iFlags
12835>>>
12835>>>        Get piRenameFlags to iFlags
12836>>>        Get FileOperation sSource sDestination vFO_RENAME iFlags to iRetVal
12837>>>        Function_Return iRetVal
12838>>>    End_Function
12839>>>
12839>>>    // Courtesy Of Steve Walter
12839>>>    // Requires Windows 2000 and up according to msdn but it was
12839>>>    //  in fact available before that as an unpublished API call
12839>>>    //  a little google search shows that this was already available
12839>>>    //  in windows 95 and NT
12839>>>    //
12839>>>    // The format is controlled by the dialog interface.
12839>>>    // That is, the user must click the OK button To actually Begin the format
12839>>>    // the format cannot be started programmatically.
12839>>>    // An alternative to this functionality would be to use a controlpanel
12839>>>    //  http://www.vdf-guidance.com/ContribPage.asp?Page=PKGCLSDFCPLAPP&ContribRecId=93
12839>>>    //
12839>>>    // hWnd = The windows handle of the object from which the format Function
12839>>>    //        is called.
12839>>>    // To Get this,
12839>>>    //          use:  Get Window_Handle Of <object>
12839>>>    //          For instance, in this app, we're going to use the Report_Panel:
12839>>>    //                  Get Window_Handle Of (Report_Panel(Main(Self))) To hWind
12839>>>    //
12839>>>    // sDrive = The drive letter. At this moment only A and B are valid
12839>>>    //
12839>>>    // iOptions = Format options.
12839>>>    //  SHFMT_OPT_DEFAULT = Quick format
12839>>>    //  SHFMT_OPT_FULL    = Full Format
12839>>>    //  SHFMT_OPT_SYSONLY = System only
12839>>>    //  3                 = Full format with system. (unsupported)
12839>>>    //
12839>>>    // Return Values:
12839>>>    //  SHFMT_ERROR    = Error on format or no drive specified.
12839>>>    //  SHFMT_CANCEL   = Format cancelled by user.
12839>>>    //  SHFMT_NOFORMAT = Drive is not formatable.
12839>>>    //
12839>>>    //
12839>>>    // *** ATTENTION: This function has been disabled as it doesn't
12839>>>    //                seem to work, i must have made a silly mistake
12839>>>    //                somewhere.
12839>>>    //
12839>>>    Function sfoFormatDisk String sDrive Integer iOptions Returns DWord
12841>>>        Handle   hWnd
12841>>>        Integer  iObj
12841>>>        DWord    dwReturnVal
12841>>>        Integer iDrive
12841>>>
12841>>>        Function_Return 1 // STOP HERE
12842>>>
12842>>>        Move (Trim(sDrive)) to sDrive
12843>>>        If ( sDrive <> '' ) Begin
12845>>>            If ( sDrive Contains ':' ) Begin
12847>>>                Move (Replace(':',sDrive,'')) to sDrive
12848>>>            End
12848>>>>
12848>>>            If (Not( 'AB' Contains sDrive )) Begin
12850>>>                Function_Return (SHFMT_NOFORMAT)
12851>>>            End
12851>>>>
12851>>>            If ( sDrive = 'A' ) Begin
12853>>>                Move 0 to iDrive
12854>>>            End
12854>>>>
12854>>>            Else If ( sDrive = 'B' ) Begin
12857>>>                Move 1 to iDrive
12858>>>            End
12858>>>>
12858>>>            // Window_Handle Of Desktop equals to 0
12858>>>
12858>>>            Get focus of desktop to iObj
12859>>>            If (iObj>desktop) Begin
12861>>>                Get Container_Handle of iObj to hWnd
12862>>>            End
12862>>>>
12862>>>            While (hWnd=0 And iObj<>Desktop)
12866>>>                Get Parent of iObj to iObj
12867>>>                Get Container_Handle of iObj to hWnd
12868>>>            Loop
12869>>>>
12869>>>
12869>>>            //Showln "hWnd = " hWnd " iDrive " iDrive " iOptions " iOptions
12869>>>            Move (vWin32_ShFormatDrive(hWnd, iDrive, SHFMT_ID_DEFAULT, iOptions)) to dwReturnVal
12870>>>        End
12870>>>>
12870>>>        Else Begin
12871>>>            Move (SHFMT_ERROR) to dwReturnVal
12872>>>        End
12872>>>>
12872>>>        Function_Return dwReturnVal
12873>>>    End_Function
12874>>>
12874>>>    //Example:
12874>>>    // Get sfoFormatDisk 'A' 0 To dReturnVal    // Formats drive A in QuickFormat
12874>>>    //                                          mode.
12874>>>
12874>>>End_Class
12875>>>
12875>>>Object oShellFileOperations is a cShellFileOperations
12877>>>End_Object
12878>>>
12878>>>// Restore to the old way of working with the shell file operations.
12878>>>// or.. to put lay man terms, allow any of the operations vDeleteFile
12878>>>// vCopyFile/vMoveFile/vRenameFile to have an UNDO
12878>>>Procedure vWin32fhCompatibilityMode
12880>>>    Integer hoSFO
12880>>>    Integer iFlags
12880>>>
12880>>>    Move (vFOF_SILENT Ior vFOF_NOCONFIRMATION Ior vFOF_ALLOWUNDO) to iFlags
12881>>>    Move (oShellFileOperations(Self)) to hoSFO
12882>>>
12882>>>    Set piDeleteFlags of hoSFO to iFlags
12883>>>    Set piCopyFlags   of hoSFO to iFlags
12884>>>    Set piMoveFlags   of hoSFO to iFlags
12885>>>    Set piRenameFlags of hoSFO to iFlags
12886>>>End_Procedure
12887>>>
12887>>>// Delete a file or folder
12887>>>// Returns a nonzero value if the operation failed.
12887>>>Function vDeleteFile Global String sFileName Returns Integer
12889>>>    Integer  iRetVal
12889>>>
12889>>>    Get sfoDeleteFile of (oShellFileOperations(Self)) sFileName to iRetVal
12890>>>    Function_Return iRetVal
12891>>>End_Function
12892>>>
12892>>>// Copy a file or folder
12892>>>// Returns a nonzero value if the operation failed.
12892>>>Function vCopyFile Global String sSource String sDestination Returns Integer
12894>>>    Integer  iRetVal
12894>>>
12894>>>    Get sfoCopyFile of (oShellFileOperations(Self)) sSource sDestination to iRetVal
12895>>>    Function_Return iRetVal
12896>>>End_Function
12897>>>
12897>>>// Move a file or folder
12897>>>// Returns a nonzero value if the operation failed.
12897>>>Function vMoveFile Global String sSource String sDestination Returns Integer
12899>>>    Integer  iRetVal
12899>>>
12899>>>    Get sfoMoveFile of (oShellFileOperations(Self)) sSource sDestination to iRetVal
12900>>>    Function_Return iRetVal
12901>>>End_Function
12902>>>
12902>>>// Rename a file or folder
12902>>>// Returns a nonzero value if the operation failed.
12902>>>Function vRenameFile Global String sSource String sDestination Returns Integer
12904>>>    Integer  iRetVal
12904>>>
12904>>>    Get sfoRenameFile of (oShellFileOperations(Self)) sSource sDestination to iRetVal
12905>>>    Function_Return iRetVal
12906>>>End_Function
12907>>>
12907>>>Function vGetWindowsDirectory Returns String
12909>>>    String  sDirectory
12909>>>    Integer iVoid
12909>>>
12909>>>    Move (ZeroString(vMAX_PATH)) to sDirectory
12910>>>    Move (vWin32_GetWindowsDirectory(AddressOf(sDirectory), vMAX_PATH)) to iVoid
12911>>>    Function_Return (CString(sDirectory))
12912>>>End_Function
12913>>>
12913>>>Function vGetTempPath Returns String
12915>>>    Integer iRetval
12915>>>    String  sTempPath
12915>>>
12915>>>    Move (ZeroString(vMAX_PATH)) to sTempPath
12916>>>    Move (vWin32_GetTempPath (vMAX_PATH, AddressOf(sTempPath))) to iRetVal
12917>>>    Function_Return (Cstring(sTempPath))
12918>>>End_Function
12919>>>
12919>>>// Courtesy of Marco Kuipers
12919>>>Function vMakeTempFile Returns String
12921>>>    Integer iRetval
12921>>>    String  sTempPath
12921>>>    String  sTempFileName
12921>>>    String  sPrefixString
12921>>>
12921>>>    Get vGetTempPath to sTempPath
12922>>>    If (sTempPath = "") Begin
12924>>>        Get vGetWindowsDirectory to sTempPath  // first fallback
12925>>>        If (sTempPath<>"") Begin
12927>>>            Move (sTempPath+"\Temp\") to sTempPath
12928>>>        End
12928>>>>
12928>>>    End
12928>>>>
12928>>>
12928>>>    If (sTempPath = "") Begin
12930>>>    // second fallback we really do not want to get here as to be fair using current folder as temp
12930>>>    // makes little sense. Leaving this in as it was old behavior.
12930>>>        Get_Current_Directory to sTempPath
12931>>>    End
12931>>>>
12931>>>
12931>>>    Move (Trim(sTempPath)+Character(0)) to sTempPath
12932>>>    If (Length(sTempPath)>(vMax_Path-14)) Begin
12934>>>        Error DFERR_PROGRAM ("Temporary path"+sTempPath+"is too long, cannot create temporary files.")
12935>>>>
12935>>>    End
12935>>>>
12935>>>
12935>>>    Move (ZeroString(vMax_Path)) to sTempFileName
12936>>>    Move ("tmp"+Character(0)) to sPrefixString // **WvA: 28-04-2005 Added a null
12937>>>    Move (vWin32_GetTempFileName (AddressOf(sTempPath), AddressOf(sPrefixString), 0, AddressOf(sTempFileName))) to iRetval
12938>>>    If (iRetval = 0) Begin  // **WvA: 28-04-2005 Changed condition, the api call returns 0 if an error occurs
12940>>>    //Get ShowLastError to iRetval
12940>>>        Move "" to sTempFileName
12941>>>    End
12941>>>>
12941>>>
12941>>>    Function_Return (Cstring(sTempFileName)) // **WvA: 28-04-2005 Cstring added
12942>>>End_Function
12943>>>
12943>>>// This function creates a uniquely named temporary file in folder sPath
12943>>>// The file created will have a prefix based on the first 3 characters in sPrefix
12943>>>// Note that you will have to cleanup the tempfile yourself as the function
12943>>>// does not take care of that.
12943>>>Function vCreateTempFileInPath String sPath String sPrefix Returns String
12945>>>    Integer iRetVal
12945>>>    String sTempFileName
12945>>>
12945>>>    Move (Utf8ToAnsi(sPath)+Character(0))   to sPath
12946>>>    Move (Utf8ToAnsi(sPrefix)+Character(0)) to sPrefix
12947>>>    Move (Pad("", vMAX_PATH)) to sTempFileName
12948>>>
12948>>>    Move (vWin32_GetTempFileName(AddressOf(sPath), AddressOf(sPrefix), 0, AddressOf(sTempFileName))) to iRetVal
12949>>>    Move (Trim(Cstring(sTempFileName))) to sTempFileName
12950>>>    Function_Return sTempFileName
12951>>>End_Function
12952>>>
12952>>>//
12952>>>// Get a specific shell folder for example to get the desktop folder
12952>>>// simply call this function and pass it vCSIDL_DESKTOP
12952>>>//
12952>>>Function vSHGetFolderPath Integer eFolder Returns String
12954>>>    String  sFolder
12954>>>    Integer iVoid
12954>>>    Handle  hWnd
12954>>>
12954>>>    Move (Window_Handle(focus(desktop))) to hWnd
12955>>>    Move (Repeat(Character(0), vMAX_PATH)) to sFolder
12956>>>    Move (vWin32_SHGetFolderPath(hWnd,eFolder, 0, 0,AddressOf(sFolder))) to iVoid
12957>>>    Function_Return (CString(sFolder))
12958>>>End_Function
12959>>>
12959>>>// Courtesy Of Vincent Oorsprong
12959>>>Function vConvertFileDateTime Global DWord dwLowDateTime DWord dwHighDateTime Returns String
12961>>>    String  sFormattedTime sFormattedDate
12961>>>    String  sFileDateTime
12961>>>    Integer iSuccess iLenCcTime iDataLength iLenCcDate
12961>>>    tvFileTime   FileTime
12961>>>    tvFileTime   FileTime
12961>>>    tvSystemTime SystemTime
12961>>>    tvSystemTime SystemTime
12961>>>
12961>>>    Move "" to sFileDateTime
12962>>>    Move dwLowDateTime  to FileTime.dwLowDateTime
12963>>>    Move dwHighDateTime to FileTime.dwHighDateTime
12964>>>
12964>>>    Move 0 to SystemTime.wYear
12965>>>
12965>>>    Move (vWin32_FileTimeToSystemTime (AddressOf(FileTime), AddressOf(SystemTime))) to iSuccess
12966>>>    If (iSuccess = 1) Begin
12968>>>        Move (ZeroString(255))        to sFormattedTime
12969>>>        Move (Length(sFormattedTime)) to iLenCcTime
12970>>>        Move (vWin32_GetTimeFormat (LOCALE_USER_DEFAULT, 0, AddressOf(SystemTime), 0, AddressOf(sFormattedTime), iLenCcTime)) to iDataLength
12971>>>        Move (ZeroString(255))        to sFormattedDate
12972>>>        Move (Length(sFormattedDate)) to iLenCcDate
12973>>>        Move (vWin32_GetDateFormat (LOCALE_USER_DEFAULT, 0, AddressOf(SystemTime), 0, AddressOf(sFormattedDate), iLenCcDate)) to iDataLength
12974>>>        Move (Cstring (sFormattedDate)  * Cstring (sFormattedTime)) to sFileDateTime
12975>>>    End
12975>>>>
12975>>>    Function_Return sFileDateTime
12976>>>End_Function
12977>>>
12977>>>// **WvA:
12977>>>// A windows replacement for the standard function FileExists.
12977>>>// This version will also return (true) for a file when it is open by an application.
12977>>>// Note that you can apply normal windows mask-signs in the filename such as * and ?
12977>>>// Example: Get vFilePathExists "C:\config.sy?"
12977>>>// This will return true if you have a file matching these conditions. (aka config.sys)
12977>>>Function vFilePathExists Global String sFilePathMask Returns Integer
12979>>>    String  sDirSep
12979>>>    Handle  hFindFile
12979>>>    Integer iVoid
12979>>>    tvWin32FindData FindData
12979>>>    tvWin32FindData FindData
12979>>>
12979>>>    Move vINVALID_HANDLE_VALUE to hFindFile
12980>>>    Move (Utf8ToANSI(Trim(sFilePathMask))) to sFilePathMask
12981>>>    If (Length(sFilePathMask)>0) Begin
12983>>>    // 2014-09-29 NGS Remove any trailing dir separators, as they make the function fail.
12983>>>        Move (sysconf(SYSCONF_DIR_SEPARATOR)) to sDirSep
12984>>>        While (Right(sFilePathMask, 1) = sDirSep)
12988>>>            Move (Left(sFilePathMask, Length(sFilePathMask) -1)) to sFilePathMask
12989>>>        Loop
12990>>>>
12990>>>
12990>>>        Move 0 to FindData.dwReserved0        // initialize the variable so we can get an address from it.
12991>>>        Move (vWin32_FindFirstFile (AddressOf(sFilePathMask), AddressOf(FindData))) to hFindFile
12992>>>        Move (vWin32_FindClose (hFindFile)) to iVoid
12993>>>    End
12993>>>>
12993>>>    Function_Return (hFindFile <> vINVALID_HANDLE_VALUE)
12994>>>End_Function
12995>>>
12995>>>//
12995>>>// WideChar version of the function, do not use, it's an experiment
12995>>>//
12995>>>Function vWFilePathExists Global String sFilePathMask Returns Integer
12997>>>    Handle  hFindFile
12997>>>    Integer iVoid
12997>>>    tvWin32FindData FindData
12997>>>    tvWin32FindData FindData
12997>>>
12997>>>    Move vINVALID_HANDLE_VALUE to hFindFile
12998>>>
12998>>>    If (Length(sFilePathMask)>0) Begin
13000>>>
13000>>>        Move 0 to FindData.dwReserved0        // initialize the variable so we can get an address from it.
13001>>>        Move (vWin32W_FindFirstFile (AddressOf(sFilePathMask), AddressOf(FindData))) to hFindFile
13002>>>        Move (vWin32_FindClose (hFindFile)) to iVoid
13003>>>    End
13003>>>>
13003>>>    Function_Return (hFindFile <> vINVALID_HANDLE_VALUE)
13004>>>End_Function
13005>>>
13005>>>// **WvA
13005>>>// Formats a foldername by first trimming it and after that by sticking a
13005>>>// directory separator (/\) to the end if it doesn't have one there already.
13005>>>// The folder may contain a drive letter or UNC encoding.
13005>>>Function vFolderFormat Global String sFolderName Returns String
13007>>>    String sDirSep
13007>>>    Move (sysconf(SYSCONF_DIR_SEPARATOR)) to sDirSep  // normally \ (backslash)
13008>>>    Move (Trim(sFolderName)) to sFolderName
13009>>>    If (Right(sFolderName,1)<>sDirSep) Begin
13011>>>        Move (sFolderName+sDirSep) to sFolderName
13012>>>    End
13012>>>>
13012>>>    Function_Return sFolderName
13013>>>End_Function
13014>>>
13014>>>//
13014>>>// Returns the amount of files in the folder (if it exists)
13014>>>// Returns -1 if folder doesn't exist.
13014>>>// The files "." and ".." are not counted.
13014>>>//
13014>>>Function vFolderFileCount Global String sFolderName Returns Integer
13016>>>    Boolean bFound
13016>>>    Handle  hFindFile
13016>>>    Integer iCount  iVoid
13016>>>    Integer iSuccess
13016>>>    String  sFileName
13016>>>    tvWin32FindData FindData
13016>>>    tvWin32FindData FindData
13016>>>
13016>>>    Move -1 to iCount
13017>>>    Get vFolderFormat sFolderName to sFolderName
13018>>>    Move (sFolderName+"*") to sFolderName // match any filename in the folder
13019>>>    Move 0 to FindData.dwReserved0        // initialize the variable so we can get an address from it.
13020>>>    Move (vWin32_FindFirstFile (AddressOf(sFolderName), AddressOf(FindData))) to hFindFile
13021>>>    Move (hFindFile<>vINVALID_HANDLE_VALUE) to bFound
13022>>>    If (bFound) Begin
13024>>>        Move 0 to iCount
13025>>>    End
13025>>>>
13025>>>    While (bFound)
13029>>>        Increment iCount
13030>>>        Move (UCharArrayToString(FindData.cFileName)) to sFileName
13031>>>        If (sFileName="." or sFileName="..") Begin
13033>>>            Decrement iCount
13034>>>        End
13034>>>>
13034>>>        Move (vWin32_FindNextFile(hFindFile, AddressOf(FindData))) to iSuccess
13035>>>        Move (iSuccess<>0) to bFound
13036>>>    Loop
13037>>>>
13037>>>    Move (vWin32_FindClose (hFindFile)) to iVoid
13038>>>    Function_Return iCount
13039>>>End_Function
13040>>>
13040>>>//
13040>>>// Gets the parent path of the currently supplied path
13040>>>// Returns "" when we are at the root folder.
13040>>>//
13040>>>Function vParentPath Global String sPath Returns String
13042>>>    String sStrip sDirSep
13042>>>
13042>>>    Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
13043>>>    Move (Trim(sPath)) to sPath
13044>>>    If (Right(sPath,1) = sDirSep) Begin
13046>>>        Move (Left(sPath,Length(sPath)-1)) to sPath
13047>>>    End
13047>>>>
13047>>>    If (Pos(sDirSep, sPath)) Begin
13049>>>        Move (StringFromRightOfChar(sPath, sDirSep)) to sStrip
13050>>>        Move (Left(sPath,Length(sPath)-Length(sStrip))) to sPath
13051>>>    End
13051>>>>
13051>>>    Else Begin
13052>>>        Move "" to sPath
13053>>>    End
13053>>>>
13053>>>    Function_Return sPath
13054>>>End_Function
13055>>>
13055>>>// Create the folder, including intermediate directories.
13055>>>// Don't panic if the folder already exists.
13055>>>// Michael Mullan June 2009.
13055>>>Function vshCreateDirectoryEX Global String sNewFolder Returns Integer
13057>>>    String  sFolder
13057>>>    Integer iRetval iFolderCreated
13057>>>    tvSecurity_attributes SA
13057>>>    tvSecurity_attributes SA
13057>>>
13057>>>    Move 0 to iFolderCreated
13058>>>
13058>>>    // null MAX_PATH chars into var (make space)
13058>>>    Move (Repeat(Character(0), vMAX_PATH)) to sFolder
13059>>>    If (sNewFolder <> "") Begin
13061>>>
13061>>>        Move (SizeOfType(tvSecurity_attributes)) to SA.nLength
13062>>>        Move  0  to SA.lpDescriptor
13063>>>        Move  1  to SA.bInheritHandle
13064>>>
13064>>>        //
13064>>>        Move (sNewFolder+"") to sFolder
13065>>>        Move (vWin32_SHCreateDirectoryEx(0,AddressOf(sFolder), AddressOf(SA))) to iFolderCreated
13066>>>    End
13066>>>>
13066>>>
13066>>>    If (iFolderCreated <> 0) Begin
13068>>>        Move 1 to iRetVal
13069>>>        Case Begin
13069>>>            Case (iFolderCreated = 161)
13071>>>                Error DFERR_OPERATOR ("Path " + sNewFolder + " is Not Valid (ERROR_BAD_PATHNAME)")
13072>>>>
13072>>>                Case Break
13073>>>            Case (iFolderCreated = 206)
13076>>>                Error DFERR_OPERATOR ("Path " + sNewFolder + " is Not Valid (ERROR_FILENAME_EXCED_RANGE)")
13077>>>>
13077>>>                Case Break
13078>>>            Case (iFolderCreated = 3)
13081>>>                Error DFERR_OPERATOR ("Path " + sNewFolder + " is Not Valid (ERROR_PATH_NOT_FOUND)")
13082>>>>
13082>>>                Case Break
13083>>>            Case (iFolderCreated = 80)
13086>>>                Move 0 to iRetval // "ERROR_FILE_EXISTS"     not really an error
13087>>>                Case Break
13088>>>            Case (iFolderCreated = 183)
13091>>>                Move 0 to iRetval //  "ERROR_ALREADY_EXISTS"     not really an error
13092>>>                Case Break
13093>>>            Case (iFolderCreated = 1223)
13096>>>                Error DFERR_OPERATOR ("Path " + sNewFolder + " is Not Valid (ERROR_CANCELLED)")
13097>>>>
13097>>>                Case Break
13098>>>            Case Else
13098>>>                Error DFERR_OPERATOR ("Folder Creation Error # " + String(ifoldercreated) + "\n" + sNewFolder + "(FILE_CREATION_ERROR)")
13099>>>>
13099>>>        Case End
13099>>>    End
13099>>>>
13099>>>    Function_Return iRetVal
13100>>>End_Function
13101>>>
13101>>>Function vWin32_APIFileSize Global String sFileName Returns Integer
13103>>>    DWord   dwFileSizeHigh dwFileSizeLow
13103>>>    Integer iFileSize iVoid
13103>>>    Handle  hFindFile
13103>>>    tvWin32FindData FindData
13103>>>    tvWin32FindData FindData
13103>>>
13103>>>    Move (sFileName+"") to sFileName
13104>>>    Move 0 to FindData.dwReserved0        // initialize the variable so we can get an address from it.
13105>>>    Move (vWin32_FindFirstFile (AddressOf(sFileName), AddressOf(FindData))) to hFindFile
13106>>>    If (hFindFile<>vINVALID_HANDLE_VALUE) Begin
13108>>>        Move FindData.nFileSizeHigh to dwFileSizeHigh
13109>>>        Move FindData.nFileSizeLow  to dwFileSizeLow
13110>>>    End
13110>>>>
13110>>>    Move (vWin32_FindClose (hFindFile)) to iVoid
13111>>>    Move ((dwFileSizeHigh * vMaxDword) + dwFileSizeLow) to iFileSize
13112>>>
13112>>>    Function_Return iFileSize
13113>>>End_Function
13114>>>
13114>>>//
13114>>>// Based on code in Peter Crook's Browse folder workspace
13114>>>// http://support.dataaccess.com/Forums/showthread.php?54383-Browse-for-Folder-package&p=282249#post282249
13114>>>//
13114>>>//=============================================================================
13114>>>// Verifies that a path is a valid directory.
13114>>>//
13114>>>// Returns TRUE if the path is a valid directory, or FALSE otherwise.
13114>>>//
13114>>>// Parameters:
13114>>>//      sPath - Address of the path to verify.
13114>>>//=============================================================================
13114>>>Function vPathIsDirectory Global String sPath Returns Boolean
13116>>>    Integer iResult
13116>>>    Boolean bRetVal
13116>>>
13116>>>    Move false to bRetVal
13117>>>    Move (Utf8ToAnsi(sPath) - Character (0)) to sPath
13118>>>    Move (vWin32_PathIsDirectory (AddressOf (sPath))) to iResult
13119>>>    If (iResult<>0) Begin
13121>>>        Move True to bRetVal
13122>>>    End
13122>>>>
13122>>>
13122>>>    Function_Return bRetVal
13123>>>End_Function
13124>>>
13124>Use oEditContextMenu.pkg
Including file: oEditContextMenu.pkg    (C:\Program Files\DataFlex 20.1\Pkg\oEditContextMenu.pkg)
13124>>>Use cCJStandardMenuItemClasses.pkg
Including file: cCJStandardMenuItemClasses.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCJStandardMenuItemClasses.pkg)
13124>>>>>Use Dfpanel.pkg
Including file: Dfpanel.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Dfpanel.pkg)
13124>>>>>>>Use Windows.pkg
13124>>>>>>>Use dfcolor.pkg
13124>>>>>>>
13124>>>>>>>//  Used when help object makes a request to the object requesting help.
13124>>>>>>>Use HelpSystemConstants.pkg
13124>>>>>>>
13124>>>>>>>Enumeration_List
13124>>>>>>>    Define amTop
13124>>>>>>>    Define amBottom
13124>>>>>>>    Define amLeft
13124>>>>>>>    Define amRight
13124>>>>>>>End_Enumeration_List
13124>>>>>>>
13124>>>>>>>Use DFAStBar.pkg  // df application status bar
Including file: Dfastbar.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Dfastbar.pkg)
13124>>>>>>>>>Register_Procedure Add_Border_Object
13124>>>>>>>>>Register_Procedure Remove_Border_Object
13124>>>>>>>>>
13124>>>>>>>>>Use DFStatBr.pkg
Including file: Dfstatbr.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Dfstatbr.pkg)
13124>>>>>>>>>>>Use windows.pkg
13124>>>>>>>>>>>Use CommCtrl.pkg
13124>>>>>>>>>>>Use WinGDI.pkg
13124>>>>>>>>>>>
13124>>>>>>>>>>>
13124>>>>>>>>>>>
13124>>>>>>>>>>>
13124>>>>>>>>>>>
13124>>>>>>>>>>>
13124>>>>>>>>>>>Class BasicStatusBar is a dfBaseList
13125>>>>>>>>>>>    Procedure Construct_Object
13127>>>>>>>>>>>        Forward Send Construct_Object
13129>>>>>>>>>>>        Property Integer Private.Simple_State False
13130>>>>>>>>>>>        
13130>>>>>>>>>>>        Property String  Private.Simple_Value ''
13131>>>>>>>>>>>        
13131>>>>>>>>>>>        Property Integer Tooltips_State False // this does nothing
13132>>>>>>>>>>>        Set Scroll_Bar_Visible_State to False
13133>>>>>>>>>>>        Set Border_Style             to Border_None
13134>>>>>>>>>>>        Set External_class_Name "cObsoleteBasicStatusBar" to "msctls_statusbar32"
13135>>>>>>>>>>>        Set Color to clDefault
13136>>>>>>>>>>>    End_Procedure
13137>>>>>>>>>>>    
13137>>>>>>>>>>>    Procedure End_Construct_Object
13139>>>>>>>>>>>        //If (Tooltips_State(self)) Set Window_Style To SBT_TOOLTIPS True
13139>>>>>>>>>>>        Forward Send End_Construct_Object
13141>>>>>>>>>>>    End_Procedure
13142>>>>>>>>>>>    
13142>>>>>>>>>>>    Procedure Set Simple_State Integer bState
13144>>>>>>>>>>>        Handle hWnd
13144>>>>>>>>>>>        Set Private.Simple_state to bState
13145>>>>>>>>>>>        Get Window_Handle to hWnd
13146>>>>>>>>>>>        If hWnd ;            Send Windows_Message SB_SIMPLE bState 0
13149>>>>>>>>>>>    End_Procedure
13150>>>>>>>>>>>    
13150>>>>>>>>>>>    Function Simple_State Returns Integer
13152>>>>>>>>>>>        Function_Return (Private.Simple_state(Self))
13153>>>>>>>>>>>    End_Function
13154>>>>>>>>>>>    
13154>>>>>>>>>>>    Procedure Set Simple_Value String sValue
13156>>>>>>>>>>>        Integer iVoid
13156>>>>>>>>>>>        Handle hWnd
13156>>>>>>>>>>>        WString wsValue
13156>>>>>>>>>>>        
13156>>>>>>>>>>>        Set Private.Simple_Value to sValue
13157>>>>>>>>>>>        
13157>>>>>>>>>>>        Get Window_Handle to hWnd
13158>>>>>>>>>>>        If hWnd Begin
13160>>>>>>>>>>>            Append sValue ( Character(0) )
13161>>>>>>>>>>>            Move sValue to wsValue
13162>>>>>>>>>>>            
13162>>>>>>>>>>>            Send Windows_Message SB_SETTEXT (255 + sbNORMAL) (AddressOf(wsValue))
13163>>>>>>>>>>>        End
13163>>>>>>>>>>>>
13163>>>>>>>>>>>        Set Simple_State to True
13164>>>>>>>>>>>    End_Procedure
13165>>>>>>>>>>>    
13165>>>>>>>>>>>    Function Simple_Value Returns String
13167>>>>>>>>>>>        Function_Return (private.Simple_value(Self))
13168>>>>>>>>>>>    End_Function
13169>>>>>>>>>>>    
13169>>>>>>>>>>>    Procedure Activate
13171>>>>>>>>>>>    End_Procedure
13172>>>>>>>>>>>    
13172>>>>>>>>>>>    Procedure Page_Object Integer iState
13174>>>>>>>>>>>        Handle hWnd
13174>>>>>>>>>>>        Get Window_handle to hWnd
13175>>>>>>>>>>>        Forward Send Page_Object iState
13177>>>>>>>>>>>        If (iState and hWnd = 0) ;            Send DoRestructure
13180>>>>>>>>>>>    End_Procedure
13181>>>>>>>>>>>    
13181>>>>>>>>>>>    Procedure Page Integer iState
13183>>>>>>>>>>>        Forward Send Page iState
13185>>>>>>>>>>>        If (iState=1) Begin
13187>>>>>>>>>>>            Send Windows_Message SB_SETBKCOLOR 0 (Color(Self))
13188>>>>>>>>>>>        End
13188>>>>>>>>>>>>
13188>>>>>>>>>>>    End_Procedure
13189>>>>>>>>>>>    
13189>>>>>>>>>>>    Procedure DoRestructure
13191>>>>>>>>>>>        Integer iLoop icItems iWidth icWidth iRetVal
13191>>>>>>>>>>>        Handle hWnd
13191>>>>>>>>>>>        Integer[] aItems
13192>>>>>>>>>>>        
13192>>>>>>>>>>>        Get Window_Handle to hWnd
13193>>>>>>>>>>>        If hWnd Begin
13195>>>>>>>>>>>            
13195>>>>>>>>>>>            Send Windows_Message SB_SIMPLE (Simple_State(Self)) 0
13196>>>>>>>>>>>            Set Simple_Value to (Simple_Value(Self))
13197>>>>>>>>>>>            
13197>>>>>>>>>>>            Get Item_Count to icItems
13198>>>>>>>>>>>            
13198>>>>>>>>>>>            For iLoop from 1 to (icItems -1)
13204>>>>>>>>>>>>
13204>>>>>>>>>>>                Get Message (iLoop -1) to iWidth
13205>>>>>>>>>>>                Move (icWidth + iWidth) to icWidth
13206>>>>>>>>>>>                Move (icWidth) to aItems[iLoop - 1]
13207>>>>>>>>>>>                
13207>>>>>>>>>>>                Set Value (iLoop -1) to (Value(Self, iLoop -1))
13208>>>>>>>>>>>            Loop
13209>>>>>>>>>>>>
13209>>>>>>>>>>>            // Now make the last item 'spring' to the end
13209>>>>>>>>>>>            Move -1 to aItems[icItems - 1]
13210>>>>>>>>>>>                        
13210>>>>>>>>>>>            Move (SendMessage(hWnd, SB_SETPARTS, icItems, AddressOf(aItems))) to iRetVal
13211>>>>>>>>>>>            For iLoop from 0 to (icItems -1)
13217>>>>>>>>>>>>
13217>>>>>>>>>>>                Set Value iLoop to (Value(Self, iLoop))
13218>>>>>>>>>>>            Loop
13219>>>>>>>>>>>>
13219>>>>>>>>>>>            
13219>>>>>>>>>>>        End
13219>>>>>>>>>>>>
13219>>>>>>>>>>>    End_Procedure
13220>>>>>>>>>>>    
13220>>>>>>>>>>>    Procedure Add_Item Integer iItemWidth String sValue // this is obsolete
13222>>>>>>>>>>>        Integer iRetVal icItems
13222>>>>>>>>>>>        Handle hWnd
13222>>>>>>>>>>>        
13222>>>>>>>>>>>        Forward Send Add_Item iItemWidth sValue
13224>>>>>>>>>>>        Get Item_Count to icItems
13225>>>>>>>>>>>        Set Value (icItems -1) to sValue
13226>>>>>>>>>>>        If (Window_Handle(Self)) ;            Send DoRestructure
13229>>>>>>>>>>>        Set Current_item to (icItems -1)
13230>>>>>>>>>>>    End_Procedure
13231>>>>>>>>>>>    
13231>>>>>>>>>>>    Procedure AddPane Integer iItemWidth String sValue Integer iStyle
13233>>>>>>>>>>>        Integer iRetVal icItem
13233>>>>>>>>>>>        Handle hWnd
13233>>>>>>>>>>>        
13233>>>>>>>>>>>        Send Add_Item iItemWidth sValue
13234>>>>>>>>>>>        Get Item_Count to icItem
13235>>>>>>>>>>>        Set Value (icItem -1) to sValue
13236>>>>>>>>>>>        Set Aux_Value (icItem -1) to iStyle
13237>>>>>>>>>>>        If (Window_Handle(Self)) ;            Send DoRestructure
13240>>>>>>>>>>>    End_Procedure
13241>>>>>>>>>>>    
13241>>>>>>>>>>>    Procedure AutoSizeLocate
13243>>>>>>>>>>>        Integer iSize iRetVal
13243>>>>>>>>>>>        Handle hWnd
13243>>>>>>>>>>>        Get Window_Handle to hWnd
13244>>>>>>>>>>>        Delegate Get GuiSize to iSize
13246>>>>>>>>>>>        If hWnd ;            Move (SendMessage(hWnd, WM_SIZE, 0, iSize)) to iRetVal
13249>>>>>>>>>>>    End_Procedure
13250>>>>>>>>>>>    
13250>>>>>>>>>>>    Procedure Set Item_Display_Style Integer iItem Integer iStyle  // this is obsolete, Use PaneStyle
13252>>>>>>>>>>>        If (num_arguments = 2) ;            Set Aux_Value iItem to iStyle
13255>>>>>>>>>>>        Else ;            Set Aux_Value (current_item(Self)) to iItem //iStyle passed as arg1
13257>>>>>>>>>>>    End_Procedure
13258>>>>>>>>>>>    
13258>>>>>>>>>>>    Function Item_Display_Style Integer iItem Returns Integer // this is obsolete, use PaneStyle
13260>>>>>>>>>>>        Function_Return (Aux_value(Self, iItem))
13261>>>>>>>>>>>    End_Function
13262>>>>>>>>>>>    
13262>>>>>>>>>>>    Procedure Set Value Integer iItem String sValue
13264>>>>>>>>>>>        Handle hWnd
13264>>>>>>>>>>>        Integer iRetVal iTextStyle iVoid
13264>>>>>>>>>>>        String sNull
13264>>>>>>>>>>>        WString wsValue
13264>>>>>>>>>>>        
13264>>>>>>>>>>>        Forward Set Value iItem to sValue
13266>>>>>>>>>>>        Get Window_Handle to hWnd
13267>>>>>>>>>>>        If hWnd Begin
13269>>>>>>>>>>>            Get Item_Display_Style iItem to iTextStyle
13270>>>>>>>>>>>            Append sValue ( Character(0) )
13271>>>>>>>>>>>            Move sValue to wsValue
13272>>>>>>>>>>>            Move (SendMessage(hWnd, SB_SETTEXT, iItem + iTextStyle, AddressOf(wsValue))) to iRetVal
13273>>>>>>>>>>>        End
13273>>>>>>>>>>>>
13273>>>>>>>>>>>        Set Simple_State to False
13274>>>>>>>>>>>    End_Procedure
13275>>>>>>>>>>>    
13275>>>>>>>>>>>    Function IsSimpleMode Returns Integer
13277>>>>>>>>>>>        Function_Return (WindowsMessage(SB_ISSIMPLE, 0, 0))
13278>>>>>>>>>>>    End_Function
13279>>>>>>>>>>>    
13279>>>>>>>>>>>    Procedure Notify Longptr wParam Longptr lParam
13281>>>>>>>>>>>        Integer iVoid iCode
13281>>>>>>>>>>>        Longptr iPane
13281>>>>>>>>>>>        tWinNmMouse NmMouse
13281>>>>>>>>>>>        tWinNmMouse NmMouse
13281>>>>>>>>>>>        
13281>>>>>>>>>>>        Move (CopyMemory(AddressOf(NmMouse), lParam, SizeOfType(tWinNmMouse))) to iVoid
13282>>>>>>>>>>>        
13282>>>>>>>>>>>        Move NmMouse.hdr.code   to iCode
13283>>>>>>>>>>>        Move NmMouse.dwItemSpec to iPane
13284>>>>>>>>>>>        
13284>>>>>>>>>>>        If (iCode = SBN_SIMPLEMODECHANGE) ;            Send OnSimpleModeChange
13287>>>>>>>>>>>        Else If (iCode = NM_CLICK) ;            Send OnClick            iPane
13291>>>>>>>>>>>        Else If (iCode = NM_DBLCLK) ;            Send OnDoubleClick      iPane
13295>>>>>>>>>>>        Else If (iCode = NM_RCLICK) ;            Send OnRightClick       iPane
13299>>>>>>>>>>>        Else If (iCode = NM_RDBLCLK) ;            Send OnDoubleRightClick iPane
13303>>>>>>>>>>>    End_Procedure
13304>>>>>>>>>>>    
13304>>>>>>>>>>>    //  This needs to be chagned to return the real GUISize of the status bar
13304>>>>>>>>>>>    //  by making API calls.
13304>>>>>>>>>>>    //
13304>>>>>>>>>>>    Function GuiSize Returns Integer
13306>>>>>>>>>>>        Handle hWnd
13306>>>>>>>>>>>        Integer cy cx iVoid
13306>>>>>>>>>>>        tWinRect Rect
13306>>>>>>>>>>>        tWinRect Rect
13306>>>>>>>>>>>        Get Window_Handle to hWnd
13307>>>>>>>>>>>        If hWnd Begin
13309>>>>>>>>>>>            Move (GetWindowRect(hWnd, AddressOf(Rect))) to iVoid
13310>>>>>>>>>>>            Move (Rect.right - Rect.left) to cx
13311>>>>>>>>>>>            Move (Rect.bottom - Rect.top) to cy
13312>>>>>>>>>>>        End
13312>>>>>>>>>>>>
13312>>>>>>>>>>>        Else Begin
13313>>>>>>>>>>>            Move 25 to cy
13314>>>>>>>>>>>            Move 19 to cx
13315>>>>>>>>>>>        End
13315>>>>>>>>>>>>
13315>>>>>>>>>>>        Function_Return ( cy*65536 + cx )
13316>>>>>>>>>>>    End_Function
13317>>>>>>>>>>>    
13317>>>>>>>>>>>    Function PaneTextWidth WString sText Returns Integer
13319>>>>>>>>>>>        Handle hWnd hDC
13319>>>>>>>>>>>        Integer bOK
13319>>>>>>>>>>>        tWinPoint Point
13319>>>>>>>>>>>        tWinPoint Point
13319>>>>>>>>>>>        
13319>>>>>>>>>>>        Get Window_Handle to hWnd
13320>>>>>>>>>>>        Move (GetDC(hWnd)) to hDC
13321>>>>>>>>>>>        
13321>>>>>>>>>>>        Move (GetTextExtentW(hDC, AddressOf(sText), length(sText), AddressOf(Point))) to bOk
13322>>>>>>>>>>>        
13322>>>>>>>>>>>        Move (ReleaseDC(hWnd, hDC)) to hDC
13323>>>>>>>>>>>        
13323>>>>>>>>>>>        Function_Return Point.x
13324>>>>>>>>>>>    End_Function
13325>>>>>>>>>>>    
13325>>>>>>>>>>>    Procedure Set PaneWidth Integer iPane Integer cxPane
13327>>>>>>>>>>>        Set Message iPane to cxPane
13328>>>>>>>>>>>    End_Procedure
13329>>>>>>>>>>>    
13329>>>>>>>>>>>    Function PaneWidth Integer iPane Returns Integer
13331>>>>>>>>>>>        Function_Return (Message(Self,iPane))
13332>>>>>>>>>>>    End_Function
13333>>>>>>>>>>>    
13333>>>>>>>>>>>    Procedure Set PaneStyle Integer iPane Integer iStyle
13335>>>>>>>>>>>        Set Aux_Value iPane to iStyle
13336>>>>>>>>>>>    End_Procedure
13337>>>>>>>>>>>    
13337>>>>>>>>>>>    Function PaneStyle Integer iPane Returns Integer
13339>>>>>>>>>>>        Function_Return (Aux_Value(Self,iPane))
13340>>>>>>>>>>>    End_Function
13341>>>>>>>>>>>    
13341>>>>>>>>>>>    Procedure Set PaneText Integer iPane String sText
13343>>>>>>>>>>>        Set Value iPane to sText
13344>>>>>>>>>>>    End_Procedure
13345>>>>>>>>>>>    
13345>>>>>>>>>>>    Function PaneText Integer iPane Returns String
13347>>>>>>>>>>>        Function_Return (Value(Self,iPane))
13348>>>>>>>>>>>    End_Function
13349>>>>>>>>>>>    
13349>>>>>>>>>>>    Function PaneCount Returns Integer
13351>>>>>>>>>>>        Function_Return (Item_Count(Self))
13352>>>>>>>>>>>    End_Function
13353>>>>>>>>>>>    
13353>>>>>>>>>>>    Procedure OnClick Longptr iPane
13355>>>>>>>>>>>    End_Procedure
13356>>>>>>>>>>>    
13356>>>>>>>>>>>    Procedure OnDoubleClick Longptr iPane
13358>>>>>>>>>>>    End_Procedure
13359>>>>>>>>>>>    
13359>>>>>>>>>>>    Procedure OnRightClick Longptr iPane
13361>>>>>>>>>>>    End_Procedure
13362>>>>>>>>>>>    
13362>>>>>>>>>>>    Procedure OnDoubleRightClick Longptr iPane
13364>>>>>>>>>>>    End_Procedure
13365>>>>>>>>>>>    
13365>>>>>>>>>>>    Procedure OnSimpleModeChange
13367>>>>>>>>>>>    End_Procedure
13368>>>>>>>>>>>End_Class
13369>>>>>>>>>>>
13369>>>>>>>>>
13369>>>>>>>>>Class AppStatusBar is a BasicStatusBar
13370>>>>>>>>>    
13370>>>>>>>>>    Procedure Construct_Object
13372>>>>>>>>>        Forward Send Construct_Object
13374>>>>>>>>>        Property Integer Status_Help_Item 0
13375>>>>>>>>>        Property Integer Menu_Simple_State TRUE
13376>>>>>>>>>        
13376>>>>>>>>>        // SET s/b private, Get is public
13376>>>>>>>>>        Property Integer Menu_status_State False // MUST start false
13377>>>>>>>>>        
13377>>>>>>>>>        Property Integer Old_Simple_State  false
13378>>>>>>>>>        
13378>>>>>>>>>        Property String  Old_Status_Value  ''
13379>>>>>>>>>        
13379>>>>>>>>>        Set Popup_State         To TRUE
13380>>>>>>>>>        Set Attach_Parent_State To TRUE
13381>>>>>>>>>        // register status-bar with container
13381>>>>>>>>>        Delegate Set StatusBar_id To self
13383>>>>>>>>>    End_Procedure
13384>>>>>>>>>    
13384>>>>>>>>>    Procedure Set Status_Help_Value String sHelp
13386>>>>>>>>>        Integer iPart
13386>>>>>>>>>        Get Status_Help_Item To iPart
13387>>>>>>>>>        Set Value iPart to sHelp
13388>>>>>>>>>    End_Procedure
13389>>>>>>>>>    
13389>>>>>>>>>    Function Status_Help_Value Returns String
13391>>>>>>>>>        Integer iPart
13391>>>>>>>>>        String sHelp
13391>>>>>>>>>        Get Status_Help_Item To iPart
13392>>>>>>>>>        Get Value iPart To sHelp
13393>>>>>>>>>        Function_Return sHelp
13394>>>>>>>>>    End_Procedure
13395>>>>>>>>>    
13395>>>>>>>>>    Procedure Initialize_Menu
13397>>>>>>>>>        Integer iState OldState
13397>>>>>>>>>        If Not (Menu_Status_state(self)) Begin
13399>>>>>>>>>            Get Simple_State to OldState
13400>>>>>>>>>            Set Old_Simple_State to OldState
13401>>>>>>>>>            If OldState ;                Set Old_Status_Value to (Simple_Value(self))
13404>>>>>>>>>            Else ;                Set Old_Status_Value to (Status_Help_Value(self))
13406>>>>>>>>>            Set Simple_State to (Menu_Simple_State(self))
13407>>>>>>>>>            Set Menu_Status_State to TRUE
13408>>>>>>>>>        End
13408>>>>>>>>>>
13408>>>>>>>>>    End_Procedure
13409>>>>>>>>>    
13409>>>>>>>>>    Procedure Exit_Menu
13411>>>>>>>>>        Integer OldState
13411>>>>>>>>>        String OldVal
13411>>>>>>>>>        If (Menu_Status_state(self)) Begin
13413>>>>>>>>>            Get Old_Simple_State to OldState
13414>>>>>>>>>            Set Simple_State     to OldState
13415>>>>>>>>>            Get old_status_Value to oldVal
13416>>>>>>>>>            If OldState ;                Set Simple_Value to OldVal
13419>>>>>>>>>            Else ;                Set Status_Help_Value to OldVal
13421>>>>>>>>>            Set Menu_Status_State to FALSE
13422>>>>>>>>>        End
13422>>>>>>>>>>
13422>>>>>>>>>    End_Procedure
13423>>>>>>>>>    
13423>>>>>>>>>    Procedure Show_Status_Help String sHelp
13425>>>>>>>>>        Integer iState
13425>>>>>>>>>        Get Simple_State to iState
13426>>>>>>>>>        If not iState ;            Set Status_Help_Value to sHelp
13429>>>>>>>>>        Else ;            Set Simple_Value      to sHelp
13431>>>>>>>>>    End_Procedure
13432>>>>>>>>>    
13432>>>>>>>>>    Function Current_Status_Help Returns String
13434>>>>>>>>>        Integer iState
13434>>>>>>>>>        String sHelp
13434>>>>>>>>>        Get Simple_State to iState
13435>>>>>>>>>        If not iState ;            Get Status_Help_Value to sHelp
13438>>>>>>>>>        Else ;            Get Simple_Value      to sHelp
13440>>>>>>>>>        Function_Return sHelp
13441>>>>>>>>>    End_Function
13442>>>>>>>>>    
13442>>>>>>>>>    Procedure Page_Object Integer bShow
13444>>>>>>>>>        Integer hoClient
13444>>>>>>>>>        Handle hHndl
13444>>>>>>>>>        Get Window_Handle to hHndl
13445>>>>>>>>>        Forward Send Page_Object bShow
13447>>>>>>>>>        If (bShow AND hHndl=0) Begin
13449>>>>>>>>>            Delegate Get Client_Id To hoClient
13451>>>>>>>>>            If hoClient ;                Send Add_Border_Object to hoClient self amBOTTOM
13454>>>>>>>>>        End
13454>>>>>>>>>>
13454>>>>>>>>>    End_Procedure
13455>>>>>>>>>    
13455>>>>>>>>>    Procedure Deactivating
13457>>>>>>>>>        Integer hoClient
13457>>>>>>>>>        Delegate Get Client_Id To hoClient
13459>>>>>>>>>        Forward Send DeActivating
13461>>>>>>>>>        If hoClient ;            Send Remove_Border_Object to hoClient self amBOTTOM
13464>>>>>>>>>    End_Procedure
13465>>>>>>>>>    
13465>>>>>>>>>End_Class
13466>>>>>>>Use DFABtBar.pkg  // df application button bar
Including file: Dfabtbar.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Dfabtbar.pkg)
13466>>>>>>>>>Register_Procedure Add_Border_Object
13466>>>>>>>>>Register_Procedure Remove_Border_Object
13466>>>>>>>>>
13466>>>>>>>>>Use Windows.pkg
13466>>>>>>>>>
13466>>>>>>>>>Class AppToolBar is a BasicToolBar
13467>>>>>>>>>    
13467>>>>>>>>>    Procedure Construct_Object
13469>>>>>>>>>        Forward Send Construct_Object
13471>>>>>>>>>        Set Scope_State         to True
13472>>>>>>>>>        Set Attach_Parent_State to True
13473>>>>>>>>>        Set Popup_State         to True
13474>>>>>>>>>        Set Client_Area_State   to True
13475>>>>>>>>>        Delegate Set ToolBar_Id to Self
13477>>>>>>>>>    End_Procedure
13478>>>>>>>>>    
13478>>>>>>>>>    Procedure Page Integer bState
13480>>>>>>>>>        Integer hoClient
13480>>>>>>>>>        Handle  hWnd
13480>>>>>>>>>        Get Window_Handle to hWnd
13481>>>>>>>>>        Forward Send Page bState
13483>>>>>>>>>        If (bState=1 and hWnd=0) Begin
13485>>>>>>>>>            Delegate Get Client_Id to hoClient
13487>>>>>>>>>            If hoClient ;                Send Add_Border_Object to hoClient Self amTOP
13490>>>>>>>>>        End
13490>>>>>>>>>>
13490>>>>>>>>>    End_Procedure
13491>>>>>>>>>    
13491>>>>>>>>>    Procedure Deactivating
13493>>>>>>>>>        Integer hoClient
13493>>>>>>>>>        Forward Send DeActivating
13495>>>>>>>>>        Delegate Get Client_Id to hoClient
13497>>>>>>>>>        If hoClient Begin
13499>>>>>>>>>            Send Remove_Border_Object to hoClient Self amTOP
13500>>>>>>>>>        End
13500>>>>>>>>>>
13500>>>>>>>>>    End_Procedure
13501>>>>>>>>>    
13501>>>>>>>>>    Procedure Set GuiSize Integer cy Integer cx
13503>>>>>>>>>        Forward Set GuiSize to cy cx
13505>>>>>>>>>    End_Procedure
13506>>>>>>>>>    
13506>>>>>>>>>    // Container_Handle:
13506>>>>>>>>>    // JvH: - This function was put in to allow support for combo-form & other
13506>>>>>>>>>    // controls in the toolbar.
13506>>>>>>>>>    Function Container_Handle Returns Handle
13508>>>>>>>>>        Function_Return (window_handle(Self))
13509>>>>>>>>>    End_Function
13510>>>>>>>>>End_Class
13511>>>>>>>>>
13511>>>>>>>Use DFAClnt.pkg   // df application Client
Including file: Dfaclnt.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Dfaclnt.pkg)
13511>>>>>>>>>Use Windows.pkg
13511>>>>>>>>>Use Set.pkg
Including file: set.pkg    (C:\Program Files\DataFlex 20.1\Pkg\set.pkg)
13511>>>>>>>>>>>Use VDFBase.pkg
13511>>>>>>>>>>>
13511>>>>>>>>>>>Class Set is an ARRAY
13512>>>>>>>>>>>    
13512>>>>>>>>>>>    Function Find_Element String ElemStr Returns Integer
13514>>>>>>>>>>>        Integer ndx retVal ArrMax
13514>>>>>>>>>>>        String ArrVal
13514>>>>>>>>>>>        Get item_count to ArrMax
13515>>>>>>>>>>>        Move -1 to retVal
13516>>>>>>>>>>>        Move 0 to ndx
13517>>>>>>>>>>>        While (ndx < ArrMax and retVal = -1)
13521>>>>>>>>>>>            Get array_value  ndx to ArrVal
13522>>>>>>>>>>>            If (ArrVal = ElemStr) ;                Move ndx to retVal
13525>>>>>>>>>>>            Move (ndx + 1) to ndx
13526>>>>>>>>>>>        loop
13527>>>>>>>>>>>>
13527>>>>>>>>>>>        Function_Return retVal
13528>>>>>>>>>>>    End_Function
13529>>>>>>>>>>>    
13529>>>>>>>>>>>    Procedure Add_Element String Elem_Str Returns Integer
13531>>>>>>>>>>>        Integer Ret_Val
13531>>>>>>>>>>>        
13531>>>>>>>>>>>        Get Find_Element Elem_Str to Ret_Val
13532>>>>>>>>>>>        
13532>>>>>>>>>>>        If (Ret_Val < 0) ;            Get Item_Count to Ret_Val
13535>>>>>>>>>>>        
13535>>>>>>>>>>>        Set Array_Value  Ret_Val to Elem_Str
13536>>>>>>>>>>>        
13536>>>>>>>>>>>        Procedure_Return Ret_Val
13537>>>>>>>>>>>    End_Procedure
13538>>>>>>>>>>>    
13538>>>>>>>>>>>    Procedure Remove_Element String sElement
13540>>>>>>>>>>>        Integer iIndex
13540>>>>>>>>>>>        Get Find_Element sElement to iIndex
13541>>>>>>>>>>>        If (iIndex > -1) ;            Send delete_item iIndex
13544>>>>>>>>>>>    End_Procedure
13545>>>>>>>>>>>    
13545>>>>>>>>>>>    
13545>>>>>>>>>>>End_Class
13546>>>>>>>>>>>
13546>>>>>>>>>>>//
13546>>>>>>>>>>>// global function to create set instances at random
13546>>>>>>>>>>>//
13546>>>>>>>>>>>Function make_set for cDesktop Returns Integer
13548>>>>>>>>>>>    Integer retval
13548>>>>>>>>>>>    Object SetTemplate is a Set
13550>>>>>>>>>>>        Move Self to retval
13551>>>>>>>>>>>    End_Object
13552>>>>>>>>>>>    Function_Return retval
13553>>>>>>>>>>>End_Function
13554>>>>>>>>>>>
13554>>>>>>>>>>>
13554>>>>>>>>>>>
13554>>>>>>>>>
13554>>>>>>>>>Class AppClientArea is a MdiClientArea
13555>>>>>>>>>    
13555>>>>>>>>>    Procedure Construct_Object
13557>>>>>>>>>        Forward Send Construct_Object
13559>>>>>>>>>        
13559>>>>>>>>>        Property Integer Auto_Arrange_Icons_State True
13560>>>>>>>>>        
13560>>>>>>>>>        Property Integer Private.Client_Scrollbar_State   True
13561>>>>>>>>>        
13561>>>>>>>>>        Delegate Set Client_Id to Self
13563>>>>>>>>>        // keep track of all child dialog objects (views)
13563>>>>>>>>>        
13563>>>>>>>>>        Object Mdi_Dialogs is a Set
13565>>>>>>>>>        End_Object
13566>>>>>>>>>        
13566>>>>>>>>>        Property Integer Private.Last_Dialog_Item -1
13567>>>>>>>>>    End_Procedure
13568>>>>>>>>>    
13568>>>>>>>>>    Procedure Set Client_Scrollbar_State Integer bState
13570>>>>>>>>>        Set Scroll_bar_Visible_State to bState
13571>>>>>>>>>        Set Private.Client_Scrollbar_State to bState
13572>>>>>>>>>    End_Procedure
13573>>>>>>>>>    
13573>>>>>>>>>    Function Client_Scrollbar_State Returns Integer
13575>>>>>>>>>        Function_Return (Private.Client_Scrollbar_State(Self))
13576>>>>>>>>>    End_Function
13577>>>>>>>>>    
13577>>>>>>>>>    Procedure Add_Mdi_Dialog Integer Id#
13579>>>>>>>>>        Send Add_element to (mdi_dialogs(Self)) Id#
13580>>>>>>>>>    End_Procedure
13581>>>>>>>>>    
13581>>>>>>>>>    Procedure Remove_Mdi_Dialog Integer Id#
13583>>>>>>>>>        Integer obj#
13583>>>>>>>>>        Move (mdi_dialogs(Self)) to Obj#
13584>>>>>>>>>        If Obj# ;            Send Remove_element to (mdi_dialogs(Obj#)) Id#
13587>>>>>>>>>    End_Procedure
13588>>>>>>>>>    
13588>>>>>>>>>    Function Next_Mdi_Dialog Integer FindFirst Returns Integer
13590>>>>>>>>>        Integer Id# Item# Obj#
13590>>>>>>>>>        Get Private.Last_dialog_item to Item#
13591>>>>>>>>>        If FindFirst ;            Move -1 to Item#
13594>>>>>>>>>        Increment Item#
13595>>>>>>>>>        Set Private.Last_dialog_item to Item#
13596>>>>>>>>>        Move (Mdi_dialogs(Self)) to Obj#
13597>>>>>>>>>        If (Item_count(Obj#)>Item#) ;            Get Value of Obj# Item# to Id#
13600>>>>>>>>>        Function_Return Id#
13601>>>>>>>>>    End_Function
13602>>>>>>>>>    
13602>>>>>>>>>    Procedure Set GuiSize Integer cy Integer cx
13604>>>>>>>>>        Forward Set GuiSize to cy cx
13606>>>>>>>>>        If (active_state(Self) and Auto_Arrange_Icons_State(Self)) ;            Send Arrange_icons
13609>>>>>>>>>    End_Procedure
13610>>>>>>>>>    
13610>>>>>>>>>    Procedure Private.Adjust_MDI_Margins Integer cy Integer cx Integer BorderFlag
13612>>>>>>>>>        Integer cMargin
13612>>>>>>>>>        If (BorderFlag = amTOP) Begin
13614>>>>>>>>>            Get mdi_top_margin to cMargin
13615>>>>>>>>>            Set mdi_top_margin to (cMargin + cy)
13616>>>>>>>>>        End
13616>>>>>>>>>>
13616>>>>>>>>>        Else If (BorderFlag = amBOTTOM) Begin
13619>>>>>>>>>            Get mdi_bottom_margin to cMargin
13620>>>>>>>>>            Set mdi_bottom_margin to (cMargin + cy)
13621>>>>>>>>>        End
13621>>>>>>>>>>
13621>>>>>>>>>        Else If (BorderFlag = amLEFT) Begin
13624>>>>>>>>>            Get mdi_left_margin to cMargin
13625>>>>>>>>>            Set mdi_left_margin to (cMargin + cx)
13626>>>>>>>>>        End
13626>>>>>>>>>>
13626>>>>>>>>>        Else If (BorderFlag = amRIGHT) Begin
13629>>>>>>>>>            Get mdi_right_margin to cMargin
13630>>>>>>>>>            Set mdi_right_margin to (cMargin + cx)
13631>>>>>>>>>        End
13631>>>>>>>>>>
13631>>>>>>>>>    End_Procedure
13632>>>>>>>>>    
13632>>>>>>>>>    Procedure Add_Border_Object Integer hoBorder Integer BorderFlag
13634>>>>>>>>>        Integer cy cx
13634>>>>>>>>>        Move (hi(GuiSize(hoBorder)))  to cy
13635>>>>>>>>>        Move (low(GuiSize(hoBorder))) to cx
13636>>>>>>>>>        
13636>>>>>>>>>        Send Private.Adjust_MDI_Margins cy cx BorderFlag
13637>>>>>>>>>    End_Procedure
13638>>>>>>>>>    
13638>>>>>>>>>    Procedure Remove_Border_Object Integer hoBorder Integer BorderFlag
13640>>>>>>>>>        Integer cy cx
13640>>>>>>>>>        Move (-(hi(GuiSize(hoBorder))))  to cy
13641>>>>>>>>>        Move (-(low(GuiSize(hoBorder)))) to cx
13642>>>>>>>>>        
13642>>>>>>>>>        Send Private.Adjust_MDI_Margins cy cx BorderFlag
13643>>>>>>>>>    End_Procedure
13644>>>>>>>>>    
13644>>>>>>>>>    //
13644>>>>>>>>>    // default behavior of mdi client is to passively pass these
13644>>>>>>>>>    // message on to their mdi dialogs (views)
13644>>>>>>>>>    //
13644>>>>>>>>>    Function Verify_Exit_Application Returns Integer
13646>>>>>>>>>        Integer rVal Id#
13646>>>>>>>>>        Get Next_Mdi_Dialog True to Id#
13647>>>>>>>>>        While (Id# and Rval=0)
13651>>>>>>>>>            Get Verify_Exit_application of Id# to rVal
13652>>>>>>>>>            If not rval ;                Get Next_Mdi_Dialog False to Id#
13655>>>>>>>>>        End
13656>>>>>>>>>>
13656>>>>>>>>>        Function_Return rval
13657>>>>>>>>>    End_Function
13658>>>>>>>>>    
13658>>>>>>>>>    Procedure Notify_Exit_Application
13660>>>>>>>>>        Integer Id#
13660>>>>>>>>>        Get Next_Mdi_Dialog True to Id#
13661>>>>>>>>>        While Id#
13665>>>>>>>>>            Send Notify_Exit_Application to Id#
13666>>>>>>>>>            Get Next_Mdi_Dialog False to Id#
13667>>>>>>>>>        End
13668>>>>>>>>>>
13668>>>>>>>>>    End_Procedure
13669>>>>>>>>>    
13669>>>>>>>>>    Procedure Make_all_ViewMode Integer Mode
13671>>>>>>>>>        Integer Id#
13671>>>>>>>>>        Get Next_Mdi_Dialog True to Id#
13672>>>>>>>>>        While Id#
13676>>>>>>>>>            If (active_State(Id#)) ;                Set View_Mode of Id# to Mode
13679>>>>>>>>>            Get Next_Mdi_Dialog False to Id#
13680>>>>>>>>>        End
13681>>>>>>>>>>
13681>>>>>>>>>    End_Procedure
13682>>>>>>>>>    
13682>>>>>>>>>    Procedure Minimize_all_Windows
13684>>>>>>>>>        Send Make_All_ViewMode VIEWMODE_ICONIZE
13685>>>>>>>>>    End_Procedure
13686>>>>>>>>>    
13686>>>>>>>>>    Procedure Restore_all_Windows
13688>>>>>>>>>        Send Make_All_ViewMode VIEWMODE_NORMAL
13689>>>>>>>>>    End_Procedure
13690>>>>>>>>>    
13690>>>>>>>>>    // The framework has used activate_about for years to activate an about
13690>>>>>>>>>    // dialog. As of 12.1, we have a sub-class for this and providing the
13690>>>>>>>>>    // required message makes things work better. It is expected that a
13690>>>>>>>>>    // developer will augment this in their clientarea to call the about
13690>>>>>>>>>    // object that they created.
13690>>>>>>>>>    Procedure Activate_About
13692>>>>>>>>>    End_Procedure
13693>>>>>>>>>    
13693>>>>>>>>>    
13693>>>>>>>>>End_Class
13694>>>>>>>Use DFADlg.pkg    // df application Dialog
Including file: Dfadlg.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Dfadlg.pkg)
13694>>>>>>>>>Use LanguageText.pkg
13694>>>>>>>>>Use Windows.pkg
13694>>>>>>>>>Use dfConfrm.pkg
Including file: Dfconfrm.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Dfconfrm.pkg)
13694>>>>>>>>>>>Use LanguageText.pkg
13694>>>>>>>>>>>Use msgbox.pkg
13694>>>>>>>>>>>
13694>>>>>>>>>>>// General purpose confirm function. Added to all classes
13694>>>>>>>>>>>//
13694>>>>>>>>>>>Function Confirm for cUIObject String item_name Returns Integer
13696>>>>>>>>>>>    Integer rval
13696>>>>>>>>>>>    Move (YesNo_Box(item_name, C_$Confirm, MB_DEFBUTTON1 )) to rval
13697>>>>>>>>>>>    Function_Return (rval<>MBR_YES)
13698>>>>>>>>>>>End_function
13699>>>>>>>>>>>
13699>>>>>>>>>>>Function Save_Confirmation for cUIObject Returns integer
13701>>>>>>>>>>>    Function_return (confirm(self, C_$SaveThisRecord))
13702>>>>>>>>>>>End_function
13703>>>>>>>>>>>
13703>>>>>>>>>>>Function Delete_Confirmation for cUIObject Returns integer
13705>>>>>>>>>>>    Function_return (confirm(self, C_$DeleteThisRecord))
13706>>>>>>>>>>>End_function
13707>>>>>>>>>>>
13707>>>>>>>>>>>Function Line_Save_Confirmation for cUIObject Returns Integer
13709>>>>>>>>>>>    Function_return (confirm(self, C_$SaveThisLine))
13710>>>>>>>>>>>End_function
13711>>>>>>>>>>>
13711>>>>>>>>>>>Function Line_Delete_Confirmation for cUIObject Returns Integer
13713>>>>>>>>>>>    Function_return (confirm(self, C_$DeleteThisLine))
13714>>>>>>>>>>>End_function
13715>>>>>>>>>>>
13715>>>>>>>>>>>Function Data_Loss_Confirmation for cUIObject Returns integer
13717>>>>>>>>>>>    Function_return (confirm(self, C_$AbandonChanges))
13718>>>>>>>>>>>End_function
13719>>>>>>>>>>>
13719>>>>>>>>>>>Function Exit_Loss_Confirmation for cUIObject Returns integer
13721>>>>>>>>>>>    Integer tmp
13721>>>>>>>>>>>    get Should_save_recursive to tmp
13722>>>>>>>>>>>    If (tmp <> 0) ;        Function_Return (confirm(Self, C_$ChangesExistAbandon))
13725>>>>>>>>>>>End_function
13726>>>>>>>>>>>
13726>>>>>>>>>>>Function No_Confirmation for cUIObject Returns integer
13728>>>>>>>>>>>End_function
13729>>>>>>>>>>>
13729>>>>>>>>>>>Function Should_Save for cUIObject returns integer
13731>>>>>>>>>>>end_function
13732>>>>>>>>>>>
13732>>>>>>>>>>>Function Should_Save_Recursive for cUIObject returns integer
13734>>>>>>>>>>>    Integer rVal
13734>>>>>>>>>>>    Get Should_Save to Rval // changes in this object???
13735>>>>>>>>>>>    If (rVal = 0) ;        Broadcast Get Should_Save_Recursive to Rval // check w/ kids
13739>>>>>>>>>>>    Function_return rVal
13740>>>>>>>>>>>End_Function
13741>>>>>>>>>>>
13741>>>>>>>>>>>
13741>>>>>>>>>Use GlobalFunctionsProcedures.pkg
13741>>>>>>>>>Use tWinStructs.pkg
13741>>>>>>>>>
13741>>>>>>>>>
13741>>>>>>>>>// as of 15.0, moved some of dbViews features up to this level. Load/Save Environment showing view name
13741>>>>>>>>>Class AppDialog is a MdiDialog
13742>>>>>>>>>    
13742>>>>>>>>>    Procedure Construct_Object
13744>>>>>>>>>        Forward Send Construct_Object
13746>>>>>>>>>        
13746>>>>>>>>>        // This can be used to stop this view from loading and saving its environment.
13746>>>>>>>>>        Property Boolean pbDisableSaveEnvironment False
13747>>>>>>>>>        
13747>>>>>>>>>        // set true to auto-activate the view. This does not work if the object is deferred.
13747>>>>>>>>>        // this is a design time property which is applied during end_construct_object. This should
13747>>>>>>>>>        Property Boolean pbAutoActivate False
13748>>>>>>>>>        
13748>>>>>>>>>        // used to keep track of window placment when deactivated object is reactivated.
13748>>>>>>>>>        Property tWinWindowPlacement pWindowPlacement
13749>>>>>>>>>    End_Procedure
13750>>>>>>>>>    
13750>>>>>>>>>    Procedure End_Construct_Object
13752>>>>>>>>>        Boolean bAutoActivate
13752>>>>>>>>>        Delegate Send Add_Mdi_Dialog Self
13754>>>>>>>>>        Forward Send End_Construct_Object
13756>>>>>>>>>        // if auto-activate, add this to he the panel's array of objects to be acivated.
13756>>>>>>>>>        Get pbAutoActivate to bAutoActivate
13757>>>>>>>>>        If bAutoActivate Begin
13759>>>>>>>>>            Delegate Send AddAutoActivateView Self
13761>>>>>>>>>        End
13761>>>>>>>>>>
13761>>>>>>>>>    End_Procedure
13762>>>>>>>>>    
13762>>>>>>>>>    Procedure Destroy_Object
13764>>>>>>>>>        Integer obj
13764>>>>>>>>>        Move Self to obj
13765>>>>>>>>>        Delegate Send Remove_Mdi_Dialog obj
13767>>>>>>>>>        Forward Send Destroy_Object
13769>>>>>>>>>    End_Procedure
13770>>>>>>>>>    
13770>>>>>>>>>    // Augmented to save view position
13770>>>>>>>>>    Procedure Notify_Exit_Application
13772>>>>>>>>>        Send Save_Environment
13773>>>>>>>>>    End_Procedure
13774>>>>>>>>>    
13774>>>>>>>>>    Function View_Changed Returns Integer
13776>>>>>>>>>    End_Function
13777>>>>>>>>>    
13777>>>>>>>>>    //
13777>>>>>>>>>    // Augment exit_application_check to see if view is changed. If changed,
13777>>>>>>>>>    // display exit message as required
13777>>>>>>>>>    
13777>>>>>>>>>    Function Verify_Exit_Application Returns Integer
13779>>>>>>>>>        Integer Fail
13779>>>>>>>>>        Get View_Changed to Fail // Ask for changes in Data-sets
13780>>>>>>>>>        If fail ; // ok a change exist...activate changed view.            Get confirm (SFormat(C_$ChangesExistExit, Label(Self)) ) to fail
13783>>>>>>>>>        Function_Return fail
13784>>>>>>>>>    End_Function
13785>>>>>>>>>    
13785>>>>>>>>>    // Activates the view. If view is minimized it restores it first
13785>>>>>>>>>    // works with both popup_state T and F
13785>>>>>>>>>    
13785>>>>>>>>>    Procedure Activate_View Returns Integer
13787>>>>>>>>>        Integer rVal
13787>>>>>>>>>        If ( View_mode(Self)=VIEWMODE_ICONIZE ) ;            Set view_mode to viewmode_normal
13790>>>>>>>>>        If (Popup_state(Self)) ;    // support both popup and            Get Msg_Popup to rVal
13793>>>>>>>>>        Else ;            Get Msg_Activate to rVal
13795>>>>>>>>>        Procedure_Return rVal
13796>>>>>>>>>    End_Procedure
13797>>>>>>>>>    
13797>>>>>>>>>    
13797>>>>>>>>>    // augmented to load last view position
13797>>>>>>>>>    
13797>>>>>>>>>    Procedure Add_Focus Integer hoBase Returns Integer
13799>>>>>>>>>        Integer iRetVal bState
13799>>>>>>>>>        Get Visible_State to bState
13800>>>>>>>>>        Set Visible_State to False
13801>>>>>>>>>        Forward Get Msg_Add_Focus hoBase to iRetVal
13803>>>>>>>>>        If (iRetVal=0) Begin
13805>>>>>>>>>            Send Load_Environment
13806>>>>>>>>>        End
13806>>>>>>>>>>
13806>>>>>>>>>        Set Visible_State to bState
13807>>>>>>>>>        Procedure_Return iRetVal
13808>>>>>>>>>    End_Procedure
13809>>>>>>>>>    
13809>>>>>>>>>    // This is augmented to send save_environment during a view close (was in close_panel)
13809>>>>>>>>>    // we set view_mode to normal if it is zoomed. This is needed to make the MDI stuff work
13809>>>>>>>>>    // properly with the save/load environment. The Saved environment data will make it zoom if needed.
13809>>>>>>>>>    //
13809>>>>>>>>>    Procedure Deactivate Integer eDeactivateScope Returns Integer
13811>>>>>>>>>        Integer eArea iFail
13811>>>>>>>>>        Boolean bPreserveEnvironment
13811>>>>>>>>>        Move (If(num_arguments=0, Area_Type, eDeactivateScope)) to eArea // in case no param is passed
13812>>>>>>>>>        If (eArea<>0) Begin
13814>>>>>>>>>            Forward Get msg_deactivate eArea to iFail
13816>>>>>>>>>        End
13816>>>>>>>>>>
13816>>>>>>>>>        Else Begin
13817>>>>>>>>>            Send Save_Environment
13818>>>>>>>>>            Forward Get msg_deactivate eArea to iFail
13820>>>>>>>>>            
13820>>>>>>>>>            // this works around a problem where maximized MDI views get saved but don't come back
13820>>>>>>>>>            // correctly when loaded again without exiting. It turns out the the MDI client restores
13820>>>>>>>>>            // the view sometimes without telling view_mode. If view_mode is normal, it always works.
13820>>>>>>>>>            // This must happen after the view is deactivated!
13820>>>>>>>>>            
13820>>>>>>>>>            If ghoApplication Begin
13822>>>>>>>>>                Get pbPreserveEnvironment of ghoApplication to bPreserveEnvironment
13823>>>>>>>>>            End
13823>>>>>>>>>>
13823>>>>>>>>>            // do these checks to have as small of an effect as possible.
13823>>>>>>>>>            If (bPreserveEnvironment and iFail=0 and view_mode(Self)=Viewmode_Zoom) Begin
13825>>>>>>>>>                Set View_Mode to Viewmode_Normal
13826>>>>>>>>>            End
13826>>>>>>>>>>
13826>>>>>>>>>        End
13826>>>>>>>>>>
13826>>>>>>>>>        Procedure_Return iFail
13827>>>>>>>>>    End_Procedure
13828>>>>>>>>>    
13828>>>>>>>>>    // Save the window placement information for this to the application object
13828>>>>>>>>>    
13828>>>>>>>>>    Procedure Save_Environment
13830>>>>>>>>>        tWinWindowPlacement WindowPlacement
13830>>>>>>>>>        tWinWindowPlacement WindowPlacement
13830>>>>>>>>>        Boolean bSuccess bCancel
13830>>>>>>>>>        Get pbDisableSaveEnvironment to bCancel
13831>>>>>>>>>        If not bCancel Begin
13833>>>>>>>>>            
13833>>>>>>>>>            // save environment to the object, in case it is reactivated during the same run.
13833>>>>>>>>>            Move (SizeOfType(tWinWindowPlacement)) to WindowPlacement.length
13834>>>>>>>>>            Move (GetWindowPlacement(Window_Handle(Self), addressof(WindowPlacement))) to bSuccess
13835>>>>>>>>>            If bSuccess Begin
13837>>>>>>>>>                // if minimized, assume restored, as we don't want to restart minimized!
13837>>>>>>>>>                If (WindowPlacement.showCmd = SW_SHOWMINIMIZED) Begin
13839>>>>>>>>>                    Move SW_SHOWNORMAL to WindowPlacement.showCmd
13840>>>>>>>>>                End
13840>>>>>>>>>>
13840>>>>>>>>>                Set pWindowPlacement to WindowPlacement
13841>>>>>>>>>            End
13841>>>>>>>>>>
13841>>>>>>>>>            // also save environment to the application object, so it can be used when reloaded
13841>>>>>>>>>            If ghoApplication ;                Send DoSaveEnvironment of ghoApplication Self False
13844>>>>>>>>>        End
13844>>>>>>>>>>
13844>>>>>>>>>    End_Procedure
13845>>>>>>>>>    
13845>>>>>>>>>    // Load the window placement information for this from the application object
13845>>>>>>>>>    
13845>>>>>>>>>    Procedure Load_Environment
13847>>>>>>>>>        tWinWindowPlacement WindowPlacement
13847>>>>>>>>>        tWinWindowPlacement WindowPlacement
13847>>>>>>>>>        Boolean bSuccess bCancel
13847>>>>>>>>>        Get pbDisableSaveEnvironment to bCancel
13848>>>>>>>>>        If not bCancel Begin
13850>>>>>>>>>            // if view has alrady been activated and deactivated use the setting from windowplacement saved in the object
13850>>>>>>>>>            Get pWindowPlacement to WindowPlacement
13851>>>>>>>>>            //  if length is zero, assume it has never been used before (never deactivated).
13851>>>>>>>>>            If (WindowPlacement.length>0) Begin
13853>>>>>>>>>                Move (SetWindowPlacement(Window_Handle(Self), AddressOf(WindowPlacement))) to bSuccess
13854>>>>>>>>>            End
13854>>>>>>>>>>
13854>>>>>>>>>            Else Begin
13855>>>>>>>>>                If ghoApplication ;                    Send DoLoadEnvironment of ghoApplication Self False
13858>>>>>>>>>            End
13858>>>>>>>>>>
13858>>>>>>>>>        End
13858>>>>>>>>>>
13858>>>>>>>>>    End_Procedure
13859>>>>>>>>>    
13859>>>>>>>>>    Procedure Entering_Scope Returns Integer
13861>>>>>>>>>        Integer rVal
13861>>>>>>>>>        Forward Get MSG_Entering_Scope to rVal
13863>>>>>>>>>        If not rVal ;            Send Show_View_Name (Label(Self))
13866>>>>>>>>>    End_Procedure
13867>>>>>>>>>    
13867>>>>>>>>>    Procedure Exiting_Scope Integer whereto Returns Integer
13869>>>>>>>>>        Integer rVal
13869>>>>>>>>>        Forward Get MSG_Exiting_Scope whereto to rVal
13871>>>>>>>>>        If not rVal ;            Send Show_View_Name ''
13874>>>>>>>>>    End_Procedure
13875>>>>>>>>>    
13875>>>>>>>>>    Procedure Show_view_Name String sHelp
13877>>>>>>>>>        Integer rVal Id
13877>>>>>>>>>        Get Statusbar_id to id
13878>>>>>>>>>        If Id ;            Send Show_View_Name to Id sHelp
13881>>>>>>>>>    End_Procedure
13882>>>>>>>>>    
13882>>>>>>>>>    // force object to be modal and then pop it up. Upon complettion restore it to a normal view
13882>>>>>>>>>    Procedure Popup_Modal Returns Integer
13884>>>>>>>>>        
13884>>>>>>>>>        Integer OldBMS OldAPS OldPS OldRS OldSS OldMDIState
13884>>>>>>>>>        Integer OldLoc OldAutoLoc OldKeyPath OldDisableSaveEnv OldMin OldMax
13884>>>>>>>>>        Integer rVal
13884>>>>>>>>>        
13884>>>>>>>>>        // If object is active we can't do anything. -1 means already active
13884>>>>>>>>>        If (Active_State(Self)) ;            Procedure_Return -1
13887>>>>>>>>>        
13887>>>>>>>>>        // Remember all important modal property settings.
13887>>>>>>>>>        Get Block_mouse_State to OldBMS
13888>>>>>>>>>        Get Attach_parent_State to OldAPS
13889>>>>>>>>>        Get Popup_State to OldPS
13890>>>>>>>>>        Get Ring_State to OldRS
13891>>>>>>>>>        Get Scope_State to OldSS
13892>>>>>>>>>        Get MDI_State to OldMDIState
13893>>>>>>>>>        Get Key_Path to OldKeyPath
13894>>>>>>>>>        Get Location to OldLoc
13895>>>>>>>>>        Get Maximize_Icon to OldMax
13896>>>>>>>>>        Get Minimize_Icon to OldMin
13897>>>>>>>>>        Get Auto_Locate_State to OldAutoLoc
13898>>>>>>>>>        Get pbDisableSaveEnvironment to OldDisableSaveEnv
13899>>>>>>>>>        
13899>>>>>>>>>        // set propertie required to make this a modal dialog
13899>>>>>>>>>        Set pbDisableSaveEnvironment to True
13900>>>>>>>>>        Set MDI_State to False
13901>>>>>>>>>        Set Auto_Locate_State to True
13902>>>>>>>>>        Set Key_path to Desktop
13903>>>>>>>>>        Set Block_mouse_state to True
13904>>>>>>>>>        Set Attach_parent_state to False
13905>>>>>>>>>        // we used to set Exit_Application_Local_State to True - as of 19.1 we don't
13905>>>>>>>>>        Set Popup_State to True
13906>>>>>>>>>        Set Ring_State to True
13907>>>>>>>>>        Set Scope_State to True
13908>>>>>>>>>        Set Minimize_Icon to False
13909>>>>>>>>>        Set Maximize_Icon to False
13910>>>>>>>>>        
13910>>>>>>>>>        Get Msg_Popup to rVal
13911>>>>>>>>>        If rval ;            Move -2 to rVal      // did not activate
13914>>>>>>>>>        Else ;            Move StrMark to rVal // StrMark keeps track of UI value
13916>>>>>>>>>        // if 0- a stop_ui, if >0, ret value
13916>>>>>>>>>        // restore all expected properties
13916>>>>>>>>>        Set Auto_Locate_State to OldAutoLoc
13917>>>>>>>>>        Set Location to (hi(OldLoc)) (Low(OldLoc))
13918>>>>>>>>>        Set pbDisableSaveEnvironment to OldDisableSaveEnv
13919>>>>>>>>>        Set MDI_State to OldMDIState
13920>>>>>>>>>        Set Maximize_Icon to OldMax
13921>>>>>>>>>        Set Minimize_Icon to OldMin
13922>>>>>>>>>        Set Block_mouse_State   to OldBMS
13923>>>>>>>>>        Set Attach_parent_State to OldAPS
13924>>>>>>>>>        Set Popup_State         to OldPS
13925>>>>>>>>>        Set Ring_State          to OldRS
13926>>>>>>>>>        Set Scope_State         to OldSS
13927>>>>>>>>>        Procedure_Return rVal
13928>>>>>>>>>        
13928>>>>>>>>>    End_Procedure
13929>>>>>>>>>    
13929>>>>>>>>>End_Class
13930>>>>>>>>>
13930>>>>>>>>>// logically this is required
13930>>>>>>>>>//{ DesignerClass=cDTView }
13930>>>>>>>>>Class View is an AppDialog
13931>>>>>>>>>End_Class
13932>>>>>>>>>
13932>>>>>>>
13932>>>>>>>
13932>>>>>>>Register_Function pbPreserveEnvironment Returns Boolean
13932>>>>>>>Register_Procedure Set phoMainPanel Handle hoMain
13932>>>>>>>Register_Procedure DoSaveEnvironment Handle hoContainer Boolean bProgram
13932>>>>>>>Register_Procedure DoLoadEnvironment Handle hoContainer Boolean bProgram
13932>>>>>>>Register_Procedure Set pbVisible Boolean bVisible
13932>>>>>>>Register_Function  pbVisible Returns Boolean
13932>>>>>>>
13932>>>>>>>
13932>>>>>>>
13932>>>>>>>Class AppPanel is a BasicPanel
13933>>>>>>>    //
13933>>>>>>>    //  Panel defaults. Use windows MDI color
13933>>>>>>>    //
13933>>>>>>>    //
13933>>>>>>>    Procedure Construct_Object
13935>>>>>>>        Forward Send Construct_Object
13937>>>>>>>        
13937>>>>>>>        Property Integer Auto_Activate_State True
13938>>>>>>>        
13938>>>>>>>        // Support status for toolbar and status bar. For now we support
13938>>>>>>>        // 0=Hide, 1=Show,
13938>>>>>>>        //
13938>>>>>>>        Property Integer Private.ToolBar_State  1
13939>>>>>>>        
13939>>>>>>>        Property Integer Private.StatusBar_State  1
13940>>>>>>>        
13940>>>>>>>        Property Handle[] phoAutoActivateViews
13941>>>>>>>        
13941>>>>>>>        Set Scope_State to True
13942>>>>>>>        Set Mdi_State to True
13943>>>>>>>        
13943>>>>>>>        Set Size to 274 479
13944>>>>>>>        Set pbSizeToClientArea  to False
13945>>>>>>>    End_Procedure
13946>>>>>>>    
13946>>>>>>>    Procedure Set Auto_Arrange_Icons_State Integer bState
13948>>>>>>>        Integer hoClient
13948>>>>>>>        Get Client_id to hoClient
13949>>>>>>>        If (hoClient and hoClient<>Self ) ;            Set Auto_Arrange_Icons_State of hoClient to bState
13952>>>>>>>    End_Procedure
13953>>>>>>>    
13953>>>>>>>    Function Auto_Arrange_Icons_State Returns Integer
13955>>>>>>>        Integer hoClient bState
13955>>>>>>>        Get Client_id to hoClient
13956>>>>>>>        If (hoClient and hoClient<>Self ) ;            Get Auto_Arrange_Icons_State of hoClient to bState
13959>>>>>>>        Function_Return bState
13960>>>>>>>    End_Function
13961>>>>>>>    
13961>>>>>>>    Procedure Toggle_Auto_Arrange_Icons
13963>>>>>>>        Set Auto_Arrange_Icons_State ;            to (not(Auto_Arrange_Icons_State(Self)))
13964>>>>>>>    End_Procedure
13965>>>>>>>    
13965>>>>>>>    Procedure Set Client_Scrollbar_State Integer bState
13967>>>>>>>        Integer hoClient
13967>>>>>>>        Get Client_id to hoClient
13968>>>>>>>        If (hoClient and hoClient<>Self ) ;            Set Client_Scrollbar_State of hoClient to bState
13971>>>>>>>    End_Procedure
13972>>>>>>>    
13972>>>>>>>    Function Client_Scrollbar_State Returns Integer
13974>>>>>>>        Integer hoClient bState
13974>>>>>>>        Get Client_id to hoClient
13975>>>>>>>        If (hoClient and hoClient<>Self ) ;            Get Client_Scrollbar_State of hoClient to bState
13978>>>>>>>        Function_Return bState
13979>>>>>>>    End_Function
13980>>>>>>>    
13980>>>>>>>    Procedure Toggle_Client_Scrollbar_State
13982>>>>>>>        Set Client_Scrollbar_State ;            to (not(Client_Scrollbar_State(Self)))
13983>>>>>>>    End_Procedure
13984>>>>>>>    
13984>>>>>>>    Function ToolBar_State Returns Integer
13986>>>>>>>        Function_Return (private.Toolbar_State(Self))
13987>>>>>>>    End_Function
13988>>>>>>>    
13988>>>>>>>    Procedure Set Toolbar_State Integer bState
13990>>>>>>>        Integer hoToolBar
13990>>>>>>>        Handle hoCommandBars
13990>>>>>>>        If (bState<>toolbar_State(Self)) Begin
13992>>>>>>>            Set private.toolbar_State to bState
13993>>>>>>>            
13993>>>>>>>            Get phoCommandBars to hoCommandbars
13994>>>>>>>            If hoCommandbars ;                Procedure_Return
13997>>>>>>>            
13997>>>>>>>            If (Window_Handle(Self)) Begin
13999>>>>>>>                Get toolBar_ID to hoToolBar
14000>>>>>>>                If hoToolBar ;                    Send Activate_Component hoToolBar bState (Focus_Mode(hoToolbar))
14003>>>>>>>            End
14003>>>>>>>>
14003>>>>>>>        End
14003>>>>>>>>
14003>>>>>>>    End_Procedure
14004>>>>>>>    
14004>>>>>>>    Procedure Toggle_Toolbar
14006>>>>>>>        Set Toolbar_State to (not(Toolbar_State(Self)))
14007>>>>>>>    End_Procedure
14008>>>>>>>    
14008>>>>>>>    Function StatusBar_State Returns Integer
14010>>>>>>>        Handle hoCommandBars hoStatusBar
14010>>>>>>>        Boolean bState
14010>>>>>>>        Get phoCommandBars to hoCommandbars
14011>>>>>>>        If hoCommandbars Begin
14013>>>>>>>            Get Statusbar_ID to hoStatusBar
14014>>>>>>>            If hoStatusBar Begin
14016>>>>>>>                Get pbVisible of hoStatusBar to bState
14017>>>>>>>            End
14017>>>>>>>>
14017>>>>>>>        End
14017>>>>>>>>
14017>>>>>>>        Else Begin
14018>>>>>>>            Get private.Statusbar_state to bState
14019>>>>>>>        End
14019>>>>>>>>
14019>>>>>>>        Function_Return bState
14020>>>>>>>    End_Function
14021>>>>>>>    
14021>>>>>>>    Procedure Set Statusbar_State Integer bState
14023>>>>>>>        Handle hoStatusBar hoCommandBars
14023>>>>>>>        If (bState<>Statusbar_State(Self)) Begin
14025>>>>>>>            Set private.Statusbar_State to bState
14026>>>>>>>            Get Statusbar_ID to hoStatusBar
14027>>>>>>>            
14027>>>>>>>            Get phoCommandBars to hoCommandbars
14028>>>>>>>            If hoCommandbars Begin
14030>>>>>>>                If hoStatusBar Begin
14032>>>>>>>                    Set pbVisible of hoStatusBar to bState
14033>>>>>>>                End
14033>>>>>>>>
14033>>>>>>>            End
14033>>>>>>>>
14033>>>>>>>            Else Begin
14034>>>>>>>                If (Window_Handle(Self)) Begin
14036>>>>>>>                    If hoStatusBar ;                        Send Activate_Component hoStatusBar bState  nonfocusable
14039>>>>>>>                End
14039>>>>>>>>
14039>>>>>>>            End
14039>>>>>>>>
14039>>>>>>>        End
14039>>>>>>>>
14039>>>>>>>    End_Procedure
14040>>>>>>>    
14040>>>>>>>    Procedure Toggle_Statusbar
14042>>>>>>>        Set Statusbar_State to (not(statusbar_State(Self)))
14043>>>>>>>    End_Procedure
14044>>>>>>>    
14044>>>>>>>    Procedure AutoSizeLocate
14046>>>>>>>    End_Procedure
14047>>>>>>>    
14047>>>>>>>    Procedure Size_Components
14049>>>>>>>        Integer iToolBar iStatBar //iClient
14049>>>>>>>        Integer iSizeToolBar
14049>>>>>>>        Handle hoCommandbars
14049>>>>>>>        
14049>>>>>>>        Get phoCommandBars to hoCommandbars
14050>>>>>>>        If hoCommandbars ;            Procedure_Return
14053>>>>>>>        
14053>>>>>>>        If not (Window_Handle(Self)) ;            Procedure_Return
14056>>>>>>>        
14056>>>>>>>        Get ToolBar_id   to iToolBar
14057>>>>>>>        Get StatusBar_id to iStatBar
14058>>>>>>>        //Get Client_id    To iClient
14058>>>>>>>        
14058>>>>>>>        If (iToolBar and Window_Handle(iToolbar)) Begin
14060>>>>>>>            //Send AutoSizeLocate To iToolBar
14060>>>>>>>            Get GuiSize of iToolbar to iSizeToolbar
14061>>>>>>>            Set GUIsize of iToolbar to (hi(iSizeToolbar)) (low(iSizeToolbar)) // forces auto resize - don't change size
14062>>>>>>>            //set GUIsize of iToolbar to 28 800 // forces auto resize
14062>>>>>>>        End
14062>>>>>>>>
14062>>>>>>>        
14062>>>>>>>        If (iStatBar and Window_Handle(iStatBar)) Begin
14064>>>>>>>            Send AutoSizeLocate to iStatBar
14065>>>>>>>        End
14065>>>>>>>>
14065>>>>>>>    End_Procedure
14066>>>>>>>    
14066>>>>>>>    Procedure Activate_Component Integer Obj Integer st Integer focusmode
14068>>>>>>>        Integer act
14068>>>>>>>        If not Obj ;            Procedure_Return
14071>>>>>>>        Get Active_State of Obj to act
14072>>>>>>>        If (st and act=0) Begin
14074>>>>>>>            Set Focus_Mode of obj to focusable
14075>>>>>>>            Send Add_focus to obj Self
14076>>>>>>>            Set Focus_Mode of obj to focusmode
14077>>>>>>>        End
14077>>>>>>>>
14077>>>>>>>        Else If (st=0 and act) ;            Send deactivate to obj
14081>>>>>>>    End_Procedure
14082>>>>>>>    
14082>>>>>>>    Procedure Add_Components
14084>>>>>>>        Integer hClient
14084>>>>>>>        Handle hoCommandbars
14084>>>>>>>        Get phoCommandBars to hoCommandbars
14085>>>>>>>        If not hoCommandbars Begin
14087>>>>>>>            Get Client_id to hClient
14088>>>>>>>            If (hClient and hClient<>Self ) ; // this forces the client to start at a                Set mdi_top_margin of hClient to (mdi_top_margin(hClient)) // proper size when maximized w/ no components.
14091>>>>>>>            Send Activate_Component (Toolbar_Id(Self)) ;                (Toolbar_State(Self)) nonfocusable
14092>>>>>>>            Send Activate_Component (Statusbar_Id(Self)) ;                (Statusbar_State(Self)) nonfocusable
14093>>>>>>>            Send Size_Components
14094>>>>>>>        End
14094>>>>>>>>
14094>>>>>>>    End_Procedure
14095>>>>>>>    
14095>>>>>>>    Procedure Activate Returns Integer
14097>>>>>>>        Integer bFail
14097>>>>>>>        Forward Get MSG_activate to bFail
14099>>>>>>>        //If NOT bFail Send Add_Components
14099>>>>>>>        Send Add_Components
14100>>>>>>>        Set Main_Window to Self
14101>>>>>>>        Procedure_Return bFail
14102>>>>>>>    End_Procedure
14103>>>>>>>    
14103>>>>>>>    Procedure Client_Message Integer Msg_Id
14105>>>>>>>        Integer hoClient
14105>>>>>>>        Get Client_id to hoClient
14106>>>>>>>        If (hoClient and hoClient <> Self) ;            Send Msg_id to hoClient
14109>>>>>>>    End_Procedure
14110>>>>>>>    
14110>>>>>>>    Procedure Arrange_Icons
14112>>>>>>>        Send Client_Message Current_Message
14113>>>>>>>    End_Procedure
14114>>>>>>>    
14114>>>>>>>    Procedure Cascade_Windows
14116>>>>>>>        Send Client_Message Current_Message
14117>>>>>>>    End_Procedure
14118>>>>>>>    
14118>>>>>>>    Procedure Tile_Windows_Horizontal
14120>>>>>>>        Send Client_Message Current_Message
14121>>>>>>>    End_Procedure
14122>>>>>>>    
14122>>>>>>>    Procedure Tile_Windows_Vertical
14124>>>>>>>        Send Client_Message Current_Message
14125>>>>>>>    End_Procedure
14126>>>>>>>    
14126>>>>>>>    Procedure Set GuiSize Integer sizy Integer sizx
14128>>>>>>>        Forward Set GUISize to sizy sizx
14130>>>>>>>        If BuildingObjectId ;            Procedure_Return
14133>>>>>>>        Send Size_Components
14134>>>>>>>    End_Procedure
14135>>>>>>>    
14135>>>>>>>    //  Returns false to indicate that this is not a DEO. This is used by
14135>>>>>>>    //  delegation to figure out if you are within a DEO and should therefore
14135>>>>>>>    //  send a DEO message. DEO view clients set this true
14135>>>>>>>    //
14135>>>>>>>    Function Is_Function Integer MsgId Integer ObjId Integer DelegateFg Returns Integer
14137>>>>>>>        Integer DelMode rVal Id
14137>>>>>>>        Move ( If(DelegateFg,Self,ObjId) ) to Id
14138>>>>>>>        Get Delegation_mode of Id to DelMode
14139>>>>>>>        Set Delegation_mode of Id to No_Delegate_or_Error
14140>>>>>>>        Get MsgId of ObjId to rVal
14141>>>>>>>        Set Delegation_mode of Id to DelMode
14142>>>>>>>        Function_Return rVal
14143>>>>>>>    End_Function
14144>>>>>>>    
14144>>>>>>>    // In this class this should return an id or nothing (no delegation).
14144>>>>>>>    // Note, if no context exists return a 0 or ''.
14144>>>>>>>    //
14144>>>>>>>    Function Help_Context Integer Context_Type Returns String
14146>>>>>>>        Integer ID
14146>>>>>>>        String  rVal
14146>>>>>>>        
14146>>>>>>>        If (Context_Type = HELP_CONTEXT_ID) ;            Get Help_ID to rVal
14149>>>>>>>        Else If (Context_Type = HELP_CONTEXT_KEYWORD) ;            Get Help_Keyword to rVal
14153>>>>>>>        Else If (Context_Type = HELP_CONTEXT_ID_OR_KEY) Begin
14156>>>>>>>            Get Help_ID to ID
14157>>>>>>>            If (ID = 0) ;                Get Help_Keyword to rVal
14160>>>>>>>            Move ID to rVal
14161>>>>>>>            If (rval = '') ;                Move 0 to rVal
14164>>>>>>>        End
14164>>>>>>>>
14164>>>>>>>        Else If (Context_Type = HELP_CONTEXT_DATAFILE) ;            Move '' to rVal
14168>>>>>>>        
14168>>>>>>>        Function_Return rVal
14169>>>>>>>    End_Function
14170>>>>>>>    
14170>>>>>>>    // Get context based on eContext. If no content found, Don't delegate with panels --- end the search (added to 11.1. See help_mx.pkg)
14170>>>>>>>    //
14170>>>>>>>    Function HtmlHelpContext Integer eContext String ByRef sContext Returns Integer
14172>>>>>>>        Integer eContextFound
14172>>>>>>>        Get HtmlHelpObjectContext eContext (&sContext) to eContextFound // context for this one object
14173>>>>>>>        Function_Return eContextFound
14174>>>>>>>    End_Function
14175>>>>>>>    
14175>>>>>>>    
14175>>>>>>>    // When verify_exit_appliction is received by default just
14175>>>>>>>    // send this message to the Mdi-client Id.
14175>>>>>>>    //
14175>>>>>>>    Function Verify_Exit_Application Returns Integer
14177>>>>>>>        Integer Id rVal
14177>>>>>>>        Get Client_Id to id
14178>>>>>>>        If (Id and Id<>Self) ;            Get Verify_Exit_application of Id to rVal
14181>>>>>>>        Function_Return Rval
14182>>>>>>>    End_Function
14183>>>>>>>    
14183>>>>>>>    // When exit notifiction is received by default just
14183>>>>>>>    // send this message to the Mdi-client Id.
14183>>>>>>>    //
14183>>>>>>>    Procedure Notify_Exit_Application
14185>>>>>>>        Send Client_Message Current_Message
14186>>>>>>>    End_Procedure
14187>>>>>>>    
14187>>>>>>>    Procedure Minimize_all_Windows
14189>>>>>>>        Send Client_Message Current_Message
14190>>>>>>>    End_Procedure
14191>>>>>>>    
14191>>>>>>>    Procedure Restore_all_Windows
14193>>>>>>>        Send Client_Message Current_Message
14194>>>>>>>    End_Procedure
14195>>>>>>>    
14195>>>>>>>    // augmented to  activate if required
14195>>>>>>>    //
14195>>>>>>>    Procedure End_Construct_Object
14197>>>>>>>        Forward Send End_Construct_object
14199>>>>>>>        If (Auto_activate_state(Self)) ;            Send Activate
14202>>>>>>>    End_Procedure
14203>>>>>>>    
14203>>>>>>>    Procedure Add_Focus Handle hoParent Returns Integer
14205>>>>>>>        Integer iError i iViews
14205>>>>>>>        Handle[] hoAutoActivateViews
14206>>>>>>>        Forward Get msg_Add_Focus hoParent to iError
14208>>>>>>>        If (iError=0) Begin
14210>>>>>>>            Get phoAutoActivateViews to hoAutoActivateViews
14211>>>>>>>            Move (SizeOfArray(hoAutoActivateViews)) to iViews
14212>>>>>>>            For i from 0 to (iViews-1)
14218>>>>>>>>
14218>>>>>>>                Send Activate_View of hoAutoActivateViews[i]
14219>>>>>>>            Loop
14220>>>>>>>>
14220>>>>>>>        End
14220>>>>>>>>
14220>>>>>>>    End_Procedure
14221>>>>>>>    
14221>>>>>>>    // adds a view to the array of views to be autoactivated
14221>>>>>>>    
14221>>>>>>>    Procedure AddAutoActivateView Handle hoView
14223>>>>>>>        Handle[] hoAutoActivateViews
14224>>>>>>>        Get phoAutoActivateViews to hoAutoActivateViews
14225>>>>>>>        Move hoView to hoAutoActivateViews[SizeOfArray(hoAutoActivateViews)]
14226>>>>>>>        Set phoAutoActivateViews to hoAutoActivateViews
14227>>>>>>>    End_Procedure
14228>>>>>>>    
14228>>>>>>>End_Class
14229>>>>>>>
14229>>>>>>>
14229>>>>>>>Use DFCursor.pkg
Including file: Dfcursor.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Dfcursor.pkg)
14229>>>>>>>>>//  create a desktop object named Cursor_control that understands
14229>>>>>>>>>//   Send Cursor_Wait to (cursor_Control(self))
14229>>>>>>>>>//            creates hourclass cursor
14229>>>>>>>>>//   Send Cursor_ready to (cursor_Control(self))
14229>>>>>>>>>//            restores regular cursor
14229>>>>>>>>>//
14229>>>>>>>>>Use Cursor.pkg
Including file: Cursor.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Cursor.pkg)
14229>>>>>>>>>>>Use Windows.pkg
14229>>>>>>>>>>>Use WinUser.pkg
14229>>>>>>>>>>>
14229>>>>>>>>>>>// Standard Cursor IDs
14229>>>>>>>>>>>
14229>>>>>>>>>>>
14229>>>>>>>>>>>
14229>>>>>>>>>>>
14229>>>>>>>>>>>
14229>>>>>>>>>>>Class CursorShape is a DFBaseToolPanel //BasicPanel
14230>>>>>>>>>>>    
14230>>>>>>>>>>>    Procedure Construct_Object
14232>>>>>>>>>>>        Forward Send Construct_Object
14234>>>>>>>>>>>        
14234>>>>>>>>>>>        Property Handle ClassCursorHandle 0
14235>>>>>>>>>>>        Set Visible_State to False
14236>>>>>>>>>>>        Set Size to 1 1
14237>>>>>>>>>>>    End_Procedure
14238>>>>>>>>>>>    
14238>>>>>>>>>>>    Procedure Set Cursor Integer CursorType
14240>>>>>>>>>>>        Handle CursorID hWnd
14240>>>>>>>>>>>        Longptr retval lpCursorType
14240>>>>>>>>>>>        Get Window_Handle to hWnd
14241>>>>>>>>>>>        If (CursorType = 0) Begin
14243>>>>>>>>>>>            Send Release_Mouse_Capture
14244>>>>>>>>>>>            Move (SetClassLongPtr(hWnd, GCL_HCURSOR, ClassCursorHandle(Self))) to retval
14245>>>>>>>>>>>            Set ClassCursorHandle to 0
14246>>>>>>>>>>>            Send Page_Object False
14247>>>>>>>>>>>        End
14247>>>>>>>>>>>>
14247>>>>>>>>>>>        Else Begin
14248>>>>>>>>>>>            Send Page_Object True
14249>>>>>>>>>>>            Get Window_Handle to hWnd
14250>>>>>>>>>>>            If (ClassCursorHandle(Self) = 0) ;                Set ClassCursorHandle to (GetClassLongPtr(hWnd, GCL_HCURSOR))
14253>>>>>>>>>>>            
14253>>>>>>>>>>>            Move CursorType to lpCursorType    // Move to Longptr type to avoid conversion from integer to pointer in the next line
14254>>>>>>>>>>>            Move (LoadCursorW(0,lpCursorType)) to CursorID
14255>>>>>>>>>>>            
14255>>>>>>>>>>>            Move (SetClassLongPtr(hWnd, GCL_HCURSOR, CursorID )) to retval
14256>>>>>>>>>>>            Move (SetCursor(CursorID)) to retval
14257>>>>>>>>>>>            Send Set_Mouse_Capture
14258>>>>>>>>>>>        End
14258>>>>>>>>>>>>
14258>>>>>>>>>>>    End_Procedure
14259>>>>>>>>>>>    
14259>>>>>>>>>>>    Procedure Mouse_Up
14261>>>>>>>>>>>        Handle retval
14261>>>>>>>>>>>        Send Set_Mouse_Capture
14262>>>>>>>>>>>        Move (SetCursor(GetClassLongPtr(Window_Handle(Self), GCL_HCURSOR))) to retval
14263>>>>>>>>>>>    End_Procedure
14264>>>>>>>>>>>    
14264>>>>>>>>>>>    Procedure Cursor_Wait
14266>>>>>>>>>>>        Set cursor to IDC_WAIT
14267>>>>>>>>>>>    End_Procedure
14268>>>>>>>>>>>    
14268>>>>>>>>>>>    Procedure Cursor_Ready
14270>>>>>>>>>>>        Set cursor to 0
14271>>>>>>>>>>>    End_Procedure
14272>>>>>>>>>>>    
14272>>>>>>>>>>>    
14272>>>>>>>>>>>End_Class
14273>>>>>>>>>
14273>>>>>>>>>Object Cursor_Control is a CursorShape
14275>>>>>>>>>End_Object
14276>>>>>>>>>
14276>>>>>>>
14276>>>>>>>//  Main DEO High level main Panel Class
14276>>>>>>>//
14276>>>>>>>Class Panel is a AppPanel
14277>>>>>>>    
14277>>>>>>>    Procedure Construct_Object
14279>>>>>>>        String St
14279>>>>>>>        Integer iVal
14279>>>>>>>        DWord dwState
14279>>>>>>>        Forward Send Construct_Object
14281>>>>>>>        
14281>>>>>>>        // defaults to hourglass...end_construct will remove
14281>>>>>>>        Send Cursor_wait to (Cursor_Control(Self)) // hourglass
14282>>>>>>>        
14282>>>>>>>    End_Procedure
14283>>>>>>>    
14283>>>>>>>    
14283>>>>>>>    // This sends the message register_active_view to all child objects.
14283>>>>>>>    // It passes the object ID of the object that is requesting this
14283>>>>>>>    // information. The flag BCast_Focus determines if this should
14283>>>>>>>    // broadcast or broadcast_focus
14283>>>>>>>    //
14283>>>>>>>    Procedure Notify_All_Views Integer Msg Integer obj Integer Bcast_Focus
14285>>>>>>>        Integer clobj
14285>>>>>>>        Get Client_ID to clObj
14286>>>>>>>        If (ClObj = 0) ;            Move Self to ClObj
14289>>>>>>>        If BCast_Focus ;            Broadcast_Focus Send Msg to Clobj obj
14293>>>>>>>        Else ;            Broadcast       Send Msg to Clobj obj
14296>>>>>>>    End_Procedure
14297>>>>>>>    
14297>>>>>>>    //
14297>>>>>>>    // Save any information you wish about this panel.
14297>>>>>>>    //
14297>>>>>>>    //  Rules for saving:
14297>>>>>>>    //  1. only save if SaveEnvironment=TRUE, ON or YES
14297>>>>>>>    //  2. Save current size and location to ApplicationSize, ApplicationLocation
14297>>>>>>>    //
14297>>>>>>>    Procedure Save_Environment
14299>>>>>>>        If ghoApplication ;            Send DoSaveEnvironment of ghoApplication Self True
14302>>>>>>>    End_Procedure
14303>>>>>>>    
14303>>>>>>>    // For high level panel support save of environment
14303>>>>>>>    //
14303>>>>>>>    Procedure Notify_Exit_Application
14305>>>>>>>        Send Save_Environment
14306>>>>>>>        Forward Send Notify_Exit_Application
14308>>>>>>>    End_Procedure
14309>>>>>>>    
14309>>>>>>>    // augmented to remove hourglass
14309>>>>>>>    //
14309>>>>>>>    Procedure End_Construct_Object
14311>>>>>>>        // if application object exists, we need to tell that object that we are the main panel
14311>>>>>>>        If ghoApplication ;            Set phoMainPanel of ghoApplication to Self
14314>>>>>>>        Forward Send End_Construct_object
14316>>>>>>>        Send Cursor_ready to (Cursor_Control(Self)) // restore
14317>>>>>>>    End_Procedure
14318>>>>>>>    
14318>>>>>>>    Procedure Page Integer iState
14320>>>>>>>        Forward Send Page iState
14322>>>>>>>        If (iState =1) Begin
14324>>>>>>>            If ghoApplication ;                Send DoLoadEnvironment of ghoApplication Self True
14327>>>>>>>        End
14327>>>>>>>>
14327>>>>>>>    End_Procedure
14328>>>>>>>    
14328>>>>>>>End_Class
14329>>>>>>>
14329>>>>>>>//  Main DEO High level main MDI Client Class
14329>>>>>>>//
14329>>>>>>>//  Currently there is nothing special about this class but it was
14329>>>>>>>//  created because it is logically correct. Extensions may go here in
14329>>>>>>>//  the futire
14329>>>>>>>Class ClientArea is a AppClientArea
14330>>>>>>>End_Class
14331>>>>>>>
14331>>>>>Use cCJCommandBarSystem.pkg
Including file: cCJCommandBarSystem.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCJCommandBarSystem.pkg)
14331>>>>>>>Use Windows.pkg
14331>>>>>>>Use cRegistry.pkg
14331>>>>>>>Use cCJCommandBars.pkg // loads CodeJock class
Including file: cCJCommandBars.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCJCommandBars.pkg)
14331>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
14331>>>>>>>>>Use FlexCom20.pkg
Including file: FlexCOM20.pkg    (C:\Program Files\DataFlex 20.1\Pkg\FlexCOM20.pkg)
14331>>>>>>>>>>>// Full Flexcom support for automation (cComAutomationObject),
14331>>>>>>>>>>>// activeX (cComActiveXControl and document objects (cComDocumentObject)
14331>>>>>>>>>>>Use FlexCOM20_Base.pkg // defines basic flexcom symbols and class cComAutomationObject
Including file: FlexCOM20_Base.pkg    (C:\Program Files\DataFlex 20.1\Pkg\FlexCOM20_Base.pkg)
14331>>>>>>>>>>>>>// Flexcom support for automation (cComAutomationObject).
14331>>>>>>>>>>>>>// If you want activeX and document objects use FlexCom20.pkg
14331>>>>>>>>>>>>>Use VdfBase.pkg
14331>>>>>>>>>>>>>Use ComTypes.pkg
Including file: ComTypes.pkg    (C:\Program Files\DataFlex 20.1\Pkg\ComTypes.pkg)
14331>>>>>>>>>>>>>>>Use Variant.pkg
14331>>>>>>>>>>>>>>>
14331>>>>>>>>>>>>>>>
14331>>>>>>>>>>>>>
14331>>>>>>>>>>>>>
14331>>>>>>>>>>>>>
14331>>>>>>>>>>>>>//Enumerations for the peAutoCreate property
14331>>>>>>>>>>>>>//acNoAutoCreate - Do not automatically instantiate the COM object upon VDF object creation.
14331>>>>>>>>>>>>>//You must manually instantiate the COM object using CreateComObject. This is the default
14331>>>>>>>>>>>>>//for cComAutomation.
14331>>>>>>>>>>>>>Define acNoAutoCreate for 0
14331>>>>>>>>>>>>>//acAutoCreate - Automatically instantiate the COM object upon VDF object creation.
14331>>>>>>>>>>>>>//You won't need to manually instantiate the COM object. This is the default
14331>>>>>>>>>>>>>//for cComActiveXControl
14331>>>>>>>>>>>>>Define acAutoCreate for 1
14331>>>>>>>>>>>>>//acDeferredAutoCreate - Automatically instantiate the COM object during Page_Object,
14331>>>>>>>>>>>>>//and automatically destroy the COM object during Page_Delete. Use this setting only
14331>>>>>>>>>>>>>//if acAutoCreate causes problems.
14331>>>>>>>>>>>>>Define acDeferredAutoCreate for 2
14331>>>>>>>>>>>>>
14331>>>>>>>>>>>>>Class cComAutomationObject is a DFComAutomationObject
14332>>>>>>>>>>>>>    Procedure Construct_Object
14334>>>>>>>>>>>>>        Forward Send Construct_Object
14336>>>>>>>>>>>>>        Send RegisterComEvents
14337>>>>>>>>>>>>>    End_Procedure
14338>>>>>>>>>>>>>    
14338>>>>>>>>>>>>>    // It is expected that the Com class will augment this with useful event definitions
14338>>>>>>>>>>>>>    Procedure RegisterComEvents
14340>>>>>>>>>>>>>    End_Procedure
14341>>>>>>>>>>>>>    
14341>>>>>>>>>>>>>    // Attach the DF object to com automation object via progId.
14341>>>>>>>>>>>>>    // returns: Boolean bSuccess if Ok, If not ok, pcComObject is set to null
14341>>>>>>>>>>>>>    Function AttachActiveObject Returns Boolean
14343>>>>>>>>>>>>>        String sProgId
14343>>>>>>>>>>>>>        Variant vComObject
14343>>>>>>>>>>>>>        Boolean bSuccess
14343>>>>>>>>>>>>>        Get psProgID to sProgId
14344>>>>>>>>>>>>>        Get ComActiveObject sProgId to vComObject
14345>>>>>>>>>>>>>        Set pvComObject to vComObject
14346>>>>>>>>>>>>>        Move (not(IsNullComObject(vComObject))) to bSuccess // success of variant is not null
14347>>>>>>>>>>>>>        Function_Return bSuccess
14348>>>>>>>>>>>>>    End_Function
14349>>>>>>>>>>>>>    
14349>>>>>>>>>>>>>    // returns true if the control is created.
14349>>>>>>>>>>>>>    Function IsComObjectCreated Returns Boolean
14351>>>>>>>>>>>>>        Variant vComObject
14351>>>>>>>>>>>>>        Get pvComObject to vComObject
14352>>>>>>>>>>>>>        Function_Return (not(IsNullComObject(vComObject)))
14353>>>>>>>>>>>>>    End_Function
14354>>>>>>>>>>>>>    
14354>>>>>>>>>>>>>End_Class
14355>>>>>>>>>>>>>
14355>>>>>>>>>>>>>
14355>>>>>>>>>>>
14355>>>>>>>>>>>Use Windows.pkg
14355>>>>>>>>>>>
14355>>>>>>>>>>>Class cComDocumentObject is a DFComDocumentObject
14356>>>>>>>>>>>
14356>>>>>>>>>>>
14356>>>>>>>>>>>    Procedure Construct_Object
14358>>>>>>>>>>>        Forward Send Construct_Object
14360>>>>>>>>>>>        Send RegisterComEvents
14361>>>>>>>>>>>        Send Define_Standard_Object_Mixin
14362>>>>>>>>>>>        Send Define_Shadow_Mixin
14363>>>>>>>>>>>    End_Procedure
14364>>>>>>>>>>>
14364>>>>>>>>>>>    Import_Class_Protocol Standard_Object_Mixin
14365>>>>>>>>>>>    Import_Class_Protocol Shadow_Mixin
14366>>>>>>>>>>>
14366>>>>>>>>>>>    
14366>>>>>>>>>>>    // It is expected that the Com class will augment this with useful event definitions
14366>>>>>>>>>>>    Procedure RegisterComEvents
14368>>>>>>>>>>>    End_Procedure
14369>>>>>>>>>>>    
14369>>>>>>>>>>>    // returns true if the control is created.
14369>>>>>>>>>>>    Function IsComObjectCreated Returns Boolean
14371>>>>>>>>>>>        Variant vComObject
14371>>>>>>>>>>>        Get pvComObject to vComObject
14372>>>>>>>>>>>        Function_Return (not(IsNullComObject(vComObject)))
14373>>>>>>>>>>>    End_Function
14374>>>>>>>>>>>
14374>>>>>>>>>>>
14374>>>>>>>>>>>End_Class
14375>>>>>>>>>>>
14375>>>>>>>>>>>Class cComActiveXControl is a DFComActiveXControl
14376>>>>>>>>>>>
14376>>>>>>>>>>>    Procedure Construct_Object
14378>>>>>>>>>>>        Forward Send Construct_Object
14380>>>>>>>>>>>        Send RegisterComEvents
14381>>>>>>>>>>>
14381>>>>>>>>>>>
14381>>>>>>>>>>>        Send Define_Standard_Object_Mixin
14382>>>>>>>>>>>        Send Define_Single_Item_Navigate_Mixin
14383>>>>>>>>>>>        Send Define_Dflabel_Mixin
14384>>>>>>>>>>>
14384>>>>>>>>>>>        // internal: set true object is notified that the OCX value has changed.
14384>>>>>>>>>>>        Property Boolean pbPrivateControlChanging False
14385>>>>>>>>>>>        // Class sets this true when making a local (externally triggered) change. This is
14385>>>>>>>>>>>        // set when a Set Value change is made to prevent recursion
14385>>>>>>>>>>>        Property Boolean pbPrivateControlRefresh False
14386>>>>>>>>>>>        
14386>>>>>>>>>>>        // added to eumlate a single item form support
14386>>>>>>>>>>>        Property Boolean pbPrivateItem_Changed_State False
14387>>>>>>>>>>>        
14387>>>>>>>>>>>        // This keeps track of value, even when control is not created
14387>>>>>>>>>>>        Property String psPrivateValue ''
14388>>>>>>>>>>>        
14388>>>>>>>>>>>        // If set true, then the control will attempt to bind the value property in the object to the
14388>>>>>>>>>>>        // comValue in the control. It will try to keep these values in synch at all times. This allows a
14388>>>>>>>>>>>        // control to be used as a Form style value control. the default is true. Even when true if the
14388>>>>>>>>>>>        // get/set ComValue methods are not set up to do anything, this will do nothing.
14388>>>>>>>>>>>        Property Boolean pbBindValue True
14389>>>>>>>>>>>        
14389>>>>>>>>>>>    End_Procedure
14390>>>>>>>>>>>    
14390>>>>>>>>>>>    // It is expected that the Com class will augment this with useful event definitions
14390>>>>>>>>>>>    Procedure RegisterComEvents
14392>>>>>>>>>>>    End_Procedure
14393>>>>>>>>>>>
14393>>>>>>>>>>>    
14393>>>>>>>>>>>    // returns true if the control is created.
14393>>>>>>>>>>>    Function IsComObjectCreated Returns Boolean
14395>>>>>>>>>>>        Variant vComObject
14395>>>>>>>>>>>        Get pvComObject to vComObject
14396>>>>>>>>>>>        Function_Return (not(IsNullComObject(vComObject)))
14397>>>>>>>>>>>    End_Function
14398>>>>>>>>>>>    
14398>>>>>>>>>>>
14398>>>>>>>>>>>    Import_Class_Protocol Standard_Object_Mixin
14399>>>>>>>>>>>    Import_Class_Protocol Single_Item_Navigate_Mixin
14400>>>>>>>>>>>    Import_Class_Protocol Dflabel_Mixin
14401>>>>>>>>>>>
14401>>>>>>>>>>>    // added to eumlate a single item form support
14401>>>>>>>>>>>    Function Item_Count Returns Integer
14403>>>>>>>>>>>        Function_Return 1
14404>>>>>>>>>>>    End_Function
14405>>>>>>>>>>>    
14405>>>>>>>>>>>    // added to eumlate a single item form support
14405>>>>>>>>>>>    Procedure Set Item_Changed_State Integer iItem Integer iState
14407>>>>>>>>>>>        Set pbPrivateItem_changed_state to iState
14408>>>>>>>>>>>        If (iState and changed_state(Self)=False) ;            Set changed_state to True
14411>>>>>>>>>>>    End_Procedure
14412>>>>>>>>>>>    
14412>>>>>>>>>>>    Function Item_Changed_State Integer iItem Returns Integer
14414>>>>>>>>>>>        Function_Return (pbPrivateItem_changed_state(Self))
14415>>>>>>>>>>>    End_Function
14416>>>>>>>>>>>    
14416>>>>>>>>>>>    
14416>>>>>>>>>>>    // augment to set the label's appearance
14416>>>>>>>>>>>    Procedure Shadow_Display
14418>>>>>>>>>>>        Forward Send Shadow_display
14420>>>>>>>>>>>        Send Label_Shadow_Display
14421>>>>>>>>>>>    End_Procedure
14422>>>>>>>>>>>    
14422>>>>>>>>>>>    // Created to simulate get/Set value.
14422>>>>>>>>>>>    Procedure Set Value Integer iItem String sVal
14424>>>>>>>>>>>        If not (pbPrivateControlChanging(Self)) ;            Send OnRefreshControl sVal
14427>>>>>>>>>>>        Set psPrivateValue to sVal
14428>>>>>>>>>>>        Send OnChange
14429>>>>>>>>>>>        //Set changed_state to True
14429>>>>>>>>>>>        Set item_changed_state 0 to True
14430>>>>>>>>>>>    End_Procedure
14431>>>>>>>>>>>    
14431>>>>>>>>>>>    Function Value Integer iItem Returns String
14433>>>>>>>>>>>        Function_Return (psPrivateValue(Self))
14434>>>>>>>>>>>        //function_return (Controlvalue(self))
14434>>>>>>>>>>>    End_Function
14435>>>>>>>>>>>    
14435>>>>>>>>>>>    Procedure OnChange
14437>>>>>>>>>>>    End_Procedure
14438>>>>>>>>>>>    
14438>>>>>>>>>>>    
14438>>>>>>>>>>>    // It is expected that the sub-class will provide functionality
14438>>>>>>>>>>>    // for these messages. This gets and sets the value of the actual
14438>>>>>>>>>>>    // window control. These should only be used to synchronize the window
14438>>>>>>>>>>>    // control and the DF side. Do not use for any other purpose.
14438>>>>>>>>>>>    Procedure Set ControlValue String sVal
14440>>>>>>>>>>>    End_Procedure
14441>>>>>>>>>>>    
14441>>>>>>>>>>>    Function ControlValue Returns String
14443>>>>>>>>>>>    End_Function
14444>>>>>>>>>>>    
14444>>>>>>>>>>>    Procedure OnCreate
14446>>>>>>>>>>>        // if we are binding value to comValue, do so upon creation
14446>>>>>>>>>>>        If (pbBindValue(Self)) ;            Set ControlValue to (Value(Self))
14449>>>>>>>>>>>        Forward Send OnCreate
14451>>>>>>>>>>>    End_Procedure
14452>>>>>>>>>>>    
14452>>>>>>>>>>>    // Notification that the control is about to be activated in place. The COM component is
14452>>>>>>>>>>>    // created but OnCreate is not yet fired (this happens after the InPlaceActivate).
14452>>>>>>>>>>>    Procedure OnBeforeInPlaceActivate
14454>>>>>>>>>>>        Forward Send OnBeforeInPlaceActivate
14456>>>>>>>>>>>    End_Procedure
14457>>>>>>>>>>>    
14457>>>>>>>>>>>    // Notification that the control's value has been changed
14457>>>>>>>>>>>    // externally by the program (via set value). Use to synchronize
14457>>>>>>>>>>>    // OCX control value.
14457>>>>>>>>>>>    Procedure OnRefreshControl String sVal
14459>>>>>>>>>>>        Boolean bOld
14459>>>>>>>>>>>        If (pbBindValue(Self) and pbPrivateControlChanging(Self)=0 and IsComObjectCreated(Self)) Begin
14461>>>>>>>>>>>            Get pbPrivateControlRefresh to bOld
14462>>>>>>>>>>>            Set pbPrivateControlRefresh to True
14463>>>>>>>>>>>            Set ControlValue to sval
14464>>>>>>>>>>>            Set pbPrivateControlRefresh to bOld
14465>>>>>>>>>>>        End
14465>>>>>>>>>>>>
14465>>>>>>>>>>>    End_Procedure
14466>>>>>>>>>>>    
14466>>>>>>>>>>>    // notification that the control has changed its value. Used to
14466>>>>>>>>>>>    // synchronize the object with the change.
14466>>>>>>>>>>>    Procedure OnControlValueChanged
14468>>>>>>>>>>>        String sVal
14468>>>>>>>>>>>        Boolean bOld
14468>>>>>>>>>>>        If (pbBindValue(Self) and pbPrivateControlRefresh(Self)=0) Begin
14470>>>>>>>>>>>            Get pbPrivateControlChanging to bOld
14471>>>>>>>>>>>            Set pbPrivateControlChanging to True
14472>>>>>>>>>>>            Get ControlValue to sVal
14473>>>>>>>>>>>            Set Value to sVal
14474>>>>>>>>>>>            Set Item_Changed_State 0 to True
14475>>>>>>>>>>>            Set pbPrivateControlChanging to bOld
14476>>>>>>>>>>>        End
14476>>>>>>>>>>>>
14476>>>>>>>>>>>    End_Procedure
14477>>>>>>>>>>>    
14477>>>>>>>>>>>    Procedure Delete_Data
14479>>>>>>>>>>>        Forward Send Delete_Data
14481>>>>>>>>>>>        Set Value to ''
14482>>>>>>>>>>>        Set Changed_state to False
14483>>>>>>>>>>>        Set Item_changed_state 0 to False
14484>>>>>>>>>>>    End_Procedure
14485>>>>>>>>>>>
14485>>>>>>>>>>>
14485>>>>>>>>>>>End_Class
14486>>>>>>>>>>>
14486>>>>>>>>>>>
14486>>>>>>>>>
14486>>>>>>>>>// Changes to Imported package
14486>>>>>>>>>//     OLEXTPxx to XTPxx
14486>>>>>>>>>//     OLExtpxx to xtpxx
14486>>>>>>>>>//     OLESTDxxx and OLEXPxxxx to STD/XP
14486>>>>>>>>>//     OLEOLE to OLE
14486>>>>>>>>>//     OLESBPS to SBPS
14486>>>>>>>>>//     OLETPM to TPM
14486>>>>>>>>>//     cCom classes to cCJ
14486>>>>>>>>>//     cCJAutomationObject back to cComAutomationObject
14486>>>>>>>>>//     cCJActiveXControl back to cComActiveXControl
14486>>>>>>>>>//     cCJTabToolBar to cCJComTabToolBar
14486>>>>>>>>>//     cCJTabControlItem to cCJComTabControlItem
14486>>>>>>>>>//     cCJStatusBar to cCJComStatusBar
14486>>>>>>>>>//     cCJStatusBarPane to cCJComStatusBarPane
14486>>>>>>>>>//     cCJMenuBar to cCJComMenuBar
14486>>>>>>>>>//     remove OnComUpdate from cCJCommandBars
14486>>>>>>>>>//     Use statements as noted below (classes moved to these files)
14486>>>>>>>>>//     Set classlibrary of all cComAutomation objects to Windows (for class doc)
14486>>>>>>>>>
14486>>>>>>>>>// These have been extracted from this class and moved into seperate packages
14486>>>>>>>>>// because other Codejock classes use these.
14486>>>>>>>>>Use cCJColorManager.pkg     // cCJColorManager
Including file: cCJColorManager.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCJColorManager.pkg)
14486>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
14486>>>>>>>>>>>Use FlexCom20.pkg
14486>>>>>>>>>>>
14486>>>>>>>>>>>Define XTPColorManagerColor for Integer
14486>>>>>>>>>>>    Define STDCOLOR_BACKGROUND for 1
14486>>>>>>>>>>>    Define STDCOLOR_ACTIVECAPTION for 2
14486>>>>>>>>>>>    Define STDCOLOR_INACTIVECAPTION for 3
14486>>>>>>>>>>>    Define STDCOLOR_MENU for 4
14486>>>>>>>>>>>    Define STDCOLOR_WINDOW for 5
14486>>>>>>>>>>>    Define STDCOLOR_WINDOWFRAME for 6
14486>>>>>>>>>>>    Define STDCOLOR_MENUTEXT for 7
14486>>>>>>>>>>>    Define STDCOLOR_WINDOWTEXT for 8
14486>>>>>>>>>>>    Define STDCOLOR_CAPTIONTEXT for 9
14486>>>>>>>>>>>    Define STDCOLOR_ACTIVEBORDER for 10
14486>>>>>>>>>>>    Define STDCOLOR_INACTIVEBORDER for 11
14486>>>>>>>>>>>    Define STDCOLOR_APPWORKSPACE for 12
14486>>>>>>>>>>>    Define STDCOLOR_HIGHLIGHT for 13
14486>>>>>>>>>>>    Define STDCOLOR_HIGHLIGHTTEXT for 14
14486>>>>>>>>>>>    Define STDCOLOR_BTNFACE for 15
14486>>>>>>>>>>>    Define STDCOLOR_BTNSHADOW for 16
14486>>>>>>>>>>>    Define STDCOLOR_GRAYTEXT for 17
14486>>>>>>>>>>>    Define STDCOLOR_BTNTEXT for 18
14486>>>>>>>>>>>    Define STDCOLOR_INACTIVECAPTIONTEXT for 19
14486>>>>>>>>>>>    Define STDCOLOR_BTNHIGHLIGHT for 20
14486>>>>>>>>>>>    Define STDCOLOR_3DDKSHADOW for 21
14486>>>>>>>>>>>    Define STDCOLOR_3DLIGHT for 22
14486>>>>>>>>>>>    Define STDCOLOR_INFOTEXT for 23
14486>>>>>>>>>>>    Define STDCOLOR_INFOBK for 24
14486>>>>>>>>>>>    Define STDCOLOR_HOTLIGHT for 26
14486>>>>>>>>>>>    Define STDCOLOR_GRADIENTACTIVECAPTION for 27
14486>>>>>>>>>>>    Define STDCOLOR_GRADIENTINACTIVECAPTION for 28
14486>>>>>>>>>>>    Define XPCOLOR_TOOLBAR_FACE for 30
14486>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT for 31
14486>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_BORDER for 32
14486>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_PUSHED for 33
14486>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_CHECKED for 36
14486>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_CHECKED_BORDER for 37
14486>>>>>>>>>>>    Define XPCOLOR_ICONSHADDOW for 34
14486>>>>>>>>>>>    Define XPCOLOR_GRAYTEXT for 35
14486>>>>>>>>>>>    Define XPCOLOR_TOOLBAR_GRIPPER for 38
14486>>>>>>>>>>>    Define XPCOLOR_SEPARATOR for 39
14486>>>>>>>>>>>    Define XPCOLOR_DISABLED for 40
14486>>>>>>>>>>>    Define XPCOLOR_MENUBAR_FACE for 41
14486>>>>>>>>>>>    Define XPCOLOR_MENUBAR_EXPANDED for 42
14486>>>>>>>>>>>    Define XPCOLOR_MENUBAR_BORDER for 43
14486>>>>>>>>>>>    Define XPCOLOR_MENUBAR_TEXT for 44
14486>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_TEXT for 45
14486>>>>>>>>>>>    Define XPCOLOR_TOOLBAR_TEXT for 46
14486>>>>>>>>>>>    Define XPCOLOR_PUSHED_TEXT for 47
14486>>>>>>>>>>>    Define XPCOLOR_TAB_INACTIVE_BACK for 48
14486>>>>>>>>>>>    Define XPCOLOR_TAB_INACTIVE_TEXT for 49
14486>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_PUSHED_BORDER for 50
14486>>>>>>>>>>>    Define XPCOLOR_3DFACE for 51
14486>>>>>>>>>>>    Define XPCOLOR_3DSHADOW for 52
14486>>>>>>>>>>>    Define XPCOLOR_FRAME for 54
14486>>>>>>>>>>>    Define XPCOLOR_SPLITTER_FACE for 55
14486>>>>>>>>>>>    Define XPCOLOR_LABEL for 56
14486>>>>>>>>>>>    Define XPCOLOR_STATICFRAME for 57
14486>>>>>>>>>>>
14486>>>>>>>>>>>Define XTPCurrentSystemTheme for Integer
14486>>>>>>>>>>>    // No known theme in use
14486>>>>>>>>>>>    Define xtpSystemThemeUnknown for 0
14486>>>>>>>>>>>    // Blue theme in use
14486>>>>>>>>>>>    Define xtpSystemThemeBlue for 1
14486>>>>>>>>>>>    // Olive theme in use
14486>>>>>>>>>>>    Define xtpSystemThemeOlive for 2
14486>>>>>>>>>>>    // Silver theme in use
14486>>>>>>>>>>>    Define xtpSystemThemeSilver for 3
14486>>>>>>>>>>>    // Silver theme in use
14486>>>>>>>>>>>    Define xtpSystemThemeRoyale for 4
14486>>>>>>>>>>>    // Silver theme in use
14486>>>>>>>>>>>    Define xtpSystemThemeAero for 5
14486>>>>>>>>>>>    // Use OS theme.
14486>>>>>>>>>>>    Define xtpSystemThemeAuto for 6
14486>>>>>>>>>>>
14486>>>>>>>>>>>
14486>>>>>>>>>>>// CLSID: {C0DE2000-DE43-4B56-BCEB-E14B825CF245}
14486>>>>>>>>>>>Class cCJIColorManager is a Mixin
14487>>>>>>>>>>>
14487>>>>>>>>>>>    Function ComSystemTheme Returns XTPCurrentSystemTheme
14489>>>>>>>>>>>        XTPCurrentSystemTheme retVal
14489>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
14490>>>>>>>>>>>        Function_Return retVal
14491>>>>>>>>>>>    End_Function
14492>>>>>>>>>>>
14492>>>>>>>>>>>    Procedure Set ComSystemTheme XTPCurrentSystemTheme value
14494>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
14495>>>>>>>>>>>    End_Procedure
14496>>>>>>>>>>>
14496>>>>>>>>>>>    Function ComEnableLunaBlueForRoyaleTheme Returns Boolean
14498>>>>>>>>>>>        Boolean retVal
14498>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
14499>>>>>>>>>>>        Function_Return retVal
14500>>>>>>>>>>>    End_Function
14501>>>>>>>>>>>
14501>>>>>>>>>>>    Procedure Set ComEnableLunaBlueForRoyaleTheme Boolean value
14503>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
14504>>>>>>>>>>>    End_Procedure
14505>>>>>>>>>>>
14505>>>>>>>>>>>    Function ComColor XTPColorManagerColor llIndex Returns OLE_COLOR
14507>>>>>>>>>>>        Handle hDispatchDriver
14507>>>>>>>>>>>        OLE_COLOR retVal
14507>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14508>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14509>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
14510>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_I4 to retVal
14511>>>>>>>>>>>        Function_Return retVal
14512>>>>>>>>>>>    End_Function
14513>>>>>>>>>>>
14513>>>>>>>>>>>    Procedure ComSetColor XTPColorManagerColor llIndex OLE_COLOR llColor
14515>>>>>>>>>>>        Handle hDispatchDriver
14515>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14516>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14517>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
14518>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
14519>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1 OLE_VT_VOID
14520>>>>>>>>>>>    End_Procedure
14521>>>>>>>>>>>
14521>>>>>>>>>>>    Function ComGetCurrentSystemTheme Returns XTPCurrentSystemTheme
14523>>>>>>>>>>>        Handle hDispatchDriver
14523>>>>>>>>>>>        XTPCurrentSystemTheme retVal
14523>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14524>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
14525>>>>>>>>>>>        Function_Return retVal
14526>>>>>>>>>>>    End_Function
14527>>>>>>>>>>>End_Class
14528>>>>>>>>>>>
14528>>>>>>>>>>>// CoClass
14528>>>>>>>>>>>// CLSID: {C0DE2000-F3FE-46E7-BB64-DB033F439F8B}
14528>>>>>>>>>>>Class cCJColorManager is a cComAutomationObject
14529>>>>>>>>>>>    Import_Class_Protocol cCJIColorManager
14530>>>>>>>>>>>
14530>>>>>>>>>>>    Procedure Construct_Object
14532>>>>>>>>>>>        Forward Send Construct_Object
14534>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
14535>>>>>>>>>>>    End_Procedure
14536>>>>>>>>>>>End_Class
14537>>>>>>>>>>>
14537>>>>>>>>>Use cCJImageManager.pkg     // cCJImageManagerIcons, cCJImageManagerIcon, cCJImageManager, cCJImageManagerIconSet
Including file: cCJImageManager.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCJImageManager.pkg)
14537>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
14537>>>>>>>>>>>Use FlexCom20.pkg
14537>>>>>>>>>>>
14537>>>>>>>>>>>// Image State
14537>>>>>>>>>>>Define XTPImageState for Integer
14537>>>>>>>>>>>    Define xtpImageNormal for 0
14537>>>>>>>>>>>    Define xtpImageDisabled for 1
14537>>>>>>>>>>>    Define xtpImageHot for 2
14537>>>>>>>>>>>    Define xtpImageChecked for 3
14537>>>>>>>>>>>    Define xtpImagePressed for 4
14537>>>>>>>>>>>
14537>>>>>>>>>>>// CLSID: {C0DE2000-CD87-48F0-AD57-63682A2F3FCC}
14537>>>>>>>>>>>Class cCJIImageManagerIcons is a Mixin
14538>>>>>>>>>>>
14538>>>>>>>>>>>    Function ComDrawReverted Returns Boolean
14540>>>>>>>>>>>        Boolean retVal
14540>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
14541>>>>>>>>>>>        Function_Return retVal
14542>>>>>>>>>>>    End_Function
14543>>>>>>>>>>>
14543>>>>>>>>>>>    Procedure Set ComDrawReverted Boolean value
14545>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
14546>>>>>>>>>>>    End_Procedure
14547>>>>>>>>>>>
14547>>>>>>>>>>>    Function ComMaskColor Returns OLE_COLOR
14549>>>>>>>>>>>        OLE_COLOR retVal
14549>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
14550>>>>>>>>>>>        Function_Return retVal
14551>>>>>>>>>>>    End_Function
14552>>>>>>>>>>>
14552>>>>>>>>>>>    Procedure Set ComMaskColor OLE_COLOR value
14554>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
14555>>>>>>>>>>>    End_Procedure
14556>>>>>>>>>>>
14556>>>>>>>>>>>    Function ComCount Returns Integer
14558>>>>>>>>>>>        Handle hDispatchDriver
14558>>>>>>>>>>>        Integer retVal
14558>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14559>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
14560>>>>>>>>>>>        Function_Return retVal
14561>>>>>>>>>>>    End_Function
14562>>>>>>>>>>>
14562>>>>>>>>>>>    Procedure ComAddIcon Longptr llHandle Integer llCommand XTPImageState llimageState
14564>>>>>>>>>>>        Handle hDispatchDriver
14564>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14565>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
14566>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llHandle
14567>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14568>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14569>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 2 OLE_VT_VOID
14570>>>>>>>>>>>    End_Procedure
14571>>>>>>>>>>>
14571>>>>>>>>>>>    Procedure ComLoadIcon String llPath Integer llCommand XTPImageState llimageState
14573>>>>>>>>>>>        Handle hDispatchDriver
14573>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14574>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
14575>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14576>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14577>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14578>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
14579>>>>>>>>>>>    End_Procedure
14580>>>>>>>>>>>
14580>>>>>>>>>>>    Procedure ComAddBitmap Longptr llHandle Variant llCommands XTPImageState llimageState Boolean llAlpha
14582>>>>>>>>>>>        Handle hDispatchDriver
14582>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14583>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14584>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llHandle
14585>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llCommands
14586>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14587>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llAlpha
14588>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
14589>>>>>>>>>>>    End_Procedure
14590>>>>>>>>>>>
14590>>>>>>>>>>>    Procedure ComLoadBitmap String llPath Variant llCommands XTPImageState llimageState
14592>>>>>>>>>>>        Handle hDispatchDriver
14592>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14593>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
14594>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14595>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llCommands
14596>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14597>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
14598>>>>>>>>>>>    End_Procedure
14599>>>>>>>>>>>
14599>>>>>>>>>>>    Procedure ComLoadBitmapFromResource Longptr llModule Integer llResource Variant llCommands XTPImageState llimageState
14601>>>>>>>>>>>        Handle hDispatchDriver
14601>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14602>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14603>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llModule
14604>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llResource
14605>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llCommands
14606>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14607>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
14608>>>>>>>>>>>    End_Procedure
14609>>>>>>>>>>>
14609>>>>>>>>>>>    Procedure ComLoadIconFromResource Longptr llModule Integer llResource Integer llCommand XTPImageState llimageState
14611>>>>>>>>>>>        Handle hDispatchDriver
14611>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14612>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14613>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llModule
14614>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llResource
14615>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14616>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14617>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
14618>>>>>>>>>>>    End_Procedure
14619>>>>>>>>>>>
14619>>>>>>>>>>>    Function ComLoadVectorIcon String llPath Integer llnIDCommand Integer llnWidth XTPImageState llimageState Returns Boolean
14621>>>>>>>>>>>        Handle hDispatchDriver
14621>>>>>>>>>>>        Boolean retVal
14621>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14622>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14623>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14624>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIDCommand
14625>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnWidth
14626>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14627>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 17 OLE_VT_BOOL to retVal
14628>>>>>>>>>>>        Function_Return retVal
14629>>>>>>>>>>>    End_Function
14630>>>>>>>>>>>
14630>>>>>>>>>>>    Function ComLoadVectorIconCode String llCode Integer llnIDCommand Integer llnWidth XTPImageState llimageState Returns Boolean
14632>>>>>>>>>>>        Handle hDispatchDriver
14632>>>>>>>>>>>        Boolean retVal
14632>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14633>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14634>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCode
14635>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIDCommand
14636>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnWidth
14637>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14638>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 18 OLE_VT_BOOL to retVal
14639>>>>>>>>>>>        Function_Return retVal
14640>>>>>>>>>>>    End_Function
14641>>>>>>>>>>>
14641>>>>>>>>>>>    Function ComLoadVectorIconFromResource BigInt llModule String llResourceType Integer llResource Integer llnIDCommand Integer llnWidth XTPImageState llimageState Returns Boolean
14643>>>>>>>>>>>        Handle hDispatchDriver
14643>>>>>>>>>>>        Boolean retVal
14643>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14644>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 6
14645>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I8 llModule
14646>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llResourceType
14647>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llResource
14648>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIDCommand
14649>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnWidth
14650>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14651>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 19 OLE_VT_BOOL to retVal
14652>>>>>>>>>>>        Function_Return retVal
14653>>>>>>>>>>>    End_Function
14654>>>>>>>>>>>
14654>>>>>>>>>>>    Procedure ComRemoveAll
14656>>>>>>>>>>>        Handle hDispatchDriver
14656>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14657>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
14658>>>>>>>>>>>    End_Procedure
14659>>>>>>>>>>>
14659>>>>>>>>>>>    Procedure ComAddIcons Variant llIcons
14661>>>>>>>>>>>        Handle hDispatchDriver
14661>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14662>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14663>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llIcons
14664>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
14665>>>>>>>>>>>    End_Procedure
14666>>>>>>>>>>>
14666>>>>>>>>>>>    Procedure ComRemoveIcon Integer llCommand
14668>>>>>>>>>>>        Handle hDispatchDriver
14668>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14669>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14670>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14671>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 10 OLE_VT_VOID
14672>>>>>>>>>>>    End_Procedure
14673>>>>>>>>>>>
14673>>>>>>>>>>>    Function ComIsAlphaIconsSupported Returns Boolean
14675>>>>>>>>>>>        Handle hDispatchDriver
14675>>>>>>>>>>>        Boolean retVal
14675>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14676>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_BOOL to retVal
14677>>>>>>>>>>>        Function_Return retVal
14678>>>>>>>>>>>    End_Function
14679>>>>>>>>>>>
14679>>>>>>>>>>>    Procedure ComRefreshAll
14681>>>>>>>>>>>        Handle hDispatchDriver
14681>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14682>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 12 OLE_VT_VOID
14683>>>>>>>>>>>    End_Procedure
14684>>>>>>>>>>>
14684>>>>>>>>>>>    Function ComGetImage Integer llCommand Integer llWidth Returns Variant
14686>>>>>>>>>>>        Handle hDispatchDriver
14686>>>>>>>>>>>        Variant retVal
14686>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14687>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14688>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14689>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
14690>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_DISPATCH to retVal
14691>>>>>>>>>>>        Function_Return retVal
14692>>>>>>>>>>>    End_Function
14693>>>>>>>>>>>
14693>>>>>>>>>>>    Function Com_NewEnum Returns Variant
14695>>>>>>>>>>>        Handle hDispatchDriver
14695>>>>>>>>>>>        Variant retVal
14695>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14696>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
14697>>>>>>>>>>>        Function_Return retVal
14698>>>>>>>>>>>    End_Function
14699>>>>>>>>>>>
14699>>>>>>>>>>>    Procedure ComDoPropExchange Variant llpPX
14701>>>>>>>>>>>        Handle hDispatchDriver
14701>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14702>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14703>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpPX
14704>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
14705>>>>>>>>>>>    End_Procedure
14706>>>>>>>>>>>End_Class
14707>>>>>>>>>>>
14707>>>>>>>>>>>// CoClass
14707>>>>>>>>>>>// CLSID: {C0DE2000-4290-47A7-8B05-90AC979F12D5}
14707>>>>>>>>>>>Class cCJImageManagerIcons is a cComAutomationObject
14708>>>>>>>>>>>    Import_Class_Protocol cCJIImageManagerIcons
14709>>>>>>>>>>>
14709>>>>>>>>>>>    Procedure Construct_Object
14711>>>>>>>>>>>        Forward Send Construct_Object
14713>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
14714>>>>>>>>>>>    End_Procedure
14715>>>>>>>>>>>End_Class
14716>>>>>>>>>>>
14716>>>>>>>>>>>// CLSID: {C0DE2000-7540-4926-8D3D-82A953AE7B7B}
14716>>>>>>>>>>>// Dispatch interface for ImageManager Control
14716>>>>>>>>>>>Class cCJ_DImageManager is a Mixin
14717>>>>>>>>>>>
14717>>>>>>>>>>>    Function ComIcons Returns Variant
14719>>>>>>>>>>>        Variant retVal
14719>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_DISPATCH to retVal
14720>>>>>>>>>>>        Function_Return retVal
14721>>>>>>>>>>>    End_Function
14722>>>>>>>>>>>
14722>>>>>>>>>>>    Procedure Set ComIcons Variant value
14724>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_DISPATCH to value
14725>>>>>>>>>>>    End_Procedure
14726>>>>>>>>>>>
14726>>>>>>>>>>>    Function ComIsAlphaIconsSupported Returns Boolean
14728>>>>>>>>>>>        Handle hDispatchDriver
14728>>>>>>>>>>>        Boolean retVal
14728>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14729>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
14730>>>>>>>>>>>        Function_Return retVal
14731>>>>>>>>>>>    End_Function
14732>>>>>>>>>>>
14732>>>>>>>>>>>    Procedure ComAboutBox
14734>>>>>>>>>>>        Handle hDispatchDriver
14734>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14735>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
14736>>>>>>>>>>>    End_Procedure
14737>>>>>>>>>>>End_Class
14738>>>>>>>>>>>
14738>>>>>>>>>>>// CLSID: {C0DE2000-E0F3-48CF-BD1D-5305A4F46C99}
14738>>>>>>>>>>>// Event interface for ImageManager Control
14738>>>>>>>>>>>Class cCJ_DImageManagerEvents is a Mixin
14739>>>>>>>>>>>
14739>>>>>>>>>>>    Procedure RegisterComEvents
14741>>>>>>>>>>>    End_Procedure
14742>>>>>>>>>>>End_Class
14743>>>>>>>>>>>
14743>>>>>>>>>>>// CoClass
14743>>>>>>>>>>>// ProgID: Codejock.ImageManager.20.0.0
14743>>>>>>>>>>>// CLSID: {C0DE2000-3949-47B3-B687-85E8DDA2AEDB}
14743>>>>>>>>>>>// Xtreme ImageManager Control
14743>>>>>>>>>>>Class cCJImageManager is a cComActiveXControl
14744>>>>>>>>>>>    Import_Class_Protocol cCJ_DImageManager
14745>>>>>>>>>>>    Import_Class_Protocol cCJ_DImageManagerEvents
14746>>>>>>>>>>>
14746>>>>>>>>>>>    Procedure Construct_Object
14748>>>>>>>>>>>        Forward Send Construct_Object
14750>>>>>>>>>>>        Set psProgID to "{C0DE2000-3949-47B3-B687-85E8DDA2AEDB}"
14751>>>>>>>>>>>        Set psEventId to "{C0DE2000-E0F3-48CF-BD1D-5305A4F46C99}"
14752>>>>>>>>>>>        Set peAutoCreate to acAutoCreate
14753>>>>>>>>>>>    End_Procedure
14754>>>>>>>>>>>End_Class
14755>>>>>>>>>>>
14755>>>>>>>>>>>// CLSID: {C0DE2000-AE6D-46A8-BC77-CEE7D5CE9ED7}
14755>>>>>>>>>>>Class cCJImageManagerIcon is a cComAutomationObject
14756>>>>>>>>>>>
14756>>>>>>>>>>>    Function ComId Returns Integer
14758>>>>>>>>>>>        Handle hDispatchDriver
14758>>>>>>>>>>>        Integer retVal
14758>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14759>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
14760>>>>>>>>>>>        Function_Return retVal
14761>>>>>>>>>>>    End_Function
14762>>>>>>>>>>>
14762>>>>>>>>>>>    Function ComWidth Returns Integer
14764>>>>>>>>>>>        Handle hDispatchDriver
14764>>>>>>>>>>>        Integer retVal
14764>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14765>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
14766>>>>>>>>>>>        Function_Return retVal
14767>>>>>>>>>>>    End_Function
14768>>>>>>>>>>>
14768>>>>>>>>>>>    Function ComHeight Returns Integer
14770>>>>>>>>>>>        Handle hDispatchDriver
14770>>>>>>>>>>>        Integer retVal
14770>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14771>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
14772>>>>>>>>>>>        Function_Return retVal
14773>>>>>>>>>>>    End_Function
14774>>>>>>>>>>>
14774>>>>>>>>>>>    Function ComScaled Returns Boolean
14776>>>>>>>>>>>        Handle hDispatchDriver
14776>>>>>>>>>>>        Boolean retVal
14776>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14777>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_BOOL to retVal
14778>>>>>>>>>>>        Function_Return retVal
14779>>>>>>>>>>>    End_Function
14780>>>>>>>>>>>
14780>>>>>>>>>>>    Function ComAlpha Returns Boolean
14782>>>>>>>>>>>        Handle hDispatchDriver
14782>>>>>>>>>>>        Boolean retVal
14782>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14783>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_BOOL to retVal
14784>>>>>>>>>>>        Function_Return retVal
14785>>>>>>>>>>>    End_Function
14786>>>>>>>>>>>
14786>>>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
14788>>>>>>>>>>>        Handle hDispatchDriver
14788>>>>>>>>>>>        OLE_HANDLE retVal
14788>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14789>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_I4 to retVal
14790>>>>>>>>>>>        Function_Return retVal
14791>>>>>>>>>>>    End_Function
14792>>>>>>>>>>>
14792>>>>>>>>>>>    Procedure ComDraw OLE_HANDLE llhDC Integer llx Integer lly Integer llcx Integer llcy XTPImageState llstate
14794>>>>>>>>>>>        Handle hDispatchDriver
14794>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14795>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 6
14796>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhDC
14797>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
14798>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
14799>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
14800>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
14801>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llstate
14802>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
14803>>>>>>>>>>>    End_Procedure
14804>>>>>>>>>>>
14804>>>>>>>>>>>    Function ComCreatePicture XTPImageState llstate Returns Variant
14806>>>>>>>>>>>        Handle hDispatchDriver
14806>>>>>>>>>>>        Variant retVal
14806>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14807>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14808>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llstate
14809>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_DISPATCH to retVal
14810>>>>>>>>>>>        Function_Return retVal
14811>>>>>>>>>>>    End_Function
14812>>>>>>>>>>>
14812>>>>>>>>>>>    Function ComScale Integer llWidth Returns Variant
14814>>>>>>>>>>>        Handle hDispatchDriver
14814>>>>>>>>>>>        Variant retVal
14814>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14815>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14816>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
14817>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_DISPATCH to retVal
14818>>>>>>>>>>>        Function_Return retVal
14819>>>>>>>>>>>    End_Function
14820>>>>>>>>>>>End_Class
14821>>>>>>>>>>>
14821>>>>>>>>>>>// CLSID: {C0DE2000-374B-4AED-9306-0B7AC4343BCC}
14821>>>>>>>>>>>Class cCJImageManagerIconSet is a cComAutomationObject
14822>>>>>>>>>>>
14822>>>>>>>>>>>    Function ComId Returns Integer
14824>>>>>>>>>>>        Handle hDispatchDriver
14824>>>>>>>>>>>        Integer retVal
14824>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14825>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
14826>>>>>>>>>>>        Function_Return retVal
14827>>>>>>>>>>>    End_Function
14828>>>>>>>>>>>
14828>>>>>>>>>>>    Function ComCount Returns Integer
14830>>>>>>>>>>>        Handle hDispatchDriver
14830>>>>>>>>>>>        Integer retVal
14830>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14831>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
14832>>>>>>>>>>>        Function_Return retVal
14833>>>>>>>>>>>    End_Function
14834>>>>>>>>>>>
14834>>>>>>>>>>>    Function ComGetImage Integer llWidth Returns Variant
14836>>>>>>>>>>>        Handle hDispatchDriver
14836>>>>>>>>>>>        Variant retVal
14836>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14837>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14838>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
14839>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_DISPATCH to retVal
14840>>>>>>>>>>>        Function_Return retVal
14841>>>>>>>>>>>    End_Function
14842>>>>>>>>>>>
14842>>>>>>>>>>>    Function Com_NewEnum Returns Variant
14844>>>>>>>>>>>        Handle hDispatchDriver
14844>>>>>>>>>>>        Variant retVal
14844>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14845>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
14846>>>>>>>>>>>        Function_Return retVal
14847>>>>>>>>>>>    End_Function
14848>>>>>>>>>>>End_Class
14849>>>>>>>>>>>
14849>>>>>>>>>Use cCJPropExchange.pkg     // cCJPropExchange
Including file: cCJPropExchange.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCJPropExchange.pkg)
14849>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
14849>>>>>>>>>>>Use FlexCom20.pkg
14849>>>>>>>>>>>
14849>>>>>>>>>>>// CLSID: {C0DE2000-1659-4A68-B826-DAFCAB16E824}
14849>>>>>>>>>>>Class cCJPropExchange is a cComAutomationObject
14850>>>>>>>>>>>
14850>>>>>>>>>>>    Function ComValue Returns Variant
14852>>>>>>>>>>>        Variant retVal
14852>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 0 OLE_VT_VARIANT to retVal
14853>>>>>>>>>>>        Function_Return retVal
14854>>>>>>>>>>>    End_Function
14855>>>>>>>>>>>
14855>>>>>>>>>>>    Procedure Set ComValue Variant value
14857>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 0 OLE_VT_VARIANT to value
14858>>>>>>>>>>>    End_Procedure
14859>>>>>>>>>>>
14859>>>>>>>>>>>    Function ComEncoding Returns String
14861>>>>>>>>>>>        String retVal
14861>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
14862>>>>>>>>>>>        Function_Return retVal
14863>>>>>>>>>>>    End_Function
14864>>>>>>>>>>>
14864>>>>>>>>>>>    Procedure Set ComEncoding String value
14866>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
14867>>>>>>>>>>>    End_Procedure
14868>>>>>>>>>>>
14868>>>>>>>>>>>    Function ComCreateAsXML Boolean llLoading String llSection Returns Boolean
14870>>>>>>>>>>>        Handle hDispatchDriver
14870>>>>>>>>>>>        Boolean retVal
14870>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14871>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14872>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLoading
14873>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llSection
14874>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BOOL to retVal
14875>>>>>>>>>>>        Function_Return retVal
14876>>>>>>>>>>>    End_Function
14877>>>>>>>>>>>
14877>>>>>>>>>>>    Function ComCreateAsRegistry Boolean llLoading String llSection Returns Boolean
14879>>>>>>>>>>>        Handle hDispatchDriver
14879>>>>>>>>>>>        Boolean retVal
14879>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14880>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14881>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLoading
14882>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llSection
14883>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
14884>>>>>>>>>>>        Function_Return retVal
14885>>>>>>>>>>>    End_Function
14886>>>>>>>>>>>
14886>>>>>>>>>>>    Function ComCreateAsBinaryFile Boolean llLoading String llPath Returns Boolean
14888>>>>>>>>>>>        Handle hDispatchDriver
14888>>>>>>>>>>>        Boolean retVal
14888>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14889>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14890>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLoading
14891>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14892>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BOOL to retVal
14893>>>>>>>>>>>        Function_Return retVal
14894>>>>>>>>>>>    End_Function
14895>>>>>>>>>>>
14895>>>>>>>>>>>    Function ComLoadFromFile String llPath Returns Boolean
14897>>>>>>>>>>>        Handle hDispatchDriver
14897>>>>>>>>>>>        Boolean retVal
14897>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14898>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14899>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14900>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_BOOL to retVal
14901>>>>>>>>>>>        Function_Return retVal
14902>>>>>>>>>>>    End_Function
14903>>>>>>>>>>>
14903>>>>>>>>>>>    Procedure ComSaveToFile String llPath
14905>>>>>>>>>>>        Handle hDispatchDriver
14905>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14906>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14907>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14908>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
14909>>>>>>>>>>>    End_Procedure
14910>>>>>>>>>>>
14910>>>>>>>>>>>    Function ComGetSection String llSection Returns Variant
14912>>>>>>>>>>>        Handle hDispatchDriver
14912>>>>>>>>>>>        Variant retVal
14912>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14913>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14914>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llSection
14915>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_DISPATCH to retVal
14916>>>>>>>>>>>        Function_Return retVal
14917>>>>>>>>>>>    End_Function
14918>>>>>>>>>>>
14918>>>>>>>>>>>    Procedure ComExchangeString String llPropName String ByRef llValue String llDefaultValue
14920>>>>>>>>>>>        Handle hDispatchDriver
14920>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14921>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
14922>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPropName
14923>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_BSTR) llValue
14924>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llDefaultValue
14925>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
14926>>>>>>>>>>>    End_Procedure
14927>>>>>>>>>>>
14927>>>>>>>>>>>    Procedure ComExchangeInt String llPropName Integer ByRef llValue Integer llDefaultValue
14929>>>>>>>>>>>        Handle hDispatchDriver
14929>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14930>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
14931>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPropName
14932>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llValue
14933>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llDefaultValue
14934>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
14935>>>>>>>>>>>    End_Procedure
14936>>>>>>>>>>>
14936>>>>>>>>>>>    Function ComLoading Returns Boolean
14938>>>>>>>>>>>        Handle hDispatchDriver
14938>>>>>>>>>>>        Boolean retVal
14938>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14939>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_BOOL to retVal
14940>>>>>>>>>>>        Function_Return retVal
14941>>>>>>>>>>>    End_Function
14942>>>>>>>>>>>
14942>>>>>>>>>>>    Function ComValid Returns Boolean
14944>>>>>>>>>>>        Handle hDispatchDriver
14944>>>>>>>>>>>        Boolean retVal
14944>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14945>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
14946>>>>>>>>>>>        Function_Return retVal
14947>>>>>>>>>>>    End_Function
14948>>>>>>>>>>>
14948>>>>>>>>>>>    Procedure ComEmptySection
14950>>>>>>>>>>>        Handle hDispatchDriver
14950>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14951>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
14952>>>>>>>>>>>    End_Procedure
14953>>>>>>>>>>>End_Class
14954>>>>>>>>>>>
14954>>>>>>>>>Use cCJTooltipContext.pkg   // cCJToolTipContext
Including file: cCJTooltipContext.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCJTooltipContext.pkg)
14954>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
14954>>>>>>>>>>>Use FlexCom20.pkg
14954>>>>>>>>>>>
14954>>>>>>>>>>>// ToolTip Style
14954>>>>>>>>>>>Define XTPToolTipStyle for Integer
14954>>>>>>>>>>>    Define xtpToolTipStandard for 0
14954>>>>>>>>>>>    Define xtpToolTipBalloon for 1
14954>>>>>>>>>>>    Define xtpToolTipOffice for 2
14954>>>>>>>>>>>    Define xtpToolTipRTF for 3
14954>>>>>>>>>>>    Define xtpToolTipLuna for 4
14954>>>>>>>>>>>    Define xtpToolTipResource for 5
14954>>>>>>>>>>>    Define xtpToolTipHTML for 6
14954>>>>>>>>>>>    Define xtpToolTipMarkup for 7
14954>>>>>>>>>>>    Define xtpToolTipOffice2013 for 8
14954>>>>>>>>>>>    Define xtpToolTipOffice2016 for 8
14954>>>>>>>>>>>
14954>>>>>>>>>>>// ToolTip Icon
14954>>>>>>>>>>>Define XTPToolTipIcon for Integer
14954>>>>>>>>>>>    Define xtpToolTipIconNone for 0
14954>>>>>>>>>>>    Define xtpToolTipIconInfo for 1
14954>>>>>>>>>>>    Define xtpToolTipIconWarning for 2
14954>>>>>>>>>>>    Define xtpToolTipIconError for 3
14954>>>>>>>>>>>
14954>>>>>>>>>>>// CLSID: {C0DE2000-BFB7-4925-9BB5-D3A0DDA469AF}
14954>>>>>>>>>>>Class cCJIToolTipContext is a Mixin
14955>>>>>>>>>>>
14955>>>>>>>>>>>    Function ComStyle Returns XTPToolTipStyle
14957>>>>>>>>>>>        XTPToolTipStyle retVal
14957>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
14958>>>>>>>>>>>        Function_Return retVal
14959>>>>>>>>>>>    End_Function
14960>>>>>>>>>>>
14960>>>>>>>>>>>    Procedure Set ComStyle XTPToolTipStyle value
14962>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
14963>>>>>>>>>>>    End_Procedure
14964>>>>>>>>>>>
14964>>>>>>>>>>>    Function ComMaxTipWidth Returns Integer
14966>>>>>>>>>>>        Integer retVal
14966>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
14967>>>>>>>>>>>        Function_Return retVal
14968>>>>>>>>>>>    End_Function
14969>>>>>>>>>>>
14969>>>>>>>>>>>    Procedure Set ComMaxTipWidth Integer value
14971>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
14972>>>>>>>>>>>    End_Procedure
14973>>>>>>>>>>>
14973>>>>>>>>>>>    Function ComTipBkColor Returns OLE_COLOR
14975>>>>>>>>>>>        OLE_COLOR retVal
14975>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
14976>>>>>>>>>>>        Function_Return retVal
14977>>>>>>>>>>>    End_Function
14978>>>>>>>>>>>
14978>>>>>>>>>>>    Procedure Set ComTipBkColor OLE_COLOR value
14980>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
14981>>>>>>>>>>>    End_Procedure
14982>>>>>>>>>>>
14982>>>>>>>>>>>    Function ComTipTextColor Returns OLE_COLOR
14984>>>>>>>>>>>        OLE_COLOR retVal
14984>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
14985>>>>>>>>>>>        Function_Return retVal
14986>>>>>>>>>>>    End_Function
14987>>>>>>>>>>>
14987>>>>>>>>>>>    Procedure Set ComTipTextColor OLE_COLOR value
14989>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
14990>>>>>>>>>>>    End_Procedure
14991>>>>>>>>>>>
14991>>>>>>>>>>>    Function ComFont Returns Variant
14993>>>>>>>>>>>        Variant retVal
14993>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
14994>>>>>>>>>>>        Function_Return retVal
14995>>>>>>>>>>>    End_Function
14996>>>>>>>>>>>
14996>>>>>>>>>>>    Procedure Set ComFont Variant value
14998>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
14999>>>>>>>>>>>    End_Procedure
15000>>>>>>>>>>>
15000>>>>>>>>>>>    Function ComShowOfficeBorder Returns Boolean
15002>>>>>>>>>>>        Boolean retVal
15002>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
15003>>>>>>>>>>>        Function_Return retVal
15004>>>>>>>>>>>    End_Function
15005>>>>>>>>>>>
15005>>>>>>>>>>>    Procedure Set ComShowOfficeBorder Boolean value
15007>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
15008>>>>>>>>>>>    End_Procedure
15009>>>>>>>>>>>
15009>>>>>>>>>>>    Function ComShowShadow Returns Boolean
15011>>>>>>>>>>>        Boolean retVal
15011>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
15012>>>>>>>>>>>        Function_Return retVal
15013>>>>>>>>>>>    End_Function
15014>>>>>>>>>>>
15014>>>>>>>>>>>    Procedure Set ComShowShadow Boolean value
15016>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
15017>>>>>>>>>>>    End_Procedure
15018>>>>>>>>>>>
15018>>>>>>>>>>>    Function ComImageDPIScaling Returns Boolean
15020>>>>>>>>>>>        Boolean retVal
15020>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
15021>>>>>>>>>>>        Function_Return retVal
15022>>>>>>>>>>>    End_Function
15023>>>>>>>>>>>
15023>>>>>>>>>>>    Procedure Set ComImageDPIScaling Boolean value
15025>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
15026>>>>>>>>>>>    End_Procedure
15027>>>>>>>>>>>
15027>>>>>>>>>>>    Procedure ComShowTitleAndDescription Boolean llShowTitleAndDescription XTPToolTipIcon llIconTitle
15029>>>>>>>>>>>        Handle hDispatchDriver
15029>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15030>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
15031>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShowTitleAndDescription
15032>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIconTitle
15033>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 2 OLE_VT_VOID
15034>>>>>>>>>>>    End_Procedure
15035>>>>>>>>>>>
15035>>>>>>>>>>>    Function ComIsBalloonStyleSupported Returns Boolean
15037>>>>>>>>>>>        Handle hDispatchDriver
15037>>>>>>>>>>>        Boolean retVal
15037>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15038>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_BOOL to retVal
15039>>>>>>>>>>>        Function_Return retVal
15040>>>>>>>>>>>    End_Function
15041>>>>>>>>>>>
15041>>>>>>>>>>>    Procedure ComSetMargin Integer llLeft Integer llTop Integer llRight Integer llBottom
15043>>>>>>>>>>>        Handle hDispatchDriver
15043>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15044>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
15045>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
15046>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
15047>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
15048>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
15049>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
15050>>>>>>>>>>>    End_Procedure
15051>>>>>>>>>>>
15051>>>>>>>>>>>    Procedure ComShowImage Boolean llShowImage Integer llImageBase
15053>>>>>>>>>>>        Handle hDispatchDriver
15053>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15054>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
15055>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShowImage
15056>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llImageBase
15057>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
15058>>>>>>>>>>>    End_Procedure
15059>>>>>>>>>>>
15059>>>>>>>>>>>    Procedure ComSetVectorIconSize Integer llcx Integer llcy
15061>>>>>>>>>>>        Handle hDispatchDriver
15061>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15062>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
15063>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
15064>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
15065>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 12 OLE_VT_VOID
15066>>>>>>>>>>>    End_Procedure
15067>>>>>>>>>>>End_Class
15068>>>>>>>>>>>
15068>>>>>>>>>>>// CoClass
15068>>>>>>>>>>>// CLSID: {C0DE2000-8C00-4F05-AF87-9F05BCB55475}
15068>>>>>>>>>>>Class cCJToolTipContext is a cComAutomationObject
15069>>>>>>>>>>>    Import_Class_Protocol cCJIToolTipContext
15070>>>>>>>>>>>
15070>>>>>>>>>>>    Procedure Construct_Object
15072>>>>>>>>>>>        Forward Send Construct_Object
15074>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
15075>>>>>>>>>>>    End_Procedure
15076>>>>>>>>>>>End_Class
15077>>>>>>>>>>>
15077>>>>>>>>>Use cCJTabControlItem.pkg   // cCJTabManagerMargin, cCJTabManagerColorSet, cCJTabManager, cCJTabControlItem
Including file: cCJTabControlItem.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCJTabControlItem.pkg)
15077>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
15077>>>>>>>>>>>Use FlexCom20.pkg
15077>>>>>>>>>>>
15077>>>>>>>>>>>Define XTPTabAppearanceStyle for Integer
15077>>>>>>>>>>>    Define xtpTabAppearancePropertyPage for 0
15077>>>>>>>>>>>    Define xtpTabAppearancePropertyPageSelected for 1
15077>>>>>>>>>>>    Define xtpTabAppearancePropertyPageFlat for 2
15077>>>>>>>>>>>    Define xtpTabAppearancePropertyPage2003 for 3
15077>>>>>>>>>>>    Define xtpTabAppearanceStateButtons for 4
15077>>>>>>>>>>>    Define xtpTabAppearanceFlat for 6
15077>>>>>>>>>>>    Define xtpTabThemeExcel2003 for 7
15077>>>>>>>>>>>    Define xtpTabAppearanceVisio for 8
15077>>>>>>>>>>>    Define xtpTabAppearancePropertyPage2007 for 10
15077>>>>>>>>>>>    Define xtpTabAppearancePropertyPageAccess2007 for 11
15077>>>>>>>>>>>    Define xtpTabThemeVisualStudio2003 for 5
15077>>>>>>>>>>>    Define xtpTabThemeVisualStudio2005 for 9
15077>>>>>>>>>>>    Define xtpTabThemeVisualStudio2010 for 12
15077>>>>>>>>>>>    Define xtpTabThemeVisualStudio2012 for 13
15077>>>>>>>>>>>    Define xtpTabThemeVisualStudio2015 for 15
15077>>>>>>>>>>>    Define xtpTabThemeNativeWindows10 for 16
15077>>>>>>>>>>>    Define xtpTabThemeOffice2013 for 14
15077>>>>>>>>>>>    Define xtpTabThemeOffice2016 for 14
15077>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio for 5
15077>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2003 for 5
15077>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2005 for 9
15077>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2010 for 12
15077>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2012 for 13
15077>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2015 for 15
15077>>>>>>>>>>>    Define xtpTabAppearanceNativeWindows10 for 16
15077>>>>>>>>>>>    Define xtpTabAppearanceExcel for 7
15077>>>>>>>>>>>
15077>>>>>>>>>>>Define XTPTabColorStyle for UInteger
15077>>>>>>>>>>>    Define xtpTabColorDefault for 1
15077>>>>>>>>>>>    Define xtpTabColorOffice2003 for 4
15077>>>>>>>>>>>    Define xtpTabColorWinNative for 8
15077>>>>>>>>>>>    Define xtpTabColorResource for 32
15077>>>>>>>>>>>    Define xtpTabColorOffice2007Access for 128
15077>>>>>>>>>>>    Define xtpTabColorVisualStudio2003 for 2
15077>>>>>>>>>>>    Define xtpTabColorVisualStudio2005 for 16
15077>>>>>>>>>>>    Define xtpTabColorVisualStudio2008 for 64
15077>>>>>>>>>>>    Define xtpTabColorVisualStudio2010 for 256
15077>>>>>>>>>>>    Define xtpTabColorVisualStudio2012 for 512
15077>>>>>>>>>>>    Define xtpTabColorVisualStudio2012Dark for 1024
15077>>>>>>>>>>>    Define xtpTabColorOffice2013 for 2048
15077>>>>>>>>>>>    Define xtpTabColorOffice2016 for 2048
15077>>>>>>>>>>>    Define xtpTabColorVisualStudio2015 for 4096
15077>>>>>>>>>>>    Define xtpTabColorNativeWindows10 for 8192
15077>>>>>>>>>>>    Define xtpTabColorAll for 65535
15077>>>>>>>>>>>    Define xtpTabColorVisualStudio for 2
15077>>>>>>>>>>>    Define xtpTabColorWinXP for 8
15077>>>>>>>>>>>    Define xtpTabColorWhidbey for 16
15077>>>>>>>>>>>    Define xtpTabColorAccess2007 for 128
15077>>>>>>>>>>>    Define xtpTabColorOffice2007 for 32
15077>>>>>>>>>>>
15077>>>>>>>>>>>Define XTPTabOneNoteColor for Integer
15077>>>>>>>>>>>    Define xtpTabColorBlue for 16777216
15077>>>>>>>>>>>    Define xtpTabColorYellow for 16777217
15077>>>>>>>>>>>    Define xtpTabColorGreen for 16777218
15077>>>>>>>>>>>    Define xtpTabColorRed for 16777219
15077>>>>>>>>>>>    Define xtpTabColorPurple for 16777220
15077>>>>>>>>>>>    Define xtpTabColorCyan for 16777221
15077>>>>>>>>>>>    Define xtpTabColorOrange for 16777222
15077>>>>>>>>>>>    Define xtpTabColorMagenta for 16777223
15077>>>>>>>>>>>
15077>>>>>>>>>>>Define XTPTabPosition for Integer
15077>>>>>>>>>>>    Define xtpTabPositionTop for 0
15077>>>>>>>>>>>    Define xtpTabPositionLeft for 1
15077>>>>>>>>>>>    Define xtpTabPositionBottom for 2
15077>>>>>>>>>>>    Define xtpTabPositionRight for 3
15077>>>>>>>>>>>
15077>>>>>>>>>>>Define XTPTabLayoutStyle for Integer
15077>>>>>>>>>>>    Define xtpTabLayoutAutoSize for 0
15077>>>>>>>>>>>    Define xtpTabLayoutSizeToFit for 1
15077>>>>>>>>>>>    Define xtpTabLayoutFixed for 2
15077>>>>>>>>>>>    Define xtpTabLayoutCompressed for 3
15077>>>>>>>>>>>    Define xtpTabLayoutMultiRow for 4
15077>>>>>>>>>>>    Define xtpTabLayoutRotated for 5
15077>>>>>>>>>>>
15077>>>>>>>>>>>Define XTPTabClientFrame for Integer
15077>>>>>>>>>>>    Define xtpTabFrameBorder for 0
15077>>>>>>>>>>>    Define xtpTabFrameSingleLine for 1
15077>>>>>>>>>>>    Define xtpTabFrameNone for 2
15077>>>>>>>>>>>
15077>>>>>>>>>>>Define XTPTabToolTipBehaviour for Integer
15077>>>>>>>>>>>    Define xtpTabToolTipNever for 0
15077>>>>>>>>>>>    Define xtpTabToolTipAlways for 1
15077>>>>>>>>>>>    Define xtpTabToolTipShrinkedOnly for 2
15077>>>>>>>>>>>
15077>>>>>>>>>>>Define XTPTabDrawTextFormat for Integer
15077>>>>>>>>>>>    Define xtpTabDrawTextLeft for 0
15077>>>>>>>>>>>    Define xtpTabDrawTextCenter for 1
15077>>>>>>>>>>>    Define xtpTabDrawTextRight for 2
15077>>>>>>>>>>>    Define xtpTabDrawTextVCenter for 4
15077>>>>>>>>>>>
15077>>>>>>>>>>>// CLSID: {C0DE2000-B4E9-45C7-AAF6-EF340E785590}
15077>>>>>>>>>>>Class cCJITabManagerMargin is a Mixin
15078>>>>>>>>>>>
15078>>>>>>>>>>>    Function ComLeft Returns Integer
15080>>>>>>>>>>>        Integer retVal
15080>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
15081>>>>>>>>>>>        Function_Return retVal
15082>>>>>>>>>>>    End_Function
15083>>>>>>>>>>>
15083>>>>>>>>>>>    Procedure Set ComLeft Integer value
15085>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
15086>>>>>>>>>>>    End_Procedure
15087>>>>>>>>>>>
15087>>>>>>>>>>>    Function ComTop Returns Integer
15089>>>>>>>>>>>        Integer retVal
15089>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
15090>>>>>>>>>>>        Function_Return retVal
15091>>>>>>>>>>>    End_Function
15092>>>>>>>>>>>
15092>>>>>>>>>>>    Procedure Set ComTop Integer value
15094>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
15095>>>>>>>>>>>    End_Procedure
15096>>>>>>>>>>>
15096>>>>>>>>>>>    Function ComRight Returns Integer
15098>>>>>>>>>>>        Integer retVal
15098>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
15099>>>>>>>>>>>        Function_Return retVal
15100>>>>>>>>>>>    End_Function
15101>>>>>>>>>>>
15101>>>>>>>>>>>    Procedure Set ComRight Integer value
15103>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
15104>>>>>>>>>>>    End_Procedure
15105>>>>>>>>>>>
15105>>>>>>>>>>>    Function ComBottom Returns Integer
15107>>>>>>>>>>>        Integer retVal
15107>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
15108>>>>>>>>>>>        Function_Return retVal
15109>>>>>>>>>>>    End_Function
15110>>>>>>>>>>>
15110>>>>>>>>>>>    Procedure Set ComBottom Integer value
15112>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
15113>>>>>>>>>>>    End_Procedure
15114>>>>>>>>>>>
15114>>>>>>>>>>>    Procedure ComSetRect Integer llLeft Integer llTop Integer llRight Integer llBottom
15116>>>>>>>>>>>        Handle hDispatchDriver
15116>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15117>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
15118>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
15119>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
15120>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
15121>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
15122>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
15123>>>>>>>>>>>    End_Procedure
15124>>>>>>>>>>>End_Class
15125>>>>>>>>>>>
15125>>>>>>>>>>>// CoClass
15125>>>>>>>>>>>// CLSID: {C0DE2000-90EE-4D24-8F7A-DA71BDEC35A8}
15125>>>>>>>>>>>Class cCJTabManagerMargin is a cComAutomationObject
15126>>>>>>>>>>>    Import_Class_Protocol cCJITabManagerMargin
15127>>>>>>>>>>>
15127>>>>>>>>>>>    Procedure Construct_Object
15129>>>>>>>>>>>        Forward Send Construct_Object
15131>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
15132>>>>>>>>>>>    End_Procedure
15133>>>>>>>>>>>End_Class
15134>>>>>>>>>>>
15134>>>>>>>>>>>// CLSID: {C0DE2000-ED71-4B4E-91CF-8444D6244F56}
15134>>>>>>>>>>>Class cCJITabPaintManagerColorSet is a Mixin
15135>>>>>>>>>>>
15135>>>>>>>>>>>    Function ComHeaderFaceLight Returns OLE_COLOR
15137>>>>>>>>>>>        OLE_COLOR retVal
15137>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
15138>>>>>>>>>>>        Function_Return retVal
15139>>>>>>>>>>>    End_Function
15140>>>>>>>>>>>
15140>>>>>>>>>>>    Procedure Set ComHeaderFaceLight OLE_COLOR value
15142>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
15143>>>>>>>>>>>    End_Procedure
15144>>>>>>>>>>>
15144>>>>>>>>>>>    Function ComHeaderFaceDark Returns OLE_COLOR
15146>>>>>>>>>>>        OLE_COLOR retVal
15146>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
15147>>>>>>>>>>>        Function_Return retVal
15148>>>>>>>>>>>    End_Function
15149>>>>>>>>>>>
15149>>>>>>>>>>>    Procedure Set ComHeaderFaceDark OLE_COLOR value
15151>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
15152>>>>>>>>>>>    End_Procedure
15153>>>>>>>>>>>
15153>>>>>>>>>>>    Function ComFrameBorder Returns OLE_COLOR
15155>>>>>>>>>>>        OLE_COLOR retVal
15155>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
15156>>>>>>>>>>>        Function_Return retVal
15157>>>>>>>>>>>    End_Function
15158>>>>>>>>>>>
15158>>>>>>>>>>>    Procedure Set ComFrameBorder OLE_COLOR value
15160>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
15161>>>>>>>>>>>    End_Procedure
15162>>>>>>>>>>>
15162>>>>>>>>>>>    Function ComControlFace Returns OLE_COLOR
15164>>>>>>>>>>>        OLE_COLOR retVal
15164>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
15165>>>>>>>>>>>        Function_Return retVal
15166>>>>>>>>>>>    End_Function
15167>>>>>>>>>>>
15167>>>>>>>>>>>    Procedure Set ComControlFace OLE_COLOR value
15169>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
15170>>>>>>>>>>>    End_Procedure
15171>>>>>>>>>>>
15171>>>>>>>>>>>    Function ComBorderHighlight Returns OLE_COLOR
15173>>>>>>>>>>>        OLE_COLOR retVal
15173>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
15174>>>>>>>>>>>        Function_Return retVal
15175>>>>>>>>>>>    End_Function
15176>>>>>>>>>>>
15176>>>>>>>>>>>    Procedure Set ComBorderHighlight OLE_COLOR value
15178>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
15179>>>>>>>>>>>    End_Procedure
15180>>>>>>>>>>>
15180>>>>>>>>>>>    Function ComButtonSelected Returns OLE_COLOR
15182>>>>>>>>>>>        OLE_COLOR retVal
15182>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
15183>>>>>>>>>>>        Function_Return retVal
15184>>>>>>>>>>>    End_Function
15185>>>>>>>>>>>
15185>>>>>>>>>>>    Procedure Set ComButtonSelected OLE_COLOR value
15187>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
15188>>>>>>>>>>>    End_Procedure
15189>>>>>>>>>>>
15189>>>>>>>>>>>    Function ComButtonNormal Returns OLE_COLOR
15191>>>>>>>>>>>        OLE_COLOR retVal
15191>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to retVal
15192>>>>>>>>>>>        Function_Return retVal
15193>>>>>>>>>>>    End_Function
15194>>>>>>>>>>>
15194>>>>>>>>>>>    Procedure Set ComButtonNormal OLE_COLOR value
15196>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to value
15197>>>>>>>>>>>    End_Procedure
15198>>>>>>>>>>>
15198>>>>>>>>>>>    Function ComNormalText Returns OLE_COLOR
15200>>>>>>>>>>>        OLE_COLOR retVal
15200>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
15201>>>>>>>>>>>        Function_Return retVal
15202>>>>>>>>>>>    End_Function
15203>>>>>>>>>>>
15203>>>>>>>>>>>    Procedure Set ComNormalText OLE_COLOR value
15205>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
15206>>>>>>>>>>>    End_Procedure
15207>>>>>>>>>>>
15207>>>>>>>>>>>    Function ComPressedText Returns OLE_COLOR
15209>>>>>>>>>>>        OLE_COLOR retVal
15209>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
15210>>>>>>>>>>>        Function_Return retVal
15211>>>>>>>>>>>    End_Function
15212>>>>>>>>>>>
15212>>>>>>>>>>>    Procedure Set ComPressedText OLE_COLOR value
15214>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
15215>>>>>>>>>>>    End_Procedure
15216>>>>>>>>>>>
15216>>>>>>>>>>>    Function ComSelectedText Returns OLE_COLOR
15218>>>>>>>>>>>        OLE_COLOR retVal
15218>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
15219>>>>>>>>>>>        Function_Return retVal
15220>>>>>>>>>>>    End_Function
15221>>>>>>>>>>>
15221>>>>>>>>>>>    Procedure Set ComSelectedText OLE_COLOR value
15223>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
15224>>>>>>>>>>>    End_Procedure
15225>>>>>>>>>>>
15225>>>>>>>>>>>    Function ComHighlightText Returns OLE_COLOR
15227>>>>>>>>>>>        OLE_COLOR retVal
15227>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_I4 to retVal
15228>>>>>>>>>>>        Function_Return retVal
15229>>>>>>>>>>>    End_Function
15230>>>>>>>>>>>
15230>>>>>>>>>>>    Procedure Set ComHighlightText OLE_COLOR value
15232>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_I4 to value
15233>>>>>>>>>>>    End_Procedure
15234>>>>>>>>>>>
15234>>>>>>>>>>>    Function ComDisabledText Returns OLE_COLOR
15236>>>>>>>>>>>        OLE_COLOR retVal
15236>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_I4 to retVal
15237>>>>>>>>>>>        Function_Return retVal
15238>>>>>>>>>>>    End_Function
15239>>>>>>>>>>>
15239>>>>>>>>>>>    Procedure Set ComDisabledText OLE_COLOR value
15241>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_I4 to value
15242>>>>>>>>>>>    End_Procedure
15243>>>>>>>>>>>
15243>>>>>>>>>>>    Function ComTabExcelSelectedLeftInnerBorder Returns OLE_COLOR
15245>>>>>>>>>>>        OLE_COLOR retVal
15245>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to retVal
15246>>>>>>>>>>>        Function_Return retVal
15247>>>>>>>>>>>    End_Function
15248>>>>>>>>>>>
15248>>>>>>>>>>>    Procedure Set ComTabExcelSelectedLeftInnerBorder OLE_COLOR value
15250>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to value
15251>>>>>>>>>>>    End_Procedure
15252>>>>>>>>>>>
15252>>>>>>>>>>>    Function ComTabExcelSelectedTopInnerBorder Returns OLE_COLOR
15254>>>>>>>>>>>        OLE_COLOR retVal
15254>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_I4 to retVal
15255>>>>>>>>>>>        Function_Return retVal
15256>>>>>>>>>>>    End_Function
15257>>>>>>>>>>>
15257>>>>>>>>>>>    Procedure Set ComTabExcelSelectedTopInnerBorder OLE_COLOR value
15259>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_I4 to value
15260>>>>>>>>>>>    End_Procedure
15261>>>>>>>>>>>
15261>>>>>>>>>>>    Function ComTabExcelSelectedRightInnerBorder Returns OLE_COLOR
15263>>>>>>>>>>>        OLE_COLOR retVal
15263>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
15264>>>>>>>>>>>        Function_Return retVal
15265>>>>>>>>>>>    End_Function
15266>>>>>>>>>>>
15266>>>>>>>>>>>    Procedure Set ComTabExcelSelectedRightInnerBorder OLE_COLOR value
15268>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
15269>>>>>>>>>>>    End_Procedure
15270>>>>>>>>>>>
15270>>>>>>>>>>>    Function ComTabExcelSelectedLeftOuterBorder Returns OLE_COLOR
15272>>>>>>>>>>>        OLE_COLOR retVal
15272>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_I4 to retVal
15273>>>>>>>>>>>        Function_Return retVal
15274>>>>>>>>>>>    End_Function
15275>>>>>>>>>>>
15275>>>>>>>>>>>    Procedure Set ComTabExcelSelectedLeftOuterBorder OLE_COLOR value
15277>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_I4 to value
15278>>>>>>>>>>>    End_Procedure
15279>>>>>>>>>>>
15279>>>>>>>>>>>    Function ComTabExcelSelectedRightOuterBorder Returns OLE_COLOR
15281>>>>>>>>>>>        OLE_COLOR retVal
15281>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_I4 to retVal
15282>>>>>>>>>>>        Function_Return retVal
15283>>>>>>>>>>>    End_Function
15284>>>>>>>>>>>
15284>>>>>>>>>>>    Procedure Set ComTabExcelSelectedRightOuterBorder OLE_COLOR value
15286>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_I4 to value
15287>>>>>>>>>>>    End_Procedure
15288>>>>>>>>>>>
15288>>>>>>>>>>>    Function ComTabExcelSelectedTopOuterBorder Returns OLE_COLOR
15290>>>>>>>>>>>        OLE_COLOR retVal
15290>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
15291>>>>>>>>>>>        Function_Return retVal
15292>>>>>>>>>>>    End_Function
15293>>>>>>>>>>>
15293>>>>>>>>>>>    Procedure Set ComTabExcelSelectedTopOuterBorder OLE_COLOR value
15295>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
15296>>>>>>>>>>>    End_Procedure
15297>>>>>>>>>>>
15297>>>>>>>>>>>    Function ComTabExcelNormalLeftInnerBorder Returns OLE_COLOR
15299>>>>>>>>>>>        OLE_COLOR retVal
15299>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_I4 to retVal
15300>>>>>>>>>>>        Function_Return retVal
15301>>>>>>>>>>>    End_Function
15302>>>>>>>>>>>
15302>>>>>>>>>>>    Procedure Set ComTabExcelNormalLeftInnerBorder OLE_COLOR value
15304>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_I4 to value
15305>>>>>>>>>>>    End_Procedure
15306>>>>>>>>>>>
15306>>>>>>>>>>>    Function ComTabExcelNormalTopInnerBorder Returns OLE_COLOR
15308>>>>>>>>>>>        OLE_COLOR retVal
15308>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_I4 to retVal
15309>>>>>>>>>>>        Function_Return retVal
15310>>>>>>>>>>>    End_Function
15311>>>>>>>>>>>
15311>>>>>>>>>>>    Procedure Set ComTabExcelNormalTopInnerBorder OLE_COLOR value
15313>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_I4 to value
15314>>>>>>>>>>>    End_Procedure
15315>>>>>>>>>>>
15315>>>>>>>>>>>    Function ComTabExcelNormalRightInnerBorder Returns OLE_COLOR
15317>>>>>>>>>>>        OLE_COLOR retVal
15317>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
15318>>>>>>>>>>>        Function_Return retVal
15319>>>>>>>>>>>    End_Function
15320>>>>>>>>>>>
15320>>>>>>>>>>>    Procedure Set ComTabExcelNormalRightInnerBorder OLE_COLOR value
15322>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
15323>>>>>>>>>>>    End_Procedure
15324>>>>>>>>>>>
15324>>>>>>>>>>>    Function ComTabExcelNormalLeftOuterBorder Returns OLE_COLOR
15326>>>>>>>>>>>        OLE_COLOR retVal
15326>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
15327>>>>>>>>>>>        Function_Return retVal
15328>>>>>>>>>>>    End_Function
15329>>>>>>>>>>>
15329>>>>>>>>>>>    Procedure Set ComTabExcelNormalLeftOuterBorder OLE_COLOR value
15331>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
15332>>>>>>>>>>>    End_Procedure
15333>>>>>>>>>>>
15333>>>>>>>>>>>    Function ComTabExcelNormalRightOuterBorder Returns OLE_COLOR
15335>>>>>>>>>>>        OLE_COLOR retVal
15335>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
15336>>>>>>>>>>>        Function_Return retVal
15337>>>>>>>>>>>    End_Function
15338>>>>>>>>>>>
15338>>>>>>>>>>>    Procedure Set ComTabExcelNormalRightOuterBorder OLE_COLOR value
15340>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
15341>>>>>>>>>>>    End_Procedure
15342>>>>>>>>>>>
15342>>>>>>>>>>>    Function ComTabExcelNormalTopOuterBorder Returns OLE_COLOR
15344>>>>>>>>>>>        OLE_COLOR retVal
15344>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to retVal
15345>>>>>>>>>>>        Function_Return retVal
15346>>>>>>>>>>>    End_Function
15347>>>>>>>>>>>
15347>>>>>>>>>>>    Procedure Set ComTabExcelNormalTopOuterBorder OLE_COLOR value
15349>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to value
15350>>>>>>>>>>>    End_Procedure
15351>>>>>>>>>>>
15351>>>>>>>>>>>    Function ComTabPropertyPageHighlight Returns OLE_COLOR
15353>>>>>>>>>>>        OLE_COLOR retVal
15353>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to retVal
15354>>>>>>>>>>>        Function_Return retVal
15355>>>>>>>>>>>    End_Function
15356>>>>>>>>>>>
15356>>>>>>>>>>>    Procedure Set ComTabPropertyPageHighlight OLE_COLOR value
15358>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to value
15359>>>>>>>>>>>    End_Procedure
15360>>>>>>>>>>>
15360>>>>>>>>>>>    Function ComTabPropertyPageShadow Returns OLE_COLOR
15362>>>>>>>>>>>        OLE_COLOR retVal
15362>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_I4 to retVal
15363>>>>>>>>>>>        Function_Return retVal
15364>>>>>>>>>>>    End_Function
15365>>>>>>>>>>>
15365>>>>>>>>>>>    Procedure Set ComTabPropertyPageShadow OLE_COLOR value
15367>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_I4 to value
15368>>>>>>>>>>>    End_Procedure
15369>>>>>>>>>>>
15369>>>>>>>>>>>    Function ComTabPropertyPageDarkShadow Returns OLE_COLOR
15371>>>>>>>>>>>        OLE_COLOR retVal
15371>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_I4 to retVal
15372>>>>>>>>>>>        Function_Return retVal
15373>>>>>>>>>>>    End_Function
15374>>>>>>>>>>>
15374>>>>>>>>>>>    Procedure Set ComTabPropertyPageDarkShadow OLE_COLOR value
15376>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_I4 to value
15377>>>>>>>>>>>    End_Procedure
15378>>>>>>>>>>>
15378>>>>>>>>>>>    Function ComTabPropertyPage2003DarkShadow Returns OLE_COLOR
15380>>>>>>>>>>>        OLE_COLOR retVal
15380>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
15381>>>>>>>>>>>        Function_Return retVal
15382>>>>>>>>>>>    End_Function
15383>>>>>>>>>>>
15383>>>>>>>>>>>    Procedure Set ComTabPropertyPage2003DarkShadow OLE_COLOR value
15385>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
15386>>>>>>>>>>>    End_Procedure
15387>>>>>>>>>>>
15387>>>>>>>>>>>    Function ComTabPropertyPage2003FrameBorder Returns OLE_COLOR
15389>>>>>>>>>>>        OLE_COLOR retVal
15389>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to retVal
15390>>>>>>>>>>>        Function_Return retVal
15391>>>>>>>>>>>    End_Function
15392>>>>>>>>>>>
15392>>>>>>>>>>>    Procedure Set ComTabPropertyPage2003FrameBorder OLE_COLOR value
15394>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to value
15395>>>>>>>>>>>    End_Procedure
15396>>>>>>>>>>>
15396>>>>>>>>>>>    Function ComTabPropertyPage2003BorderLeftHighlight Returns OLE_COLOR
15398>>>>>>>>>>>        OLE_COLOR retVal
15398>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
15399>>>>>>>>>>>        Function_Return retVal
15400>>>>>>>>>>>    End_Function
15401>>>>>>>>>>>
15401>>>>>>>>>>>    Procedure Set ComTabPropertyPage2003BorderLeftHighlight OLE_COLOR value
15403>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
15404>>>>>>>>>>>    End_Procedure
15405>>>>>>>>>>>
15405>>>>>>>>>>>    Function ComTabPropertyPage2003BorderTopHighlight Returns OLE_COLOR
15407>>>>>>>>>>>        OLE_COLOR retVal
15407>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
15408>>>>>>>>>>>        Function_Return retVal
15409>>>>>>>>>>>    End_Function
15410>>>>>>>>>>>
15410>>>>>>>>>>>    Procedure Set ComTabPropertyPage2003BorderTopHighlight OLE_COLOR value
15412>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
15413>>>>>>>>>>>    End_Procedure
15414>>>>>>>>>>>
15414>>>>>>>>>>>    Function ComTabStateButtonFaceLight Returns OLE_COLOR
15416>>>>>>>>>>>        OLE_COLOR retVal
15416>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
15417>>>>>>>>>>>        Function_Return retVal
15418>>>>>>>>>>>    End_Function
15419>>>>>>>>>>>
15419>>>>>>>>>>>    Procedure Set ComTabStateButtonFaceLight OLE_COLOR value
15421>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
15422>>>>>>>>>>>    End_Procedure
15423>>>>>>>>>>>
15423>>>>>>>>>>>    Function ComTabStateButtonFaceDark Returns OLE_COLOR
15425>>>>>>>>>>>        OLE_COLOR retVal
15425>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_I4 to retVal
15426>>>>>>>>>>>        Function_Return retVal
15427>>>>>>>>>>>    End_Function
15428>>>>>>>>>>>
15428>>>>>>>>>>>    Procedure Set ComTabStateButtonFaceDark OLE_COLOR value
15430>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_I4 to value
15431>>>>>>>>>>>    End_Procedure
15432>>>>>>>>>>>
15432>>>>>>>>>>>    Function ComTabStateButtonBorderTopLeft Returns OLE_COLOR
15434>>>>>>>>>>>        OLE_COLOR retVal
15434>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_I4 to retVal
15435>>>>>>>>>>>        Function_Return retVal
15436>>>>>>>>>>>    End_Function
15437>>>>>>>>>>>
15437>>>>>>>>>>>    Procedure Set ComTabStateButtonBorderTopLeft OLE_COLOR value
15439>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_I4 to value
15440>>>>>>>>>>>    End_Procedure
15441>>>>>>>>>>>
15441>>>>>>>>>>>    Function ComTabStateButtonBorderBottomRight Returns OLE_COLOR
15443>>>>>>>>>>>        OLE_COLOR retVal
15443>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 35 OLE_VT_I4 to retVal
15444>>>>>>>>>>>        Function_Return retVal
15445>>>>>>>>>>>    End_Function
15446>>>>>>>>>>>
15446>>>>>>>>>>>    Procedure Set ComTabStateButtonBorderBottomRight OLE_COLOR value
15448>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 35 OLE_VT_I4 to value
15449>>>>>>>>>>>    End_Procedure
15450>>>>>>>>>>>
15450>>>>>>>>>>>    Function ComPaneFace Returns OLE_COLOR
15452>>>>>>>>>>>        OLE_COLOR retVal
15452>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_I4 to retVal
15453>>>>>>>>>>>        Function_Return retVal
15454>>>>>>>>>>>    End_Function
15455>>>>>>>>>>>
15455>>>>>>>>>>>    Procedure Set ComPaneFace OLE_COLOR value
15457>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_I4 to value
15458>>>>>>>>>>>    End_Procedure
15459>>>>>>>>>>>
15459>>>>>>>>>>>    Function ComButtonHighlighted Returns OLE_COLOR
15461>>>>>>>>>>>        OLE_COLOR retVal
15461>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_I4 to retVal
15462>>>>>>>>>>>        Function_Return retVal
15463>>>>>>>>>>>    End_Function
15464>>>>>>>>>>>
15464>>>>>>>>>>>    Procedure Set ComButtonHighlighted OLE_COLOR value
15466>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_I4 to value
15467>>>>>>>>>>>    End_Procedure
15468>>>>>>>>>>>
15468>>>>>>>>>>>    Function ComPressedButton Returns OLE_COLOR
15470>>>>>>>>>>>        OLE_COLOR retVal
15470>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_I4 to retVal
15471>>>>>>>>>>>        Function_Return retVal
15472>>>>>>>>>>>    End_Function
15473>>>>>>>>>>>
15473>>>>>>>>>>>    Procedure Set ComPressedButton OLE_COLOR value
15475>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_I4 to value
15476>>>>>>>>>>>    End_Procedure
15477>>>>>>>>>>>
15477>>>>>>>>>>>    Function ComHighlightedCloseButton Returns OLE_COLOR
15479>>>>>>>>>>>        OLE_COLOR retVal
15479>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
15480>>>>>>>>>>>        Function_Return retVal
15481>>>>>>>>>>>    End_Function
15482>>>>>>>>>>>
15482>>>>>>>>>>>    Procedure Set ComHighlightedCloseButton OLE_COLOR value
15484>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
15485>>>>>>>>>>>    End_Procedure
15486>>>>>>>>>>>
15486>>>>>>>>>>>    Function ComSelectedPressedButton Returns OLE_COLOR
15488>>>>>>>>>>>        OLE_COLOR retVal
15488>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_I4 to retVal
15489>>>>>>>>>>>        Function_Return retVal
15490>>>>>>>>>>>    End_Function
15491>>>>>>>>>>>
15491>>>>>>>>>>>    Procedure Set ComSelectedPressedButton OLE_COLOR value
15493>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_I4 to value
15494>>>>>>>>>>>    End_Procedure
15495>>>>>>>>>>>
15495>>>>>>>>>>>    Function ComSelectedHighlightedButton Returns OLE_COLOR
15497>>>>>>>>>>>        OLE_COLOR retVal
15497>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 41 OLE_VT_I4 to retVal
15498>>>>>>>>>>>        Function_Return retVal
15499>>>>>>>>>>>    End_Function
15500>>>>>>>>>>>
15500>>>>>>>>>>>    Procedure Set ComSelectedHighlightedButton OLE_COLOR value
15502>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 41 OLE_VT_I4 to value
15503>>>>>>>>>>>    End_Procedure
15504>>>>>>>>>>>
15504>>>>>>>>>>>    Function ComButtonBorder Returns OLE_COLOR
15506>>>>>>>>>>>        OLE_COLOR retVal
15506>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 42 OLE_VT_I4 to retVal
15507>>>>>>>>>>>        Function_Return retVal
15508>>>>>>>>>>>    End_Function
15509>>>>>>>>>>>
15509>>>>>>>>>>>    Procedure Set ComButtonBorder OLE_COLOR value
15511>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 42 OLE_VT_I4 to value
15512>>>>>>>>>>>    End_Procedure
15513>>>>>>>>>>>
15513>>>>>>>>>>>    Function ComButtonBorderHot Returns OLE_COLOR
15515>>>>>>>>>>>        OLE_COLOR retVal
15515>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 43 OLE_VT_I4 to retVal
15516>>>>>>>>>>>        Function_Return retVal
15517>>>>>>>>>>>    End_Function
15518>>>>>>>>>>>
15518>>>>>>>>>>>    Procedure Set ComButtonBorderHot OLE_COLOR value
15520>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 43 OLE_VT_I4 to value
15521>>>>>>>>>>>    End_Procedure
15522>>>>>>>>>>>
15522>>>>>>>>>>>    Function ComHighlightCloseText Returns OLE_COLOR
15524>>>>>>>>>>>        OLE_COLOR retVal
15524>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 44 OLE_VT_I4 to retVal
15525>>>>>>>>>>>        Function_Return retVal
15526>>>>>>>>>>>    End_Function
15527>>>>>>>>>>>
15527>>>>>>>>>>>    Procedure Set ComHighlightCloseText OLE_COLOR value
15529>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 44 OLE_VT_I4 to value
15530>>>>>>>>>>>    End_Procedure
15531>>>>>>>>>>>
15531>>>>>>>>>>>    Function ComSelectedPressedText Returns OLE_COLOR
15533>>>>>>>>>>>        OLE_COLOR retVal
15533>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_I4 to retVal
15534>>>>>>>>>>>        Function_Return retVal
15535>>>>>>>>>>>    End_Function
15536>>>>>>>>>>>
15536>>>>>>>>>>>    Procedure Set ComSelectedPressedText OLE_COLOR value
15538>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_I4 to value
15539>>>>>>>>>>>    End_Procedure
15540>>>>>>>>>>>
15540>>>>>>>>>>>    Function ComSelectedHighlightedText Returns OLE_COLOR
15542>>>>>>>>>>>        OLE_COLOR retVal
15542>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_I4 to retVal
15543>>>>>>>>>>>        Function_Return retVal
15544>>>>>>>>>>>    End_Function
15545>>>>>>>>>>>
15545>>>>>>>>>>>    Procedure Set ComSelectedHighlightedText OLE_COLOR value
15547>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_I4 to value
15548>>>>>>>>>>>    End_Procedure
15549>>>>>>>>>>>
15549>>>>>>>>>>>    Function ComActiveFilesGlyph Returns OLE_COLOR
15551>>>>>>>>>>>        OLE_COLOR retVal
15551>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 47 OLE_VT_I4 to retVal
15552>>>>>>>>>>>        Function_Return retVal
15553>>>>>>>>>>>    End_Function
15554>>>>>>>>>>>
15554>>>>>>>>>>>    Procedure Set ComActiveFilesGlyph OLE_COLOR value
15556>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 47 OLE_VT_I4 to value
15557>>>>>>>>>>>    End_Procedure
15558>>>>>>>>>>>
15558>>>>>>>>>>>    Function ComActiveFilesGlyphHighlighted Returns OLE_COLOR
15560>>>>>>>>>>>        OLE_COLOR retVal
15560>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 48 OLE_VT_I4 to retVal
15561>>>>>>>>>>>        Function_Return retVal
15562>>>>>>>>>>>    End_Function
15563>>>>>>>>>>>
15563>>>>>>>>>>>    Procedure Set ComActiveFilesGlyphHighlighted OLE_COLOR value
15565>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 48 OLE_VT_I4 to value
15566>>>>>>>>>>>    End_Procedure
15567>>>>>>>>>>>
15567>>>>>>>>>>>    Function ComActiveFilesGlyphPressed Returns OLE_COLOR
15569>>>>>>>>>>>        OLE_COLOR retVal
15569>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 49 OLE_VT_I4 to retVal
15570>>>>>>>>>>>        Function_Return retVal
15571>>>>>>>>>>>    End_Function
15572>>>>>>>>>>>
15572>>>>>>>>>>>    Procedure Set ComActiveFilesGlyphPressed OLE_COLOR value
15574>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 49 OLE_VT_I4 to value
15575>>>>>>>>>>>    End_Procedure
15576>>>>>>>>>>>
15576>>>>>>>>>>>    Function ComActiveFilesBack Returns OLE_COLOR
15578>>>>>>>>>>>        OLE_COLOR retVal
15578>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to retVal
15579>>>>>>>>>>>        Function_Return retVal
15580>>>>>>>>>>>    End_Function
15581>>>>>>>>>>>
15581>>>>>>>>>>>    Procedure Set ComActiveFilesBack OLE_COLOR value
15583>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to value
15584>>>>>>>>>>>    End_Procedure
15585>>>>>>>>>>>
15585>>>>>>>>>>>    Function ComActiveFilesBackHighlighted Returns OLE_COLOR
15587>>>>>>>>>>>        OLE_COLOR retVal
15587>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_I4 to retVal
15588>>>>>>>>>>>        Function_Return retVal
15589>>>>>>>>>>>    End_Function
15590>>>>>>>>>>>
15590>>>>>>>>>>>    Procedure Set ComActiveFilesBackHighlighted OLE_COLOR value
15592>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_I4 to value
15593>>>>>>>>>>>    End_Procedure
15594>>>>>>>>>>>
15594>>>>>>>>>>>    Function ComActiveFilesBackPressed Returns OLE_COLOR
15596>>>>>>>>>>>        OLE_COLOR retVal
15596>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
15597>>>>>>>>>>>        Function_Return retVal
15598>>>>>>>>>>>    End_Function
15599>>>>>>>>>>>
15599>>>>>>>>>>>    Procedure Set ComActiveFilesBackPressed OLE_COLOR value
15601>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
15602>>>>>>>>>>>    End_Procedure
15603>>>>>>>>>>>End_Class
15604>>>>>>>>>>>
15604>>>>>>>>>>>// CoClass
15604>>>>>>>>>>>// CLSID: {C0DE2000-494B-4521-B709-C324C2C09578}
15604>>>>>>>>>>>Class cCJTabPaintManagerColorSet is a cComAutomationObject
15605>>>>>>>>>>>    Import_Class_Protocol cCJITabPaintManagerColorSet
15606>>>>>>>>>>>
15606>>>>>>>>>>>    Procedure Construct_Object
15608>>>>>>>>>>>        Forward Send Construct_Object
15610>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
15611>>>>>>>>>>>    End_Procedure
15612>>>>>>>>>>>End_Class
15613>>>>>>>>>>>
15613>>>>>>>>>>>// CLSID: {C0DE2000-9CE6-4D40-B6C5-3B9425FBB55A}
15613>>>>>>>>>>>Class cCJITabPaintManager is a Mixin
15614>>>>>>>>>>>
15614>>>>>>>>>>>    Function ComAppearance Returns XTPTabAppearanceStyle
15616>>>>>>>>>>>        XTPTabAppearanceStyle retVal
15616>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
15617>>>>>>>>>>>        Function_Return retVal
15618>>>>>>>>>>>    End_Function
15619>>>>>>>>>>>
15619>>>>>>>>>>>    Procedure Set ComAppearance XTPTabAppearanceStyle value
15621>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
15622>>>>>>>>>>>    End_Procedure
15623>>>>>>>>>>>
15623>>>>>>>>>>>    Function ComColor Returns XTPTabColorStyle
15625>>>>>>>>>>>        XTPTabColorStyle retVal
15625>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
15626>>>>>>>>>>>        Function_Return retVal
15627>>>>>>>>>>>    End_Function
15628>>>>>>>>>>>
15628>>>>>>>>>>>    Procedure Set ComColor XTPTabColorStyle value
15630>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
15631>>>>>>>>>>>    End_Procedure
15632>>>>>>>>>>>
15632>>>>>>>>>>>    Function ComLayout Returns XTPTabLayoutStyle
15634>>>>>>>>>>>        XTPTabLayoutStyle retVal
15634>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
15635>>>>>>>>>>>        Function_Return retVal
15636>>>>>>>>>>>    End_Function
15637>>>>>>>>>>>
15637>>>>>>>>>>>    Procedure Set ComLayout XTPTabLayoutStyle value
15639>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
15640>>>>>>>>>>>    End_Procedure
15641>>>>>>>>>>>
15641>>>>>>>>>>>    Function ComPosition Returns XTPTabPosition
15643>>>>>>>>>>>        XTPTabPosition retVal
15643>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
15644>>>>>>>>>>>        Function_Return retVal
15645>>>>>>>>>>>    End_Function
15646>>>>>>>>>>>
15646>>>>>>>>>>>    Procedure Set ComPosition XTPTabPosition value
15648>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
15649>>>>>>>>>>>    End_Procedure
15650>>>>>>>>>>>
15650>>>>>>>>>>>    Function ComBoldSelected Returns Boolean
15652>>>>>>>>>>>        Boolean retVal
15652>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
15653>>>>>>>>>>>        Function_Return retVal
15654>>>>>>>>>>>    End_Function
15655>>>>>>>>>>>
15655>>>>>>>>>>>    Procedure Set ComBoldSelected Boolean value
15657>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
15658>>>>>>>>>>>    End_Procedure
15659>>>>>>>>>>>
15659>>>>>>>>>>>    Function ComHotTracking Returns Boolean
15661>>>>>>>>>>>        Boolean retVal
15661>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
15662>>>>>>>>>>>        Function_Return retVal
15663>>>>>>>>>>>    End_Function
15664>>>>>>>>>>>
15664>>>>>>>>>>>    Procedure Set ComHotTracking Boolean value
15666>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
15667>>>>>>>>>>>    End_Procedure
15668>>>>>>>>>>>
15668>>>>>>>>>>>    Function ComShowIcons Returns Boolean
15670>>>>>>>>>>>        Boolean retVal
15670>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
15671>>>>>>>>>>>        Function_Return retVal
15672>>>>>>>>>>>    End_Function
15673>>>>>>>>>>>
15673>>>>>>>>>>>    Procedure Set ComShowIcons Boolean value
15675>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
15676>>>>>>>>>>>    End_Procedure
15677>>>>>>>>>>>
15677>>>>>>>>>>>    Function ComDisableLunaColors Returns Boolean
15679>>>>>>>>>>>        Boolean retVal
15679>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
15680>>>>>>>>>>>        Function_Return retVal
15681>>>>>>>>>>>    End_Function
15682>>>>>>>>>>>
15682>>>>>>>>>>>    Procedure Set ComDisableLunaColors Boolean value
15684>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
15685>>>>>>>>>>>    End_Procedure
15686>>>>>>>>>>>
15686>>>>>>>>>>>    Function ComOneNoteColors Returns Boolean
15688>>>>>>>>>>>        Boolean retVal
15688>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
15689>>>>>>>>>>>        Function_Return retVal
15690>>>>>>>>>>>    End_Function
15691>>>>>>>>>>>
15691>>>>>>>>>>>    Procedure Set ComOneNoteColors Boolean value
15693>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
15694>>>>>>>>>>>    End_Procedure
15695>>>>>>>>>>>
15695>>>>>>>>>>>    Function ComClientFrame Returns XTPTabClientFrame
15697>>>>>>>>>>>        XTPTabClientFrame retVal
15697>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_I4 to retVal
15698>>>>>>>>>>>        Function_Return retVal
15699>>>>>>>>>>>    End_Function
15700>>>>>>>>>>>
15700>>>>>>>>>>>    Procedure Set ComClientFrame XTPTabClientFrame value
15702>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_I4 to value
15703>>>>>>>>>>>    End_Procedure
15704>>>>>>>>>>>
15704>>>>>>>>>>>    Function ComStaticFrame Returns Boolean
15706>>>>>>>>>>>        Boolean retVal
15706>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
15707>>>>>>>>>>>        Function_Return retVal
15708>>>>>>>>>>>    End_Function
15709>>>>>>>>>>>
15709>>>>>>>>>>>    Procedure Set ComStaticFrame Boolean value
15711>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
15712>>>>>>>>>>>    End_Procedure
15713>>>>>>>>>>>
15713>>>>>>>>>>>    Function ComDrawTextPathEllipsis Returns Boolean
15715>>>>>>>>>>>        Boolean retVal
15715>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
15716>>>>>>>>>>>        Function_Return retVal
15717>>>>>>>>>>>    End_Function
15718>>>>>>>>>>>
15718>>>>>>>>>>>    Procedure Set ComDrawTextPathEllipsis Boolean value
15720>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
15721>>>>>>>>>>>    End_Procedure
15722>>>>>>>>>>>
15722>>>>>>>>>>>    Function ComDrawTextNoPrefix Returns Boolean
15724>>>>>>>>>>>        Boolean retVal
15724>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
15725>>>>>>>>>>>        Function_Return retVal
15726>>>>>>>>>>>    End_Function
15727>>>>>>>>>>>
15727>>>>>>>>>>>    Procedure Set ComDrawTextNoPrefix Boolean value
15729>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
15730>>>>>>>>>>>    End_Procedure
15731>>>>>>>>>>>
15731>>>>>>>>>>>    Function ComFont Returns Variant
15733>>>>>>>>>>>        Variant retVal
15733>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
15734>>>>>>>>>>>        Function_Return retVal
15735>>>>>>>>>>>    End_Function
15736>>>>>>>>>>>
15736>>>>>>>>>>>    Procedure Set ComFont Variant value
15738>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
15739>>>>>>>>>>>    End_Procedure
15740>>>>>>>>>>>
15740>>>>>>>>>>>    Function ComMultiRowFixedSelection Returns Boolean
15742>>>>>>>>>>>        Boolean retVal
15742>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
15743>>>>>>>>>>>        Function_Return retVal
15744>>>>>>>>>>>    End_Function
15745>>>>>>>>>>>
15745>>>>>>>>>>>    Procedure Set ComMultiRowFixedSelection Boolean value
15747>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
15748>>>>>>>>>>>    End_Procedure
15749>>>>>>>>>>>
15749>>>>>>>>>>>    Function ComMultiRowJustified Returns Boolean
15751>>>>>>>>>>>        Boolean retVal
15751>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_BOOL to retVal
15752>>>>>>>>>>>        Function_Return retVal
15753>>>>>>>>>>>    End_Function
15754>>>>>>>>>>>
15754>>>>>>>>>>>    Procedure Set ComMultiRowJustified Boolean value
15756>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_BOOL to value
15757>>>>>>>>>>>    End_Procedure
15758>>>>>>>>>>>
15758>>>>>>>>>>>    Function ComToolTipBehaviour Returns XTPTabToolTipBehaviour
15760>>>>>>>>>>>        XTPTabToolTipBehaviour retVal
15760>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
15761>>>>>>>>>>>        Function_Return retVal
15762>>>>>>>>>>>    End_Function
15763>>>>>>>>>>>
15763>>>>>>>>>>>    Procedure Set ComToolTipBehaviour XTPTabToolTipBehaviour value
15765>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
15766>>>>>>>>>>>    End_Procedure
15767>>>>>>>>>>>
15767>>>>>>>>>>>    Function ComSelectTabOnDragOver Returns Integer
15769>>>>>>>>>>>        Integer retVal
15769>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to retVal
15770>>>>>>>>>>>        Function_Return retVal
15771>>>>>>>>>>>    End_Function
15772>>>>>>>>>>>
15772>>>>>>>>>>>    Procedure Set ComSelectTabOnDragOver Integer value
15774>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to value
15775>>>>>>>>>>>    End_Procedure
15776>>>>>>>>>>>
15776>>>>>>>>>>>    Function ComFillBackground Returns Boolean
15778>>>>>>>>>>>        Boolean retVal
15778>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_BOOL to retVal
15779>>>>>>>>>>>        Function_Return retVal
15780>>>>>>>>>>>    End_Function
15781>>>>>>>>>>>
15781>>>>>>>>>>>    Procedure Set ComFillBackground Boolean value
15783>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_BOOL to value
15784>>>>>>>>>>>    End_Procedure
15785>>>>>>>>>>>
15785>>>>>>>>>>>    Function ComRotateImageOnVerticalDraw Returns Boolean
15787>>>>>>>>>>>        Boolean retVal
15787>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
15788>>>>>>>>>>>        Function_Return retVal
15789>>>>>>>>>>>    End_Function
15790>>>>>>>>>>>
15790>>>>>>>>>>>    Procedure Set ComRotateImageOnVerticalDraw Boolean value
15792>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
15793>>>>>>>>>>>    End_Procedure
15794>>>>>>>>>>>
15794>>>>>>>>>>>    Function ComFixedTabWidth Returns Integer
15796>>>>>>>>>>>        Integer retVal
15796>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_I4 to retVal
15797>>>>>>>>>>>        Function_Return retVal
15798>>>>>>>>>>>    End_Function
15799>>>>>>>>>>>
15799>>>>>>>>>>>    Procedure Set ComFixedTabWidth Integer value
15801>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_I4 to value
15802>>>>>>>>>>>    End_Procedure
15803>>>>>>>>>>>
15803>>>>>>>>>>>    Function ComMinTabWidth Returns Integer
15805>>>>>>>>>>>        Integer retVal
15805>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
15806>>>>>>>>>>>        Function_Return retVal
15807>>>>>>>>>>>    End_Function
15808>>>>>>>>>>>
15808>>>>>>>>>>>    Procedure Set ComMinTabWidth Integer value
15810>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
15811>>>>>>>>>>>    End_Procedure
15812>>>>>>>>>>>
15812>>>>>>>>>>>    Function ComMaxTabWidth Returns Integer
15814>>>>>>>>>>>        Integer retVal
15814>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to retVal
15815>>>>>>>>>>>        Function_Return retVal
15816>>>>>>>>>>>    End_Function
15817>>>>>>>>>>>
15817>>>>>>>>>>>    Procedure Set ComMaxTabWidth Integer value
15819>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to value
15820>>>>>>>>>>>    End_Procedure
15821>>>>>>>>>>>
15821>>>>>>>>>>>    Function ComDrawTextFormat Returns XTPTabDrawTextFormat
15823>>>>>>>>>>>        XTPTabDrawTextFormat retVal
15823>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
15824>>>>>>>>>>>        Function_Return retVal
15825>>>>>>>>>>>    End_Function
15826>>>>>>>>>>>
15826>>>>>>>>>>>    Procedure Set ComDrawTextFormat XTPTabDrawTextFormat value
15828>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
15829>>>>>>>>>>>    End_Procedure
15830>>>>>>>>>>>
15830>>>>>>>>>>>    Function ComShowTabs Returns Boolean
15832>>>>>>>>>>>        Boolean retVal
15832>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to retVal
15833>>>>>>>>>>>        Function_Return retVal
15834>>>>>>>>>>>    End_Function
15835>>>>>>>>>>>
15835>>>>>>>>>>>    Procedure Set ComShowTabs Boolean value
15837>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to value
15838>>>>>>>>>>>    End_Procedure
15839>>>>>>>>>>>
15839>>>>>>>>>>>    Function ComClearTypeTextQuality Returns Boolean
15841>>>>>>>>>>>        Boolean retVal
15841>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_BOOL to retVal
15842>>>>>>>>>>>        Function_Return retVal
15843>>>>>>>>>>>    End_Function
15844>>>>>>>>>>>
15844>>>>>>>>>>>    Procedure Set ComClearTypeTextQuality Boolean value
15846>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_BOOL to value
15847>>>>>>>>>>>    End_Procedure
15848>>>>>>>>>>>
15848>>>>>>>>>>>    Function ComVerticalTextTopToBottom Returns Boolean
15850>>>>>>>>>>>        Boolean retVal
15850>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
15851>>>>>>>>>>>        Function_Return retVal
15852>>>>>>>>>>>    End_Function
15853>>>>>>>>>>>
15853>>>>>>>>>>>    Procedure Set ComVerticalTextTopToBottom Boolean value
15855>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
15856>>>>>>>>>>>    End_Procedure
15857>>>>>>>>>>>
15857>>>>>>>>>>>    Function ComMultiRowTabsOptimization Returns Boolean
15859>>>>>>>>>>>        Boolean retVal
15859>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_BOOL to retVal
15860>>>>>>>>>>>        Function_Return retVal
15861>>>>>>>>>>>    End_Function
15862>>>>>>>>>>>
15862>>>>>>>>>>>    Procedure Set ComMultiRowTabsOptimization Boolean value
15864>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_BOOL to value
15865>>>>>>>>>>>    End_Procedure
15866>>>>>>>>>>>
15866>>>>>>>>>>>    Function ComIsColorSupported XTPTabColorStyle llColor Returns Boolean
15868>>>>>>>>>>>        Handle hDispatchDriver
15868>>>>>>>>>>>        Boolean retVal
15868>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15869>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
15870>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
15871>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_BOOL to retVal
15872>>>>>>>>>>>        Function_Return retVal
15873>>>>>>>>>>>    End_Function
15874>>>>>>>>>>>
15874>>>>>>>>>>>    Function ComClientMargin Returns Variant
15876>>>>>>>>>>>        Handle hDispatchDriver
15876>>>>>>>>>>>        Variant retVal
15876>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15877>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_DISPATCH to retVal
15878>>>>>>>>>>>        Function_Return retVal
15879>>>>>>>>>>>    End_Function
15880>>>>>>>>>>>
15880>>>>>>>>>>>    Function ComControlMargin Returns Variant
15882>>>>>>>>>>>        Handle hDispatchDriver
15882>>>>>>>>>>>        Variant retVal
15882>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15883>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
15884>>>>>>>>>>>        Function_Return retVal
15885>>>>>>>>>>>    End_Function
15886>>>>>>>>>>>
15886>>>>>>>>>>>    Function ComHeaderMargin Returns Variant
15888>>>>>>>>>>>        Handle hDispatchDriver
15888>>>>>>>>>>>        Variant retVal
15888>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15889>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 15 OLE_VT_DISPATCH to retVal
15890>>>>>>>>>>>        Function_Return retVal
15891>>>>>>>>>>>    End_Function
15892>>>>>>>>>>>
15892>>>>>>>>>>>    Function ComButtonMargin Returns Variant
15894>>>>>>>>>>>        Handle hDispatchDriver
15894>>>>>>>>>>>        Variant retVal
15894>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15895>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
15896>>>>>>>>>>>        Function_Return retVal
15897>>>>>>>>>>>    End_Function
15898>>>>>>>>>>>
15898>>>>>>>>>>>    Function ComColorSet Returns Variant
15900>>>>>>>>>>>        Handle hDispatchDriver
15900>>>>>>>>>>>        Variant retVal
15900>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15901>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 19 OLE_VT_DISPATCH to retVal
15902>>>>>>>>>>>        Function_Return retVal
15903>>>>>>>>>>>    End_Function
15904>>>>>>>>>>>
15904>>>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
15906>>>>>>>>>>>        Handle hDispatchDriver
15906>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15907>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
15908>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
15909>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
15910>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
15911>>>>>>>>>>>    End_Procedure
15912>>>>>>>>>>>End_Class
15913>>>>>>>>>>>
15913>>>>>>>>>>>// CoClass
15913>>>>>>>>>>>// CLSID: {C0DE2000-BDD4-4257-8CF4-A2AB1674C51E}
15913>>>>>>>>>>>Class cCJTabPaintManager is a cComAutomationObject
15914>>>>>>>>>>>    Import_Class_Protocol cCJITabPaintManager
15915>>>>>>>>>>>
15915>>>>>>>>>>>    Procedure Construct_Object
15917>>>>>>>>>>>        Forward Send Construct_Object
15919>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
15920>>>>>>>>>>>    End_Procedure
15921>>>>>>>>>>>End_Class
15922>>>>>>>>>>>
15922>>>>>>>>>>>// CLSID: {C0DE2000-9479-48D5-A14D-077A9FD5D276}
15922>>>>>>>>>>>Class cCJITabControlItem is a Mixin
15923>>>>>>>>>>>
15923>>>>>>>>>>>    Function ComCaption Returns String
15925>>>>>>>>>>>        String retVal
15925>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
15926>>>>>>>>>>>        Function_Return retVal
15927>>>>>>>>>>>    End_Function
15928>>>>>>>>>>>
15928>>>>>>>>>>>    Procedure Set ComCaption String value
15930>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
15931>>>>>>>>>>>    End_Procedure
15932>>>>>>>>>>>
15932>>>>>>>>>>>    Function ComTag Returns Variant
15934>>>>>>>>>>>        Variant retVal
15934>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_VARIANT to retVal
15935>>>>>>>>>>>        Function_Return retVal
15936>>>>>>>>>>>    End_Function
15937>>>>>>>>>>>
15937>>>>>>>>>>>    Procedure Set ComTag Variant value
15939>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_VARIANT to value
15940>>>>>>>>>>>    End_Procedure
15941>>>>>>>>>>>
15941>>>>>>>>>>>    Function ComSelected Returns Boolean
15943>>>>>>>>>>>        Boolean retVal
15943>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
15944>>>>>>>>>>>        Function_Return retVal
15945>>>>>>>>>>>    End_Function
15946>>>>>>>>>>>
15946>>>>>>>>>>>    Procedure Set ComSelected Boolean value
15948>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
15949>>>>>>>>>>>    End_Procedure
15950>>>>>>>>>>>
15950>>>>>>>>>>>    Function ComImage Returns Integer
15952>>>>>>>>>>>        Integer retVal
15952>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
15953>>>>>>>>>>>        Function_Return retVal
15954>>>>>>>>>>>    End_Function
15955>>>>>>>>>>>
15955>>>>>>>>>>>    Procedure Set ComImage Integer value
15957>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
15958>>>>>>>>>>>    End_Procedure
15959>>>>>>>>>>>
15959>>>>>>>>>>>    Function ComColor Returns OLE_COLOR
15961>>>>>>>>>>>        OLE_COLOR retVal
15961>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
15962>>>>>>>>>>>        Function_Return retVal
15963>>>>>>>>>>>    End_Function
15964>>>>>>>>>>>
15964>>>>>>>>>>>    Procedure Set ComColor OLE_COLOR value
15966>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
15967>>>>>>>>>>>    End_Procedure
15968>>>>>>>>>>>
15968>>>>>>>>>>>    Function ComVisible Returns Boolean
15970>>>>>>>>>>>        Boolean retVal
15970>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
15971>>>>>>>>>>>        Function_Return retVal
15972>>>>>>>>>>>    End_Function
15973>>>>>>>>>>>
15973>>>>>>>>>>>    Procedure Set ComVisible Boolean value
15975>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
15976>>>>>>>>>>>    End_Procedure
15977>>>>>>>>>>>
15977>>>>>>>>>>>    Function ComEnabled Returns Boolean
15979>>>>>>>>>>>        Boolean retVal
15979>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
15980>>>>>>>>>>>        Function_Return retVal
15981>>>>>>>>>>>    End_Function
15982>>>>>>>>>>>
15982>>>>>>>>>>>    Procedure Set ComEnabled Boolean value
15984>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
15985>>>>>>>>>>>    End_Procedure
15986>>>>>>>>>>>
15986>>>>>>>>>>>    Function ComToolTip Returns String
15988>>>>>>>>>>>        String retVal
15988>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
15989>>>>>>>>>>>        Function_Return retVal
15990>>>>>>>>>>>    End_Function
15991>>>>>>>>>>>
15991>>>>>>>>>>>    Procedure Set ComToolTip String value
15993>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
15994>>>>>>>>>>>    End_Procedure
15995>>>>>>>>>>>
15995>>>>>>>>>>>    Function ComClosable Returns Boolean
15997>>>>>>>>>>>        Boolean retVal
15997>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
15998>>>>>>>>>>>        Function_Return retVal
15999>>>>>>>>>>>    End_Function
16000>>>>>>>>>>>
16000>>>>>>>>>>>    Procedure Set ComClosable Boolean value
16002>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
16003>>>>>>>>>>>    End_Procedure
16004>>>>>>>>>>>
16004>>>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
16006>>>>>>>>>>>        OLE_HANDLE retVal
16006>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to retVal
16007>>>>>>>>>>>        Function_Return retVal
16008>>>>>>>>>>>    End_Function
16009>>>>>>>>>>>
16009>>>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
16011>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to value
16012>>>>>>>>>>>    End_Procedure
16013>>>>>>>>>>>
16013>>>>>>>>>>>    Function ComIndex Returns Integer
16015>>>>>>>>>>>        Handle hDispatchDriver
16015>>>>>>>>>>>        Integer retVal
16015>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16016>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
16017>>>>>>>>>>>        Function_Return retVal
16018>>>>>>>>>>>    End_Function
16019>>>>>>>>>>>
16019>>>>>>>>>>>    Procedure ComMove Integer llIndex
16021>>>>>>>>>>>        Handle hDispatchDriver
16021>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16022>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16023>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
16024>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
16025>>>>>>>>>>>    End_Procedure
16026>>>>>>>>>>>
16026>>>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
16028>>>>>>>>>>>        Handle hDispatchDriver
16028>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16029>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16030>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
16031>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
16032>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
16033>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
16034>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
16035>>>>>>>>>>>    End_Procedure
16036>>>>>>>>>>>
16036>>>>>>>>>>>    Procedure ComEnsureVisible
16038>>>>>>>>>>>        Handle hDispatchDriver
16038>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16039>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
16040>>>>>>>>>>>    End_Procedure
16041>>>>>>>>>>>End_Class
16042>>>>>>>>>>>
16042>>>>>>>>>>>// CoClass
16042>>>>>>>>>>>// CLSID: {C0DE2000-9808-4CBF-BAC2-F2455C8C8A46}
16042>>>>>>>>>>>Class cCJComTabControlItem is a cComAutomationObject
16043>>>>>>>>>>>    Import_Class_Protocol cCJITabControlItem
16044>>>>>>>>>>>
16044>>>>>>>>>>>    Procedure Construct_Object
16046>>>>>>>>>>>        Forward Send Construct_Object
16048>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
16049>>>>>>>>>>>    End_Procedure
16050>>>>>>>>>>>End_Class
16051>>>>>>>>>>>
16051>>>>>>>>>Use cCJDataObject.pkg       // cCJDataObjectFile, cCJDataObject
Including file: cCJDataObject.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCJDataObject.pkg)
16051>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
16051>>>>>>>>>>>Use FlexCom20.pkg
16051>>>>>>>>>>>
16051>>>>>>>>>>>// CLSID: {C0DE2000-604D-4242-954B-DF38BBFA8BE3}
16051>>>>>>>>>>>Class cCJDataObjectFiles is a cComAutomationObject
16052>>>>>>>>>>>
16052>>>>>>>>>>>    Function ComItem Integer llIndex Returns String
16054>>>>>>>>>>>        Handle hDispatchDriver
16054>>>>>>>>>>>        String retVal
16054>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16055>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16056>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
16057>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_BSTR to retVal
16058>>>>>>>>>>>        Function_Return retVal
16059>>>>>>>>>>>    End_Function
16060>>>>>>>>>>>
16060>>>>>>>>>>>    Function ComCount Returns Integer
16062>>>>>>>>>>>        Handle hDispatchDriver
16062>>>>>>>>>>>        Integer retVal
16062>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16063>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
16064>>>>>>>>>>>        Function_Return retVal
16065>>>>>>>>>>>    End_Function
16066>>>>>>>>>>>
16066>>>>>>>>>>>    Function Com_NewEnum Returns Variant
16068>>>>>>>>>>>        Handle hDispatchDriver
16068>>>>>>>>>>>        Variant retVal
16068>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16069>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
16070>>>>>>>>>>>        Function_Return retVal
16071>>>>>>>>>>>    End_Function
16072>>>>>>>>>>>End_Class
16073>>>>>>>>>>>
16073>>>>>>>>>>>// CLSID: {C0DE2000-300E-4EB2-AE9B-6F1BA025DF31}
16073>>>>>>>>>>>Class cCJDataObject is a cComAutomationObject
16074>>>>>>>>>>>
16074>>>>>>>>>>>    Function ComGetFormat Integer llFormat Returns Boolean
16076>>>>>>>>>>>        Handle hDispatchDriver
16076>>>>>>>>>>>        Boolean retVal
16076>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16077>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16078>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llFormat
16079>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
16080>>>>>>>>>>>        Function_Return retVal
16081>>>>>>>>>>>    End_Function
16082>>>>>>>>>>>
16082>>>>>>>>>>>    Function ComFiles Returns Variant
16084>>>>>>>>>>>        Handle hDispatchDriver
16084>>>>>>>>>>>        Variant retVal
16084>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16085>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
16086>>>>>>>>>>>        Function_Return retVal
16087>>>>>>>>>>>    End_Function
16088>>>>>>>>>>>
16088>>>>>>>>>>>    Function ComGetData Integer llFormat Returns Variant
16090>>>>>>>>>>>        Handle hDispatchDriver
16090>>>>>>>>>>>        Variant retVal
16090>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16091>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16092>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llFormat
16093>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_VARIANT to retVal
16094>>>>>>>>>>>        Function_Return retVal
16095>>>>>>>>>>>    End_Function
16096>>>>>>>>>>>
16096>>>>>>>>>>>    Procedure ComSetData Variant llvValue Variant llFormat
16098>>>>>>>>>>>        Handle hDispatchDriver
16098>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16099>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16100>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llvValue
16101>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormat
16102>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
16103>>>>>>>>>>>    End_Procedure
16104>>>>>>>>>>>
16104>>>>>>>>>>>    Procedure ComClear
16106>>>>>>>>>>>        Handle hDispatchDriver
16106>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16107>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
16108>>>>>>>>>>>    End_Procedure
16109>>>>>>>>>>>End_Class
16110>>>>>>>>>>>
16110>>>>>>>>>Use cCJResourceImages.pkg   // cCJResourceImages
Including file: cCJResourceImages.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCJResourceImages.pkg)
16110>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
16110>>>>>>>>>>>Use FlexCom20.pkg
16110>>>>>>>>>>>
16110>>>>>>>>>>>// CLSID: {C0DE2000-FDDA-45CE-BBFB-C5E3EE3C4E7B}
16110>>>>>>>>>>>Class cCJResourceImages is a cComAutomationObject
16111>>>>>>>>>>>
16111>>>>>>>>>>>    Function ComLoadFromFile String llDllFileName String llIniFileName Returns Boolean
16113>>>>>>>>>>>        Handle hDispatchDriver
16113>>>>>>>>>>>        Boolean retVal
16113>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16114>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16115>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llDllFileName
16116>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llIniFileName
16117>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BOOL to retVal
16118>>>>>>>>>>>        Function_Return retVal
16119>>>>>>>>>>>    End_Function
16120>>>>>>>>>>>
16120>>>>>>>>>>>    Function ComDllFileName Returns String
16122>>>>>>>>>>>        Handle hDispatchDriver
16122>>>>>>>>>>>        String retVal
16122>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16123>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BSTR to retVal
16124>>>>>>>>>>>        Function_Return retVal
16125>>>>>>>>>>>    End_Function
16126>>>>>>>>>>>
16126>>>>>>>>>>>    Function ComIniFileName Returns String
16128>>>>>>>>>>>        Handle hDispatchDriver
16128>>>>>>>>>>>        String retVal
16128>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16129>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BSTR to retVal
16130>>>>>>>>>>>        Function_Return retVal
16131>>>>>>>>>>>    End_Function
16132>>>>>>>>>>>
16132>>>>>>>>>>>    Function ComGetColor String llSection String llKeyName Returns OLE_COLOR
16134>>>>>>>>>>>        Handle hDispatchDriver
16134>>>>>>>>>>>        OLE_COLOR retVal
16134>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16135>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16136>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llSection
16137>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llKeyName
16138>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
16139>>>>>>>>>>>        Function_Return retVal
16140>>>>>>>>>>>    End_Function
16141>>>>>>>>>>>End_Class
16142>>>>>>>>>>>
16142>>>>>>>>>Use cCJMarkupContext.pkg    // cCJMarkupContext
Including file: cCJMarkupContext.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCJMarkupContext.pkg)
16142>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
16142>>>>>>>>>>>Use FlexCom20.pkg
16142>>>>>>>>>>>
16142>>>>>>>>>>>// Possible rendering smoothing modes
16142>>>>>>>>>>>Define XTPMarkupSmoothingMode for Integer
16142>>>>>>>>>>>    Define xtpMarkupSmoothingDefault for 0
16142>>>>>>>>>>>    Define xtpMarkupSmoothingNone for 1
16142>>>>>>>>>>>    Define xtpMarkupSmoothingHighSpeed for 2
16142>>>>>>>>>>>    Define xtpMarkupSmoothingHighQuality for 3
16142>>>>>>>>>>>    Define xtpMarkupSmoothingAntiAlias for 4
16142>>>>>>>>>>>
16142>>>>>>>>>>>// CLSID: {C0DE2000-D073-4043-AA8C-62B5BD8E522D}
16142>>>>>>>>>>>Class cCJMarkupContext is a cComAutomationObject
16143>>>>>>>>>>>
16143>>>>>>>>>>>    Function ComEnableGdiPlus Returns Boolean
16145>>>>>>>>>>>        Boolean retVal
16145>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
16146>>>>>>>>>>>        Function_Return retVal
16147>>>>>>>>>>>    End_Function
16148>>>>>>>>>>>
16148>>>>>>>>>>>    Procedure Set ComEnableGdiPlus Boolean value
16150>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
16151>>>>>>>>>>>    End_Procedure
16152>>>>>>>>>>>
16152>>>>>>>>>>>    Function ComDpiAware Returns Boolean
16154>>>>>>>>>>>        Boolean retVal
16154>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 43 OLE_VT_BOOL to retVal
16155>>>>>>>>>>>        Function_Return retVal
16156>>>>>>>>>>>    End_Function
16157>>>>>>>>>>>
16157>>>>>>>>>>>    Procedure Set ComDpiAware Boolean value
16159>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 43 OLE_VT_BOOL to value
16160>>>>>>>>>>>    End_Procedure
16161>>>>>>>>>>>
16161>>>>>>>>>>>    Function ComIcons Returns Variant
16163>>>>>>>>>>>        Variant retVal
16163>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_DISPATCH to retVal
16164>>>>>>>>>>>        Function_Return retVal
16165>>>>>>>>>>>    End_Function
16166>>>>>>>>>>>
16166>>>>>>>>>>>    Procedure Set ComIcons Variant value
16168>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_DISPATCH to value
16169>>>>>>>>>>>    End_Procedure
16170>>>>>>>>>>>
16170>>>>>>>>>>>    Function ComDefaultSmoothingMode Returns XTPMarkupSmoothingMode
16172>>>>>>>>>>>        XTPMarkupSmoothingMode retVal
16172>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 44 OLE_VT_I4 to retVal
16173>>>>>>>>>>>        Function_Return retVal
16174>>>>>>>>>>>    End_Function
16175>>>>>>>>>>>
16175>>>>>>>>>>>    Procedure Set ComDefaultSmoothingMode XTPMarkupSmoothingMode value
16177>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 44 OLE_VT_I4 to value
16178>>>>>>>>>>>    End_Procedure
16179>>>>>>>>>>>
16179>>>>>>>>>>>    Function ComDefaultTextSmoothingEnabled Returns Boolean
16181>>>>>>>>>>>        Boolean retVal
16181>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_BOOL to retVal
16182>>>>>>>>>>>        Function_Return retVal
16183>>>>>>>>>>>    End_Function
16184>>>>>>>>>>>
16184>>>>>>>>>>>    Procedure Set ComDefaultTextSmoothingEnabled Boolean value
16186>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_BOOL to value
16187>>>>>>>>>>>    End_Procedure
16188>>>>>>>>>>>
16188>>>>>>>>>>>    Procedure ComSetMethod Variant llHandler String llMethod
16190>>>>>>>>>>>        Handle hDispatchDriver
16190>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16191>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16192>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llHandler
16193>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llMethod
16194>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1 OLE_VT_VOID
16195>>>>>>>>>>>    End_Procedure
16196>>>>>>>>>>>
16196>>>>>>>>>>>    Procedure ComSetHandler Variant llHandler
16198>>>>>>>>>>>        Handle hDispatchDriver
16198>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16199>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16200>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llHandler
16201>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
16202>>>>>>>>>>>    End_Procedure
16203>>>>>>>>>>>
16203>>>>>>>>>>>    Function ComValidateXML String llText Returns String
16205>>>>>>>>>>>        Handle hDispatchDriver
16205>>>>>>>>>>>        String retVal
16205>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16206>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16207>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
16208>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_BSTR to retVal
16209>>>>>>>>>>>        Function_Return retVal
16210>>>>>>>>>>>    End_Function
16211>>>>>>>>>>>
16211>>>>>>>>>>>    Function ComToolTipContext Returns Variant
16213>>>>>>>>>>>        Handle hDispatchDriver
16213>>>>>>>>>>>        Variant retVal
16213>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16214>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 39 OLE_VT_DISPATCH to retVal
16215>>>>>>>>>>>        Function_Return retVal
16216>>>>>>>>>>>    End_Function
16217>>>>>>>>>>>
16217>>>>>>>>>>>    Procedure ComFreezeUpdates
16219>>>>>>>>>>>        Handle hDispatchDriver
16219>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16220>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 41 OLE_VT_VOID
16221>>>>>>>>>>>    End_Procedure
16222>>>>>>>>>>>
16222>>>>>>>>>>>    Procedure ComUnfreezeUpdates
16224>>>>>>>>>>>        Handle hDispatchDriver
16224>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16225>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 42 OLE_VT_VOID
16226>>>>>>>>>>>    End_Procedure
16227>>>>>>>>>>>End_Class
16228>>>>>>>>>>>
16228>>>>>>>>>
16228>>>>>>>>>Define XTPFrameShadowManagerFlags for Integer
16228>>>>>>>>>    Define xtpFrameShadowsDisabled for 1
16228>>>>>>>>>    Define xtpFrameShadowsInvisible for 2
16228>>>>>>>>>    Define xtpFrameShadowsNotResizeable for 4
16228>>>>>>>>>    Define xtpFrameShadowsDisabledInTSS for 8
16228>>>>>>>>>    Define xtpFrameShadowsInvisibleInTSS for 16
16228>>>>>>>>>
16228>>>>>>>>>Define XTPApplicationAmbientProperty for Integer
16228>>>>>>>>>    // Ambient accent color value. -1 should be used to specify a default accent color value determined individually by each suscribed client.
16228>>>>>>>>>    Define xtpApplicationAccentColor for 0
16228>>>>>>>>>    // Ambient state color value. -1 should be used to specify a default state color value determined individually by each suscribed client.
16228>>>>>>>>>    Define xtpApplicationStateColor for 1
16228>>>>>>>>>
16228>>>>>>>>>Define OLEDropConstants for Integer
16228>>>>>>>>>    Define xtpOLEDropNone for 0
16228>>>>>>>>>    Define xtpOLEDropManual for 1
16228>>>>>>>>>
16228>>>>>>>>>Define OLEDragConstants for Integer
16228>>>>>>>>>    Define xtpOLEDragManual for 0
16228>>>>>>>>>    Define xtpOLEDragAutomatic for 1
16228>>>>>>>>>
16228>>>>>>>>>Define XTPWorkspaceCommand for Integer
16228>>>>>>>>>    // Used to move a TabControlItem to the next tab group.
16228>>>>>>>>>    Define XTP_ID_WORKSPACE_MOVEPREVIOUS for 9155
16228>>>>>>>>>    // Used to move a TabControlItem to the previous tab group.
16228>>>>>>>>>    Define XTP_ID_WORKSPACE_MOVENEXT for 9156
16228>>>>>>>>>    // Used to create a new horizontal tab group.
16228>>>>>>>>>    Define XTP_ID_WORKSPACE_NEWHORIZONTAL for 9157
16228>>>>>>>>>    // Used to create a new vertical tab group.
16228>>>>>>>>>    Define XTP_ID_WORKSPACE_NEWVERTICAL for 9158
16228>>>>>>>>>
16228>>>>>>>>>Define XTPCommandBarStyle for Integer
16228>>>>>>>>>    Define XTP_CBRS_GRIPPER for 4194304
16228>>>>>>>>>
16228>>>>>>>>>Define XTPControlNotify for Integer
16228>>>>>>>>>    Define XTP_EN_SPINUP for 4104
16228>>>>>>>>>    Define XTP_EN_SPINDOWN for 4105
16228>>>>>>>>>    Define XTP_EN_BUDDYBUTTONCLICK for 4106
16228>>>>>>>>>    Define XTP_GN_PREVIEWSTART for 4112
16228>>>>>>>>>    Define XTP_GN_PREVIEWCANCEL for 4113
16228>>>>>>>>>    Define XTP_GN_PREVIEWAPPLY for 4114
16228>>>>>>>>>    Define XTP_GN_PREVIEWCHANGE for 4115
16228>>>>>>>>>    Define XTP_GN_STARTDRAG for 4116
16228>>>>>>>>>    Define XTP_GN_SELCHANGE for 4117
16228>>>>>>>>>    Define XTP_EN_CHANGE for 768
16228>>>>>>>>>    Define XTP_EN_SETFOCUS for 256
16228>>>>>>>>>    Define XTP_EN_KILLFOCUS for 512
16228>>>>>>>>>    Define XTP_CBN_EDITCHANGE for 5
16228>>>>>>>>>    Define XTP_CBN_SETFOCUS for 3
16228>>>>>>>>>    Define XTP_CBN_KILLFOCUS for 4
16228>>>>>>>>>    Define XTP_CBN_CLOSEUP for 8
16228>>>>>>>>>    Define XTP_CBN_DROPDOWN for 7
16228>>>>>>>>>    Define XTP_BS_TABCHANGED for 4352
16228>>>>>>>>>
16228>>>>>>>>>// Bar Position
16228>>>>>>>>>Define XTPBarPosition for Integer
16228>>>>>>>>>    // Docked at top.
16228>>>>>>>>>    Define xtpBarTop for 0
16228>>>>>>>>>    // Docked at bottom.
16228>>>>>>>>>    Define xtpBarBottom for 1
16228>>>>>>>>>    // Docked at left.
16228>>>>>>>>>    Define xtpBarLeft for 2
16228>>>>>>>>>    // Docked at right.
16228>>>>>>>>>    Define xtpBarRight for 3
16228>>>>>>>>>    // Floated.
16228>>>>>>>>>    Define xtpBarFloating for 4
16228>>>>>>>>>    // Popuped.
16228>>>>>>>>>    Define xtpBarPopup for 5
16228>>>>>>>>>    // List box.
16228>>>>>>>>>    Define xtpBarListBox for 6
16228>>>>>>>>>    // ComboBoxGalleryPopup.
16228>>>>>>>>>    Define xtpBarComboBoxGalleryPopup for 8
16228>>>>>>>>>
16228>>>>>>>>>// Type of CommandBars
16228>>>>>>>>>Define XTPBarType for Integer
16228>>>>>>>>>    // Command bar is menu bar.
16228>>>>>>>>>    Define xtpBarTypeMenuBar for 0
16228>>>>>>>>>    // Command bar is toolbar.
16228>>>>>>>>>    Define xtpBarTypeNormal for 1
16228>>>>>>>>>    // Command bar is popup.
16228>>>>>>>>>    Define xtpBarTypePopup for 2
16228>>>>>>>>>    // Command bar is ribbon.
16228>>>>>>>>>    Define xtpBarTypeRibbon for 3
16228>>>>>>>>>
16228>>>>>>>>>// Control Type
16228>>>>>>>>>Define XTPControlType for Integer
16228>>>>>>>>>    // Type not defined.
16228>>>>>>>>>    Define xtpControlError for 0
16228>>>>>>>>>    // Button type.
16228>>>>>>>>>    Define xtpControlButton for 1
16228>>>>>>>>>    // Popup type.
16228>>>>>>>>>    Define xtpControlPopup for 2
16228>>>>>>>>>    // Button popup.
16228>>>>>>>>>    Define xtpControlButtonPopup for 3
16228>>>>>>>>>    // Split button popup.
16228>>>>>>>>>    Define xtpControlSplitButtonPopup for 4
16228>>>>>>>>>    // Combo box button.
16228>>>>>>>>>    Define xtpControlComboBox for 5
16228>>>>>>>>>    // Edit control
16228>>>>>>>>>    Define xtpControlEdit for 6
16228>>>>>>>>>    // Custom control
16228>>>>>>>>>    Define xtpControlCustom for 7
16228>>>>>>>>>    // Label control
16228>>>>>>>>>    Define xtpControlLabel for 8
16228>>>>>>>>>    // CheckBox control
16228>>>>>>>>>    Define xtpControlCheckBox for 9
16228>>>>>>>>>    // Gallery control
16228>>>>>>>>>    Define xtpControlGallery for 10
16228>>>>>>>>>    // Radio Button control
16228>>>>>>>>>    Define xtpControlRadioButton for 11
16228>>>>>>>>>
16228>>>>>>>>>// Button Styles
16228>>>>>>>>>Define XTPButtonStyle for Integer
16228>>>>>>>>>    // Automatic style.
16228>>>>>>>>>    Define xtpButtonAutomatic for 0
16228>>>>>>>>>    // Button draw only caption.
16228>>>>>>>>>    Define xtpButtonCaption for 1
16228>>>>>>>>>    // Button draw only icon.
16228>>>>>>>>>    Define xtpButtonIcon for 2
16228>>>>>>>>>    // Button draw icon and caption.
16228>>>>>>>>>    Define xtpButtonIconAndCaption for 3
16228>>>>>>>>>    // Button draw icon and draw caption below icon.
16228>>>>>>>>>    Define xtpButtonIconAndCaptionBelow for 4
16228>>>>>>>>>    // Button draw icon, caption and description for popup bar.
16228>>>>>>>>>    Define xtpButtonCaptionAndDescription for 5
16228>>>>>>>>>
16228>>>>>>>>>// Control Flags
16228>>>>>>>>>Define XTPControlFlags for Integer
16228>>>>>>>>>    // Control is right aligned.
16228>>>>>>>>>    Define xtpFlagRightAlign for 1
16228>>>>>>>>>    // Control does not have focus.  The control will be skipped when performing actions such as tabbing through the controls in the command bar.
16228>>>>>>>>>    Define xtpFlagSkipFocus for 2
16228>>>>>>>>>    // To Pop up child bar left.  The popup will start from the right side of the control that was clicked and be displayed right-to-left. 
16228>>>>>>>>>    Define xtpFlagLeftPopup for 4
16228>>>>>>>>>    // Control is manually updated.
16228>>>>>>>>>    Define xtpFlagManualUpdate for 8
16228>>>>>>>>>    // Used to disable customization.  The user will not be able to move or edit the control.
16228>>>>>>>>>    Define xtpFlagNoMovable for 16
16228>>>>>>>>>    // Used to stretch a control to fill the maximum available width if the control is in the ActiveMenuBar.  This has no effect on controls in the toolbar.
16228>>>>>>>>>    Define xtpFlagControlStretched for 32
16228>>>>>>>>>    // Show tooltip always.
16228>>>>>>>>>    Define xtpFlagShowPopupBarTip for 64
16228>>>>>>>>>    // Wrap row for toolbar or popup bar.
16228>>>>>>>>>    Define xtpFlagWrapRow for 128
16228>>>>>>>>>    // Control is on the right side of Ribbon tabs.
16228>>>>>>>>>    Define xtpFlagRibbonTabBackground for 256
16228>>>>>>>>>
16228>>>>>>>>>// Combo Styles
16228>>>>>>>>>Define XTPComboStyle for Integer
16228>>>>>>>>>    // Normal combobox.
16228>>>>>>>>>    Define xtpComboNormal for 0
16228>>>>>>>>>    // Combobox with label.
16228>>>>>>>>>    Define xtpComboLabel for 1
16228>>>>>>>>>
16228>>>>>>>>>// Gallery Resizable style
16228>>>>>>>>>Define XTPGalleryResizable for Integer
16228>>>>>>>>>    // xtpAllowResizeWidth
16228>>>>>>>>>    Define xtpAllowResizeWidth for 1
16228>>>>>>>>>    // xtpAllowResizeHeight
16228>>>>>>>>>    Define xtpAllowResizeHeight for 2
16228>>>>>>>>>
16228>>>>>>>>>// Visual Themes
16228>>>>>>>>>Define XTPVisualTheme for Integer
16228>>>>>>>>>    // Office 2000 theme.
16228>>>>>>>>>    Define xtpThemeOffice2000 for 0
16228>>>>>>>>>    // Office XP theme.
16228>>>>>>>>>    Define xtpThemeOfficeXP for 1
16228>>>>>>>>>    // Office 2003 theme.
16228>>>>>>>>>    Define xtpThemeOffice2003 for 2
16228>>>>>>>>>    // Windows XP themes support.
16228>>>>>>>>>    Define xtpThemeNativeWinXP for 3
16228>>>>>>>>>    // VisualStudio 2005 theme.
16228>>>>>>>>>    Define xtpThemeWhidbey for 4
16228>>>>>>>>>    // Office 2007 theme.
16228>>>>>>>>>    Define xtpThemeResource for 5
16228>>>>>>>>>    // Ribbon theme.
16228>>>>>>>>>    Define xtpThemeRibbon for 6
16228>>>>>>>>>    // VisualStudio2008 theme.
16228>>>>>>>>>    Define xtpThemeVisualStudio2008 for 7
16228>>>>>>>>>    // VisualStudio6 theme.
16228>>>>>>>>>    Define xtpThemeVisualStudio6 for 8
16228>>>>>>>>>    // VisualStudio2010 theme.
16228>>>>>>>>>    Define xtpThemeVisualStudio2010 for 9
16228>>>>>>>>>    // Office 2007 System theme.
16228>>>>>>>>>    Define xtpThemeOffice2007System for 11
16228>>>>>>>>>    // Office 2013 theme.
16228>>>>>>>>>    Define xtpThemeOffice2013 for 12
16228>>>>>>>>>    // Office 2016 theme.
16228>>>>>>>>>    Define xtpThemeOffice2016 for 12
16228>>>>>>>>>    // VisualStudio2012 theme. Uses INI file
16228>>>>>>>>>    Define xtpThemeVisualStudio2012 for 13
16228>>>>>>>>>    // VisualStudio2012 Light theme.
16228>>>>>>>>>    Define xtpThemeVisualStudio2012Light for 14
16228>>>>>>>>>    // VisualStudio2012 Dark theme.
16228>>>>>>>>>    Define xtpThemeVisualStudio2012Dark for 15
16228>>>>>>>>>    // VisualStudio2015 theme.
16228>>>>>>>>>    Define xtpThemeVisualStudio2015 for 16
16228>>>>>>>>>    // Windows 10 theme.
16228>>>>>>>>>    Define xtpThemeNativeWindows10 for 17
16228>>>>>>>>>
16228>>>>>>>>>// Backstage Separator Visual Themes
16228>>>>>>>>>Define XTPBackstageSeparatorControlAppearanceStyle for Integer
16228>>>>>>>>>    Define xtpSeparatorAppearanceResource for 6
16228>>>>>>>>>    Define xtpSeparatorAppearanceOffice2013 for 12
16228>>>>>>>>>    Define xtpSeparatorAppearanceOffice2016 for 12
16228>>>>>>>>>    Define xtpSeparatorAppearanceVisualStudio2015 for 16
16228>>>>>>>>>
16228>>>>>>>>>// Backstage Button Control Visual Themes
16228>>>>>>>>>Define XTPBackstageButtonControlAppearanceStyle for Integer
16228>>>>>>>>>    Define xtpAppearanceStandard for 0
16228>>>>>>>>>    Define xtpAppearanceFlat for 1
16228>>>>>>>>>    Define xtpAppearanceUltraFlat for 2
16228>>>>>>>>>    Define xtpAppearanceOffice2000 for 3
16228>>>>>>>>>    Define xtpAppearanceOfficeXP for 4
16228>>>>>>>>>    Define xtpAppearanceOffice2003 for 5
16228>>>>>>>>>    Define xtpAppearanceOffice2007 for 6
16228>>>>>>>>>    Define xtpAppearanceResource for 7
16228>>>>>>>>>    Define xtpAppearanceNativeWinXP for 8
16228>>>>>>>>>    Define xtpAppearanceVisualStudio2005 for 9
16228>>>>>>>>>    Define xtpAppearanceVisualStudio2008 for 10
16228>>>>>>>>>    Define xtpAppearanceVisualStudio2010 for 11
16228>>>>>>>>>    Define xtpAppearanceOffice2013 for 12
16228>>>>>>>>>    Define xtpAppearanceOffice2016 for 12
16228>>>>>>>>>    Define xtpAppearanceVisualStudio2012 for 13
16228>>>>>>>>>    Define xtpAppearanceVisualStudio2012Light for 14
16228>>>>>>>>>    Define xtpAppearanceVisualStudio2012Dark for 15
16228>>>>>>>>>    Define xtpAppearanceVisualStudio2015 for 16
16228>>>>>>>>>    Define xtpAppearanceNativeWindows10 for 17
16228>>>>>>>>>
16228>>>>>>>>>Define XTPRibbonBackstageStyle for Integer
16228>>>>>>>>>    // Backstage like in Office 2010.
16228>>>>>>>>>    Define xtpRibbonBackstageOffice2010Style for 0
16228>>>>>>>>>    // Backstage like in Office 2013/2016.
16228>>>>>>>>>    Define xtpRibbonBackstageOffice2013Style for 1
16228>>>>>>>>>    // Backstage like in Office 2013/2016.
16228>>>>>>>>>    Define xtpRibbonBackstageOffice2016Style for 1
16228>>>>>>>>>
16228>>>>>>>>>// ScrollBar Style
16228>>>>>>>>>Define XTPScrollBarStyle for Integer
16228>>>>>>>>>    Define xtpScrollStyleDefault for 0
16228>>>>>>>>>    Define xtpScrollStyleStandard for 1
16228>>>>>>>>>    Define xtpScrollStyleFlat for 2
16228>>>>>>>>>    Define xtpScrollStyleSystem for 3
16228>>>>>>>>>    Define xtpScrollStyleOffice for 4
16228>>>>>>>>>    Define xtpScrollStyleOffice2007Light for 5
16228>>>>>>>>>    Define xtpScrollStyleOffice2007Dark for 6
16228>>>>>>>>>    Define xtpScrollStyleSlider for 7
16228>>>>>>>>>
16228>>>>>>>>>Define XTPControlCustomVerticalOptions for Integer
16228>>>>>>>>>    Define xtpVerticalHide for 0
16228>>>>>>>>>    Define xtpVerticalShow for 1
16228>>>>>>>>>    Define xtpVerticalButton for 2
16228>>>>>>>>>
16228>>>>>>>>>// Text Orientation
16228>>>>>>>>>Define XTPBarTextOrientation for Integer
16228>>>>>>>>>    Define xtpBarTextAuto for 0
16228>>>>>>>>>    Define xtpBarTextVertical for 1
16228>>>>>>>>>    Define xtpBarTextHorizontal for 2
16228>>>>>>>>>
16228>>>>>>>>>// Edit Style
16228>>>>>>>>>Define XTPCommandBarEditStyle for Integer
16228>>>>>>>>>    Define xtpEditStyleLeft for 0
16228>>>>>>>>>    Define xtpEditStyleCenter for 1
16228>>>>>>>>>    Define xtpEditStyleRight for 2
16228>>>>>>>>>    Define xtpEditStyleLowerCase for 16
16228>>>>>>>>>    Define xtpEditStylePassword for 32
16228>>>>>>>>>
16228>>>>>>>>>Define OLETextImageRelationStyle for Integer
16228>>>>>>>>>    Define xtpOverlay for 0
16228>>>>>>>>>    Define xtpImageAboveText for 1
16228>>>>>>>>>    Define xtpTextAboveImage for 2
16228>>>>>>>>>    Define xtpImageBeforeText for 3
16228>>>>>>>>>    Define xtpTextBeforeImage for 4
16228>>>>>>>>>
16228>>>>>>>>>Define OLEPushButtonStyle for Integer
16228>>>>>>>>>    Define xtpButtonNormal for 0
16228>>>>>>>>>    Define xtpButtonDropDown for 1
16228>>>>>>>>>    Define xtpButtonDropDownRight for 2
16228>>>>>>>>>    Define xtpButtonSplitDropDown for 3
16228>>>>>>>>>    Define xtpButtonDropDownNoGlyph for 4
16228>>>>>>>>>
16228>>>>>>>>>Define OLEAlignmentStyle for Integer
16228>>>>>>>>>    Define xtpAlignLeft for 0
16228>>>>>>>>>    Define xtpAlignRight for 1
16228>>>>>>>>>    Define xtpAlignCenter for 2
16228>>>>>>>>>    Define xtpAlignMiddle for 0
16228>>>>>>>>>    Define xtpAlignTop for 4
16228>>>>>>>>>    Define xtpAlignBottom for 8
16228>>>>>>>>>
16228>>>>>>>>>// Docking Flags
16228>>>>>>>>>Define XTPToolBarFlags for Integer
16228>>>>>>>>>    // Allows docking at the top of the client area. 
16228>>>>>>>>>    Define xtpFlagAlignTop for 1
16228>>>>>>>>>    // Allows docking at the bottom of the client area. 
16228>>>>>>>>>    Define xtpFlagAlignBottom for 2
16228>>>>>>>>>    // Allows docking on the left side of the client area. 
16228>>>>>>>>>    Define xtpFlagAlignLeft for 4
16228>>>>>>>>>    // Allows docking on the left side of the client area. 
16228>>>>>>>>>    Define xtpFlagAlignRight for 8
16228>>>>>>>>>    // Allows docking on any side of the client area. 
16228>>>>>>>>>    Define xtpFlagAlignAny for 15
16228>>>>>>>>>    // Allows floating. 
16228>>>>>>>>>    Define xtpFlagFloating for 16
16228>>>>>>>>>    // Allow to hide wrapped controls.
16228>>>>>>>>>    Define xtpFlagHideWrap for 32
16228>>>>>>>>>    // Bar is stretched.
16228>>>>>>>>>    Define xtpFlagStretched for 64
16228>>>>>>>>>    // Bar is stretched, but not fill whole row
16228>>>>>>>>>    Define xtpFlagStretchedShared for 1048576
16228>>>>>>>>>    // Enables smart layout
16228>>>>>>>>>    Define xtpFlagSmartLayout for 2097152
16228>>>>>>>>>
16228>>>>>>>>>// MenuBar flags
16228>>>>>>>>>Define XTPMenuBarFlags for Integer
16228>>>>>>>>>    // To hide minimize box.
16228>>>>>>>>>    Define xtpFlagHideMinimizeBox for 256
16228>>>>>>>>>    // To hide maximize box.
16228>>>>>>>>>    Define xtpFlagHideMaximizeBox for 512
16228>>>>>>>>>    // To hide close button.
16228>>>>>>>>>    Define xtpFlagHideClose for 4096
16228>>>>>>>>>    // To add system MDI popup bar.
16228>>>>>>>>>    Define xtpFlagHideMDIButtons for 4864
16228>>>>>>>>>    Define xtpFlagAddMDISysPopup for 8192
16228>>>>>>>>>
16228>>>>>>>>>// Animation
16228>>>>>>>>>Define XTPAnimationType for Integer
16228>>>>>>>>>    // As defined in the 'Display' settings.
16228>>>>>>>>>    Define xtpAnimateWindowsDefault for 0
16228>>>>>>>>>    // Any of the first three in random selection.
16228>>>>>>>>>    Define xtpAnimateRandom for 1
16228>>>>>>>>>    // Unfold top to bottom.
16228>>>>>>>>>    Define xtpAnimateUnfold for 2
16228>>>>>>>>>    // Slide in from left.
16228>>>>>>>>>    Define xtpAnimateSlide for 3
16228>>>>>>>>>    // Fade-in.
16228>>>>>>>>>    Define xtpAnimateFade for 4
16228>>>>>>>>>    // No animation.
16228>>>>>>>>>    Define xtpAnimateNone for 5
16228>>>>>>>>>
16228>>>>>>>>>// Status Pane Styles
16228>>>>>>>>>Define XTPStatusPaneStyle for Integer
16228>>>>>>>>>    // When this flag is applied, the border will be removed from the indicated statusbar pane.
16228>>>>>>>>>    Define SBPS_NOBORDERS for 256
16228>>>>>>>>>    // When this flag is applied, the indicated statusbar pane will be disabled.
16228>>>>>>>>>    Define SBPS_DISABLED for 67108864
16228>>>>>>>>>    // The pane will stretched, it will not have a static width.
16228>>>>>>>>>    Define SBPS_STRETCH for 134217728
16228>>>>>>>>>
16228>>>>>>>>>// Tracking Flags
16228>>>>>>>>>Define XTPTrackPopupFlags for Integer
16228>>>>>>>>>    // Returns the Id of the control instead of triggering the execute event.  The execute event will not be triggered.
16228>>>>>>>>>    Define TPM_RETURNCMD for 256
16228>>>>>>>>>    // Allows you to choose a menu item using a right click.
16228>>>>>>>>>    Define TPM_RIGHTBUTTON for 2
16228>>>>>>>>>    // Right aligns the menu starting from the x and y coordinates.
16228>>>>>>>>>    Define TPM_RIGHTALIGN for 8
16228>>>>>>>>>    // Use the TPM_RECURSE flag to display a menu when another menu is already displayed. This is intended to support context menus within a menu.
16228>>>>>>>>>    Define TPM_RECURSE for 1
16228>>>>>>>>>
16228>>>>>>>>>// Control's Hide Flags
16228>>>>>>>>>Define XTPControlHideFlags for Integer
16228>>>>>>>>>    // Control is visible.
16228>>>>>>>>>    Define xtpNoHide for 0
16228>>>>>>>>>    // Control is hidden by generic reason.
16228>>>>>>>>>    Define xtpHideGeneric for 1
16228>>>>>>>>>    // Control is hidden by wrap.
16228>>>>>>>>>    Define xtpHideWrap for 2
16228>>>>>>>>>    // Control is hidden by docking position.
16228>>>>>>>>>    Define xtpHideDockingPosition for 4
16228>>>>>>>>>    // Control is hidden by scrolling.
16228>>>>>>>>>    Define xtpHideScroll for 8
16228>>>>>>>>>    // Control is hidden by customize settings.
16228>>>>>>>>>    Define xtpHideCustomize for 16
16228>>>>>>>>>    // If the control is rarely used and it is not visible because the intelligent menus option on and the command is a hidden command.
16228>>>>>>>>>    Define xtpHideExpand for 32
16228>>>>>>>>>    // Control is hidden because active template excluded from its list.
16228>>>>>>>>>    Define xtpHideDocTemplate for 64
16228>>>>>>>>>    // Control is hidden because inactive ribbon tab.
16228>>>>>>>>>    Define xtpHideRibbonTab for 128
16228>>>>>>>>>
16228>>>>>>>>>Define XTPKeyboardCuesShow for Integer
16228>>>>>>>>>    // Show keyboard cues always
16228>>>>>>>>>    Define xtpKeyboardCuesShowAlways for 0
16228>>>>>>>>>    // Never show keyboard cues
16228>>>>>>>>>    Define xtpKeyboardCuesShowNever for 1
16228>>>>>>>>>    // System defined
16228>>>>>>>>>    Define xtpKeyboardCuesShowWindowsDefault for 2
16228>>>>>>>>>
16228>>>>>>>>>Define XTPKeyboardCuesUse for Integer
16228>>>>>>>>>    // Activate only menu by using underlines
16228>>>>>>>>>    Define xtpKeyboardCuesUseMenuOnly for 0
16228>>>>>>>>>    // Activate menu and toolbars by using underlines
16228>>>>>>>>>    Define xtpKeyboardCuesUseAll for 1
16228>>>>>>>>>    // No using underlines
16228>>>>>>>>>    Define xtpKeyboardCuesUseNone for 2
16228>>>>>>>>>    // Only if Ampersant exists option
16228>>>>>>>>>    Define xtpKeyboardCuesUseAmpersandOnly for 4
16228>>>>>>>>>
16228>>>>>>>>>// Workspace Buttons
16228>>>>>>>>>Define XTPWorkspaceButtons for Integer
16228>>>>>>>>>    // To hide arrow buttons.
16228>>>>>>>>>    Define xtpWorkspaceHideArrows for 1
16228>>>>>>>>>    // To hide close button.
16228>>>>>>>>>    Define xtpWorkspaceHideClose for 2
16228>>>>>>>>>    // To hide arrow and close buttons.
16228>>>>>>>>>    Define xtpWorkspaceHideAll for 3
16228>>>>>>>>>    // To show active file button.
16228>>>>>>>>>    Define xtpWorkspaceShowActiveFiles for 4
16228>>>>>>>>>    // To hide arrow buttons always
16228>>>>>>>>>    Define xtpWorkspaceHideArrowsAlways for 9
16228>>>>>>>>>    // To show close button for all tabs
16228>>>>>>>>>    Define xtpWorkspaceShowCloseTab for 16
16228>>>>>>>>>    // To show close button for selected tabs.
16228>>>>>>>>>    Define xtpWorkspaceShowCloseSelectedTab for 32
16228>>>>>>>>>
16228>>>>>>>>>// Workspace New Tab Position
16228>>>>>>>>>Define XTPWorkspaceNewTabPosition for Integer
16228>>>>>>>>>    // New tab will be created after all tabs
16228>>>>>>>>>    Define xtpWorkspaceNewTabRightMost for 0
16228>>>>>>>>>    // New tab will be created before all tabs
16228>>>>>>>>>    Define xtpWorkspaceNewTabLeftMost for 1
16228>>>>>>>>>    // New tab will be created after active tab
16228>>>>>>>>>    Define xtpWorkspaceNewTabNextToActive for 2
16228>>>>>>>>>
16228>>>>>>>>>// Scale Mode
16228>>>>>>>>>Define XTPScaleMode for Integer
16228>>>>>>>>>    // Auto scale mode
16228>>>>>>>>>    Define xtpScaleAuto for 0
16228>>>>>>>>>    // Pixels scale mode
16228>>>>>>>>>    Define xtpScalePixel for 1
16228>>>>>>>>>    // Twips scale mode
16228>>>>>>>>>    Define xtpScaleTwip for 2
16228>>>>>>>>>
16228>>>>>>>>>Define XTPTextAlignment for Integer
16228>>>>>>>>>    Define xtpAlignmentLeft for 0
16228>>>>>>>>>    Define xtpAlignmentCenter for 1
16228>>>>>>>>>    Define xtpAlignmentRight for 2
16228>>>>>>>>>
16228>>>>>>>>>Define XTPShellAutoCompleteFlags for Integer
16228>>>>>>>>>    Define xtpShellAutoCompleteFileSystem for 1
16228>>>>>>>>>    Define xtpShellAutoCompleteFileSysOnly for 16
16228>>>>>>>>>    Define xtpShellAutoCompleteUrlAll for 6
16228>>>>>>>>>    Define xtpShellAutoCompleteUrlHistory for 2
16228>>>>>>>>>    Define xtpShellAutoCompleteUrlMRU for 4
16228>>>>>>>>>    Define xtpShellAutoCompleteAll for 7
16228>>>>>>>>>
16228>>>>>>>>>Define XTPRibbonTabContextColor for UInteger
16228>>>>>>>>>    Define xtpRibbonTabContextColorNone for 0
16228>>>>>>>>>    Define xtpRibbonTabContextColorBlue for 1
16228>>>>>>>>>    Define xtpRibbonTabContextColorYellow for 2
16228>>>>>>>>>    Define xtpRibbonTabContextColorGreen for 3
16228>>>>>>>>>    Define xtpRibbonTabContextColorRed for 4
16228>>>>>>>>>    Define xtpRibbonTabContextColorPurple for 5
16228>>>>>>>>>    Define xtpRibbonTabContextColorCyan for 6
16228>>>>>>>>>    Define xtpRibbonTabContextColorOrange for 7
16228>>>>>>>>>
16228>>>>>>>>>Define XTPCommandBarsSpecialCommands for Integer
16228>>>>>>>>>    Define XTP_ID_RIBBONCONTROLTAB for 9604
16228>>>>>>>>>    Define XTP_ID_RIBBONCUSTOMIZE for 9607
16228>>>>>>>>>    Define XTP_ID_CUSTOMIZE_ADDORREMOVE for 9122
16228>>>>>>>>>    Define XTP_ID_CUSTOMIZE_RESET for 9123
16228>>>>>>>>>    Define XTP_ID_TOOLBAR_EXPAND for 9148
16228>>>>>>>>>    Define XTP_ID_TOOLBAR_HIDE for 9149
16228>>>>>>>>>    Define XTP_ID_WORKSPACE_CANCEL for 9159
16228>>>>>>>>>    Define XTP_ID_WINDOWLIST for 35000
16228>>>>>>>>>    Define XTP_ID_CUSTOMIZE for 35001
16228>>>>>>>>>    Define XTP_ID_WORKSPACE_ACTIONS for 35002
16228>>>>>>>>>    Define XTP_ID_TOOLBARLIST for 59392
16228>>>>>>>>>    Define XTP_ID_FILE_MRU for 35003
16228>>>>>>>>>
16228>>>>>>>>>Define XTPSliderCommand for Integer
16228>>>>>>>>>    Define XTP_SB_LINELEFT for 0
16228>>>>>>>>>    Define XTP_SB_LINERIGHT for 1
16228>>>>>>>>>    Define XTP_SB_PAGELEFT for 2
16228>>>>>>>>>    Define XTP_SB_PAGERIGHT for 3
16228>>>>>>>>>    Define XTP_SB_THUMBTRACK for 5
16228>>>>>>>>>    Define XTP_SB_LEFT for 6
16228>>>>>>>>>    Define XTP_SB_RIGHT for 7
16228>>>>>>>>>    Define XTP_SB_ENDSCROLL for 8
16228>>>>>>>>>
16228>>>>>>>>>Define XTPPrintOrientation for Integer
16228>>>>>>>>>    Define xtpOrientationPortrait for 1
16228>>>>>>>>>    Define xtpOrientationLandscape for 2
16228>>>>>>>>>
16228>>>>>>>>>Define XTPBackImage for Integer
16228>>>>>>>>>    Define XTPNone for 0
16228>>>>>>>>>    Define XTPCalligraphy for 1
16228>>>>>>>>>    Define XTPCirclesAndStripes for 2
16228>>>>>>>>>    Define XTPCircuit for 3
16228>>>>>>>>>    Define XTPClouds for 4
16228>>>>>>>>>    Define XTPDoodleCircles for 5
16228>>>>>>>>>    Define XTPDoodleDiamonds for 6
16228>>>>>>>>>    Define XTPGeometry for 7
16228>>>>>>>>>    Define XTPLunchBox for 8
16228>>>>>>>>>    Define XTPSchoolSupplies for 9
16228>>>>>>>>>    Define XTPSpring for 10
16228>>>>>>>>>    Define XTPStars for 11
16228>>>>>>>>>    Define XTPStraws for 12
16228>>>>>>>>>    Define XTPTreeRings for 13
16228>>>>>>>>>    Define XTPUnderWater for 14
16228>>>>>>>>>
16228>>>>>>>>>// CLSID: {C0DE2000-87E4-460A-8491-32BD8DE3269C}
16228>>>>>>>>>Class cCJIFrameShadow is a Mixin
16229>>>>>>>>>
16229>>>>>>>>>    Function ComOuterSize Returns Integer
16231>>>>>>>>>        Integer retVal
16231>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
16232>>>>>>>>>        Function_Return retVal
16233>>>>>>>>>    End_Function
16234>>>>>>>>>
16234>>>>>>>>>    Procedure Set ComOuterSize Integer value
16236>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
16237>>>>>>>>>    End_Procedure
16238>>>>>>>>>
16238>>>>>>>>>    Function ComInnerSize Returns Integer
16240>>>>>>>>>        Integer retVal
16240>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
16241>>>>>>>>>        Function_Return retVal
16242>>>>>>>>>    End_Function
16243>>>>>>>>>
16243>>>>>>>>>    Procedure Set ComInnerSize Integer value
16245>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
16246>>>>>>>>>    End_Procedure
16247>>>>>>>>>
16247>>>>>>>>>    Function ComOffsetX Returns OLE_XSIZE_PIXELS
16249>>>>>>>>>        OLE_XSIZE_PIXELS retVal
16249>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
16250>>>>>>>>>        Function_Return retVal
16251>>>>>>>>>    End_Function
16252>>>>>>>>>
16252>>>>>>>>>    Procedure Set ComOffsetX OLE_XSIZE_PIXELS value
16254>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
16255>>>>>>>>>    End_Procedure
16256>>>>>>>>>
16256>>>>>>>>>    Function ComOffsetY Returns OLE_YSIZE_PIXELS
16258>>>>>>>>>        OLE_YSIZE_PIXELS retVal
16258>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
16259>>>>>>>>>        Function_Return retVal
16260>>>>>>>>>    End_Function
16261>>>>>>>>>
16261>>>>>>>>>    Procedure Set ComOffsetY OLE_YSIZE_PIXELS value
16263>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
16264>>>>>>>>>    End_Procedure
16265>>>>>>>>>
16265>>>>>>>>>    Function ComColor Returns OLE_COLOR
16267>>>>>>>>>        OLE_COLOR retVal
16267>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
16268>>>>>>>>>        Function_Return retVal
16269>>>>>>>>>    End_Function
16270>>>>>>>>>
16270>>>>>>>>>    Procedure Set ComColor OLE_COLOR value
16272>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
16273>>>>>>>>>    End_Procedure
16274>>>>>>>>>
16274>>>>>>>>>    Function ComTransparency Returns Short
16276>>>>>>>>>        Short retVal
16276>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I2 to retVal
16277>>>>>>>>>        Function_Return retVal
16278>>>>>>>>>    End_Function
16279>>>>>>>>>
16279>>>>>>>>>    Procedure Set ComTransparency Short value
16281>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I2 to value
16282>>>>>>>>>    End_Procedure
16283>>>>>>>>>
16283>>>>>>>>>    Function ComBlendingFactors Returns Variant
16285>>>>>>>>>        Variant retVal
16285>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_VARIANT to retVal
16286>>>>>>>>>        Function_Return retVal
16287>>>>>>>>>    End_Function
16288>>>>>>>>>
16288>>>>>>>>>    Procedure Set ComBlendingFactors Variant value
16290>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_VARIANT to value
16291>>>>>>>>>    End_Procedure
16292>>>>>>>>>
16292>>>>>>>>>    Function ComBlendingPositions Returns Variant
16294>>>>>>>>>        Variant retVal
16294>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_VARIANT to retVal
16295>>>>>>>>>        Function_Return retVal
16296>>>>>>>>>    End_Function
16297>>>>>>>>>
16297>>>>>>>>>    Procedure Set ComBlendingPositions Variant value
16299>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_VARIANT to value
16300>>>>>>>>>    End_Procedure
16301>>>>>>>>>
16301>>>>>>>>>    Function ComClipOwner Returns Boolean
16303>>>>>>>>>        Boolean retVal
16303>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
16304>>>>>>>>>        Function_Return retVal
16305>>>>>>>>>    End_Function
16306>>>>>>>>>
16306>>>>>>>>>    Procedure Set ComClipOwner Boolean value
16308>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
16309>>>>>>>>>    End_Procedure
16310>>>>>>>>>
16310>>>>>>>>>    Function ComOwner Returns OLE_HANDLE
16312>>>>>>>>>        Handle hDispatchDriver
16312>>>>>>>>>        OLE_HANDLE retVal
16312>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16313>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_I4 to retVal
16314>>>>>>>>>        Function_Return retVal
16315>>>>>>>>>    End_Function
16316>>>>>>>>>
16316>>>>>>>>>    Procedure ComFreezeUpdates Boolean llfreeze
16318>>>>>>>>>        Handle hDispatchDriver
16318>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16319>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16320>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llfreeze
16321>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 10 OLE_VT_VOID
16322>>>>>>>>>    End_Procedure
16323>>>>>>>>>
16323>>>>>>>>>    Procedure ComShow
16325>>>>>>>>>        Handle hDispatchDriver
16325>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16326>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
16327>>>>>>>>>    End_Procedure
16328>>>>>>>>>
16328>>>>>>>>>    Procedure ComHide
16330>>>>>>>>>        Handle hDispatchDriver
16330>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16331>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 12 OLE_VT_VOID
16332>>>>>>>>>    End_Procedure
16333>>>>>>>>>
16333>>>>>>>>>    Procedure ComUpdatePosition
16335>>>>>>>>>        Handle hDispatchDriver
16335>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16336>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
16337>>>>>>>>>    End_Procedure
16338>>>>>>>>>
16338>>>>>>>>>    Procedure ComSetBlendingOptions Variant llfactors Variant llpositions
16340>>>>>>>>>        Handle hDispatchDriver
16340>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16341>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16342>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llfactors
16343>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpositions
16344>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
16345>>>>>>>>>    End_Procedure
16346>>>>>>>>>End_Class
16347>>>>>>>>>
16347>>>>>>>>>// CoClass
16347>>>>>>>>>// CLSID: {C0DE2000-5B81-4C3C-A68E-3F0FF3771B6E}
16347>>>>>>>>>Class cCJFrameShadow is a cComAutomationObject
16348>>>>>>>>>    Import_Class_Protocol cCJIFrameShadow
16349>>>>>>>>>
16349>>>>>>>>>    Procedure Construct_Object
16351>>>>>>>>>        Forward Send Construct_Object
16353>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
16354>>>>>>>>>    End_Procedure
16355>>>>>>>>>End_Class
16356>>>>>>>>>
16356>>>>>>>>>// CLSID: {C0DE2000-F2DA-4617-AD07-FE7F08C16C0B}
16356>>>>>>>>>Class cCJIFrameShadows is a Mixin
16357>>>>>>>>>
16357>>>>>>>>>    Function Com_NewEnum Returns Variant
16359>>>>>>>>>        Handle hDispatchDriver
16359>>>>>>>>>        Variant retVal
16359>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16360>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
16361>>>>>>>>>        Function_Return retVal
16362>>>>>>>>>    End_Function
16363>>>>>>>>>End_Class
16364>>>>>>>>>
16364>>>>>>>>>// CoClass
16364>>>>>>>>>// CLSID: {C0DE2000-B4D6-492D-931A-9A39D207DE99}
16364>>>>>>>>>Class cCJFrameShadows is a cComAutomationObject
16365>>>>>>>>>    Import_Class_Protocol cCJIFrameShadows
16366>>>>>>>>>
16366>>>>>>>>>    Procedure Construct_Object
16368>>>>>>>>>        Forward Send Construct_Object
16370>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
16371>>>>>>>>>    End_Procedure
16372>>>>>>>>>End_Class
16373>>>>>>>>>
16373>>>>>>>>>// CLSID: {C0DE2000-9BF8-4337-959A-4629C9286C7A}
16373>>>>>>>>>Class cCJIFrameShadowManager is a Mixin
16374>>>>>>>>>
16374>>>>>>>>>    Function ComFlags Returns Integer
16376>>>>>>>>>        Integer retVal
16376>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
16377>>>>>>>>>        Function_Return retVal
16378>>>>>>>>>    End_Function
16379>>>>>>>>>
16379>>>>>>>>>    Procedure Set ComFlags Integer value
16381>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
16382>>>>>>>>>    End_Procedure
16383>>>>>>>>>
16383>>>>>>>>>    Function ComDefaultOuterSize Returns Integer
16385>>>>>>>>>        Integer retVal
16385>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
16386>>>>>>>>>        Function_Return retVal
16387>>>>>>>>>    End_Function
16388>>>>>>>>>
16388>>>>>>>>>    Procedure Set ComDefaultOuterSize Integer value
16390>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
16391>>>>>>>>>    End_Procedure
16392>>>>>>>>>
16392>>>>>>>>>    Function ComDefaultInnerSize Returns Integer
16394>>>>>>>>>        Integer retVal
16394>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
16395>>>>>>>>>        Function_Return retVal
16396>>>>>>>>>    End_Function
16397>>>>>>>>>
16397>>>>>>>>>    Procedure Set ComDefaultInnerSize Integer value
16399>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
16400>>>>>>>>>    End_Procedure
16401>>>>>>>>>
16401>>>>>>>>>    Function ComDefaultOffsetX Returns OLE_XSIZE_PIXELS
16403>>>>>>>>>        OLE_XSIZE_PIXELS retVal
16403>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
16404>>>>>>>>>        Function_Return retVal
16405>>>>>>>>>    End_Function
16406>>>>>>>>>
16406>>>>>>>>>    Procedure Set ComDefaultOffsetX OLE_XSIZE_PIXELS value
16408>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
16409>>>>>>>>>    End_Procedure
16410>>>>>>>>>
16410>>>>>>>>>    Function ComDefaultOffsetY Returns OLE_YSIZE_PIXELS
16412>>>>>>>>>        OLE_YSIZE_PIXELS retVal
16412>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
16413>>>>>>>>>        Function_Return retVal
16414>>>>>>>>>    End_Function
16415>>>>>>>>>
16415>>>>>>>>>    Procedure Set ComDefaultOffsetY OLE_YSIZE_PIXELS value
16417>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
16418>>>>>>>>>    End_Procedure
16419>>>>>>>>>
16419>>>>>>>>>    Function ComDefaultColor Returns OLE_COLOR
16421>>>>>>>>>        OLE_COLOR retVal
16421>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
16422>>>>>>>>>        Function_Return retVal
16423>>>>>>>>>    End_Function
16424>>>>>>>>>
16424>>>>>>>>>    Procedure Set ComDefaultColor OLE_COLOR value
16426>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
16427>>>>>>>>>    End_Procedure
16428>>>>>>>>>
16428>>>>>>>>>    Function ComDefaultTransparency Returns Short
16430>>>>>>>>>        Short retVal
16430>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I2 to retVal
16431>>>>>>>>>        Function_Return retVal
16432>>>>>>>>>    End_Function
16433>>>>>>>>>
16433>>>>>>>>>    Procedure Set ComDefaultTransparency Short value
16435>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I2 to value
16436>>>>>>>>>    End_Procedure
16437>>>>>>>>>
16437>>>>>>>>>    Function ComDefaultClipOwner Returns Boolean
16439>>>>>>>>>        Boolean retVal
16439>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
16440>>>>>>>>>        Function_Return retVal
16441>>>>>>>>>    End_Function
16442>>>>>>>>>
16442>>>>>>>>>    Procedure Set ComDefaultClipOwner Boolean value
16444>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
16445>>>>>>>>>    End_Procedure
16446>>>>>>>>>
16446>>>>>>>>>    Function ComDefaultBlendingFactors Returns Variant
16448>>>>>>>>>        Handle hDispatchDriver
16448>>>>>>>>>        Variant retVal
16448>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16449>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_VARIANT to retVal
16450>>>>>>>>>        Function_Return retVal
16451>>>>>>>>>    End_Function
16452>>>>>>>>>
16452>>>>>>>>>    Function ComDefaultBlendingPositions Returns Variant
16454>>>>>>>>>        Handle hDispatchDriver
16454>>>>>>>>>        Variant retVal
16454>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16455>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_VARIANT to retVal
16456>>>>>>>>>        Function_Return retVal
16457>>>>>>>>>    End_Function
16458>>>>>>>>>
16458>>>>>>>>>    Function ComIsShadowSupported Returns Boolean
16460>>>>>>>>>        Handle hDispatchDriver
16460>>>>>>>>>        Boolean retVal
16460>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16461>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_BOOL to retVal
16462>>>>>>>>>        Function_Return retVal
16463>>>>>>>>>    End_Function
16464>>>>>>>>>
16464>>>>>>>>>    Function ComEnableShadow OLE_HANDLE llhWnd OLE_COLOR llColor Integer llOuterSize Integer llInnerSize Integer llxOffset Integer llyOffset Short llTransparency Returns Variant
16466>>>>>>>>>        Handle hDispatchDriver
16466>>>>>>>>>        Variant retVal
16466>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16467>>>>>>>>>        Send PrepareParams to hDispatchDriver 7
16468>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16469>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
16470>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llOuterSize
16471>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llInnerSize
16472>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llxOffset
16473>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llyOffset
16474>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llTransparency
16475>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
16476>>>>>>>>>        Function_Return retVal
16477>>>>>>>>>    End_Function
16478>>>>>>>>>
16478>>>>>>>>>    Procedure ComDisableShadow OLE_HANDLE llhWnd
16480>>>>>>>>>        Handle hDispatchDriver
16480>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16481>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16482>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16483>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 12 OLE_VT_VOID
16484>>>>>>>>>    End_Procedure
16485>>>>>>>>>
16485>>>>>>>>>    Function ComIsShadowEnabled OLE_HANDLE llhWnd Returns Boolean
16487>>>>>>>>>        Handle hDispatchDriver
16487>>>>>>>>>        Boolean retVal
16487>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16488>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16489>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16490>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
16491>>>>>>>>>        Function_Return retVal
16492>>>>>>>>>    End_Function
16493>>>>>>>>>
16493>>>>>>>>>    Function ComGetShadow OLE_HANDLE llhWnd Returns Variant
16495>>>>>>>>>        Handle hDispatchDriver
16495>>>>>>>>>        Variant retVal
16495>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16496>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16497>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16498>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
16499>>>>>>>>>        Function_Return retVal
16500>>>>>>>>>    End_Function
16501>>>>>>>>>
16501>>>>>>>>>    Procedure ComFreezeUpdates Boolean llfreeze
16503>>>>>>>>>        Handle hDispatchDriver
16503>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16504>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16505>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llfreeze
16506>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
16507>>>>>>>>>    End_Procedure
16508>>>>>>>>>
16508>>>>>>>>>    Procedure ComSetGlobalOuterSize Integer llsize
16510>>>>>>>>>        Handle hDispatchDriver
16510>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16511>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16512>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llsize
16513>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
16514>>>>>>>>>    End_Procedure
16515>>>>>>>>>
16515>>>>>>>>>    Procedure ComSetGlobalInnerSize Integer llsize
16517>>>>>>>>>        Handle hDispatchDriver
16517>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16518>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16519>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llsize
16520>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
16521>>>>>>>>>    End_Procedure
16522>>>>>>>>>
16522>>>>>>>>>    Procedure ComSetGlobalOffset OLE_XSIZE_PIXELS llOffsetX OLE_YSIZE_PIXELS llOffsetY
16524>>>>>>>>>        Handle hDispatchDriver
16524>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16525>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16526>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llOffsetX
16527>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llOffsetY
16528>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
16529>>>>>>>>>    End_Procedure
16530>>>>>>>>>
16530>>>>>>>>>    Procedure ComSetGlobalColor OLE_COLOR llColor
16532>>>>>>>>>        Handle hDispatchDriver
16532>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16533>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16534>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
16535>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 19 OLE_VT_VOID
16536>>>>>>>>>    End_Procedure
16537>>>>>>>>>
16537>>>>>>>>>    Procedure ComSetGlobalTransparency Short llTransparency
16539>>>>>>>>>        Handle hDispatchDriver
16539>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16540>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16541>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llTransparency
16542>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
16543>>>>>>>>>    End_Procedure
16544>>>>>>>>>
16544>>>>>>>>>    Procedure ComSetDefaultBlendingOptions Variant llfactors Variant llpositions
16546>>>>>>>>>        Handle hDispatchDriver
16546>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16547>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16548>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llfactors
16549>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpositions
16550>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
16551>>>>>>>>>    End_Procedure
16552>>>>>>>>>
16552>>>>>>>>>    Procedure ComSetGlobalBlendingOptions Variant llfactors Variant llpositions
16554>>>>>>>>>        Handle hDispatchDriver
16554>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16555>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16556>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llfactors
16557>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpositions
16558>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
16559>>>>>>>>>    End_Procedure
16560>>>>>>>>>
16560>>>>>>>>>    Procedure ComSetGlobalClipOwner Boolean llclip
16562>>>>>>>>>        Handle hDispatchDriver
16562>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16563>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16564>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llclip
16565>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
16566>>>>>>>>>    End_Procedure
16567>>>>>>>>>
16567>>>>>>>>>    Function ComFrameShadows Returns Variant
16569>>>>>>>>>        Handle hDispatchDriver
16569>>>>>>>>>        Variant retVal
16569>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16570>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 23 OLE_VT_DISPATCH to retVal
16571>>>>>>>>>        Function_Return retVal
16572>>>>>>>>>    End_Function
16573>>>>>>>>>End_Class
16574>>>>>>>>>
16574>>>>>>>>>// CoClass
16574>>>>>>>>>// CLSID: {C0DE2000-DDA7-45FD-8AE8-B1A88391344D}
16574>>>>>>>>>Class cCJFrameShadowManager is a cComAutomationObject
16575>>>>>>>>>    Import_Class_Protocol cCJIFrameShadowManager
16576>>>>>>>>>
16576>>>>>>>>>    Procedure Construct_Object
16578>>>>>>>>>        Forward Send Construct_Object
16580>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
16581>>>>>>>>>    End_Procedure
16582>>>>>>>>>End_Class
16583>>>>>>>>>
16583>>>>>>>>>// CLSID: {C0DE2000-B997-432B-AB4F-439341A769E5}
16583>>>>>>>>>// Dispatch interface for CommandBars Control
16583>>>>>>>>>Class cCJ_DCommandBars is a Mixin
16584>>>>>>>>>
16584>>>>>>>>>    Function ComVisualTheme Returns XTPVisualTheme
16586>>>>>>>>>        XTPVisualTheme retVal
16586>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
16587>>>>>>>>>        Function_Return retVal
16588>>>>>>>>>    End_Function
16589>>>>>>>>>
16589>>>>>>>>>    Procedure Set ComVisualTheme XTPVisualTheme value
16591>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
16592>>>>>>>>>    End_Procedure
16593>>>>>>>>>
16593>>>>>>>>>    Function ComIcons Returns Variant
16595>>>>>>>>>        Variant retVal
16595>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
16596>>>>>>>>>        Function_Return retVal
16597>>>>>>>>>    End_Function
16598>>>>>>>>>
16598>>>>>>>>>    Procedure Set ComIcons Variant value
16600>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
16601>>>>>>>>>    End_Procedure
16602>>>>>>>>>
16602>>>>>>>>>    Function ComScaleMode Returns XTPScaleMode
16604>>>>>>>>>        XTPScaleMode retVal
16604>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
16605>>>>>>>>>        Function_Return retVal
16606>>>>>>>>>    End_Function
16607>>>>>>>>>
16607>>>>>>>>>    Procedure Set ComScaleMode XTPScaleMode value
16609>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
16610>>>>>>>>>    End_Procedure
16611>>>>>>>>>
16611>>>>>>>>>    Function ComRightToLeft Returns Boolean
16613>>>>>>>>>        Boolean retVal
16613>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to retVal
16614>>>>>>>>>        Function_Return retVal
16615>>>>>>>>>    End_Function
16616>>>>>>>>>
16616>>>>>>>>>    Procedure Set ComRightToLeft Boolean value
16618>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to value
16619>>>>>>>>>    End_Procedure
16620>>>>>>>>>
16620>>>>>>>>>    Function ComIsAllCaps Returns Boolean
16622>>>>>>>>>        Boolean retVal
16622>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_BOOL to retVal
16623>>>>>>>>>        Function_Return retVal
16624>>>>>>>>>    End_Function
16625>>>>>>>>>
16625>>>>>>>>>    Procedure Set ComIsAllCaps Boolean value
16627>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_BOOL to value
16628>>>>>>>>>    End_Procedure
16629>>>>>>>>>
16629>>>>>>>>>    Function ComIsAllowFrameTransparency Returns Boolean
16631>>>>>>>>>        Boolean retVal
16631>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_BOOL to retVal
16632>>>>>>>>>        Function_Return retVal
16633>>>>>>>>>    End_Function
16634>>>>>>>>>
16634>>>>>>>>>    Procedure Set ComIsAllowFrameTransparency Boolean value
16636>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_BOOL to value
16637>>>>>>>>>    End_Procedure
16638>>>>>>>>>
16638>>>>>>>>>    Function ComFontHeight Returns Integer
16640>>>>>>>>>        Integer retVal
16640>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 73 OLE_VT_I4 to retVal
16641>>>>>>>>>        Function_Return retVal
16642>>>>>>>>>    End_Function
16643>>>>>>>>>
16643>>>>>>>>>    Procedure Set ComFontHeight Integer value
16645>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 73 OLE_VT_I4 to value
16646>>>>>>>>>    End_Procedure
16647>>>>>>>>>
16647>>>>>>>>>    Function ComReCreateReparented Returns Boolean
16649>>>>>>>>>        Boolean retVal
16649>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
16650>>>>>>>>>        Function_Return retVal
16651>>>>>>>>>    End_Function
16652>>>>>>>>>
16652>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
16654>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
16655>>>>>>>>>    End_Procedure
16656>>>>>>>>>
16656>>>>>>>>>    Function ComCount Returns Integer
16658>>>>>>>>>        Handle hDispatchDriver
16658>>>>>>>>>        Integer retVal
16658>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16659>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
16660>>>>>>>>>        Function_Return retVal
16661>>>>>>>>>    End_Function
16662>>>>>>>>>
16662>>>>>>>>>    // Returns a specific item.
16662>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
16664>>>>>>>>>        Handle hDispatchDriver
16664>>>>>>>>>        Variant retVal
16664>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16665>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16666>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
16667>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
16668>>>>>>>>>        Function_Return retVal
16669>>>>>>>>>    End_Function
16670>>>>>>>>>
16670>>>>>>>>>    Function Com_NewEnum Returns Variant
16672>>>>>>>>>        Handle hDispatchDriver
16672>>>>>>>>>        Variant retVal
16672>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16673>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
16674>>>>>>>>>        Function_Return retVal
16675>>>>>>>>>    End_Function
16676>>>>>>>>>
16676>>>>>>>>>    Function ComAdd String llName XTPBarPosition llPosition Returns Variant
16678>>>>>>>>>        Handle hDispatchDriver
16678>>>>>>>>>        Variant retVal
16678>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16679>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16680>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
16681>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
16682>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
16683>>>>>>>>>        Function_Return retVal
16684>>>>>>>>>    End_Function
16685>>>>>>>>>
16685>>>>>>>>>    Procedure ComAddImageList Variant llImageList
16687>>>>>>>>>        Handle hDispatchDriver
16687>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16688>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16689>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llImageList
16690>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
16691>>>>>>>>>    End_Procedure
16692>>>>>>>>>
16692>>>>>>>>>    Function ComActiveMenuBar Returns Variant
16694>>>>>>>>>        Handle hDispatchDriver
16694>>>>>>>>>        Variant retVal
16694>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16695>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
16696>>>>>>>>>        Function_Return retVal
16697>>>>>>>>>    End_Function
16698>>>>>>>>>
16698>>>>>>>>>    Procedure ComGetClientRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
16700>>>>>>>>>        Handle hDispatchDriver
16700>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16701>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16702>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
16703>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
16704>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
16705>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
16706>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
16707>>>>>>>>>    End_Procedure
16708>>>>>>>>>
16708>>>>>>>>>    Procedure ComRecalcLayout
16710>>>>>>>>>        Handle hDispatchDriver
16710>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16711>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
16712>>>>>>>>>    End_Procedure
16713>>>>>>>>>
16713>>>>>>>>>    Function ComKeyBindings Returns Variant
16715>>>>>>>>>        Handle hDispatchDriver
16715>>>>>>>>>        Variant retVal
16715>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16716>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_DISPATCH to retVal
16717>>>>>>>>>        Function_Return retVal
16718>>>>>>>>>    End_Function
16719>>>>>>>>>
16719>>>>>>>>>    Procedure ComAddIconHandle Longptr llIcon Integer llCommand Integer llimageState Boolean llAlpha
16721>>>>>>>>>        Handle hDispatchDriver
16721>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16722>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16723>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llIcon
16724>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
16725>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
16726>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llAlpha
16727>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
16728>>>>>>>>>    End_Procedure
16729>>>>>>>>>
16729>>>>>>>>>    Function ComOptions Returns Variant
16731>>>>>>>>>        Handle hDispatchDriver
16731>>>>>>>>>        Variant retVal
16731>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16732>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
16733>>>>>>>>>        Function_Return retVal
16734>>>>>>>>>    End_Function
16735>>>>>>>>>
16735>>>>>>>>>    Procedure ComSaveCommandBars Variant llRegistryKey Variant llAppName Variant llSection
16737>>>>>>>>>        Handle hDispatchDriver
16737>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16738>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
16739>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRegistryKey
16740>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llAppName
16741>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSection
16742>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
16743>>>>>>>>>    End_Procedure
16744>>>>>>>>>
16744>>>>>>>>>    Procedure ComLoadCommandBars Variant llRegistryKey Variant llAppName Variant llSection
16746>>>>>>>>>        Handle hDispatchDriver
16746>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16747>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
16748>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRegistryKey
16749>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llAppName
16750>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSection
16751>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
16752>>>>>>>>>    End_Procedure
16753>>>>>>>>>
16753>>>>>>>>>    Procedure ComLoadDesignerBars Variant llFileNameOrResource Variant llInstance
16755>>>>>>>>>        Handle hDispatchDriver
16755>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16756>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16757>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFileNameOrResource
16758>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llInstance
16759>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
16760>>>>>>>>>    End_Procedure
16761>>>>>>>>>
16761>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
16763>>>>>>>>>        Handle hDispatchDriver
16763>>>>>>>>>        Variant retVal
16763>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16764>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16765>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
16766>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
16767>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
16768>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
16769>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
16770>>>>>>>>>        Function_Return retVal
16771>>>>>>>>>    End_Function
16772>>>>>>>>>
16772>>>>>>>>>    Procedure ComAboutBox
16774>>>>>>>>>        Handle hDispatchDriver
16774>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16775>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
16776>>>>>>>>>    End_Procedure
16777>>>>>>>>>
16777>>>>>>>>>    Procedure ComDockToolBar Variant llToolBar Integer llx Integer lly XTPBarPosition llPosition
16779>>>>>>>>>        Handle hDispatchDriver
16779>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16780>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16781>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llToolBar
16782>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
16783>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
16784>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
16785>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
16786>>>>>>>>>    End_Procedure
16787>>>>>>>>>
16787>>>>>>>>>    Function ComGetSpecialColor XTPColorManagerColor llIndex Returns OLE_COLOR
16789>>>>>>>>>        Handle hDispatchDriver
16789>>>>>>>>>        OLE_COLOR retVal
16789>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16790>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16791>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
16792>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 19 OLE_VT_I4 to retVal
16793>>>>>>>>>        Function_Return retVal
16794>>>>>>>>>    End_Function
16795>>>>>>>>>
16795>>>>>>>>>    Function ComShowTabWorkspace Boolean llShow Returns Variant
16797>>>>>>>>>        Handle hDispatchDriver
16797>>>>>>>>>        Variant retVal
16797>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16798>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16799>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShow
16800>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
16801>>>>>>>>>        Function_Return retVal
16802>>>>>>>>>    End_Function
16803>>>>>>>>>
16803>>>>>>>>>    Procedure ComMoveAlignedControl Variant llControl Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
16805>>>>>>>>>        Handle hDispatchDriver
16805>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16806>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
16807>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llControl
16808>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
16809>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
16810>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
16811>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
16812>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
16813>>>>>>>>>    End_Procedure
16814>>>>>>>>>
16814>>>>>>>>>    Function ComTabWorkspace Returns Variant
16816>>>>>>>>>        Handle hDispatchDriver
16816>>>>>>>>>        Variant retVal
16816>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16817>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 22 OLE_VT_DISPATCH to retVal
16818>>>>>>>>>        Function_Return retVal
16819>>>>>>>>>    End_Function
16820>>>>>>>>>
16820>>>>>>>>>    Procedure ComLoadStateFromString String llProfile Boolean llRestoreControls Boolean llRestoreOptions Boolean llSilent
16822>>>>>>>>>        Handle hDispatchDriver
16822>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16823>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16824>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
16825>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRestoreControls
16826>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRestoreOptions
16827>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSilent
16828>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
16829>>>>>>>>>    End_Procedure
16830>>>>>>>>>
16830>>>>>>>>>    Function ComSaveStateToString Boolean llSaveControls Boolean llSaveOnlyCustomized Boolean llSaveOptions Returns String
16832>>>>>>>>>        Handle hDispatchDriver
16832>>>>>>>>>        String retVal
16832>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16833>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
16834>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveControls
16835>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveOnlyCustomized
16836>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveOptions
16837>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 24 OLE_VT_BSTR to retVal
16838>>>>>>>>>        Function_Return retVal
16839>>>>>>>>>    End_Function
16840>>>>>>>>>
16840>>>>>>>>>    Function ComStatusBar Returns Variant
16842>>>>>>>>>        Handle hDispatchDriver
16842>>>>>>>>>        Variant retVal
16842>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16843>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 25 OLE_VT_DISPATCH to retVal
16844>>>>>>>>>        Function_Return retVal
16845>>>>>>>>>    End_Function
16846>>>>>>>>>
16846>>>>>>>>>    Function ComMessageBar Returns Variant
16848>>>>>>>>>        Handle hDispatchDriver
16848>>>>>>>>>        Variant retVal
16848>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16849>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 28 OLE_VT_DISPATCH to retVal
16850>>>>>>>>>        Function_Return retVal
16851>>>>>>>>>    End_Function
16852>>>>>>>>>
16852>>>>>>>>>    Procedure ComEnableCustomization Boolean llEnable
16854>>>>>>>>>        Handle hDispatchDriver
16854>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16855>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16856>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
16857>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 26 OLE_VT_VOID
16858>>>>>>>>>    End_Procedure
16859>>>>>>>>>
16859>>>>>>>>>    Function ComDesignerControls Returns Variant
16861>>>>>>>>>        Handle hDispatchDriver
16861>>>>>>>>>        Variant retVal
16861>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16862>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 27 OLE_VT_DISPATCH to retVal
16863>>>>>>>>>        Function_Return retVal
16864>>>>>>>>>    End_Function
16865>>>>>>>>>
16865>>>>>>>>>    Procedure ComEnableDefaultResetCustomizedToolbarChoice Boolean llEnable Boolean llDefaultYes
16867>>>>>>>>>        Handle hDispatchDriver
16867>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16868>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16869>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
16870>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llDefaultYes
16871>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 72 OLE_VT_VOID
16872>>>>>>>>>    End_Procedure
16873>>>>>>>>>
16873>>>>>>>>>    Function ComGetDispatch Returns Variant
16875>>>>>>>>>        Handle hDispatchDriver
16875>>>>>>>>>        Variant retVal
16875>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16876>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 31 OLE_VT_DISPATCH to retVal
16877>>>>>>>>>        Function_Return retVal
16878>>>>>>>>>    End_Function
16879>>>>>>>>>
16879>>>>>>>>>    Procedure ComSetMDIClient OLE_HANDLE llhWnd
16881>>>>>>>>>        Handle hDispatchDriver
16881>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16882>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16883>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16884>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
16885>>>>>>>>>    End_Procedure
16886>>>>>>>>>
16886>>>>>>>>>    Function ComGlobalSettings Returns Variant
16888>>>>>>>>>        Handle hDispatchDriver
16888>>>>>>>>>        Variant retVal
16888>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16889>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_DISPATCH to retVal
16890>>>>>>>>>        Function_Return retVal
16891>>>>>>>>>    End_Function
16892>>>>>>>>>
16892>>>>>>>>>    Procedure ComClosePopups
16894>>>>>>>>>        Handle hDispatchDriver
16894>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16895>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 34 OLE_VT_VOID
16896>>>>>>>>>    End_Procedure
16897>>>>>>>>>
16897>>>>>>>>>    Procedure ComSetSpecialColor XTPColorManagerColor llIndex OLE_COLOR llColor
16899>>>>>>>>>        Handle hDispatchDriver
16899>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16900>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16901>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
16902>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
16903>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
16904>>>>>>>>>    End_Procedure
16905>>>>>>>>>
16905>>>>>>>>>    Function ComAddDialogBar String llName XTPBarPosition llPosition Returns Variant
16907>>>>>>>>>        Handle hDispatchDriver
16907>>>>>>>>>        Variant retVal
16907>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16908>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16909>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
16910>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
16911>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 36 OLE_VT_DISPATCH to retVal
16912>>>>>>>>>        Function_Return retVal
16913>>>>>>>>>    End_Function
16914>>>>>>>>>
16914>>>>>>>>>    Procedure ComLoadStateFromXMLString String llProfile String llstate Variant llOptions
16916>>>>>>>>>        Handle hDispatchDriver
16916>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16917>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
16918>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
16919>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstate
16920>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
16921>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
16922>>>>>>>>>    End_Procedure
16923>>>>>>>>>
16923>>>>>>>>>    Function ComSaveStateToXMLString String llProfile Variant llOptions Returns String
16925>>>>>>>>>        Handle hDispatchDriver
16925>>>>>>>>>        String retVal
16925>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16926>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16927>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
16928>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
16929>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 38 OLE_VT_BSTR to retVal
16930>>>>>>>>>        Function_Return retVal
16931>>>>>>>>>    End_Function
16932>>>>>>>>>
16932>>>>>>>>>    Function ComCreateStateOptions Returns Variant
16934>>>>>>>>>        Handle hDispatchDriver
16934>>>>>>>>>        Variant retVal
16934>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16935>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 39 OLE_VT_DISPATCH to retVal
16936>>>>>>>>>        Function_Return retVal
16937>>>>>>>>>    End_Function
16938>>>>>>>>>
16938>>>>>>>>>    Procedure ComDoPropExchange Variant llpPX Variant llOptions
16940>>>>>>>>>        Handle hDispatchDriver
16940>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16941>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16942>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpPX
16943>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
16944>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 45 OLE_VT_VOID
16945>>>>>>>>>    End_Procedure
16946>>>>>>>>>
16946>>>>>>>>>    Function ComCustomizedControl Returns Variant
16948>>>>>>>>>        Handle hDispatchDriver
16948>>>>>>>>>        Variant retVal
16948>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16949>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_DISPATCH to retVal
16950>>>>>>>>>        Function_Return retVal
16951>>>>>>>>>    End_Function
16952>>>>>>>>>
16952>>>>>>>>>    // Deletes all of the toolbars
16952>>>>>>>>>    Procedure ComDeleteAll
16954>>>>>>>>>        Handle hDispatchDriver
16954>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16955>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 41 OLE_VT_VOID
16956>>>>>>>>>    End_Procedure
16957>>>>>>>>>
16957>>>>>>>>>    Function ComToolTipContext Returns Variant
16959>>>>>>>>>        Handle hDispatchDriver
16959>>>>>>>>>        Variant retVal
16959>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16960>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 42 OLE_VT_DISPATCH to retVal
16961>>>>>>>>>        Function_Return retVal
16962>>>>>>>>>    End_Function
16963>>>>>>>>>
16963>>>>>>>>>    Function ComTrackingMode Returns Boolean
16965>>>>>>>>>        Handle hDispatchDriver
16965>>>>>>>>>        Boolean retVal
16965>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16966>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_BOOL to retVal
16967>>>>>>>>>        Function_Return retVal
16968>>>>>>>>>    End_Function
16969>>>>>>>>>
16969>>>>>>>>>    Function ComFocusedCommandBar Returns Variant
16971>>>>>>>>>        Handle hDispatchDriver
16971>>>>>>>>>        Variant retVal
16971>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16972>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_DISPATCH to retVal
16973>>>>>>>>>        Function_Return retVal
16974>>>>>>>>>    End_Function
16975>>>>>>>>>
16975>>>>>>>>>    Function ComAddMenuBar String llName Returns Variant
16977>>>>>>>>>        Handle hDispatchDriver
16977>>>>>>>>>        Variant retVal
16977>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16978>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16979>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
16980>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 47 OLE_VT_DISPATCH to retVal
16981>>>>>>>>>        Function_Return retVal
16982>>>>>>>>>    End_Function
16983>>>>>>>>>
16983>>>>>>>>>    Function ComAddTabToolBar String llName Returns Variant
16985>>>>>>>>>        Handle hDispatchDriver
16985>>>>>>>>>        Variant retVal
16985>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16986>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16987>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
16988>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 48 OLE_VT_DISPATCH to retVal
16989>>>>>>>>>        Function_Return retVal
16990>>>>>>>>>    End_Function
16991>>>>>>>>>
16991>>>>>>>>>    Function ComAddRibbonBar String llName Returns Variant
16993>>>>>>>>>        Handle hDispatchDriver
16993>>>>>>>>>        Variant retVal
16993>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16994>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16995>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
16996>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 49 OLE_VT_DISPATCH to retVal
16997>>>>>>>>>        Function_Return retVal
16998>>>>>>>>>    End_Function
16999>>>>>>>>>
16999>>>>>>>>>    Procedure ComAttachToWindow OLE_HANDLE llhWnd
17001>>>>>>>>>        Handle hDispatchDriver
17001>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17002>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17003>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17004>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 50 OLE_VT_VOID
17005>>>>>>>>>    End_Procedure
17006>>>>>>>>>
17006>>>>>>>>>    Procedure ComShowCustomizeDialog Integer llActiveTab
17008>>>>>>>>>        Handle hDispatchDriver
17008>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17009>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17010>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llActiveTab
17011>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 51 OLE_VT_VOID
17012>>>>>>>>>    End_Procedure
17013>>>>>>>>>
17013>>>>>>>>>    Procedure ComEnableOffice2007Frame Boolean llEnable
17015>>>>>>>>>        Handle hDispatchDriver
17015>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17016>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17017>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
17018>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 52 OLE_VT_VOID
17019>>>>>>>>>    End_Procedure
17020>>>>>>>>>
17020>>>>>>>>>    Procedure ComEnableFrameTheme Boolean llEnable
17022>>>>>>>>>        Handle hDispatchDriver
17022>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17023>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17024>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
17025>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 90 OLE_VT_VOID
17026>>>>>>>>>    End_Procedure
17027>>>>>>>>>
17027>>>>>>>>>    Procedure ComEnableActions
17029>>>>>>>>>        Handle hDispatchDriver
17029>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17030>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 53 OLE_VT_VOID
17031>>>>>>>>>    End_Procedure
17032>>>>>>>>>
17032>>>>>>>>>    Function ComActions Returns Variant
17034>>>>>>>>>        Handle hDispatchDriver
17034>>>>>>>>>        Variant retVal
17034>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17035>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 54 OLE_VT_DISPATCH to retVal
17036>>>>>>>>>        Function_Return retVal
17037>>>>>>>>>    End_Function
17038>>>>>>>>>
17038>>>>>>>>>    Function ComPaintManager Returns Variant
17040>>>>>>>>>        Handle hDispatchDriver
17040>>>>>>>>>        Variant retVal
17040>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17041>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 55 OLE_VT_DISPATCH to retVal
17042>>>>>>>>>        Function_Return retVal
17043>>>>>>>>>    End_Function
17044>>>>>>>>>
17044>>>>>>>>>    Function ComCreateGalleryItems Integer llId Returns Variant
17046>>>>>>>>>        Handle hDispatchDriver
17046>>>>>>>>>        Variant retVal
17046>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17047>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17048>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17049>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 56 OLE_VT_DISPATCH to retVal
17050>>>>>>>>>        Function_Return retVal
17051>>>>>>>>>    End_Function
17052>>>>>>>>>
17052>>>>>>>>>    Procedure ComEnableOffice2007FrameHandle OLE_HANDLE llhWnd
17054>>>>>>>>>        Handle hDispatchDriver
17054>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17055>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17056>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17057>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 57 OLE_VT_VOID
17058>>>>>>>>>    End_Procedure
17059>>>>>>>>>
17059>>>>>>>>>    Procedure ComEnableFrameThemeHandle OLE_HANDLE llhWnd
17061>>>>>>>>>        Handle hDispatchDriver
17061>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17062>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17063>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17064>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 100 OLE_VT_VOID
17065>>>>>>>>>    End_Procedure
17066>>>>>>>>>
17066>>>>>>>>>    Function ComCreateCommandBarControl String llClassName Returns Variant
17068>>>>>>>>>        Handle hDispatchDriver
17068>>>>>>>>>        Variant retVal
17068>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17069>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17070>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
17071>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 58 OLE_VT_DISPATCH to retVal
17072>>>>>>>>>        Function_Return retVal
17073>>>>>>>>>    End_Function
17074>>>>>>>>>
17074>>>>>>>>>    Function ComCreateCommandBar String llClassName Returns Variant
17076>>>>>>>>>        Handle hDispatchDriver
17076>>>>>>>>>        Variant retVal
17076>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17077>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17078>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
17079>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 59 OLE_VT_DISPATCH to retVal
17080>>>>>>>>>        Function_Return retVal
17081>>>>>>>>>    End_Function
17082>>>>>>>>>
17082>>>>>>>>>    Function ComContextHelp Returns Integer
17084>>>>>>>>>        Handle hDispatchDriver
17084>>>>>>>>>        Integer retVal
17084>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17085>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 60 OLE_VT_I4 to retVal
17086>>>>>>>>>        Function_Return retVal
17087>>>>>>>>>    End_Function
17088>>>>>>>>>
17088>>>>>>>>>    Function ComContextMenus Returns Variant
17090>>>>>>>>>        Handle hDispatchDriver
17090>>>>>>>>>        Variant retVal
17090>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17091>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 61 OLE_VT_DISPATCH to retVal
17092>>>>>>>>>        Function_Return retVal
17093>>>>>>>>>    End_Function
17094>>>>>>>>>
17094>>>>>>>>>    Procedure ComOLEDrag
17096>>>>>>>>>        Handle hDispatchDriver
17096>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17097>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 62 OLE_VT_VOID
17098>>>>>>>>>    End_Procedure
17099>>>>>>>>>
17099>>>>>>>>>    Function ComAddMiniToolBar String llName Returns Variant
17101>>>>>>>>>        Handle hDispatchDriver
17101>>>>>>>>>        Variant retVal
17101>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17102>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17103>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
17104>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 63 OLE_VT_DISPATCH to retVal
17105>>>>>>>>>        Function_Return retVal
17106>>>>>>>>>    End_Function
17107>>>>>>>>>
17107>>>>>>>>>    Function ComRecentFileList Returns Variant
17109>>>>>>>>>        Handle hDispatchDriver
17109>>>>>>>>>        Variant retVal
17109>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17110>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 64 OLE_VT_DISPATCH to retVal
17111>>>>>>>>>        Function_Return retVal
17112>>>>>>>>>    End_Function
17113>>>>>>>>>
17113>>>>>>>>>    Procedure ComDisableOffice2007FrameHandle OLE_HANDLE llhWnd
17115>>>>>>>>>        Handle hDispatchDriver
17115>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17116>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17117>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17118>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 65 OLE_VT_VOID
17119>>>>>>>>>    End_Procedure
17120>>>>>>>>>
17120>>>>>>>>>    Procedure ComDisableFrameThemeHandle OLE_HANDLE llhWnd
17122>>>>>>>>>        Handle hDispatchDriver
17122>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17123>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17124>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17125>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 110 OLE_VT_VOID
17126>>>>>>>>>    End_Procedure
17127>>>>>>>>>
17127>>>>>>>>>    Procedure ComAddCustomBar Variant llCommandBar String llName XTPBarPosition llPosition
17129>>>>>>>>>        Handle hDispatchDriver
17129>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17130>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
17131>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llCommandBar
17132>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
17133>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
17134>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 66 OLE_VT_VOID
17135>>>>>>>>>    End_Procedure
17136>>>>>>>>>
17136>>>>>>>>>    Procedure ComEnableToolbarComposition Boolean llEnable
17138>>>>>>>>>        Handle hDispatchDriver
17138>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17139>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17140>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
17141>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 67 OLE_VT_VOID
17142>>>>>>>>>    End_Procedure
17143>>>>>>>>>
17143>>>>>>>>>    Procedure ComSetAllCaps Boolean llSetAllCaps
17145>>>>>>>>>        Handle hDispatchDriver
17145>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17146>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17147>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllCaps
17148>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 68 OLE_VT_VOID
17149>>>>>>>>>    End_Procedure
17150>>>>>>>>>
17150>>>>>>>>>    Procedure ComAllowFrameTransparency Boolean llSetAllowTransparency
17152>>>>>>>>>        Handle hDispatchDriver
17152>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17153>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17154>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllowTransparency
17155>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 70 OLE_VT_VOID
17156>>>>>>>>>    End_Procedure
17157>>>>>>>>>
17157>>>>>>>>>    Function ComSetOfficeSetBackImage XTPBackImage llBackImage Returns Boolean
17159>>>>>>>>>        Handle hDispatchDriver
17159>>>>>>>>>        Boolean retVal
17159>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17160>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17161>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBackImage
17162>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 80 OLE_VT_BOOL to retVal
17163>>>>>>>>>        Function_Return retVal
17164>>>>>>>>>    End_Function
17165>>>>>>>>>End_Class
17166>>>>>>>>>
17166>>>>>>>>>// CLSID: {C0DE2000-1D1A-4AFA-8DFF-8798A2181226}
17166>>>>>>>>>// Event interface for CommandBars Control
17166>>>>>>>>>Class cCJ_DCommandBarsEvents is a Mixin
17167>>>>>>>>>
17167>>>>>>>>>    Procedure OnComExecute Variant llControl
17169>>>>>>>>>    End_Procedure
17170>>>>>>>>>
17170>>>>>>>>>//    { MethodType=Event }
17170>>>>>>>>>//    Procedure OnComUpdate Variant llControl
17170>>>>>>>>>//    End_Procedure
17170>>>>>>>>>
17170>>>>>>>>>    Procedure OnComResize
17172>>>>>>>>>    End_Procedure
17173>>>>>>>>>
17173>>>>>>>>>    Procedure OnComGetClientBordersWidth Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
17175>>>>>>>>>    End_Procedure
17176>>>>>>>>>
17176>>>>>>>>>    Procedure OnComControlSelected Variant llControl
17178>>>>>>>>>    End_Procedure
17179>>>>>>>>>
17179>>>>>>>>>    Procedure OnComInitCommandsPopup Variant llCommandBar
17181>>>>>>>>>    End_Procedure
17182>>>>>>>>>
17182>>>>>>>>>    Procedure OnComResizeClient Integer llLeft Integer llTop Integer llRight Integer llBottom
17184>>>>>>>>>    End_Procedure
17185>>>>>>>>>
17185>>>>>>>>>    Procedure OnComSpecialColorChanged
17187>>>>>>>>>    End_Procedure
17188>>>>>>>>>
17188>>>>>>>>>    Procedure OnComRepositionAlignedControls Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
17190>>>>>>>>>    End_Procedure
17191>>>>>>>>>
17191>>>>>>>>>    Procedure OnComCustomization Variant llOptions
17193>>>>>>>>>    End_Procedure
17194>>>>>>>>>
17194>>>>>>>>>    Procedure OnComToolBarVisibleChanged Variant llToolBar
17196>>>>>>>>>    End_Procedure
17197>>>>>>>>>
17197>>>>>>>>>    Procedure OnComControlRButtonUp Variant llControl
17199>>>>>>>>>    End_Procedure
17200>>>>>>>>>
17200>>>>>>>>>    Procedure OnComCustomizationDone
17202>>>>>>>>>    End_Procedure
17203>>>>>>>>>
17203>>>>>>>>>    Procedure OnComCommandBarKeyDown Variant llCommandBar Integer ByRef llKeyCode Short llShift
17205>>>>>>>>>    End_Procedure
17206>>>>>>>>>
17206>>>>>>>>>    Procedure OnComToolBarContextMenu Variant llToolBar Variant llContextMenu
17208>>>>>>>>>    End_Procedure
17209>>>>>>>>>
17209>>>>>>>>>    Procedure OnComTrackingModeChanged Variant llCommandBar Boolean llMode
17211>>>>>>>>>    End_Procedure
17212>>>>>>>>>
17212>>>>>>>>>    Procedure OnComCustomizationResetToolBar Variant llToolBar
17214>>>>>>>>>    End_Procedure
17215>>>>>>>>>
17215>>>>>>>>>    Procedure OnComCustomizationAddToolBar Variant llToolBar
17217>>>>>>>>>    End_Procedure
17218>>>>>>>>>
17218>>>>>>>>>    Procedure OnComCustomizationDeleteToolBar Variant llToolBar
17220>>>>>>>>>    End_Procedure
17221>>>>>>>>>
17221>>>>>>>>>    Procedure OnComControlNotify Variant llControl Integer llCode Variant llNotifyData Variant llHandled
17223>>>>>>>>>    End_Procedure
17224>>>>>>>>>
17224>>>>>>>>>    Procedure OnComGetActiveDocumentID Integer ByRef llId
17226>>>>>>>>>    End_Procedure
17227>>>>>>>>>
17227>>>>>>>>>    Procedure OnComCustomizationResetAll
17229>>>>>>>>>    End_Procedure
17230>>>>>>>>>
17230>>>>>>>>>    Procedure OnComMessageBarClosed Variant llMessageBar
17232>>>>>>>>>    End_Procedure
17233>>>>>>>>>
17233>>>>>>>>>    Procedure OnComOLEStartDrag Variant llData Integer ByRef llAllowedEffects
17235>>>>>>>>>    End_Procedure
17236>>>>>>>>>
17236>>>>>>>>>    Procedure OnComOLECompleteDrag Integer ByRef llEffect
17238>>>>>>>>>    End_Procedure
17239>>>>>>>>>
17239>>>>>>>>>    Procedure OnComReCreated
17241>>>>>>>>>    End_Procedure
17242>>>>>>>>>
17242>>>>>>>>>    Procedure RegisterComEvents
17244>>>>>>>>>        Send RegisterComEvent 1 msg_OnComExecute
17245>>>>>>>>>//        Send RegisterComEvent 2 msg_OnComUpdate
17245>>>>>>>>>        Send RegisterComEvent 3 msg_OnComResize
17246>>>>>>>>>        Send RegisterComEvent 4 msg_OnComGetClientBordersWidth
17247>>>>>>>>>        Send RegisterComEvent 5 msg_OnComControlSelected
17248>>>>>>>>>        Send RegisterComEvent 6 msg_OnComInitCommandsPopup
17249>>>>>>>>>        Send RegisterComEvent 7 msg_OnComResizeClient
17250>>>>>>>>>        Send RegisterComEvent 8 msg_OnComSpecialColorChanged
17251>>>>>>>>>        Send RegisterComEvent 9 msg_OnComRepositionAlignedControls
17252>>>>>>>>>        Send RegisterComEvent 10 msg_OnComCustomization
17253>>>>>>>>>        Send RegisterComEvent 11 msg_OnComToolBarVisibleChanged
17254>>>>>>>>>        Send RegisterComEvent 12 msg_OnComControlRButtonUp
17255>>>>>>>>>        Send RegisterComEvent 13 msg_OnComCustomizationDone
17256>>>>>>>>>        Send RegisterComEvent -602 msg_OnComCommandBarKeyDown
17257>>>>>>>>>        Send RegisterComEvent 14 msg_OnComToolBarContextMenu
17258>>>>>>>>>        Send RegisterComEvent 15 msg_OnComTrackingModeChanged
17259>>>>>>>>>        Send RegisterComEvent 16 msg_OnComCustomizationResetToolBar
17260>>>>>>>>>        Send RegisterComEvent 17 msg_OnComCustomizationAddToolBar
17261>>>>>>>>>        Send RegisterComEvent 18 msg_OnComCustomizationDeleteToolBar
17262>>>>>>>>>        Send RegisterComEvent 19 msg_OnComControlNotify
17263>>>>>>>>>        Send RegisterComEvent 20 msg_OnComGetActiveDocumentID
17264>>>>>>>>>        Send RegisterComEvent 21 msg_OnComCustomizationResetAll
17265>>>>>>>>>        Send RegisterComEvent 22 msg_OnComMessageBarClosed
17266>>>>>>>>>        Send RegisterComEvent 303 msg_OnComOLEStartDrag
17267>>>>>>>>>        Send RegisterComEvent 304 msg_OnComOLECompleteDrag
17268>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
17269>>>>>>>>>    End_Procedure
17270>>>>>>>>>End_Class
17271>>>>>>>>>
17271>>>>>>>>>// CoClass
17271>>>>>>>>>// ProgID: Codejock.CommandBars.20.0.0
17271>>>>>>>>>// CLSID: {C0DE2000-1C4D-4DE8-BC4A-5240617D4930}
17271>>>>>>>>>// Xtreme CommandBars Control
17271>>>>>>>>>Class cCJCommandBars is a cComActiveXControl
17272>>>>>>>>>    Import_Class_Protocol cCJ_DCommandBars
17273>>>>>>>>>    Import_Class_Protocol cCJ_DCommandBarsEvents
17274>>>>>>>>>
17274>>>>>>>>>    Procedure Construct_Object
17276>>>>>>>>>        Forward Send Construct_Object
17278>>>>>>>>>        Set psProgID to "{C0DE2000-1C4D-4DE8-BC4A-5240617D4930}"
17279>>>>>>>>>        Set psEventId to "{C0DE2000-1D1A-4AFA-8DFF-8798A2181226}"
17280>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2021 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v20.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
17281>>>>>>>>>        Set peAutoCreate to acAutoCreate
17282>>>>>>>>>    End_Procedure
17283>>>>>>>>>End_Class
17284>>>>>>>>>
17284>>>>>>>>>// CLSID: {C0DE2000-D68C-4339-A284-4C7DB1FB2903}
17284>>>>>>>>>Class cCJIRibbonGroup is a Mixin
17285>>>>>>>>>
17285>>>>>>>>>    Function ComCaption Returns String
17287>>>>>>>>>        String retVal
17287>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BSTR to retVal
17288>>>>>>>>>        Function_Return retVal
17289>>>>>>>>>    End_Function
17290>>>>>>>>>
17290>>>>>>>>>    Procedure Set ComCaption String value
17292>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BSTR to value
17293>>>>>>>>>    End_Procedure
17294>>>>>>>>>
17294>>>>>>>>>    Function ComShowOptionButton Returns Boolean
17296>>>>>>>>>        Boolean retVal
17296>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
17297>>>>>>>>>        Function_Return retVal
17298>>>>>>>>>    End_Function
17299>>>>>>>>>
17299>>>>>>>>>    Procedure Set ComShowOptionButton Boolean value
17301>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
17302>>>>>>>>>    End_Procedure
17303>>>>>>>>>
17303>>>>>>>>>    Function ComId Returns Integer
17305>>>>>>>>>        Integer retVal
17305>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
17306>>>>>>>>>        Function_Return retVal
17307>>>>>>>>>    End_Function
17308>>>>>>>>>
17308>>>>>>>>>    Procedure Set ComId Integer value
17310>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
17311>>>>>>>>>    End_Procedure
17312>>>>>>>>>
17312>>>>>>>>>    Function ComIconId Returns Integer
17314>>>>>>>>>        Integer retVal
17314>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
17315>>>>>>>>>        Function_Return retVal
17316>>>>>>>>>    End_Function
17317>>>>>>>>>
17317>>>>>>>>>    Procedure Set ComIconId Integer value
17319>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
17320>>>>>>>>>    End_Procedure
17321>>>>>>>>>
17321>>>>>>>>>    Function ComVisible Returns Boolean
17323>>>>>>>>>        Boolean retVal
17323>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
17324>>>>>>>>>        Function_Return retVal
17325>>>>>>>>>    End_Function
17326>>>>>>>>>
17326>>>>>>>>>    Procedure Set ComVisible Boolean value
17328>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
17329>>>>>>>>>    End_Procedure
17330>>>>>>>>>
17330>>>>>>>>>    Function ComControlsGrouping Returns Boolean
17332>>>>>>>>>        Boolean retVal
17332>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
17333>>>>>>>>>        Function_Return retVal
17334>>>>>>>>>    End_Function
17335>>>>>>>>>
17335>>>>>>>>>    Procedure Set ComControlsGrouping Boolean value
17337>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
17338>>>>>>>>>    End_Procedure
17339>>>>>>>>>
17339>>>>>>>>>    Function ComControlsCentering Returns Boolean
17341>>>>>>>>>        Boolean retVal
17341>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
17342>>>>>>>>>        Function_Return retVal
17343>>>>>>>>>    End_Function
17344>>>>>>>>>
17344>>>>>>>>>    Procedure Set ComControlsCentering Boolean value
17346>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
17347>>>>>>>>>    End_Procedure
17348>>>>>>>>>
17348>>>>>>>>>    Function ComAllowReduce Returns Integer
17350>>>>>>>>>        Integer retVal
17350>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to retVal
17351>>>>>>>>>        Function_Return retVal
17352>>>>>>>>>    End_Function
17353>>>>>>>>>
17353>>>>>>>>>    Procedure Set ComAllowReduce Integer value
17355>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to value
17356>>>>>>>>>    End_Procedure
17357>>>>>>>>>
17357>>>>>>>>>    Function ComAutoArrangeEditCaption Returns Boolean
17359>>>>>>>>>        Boolean retVal
17359>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
17360>>>>>>>>>        Function_Return retVal
17361>>>>>>>>>    End_Function
17362>>>>>>>>>
17362>>>>>>>>>    Procedure Set ComAutoArrangeEditCaption Boolean value
17364>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
17365>>>>>>>>>    End_Procedure
17366>>>>>>>>>
17366>>>>>>>>>    Function ComRibbonBar Returns Variant
17368>>>>>>>>>        Handle hDispatchDriver
17368>>>>>>>>>        Variant retVal
17368>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17369>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
17370>>>>>>>>>        Function_Return retVal
17371>>>>>>>>>    End_Function
17372>>>>>>>>>
17372>>>>>>>>>    Function ComGroups Returns Variant
17374>>>>>>>>>        Handle hDispatchDriver
17374>>>>>>>>>        Variant retVal
17374>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17375>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_DISPATCH to retVal
17376>>>>>>>>>        Function_Return retVal
17377>>>>>>>>>    End_Function
17378>>>>>>>>>
17378>>>>>>>>>    // Gets the number of controls in the collection.
17378>>>>>>>>>    Function ComCount Returns Integer
17380>>>>>>>>>        Handle hDispatchDriver
17380>>>>>>>>>        Integer retVal
17380>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17381>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
17382>>>>>>>>>        Function_Return retVal
17383>>>>>>>>>    End_Function
17384>>>>>>>>>
17384>>>>>>>>>    // Gets an item from the collection by its index.
17384>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
17386>>>>>>>>>        Handle hDispatchDriver
17386>>>>>>>>>        Variant retVal
17386>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17387>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17388>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
17389>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
17390>>>>>>>>>        Function_Return retVal
17391>>>>>>>>>    End_Function
17392>>>>>>>>>
17392>>>>>>>>>    Function Com_NewEnum Returns Variant
17394>>>>>>>>>        Handle hDispatchDriver
17394>>>>>>>>>        Variant retVal
17394>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17395>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
17396>>>>>>>>>        Function_Return retVal
17397>>>>>>>>>    End_Function
17398>>>>>>>>>
17398>>>>>>>>>    // Adds a new command bar control to the collection.
17398>>>>>>>>>    Function ComAdd XTPControlType llType Integer llId String llCaption Variant llBefore Variant llTemporary Returns Variant
17400>>>>>>>>>        Handle hDispatchDriver
17400>>>>>>>>>        Variant retVal
17400>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17401>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
17402>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llType
17403>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17404>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
17405>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
17406>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llTemporary
17407>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
17408>>>>>>>>>        Function_Return retVal
17409>>>>>>>>>    End_Function
17410>>>>>>>>>
17410>>>>>>>>>    // Deletes all of the command bar controls from the collection
17410>>>>>>>>>    Procedure ComDeleteAll
17412>>>>>>>>>        Handle hDispatchDriver
17412>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17413>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
17414>>>>>>>>>    End_Procedure
17415>>>>>>>>>
17415>>>>>>>>>    Procedure ComDeleteAt Integer llIndex
17417>>>>>>>>>        Handle hDispatchDriver
17417>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17418>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17419>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
17420>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
17421>>>>>>>>>    End_Procedure
17422>>>>>>>>>
17422>>>>>>>>>    Function ComControlGroupPopup Returns Variant
17424>>>>>>>>>        Handle hDispatchDriver
17424>>>>>>>>>        Variant retVal
17424>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17425>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_DISPATCH to retVal
17426>>>>>>>>>        Function_Return retVal
17427>>>>>>>>>    End_Function
17428>>>>>>>>>
17428>>>>>>>>>    Function ComControlGroupOption Returns Variant
17430>>>>>>>>>        Handle hDispatchDriver
17430>>>>>>>>>        Variant retVal
17430>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17431>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_DISPATCH to retVal
17432>>>>>>>>>        Function_Return retVal
17433>>>>>>>>>    End_Function
17434>>>>>>>>>
17434>>>>>>>>>    Function ComIndex Returns Integer
17436>>>>>>>>>        Handle hDispatchDriver
17436>>>>>>>>>        Integer retVal
17436>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17437>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_I4 to retVal
17438>>>>>>>>>        Function_Return retVal
17439>>>>>>>>>    End_Function
17440>>>>>>>>>
17440>>>>>>>>>    Procedure ComAddControl Variant llControl Variant llBefore
17442>>>>>>>>>        Handle hDispatchDriver
17442>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17443>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
17444>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llControl
17445>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
17446>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 108 OLE_VT_VOID
17447>>>>>>>>>    End_Procedure
17448>>>>>>>>>
17448>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
17450>>>>>>>>>        Handle hDispatchDriver
17450>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17451>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
17452>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
17453>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
17454>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
17455>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
17456>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 110 OLE_VT_VOID
17457>>>>>>>>>    End_Procedure
17458>>>>>>>>>End_Class
17459>>>>>>>>>
17459>>>>>>>>>// CoClass
17459>>>>>>>>>// CLSID: {C0DE2000-73F4-4849-A08C-8A64228AA2E3}
17459>>>>>>>>>Class cCJRibbonGroup is a cComAutomationObject
17460>>>>>>>>>    Import_Class_Protocol cCJIRibbonGroup
17461>>>>>>>>>
17461>>>>>>>>>    Procedure Construct_Object
17463>>>>>>>>>        Forward Send Construct_Object
17465>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17466>>>>>>>>>    End_Procedure
17467>>>>>>>>>End_Class
17468>>>>>>>>>
17468>>>>>>>>>// CLSID: {C0DE2000-D3DB-49F4-AC22-14AA249772CB}
17468>>>>>>>>>Class cCJICustomizeOptions is a Mixin
17469>>>>>>>>>
17469>>>>>>>>>    Function ComShowKeyboardPage Returns Boolean
17471>>>>>>>>>        Boolean retVal
17471>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
17472>>>>>>>>>        Function_Return retVal
17473>>>>>>>>>    End_Function
17474>>>>>>>>>
17474>>>>>>>>>    Procedure Set ComShowKeyboardPage Boolean value
17476>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
17477>>>>>>>>>    End_Procedure
17478>>>>>>>>>
17478>>>>>>>>>    Function ComShowOptionsPage Returns Boolean
17480>>>>>>>>>        Boolean retVal
17480>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to retVal
17481>>>>>>>>>        Function_Return retVal
17482>>>>>>>>>    End_Function
17483>>>>>>>>>
17483>>>>>>>>>    Procedure Set ComShowOptionsPage Boolean value
17485>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to value
17486>>>>>>>>>    End_Procedure
17487>>>>>>>>>
17487>>>>>>>>>    Function ComShowRibbonQuickAccessPage Returns Boolean
17489>>>>>>>>>        Boolean retVal
17489>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
17490>>>>>>>>>        Function_Return retVal
17491>>>>>>>>>    End_Function
17492>>>>>>>>>
17492>>>>>>>>>    Procedure Set ComShowRibbonQuickAccessPage Boolean value
17494>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
17495>>>>>>>>>    End_Procedure
17496>>>>>>>>>
17496>>>>>>>>>    Function ComShowMenusPage Returns Boolean
17498>>>>>>>>>        Boolean retVal
17498>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
17499>>>>>>>>>        Function_Return retVal
17500>>>>>>>>>    End_Function
17501>>>>>>>>>
17501>>>>>>>>>    Procedure Set ComShowMenusPage Boolean value
17503>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
17504>>>>>>>>>    End_Procedure
17505>>>>>>>>>
17505>>>>>>>>>    Function ComShowToolbarsPage Returns Boolean
17507>>>>>>>>>        Boolean retVal
17507>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
17508>>>>>>>>>        Function_Return retVal
17509>>>>>>>>>    End_Function
17510>>>>>>>>>
17510>>>>>>>>>    Procedure Set ComShowToolbarsPage Boolean value
17512>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
17513>>>>>>>>>    End_Procedure
17514>>>>>>>>>
17514>>>>>>>>>    Function ComShowCommandsPage Returns Boolean
17516>>>>>>>>>        Boolean retVal
17516>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
17517>>>>>>>>>        Function_Return retVal
17518>>>>>>>>>    End_Function
17519>>>>>>>>>
17519>>>>>>>>>    Procedure Set ComShowCommandsPage Boolean value
17521>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
17522>>>>>>>>>    End_Procedure
17523>>>>>>>>>
17523>>>>>>>>>    Function ComAllowNewToolbars Returns Boolean
17525>>>>>>>>>        Boolean retVal
17525>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
17526>>>>>>>>>        Function_Return retVal
17527>>>>>>>>>    End_Function
17528>>>>>>>>>
17528>>>>>>>>>    Procedure Set ComAllowNewToolbars Boolean value
17530>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
17531>>>>>>>>>    End_Procedure
17532>>>>>>>>>
17532>>>>>>>>>    Function ComResizableSheet Returns Boolean
17534>>>>>>>>>        Boolean retVal
17534>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
17535>>>>>>>>>        Function_Return retVal
17536>>>>>>>>>    End_Function
17537>>>>>>>>>
17537>>>>>>>>>    Procedure Set ComResizableSheet Boolean value
17539>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
17540>>>>>>>>>    End_Procedure
17541>>>>>>>>>
17541>>>>>>>>>    Function ComShowRibbonCustomizePage Returns Boolean
17543>>>>>>>>>        Boolean retVal
17543>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
17544>>>>>>>>>        Function_Return retVal
17545>>>>>>>>>    End_Function
17546>>>>>>>>>
17546>>>>>>>>>    Procedure Set ComShowRibbonCustomizePage Boolean value
17548>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
17549>>>>>>>>>    End_Procedure
17550>>>>>>>>>
17550>>>>>>>>>    Function ComShowListNavigation Returns Boolean
17552>>>>>>>>>        Boolean retVal
17552>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
17553>>>>>>>>>        Function_Return retVal
17554>>>>>>>>>    End_Function
17555>>>>>>>>>
17555>>>>>>>>>    Procedure Set ComShowListNavigation Boolean value
17557>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
17558>>>>>>>>>    End_Procedure
17559>>>>>>>>>
17559>>>>>>>>>    Function ComCustomIcons Returns Variant
17561>>>>>>>>>        Handle hDispatchDriver
17561>>>>>>>>>        Variant retVal
17561>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17562>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_DISPATCH to retVal
17563>>>>>>>>>        Function_Return retVal
17564>>>>>>>>>    End_Function
17565>>>>>>>>>
17565>>>>>>>>>    Function ComContextMenu Returns Variant
17567>>>>>>>>>        Handle hDispatchDriver
17567>>>>>>>>>        Variant retVal
17567>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17568>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
17569>>>>>>>>>        Function_Return retVal
17570>>>>>>>>>    End_Function
17571>>>>>>>>>
17571>>>>>>>>>    Procedure ComAddPage Integer llnIndex OLE_HANDLE llhWnd String llCaption
17573>>>>>>>>>        Handle hDispatchDriver
17573>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17574>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
17575>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIndex
17576>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17577>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
17578>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
17579>>>>>>>>>    End_Procedure
17580>>>>>>>>>End_Class
17581>>>>>>>>>
17581>>>>>>>>>// CoClass
17581>>>>>>>>>// CLSID: {C0DE2000-FD32-4169-88A0-04275EAF79C5}
17581>>>>>>>>>Class cCJCustomizeOptions is a cComAutomationObject
17582>>>>>>>>>    Import_Class_Protocol cCJICustomizeOptions
17583>>>>>>>>>
17583>>>>>>>>>    Procedure Construct_Object
17585>>>>>>>>>        Forward Send Construct_Object
17587>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17588>>>>>>>>>    End_Procedure
17589>>>>>>>>>End_Class
17590>>>>>>>>>
17590>>>>>>>>>// CLSID: {C0DE2000-AA66-4C26-8B79-FF0DD9DF0E68}
17590>>>>>>>>>Class cCJIStateOptions is a Mixin
17591>>>>>>>>>
17591>>>>>>>>>    Function ComSerializeControls Returns Boolean
17593>>>>>>>>>        Boolean retVal
17593>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
17594>>>>>>>>>        Function_Return retVal
17595>>>>>>>>>    End_Function
17596>>>>>>>>>
17596>>>>>>>>>    Procedure Set ComSerializeControls Boolean value
17598>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
17599>>>>>>>>>    End_Procedure
17600>>>>>>>>>
17600>>>>>>>>>    Function ComSaveOnlyCustomized Returns Boolean
17602>>>>>>>>>        Boolean retVal
17602>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to retVal
17603>>>>>>>>>        Function_Return retVal
17604>>>>>>>>>    End_Function
17605>>>>>>>>>
17605>>>>>>>>>    Procedure Set ComSaveOnlyCustomized Boolean value
17607>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to value
17608>>>>>>>>>    End_Procedure
17609>>>>>>>>>
17609>>>>>>>>>    Function ComLoadSilent Returns Boolean
17611>>>>>>>>>        Boolean retVal
17611>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
17612>>>>>>>>>        Function_Return retVal
17613>>>>>>>>>    End_Function
17614>>>>>>>>>
17614>>>>>>>>>    Procedure Set ComLoadSilent Boolean value
17616>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
17617>>>>>>>>>    End_Procedure
17618>>>>>>>>>
17618>>>>>>>>>    Function ComSaveOriginalControls Returns Boolean
17620>>>>>>>>>        Boolean retVal
17620>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
17621>>>>>>>>>        Function_Return retVal
17622>>>>>>>>>    End_Function
17623>>>>>>>>>
17623>>>>>>>>>    Procedure Set ComSaveOriginalControls Boolean value
17625>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
17626>>>>>>>>>    End_Procedure
17627>>>>>>>>>
17627>>>>>>>>>    Function ComSerializeOptions Returns Boolean
17629>>>>>>>>>        Boolean retVal
17629>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
17630>>>>>>>>>        Function_Return retVal
17631>>>>>>>>>    End_Function
17632>>>>>>>>>
17632>>>>>>>>>    Procedure Set ComSerializeOptions Boolean value
17634>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
17635>>>>>>>>>    End_Procedure
17636>>>>>>>>>
17636>>>>>>>>>    Function ComSerializeImages Returns Boolean
17638>>>>>>>>>        Boolean retVal
17638>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
17639>>>>>>>>>        Function_Return retVal
17640>>>>>>>>>    End_Function
17641>>>>>>>>>
17641>>>>>>>>>    Procedure Set ComSerializeImages Boolean value
17643>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
17644>>>>>>>>>    End_Procedure
17645>>>>>>>>>
17645>>>>>>>>>    Function ComSerializeLayout Returns Boolean
17647>>>>>>>>>        Boolean retVal
17647>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
17648>>>>>>>>>        Function_Return retVal
17649>>>>>>>>>    End_Function
17650>>>>>>>>>
17650>>>>>>>>>    Procedure Set ComSerializeLayout Boolean value
17652>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
17653>>>>>>>>>    End_Procedure
17654>>>>>>>>>
17654>>>>>>>>>    Function ComSerializeDesignerControls Returns Boolean
17656>>>>>>>>>        Boolean retVal
17656>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
17657>>>>>>>>>        Function_Return retVal
17658>>>>>>>>>    End_Function
17659>>>>>>>>>
17659>>>>>>>>>    Procedure Set ComSerializeDesignerControls Boolean value
17661>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
17662>>>>>>>>>    End_Procedure
17663>>>>>>>>>
17663>>>>>>>>>    Function ComSerializeActions Returns Boolean
17665>>>>>>>>>        Boolean retVal
17665>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
17666>>>>>>>>>        Function_Return retVal
17667>>>>>>>>>    End_Function
17668>>>>>>>>>
17668>>>>>>>>>    Procedure Set ComSerializeActions Boolean value
17670>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
17671>>>>>>>>>    End_Procedure
17672>>>>>>>>>End_Class
17673>>>>>>>>>
17673>>>>>>>>>// CoClass
17673>>>>>>>>>// CLSID: {C0DE2000-A205-49F6-975D-F02D82C565D1}
17673>>>>>>>>>Class cCJStateOptions is a cComAutomationObject
17674>>>>>>>>>    Import_Class_Protocol cCJIStateOptions
17675>>>>>>>>>
17675>>>>>>>>>    Procedure Construct_Object
17677>>>>>>>>>        Forward Send Construct_Object
17679>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17680>>>>>>>>>    End_Procedure
17681>>>>>>>>>End_Class
17682>>>>>>>>>
17682>>>>>>>>>// CLSID: {C0DE2000-DFBD-4175-90D5-D84AB2790950}
17682>>>>>>>>>Class cCJICommandBarAction is a Mixin
17683>>>>>>>>>
17683>>>>>>>>>    Function ComCaption Returns String
17685>>>>>>>>>        String retVal
17685>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
17686>>>>>>>>>        Function_Return retVal
17687>>>>>>>>>    End_Function
17688>>>>>>>>>
17688>>>>>>>>>    Procedure Set ComCaption String value
17690>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
17691>>>>>>>>>    End_Procedure
17692>>>>>>>>>
17692>>>>>>>>>    Function ComDescriptionText Returns String
17694>>>>>>>>>        String retVal
17694>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
17695>>>>>>>>>        Function_Return retVal
17696>>>>>>>>>    End_Function
17697>>>>>>>>>
17697>>>>>>>>>    Procedure Set ComDescriptionText String value
17699>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
17700>>>>>>>>>    End_Procedure
17701>>>>>>>>>
17701>>>>>>>>>    Function ComId Returns Integer
17703>>>>>>>>>        Integer retVal
17703>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
17704>>>>>>>>>        Function_Return retVal
17705>>>>>>>>>    End_Function
17706>>>>>>>>>
17706>>>>>>>>>    Procedure Set ComId Integer value
17708>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
17709>>>>>>>>>    End_Procedure
17710>>>>>>>>>
17710>>>>>>>>>    Function ComShortcutText Returns String
17712>>>>>>>>>        String retVal
17712>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
17713>>>>>>>>>        Function_Return retVal
17714>>>>>>>>>    End_Function
17715>>>>>>>>>
17715>>>>>>>>>    Procedure Set ComShortcutText String value
17717>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
17718>>>>>>>>>    End_Procedure
17719>>>>>>>>>
17719>>>>>>>>>    Function ComTooltipText Returns String
17721>>>>>>>>>        String retVal
17721>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
17722>>>>>>>>>        Function_Return retVal
17723>>>>>>>>>    End_Function
17724>>>>>>>>>
17724>>>>>>>>>    Procedure Set ComTooltipText String value
17726>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
17727>>>>>>>>>    End_Procedure
17728>>>>>>>>>
17728>>>>>>>>>    Function ComVisible Returns Boolean
17730>>>>>>>>>        Boolean retVal
17730>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
17731>>>>>>>>>        Function_Return retVal
17732>>>>>>>>>    End_Function
17733>>>>>>>>>
17733>>>>>>>>>    Procedure Set ComVisible Boolean value
17735>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
17736>>>>>>>>>    End_Procedure
17737>>>>>>>>>
17737>>>>>>>>>    Function ComEnabled Returns Boolean
17739>>>>>>>>>        Boolean retVal
17739>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
17740>>>>>>>>>        Function_Return retVal
17741>>>>>>>>>    End_Function
17742>>>>>>>>>
17742>>>>>>>>>    Procedure Set ComEnabled Boolean value
17744>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
17745>>>>>>>>>    End_Procedure
17746>>>>>>>>>
17746>>>>>>>>>    Function ComChecked Returns Boolean
17748>>>>>>>>>        Boolean retVal
17748>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
17749>>>>>>>>>        Function_Return retVal
17750>>>>>>>>>    End_Function
17751>>>>>>>>>
17751>>>>>>>>>    Procedure Set ComChecked Boolean value
17753>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
17754>>>>>>>>>    End_Procedure
17755>>>>>>>>>
17755>>>>>>>>>    Function ComIconId Returns Integer
17757>>>>>>>>>        Integer retVal
17757>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
17758>>>>>>>>>        Function_Return retVal
17759>>>>>>>>>    End_Function
17760>>>>>>>>>
17760>>>>>>>>>    Procedure Set ComIconId Integer value
17762>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
17763>>>>>>>>>    End_Procedure
17764>>>>>>>>>
17764>>>>>>>>>    Function ComCategory Returns String
17766>>>>>>>>>        String retVal
17766>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
17767>>>>>>>>>        Function_Return retVal
17768>>>>>>>>>    End_Function
17769>>>>>>>>>
17769>>>>>>>>>    Procedure Set ComCategory String value
17771>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
17772>>>>>>>>>    End_Procedure
17773>>>>>>>>>
17773>>>>>>>>>    Function ComTag Returns Variant
17775>>>>>>>>>        Variant retVal
17775>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_VARIANT to retVal
17776>>>>>>>>>        Function_Return retVal
17777>>>>>>>>>    End_Function
17778>>>>>>>>>
17778>>>>>>>>>    Procedure Set ComTag Variant value
17780>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_VARIANT to value
17781>>>>>>>>>    End_Procedure
17782>>>>>>>>>
17782>>>>>>>>>    Function ComEditHint Returns String
17784>>>>>>>>>        String retVal
17784>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 55 OLE_VT_BSTR to retVal
17785>>>>>>>>>        Function_Return retVal
17786>>>>>>>>>    End_Function
17787>>>>>>>>>
17787>>>>>>>>>    Procedure Set ComEditHint String value
17789>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 55 OLE_VT_BSTR to value
17790>>>>>>>>>    End_Procedure
17791>>>>>>>>>
17791>>>>>>>>>    Function ComKeyboardTip Returns String
17793>>>>>>>>>        String retVal
17793>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 56 OLE_VT_BSTR to retVal
17794>>>>>>>>>        Function_Return retVal
17795>>>>>>>>>    End_Function
17796>>>>>>>>>
17796>>>>>>>>>    Procedure Set ComKeyboardTip String value
17798>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 56 OLE_VT_BSTR to value
17799>>>>>>>>>    End_Procedure
17800>>>>>>>>>
17800>>>>>>>>>    Function ComKey Returns String
17802>>>>>>>>>        String retVal
17802>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 57 OLE_VT_BSTR to retVal
17803>>>>>>>>>        Function_Return retVal
17804>>>>>>>>>    End_Function
17805>>>>>>>>>
17805>>>>>>>>>    Procedure Set ComKey String value
17807>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 57 OLE_VT_BSTR to value
17808>>>>>>>>>    End_Procedure
17809>>>>>>>>>
17809>>>>>>>>>    Function ComCustomShortcutText Returns String
17811>>>>>>>>>        String retVal
17811>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 58 OLE_VT_BSTR to retVal
17812>>>>>>>>>        Function_Return retVal
17813>>>>>>>>>    End_Function
17814>>>>>>>>>
17814>>>>>>>>>    Procedure Set ComCustomShortcutText String value
17816>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 58 OLE_VT_BSTR to value
17817>>>>>>>>>    End_Procedure
17818>>>>>>>>>End_Class
17819>>>>>>>>>
17819>>>>>>>>>// CoClass
17819>>>>>>>>>// CLSID: {C0DE2000-61DB-4DC7-86B4-61B534FE96BA}
17819>>>>>>>>>Class cCJCommandBarAction is a cComAutomationObject
17820>>>>>>>>>    Import_Class_Protocol cCJICommandBarAction
17821>>>>>>>>>
17821>>>>>>>>>    Procedure Construct_Object
17823>>>>>>>>>        Forward Send Construct_Object
17825>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17826>>>>>>>>>    End_Procedure
17827>>>>>>>>>End_Class
17828>>>>>>>>>
17828>>>>>>>>>// CLSID: {C0DE2000-092D-462D-9934-277EAB35A27D}
17828>>>>>>>>>Class cCJICommandBarActions is a Mixin
17829>>>>>>>>>
17829>>>>>>>>>    // Gets the number of controls in the collection.
17829>>>>>>>>>    Function ComCount Returns Integer
17831>>>>>>>>>        Handle hDispatchDriver
17831>>>>>>>>>        Integer retVal
17831>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17832>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
17833>>>>>>>>>        Function_Return retVal
17834>>>>>>>>>    End_Function
17835>>>>>>>>>
17835>>>>>>>>>    // Gets an item from the collection by its index.
17835>>>>>>>>>    Function ComAction Integer llId Returns Variant
17837>>>>>>>>>        Handle hDispatchDriver
17837>>>>>>>>>        Variant retVal
17837>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17838>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17839>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17840>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
17841>>>>>>>>>        Function_Return retVal
17842>>>>>>>>>    End_Function
17843>>>>>>>>>
17843>>>>>>>>>    Function Com_NewEnum Returns Variant
17845>>>>>>>>>        Handle hDispatchDriver
17845>>>>>>>>>        Variant retVal
17845>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17846>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
17847>>>>>>>>>        Function_Return retVal
17848>>>>>>>>>    End_Function
17849>>>>>>>>>
17849>>>>>>>>>    // Adds a new command bar control to the collection.
17849>>>>>>>>>    Function ComAdd Integer llId String llCaption String llTooltipText String llDescriptionText String llCategory Returns Variant
17851>>>>>>>>>        Handle hDispatchDriver
17851>>>>>>>>>        Variant retVal
17851>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17852>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
17853>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17854>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
17855>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTooltipText
17856>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llDescriptionText
17857>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCategory
17858>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
17859>>>>>>>>>        Function_Return retVal
17860>>>>>>>>>    End_Function
17861>>>>>>>>>
17861>>>>>>>>>    Procedure ComDeleteAll
17863>>>>>>>>>        Handle hDispatchDriver
17863>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17864>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
17865>>>>>>>>>    End_Procedure
17866>>>>>>>>>
17866>>>>>>>>>    Procedure ComDelete Integer llId
17868>>>>>>>>>        Handle hDispatchDriver
17868>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17869>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17870>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17871>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
17872>>>>>>>>>    End_Procedure
17873>>>>>>>>>End_Class
17874>>>>>>>>>
17874>>>>>>>>>// CoClass
17874>>>>>>>>>// CLSID: {C0DE2000-3543-4D3E-88F9-4F8822200142}
17874>>>>>>>>>Class cCJCommandBarActions is a cComAutomationObject
17875>>>>>>>>>    Import_Class_Protocol cCJICommandBarActions
17876>>>>>>>>>
17876>>>>>>>>>    Procedure Construct_Object
17878>>>>>>>>>        Forward Send Construct_Object
17880>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17881>>>>>>>>>    End_Procedure
17882>>>>>>>>>End_Class
17883>>>>>>>>>
17883>>>>>>>>>// CLSID: {C0DE2000-9E07-4079-924A-4CB1C11FC700}
17883>>>>>>>>>Class cCJICommandBarControl is a Mixin
17884>>>>>>>>>
17884>>>>>>>>>    Function ComChecked Returns Boolean
17886>>>>>>>>>        Boolean retVal
17886>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
17887>>>>>>>>>        Function_Return retVal
17888>>>>>>>>>    End_Function
17889>>>>>>>>>
17889>>>>>>>>>    Procedure Set ComChecked Boolean value
17891>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
17892>>>>>>>>>    End_Procedure
17893>>>>>>>>>
17893>>>>>>>>>    Function ComBeginGroup Returns Boolean
17895>>>>>>>>>        Boolean retVal
17895>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
17896>>>>>>>>>        Function_Return retVal
17897>>>>>>>>>    End_Function
17898>>>>>>>>>
17898>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
17900>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
17901>>>>>>>>>    End_Procedure
17902>>>>>>>>>
17902>>>>>>>>>    Function ComCaption Returns String
17904>>>>>>>>>        String retVal
17904>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
17905>>>>>>>>>        Function_Return retVal
17906>>>>>>>>>    End_Function
17907>>>>>>>>>
17907>>>>>>>>>    Procedure Set ComCaption String value
17909>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
17910>>>>>>>>>    End_Procedure
17911>>>>>>>>>
17911>>>>>>>>>    Function ComDescriptionText Returns String
17913>>>>>>>>>        String retVal
17913>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
17914>>>>>>>>>        Function_Return retVal
17915>>>>>>>>>    End_Function
17916>>>>>>>>>
17916>>>>>>>>>    Procedure Set ComDescriptionText String value
17918>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
17919>>>>>>>>>    End_Procedure
17920>>>>>>>>>
17920>>>>>>>>>    Function ComId Returns Integer
17922>>>>>>>>>        Integer retVal
17922>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
17923>>>>>>>>>        Function_Return retVal
17924>>>>>>>>>    End_Function
17925>>>>>>>>>
17925>>>>>>>>>    Procedure Set ComId Integer value
17927>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
17928>>>>>>>>>    End_Procedure
17929>>>>>>>>>
17929>>>>>>>>>    Function ComParameter Returns String
17931>>>>>>>>>        String retVal
17931>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
17932>>>>>>>>>        Function_Return retVal
17933>>>>>>>>>    End_Function
17934>>>>>>>>>
17934>>>>>>>>>    Procedure Set ComParameter String value
17936>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
17937>>>>>>>>>    End_Procedure
17938>>>>>>>>>
17938>>>>>>>>>    Function ComShortcutText Returns String
17940>>>>>>>>>        String retVal
17940>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
17941>>>>>>>>>        Function_Return retVal
17942>>>>>>>>>    End_Function
17943>>>>>>>>>
17943>>>>>>>>>    Procedure Set ComShortcutText String value
17945>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
17946>>>>>>>>>    End_Procedure
17947>>>>>>>>>
17947>>>>>>>>>    Function ComCustomShortcutText Returns String
17949>>>>>>>>>        String retVal
17949>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
17950>>>>>>>>>        Function_Return retVal
17951>>>>>>>>>    End_Function
17952>>>>>>>>>
17952>>>>>>>>>    Procedure Set ComCustomShortcutText String value
17954>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
17955>>>>>>>>>    End_Procedure
17956>>>>>>>>>
17956>>>>>>>>>    Function ComTooltipText Returns String
17958>>>>>>>>>        String retVal
17958>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
17959>>>>>>>>>        Function_Return retVal
17960>>>>>>>>>    End_Function
17961>>>>>>>>>
17961>>>>>>>>>    Procedure Set ComTooltipText String value
17963>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
17964>>>>>>>>>    End_Procedure
17965>>>>>>>>>
17965>>>>>>>>>    Function ComVisible Returns Boolean
17967>>>>>>>>>        Boolean retVal
17967>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
17968>>>>>>>>>        Function_Return retVal
17969>>>>>>>>>    End_Function
17970>>>>>>>>>
17970>>>>>>>>>    Procedure Set ComVisible Boolean value
17972>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
17973>>>>>>>>>    End_Procedure
17974>>>>>>>>>
17974>>>>>>>>>    Function ComEnabled Returns Boolean
17976>>>>>>>>>        Boolean retVal
17976>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
17977>>>>>>>>>        Function_Return retVal
17978>>>>>>>>>    End_Function
17979>>>>>>>>>
17979>>>>>>>>>    Procedure Set ComEnabled Boolean value
17981>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
17982>>>>>>>>>    End_Procedure
17983>>>>>>>>>
17983>>>>>>>>>    Function ComIconId Returns Integer
17985>>>>>>>>>        Integer retVal
17985>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
17986>>>>>>>>>        Function_Return retVal
17987>>>>>>>>>    End_Function
17988>>>>>>>>>
17988>>>>>>>>>    Procedure Set ComIconId Integer value
17990>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
17991>>>>>>>>>    End_Procedure
17992>>>>>>>>>
17992>>>>>>>>>    Function ComDefaultItem Returns Boolean
17994>>>>>>>>>        Boolean retVal
17994>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
17995>>>>>>>>>        Function_Return retVal
17996>>>>>>>>>    End_Function
17997>>>>>>>>>
17997>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
17999>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
18000>>>>>>>>>    End_Procedure
18001>>>>>>>>>
18001>>>>>>>>>    Function ComFlags Returns XTPControlFlags
18003>>>>>>>>>        XTPControlFlags retVal
18003>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
18004>>>>>>>>>        Function_Return retVal
18005>>>>>>>>>    End_Function
18006>>>>>>>>>
18006>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
18008>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
18009>>>>>>>>>    End_Procedure
18010>>>>>>>>>
18010>>>>>>>>>    Function ComCategory Returns String
18012>>>>>>>>>        String retVal
18012>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
18013>>>>>>>>>        Function_Return retVal
18014>>>>>>>>>    End_Function
18015>>>>>>>>>
18015>>>>>>>>>    Procedure Set ComCategory String value
18017>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
18018>>>>>>>>>    End_Procedure
18019>>>>>>>>>
18019>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
18021>>>>>>>>>        XTPControlHideFlags retVal
18021>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
18022>>>>>>>>>        Function_Return retVal
18023>>>>>>>>>    End_Function
18024>>>>>>>>>
18024>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
18026>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
18027>>>>>>>>>    End_Procedure
18028>>>>>>>>>
18028>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
18030>>>>>>>>>        Boolean retVal
18030>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
18031>>>>>>>>>        Function_Return retVal
18032>>>>>>>>>    End_Function
18033>>>>>>>>>
18033>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
18035>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
18036>>>>>>>>>    End_Procedure
18037>>>>>>>>>
18037>>>>>>>>>    Function ComAction Returns Variant
18039>>>>>>>>>        Variant retVal
18039>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
18040>>>>>>>>>        Function_Return retVal
18041>>>>>>>>>    End_Function
18042>>>>>>>>>
18042>>>>>>>>>    Procedure Set ComAction Variant value
18044>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
18045>>>>>>>>>    End_Procedure
18046>>>>>>>>>
18046>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
18048>>>>>>>>>        Integer retVal
18048>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
18049>>>>>>>>>        Function_Return retVal
18050>>>>>>>>>    End_Function
18051>>>>>>>>>
18051>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
18053>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
18054>>>>>>>>>    End_Procedure
18055>>>>>>>>>
18055>>>>>>>>>    Function ComWidth Returns Integer
18057>>>>>>>>>        Integer retVal
18057>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
18058>>>>>>>>>        Function_Return retVal
18059>>>>>>>>>    End_Function
18060>>>>>>>>>
18060>>>>>>>>>    Procedure Set ComWidth Integer value
18062>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
18063>>>>>>>>>    End_Procedure
18064>>>>>>>>>
18064>>>>>>>>>    Function ComHeight Returns Integer
18066>>>>>>>>>        Integer retVal
18066>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
18067>>>>>>>>>        Function_Return retVal
18068>>>>>>>>>    End_Function
18069>>>>>>>>>
18069>>>>>>>>>    Procedure Set ComHeight Integer value
18071>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
18072>>>>>>>>>    End_Procedure
18073>>>>>>>>>
18073>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
18075>>>>>>>>>        XTPButtonStyle retVal
18075>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
18076>>>>>>>>>        Function_Return retVal
18077>>>>>>>>>    End_Function
18078>>>>>>>>>
18078>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
18080>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
18081>>>>>>>>>    End_Procedure
18082>>>>>>>>>
18082>>>>>>>>>    Function ComKeyboardTip Returns String
18084>>>>>>>>>        String retVal
18084>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
18085>>>>>>>>>        Function_Return retVal
18086>>>>>>>>>    End_Function
18087>>>>>>>>>
18087>>>>>>>>>    Procedure Set ComKeyboardTip String value
18089>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
18090>>>>>>>>>    End_Procedure
18091>>>>>>>>>
18091>>>>>>>>>    Function ComControls Returns Variant
18093>>>>>>>>>        Handle hDispatchDriver
18093>>>>>>>>>        Variant retVal
18093>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18094>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
18095>>>>>>>>>        Function_Return retVal
18096>>>>>>>>>    End_Function
18097>>>>>>>>>
18097>>>>>>>>>    Function ComParent Returns Variant
18099>>>>>>>>>        Handle hDispatchDriver
18099>>>>>>>>>        Variant retVal
18099>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18100>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
18101>>>>>>>>>        Function_Return retVal
18102>>>>>>>>>    End_Function
18103>>>>>>>>>
18103>>>>>>>>>    Function ComIndex Returns Integer
18105>>>>>>>>>        Handle hDispatchDriver
18105>>>>>>>>>        Integer retVal
18105>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18106>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
18107>>>>>>>>>        Function_Return retVal
18108>>>>>>>>>    End_Function
18109>>>>>>>>>
18109>>>>>>>>>    Function ComType Returns XTPControlType
18111>>>>>>>>>        Handle hDispatchDriver
18111>>>>>>>>>        XTPControlType retVal
18111>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18112>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
18113>>>>>>>>>        Function_Return retVal
18114>>>>>>>>>    End_Function
18115>>>>>>>>>
18115>>>>>>>>>    Procedure ComDelete
18117>>>>>>>>>        Handle hDispatchDriver
18117>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18118>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
18119>>>>>>>>>    End_Procedure
18120>>>>>>>>>
18120>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
18122>>>>>>>>>        Handle hDispatchDriver
18122>>>>>>>>>        Variant retVal
18122>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18123>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18124>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
18125>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
18126>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
18127>>>>>>>>>        Function_Return retVal
18128>>>>>>>>>    End_Function
18129>>>>>>>>>
18129>>>>>>>>>    Procedure ComSetFocus
18131>>>>>>>>>        Handle hDispatchDriver
18131>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18132>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
18133>>>>>>>>>    End_Procedure
18134>>>>>>>>>
18134>>>>>>>>>    Procedure ComExecute
18136>>>>>>>>>        Handle hDispatchDriver
18136>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18137>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
18138>>>>>>>>>    End_Procedure
18139>>>>>>>>>
18139>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
18141>>>>>>>>>        Handle hDispatchDriver
18141>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18142>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
18143>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
18144>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
18145>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
18146>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
18147>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
18148>>>>>>>>>    End_Procedure
18149>>>>>>>>>
18149>>>>>>>>>    Function ComRibbonGroup Returns Variant
18151>>>>>>>>>        Handle hDispatchDriver
18151>>>>>>>>>        Variant retVal
18151>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18152>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
18153>>>>>>>>>        Function_Return retVal
18154>>>>>>>>>    End_Function
18155>>>>>>>>>
18155>>>>>>>>>    Procedure ComReset
18157>>>>>>>>>        Handle hDispatchDriver
18157>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18158>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
18159>>>>>>>>>    End_Procedure
18160>>>>>>>>>
18160>>>>>>>>>    Function ComTop Returns Integer
18162>>>>>>>>>        Handle hDispatchDriver
18162>>>>>>>>>        Integer retVal
18162>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18163>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
18164>>>>>>>>>        Function_Return retVal
18165>>>>>>>>>    End_Function
18166>>>>>>>>>
18166>>>>>>>>>    Function ComLeft Returns Integer
18168>>>>>>>>>        Handle hDispatchDriver
18168>>>>>>>>>        Integer retVal
18168>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18169>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
18170>>>>>>>>>        Function_Return retVal
18171>>>>>>>>>    End_Function
18172>>>>>>>>>
18172>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
18174>>>>>>>>>        Handle hDispatchDriver
18174>>>>>>>>>        Variant retVal
18174>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18175>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
18176>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
18177>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
18178>>>>>>>>>        Function_Return retVal
18179>>>>>>>>>    End_Function
18180>>>>>>>>>
18180>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
18182>>>>>>>>>        Handle hDispatchDriver
18182>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18183>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18184>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
18185>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
18186>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
18187>>>>>>>>>    End_Procedure
18188>>>>>>>>>
18188>>>>>>>>>    Function ComCommandBar Returns Variant
18190>>>>>>>>>        Handle hDispatchDriver
18190>>>>>>>>>        Variant retVal
18190>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18191>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 50 OLE_VT_DISPATCH to retVal
18192>>>>>>>>>        Function_Return retVal
18193>>>>>>>>>    End_Function
18194>>>>>>>>>End_Class
18195>>>>>>>>>
18195>>>>>>>>>// CoClass
18195>>>>>>>>>// CLSID: {C0DE2000-C60A-4893-B9E5-CD2EABBCBFF7}
18195>>>>>>>>>Class cCJCommandBarControl is a cComAutomationObject
18196>>>>>>>>>    Import_Class_Protocol cCJICommandBarControl
18197>>>>>>>>>
18197>>>>>>>>>    Procedure Construct_Object
18199>>>>>>>>>        Forward Send Construct_Object
18201>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
18202>>>>>>>>>    End_Procedure
18203>>>>>>>>>End_Class
18204>>>>>>>>>
18204>>>>>>>>>// CLSID: {C0DE2000-1E0F-446D-B92B-BEDBEF77302F}
18204>>>>>>>>>Class cCJICommandBarButton is a Mixin
18205>>>>>>>>>
18205>>>>>>>>>    Function ComChecked Returns Boolean
18207>>>>>>>>>        Boolean retVal
18207>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
18208>>>>>>>>>        Function_Return retVal
18209>>>>>>>>>    End_Function
18210>>>>>>>>>
18210>>>>>>>>>    Procedure Set ComChecked Boolean value
18212>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
18213>>>>>>>>>    End_Procedure
18214>>>>>>>>>
18214>>>>>>>>>    Function ComBeginGroup Returns Boolean
18216>>>>>>>>>        Boolean retVal
18216>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
18217>>>>>>>>>        Function_Return retVal
18218>>>>>>>>>    End_Function
18219>>>>>>>>>
18219>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
18221>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
18222>>>>>>>>>    End_Procedure
18223>>>>>>>>>
18223>>>>>>>>>    Function ComCaption Returns String
18225>>>>>>>>>        String retVal
18225>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
18226>>>>>>>>>        Function_Return retVal
18227>>>>>>>>>    End_Function
18228>>>>>>>>>
18228>>>>>>>>>    Procedure Set ComCaption String value
18230>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
18231>>>>>>>>>    End_Procedure
18232>>>>>>>>>
18232>>>>>>>>>    Function ComDescriptionText Returns String
18234>>>>>>>>>        String retVal
18234>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
18235>>>>>>>>>        Function_Return retVal
18236>>>>>>>>>    End_Function
18237>>>>>>>>>
18237>>>>>>>>>    Procedure Set ComDescriptionText String value
18239>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
18240>>>>>>>>>    End_Procedure
18241>>>>>>>>>
18241>>>>>>>>>    Function ComId Returns Integer
18243>>>>>>>>>        Integer retVal
18243>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
18244>>>>>>>>>        Function_Return retVal
18245>>>>>>>>>    End_Function
18246>>>>>>>>>
18246>>>>>>>>>    Procedure Set ComId Integer value
18248>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
18249>>>>>>>>>    End_Procedure
18250>>>>>>>>>
18250>>>>>>>>>    Function ComParameter Returns String
18252>>>>>>>>>        String retVal
18252>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
18253>>>>>>>>>        Function_Return retVal
18254>>>>>>>>>    End_Function
18255>>>>>>>>>
18255>>>>>>>>>    Procedure Set ComParameter String value
18257>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
18258>>>>>>>>>    End_Procedure
18259>>>>>>>>>
18259>>>>>>>>>    Function ComShortcutText Returns String
18261>>>>>>>>>        String retVal
18261>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
18262>>>>>>>>>        Function_Return retVal
18263>>>>>>>>>    End_Function
18264>>>>>>>>>
18264>>>>>>>>>    Procedure Set ComShortcutText String value
18266>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
18267>>>>>>>>>    End_Procedure
18268>>>>>>>>>
18268>>>>>>>>>    Function ComCustomShortcutText Returns String
18270>>>>>>>>>        String retVal
18270>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
18271>>>>>>>>>        Function_Return retVal
18272>>>>>>>>>    End_Function
18273>>>>>>>>>
18273>>>>>>>>>    Procedure Set ComCustomShortcutText String value
18275>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
18276>>>>>>>>>    End_Procedure
18277>>>>>>>>>
18277>>>>>>>>>    Function ComTooltipText Returns String
18279>>>>>>>>>        String retVal
18279>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
18280>>>>>>>>>        Function_Return retVal
18281>>>>>>>>>    End_Function
18282>>>>>>>>>
18282>>>>>>>>>    Procedure Set ComTooltipText String value
18284>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
18285>>>>>>>>>    End_Procedure
18286>>>>>>>>>
18286>>>>>>>>>    Function ComVisible Returns Boolean
18288>>>>>>>>>        Boolean retVal
18288>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
18289>>>>>>>>>        Function_Return retVal
18290>>>>>>>>>    End_Function
18291>>>>>>>>>
18291>>>>>>>>>    Procedure Set ComVisible Boolean value
18293>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
18294>>>>>>>>>    End_Procedure
18295>>>>>>>>>
18295>>>>>>>>>    Function ComEnabled Returns Boolean
18297>>>>>>>>>        Boolean retVal
18297>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
18298>>>>>>>>>        Function_Return retVal
18299>>>>>>>>>    End_Function
18300>>>>>>>>>
18300>>>>>>>>>    Procedure Set ComEnabled Boolean value
18302>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
18303>>>>>>>>>    End_Procedure
18304>>>>>>>>>
18304>>>>>>>>>    Function ComIconId Returns Integer
18306>>>>>>>>>        Integer retVal
18306>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
18307>>>>>>>>>        Function_Return retVal
18308>>>>>>>>>    End_Function
18309>>>>>>>>>
18309>>>>>>>>>    Procedure Set ComIconId Integer value
18311>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
18312>>>>>>>>>    End_Procedure
18313>>>>>>>>>
18313>>>>>>>>>    Function ComDefaultItem Returns Boolean
18315>>>>>>>>>        Boolean retVal
18315>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
18316>>>>>>>>>        Function_Return retVal
18317>>>>>>>>>    End_Function
18318>>>>>>>>>
18318>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
18320>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
18321>>>>>>>>>    End_Procedure
18322>>>>>>>>>
18322>>>>>>>>>    Function ComFlags Returns XTPControlFlags
18324>>>>>>>>>        XTPControlFlags retVal
18324>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
18325>>>>>>>>>        Function_Return retVal
18326>>>>>>>>>    End_Function
18327>>>>>>>>>
18327>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
18329>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
18330>>>>>>>>>    End_Procedure
18331>>>>>>>>>
18331>>>>>>>>>    Function ComCategory Returns String
18333>>>>>>>>>        String retVal
18333>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
18334>>>>>>>>>        Function_Return retVal
18335>>>>>>>>>    End_Function
18336>>>>>>>>>
18336>>>>>>>>>    Procedure Set ComCategory String value
18338>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
18339>>>>>>>>>    End_Procedure
18340>>>>>>>>>
18340>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
18342>>>>>>>>>        XTPControlHideFlags retVal
18342>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
18343>>>>>>>>>        Function_Return retVal
18344>>>>>>>>>    End_Function
18345>>>>>>>>>
18345>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
18347>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
18348>>>>>>>>>    End_Procedure
18349>>>>>>>>>
18349>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
18351>>>>>>>>>        Boolean retVal
18351>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
18352>>>>>>>>>        Function_Return retVal
18353>>>>>>>>>    End_Function
18354>>>>>>>>>
18354>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
18356>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
18357>>>>>>>>>    End_Procedure
18358>>>>>>>>>
18358>>>>>>>>>    Function ComAction Returns Variant
18360>>>>>>>>>        Variant retVal
18360>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
18361>>>>>>>>>        Function_Return retVal
18362>>>>>>>>>    End_Function
18363>>>>>>>>>
18363>>>>>>>>>    Procedure Set ComAction Variant value
18365>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
18366>>>>>>>>>    End_Procedure
18367>>>>>>>>>
18367>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
18369>>>>>>>>>        Integer retVal
18369>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
18370>>>>>>>>>        Function_Return retVal
18371>>>>>>>>>    End_Function
18372>>>>>>>>>
18372>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
18374>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
18375>>>>>>>>>    End_Procedure
18376>>>>>>>>>
18376>>>>>>>>>    Function ComWidth Returns Integer
18378>>>>>>>>>        Integer retVal
18378>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
18379>>>>>>>>>        Function_Return retVal
18380>>>>>>>>>    End_Function
18381>>>>>>>>>
18381>>>>>>>>>    Procedure Set ComWidth Integer value
18383>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
18384>>>>>>>>>    End_Procedure
18385>>>>>>>>>
18385>>>>>>>>>    Function ComHeight Returns Integer
18387>>>>>>>>>        Integer retVal
18387>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
18388>>>>>>>>>        Function_Return retVal
18389>>>>>>>>>    End_Function
18390>>>>>>>>>
18390>>>>>>>>>    Procedure Set ComHeight Integer value
18392>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
18393>>>>>>>>>    End_Procedure
18394>>>>>>>>>
18394>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
18396>>>>>>>>>        XTPButtonStyle retVal
18396>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
18397>>>>>>>>>        Function_Return retVal
18398>>>>>>>>>    End_Function
18399>>>>>>>>>
18399>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
18401>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
18402>>>>>>>>>    End_Procedure
18403>>>>>>>>>
18403>>>>>>>>>    Function ComKeyboardTip Returns String
18405>>>>>>>>>        String retVal
18405>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
18406>>>>>>>>>        Function_Return retVal
18407>>>>>>>>>    End_Function
18408>>>>>>>>>
18408>>>>>>>>>    Procedure Set ComKeyboardTip String value
18410>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
18411>>>>>>>>>    End_Procedure
18412>>>>>>>>>
18412>>>>>>>>>    Function ComStyleEx Returns XTPButtonStyle
18414>>>>>>>>>        XTPButtonStyle retVal
18414>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 220 OLE_VT_I4 to retVal
18415>>>>>>>>>        Function_Return retVal
18416>>>>>>>>>    End_Function
18417>>>>>>>>>
18417>>>>>>>>>    Procedure Set ComStyleEx XTPButtonStyle value
18419>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 220 OLE_VT_I4 to value
18420>>>>>>>>>    End_Procedure
18421>>>>>>>>>
18421>>>>>>>>>    Function ComControls Returns Variant
18423>>>>>>>>>        Handle hDispatchDriver
18423>>>>>>>>>        Variant retVal
18423>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18424>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
18425>>>>>>>>>        Function_Return retVal
18426>>>>>>>>>    End_Function
18427>>>>>>>>>
18427>>>>>>>>>    Function ComParent Returns Variant
18429>>>>>>>>>        Handle hDispatchDriver
18429>>>>>>>>>        Variant retVal
18429>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18430>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
18431>>>>>>>>>        Function_Return retVal
18432>>>>>>>>>    End_Function
18433>>>>>>>>>
18433>>>>>>>>>    Function ComIndex Returns Integer
18435>>>>>>>>>        Handle hDispatchDriver
18435>>>>>>>>>        Integer retVal
18435>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18436>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
18437>>>>>>>>>        Function_Return retVal
18438>>>>>>>>>    End_Function
18439>>>>>>>>>
18439>>>>>>>>>    Function ComType Returns XTPControlType
18441>>>>>>>>>        Handle hDispatchDriver
18441>>>>>>>>>        XTPControlType retVal
18441>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18442>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
18443>>>>>>>>>        Function_Return retVal
18444>>>>>>>>>    End_Function
18445>>>>>>>>>
18445>>>>>>>>>    Procedure ComDelete
18447>>>>>>>>>        Handle hDispatchDriver
18447>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18448>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
18449>>>>>>>>>    End_Procedure
18450>>>>>>>>>
18450>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
18452>>>>>>>>>        Handle hDispatchDriver
18452>>>>>>>>>        Variant retVal
18452>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18453>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18454>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
18455>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
18456>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
18457>>>>>>>>>        Function_Return retVal
18458>>>>>>>>>    End_Function
18459>>>>>>>>>
18459>>>>>>>>>    Procedure ComSetFocus
18461>>>>>>>>>        Handle hDispatchDriver
18461>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18462>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
18463>>>>>>>>>    End_Procedure
18464>>>>>>>>>
18464>>>>>>>>>    Procedure ComExecute
18466>>>>>>>>>        Handle hDispatchDriver
18466>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18467>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
18468>>>>>>>>>    End_Procedure
18469>>>>>>>>>
18469>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
18471>>>>>>>>>        Handle hDispatchDriver
18471>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18472>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
18473>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
18474>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
18475>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
18476>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
18477>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
18478>>>>>>>>>    End_Procedure
18479>>>>>>>>>
18479>>>>>>>>>    Function ComRibbonGroup Returns Variant
18481>>>>>>>>>        Handle hDispatchDriver
18481>>>>>>>>>        Variant retVal
18481>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18482>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
18483>>>>>>>>>        Function_Return retVal
18484>>>>>>>>>    End_Function
18485>>>>>>>>>
18485>>>>>>>>>    Procedure ComReset
18487>>>>>>>>>        Handle hDispatchDriver
18487>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18488>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
18489>>>>>>>>>    End_Procedure
18490>>>>>>>>>
18490>>>>>>>>>    Function ComTop Returns Integer
18492>>>>>>>>>        Handle hDispatchDriver
18492>>>>>>>>>        Integer retVal
18492>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18493>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
18494>>>>>>>>>        Function_Return retVal
18495>>>>>>>>>    End_Function
18496>>>>>>>>>
18496>>>>>>>>>    Function ComLeft Returns Integer
18498>>>>>>>>>        Handle hDispatchDriver
18498>>>>>>>>>        Integer retVal
18498>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18499>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
18500>>>>>>>>>        Function_Return retVal
18501>>>>>>>>>    End_Function
18502>>>>>>>>>
18502>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
18504>>>>>>>>>        Handle hDispatchDriver
18504>>>>>>>>>        Variant retVal
18504>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18505>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
18506>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
18507>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
18508>>>>>>>>>        Function_Return retVal
18509>>>>>>>>>    End_Function
18510>>>>>>>>>
18510>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
18512>>>>>>>>>        Handle hDispatchDriver
18512>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18513>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18514>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
18515>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
18516>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
18517>>>>>>>>>    End_Procedure
18518>>>>>>>>>End_Class
18519>>>>>>>>>
18519>>>>>>>>>// CoClass
18519>>>>>>>>>// CLSID: {C0DE2000-AACD-4E77-8B1E-42B463760513}
18519>>>>>>>>>Class cCJCommandBarButton is a cComAutomationObject
18520>>>>>>>>>    Import_Class_Protocol cCJICommandBarButton
18521>>>>>>>>>
18521>>>>>>>>>    Procedure Construct_Object
18523>>>>>>>>>        Forward Send Construct_Object
18525>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
18526>>>>>>>>>    End_Procedure
18527>>>>>>>>>End_Class
18528>>>>>>>>>
18528>>>>>>>>>// CLSID: {C0DE2000-D452-4856-BAA4-17E86BD08CBA}
18528>>>>>>>>>Class cCJICommandBarPopup is a Mixin
18529>>>>>>>>>
18529>>>>>>>>>    Function ComChecked Returns Boolean
18531>>>>>>>>>        Boolean retVal
18531>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
18532>>>>>>>>>        Function_Return retVal
18533>>>>>>>>>    End_Function
18534>>>>>>>>>
18534>>>>>>>>>    Procedure Set ComChecked Boolean value
18536>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
18537>>>>>>>>>    End_Procedure
18538>>>>>>>>>
18538>>>>>>>>>    Function ComBeginGroup Returns Boolean
18540>>>>>>>>>        Boolean retVal
18540>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
18541>>>>>>>>>        Function_Return retVal
18542>>>>>>>>>    End_Function
18543>>>>>>>>>
18543>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
18545>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
18546>>>>>>>>>    End_Procedure
18547>>>>>>>>>
18547>>>>>>>>>    Function ComCaption Returns String
18549>>>>>>>>>        String retVal
18549>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
18550>>>>>>>>>        Function_Return retVal
18551>>>>>>>>>    End_Function
18552>>>>>>>>>
18552>>>>>>>>>    Procedure Set ComCaption String value
18554>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
18555>>>>>>>>>    End_Procedure
18556>>>>>>>>>
18556>>>>>>>>>    Function ComDescriptionText Returns String
18558>>>>>>>>>        String retVal
18558>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
18559>>>>>>>>>        Function_Return retVal
18560>>>>>>>>>    End_Function
18561>>>>>>>>>
18561>>>>>>>>>    Procedure Set ComDescriptionText String value
18563>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
18564>>>>>>>>>    End_Procedure
18565>>>>>>>>>
18565>>>>>>>>>    Function ComId Returns Integer
18567>>>>>>>>>        Integer retVal
18567>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
18568>>>>>>>>>        Function_Return retVal
18569>>>>>>>>>    End_Function
18570>>>>>>>>>
18570>>>>>>>>>    Procedure Set ComId Integer value
18572>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
18573>>>>>>>>>    End_Procedure
18574>>>>>>>>>
18574>>>>>>>>>    Function ComParameter Returns String
18576>>>>>>>>>        String retVal
18576>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
18577>>>>>>>>>        Function_Return retVal
18578>>>>>>>>>    End_Function
18579>>>>>>>>>
18579>>>>>>>>>    Procedure Set ComParameter String value
18581>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
18582>>>>>>>>>    End_Procedure
18583>>>>>>>>>
18583>>>>>>>>>    Function ComShortcutText Returns String
18585>>>>>>>>>        String retVal
18585>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
18586>>>>>>>>>        Function_Return retVal
18587>>>>>>>>>    End_Function
18588>>>>>>>>>
18588>>>>>>>>>    Procedure Set ComShortcutText String value
18590>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
18591>>>>>>>>>    End_Procedure
18592>>>>>>>>>
18592>>>>>>>>>    Function ComCustomShortcutText Returns String
18594>>>>>>>>>        String retVal
18594>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
18595>>>>>>>>>        Function_Return retVal
18596>>>>>>>>>    End_Function
18597>>>>>>>>>
18597>>>>>>>>>    Procedure Set ComCustomShortcutText String value
18599>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
18600>>>>>>>>>    End_Procedure
18601>>>>>>>>>
18601>>>>>>>>>    Function ComTooltipText Returns String
18603>>>>>>>>>        String retVal
18603>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
18604>>>>>>>>>        Function_Return retVal
18605>>>>>>>>>    End_Function
18606>>>>>>>>>
18606>>>>>>>>>    Procedure Set ComTooltipText String value
18608>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
18609>>>>>>>>>    End_Procedure
18610>>>>>>>>>
18610>>>>>>>>>    Function ComVisible Returns Boolean
18612>>>>>>>>>        Boolean retVal
18612>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
18613>>>>>>>>>        Function_Return retVal
18614>>>>>>>>>    End_Function
18615>>>>>>>>>
18615>>>>>>>>>    Procedure Set ComVisible Boolean value
18617>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
18618>>>>>>>>>    End_Procedure
18619>>>>>>>>>
18619>>>>>>>>>    Function ComEnabled Returns Boolean
18621>>>>>>>>>        Boolean retVal
18621>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
18622>>>>>>>>>        Function_Return retVal
18623>>>>>>>>>    End_Function
18624>>>>>>>>>
18624>>>>>>>>>    Procedure Set ComEnabled Boolean value
18626>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
18627>>>>>>>>>    End_Procedure
18628>>>>>>>>>
18628>>>>>>>>>    Function ComIconId Returns Integer
18630>>>>>>>>>        Integer retVal
18630>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
18631>>>>>>>>>        Function_Return retVal
18632>>>>>>>>>    End_Function
18633>>>>>>>>>
18633>>>>>>>>>    Procedure Set ComIconId Integer value
18635>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
18636>>>>>>>>>    End_Procedure
18637>>>>>>>>>
18637>>>>>>>>>    Function ComDefaultItem Returns Boolean
18639>>>>>>>>>        Boolean retVal
18639>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
18640>>>>>>>>>        Function_Return retVal
18641>>>>>>>>>    End_Function
18642>>>>>>>>>
18642>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
18644>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
18645>>>>>>>>>    End_Procedure
18646>>>>>>>>>
18646>>>>>>>>>    Function ComFlags Returns XTPControlFlags
18648>>>>>>>>>        XTPControlFlags retVal
18648>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
18649>>>>>>>>>        Function_Return retVal
18650>>>>>>>>>    End_Function
18651>>>>>>>>>
18651>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
18653>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
18654>>>>>>>>>    End_Procedure
18655>>>>>>>>>
18655>>>>>>>>>    Function ComCategory Returns String
18657>>>>>>>>>        String retVal
18657>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
18658>>>>>>>>>        Function_Return retVal
18659>>>>>>>>>    End_Function
18660>>>>>>>>>
18660>>>>>>>>>    Procedure Set ComCategory String value
18662>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
18663>>>>>>>>>    End_Procedure
18664>>>>>>>>>
18664>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
18666>>>>>>>>>        XTPControlHideFlags retVal
18666>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
18667>>>>>>>>>        Function_Return retVal
18668>>>>>>>>>    End_Function
18669>>>>>>>>>
18669>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
18671>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
18672>>>>>>>>>    End_Procedure
18673>>>>>>>>>
18673>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
18675>>>>>>>>>        Boolean retVal
18675>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
18676>>>>>>>>>        Function_Return retVal
18677>>>>>>>>>    End_Function
18678>>>>>>>>>
18678>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
18680>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
18681>>>>>>>>>    End_Procedure
18682>>>>>>>>>
18682>>>>>>>>>    Function ComAction Returns Variant
18684>>>>>>>>>        Variant retVal
18684>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
18685>>>>>>>>>        Function_Return retVal
18686>>>>>>>>>    End_Function
18687>>>>>>>>>
18687>>>>>>>>>    Procedure Set ComAction Variant value
18689>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
18690>>>>>>>>>    End_Procedure
18691>>>>>>>>>
18691>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
18693>>>>>>>>>        Integer retVal
18693>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
18694>>>>>>>>>        Function_Return retVal
18695>>>>>>>>>    End_Function
18696>>>>>>>>>
18696>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
18698>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
18699>>>>>>>>>    End_Procedure
18700>>>>>>>>>
18700>>>>>>>>>    Function ComWidth Returns Integer
18702>>>>>>>>>        Integer retVal
18702>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
18703>>>>>>>>>        Function_Return retVal
18704>>>>>>>>>    End_Function
18705>>>>>>>>>
18705>>>>>>>>>    Procedure Set ComWidth Integer value
18707>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
18708>>>>>>>>>    End_Procedure
18709>>>>>>>>>
18709>>>>>>>>>    Function ComHeight Returns Integer
18711>>>>>>>>>        Integer retVal
18711>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
18712>>>>>>>>>        Function_Return retVal
18713>>>>>>>>>    End_Function
18714>>>>>>>>>
18714>>>>>>>>>    Procedure Set ComHeight Integer value
18716>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
18717>>>>>>>>>    End_Procedure
18718>>>>>>>>>
18718>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
18720>>>>>>>>>        XTPButtonStyle retVal
18720>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
18721>>>>>>>>>        Function_Return retVal
18722>>>>>>>>>    End_Function
18723>>>>>>>>>
18723>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
18725>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
18726>>>>>>>>>    End_Procedure
18727>>>>>>>>>
18727>>>>>>>>>    Function ComKeyboardTip Returns String
18729>>>>>>>>>        String retVal
18729>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
18730>>>>>>>>>        Function_Return retVal
18731>>>>>>>>>    End_Function
18732>>>>>>>>>
18732>>>>>>>>>    Procedure Set ComKeyboardTip String value
18734>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
18735>>>>>>>>>    End_Procedure
18736>>>>>>>>>
18736>>>>>>>>>    Function ComCommandBar Returns Variant
18738>>>>>>>>>        Variant retVal
18738>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
18739>>>>>>>>>        Function_Return retVal
18740>>>>>>>>>    End_Function
18741>>>>>>>>>
18741>>>>>>>>>    Procedure Set ComCommandBar Variant value
18743>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
18744>>>>>>>>>    End_Procedure
18745>>>>>>>>>
18745>>>>>>>>>    Function ComControls Returns Variant
18747>>>>>>>>>        Handle hDispatchDriver
18747>>>>>>>>>        Variant retVal
18747>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18748>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
18749>>>>>>>>>        Function_Return retVal
18750>>>>>>>>>    End_Function
18751>>>>>>>>>
18751>>>>>>>>>    Function ComParent Returns Variant
18753>>>>>>>>>        Handle hDispatchDriver
18753>>>>>>>>>        Variant retVal
18753>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18754>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
18755>>>>>>>>>        Function_Return retVal
18756>>>>>>>>>    End_Function
18757>>>>>>>>>
18757>>>>>>>>>    Function ComIndex Returns Integer
18759>>>>>>>>>        Handle hDispatchDriver
18759>>>>>>>>>        Integer retVal
18759>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18760>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
18761>>>>>>>>>        Function_Return retVal
18762>>>>>>>>>    End_Function
18763>>>>>>>>>
18763>>>>>>>>>    Function ComType Returns XTPControlType
18765>>>>>>>>>        Handle hDispatchDriver
18765>>>>>>>>>        XTPControlType retVal
18765>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18766>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
18767>>>>>>>>>        Function_Return retVal
18768>>>>>>>>>    End_Function
18769>>>>>>>>>
18769>>>>>>>>>    Procedure ComDelete
18771>>>>>>>>>        Handle hDispatchDriver
18771>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18772>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
18773>>>>>>>>>    End_Procedure
18774>>>>>>>>>
18774>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
18776>>>>>>>>>        Handle hDispatchDriver
18776>>>>>>>>>        Variant retVal
18776>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18777>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18778>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
18779>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
18780>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
18781>>>>>>>>>        Function_Return retVal
18782>>>>>>>>>    End_Function
18783>>>>>>>>>
18783>>>>>>>>>    Procedure ComSetFocus
18785>>>>>>>>>        Handle hDispatchDriver
18785>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18786>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
18787>>>>>>>>>    End_Procedure
18788>>>>>>>>>
18788>>>>>>>>>    Procedure ComExecute
18790>>>>>>>>>        Handle hDispatchDriver
18790>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18791>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
18792>>>>>>>>>    End_Procedure
18793>>>>>>>>>
18793>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
18795>>>>>>>>>        Handle hDispatchDriver
18795>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18796>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
18797>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
18798>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
18799>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
18800>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
18801>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
18802>>>>>>>>>    End_Procedure
18803>>>>>>>>>
18803>>>>>>>>>    Function ComRibbonGroup Returns Variant
18805>>>>>>>>>        Handle hDispatchDriver
18805>>>>>>>>>        Variant retVal
18805>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18806>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
18807>>>>>>>>>        Function_Return retVal
18808>>>>>>>>>    End_Function
18809>>>>>>>>>
18809>>>>>>>>>    Procedure ComReset
18811>>>>>>>>>        Handle hDispatchDriver
18811>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18812>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
18813>>>>>>>>>    End_Procedure
18814>>>>>>>>>
18814>>>>>>>>>    Function ComTop Returns Integer
18816>>>>>>>>>        Handle hDispatchDriver
18816>>>>>>>>>        Integer retVal
18816>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18817>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
18818>>>>>>>>>        Function_Return retVal
18819>>>>>>>>>    End_Function
18820>>>>>>>>>
18820>>>>>>>>>    Function ComLeft Returns Integer
18822>>>>>>>>>        Handle hDispatchDriver
18822>>>>>>>>>        Integer retVal
18822>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18823>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
18824>>>>>>>>>        Function_Return retVal
18825>>>>>>>>>    End_Function
18826>>>>>>>>>
18826>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
18828>>>>>>>>>        Handle hDispatchDriver
18828>>>>>>>>>        Variant retVal
18828>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18829>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
18830>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
18831>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
18832>>>>>>>>>        Function_Return retVal
18833>>>>>>>>>    End_Function
18834>>>>>>>>>
18834>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
18836>>>>>>>>>        Handle hDispatchDriver
18836>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18837>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18838>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
18839>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
18840>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
18841>>>>>>>>>    End_Procedure
18842>>>>>>>>>End_Class
18843>>>>>>>>>
18843>>>>>>>>>// CoClass
18843>>>>>>>>>// CLSID: {C0DE2000-BB71-4F79-9A7A-11ED146C387C}
18843>>>>>>>>>Class cCJCommandBarPopup is a cComAutomationObject
18844>>>>>>>>>    Import_Class_Protocol cCJICommandBarPopup
18845>>>>>>>>>
18845>>>>>>>>>    Procedure Construct_Object
18847>>>>>>>>>        Forward Send Construct_Object
18849>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
18850>>>>>>>>>    End_Procedure
18851>>>>>>>>>End_Class
18852>>>>>>>>>
18852>>>>>>>>>// CLSID: {C0DE2000-06D0-4869-8168-9CCBAA22C0EB}
18852>>>>>>>>>Class cCJICommandBarGalleryItem is a Mixin
18853>>>>>>>>>
18853>>>>>>>>>    Function ComId Returns Integer
18855>>>>>>>>>        Integer retVal
18855>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
18856>>>>>>>>>        Function_Return retVal
18857>>>>>>>>>    End_Function
18858>>>>>>>>>
18858>>>>>>>>>    Procedure Set ComId Integer value
18860>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
18861>>>>>>>>>    End_Procedure
18862>>>>>>>>>
18862>>>>>>>>>    Function ComImageIndex Returns Integer
18864>>>>>>>>>        Integer retVal
18864>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
18865>>>>>>>>>        Function_Return retVal
18866>>>>>>>>>    End_Function
18867>>>>>>>>>
18867>>>>>>>>>    Procedure Set ComImageIndex Integer value
18869>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
18870>>>>>>>>>    End_Procedure
18871>>>>>>>>>
18871>>>>>>>>>    Function ComCaption Returns String
18873>>>>>>>>>        String retVal
18873>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
18874>>>>>>>>>        Function_Return retVal
18875>>>>>>>>>    End_Function
18876>>>>>>>>>
18876>>>>>>>>>    Procedure Set ComCaption String value
18878>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
18879>>>>>>>>>    End_Procedure
18880>>>>>>>>>
18880>>>>>>>>>    Function ComToolTip Returns String
18882>>>>>>>>>        String retVal
18882>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
18883>>>>>>>>>        Function_Return retVal
18884>>>>>>>>>    End_Function
18885>>>>>>>>>
18885>>>>>>>>>    Procedure Set ComToolTip String value
18887>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
18888>>>>>>>>>    End_Procedure
18889>>>>>>>>>
18889>>>>>>>>>    Function ComTag Returns Variant
18891>>>>>>>>>        Variant retVal
18891>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_VARIANT to retVal
18892>>>>>>>>>        Function_Return retVal
18893>>>>>>>>>    End_Function
18894>>>>>>>>>
18894>>>>>>>>>    Procedure Set ComTag Variant value
18896>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_VARIANT to value
18897>>>>>>>>>    End_Procedure
18898>>>>>>>>>
18898>>>>>>>>>    Function ComItemWidth Returns Integer
18900>>>>>>>>>        Integer retVal
18900>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
18901>>>>>>>>>        Function_Return retVal
18902>>>>>>>>>    End_Function
18903>>>>>>>>>
18903>>>>>>>>>    Procedure Set ComItemWidth Integer value
18905>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
18906>>>>>>>>>    End_Procedure
18907>>>>>>>>>
18907>>>>>>>>>    Function ComItemHeight Returns Integer
18909>>>>>>>>>        Integer retVal
18909>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
18910>>>>>>>>>        Function_Return retVal
18911>>>>>>>>>    End_Function
18912>>>>>>>>>
18912>>>>>>>>>    Procedure Set ComItemHeight Integer value
18914>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
18915>>>>>>>>>    End_Procedure
18916>>>>>>>>>
18916>>>>>>>>>    Function ComDescriptionText Returns String
18918>>>>>>>>>        String retVal
18918>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
18919>>>>>>>>>        Function_Return retVal
18920>>>>>>>>>    End_Function
18921>>>>>>>>>
18921>>>>>>>>>    Procedure Set ComDescriptionText String value
18923>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
18924>>>>>>>>>    End_Procedure
18925>>>>>>>>>
18925>>>>>>>>>    Function ComEnabled Returns Boolean
18927>>>>>>>>>        Boolean retVal
18927>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
18928>>>>>>>>>        Function_Return retVal
18929>>>>>>>>>    End_Function
18930>>>>>>>>>
18930>>>>>>>>>    Procedure Set ComEnabled Boolean value
18932>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
18933>>>>>>>>>    End_Procedure
18934>>>>>>>>>
18934>>>>>>>>>    Function ComIndex Returns Integer
18936>>>>>>>>>        Handle hDispatchDriver
18936>>>>>>>>>        Integer retVal
18936>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18937>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
18938>>>>>>>>>        Function_Return retVal
18939>>>>>>>>>    End_Function
18940>>>>>>>>>
18940>>>>>>>>>    Function ComLabel Returns Boolean
18942>>>>>>>>>        Handle hDispatchDriver
18942>>>>>>>>>        Boolean retVal
18942>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18943>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_BOOL to retVal
18944>>>>>>>>>        Function_Return retVal
18945>>>>>>>>>    End_Function
18946>>>>>>>>>End_Class
18947>>>>>>>>>
18947>>>>>>>>>// CoClass
18947>>>>>>>>>// CLSID: {C0DE2000-9D8C-4025-AAD4-73D8D15E7FED}
18947>>>>>>>>>Class cCJCommandBarGalleryItem is a cComAutomationObject
18948>>>>>>>>>    Import_Class_Protocol cCJICommandBarGalleryItem
18949>>>>>>>>>
18949>>>>>>>>>    Procedure Construct_Object
18951>>>>>>>>>        Forward Send Construct_Object
18953>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
18954>>>>>>>>>    End_Procedure
18955>>>>>>>>>End_Class
18956>>>>>>>>>
18956>>>>>>>>>// CLSID: {C0DE2000-0AFA-4EC8-A49E-4DC7671C4AC7}
18956>>>>>>>>>Class cCJICommandBarGalleryItems is a Mixin
18957>>>>>>>>>
18957>>>>>>>>>    Function ComIcons Returns Variant
18959>>>>>>>>>        Variant retVal
18959>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_DISPATCH to retVal
18960>>>>>>>>>        Function_Return retVal
18961>>>>>>>>>    End_Function
18962>>>>>>>>>
18962>>>>>>>>>    Procedure Set ComIcons Variant value
18964>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_DISPATCH to value
18965>>>>>>>>>    End_Procedure
18966>>>>>>>>>
18966>>>>>>>>>    Function ComItemWidth Returns Integer
18968>>>>>>>>>        Integer retVal
18968>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to retVal
18969>>>>>>>>>        Function_Return retVal
18970>>>>>>>>>    End_Function
18971>>>>>>>>>
18971>>>>>>>>>    Procedure Set ComItemWidth Integer value
18973>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to value
18974>>>>>>>>>    End_Procedure
18975>>>>>>>>>
18975>>>>>>>>>    Function ComItemHeight Returns Integer
18977>>>>>>>>>        Integer retVal
18977>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
18978>>>>>>>>>        Function_Return retVal
18979>>>>>>>>>    End_Function
18980>>>>>>>>>
18980>>>>>>>>>    Procedure Set ComItemHeight Integer value
18982>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
18983>>>>>>>>>    End_Procedure
18984>>>>>>>>>
18984>>>>>>>>>    Function ComClipItems Returns Boolean
18986>>>>>>>>>        Boolean retVal
18986>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
18987>>>>>>>>>        Function_Return retVal
18988>>>>>>>>>    End_Function
18989>>>>>>>>>
18989>>>>>>>>>    Procedure Set ComClipItems Boolean value
18991>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
18992>>>>>>>>>    End_Procedure
18993>>>>>>>>>
18993>>>>>>>>>    Function ComEnableMarkup Returns Boolean
18995>>>>>>>>>        Boolean retVal
18995>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
18996>>>>>>>>>        Function_Return retVal
18997>>>>>>>>>    End_Function
18998>>>>>>>>>
18998>>>>>>>>>    Procedure Set ComEnableMarkup Boolean value
19000>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
19001>>>>>>>>>    End_Procedure
19002>>>>>>>>>
19002>>>>>>>>>    Function ComAddItem Integer llId String llCaption Returns Variant
19004>>>>>>>>>        Handle hDispatchDriver
19004>>>>>>>>>        Variant retVal
19004>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19005>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
19006>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
19007>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
19008>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
19009>>>>>>>>>        Function_Return retVal
19010>>>>>>>>>    End_Function
19011>>>>>>>>>
19011>>>>>>>>>    Function ComAddLabel String llCaption Returns Variant
19013>>>>>>>>>        Handle hDispatchDriver
19013>>>>>>>>>        Variant retVal
19013>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19014>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19015>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
19016>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
19017>>>>>>>>>        Function_Return retVal
19018>>>>>>>>>    End_Function
19019>>>>>>>>>
19019>>>>>>>>>    Function ComAddSeparator Returns Variant
19021>>>>>>>>>        Handle hDispatchDriver
19021>>>>>>>>>        Variant retVal
19021>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19022>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
19023>>>>>>>>>        Function_Return retVal
19024>>>>>>>>>    End_Function
19025>>>>>>>>>
19025>>>>>>>>>    // Gets the number of controls in the collection.
19025>>>>>>>>>    Function ComCount Returns Integer
19027>>>>>>>>>        Handle hDispatchDriver
19027>>>>>>>>>        Integer retVal
19027>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19028>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
19029>>>>>>>>>        Function_Return retVal
19030>>>>>>>>>    End_Function
19031>>>>>>>>>
19031>>>>>>>>>    // Gets an item from the collection by its index.
19031>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
19033>>>>>>>>>        Handle hDispatchDriver
19033>>>>>>>>>        Variant retVal
19033>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19034>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19035>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
19036>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
19037>>>>>>>>>        Function_Return retVal
19038>>>>>>>>>    End_Function
19039>>>>>>>>>
19039>>>>>>>>>    Function Com_NewEnum Returns Variant
19041>>>>>>>>>        Handle hDispatchDriver
19041>>>>>>>>>        Variant retVal
19041>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19042>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
19043>>>>>>>>>        Function_Return retVal
19044>>>>>>>>>    End_Function
19045>>>>>>>>>
19045>>>>>>>>>    // Deletes all of the command bar controls from the collection
19045>>>>>>>>>    Procedure ComDeleteAll
19047>>>>>>>>>        Handle hDispatchDriver
19047>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19048>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
19049>>>>>>>>>    End_Procedure
19050>>>>>>>>>
19050>>>>>>>>>    Procedure ComDeleteAt Integer llIndex
19052>>>>>>>>>        Handle hDispatchDriver
19052>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19053>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19054>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
19055>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 10 OLE_VT_VOID
19056>>>>>>>>>    End_Procedure
19057>>>>>>>>>
19057>>>>>>>>>    Function ComMarkupContext Returns Variant
19059>>>>>>>>>        Handle hDispatchDriver
19059>>>>>>>>>        Variant retVal
19059>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19060>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_DISPATCH to retVal
19061>>>>>>>>>        Function_Return retVal
19062>>>>>>>>>    End_Function
19063>>>>>>>>>End_Class
19064>>>>>>>>>
19064>>>>>>>>>// CLSID: {C0DE2000-7BE8-42EC-870C-8849F5540F14}
19064>>>>>>>>>Class cCJICommandBarGalleryItemsEvents is a Mixin
19065>>>>>>>>>
19065>>>>>>>>>    Procedure OnComDrawItem OLE_HANDLE llhDC Variant llGallery Variant llItem Integer llx Integer lly Integer llcx Integer llcy Boolean llEnabled Boolean llSelected Boolean llPressed Boolean llChecked Variant llHandled
19067>>>>>>>>>    End_Procedure
19068>>>>>>>>>
19068>>>>>>>>>    Procedure RegisterComEvents
19070>>>>>>>>>        Send RegisterComEvent 1 msg_OnComDrawItem
19071>>>>>>>>>    End_Procedure
19072>>>>>>>>>End_Class
19073>>>>>>>>>
19073>>>>>>>>>// CoClass
19073>>>>>>>>>// CLSID: {C0DE2000-BA48-4451-B04D-5304909AE543}
19073>>>>>>>>>Class cCJCommandBarGalleryItems is a cComAutomationObject
19074>>>>>>>>>    Import_Class_Protocol cCJICommandBarGalleryItems
19075>>>>>>>>>    Import_Class_Protocol cCJICommandBarGalleryItemsEvents
19076>>>>>>>>>
19076>>>>>>>>>    Procedure Construct_Object
19078>>>>>>>>>        Forward Send Construct_Object
19080>>>>>>>>>        Set psEventId to "{C0DE2000-7BE8-42EC-870C-8849F5540F14}"
19081>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
19082>>>>>>>>>    End_Procedure
19083>>>>>>>>>End_Class
19084>>>>>>>>>
19084>>>>>>>>>// CLSID: {C0DE2000-55CC-4D4C-A6CF-260F62044127}
19084>>>>>>>>>Class cCJICommandBarGallery is a Mixin
19085>>>>>>>>>
19085>>>>>>>>>    Function ComChecked Returns Boolean
19087>>>>>>>>>        Boolean retVal
19087>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
19088>>>>>>>>>        Function_Return retVal
19089>>>>>>>>>    End_Function
19090>>>>>>>>>
19090>>>>>>>>>    Procedure Set ComChecked Boolean value
19092>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
19093>>>>>>>>>    End_Procedure
19094>>>>>>>>>
19094>>>>>>>>>    Function ComBeginGroup Returns Boolean
19096>>>>>>>>>        Boolean retVal
19096>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
19097>>>>>>>>>        Function_Return retVal
19098>>>>>>>>>    End_Function
19099>>>>>>>>>
19099>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
19101>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
19102>>>>>>>>>    End_Procedure
19103>>>>>>>>>
19103>>>>>>>>>    Function ComCaption Returns String
19105>>>>>>>>>        String retVal
19105>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
19106>>>>>>>>>        Function_Return retVal
19107>>>>>>>>>    End_Function
19108>>>>>>>>>
19108>>>>>>>>>    Procedure Set ComCaption String value
19110>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
19111>>>>>>>>>    End_Procedure
19112>>>>>>>>>
19112>>>>>>>>>    Function ComDescriptionText Returns String
19114>>>>>>>>>        String retVal
19114>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
19115>>>>>>>>>        Function_Return retVal
19116>>>>>>>>>    End_Function
19117>>>>>>>>>
19117>>>>>>>>>    Procedure Set ComDescriptionText String value
19119>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
19120>>>>>>>>>    End_Procedure
19121>>>>>>>>>
19121>>>>>>>>>    Function ComId Returns Integer
19123>>>>>>>>>        Integer retVal
19123>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
19124>>>>>>>>>        Function_Return retVal
19125>>>>>>>>>    End_Function
19126>>>>>>>>>
19126>>>>>>>>>    Procedure Set ComId Integer value
19128>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
19129>>>>>>>>>    End_Procedure
19130>>>>>>>>>
19130>>>>>>>>>    Function ComParameter Returns String
19132>>>>>>>>>        String retVal
19132>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
19133>>>>>>>>>        Function_Return retVal
19134>>>>>>>>>    End_Function
19135>>>>>>>>>
19135>>>>>>>>>    Procedure Set ComParameter String value
19137>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
19138>>>>>>>>>    End_Procedure
19139>>>>>>>>>
19139>>>>>>>>>    Function ComShortcutText Returns String
19141>>>>>>>>>        String retVal
19141>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
19142>>>>>>>>>        Function_Return retVal
19143>>>>>>>>>    End_Function
19144>>>>>>>>>
19144>>>>>>>>>    Procedure Set ComShortcutText String value
19146>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
19147>>>>>>>>>    End_Procedure
19148>>>>>>>>>
19148>>>>>>>>>    Function ComCustomShortcutText Returns String
19150>>>>>>>>>        String retVal
19150>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
19151>>>>>>>>>        Function_Return retVal
19152>>>>>>>>>    End_Function
19153>>>>>>>>>
19153>>>>>>>>>    Procedure Set ComCustomShortcutText String value
19155>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
19156>>>>>>>>>    End_Procedure
19157>>>>>>>>>
19157>>>>>>>>>    Function ComTooltipText Returns String
19159>>>>>>>>>        String retVal
19159>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
19160>>>>>>>>>        Function_Return retVal
19161>>>>>>>>>    End_Function
19162>>>>>>>>>
19162>>>>>>>>>    Procedure Set ComTooltipText String value
19164>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
19165>>>>>>>>>    End_Procedure
19166>>>>>>>>>
19166>>>>>>>>>    Function ComVisible Returns Boolean
19168>>>>>>>>>        Boolean retVal
19168>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
19169>>>>>>>>>        Function_Return retVal
19170>>>>>>>>>    End_Function
19171>>>>>>>>>
19171>>>>>>>>>    Procedure Set ComVisible Boolean value
19173>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
19174>>>>>>>>>    End_Procedure
19175>>>>>>>>>
19175>>>>>>>>>    Function ComEnabled Returns Boolean
19177>>>>>>>>>        Boolean retVal
19177>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
19178>>>>>>>>>        Function_Return retVal
19179>>>>>>>>>    End_Function
19180>>>>>>>>>
19180>>>>>>>>>    Procedure Set ComEnabled Boolean value
19182>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
19183>>>>>>>>>    End_Procedure
19184>>>>>>>>>
19184>>>>>>>>>    Function ComIconId Returns Integer
19186>>>>>>>>>        Integer retVal
19186>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
19187>>>>>>>>>        Function_Return retVal
19188>>>>>>>>>    End_Function
19189>>>>>>>>>
19189>>>>>>>>>    Procedure Set ComIconId Integer value
19191>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
19192>>>>>>>>>    End_Procedure
19193>>>>>>>>>
19193>>>>>>>>>    Function ComDefaultItem Returns Boolean
19195>>>>>>>>>        Boolean retVal
19195>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
19196>>>>>>>>>        Function_Return retVal
19197>>>>>>>>>    End_Function
19198>>>>>>>>>
19198>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
19200>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
19201>>>>>>>>>    End_Procedure
19202>>>>>>>>>
19202>>>>>>>>>    Function ComFlags Returns XTPControlFlags
19204>>>>>>>>>        XTPControlFlags retVal
19204>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
19205>>>>>>>>>        Function_Return retVal
19206>>>>>>>>>    End_Function
19207>>>>>>>>>
19207>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
19209>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
19210>>>>>>>>>    End_Procedure
19211>>>>>>>>>
19211>>>>>>>>>    Function ComCategory Returns String
19213>>>>>>>>>        String retVal
19213>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
19214>>>>>>>>>        Function_Return retVal
19215>>>>>>>>>    End_Function
19216>>>>>>>>>
19216>>>>>>>>>    Procedure Set ComCategory String value
19218>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
19219>>>>>>>>>    End_Procedure
19220>>>>>>>>>
19220>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
19222>>>>>>>>>        XTPControlHideFlags retVal
19222>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
19223>>>>>>>>>        Function_Return retVal
19224>>>>>>>>>    End_Function
19225>>>>>>>>>
19225>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
19227>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
19228>>>>>>>>>    End_Procedure
19229>>>>>>>>>
19229>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
19231>>>>>>>>>        Boolean retVal
19231>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
19232>>>>>>>>>        Function_Return retVal
19233>>>>>>>>>    End_Function
19234>>>>>>>>>
19234>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
19236>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
19237>>>>>>>>>    End_Procedure
19238>>>>>>>>>
19238>>>>>>>>>    Function ComAction Returns Variant
19240>>>>>>>>>        Variant retVal
19240>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
19241>>>>>>>>>        Function_Return retVal
19242>>>>>>>>>    End_Function
19243>>>>>>>>>
19243>>>>>>>>>    Procedure Set ComAction Variant value
19245>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
19246>>>>>>>>>    End_Procedure
19247>>>>>>>>>
19247>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
19249>>>>>>>>>        Integer retVal
19249>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
19250>>>>>>>>>        Function_Return retVal
19251>>>>>>>>>    End_Function
19252>>>>>>>>>
19252>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
19254>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
19255>>>>>>>>>    End_Procedure
19256>>>>>>>>>
19256>>>>>>>>>    Function ComWidth Returns Integer
19258>>>>>>>>>        Integer retVal
19258>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
19259>>>>>>>>>        Function_Return retVal
19260>>>>>>>>>    End_Function
19261>>>>>>>>>
19261>>>>>>>>>    Procedure Set ComWidth Integer value
19263>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
19264>>>>>>>>>    End_Procedure
19265>>>>>>>>>
19265>>>>>>>>>    Function ComHeight Returns Integer
19267>>>>>>>>>        Integer retVal
19267>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
19268>>>>>>>>>        Function_Return retVal
19269>>>>>>>>>    End_Function
19270>>>>>>>>>
19270>>>>>>>>>    Procedure Set ComHeight Integer value
19272>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
19273>>>>>>>>>    End_Procedure
19274>>>>>>>>>
19274>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
19276>>>>>>>>>        XTPButtonStyle retVal
19276>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
19277>>>>>>>>>        Function_Return retVal
19278>>>>>>>>>    End_Function
19279>>>>>>>>>
19279>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
19281>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
19282>>>>>>>>>    End_Procedure
19283>>>>>>>>>
19283>>>>>>>>>    Function ComKeyboardTip Returns String
19285>>>>>>>>>        String retVal
19285>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
19286>>>>>>>>>        Function_Return retVal
19287>>>>>>>>>    End_Function
19288>>>>>>>>>
19288>>>>>>>>>    Procedure Set ComKeyboardTip String value
19290>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
19291>>>>>>>>>    End_Procedure
19292>>>>>>>>>
19292>>>>>>>>>    Function ComCommandBar Returns Variant
19294>>>>>>>>>        Variant retVal
19294>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
19295>>>>>>>>>        Function_Return retVal
19296>>>>>>>>>    End_Function
19297>>>>>>>>>
19297>>>>>>>>>    Procedure Set ComCommandBar Variant value
19299>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
19300>>>>>>>>>    End_Procedure
19301>>>>>>>>>
19301>>>>>>>>>    Function ComItems Returns Variant
19303>>>>>>>>>        Variant retVal
19303>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_DISPATCH to retVal
19304>>>>>>>>>        Function_Return retVal
19305>>>>>>>>>    End_Function
19306>>>>>>>>>
19306>>>>>>>>>    Procedure Set ComItems Variant value
19308>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_DISPATCH to value
19309>>>>>>>>>    End_Procedure
19310>>>>>>>>>
19310>>>>>>>>>    Function ComSelectedItem Returns Variant
19312>>>>>>>>>        Variant retVal
19312>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_DISPATCH to retVal
19313>>>>>>>>>        Function_Return retVal
19314>>>>>>>>>    End_Function
19315>>>>>>>>>
19315>>>>>>>>>    Procedure Set ComSelectedItem Variant value
19317>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_DISPATCH to value
19318>>>>>>>>>    End_Procedure
19319>>>>>>>>>
19319>>>>>>>>>    Function ComCheckedItem Returns Integer
19321>>>>>>>>>        Integer retVal
19321>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
19322>>>>>>>>>        Function_Return retVal
19323>>>>>>>>>    End_Function
19324>>>>>>>>>
19324>>>>>>>>>    Procedure Set ComCheckedItem Integer value
19326>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
19327>>>>>>>>>    End_Procedure
19328>>>>>>>>>
19328>>>>>>>>>    Function ComShowBorders Returns Boolean
19330>>>>>>>>>        Boolean retVal
19330>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BOOL to retVal
19331>>>>>>>>>        Function_Return retVal
19332>>>>>>>>>    End_Function
19333>>>>>>>>>
19333>>>>>>>>>    Procedure Set ComShowBorders Boolean value
19335>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BOOL to value
19336>>>>>>>>>    End_Procedure
19337>>>>>>>>>
19337>>>>>>>>>    Function ComShowLabels Returns Boolean
19339>>>>>>>>>        Boolean retVal
19339>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 54 OLE_VT_BOOL to retVal
19340>>>>>>>>>        Function_Return retVal
19341>>>>>>>>>    End_Function
19342>>>>>>>>>
19342>>>>>>>>>    Procedure Set ComShowLabels Boolean value
19344>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 54 OLE_VT_BOOL to value
19345>>>>>>>>>    End_Procedure
19346>>>>>>>>>
19346>>>>>>>>>    Function ComShowScrollBar Returns Boolean
19348>>>>>>>>>        Boolean retVal
19348>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 55 OLE_VT_BOOL to retVal
19349>>>>>>>>>        Function_Return retVal
19350>>>>>>>>>    End_Function
19351>>>>>>>>>
19351>>>>>>>>>    Procedure Set ComShowScrollBar Boolean value
19353>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 55 OLE_VT_BOOL to value
19354>>>>>>>>>    End_Procedure
19355>>>>>>>>>
19355>>>>>>>>>    Function ComScrollPos Returns Integer
19357>>>>>>>>>        Integer retVal
19357>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 56 OLE_VT_I4 to retVal
19358>>>>>>>>>        Function_Return retVal
19359>>>>>>>>>    End_Function
19360>>>>>>>>>
19360>>>>>>>>>    Procedure Set ComScrollPos Integer value
19362>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 56 OLE_VT_I4 to value
19363>>>>>>>>>    End_Procedure
19364>>>>>>>>>
19364>>>>>>>>>    Function ComResizable Returns XTPGalleryResizable
19366>>>>>>>>>        XTPGalleryResizable retVal
19366>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 62 OLE_VT_I4 to retVal
19367>>>>>>>>>        Function_Return retVal
19368>>>>>>>>>    End_Function
19369>>>>>>>>>
19369>>>>>>>>>    Procedure Set ComResizable XTPGalleryResizable value
19371>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 62 OLE_VT_I4 to value
19372>>>>>>>>>    End_Procedure
19373>>>>>>>>>
19373>>>>>>>>>    Function ComEnableTransparency Returns Boolean
19375>>>>>>>>>        Boolean retVal
19375>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 63 OLE_VT_BOOL to retVal
19376>>>>>>>>>        Function_Return retVal
19377>>>>>>>>>    End_Function
19378>>>>>>>>>
19378>>>>>>>>>    Procedure Set ComEnableTransparency Boolean value
19380>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 63 OLE_VT_BOOL to value
19381>>>>>>>>>    End_Procedure
19382>>>>>>>>>
19382>>>>>>>>>    Function ComControls Returns Variant
19384>>>>>>>>>        Handle hDispatchDriver
19384>>>>>>>>>        Variant retVal
19384>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19385>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
19386>>>>>>>>>        Function_Return retVal
19387>>>>>>>>>    End_Function
19388>>>>>>>>>
19388>>>>>>>>>    Function ComParent Returns Variant
19390>>>>>>>>>        Handle hDispatchDriver
19390>>>>>>>>>        Variant retVal
19390>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19391>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
19392>>>>>>>>>        Function_Return retVal
19393>>>>>>>>>    End_Function
19394>>>>>>>>>
19394>>>>>>>>>    Function ComIndex Returns Integer
19396>>>>>>>>>        Handle hDispatchDriver
19396>>>>>>>>>        Integer retVal
19396>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19397>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
19398>>>>>>>>>        Function_Return retVal
19399>>>>>>>>>    End_Function
19400>>>>>>>>>
19400>>>>>>>>>    Function ComType Returns XTPControlType
19402>>>>>>>>>        Handle hDispatchDriver
19402>>>>>>>>>        XTPControlType retVal
19402>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19403>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
19404>>>>>>>>>        Function_Return retVal
19405>>>>>>>>>    End_Function
19406>>>>>>>>>
19406>>>>>>>>>    Procedure ComDelete
19408>>>>>>>>>        Handle hDispatchDriver
19408>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19409>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
19410>>>>>>>>>    End_Procedure
19411>>>>>>>>>
19411>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
19413>>>>>>>>>        Handle hDispatchDriver
19413>>>>>>>>>        Variant retVal
19413>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19414>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
19415>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
19416>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
19417>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
19418>>>>>>>>>        Function_Return retVal
19419>>>>>>>>>    End_Function
19420>>>>>>>>>
19420>>>>>>>>>    Procedure ComSetFocus
19422>>>>>>>>>        Handle hDispatchDriver
19422>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19423>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
19424>>>>>>>>>    End_Procedure
19425>>>>>>>>>
19425>>>>>>>>>    Procedure ComExecute
19427>>>>>>>>>        Handle hDispatchDriver
19427>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19428>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
19429>>>>>>>>>    End_Procedure
19430>>>>>>>>>
19430>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
19432>>>>>>>>>        Handle hDispatchDriver
19432>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19433>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
19434>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
19435>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
19436>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
19437>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
19438>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
19439>>>>>>>>>    End_Procedure
19440>>>>>>>>>
19440>>>>>>>>>    Function ComRibbonGroup Returns Variant
19442>>>>>>>>>        Handle hDispatchDriver
19442>>>>>>>>>        Variant retVal
19442>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19443>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
19444>>>>>>>>>        Function_Return retVal
19445>>>>>>>>>    End_Function
19446>>>>>>>>>
19446>>>>>>>>>    Procedure ComReset
19448>>>>>>>>>        Handle hDispatchDriver
19448>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19449>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
19450>>>>>>>>>    End_Procedure
19451>>>>>>>>>
19451>>>>>>>>>    Function ComTop Returns Integer
19453>>>>>>>>>        Handle hDispatchDriver
19453>>>>>>>>>        Integer retVal
19453>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19454>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
19455>>>>>>>>>        Function_Return retVal
19456>>>>>>>>>    End_Function
19457>>>>>>>>>
19457>>>>>>>>>    Function ComLeft Returns Integer
19459>>>>>>>>>        Handle hDispatchDriver
19459>>>>>>>>>        Integer retVal
19459>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19460>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
19461>>>>>>>>>        Function_Return retVal
19462>>>>>>>>>    End_Function
19463>>>>>>>>>
19463>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
19465>>>>>>>>>        Handle hDispatchDriver
19465>>>>>>>>>        Variant retVal
19465>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19466>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19467>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
19468>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
19469>>>>>>>>>        Function_Return retVal
19470>>>>>>>>>    End_Function
19471>>>>>>>>>
19471>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
19473>>>>>>>>>        Handle hDispatchDriver
19473>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19474>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
19475>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
19476>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
19477>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
19478>>>>>>>>>    End_Procedure
19479>>>>>>>>>
19479>>>>>>>>>    Procedure ComSetItemsMargin Integer llLeft Integer llTop Integer llRight Integer llBottom
19481>>>>>>>>>        Handle hDispatchDriver
19481>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19482>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
19483>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
19484>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
19485>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
19486>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
19487>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 59 OLE_VT_VOID
19488>>>>>>>>>    End_Procedure
19489>>>>>>>>>
19489>>>>>>>>>    Procedure ComEnsureVisible Integer llIndex
19491>>>>>>>>>        Handle hDispatchDriver
19491>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19492>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19493>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
19494>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 61 OLE_VT_VOID
19495>>>>>>>>>    End_Procedure
19496>>>>>>>>>End_Class
19497>>>>>>>>>
19497>>>>>>>>>// CoClass
19497>>>>>>>>>// CLSID: {C0DE2000-AD3D-450F-A51C-F3928CA3D480}
19497>>>>>>>>>Class cCJCommandBarGallery is a cComAutomationObject
19498>>>>>>>>>    Import_Class_Protocol cCJICommandBarGallery
19499>>>>>>>>>
19499>>>>>>>>>    Procedure Construct_Object
19501>>>>>>>>>        Forward Send Construct_Object
19503>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
19504>>>>>>>>>    End_Procedure
19505>>>>>>>>>End_Class
19506>>>>>>>>>
19506>>>>>>>>>// CLSID: {C0DE2000-1A6F-478C-8C8D-38C067A2BC1F}
19506>>>>>>>>>Class cCJICommandBarComboBox is a Mixin
19507>>>>>>>>>
19507>>>>>>>>>    Function ComChecked Returns Boolean
19509>>>>>>>>>        Boolean retVal
19509>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
19510>>>>>>>>>        Function_Return retVal
19511>>>>>>>>>    End_Function
19512>>>>>>>>>
19512>>>>>>>>>    Procedure Set ComChecked Boolean value
19514>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
19515>>>>>>>>>    End_Procedure
19516>>>>>>>>>
19516>>>>>>>>>    Function ComBeginGroup Returns Boolean
19518>>>>>>>>>        Boolean retVal
19518>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
19519>>>>>>>>>        Function_Return retVal
19520>>>>>>>>>    End_Function
19521>>>>>>>>>
19521>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
19523>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
19524>>>>>>>>>    End_Procedure
19525>>>>>>>>>
19525>>>>>>>>>    Function ComCaption Returns String
19527>>>>>>>>>        String retVal
19527>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
19528>>>>>>>>>        Function_Return retVal
19529>>>>>>>>>    End_Function
19530>>>>>>>>>
19530>>>>>>>>>    Procedure Set ComCaption String value
19532>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
19533>>>>>>>>>    End_Procedure
19534>>>>>>>>>
19534>>>>>>>>>    Function ComDescriptionText Returns String
19536>>>>>>>>>        String retVal
19536>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
19537>>>>>>>>>        Function_Return retVal
19538>>>>>>>>>    End_Function
19539>>>>>>>>>
19539>>>>>>>>>    Procedure Set ComDescriptionText String value
19541>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
19542>>>>>>>>>    End_Procedure
19543>>>>>>>>>
19543>>>>>>>>>    Function ComId Returns Integer
19545>>>>>>>>>        Integer retVal
19545>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
19546>>>>>>>>>        Function_Return retVal
19547>>>>>>>>>    End_Function
19548>>>>>>>>>
19548>>>>>>>>>    Procedure Set ComId Integer value
19550>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
19551>>>>>>>>>    End_Procedure
19552>>>>>>>>>
19552>>>>>>>>>    Function ComParameter Returns String
19554>>>>>>>>>        String retVal
19554>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
19555>>>>>>>>>        Function_Return retVal
19556>>>>>>>>>    End_Function
19557>>>>>>>>>
19557>>>>>>>>>    Procedure Set ComParameter String value
19559>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
19560>>>>>>>>>    End_Procedure
19561>>>>>>>>>
19561>>>>>>>>>    Function ComShortcutText Returns String
19563>>>>>>>>>        String retVal
19563>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
19564>>>>>>>>>        Function_Return retVal
19565>>>>>>>>>    End_Function
19566>>>>>>>>>
19566>>>>>>>>>    Procedure Set ComShortcutText String value
19568>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
19569>>>>>>>>>    End_Procedure
19570>>>>>>>>>
19570>>>>>>>>>    Function ComCustomShortcutText Returns String
19572>>>>>>>>>        String retVal
19572>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
19573>>>>>>>>>        Function_Return retVal
19574>>>>>>>>>    End_Function
19575>>>>>>>>>
19575>>>>>>>>>    Procedure Set ComCustomShortcutText String value
19577>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
19578>>>>>>>>>    End_Procedure
19579>>>>>>>>>
19579>>>>>>>>>    Function ComTooltipText Returns String
19581>>>>>>>>>        String retVal
19581>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
19582>>>>>>>>>        Function_Return retVal
19583>>>>>>>>>    End_Function
19584>>>>>>>>>
19584>>>>>>>>>    Procedure Set ComTooltipText String value
19586>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
19587>>>>>>>>>    End_Procedure
19588>>>>>>>>>
19588>>>>>>>>>    Function ComVisible Returns Boolean
19590>>>>>>>>>        Boolean retVal
19590>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
19591>>>>>>>>>        Function_Return retVal
19592>>>>>>>>>    End_Function
19593>>>>>>>>>
19593>>>>>>>>>    Procedure Set ComVisible Boolean value
19595>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
19596>>>>>>>>>    End_Procedure
19597>>>>>>>>>
19597>>>>>>>>>    Function ComEnabled Returns Boolean
19599>>>>>>>>>        Boolean retVal
19599>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
19600>>>>>>>>>        Function_Return retVal
19601>>>>>>>>>    End_Function
19602>>>>>>>>>
19602>>>>>>>>>    Procedure Set ComEnabled Boolean value
19604>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
19605>>>>>>>>>    End_Procedure
19606>>>>>>>>>
19606>>>>>>>>>    Function ComIconId Returns Integer
19608>>>>>>>>>        Integer retVal
19608>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
19609>>>>>>>>>        Function_Return retVal
19610>>>>>>>>>    End_Function
19611>>>>>>>>>
19611>>>>>>>>>    Procedure Set ComIconId Integer value
19613>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
19614>>>>>>>>>    End_Procedure
19615>>>>>>>>>
19615>>>>>>>>>    Function ComDefaultItem Returns Boolean
19617>>>>>>>>>        Boolean retVal
19617>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
19618>>>>>>>>>        Function_Return retVal
19619>>>>>>>>>    End_Function
19620>>>>>>>>>
19620>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
19622>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
19623>>>>>>>>>    End_Procedure
19624>>>>>>>>>
19624>>>>>>>>>    Function ComFlags Returns XTPControlFlags
19626>>>>>>>>>        XTPControlFlags retVal
19626>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
19627>>>>>>>>>        Function_Return retVal
19628>>>>>>>>>    End_Function
19629>>>>>>>>>
19629>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
19631>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
19632>>>>>>>>>    End_Procedure
19633>>>>>>>>>
19633>>>>>>>>>    Function ComCategory Returns String
19635>>>>>>>>>        String retVal
19635>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
19636>>>>>>>>>        Function_Return retVal
19637>>>>>>>>>    End_Function
19638>>>>>>>>>
19638>>>>>>>>>    Procedure Set ComCategory String value
19640>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
19641>>>>>>>>>    End_Procedure
19642>>>>>>>>>
19642>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
19644>>>>>>>>>        XTPControlHideFlags retVal
19644>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
19645>>>>>>>>>        Function_Return retVal
19646>>>>>>>>>    End_Function
19647>>>>>>>>>
19647>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
19649>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
19650>>>>>>>>>    End_Procedure
19651>>>>>>>>>
19651>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
19653>>>>>>>>>        Boolean retVal
19653>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
19654>>>>>>>>>        Function_Return retVal
19655>>>>>>>>>    End_Function
19656>>>>>>>>>
19656>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
19658>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
19659>>>>>>>>>    End_Procedure
19660>>>>>>>>>
19660>>>>>>>>>    Function ComAction Returns Variant
19662>>>>>>>>>        Variant retVal
19662>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
19663>>>>>>>>>        Function_Return retVal
19664>>>>>>>>>    End_Function
19665>>>>>>>>>
19665>>>>>>>>>    Procedure Set ComAction Variant value
19667>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
19668>>>>>>>>>    End_Procedure
19669>>>>>>>>>
19669>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
19671>>>>>>>>>        Integer retVal
19671>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
19672>>>>>>>>>        Function_Return retVal
19673>>>>>>>>>    End_Function
19674>>>>>>>>>
19674>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
19676>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
19677>>>>>>>>>    End_Procedure
19678>>>>>>>>>
19678>>>>>>>>>    Function ComWidth Returns Integer
19680>>>>>>>>>        Integer retVal
19680>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
19681>>>>>>>>>        Function_Return retVal
19682>>>>>>>>>    End_Function
19683>>>>>>>>>
19683>>>>>>>>>    Procedure Set ComWidth Integer value
19685>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
19686>>>>>>>>>    End_Procedure
19687>>>>>>>>>
19687>>>>>>>>>    Function ComHeight Returns Integer
19689>>>>>>>>>        Integer retVal
19689>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
19690>>>>>>>>>        Function_Return retVal
19691>>>>>>>>>    End_Function
19692>>>>>>>>>
19692>>>>>>>>>    Procedure Set ComHeight Integer value
19694>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
19695>>>>>>>>>    End_Procedure
19696>>>>>>>>>
19696>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
19698>>>>>>>>>        XTPButtonStyle retVal
19698>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
19699>>>>>>>>>        Function_Return retVal
19700>>>>>>>>>    End_Function
19701>>>>>>>>>
19701>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
19703>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
19704>>>>>>>>>    End_Procedure
19705>>>>>>>>>
19705>>>>>>>>>    Function ComKeyboardTip Returns String
19707>>>>>>>>>        String retVal
19707>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
19708>>>>>>>>>        Function_Return retVal
19709>>>>>>>>>    End_Function
19710>>>>>>>>>
19710>>>>>>>>>    Procedure Set ComKeyboardTip String value
19712>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
19713>>>>>>>>>    End_Procedure
19714>>>>>>>>>
19714>>>>>>>>>    Function ComCommandBar Returns Variant
19716>>>>>>>>>        Variant retVal
19716>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
19717>>>>>>>>>        Function_Return retVal
19718>>>>>>>>>    End_Function
19719>>>>>>>>>
19719>>>>>>>>>    Procedure Set ComCommandBar Variant value
19721>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
19722>>>>>>>>>    End_Procedure
19723>>>>>>>>>
19723>>>>>>>>>    Function ComDropDownWidth Returns Integer
19725>>>>>>>>>        Integer retVal
19725>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
19726>>>>>>>>>        Function_Return retVal
19727>>>>>>>>>    End_Function
19728>>>>>>>>>
19728>>>>>>>>>    Procedure Set ComDropDownWidth Integer value
19730>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
19731>>>>>>>>>    End_Procedure
19732>>>>>>>>>
19732>>>>>>>>>    Function ComDropDownListStyle Returns Boolean
19734>>>>>>>>>        Boolean retVal
19734>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BOOL to retVal
19735>>>>>>>>>        Function_Return retVal
19736>>>>>>>>>    End_Function
19737>>>>>>>>>
19737>>>>>>>>>    Procedure Set ComDropDownListStyle Boolean value
19739>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BOOL to value
19740>>>>>>>>>    End_Procedure
19741>>>>>>>>>
19741>>>>>>>>>    Function ComListIndex Returns Integer
19743>>>>>>>>>        Integer retVal
19743>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_I4 to retVal
19744>>>>>>>>>        Function_Return retVal
19745>>>>>>>>>    End_Function
19746>>>>>>>>>
19746>>>>>>>>>    Procedure Set ComListIndex Integer value
19748>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_I4 to value
19749>>>>>>>>>    End_Procedure
19750>>>>>>>>>
19750>>>>>>>>>    Function ComText Returns String
19752>>>>>>>>>        String retVal
19752>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 59 OLE_VT_BSTR to retVal
19753>>>>>>>>>        Function_Return retVal
19754>>>>>>>>>    End_Function
19755>>>>>>>>>
19755>>>>>>>>>    Procedure Set ComText String value
19757>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 59 OLE_VT_BSTR to value
19758>>>>>>>>>    End_Procedure
19759>>>>>>>>>
19759>>>>>>>>>    Function ComEditHint Returns String
19761>>>>>>>>>        String retVal
19761>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 67 OLE_VT_BSTR to retVal
19762>>>>>>>>>        Function_Return retVal
19763>>>>>>>>>    End_Function
19764>>>>>>>>>
19764>>>>>>>>>    Procedure Set ComEditHint String value
19766>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 67 OLE_VT_BSTR to value
19767>>>>>>>>>    End_Procedure
19768>>>>>>>>>
19768>>>>>>>>>    Function ComAutoComplete Returns Boolean
19770>>>>>>>>>        Boolean retVal
19770>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 68 OLE_VT_BOOL to retVal
19771>>>>>>>>>        Function_Return retVal
19772>>>>>>>>>    End_Function
19773>>>>>>>>>
19773>>>>>>>>>    Procedure Set ComAutoComplete Boolean value
19775>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 68 OLE_VT_BOOL to value
19776>>>>>>>>>    End_Procedure
19777>>>>>>>>>
19777>>>>>>>>>    Function ComShellAutoComplete Returns XTPShellAutoCompleteFlags
19779>>>>>>>>>        XTPShellAutoCompleteFlags retVal
19779>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_I4 to retVal
19780>>>>>>>>>        Function_Return retVal
19781>>>>>>>>>    End_Function
19782>>>>>>>>>
19782>>>>>>>>>    Procedure Set ComShellAutoComplete XTPShellAutoCompleteFlags value
19784>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_I4 to value
19785>>>>>>>>>    End_Procedure
19786>>>>>>>>>
19786>>>>>>>>>    Function ComEditIconId Returns Integer
19788>>>>>>>>>        Integer retVal
19788>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_I4 to retVal
19789>>>>>>>>>        Function_Return retVal
19790>>>>>>>>>    End_Function
19791>>>>>>>>>
19791>>>>>>>>>    Procedure Set ComEditIconId Integer value
19793>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_I4 to value
19794>>>>>>>>>    End_Procedure
19795>>>>>>>>>
19795>>>>>>>>>    Function ComEditStyle Returns XTPCommandBarEditStyle
19797>>>>>>>>>        XTPCommandBarEditStyle retVal
19797>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_I4 to retVal
19798>>>>>>>>>        Function_Return retVal
19799>>>>>>>>>    End_Function
19800>>>>>>>>>
19800>>>>>>>>>    Procedure Set ComEditStyle XTPCommandBarEditStyle value
19802>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_I4 to value
19803>>>>>>>>>    End_Procedure
19804>>>>>>>>>
19804>>>>>>>>>    Function ComDropDownItemCount Returns Integer
19806>>>>>>>>>        Integer retVal
19806>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 72 OLE_VT_I4 to retVal
19807>>>>>>>>>        Function_Return retVal
19808>>>>>>>>>    End_Function
19809>>>>>>>>>
19809>>>>>>>>>    Procedure Set ComDropDownItemCount Integer value
19811>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 72 OLE_VT_I4 to value
19812>>>>>>>>>    End_Procedure
19813>>>>>>>>>
19813>>>>>>>>>    Function ComThemedItems Returns Boolean
19815>>>>>>>>>        Boolean retVal
19815>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 73 OLE_VT_BOOL to retVal
19816>>>>>>>>>        Function_Return retVal
19817>>>>>>>>>    End_Function
19818>>>>>>>>>
19818>>>>>>>>>    Procedure Set ComThemedItems Boolean value
19820>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 73 OLE_VT_BOOL to value
19821>>>>>>>>>    End_Procedure
19822>>>>>>>>>
19822>>>>>>>>>    Function ComListIconId Returns Integer
19824>>>>>>>>>        Integer retVal
19824>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 74 OLE_VT_I4 to retVal
19825>>>>>>>>>        Function_Return retVal
19826>>>>>>>>>    End_Function
19827>>>>>>>>>
19827>>>>>>>>>    Procedure Set ComListIconId Integer value
19829>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 74 OLE_VT_I4 to value
19830>>>>>>>>>    End_Procedure
19831>>>>>>>>>
19831>>>>>>>>>    Function ComTextLimit Returns Integer
19833>>>>>>>>>        Integer retVal
19833>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 80 OLE_VT_I4 to retVal
19834>>>>>>>>>        Function_Return retVal
19835>>>>>>>>>    End_Function
19836>>>>>>>>>
19836>>>>>>>>>    Procedure Set ComTextLimit Integer value
19838>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 80 OLE_VT_I4 to value
19839>>>>>>>>>    End_Procedure
19840>>>>>>>>>
19840>>>>>>>>>    Function ComControls Returns Variant
19842>>>>>>>>>        Handle hDispatchDriver
19842>>>>>>>>>        Variant retVal
19842>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19843>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
19844>>>>>>>>>        Function_Return retVal
19845>>>>>>>>>    End_Function
19846>>>>>>>>>
19846>>>>>>>>>    Function ComParent Returns Variant
19848>>>>>>>>>        Handle hDispatchDriver
19848>>>>>>>>>        Variant retVal
19848>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19849>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
19850>>>>>>>>>        Function_Return retVal
19851>>>>>>>>>    End_Function
19852>>>>>>>>>
19852>>>>>>>>>    Function ComIndex Returns Integer
19854>>>>>>>>>        Handle hDispatchDriver
19854>>>>>>>>>        Integer retVal
19854>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19855>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
19856>>>>>>>>>        Function_Return retVal
19857>>>>>>>>>    End_Function
19858>>>>>>>>>
19858>>>>>>>>>    Function ComType Returns XTPControlType
19860>>>>>>>>>        Handle hDispatchDriver
19860>>>>>>>>>        XTPControlType retVal
19860>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19861>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
19862>>>>>>>>>        Function_Return retVal
19863>>>>>>>>>    End_Function
19864>>>>>>>>>
19864>>>>>>>>>    Procedure ComDelete
19866>>>>>>>>>        Handle hDispatchDriver
19866>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19867>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
19868>>>>>>>>>    End_Procedure
19869>>>>>>>>>
19869>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
19871>>>>>>>>>        Handle hDispatchDriver
19871>>>>>>>>>        Variant retVal
19871>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19872>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
19873>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
19874>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
19875>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
19876>>>>>>>>>        Function_Return retVal
19877>>>>>>>>>    End_Function
19878>>>>>>>>>
19878>>>>>>>>>    Procedure ComSetFocus
19880>>>>>>>>>        Handle hDispatchDriver
19880>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19881>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
19882>>>>>>>>>    End_Procedure
19883>>>>>>>>>
19883>>>>>>>>>    Procedure ComExecute
19885>>>>>>>>>        Handle hDispatchDriver
19885>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19886>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
19887>>>>>>>>>    End_Procedure
19888>>>>>>>>>
19888>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
19890>>>>>>>>>        Handle hDispatchDriver
19890>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19891>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
19892>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
19893>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
19894>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
19895>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
19896>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
19897>>>>>>>>>    End_Procedure
19898>>>>>>>>>
19898>>>>>>>>>    Function ComRibbonGroup Returns Variant
19900>>>>>>>>>        Handle hDispatchDriver
19900>>>>>>>>>        Variant retVal
19900>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19901>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
19902>>>>>>>>>        Function_Return retVal
19903>>>>>>>>>    End_Function
19904>>>>>>>>>
19904>>>>>>>>>    Procedure ComReset
19906>>>>>>>>>        Handle hDispatchDriver
19906>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19907>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
19908>>>>>>>>>    End_Procedure
19909>>>>>>>>>
19909>>>>>>>>>    Function ComTop Returns Integer
19911>>>>>>>>>        Handle hDispatchDriver
19911>>>>>>>>>        Integer retVal
19911>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19912>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
19913>>>>>>>>>        Function_Return retVal
19914>>>>>>>>>    End_Function
19915>>>>>>>>>
19915>>>>>>>>>    Function ComLeft Returns Integer
19917>>>>>>>>>        Handle hDispatchDriver
19917>>>>>>>>>        Integer retVal
19917>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19918>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
19919>>>>>>>>>        Function_Return retVal
19920>>>>>>>>>    End_Function
19921>>>>>>>>>
19921>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
19923>>>>>>>>>        Handle hDispatchDriver
19923>>>>>>>>>        Variant retVal
19923>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19924>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19925>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
19926>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
19927>>>>>>>>>        Function_Return retVal
19928>>>>>>>>>    End_Function
19929>>>>>>>>>
19929>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
19931>>>>>>>>>        Handle hDispatchDriver
19931>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19932>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
19933>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
19934>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
19935>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
19936>>>>>>>>>    End_Procedure
19937>>>>>>>>>
19937>>>>>>>>>    Procedure ComAddItem String llText Variant llIndex
19939>>>>>>>>>        Handle hDispatchDriver
19939>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19940>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
19941>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
19942>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llIndex
19943>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 51 OLE_VT_VOID
19944>>>>>>>>>    End_Procedure
19945>>>>>>>>>
19945>>>>>>>>>    Function ComList Integer llIndex Returns String
19947>>>>>>>>>        Handle hDispatchDriver
19947>>>>>>>>>        String retVal
19947>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19948>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19949>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
19950>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 55 OLE_VT_BSTR to retVal
19951>>>>>>>>>        Function_Return retVal
19952>>>>>>>>>    End_Function
19953>>>>>>>>>
19953>>>>>>>>>    Procedure ComClear
19955>>>>>>>>>        Handle hDispatchDriver
19955>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19956>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 56 OLE_VT_VOID
19957>>>>>>>>>    End_Procedure
19958>>>>>>>>>
19958>>>>>>>>>    Function ComListCount Returns Integer
19960>>>>>>>>>        Handle hDispatchDriver
19960>>>>>>>>>        Integer retVal
19960>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19961>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 57 OLE_VT_I4 to retVal
19962>>>>>>>>>        Function_Return retVal
19963>>>>>>>>>    End_Function
19964>>>>>>>>>
19964>>>>>>>>>    Procedure ComRemoveItem Integer llnIndex
19966>>>>>>>>>        Handle hDispatchDriver
19966>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19967>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19968>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIndex
19969>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 58 OLE_VT_VOID
19970>>>>>>>>>    End_Procedure
19971>>>>>>>>>
19971>>>>>>>>>    Function ComFindItem String llText Returns Integer
19973>>>>>>>>>        Handle hDispatchDriver
19973>>>>>>>>>        Integer retVal
19973>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19974>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19975>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
19976>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 61 OLE_VT_I4 to retVal
19977>>>>>>>>>        Function_Return retVal
19978>>>>>>>>>    End_Function
19979>>>>>>>>>
19979>>>>>>>>>    Function ComItemData Integer llIndex Returns Integer
19981>>>>>>>>>        Handle hDispatchDriver
19981>>>>>>>>>        Integer retVal
19981>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19982>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19983>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
19984>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 62 OLE_VT_I4 to retVal
19985>>>>>>>>>        Function_Return retVal
19986>>>>>>>>>    End_Function
19987>>>>>>>>>
19987>>>>>>>>>    Procedure Set ComItemData Integer llIndex Integer value
19989>>>>>>>>>        Handle hDispatchDriver
19989>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19990>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
19991>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
19992>>>>>>>>>        Set ComProperty of hDispatchDriver 62 OLE_VT_I4 to value
19993>>>>>>>>>    End_Procedure
19994>>>>>>>>>
19994>>>>>>>>>    Function ComEditHandle Returns OLE_HANDLE
19996>>>>>>>>>        Handle hDispatchDriver
19996>>>>>>>>>        OLE_HANDLE retVal
19996>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19997>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 63 OLE_VT_I4 to retVal
19998>>>>>>>>>        Function_Return retVal
19999>>>>>>>>>    End_Function
20000>>>>>>>>>
20000>>>>>>>>>    Function ComHasFocus Returns Boolean
20002>>>>>>>>>        Handle hDispatchDriver
20002>>>>>>>>>        Boolean retVal
20002>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20003>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 66 OLE_VT_BOOL to retVal
20004>>>>>>>>>        Function_Return retVal
20005>>>>>>>>>    End_Function
20006>>>>>>>>>End_Class
20007>>>>>>>>>
20007>>>>>>>>>// CoClass
20007>>>>>>>>>// CLSID: {C0DE2000-B90A-44F8-86C2-B28D4540ABFA}
20007>>>>>>>>>Class cCJCommandBarComboBox is a cComAutomationObject
20008>>>>>>>>>    Import_Class_Protocol cCJICommandBarComboBox
20009>>>>>>>>>
20009>>>>>>>>>    Procedure Construct_Object
20011>>>>>>>>>        Forward Send Construct_Object
20013>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
20014>>>>>>>>>    End_Procedure
20015>>>>>>>>>End_Class
20016>>>>>>>>>
20016>>>>>>>>>// CLSID: {C0DE2000-5C60-475B-A774-4B22FAC0B9EC}
20016>>>>>>>>>Class cCJICommandBarCheckBox is a Mixin
20017>>>>>>>>>
20017>>>>>>>>>    Function ComChecked Returns Integer
20019>>>>>>>>>        Integer retVal
20019>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_I4 to retVal
20020>>>>>>>>>        Function_Return retVal
20021>>>>>>>>>    End_Function
20022>>>>>>>>>
20022>>>>>>>>>    Procedure Set ComChecked Integer value
20024>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_I4 to value
20025>>>>>>>>>    End_Procedure
20026>>>>>>>>>
20026>>>>>>>>>    Function ComBeginGroup Returns Boolean
20028>>>>>>>>>        Boolean retVal
20028>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
20029>>>>>>>>>        Function_Return retVal
20030>>>>>>>>>    End_Function
20031>>>>>>>>>
20031>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
20033>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
20034>>>>>>>>>    End_Procedure
20035>>>>>>>>>
20035>>>>>>>>>    Function ComCaption Returns String
20037>>>>>>>>>        String retVal
20037>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
20038>>>>>>>>>        Function_Return retVal
20039>>>>>>>>>    End_Function
20040>>>>>>>>>
20040>>>>>>>>>    Procedure Set ComCaption String value
20042>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
20043>>>>>>>>>    End_Procedure
20044>>>>>>>>>
20044>>>>>>>>>    Function ComDescriptionText Returns String
20046>>>>>>>>>        String retVal
20046>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
20047>>>>>>>>>        Function_Return retVal
20048>>>>>>>>>    End_Function
20049>>>>>>>>>
20049>>>>>>>>>    Procedure Set ComDescriptionText String value
20051>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
20052>>>>>>>>>    End_Procedure
20053>>>>>>>>>
20053>>>>>>>>>    Function ComId Returns Integer
20055>>>>>>>>>        Integer retVal
20055>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
20056>>>>>>>>>        Function_Return retVal
20057>>>>>>>>>    End_Function
20058>>>>>>>>>
20058>>>>>>>>>    Procedure Set ComId Integer value
20060>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
20061>>>>>>>>>    End_Procedure
20062>>>>>>>>>
20062>>>>>>>>>    Function ComParameter Returns String
20064>>>>>>>>>        String retVal
20064>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
20065>>>>>>>>>        Function_Return retVal
20066>>>>>>>>>    End_Function
20067>>>>>>>>>
20067>>>>>>>>>    Procedure Set ComParameter String value
20069>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
20070>>>>>>>>>    End_Procedure
20071>>>>>>>>>
20071>>>>>>>>>    Function ComShortcutText Returns String
20073>>>>>>>>>        String retVal
20073>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
20074>>>>>>>>>        Function_Return retVal
20075>>>>>>>>>    End_Function
20076>>>>>>>>>
20076>>>>>>>>>    Procedure Set ComShortcutText String value
20078>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
20079>>>>>>>>>    End_Procedure
20080>>>>>>>>>
20080>>>>>>>>>    Function ComCustomShortcutText Returns String
20082>>>>>>>>>        String retVal
20082>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
20083>>>>>>>>>        Function_Return retVal
20084>>>>>>>>>    End_Function
20085>>>>>>>>>
20085>>>>>>>>>    Procedure Set ComCustomShortcutText String value
20087>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
20088>>>>>>>>>    End_Procedure
20089>>>>>>>>>
20089>>>>>>>>>    Function ComTooltipText Returns String
20091>>>>>>>>>        String retVal
20091>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
20092>>>>>>>>>        Function_Return retVal
20093>>>>>>>>>    End_Function
20094>>>>>>>>>
20094>>>>>>>>>    Procedure Set ComTooltipText String value
20096>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
20097>>>>>>>>>    End_Procedure
20098>>>>>>>>>
20098>>>>>>>>>    Function ComVisible Returns Boolean
20100>>>>>>>>>        Boolean retVal
20100>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
20101>>>>>>>>>        Function_Return retVal
20102>>>>>>>>>    End_Function
20103>>>>>>>>>
20103>>>>>>>>>    Procedure Set ComVisible Boolean value
20105>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
20106>>>>>>>>>    End_Procedure
20107>>>>>>>>>
20107>>>>>>>>>    Function ComEnabled Returns Boolean
20109>>>>>>>>>        Boolean retVal
20109>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
20110>>>>>>>>>        Function_Return retVal
20111>>>>>>>>>    End_Function
20112>>>>>>>>>
20112>>>>>>>>>    Procedure Set ComEnabled Boolean value
20114>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
20115>>>>>>>>>    End_Procedure
20116>>>>>>>>>
20116>>>>>>>>>    Function ComIconId Returns Integer
20118>>>>>>>>>        Integer retVal
20118>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
20119>>>>>>>>>        Function_Return retVal
20120>>>>>>>>>    End_Function
20121>>>>>>>>>
20121>>>>>>>>>    Procedure Set ComIconId Integer value
20123>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
20124>>>>>>>>>    End_Procedure
20125>>>>>>>>>
20125>>>>>>>>>    Function ComDefaultItem Returns Boolean
20127>>>>>>>>>        Boolean retVal
20127>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
20128>>>>>>>>>        Function_Return retVal
20129>>>>>>>>>    End_Function
20130>>>>>>>>>
20130>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
20132>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
20133>>>>>>>>>    End_Procedure
20134>>>>>>>>>
20134>>>>>>>>>    Function ComFlags Returns XTPControlFlags
20136>>>>>>>>>        XTPControlFlags retVal
20136>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
20137>>>>>>>>>        Function_Return retVal
20138>>>>>>>>>    End_Function
20139>>>>>>>>>
20139>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
20141>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
20142>>>>>>>>>    End_Procedure
20143>>>>>>>>>
20143>>>>>>>>>    Function ComCategory Returns String
20145>>>>>>>>>        String retVal
20145>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
20146>>>>>>>>>        Function_Return retVal
20147>>>>>>>>>    End_Function
20148>>>>>>>>>
20148>>>>>>>>>    Procedure Set ComCategory String value
20150>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
20151>>>>>>>>>    End_Procedure
20152>>>>>>>>>
20152>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
20154>>>>>>>>>        XTPControlHideFlags retVal
20154>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
20155>>>>>>>>>        Function_Return retVal
20156>>>>>>>>>    End_Function
20157>>>>>>>>>
20157>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
20159>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
20160>>>>>>>>>    End_Procedure
20161>>>>>>>>>
20161>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
20163>>>>>>>>>        Boolean retVal
20163>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
20164>>>>>>>>>        Function_Return retVal
20165>>>>>>>>>    End_Function
20166>>>>>>>>>
20166>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
20168>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
20169>>>>>>>>>    End_Procedure
20170>>>>>>>>>
20170>>>>>>>>>    Function ComAction Returns Variant
20172>>>>>>>>>        Variant retVal
20172>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
20173>>>>>>>>>        Function_Return retVal
20174>>>>>>>>>    End_Function
20175>>>>>>>>>
20175>>>>>>>>>    Procedure Set ComAction Variant value
20177>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
20178>>>>>>>>>    End_Procedure
20179>>>>>>>>>
20179>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
20181>>>>>>>>>        Integer retVal
20181>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
20182>>>>>>>>>        Function_Return retVal
20183>>>>>>>>>    End_Function
20184>>>>>>>>>
20184>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
20186>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
20187>>>>>>>>>    End_Procedure
20188>>>>>>>>>
20188>>>>>>>>>    Function ComWidth Returns Integer
20190>>>>>>>>>        Integer retVal
20190>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
20191>>>>>>>>>        Function_Return retVal
20192>>>>>>>>>    End_Function
20193>>>>>>>>>
20193>>>>>>>>>    Procedure Set ComWidth Integer value
20195>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
20196>>>>>>>>>    End_Procedure
20197>>>>>>>>>
20197>>>>>>>>>    Function ComHeight Returns Integer
20199>>>>>>>>>        Integer retVal
20199>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
20200>>>>>>>>>        Function_Return retVal
20201>>>>>>>>>    End_Function
20202>>>>>>>>>
20202>>>>>>>>>    Procedure Set ComHeight Integer value
20204>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
20205>>>>>>>>>    End_Procedure
20206>>>>>>>>>
20206>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
20208>>>>>>>>>        XTPButtonStyle retVal
20208>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
20209>>>>>>>>>        Function_Return retVal
20210>>>>>>>>>    End_Function
20211>>>>>>>>>
20211>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
20213>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
20214>>>>>>>>>    End_Procedure
20215>>>>>>>>>
20215>>>>>>>>>    Function ComKeyboardTip Returns String
20217>>>>>>>>>        String retVal
20217>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
20218>>>>>>>>>        Function_Return retVal
20219>>>>>>>>>    End_Function
20220>>>>>>>>>
20220>>>>>>>>>    Procedure Set ComKeyboardTip String value
20222>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
20223>>>>>>>>>    End_Procedure
20224>>>>>>>>>
20224>>>>>>>>>    Function ComControls Returns Variant
20226>>>>>>>>>        Handle hDispatchDriver
20226>>>>>>>>>        Variant retVal
20226>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20227>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
20228>>>>>>>>>        Function_Return retVal
20229>>>>>>>>>    End_Function
20230>>>>>>>>>
20230>>>>>>>>>    Function ComParent Returns Variant
20232>>>>>>>>>        Handle hDispatchDriver
20232>>>>>>>>>        Variant retVal
20232>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20233>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
20234>>>>>>>>>        Function_Return retVal
20235>>>>>>>>>    End_Function
20236>>>>>>>>>
20236>>>>>>>>>    Function ComIndex Returns Integer
20238>>>>>>>>>        Handle hDispatchDriver
20238>>>>>>>>>        Integer retVal
20238>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20239>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
20240>>>>>>>>>        Function_Return retVal
20241>>>>>>>>>    End_Function
20242>>>>>>>>>
20242>>>>>>>>>    Function ComType Returns XTPControlType
20244>>>>>>>>>        Handle hDispatchDriver
20244>>>>>>>>>        XTPControlType retVal
20244>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20245>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
20246>>>>>>>>>        Function_Return retVal
20247>>>>>>>>>    End_Function
20248>>>>>>>>>
20248>>>>>>>>>    Procedure ComDelete
20250>>>>>>>>>        Handle hDispatchDriver
20250>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20251>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
20252>>>>>>>>>    End_Procedure
20253>>>>>>>>>
20253>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
20255>>>>>>>>>        Handle hDispatchDriver
20255>>>>>>>>>        Variant retVal
20255>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20256>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20257>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
20258>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
20259>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
20260>>>>>>>>>        Function_Return retVal
20261>>>>>>>>>    End_Function
20262>>>>>>>>>
20262>>>>>>>>>    Procedure ComSetFocus
20264>>>>>>>>>        Handle hDispatchDriver
20264>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20265>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
20266>>>>>>>>>    End_Procedure
20267>>>>>>>>>
20267>>>>>>>>>    Procedure ComExecute
20269>>>>>>>>>        Handle hDispatchDriver
20269>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20270>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
20271>>>>>>>>>    End_Procedure
20272>>>>>>>>>
20272>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
20274>>>>>>>>>        Handle hDispatchDriver
20274>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20275>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
20276>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
20277>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
20278>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
20279>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
20280>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
20281>>>>>>>>>    End_Procedure
20282>>>>>>>>>
20282>>>>>>>>>    Function ComRibbonGroup Returns Variant
20284>>>>>>>>>        Handle hDispatchDriver
20284>>>>>>>>>        Variant retVal
20284>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20285>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
20286>>>>>>>>>        Function_Return retVal
20287>>>>>>>>>    End_Function
20288>>>>>>>>>
20288>>>>>>>>>    Procedure ComReset
20290>>>>>>>>>        Handle hDispatchDriver
20290>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20291>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
20292>>>>>>>>>    End_Procedure
20293>>>>>>>>>
20293>>>>>>>>>    Function ComTop Returns Integer
20295>>>>>>>>>        Handle hDispatchDriver
20295>>>>>>>>>        Integer retVal
20295>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20296>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
20297>>>>>>>>>        Function_Return retVal
20298>>>>>>>>>    End_Function
20299>>>>>>>>>
20299>>>>>>>>>    Function ComLeft Returns Integer
20301>>>>>>>>>        Handle hDispatchDriver
20301>>>>>>>>>        Integer retVal
20301>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20302>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
20303>>>>>>>>>        Function_Return retVal
20304>>>>>>>>>    End_Function
20305>>>>>>>>>
20305>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
20307>>>>>>>>>        Handle hDispatchDriver
20307>>>>>>>>>        Variant retVal
20307>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20308>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20309>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
20310>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
20311>>>>>>>>>        Function_Return retVal
20312>>>>>>>>>    End_Function
20313>>>>>>>>>
20313>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
20315>>>>>>>>>        Handle hDispatchDriver
20315>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20316>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20317>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
20318>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
20319>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
20320>>>>>>>>>    End_Procedure
20321>>>>>>>>>End_Class
20322>>>>>>>>>
20322>>>>>>>>>// CoClass
20322>>>>>>>>>// CLSID: {C0DE2000-6975-465C-B19C-FFA0021AAA05}
20322>>>>>>>>>Class cCJCommandBarCheckBox is a cComAutomationObject
20323>>>>>>>>>    Import_Class_Protocol cCJICommandBarCheckBox
20324>>>>>>>>>
20324>>>>>>>>>    Procedure Construct_Object
20326>>>>>>>>>        Forward Send Construct_Object
20328>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
20329>>>>>>>>>    End_Procedure
20330>>>>>>>>>End_Class
20331>>>>>>>>>
20331>>>>>>>>>// CLSID: {C0DE2000-7A03-46D9-B095-9FB1F825530D}
20331>>>>>>>>>Class cCJICommandBarEdit is a Mixin
20332>>>>>>>>>
20332>>>>>>>>>    Function ComChecked Returns Boolean
20334>>>>>>>>>        Boolean retVal
20334>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
20335>>>>>>>>>        Function_Return retVal
20336>>>>>>>>>    End_Function
20337>>>>>>>>>
20337>>>>>>>>>    Procedure Set ComChecked Boolean value
20339>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
20340>>>>>>>>>    End_Procedure
20341>>>>>>>>>
20341>>>>>>>>>    Function ComBeginGroup Returns Boolean
20343>>>>>>>>>        Boolean retVal
20343>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
20344>>>>>>>>>        Function_Return retVal
20345>>>>>>>>>    End_Function
20346>>>>>>>>>
20346>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
20348>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
20349>>>>>>>>>    End_Procedure
20350>>>>>>>>>
20350>>>>>>>>>    Function ComCaption Returns String
20352>>>>>>>>>        String retVal
20352>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
20353>>>>>>>>>        Function_Return retVal
20354>>>>>>>>>    End_Function
20355>>>>>>>>>
20355>>>>>>>>>    Procedure Set ComCaption String value
20357>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
20358>>>>>>>>>    End_Procedure
20359>>>>>>>>>
20359>>>>>>>>>    Function ComDescriptionText Returns String
20361>>>>>>>>>        String retVal
20361>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
20362>>>>>>>>>        Function_Return retVal
20363>>>>>>>>>    End_Function
20364>>>>>>>>>
20364>>>>>>>>>    Procedure Set ComDescriptionText String value
20366>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
20367>>>>>>>>>    End_Procedure
20368>>>>>>>>>
20368>>>>>>>>>    Function ComId Returns Integer
20370>>>>>>>>>        Integer retVal
20370>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
20371>>>>>>>>>        Function_Return retVal
20372>>>>>>>>>    End_Function
20373>>>>>>>>>
20373>>>>>>>>>    Procedure Set ComId Integer value
20375>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
20376>>>>>>>>>    End_Procedure
20377>>>>>>>>>
20377>>>>>>>>>    Function ComParameter Returns String
20379>>>>>>>>>        String retVal
20379>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
20380>>>>>>>>>        Function_Return retVal
20381>>>>>>>>>    End_Function
20382>>>>>>>>>
20382>>>>>>>>>    Procedure Set ComParameter String value
20384>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
20385>>>>>>>>>    End_Procedure
20386>>>>>>>>>
20386>>>>>>>>>    Function ComShortcutText Returns String
20388>>>>>>>>>        String retVal
20388>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
20389>>>>>>>>>        Function_Return retVal
20390>>>>>>>>>    End_Function
20391>>>>>>>>>
20391>>>>>>>>>    Procedure Set ComShortcutText String value
20393>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
20394>>>>>>>>>    End_Procedure
20395>>>>>>>>>
20395>>>>>>>>>    Function ComCustomShortcutText Returns String
20397>>>>>>>>>        String retVal
20397>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
20398>>>>>>>>>        Function_Return retVal
20399>>>>>>>>>    End_Function
20400>>>>>>>>>
20400>>>>>>>>>    Procedure Set ComCustomShortcutText String value
20402>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
20403>>>>>>>>>    End_Procedure
20404>>>>>>>>>
20404>>>>>>>>>    Function ComTooltipText Returns String
20406>>>>>>>>>        String retVal
20406>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
20407>>>>>>>>>        Function_Return retVal
20408>>>>>>>>>    End_Function
20409>>>>>>>>>
20409>>>>>>>>>    Procedure Set ComTooltipText String value
20411>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
20412>>>>>>>>>    End_Procedure
20413>>>>>>>>>
20413>>>>>>>>>    Function ComVisible Returns Boolean
20415>>>>>>>>>        Boolean retVal
20415>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
20416>>>>>>>>>        Function_Return retVal
20417>>>>>>>>>    End_Function
20418>>>>>>>>>
20418>>>>>>>>>    Procedure Set ComVisible Boolean value
20420>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
20421>>>>>>>>>    End_Procedure
20422>>>>>>>>>
20422>>>>>>>>>    Function ComEnabled Returns Boolean
20424>>>>>>>>>        Boolean retVal
20424>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
20425>>>>>>>>>        Function_Return retVal
20426>>>>>>>>>    End_Function
20427>>>>>>>>>
20427>>>>>>>>>    Procedure Set ComEnabled Boolean value
20429>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
20430>>>>>>>>>    End_Procedure
20431>>>>>>>>>
20431>>>>>>>>>    Function ComIconId Returns Integer
20433>>>>>>>>>        Integer retVal
20433>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
20434>>>>>>>>>        Function_Return retVal
20435>>>>>>>>>    End_Function
20436>>>>>>>>>
20436>>>>>>>>>    Procedure Set ComIconId Integer value
20438>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
20439>>>>>>>>>    End_Procedure
20440>>>>>>>>>
20440>>>>>>>>>    Function ComDefaultItem Returns Boolean
20442>>>>>>>>>        Boolean retVal
20442>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
20443>>>>>>>>>        Function_Return retVal
20444>>>>>>>>>    End_Function
20445>>>>>>>>>
20445>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
20447>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
20448>>>>>>>>>    End_Procedure
20449>>>>>>>>>
20449>>>>>>>>>    Function ComFlags Returns XTPControlFlags
20451>>>>>>>>>        XTPControlFlags retVal
20451>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
20452>>>>>>>>>        Function_Return retVal
20453>>>>>>>>>    End_Function
20454>>>>>>>>>
20454>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
20456>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
20457>>>>>>>>>    End_Procedure
20458>>>>>>>>>
20458>>>>>>>>>    Function ComCategory Returns String
20460>>>>>>>>>        String retVal
20460>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
20461>>>>>>>>>        Function_Return retVal
20462>>>>>>>>>    End_Function
20463>>>>>>>>>
20463>>>>>>>>>    Procedure Set ComCategory String value
20465>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
20466>>>>>>>>>    End_Procedure
20467>>>>>>>>>
20467>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
20469>>>>>>>>>        XTPControlHideFlags retVal
20469>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
20470>>>>>>>>>        Function_Return retVal
20471>>>>>>>>>    End_Function
20472>>>>>>>>>
20472>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
20474>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
20475>>>>>>>>>    End_Procedure
20476>>>>>>>>>
20476>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
20478>>>>>>>>>        Boolean retVal
20478>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
20479>>>>>>>>>        Function_Return retVal
20480>>>>>>>>>    End_Function
20481>>>>>>>>>
20481>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
20483>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
20484>>>>>>>>>    End_Procedure
20485>>>>>>>>>
20485>>>>>>>>>    Function ComAction Returns Variant
20487>>>>>>>>>        Variant retVal
20487>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
20488>>>>>>>>>        Function_Return retVal
20489>>>>>>>>>    End_Function
20490>>>>>>>>>
20490>>>>>>>>>    Procedure Set ComAction Variant value
20492>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
20493>>>>>>>>>    End_Procedure
20494>>>>>>>>>
20494>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
20496>>>>>>>>>        Integer retVal
20496>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
20497>>>>>>>>>        Function_Return retVal
20498>>>>>>>>>    End_Function
20499>>>>>>>>>
20499>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
20501>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
20502>>>>>>>>>    End_Procedure
20503>>>>>>>>>
20503>>>>>>>>>    Function ComWidth Returns Integer
20505>>>>>>>>>        Integer retVal
20505>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
20506>>>>>>>>>        Function_Return retVal
20507>>>>>>>>>    End_Function
20508>>>>>>>>>
20508>>>>>>>>>    Procedure Set ComWidth Integer value
20510>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
20511>>>>>>>>>    End_Procedure
20512>>>>>>>>>
20512>>>>>>>>>    Function ComHeight Returns Integer
20514>>>>>>>>>        Integer retVal
20514>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
20515>>>>>>>>>        Function_Return retVal
20516>>>>>>>>>    End_Function
20517>>>>>>>>>
20517>>>>>>>>>    Procedure Set ComHeight Integer value
20519>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
20520>>>>>>>>>    End_Procedure
20521>>>>>>>>>
20521>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
20523>>>>>>>>>        XTPButtonStyle retVal
20523>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
20524>>>>>>>>>        Function_Return retVal
20525>>>>>>>>>    End_Function
20526>>>>>>>>>
20526>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
20528>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
20529>>>>>>>>>    End_Procedure
20530>>>>>>>>>
20530>>>>>>>>>    Function ComKeyboardTip Returns String
20532>>>>>>>>>        String retVal
20532>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
20533>>>>>>>>>        Function_Return retVal
20534>>>>>>>>>    End_Function
20535>>>>>>>>>
20535>>>>>>>>>    Procedure Set ComKeyboardTip String value
20537>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
20538>>>>>>>>>    End_Procedure
20539>>>>>>>>>
20539>>>>>>>>>    Function ComShowLabel Returns Boolean
20541>>>>>>>>>        Boolean retVal
20541>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_BOOL to retVal
20542>>>>>>>>>        Function_Return retVal
20543>>>>>>>>>    End_Function
20544>>>>>>>>>
20544>>>>>>>>>    Procedure Set ComShowLabel Boolean value
20546>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_BOOL to value
20547>>>>>>>>>    End_Procedure
20548>>>>>>>>>
20548>>>>>>>>>    Function ComText Returns String
20550>>>>>>>>>        String retVal
20550>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 59 OLE_VT_BSTR to retVal
20551>>>>>>>>>        Function_Return retVal
20552>>>>>>>>>    End_Function
20553>>>>>>>>>
20553>>>>>>>>>    Procedure Set ComText String value
20555>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 59 OLE_VT_BSTR to value
20556>>>>>>>>>    End_Procedure
20557>>>>>>>>>
20557>>>>>>>>>    Function ComReadOnly Returns Boolean
20559>>>>>>>>>        Boolean retVal
20559>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_BOOL to retVal
20560>>>>>>>>>        Function_Return retVal
20561>>>>>>>>>    End_Function
20562>>>>>>>>>
20562>>>>>>>>>    Procedure Set ComReadOnly Boolean value
20564>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_BOOL to value
20565>>>>>>>>>    End_Procedure
20566>>>>>>>>>
20566>>>>>>>>>    Function ComEditHint Returns String
20568>>>>>>>>>        String retVal
20568>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 67 OLE_VT_BSTR to retVal
20569>>>>>>>>>        Function_Return retVal
20570>>>>>>>>>    End_Function
20571>>>>>>>>>
20571>>>>>>>>>    Procedure Set ComEditHint String value
20573>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 67 OLE_VT_BSTR to value
20574>>>>>>>>>    End_Procedure
20575>>>>>>>>>
20575>>>>>>>>>    Function ComShellAutoComplete Returns XTPShellAutoCompleteFlags
20577>>>>>>>>>        XTPShellAutoCompleteFlags retVal
20577>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_I4 to retVal
20578>>>>>>>>>        Function_Return retVal
20579>>>>>>>>>    End_Function
20580>>>>>>>>>
20580>>>>>>>>>    Procedure Set ComShellAutoComplete XTPShellAutoCompleteFlags value
20582>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_I4 to value
20583>>>>>>>>>    End_Procedure
20584>>>>>>>>>
20584>>>>>>>>>    Function ComEditIconId Returns Integer
20586>>>>>>>>>        Integer retVal
20586>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_I4 to retVal
20587>>>>>>>>>        Function_Return retVal
20588>>>>>>>>>    End_Function
20589>>>>>>>>>
20589>>>>>>>>>    Procedure Set ComEditIconId Integer value
20591>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_I4 to value
20592>>>>>>>>>    End_Procedure
20593>>>>>>>>>
20593>>>>>>>>>    Function ComEditStyle Returns XTPCommandBarEditStyle
20595>>>>>>>>>        XTPCommandBarEditStyle retVal
20595>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_I4 to retVal
20596>>>>>>>>>        Function_Return retVal
20597>>>>>>>>>    End_Function
20598>>>>>>>>>
20598>>>>>>>>>    Procedure Set ComEditStyle XTPCommandBarEditStyle value
20600>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_I4 to value
20601>>>>>>>>>    End_Procedure
20602>>>>>>>>>
20602>>>>>>>>>    Function ComShowSpinButtons Returns Boolean
20604>>>>>>>>>        Boolean retVal
20604>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 72 OLE_VT_BOOL to retVal
20605>>>>>>>>>        Function_Return retVal
20606>>>>>>>>>    End_Function
20607>>>>>>>>>
20607>>>>>>>>>    Procedure Set ComShowSpinButtons Boolean value
20609>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 72 OLE_VT_BOOL to value
20610>>>>>>>>>    End_Procedure
20611>>>>>>>>>
20611>>>>>>>>>    Function ComBuddyButtonId Returns Integer
20613>>>>>>>>>        Integer retVal
20613>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 81 OLE_VT_I4 to retVal
20614>>>>>>>>>        Function_Return retVal
20615>>>>>>>>>    End_Function
20616>>>>>>>>>
20616>>>>>>>>>    Procedure Set ComBuddyButtonId Integer value
20618>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 81 OLE_VT_I4 to value
20619>>>>>>>>>    End_Procedure
20620>>>>>>>>>
20620>>>>>>>>>    Function ComTextLimit Returns Integer
20622>>>>>>>>>        Integer retVal
20622>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 80 OLE_VT_I4 to retVal
20623>>>>>>>>>        Function_Return retVal
20624>>>>>>>>>    End_Function
20625>>>>>>>>>
20625>>>>>>>>>    Procedure Set ComTextLimit Integer value
20627>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 80 OLE_VT_I4 to value
20628>>>>>>>>>    End_Procedure
20629>>>>>>>>>
20629>>>>>>>>>    Function ComNumericOnly Returns Boolean
20631>>>>>>>>>        Boolean retVal
20631>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 82 OLE_VT_BOOL to retVal
20632>>>>>>>>>        Function_Return retVal
20633>>>>>>>>>    End_Function
20634>>>>>>>>>
20634>>>>>>>>>    Procedure Set ComNumericOnly Boolean value
20636>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 82 OLE_VT_BOOL to value
20637>>>>>>>>>    End_Procedure
20638>>>>>>>>>
20638>>>>>>>>>    Function ComControls Returns Variant
20640>>>>>>>>>        Handle hDispatchDriver
20640>>>>>>>>>        Variant retVal
20640>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20641>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
20642>>>>>>>>>        Function_Return retVal
20643>>>>>>>>>    End_Function
20644>>>>>>>>>
20644>>>>>>>>>    Function ComParent Returns Variant
20646>>>>>>>>>        Handle hDispatchDriver
20646>>>>>>>>>        Variant retVal
20646>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20647>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
20648>>>>>>>>>        Function_Return retVal
20649>>>>>>>>>    End_Function
20650>>>>>>>>>
20650>>>>>>>>>    Function ComIndex Returns Integer
20652>>>>>>>>>        Handle hDispatchDriver
20652>>>>>>>>>        Integer retVal
20652>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20653>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
20654>>>>>>>>>        Function_Return retVal
20655>>>>>>>>>    End_Function
20656>>>>>>>>>
20656>>>>>>>>>    Function ComType Returns XTPControlType
20658>>>>>>>>>        Handle hDispatchDriver
20658>>>>>>>>>        XTPControlType retVal
20658>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20659>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
20660>>>>>>>>>        Function_Return retVal
20661>>>>>>>>>    End_Function
20662>>>>>>>>>
20662>>>>>>>>>    Procedure ComDelete
20664>>>>>>>>>        Handle hDispatchDriver
20664>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20665>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
20666>>>>>>>>>    End_Procedure
20667>>>>>>>>>
20667>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
20669>>>>>>>>>        Handle hDispatchDriver
20669>>>>>>>>>        Variant retVal
20669>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20670>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20671>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
20672>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
20673>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
20674>>>>>>>>>        Function_Return retVal
20675>>>>>>>>>    End_Function
20676>>>>>>>>>
20676>>>>>>>>>    Procedure ComSetFocus
20678>>>>>>>>>        Handle hDispatchDriver
20678>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20679>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
20680>>>>>>>>>    End_Procedure
20681>>>>>>>>>
20681>>>>>>>>>    Procedure ComExecute
20683>>>>>>>>>        Handle hDispatchDriver
20683>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20684>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
20685>>>>>>>>>    End_Procedure
20686>>>>>>>>>
20686>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
20688>>>>>>>>>        Handle hDispatchDriver
20688>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20689>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
20690>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
20691>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
20692>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
20693>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
20694>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
20695>>>>>>>>>    End_Procedure
20696>>>>>>>>>
20696>>>>>>>>>    Function ComRibbonGroup Returns Variant
20698>>>>>>>>>        Handle hDispatchDriver
20698>>>>>>>>>        Variant retVal
20698>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20699>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
20700>>>>>>>>>        Function_Return retVal
20701>>>>>>>>>    End_Function
20702>>>>>>>>>
20702>>>>>>>>>    Procedure ComReset
20704>>>>>>>>>        Handle hDispatchDriver
20704>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20705>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
20706>>>>>>>>>    End_Procedure
20707>>>>>>>>>
20707>>>>>>>>>    Function ComTop Returns Integer
20709>>>>>>>>>        Handle hDispatchDriver
20709>>>>>>>>>        Integer retVal
20709>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20710>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
20711>>>>>>>>>        Function_Return retVal
20712>>>>>>>>>    End_Function
20713>>>>>>>>>
20713>>>>>>>>>    Function ComLeft Returns Integer
20715>>>>>>>>>        Handle hDispatchDriver
20715>>>>>>>>>        Integer retVal
20715>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20716>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
20717>>>>>>>>>        Function_Return retVal
20718>>>>>>>>>    End_Function
20719>>>>>>>>>
20719>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
20721>>>>>>>>>        Handle hDispatchDriver
20721>>>>>>>>>        Variant retVal
20721>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20722>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20723>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
20724>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
20725>>>>>>>>>        Function_Return retVal
20726>>>>>>>>>    End_Function
20727>>>>>>>>>
20727>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
20729>>>>>>>>>        Handle hDispatchDriver
20729>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20730>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20731>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
20732>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
20733>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
20734>>>>>>>>>    End_Procedure
20735>>>>>>>>>
20735>>>>>>>>>    Function ComEditHandle Returns OLE_HANDLE
20737>>>>>>>>>        Handle hDispatchDriver
20737>>>>>>>>>        OLE_HANDLE retVal
20737>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20738>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 63 OLE_VT_I4 to retVal
20739>>>>>>>>>        Function_Return retVal
20740>>>>>>>>>    End_Function
20741>>>>>>>>>
20741>>>>>>>>>    Function ComHasFocus Returns Boolean
20743>>>>>>>>>        Handle hDispatchDriver
20743>>>>>>>>>        Boolean retVal
20743>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20744>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 66 OLE_VT_BOOL to retVal
20745>>>>>>>>>        Function_Return retVal
20746>>>>>>>>>    End_Function
20747>>>>>>>>>End_Class
20748>>>>>>>>>
20748>>>>>>>>>// CoClass
20748>>>>>>>>>// CLSID: {C0DE2000-45B6-4F4B-A120-6D59A69B2F1D}
20748>>>>>>>>>Class cCJCommandBarEdit is a cComAutomationObject
20749>>>>>>>>>    Import_Class_Protocol cCJICommandBarEdit
20750>>>>>>>>>
20750>>>>>>>>>    Procedure Construct_Object
20752>>>>>>>>>        Forward Send Construct_Object
20754>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
20755>>>>>>>>>    End_Procedure
20756>>>>>>>>>End_Class
20757>>>>>>>>>
20757>>>>>>>>>// CLSID: {C0DE2000-CB1F-40FD-B073-4BC151A5205F}
20757>>>>>>>>>Class cCJICommandBarControlCustom is a Mixin
20758>>>>>>>>>
20758>>>>>>>>>    Function ComChecked Returns Boolean
20760>>>>>>>>>        Boolean retVal
20760>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
20761>>>>>>>>>        Function_Return retVal
20762>>>>>>>>>    End_Function
20763>>>>>>>>>
20763>>>>>>>>>    Procedure Set ComChecked Boolean value
20765>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
20766>>>>>>>>>    End_Procedure
20767>>>>>>>>>
20767>>>>>>>>>    Function ComBeginGroup Returns Boolean
20769>>>>>>>>>        Boolean retVal
20769>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
20770>>>>>>>>>        Function_Return retVal
20771>>>>>>>>>    End_Function
20772>>>>>>>>>
20772>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
20774>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
20775>>>>>>>>>    End_Procedure
20776>>>>>>>>>
20776>>>>>>>>>    Function ComCaption Returns String
20778>>>>>>>>>        String retVal
20778>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
20779>>>>>>>>>        Function_Return retVal
20780>>>>>>>>>    End_Function
20781>>>>>>>>>
20781>>>>>>>>>    Procedure Set ComCaption String value
20783>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
20784>>>>>>>>>    End_Procedure
20785>>>>>>>>>
20785>>>>>>>>>    Function ComDescriptionText Returns String
20787>>>>>>>>>        String retVal
20787>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
20788>>>>>>>>>        Function_Return retVal
20789>>>>>>>>>    End_Function
20790>>>>>>>>>
20790>>>>>>>>>    Procedure Set ComDescriptionText String value
20792>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
20793>>>>>>>>>    End_Procedure
20794>>>>>>>>>
20794>>>>>>>>>    Function ComId Returns Integer
20796>>>>>>>>>        Integer retVal
20796>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
20797>>>>>>>>>        Function_Return retVal
20798>>>>>>>>>    End_Function
20799>>>>>>>>>
20799>>>>>>>>>    Procedure Set ComId Integer value
20801>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
20802>>>>>>>>>    End_Procedure
20803>>>>>>>>>
20803>>>>>>>>>    Function ComParameter Returns String
20805>>>>>>>>>        String retVal
20805>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
20806>>>>>>>>>        Function_Return retVal
20807>>>>>>>>>    End_Function
20808>>>>>>>>>
20808>>>>>>>>>    Procedure Set ComParameter String value
20810>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
20811>>>>>>>>>    End_Procedure
20812>>>>>>>>>
20812>>>>>>>>>    Function ComShortcutText Returns String
20814>>>>>>>>>        String retVal
20814>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
20815>>>>>>>>>        Function_Return retVal
20816>>>>>>>>>    End_Function
20817>>>>>>>>>
20817>>>>>>>>>    Procedure Set ComShortcutText String value
20819>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
20820>>>>>>>>>    End_Procedure
20821>>>>>>>>>
20821>>>>>>>>>    Function ComCustomShortcutText Returns String
20823>>>>>>>>>        String retVal
20823>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
20824>>>>>>>>>        Function_Return retVal
20825>>>>>>>>>    End_Function
20826>>>>>>>>>
20826>>>>>>>>>    Procedure Set ComCustomShortcutText String value
20828>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
20829>>>>>>>>>    End_Procedure
20830>>>>>>>>>
20830>>>>>>>>>    Function ComTooltipText Returns String
20832>>>>>>>>>        String retVal
20832>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
20833>>>>>>>>>        Function_Return retVal
20834>>>>>>>>>    End_Function
20835>>>>>>>>>
20835>>>>>>>>>    Procedure Set ComTooltipText String value
20837>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
20838>>>>>>>>>    End_Procedure
20839>>>>>>>>>
20839>>>>>>>>>    Function ComVisible Returns Boolean
20841>>>>>>>>>        Boolean retVal
20841>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
20842>>>>>>>>>        Function_Return retVal
20843>>>>>>>>>    End_Function
20844>>>>>>>>>
20844>>>>>>>>>    Procedure Set ComVisible Boolean value
20846>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
20847>>>>>>>>>    End_Procedure
20848>>>>>>>>>
20848>>>>>>>>>    Function ComEnabled Returns Boolean
20850>>>>>>>>>        Boolean retVal
20850>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
20851>>>>>>>>>        Function_Return retVal
20852>>>>>>>>>    End_Function
20853>>>>>>>>>
20853>>>>>>>>>    Procedure Set ComEnabled Boolean value
20855>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
20856>>>>>>>>>    End_Procedure
20857>>>>>>>>>
20857>>>>>>>>>    Function ComIconId Returns Integer
20859>>>>>>>>>        Integer retVal
20859>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
20860>>>>>>>>>        Function_Return retVal
20861>>>>>>>>>    End_Function
20862>>>>>>>>>
20862>>>>>>>>>    Procedure Set ComIconId Integer value
20864>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
20865>>>>>>>>>    End_Procedure
20866>>>>>>>>>
20866>>>>>>>>>    Function ComDefaultItem Returns Boolean
20868>>>>>>>>>        Boolean retVal
20868>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
20869>>>>>>>>>        Function_Return retVal
20870>>>>>>>>>    End_Function
20871>>>>>>>>>
20871>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
20873>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
20874>>>>>>>>>    End_Procedure
20875>>>>>>>>>
20875>>>>>>>>>    Function ComFlags Returns XTPControlFlags
20877>>>>>>>>>        XTPControlFlags retVal
20877>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
20878>>>>>>>>>        Function_Return retVal
20879>>>>>>>>>    End_Function
20880>>>>>>>>>
20880>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
20882>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
20883>>>>>>>>>    End_Procedure
20884>>>>>>>>>
20884>>>>>>>>>    Function ComCategory Returns String
20886>>>>>>>>>        String retVal
20886>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
20887>>>>>>>>>        Function_Return retVal
20888>>>>>>>>>    End_Function
20889>>>>>>>>>
20889>>>>>>>>>    Procedure Set ComCategory String value
20891>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
20892>>>>>>>>>    End_Procedure
20893>>>>>>>>>
20893>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
20895>>>>>>>>>        XTPControlHideFlags retVal
20895>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
20896>>>>>>>>>        Function_Return retVal
20897>>>>>>>>>    End_Function
20898>>>>>>>>>
20898>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
20900>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
20901>>>>>>>>>    End_Procedure
20902>>>>>>>>>
20902>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
20904>>>>>>>>>        Boolean retVal
20904>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
20905>>>>>>>>>        Function_Return retVal
20906>>>>>>>>>    End_Function
20907>>>>>>>>>
20907>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
20909>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
20910>>>>>>>>>    End_Procedure
20911>>>>>>>>>
20911>>>>>>>>>    Function ComAction Returns Variant
20913>>>>>>>>>        Variant retVal
20913>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
20914>>>>>>>>>        Function_Return retVal
20915>>>>>>>>>    End_Function
20916>>>>>>>>>
20916>>>>>>>>>    Procedure Set ComAction Variant value
20918>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
20919>>>>>>>>>    End_Procedure
20920>>>>>>>>>
20920>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
20922>>>>>>>>>        Integer retVal
20922>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
20923>>>>>>>>>        Function_Return retVal
20924>>>>>>>>>    End_Function
20925>>>>>>>>>
20925>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
20927>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
20928>>>>>>>>>    End_Procedure
20929>>>>>>>>>
20929>>>>>>>>>    Function ComWidth Returns Integer
20931>>>>>>>>>        Integer retVal
20931>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
20932>>>>>>>>>        Function_Return retVal
20933>>>>>>>>>    End_Function
20934>>>>>>>>>
20934>>>>>>>>>    Procedure Set ComWidth Integer value
20936>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
20937>>>>>>>>>    End_Procedure
20938>>>>>>>>>
20938>>>>>>>>>    Function ComHeight Returns Integer
20940>>>>>>>>>        Integer retVal
20940>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
20941>>>>>>>>>        Function_Return retVal
20942>>>>>>>>>    End_Function
20943>>>>>>>>>
20943>>>>>>>>>    Procedure Set ComHeight Integer value
20945>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
20946>>>>>>>>>    End_Procedure
20947>>>>>>>>>
20947>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
20949>>>>>>>>>        XTPButtonStyle retVal
20949>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
20950>>>>>>>>>        Function_Return retVal
20951>>>>>>>>>    End_Function
20952>>>>>>>>>
20952>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
20954>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
20955>>>>>>>>>    End_Procedure
20956>>>>>>>>>
20956>>>>>>>>>    Function ComKeyboardTip Returns String
20958>>>>>>>>>        String retVal
20958>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
20959>>>>>>>>>        Function_Return retVal
20960>>>>>>>>>    End_Function
20961>>>>>>>>>
20961>>>>>>>>>    Procedure Set ComKeyboardTip String value
20963>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
20964>>>>>>>>>    End_Procedure
20965>>>>>>>>>
20965>>>>>>>>>    Function ComHandle Returns Integer
20967>>>>>>>>>        Integer retVal
20967>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to retVal
20968>>>>>>>>>        Function_Return retVal
20969>>>>>>>>>    End_Function
20970>>>>>>>>>
20970>>>>>>>>>    Procedure Set ComHandle Integer value
20972>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to value
20973>>>>>>>>>    End_Procedure
20974>>>>>>>>>
20974>>>>>>>>>    Function ComVerticalOptions Returns XTPControlCustomVerticalOptions
20976>>>>>>>>>        XTPControlCustomVerticalOptions retVal
20976>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
20977>>>>>>>>>        Function_Return retVal
20978>>>>>>>>>    End_Function
20979>>>>>>>>>
20979>>>>>>>>>    Procedure Set ComVerticalOptions XTPControlCustomVerticalOptions value
20981>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
20982>>>>>>>>>    End_Procedure
20983>>>>>>>>>
20983>>>>>>>>>    Function ComControls Returns Variant
20985>>>>>>>>>        Handle hDispatchDriver
20985>>>>>>>>>        Variant retVal
20985>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20986>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
20987>>>>>>>>>        Function_Return retVal
20988>>>>>>>>>    End_Function
20989>>>>>>>>>
20989>>>>>>>>>    Function ComParent Returns Variant
20991>>>>>>>>>        Handle hDispatchDriver
20991>>>>>>>>>        Variant retVal
20991>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20992>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
20993>>>>>>>>>        Function_Return retVal
20994>>>>>>>>>    End_Function
20995>>>>>>>>>
20995>>>>>>>>>    Function ComIndex Returns Integer
20997>>>>>>>>>        Handle hDispatchDriver
20997>>>>>>>>>        Integer retVal
20997>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20998>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
20999>>>>>>>>>        Function_Return retVal
21000>>>>>>>>>    End_Function
21001>>>>>>>>>
21001>>>>>>>>>    Function ComType Returns XTPControlType
21003>>>>>>>>>        Handle hDispatchDriver
21003>>>>>>>>>        XTPControlType retVal
21003>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21004>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
21005>>>>>>>>>        Function_Return retVal
21006>>>>>>>>>    End_Function
21007>>>>>>>>>
21007>>>>>>>>>    Procedure ComDelete
21009>>>>>>>>>        Handle hDispatchDriver
21009>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21010>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
21011>>>>>>>>>    End_Procedure
21012>>>>>>>>>
21012>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
21014>>>>>>>>>        Handle hDispatchDriver
21014>>>>>>>>>        Variant retVal
21014>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21015>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21016>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
21017>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
21018>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
21019>>>>>>>>>        Function_Return retVal
21020>>>>>>>>>    End_Function
21021>>>>>>>>>
21021>>>>>>>>>    Procedure ComSetFocus
21023>>>>>>>>>        Handle hDispatchDriver
21023>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21024>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
21025>>>>>>>>>    End_Procedure
21026>>>>>>>>>
21026>>>>>>>>>    Procedure ComExecute
21028>>>>>>>>>        Handle hDispatchDriver
21028>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21029>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
21030>>>>>>>>>    End_Procedure
21031>>>>>>>>>
21031>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
21033>>>>>>>>>        Handle hDispatchDriver
21033>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21034>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
21035>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
21036>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
21037>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
21038>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
21039>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
21040>>>>>>>>>    End_Procedure
21041>>>>>>>>>
21041>>>>>>>>>    Function ComRibbonGroup Returns Variant
21043>>>>>>>>>        Handle hDispatchDriver
21043>>>>>>>>>        Variant retVal
21043>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21044>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
21045>>>>>>>>>        Function_Return retVal
21046>>>>>>>>>    End_Function
21047>>>>>>>>>
21047>>>>>>>>>    Procedure ComReset
21049>>>>>>>>>        Handle hDispatchDriver
21049>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21050>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
21051>>>>>>>>>    End_Procedure
21052>>>>>>>>>
21052>>>>>>>>>    Function ComTop Returns Integer
21054>>>>>>>>>        Handle hDispatchDriver
21054>>>>>>>>>        Integer retVal
21054>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21055>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
21056>>>>>>>>>        Function_Return retVal
21057>>>>>>>>>    End_Function
21058>>>>>>>>>
21058>>>>>>>>>    Function ComLeft Returns Integer
21060>>>>>>>>>        Handle hDispatchDriver
21060>>>>>>>>>        Integer retVal
21060>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21061>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
21062>>>>>>>>>        Function_Return retVal
21063>>>>>>>>>    End_Function
21064>>>>>>>>>
21064>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
21066>>>>>>>>>        Handle hDispatchDriver
21066>>>>>>>>>        Variant retVal
21066>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21067>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21068>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
21069>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
21070>>>>>>>>>        Function_Return retVal
21071>>>>>>>>>    End_Function
21072>>>>>>>>>
21072>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
21074>>>>>>>>>        Handle hDispatchDriver
21074>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21075>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21076>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
21077>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
21078>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
21079>>>>>>>>>    End_Procedure
21080>>>>>>>>>
21080>>>>>>>>>    Procedure ComSetSize Integer llcx Integer llcy
21082>>>>>>>>>        Handle hDispatchDriver
21082>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21083>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21084>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
21085>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
21086>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 51 OLE_VT_VOID
21087>>>>>>>>>    End_Procedure
21088>>>>>>>>>End_Class
21089>>>>>>>>>
21089>>>>>>>>>// CoClass
21089>>>>>>>>>// CLSID: {C0DE2000-1B47-4246-A360-CC5F34ABCE35}
21089>>>>>>>>>Class cCJCommandBarControlCustom is a cComAutomationObject
21090>>>>>>>>>    Import_Class_Protocol cCJICommandBarControlCustom
21091>>>>>>>>>
21091>>>>>>>>>    Procedure Construct_Object
21093>>>>>>>>>        Forward Send Construct_Object
21095>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21096>>>>>>>>>    End_Procedure
21097>>>>>>>>>End_Class
21098>>>>>>>>>
21098>>>>>>>>>// CLSID: {C0DE2000-27BF-4CB1-9ABF-1788D9835223}
21098>>>>>>>>>Class cCJICommandBarControls is a Mixin
21099>>>>>>>>>
21099>>>>>>>>>    // Gets the number of controls in the collection.
21099>>>>>>>>>    Function ComCount Returns Integer
21101>>>>>>>>>        Handle hDispatchDriver
21101>>>>>>>>>        Integer retVal
21101>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21102>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
21103>>>>>>>>>        Function_Return retVal
21104>>>>>>>>>    End_Function
21105>>>>>>>>>
21105>>>>>>>>>    // Gets an item from the collection by its index.
21105>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
21107>>>>>>>>>        Handle hDispatchDriver
21107>>>>>>>>>        Variant retVal
21107>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21108>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21109>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
21110>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
21111>>>>>>>>>        Function_Return retVal
21112>>>>>>>>>    End_Function
21113>>>>>>>>>
21113>>>>>>>>>    Function Com_NewEnum Returns Variant
21115>>>>>>>>>        Handle hDispatchDriver
21115>>>>>>>>>        Variant retVal
21115>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21116>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
21117>>>>>>>>>        Function_Return retVal
21118>>>>>>>>>    End_Function
21119>>>>>>>>>
21119>>>>>>>>>    // Adds a new command bar control to the collection.
21119>>>>>>>>>    Function ComAdd XTPControlType llType Integer llId String llCaption Variant llBefore Variant llTemporary Returns Variant
21121>>>>>>>>>        Handle hDispatchDriver
21121>>>>>>>>>        Variant retVal
21121>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21122>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
21123>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llType
21124>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
21125>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
21126>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
21127>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llTemporary
21128>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
21129>>>>>>>>>        Function_Return retVal
21130>>>>>>>>>    End_Function
21131>>>>>>>>>
21131>>>>>>>>>    // Gets the popup control representing the parent of the command bar
21131>>>>>>>>>    Function ComParent Returns Variant
21133>>>>>>>>>        Handle hDispatchDriver
21133>>>>>>>>>        Variant retVal
21133>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21134>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_DISPATCH to retVal
21135>>>>>>>>>        Function_Return retVal
21136>>>>>>>>>    End_Function
21137>>>>>>>>>
21137>>>>>>>>>    // Finds the specified control
21137>>>>>>>>>    Function ComFind Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
21139>>>>>>>>>        Handle hDispatchDriver
21139>>>>>>>>>        Variant retVal
21139>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21140>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
21141>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
21142>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
21143>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
21144>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
21145>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
21146>>>>>>>>>        Function_Return retVal
21147>>>>>>>>>    End_Function
21148>>>>>>>>>
21148>>>>>>>>>    // Deletes all of the command bar controls from the collection
21148>>>>>>>>>    Procedure ComDeleteAll
21150>>>>>>>>>        Handle hDispatchDriver
21150>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21151>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
21152>>>>>>>>>    End_Procedure
21153>>>>>>>>>
21153>>>>>>>>>    // Recreates original controls
21153>>>>>>>>>    Procedure ComCreateOriginalControls
21155>>>>>>>>>        Handle hDispatchDriver
21155>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21156>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
21157>>>>>>>>>    End_Procedure
21158>>>>>>>>>
21158>>>>>>>>>    // Retrieve original controls
21158>>>>>>>>>    Function ComOriginalControls Returns Variant
21160>>>>>>>>>        Handle hDispatchDriver
21160>>>>>>>>>        Variant retVal
21160>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21161>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_DISPATCH to retVal
21162>>>>>>>>>        Function_Return retVal
21163>>>>>>>>>    End_Function
21164>>>>>>>>>
21164>>>>>>>>>    Procedure ComAddControl Variant llControl Variant llBefore
21166>>>>>>>>>        Handle hDispatchDriver
21166>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21167>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21168>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llControl
21169>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
21170>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
21171>>>>>>>>>    End_Procedure
21172>>>>>>>>>End_Class
21173>>>>>>>>>
21173>>>>>>>>>// CoClass
21173>>>>>>>>>// CLSID: {C0DE2000-A08C-49CB-8B78-58D990C00C51}
21173>>>>>>>>>Class cCJCommandBarControls is a cComAutomationObject
21174>>>>>>>>>    Import_Class_Protocol cCJICommandBarControls
21175>>>>>>>>>
21175>>>>>>>>>    Procedure Construct_Object
21177>>>>>>>>>        Forward Send Construct_Object
21179>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21180>>>>>>>>>    End_Procedure
21181>>>>>>>>>End_Class
21182>>>>>>>>>
21182>>>>>>>>>// CLSID: {C0DE2000-0E35-48A5-BDED-924880DAF1B2}
21182>>>>>>>>>Class cCJIKeyBinding is a Mixin
21183>>>>>>>>>
21183>>>>>>>>>    Function ComCommand Returns Integer
21185>>>>>>>>>        Integer retVal
21185>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
21186>>>>>>>>>        Function_Return retVal
21187>>>>>>>>>    End_Function
21188>>>>>>>>>
21188>>>>>>>>>    Procedure Set ComCommand Integer value
21190>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
21191>>>>>>>>>    End_Procedure
21192>>>>>>>>>
21192>>>>>>>>>    Function ComShortcutText Returns String
21194>>>>>>>>>        String retVal
21194>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
21195>>>>>>>>>        Function_Return retVal
21196>>>>>>>>>    End_Function
21197>>>>>>>>>
21197>>>>>>>>>    Procedure Set ComShortcutText String value
21199>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
21200>>>>>>>>>    End_Procedure
21201>>>>>>>>>End_Class
21202>>>>>>>>>
21202>>>>>>>>>// CoClass
21202>>>>>>>>>// CLSID: {C0DE2000-EA68-4E0D-946F-45694C26F6BA}
21202>>>>>>>>>Class cCJKeyBinding is a cComAutomationObject
21203>>>>>>>>>    Import_Class_Protocol cCJIKeyBinding
21204>>>>>>>>>
21204>>>>>>>>>    Procedure Construct_Object
21206>>>>>>>>>        Forward Send Construct_Object
21208>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21209>>>>>>>>>    End_Procedure
21210>>>>>>>>>End_Class
21211>>>>>>>>>
21211>>>>>>>>>// CLSID: {C0DE2000-7369-4EAB-9B25-1D5C52916D86}
21211>>>>>>>>>Class cCJIKeyBindings is a Mixin
21212>>>>>>>>>
21212>>>>>>>>>    Function ComUseSystemKeyNameText Returns Boolean
21214>>>>>>>>>        Boolean retVal
21214>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
21215>>>>>>>>>        Function_Return retVal
21216>>>>>>>>>    End_Function
21217>>>>>>>>>
21217>>>>>>>>>    Procedure Set ComUseSystemKeyNameText Boolean value
21219>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
21220>>>>>>>>>    End_Procedure
21221>>>>>>>>>
21221>>>>>>>>>    Function ComAllowDoubleKeyShortcuts Returns Boolean
21223>>>>>>>>>        Boolean retVal
21223>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
21224>>>>>>>>>        Function_Return retVal
21225>>>>>>>>>    End_Function
21226>>>>>>>>>
21226>>>>>>>>>    Procedure Set ComAllowDoubleKeyShortcuts Boolean value
21228>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
21229>>>>>>>>>    End_Procedure
21230>>>>>>>>>
21230>>>>>>>>>    Function ComEnabled Returns Boolean
21232>>>>>>>>>        Boolean retVal
21232>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
21233>>>>>>>>>        Function_Return retVal
21234>>>>>>>>>    End_Function
21235>>>>>>>>>
21235>>>>>>>>>    Procedure Set ComEnabled Boolean value
21237>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
21238>>>>>>>>>    End_Procedure
21239>>>>>>>>>
21239>>>>>>>>>    Function ComDisableOnCapture Returns Boolean
21241>>>>>>>>>        Boolean retVal
21241>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
21242>>>>>>>>>        Function_Return retVal
21243>>>>>>>>>    End_Function
21244>>>>>>>>>
21244>>>>>>>>>    Procedure Set ComDisableOnCapture Boolean value
21246>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
21247>>>>>>>>>    End_Procedure
21248>>>>>>>>>
21248>>>>>>>>>    Function ComEnableCustomShortcutText Returns Boolean
21250>>>>>>>>>        Boolean retVal
21250>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
21251>>>>>>>>>        Function_Return retVal
21252>>>>>>>>>    End_Function
21253>>>>>>>>>
21253>>>>>>>>>    Procedure Set ComEnableCustomShortcutText Boolean value
21255>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
21256>>>>>>>>>    End_Procedure
21257>>>>>>>>>
21257>>>>>>>>>    Procedure ComAdd Integer llfVirt Integer llKey Integer llCommand
21259>>>>>>>>>        Handle hDispatchDriver
21259>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21260>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
21261>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llfVirt
21262>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llKey
21263>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21264>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1 OLE_VT_VOID
21265>>>>>>>>>    End_Procedure
21266>>>>>>>>>
21266>>>>>>>>>    Procedure ComAddShortcut Integer llCommand String llShortcut
21268>>>>>>>>>        Handle hDispatchDriver
21268>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21269>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21270>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21271>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llShortcut
21272>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
21273>>>>>>>>>    End_Procedure
21274>>>>>>>>>
21274>>>>>>>>>    Procedure ComDeleteAll
21276>>>>>>>>>        Handle hDispatchDriver
21276>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21277>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 2 OLE_VT_VOID
21278>>>>>>>>>    End_Procedure
21279>>>>>>>>>
21279>>>>>>>>>    Procedure ComSetKeyNameText Integer llKey String llKeyName
21281>>>>>>>>>        Handle hDispatchDriver
21281>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21282>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21283>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llKey
21284>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llKeyName
21285>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
21286>>>>>>>>>    End_Procedure
21287>>>>>>>>>
21287>>>>>>>>>    Procedure ComDelete Integer llCommand
21289>>>>>>>>>        Handle hDispatchDriver
21289>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21290>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21291>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21292>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
21293>>>>>>>>>    End_Procedure
21294>>>>>>>>>
21294>>>>>>>>>    Function ComCount Returns Integer
21296>>>>>>>>>        Handle hDispatchDriver
21296>>>>>>>>>        Integer retVal
21296>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21297>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_I4 to retVal
21298>>>>>>>>>        Function_Return retVal
21299>>>>>>>>>    End_Function
21300>>>>>>>>>
21300>>>>>>>>>    Function Com_NewEnum Returns Variant
21302>>>>>>>>>        Handle hDispatchDriver
21302>>>>>>>>>        Variant retVal
21302>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21303>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
21304>>>>>>>>>        Function_Return retVal
21305>>>>>>>>>    End_Function
21306>>>>>>>>>
21306>>>>>>>>>    // Gets an item from the collection by its Id.
21306>>>>>>>>>    Function ComShortcut Integer llIndex Returns Variant
21308>>>>>>>>>        Handle hDispatchDriver
21308>>>>>>>>>        Variant retVal
21308>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21309>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21310>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
21311>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
21312>>>>>>>>>        Function_Return retVal
21313>>>>>>>>>    End_Function
21314>>>>>>>>>
21314>>>>>>>>>    Function ComFindShortcut Integer llCommand Returns Variant
21316>>>>>>>>>        Handle hDispatchDriver
21316>>>>>>>>>        Variant retVal
21316>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21317>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21318>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21319>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
21320>>>>>>>>>        Function_Return retVal
21321>>>>>>>>>    End_Function
21322>>>>>>>>>End_Class
21323>>>>>>>>>
21323>>>>>>>>>// CLSID: {C0DE2000-B842-4945-A2F6-CA4237496689}
21323>>>>>>>>>Class cCJIKeyBindingsEvents is a Mixin
21324>>>>>>>>>
21324>>>>>>>>>    Procedure OnComBeforeTranslate Integer llCommand Variant llCancel
21326>>>>>>>>>    End_Procedure
21327>>>>>>>>>
21327>>>>>>>>>    Procedure OnComBeforeAdd Integer llfVirt Integer llKey Integer llCommand Variant llCancel
21329>>>>>>>>>    End_Procedure
21330>>>>>>>>>
21330>>>>>>>>>    Procedure OnComBeforeRemove Integer llfVirt Integer llKey Integer llCommand Variant llCancel
21332>>>>>>>>>    End_Procedure
21333>>>>>>>>>
21333>>>>>>>>>    Procedure RegisterComEvents
21335>>>>>>>>>        Send RegisterComEvent 1 msg_OnComBeforeTranslate
21336>>>>>>>>>        Send RegisterComEvent 2 msg_OnComBeforeAdd
21337>>>>>>>>>        Send RegisterComEvent 3 msg_OnComBeforeRemove
21338>>>>>>>>>    End_Procedure
21339>>>>>>>>>End_Class
21340>>>>>>>>>
21340>>>>>>>>>// CoClass
21340>>>>>>>>>// CLSID: {C0DE2000-6BDA-418D-9440-2D141B5D653C}
21340>>>>>>>>>Class cCJKeyBindings is a cComAutomationObject
21341>>>>>>>>>    Import_Class_Protocol cCJIKeyBindings
21342>>>>>>>>>    Import_Class_Protocol cCJIKeyBindingsEvents
21343>>>>>>>>>
21343>>>>>>>>>    Procedure Construct_Object
21345>>>>>>>>>        Forward Send Construct_Object
21347>>>>>>>>>        Set psEventId to "{C0DE2000-B842-4945-A2F6-CA4237496689}"
21348>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21349>>>>>>>>>    End_Procedure
21350>>>>>>>>>End_Class
21351>>>>>>>>>
21351>>>>>>>>>// CLSID: {C0DE2000-48B2-4CCF-B8D7-CFD6A679F837}
21351>>>>>>>>>Class cCJICommandBarsOptions is a Mixin
21352>>>>>>>>>
21352>>>>>>>>>    Function ComAlwaysShowFullMenus Returns Boolean
21354>>>>>>>>>        Boolean retVal
21354>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
21355>>>>>>>>>        Function_Return retVal
21356>>>>>>>>>    End_Function
21357>>>>>>>>>
21357>>>>>>>>>    Procedure Set ComAlwaysShowFullMenus Boolean value
21359>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
21360>>>>>>>>>    End_Procedure
21361>>>>>>>>>
21361>>>>>>>>>    Function ComShowFullAfterDelay Returns Boolean
21363>>>>>>>>>        Boolean retVal
21363>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to retVal
21364>>>>>>>>>        Function_Return retVal
21365>>>>>>>>>    End_Function
21366>>>>>>>>>
21366>>>>>>>>>    Procedure Set ComShowFullAfterDelay Boolean value
21368>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to value
21369>>>>>>>>>    End_Procedure
21370>>>>>>>>>
21370>>>>>>>>>    Function ComToolBarScreenTips Returns Boolean
21372>>>>>>>>>        Boolean retVal
21372>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
21373>>>>>>>>>        Function_Return retVal
21374>>>>>>>>>    End_Function
21375>>>>>>>>>
21375>>>>>>>>>    Procedure Set ComToolBarScreenTips Boolean value
21377>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
21378>>>>>>>>>    End_Procedure
21379>>>>>>>>>
21379>>>>>>>>>    Function ComToolBarAccelTips Returns Boolean
21381>>>>>>>>>        Boolean retVal
21381>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
21382>>>>>>>>>        Function_Return retVal
21383>>>>>>>>>    End_Function
21384>>>>>>>>>
21384>>>>>>>>>    Procedure Set ComToolBarAccelTips Boolean value
21386>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
21387>>>>>>>>>    End_Procedure
21388>>>>>>>>>
21388>>>>>>>>>    Function ComLargeIcons Returns Boolean
21390>>>>>>>>>        Boolean retVal
21390>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
21391>>>>>>>>>        Function_Return retVal
21392>>>>>>>>>    End_Function
21393>>>>>>>>>
21393>>>>>>>>>    Procedure Set ComLargeIcons Boolean value
21395>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
21396>>>>>>>>>    End_Procedure
21397>>>>>>>>>
21397>>>>>>>>>    Function ComUseFadedIcons Returns Boolean
21399>>>>>>>>>        Boolean retVal
21399>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
21400>>>>>>>>>        Function_Return retVal
21401>>>>>>>>>    End_Function
21402>>>>>>>>>
21402>>>>>>>>>    Procedure Set ComUseFadedIcons Boolean value
21404>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
21405>>>>>>>>>    End_Procedure
21406>>>>>>>>>
21406>>>>>>>>>    Function ComUseDisabledIcons Returns Boolean
21408>>>>>>>>>        Boolean retVal
21408>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
21409>>>>>>>>>        Function_Return retVal
21410>>>>>>>>>    End_Function
21411>>>>>>>>>
21411>>>>>>>>>    Procedure Set ComUseDisabledIcons Boolean value
21413>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
21414>>>>>>>>>    End_Procedure
21415>>>>>>>>>
21415>>>>>>>>>    Function ComIconsWithShadow Returns Boolean
21417>>>>>>>>>        Boolean retVal
21417>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
21418>>>>>>>>>        Function_Return retVal
21419>>>>>>>>>    End_Function
21420>>>>>>>>>
21420>>>>>>>>>    Procedure Set ComIconsWithShadow Boolean value
21422>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
21423>>>>>>>>>    End_Procedure
21424>>>>>>>>>
21424>>>>>>>>>    Function ComShowExpandButtonAlways Returns Boolean
21426>>>>>>>>>        Boolean retVal
21426>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
21427>>>>>>>>>        Function_Return retVal
21428>>>>>>>>>    End_Function
21429>>>>>>>>>
21429>>>>>>>>>    Procedure Set ComShowExpandButtonAlways Boolean value
21431>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
21432>>>>>>>>>    End_Procedure
21433>>>>>>>>>
21433>>>>>>>>>    Function ComAnimation Returns XTPAnimationType
21435>>>>>>>>>        XTPAnimationType retVal
21435>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_I4 to retVal
21436>>>>>>>>>        Function_Return retVal
21437>>>>>>>>>    End_Function
21438>>>>>>>>>
21438>>>>>>>>>    Procedure Set ComAnimation XTPAnimationType value
21440>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_I4 to value
21441>>>>>>>>>    End_Procedure
21442>>>>>>>>>
21442>>>>>>>>>    Function ComLunaColors Returns Boolean
21444>>>>>>>>>        Boolean retVal
21444>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
21445>>>>>>>>>        Function_Return retVal
21446>>>>>>>>>    End_Function
21447>>>>>>>>>
21447>>>>>>>>>    Procedure Set ComLunaColors Boolean value
21449>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
21450>>>>>>>>>    End_Procedure
21451>>>>>>>>>
21451>>>>>>>>>    Function ComUseSharedImageList Returns Boolean
21453>>>>>>>>>        Boolean retVal
21453>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
21454>>>>>>>>>        Function_Return retVal
21455>>>>>>>>>    End_Function
21456>>>>>>>>>
21456>>>>>>>>>    Procedure Set ComUseSharedImageList Boolean value
21458>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
21459>>>>>>>>>    End_Procedure
21460>>>>>>>>>
21460>>>>>>>>>    Function ComSyncFloatingToolbars Returns Boolean
21462>>>>>>>>>        Boolean retVal
21462>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_BOOL to retVal
21463>>>>>>>>>        Function_Return retVal
21464>>>>>>>>>    End_Function
21465>>>>>>>>>
21465>>>>>>>>>    Procedure Set ComSyncFloatingToolbars Boolean value
21467>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_BOOL to value
21468>>>>>>>>>    End_Procedure
21469>>>>>>>>>
21469>>>>>>>>>    Function ComFloatToolbarsByDoubleClick Returns Boolean
21471>>>>>>>>>        Boolean retVal
21471>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
21472>>>>>>>>>        Function_Return retVal
21473>>>>>>>>>    End_Function
21474>>>>>>>>>
21474>>>>>>>>>    Procedure Set ComFloatToolbarsByDoubleClick Boolean value
21476>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
21477>>>>>>>>>    End_Procedure
21478>>>>>>>>>
21478>>>>>>>>>    Function ComAutoHideUnusedPopups Returns Boolean
21480>>>>>>>>>        Boolean retVal
21480>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_BOOL to retVal
21481>>>>>>>>>        Function_Return retVal
21482>>>>>>>>>    End_Function
21483>>>>>>>>>
21483>>>>>>>>>    Procedure Set ComAutoHideUnusedPopups Boolean value
21485>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_BOOL to value
21486>>>>>>>>>    End_Procedure
21487>>>>>>>>>
21487>>>>>>>>>    Function ComShowPopupBarToolTips Returns Boolean
21489>>>>>>>>>        Boolean retVal
21489>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
21490>>>>>>>>>        Function_Return retVal
21491>>>>>>>>>    End_Function
21492>>>>>>>>>
21492>>>>>>>>>    Procedure Set ComShowPopupBarToolTips Boolean value
21494>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
21495>>>>>>>>>    End_Procedure
21496>>>>>>>>>
21496>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
21498>>>>>>>>>        Boolean retVal
21498>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
21499>>>>>>>>>        Function_Return retVal
21500>>>>>>>>>    End_Function
21501>>>>>>>>>
21501>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
21503>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
21504>>>>>>>>>    End_Procedure
21505>>>>>>>>>
21505>>>>>>>>>    Function ComUpdatePeriod Returns Integer
21507>>>>>>>>>        Integer retVal
21507>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_I4 to retVal
21508>>>>>>>>>        Function_Return retVal
21509>>>>>>>>>    End_Function
21510>>>>>>>>>
21510>>>>>>>>>    Procedure Set ComUpdatePeriod Integer value
21512>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_I4 to value
21513>>>>>>>>>    End_Procedure
21514>>>>>>>>>
21514>>>>>>>>>    Function ComAltDragCustomization Returns Boolean
21516>>>>>>>>>        Boolean retVal
21516>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
21517>>>>>>>>>        Function_Return retVal
21518>>>>>>>>>    End_Function
21519>>>>>>>>>
21519>>>>>>>>>    Procedure Set ComAltDragCustomization Boolean value
21521>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
21522>>>>>>>>>    End_Procedure
21523>>>>>>>>>
21523>>>>>>>>>    Function ComFont Returns Variant
21525>>>>>>>>>        Variant retVal
21525>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
21526>>>>>>>>>        Function_Return retVal
21527>>>>>>>>>    End_Function
21528>>>>>>>>>
21528>>>>>>>>>    Procedure Set ComFont Variant value
21530>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
21531>>>>>>>>>    End_Procedure
21532>>>>>>>>>
21532>>>>>>>>>    Function ComMaxPopupWidth Returns Real
21534>>>>>>>>>        Real retVal
21534>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_R8 to retVal
21535>>>>>>>>>        Function_Return retVal
21536>>>>>>>>>    End_Function
21537>>>>>>>>>
21537>>>>>>>>>    Procedure Set ComMaxPopupWidth Real value
21539>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_R8 to value
21540>>>>>>>>>    End_Procedure
21541>>>>>>>>>
21541>>>>>>>>>    Function ComKeyboardCuesShow Returns XTPKeyboardCuesShow
21543>>>>>>>>>        XTPKeyboardCuesShow retVal
21543>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to retVal
21544>>>>>>>>>        Function_Return retVal
21545>>>>>>>>>    End_Function
21546>>>>>>>>>
21546>>>>>>>>>    Procedure Set ComKeyboardCuesShow XTPKeyboardCuesShow value
21548>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to value
21549>>>>>>>>>    End_Procedure
21550>>>>>>>>>
21550>>>>>>>>>    Function ComKeyboardCuesUse Returns XTPKeyboardCuesUse
21552>>>>>>>>>        XTPKeyboardCuesUse retVal
21552>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to retVal
21553>>>>>>>>>        Function_Return retVal
21554>>>>>>>>>    End_Function
21555>>>>>>>>>
21555>>>>>>>>>    Procedure Set ComKeyboardCuesUse XTPKeyboardCuesUse value
21557>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to value
21558>>>>>>>>>    End_Procedure
21559>>>>>>>>>
21559>>>>>>>>>    Function ComFloatingBarCaptionFont Returns Variant
21561>>>>>>>>>        Variant retVal
21561>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_DISPATCH to retVal
21562>>>>>>>>>        Function_Return retVal
21563>>>>>>>>>    End_Function
21564>>>>>>>>>
21564>>>>>>>>>    Procedure Set ComFloatingBarCaptionFont Variant value
21566>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_DISPATCH to value
21567>>>>>>>>>    End_Procedure
21568>>>>>>>>>
21568>>>>>>>>>    Function ComComboBoxFont Returns Variant
21570>>>>>>>>>        Variant retVal
21570>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_DISPATCH to retVal
21571>>>>>>>>>        Function_Return retVal
21572>>>>>>>>>    End_Function
21573>>>>>>>>>
21573>>>>>>>>>    Procedure Set ComComboBoxFont Variant value
21575>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_DISPATCH to value
21576>>>>>>>>>    End_Procedure
21577>>>>>>>>>
21577>>>>>>>>>    Function ComOfficeStyleDisabledIcons Returns Boolean
21579>>>>>>>>>        Boolean retVal
21579>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_BOOL to retVal
21580>>>>>>>>>        Function_Return retVal
21581>>>>>>>>>    End_Function
21582>>>>>>>>>
21582>>>>>>>>>    Procedure Set ComOfficeStyleDisabledIcons Boolean value
21584>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_BOOL to value
21585>>>>>>>>>    End_Procedure
21586>>>>>>>>>
21586>>>>>>>>>    Function ComExpandHoverDelay Returns Integer
21588>>>>>>>>>        Integer retVal
21588>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to retVal
21589>>>>>>>>>        Function_Return retVal
21590>>>>>>>>>    End_Function
21591>>>>>>>>>
21591>>>>>>>>>    Procedure Set ComExpandHoverDelay Integer value
21593>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to value
21594>>>>>>>>>    End_Procedure
21595>>>>>>>>>
21595>>>>>>>>>    Function ComExpandDelay Returns Integer
21597>>>>>>>>>        Integer retVal
21597>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
21598>>>>>>>>>        Function_Return retVal
21599>>>>>>>>>    End_Function
21600>>>>>>>>>
21600>>>>>>>>>    Procedure Set ComExpandDelay Integer value
21602>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
21603>>>>>>>>>    End_Procedure
21604>>>>>>>>>
21604>>>>>>>>>    Function ComUseAltNumPadKeys Returns Boolean
21606>>>>>>>>>        Boolean retVal
21606>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to retVal
21607>>>>>>>>>        Function_Return retVal
21608>>>>>>>>>    End_Function
21609>>>>>>>>>
21609>>>>>>>>>    Procedure Set ComUseAltNumPadKeys Boolean value
21611>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to value
21612>>>>>>>>>    End_Procedure
21613>>>>>>>>>
21613>>>>>>>>>    Function ComUseSystemSaveBitsStyle Returns Boolean
21615>>>>>>>>>        Boolean retVal
21615>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_BOOL to retVal
21616>>>>>>>>>        Function_Return retVal
21617>>>>>>>>>    End_Function
21618>>>>>>>>>
21618>>>>>>>>>    Procedure Set ComUseSystemSaveBitsStyle Boolean value
21620>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_BOOL to value
21621>>>>>>>>>    End_Procedure
21622>>>>>>>>>
21622>>>>>>>>>    Function ComWrapLargePopups Returns Boolean
21624>>>>>>>>>        Boolean retVal
21624>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
21625>>>>>>>>>        Function_Return retVal
21626>>>>>>>>>    End_Function
21627>>>>>>>>>
21627>>>>>>>>>    Procedure Set ComWrapLargePopups Boolean value
21629>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
21630>>>>>>>>>    End_Procedure
21631>>>>>>>>>
21631>>>>>>>>>    Function ComShowKeyboardTips Returns Boolean
21633>>>>>>>>>        Boolean retVal
21633>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_BOOL to retVal
21634>>>>>>>>>        Function_Return retVal
21635>>>>>>>>>    End_Function
21636>>>>>>>>>
21636>>>>>>>>>    Procedure Set ComShowKeyboardTips Boolean value
21638>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_BOOL to value
21639>>>>>>>>>    End_Procedure
21640>>>>>>>>>
21640>>>>>>>>>    Function ComShowContextMenuAccelerators Returns Boolean
21642>>>>>>>>>        Boolean retVal
21642>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 35 OLE_VT_BOOL to retVal
21643>>>>>>>>>        Function_Return retVal
21644>>>>>>>>>    End_Function
21645>>>>>>>>>
21645>>>>>>>>>    Procedure Set ComShowContextMenuAccelerators Boolean value
21647>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 35 OLE_VT_BOOL to value
21648>>>>>>>>>    End_Procedure
21649>>>>>>>>>
21649>>>>>>>>>    // Synchronizes the activation of the mini-frame windows to the activation of its parent window
21649>>>>>>>>>    Function ComSyncActiveFloatingFrames Returns Boolean
21651>>>>>>>>>        Boolean retVal
21651>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
21652>>>>>>>>>        Function_Return retVal
21653>>>>>>>>>    End_Function
21654>>>>>>>>>
21654>>>>>>>>>    // Synchronizes the activation of the mini-frame windows to the activation of its parent window
21654>>>>>>>>>    Procedure Set ComSyncActiveFloatingFrames Boolean value
21656>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
21657>>>>>>>>>    End_Procedure
21658>>>>>>>>>
21658>>>>>>>>>    Function ComShowMiniToolbarTips Returns Boolean
21660>>>>>>>>>        Boolean retVal
21660>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
21661>>>>>>>>>        Function_Return retVal
21662>>>>>>>>>    End_Function
21663>>>>>>>>>
21663>>>>>>>>>    Procedure Set ComShowMiniToolbarTips Boolean value
21665>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
21666>>>>>>>>>    End_Procedure
21667>>>>>>>>>
21667>>>>>>>>>    // Color value for VisualStudio 2015 (and above) state color, usually applied to frame border and status bar
21667>>>>>>>>>    Function ComVSStateColor Returns OLE_COLOR
21669>>>>>>>>>        OLE_COLOR retVal
21669>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_I4 to retVal
21670>>>>>>>>>        Function_Return retVal
21671>>>>>>>>>    End_Function
21672>>>>>>>>>
21672>>>>>>>>>    // Color value for VisualStudio 2015 (and above) state color, usually applied to frame border and status bar
21672>>>>>>>>>    Procedure Set ComVSStateColor OLE_COLOR value
21674>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_I4 to value
21675>>>>>>>>>    End_Procedure
21676>>>>>>>>>
21676>>>>>>>>>    Procedure ComSetIconSize Boolean llLargeIcons Integer llcx Integer llcy
21678>>>>>>>>>        Handle hDispatchDriver
21678>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21679>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
21680>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLargeIcons
21681>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
21682>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
21683>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
21684>>>>>>>>>    End_Procedure
21685>>>>>>>>>
21685>>>>>>>>>    Function ComGetIconWidth Boolean llLargeIcons Returns Integer
21687>>>>>>>>>        Handle hDispatchDriver
21687>>>>>>>>>        Integer retVal
21687>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21688>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21689>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLargeIcons
21690>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
21691>>>>>>>>>        Function_Return retVal
21692>>>>>>>>>    End_Function
21693>>>>>>>>>
21693>>>>>>>>>    Function ComGetIconHeight Boolean llLargeIcons Returns Integer
21695>>>>>>>>>        Handle hDispatchDriver
21695>>>>>>>>>        Integer retVal
21695>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21696>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21697>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLargeIcons
21698>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
21699>>>>>>>>>        Function_Return retVal
21700>>>>>>>>>    End_Function
21701>>>>>>>>>
21701>>>>>>>>>    Procedure ComAddHiddenCommand Integer llCommand
21703>>>>>>>>>        Handle hDispatchDriver
21703>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21704>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21705>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21706>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 10 OLE_VT_VOID
21707>>>>>>>>>    End_Procedure
21708>>>>>>>>>
21708>>>>>>>>>    Procedure ComSetPopupIconSize Integer llcx Integer llcy
21710>>>>>>>>>        Handle hDispatchDriver
21710>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21711>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21712>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
21713>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
21714>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
21715>>>>>>>>>    End_Procedure
21716>>>>>>>>>
21716>>>>>>>>>    Function ComGetPopupIconWidth Returns Integer
21718>>>>>>>>>        Handle hDispatchDriver
21718>>>>>>>>>        Integer retVal
21718>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21719>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 41 OLE_VT_I4 to retVal
21720>>>>>>>>>        Function_Return retVal
21721>>>>>>>>>    End_Function
21722>>>>>>>>>
21722>>>>>>>>>    Function ComGetPopupIconHeight Returns Integer
21724>>>>>>>>>        Handle hDispatchDriver
21724>>>>>>>>>        Integer retVal
21724>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21725>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 42 OLE_VT_I4 to retVal
21726>>>>>>>>>        Function_Return retVal
21727>>>>>>>>>    End_Function
21728>>>>>>>>>
21728>>>>>>>>>    Procedure ComRemoveHiddenCommands
21730>>>>>>>>>        Handle hDispatchDriver
21730>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21731>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 36 OLE_VT_VOID
21732>>>>>>>>>    End_Procedure
21733>>>>>>>>>
21733>>>>>>>>>    Procedure ComSetDPIScallingOptions Boolean llbScaleGalleryItems Boolean llbScaleToolbarIcons
21735>>>>>>>>>        Handle hDispatchDriver
21735>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21736>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21737>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llbScaleGalleryItems
21738>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llbScaleToolbarIcons
21739>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 39 OLE_VT_VOID
21740>>>>>>>>>    End_Procedure
21741>>>>>>>>>
21741>>>>>>>>>    Function ComIsDPIScallingEnabled Returns Boolean
21743>>>>>>>>>        Handle hDispatchDriver
21743>>>>>>>>>        Boolean retVal
21743>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21744>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_BOOL to retVal
21745>>>>>>>>>        Function_Return retVal
21746>>>>>>>>>    End_Function
21747>>>>>>>>>End_Class
21748>>>>>>>>>
21748>>>>>>>>>// CoClass
21748>>>>>>>>>// CLSID: {C0DE2000-A0EA-4D8E-8A73-49D5D084F527}
21748>>>>>>>>>Class cCJCommandBarsOptions is a cComAutomationObject
21749>>>>>>>>>    Import_Class_Protocol cCJICommandBarsOptions
21750>>>>>>>>>
21750>>>>>>>>>    Procedure Construct_Object
21752>>>>>>>>>        Forward Send Construct_Object
21754>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21755>>>>>>>>>    End_Procedure
21756>>>>>>>>>End_Class
21757>>>>>>>>>
21757>>>>>>>>>// CLSID: {C0DE2000-0690-4528-8656-E33E61F39377}
21757>>>>>>>>>Class cCJICommandBar is a Mixin
21758>>>>>>>>>
21758>>>>>>>>>    Function ComTitle Returns String
21760>>>>>>>>>        String retVal
21760>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
21761>>>>>>>>>        Function_Return retVal
21762>>>>>>>>>    End_Function
21763>>>>>>>>>
21763>>>>>>>>>    Procedure Set ComTitle String value
21765>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
21766>>>>>>>>>    End_Procedure
21767>>>>>>>>>
21767>>>>>>>>>    Function ComVisible Returns Boolean
21769>>>>>>>>>        Boolean retVal
21769>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
21770>>>>>>>>>        Function_Return retVal
21771>>>>>>>>>    End_Function
21772>>>>>>>>>
21772>>>>>>>>>    Procedure Set ComVisible Boolean value
21774>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
21775>>>>>>>>>    End_Procedure
21776>>>>>>>>>
21776>>>>>>>>>    Function ComPosition Returns XTPBarPosition
21778>>>>>>>>>        XTPBarPosition retVal
21778>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
21779>>>>>>>>>        Function_Return retVal
21780>>>>>>>>>    End_Function
21781>>>>>>>>>
21781>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
21783>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
21784>>>>>>>>>    End_Procedure
21785>>>>>>>>>
21785>>>>>>>>>    Function ComBarID Returns Integer
21787>>>>>>>>>        Integer retVal
21787>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
21788>>>>>>>>>        Function_Return retVal
21789>>>>>>>>>    End_Function
21790>>>>>>>>>
21790>>>>>>>>>    Procedure Set ComBarID Integer value
21792>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
21793>>>>>>>>>    End_Procedure
21794>>>>>>>>>
21794>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
21796>>>>>>>>>        Boolean retVal
21796>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
21797>>>>>>>>>        Function_Return retVal
21798>>>>>>>>>    End_Function
21799>>>>>>>>>
21799>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
21801>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
21802>>>>>>>>>    End_Procedure
21803>>>>>>>>>
21803>>>>>>>>>    Function ComWidth Returns Integer
21805>>>>>>>>>        Integer retVal
21805>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
21806>>>>>>>>>        Function_Return retVal
21807>>>>>>>>>    End_Function
21808>>>>>>>>>
21808>>>>>>>>>    Procedure Set ComWidth Integer value
21810>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
21811>>>>>>>>>    End_Procedure
21812>>>>>>>>>
21812>>>>>>>>>    Function ComCloseable Returns Boolean
21814>>>>>>>>>        Boolean retVal
21814>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
21815>>>>>>>>>        Function_Return retVal
21816>>>>>>>>>    End_Function
21817>>>>>>>>>
21817>>>>>>>>>    Procedure Set ComCloseable Boolean value
21819>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
21820>>>>>>>>>    End_Procedure
21821>>>>>>>>>
21821>>>>>>>>>    Function ComEnableAnimation Returns Boolean
21823>>>>>>>>>        Boolean retVal
21823>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
21824>>>>>>>>>        Function_Return retVal
21825>>>>>>>>>    End_Function
21826>>>>>>>>>
21826>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
21828>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
21829>>>>>>>>>    End_Procedure
21830>>>>>>>>>
21830>>>>>>>>>    Function ComShowGripper Returns Boolean
21832>>>>>>>>>        Boolean retVal
21832>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
21833>>>>>>>>>        Function_Return retVal
21834>>>>>>>>>    End_Function
21835>>>>>>>>>
21835>>>>>>>>>    Procedure Set ComShowGripper Boolean value
21837>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
21838>>>>>>>>>    End_Procedure
21839>>>>>>>>>
21839>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
21841>>>>>>>>>        XTPButtonStyle retVal
21841>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
21842>>>>>>>>>        Function_Return retVal
21843>>>>>>>>>    End_Function
21844>>>>>>>>>
21844>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
21846>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
21847>>>>>>>>>    End_Procedure
21848>>>>>>>>>
21848>>>>>>>>>    Function ComCustomizable Returns Boolean
21850>>>>>>>>>        Boolean retVal
21850>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
21851>>>>>>>>>        Function_Return retVal
21852>>>>>>>>>    End_Function
21853>>>>>>>>>
21853>>>>>>>>>    Procedure Set ComCustomizable Boolean value
21855>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
21856>>>>>>>>>    End_Procedure
21857>>>>>>>>>
21857>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
21859>>>>>>>>>        Boolean retVal
21859>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
21860>>>>>>>>>        Function_Return retVal
21861>>>>>>>>>    End_Function
21862>>>>>>>>>
21862>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
21864>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
21865>>>>>>>>>    End_Procedure
21866>>>>>>>>>
21866>>>>>>>>>    Function ComDoubleGripper Returns Boolean
21868>>>>>>>>>        Boolean retVal
21868>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
21869>>>>>>>>>        Function_Return retVal
21870>>>>>>>>>    End_Function
21871>>>>>>>>>
21871>>>>>>>>>    Procedure Set ComDoubleGripper Boolean value
21873>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
21874>>>>>>>>>    End_Procedure
21875>>>>>>>>>
21875>>>>>>>>>    Function ComShowExpandButton Returns Boolean
21877>>>>>>>>>        Boolean retVal
21877>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
21878>>>>>>>>>        Function_Return retVal
21879>>>>>>>>>    End_Function
21880>>>>>>>>>
21880>>>>>>>>>    Procedure Set ComShowExpandButton Boolean value
21882>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
21883>>>>>>>>>    End_Procedure
21884>>>>>>>>>
21884>>>>>>>>>    Function ComSelectedControl Returns Variant
21886>>>>>>>>>        Variant retVal
21886>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
21887>>>>>>>>>        Function_Return retVal
21888>>>>>>>>>    End_Function
21889>>>>>>>>>
21889>>>>>>>>>    Procedure Set ComSelectedControl Variant value
21891>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
21892>>>>>>>>>    End_Procedure
21893>>>>>>>>>
21893>>>>>>>>>    Function ComCustomizeDialogPresent Returns Boolean
21895>>>>>>>>>        Boolean retVal
21895>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to retVal
21896>>>>>>>>>        Function_Return retVal
21897>>>>>>>>>    End_Function
21898>>>>>>>>>
21898>>>>>>>>>    Procedure Set ComCustomizeDialogPresent Boolean value
21900>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to value
21901>>>>>>>>>    End_Procedure
21902>>>>>>>>>
21902>>>>>>>>>    Function ComTextOrientation Returns XTPBarTextOrientation
21904>>>>>>>>>        XTPBarTextOrientation retVal
21904>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_I4 to retVal
21905>>>>>>>>>        Function_Return retVal
21906>>>>>>>>>    End_Function
21907>>>>>>>>>
21907>>>>>>>>>    Procedure Set ComTextOrientation XTPBarTextOrientation value
21909>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_I4 to value
21910>>>>>>>>>    End_Procedure
21911>>>>>>>>>
21911>>>>>>>>>    Function ComType Returns XTPBarType
21913>>>>>>>>>        Handle hDispatchDriver
21913>>>>>>>>>        XTPBarType retVal
21913>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21914>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
21915>>>>>>>>>        Function_Return retVal
21916>>>>>>>>>    End_Function
21917>>>>>>>>>
21917>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
21919>>>>>>>>>        Handle hDispatchDriver
21919>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21920>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21921>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
21922>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
21923>>>>>>>>>    End_Procedure
21924>>>>>>>>>
21924>>>>>>>>>    Function ComBuiltIn Returns Boolean
21926>>>>>>>>>        Handle hDispatchDriver
21926>>>>>>>>>        Boolean retVal
21926>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21927>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
21928>>>>>>>>>        Function_Return retVal
21929>>>>>>>>>    End_Function
21930>>>>>>>>>
21930>>>>>>>>>    Procedure ComDelete
21932>>>>>>>>>        Handle hDispatchDriver
21932>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21933>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
21934>>>>>>>>>    End_Procedure
21935>>>>>>>>>
21935>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
21937>>>>>>>>>        Handle hDispatchDriver
21937>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21938>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
21939>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
21940>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
21941>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
21942>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
21943>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
21944>>>>>>>>>    End_Procedure
21945>>>>>>>>>
21945>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
21947>>>>>>>>>        Handle hDispatchDriver
21947>>>>>>>>>        OLE_HANDLE retVal
21947>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21948>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
21949>>>>>>>>>        Function_Return retVal
21950>>>>>>>>>    End_Function
21951>>>>>>>>>
21951>>>>>>>>>    Function ComCommandBars Returns Variant
21953>>>>>>>>>        Handle hDispatchDriver
21953>>>>>>>>>        Variant retVal
21953>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21954>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
21955>>>>>>>>>        Function_Return retVal
21956>>>>>>>>>    End_Function
21957>>>>>>>>>
21957>>>>>>>>>    Function ComControls Returns Variant
21959>>>>>>>>>        Handle hDispatchDriver
21959>>>>>>>>>        Variant retVal
21959>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21960>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
21961>>>>>>>>>        Function_Return retVal
21962>>>>>>>>>    End_Function
21963>>>>>>>>>
21963>>>>>>>>>    Function ComShowPopup Variant llFlags Variant llx Variant lly Returns Integer
21965>>>>>>>>>        Handle hDispatchDriver
21965>>>>>>>>>        Integer retVal
21965>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21966>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
21967>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFlags
21968>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llx
21969>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lly
21970>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_I4 to retVal
21971>>>>>>>>>        Function_Return retVal
21972>>>>>>>>>    End_Function
21973>>>>>>>>>
21973>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
21975>>>>>>>>>        Handle hDispatchDriver
21975>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21976>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21977>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
21978>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
21979>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
21980>>>>>>>>>    End_Procedure
21981>>>>>>>>>
21981>>>>>>>>>    Function ComGetIconWidth Returns Integer
21983>>>>>>>>>        Handle hDispatchDriver
21983>>>>>>>>>        Integer retVal
21983>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21984>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
21985>>>>>>>>>        Function_Return retVal
21986>>>>>>>>>    End_Function
21987>>>>>>>>>
21987>>>>>>>>>    Function ComGetIconHeight Returns Integer
21989>>>>>>>>>        Handle hDispatchDriver
21989>>>>>>>>>        Integer retVal
21989>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21990>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
21991>>>>>>>>>        Function_Return retVal
21992>>>>>>>>>    End_Function
21993>>>>>>>>>
21993>>>>>>>>>    Procedure ComSetTearOffPopup String llCaption Integer llId Integer llWidth
21995>>>>>>>>>        Handle hDispatchDriver
21995>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21996>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
21997>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
21998>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
21999>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
22000>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
22001>>>>>>>>>    End_Procedure
22002>>>>>>>>>
22002>>>>>>>>>    Function ComParent Returns Variant
22004>>>>>>>>>        Handle hDispatchDriver
22004>>>>>>>>>        Variant retVal
22004>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22005>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
22006>>>>>>>>>        Function_Return retVal
22007>>>>>>>>>    End_Function
22008>>>>>>>>>
22008>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
22010>>>>>>>>>        Handle hDispatchDriver
22010>>>>>>>>>        Variant retVal
22010>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22011>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22012>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
22013>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
22014>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
22015>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
22016>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
22017>>>>>>>>>        Function_Return retVal
22018>>>>>>>>>    End_Function
22019>>>>>>>>>
22019>>>>>>>>>    Procedure ComSetPopupToolBar Boolean llToolBarType
22021>>>>>>>>>        Handle hDispatchDriver
22021>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22022>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22023>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llToolBarType
22024>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
22025>>>>>>>>>    End_Procedure
22026>>>>>>>>>
22026>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
22028>>>>>>>>>        Handle hDispatchDriver
22028>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22029>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22030>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22031>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22032>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
22033>>>>>>>>>    End_Procedure
22034>>>>>>>>>
22034>>>>>>>>>    Procedure ComModifyStyle XTPCommandBarStyle llRemove XTPCommandBarStyle llAdd
22036>>>>>>>>>        Handle hDispatchDriver
22036>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22037>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22038>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22039>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22040>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
22041>>>>>>>>>    End_Procedure
22042>>>>>>>>>
22042>>>>>>>>>    Procedure ComRedrawBar
22044>>>>>>>>>        Handle hDispatchDriver
22044>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22045>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
22046>>>>>>>>>    End_Procedure
22047>>>>>>>>>
22047>>>>>>>>>    Procedure ComRecalcLayout
22049>>>>>>>>>        Handle hDispatchDriver
22049>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22050>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
22051>>>>>>>>>    End_Procedure
22052>>>>>>>>>
22052>>>>>>>>>    Procedure ComReset
22054>>>>>>>>>        Handle hDispatchDriver
22054>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22055>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
22056>>>>>>>>>    End_Procedure
22057>>>>>>>>>End_Class
22058>>>>>>>>>
22058>>>>>>>>>// CoClass
22058>>>>>>>>>// CLSID: {C0DE2000-231A-4BE6-AA1B-9BA4B04CA048}
22058>>>>>>>>>Class cCJCommandBar is a cComAutomationObject
22059>>>>>>>>>    Import_Class_Protocol cCJICommandBar
22060>>>>>>>>>
22060>>>>>>>>>    Procedure Construct_Object
22062>>>>>>>>>        Forward Send Construct_Object
22064>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22065>>>>>>>>>    End_Procedure
22066>>>>>>>>>End_Class
22067>>>>>>>>>
22067>>>>>>>>>// CLSID: {C0DE2000-E7D2-4506-8D3F-D986E0B345D4}
22067>>>>>>>>>Class cCJIMenuBarMDIMenu is a Mixin
22068>>>>>>>>>
22068>>>>>>>>>    Function ComCaption Returns String
22070>>>>>>>>>        String retVal
22070>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
22071>>>>>>>>>        Function_Return retVal
22072>>>>>>>>>    End_Function
22073>>>>>>>>>
22073>>>>>>>>>    Procedure Set ComCaption String value
22075>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
22076>>>>>>>>>    End_Procedure
22077>>>>>>>>>
22077>>>>>>>>>    Function ComDescription Returns String
22079>>>>>>>>>        String retVal
22079>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
22080>>>>>>>>>        Function_Return retVal
22081>>>>>>>>>    End_Function
22082>>>>>>>>>
22082>>>>>>>>>    Procedure Set ComDescription String value
22084>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
22085>>>>>>>>>    End_Procedure
22086>>>>>>>>>
22086>>>>>>>>>    Function ComId Returns Integer
22088>>>>>>>>>        Handle hDispatchDriver
22088>>>>>>>>>        Integer retVal
22088>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22089>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
22090>>>>>>>>>        Function_Return retVal
22091>>>>>>>>>    End_Function
22092>>>>>>>>>
22092>>>>>>>>>    Function ComControls Returns Variant
22094>>>>>>>>>        Handle hDispatchDriver
22094>>>>>>>>>        Variant retVal
22094>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22095>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
22096>>>>>>>>>        Function_Return retVal
22097>>>>>>>>>    End_Function
22098>>>>>>>>>End_Class
22099>>>>>>>>>
22099>>>>>>>>>// CoClass
22099>>>>>>>>>// CLSID: {C0DE2000-B93E-44AD-B277-1B0F84A20CBA}
22099>>>>>>>>>Class cCJComMenuBarMDIMenu is a cComAutomationObject
22100>>>>>>>>>    Import_Class_Protocol cCJIMenuBarMDIMenu
22101>>>>>>>>>
22101>>>>>>>>>    Procedure Construct_Object
22103>>>>>>>>>        Forward Send Construct_Object
22105>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22106>>>>>>>>>    End_Procedure
22107>>>>>>>>>End_Class
22108>>>>>>>>>
22108>>>>>>>>>// CLSID: {C0DE2000-3D4B-41E3-B659-0F8E354111DF}
22108>>>>>>>>>Class cCJIMenuBarMDIMenus is a Mixin
22109>>>>>>>>>
22109>>>>>>>>>    // Gets the number of menus in the collection.
22109>>>>>>>>>    Function ComCount Returns Integer
22111>>>>>>>>>        Handle hDispatchDriver
22111>>>>>>>>>        Integer retVal
22111>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22112>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
22113>>>>>>>>>        Function_Return retVal
22114>>>>>>>>>    End_Function
22115>>>>>>>>>
22115>>>>>>>>>    // Gets an item from the collection by its Id.
22115>>>>>>>>>    Function ComItem Integer llId Returns Variant
22117>>>>>>>>>        Handle hDispatchDriver
22117>>>>>>>>>        Variant retVal
22117>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22118>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22119>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22120>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
22121>>>>>>>>>        Function_Return retVal
22122>>>>>>>>>    End_Function
22123>>>>>>>>>
22123>>>>>>>>>    Function Com_NewEnum Returns Variant
22125>>>>>>>>>        Handle hDispatchDriver
22125>>>>>>>>>        Variant retVal
22125>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22126>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
22127>>>>>>>>>        Function_Return retVal
22128>>>>>>>>>    End_Function
22129>>>>>>>>>
22129>>>>>>>>>    Function ComAdd Integer llId String llCaption String llDescription Returns Variant
22131>>>>>>>>>        Handle hDispatchDriver
22131>>>>>>>>>        Variant retVal
22131>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22132>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
22133>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22134>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
22135>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llDescription
22136>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
22137>>>>>>>>>        Function_Return retVal
22138>>>>>>>>>    End_Function
22139>>>>>>>>>
22139>>>>>>>>>    // Deletes all of the menus from the collection
22139>>>>>>>>>    Procedure ComDeleteAll
22141>>>>>>>>>        Handle hDispatchDriver
22141>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22142>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
22143>>>>>>>>>    End_Procedure
22144>>>>>>>>>End_Class
22145>>>>>>>>>
22145>>>>>>>>>// CoClass
22145>>>>>>>>>// CLSID: {C0DE2000-84B8-4930-8B30-5E56EC7F9860}
22145>>>>>>>>>Class cCJComMenuBarMDIMenus is a cComAutomationObject
22146>>>>>>>>>    Import_Class_Protocol cCJIMenuBarMDIMenus
22147>>>>>>>>>
22147>>>>>>>>>    Procedure Construct_Object
22149>>>>>>>>>        Forward Send Construct_Object
22151>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22152>>>>>>>>>    End_Procedure
22153>>>>>>>>>End_Class
22154>>>>>>>>>
22154>>>>>>>>>// CLSID: {C0DE2000-FED3-4FBC-B204-59C231E6092B}
22154>>>>>>>>>Class cCJIMenuBar is a Mixin
22155>>>>>>>>>
22155>>>>>>>>>    Function ComTitle Returns String
22157>>>>>>>>>        String retVal
22157>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
22158>>>>>>>>>        Function_Return retVal
22159>>>>>>>>>    End_Function
22160>>>>>>>>>
22160>>>>>>>>>    Procedure Set ComTitle String value
22162>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
22163>>>>>>>>>    End_Procedure
22164>>>>>>>>>
22164>>>>>>>>>    Function ComVisible Returns Boolean
22166>>>>>>>>>        Boolean retVal
22166>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
22167>>>>>>>>>        Function_Return retVal
22168>>>>>>>>>    End_Function
22169>>>>>>>>>
22169>>>>>>>>>    Procedure Set ComVisible Boolean value
22171>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
22172>>>>>>>>>    End_Procedure
22173>>>>>>>>>
22173>>>>>>>>>    Function ComPosition Returns XTPBarPosition
22175>>>>>>>>>        XTPBarPosition retVal
22175>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
22176>>>>>>>>>        Function_Return retVal
22177>>>>>>>>>    End_Function
22178>>>>>>>>>
22178>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
22180>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
22181>>>>>>>>>    End_Procedure
22182>>>>>>>>>
22182>>>>>>>>>    Function ComBarID Returns Integer
22184>>>>>>>>>        Integer retVal
22184>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
22185>>>>>>>>>        Function_Return retVal
22186>>>>>>>>>    End_Function
22187>>>>>>>>>
22187>>>>>>>>>    Procedure Set ComBarID Integer value
22189>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
22190>>>>>>>>>    End_Procedure
22191>>>>>>>>>
22191>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
22193>>>>>>>>>        Boolean retVal
22193>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
22194>>>>>>>>>        Function_Return retVal
22195>>>>>>>>>    End_Function
22196>>>>>>>>>
22196>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
22198>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
22199>>>>>>>>>    End_Procedure
22200>>>>>>>>>
22200>>>>>>>>>    Function ComWidth Returns Integer
22202>>>>>>>>>        Integer retVal
22202>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
22203>>>>>>>>>        Function_Return retVal
22204>>>>>>>>>    End_Function
22205>>>>>>>>>
22205>>>>>>>>>    Procedure Set ComWidth Integer value
22207>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
22208>>>>>>>>>    End_Procedure
22209>>>>>>>>>
22209>>>>>>>>>    Function ComCloseable Returns Boolean
22211>>>>>>>>>        Boolean retVal
22211>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
22212>>>>>>>>>        Function_Return retVal
22213>>>>>>>>>    End_Function
22214>>>>>>>>>
22214>>>>>>>>>    Procedure Set ComCloseable Boolean value
22216>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
22217>>>>>>>>>    End_Procedure
22218>>>>>>>>>
22218>>>>>>>>>    Function ComEnableAnimation Returns Boolean
22220>>>>>>>>>        Boolean retVal
22220>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
22221>>>>>>>>>        Function_Return retVal
22222>>>>>>>>>    End_Function
22223>>>>>>>>>
22223>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
22225>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
22226>>>>>>>>>    End_Procedure
22227>>>>>>>>>
22227>>>>>>>>>    Function ComShowGripper Returns Boolean
22229>>>>>>>>>        Boolean retVal
22229>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
22230>>>>>>>>>        Function_Return retVal
22231>>>>>>>>>    End_Function
22232>>>>>>>>>
22232>>>>>>>>>    Procedure Set ComShowGripper Boolean value
22234>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
22235>>>>>>>>>    End_Procedure
22236>>>>>>>>>
22236>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
22238>>>>>>>>>        XTPButtonStyle retVal
22238>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
22239>>>>>>>>>        Function_Return retVal
22240>>>>>>>>>    End_Function
22241>>>>>>>>>
22241>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
22243>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
22244>>>>>>>>>    End_Procedure
22245>>>>>>>>>
22245>>>>>>>>>    Function ComCustomizable Returns Boolean
22247>>>>>>>>>        Boolean retVal
22247>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
22248>>>>>>>>>        Function_Return retVal
22249>>>>>>>>>    End_Function
22250>>>>>>>>>
22250>>>>>>>>>    Procedure Set ComCustomizable Boolean value
22252>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
22253>>>>>>>>>    End_Procedure
22254>>>>>>>>>
22254>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
22256>>>>>>>>>        Boolean retVal
22256>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
22257>>>>>>>>>        Function_Return retVal
22258>>>>>>>>>    End_Function
22259>>>>>>>>>
22259>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
22261>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
22262>>>>>>>>>    End_Procedure
22263>>>>>>>>>
22263>>>>>>>>>    Function ComShowExpandButton Returns Boolean
22265>>>>>>>>>        Boolean retVal
22265>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
22266>>>>>>>>>        Function_Return retVal
22267>>>>>>>>>    End_Function
22268>>>>>>>>>
22268>>>>>>>>>    Procedure Set ComShowExpandButton Boolean value
22270>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
22271>>>>>>>>>    End_Procedure
22272>>>>>>>>>
22272>>>>>>>>>    Function ComSelectedControl Returns Variant
22274>>>>>>>>>        Variant retVal
22274>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
22275>>>>>>>>>        Function_Return retVal
22276>>>>>>>>>    End_Function
22277>>>>>>>>>
22277>>>>>>>>>    Procedure Set ComSelectedControl Variant value
22279>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
22280>>>>>>>>>    End_Procedure
22281>>>>>>>>>
22281>>>>>>>>>    Function ComCustomizeDialogPresent Returns Boolean
22283>>>>>>>>>        Boolean retVal
22283>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to retVal
22284>>>>>>>>>        Function_Return retVal
22285>>>>>>>>>    End_Function
22286>>>>>>>>>
22286>>>>>>>>>    Procedure Set ComCustomizeDialogPresent Boolean value
22288>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to value
22289>>>>>>>>>    End_Procedure
22290>>>>>>>>>
22290>>>>>>>>>    Function ComType Returns XTPBarType
22292>>>>>>>>>        Handle hDispatchDriver
22292>>>>>>>>>        XTPBarType retVal
22292>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22293>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
22294>>>>>>>>>        Function_Return retVal
22295>>>>>>>>>    End_Function
22296>>>>>>>>>
22296>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
22298>>>>>>>>>        Handle hDispatchDriver
22298>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22299>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22300>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
22301>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
22302>>>>>>>>>    End_Procedure
22303>>>>>>>>>
22303>>>>>>>>>    Function ComBuiltIn Returns Boolean
22305>>>>>>>>>        Handle hDispatchDriver
22305>>>>>>>>>        Boolean retVal
22305>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22306>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
22307>>>>>>>>>        Function_Return retVal
22308>>>>>>>>>    End_Function
22309>>>>>>>>>
22309>>>>>>>>>    Procedure ComDelete
22311>>>>>>>>>        Handle hDispatchDriver
22311>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22312>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
22313>>>>>>>>>    End_Procedure
22314>>>>>>>>>
22314>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
22316>>>>>>>>>        Handle hDispatchDriver
22316>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22317>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22318>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
22319>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
22320>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
22321>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
22322>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
22323>>>>>>>>>    End_Procedure
22324>>>>>>>>>
22324>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
22326>>>>>>>>>        Handle hDispatchDriver
22326>>>>>>>>>        OLE_HANDLE retVal
22326>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22327>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
22328>>>>>>>>>        Function_Return retVal
22329>>>>>>>>>    End_Function
22330>>>>>>>>>
22330>>>>>>>>>    Function ComCommandBars Returns Variant
22332>>>>>>>>>        Handle hDispatchDriver
22332>>>>>>>>>        Variant retVal
22332>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22333>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
22334>>>>>>>>>        Function_Return retVal
22335>>>>>>>>>    End_Function
22336>>>>>>>>>
22336>>>>>>>>>    Function ComControls Returns Variant
22338>>>>>>>>>        Handle hDispatchDriver
22338>>>>>>>>>        Variant retVal
22338>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22339>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
22340>>>>>>>>>        Function_Return retVal
22341>>>>>>>>>    End_Function
22342>>>>>>>>>
22342>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
22344>>>>>>>>>        Handle hDispatchDriver
22344>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22345>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22346>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
22347>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
22348>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
22349>>>>>>>>>    End_Procedure
22350>>>>>>>>>
22350>>>>>>>>>    Function ComGetIconWidth Returns Integer
22352>>>>>>>>>        Handle hDispatchDriver
22352>>>>>>>>>        Integer retVal
22352>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22353>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
22354>>>>>>>>>        Function_Return retVal
22355>>>>>>>>>    End_Function
22356>>>>>>>>>
22356>>>>>>>>>    Function ComGetIconHeight Returns Integer
22358>>>>>>>>>        Handle hDispatchDriver
22358>>>>>>>>>        Integer retVal
22358>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22359>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
22360>>>>>>>>>        Function_Return retVal
22361>>>>>>>>>    End_Function
22362>>>>>>>>>
22362>>>>>>>>>    Function ComParent Returns Variant
22364>>>>>>>>>        Handle hDispatchDriver
22364>>>>>>>>>        Variant retVal
22364>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22365>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
22366>>>>>>>>>        Function_Return retVal
22367>>>>>>>>>    End_Function
22368>>>>>>>>>
22368>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
22370>>>>>>>>>        Handle hDispatchDriver
22370>>>>>>>>>        Variant retVal
22370>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22371>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22372>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
22373>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
22374>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
22375>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
22376>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
22377>>>>>>>>>        Function_Return retVal
22378>>>>>>>>>    End_Function
22379>>>>>>>>>
22379>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
22381>>>>>>>>>        Handle hDispatchDriver
22381>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22382>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22383>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22384>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22385>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
22386>>>>>>>>>    End_Procedure
22387>>>>>>>>>
22387>>>>>>>>>    Procedure ComModifyStyle XTPCommandBarStyle llRemove XTPCommandBarStyle llAdd
22389>>>>>>>>>        Handle hDispatchDriver
22389>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22390>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22391>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22392>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22393>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
22394>>>>>>>>>    End_Procedure
22395>>>>>>>>>
22395>>>>>>>>>    Procedure ComRedrawBar
22397>>>>>>>>>        Handle hDispatchDriver
22397>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22398>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
22399>>>>>>>>>    End_Procedure
22400>>>>>>>>>
22400>>>>>>>>>    Procedure ComRecalcLayout
22402>>>>>>>>>        Handle hDispatchDriver
22402>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22403>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
22404>>>>>>>>>    End_Procedure
22405>>>>>>>>>
22405>>>>>>>>>    Procedure ComReset
22407>>>>>>>>>        Handle hDispatchDriver
22407>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22408>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
22409>>>>>>>>>    End_Procedure
22410>>>>>>>>>
22410>>>>>>>>>    Function ComMDIMenus Returns Variant
22412>>>>>>>>>        Handle hDispatchDriver
22412>>>>>>>>>        Variant retVal
22412>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22413>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 130 OLE_VT_DISPATCH to retVal
22414>>>>>>>>>        Function_Return retVal
22415>>>>>>>>>    End_Function
22416>>>>>>>>>
22416>>>>>>>>>    Procedure ComSwitchMDIMenu Integer llId
22418>>>>>>>>>        Handle hDispatchDriver
22418>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22419>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22420>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22421>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 131 OLE_VT_VOID
22422>>>>>>>>>    End_Procedure
22423>>>>>>>>>End_Class
22424>>>>>>>>>
22424>>>>>>>>>// CoClass
22424>>>>>>>>>// CLSID: {C0DE2000-603B-4AB7-B560-A2E43ADB22FC}
22424>>>>>>>>>Class cCJComMenuBar is a cComAutomationObject
22425>>>>>>>>>    Import_Class_Protocol cCJIMenuBar
22426>>>>>>>>>
22426>>>>>>>>>    Procedure Construct_Object
22428>>>>>>>>>        Forward Send Construct_Object
22430>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22431>>>>>>>>>    End_Procedure
22432>>>>>>>>>End_Class
22433>>>>>>>>>
22433>>>>>>>>>// CLSID: {C0DE2000-9D11-4373-B444-BC1F646D2B4D}
22433>>>>>>>>>Class cCJICommandBarsContextMenus is a Mixin
22434>>>>>>>>>
22434>>>>>>>>>    // Gets the number of menus in the collection.
22434>>>>>>>>>    Function ComCount Returns Integer
22436>>>>>>>>>        Handle hDispatchDriver
22436>>>>>>>>>        Integer retVal
22436>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22437>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
22438>>>>>>>>>        Function_Return retVal
22439>>>>>>>>>    End_Function
22440>>>>>>>>>
22440>>>>>>>>>    // Gets an item from the collection by its index.
22440>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
22442>>>>>>>>>        Handle hDispatchDriver
22442>>>>>>>>>        Variant retVal
22442>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22443>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22444>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22445>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
22446>>>>>>>>>        Function_Return retVal
22447>>>>>>>>>    End_Function
22448>>>>>>>>>
22448>>>>>>>>>    Function Com_NewEnum Returns Variant
22450>>>>>>>>>        Handle hDispatchDriver
22450>>>>>>>>>        Variant retVal
22450>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22451>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
22452>>>>>>>>>        Function_Return retVal
22453>>>>>>>>>    End_Function
22454>>>>>>>>>
22454>>>>>>>>>    // Adds a new command bar to the collection.
22454>>>>>>>>>    Function ComAdd Integer llId String llCaption Returns Variant
22456>>>>>>>>>        Handle hDispatchDriver
22456>>>>>>>>>        Variant retVal
22456>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22457>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22458>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22459>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
22460>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
22461>>>>>>>>>        Function_Return retVal
22462>>>>>>>>>    End_Function
22463>>>>>>>>>
22463>>>>>>>>>    // Finds the specified menu
22463>>>>>>>>>    Function ComFind Integer llId Returns Variant
22465>>>>>>>>>        Handle hDispatchDriver
22465>>>>>>>>>        Variant retVal
22465>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22466>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22467>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22468>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
22469>>>>>>>>>        Function_Return retVal
22470>>>>>>>>>    End_Function
22471>>>>>>>>>
22471>>>>>>>>>    // Deletes all of the menus from the collection
22471>>>>>>>>>    Procedure ComDeleteAll
22473>>>>>>>>>        Handle hDispatchDriver
22473>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22474>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
22475>>>>>>>>>    End_Procedure
22476>>>>>>>>>
22476>>>>>>>>>    // Adds a new command bar to the collection.
22476>>>>>>>>>    Procedure ComAddPopup Variant llPopupBar
22478>>>>>>>>>        Handle hDispatchDriver
22478>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22479>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22480>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llPopupBar
22481>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
22482>>>>>>>>>    End_Procedure
22483>>>>>>>>>End_Class
22484>>>>>>>>>
22484>>>>>>>>>// CoClass
22484>>>>>>>>>// CLSID: {C0DE2000-E6F6-4FC8-8273-AD15CCF8D293}
22484>>>>>>>>>Class cCJCommandBarsContextMenus is a cComAutomationObject
22485>>>>>>>>>    Import_Class_Protocol cCJICommandBarsContextMenus
22486>>>>>>>>>
22486>>>>>>>>>    Procedure Construct_Object
22488>>>>>>>>>        Forward Send Construct_Object
22490>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22491>>>>>>>>>    End_Procedure
22492>>>>>>>>>End_Class
22493>>>>>>>>>
22493>>>>>>>>>// CLSID: {C0DE2000-37BE-497E-A56D-D0CBDF0B3F97}
22493>>>>>>>>>Class cCJITabToolBar is a Mixin
22494>>>>>>>>>
22494>>>>>>>>>    Function ComTitle Returns String
22496>>>>>>>>>        String retVal
22496>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
22497>>>>>>>>>        Function_Return retVal
22498>>>>>>>>>    End_Function
22499>>>>>>>>>
22499>>>>>>>>>    Procedure Set ComTitle String value
22501>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
22502>>>>>>>>>    End_Procedure
22503>>>>>>>>>
22503>>>>>>>>>    Function ComVisible Returns Boolean
22505>>>>>>>>>        Boolean retVal
22505>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
22506>>>>>>>>>        Function_Return retVal
22507>>>>>>>>>    End_Function
22508>>>>>>>>>
22508>>>>>>>>>    Procedure Set ComVisible Boolean value
22510>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
22511>>>>>>>>>    End_Procedure
22512>>>>>>>>>
22512>>>>>>>>>    Function ComPosition Returns XTPBarPosition
22514>>>>>>>>>        XTPBarPosition retVal
22514>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
22515>>>>>>>>>        Function_Return retVal
22516>>>>>>>>>    End_Function
22517>>>>>>>>>
22517>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
22519>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
22520>>>>>>>>>    End_Procedure
22521>>>>>>>>>
22521>>>>>>>>>    Function ComBarID Returns Integer
22523>>>>>>>>>        Integer retVal
22523>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
22524>>>>>>>>>        Function_Return retVal
22525>>>>>>>>>    End_Function
22526>>>>>>>>>
22526>>>>>>>>>    Procedure Set ComBarID Integer value
22528>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
22529>>>>>>>>>    End_Procedure
22530>>>>>>>>>
22530>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
22532>>>>>>>>>        Boolean retVal
22532>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
22533>>>>>>>>>        Function_Return retVal
22534>>>>>>>>>    End_Function
22535>>>>>>>>>
22535>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
22537>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
22538>>>>>>>>>    End_Procedure
22539>>>>>>>>>
22539>>>>>>>>>    Function ComWidth Returns Integer
22541>>>>>>>>>        Integer retVal
22541>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
22542>>>>>>>>>        Function_Return retVal
22543>>>>>>>>>    End_Function
22544>>>>>>>>>
22544>>>>>>>>>    Procedure Set ComWidth Integer value
22546>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
22547>>>>>>>>>    End_Procedure
22548>>>>>>>>>
22548>>>>>>>>>    Function ComCloseable Returns Boolean
22550>>>>>>>>>        Boolean retVal
22550>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
22551>>>>>>>>>        Function_Return retVal
22552>>>>>>>>>    End_Function
22553>>>>>>>>>
22553>>>>>>>>>    Procedure Set ComCloseable Boolean value
22555>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
22556>>>>>>>>>    End_Procedure
22557>>>>>>>>>
22557>>>>>>>>>    Function ComEnableAnimation Returns Boolean
22559>>>>>>>>>        Boolean retVal
22559>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
22560>>>>>>>>>        Function_Return retVal
22561>>>>>>>>>    End_Function
22562>>>>>>>>>
22562>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
22564>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
22565>>>>>>>>>    End_Procedure
22566>>>>>>>>>
22566>>>>>>>>>    Function ComShowGripper Returns Boolean
22568>>>>>>>>>        Boolean retVal
22568>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
22569>>>>>>>>>        Function_Return retVal
22570>>>>>>>>>    End_Function
22571>>>>>>>>>
22571>>>>>>>>>    Procedure Set ComShowGripper Boolean value
22573>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
22574>>>>>>>>>    End_Procedure
22575>>>>>>>>>
22575>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
22577>>>>>>>>>        XTPButtonStyle retVal
22577>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
22578>>>>>>>>>        Function_Return retVal
22579>>>>>>>>>    End_Function
22580>>>>>>>>>
22580>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
22582>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
22583>>>>>>>>>    End_Procedure
22584>>>>>>>>>
22584>>>>>>>>>    Function ComCustomizable Returns Boolean
22586>>>>>>>>>        Boolean retVal
22586>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
22587>>>>>>>>>        Function_Return retVal
22588>>>>>>>>>    End_Function
22589>>>>>>>>>
22589>>>>>>>>>    Procedure Set ComCustomizable Boolean value
22591>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
22592>>>>>>>>>    End_Procedure
22593>>>>>>>>>
22593>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
22595>>>>>>>>>        Boolean retVal
22595>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
22596>>>>>>>>>        Function_Return retVal
22597>>>>>>>>>    End_Function
22598>>>>>>>>>
22598>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
22600>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
22601>>>>>>>>>    End_Procedure
22602>>>>>>>>>
22602>>>>>>>>>    Function ComDoubleGripper Returns Boolean
22604>>>>>>>>>        Boolean retVal
22604>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
22605>>>>>>>>>        Function_Return retVal
22606>>>>>>>>>    End_Function
22607>>>>>>>>>
22607>>>>>>>>>    Procedure Set ComDoubleGripper Boolean value
22609>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
22610>>>>>>>>>    End_Procedure
22611>>>>>>>>>
22611>>>>>>>>>    Function ComShowExpandButton Returns Boolean
22613>>>>>>>>>        Boolean retVal
22613>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
22614>>>>>>>>>        Function_Return retVal
22615>>>>>>>>>    End_Function
22616>>>>>>>>>
22616>>>>>>>>>    Procedure Set ComShowExpandButton Boolean value
22618>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
22619>>>>>>>>>    End_Procedure
22620>>>>>>>>>
22620>>>>>>>>>    Function ComSelectedControl Returns Variant
22622>>>>>>>>>        Variant retVal
22622>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
22623>>>>>>>>>        Function_Return retVal
22624>>>>>>>>>    End_Function
22625>>>>>>>>>
22625>>>>>>>>>    Procedure Set ComSelectedControl Variant value
22627>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
22628>>>>>>>>>    End_Procedure
22629>>>>>>>>>
22629>>>>>>>>>    Function ComCustomizeDialogPresent Returns Boolean
22631>>>>>>>>>        Boolean retVal
22631>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to retVal
22632>>>>>>>>>        Function_Return retVal
22633>>>>>>>>>    End_Function
22634>>>>>>>>>
22634>>>>>>>>>    Procedure Set ComCustomizeDialogPresent Boolean value
22636>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to value
22637>>>>>>>>>    End_Procedure
22638>>>>>>>>>
22638>>>>>>>>>    Function ComMinimumWidth Returns Integer
22640>>>>>>>>>        Integer retVal
22640>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 104 OLE_VT_I4 to retVal
22641>>>>>>>>>        Function_Return retVal
22642>>>>>>>>>    End_Function
22643>>>>>>>>>
22643>>>>>>>>>    Procedure Set ComMinimumWidth Integer value
22645>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 104 OLE_VT_I4 to value
22646>>>>>>>>>    End_Procedure
22647>>>>>>>>>
22647>>>>>>>>>    Function ComAllowReorder Returns Boolean
22649>>>>>>>>>        Boolean retVal
22649>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_BOOL to retVal
22650>>>>>>>>>        Function_Return retVal
22651>>>>>>>>>    End_Function
22652>>>>>>>>>
22652>>>>>>>>>    Procedure Set ComAllowReorder Boolean value
22654>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_BOOL to value
22655>>>>>>>>>    End_Procedure
22656>>>>>>>>>
22656>>>>>>>>>    Function ComType Returns XTPBarType
22658>>>>>>>>>        Handle hDispatchDriver
22658>>>>>>>>>        XTPBarType retVal
22658>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22659>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
22660>>>>>>>>>        Function_Return retVal
22661>>>>>>>>>    End_Function
22662>>>>>>>>>
22662>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
22664>>>>>>>>>        Handle hDispatchDriver
22664>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22665>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22666>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
22667>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
22668>>>>>>>>>    End_Procedure
22669>>>>>>>>>
22669>>>>>>>>>    Function ComBuiltIn Returns Boolean
22671>>>>>>>>>        Handle hDispatchDriver
22671>>>>>>>>>        Boolean retVal
22671>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22672>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
22673>>>>>>>>>        Function_Return retVal
22674>>>>>>>>>    End_Function
22675>>>>>>>>>
22675>>>>>>>>>    Procedure ComDelete
22677>>>>>>>>>        Handle hDispatchDriver
22677>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22678>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
22679>>>>>>>>>    End_Procedure
22680>>>>>>>>>
22680>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
22682>>>>>>>>>        Handle hDispatchDriver
22682>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22683>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22684>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
22685>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
22686>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
22687>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
22688>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
22689>>>>>>>>>    End_Procedure
22690>>>>>>>>>
22690>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
22692>>>>>>>>>        Handle hDispatchDriver
22692>>>>>>>>>        OLE_HANDLE retVal
22692>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22693>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
22694>>>>>>>>>        Function_Return retVal
22695>>>>>>>>>    End_Function
22696>>>>>>>>>
22696>>>>>>>>>    Function ComCommandBars Returns Variant
22698>>>>>>>>>        Handle hDispatchDriver
22698>>>>>>>>>        Variant retVal
22698>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22699>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
22700>>>>>>>>>        Function_Return retVal
22701>>>>>>>>>    End_Function
22702>>>>>>>>>
22702>>>>>>>>>    Function ComControls Returns Variant
22704>>>>>>>>>        Handle hDispatchDriver
22704>>>>>>>>>        Variant retVal
22704>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22705>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
22706>>>>>>>>>        Function_Return retVal
22707>>>>>>>>>    End_Function
22708>>>>>>>>>
22708>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
22710>>>>>>>>>        Handle hDispatchDriver
22710>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22711>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22712>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
22713>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
22714>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
22715>>>>>>>>>    End_Procedure
22716>>>>>>>>>
22716>>>>>>>>>    Function ComGetIconWidth Returns Integer
22718>>>>>>>>>        Handle hDispatchDriver
22718>>>>>>>>>        Integer retVal
22718>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22719>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
22720>>>>>>>>>        Function_Return retVal
22721>>>>>>>>>    End_Function
22722>>>>>>>>>
22722>>>>>>>>>    Function ComGetIconHeight Returns Integer
22724>>>>>>>>>        Handle hDispatchDriver
22724>>>>>>>>>        Integer retVal
22724>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22725>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
22726>>>>>>>>>        Function_Return retVal
22727>>>>>>>>>    End_Function
22728>>>>>>>>>
22728>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
22730>>>>>>>>>        Handle hDispatchDriver
22730>>>>>>>>>        Variant retVal
22730>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22731>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22732>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
22733>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
22734>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
22735>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
22736>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
22737>>>>>>>>>        Function_Return retVal
22738>>>>>>>>>    End_Function
22739>>>>>>>>>
22739>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
22741>>>>>>>>>        Handle hDispatchDriver
22741>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22742>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22743>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22744>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22745>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
22746>>>>>>>>>    End_Procedure
22747>>>>>>>>>
22747>>>>>>>>>    Procedure ComModifyStyle XTPCommandBarStyle llRemove XTPCommandBarStyle llAdd
22749>>>>>>>>>        Handle hDispatchDriver
22749>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22750>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22751>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22752>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22753>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
22754>>>>>>>>>    End_Procedure
22755>>>>>>>>>
22755>>>>>>>>>    Procedure ComRedrawBar
22757>>>>>>>>>        Handle hDispatchDriver
22757>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22758>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
22759>>>>>>>>>    End_Procedure
22760>>>>>>>>>
22760>>>>>>>>>    Procedure ComRecalcLayout
22762>>>>>>>>>        Handle hDispatchDriver
22762>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22763>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
22764>>>>>>>>>    End_Procedure
22765>>>>>>>>>
22765>>>>>>>>>    Procedure ComReset
22767>>>>>>>>>        Handle hDispatchDriver
22767>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22768>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
22769>>>>>>>>>    End_Procedure
22770>>>>>>>>>
22770>>>>>>>>>    Function ComInsertCategory Integer llIndex String llCategory Returns Variant
22772>>>>>>>>>        Handle hDispatchDriver
22772>>>>>>>>>        Variant retVal
22772>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22773>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22774>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22775>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCategory
22776>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
22777>>>>>>>>>        Function_Return retVal
22778>>>>>>>>>    End_Function
22779>>>>>>>>>
22779>>>>>>>>>    Function ComCategoryCount Returns Integer
22781>>>>>>>>>        Handle hDispatchDriver
22781>>>>>>>>>        Integer retVal
22781>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22782>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
22783>>>>>>>>>        Function_Return retVal
22784>>>>>>>>>    End_Function
22785>>>>>>>>>
22785>>>>>>>>>    Function ComCategory Integer llIndex Returns Variant
22787>>>>>>>>>        Handle hDispatchDriver
22787>>>>>>>>>        Variant retVal
22787>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22788>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22789>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22790>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
22791>>>>>>>>>        Function_Return retVal
22792>>>>>>>>>    End_Function
22793>>>>>>>>>
22793>>>>>>>>>    Function Com_NewEnum Returns Variant
22795>>>>>>>>>        Handle hDispatchDriver
22795>>>>>>>>>        Variant retVal
22795>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22796>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
22797>>>>>>>>>        Function_Return retVal
22798>>>>>>>>>    End_Function
22799>>>>>>>>>
22799>>>>>>>>>    Procedure ComRemoveCategory Integer llIndex
22801>>>>>>>>>        Handle hDispatchDriver
22801>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22802>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22803>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22804>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 102 OLE_VT_VOID
22805>>>>>>>>>    End_Procedure
22806>>>>>>>>>
22806>>>>>>>>>    Function ComTabPaintManager Returns Variant
22808>>>>>>>>>        Handle hDispatchDriver
22808>>>>>>>>>        Variant retVal
22808>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22809>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_DISPATCH to retVal
22810>>>>>>>>>        Function_Return retVal
22811>>>>>>>>>    End_Function
22812>>>>>>>>>
22812>>>>>>>>>    Procedure ComUpdateTabs
22814>>>>>>>>>        Handle hDispatchDriver
22814>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22815>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 105 OLE_VT_VOID
22816>>>>>>>>>    End_Procedure
22817>>>>>>>>>End_Class
22818>>>>>>>>>
22818>>>>>>>>>// CLSID: {C0DE2000-8B30-4FE9-8F91-C1B573CF9AD5}
22818>>>>>>>>>Class cCJITabToolBarEvents is a Mixin
22819>>>>>>>>>
22819>>>>>>>>>    Procedure OnComSelectedChanged Variant llItem
22821>>>>>>>>>    End_Procedure
22822>>>>>>>>>
22822>>>>>>>>>    Procedure OnComBeforeItemClick Variant llItem Variant llCancel
22824>>>>>>>>>    End_Procedure
22825>>>>>>>>>
22825>>>>>>>>>    Procedure RegisterComEvents
22827>>>>>>>>>        Send RegisterComEvent 1 msg_OnComSelectedChanged
22828>>>>>>>>>        Send RegisterComEvent 4 msg_OnComBeforeItemClick
22829>>>>>>>>>    End_Procedure
22830>>>>>>>>>End_Class
22831>>>>>>>>>
22831>>>>>>>>>// CoClass
22831>>>>>>>>>// CLSID: {C0DE2000-37BA-4711-934F-C9612B6E00E5}
22831>>>>>>>>>Class cCJComTabToolBar is a cComAutomationObject
22832>>>>>>>>>    Import_Class_Protocol cCJITabToolBar
22833>>>>>>>>>    Import_Class_Protocol cCJITabToolBarEvents
22834>>>>>>>>>
22834>>>>>>>>>    Procedure Construct_Object
22836>>>>>>>>>        Forward Send Construct_Object
22838>>>>>>>>>        Set psEventId to "{C0DE2000-8B30-4FE9-8F91-C1B573CF9AD5}"
22839>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22840>>>>>>>>>    End_Procedure
22841>>>>>>>>>End_Class
22842>>>>>>>>>
22842>>>>>>>>>// CLSID: {C0DE2000-60E7-4964-8F11-5D62D28407B9}
22842>>>>>>>>>Class cCJIRibbonGroups is a Mixin
22843>>>>>>>>>
22843>>>>>>>>>    Function ComInsertGroup Integer llIndex String llCaption Integer llId Returns Variant
22845>>>>>>>>>        Handle hDispatchDriver
22845>>>>>>>>>        Variant retVal
22845>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22846>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
22847>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22848>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
22849>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22850>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
22851>>>>>>>>>        Function_Return retVal
22852>>>>>>>>>    End_Function
22853>>>>>>>>>
22853>>>>>>>>>    Function ComGroupCount Returns Integer
22855>>>>>>>>>        Handle hDispatchDriver
22855>>>>>>>>>        Integer retVal
22855>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22856>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
22857>>>>>>>>>        Function_Return retVal
22858>>>>>>>>>    End_Function
22859>>>>>>>>>
22859>>>>>>>>>    Function ComGroup Integer llIndex Returns Variant
22861>>>>>>>>>        Handle hDispatchDriver
22861>>>>>>>>>        Variant retVal
22861>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22862>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22863>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22864>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
22865>>>>>>>>>        Function_Return retVal
22866>>>>>>>>>    End_Function
22867>>>>>>>>>
22867>>>>>>>>>    Function Com_NewEnum Returns Variant
22869>>>>>>>>>        Handle hDispatchDriver
22869>>>>>>>>>        Variant retVal
22869>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22870>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
22871>>>>>>>>>        Function_Return retVal
22872>>>>>>>>>    End_Function
22873>>>>>>>>>
22873>>>>>>>>>    Function ComAddGroup String llCaption Integer llId Returns Variant
22875>>>>>>>>>        Handle hDispatchDriver
22875>>>>>>>>>        Variant retVal
22875>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22876>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22877>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
22878>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22879>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_DISPATCH to retVal
22880>>>>>>>>>        Function_Return retVal
22881>>>>>>>>>    End_Function
22882>>>>>>>>>
22882>>>>>>>>>    Procedure ComRemoveGroup Integer llIndex
22884>>>>>>>>>        Handle hDispatchDriver
22884>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22885>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22886>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22887>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 103 OLE_VT_VOID
22888>>>>>>>>>    End_Procedure
22889>>>>>>>>>
22889>>>>>>>>>    Procedure ComRemoveAll
22891>>>>>>>>>        Handle hDispatchDriver
22891>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22892>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 104 OLE_VT_VOID
22893>>>>>>>>>    End_Procedure
22894>>>>>>>>>
22894>>>>>>>>>    Function ComRibbonTab Returns Variant
22896>>>>>>>>>        Handle hDispatchDriver
22896>>>>>>>>>        Variant retVal
22896>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22897>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_DISPATCH to retVal
22898>>>>>>>>>        Function_Return retVal
22899>>>>>>>>>    End_Function
22900>>>>>>>>>End_Class
22901>>>>>>>>>
22901>>>>>>>>>// CoClass
22901>>>>>>>>>// CLSID: {C0DE2000-1A42-4B87-9E48-28934AC041E5}
22901>>>>>>>>>Class cCJRibbonGroups is a cComAutomationObject
22902>>>>>>>>>    Import_Class_Protocol cCJIRibbonGroups
22903>>>>>>>>>
22903>>>>>>>>>    Procedure Construct_Object
22905>>>>>>>>>        Forward Send Construct_Object
22907>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22908>>>>>>>>>    End_Procedure
22909>>>>>>>>>End_Class
22910>>>>>>>>>
22910>>>>>>>>>// CLSID: {C0DE2000-0A27-4B80-857D-192A539AE88D}
22910>>>>>>>>>Class cCJIRibbonTab is a Mixin
22911>>>>>>>>>
22911>>>>>>>>>    Function ComCaption Returns String
22913>>>>>>>>>        String retVal
22913>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
22914>>>>>>>>>        Function_Return retVal
22915>>>>>>>>>    End_Function
22916>>>>>>>>>
22916>>>>>>>>>    Procedure Set ComCaption String value
22918>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
22919>>>>>>>>>    End_Procedure
22920>>>>>>>>>
22920>>>>>>>>>    Function ComTag Returns Variant
22922>>>>>>>>>        Variant retVal
22922>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_VARIANT to retVal
22923>>>>>>>>>        Function_Return retVal
22924>>>>>>>>>    End_Function
22925>>>>>>>>>
22925>>>>>>>>>    Procedure Set ComTag Variant value
22927>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_VARIANT to value
22928>>>>>>>>>    End_Procedure
22929>>>>>>>>>
22929>>>>>>>>>    Function ComSelected Returns Boolean
22931>>>>>>>>>        Boolean retVal
22931>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
22932>>>>>>>>>        Function_Return retVal
22933>>>>>>>>>    End_Function
22934>>>>>>>>>
22934>>>>>>>>>    Procedure Set ComSelected Boolean value
22936>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
22937>>>>>>>>>    End_Procedure
22938>>>>>>>>>
22938>>>>>>>>>    Function ComImage Returns Integer
22940>>>>>>>>>        Integer retVal
22940>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
22941>>>>>>>>>        Function_Return retVal
22942>>>>>>>>>    End_Function
22943>>>>>>>>>
22943>>>>>>>>>    Procedure Set ComImage Integer value
22945>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
22946>>>>>>>>>    End_Procedure
22947>>>>>>>>>
22947>>>>>>>>>    Function ComVisible Returns Boolean
22949>>>>>>>>>        Boolean retVal
22949>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
22950>>>>>>>>>        Function_Return retVal
22951>>>>>>>>>    End_Function
22952>>>>>>>>>
22952>>>>>>>>>    Procedure Set ComVisible Boolean value
22954>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
22955>>>>>>>>>    End_Procedure
22956>>>>>>>>>
22956>>>>>>>>>    Function ComEnabled Returns Boolean
22958>>>>>>>>>        Boolean retVal
22958>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
22959>>>>>>>>>        Function_Return retVal
22960>>>>>>>>>    End_Function
22961>>>>>>>>>
22961>>>>>>>>>    Procedure Set ComEnabled Boolean value
22963>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
22964>>>>>>>>>    End_Procedure
22965>>>>>>>>>
22965>>>>>>>>>    Function ComToolTip Returns String
22967>>>>>>>>>        String retVal
22967>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
22968>>>>>>>>>        Function_Return retVal
22969>>>>>>>>>    End_Function
22970>>>>>>>>>
22970>>>>>>>>>    Procedure Set ComToolTip String value
22972>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
22973>>>>>>>>>    End_Procedure
22974>>>>>>>>>
22974>>>>>>>>>    Function ComKeyboardTip Returns String
22976>>>>>>>>>        String retVal
22976>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BSTR to retVal
22977>>>>>>>>>        Function_Return retVal
22978>>>>>>>>>    End_Function
22979>>>>>>>>>
22979>>>>>>>>>    Procedure Set ComKeyboardTip String value
22981>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BSTR to value
22982>>>>>>>>>    End_Procedure
22983>>>>>>>>>
22983>>>>>>>>>    Function ComId Returns Integer
22985>>>>>>>>>        Integer retVal
22985>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to retVal
22986>>>>>>>>>        Function_Return retVal
22987>>>>>>>>>    End_Function
22988>>>>>>>>>
22988>>>>>>>>>    Procedure Set ComId Integer value
22990>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to value
22991>>>>>>>>>    End_Procedure
22992>>>>>>>>>
22992>>>>>>>>>    Function ComColor Returns XTPRibbonTabContextColor
22994>>>>>>>>>        XTPRibbonTabContextColor retVal
22994>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_I4 to retVal
22995>>>>>>>>>        Function_Return retVal
22996>>>>>>>>>    End_Function
22997>>>>>>>>>
22997>>>>>>>>>    Procedure Set ComColor XTPRibbonTabContextColor value
22999>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_I4 to value
23000>>>>>>>>>    End_Procedure
23001>>>>>>>>>
23001>>>>>>>>>    Function ComContextCaption Returns String
23003>>>>>>>>>        String retVal
23003>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_BSTR to retVal
23004>>>>>>>>>        Function_Return retVal
23005>>>>>>>>>    End_Function
23006>>>>>>>>>
23006>>>>>>>>>    Procedure Set ComContextCaption String value
23008>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_BSTR to value
23009>>>>>>>>>    End_Procedure
23010>>>>>>>>>
23010>>>>>>>>>    Function ComCustomizeCaption Returns String
23012>>>>>>>>>        String retVal
23012>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 54 OLE_VT_BSTR to retVal
23013>>>>>>>>>        Function_Return retVal
23014>>>>>>>>>    End_Function
23015>>>>>>>>>
23015>>>>>>>>>    Procedure Set ComCustomizeCaption String value
23017>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 54 OLE_VT_BSTR to value
23018>>>>>>>>>    End_Procedure
23019>>>>>>>>>
23019>>>>>>>>>    Function ComIndex Returns Integer
23021>>>>>>>>>        Handle hDispatchDriver
23021>>>>>>>>>        Integer retVal
23021>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23022>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
23023>>>>>>>>>        Function_Return retVal
23024>>>>>>>>>    End_Function
23025>>>>>>>>>
23025>>>>>>>>>    Procedure ComMove Integer llIndex
23027>>>>>>>>>        Handle hDispatchDriver
23027>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23028>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23029>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
23030>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
23031>>>>>>>>>    End_Procedure
23032>>>>>>>>>
23032>>>>>>>>>    Function ComRibbonBar Returns Variant
23034>>>>>>>>>        Handle hDispatchDriver
23034>>>>>>>>>        Variant retVal
23034>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23035>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
23036>>>>>>>>>        Function_Return retVal
23037>>>>>>>>>    End_Function
23038>>>>>>>>>
23038>>>>>>>>>    Function ComGroups Returns Variant
23040>>>>>>>>>        Handle hDispatchDriver
23040>>>>>>>>>        Variant retVal
23040>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23041>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_DISPATCH to retVal
23042>>>>>>>>>        Function_Return retVal
23043>>>>>>>>>    End_Function
23044>>>>>>>>>
23044>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
23046>>>>>>>>>        Handle hDispatchDriver
23046>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23047>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23048>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
23049>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
23050>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
23051>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
23052>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 110 OLE_VT_VOID
23053>>>>>>>>>    End_Procedure
23054>>>>>>>>>End_Class
23055>>>>>>>>>
23055>>>>>>>>>// CoClass
23055>>>>>>>>>// CLSID: {C0DE2000-D924-4C08-92F8-D2B03CE65E1E}
23055>>>>>>>>>Class cCJRibbonTab is a cComAutomationObject
23056>>>>>>>>>    Import_Class_Protocol cCJIRibbonTab
23057>>>>>>>>>
23057>>>>>>>>>    Procedure Construct_Object
23059>>>>>>>>>        Forward Send Construct_Object
23061>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
23062>>>>>>>>>    End_Procedure
23063>>>>>>>>>End_Class
23064>>>>>>>>>
23064>>>>>>>>>// CLSID: {C0DE2000-AF64-4A71-94AE-1160A10E487A}
23064>>>>>>>>>Class cCJIRibbonBar is a Mixin
23065>>>>>>>>>
23065>>>>>>>>>    Function ComTitle Returns String
23067>>>>>>>>>        String retVal
23067>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
23068>>>>>>>>>        Function_Return retVal
23069>>>>>>>>>    End_Function
23070>>>>>>>>>
23070>>>>>>>>>    Procedure Set ComTitle String value
23072>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
23073>>>>>>>>>    End_Procedure
23074>>>>>>>>>
23074>>>>>>>>>    Function ComVisible Returns Boolean
23076>>>>>>>>>        Boolean retVal
23076>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
23077>>>>>>>>>        Function_Return retVal
23078>>>>>>>>>    End_Function
23079>>>>>>>>>
23079>>>>>>>>>    Procedure Set ComVisible Boolean value
23081>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
23082>>>>>>>>>    End_Procedure
23083>>>>>>>>>
23083>>>>>>>>>    Function ComPosition Returns XTPBarPosition
23085>>>>>>>>>        XTPBarPosition retVal
23085>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
23086>>>>>>>>>        Function_Return retVal
23087>>>>>>>>>    End_Function
23088>>>>>>>>>
23088>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
23090>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
23091>>>>>>>>>    End_Procedure
23092>>>>>>>>>
23092>>>>>>>>>    Function ComBarID Returns Integer
23094>>>>>>>>>        Integer retVal
23094>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
23095>>>>>>>>>        Function_Return retVal
23096>>>>>>>>>    End_Function
23097>>>>>>>>>
23097>>>>>>>>>    Procedure Set ComBarID Integer value
23099>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
23100>>>>>>>>>    End_Procedure
23101>>>>>>>>>
23101>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
23103>>>>>>>>>        Boolean retVal
23103>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
23104>>>>>>>>>        Function_Return retVal
23105>>>>>>>>>    End_Function
23106>>>>>>>>>
23106>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
23108>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
23109>>>>>>>>>    End_Procedure
23110>>>>>>>>>
23110>>>>>>>>>    Function ComWidth Returns Integer
23112>>>>>>>>>        Integer retVal
23112>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
23113>>>>>>>>>        Function_Return retVal
23114>>>>>>>>>    End_Function
23115>>>>>>>>>
23115>>>>>>>>>    Procedure Set ComWidth Integer value
23117>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
23118>>>>>>>>>    End_Procedure
23119>>>>>>>>>
23119>>>>>>>>>    Function ComCloseable Returns Boolean
23121>>>>>>>>>        Boolean retVal
23121>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
23122>>>>>>>>>        Function_Return retVal
23123>>>>>>>>>    End_Function
23124>>>>>>>>>
23124>>>>>>>>>    Procedure Set ComCloseable Boolean value
23126>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
23127>>>>>>>>>    End_Procedure
23128>>>>>>>>>
23128>>>>>>>>>    Function ComEnableAnimation Returns Boolean
23130>>>>>>>>>        Boolean retVal
23130>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
23131>>>>>>>>>        Function_Return retVal
23132>>>>>>>>>    End_Function
23133>>>>>>>>>
23133>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
23135>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
23136>>>>>>>>>    End_Procedure
23137>>>>>>>>>
23137>>>>>>>>>    Function ComShowGripper Returns Boolean
23139>>>>>>>>>        Boolean retVal
23139>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
23140>>>>>>>>>        Function_Return retVal
23141>>>>>>>>>    End_Function
23142>>>>>>>>>
23142>>>>>>>>>    Procedure Set ComShowGripper Boolean value
23144>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
23145>>>>>>>>>    End_Procedure
23146>>>>>>>>>
23146>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
23148>>>>>>>>>        XTPButtonStyle retVal
23148>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
23149>>>>>>>>>        Function_Return retVal
23150>>>>>>>>>    End_Function
23151>>>>>>>>>
23151>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
23153>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
23154>>>>>>>>>    End_Procedure
23155>>>>>>>>>
23155>>>>>>>>>    Function ComCustomizable Returns Boolean
23157>>>>>>>>>        Boolean retVal
23157>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
23158>>>>>>>>>        Function_Return retVal
23159>>>>>>>>>    End_Function
23160>>>>>>>>>
23160>>>>>>>>>    Procedure Set ComCustomizable Boolean value
23162>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
23163>>>>>>>>>    End_Procedure
23164>>>>>>>>>
23164>>>>>>>>>    Function ComSelectedControl Returns Variant
23166>>>>>>>>>        Variant retVal
23166>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
23167>>>>>>>>>        Function_Return retVal
23168>>>>>>>>>    End_Function
23169>>>>>>>>>
23169>>>>>>>>>    Procedure Set ComSelectedControl Variant value
23171>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
23172>>>>>>>>>    End_Procedure
23173>>>>>>>>>
23173>>>>>>>>>    Function ComGroupsVisible Returns Boolean
23175>>>>>>>>>        Boolean retVal
23175>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 104 OLE_VT_BOOL to retVal
23176>>>>>>>>>        Function_Return retVal
23177>>>>>>>>>    End_Function
23178>>>>>>>>>
23178>>>>>>>>>    Procedure Set ComGroupsVisible Boolean value
23180>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 104 OLE_VT_BOOL to value
23181>>>>>>>>>    End_Procedure
23182>>>>>>>>>
23182>>>>>>>>>    Function ComSelectedTab Returns Variant
23184>>>>>>>>>        Variant retVal
23184>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 105 OLE_VT_DISPATCH to retVal
23185>>>>>>>>>        Function_Return retVal
23186>>>>>>>>>    End_Function
23187>>>>>>>>>
23187>>>>>>>>>    Procedure Set ComSelectedTab Variant value
23189>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 105 OLE_VT_DISPATCH to value
23190>>>>>>>>>    End_Procedure
23191>>>>>>>>>
23191>>>>>>>>>    Function ComMinimumVisibleWidth Returns Integer
23193>>>>>>>>>        Integer retVal
23193>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_I4 to retVal
23194>>>>>>>>>        Function_Return retVal
23195>>>>>>>>>    End_Function
23196>>>>>>>>>
23196>>>>>>>>>    Procedure Set ComMinimumVisibleWidth Integer value
23198>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_I4 to value
23199>>>>>>>>>    End_Procedure
23200>>>>>>>>>
23200>>>>>>>>>    Function ComShowQuickAccessBelowRibbon Returns Boolean
23202>>>>>>>>>        Boolean retVal
23202>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 110 OLE_VT_BOOL to retVal
23203>>>>>>>>>        Function_Return retVal
23204>>>>>>>>>    End_Function
23205>>>>>>>>>
23205>>>>>>>>>    Procedure Set ComShowQuickAccessBelowRibbon Boolean value
23207>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 110 OLE_VT_BOOL to value
23208>>>>>>>>>    End_Procedure
23209>>>>>>>>>
23209>>>>>>>>>    Function ComShowQuickAccess Returns Boolean
23211>>>>>>>>>        Boolean retVal
23211>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 115 OLE_VT_BOOL to retVal
23212>>>>>>>>>        Function_Return retVal
23213>>>>>>>>>    End_Function
23214>>>>>>>>>
23214>>>>>>>>>    Procedure Set ComShowQuickAccess Boolean value
23216>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 115 OLE_VT_BOOL to value
23217>>>>>>>>>    End_Procedure
23218>>>>>>>>>
23218>>>>>>>>>    Function ComAllowQuickAccessDuplicates Returns Boolean
23220>>>>>>>>>        Boolean retVal
23220>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 116 OLE_VT_BOOL to retVal
23221>>>>>>>>>        Function_Return retVal
23222>>>>>>>>>    End_Function
23223>>>>>>>>>
23223>>>>>>>>>    Procedure Set ComAllowQuickAccessDuplicates Boolean value
23225>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 116 OLE_VT_BOOL to value
23226>>>>>>>>>    End_Procedure
23227>>>>>>>>>
23227>>>>>>>>>    Function ComAllowMinimize Returns Boolean
23229>>>>>>>>>        Boolean retVal
23229>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 117 OLE_VT_BOOL to retVal
23230>>>>>>>>>        Function_Return retVal
23231>>>>>>>>>    End_Function
23232>>>>>>>>>
23232>>>>>>>>>    Procedure Set ComAllowMinimize Boolean value
23234>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 117 OLE_VT_BOOL to value
23235>>>>>>>>>    End_Procedure
23236>>>>>>>>>
23236>>>>>>>>>    Function ComMinimized Returns Boolean
23238>>>>>>>>>        Boolean retVal
23238>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 118 OLE_VT_BOOL to retVal
23239>>>>>>>>>        Function_Return retVal
23240>>>>>>>>>    End_Function
23241>>>>>>>>>
23241>>>>>>>>>    Procedure Set ComMinimized Boolean value
23243>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 118 OLE_VT_BOOL to value
23244>>>>>>>>>    End_Procedure
23245>>>>>>>>>
23245>>>>>>>>>    Function ComFontHeight Returns Integer
23247>>>>>>>>>        Integer retVal
23247>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 119 OLE_VT_I4 to retVal
23248>>>>>>>>>        Function_Return retVal
23249>>>>>>>>>    End_Function
23250>>>>>>>>>
23250>>>>>>>>>    Procedure Set ComFontHeight Integer value
23252>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 119 OLE_VT_I4 to value
23253>>>>>>>>>    End_Procedure
23254>>>>>>>>>
23254>>>>>>>>>    Function ComTabsVisible Returns Boolean
23256>>>>>>>>>        Boolean retVal
23256>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_BOOL to retVal
23257>>>>>>>>>        Function_Return retVal
23258>>>>>>>>>    End_Function
23259>>>>>>>>>
23259>>>>>>>>>    Procedure Set ComTabsVisible Boolean value
23261>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_BOOL to value
23262>>>>>>>>>    End_Procedure
23263>>>>>>>>>
23263>>>>>>>>>    Function ComShowCaptionAlways Returns Boolean
23265>>>>>>>>>        Boolean retVal
23265>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 123 OLE_VT_BOOL to retVal
23266>>>>>>>>>        Function_Return retVal
23267>>>>>>>>>    End_Function
23268>>>>>>>>>
23268>>>>>>>>>    Procedure Set ComShowCaptionAlways Boolean value
23270>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 123 OLE_VT_BOOL to value
23271>>>>>>>>>    End_Procedure
23272>>>>>>>>>
23272>>>>>>>>>    Function ComAllowQuickAccessCustomization Returns Boolean
23274>>>>>>>>>        Boolean retVal
23274>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 124 OLE_VT_BOOL to retVal
23275>>>>>>>>>        Function_Return retVal
23276>>>>>>>>>    End_Function
23277>>>>>>>>>
23277>>>>>>>>>    Procedure Set ComAllowQuickAccessCustomization Boolean value
23279>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 124 OLE_VT_BOOL to value
23280>>>>>>>>>    End_Procedure
23281>>>>>>>>>
23281>>>>>>>>>    Function ComGroupsHeight Returns Integer
23283>>>>>>>>>        Integer retVal
23283>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 125 OLE_VT_I4 to retVal
23284>>>>>>>>>        Function_Return retVal
23285>>>>>>>>>    End_Function
23286>>>>>>>>>
23286>>>>>>>>>    Procedure Set ComGroupsHeight Integer value
23288>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 125 OLE_VT_I4 to value
23289>>>>>>>>>    End_Procedure
23290>>>>>>>>>
23290>>>>>>>>>    Function ComClientHeight Returns Integer
23292>>>>>>>>>        Integer retVal
23292>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 126 OLE_VT_I4 to retVal
23293>>>>>>>>>        Function_Return retVal
23294>>>>>>>>>    End_Function
23295>>>>>>>>>
23295>>>>>>>>>    Procedure Set ComClientHeight Integer value
23297>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 126 OLE_VT_I4 to value
23298>>>>>>>>>    End_Procedure
23299>>>>>>>>>
23299>>>>>>>>>    Function ComQuickAccessEmptyIconId Returns Integer
23301>>>>>>>>>        Integer retVal
23301>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 130 OLE_VT_I4 to retVal
23302>>>>>>>>>        Function_Return retVal
23303>>>>>>>>>    End_Function
23304>>>>>>>>>
23304>>>>>>>>>    Procedure Set ComQuickAccessEmptyIconId Integer value
23306>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 130 OLE_VT_I4 to value
23307>>>>>>>>>    End_Procedure
23308>>>>>>>>>
23308>>>>>>>>>    Function ComSystemButton Returns Variant
23310>>>>>>>>>        Variant retVal
23310>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 128 OLE_VT_DISPATCH to retVal
23311>>>>>>>>>        Function_Return retVal
23312>>>>>>>>>    End_Function
23313>>>>>>>>>
23313>>>>>>>>>    Procedure Set ComSystemButton Variant value
23315>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 128 OLE_VT_DISPATCH to value
23316>>>>>>>>>    End_Procedure
23317>>>>>>>>>
23317>>>>>>>>>    Function ComType Returns XTPBarType
23319>>>>>>>>>        Handle hDispatchDriver
23319>>>>>>>>>        XTPBarType retVal
23319>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23320>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
23321>>>>>>>>>        Function_Return retVal
23322>>>>>>>>>    End_Function
23323>>>>>>>>>
23323>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
23325>>>>>>>>>        Handle hDispatchDriver
23325>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23326>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23327>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
23328>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
23329>>>>>>>>>    End_Procedure
23330>>>>>>>>>
23330>>>>>>>>>    Function ComBuiltIn Returns Boolean
23332>>>>>>>>>        Handle hDispatchDriver
23332>>>>>>>>>        Boolean retVal
23332>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23333>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
23334>>>>>>>>>        Function_Return retVal
23335>>>>>>>>>    End_Function
23336>>>>>>>>>
23336>>>>>>>>>    Procedure ComDelete
23338>>>>>>>>>        Handle hDispatchDriver
23338>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23339>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
23340>>>>>>>>>    End_Procedure
23341>>>>>>>>>
23341>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
23343>>>>>>>>>        Handle hDispatchDriver
23343>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23344>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23345>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
23346>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
23347>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
23348>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
23349>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
23350>>>>>>>>>    End_Procedure
23351>>>>>>>>>
23351>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
23353>>>>>>>>>        Handle hDispatchDriver
23353>>>>>>>>>        OLE_HANDLE retVal
23353>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23354>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
23355>>>>>>>>>        Function_Return retVal
23356>>>>>>>>>    End_Function
23357>>>>>>>>>
23357>>>>>>>>>    Function ComCommandBars Returns Variant
23359>>>>>>>>>        Handle hDispatchDriver
23359>>>>>>>>>        Variant retVal
23359>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23360>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
23361>>>>>>>>>        Function_Return retVal
23362>>>>>>>>>    End_Function
23363>>>>>>>>>
23363>>>>>>>>>    Function ComControls Returns Variant
23365>>>>>>>>>        Handle hDispatchDriver
23365>>>>>>>>>        Variant retVal
23365>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23366>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
23367>>>>>>>>>        Function_Return retVal
23368>>>>>>>>>    End_Function
23369>>>>>>>>>
23369>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
23371>>>>>>>>>        Handle hDispatchDriver
23371>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23372>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
23373>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
23374>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
23375>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
23376>>>>>>>>>    End_Procedure
23377>>>>>>>>>
23377>>>>>>>>>    Function ComGetIconWidth Returns Integer
23379>>>>>>>>>        Handle hDispatchDriver
23379>>>>>>>>>        Integer retVal
23379>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23380>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
23381>>>>>>>>>        Function_Return retVal
23382>>>>>>>>>    End_Function
23383>>>>>>>>>
23383>>>>>>>>>    Function ComGetIconHeight Returns Integer
23385>>>>>>>>>        Handle hDispatchDriver
23385>>>>>>>>>        Integer retVal
23385>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23386>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
23387>>>>>>>>>        Function_Return retVal
23388>>>>>>>>>    End_Function
23389>>>>>>>>>
23389>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
23391>>>>>>>>>        Handle hDispatchDriver
23391>>>>>>>>>        Variant retVal
23391>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23392>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23393>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
23394>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
23395>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
23396>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
23397>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
23398>>>>>>>>>        Function_Return retVal
23399>>>>>>>>>    End_Function
23400>>>>>>>>>
23400>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
23402>>>>>>>>>        Handle hDispatchDriver
23402>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23403>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
23404>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
23405>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
23406>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
23407>>>>>>>>>    End_Procedure
23408>>>>>>>>>
23408>>>>>>>>>    Procedure ComRedrawBar
23410>>>>>>>>>        Handle hDispatchDriver
23410>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23411>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
23412>>>>>>>>>    End_Procedure
23413>>>>>>>>>
23413>>>>>>>>>    Procedure ComRecalcLayout
23415>>>>>>>>>        Handle hDispatchDriver
23415>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23416>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
23417>>>>>>>>>    End_Procedure
23418>>>>>>>>>
23418>>>>>>>>>    Procedure ComReset
23420>>>>>>>>>        Handle hDispatchDriver
23420>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23421>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
23422>>>>>>>>>    End_Procedure
23423>>>>>>>>>
23423>>>>>>>>>    Function ComInsertTab Integer llIndex String llCaption Returns Variant
23425>>>>>>>>>        Handle hDispatchDriver
23425>>>>>>>>>        Variant retVal
23425>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23426>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
23427>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
23428>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
23429>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
23430>>>>>>>>>        Function_Return retVal
23431>>>>>>>>>    End_Function
23432>>>>>>>>>
23432>>>>>>>>>    Function ComTabCount Returns Integer
23434>>>>>>>>>        Handle hDispatchDriver
23434>>>>>>>>>        Integer retVal
23434>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23435>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
23436>>>>>>>>>        Function_Return retVal
23437>>>>>>>>>    End_Function
23438>>>>>>>>>
23438>>>>>>>>>    Function ComTab Integer llIndex Returns Variant
23440>>>>>>>>>        Handle hDispatchDriver
23440>>>>>>>>>        Variant retVal
23440>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23441>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23442>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
23443>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
23444>>>>>>>>>        Function_Return retVal
23445>>>>>>>>>    End_Function
23446>>>>>>>>>
23446>>>>>>>>>    Function Com_NewEnum Returns Variant
23448>>>>>>>>>        Handle hDispatchDriver
23448>>>>>>>>>        Variant retVal
23448>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23449>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
23450>>>>>>>>>        Function_Return retVal
23451>>>>>>>>>    End_Function
23452>>>>>>>>>
23452>>>>>>>>>    Function ComRibbonPaintManager Returns Variant
23454>>>>>>>>>        Handle hDispatchDriver
23454>>>>>>>>>        Variant retVal
23454>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23455>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_DISPATCH to retVal
23456>>>>>>>>>        Function_Return retVal
23457>>>>>>>>>    End_Function
23458>>>>>>>>>
23458>>>>>>>>>    Function ComTabPaintManager Returns Variant
23460>>>>>>>>>        Handle hDispatchDriver
23460>>>>>>>>>        Variant retVal
23460>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23461>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_DISPATCH to retVal
23462>>>>>>>>>        Function_Return retVal
23463>>>>>>>>>    End_Function
23464>>>>>>>>>
23464>>>>>>>>>    Procedure ComEnableFrameTheme
23466>>>>>>>>>        Handle hDispatchDriver
23466>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23467>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 107 OLE_VT_VOID
23468>>>>>>>>>    End_Procedure
23469>>>>>>>>>
23469>>>>>>>>>    Function ComAddSystemButton Returns Variant
23471>>>>>>>>>        Handle hDispatchDriver
23471>>>>>>>>>        Variant retVal
23471>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23472>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_DISPATCH to retVal
23473>>>>>>>>>        Function_Return retVal
23474>>>>>>>>>    End_Function
23475>>>>>>>>>
23475>>>>>>>>>    Function ComQuickAccessControls Returns Variant
23477>>>>>>>>>        Handle hDispatchDriver
23477>>>>>>>>>        Variant retVal
23477>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23478>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 109 OLE_VT_DISPATCH to retVal
23479>>>>>>>>>        Function_Return retVal
23480>>>>>>>>>    End_Function
23481>>>>>>>>>
23481>>>>>>>>>    Function ComFindTab Integer llId Returns Variant
23483>>>>>>>>>        Handle hDispatchDriver
23483>>>>>>>>>        Variant retVal
23483>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23484>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23485>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
23486>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_DISPATCH to retVal
23487>>>>>>>>>        Function_Return retVal
23488>>>>>>>>>    End_Function
23489>>>>>>>>>
23489>>>>>>>>>    Function ComFindGroup Integer llId Returns Variant
23491>>>>>>>>>        Handle hDispatchDriver
23491>>>>>>>>>        Variant retVal
23491>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23492>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23493>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
23494>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 112 OLE_VT_DISPATCH to retVal
23495>>>>>>>>>        Function_Return retVal
23496>>>>>>>>>    End_Function
23497>>>>>>>>>
23497>>>>>>>>>    Procedure ComRemoveAllTabs
23499>>>>>>>>>        Handle hDispatchDriver
23499>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23500>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 113 OLE_VT_VOID
23501>>>>>>>>>    End_Procedure
23502>>>>>>>>>
23502>>>>>>>>>    Procedure ComRemoveTab Integer llIndex
23504>>>>>>>>>        Handle hDispatchDriver
23504>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23505>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23506>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
23507>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 114 OLE_VT_VOID
23508>>>>>>>>>    End_Procedure
23509>>>>>>>>>
23509>>>>>>>>>    Function ComControlQuickAccess Returns Variant
23511>>>>>>>>>        Handle hDispatchDriver
23511>>>>>>>>>        Variant retVal
23511>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23512>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 120 OLE_VT_DISPATCH to retVal
23513>>>>>>>>>        Function_Return retVal
23514>>>>>>>>>    End_Function
23515>>>>>>>>>
23515>>>>>>>>>    Function ComControlSystemButton Returns Variant
23517>>>>>>>>>        Handle hDispatchDriver
23517>>>>>>>>>        Variant retVal
23517>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23518>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 121 OLE_VT_DISPATCH to retVal
23519>>>>>>>>>        Function_Return retVal
23520>>>>>>>>>    End_Function
23521>>>>>>>>>End_Class
23522>>>>>>>>>
23522>>>>>>>>>// CoClass
23522>>>>>>>>>// CLSID: {C0DE2000-34D1-4EBB-B58C-454DB52012D9}
23522>>>>>>>>>Class cCJRibbonBar is a cComAutomationObject
23523>>>>>>>>>    Import_Class_Protocol cCJIRibbonBar
23524>>>>>>>>>
23524>>>>>>>>>    Procedure Construct_Object
23526>>>>>>>>>        Forward Send Construct_Object
23528>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
23529>>>>>>>>>    End_Procedure
23530>>>>>>>>>End_Class
23531>>>>>>>>>
23531>>>>>>>>>// CLSID: {C0DE2000-46A4-4F99-83D8-C6D3C2B390FC}
23531>>>>>>>>>Class cCJIDialogBar is a Mixin
23532>>>>>>>>>
23532>>>>>>>>>    Function ComTitle Returns String
23534>>>>>>>>>        String retVal
23534>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
23535>>>>>>>>>        Function_Return retVal
23536>>>>>>>>>    End_Function
23537>>>>>>>>>
23537>>>>>>>>>    Procedure Set ComTitle String value
23539>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
23540>>>>>>>>>    End_Procedure
23541>>>>>>>>>
23541>>>>>>>>>    Function ComVisible Returns Boolean
23543>>>>>>>>>        Boolean retVal
23543>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
23544>>>>>>>>>        Function_Return retVal
23545>>>>>>>>>    End_Function
23546>>>>>>>>>
23546>>>>>>>>>    Procedure Set ComVisible Boolean value
23548>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
23549>>>>>>>>>    End_Procedure
23550>>>>>>>>>
23550>>>>>>>>>    Function ComPosition Returns XTPBarPosition
23552>>>>>>>>>        XTPBarPosition retVal
23552>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
23553>>>>>>>>>        Function_Return retVal
23554>>>>>>>>>    End_Function
23555>>>>>>>>>
23555>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
23557>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
23558>>>>>>>>>    End_Procedure
23559>>>>>>>>>
23559>>>>>>>>>    Function ComBarID Returns Integer
23561>>>>>>>>>        Integer retVal
23561>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
23562>>>>>>>>>        Function_Return retVal
23563>>>>>>>>>    End_Function
23564>>>>>>>>>
23564>>>>>>>>>    Procedure Set ComBarID Integer value
23566>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
23567>>>>>>>>>    End_Procedure
23568>>>>>>>>>
23568>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
23570>>>>>>>>>        Boolean retVal
23570>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
23571>>>>>>>>>        Function_Return retVal
23572>>>>>>>>>    End_Function
23573>>>>>>>>>
23573>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
23575>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
23576>>>>>>>>>    End_Procedure
23577>>>>>>>>>
23577>>>>>>>>>    Function ComWidth Returns Integer
23579>>>>>>>>>        Integer retVal
23579>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
23580>>>>>>>>>        Function_Return retVal
23581>>>>>>>>>    End_Function
23582>>>>>>>>>
23582>>>>>>>>>    Procedure Set ComWidth Integer value
23584>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
23585>>>>>>>>>    End_Procedure
23586>>>>>>>>>
23586>>>>>>>>>    Function ComCloseable Returns Boolean
23588>>>>>>>>>        Boolean retVal
23588>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
23589>>>>>>>>>        Function_Return retVal
23590>>>>>>>>>    End_Function
23591>>>>>>>>>
23591>>>>>>>>>    Procedure Set ComCloseable Boolean value
23593>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
23594>>>>>>>>>    End_Procedure
23595>>>>>>>>>
23595>>>>>>>>>    Function ComEnableAnimation Returns Boolean
23597>>>>>>>>>        Boolean retVal
23597>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
23598>>>>>>>>>        Function_Return retVal
23599>>>>>>>>>    End_Function
23600>>>>>>>>>
23600>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
23602>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
23603>>>>>>>>>    End_Procedure
23604>>>>>>>>>
23604>>>>>>>>>    Function ComShowGripper Returns Boolean
23606>>>>>>>>>        Boolean retVal
23606>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
23607>>>>>>>>>        Function_Return retVal
23608>>>>>>>>>    End_Function
23609>>>>>>>>>
23609>>>>>>>>>    Procedure Set ComShowGripper Boolean value
23611>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
23612>>>>>>>>>    End_Procedure
23613>>>>>>>>>
23613>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
23615>>>>>>>>>        XTPButtonStyle retVal
23615>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
23616>>>>>>>>>        Function_Return retVal
23617>>>>>>>>>    End_Function
23618>>>>>>>>>
23618>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
23620>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
23621>>>>>>>>>    End_Procedure
23622>>>>>>>>>
23622>>>>>>>>>    Function ComCaption Returns String
23624>>>>>>>>>        String retVal
23624>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BSTR to retVal
23625>>>>>>>>>        Function_Return retVal
23626>>>>>>>>>    End_Function
23627>>>>>>>>>
23627>>>>>>>>>    Procedure Set ComCaption String value
23629>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BSTR to value
23630>>>>>>>>>    End_Procedure
23631>>>>>>>>>
23631>>>>>>>>>    Function ComResizable Returns Boolean
23633>>>>>>>>>        Boolean retVal
23633>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BOOL to retVal
23634>>>>>>>>>        Function_Return retVal
23635>>>>>>>>>    End_Function
23636>>>>>>>>>
23636>>>>>>>>>    Procedure Set ComResizable Boolean value
23638>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BOOL to value
23639>>>>>>>>>    End_Procedure
23640>>>>>>>>>
23640>>>>>>>>>    Function ComChildHandle Returns OLE_HANDLE
23642>>>>>>>>>        OLE_HANDLE retVal
23642>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 103 OLE_VT_I4 to retVal
23643>>>>>>>>>        Function_Return retVal
23644>>>>>>>>>    End_Function
23645>>>>>>>>>
23645>>>>>>>>>    Procedure Set ComChildHandle OLE_HANDLE value
23647>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 103 OLE_VT_I4 to value
23648>>>>>>>>>    End_Procedure
23649>>>>>>>>>
23649>>>>>>>>>    Function ComShowCaption Returns Boolean
23651>>>>>>>>>        Boolean retVal
23651>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 105 OLE_VT_BOOL to retVal
23652>>>>>>>>>        Function_Return retVal
23653>>>>>>>>>    End_Function
23654>>>>>>>>>
23654>>>>>>>>>    Procedure Set ComShowCaption Boolean value
23656>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 105 OLE_VT_BOOL to value
23657>>>>>>>>>    End_Procedure
23658>>>>>>>>>
23658>>>>>>>>>    Function ComCaptionPopup Returns Boolean
23660>>>>>>>>>        Boolean retVal
23660>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_BOOL to retVal
23661>>>>>>>>>        Function_Return retVal
23662>>>>>>>>>    End_Function
23663>>>>>>>>>
23663>>>>>>>>>    Procedure Set ComCaptionPopup Boolean value
23665>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_BOOL to value
23666>>>>>>>>>    End_Procedure
23667>>>>>>>>>
23667>>>>>>>>>    Function ComType Returns XTPBarType
23669>>>>>>>>>        Handle hDispatchDriver
23669>>>>>>>>>        XTPBarType retVal
23669>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23670>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
23671>>>>>>>>>        Function_Return retVal
23672>>>>>>>>>    End_Function
23673>>>>>>>>>
23673>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
23675>>>>>>>>>        Handle hDispatchDriver
23675>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23676>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23677>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
23678>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
23679>>>>>>>>>    End_Procedure
23680>>>>>>>>>
23680>>>>>>>>>    Function ComBuiltIn Returns Boolean
23682>>>>>>>>>        Handle hDispatchDriver
23682>>>>>>>>>        Boolean retVal
23682>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23683>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
23684>>>>>>>>>        Function_Return retVal
23685>>>>>>>>>    End_Function
23686>>>>>>>>>
23686>>>>>>>>>    Procedure ComDelete
23688>>>>>>>>>        Handle hDispatchDriver
23688>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23689>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
23690>>>>>>>>>    End_Procedure
23691>>>>>>>>>
23691>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
23693>>>>>>>>>        Handle hDispatchDriver
23693>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23694>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23695>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
23696>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
23697>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
23698>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
23699>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
23700>>>>>>>>>    End_Procedure
23701>>>>>>>>>
23701>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
23703>>>>>>>>>        Handle hDispatchDriver
23703>>>>>>>>>        OLE_HANDLE retVal
23703>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23704>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
23705>>>>>>>>>        Function_Return retVal
23706>>>>>>>>>    End_Function
23707>>>>>>>>>
23707>>>>>>>>>    Function ComCommandBars Returns Variant
23709>>>>>>>>>        Handle hDispatchDriver
23709>>>>>>>>>        Variant retVal
23709>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23710>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
23711>>>>>>>>>        Function_Return retVal
23712>>>>>>>>>    End_Function
23713>>>>>>>>>
23713>>>>>>>>>    Function ComCaptionPopupBar Returns Variant
23715>>>>>>>>>        Handle hDispatchDriver
23715>>>>>>>>>        Variant retVal
23715>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23716>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_DISPATCH to retVal
23717>>>>>>>>>        Function_Return retVal
23718>>>>>>>>>    End_Function
23719>>>>>>>>>
23719>>>>>>>>>    Procedure ComSetSize Integer llcx Integer llcy
23721>>>>>>>>>        Handle hDispatchDriver
23721>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23722>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
23723>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
23724>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
23725>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 104 OLE_VT_VOID
23726>>>>>>>>>    End_Procedure
23727>>>>>>>>>End_Class
23728>>>>>>>>>
23728>>>>>>>>>// CoClass
23728>>>>>>>>>// CLSID: {C0DE2000-C898-4A0B-8D36-A9566203A013}
23728>>>>>>>>>Class cCJDialogBar is a cComAutomationObject
23729>>>>>>>>>    Import_Class_Protocol cCJIDialogBar
23730>>>>>>>>>
23730>>>>>>>>>    Procedure Construct_Object
23732>>>>>>>>>        Forward Send Construct_Object
23734>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
23735>>>>>>>>>    End_Procedure
23736>>>>>>>>>End_Class
23737>>>>>>>>>
23737>>>>>>>>>// CLSID: {C0DE2000-CF7B-4042-BA6F-20F9A96E8AD1}
23737>>>>>>>>>Class cCJIPaintManager is a Mixin
23738>>>>>>>>>
23738>>>>>>>>>    Function ComEnableAnimation Returns Boolean
23740>>>>>>>>>        Boolean retVal
23740>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
23741>>>>>>>>>        Function_Return retVal
23742>>>>>>>>>    End_Function
23743>>>>>>>>>
23743>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
23745>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
23746>>>>>>>>>    End_Procedure
23747>>>>>>>>>
23747>>>>>>>>>    Function ComFlatToolBar Returns Boolean
23749>>>>>>>>>        Boolean retVal
23749>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to retVal
23750>>>>>>>>>        Function_Return retVal
23751>>>>>>>>>    End_Function
23752>>>>>>>>>
23752>>>>>>>>>    Procedure Set ComFlatToolBar Boolean value
23754>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to value
23755>>>>>>>>>    End_Procedure
23756>>>>>>>>>
23756>>>>>>>>>    Function ComFlatMenuBar Returns Boolean
23758>>>>>>>>>        Boolean retVal
23758>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
23759>>>>>>>>>        Function_Return retVal
23760>>>>>>>>>    End_Function
23761>>>>>>>>>
23761>>>>>>>>>    Procedure Set ComFlatMenuBar Boolean value
23763>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
23764>>>>>>>>>    End_Procedure
23765>>>>>>>>>
23765>>>>>>>>>    Function ComClearTypeTextQuality Returns Boolean
23767>>>>>>>>>        Boolean retVal
23767>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
23768>>>>>>>>>        Function_Return retVal
23769>>>>>>>>>    End_Function
23770>>>>>>>>>
23770>>>>>>>>>    Procedure Set ComClearTypeTextQuality Boolean value
23772>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
23773>>>>>>>>>    End_Procedure
23774>>>>>>>>>
23774>>>>>>>>>    Function ComShowShadow Returns Boolean
23776>>>>>>>>>        Boolean retVal
23776>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
23777>>>>>>>>>        Function_Return retVal
23778>>>>>>>>>    End_Function
23779>>>>>>>>>
23779>>>>>>>>>    Procedure Set ComShowShadow Boolean value
23781>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
23782>>>>>>>>>    End_Procedure
23783>>>>>>>>>
23783>>>>>>>>>    Function ComThemedStatusBar Returns Boolean
23785>>>>>>>>>        Boolean retVal
23785>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
23786>>>>>>>>>        Function_Return retVal
23787>>>>>>>>>    End_Function
23788>>>>>>>>>
23788>>>>>>>>>    Procedure Set ComThemedStatusBar Boolean value
23790>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
23791>>>>>>>>>    End_Procedure
23792>>>>>>>>>
23792>>>>>>>>>    Function ComThickCheckMark Returns Boolean
23794>>>>>>>>>        Boolean retVal
23794>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
23795>>>>>>>>>        Function_Return retVal
23796>>>>>>>>>    End_Function
23797>>>>>>>>>
23797>>>>>>>>>    Procedure Set ComThickCheckMark Boolean value
23799>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
23800>>>>>>>>>    End_Procedure
23801>>>>>>>>>
23801>>>>>>>>>    Function ComSelectImageInPopupBar Returns Boolean
23803>>>>>>>>>        Boolean retVal
23803>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
23804>>>>>>>>>        Function_Return retVal
23805>>>>>>>>>    End_Function
23806>>>>>>>>>
23806>>>>>>>>>    Procedure Set ComSelectImageInPopupBar Boolean value
23808>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
23809>>>>>>>>>    End_Procedure
23810>>>>>>>>>
23810>>>>>>>>>    Function ComThemedCheckBox Returns Boolean
23812>>>>>>>>>        Boolean retVal
23812>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
23813>>>>>>>>>        Function_Return retVal
23814>>>>>>>>>    End_Function
23815>>>>>>>>>
23815>>>>>>>>>    Procedure Set ComThemedCheckBox Boolean value
23817>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
23818>>>>>>>>>    End_Procedure
23819>>>>>>>>>
23819>>>>>>>>>    Function ComAutoResizeIcons Returns Boolean
23821>>>>>>>>>        Boolean retVal
23821>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
23822>>>>>>>>>        Function_Return retVal
23823>>>>>>>>>    End_Function
23824>>>>>>>>>
23824>>>>>>>>>    Procedure Set ComAutoResizeIcons Boolean value
23826>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
23827>>>>>>>>>    End_Procedure
23828>>>>>>>>>
23828>>>>>>>>>    Procedure ComRefreshMetrics
23830>>>>>>>>>        Handle hDispatchDriver
23830>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23831>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
23832>>>>>>>>>    End_Procedure
23833>>>>>>>>>
23833>>>>>>>>>    Procedure ComFillWorkspace OLE_HANDLE llhDC Integer llx Integer lly Integer llcx Integer llcy
23835>>>>>>>>>        Handle hDispatchDriver
23835>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23836>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
23837>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhDC
23838>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
23839>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
23840>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
23841>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
23842>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
23843>>>>>>>>>    End_Procedure
23844>>>>>>>>>
23844>>>>>>>>>    Procedure ComDrawRectangle OLE_HANDLE llhDC Integer llx Integer lly Integer llcx Integer llcy Boolean llSelected Boolean llPressed Boolean llEnabled Boolean llChecked Boolean llPopuped XTPBarType llbarType XTPBarPosition llbarPosition
23846>>>>>>>>>        Handle hDispatchDriver
23846>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23847>>>>>>>>>        Send PrepareParams to hDispatchDriver 12
23848>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhDC
23849>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
23850>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
23851>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
23852>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
23853>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSelected
23854>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llPressed
23855>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnabled
23856>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llChecked
23857>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llPopuped
23858>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbarType
23859>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbarPosition
23860>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
23861>>>>>>>>>    End_Procedure
23862>>>>>>>>>
23862>>>>>>>>>    Function ComGetRectangleTextColor Boolean llSelected Boolean llPressed Boolean llEnabled Boolean llChecked Boolean llPopuped XTPBarType llbarType XTPBarPosition llbarPosition Returns OLE_COLOR
23864>>>>>>>>>        Handle hDispatchDriver
23864>>>>>>>>>        OLE_COLOR retVal
23864>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23865>>>>>>>>>        Send PrepareParams to hDispatchDriver 7
23866>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSelected
23867>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llPressed
23868>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnabled
23869>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llChecked
23870>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llPopuped
23871>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbarType
23872>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbarPosition
23873>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_I4 to retVal
23874>>>>>>>>>        Function_Return retVal
23875>>>>>>>>>    End_Function
23876>>>>>>>>>
23876>>>>>>>>>    Procedure ComLoadFrameIcon Longptr llModule String llPath Integer llWidth Integer llHeight
23878>>>>>>>>>        Handle hDispatchDriver
23878>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23879>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23880>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llModule
23881>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
23882>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
23883>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llHeight
23884>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
23885>>>>>>>>>    End_Procedure
23886>>>>>>>>>End_Class
23887>>>>>>>>>
23887>>>>>>>>>// CoClass
23887>>>>>>>>>// CLSID: {C0DE2000-90B7-46EE-8786-A54278B0A559}
23887>>>>>>>>>Class cCJPaintManager is a cComAutomationObject
23888>>>>>>>>>    Import_Class_Protocol cCJIPaintManager
23889>>>>>>>>>
23889>>>>>>>>>    Procedure Construct_Object
23891>>>>>>>>>        Forward Send Construct_Object
23893>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
23894>>>>>>>>>    End_Procedure
23895>>>>>>>>>End_Class
23896>>>>>>>>>
23896>>>>>>>>>// CLSID: {C0DE2000-2F2F-4C05-92CF-6AEB0BFA0E6D}
23896>>>>>>>>>Class cCJITabWorkspace is a Mixin
23897>>>>>>>>>
23897>>>>>>>>>    Function ComFlags Returns XTPWorkspaceButtons
23899>>>>>>>>>        XTPWorkspaceButtons retVal
23899>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
23900>>>>>>>>>        Function_Return retVal
23901>>>>>>>>>    End_Function
23902>>>>>>>>>
23902>>>>>>>>>    Procedure Set ComFlags XTPWorkspaceButtons value
23904>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
23905>>>>>>>>>    End_Procedure
23906>>>>>>>>>
23906>>>>>>>>>    Function ComAllowReorder Returns Boolean
23908>>>>>>>>>        Boolean retVal
23908>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
23909>>>>>>>>>        Function_Return retVal
23910>>>>>>>>>    End_Function
23911>>>>>>>>>
23911>>>>>>>>>    Procedure Set ComAllowReorder Boolean value
23913>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
23914>>>>>>>>>    End_Procedure
23915>>>>>>>>>
23915>>>>>>>>>    Function ComAutoTheme Returns Boolean
23917>>>>>>>>>        Boolean retVal
23917>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
23918>>>>>>>>>        Function_Return retVal
23919>>>>>>>>>    End_Function
23920>>>>>>>>>
23920>>>>>>>>>    Procedure Set ComAutoTheme Boolean value
23922>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
23923>>>>>>>>>    End_Procedure
23924>>>>>>>>>
23924>>>>>>>>>    Function ComThemedBackColor Returns Boolean
23926>>>>>>>>>        Boolean retVal
23926>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
23927>>>>>>>>>        Function_Return retVal
23928>>>>>>>>>    End_Function
23929>>>>>>>>>
23929>>>>>>>>>    Procedure Set ComThemedBackColor Boolean value
23931>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
23932>>>>>>>>>    End_Procedure
23933>>>>>>>>>
23933>>>>>>>>>    Function ComUseSplitterTracker Returns Boolean
23935>>>>>>>>>        Boolean retVal
23935>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
23936>>>>>>>>>        Function_Return retVal
23937>>>>>>>>>    End_Function
23938>>>>>>>>>
23938>>>>>>>>>    Procedure Set ComUseSplitterTracker Boolean value
23940>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
23941>>>>>>>>>    End_Procedure
23942>>>>>>>>>
23942>>>>>>>>>    Function ComHorizGroupSplitting Returns Boolean
23944>>>>>>>>>        Boolean retVal
23944>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
23945>>>>>>>>>        Function_Return retVal
23946>>>>>>>>>    End_Function
23947>>>>>>>>>
23947>>>>>>>>>    Procedure Set ComHorizGroupSplitting Boolean value
23949>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
23950>>>>>>>>>    End_Procedure
23951>>>>>>>>>
23951>>>>>>>>>    Function ComNewTabPosition Returns XTPWorkspaceNewTabPosition
23953>>>>>>>>>        XTPWorkspaceNewTabPosition retVal
23953>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to retVal
23954>>>>>>>>>        Function_Return retVal
23955>>>>>>>>>    End_Function
23956>>>>>>>>>
23956>>>>>>>>>    Procedure Set ComNewTabPosition XTPWorkspaceNewTabPosition value
23958>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to value
23959>>>>>>>>>    End_Procedure
23960>>>>>>>>>
23960>>>>>>>>>    Function ComRightToLeft Returns Boolean
23962>>>>>>>>>        Boolean retVal
23962>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
23963>>>>>>>>>        Function_Return retVal
23964>>>>>>>>>    End_Function
23965>>>>>>>>>
23965>>>>>>>>>    Procedure Set ComRightToLeft Boolean value
23967>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
23968>>>>>>>>>    End_Procedure
23969>>>>>>>>>
23969>>>>>>>>>    Function ComIgnoreFlickersOnActivate Returns Boolean
23971>>>>>>>>>        Boolean retVal
23971>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_BOOL to retVal
23972>>>>>>>>>        Function_Return retVal
23973>>>>>>>>>    End_Function
23974>>>>>>>>>
23974>>>>>>>>>    Procedure Set ComIgnoreFlickersOnActivate Boolean value
23976>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_BOOL to value
23977>>>>>>>>>    End_Procedure
23978>>>>>>>>>
23978>>>>>>>>>    Function ComAutoUpdateTabCaption Returns Boolean
23980>>>>>>>>>        Boolean retVal
23980>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_BOOL to retVal
23981>>>>>>>>>        Function_Return retVal
23982>>>>>>>>>    End_Function
23983>>>>>>>>>
23983>>>>>>>>>    Procedure Set ComAutoUpdateTabCaption Boolean value
23985>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_BOOL to value
23986>>>>>>>>>    End_Procedure
23987>>>>>>>>>
23987>>>>>>>>>    Function ComEnableMarkup Returns Boolean
23989>>>>>>>>>        Boolean retVal
23989>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
23990>>>>>>>>>        Function_Return retVal
23991>>>>>>>>>    End_Function
23992>>>>>>>>>
23992>>>>>>>>>    Procedure Set ComEnableMarkup Boolean value
23994>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
23995>>>>>>>>>    End_Procedure
23996>>>>>>>>>
23996>>>>>>>>>    Function ComPaintManager Returns Variant
23998>>>>>>>>>        Handle hDispatchDriver
23998>>>>>>>>>        Variant retVal
23998>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23999>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
24000>>>>>>>>>        Function_Return retVal
24001>>>>>>>>>    End_Function
24002>>>>>>>>>
24002>>>>>>>>>    Procedure ComEnableGroups
24004>>>>>>>>>        Handle hDispatchDriver
24004>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24005>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
24006>>>>>>>>>    End_Procedure
24007>>>>>>>>>
24007>>>>>>>>>    Procedure ComRefresh
24009>>>>>>>>>        Handle hDispatchDriver
24009>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24010>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
24011>>>>>>>>>    End_Procedure
24012>>>>>>>>>
24012>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
24014>>>>>>>>>        Handle hDispatchDriver
24014>>>>>>>>>        Variant retVal
24014>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24015>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24016>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24017>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
24018>>>>>>>>>        Function_Return retVal
24019>>>>>>>>>    End_Function
24020>>>>>>>>>
24020>>>>>>>>>    Function Com_NewEnum Returns Variant
24022>>>>>>>>>        Handle hDispatchDriver
24022>>>>>>>>>        Variant retVal
24022>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24023>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
24024>>>>>>>>>        Function_Return retVal
24025>>>>>>>>>    End_Function
24026>>>>>>>>>
24026>>>>>>>>>    Function ComItemCount Returns Integer
24028>>>>>>>>>        Handle hDispatchDriver
24028>>>>>>>>>        Integer retVal
24028>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24029>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
24030>>>>>>>>>        Function_Return retVal
24031>>>>>>>>>    End_Function
24032>>>>>>>>>
24032>>>>>>>>>    Function ComHitTest Integer llx Integer lly Returns Variant
24034>>>>>>>>>        Handle hDispatchDriver
24034>>>>>>>>>        Variant retVal
24034>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24035>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24036>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
24037>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
24038>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_DISPATCH to retVal
24039>>>>>>>>>        Function_Return retVal
24040>>>>>>>>>    End_Function
24041>>>>>>>>>
24041>>>>>>>>>    Function ComSelected Returns Variant
24043>>>>>>>>>        Handle hDispatchDriver
24043>>>>>>>>>        Variant retVal
24043>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24044>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_DISPATCH to retVal
24045>>>>>>>>>        Function_Return retVal
24046>>>>>>>>>    End_Function
24047>>>>>>>>>
24047>>>>>>>>>    Procedure ComDoWorkspaceCommand XTPWorkspaceCommand llId
24049>>>>>>>>>        Handle hDispatchDriver
24049>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24050>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24051>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24052>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
24053>>>>>>>>>    End_Procedure
24054>>>>>>>>>
24054>>>>>>>>>    Function ComIsWorkspaceCommandEnabled XTPWorkspaceCommand llId Returns Boolean
24056>>>>>>>>>        Handle hDispatchDriver
24056>>>>>>>>>        Boolean retVal
24056>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24057>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24058>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24059>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_BOOL to retVal
24060>>>>>>>>>        Function_Return retVal
24061>>>>>>>>>    End_Function
24062>>>>>>>>>
24062>>>>>>>>>    Function ComToolTipContext Returns Variant
24064>>>>>>>>>        Handle hDispatchDriver
24064>>>>>>>>>        Variant retVal
24064>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24065>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
24066>>>>>>>>>        Function_Return retVal
24067>>>>>>>>>    End_Function
24068>>>>>>>>>
24068>>>>>>>>>    Function ComGroupCount Returns Integer
24070>>>>>>>>>        Handle hDispatchDriver
24070>>>>>>>>>        Integer retVal
24070>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24071>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_I4 to retVal
24072>>>>>>>>>        Function_Return retVal
24073>>>>>>>>>    End_Function
24074>>>>>>>>>
24074>>>>>>>>>    Function ComFindItem OLE_HANDLE llhWnd Returns Variant
24076>>>>>>>>>        Handle hDispatchDriver
24076>>>>>>>>>        Variant retVal
24076>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24077>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24078>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
24079>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 21 OLE_VT_DISPATCH to retVal
24080>>>>>>>>>        Function_Return retVal
24081>>>>>>>>>    End_Function
24082>>>>>>>>>
24082>>>>>>>>>    Function ComFindGroup Variant llpItem Returns Integer
24084>>>>>>>>>        Handle hDispatchDriver
24084>>>>>>>>>        Integer retVal
24084>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24085>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24086>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpItem
24087>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 22 OLE_VT_I4 to retVal
24088>>>>>>>>>        Function_Return retVal
24089>>>>>>>>>    End_Function
24090>>>>>>>>>
24090>>>>>>>>>    Procedure ComCreateGroup Variant llItem Boolean llHoriz
24092>>>>>>>>>        Handle hDispatchDriver
24092>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24093>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24094>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llItem
24095>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llHoriz
24096>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
24097>>>>>>>>>    End_Procedure
24098>>>>>>>>>
24098>>>>>>>>>    Procedure ComMoveToGroup Variant llItem Integer llGroup
24100>>>>>>>>>        Handle hDispatchDriver
24100>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24101>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24102>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llItem
24103>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llGroup
24104>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 24 OLE_VT_VOID
24105>>>>>>>>>    End_Procedure
24106>>>>>>>>>
24106>>>>>>>>>    Function ComGroupSplitter Integer llGroup Returns Real
24108>>>>>>>>>        Handle hDispatchDriver
24108>>>>>>>>>        Real retVal
24108>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24109>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24110>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llGroup
24111>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 27 OLE_VT_R8 to retVal
24112>>>>>>>>>        Function_Return retVal
24113>>>>>>>>>    End_Function
24114>>>>>>>>>
24114>>>>>>>>>    Procedure Set ComGroupSplitter Integer llGroup Real value
24116>>>>>>>>>        Handle hDispatchDriver
24116>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24117>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24118>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llGroup
24119>>>>>>>>>        Set ComProperty of hDispatchDriver 27 OLE_VT_R8 to value
24120>>>>>>>>>    End_Procedure
24121>>>>>>>>>
24121>>>>>>>>>    Procedure ComShowNewWindowTab Boolean llShow Integer llCommand
24123>>>>>>>>>        Handle hDispatchDriver
24123>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24124>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24125>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShow
24126>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
24127>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
24128>>>>>>>>>    End_Procedure
24129>>>>>>>>>
24129>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
24131>>>>>>>>>        Handle hDispatchDriver
24131>>>>>>>>>        OLE_HANDLE retVal
24131>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24132>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
24133>>>>>>>>>        Function_Return retVal
24134>>>>>>>>>    End_Function
24135>>>>>>>>>End_Class
24136>>>>>>>>>
24136>>>>>>>>>// CLSID: {C0DE2000-9AF2-433A-BA6D-8D7B12B76E12}
24136>>>>>>>>>Class cCJITabWorkspaceEvents is a Mixin
24137>>>>>>>>>
24137>>>>>>>>>    Procedure OnComRClick Variant llItem
24139>>>>>>>>>    End_Procedure
24140>>>>>>>>>
24140>>>>>>>>>    Procedure OnComNewItem Variant llItem
24142>>>>>>>>>    End_Procedure
24143>>>>>>>>>
24143>>>>>>>>>    Procedure OnComSelectedChanged Variant llItem
24145>>>>>>>>>    End_Procedure
24146>>>>>>>>>
24146>>>>>>>>>    Procedure OnComBeforeItemClick Variant llItem
24148>>>>>>>>>    End_Procedure
24149>>>>>>>>>
24149>>>>>>>>>    Procedure RegisterComEvents
24151>>>>>>>>>        Send RegisterComEvent 1 msg_OnComRClick
24152>>>>>>>>>        Send RegisterComEvent 2 msg_OnComNewItem
24153>>>>>>>>>        Send RegisterComEvent 3 msg_OnComSelectedChanged
24154>>>>>>>>>        Send RegisterComEvent 4 msg_OnComBeforeItemClick
24155>>>>>>>>>    End_Procedure
24156>>>>>>>>>End_Class
24157>>>>>>>>>
24157>>>>>>>>>// CoClass
24157>>>>>>>>>// CLSID: {C0DE2000-C1B2-4583-B022-37367FE0CF90}
24157>>>>>>>>>Class cCJTabWorkspace is a cComAutomationObject
24158>>>>>>>>>    Import_Class_Protocol cCJITabWorkspace
24159>>>>>>>>>    Import_Class_Protocol cCJITabWorkspaceEvents
24160>>>>>>>>>
24160>>>>>>>>>    Procedure Construct_Object
24162>>>>>>>>>        Forward Send Construct_Object
24164>>>>>>>>>        Set psEventId to "{C0DE2000-9AF2-433A-BA6D-8D7B12B76E12}"
24165>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
24166>>>>>>>>>    End_Procedure
24167>>>>>>>>>End_Class
24168>>>>>>>>>
24168>>>>>>>>>// CLSID: {C0DE2000-7A0A-447D-9CDC-8F63E7E5AF55}
24168>>>>>>>>>// Dispatch interface for StatusBar Control
24168>>>>>>>>>Class cCJIStatusBar is a Mixin
24169>>>>>>>>>
24169>>>>>>>>>    Function ComVisible Returns Boolean
24171>>>>>>>>>        Boolean retVal
24171>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
24172>>>>>>>>>        Function_Return retVal
24173>>>>>>>>>    End_Function
24174>>>>>>>>>
24174>>>>>>>>>    Procedure Set ComVisible Boolean value
24176>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
24177>>>>>>>>>    End_Procedure
24178>>>>>>>>>
24178>>>>>>>>>    Function ComIdleText Returns String
24180>>>>>>>>>        String retVal
24180>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
24181>>>>>>>>>        Function_Return retVal
24182>>>>>>>>>    End_Function
24183>>>>>>>>>
24183>>>>>>>>>    Procedure Set ComIdleText String value
24185>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
24186>>>>>>>>>    End_Procedure
24187>>>>>>>>>
24187>>>>>>>>>    Function ComDrawDisabledText Returns Boolean
24189>>>>>>>>>        Boolean retVal
24189>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
24190>>>>>>>>>        Function_Return retVal
24191>>>>>>>>>    End_Function
24192>>>>>>>>>
24192>>>>>>>>>    Procedure Set ComDrawDisabledText Boolean value
24194>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
24195>>>>>>>>>    End_Procedure
24196>>>>>>>>>
24196>>>>>>>>>    Function ComMinHeight Returns Integer
24198>>>>>>>>>        Integer retVal
24198>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to retVal
24199>>>>>>>>>        Function_Return retVal
24200>>>>>>>>>    End_Function
24201>>>>>>>>>
24201>>>>>>>>>    Procedure Set ComMinHeight Integer value
24203>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to value
24204>>>>>>>>>    End_Procedure
24205>>>>>>>>>
24205>>>>>>>>>    Function ComFont Returns Variant
24207>>>>>>>>>        Variant retVal
24207>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
24208>>>>>>>>>        Function_Return retVal
24209>>>>>>>>>    End_Function
24210>>>>>>>>>
24210>>>>>>>>>    Procedure Set ComFont Variant value
24212>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
24213>>>>>>>>>    End_Procedure
24214>>>>>>>>>
24214>>>>>>>>>    Function ComShowSizeGripper Returns Boolean
24216>>>>>>>>>        Boolean retVal
24216>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BOOL to retVal
24217>>>>>>>>>        Function_Return retVal
24218>>>>>>>>>    End_Function
24219>>>>>>>>>
24219>>>>>>>>>    Procedure Set ComShowSizeGripper Boolean value
24221>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BOOL to value
24222>>>>>>>>>    End_Procedure
24223>>>>>>>>>
24223>>>>>>>>>    Function ComRibbonDividerIndex Returns Integer
24225>>>>>>>>>        Integer retVal
24225>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_I4 to retVal
24226>>>>>>>>>        Function_Return retVal
24227>>>>>>>>>    End_Function
24228>>>>>>>>>
24228>>>>>>>>>    Procedure Set ComRibbonDividerIndex Integer value
24230>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_I4 to value
24231>>>>>>>>>    End_Procedure
24232>>>>>>>>>
24232>>>>>>>>>    Function ComEnableMarkup Returns Boolean
24234>>>>>>>>>        Boolean retVal
24234>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
24235>>>>>>>>>        Function_Return retVal
24236>>>>>>>>>    End_Function
24237>>>>>>>>>
24237>>>>>>>>>    Procedure Set ComEnableMarkup Boolean value
24239>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
24240>>>>>>>>>    End_Procedure
24241>>>>>>>>>
24241>>>>>>>>>    Function ComIsAllCaps Returns Boolean
24243>>>>>>>>>        Boolean retVal
24243>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to retVal
24244>>>>>>>>>        Function_Return retVal
24245>>>>>>>>>    End_Function
24246>>>>>>>>>
24246>>>>>>>>>    Procedure Set ComIsAllCaps Boolean value
24248>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to value
24249>>>>>>>>>    End_Procedure
24250>>>>>>>>>
24250>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
24252>>>>>>>>>        Handle hDispatchDriver
24252>>>>>>>>>        OLE_HANDLE retVal
24252>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24253>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
24254>>>>>>>>>        Function_Return retVal
24255>>>>>>>>>    End_Function
24256>>>>>>>>>
24256>>>>>>>>>    Function ComAddPane Integer llId Returns Variant
24258>>>>>>>>>        Handle hDispatchDriver
24258>>>>>>>>>        Variant retVal
24258>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24259>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24260>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24261>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
24262>>>>>>>>>        Function_Return retVal
24263>>>>>>>>>    End_Function
24264>>>>>>>>>
24264>>>>>>>>>    Procedure ComSetPaneText Integer llIndex String llText
24266>>>>>>>>>        Handle hDispatchDriver
24266>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24267>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24268>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24269>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
24270>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
24271>>>>>>>>>    End_Procedure
24272>>>>>>>>>
24272>>>>>>>>>    Procedure ComSetPaneWidth Integer llIndex Integer llWidth
24274>>>>>>>>>        Handle hDispatchDriver
24274>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24275>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24276>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24277>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
24278>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
24279>>>>>>>>>    End_Procedure
24280>>>>>>>>>
24280>>>>>>>>>    Procedure ComSetPaneStyle Integer llIndex XTPStatusPaneStyle llStyle
24282>>>>>>>>>        Handle hDispatchDriver
24282>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24283>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24284>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24285>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llStyle
24286>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
24287>>>>>>>>>    End_Procedure
24288>>>>>>>>>
24288>>>>>>>>>    Function ComPane Integer llIndex Returns Variant
24290>>>>>>>>>        Handle hDispatchDriver
24290>>>>>>>>>        Variant retVal
24290>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24291>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24292>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24293>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
24294>>>>>>>>>        Function_Return retVal
24295>>>>>>>>>    End_Function
24296>>>>>>>>>
24296>>>>>>>>>    Function Com_NewEnum Returns Variant
24298>>>>>>>>>        Handle hDispatchDriver
24298>>>>>>>>>        Variant retVal
24298>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24299>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
24300>>>>>>>>>        Function_Return retVal
24301>>>>>>>>>    End_Function
24302>>>>>>>>>
24302>>>>>>>>>    Procedure ComRemoveAll
24304>>>>>>>>>        Handle hDispatchDriver
24304>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24305>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
24306>>>>>>>>>    End_Procedure
24307>>>>>>>>>
24307>>>>>>>>>    Function ComPaneCount Returns Integer
24309>>>>>>>>>        Handle hDispatchDriver
24309>>>>>>>>>        Integer retVal
24309>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24310>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_I4 to retVal
24311>>>>>>>>>        Function_Return retVal
24312>>>>>>>>>    End_Function
24313>>>>>>>>>
24313>>>>>>>>>    Function ComInsertPane Integer llIndex Integer llId Returns Variant
24315>>>>>>>>>        Handle hDispatchDriver
24315>>>>>>>>>        Variant retVal
24315>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24316>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24317>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24318>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24319>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_DISPATCH to retVal
24320>>>>>>>>>        Function_Return retVal
24321>>>>>>>>>    End_Function
24322>>>>>>>>>
24322>>>>>>>>>    Function ComFindPane Integer llId Returns Variant
24324>>>>>>>>>        Handle hDispatchDriver
24324>>>>>>>>>        Variant retVal
24324>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24325>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24326>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24327>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
24328>>>>>>>>>        Function_Return retVal
24329>>>>>>>>>    End_Function
24330>>>>>>>>>
24330>>>>>>>>>    Function ComHitTest Integer llx Integer lly Returns Variant
24332>>>>>>>>>        Handle hDispatchDriver
24332>>>>>>>>>        Variant retVal
24332>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24333>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24334>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
24335>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
24336>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
24337>>>>>>>>>        Function_Return retVal
24338>>>>>>>>>    End_Function
24339>>>>>>>>>
24339>>>>>>>>>    Function ComToolTipContext Returns Variant
24341>>>>>>>>>        Handle hDispatchDriver
24341>>>>>>>>>        Variant retVal
24341>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24342>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 15 OLE_VT_DISPATCH to retVal
24343>>>>>>>>>        Function_Return retVal
24344>>>>>>>>>    End_Function
24345>>>>>>>>>
24345>>>>>>>>>    Function ComAddSwitchPane Integer llId Returns Variant
24347>>>>>>>>>        Handle hDispatchDriver
24347>>>>>>>>>        Variant retVal
24347>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24348>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24349>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24350>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 17 OLE_VT_DISPATCH to retVal
24351>>>>>>>>>        Function_Return retVal
24352>>>>>>>>>    End_Function
24353>>>>>>>>>
24353>>>>>>>>>    Function ComAddSliderPane Integer llId Returns Variant
24355>>>>>>>>>        Handle hDispatchDriver
24355>>>>>>>>>        Variant retVal
24355>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24356>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24357>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24358>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 18 OLE_VT_DISPATCH to retVal
24359>>>>>>>>>        Function_Return retVal
24360>>>>>>>>>    End_Function
24361>>>>>>>>>
24361>>>>>>>>>    Function ComAddProgressPane Integer llId Returns Variant
24363>>>>>>>>>        Handle hDispatchDriver
24363>>>>>>>>>        Variant retVal
24363>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24364>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24365>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24366>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 21 OLE_VT_DISPATCH to retVal
24367>>>>>>>>>        Function_Return retVal
24368>>>>>>>>>    End_Function
24369>>>>>>>>>
24369>>>>>>>>>    Procedure ComEnableCustomization Boolean llEnable
24371>>>>>>>>>        Handle hDispatchDriver
24371>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24372>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24373>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24374>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
24375>>>>>>>>>    End_Procedure
24376>>>>>>>>>
24376>>>>>>>>>    Procedure ComSetAllCaps Boolean llSetAllCaps
24378>>>>>>>>>        Handle hDispatchDriver
24378>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24379>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24380>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllCaps
24381>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
24382>>>>>>>>>    End_Procedure
24383>>>>>>>>>End_Class
24384>>>>>>>>>
24384>>>>>>>>>// CLSID: {C0DE2000-4037-4B66-82A3-D948409E11A6}
24384>>>>>>>>>Class cCJIStatusBarEvents is a Mixin
24385>>>>>>>>>
24385>>>>>>>>>    Procedure OnComMouseDown Short llButton Short llShift Integer llx Integer lly
24387>>>>>>>>>    End_Procedure
24388>>>>>>>>>
24388>>>>>>>>>    Procedure OnComMouseUp Short llButton Short llShift Integer llx Integer lly
24390>>>>>>>>>    End_Procedure
24391>>>>>>>>>
24391>>>>>>>>>    Procedure OnComPaneDblClick Variant llPane
24393>>>>>>>>>    End_Procedure
24394>>>>>>>>>
24394>>>>>>>>>    Procedure OnComPaneClick Variant llPane
24396>>>>>>>>>    End_Procedure
24397>>>>>>>>>
24397>>>>>>>>>    Procedure OnComSwitchPaneClick Variant llPane Integer llSwitch
24399>>>>>>>>>    End_Procedure
24400>>>>>>>>>
24400>>>>>>>>>    Procedure OnComSliderPaneClick Variant llPane XTPSliderCommand llCommand Integer llPos
24402>>>>>>>>>    End_Procedure
24403>>>>>>>>>
24403>>>>>>>>>    Procedure RegisterComEvents
24405>>>>>>>>>        Send RegisterComEvent -605 msg_OnComMouseDown
24406>>>>>>>>>        Send RegisterComEvent -607 msg_OnComMouseUp
24407>>>>>>>>>        Send RegisterComEvent 1 msg_OnComPaneDblClick
24408>>>>>>>>>        Send RegisterComEvent 2 msg_OnComPaneClick
24409>>>>>>>>>        Send RegisterComEvent 3 msg_OnComSwitchPaneClick
24410>>>>>>>>>        Send RegisterComEvent 4 msg_OnComSliderPaneClick
24411>>>>>>>>>    End_Procedure
24412>>>>>>>>>End_Class
24413>>>>>>>>>
24413>>>>>>>>>// CoClass
24413>>>>>>>>>// CLSID: {C0DE2000-0AC9-4997-B4D7-75B0F2E7E4BD}
24413>>>>>>>>>// Xtreme StatusBar Control
24413>>>>>>>>>Class cCJComStatusBar is a cComAutomationObject
24414>>>>>>>>>    Import_Class_Protocol cCJIStatusBar
24415>>>>>>>>>    Import_Class_Protocol cCJIStatusBarEvents
24416>>>>>>>>>
24416>>>>>>>>>    Procedure Construct_Object
24418>>>>>>>>>        Forward Send Construct_Object
24420>>>>>>>>>        Set psEventId to "{C0DE2000-4037-4B66-82A3-D948409E11A6}"
24421>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
24422>>>>>>>>>    End_Procedure
24423>>>>>>>>>End_Class
24424>>>>>>>>>
24424>>>>>>>>>// CLSID: {C0DE2000-97D0-43D4-BEE8-9E2511D89F64}
24424>>>>>>>>>// Dispatch interface for CommandBars Control
24424>>>>>>>>>Class cCJ_DCommandBarsFrame is a Mixin
24425>>>>>>>>>
24425>>>>>>>>>    Function ComVisualTheme Returns XTPVisualTheme
24427>>>>>>>>>        XTPVisualTheme retVal
24427>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
24428>>>>>>>>>        Function_Return retVal
24429>>>>>>>>>    End_Function
24430>>>>>>>>>
24430>>>>>>>>>    Procedure Set ComVisualTheme XTPVisualTheme value
24432>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
24433>>>>>>>>>    End_Procedure
24434>>>>>>>>>
24434>>>>>>>>>    Function ComIcons Returns Variant
24436>>>>>>>>>        Variant retVal
24436>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
24437>>>>>>>>>        Function_Return retVal
24438>>>>>>>>>    End_Function
24439>>>>>>>>>
24439>>>>>>>>>    Procedure Set ComIcons Variant value
24441>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
24442>>>>>>>>>    End_Procedure
24443>>>>>>>>>
24443>>>>>>>>>    Function ComScaleMode Returns XTPScaleMode
24445>>>>>>>>>        XTPScaleMode retVal
24445>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
24446>>>>>>>>>        Function_Return retVal
24447>>>>>>>>>    End_Function
24448>>>>>>>>>
24448>>>>>>>>>    Procedure Set ComScaleMode XTPScaleMode value
24450>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
24451>>>>>>>>>    End_Procedure
24452>>>>>>>>>
24452>>>>>>>>>    Function ComRightToLeft Returns Boolean
24454>>>>>>>>>        Boolean retVal
24454>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to retVal
24455>>>>>>>>>        Function_Return retVal
24456>>>>>>>>>    End_Function
24457>>>>>>>>>
24457>>>>>>>>>    Procedure Set ComRightToLeft Boolean value
24459>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to value
24460>>>>>>>>>    End_Procedure
24461>>>>>>>>>
24461>>>>>>>>>    Function ComIsAllCaps Returns Boolean
24463>>>>>>>>>        Boolean retVal
24463>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_BOOL to retVal
24464>>>>>>>>>        Function_Return retVal
24465>>>>>>>>>    End_Function
24466>>>>>>>>>
24466>>>>>>>>>    Procedure Set ComIsAllCaps Boolean value
24468>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_BOOL to value
24469>>>>>>>>>    End_Procedure
24470>>>>>>>>>
24470>>>>>>>>>    Function ComIsAllowFrameTransparency Returns Boolean
24472>>>>>>>>>        Boolean retVal
24472>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_BOOL to retVal
24473>>>>>>>>>        Function_Return retVal
24474>>>>>>>>>    End_Function
24475>>>>>>>>>
24475>>>>>>>>>    Procedure Set ComIsAllowFrameTransparency Boolean value
24477>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_BOOL to value
24478>>>>>>>>>    End_Procedure
24479>>>>>>>>>
24479>>>>>>>>>    Function ComReCreateReparented Returns Boolean
24481>>>>>>>>>        Boolean retVal
24481>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
24482>>>>>>>>>        Function_Return retVal
24483>>>>>>>>>    End_Function
24484>>>>>>>>>
24484>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
24486>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
24487>>>>>>>>>    End_Procedure
24488>>>>>>>>>
24488>>>>>>>>>    Function ComCount Returns Integer
24490>>>>>>>>>        Handle hDispatchDriver
24490>>>>>>>>>        Integer retVal
24490>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24491>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
24492>>>>>>>>>        Function_Return retVal
24493>>>>>>>>>    End_Function
24494>>>>>>>>>
24494>>>>>>>>>    // Returns a specific item.
24494>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
24496>>>>>>>>>        Handle hDispatchDriver
24496>>>>>>>>>        Variant retVal
24496>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24497>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24498>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24499>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
24500>>>>>>>>>        Function_Return retVal
24501>>>>>>>>>    End_Function
24502>>>>>>>>>
24502>>>>>>>>>    Function Com_NewEnum Returns Variant
24504>>>>>>>>>        Handle hDispatchDriver
24504>>>>>>>>>        Variant retVal
24504>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24505>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
24506>>>>>>>>>        Function_Return retVal
24507>>>>>>>>>    End_Function
24508>>>>>>>>>
24508>>>>>>>>>    Function ComAdd String llName XTPBarPosition llPosition Returns Variant
24510>>>>>>>>>        Handle hDispatchDriver
24510>>>>>>>>>        Variant retVal
24510>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24511>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24512>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24513>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
24514>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
24515>>>>>>>>>        Function_Return retVal
24516>>>>>>>>>    End_Function
24517>>>>>>>>>
24517>>>>>>>>>    Procedure ComAddImageList Variant llImageList
24519>>>>>>>>>        Handle hDispatchDriver
24519>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24520>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24521>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llImageList
24522>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
24523>>>>>>>>>    End_Procedure
24524>>>>>>>>>
24524>>>>>>>>>    Function ComActiveMenuBar Returns Variant
24526>>>>>>>>>        Handle hDispatchDriver
24526>>>>>>>>>        Variant retVal
24526>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24527>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
24528>>>>>>>>>        Function_Return retVal
24529>>>>>>>>>    End_Function
24530>>>>>>>>>
24530>>>>>>>>>    Procedure ComGetClientRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
24532>>>>>>>>>        Handle hDispatchDriver
24532>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24533>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24534>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
24535>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
24536>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
24537>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
24538>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
24539>>>>>>>>>    End_Procedure
24540>>>>>>>>>
24540>>>>>>>>>    Procedure ComRecalcLayout
24542>>>>>>>>>        Handle hDispatchDriver
24542>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24543>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
24544>>>>>>>>>    End_Procedure
24545>>>>>>>>>
24545>>>>>>>>>    Function ComKeyBindings Returns Variant
24547>>>>>>>>>        Handle hDispatchDriver
24547>>>>>>>>>        Variant retVal
24547>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24548>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_DISPATCH to retVal
24549>>>>>>>>>        Function_Return retVal
24550>>>>>>>>>    End_Function
24551>>>>>>>>>
24551>>>>>>>>>    Procedure ComAddIconHandle Integer llIcon Integer llCommand Integer llimageState Boolean llAlpha
24553>>>>>>>>>        Handle hDispatchDriver
24553>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24554>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24555>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIcon
24556>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
24557>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
24558>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llAlpha
24559>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
24560>>>>>>>>>    End_Procedure
24561>>>>>>>>>
24561>>>>>>>>>    Function ComOptions Returns Variant
24563>>>>>>>>>        Handle hDispatchDriver
24563>>>>>>>>>        Variant retVal
24563>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24564>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
24565>>>>>>>>>        Function_Return retVal
24566>>>>>>>>>    End_Function
24567>>>>>>>>>
24567>>>>>>>>>    Procedure ComSaveCommandBars Variant llRegistryKey Variant llAppName Variant llSection
24569>>>>>>>>>        Handle hDispatchDriver
24569>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24570>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
24571>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRegistryKey
24572>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llAppName
24573>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSection
24574>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
24575>>>>>>>>>    End_Procedure
24576>>>>>>>>>
24576>>>>>>>>>    Procedure ComLoadCommandBars Variant llRegistryKey Variant llAppName Variant llSection
24578>>>>>>>>>        Handle hDispatchDriver
24578>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24579>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
24580>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRegistryKey
24581>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llAppName
24582>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSection
24583>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
24584>>>>>>>>>    End_Procedure
24585>>>>>>>>>
24585>>>>>>>>>    Procedure ComLoadDesignerBars Variant llFileNameOrResource Variant llInstance
24587>>>>>>>>>        Handle hDispatchDriver
24587>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24588>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24589>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFileNameOrResource
24590>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llInstance
24591>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
24592>>>>>>>>>    End_Procedure
24593>>>>>>>>>
24593>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
24595>>>>>>>>>        Handle hDispatchDriver
24595>>>>>>>>>        Variant retVal
24595>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24596>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24597>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
24598>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
24599>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
24600>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
24601>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
24602>>>>>>>>>        Function_Return retVal
24603>>>>>>>>>    End_Function
24604>>>>>>>>>
24604>>>>>>>>>    Procedure ComAboutBox
24606>>>>>>>>>        Handle hDispatchDriver
24606>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24607>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
24608>>>>>>>>>    End_Procedure
24609>>>>>>>>>
24609>>>>>>>>>    Procedure ComDockToolBar Variant llToolBar Integer llx Integer lly XTPBarPosition llPosition
24611>>>>>>>>>        Handle hDispatchDriver
24611>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24612>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24613>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llToolBar
24614>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
24615>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
24616>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
24617>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
24618>>>>>>>>>    End_Procedure
24619>>>>>>>>>
24619>>>>>>>>>    Function ComGetSpecialColor XTPColorManagerColor llIndex Returns OLE_COLOR
24621>>>>>>>>>        Handle hDispatchDriver
24621>>>>>>>>>        OLE_COLOR retVal
24621>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24622>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24623>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24624>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 19 OLE_VT_I4 to retVal
24625>>>>>>>>>        Function_Return retVal
24626>>>>>>>>>    End_Function
24627>>>>>>>>>
24627>>>>>>>>>    Function ComShowTabWorkspace Boolean llShow Returns Variant
24629>>>>>>>>>        Handle hDispatchDriver
24629>>>>>>>>>        Variant retVal
24629>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24630>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24631>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShow
24632>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
24633>>>>>>>>>        Function_Return retVal
24634>>>>>>>>>    End_Function
24635>>>>>>>>>
24635>>>>>>>>>    Procedure ComMoveAlignedControl Variant llControl Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
24637>>>>>>>>>        Handle hDispatchDriver
24637>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24638>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
24639>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llControl
24640>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
24641>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
24642>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
24643>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
24644>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
24645>>>>>>>>>    End_Procedure
24646>>>>>>>>>
24646>>>>>>>>>    Function ComTabWorkspace Returns Variant
24648>>>>>>>>>        Handle hDispatchDriver
24648>>>>>>>>>        Variant retVal
24648>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24649>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 22 OLE_VT_DISPATCH to retVal
24650>>>>>>>>>        Function_Return retVal
24651>>>>>>>>>    End_Function
24652>>>>>>>>>
24652>>>>>>>>>    Procedure ComLoadStateFromString String llProfile Boolean llRestoreControls Boolean llRestoreOptions Boolean llSilent
24654>>>>>>>>>        Handle hDispatchDriver
24654>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24655>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24656>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
24657>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRestoreControls
24658>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRestoreOptions
24659>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSilent
24660>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
24661>>>>>>>>>    End_Procedure
24662>>>>>>>>>
24662>>>>>>>>>    Function ComSaveStateToString Boolean llSaveControls Boolean llSaveOnlyCustomized Boolean llSaveOptions Returns String
24664>>>>>>>>>        Handle hDispatchDriver
24664>>>>>>>>>        String retVal
24664>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24665>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
24666>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveControls
24667>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveOnlyCustomized
24668>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveOptions
24669>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 24 OLE_VT_BSTR to retVal
24670>>>>>>>>>        Function_Return retVal
24671>>>>>>>>>    End_Function
24672>>>>>>>>>
24672>>>>>>>>>    Function ComStatusBar Returns Variant
24674>>>>>>>>>        Handle hDispatchDriver
24674>>>>>>>>>        Variant retVal
24674>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24675>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 25 OLE_VT_DISPATCH to retVal
24676>>>>>>>>>        Function_Return retVal
24677>>>>>>>>>    End_Function
24678>>>>>>>>>
24678>>>>>>>>>    Function ComMessageBar Returns Variant
24680>>>>>>>>>        Handle hDispatchDriver
24680>>>>>>>>>        Variant retVal
24680>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24681>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 28 OLE_VT_DISPATCH to retVal
24682>>>>>>>>>        Function_Return retVal
24683>>>>>>>>>    End_Function
24684>>>>>>>>>
24684>>>>>>>>>    Procedure ComEnableCustomization Boolean llEnable
24686>>>>>>>>>        Handle hDispatchDriver
24686>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24687>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24688>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24689>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 26 OLE_VT_VOID
24690>>>>>>>>>    End_Procedure
24691>>>>>>>>>
24691>>>>>>>>>    Function ComDesignerControls Returns Variant
24693>>>>>>>>>        Handle hDispatchDriver
24693>>>>>>>>>        Variant retVal
24693>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24694>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 27 OLE_VT_DISPATCH to retVal
24695>>>>>>>>>        Function_Return retVal
24696>>>>>>>>>    End_Function
24697>>>>>>>>>
24697>>>>>>>>>    Procedure ComEnableDefaultResetCustomizedToolbarChoice Boolean llEnable Boolean llDefaultYes
24699>>>>>>>>>        Handle hDispatchDriver
24699>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24700>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24701>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24702>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llDefaultYes
24703>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 72 OLE_VT_VOID
24704>>>>>>>>>    End_Procedure
24705>>>>>>>>>
24705>>>>>>>>>    Function ComGetDispatch Returns Variant
24707>>>>>>>>>        Handle hDispatchDriver
24707>>>>>>>>>        Variant retVal
24707>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24708>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 31 OLE_VT_DISPATCH to retVal
24709>>>>>>>>>        Function_Return retVal
24710>>>>>>>>>    End_Function
24711>>>>>>>>>
24711>>>>>>>>>    Procedure ComSetMDIClient OLE_HANDLE llhWnd
24713>>>>>>>>>        Handle hDispatchDriver
24713>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24714>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24715>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
24716>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
24717>>>>>>>>>    End_Procedure
24718>>>>>>>>>
24718>>>>>>>>>    Function ComGlobalSettings Returns Variant
24720>>>>>>>>>        Handle hDispatchDriver
24720>>>>>>>>>        Variant retVal
24720>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24721>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_DISPATCH to retVal
24722>>>>>>>>>        Function_Return retVal
24723>>>>>>>>>    End_Function
24724>>>>>>>>>
24724>>>>>>>>>    Procedure ComClosePopups
24726>>>>>>>>>        Handle hDispatchDriver
24726>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24727>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 34 OLE_VT_VOID
24728>>>>>>>>>    End_Procedure
24729>>>>>>>>>
24729>>>>>>>>>    Procedure ComSetSpecialColor XTPColorManagerColor llIndex OLE_COLOR llColor
24731>>>>>>>>>        Handle hDispatchDriver
24731>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24732>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24733>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24734>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
24735>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
24736>>>>>>>>>    End_Procedure
24737>>>>>>>>>
24737>>>>>>>>>    Function ComAddDialogBar String llName XTPBarPosition llPosition Returns Variant
24739>>>>>>>>>        Handle hDispatchDriver
24739>>>>>>>>>        Variant retVal
24739>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24740>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24741>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24742>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
24743>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 36 OLE_VT_DISPATCH to retVal
24744>>>>>>>>>        Function_Return retVal
24745>>>>>>>>>    End_Function
24746>>>>>>>>>
24746>>>>>>>>>    Procedure ComLoadStateFromXMLString String llProfile String llstate Variant llOptions
24748>>>>>>>>>        Handle hDispatchDriver
24748>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24749>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
24750>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
24751>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstate
24752>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
24753>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
24754>>>>>>>>>    End_Procedure
24755>>>>>>>>>
24755>>>>>>>>>    Function ComSaveStateToXMLString String llProfile Variant llOptions Returns String
24757>>>>>>>>>        Handle hDispatchDriver
24757>>>>>>>>>        String retVal
24757>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24758>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24759>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
24760>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
24761>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 38 OLE_VT_BSTR to retVal
24762>>>>>>>>>        Function_Return retVal
24763>>>>>>>>>    End_Function
24764>>>>>>>>>
24764>>>>>>>>>    Function ComCreateStateOptions Returns Variant
24766>>>>>>>>>        Handle hDispatchDriver
24766>>>>>>>>>        Variant retVal
24766>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24767>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 39 OLE_VT_DISPATCH to retVal
24768>>>>>>>>>        Function_Return retVal
24769>>>>>>>>>    End_Function
24770>>>>>>>>>
24770>>>>>>>>>    Procedure ComDoPropExchange Variant llpPX Variant llOptions
24772>>>>>>>>>        Handle hDispatchDriver
24772>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24773>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24774>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpPX
24775>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
24776>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 45 OLE_VT_VOID
24777>>>>>>>>>    End_Procedure
24778>>>>>>>>>
24778>>>>>>>>>    Function ComCustomizedControl Returns Variant
24780>>>>>>>>>        Handle hDispatchDriver
24780>>>>>>>>>        Variant retVal
24780>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24781>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_DISPATCH to retVal
24782>>>>>>>>>        Function_Return retVal
24783>>>>>>>>>    End_Function
24784>>>>>>>>>
24784>>>>>>>>>    // Deletes all of the toolbars
24784>>>>>>>>>    Procedure ComDeleteAll
24786>>>>>>>>>        Handle hDispatchDriver
24786>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24787>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 41 OLE_VT_VOID
24788>>>>>>>>>    End_Procedure
24789>>>>>>>>>
24789>>>>>>>>>    Function ComToolTipContext Returns Variant
24791>>>>>>>>>        Handle hDispatchDriver
24791>>>>>>>>>        Variant retVal
24791>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24792>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 42 OLE_VT_DISPATCH to retVal
24793>>>>>>>>>        Function_Return retVal
24794>>>>>>>>>    End_Function
24795>>>>>>>>>
24795>>>>>>>>>    Function ComTrackingMode Returns Boolean
24797>>>>>>>>>        Handle hDispatchDriver
24797>>>>>>>>>        Boolean retVal
24797>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24798>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_BOOL to retVal
24799>>>>>>>>>        Function_Return retVal
24800>>>>>>>>>    End_Function
24801>>>>>>>>>
24801>>>>>>>>>    Function ComFocusedCommandBar Returns Variant
24803>>>>>>>>>        Handle hDispatchDriver
24803>>>>>>>>>        Variant retVal
24803>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24804>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_DISPATCH to retVal
24805>>>>>>>>>        Function_Return retVal
24806>>>>>>>>>    End_Function
24807>>>>>>>>>
24807>>>>>>>>>    Function ComAddMenuBar String llName Returns Variant
24809>>>>>>>>>        Handle hDispatchDriver
24809>>>>>>>>>        Variant retVal
24809>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24810>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24811>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24812>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 47 OLE_VT_DISPATCH to retVal
24813>>>>>>>>>        Function_Return retVal
24814>>>>>>>>>    End_Function
24815>>>>>>>>>
24815>>>>>>>>>    Function ComAddTabToolBar String llName Returns Variant
24817>>>>>>>>>        Handle hDispatchDriver
24817>>>>>>>>>        Variant retVal
24817>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24818>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24819>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24820>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 48 OLE_VT_DISPATCH to retVal
24821>>>>>>>>>        Function_Return retVal
24822>>>>>>>>>    End_Function
24823>>>>>>>>>
24823>>>>>>>>>    Function ComAddRibbonBar String llName Returns Variant
24825>>>>>>>>>        Handle hDispatchDriver
24825>>>>>>>>>        Variant retVal
24825>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24826>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24827>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24828>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 49 OLE_VT_DISPATCH to retVal
24829>>>>>>>>>        Function_Return retVal
24830>>>>>>>>>    End_Function
24831>>>>>>>>>
24831>>>>>>>>>    Procedure ComAttachToWindow OLE_HANDLE llhWnd
24833>>>>>>>>>        Handle hDispatchDriver
24833>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24834>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24835>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
24836>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 50 OLE_VT_VOID
24837>>>>>>>>>    End_Procedure
24838>>>>>>>>>
24838>>>>>>>>>    Procedure ComShowCustomizeDialog Integer llActiveTab
24840>>>>>>>>>        Handle hDispatchDriver
24840>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24841>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24842>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llActiveTab
24843>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 51 OLE_VT_VOID
24844>>>>>>>>>    End_Procedure
24845>>>>>>>>>
24845>>>>>>>>>    Procedure ComEnableOffice2007Frame Boolean llEnable
24847>>>>>>>>>        Handle hDispatchDriver
24847>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24848>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24849>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24850>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 52 OLE_VT_VOID
24851>>>>>>>>>    End_Procedure
24852>>>>>>>>>
24852>>>>>>>>>    Procedure ComEnableFrameTheme Boolean llEnable
24854>>>>>>>>>        Handle hDispatchDriver
24854>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24855>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24856>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24857>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 90 OLE_VT_VOID
24858>>>>>>>>>    End_Procedure
24859>>>>>>>>>
24859>>>>>>>>>    Procedure ComEnableActions
24861>>>>>>>>>        Handle hDispatchDriver
24861>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24862>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 53 OLE_VT_VOID
24863>>>>>>>>>    End_Procedure
24864>>>>>>>>>
24864>>>>>>>>>    Function ComActions Returns Variant
24866>>>>>>>>>        Handle hDispatchDriver
24866>>>>>>>>>        Variant retVal
24866>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24867>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 54 OLE_VT_DISPATCH to retVal
24868>>>>>>>>>        Function_Return retVal
24869>>>>>>>>>    End_Function
24870>>>>>>>>>
24870>>>>>>>>>    Function ComPaintManager Returns Variant
24872>>>>>>>>>        Handle hDispatchDriver
24872>>>>>>>>>        Variant retVal
24872>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24873>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 55 OLE_VT_DISPATCH to retVal
24874>>>>>>>>>        Function_Return retVal
24875>>>>>>>>>    End_Function
24876>>>>>>>>>
24876>>>>>>>>>    Function ComCreateGalleryItems Integer llId Returns Variant
24878>>>>>>>>>        Handle hDispatchDriver
24878>>>>>>>>>        Variant retVal
24878>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24879>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24880>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24881>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 56 OLE_VT_DISPATCH to retVal
24882>>>>>>>>>        Function_Return retVal
24883>>>>>>>>>    End_Function
24884>>>>>>>>>
24884>>>>>>>>>    Procedure ComEnableOffice2007FrameHandle OLE_HANDLE llhWnd
24886>>>>>>>>>        Handle hDispatchDriver
24886>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24887>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24888>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
24889>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 57 OLE_VT_VOID
24890>>>>>>>>>    End_Procedure
24891>>>>>>>>>
24891>>>>>>>>>    Procedure ComDisableOffice2007FrameHandle OLE_HANDLE llhWnd
24893>>>>>>>>>        Handle hDispatchDriver
24893>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24894>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24895>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
24896>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 65 OLE_VT_VOID
24897>>>>>>>>>    End_Procedure
24898>>>>>>>>>
24898>>>>>>>>>    Function ComCreateCommandBarControl String llClassName Returns Variant
24900>>>>>>>>>        Handle hDispatchDriver
24900>>>>>>>>>        Variant retVal
24900>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24901>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24902>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
24903>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 58 OLE_VT_DISPATCH to retVal
24904>>>>>>>>>        Function_Return retVal
24905>>>>>>>>>    End_Function
24906>>>>>>>>>
24906>>>>>>>>>    Function ComCreateCommandBar String llClassName Returns Variant
24908>>>>>>>>>        Handle hDispatchDriver
24908>>>>>>>>>        Variant retVal
24908>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24909>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24910>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
24911>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 59 OLE_VT_DISPATCH to retVal
24912>>>>>>>>>        Function_Return retVal
24913>>>>>>>>>    End_Function
24914>>>>>>>>>
24914>>>>>>>>>    Function ComContextHelp Returns Integer
24916>>>>>>>>>        Handle hDispatchDriver
24916>>>>>>>>>        Integer retVal
24916>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24917>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 60 OLE_VT_I4 to retVal
24918>>>>>>>>>        Function_Return retVal
24919>>>>>>>>>    End_Function
24920>>>>>>>>>
24920>>>>>>>>>    Function ComContextMenus Returns Variant
24922>>>>>>>>>        Handle hDispatchDriver
24922>>>>>>>>>        Variant retVal
24922>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24923>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 61 OLE_VT_DISPATCH to retVal
24924>>>>>>>>>        Function_Return retVal
24925>>>>>>>>>    End_Function
24926>>>>>>>>>
24926>>>>>>>>>    Procedure ComOLEDrag
24928>>>>>>>>>        Handle hDispatchDriver
24928>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24929>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 62 OLE_VT_VOID
24930>>>>>>>>>    End_Procedure
24931>>>>>>>>>
24931>>>>>>>>>    Function ComAddMiniToolBar String llName Returns Variant
24933>>>>>>>>>        Handle hDispatchDriver
24933>>>>>>>>>        Variant retVal
24933>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24934>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24935>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24936>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 63 OLE_VT_DISPATCH to retVal
24937>>>>>>>>>        Function_Return retVal
24938>>>>>>>>>    End_Function
24939>>>>>>>>>
24939>>>>>>>>>    Function ComRecentFileList Returns Variant
24941>>>>>>>>>        Handle hDispatchDriver
24941>>>>>>>>>        Variant retVal
24941>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24942>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 64 OLE_VT_DISPATCH to retVal
24943>>>>>>>>>        Function_Return retVal
24944>>>>>>>>>    End_Function
24945>>>>>>>>>
24945>>>>>>>>>    Procedure ComDisableOffice2007FrameHandle OLE_HANDLE llhWnd
24947>>>>>>>>>        Handle hDispatchDriver
24947>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24948>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24949>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
24950>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 65 OLE_VT_VOID
24951>>>>>>>>>    End_Procedure
24952>>>>>>>>>
24952>>>>>>>>>    Procedure ComDisableFrameThemeHandle OLE_HANDLE llhWnd
24954>>>>>>>>>        Handle hDispatchDriver
24954>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24955>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24956>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
24957>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 110 OLE_VT_VOID
24958>>>>>>>>>    End_Procedure
24959>>>>>>>>>
24959>>>>>>>>>    Procedure ComAddCustomBar Variant llCommandBar String llName XTPBarPosition llPosition
24961>>>>>>>>>        Handle hDispatchDriver
24961>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24962>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
24963>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llCommandBar
24964>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24965>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
24966>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 66 OLE_VT_VOID
24967>>>>>>>>>    End_Procedure
24968>>>>>>>>>
24968>>>>>>>>>    Procedure ComEnableToolbarComposition Boolean llEnable
24970>>>>>>>>>        Handle hDispatchDriver
24970>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24971>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24972>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24973>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 67 OLE_VT_VOID
24974>>>>>>>>>    End_Procedure
24975>>>>>>>>>
24975>>>>>>>>>    Procedure ComSetAllCaps Boolean llSetAllCaps
24977>>>>>>>>>        Handle hDispatchDriver
24977>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24978>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24979>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllCaps
24980>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 68 OLE_VT_VOID
24981>>>>>>>>>    End_Procedure
24982>>>>>>>>>
24982>>>>>>>>>    Procedure ComAllowFrameTransparency Boolean llSetAllowTransparency
24984>>>>>>>>>        Handle hDispatchDriver
24984>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24985>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24986>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllowTransparency
24987>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 70 OLE_VT_VOID
24988>>>>>>>>>    End_Procedure
24989>>>>>>>>>
24989>>>>>>>>>    Function ComSetOfficeSetBackImage XTPBackImage llBackImage Returns Boolean
24991>>>>>>>>>        Handle hDispatchDriver
24991>>>>>>>>>        Boolean retVal
24991>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24992>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24993>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBackImage
24994>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 80 OLE_VT_BOOL to retVal
24995>>>>>>>>>        Function_Return retVal
24996>>>>>>>>>    End_Function
24997>>>>>>>>>End_Class
24998>>>>>>>>>
24998>>>>>>>>>// CLSID: {C0DE2000-D2EF-4119-BBBB-8314B5794E11}
24998>>>>>>>>>// Event interface for CommandBars Control
24998>>>>>>>>>Class cCJ_DCommandBarsFrameEvents is a Mixin
24999>>>>>>>>>
24999>>>>>>>>>    Procedure OnComExecute Variant llControl
25001>>>>>>>>>    End_Procedure
25002>>>>>>>>>
25002>>>>>>>>>    Procedure OnComUpdate Variant llControl
25004>>>>>>>>>    End_Procedure
25005>>>>>>>>>
25005>>>>>>>>>    Procedure OnComResize
25007>>>>>>>>>    End_Procedure
25008>>>>>>>>>
25008>>>>>>>>>    Procedure OnComGetClientBordersWidth Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
25010>>>>>>>>>    End_Procedure
25011>>>>>>>>>
25011>>>>>>>>>    Procedure OnComControlSelected Variant llControl
25013>>>>>>>>>    End_Procedure
25014>>>>>>>>>
25014>>>>>>>>>    Procedure OnComInitCommandsPopup Variant llCommandBar
25016>>>>>>>>>    End_Procedure
25017>>>>>>>>>
25017>>>>>>>>>    Procedure OnComResizeClient Integer llLeft Integer llTop Integer llRight Integer llBottom
25019>>>>>>>>>    End_Procedure
25020>>>>>>>>>
25020>>>>>>>>>    Procedure OnComSpecialColorChanged
25022>>>>>>>>>    End_Procedure
25023>>>>>>>>>
25023>>>>>>>>>    Procedure OnComRepositionAlignedControls Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
25025>>>>>>>>>    End_Procedure
25026>>>>>>>>>
25026>>>>>>>>>    Procedure OnComCustomization Variant llOptions
25028>>>>>>>>>    End_Procedure
25029>>>>>>>>>
25029>>>>>>>>>    Procedure OnComToolBarVisibleChanged Variant llToolBar
25031>>>>>>>>>    End_Procedure
25032>>>>>>>>>
25032>>>>>>>>>    Procedure OnComControlRButtonUp Variant llControl
25034>>>>>>>>>    End_Procedure
25035>>>>>>>>>
25035>>>>>>>>>    Procedure OnComCustomizationDone
25037>>>>>>>>>    End_Procedure
25038>>>>>>>>>
25038>>>>>>>>>    Procedure OnComCommandBarKeyDown Variant llCommandBar Integer ByRef llKeyCode Short llShift
25040>>>>>>>>>    End_Procedure
25041>>>>>>>>>
25041>>>>>>>>>    Procedure OnComToolBarContextMenu Variant llToolBar Variant llContextMenu
25043>>>>>>>>>    End_Procedure
25044>>>>>>>>>
25044>>>>>>>>>    Procedure OnComTrackingModeChanged Variant llCommandBar Boolean llMode
25046>>>>>>>>>    End_Procedure
25047>>>>>>>>>
25047>>>>>>>>>    Procedure OnComCustomizationResetToolBar Variant llToolBar
25049>>>>>>>>>    End_Procedure
25050>>>>>>>>>
25050>>>>>>>>>    Procedure OnComCustomizationAddToolBar Variant llToolBar
25052>>>>>>>>>    End_Procedure
25053>>>>>>>>>
25053>>>>>>>>>    Procedure OnComCustomizationDeleteToolBar Variant llToolBar
25055>>>>>>>>>    End_Procedure
25056>>>>>>>>>
25056>>>>>>>>>    Procedure OnComControlNotify Variant llControl Integer llCode Variant llNotifyData Variant llHandled
25058>>>>>>>>>    End_Procedure
25059>>>>>>>>>
25059>>>>>>>>>    Procedure OnComGetActiveDocumentID Integer ByRef llId
25061>>>>>>>>>    End_Procedure
25062>>>>>>>>>
25062>>>>>>>>>    Procedure OnComCustomizationResetAll
25064>>>>>>>>>    End_Procedure
25065>>>>>>>>>
25065>>>>>>>>>    Procedure OnComMessageBarClosed Variant llMessageBar
25067>>>>>>>>>    End_Procedure
25068>>>>>>>>>
25068>>>>>>>>>    Procedure OnComOLEStartDrag Variant llData Integer ByRef llAllowedEffects
25070>>>>>>>>>    End_Procedure
25071>>>>>>>>>
25071>>>>>>>>>    Procedure OnComOLECompleteDrag Integer ByRef llEffect
25073>>>>>>>>>    End_Procedure
25074>>>>>>>>>
25074>>>>>>>>>    Procedure OnComReCreated
25076>>>>>>>>>    End_Procedure
25077>>>>>>>>>
25077>>>>>>>>>    Procedure RegisterComEvents
25079>>>>>>>>>        Send RegisterComEvent 1 msg_OnComExecute
25080>>>>>>>>>        Send RegisterComEvent 2 msg_OnComUpdate
25081>>>>>>>>>        Send RegisterComEvent 3 msg_OnComResize
25082>>>>>>>>>        Send RegisterComEvent 4 msg_OnComGetClientBordersWidth
25083>>>>>>>>>        Send RegisterComEvent 5 msg_OnComControlSelected
25084>>>>>>>>>        Send RegisterComEvent 6 msg_OnComInitCommandsPopup
25085>>>>>>>>>        Send RegisterComEvent 7 msg_OnComResizeClient
25086>>>>>>>>>        Send RegisterComEvent 8 msg_OnComSpecialColorChanged
25087>>>>>>>>>        Send RegisterComEvent 9 msg_OnComRepositionAlignedControls
25088>>>>>>>>>        Send RegisterComEvent 10 msg_OnComCustomization
25089>>>>>>>>>        Send RegisterComEvent 11 msg_OnComToolBarVisibleChanged
25090>>>>>>>>>        Send RegisterComEvent 12 msg_OnComControlRButtonUp
25091>>>>>>>>>        Send RegisterComEvent 13 msg_OnComCustomizationDone
25092>>>>>>>>>        Send RegisterComEvent -602 msg_OnComCommandBarKeyDown
25093>>>>>>>>>        Send RegisterComEvent 14 msg_OnComToolBarContextMenu
25094>>>>>>>>>        Send RegisterComEvent 15 msg_OnComTrackingModeChanged
25095>>>>>>>>>        Send RegisterComEvent 16 msg_OnComCustomizationResetToolBar
25096>>>>>>>>>        Send RegisterComEvent 17 msg_OnComCustomizationAddToolBar
25097>>>>>>>>>        Send RegisterComEvent 18 msg_OnComCustomizationDeleteToolBar
25098>>>>>>>>>        Send RegisterComEvent 19 msg_OnComControlNotify
25099>>>>>>>>>        Send RegisterComEvent 20 msg_OnComGetActiveDocumentID
25100>>>>>>>>>        Send RegisterComEvent 21 msg_OnComCustomizationResetAll
25101>>>>>>>>>        Send RegisterComEvent 22 msg_OnComMessageBarClosed
25102>>>>>>>>>        Send RegisterComEvent 303 msg_OnComOLEStartDrag
25103>>>>>>>>>        Send RegisterComEvent 304 msg_OnComOLECompleteDrag
25104>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25105>>>>>>>>>    End_Procedure
25106>>>>>>>>>End_Class
25107>>>>>>>>>
25107>>>>>>>>>// CoClass
25107>>>>>>>>>// ProgID: Codejock.CommandBarsFrame.20.0.0
25107>>>>>>>>>// CLSID: {C0DE2000-148B-45F5-9679-3E0DBBC92C13}
25107>>>>>>>>>// Xtreme CommandBars Frame Control
25107>>>>>>>>>Class cCJCommandBarsFrame is a cComActiveXControl
25108>>>>>>>>>    Import_Class_Protocol cCJ_DCommandBarsFrame
25109>>>>>>>>>    Import_Class_Protocol cCJ_DCommandBarsFrameEvents
25110>>>>>>>>>
25110>>>>>>>>>    Procedure Construct_Object
25112>>>>>>>>>        Forward Send Construct_Object
25114>>>>>>>>>        Set psProgID to "{C0DE2000-148B-45F5-9679-3E0DBBC92C13}"
25115>>>>>>>>>        Set psEventId to "{C0DE2000-D2EF-4119-BBBB-8314B5794E11}"
25116>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2021 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v20.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
25117>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25118>>>>>>>>>    End_Procedure
25119>>>>>>>>>End_Class
25120>>>>>>>>>
25120>>>>>>>>>// CLSID: {C0DE2000-41E3-4369-89EF-1C084E3A21A8}
25120>>>>>>>>>// Dispatch interface for ImageManagerPropPage
25120>>>>>>>>>Class cCJ_DImageManagerPropPage is a Mixin
25121>>>>>>>>>End_Class
25122>>>>>>>>>
25122>>>>>>>>>// CoClass
25122>>>>>>>>>// CLSID: {C0DE2000-62EF-44E0-8471-69E91C8B026C}
25122>>>>>>>>>// Image manager property page
25122>>>>>>>>>Class cCJImageManagerPropPage is a cComAutomationObject
25123>>>>>>>>>    Import_Class_Protocol cCJ_DImageManagerPropPage
25124>>>>>>>>>
25124>>>>>>>>>    Procedure Construct_Object
25126>>>>>>>>>        Forward Send Construct_Object
25128>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
25129>>>>>>>>>    End_Procedure
25130>>>>>>>>>End_Class
25131>>>>>>>>>
25131>>>>>>>>>// CLSID: {C0DE2000-3B80-4CED-A441-19E468F8D087}
25131>>>>>>>>>// Dispatch interface for PrintPreview Control
25131>>>>>>>>>Class cCJ_DPrintPreview is a Mixin
25132>>>>>>>>>
25132>>>>>>>>>    Function ComPrintView Returns Variant
25134>>>>>>>>>        Variant retVal
25134>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_UNKNOWN to retVal
25135>>>>>>>>>        Function_Return retVal
25136>>>>>>>>>    End_Function
25137>>>>>>>>>
25137>>>>>>>>>    Procedure Set ComPrintView Variant value
25139>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_UNKNOWN to value
25140>>>>>>>>>    End_Procedure
25141>>>>>>>>>
25141>>>>>>>>>    Function ComTitle Returns String
25143>>>>>>>>>        String retVal
25143>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
25144>>>>>>>>>        Function_Return retVal
25145>>>>>>>>>    End_Function
25146>>>>>>>>>
25146>>>>>>>>>    Procedure Set ComTitle String value
25148>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
25149>>>>>>>>>    End_Procedure
25150>>>>>>>>>
25150>>>>>>>>>    Function ComVisualTheme Returns XTPVisualTheme
25152>>>>>>>>>        XTPVisualTheme retVal
25152>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
25153>>>>>>>>>        Function_Return retVal
25154>>>>>>>>>    End_Function
25155>>>>>>>>>
25155>>>>>>>>>    Procedure Set ComVisualTheme XTPVisualTheme value
25157>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
25158>>>>>>>>>    End_Procedure
25159>>>>>>>>>
25159>>>>>>>>>    Function ComZoomState Returns Integer
25161>>>>>>>>>        Integer retVal
25161>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
25162>>>>>>>>>        Function_Return retVal
25163>>>>>>>>>    End_Function
25164>>>>>>>>>
25164>>>>>>>>>    Procedure Set ComZoomState Integer value
25166>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
25167>>>>>>>>>    End_Procedure
25168>>>>>>>>>
25168>>>>>>>>>    Function ComToolBarVisible Returns Boolean
25170>>>>>>>>>        Boolean retVal
25170>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
25171>>>>>>>>>        Function_Return retVal
25172>>>>>>>>>    End_Function
25173>>>>>>>>>
25173>>>>>>>>>    Procedure Set ComToolBarVisible Boolean value
25175>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
25176>>>>>>>>>    End_Procedure
25177>>>>>>>>>
25177>>>>>>>>>    Function ComOrientation Returns XTPPrintOrientation
25179>>>>>>>>>        XTPPrintOrientation retVal
25179>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
25180>>>>>>>>>        Function_Return retVal
25181>>>>>>>>>    End_Function
25182>>>>>>>>>
25182>>>>>>>>>    Procedure Set ComOrientation XTPPrintOrientation value
25184>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
25185>>>>>>>>>    End_Procedure
25186>>>>>>>>>
25186>>>>>>>>>    Function ComBackColor Returns OLE_COLOR
25188>>>>>>>>>        OLE_COLOR retVal
25188>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to retVal
25189>>>>>>>>>        Function_Return retVal
25190>>>>>>>>>    End_Function
25191>>>>>>>>>
25191>>>>>>>>>    Procedure Set ComBackColor OLE_COLOR value
25193>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to value
25194>>>>>>>>>    End_Procedure
25195>>>>>>>>>
25195>>>>>>>>>    Function ComShowBorder Returns Boolean
25197>>>>>>>>>        Boolean retVal
25197>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
25198>>>>>>>>>        Function_Return retVal
25199>>>>>>>>>    End_Function
25200>>>>>>>>>
25200>>>>>>>>>    Procedure Set ComShowBorder Boolean value
25202>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
25203>>>>>>>>>    End_Procedure
25204>>>>>>>>>
25204>>>>>>>>>    Function ComReCreateReparented Returns Boolean
25206>>>>>>>>>        Boolean retVal
25206>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
25207>>>>>>>>>        Function_Return retVal
25208>>>>>>>>>    End_Function
25209>>>>>>>>>
25209>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
25211>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
25212>>>>>>>>>    End_Procedure
25213>>>>>>>>>
25213>>>>>>>>>    Function ComCreateMarkupPrintView String llMarkupText Returns Variant
25215>>>>>>>>>        Handle hDispatchDriver
25215>>>>>>>>>        Variant retVal
25215>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25216>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25217>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llMarkupText
25218>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_UNKNOWN to retVal
25219>>>>>>>>>        Function_Return retVal
25220>>>>>>>>>    End_Function
25221>>>>>>>>>
25221>>>>>>>>>    Procedure ComShowPrintDialog
25223>>>>>>>>>        Handle hDispatchDriver
25223>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25224>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
25225>>>>>>>>>    End_Procedure
25226>>>>>>>>>
25226>>>>>>>>>    Function ComCreateRichEditPrintView String llText Returns Variant
25228>>>>>>>>>        Handle hDispatchDriver
25228>>>>>>>>>        Variant retVal
25228>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25229>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25230>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
25231>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_UNKNOWN to retVal
25232>>>>>>>>>        Function_Return retVal
25233>>>>>>>>>    End_Function
25234>>>>>>>>>
25234>>>>>>>>>    Function ComToolBar Returns Variant
25236>>>>>>>>>        Handle hDispatchDriver
25236>>>>>>>>>        Variant retVal
25236>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25237>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_DISPATCH to retVal
25238>>>>>>>>>        Function_Return retVal
25239>>>>>>>>>    End_Function
25240>>>>>>>>>
25240>>>>>>>>>    Procedure ComPrintDirect OLE_HANDLE llhDC
25242>>>>>>>>>        Handle hDispatchDriver
25242>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25243>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25244>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhDC
25245>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
25246>>>>>>>>>    End_Procedure
25247>>>>>>>>>
25247>>>>>>>>>    Procedure ComAboutBox
25249>>>>>>>>>        Handle hDispatchDriver
25249>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25250>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
25251>>>>>>>>>    End_Procedure
25252>>>>>>>>>End_Class
25253>>>>>>>>>
25253>>>>>>>>>// CLSID: {C0DE2000-DC0C-498B-9B3E-FEC9F5C31D94}
25253>>>>>>>>>// Event interface for PrintPreview Control
25253>>>>>>>>>Class cCJ_DPrintPreviewEvents is a Mixin
25254>>>>>>>>>
25254>>>>>>>>>    Procedure OnComCloseClick
25256>>>>>>>>>    End_Procedure
25257>>>>>>>>>
25257>>>>>>>>>    Procedure OnComPrintClick
25259>>>>>>>>>    End_Procedure
25260>>>>>>>>>
25260>>>>>>>>>    Procedure OnComReCreated
25262>>>>>>>>>    End_Procedure
25263>>>>>>>>>
25263>>>>>>>>>    Procedure RegisterComEvents
25265>>>>>>>>>        Send RegisterComEvent 1 msg_OnComCloseClick
25266>>>>>>>>>        Send RegisterComEvent 2 msg_OnComPrintClick
25267>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25268>>>>>>>>>    End_Procedure
25269>>>>>>>>>End_Class
25270>>>>>>>>>
25270>>>>>>>>>// CoClass
25270>>>>>>>>>// ProgID: Codejock.PrintPreview.20.0.0
25270>>>>>>>>>// CLSID: {C0DE2000-7F9D-4B69-95D0-249FC10AEF31}
25270>>>>>>>>>// PrintPreview Control
25270>>>>>>>>>Class cCJPrintPreview is a cComActiveXControl
25271>>>>>>>>>    Import_Class_Protocol cCJ_DPrintPreview
25272>>>>>>>>>    Import_Class_Protocol cCJ_DPrintPreviewEvents
25273>>>>>>>>>
25273>>>>>>>>>    Procedure Construct_Object
25275>>>>>>>>>        Forward Send Construct_Object
25277>>>>>>>>>        Set psProgID to "{C0DE2000-7F9D-4B69-95D0-249FC10AEF31}"
25278>>>>>>>>>        Set psEventId to "{C0DE2000-DC0C-498B-9B3E-FEC9F5C31D94}"
25279>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25280>>>>>>>>>    End_Procedure
25281>>>>>>>>>End_Class
25282>>>>>>>>>
25282>>>>>>>>>// CLSID: {C0DE2000-7F27-46D2-91A1-0442FD6DA0DD}
25282>>>>>>>>>// Dispatch interface for PushButton Control
25282>>>>>>>>>Class cCJ_DBackstageButton is a Mixin
25283>>>>>>>>>
25283>>>>>>>>>    Function ComValue Returns Boolean
25285>>>>>>>>>        Boolean retVal
25285>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 0 OLE_VT_BOOL to retVal
25286>>>>>>>>>        Function_Return retVal
25287>>>>>>>>>    End_Function
25288>>>>>>>>>
25288>>>>>>>>>    Procedure Set ComValue Boolean value
25290>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 0 OLE_VT_BOOL to value
25291>>>>>>>>>    End_Procedure
25292>>>>>>>>>
25292>>>>>>>>>    Function ComCaption Returns String
25294>>>>>>>>>        String retVal
25294>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -518 OLE_VT_BSTR to retVal
25295>>>>>>>>>        Function_Return retVal
25296>>>>>>>>>    End_Function
25297>>>>>>>>>
25297>>>>>>>>>    Procedure Set ComCaption String value
25299>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -518 OLE_VT_BSTR to value
25300>>>>>>>>>    End_Procedure
25301>>>>>>>>>
25301>>>>>>>>>    Function ComFont Returns Variant
25303>>>>>>>>>        Variant retVal
25303>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
25304>>>>>>>>>        Function_Return retVal
25305>>>>>>>>>    End_Function
25306>>>>>>>>>
25306>>>>>>>>>    Procedure Set ComFont Variant value
25308>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
25309>>>>>>>>>    End_Procedure
25310>>>>>>>>>
25310>>>>>>>>>    Function ComBackColor Returns OLE_COLOR
25312>>>>>>>>>        OLE_COLOR retVal
25312>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to retVal
25313>>>>>>>>>        Function_Return retVal
25314>>>>>>>>>    End_Function
25315>>>>>>>>>
25315>>>>>>>>>    Procedure Set ComBackColor OLE_COLOR value
25317>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to value
25318>>>>>>>>>    End_Procedure
25319>>>>>>>>>
25319>>>>>>>>>    Function ComForeColor Returns OLE_COLOR
25321>>>>>>>>>        OLE_COLOR retVal
25321>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -513 OLE_VT_I4 to retVal
25322>>>>>>>>>        Function_Return retVal
25323>>>>>>>>>    End_Function
25324>>>>>>>>>
25324>>>>>>>>>    Procedure Set ComForeColor OLE_COLOR value
25326>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -513 OLE_VT_I4 to value
25327>>>>>>>>>    End_Procedure
25328>>>>>>>>>
25328>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
25330>>>>>>>>>        OLE_HANDLE retVal
25330>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -515 OLE_VT_I4 to retVal
25331>>>>>>>>>        Function_Return retVal
25332>>>>>>>>>    End_Function
25333>>>>>>>>>
25333>>>>>>>>>    Procedure Set ComHWnd OLE_HANDLE value
25335>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -515 OLE_VT_I4 to value
25336>>>>>>>>>    End_Procedure
25337>>>>>>>>>
25337>>>>>>>>>    Function ComEnabled Returns Boolean
25339>>>>>>>>>        Boolean retVal
25339>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -514 OLE_VT_BOOL to retVal
25340>>>>>>>>>        Function_Return retVal
25341>>>>>>>>>    End_Function
25342>>>>>>>>>
25342>>>>>>>>>    Procedure Set ComEnabled Boolean value
25344>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -514 OLE_VT_BOOL to value
25345>>>>>>>>>    End_Procedure
25346>>>>>>>>>
25346>>>>>>>>>    Function ComDefault Returns Boolean
25348>>>>>>>>>        Boolean retVal
25348>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1745027088 OLE_VT_BOOL to retVal
25349>>>>>>>>>        Function_Return retVal
25350>>>>>>>>>    End_Function
25351>>>>>>>>>
25351>>>>>>>>>    Procedure Set ComDefault Boolean value
25353>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1745027088 OLE_VT_BOOL to value
25354>>>>>>>>>    End_Procedure
25355>>>>>>>>>
25355>>>>>>>>>    Function ComFlatStyle Returns Boolean
25357>>>>>>>>>        Boolean retVal
25357>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
25358>>>>>>>>>        Function_Return retVal
25359>>>>>>>>>    End_Function
25360>>>>>>>>>
25360>>>>>>>>>    Procedure Set ComFlatStyle Boolean value
25362>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
25363>>>>>>>>>    End_Procedure
25364>>>>>>>>>
25364>>>>>>>>>    Function ComAppearance Returns XTPBackstageButtonControlAppearanceStyle
25366>>>>>>>>>        XTPBackstageButtonControlAppearanceStyle retVal
25366>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
25367>>>>>>>>>        Function_Return retVal
25368>>>>>>>>>    End_Function
25369>>>>>>>>>
25369>>>>>>>>>    Procedure Set ComAppearance XTPBackstageButtonControlAppearanceStyle value
25371>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
25372>>>>>>>>>    End_Procedure
25373>>>>>>>>>
25373>>>>>>>>>    Function ComTextAlignment Returns OLEAlignmentStyle
25375>>>>>>>>>        OLEAlignmentStyle retVal
25375>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to retVal
25376>>>>>>>>>        Function_Return retVal
25377>>>>>>>>>    End_Function
25378>>>>>>>>>
25378>>>>>>>>>    Procedure Set ComTextAlignment OLEAlignmentStyle value
25380>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to value
25381>>>>>>>>>    End_Procedure
25382>>>>>>>>>
25382>>>>>>>>>    Function ComMultiLine Returns Boolean
25384>>>>>>>>>        Boolean retVal
25384>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
25385>>>>>>>>>        Function_Return retVal
25386>>>>>>>>>    End_Function
25387>>>>>>>>>
25387>>>>>>>>>    Procedure Set ComMultiLine Boolean value
25389>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
25390>>>>>>>>>    End_Procedure
25391>>>>>>>>>
25391>>>>>>>>>    Function ComChecked Returns Boolean
25393>>>>>>>>>        Boolean retVal
25393>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
25394>>>>>>>>>        Function_Return retVal
25395>>>>>>>>>    End_Function
25396>>>>>>>>>
25396>>>>>>>>>    Procedure Set ComChecked Boolean value
25398>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
25399>>>>>>>>>    End_Procedure
25400>>>>>>>>>
25400>>>>>>>>>    Function ComIcon Returns Variant
25402>>>>>>>>>        Variant retVal
25402>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_DISPATCH to retVal
25403>>>>>>>>>        Function_Return retVal
25404>>>>>>>>>    End_Function
25405>>>>>>>>>
25405>>>>>>>>>    Procedure Set ComIcon Variant value
25407>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_DISPATCH to value
25408>>>>>>>>>    End_Procedure
25409>>>>>>>>>
25409>>>>>>>>>    Function ComRightToLeft Returns Boolean
25411>>>>>>>>>        Boolean retVal
25411>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -611 OLE_VT_BOOL to retVal
25412>>>>>>>>>        Function_Return retVal
25413>>>>>>>>>    End_Function
25414>>>>>>>>>
25414>>>>>>>>>    Procedure Set ComRightToLeft Boolean value
25416>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -611 OLE_VT_BOOL to value
25417>>>>>>>>>    End_Procedure
25418>>>>>>>>>
25418>>>>>>>>>    Function ComImageAlignment Returns OLEAlignmentStyle
25420>>>>>>>>>        OLEAlignmentStyle retVal
25420>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_I4 to retVal
25421>>>>>>>>>        Function_Return retVal
25422>>>>>>>>>    End_Function
25423>>>>>>>>>
25423>>>>>>>>>    Procedure Set ComImageAlignment OLEAlignmentStyle value
25425>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_I4 to value
25426>>>>>>>>>    End_Procedure
25427>>>>>>>>>
25427>>>>>>>>>    Function ComTextImageRelation Returns OLETextImageRelationStyle
25429>>>>>>>>>        OLETextImageRelationStyle retVal
25429>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
25430>>>>>>>>>        Function_Return retVal
25431>>>>>>>>>    End_Function
25432>>>>>>>>>
25432>>>>>>>>>    Procedure Set ComTextImageRelation OLETextImageRelationStyle value
25434>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
25435>>>>>>>>>    End_Procedure
25436>>>>>>>>>
25436>>>>>>>>>    Function ComImageGap Returns Integer
25438>>>>>>>>>        Integer retVal
25438>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
25439>>>>>>>>>        Function_Return retVal
25440>>>>>>>>>    End_Function
25441>>>>>>>>>
25441>>>>>>>>>    Procedure Set ComImageGap Integer value
25443>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
25444>>>>>>>>>    End_Procedure
25445>>>>>>>>>
25445>>>>>>>>>    Function ComBorderGap Returns Integer
25447>>>>>>>>>        Integer retVal
25447>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
25448>>>>>>>>>        Function_Return retVal
25449>>>>>>>>>    End_Function
25450>>>>>>>>>
25450>>>>>>>>>    Procedure Set ComBorderGap Integer value
25452>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
25453>>>>>>>>>    End_Procedure
25454>>>>>>>>>
25454>>>>>>>>>    Function ComStyle Returns OLEPushButtonStyle
25456>>>>>>>>>        OLEPushButtonStyle retVal
25456>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to retVal
25457>>>>>>>>>        Function_Return retVal
25458>>>>>>>>>    End_Function
25459>>>>>>>>>
25459>>>>>>>>>    Procedure Set ComStyle OLEPushButtonStyle value
25461>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to value
25462>>>>>>>>>    End_Procedure
25463>>>>>>>>>
25463>>>>>>>>>    Function ComEnableMarkup Returns Boolean
25465>>>>>>>>>        Boolean retVal
25465>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
25466>>>>>>>>>        Function_Return retVal
25467>>>>>>>>>    End_Function
25468>>>>>>>>>
25468>>>>>>>>>    Procedure Set ComEnableMarkup Boolean value
25470>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
25471>>>>>>>>>    End_Procedure
25472>>>>>>>>>
25472>>>>>>>>>    // Returns/Sets whether this control can act as an OLE drop target.
25472>>>>>>>>>    Function ComOLEDropMode Returns OLEDropConstants
25474>>>>>>>>>        OLEDropConstants retVal
25474>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
25475>>>>>>>>>        Function_Return retVal
25476>>>>>>>>>    End_Function
25477>>>>>>>>>
25477>>>>>>>>>    // Returns/Sets whether this control can act as an OLE drop target.
25477>>>>>>>>>    Procedure Set ComOLEDropMode OLEDropConstants value
25479>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
25480>>>>>>>>>    End_Procedure
25481>>>>>>>>>
25481>>>>>>>>>    Function ComControlToolTip Returns String
25483>>>>>>>>>        String retVal
25483>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_BSTR to retVal
25484>>>>>>>>>        Function_Return retVal
25485>>>>>>>>>    End_Function
25486>>>>>>>>>
25486>>>>>>>>>    Procedure Set ComControlToolTip String value
25488>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_BSTR to value
25489>>>>>>>>>    End_Procedure
25490>>>>>>>>>
25490>>>>>>>>>    Function ComShowShadow Returns Boolean
25492>>>>>>>>>        Boolean retVal
25492>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 78 OLE_VT_BOOL to retVal
25493>>>>>>>>>        Function_Return retVal
25494>>>>>>>>>    End_Function
25495>>>>>>>>>
25495>>>>>>>>>    Procedure Set ComShowShadow Boolean value
25497>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 78 OLE_VT_BOOL to value
25498>>>>>>>>>    End_Procedure
25499>>>>>>>>>
25499>>>>>>>>>    Function ComTabStyle Returns Boolean
25501>>>>>>>>>        Boolean retVal
25501>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 79 OLE_VT_BOOL to retVal
25502>>>>>>>>>        Function_Return retVal
25503>>>>>>>>>    End_Function
25504>>>>>>>>>
25504>>>>>>>>>    Procedure Set ComTabStyle Boolean value
25506>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 79 OLE_VT_BOOL to value
25507>>>>>>>>>    End_Procedure
25508>>>>>>>>>
25508>>>>>>>>>    Function ComReCreateReparented Returns Boolean
25510>>>>>>>>>        Boolean retVal
25510>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
25511>>>>>>>>>        Function_Return retVal
25512>>>>>>>>>    End_Function
25513>>>>>>>>>
25513>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
25515>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
25516>>>>>>>>>    End_Procedure
25517>>>>>>>>>
25517>>>>>>>>>    Function ComMarkupContext Returns Variant
25519>>>>>>>>>        Handle hDispatchDriver
25519>>>>>>>>>        Variant retVal
25519>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25520>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_DISPATCH to retVal
25521>>>>>>>>>        Function_Return retVal
25522>>>>>>>>>    End_Function
25523>>>>>>>>>
25523>>>>>>>>>    Procedure ComAboutBox
25525>>>>>>>>>        Handle hDispatchDriver
25525>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25526>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
25527>>>>>>>>>    End_Procedure
25528>>>>>>>>>
25528>>>>>>>>>    Function ComToolTipContext Returns Variant
25530>>>>>>>>>        Handle hDispatchDriver
25530>>>>>>>>>        Variant retVal
25530>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25531>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 71 OLE_VT_DISPATCH to retVal
25532>>>>>>>>>        Function_Return retVal
25533>>>>>>>>>    End_Function
25534>>>>>>>>>
25534>>>>>>>>>    Procedure ComVectorImageHeight Integer llHeight
25536>>>>>>>>>        Handle hDispatchDriver
25536>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25537>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25538>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llHeight
25539>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 72 OLE_VT_VOID
25540>>>>>>>>>    End_Procedure
25541>>>>>>>>>
25541>>>>>>>>>    Procedure ComVectorImageWidth Integer llWidth
25543>>>>>>>>>        Handle hDispatchDriver
25543>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25544>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25545>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
25546>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 73 OLE_VT_VOID
25547>>>>>>>>>    End_Procedure
25548>>>>>>>>>End_Class
25549>>>>>>>>>
25549>>>>>>>>>// CLSID: {C0DE2000-8784-4B18-976D-F889C1F8B1E9}
25549>>>>>>>>>// Event interface for PushButton Control
25549>>>>>>>>>Class cCJ_DBackstageButtonEvents is a Mixin
25550>>>>>>>>>
25550>>>>>>>>>    Procedure OnComClick
25552>>>>>>>>>    End_Procedure
25553>>>>>>>>>
25553>>>>>>>>>    Procedure OnComMouseDown Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly
25555>>>>>>>>>    End_Procedure
25556>>>>>>>>>
25556>>>>>>>>>    Procedure OnComMouseMove Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly
25558>>>>>>>>>    End_Procedure
25559>>>>>>>>>
25559>>>>>>>>>    Procedure OnComMouseUp Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly
25561>>>>>>>>>    End_Procedure
25562>>>>>>>>>
25562>>>>>>>>>    Procedure OnComKeyDown Short ByRef llKeyCode Short llShift
25564>>>>>>>>>    End_Procedure
25565>>>>>>>>>
25565>>>>>>>>>    Procedure OnComKeyPress Short ByRef llKeyAscii
25567>>>>>>>>>    End_Procedure
25568>>>>>>>>>
25568>>>>>>>>>    Procedure OnComKeyUp Short ByRef llKeyCode Short llShift
25570>>>>>>>>>    End_Procedure
25571>>>>>>>>>
25571>>>>>>>>>    Procedure OnComDropDown
25573>>>>>>>>>    End_Procedure
25574>>>>>>>>>
25574>>>>>>>>>    Procedure OnComOLEDragOver Variant llData Integer ByRef llEffect Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly Short llstate
25576>>>>>>>>>    End_Procedure
25577>>>>>>>>>
25577>>>>>>>>>    Procedure OnComOLEDragDrop Variant llData Integer ByRef llEffect Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly
25579>>>>>>>>>    End_Procedure
25580>>>>>>>>>
25580>>>>>>>>>    Procedure OnComReCreated
25582>>>>>>>>>    End_Procedure
25583>>>>>>>>>
25583>>>>>>>>>    Procedure RegisterComEvents
25585>>>>>>>>>        Send RegisterComEvent -600 msg_OnComClick
25586>>>>>>>>>        Send RegisterComEvent -605 msg_OnComMouseDown
25587>>>>>>>>>        Send RegisterComEvent -606 msg_OnComMouseMove
25588>>>>>>>>>        Send RegisterComEvent -607 msg_OnComMouseUp
25589>>>>>>>>>        Send RegisterComEvent -602 msg_OnComKeyDown
25590>>>>>>>>>        Send RegisterComEvent -603 msg_OnComKeyPress
25591>>>>>>>>>        Send RegisterComEvent -604 msg_OnComKeyUp
25592>>>>>>>>>        Send RegisterComEvent 1 msg_OnComDropDown
25593>>>>>>>>>        Send RegisterComEvent 300 msg_OnComOLEDragOver
25594>>>>>>>>>        Send RegisterComEvent 301 msg_OnComOLEDragDrop
25595>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25596>>>>>>>>>    End_Procedure
25597>>>>>>>>>End_Class
25598>>>>>>>>>
25598>>>>>>>>>// CoClass
25598>>>>>>>>>// ProgID: Codejock.BackstageButton.20.0.0
25598>>>>>>>>>// CLSID: {C0DE2000-ADD1-404B-9432-25BECBA0755F}
25598>>>>>>>>>// PushButton Control
25598>>>>>>>>>Class cCJBackstageButton is a cComActiveXControl
25599>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageButton
25600>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageButtonEvents
25601>>>>>>>>>
25601>>>>>>>>>    Procedure Construct_Object
25603>>>>>>>>>        Forward Send Construct_Object
25605>>>>>>>>>        Set psProgID to "{C0DE2000-ADD1-404B-9432-25BECBA0755F}"
25606>>>>>>>>>        Set psEventId to "{C0DE2000-8784-4B18-976D-F889C1F8B1E9}"
25607>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2021 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v20.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
25608>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25609>>>>>>>>>    End_Procedure
25610>>>>>>>>>End_Class
25611>>>>>>>>>
25611>>>>>>>>>// CLSID: {C0DE2000-B473-4662-B8AD-C5F3FB64C028}
25611>>>>>>>>>// Dispatch interface for BackstageButtonPropPage
25611>>>>>>>>>Class cCJ_DBackstageButtonPropPage is a Mixin
25612>>>>>>>>>End_Class
25613>>>>>>>>>
25613>>>>>>>>>// CoClass
25613>>>>>>>>>// CLSID: {C0DE2000-3CE1-4C9B-B764-D85C63DBEC21}
25613>>>>>>>>>// Backstage button property page
25613>>>>>>>>>Class cCJBackstageButtonPropPage is a cComAutomationObject
25614>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageButtonPropPage
25615>>>>>>>>>
25615>>>>>>>>>    Procedure Construct_Object
25617>>>>>>>>>        Forward Send Construct_Object
25619>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
25620>>>>>>>>>    End_Procedure
25621>>>>>>>>>End_Class
25622>>>>>>>>>
25622>>>>>>>>>// CLSID: {C0DE2000-E970-416D-838B-AFF30EDC1D51}
25622>>>>>>>>>// Dispatch interface for BackstageSeparator Control
25622>>>>>>>>>Class cCJ_DBackstageSeparator is a Mixin
25623>>>>>>>>>
25623>>>>>>>>>    Function ComVertical Returns Boolean
25625>>>>>>>>>        Boolean retVal
25625>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
25626>>>>>>>>>        Function_Return retVal
25627>>>>>>>>>    End_Function
25628>>>>>>>>>
25628>>>>>>>>>    Procedure Set ComVertical Boolean value
25630>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
25631>>>>>>>>>    End_Procedure
25632>>>>>>>>>
25632>>>>>>>>>    Function ComAppearance Returns XTPBackstageSeparatorControlAppearanceStyle
25634>>>>>>>>>        XTPBackstageSeparatorControlAppearanceStyle retVal
25634>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
25635>>>>>>>>>        Function_Return retVal
25636>>>>>>>>>    End_Function
25637>>>>>>>>>
25637>>>>>>>>>    Procedure Set ComAppearance XTPBackstageSeparatorControlAppearanceStyle value
25639>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
25640>>>>>>>>>    End_Procedure
25641>>>>>>>>>
25641>>>>>>>>>    Function ComMarkupText Returns String
25643>>>>>>>>>        String retVal
25643>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -518 OLE_VT_BSTR to retVal
25644>>>>>>>>>        Function_Return retVal
25645>>>>>>>>>    End_Function
25646>>>>>>>>>
25646>>>>>>>>>    Procedure Set ComMarkupText String value
25648>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -518 OLE_VT_BSTR to value
25649>>>>>>>>>    End_Procedure
25650>>>>>>>>>
25650>>>>>>>>>    Function ComReCreateReparented Returns Boolean
25652>>>>>>>>>        Boolean retVal
25652>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
25653>>>>>>>>>        Function_Return retVal
25654>>>>>>>>>    End_Function
25655>>>>>>>>>
25655>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
25657>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
25658>>>>>>>>>    End_Procedure
25659>>>>>>>>>
25659>>>>>>>>>    Procedure ComAboutBox
25661>>>>>>>>>        Handle hDispatchDriver
25661>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25662>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
25663>>>>>>>>>    End_Procedure
25664>>>>>>>>>End_Class
25665>>>>>>>>>
25665>>>>>>>>>// CLSID: {C0DE2000-A9B6-458C-8DBE-71B544CD06B4}
25665>>>>>>>>>// Event interface for BackstageSeparator Control
25665>>>>>>>>>Class cCJ_DBackstageSeparatorEvents is a Mixin
25666>>>>>>>>>
25666>>>>>>>>>    Procedure OnComReCreated
25668>>>>>>>>>    End_Procedure
25669>>>>>>>>>
25669>>>>>>>>>    Procedure RegisterComEvents
25671>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25672>>>>>>>>>    End_Procedure
25673>>>>>>>>>End_Class
25674>>>>>>>>>
25674>>>>>>>>>// CoClass
25674>>>>>>>>>// ProgID: Codejock.BackstageSeparator.20.0.0
25674>>>>>>>>>// CLSID: {C0DE2000-C3CB-4192-B015-BFF56164ED07}
25674>>>>>>>>>// BackstageSeparator Control
25674>>>>>>>>>Class cCJBackstageSeparator is a cComActiveXControl
25675>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageSeparator
25676>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageSeparatorEvents
25677>>>>>>>>>
25677>>>>>>>>>    Procedure Construct_Object
25679>>>>>>>>>        Forward Send Construct_Object
25681>>>>>>>>>        Set psProgID to "{C0DE2000-C3CB-4192-B015-BFF56164ED07}"
25682>>>>>>>>>        Set psEventId to "{C0DE2000-A9B6-458C-8DBE-71B544CD06B4}"
25683>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2021 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v20.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
25684>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25685>>>>>>>>>    End_Procedure
25686>>>>>>>>>End_Class
25687>>>>>>>>>
25687>>>>>>>>>// CLSID: {C0DE2000-0694-4EE0-870A-558EE7DE4BF3}
25687>>>>>>>>>// Dispatch interface for BackstageListBox Control
25687>>>>>>>>>Class cCJ_DBackstageListBox is a Mixin
25688>>>>>>>>>
25688>>>>>>>>>    // Set True to allow using standard icons from shell. By default False.
25688>>>>>>>>>    Function ComUseShellIcons Returns Boolean
25690>>>>>>>>>        Boolean retVal
25690>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
25691>>>>>>>>>        Function_Return retVal
25692>>>>>>>>>    End_Function
25693>>>>>>>>>
25693>>>>>>>>>    // Set True to allow using standard icons from shell. By default False.
25693>>>>>>>>>    Procedure Set ComUseShellIcons Boolean value
25695>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
25696>>>>>>>>>    End_Procedure
25697>>>>>>>>>
25697>>>>>>>>>    Function ComVisualTheme Returns XTPVisualTheme
25699>>>>>>>>>        XTPVisualTheme retVal
25699>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
25700>>>>>>>>>        Function_Return retVal
25701>>>>>>>>>    End_Function
25702>>>>>>>>>
25702>>>>>>>>>    Procedure Set ComVisualTheme XTPVisualTheme value
25704>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
25705>>>>>>>>>    End_Procedure
25706>>>>>>>>>
25706>>>>>>>>>    Function ComShowScrollBarAlways Returns Boolean
25708>>>>>>>>>        Boolean retVal
25708>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
25709>>>>>>>>>        Function_Return retVal
25710>>>>>>>>>    End_Function
25711>>>>>>>>>
25711>>>>>>>>>    Procedure Set ComShowScrollBarAlways Boolean value
25713>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
25714>>>>>>>>>    End_Procedure
25715>>>>>>>>>
25715>>>>>>>>>    Function ComReCreateReparented Returns Boolean
25717>>>>>>>>>        Boolean retVal
25717>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
25718>>>>>>>>>        Function_Return retVal
25719>>>>>>>>>    End_Function
25720>>>>>>>>>
25720>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
25722>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
25723>>>>>>>>>    End_Procedure
25724>>>>>>>>>
25724>>>>>>>>>    Function ComItems Returns Variant
25726>>>>>>>>>        Handle hDispatchDriver
25726>>>>>>>>>        Variant retVal
25726>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25727>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
25728>>>>>>>>>        Function_Return retVal
25729>>>>>>>>>    End_Function
25730>>>>>>>>>
25730>>>>>>>>>    Function ComGallery Returns Variant
25732>>>>>>>>>        Handle hDispatchDriver
25732>>>>>>>>>        Variant retVal
25732>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25733>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
25734>>>>>>>>>        Function_Return retVal
25735>>>>>>>>>    End_Function
25736>>>>>>>>>
25736>>>>>>>>>    Function ComIcons Returns Variant
25738>>>>>>>>>        Handle hDispatchDriver
25738>>>>>>>>>        Variant retVal
25738>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25739>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_DISPATCH to retVal
25740>>>>>>>>>        Function_Return retVal
25741>>>>>>>>>    End_Function
25742>>>>>>>>>
25742>>>>>>>>>    Function ComToolTipContext Returns Variant
25744>>>>>>>>>        Handle hDispatchDriver
25744>>>>>>>>>        Variant retVal
25744>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25745>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
25746>>>>>>>>>        Function_Return retVal
25747>>>>>>>>>    End_Function
25748>>>>>>>>>
25748>>>>>>>>>    Procedure ComCreateRecentFileListItems Variant llRecentFileList
25750>>>>>>>>>        Handle hDispatchDriver
25750>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25751>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25752>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llRecentFileList
25753>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
25754>>>>>>>>>    End_Procedure
25755>>>>>>>>>
25755>>>>>>>>>    Function ComPaintManager Returns Variant
25757>>>>>>>>>        Handle hDispatchDriver
25757>>>>>>>>>        Variant retVal
25757>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25758>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
25759>>>>>>>>>        Function_Return retVal
25760>>>>>>>>>    End_Function
25761>>>>>>>>>
25761>>>>>>>>>    Function ComHitTest OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly Returns Variant
25763>>>>>>>>>        Handle hDispatchDriver
25763>>>>>>>>>        Variant retVal
25763>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25764>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
25765>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
25766>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
25767>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 17 OLE_VT_DISPATCH to retVal
25768>>>>>>>>>        Function_Return retVal
25769>>>>>>>>>    End_Function
25770>>>>>>>>>
25770>>>>>>>>>    Procedure ComAboutBox
25772>>>>>>>>>        Handle hDispatchDriver
25772>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25773>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
25774>>>>>>>>>    End_Procedure
25775>>>>>>>>>End_Class
25776>>>>>>>>>
25776>>>>>>>>>// CLSID: {C0DE2000-B56F-4C5C-A7C1-BFD597BE6386}
25776>>>>>>>>>// Event interface for BackstageListBox Control
25776>>>>>>>>>Class cCJ_DBackstageListBoxEvents is a Mixin
25777>>>>>>>>>
25777>>>>>>>>>    Procedure OnComItemClick Variant llItem
25779>>>>>>>>>    End_Procedure
25780>>>>>>>>>
25780>>>>>>>>>    Procedure OnComMouseDown Short llButton Short llShift Integer llx Integer lly
25782>>>>>>>>>    End_Procedure
25783>>>>>>>>>
25783>>>>>>>>>    Procedure OnComMouseUp Short llButton Short llShift Integer llx Integer lly
25785>>>>>>>>>    End_Procedure
25786>>>>>>>>>
25786>>>>>>>>>    Procedure OnComReCreated
25788>>>>>>>>>    End_Procedure
25789>>>>>>>>>
25789>>>>>>>>>    Procedure RegisterComEvents
25791>>>>>>>>>        Send RegisterComEvent 1 msg_OnComItemClick
25792>>>>>>>>>        Send RegisterComEvent -605 msg_OnComMouseDown
25793>>>>>>>>>        Send RegisterComEvent -607 msg_OnComMouseUp
25794>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25795>>>>>>>>>    End_Procedure
25796>>>>>>>>>End_Class
25797>>>>>>>>>
25797>>>>>>>>>// CoClass
25797>>>>>>>>>// ProgID: Codejock.BackstageListBox.20.0.0
25797>>>>>>>>>// CLSID: {C0DE2000-52D8-4364-BFDC-C828980023B0}
25797>>>>>>>>>// BackstageListBox Control
25797>>>>>>>>>Class cCJBackstageListBox is a cComActiveXControl
25798>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageListBox
25799>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageListBoxEvents
25800>>>>>>>>>
25800>>>>>>>>>    Procedure Construct_Object
25802>>>>>>>>>        Forward Send Construct_Object
25804>>>>>>>>>        Set psProgID to "{C0DE2000-52D8-4364-BFDC-C828980023B0}"
25805>>>>>>>>>        Set psEventId to "{C0DE2000-B56F-4C5C-A7C1-BFD597BE6386}"
25806>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2021 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v20.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
25807>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25808>>>>>>>>>    End_Procedure
25809>>>>>>>>>End_Class
25810>>>>>>>>>
25810>>>>>>>>>// CLSID: {C0DE2000-FEBF-4C62-BD49-AC6556035154}
25810>>>>>>>>>// Global Global Settings
25810>>>>>>>>>Class cCJICommandBarsGlobalSettings is a Mixin
25811>>>>>>>>>
25811>>>>>>>>>    Function ComResourceFile Returns String
25813>>>>>>>>>        String retVal
25813>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BSTR to retVal
25814>>>>>>>>>        Function_Return retVal
25815>>>>>>>>>    End_Function
25816>>>>>>>>>
25816>>>>>>>>>    Procedure Set ComResourceFile String value
25818>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BSTR to value
25819>>>>>>>>>    End_Procedure
25820>>>>>>>>>
25820>>>>>>>>>    Function ComLicense Returns String
25822>>>>>>>>>        String retVal
25822>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to retVal
25823>>>>>>>>>        Function_Return retVal
25824>>>>>>>>>    End_Function
25825>>>>>>>>>
25825>>>>>>>>>    Procedure Set ComLicense String value
25827>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to value
25828>>>>>>>>>    End_Procedure
25829>>>>>>>>>
25829>>>>>>>>>    Function ComTitle Returns String
25831>>>>>>>>>        String retVal
25831>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to retVal
25832>>>>>>>>>        Function_Return retVal
25833>>>>>>>>>    End_Function
25834>>>>>>>>>
25834>>>>>>>>>    Procedure Set ComTitle String value
25836>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to value
25837>>>>>>>>>    End_Procedure
25838>>>>>>>>>
25838>>>>>>>>>    Function ComReCreateReparentedControls Returns Boolean
25840>>>>>>>>>        Boolean retVal
25840>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 109 OLE_VT_BOOL to retVal
25841>>>>>>>>>        Function_Return retVal
25842>>>>>>>>>    End_Function
25843>>>>>>>>>
25843>>>>>>>>>    Procedure Set ComReCreateReparentedControls Boolean value
25845>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 109 OLE_VT_BOOL to value
25846>>>>>>>>>    End_Procedure
25847>>>>>>>>>
25847>>>>>>>>>    Function ComApp Returns Variant
25849>>>>>>>>>        Variant retVal
25849>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_DISPATCH to retVal
25850>>>>>>>>>        Function_Return retVal
25851>>>>>>>>>    End_Function
25852>>>>>>>>>
25852>>>>>>>>>    Procedure Set ComApp Variant value
25854>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_DISPATCH to value
25855>>>>>>>>>    End_Procedure
25856>>>>>>>>>
25856>>>>>>>>>    Function ComCompanyName Returns String
25858>>>>>>>>>        String retVal
25858>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
25859>>>>>>>>>        Function_Return retVal
25860>>>>>>>>>    End_Function
25861>>>>>>>>>
25861>>>>>>>>>    Procedure Set ComCompanyName String value
25863>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
25864>>>>>>>>>    End_Procedure
25865>>>>>>>>>
25865>>>>>>>>>    Function ComColorManager Returns Variant
25867>>>>>>>>>        Handle hDispatchDriver
25867>>>>>>>>>        Variant retVal
25867>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25868>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_DISPATCH to retVal
25869>>>>>>>>>        Function_Return retVal
25870>>>>>>>>>    End_Function
25871>>>>>>>>>
25871>>>>>>>>>    Function ComFrameShadowManager Returns Variant
25873>>>>>>>>>        Handle hDispatchDriver
25873>>>>>>>>>        Variant retVal
25873>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25874>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10003000 OLE_VT_DISPATCH to retVal
25875>>>>>>>>>        Function_Return retVal
25876>>>>>>>>>    End_Function
25877>>>>>>>>>
25877>>>>>>>>>    Function ComVersion Returns String
25879>>>>>>>>>        Handle hDispatchDriver
25879>>>>>>>>>        String retVal
25879>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25880>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_BSTR to retVal
25881>>>>>>>>>        Function_Return retVal
25882>>>>>>>>>    End_Function
25883>>>>>>>>>
25883>>>>>>>>>    Function ComUnicode Returns Boolean
25885>>>>>>>>>        Handle hDispatchDriver
25885>>>>>>>>>        Boolean retVal
25885>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25886>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_BOOL to retVal
25887>>>>>>>>>        Function_Return retVal
25888>>>>>>>>>    End_Function
25889>>>>>>>>>
25889>>>>>>>>>    Function ComOcxPath Returns String
25891>>>>>>>>>        Handle hDispatchDriver
25891>>>>>>>>>        String retVal
25891>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25892>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_BSTR to retVal
25893>>>>>>>>>        Function_Return retVal
25894>>>>>>>>>    End_Function
25895>>>>>>>>>
25895>>>>>>>>>    Function ComGetAmbientProperty XTPApplicationAmbientProperty llproperty Returns Variant
25897>>>>>>>>>        Handle hDispatchDriver
25897>>>>>>>>>        Variant retVal
25897>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25898>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25899>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llproperty
25900>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_VARIANT to retVal
25901>>>>>>>>>        Function_Return retVal
25902>>>>>>>>>    End_Function
25903>>>>>>>>>
25903>>>>>>>>>    Procedure ComSetAmbientProperty XTPApplicationAmbientProperty llproperty Variant llValue
25905>>>>>>>>>        Handle hDispatchDriver
25905>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25906>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
25907>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llproperty
25908>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llValue
25909>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 112 OLE_VT_VOID
25910>>>>>>>>>    End_Procedure
25911>>>>>>>>>
25911>>>>>>>>>    Function ComCreatePropExchange Returns Variant
25913>>>>>>>>>        Handle hDispatchDriver
25913>>>>>>>>>        Variant retVal
25913>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25914>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 107 OLE_VT_DISPATCH to retVal
25915>>>>>>>>>        Function_Return retVal
25916>>>>>>>>>    End_Function
25917>>>>>>>>>
25917>>>>>>>>>    Function ComIcons Returns Variant
25919>>>>>>>>>        Handle hDispatchDriver
25919>>>>>>>>>        Variant retVal
25919>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25920>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_DISPATCH to retVal
25921>>>>>>>>>        Function_Return retVal
25922>>>>>>>>>    End_Function
25923>>>>>>>>>
25923>>>>>>>>>    Function ComResourceImages Returns Variant
25925>>>>>>>>>        Handle hDispatchDriver
25925>>>>>>>>>        Variant retVal
25925>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25926>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_DISPATCH to retVal
25927>>>>>>>>>        Function_Return retVal
25928>>>>>>>>>    End_Function
25929>>>>>>>>>End_Class
25930>>>>>>>>>
25930>>>>>>>>>// CoClass
25930>>>>>>>>>// ProgID: Codejock.CommandBarsGlobalSettings.20.0.0
25930>>>>>>>>>// CLSID: {C0DE2000-D18F-4F58-8647-38F1AD3314C3}
25930>>>>>>>>>// Command Bars Settings
25930>>>>>>>>>Class cCJCommandBarsGlobalSettings is a cComAutomationObject
25931>>>>>>>>>    Import_Class_Protocol cCJICommandBarsGlobalSettings
25932>>>>>>>>>
25932>>>>>>>>>    Procedure Construct_Object
25934>>>>>>>>>        Forward Send Construct_Object
25936>>>>>>>>>        Set psProgID to "{C0DE2000-D18F-4F58-8647-38F1AD3314C3}"
25937>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
25938>>>>>>>>>    End_Procedure
25939>>>>>>>>>End_Class
25940>>>>>>>>>
25940>>>>>>>>>// CLSID: {C0DE2000-F9CE-44F1-8991-0F6B7C19336B}
25940>>>>>>>>>Class cCJIResourceImageList is a cComAutomationObject
25941>>>>>>>>>
25941>>>>>>>>>    Function ComAddBitmap OLE_HANDLE llHandle Integer llnID Returns Boolean
25943>>>>>>>>>        Handle hDispatchDriver
25943>>>>>>>>>        Boolean retVal
25943>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25944>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
25945>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llHandle
25946>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnID
25947>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BOOL to retVal
25948>>>>>>>>>        Function_Return retVal
25949>>>>>>>>>    End_Function
25950>>>>>>>>>
25950>>>>>>>>>    Function ComLoadBitmap String llPath Integer llnID Returns Boolean
25952>>>>>>>>>        Handle hDispatchDriver
25952>>>>>>>>>        Boolean retVal
25952>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25953>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
25954>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
25955>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnID
25956>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
25957>>>>>>>>>        Function_Return retVal
25958>>>>>>>>>    End_Function
25959>>>>>>>>>
25959>>>>>>>>>    Function ComRemove Integer llnID Returns Boolean
25961>>>>>>>>>        Handle hDispatchDriver
25961>>>>>>>>>        Boolean retVal
25961>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25962>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25963>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnID
25964>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BOOL to retVal
25965>>>>>>>>>        Function_Return retVal
25966>>>>>>>>>    End_Function
25967>>>>>>>>>
25967>>>>>>>>>    Procedure ComRemoveAll
25969>>>>>>>>>        Handle hDispatchDriver
25969>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25970>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
25971>>>>>>>>>    End_Procedure
25972>>>>>>>>>End_Class
25973>>>>>>>>>
25973>>>>>>>>>// CLSID: {C0DE2000-ED8F-4CE1-9E36-403876BEE557}
25973>>>>>>>>>Class cCJXtremePrinterInfo is a cComAutomationObject
25974>>>>>>>>>
25974>>>>>>>>>    Function ComDeviceName Returns String
25976>>>>>>>>>        Handle hDispatchDriver
25976>>>>>>>>>        String retVal
25976>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25977>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BSTR to retVal
25978>>>>>>>>>        Function_Return retVal
25979>>>>>>>>>    End_Function
25980>>>>>>>>>
25980>>>>>>>>>    Function ComDriverName Returns String
25982>>>>>>>>>        Handle hDispatchDriver
25982>>>>>>>>>        String retVal
25982>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25983>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BSTR to retVal
25984>>>>>>>>>        Function_Return retVal
25985>>>>>>>>>    End_Function
25986>>>>>>>>>
25986>>>>>>>>>    Function ComPortName Returns String
25988>>>>>>>>>        Handle hDispatchDriver
25988>>>>>>>>>        String retVal
25988>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25989>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BSTR to retVal
25990>>>>>>>>>        Function_Return retVal
25991>>>>>>>>>    End_Function
25992>>>>>>>>>End_Class
25993>>>>>>>>>
25993>>>>>>>>>// CLSID: {C0DE2000-8BC5-4677-9999-0A29B44F3B23}
25993>>>>>>>>>Class cCJXtremePrintPreviewOptions is a cComAutomationObject
25994>>>>>>>>>
25994>>>>>>>>>    Function ComTitle Returns String
25996>>>>>>>>>        String retVal
25996>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
25997>>>>>>>>>        Function_Return retVal
25998>>>>>>>>>    End_Function
25999>>>>>>>>>
25999>>>>>>>>>    Procedure Set ComTitle String value
26001>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
26002>>>>>>>>>    End_Procedure
26003>>>>>>>>>End_Class
26004>>>>>>>>>
26004>>>>>>>>>// CLSID: {C0DE2000-E75C-4A50-A908-F36D35F098D2}
26004>>>>>>>>>Class cCJPrintPageHeaderFooter is a cComAutomationObject
26005>>>>>>>>>
26005>>>>>>>>>    Function ComFont Returns Variant
26007>>>>>>>>>        Variant retVal
26007>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
26008>>>>>>>>>        Function_Return retVal
26009>>>>>>>>>    End_Function
26010>>>>>>>>>
26010>>>>>>>>>    Procedure Set ComFont Variant value
26012>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
26013>>>>>>>>>    End_Procedure
26014>>>>>>>>>
26014>>>>>>>>>    Function ComFormatString Returns String
26016>>>>>>>>>        String retVal
26016>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
26017>>>>>>>>>        Function_Return retVal
26018>>>>>>>>>    End_Function
26019>>>>>>>>>
26019>>>>>>>>>    Procedure Set ComFormatString String value
26021>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
26022>>>>>>>>>    End_Procedure
26023>>>>>>>>>
26023>>>>>>>>>    Function ComTextLeft Returns String
26025>>>>>>>>>        String retVal
26025>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
26026>>>>>>>>>        Function_Return retVal
26027>>>>>>>>>    End_Function
26028>>>>>>>>>
26028>>>>>>>>>    Procedure Set ComTextLeft String value
26030>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
26031>>>>>>>>>    End_Procedure
26032>>>>>>>>>
26032>>>>>>>>>    Function ComTextCenter Returns String
26034>>>>>>>>>        String retVal
26034>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
26035>>>>>>>>>        Function_Return retVal
26036>>>>>>>>>    End_Function
26037>>>>>>>>>
26037>>>>>>>>>    Procedure Set ComTextCenter String value
26039>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
26040>>>>>>>>>    End_Procedure
26041>>>>>>>>>
26041>>>>>>>>>    Function ComTextRight Returns String
26043>>>>>>>>>        String retVal
26043>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
26044>>>>>>>>>        Function_Return retVal
26045>>>>>>>>>    End_Function
26046>>>>>>>>>
26046>>>>>>>>>    Procedure Set ComTextRight String value
26048>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
26049>>>>>>>>>    End_Procedure
26050>>>>>>>>>
26050>>>>>>>>>    Procedure ComClear
26052>>>>>>>>>        Handle hDispatchDriver
26052>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26053>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 50 OLE_VT_VOID
26054>>>>>>>>>    End_Procedure
26055>>>>>>>>>End_Class
26056>>>>>>>>>
26056>>>>>>>>>// CLSID: {C0DE2000-0E2C-47FC-BFB7-46E70C561AA8}
26056>>>>>>>>>Class cCJPrintInfo is a cComAutomationObject
26057>>>>>>>>>
26057>>>>>>>>>    Function ComContinuePrinting Returns Boolean
26059>>>>>>>>>        Boolean retVal
26059>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
26060>>>>>>>>>        Function_Return retVal
26061>>>>>>>>>    End_Function
26062>>>>>>>>>
26062>>>>>>>>>    Procedure Set ComContinuePrinting Boolean value
26064>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
26065>>>>>>>>>    End_Procedure
26066>>>>>>>>>
26066>>>>>>>>>    Function ComMaxPage Returns Integer
26068>>>>>>>>>        Integer retVal
26068>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26069>>>>>>>>>        Function_Return retVal
26070>>>>>>>>>    End_Function
26071>>>>>>>>>
26071>>>>>>>>>    Procedure Set ComMaxPage Integer value
26073>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26074>>>>>>>>>    End_Procedure
26075>>>>>>>>>
26075>>>>>>>>>    Function ComPreviewMode Returns Boolean
26077>>>>>>>>>        Handle hDispatchDriver
26077>>>>>>>>>        Boolean retVal
26077>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26078>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BOOL to retVal
26079>>>>>>>>>        Function_Return retVal
26080>>>>>>>>>    End_Function
26081>>>>>>>>>
26081>>>>>>>>>    Function ComCurrentPage Returns Integer
26083>>>>>>>>>        Handle hDispatchDriver
26083>>>>>>>>>        Integer retVal
26083>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26084>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26085>>>>>>>>>        Function_Return retVal
26086>>>>>>>>>    End_Function
26087>>>>>>>>>
26087>>>>>>>>>    Function ComPrintRectLeft Returns Integer
26089>>>>>>>>>        Handle hDispatchDriver
26089>>>>>>>>>        Integer retVal
26089>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26090>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26091>>>>>>>>>        Function_Return retVal
26092>>>>>>>>>    End_Function
26093>>>>>>>>>
26093>>>>>>>>>    Function ComPrintRectTop Returns Integer
26095>>>>>>>>>        Handle hDispatchDriver
26095>>>>>>>>>        Integer retVal
26095>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26096>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_I4 to retVal
26097>>>>>>>>>        Function_Return retVal
26098>>>>>>>>>    End_Function
26099>>>>>>>>>
26099>>>>>>>>>    Function ComPrintRectRight Returns Integer
26101>>>>>>>>>        Handle hDispatchDriver
26101>>>>>>>>>        Integer retVal
26101>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26102>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
26103>>>>>>>>>        Function_Return retVal
26104>>>>>>>>>    End_Function
26105>>>>>>>>>
26105>>>>>>>>>    Function ComPrintRectBottom Returns Integer
26107>>>>>>>>>        Handle hDispatchDriver
26107>>>>>>>>>        Integer retVal
26107>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26108>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_I4 to retVal
26109>>>>>>>>>        Function_Return retVal
26110>>>>>>>>>    End_Function
26111>>>>>>>>>End_Class
26112>>>>>>>>>
26112>>>>>>>>>// CLSID: {C0DE2000-A5D8-4569-8690-592295C5583A}
26112>>>>>>>>>Class cCJComStatusBarPane is a cComAutomationObject
26113>>>>>>>>>
26113>>>>>>>>>    Function ComWidth Returns Integer
26115>>>>>>>>>        Integer retVal
26115>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26116>>>>>>>>>        Function_Return retVal
26117>>>>>>>>>    End_Function
26118>>>>>>>>>
26118>>>>>>>>>    Procedure Set ComWidth Integer value
26120>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26121>>>>>>>>>    End_Procedure
26122>>>>>>>>>
26122>>>>>>>>>    Function ComStyle Returns XTPStatusPaneStyle
26124>>>>>>>>>        XTPStatusPaneStyle retVal
26124>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
26125>>>>>>>>>        Function_Return retVal
26126>>>>>>>>>    End_Function
26127>>>>>>>>>
26127>>>>>>>>>    Procedure Set ComStyle XTPStatusPaneStyle value
26129>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
26130>>>>>>>>>    End_Procedure
26131>>>>>>>>>
26131>>>>>>>>>    Function ComVisible Returns Boolean
26133>>>>>>>>>        Boolean retVal
26133>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
26134>>>>>>>>>        Function_Return retVal
26135>>>>>>>>>    End_Function
26136>>>>>>>>>
26136>>>>>>>>>    Procedure Set ComVisible Boolean value
26138>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
26139>>>>>>>>>    End_Procedure
26140>>>>>>>>>
26140>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
26142>>>>>>>>>        OLE_HANDLE retVal
26142>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
26143>>>>>>>>>        Function_Return retVal
26144>>>>>>>>>    End_Function
26145>>>>>>>>>
26145>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
26147>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
26148>>>>>>>>>    End_Procedure
26149>>>>>>>>>
26149>>>>>>>>>    Function ComToolTip Returns String
26151>>>>>>>>>        String retVal
26151>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
26152>>>>>>>>>        Function_Return retVal
26153>>>>>>>>>    End_Function
26154>>>>>>>>>
26154>>>>>>>>>    Procedure Set ComToolTip String value
26156>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
26157>>>>>>>>>    End_Procedure
26158>>>>>>>>>
26158>>>>>>>>>    Function ComBeginGroup Returns Boolean
26160>>>>>>>>>        Boolean retVal
26160>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
26161>>>>>>>>>        Function_Return retVal
26162>>>>>>>>>    End_Function
26163>>>>>>>>>
26163>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
26165>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
26166>>>>>>>>>    End_Procedure
26167>>>>>>>>>
26167>>>>>>>>>    Function ComCaption Returns String
26169>>>>>>>>>        String retVal
26169>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to retVal
26170>>>>>>>>>        Function_Return retVal
26171>>>>>>>>>    End_Function
26172>>>>>>>>>
26172>>>>>>>>>    Procedure Set ComCaption String value
26174>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to value
26175>>>>>>>>>    End_Procedure
26176>>>>>>>>>
26176>>>>>>>>>    Function ComEnabled Returns Boolean
26178>>>>>>>>>        Boolean retVal
26178>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
26179>>>>>>>>>        Function_Return retVal
26180>>>>>>>>>    End_Function
26181>>>>>>>>>
26181>>>>>>>>>    Procedure Set ComEnabled Boolean value
26183>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
26184>>>>>>>>>    End_Procedure
26185>>>>>>>>>
26185>>>>>>>>>    Function ComCustomizable Returns Boolean
26187>>>>>>>>>        Boolean retVal
26187>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
26188>>>>>>>>>        Function_Return retVal
26189>>>>>>>>>    End_Function
26190>>>>>>>>>
26190>>>>>>>>>    Procedure Set ComCustomizable Boolean value
26192>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
26193>>>>>>>>>    End_Procedure
26194>>>>>>>>>
26194>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
26196>>>>>>>>>        XTPControlHideFlags retVal
26196>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
26197>>>>>>>>>        Function_Return retVal
26198>>>>>>>>>    End_Function
26199>>>>>>>>>
26199>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
26201>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
26202>>>>>>>>>    End_Procedure
26203>>>>>>>>>
26203>>>>>>>>>    Function ComDark Returns Boolean
26205>>>>>>>>>        Boolean retVal
26205>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
26206>>>>>>>>>        Function_Return retVal
26207>>>>>>>>>    End_Function
26208>>>>>>>>>
26208>>>>>>>>>    Procedure Set ComDark Boolean value
26210>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
26211>>>>>>>>>    End_Procedure
26212>>>>>>>>>
26212>>>>>>>>>    Function ComText Returns String
26214>>>>>>>>>        String retVal
26214>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
26215>>>>>>>>>        Function_Return retVal
26216>>>>>>>>>    End_Function
26217>>>>>>>>>
26217>>>>>>>>>    Procedure Set ComText String value
26219>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
26220>>>>>>>>>    End_Procedure
26221>>>>>>>>>
26221>>>>>>>>>    Function ComTextColor Returns OLE_COLOR
26223>>>>>>>>>        OLE_COLOR retVal
26223>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -513 OLE_VT_I4 to retVal
26224>>>>>>>>>        Function_Return retVal
26225>>>>>>>>>    End_Function
26226>>>>>>>>>
26226>>>>>>>>>    Procedure Set ComTextColor OLE_COLOR value
26228>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -513 OLE_VT_I4 to value
26229>>>>>>>>>    End_Procedure
26230>>>>>>>>>
26230>>>>>>>>>    Function ComTextGrayColor Returns OLE_COLOR
26232>>>>>>>>>        OLE_COLOR retVal
26232>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to retVal
26233>>>>>>>>>        Function_Return retVal
26234>>>>>>>>>    End_Function
26235>>>>>>>>>
26235>>>>>>>>>    Procedure Set ComTextGrayColor OLE_COLOR value
26237>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to value
26238>>>>>>>>>    End_Procedure
26239>>>>>>>>>
26239>>>>>>>>>    Function ComBackgroundColor Returns OLE_COLOR
26241>>>>>>>>>        OLE_COLOR retVal
26241>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to retVal
26242>>>>>>>>>        Function_Return retVal
26243>>>>>>>>>    End_Function
26244>>>>>>>>>
26244>>>>>>>>>    Procedure Set ComBackgroundColor OLE_COLOR value
26246>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to value
26247>>>>>>>>>    End_Procedure
26248>>>>>>>>>
26248>>>>>>>>>    Function ComFont Returns Variant
26250>>>>>>>>>        Variant retVal
26250>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
26251>>>>>>>>>        Function_Return retVal
26252>>>>>>>>>    End_Function
26253>>>>>>>>>
26253>>>>>>>>>    Procedure Set ComFont Variant value
26255>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
26256>>>>>>>>>    End_Procedure
26257>>>>>>>>>
26257>>>>>>>>>    Function ComIconIndex Returns Integer
26259>>>>>>>>>        Integer retVal
26259>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
26260>>>>>>>>>        Function_Return retVal
26261>>>>>>>>>    End_Function
26262>>>>>>>>>
26262>>>>>>>>>    Procedure Set ComIconIndex Integer value
26264>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
26265>>>>>>>>>    End_Procedure
26266>>>>>>>>>
26266>>>>>>>>>    Function ComAlignment Returns XTPTextAlignment
26268>>>>>>>>>        XTPTextAlignment retVal
26268>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
26269>>>>>>>>>        Function_Return retVal
26270>>>>>>>>>    End_Function
26271>>>>>>>>>
26271>>>>>>>>>    Procedure Set ComAlignment XTPTextAlignment value
26273>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
26274>>>>>>>>>    End_Procedure
26275>>>>>>>>>
26275>>>>>>>>>    Function ComButton Returns Boolean
26277>>>>>>>>>        Boolean retVal
26277>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
26278>>>>>>>>>        Function_Return retVal
26279>>>>>>>>>    End_Function
26280>>>>>>>>>
26280>>>>>>>>>    Procedure Set ComButton Boolean value
26282>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
26283>>>>>>>>>    End_Procedure
26284>>>>>>>>>
26284>>>>>>>>>    Function ComValue Returns String
26286>>>>>>>>>        String retVal
26286>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BSTR to retVal
26287>>>>>>>>>        Function_Return retVal
26288>>>>>>>>>    End_Function
26289>>>>>>>>>
26289>>>>>>>>>    Procedure Set ComValue String value
26291>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BSTR to value
26292>>>>>>>>>    End_Procedure
26293>>>>>>>>>
26293>>>>>>>>>    Function ComChecked Returns Boolean
26295>>>>>>>>>        Boolean retVal
26295>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
26296>>>>>>>>>        Function_Return retVal
26297>>>>>>>>>    End_Function
26298>>>>>>>>>
26298>>>>>>>>>    Procedure Set ComChecked Boolean value
26300>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
26301>>>>>>>>>    End_Procedure
26302>>>>>>>>>
26302>>>>>>>>>    Function ComId Returns Integer
26304>>>>>>>>>        Handle hDispatchDriver
26304>>>>>>>>>        Integer retVal
26304>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26305>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26306>>>>>>>>>        Function_Return retVal
26307>>>>>>>>>    End_Function
26308>>>>>>>>>
26308>>>>>>>>>    Function ComIndex Returns Integer
26310>>>>>>>>>        Handle hDispatchDriver
26310>>>>>>>>>        Integer retVal
26310>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26311>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26312>>>>>>>>>        Function_Return retVal
26313>>>>>>>>>    End_Function
26314>>>>>>>>>
26314>>>>>>>>>    Procedure ComRemove
26316>>>>>>>>>        Handle hDispatchDriver
26316>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26317>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
26318>>>>>>>>>    End_Procedure
26319>>>>>>>>>
26319>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
26321>>>>>>>>>        Handle hDispatchDriver
26321>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26322>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26323>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
26324>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
26325>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
26326>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
26327>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
26328>>>>>>>>>    End_Procedure
26329>>>>>>>>>
26329>>>>>>>>>    Procedure ComRedrawPane
26331>>>>>>>>>        Handle hDispatchDriver
26331>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26332>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 333 OLE_VT_VOID
26333>>>>>>>>>    End_Procedure
26334>>>>>>>>>
26334>>>>>>>>>    Procedure ComSetPadding Integer llLeft Integer llTop Integer llRight Integer llBottom
26336>>>>>>>>>        Handle hDispatchDriver
26336>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26337>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26338>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
26339>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
26340>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
26341>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
26342>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
26343>>>>>>>>>    End_Procedure
26344>>>>>>>>>
26344>>>>>>>>>    Procedure ComSetMargins Integer llLeft Integer llTop Integer llRight Integer llBottom
26346>>>>>>>>>        Handle hDispatchDriver
26346>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26347>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26348>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
26349>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
26350>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
26351>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
26352>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
26353>>>>>>>>>    End_Procedure
26354>>>>>>>>>End_Class
26355>>>>>>>>>
26355>>>>>>>>>// CLSID: {C0DE2000-80B8-4E1B-878E-FFF8347C96EE}
26355>>>>>>>>>Class cCJStatusBarSwitchPane is a cComAutomationObject
26356>>>>>>>>>
26356>>>>>>>>>    Function ComWidth Returns Integer
26358>>>>>>>>>        Integer retVal
26358>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26359>>>>>>>>>        Function_Return retVal
26360>>>>>>>>>    End_Function
26361>>>>>>>>>
26361>>>>>>>>>    Procedure Set ComWidth Integer value
26363>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26364>>>>>>>>>    End_Procedure
26365>>>>>>>>>
26365>>>>>>>>>    Function ComStyle Returns XTPStatusPaneStyle
26367>>>>>>>>>        XTPStatusPaneStyle retVal
26367>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
26368>>>>>>>>>        Function_Return retVal
26369>>>>>>>>>    End_Function
26370>>>>>>>>>
26370>>>>>>>>>    Procedure Set ComStyle XTPStatusPaneStyle value
26372>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
26373>>>>>>>>>    End_Procedure
26374>>>>>>>>>
26374>>>>>>>>>    Function ComVisible Returns Boolean
26376>>>>>>>>>        Boolean retVal
26376>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
26377>>>>>>>>>        Function_Return retVal
26378>>>>>>>>>    End_Function
26379>>>>>>>>>
26379>>>>>>>>>    Procedure Set ComVisible Boolean value
26381>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
26382>>>>>>>>>    End_Procedure
26383>>>>>>>>>
26383>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
26385>>>>>>>>>        OLE_HANDLE retVal
26385>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
26386>>>>>>>>>        Function_Return retVal
26387>>>>>>>>>    End_Function
26388>>>>>>>>>
26388>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
26390>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
26391>>>>>>>>>    End_Procedure
26392>>>>>>>>>
26392>>>>>>>>>    Function ComToolTip Returns String
26394>>>>>>>>>        String retVal
26394>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
26395>>>>>>>>>        Function_Return retVal
26396>>>>>>>>>    End_Function
26397>>>>>>>>>
26397>>>>>>>>>    Procedure Set ComToolTip String value
26399>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
26400>>>>>>>>>    End_Procedure
26401>>>>>>>>>
26401>>>>>>>>>    Function ComBeginGroup Returns Boolean
26403>>>>>>>>>        Boolean retVal
26403>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
26404>>>>>>>>>        Function_Return retVal
26405>>>>>>>>>    End_Function
26406>>>>>>>>>
26406>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
26408>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
26409>>>>>>>>>    End_Procedure
26410>>>>>>>>>
26410>>>>>>>>>    Function ComCaption Returns String
26412>>>>>>>>>        String retVal
26412>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to retVal
26413>>>>>>>>>        Function_Return retVal
26414>>>>>>>>>    End_Function
26415>>>>>>>>>
26415>>>>>>>>>    Procedure Set ComCaption String value
26417>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to value
26418>>>>>>>>>    End_Procedure
26419>>>>>>>>>
26419>>>>>>>>>    Function ComEnabled Returns Boolean
26421>>>>>>>>>        Boolean retVal
26421>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
26422>>>>>>>>>        Function_Return retVal
26423>>>>>>>>>    End_Function
26424>>>>>>>>>
26424>>>>>>>>>    Procedure Set ComEnabled Boolean value
26426>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
26427>>>>>>>>>    End_Procedure
26428>>>>>>>>>
26428>>>>>>>>>    Function ComCustomizable Returns Boolean
26430>>>>>>>>>        Boolean retVal
26430>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
26431>>>>>>>>>        Function_Return retVal
26432>>>>>>>>>    End_Function
26433>>>>>>>>>
26433>>>>>>>>>    Procedure Set ComCustomizable Boolean value
26435>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
26436>>>>>>>>>    End_Procedure
26437>>>>>>>>>
26437>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
26439>>>>>>>>>        XTPControlHideFlags retVal
26439>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
26440>>>>>>>>>        Function_Return retVal
26441>>>>>>>>>    End_Function
26442>>>>>>>>>
26442>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
26444>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
26445>>>>>>>>>    End_Procedure
26446>>>>>>>>>
26446>>>>>>>>>    Function ComDark Returns Boolean
26448>>>>>>>>>        Boolean retVal
26448>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
26449>>>>>>>>>        Function_Return retVal
26450>>>>>>>>>    End_Function
26451>>>>>>>>>
26451>>>>>>>>>    Procedure Set ComDark Boolean value
26453>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
26454>>>>>>>>>    End_Procedure
26455>>>>>>>>>
26455>>>>>>>>>    Function ComChecked Returns Integer
26457>>>>>>>>>        Integer retVal
26457>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to retVal
26458>>>>>>>>>        Function_Return retVal
26459>>>>>>>>>    End_Function
26460>>>>>>>>>
26460>>>>>>>>>    Procedure Set ComChecked Integer value
26462>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to value
26463>>>>>>>>>    End_Procedure
26464>>>>>>>>>
26464>>>>>>>>>    Function ComId Returns Integer
26466>>>>>>>>>        Handle hDispatchDriver
26466>>>>>>>>>        Integer retVal
26466>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26467>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26468>>>>>>>>>        Function_Return retVal
26469>>>>>>>>>    End_Function
26470>>>>>>>>>
26470>>>>>>>>>    Function ComIndex Returns Integer
26472>>>>>>>>>        Handle hDispatchDriver
26472>>>>>>>>>        Integer retVal
26472>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26473>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26474>>>>>>>>>        Function_Return retVal
26475>>>>>>>>>    End_Function
26476>>>>>>>>>
26476>>>>>>>>>    Procedure ComRemove
26478>>>>>>>>>        Handle hDispatchDriver
26478>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26479>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
26480>>>>>>>>>    End_Procedure
26481>>>>>>>>>
26481>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
26483>>>>>>>>>        Handle hDispatchDriver
26483>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26484>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26485>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
26486>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
26487>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
26488>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
26489>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
26490>>>>>>>>>    End_Procedure
26491>>>>>>>>>
26491>>>>>>>>>    Procedure ComRedrawPane
26493>>>>>>>>>        Handle hDispatchDriver
26493>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26494>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 333 OLE_VT_VOID
26495>>>>>>>>>    End_Procedure
26496>>>>>>>>>
26496>>>>>>>>>    Procedure ComAddSwitch Integer llId String llToolTip
26498>>>>>>>>>        Handle hDispatchDriver
26498>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26499>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26500>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26501>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llToolTip
26502>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 120 OLE_VT_VOID
26503>>>>>>>>>    End_Procedure
26504>>>>>>>>>
26504>>>>>>>>>    Procedure ComRemoveSwitch Integer llId
26506>>>>>>>>>        Handle hDispatchDriver
26506>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26507>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
26508>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26509>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 121 OLE_VT_VOID
26510>>>>>>>>>    End_Procedure
26511>>>>>>>>>
26511>>>>>>>>>    Procedure ComEnableSwitch Integer llId Boolean llEnable
26513>>>>>>>>>        Handle hDispatchDriver
26513>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26514>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26515>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26516>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
26517>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 123 OLE_VT_VOID
26518>>>>>>>>>    End_Procedure
26519>>>>>>>>>
26519>>>>>>>>>    Function ComSwitchTooltip Integer llId Returns String
26521>>>>>>>>>        Handle hDispatchDriver
26521>>>>>>>>>        String retVal
26521>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26522>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
26523>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26524>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 124 OLE_VT_BSTR to retVal
26525>>>>>>>>>        Function_Return retVal
26526>>>>>>>>>    End_Function
26527>>>>>>>>>
26527>>>>>>>>>    Procedure Set ComSwitchTooltip Integer llId String value
26529>>>>>>>>>        Handle hDispatchDriver
26529>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26530>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26531>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26532>>>>>>>>>        Set ComProperty of hDispatchDriver 124 OLE_VT_BSTR to value
26533>>>>>>>>>    End_Procedure
26534>>>>>>>>>End_Class
26535>>>>>>>>>
26535>>>>>>>>>// CLSID: {C0DE2000-C7DE-43D1-A36D-48CDD92DA1F7}
26535>>>>>>>>>Class cCJStatusBarSliderPane is a cComAutomationObject
26536>>>>>>>>>
26536>>>>>>>>>    Function ComWidth Returns Integer
26538>>>>>>>>>        Integer retVal
26538>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26539>>>>>>>>>        Function_Return retVal
26540>>>>>>>>>    End_Function
26541>>>>>>>>>
26541>>>>>>>>>    Procedure Set ComWidth Integer value
26543>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26544>>>>>>>>>    End_Procedure
26545>>>>>>>>>
26545>>>>>>>>>    Function ComStyle Returns XTPStatusPaneStyle
26547>>>>>>>>>        XTPStatusPaneStyle retVal
26547>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
26548>>>>>>>>>        Function_Return retVal
26549>>>>>>>>>    End_Function
26550>>>>>>>>>
26550>>>>>>>>>    Procedure Set ComStyle XTPStatusPaneStyle value
26552>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
26553>>>>>>>>>    End_Procedure
26554>>>>>>>>>
26554>>>>>>>>>    Function ComVisible Returns Boolean
26556>>>>>>>>>        Boolean retVal
26556>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
26557>>>>>>>>>        Function_Return retVal
26558>>>>>>>>>    End_Function
26559>>>>>>>>>
26559>>>>>>>>>    Procedure Set ComVisible Boolean value
26561>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
26562>>>>>>>>>    End_Procedure
26563>>>>>>>>>
26563>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
26565>>>>>>>>>        OLE_HANDLE retVal
26565>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
26566>>>>>>>>>        Function_Return retVal
26567>>>>>>>>>    End_Function
26568>>>>>>>>>
26568>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
26570>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
26571>>>>>>>>>    End_Procedure
26572>>>>>>>>>
26572>>>>>>>>>    Function ComToolTip Returns String
26574>>>>>>>>>        String retVal
26574>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
26575>>>>>>>>>        Function_Return retVal
26576>>>>>>>>>    End_Function
26577>>>>>>>>>
26577>>>>>>>>>    Procedure Set ComToolTip String value
26579>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
26580>>>>>>>>>    End_Procedure
26581>>>>>>>>>
26581>>>>>>>>>    Function ComBeginGroup Returns Boolean
26583>>>>>>>>>        Boolean retVal
26583>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
26584>>>>>>>>>        Function_Return retVal
26585>>>>>>>>>    End_Function
26586>>>>>>>>>
26586>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
26588>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
26589>>>>>>>>>    End_Procedure
26590>>>>>>>>>
26590>>>>>>>>>    Function ComCaption Returns String
26592>>>>>>>>>        String retVal
26592>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to retVal
26593>>>>>>>>>        Function_Return retVal
26594>>>>>>>>>    End_Function
26595>>>>>>>>>
26595>>>>>>>>>    Procedure Set ComCaption String value
26597>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to value
26598>>>>>>>>>    End_Procedure
26599>>>>>>>>>
26599>>>>>>>>>    Function ComEnabled Returns Boolean
26601>>>>>>>>>        Boolean retVal
26601>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
26602>>>>>>>>>        Function_Return retVal
26603>>>>>>>>>    End_Function
26604>>>>>>>>>
26604>>>>>>>>>    Procedure Set ComEnabled Boolean value
26606>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
26607>>>>>>>>>    End_Procedure
26608>>>>>>>>>
26608>>>>>>>>>    Function ComCustomizable Returns Boolean
26610>>>>>>>>>        Boolean retVal
26610>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
26611>>>>>>>>>        Function_Return retVal
26612>>>>>>>>>    End_Function
26613>>>>>>>>>
26613>>>>>>>>>    Procedure Set ComCustomizable Boolean value
26615>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
26616>>>>>>>>>    End_Procedure
26617>>>>>>>>>
26617>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
26619>>>>>>>>>        XTPControlHideFlags retVal
26619>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
26620>>>>>>>>>        Function_Return retVal
26621>>>>>>>>>    End_Function
26622>>>>>>>>>
26622>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
26624>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
26625>>>>>>>>>    End_Procedure
26626>>>>>>>>>
26626>>>>>>>>>    Function ComDark Returns Boolean
26628>>>>>>>>>        Boolean retVal
26628>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
26629>>>>>>>>>        Function_Return retVal
26630>>>>>>>>>    End_Function
26631>>>>>>>>>
26631>>>>>>>>>    Procedure Set ComDark Boolean value
26633>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
26634>>>>>>>>>    End_Procedure
26635>>>>>>>>>
26635>>>>>>>>>    Function ComMin Returns Integer
26637>>>>>>>>>        Integer retVal
26637>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 120 OLE_VT_I4 to retVal
26638>>>>>>>>>        Function_Return retVal
26639>>>>>>>>>    End_Function
26640>>>>>>>>>
26640>>>>>>>>>    Procedure Set ComMin Integer value
26642>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 120 OLE_VT_I4 to value
26643>>>>>>>>>    End_Procedure
26644>>>>>>>>>
26644>>>>>>>>>    Function ComMax Returns Integer
26646>>>>>>>>>        Integer retVal
26646>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 121 OLE_VT_I4 to retVal
26647>>>>>>>>>        Function_Return retVal
26648>>>>>>>>>    End_Function
26649>>>>>>>>>
26649>>>>>>>>>    Procedure Set ComMax Integer value
26651>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 121 OLE_VT_I4 to value
26652>>>>>>>>>    End_Procedure
26653>>>>>>>>>
26653>>>>>>>>>    Function ComValue Returns Integer
26655>>>>>>>>>        Integer retVal
26655>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to retVal
26656>>>>>>>>>        Function_Return retVal
26657>>>>>>>>>    End_Function
26658>>>>>>>>>
26658>>>>>>>>>    Procedure Set ComValue Integer value
26660>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to value
26661>>>>>>>>>    End_Procedure
26662>>>>>>>>>
26662>>>>>>>>>    Function ComId Returns Integer
26664>>>>>>>>>        Handle hDispatchDriver
26664>>>>>>>>>        Integer retVal
26664>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26665>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26666>>>>>>>>>        Function_Return retVal
26667>>>>>>>>>    End_Function
26668>>>>>>>>>
26668>>>>>>>>>    Function ComIndex Returns Integer
26670>>>>>>>>>        Handle hDispatchDriver
26670>>>>>>>>>        Integer retVal
26670>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26671>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26672>>>>>>>>>        Function_Return retVal
26673>>>>>>>>>    End_Function
26674>>>>>>>>>
26674>>>>>>>>>    Procedure ComRemove
26676>>>>>>>>>        Handle hDispatchDriver
26676>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26677>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
26678>>>>>>>>>    End_Procedure
26679>>>>>>>>>
26679>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
26681>>>>>>>>>        Handle hDispatchDriver
26681>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26682>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26683>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
26684>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
26685>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
26686>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
26687>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
26688>>>>>>>>>    End_Procedure
26689>>>>>>>>>
26689>>>>>>>>>    Procedure ComRedrawPane
26691>>>>>>>>>        Handle hDispatchDriver
26691>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26692>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 333 OLE_VT_VOID
26693>>>>>>>>>    End_Procedure
26694>>>>>>>>>
26694>>>>>>>>>    Procedure ComSetTooltipPart XTPSliderCommand llCommand String llToolTip
26696>>>>>>>>>        Handle hDispatchDriver
26696>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26697>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26698>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
26699>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llToolTip
26700>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 123 OLE_VT_VOID
26701>>>>>>>>>    End_Procedure
26702>>>>>>>>>
26702>>>>>>>>>    Procedure ComSetTicks Variant llTicks
26704>>>>>>>>>        Handle hDispatchDriver
26704>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26705>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
26706>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llTicks
26707>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 124 OLE_VT_VOID
26708>>>>>>>>>    End_Procedure
26709>>>>>>>>>End_Class
26710>>>>>>>>>
26710>>>>>>>>>// CLSID: {C0DE2000-A19C-4749-A1F2-991D33618081}
26710>>>>>>>>>Class cCJStatusBarProgressPane is a cComAutomationObject
26711>>>>>>>>>
26711>>>>>>>>>    Function ComWidth Returns Integer
26713>>>>>>>>>        Integer retVal
26713>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26714>>>>>>>>>        Function_Return retVal
26715>>>>>>>>>    End_Function
26716>>>>>>>>>
26716>>>>>>>>>    Procedure Set ComWidth Integer value
26718>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26719>>>>>>>>>    End_Procedure
26720>>>>>>>>>
26720>>>>>>>>>    Function ComStyle Returns XTPStatusPaneStyle
26722>>>>>>>>>        XTPStatusPaneStyle retVal
26722>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
26723>>>>>>>>>        Function_Return retVal
26724>>>>>>>>>    End_Function
26725>>>>>>>>>
26725>>>>>>>>>    Procedure Set ComStyle XTPStatusPaneStyle value
26727>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
26728>>>>>>>>>    End_Procedure
26729>>>>>>>>>
26729>>>>>>>>>    Function ComVisible Returns Boolean
26731>>>>>>>>>        Boolean retVal
26731>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
26732>>>>>>>>>        Function_Return retVal
26733>>>>>>>>>    End_Function
26734>>>>>>>>>
26734>>>>>>>>>    Procedure Set ComVisible Boolean value
26736>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
26737>>>>>>>>>    End_Procedure
26738>>>>>>>>>
26738>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
26740>>>>>>>>>        OLE_HANDLE retVal
26740>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
26741>>>>>>>>>        Function_Return retVal
26742>>>>>>>>>    End_Function
26743>>>>>>>>>
26743>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
26745>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
26746>>>>>>>>>    End_Procedure
26747>>>>>>>>>
26747>>>>>>>>>    Function ComToolTip Returns String
26749>>>>>>>>>        String retVal
26749>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
26750>>>>>>>>>        Function_Return retVal
26751>>>>>>>>>    End_Function
26752>>>>>>>>>
26752>>>>>>>>>    Procedure Set ComToolTip String value
26754>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
26755>>>>>>>>>    End_Procedure
26756>>>>>>>>>
26756>>>>>>>>>    Function ComBeginGroup Returns Boolean
26758>>>>>>>>>        Boolean retVal
26758>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
26759>>>>>>>>>        Function_Return retVal
26760>>>>>>>>>    End_Function
26761>>>>>>>>>
26761>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
26763>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
26764>>>>>>>>>    End_Procedure
26765>>>>>>>>>
26765>>>>>>>>>    Function ComCaption Returns String
26767>>>>>>>>>        String retVal
26767>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to retVal
26768>>>>>>>>>        Function_Return retVal
26769>>>>>>>>>    End_Function
26770>>>>>>>>>
26770>>>>>>>>>    Procedure Set ComCaption String value
26772>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to value
26773>>>>>>>>>    End_Procedure
26774>>>>>>>>>
26774>>>>>>>>>    Function ComEnabled Returns Boolean
26776>>>>>>>>>        Boolean retVal
26776>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
26777>>>>>>>>>        Function_Return retVal
26778>>>>>>>>>    End_Function
26779>>>>>>>>>
26779>>>>>>>>>    Procedure Set ComEnabled Boolean value
26781>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
26782>>>>>>>>>    End_Procedure
26783>>>>>>>>>
26783>>>>>>>>>    Function ComCustomizable Returns Boolean
26785>>>>>>>>>        Boolean retVal
26785>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
26786>>>>>>>>>        Function_Return retVal
26787>>>>>>>>>    End_Function
26788>>>>>>>>>
26788>>>>>>>>>    Procedure Set ComCustomizable Boolean value
26790>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
26791>>>>>>>>>    End_Procedure
26792>>>>>>>>>
26792>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
26794>>>>>>>>>        XTPControlHideFlags retVal
26794>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
26795>>>>>>>>>        Function_Return retVal
26796>>>>>>>>>    End_Function
26797>>>>>>>>>
26797>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
26799>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
26800>>>>>>>>>    End_Procedure
26801>>>>>>>>>
26801>>>>>>>>>    Function ComDark Returns Boolean
26803>>>>>>>>>        Boolean retVal
26803>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
26804>>>>>>>>>        Function_Return retVal
26805>>>>>>>>>    End_Function
26806>>>>>>>>>
26806>>>>>>>>>    Procedure Set ComDark Boolean value
26808>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
26809>>>>>>>>>    End_Procedure
26810>>>>>>>>>
26810>>>>>>>>>    Function ComMin Returns Integer
26812>>>>>>>>>        Integer retVal
26812>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 120 OLE_VT_I4 to retVal
26813>>>>>>>>>        Function_Return retVal
26814>>>>>>>>>    End_Function
26815>>>>>>>>>
26815>>>>>>>>>    Procedure Set ComMin Integer value
26817>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 120 OLE_VT_I4 to value
26818>>>>>>>>>    End_Procedure
26819>>>>>>>>>
26819>>>>>>>>>    Function ComMax Returns Integer
26821>>>>>>>>>        Integer retVal
26821>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 121 OLE_VT_I4 to retVal
26822>>>>>>>>>        Function_Return retVal
26823>>>>>>>>>    End_Function
26824>>>>>>>>>
26824>>>>>>>>>    Procedure Set ComMax Integer value
26826>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 121 OLE_VT_I4 to value
26827>>>>>>>>>    End_Procedure
26828>>>>>>>>>
26828>>>>>>>>>    Function ComValue Returns Integer
26830>>>>>>>>>        Integer retVal
26830>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to retVal
26831>>>>>>>>>        Function_Return retVal
26832>>>>>>>>>    End_Function
26833>>>>>>>>>
26833>>>>>>>>>    Procedure Set ComValue Integer value
26835>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to value
26836>>>>>>>>>    End_Procedure
26837>>>>>>>>>
26837>>>>>>>>>    Function ComId Returns Integer
26839>>>>>>>>>        Handle hDispatchDriver
26839>>>>>>>>>        Integer retVal
26839>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26840>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26841>>>>>>>>>        Function_Return retVal
26842>>>>>>>>>    End_Function
26843>>>>>>>>>
26843>>>>>>>>>    Function ComIndex Returns Integer
26845>>>>>>>>>        Handle hDispatchDriver
26845>>>>>>>>>        Integer retVal
26845>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26846>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26847>>>>>>>>>        Function_Return retVal
26848>>>>>>>>>    End_Function
26849>>>>>>>>>
26849>>>>>>>>>    Procedure ComRemove
26851>>>>>>>>>        Handle hDispatchDriver
26851>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26852>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
26853>>>>>>>>>    End_Procedure
26854>>>>>>>>>
26854>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
26856>>>>>>>>>        Handle hDispatchDriver
26856>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26857>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26858>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
26859>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
26860>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
26861>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
26862>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
26863>>>>>>>>>    End_Procedure
26864>>>>>>>>>
26864>>>>>>>>>    Procedure ComRedrawPane
26866>>>>>>>>>        Handle hDispatchDriver
26866>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26867>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 333 OLE_VT_VOID
26868>>>>>>>>>    End_Procedure
26869>>>>>>>>>
26869>>>>>>>>>    Procedure ComRedrawProgress
26871>>>>>>>>>        Handle hDispatchDriver
26871>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26872>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 334 OLE_VT_VOID
26873>>>>>>>>>    End_Procedure
26874>>>>>>>>>End_Class
26875>>>>>>>>>
26875>>>>>>>>>// CLSID: {C0DE2000-481B-4769-ABB2-56F0D7F7BB9E}
26875>>>>>>>>>// Dispatch interface for MessageBar Control
26875>>>>>>>>>Class cCJMessageBar is a cComAutomationObject
26876>>>>>>>>>
26876>>>>>>>>>    Function ComVisible Returns Boolean
26878>>>>>>>>>        Boolean retVal
26878>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
26879>>>>>>>>>        Function_Return retVal
26880>>>>>>>>>    End_Function
26881>>>>>>>>>
26881>>>>>>>>>    Procedure Set ComVisible Boolean value
26883>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
26884>>>>>>>>>    End_Procedure
26885>>>>>>>>>
26885>>>>>>>>>    Function ComMessage Returns String
26887>>>>>>>>>        String retVal
26887>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
26888>>>>>>>>>        Function_Return retVal
26889>>>>>>>>>    End_Function
26890>>>>>>>>>
26890>>>>>>>>>    Procedure Set ComMessage String value
26892>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
26893>>>>>>>>>    End_Procedure
26894>>>>>>>>>
26894>>>>>>>>>    Function ComHeight Returns Integer
26896>>>>>>>>>        Integer retVal
26896>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
26897>>>>>>>>>        Function_Return retVal
26898>>>>>>>>>    End_Function
26899>>>>>>>>>
26899>>>>>>>>>    Procedure Set ComHeight Integer value
26901>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
26902>>>>>>>>>    End_Procedure
26903>>>>>>>>>
26903>>>>>>>>>    Procedure ComAddButton Integer llId String llCaption String llToolTip
26905>>>>>>>>>        Handle hDispatchDriver
26905>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26906>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
26907>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26908>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
26909>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llToolTip
26910>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
26911>>>>>>>>>    End_Procedure
26912>>>>>>>>>
26912>>>>>>>>>    Procedure ComRemoveButtons
26914>>>>>>>>>        Handle hDispatchDriver
26914>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26915>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
26916>>>>>>>>>    End_Procedure
26917>>>>>>>>>
26917>>>>>>>>>    Procedure ComAddCloseButton String llToolTip
26919>>>>>>>>>        Handle hDispatchDriver
26919>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26920>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
26921>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llToolTip
26922>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
26923>>>>>>>>>    End_Procedure
26924>>>>>>>>>End_Class
26925>>>>>>>>>
26925>>>>>>>>>// CLSID: {C0DE2000-789A-40D9-B564-7577DA549319}
26925>>>>>>>>>Class cCJRibbonBarSystemButton is a cComAutomationObject
26926>>>>>>>>>
26926>>>>>>>>>    Function ComChecked Returns Boolean
26928>>>>>>>>>        Boolean retVal
26928>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
26929>>>>>>>>>        Function_Return retVal
26930>>>>>>>>>    End_Function
26931>>>>>>>>>
26931>>>>>>>>>    Procedure Set ComChecked Boolean value
26933>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
26934>>>>>>>>>    End_Procedure
26935>>>>>>>>>
26935>>>>>>>>>    Function ComBeginGroup Returns Boolean
26937>>>>>>>>>        Boolean retVal
26937>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
26938>>>>>>>>>        Function_Return retVal
26939>>>>>>>>>    End_Function
26940>>>>>>>>>
26940>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
26942>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
26943>>>>>>>>>    End_Procedure
26944>>>>>>>>>
26944>>>>>>>>>    Function ComCaption Returns String
26946>>>>>>>>>        String retVal
26946>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
26947>>>>>>>>>        Function_Return retVal
26948>>>>>>>>>    End_Function
26949>>>>>>>>>
26949>>>>>>>>>    Procedure Set ComCaption String value
26951>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
26952>>>>>>>>>    End_Procedure
26953>>>>>>>>>
26953>>>>>>>>>    Function ComDescriptionText Returns String
26955>>>>>>>>>        String retVal
26955>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
26956>>>>>>>>>        Function_Return retVal
26957>>>>>>>>>    End_Function
26958>>>>>>>>>
26958>>>>>>>>>    Procedure Set ComDescriptionText String value
26960>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
26961>>>>>>>>>    End_Procedure
26962>>>>>>>>>
26962>>>>>>>>>    Function ComId Returns Integer
26964>>>>>>>>>        Integer retVal
26964>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
26965>>>>>>>>>        Function_Return retVal
26966>>>>>>>>>    End_Function
26967>>>>>>>>>
26967>>>>>>>>>    Procedure Set ComId Integer value
26969>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
26970>>>>>>>>>    End_Procedure
26971>>>>>>>>>
26971>>>>>>>>>    Function ComParameter Returns String
26973>>>>>>>>>        String retVal
26973>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
26974>>>>>>>>>        Function_Return retVal
26975>>>>>>>>>    End_Function
26976>>>>>>>>>
26976>>>>>>>>>    Procedure Set ComParameter String value
26978>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
26979>>>>>>>>>    End_Procedure
26980>>>>>>>>>
26980>>>>>>>>>    Function ComShortcutText Returns String
26982>>>>>>>>>        String retVal
26982>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
26983>>>>>>>>>        Function_Return retVal
26984>>>>>>>>>    End_Function
26985>>>>>>>>>
26985>>>>>>>>>    Procedure Set ComShortcutText String value
26987>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
26988>>>>>>>>>    End_Procedure
26989>>>>>>>>>
26989>>>>>>>>>    Function ComCustomShortcutText Returns String
26991>>>>>>>>>        String retVal
26991>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
26992>>>>>>>>>        Function_Return retVal
26993>>>>>>>>>    End_Function
26994>>>>>>>>>
26994>>>>>>>>>    Procedure Set ComCustomShortcutText String value
26996>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
26997>>>>>>>>>    End_Procedure
26998>>>>>>>>>
26998>>>>>>>>>    Function ComTooltipText Returns String
27000>>>>>>>>>        String retVal
27000>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
27001>>>>>>>>>        Function_Return retVal
27002>>>>>>>>>    End_Function
27003>>>>>>>>>
27003>>>>>>>>>    Procedure Set ComTooltipText String value
27005>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
27006>>>>>>>>>    End_Procedure
27007>>>>>>>>>
27007>>>>>>>>>    Function ComVisible Returns Boolean
27009>>>>>>>>>        Boolean retVal
27009>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
27010>>>>>>>>>        Function_Return retVal
27011>>>>>>>>>    End_Function
27012>>>>>>>>>
27012>>>>>>>>>    Procedure Set ComVisible Boolean value
27014>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
27015>>>>>>>>>    End_Procedure
27016>>>>>>>>>
27016>>>>>>>>>    Function ComEnabled Returns Boolean
27018>>>>>>>>>        Boolean retVal
27018>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
27019>>>>>>>>>        Function_Return retVal
27020>>>>>>>>>    End_Function
27021>>>>>>>>>
27021>>>>>>>>>    Procedure Set ComEnabled Boolean value
27023>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
27024>>>>>>>>>    End_Procedure
27025>>>>>>>>>
27025>>>>>>>>>    Function ComIconId Returns Integer
27027>>>>>>>>>        Integer retVal
27027>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
27028>>>>>>>>>        Function_Return retVal
27029>>>>>>>>>    End_Function
27030>>>>>>>>>
27030>>>>>>>>>    Procedure Set ComIconId Integer value
27032>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
27033>>>>>>>>>    End_Procedure
27034>>>>>>>>>
27034>>>>>>>>>    Function ComDefaultItem Returns Boolean
27036>>>>>>>>>        Boolean retVal
27036>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
27037>>>>>>>>>        Function_Return retVal
27038>>>>>>>>>    End_Function
27039>>>>>>>>>
27039>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
27041>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
27042>>>>>>>>>    End_Procedure
27043>>>>>>>>>
27043>>>>>>>>>    Function ComFlags Returns XTPControlFlags
27045>>>>>>>>>        XTPControlFlags retVal
27045>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
27046>>>>>>>>>        Function_Return retVal
27047>>>>>>>>>    End_Function
27048>>>>>>>>>
27048>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
27050>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
27051>>>>>>>>>    End_Procedure
27052>>>>>>>>>
27052>>>>>>>>>    Function ComCategory Returns String
27054>>>>>>>>>        String retVal
27054>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
27055>>>>>>>>>        Function_Return retVal
27056>>>>>>>>>    End_Function
27057>>>>>>>>>
27057>>>>>>>>>    Procedure Set ComCategory String value
27059>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
27060>>>>>>>>>    End_Procedure
27061>>>>>>>>>
27061>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
27063>>>>>>>>>        XTPControlHideFlags retVal
27063>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
27064>>>>>>>>>        Function_Return retVal
27065>>>>>>>>>    End_Function
27066>>>>>>>>>
27066>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
27068>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
27069>>>>>>>>>    End_Procedure
27070>>>>>>>>>
27070>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
27072>>>>>>>>>        Boolean retVal
27072>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
27073>>>>>>>>>        Function_Return retVal
27074>>>>>>>>>    End_Function
27075>>>>>>>>>
27075>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
27077>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
27078>>>>>>>>>    End_Procedure
27079>>>>>>>>>
27079>>>>>>>>>    Function ComAction Returns Variant
27081>>>>>>>>>        Variant retVal
27081>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
27082>>>>>>>>>        Function_Return retVal
27083>>>>>>>>>    End_Function
27084>>>>>>>>>
27084>>>>>>>>>    Procedure Set ComAction Variant value
27086>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
27087>>>>>>>>>    End_Procedure
27088>>>>>>>>>
27088>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
27090>>>>>>>>>        Integer retVal
27090>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
27091>>>>>>>>>        Function_Return retVal
27092>>>>>>>>>    End_Function
27093>>>>>>>>>
27093>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
27095>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
27096>>>>>>>>>    End_Procedure
27097>>>>>>>>>
27097>>>>>>>>>    Function ComWidth Returns Integer
27099>>>>>>>>>        Integer retVal
27099>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
27100>>>>>>>>>        Function_Return retVal
27101>>>>>>>>>    End_Function
27102>>>>>>>>>
27102>>>>>>>>>    Procedure Set ComWidth Integer value
27104>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
27105>>>>>>>>>    End_Procedure
27106>>>>>>>>>
27106>>>>>>>>>    Function ComHeight Returns Integer
27108>>>>>>>>>        Integer retVal
27108>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
27109>>>>>>>>>        Function_Return retVal
27110>>>>>>>>>    End_Function
27111>>>>>>>>>
27111>>>>>>>>>    Procedure Set ComHeight Integer value
27113>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
27114>>>>>>>>>    End_Procedure
27115>>>>>>>>>
27115>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
27117>>>>>>>>>        XTPButtonStyle retVal
27117>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
27118>>>>>>>>>        Function_Return retVal
27119>>>>>>>>>    End_Function
27120>>>>>>>>>
27120>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
27122>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
27123>>>>>>>>>    End_Procedure
27124>>>>>>>>>
27124>>>>>>>>>    Function ComKeyboardTip Returns String
27126>>>>>>>>>        String retVal
27126>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
27127>>>>>>>>>        Function_Return retVal
27128>>>>>>>>>    End_Function
27129>>>>>>>>>
27129>>>>>>>>>    Procedure Set ComKeyboardTip String value
27131>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
27132>>>>>>>>>    End_Procedure
27133>>>>>>>>>
27133>>>>>>>>>    Function ComCommandBar Returns Variant
27135>>>>>>>>>        Variant retVal
27135>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
27136>>>>>>>>>        Function_Return retVal
27137>>>>>>>>>    End_Function
27138>>>>>>>>>
27138>>>>>>>>>    Procedure Set ComCommandBar Variant value
27140>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
27141>>>>>>>>>    End_Procedure
27142>>>>>>>>>
27142>>>>>>>>>    Function ComCloseOnDblClick Returns Boolean
27144>>>>>>>>>        Boolean retVal
27144>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_BOOL to retVal
27145>>>>>>>>>        Function_Return retVal
27146>>>>>>>>>    End_Function
27147>>>>>>>>>
27147>>>>>>>>>    Procedure Set ComCloseOnDblClick Boolean value
27149>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_BOOL to value
27150>>>>>>>>>    End_Procedure
27151>>>>>>>>>
27151>>>>>>>>>    Function ComControls Returns Variant
27153>>>>>>>>>        Handle hDispatchDriver
27153>>>>>>>>>        Variant retVal
27153>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27154>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
27155>>>>>>>>>        Function_Return retVal
27156>>>>>>>>>    End_Function
27157>>>>>>>>>
27157>>>>>>>>>    Function ComParent Returns Variant
27159>>>>>>>>>        Handle hDispatchDriver
27159>>>>>>>>>        Variant retVal
27159>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27160>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
27161>>>>>>>>>        Function_Return retVal
27162>>>>>>>>>    End_Function
27163>>>>>>>>>
27163>>>>>>>>>    Function ComIndex Returns Integer
27165>>>>>>>>>        Handle hDispatchDriver
27165>>>>>>>>>        Integer retVal
27165>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27166>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
27167>>>>>>>>>        Function_Return retVal
27168>>>>>>>>>    End_Function
27169>>>>>>>>>
27169>>>>>>>>>    Function ComType Returns XTPControlType
27171>>>>>>>>>        Handle hDispatchDriver
27171>>>>>>>>>        XTPControlType retVal
27171>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27172>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
27173>>>>>>>>>        Function_Return retVal
27174>>>>>>>>>    End_Function
27175>>>>>>>>>
27175>>>>>>>>>    Procedure ComDelete
27177>>>>>>>>>        Handle hDispatchDriver
27177>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27178>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
27179>>>>>>>>>    End_Procedure
27180>>>>>>>>>
27180>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
27182>>>>>>>>>        Handle hDispatchDriver
27182>>>>>>>>>        Variant retVal
27182>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27183>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
27184>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
27185>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
27186>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
27187>>>>>>>>>        Function_Return retVal
27188>>>>>>>>>    End_Function
27189>>>>>>>>>
27189>>>>>>>>>    Procedure ComSetFocus
27191>>>>>>>>>        Handle hDispatchDriver
27191>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27192>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
27193>>>>>>>>>    End_Procedure
27194>>>>>>>>>
27194>>>>>>>>>    Procedure ComExecute
27196>>>>>>>>>        Handle hDispatchDriver
27196>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27197>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
27198>>>>>>>>>    End_Procedure
27199>>>>>>>>>
27199>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
27201>>>>>>>>>        Handle hDispatchDriver
27201>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27202>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
27203>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
27204>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
27205>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
27206>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
27207>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
27208>>>>>>>>>    End_Procedure
27209>>>>>>>>>
27209>>>>>>>>>    Function ComRibbonGroup Returns Variant
27211>>>>>>>>>        Handle hDispatchDriver
27211>>>>>>>>>        Variant retVal
27211>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27212>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
27213>>>>>>>>>        Function_Return retVal
27214>>>>>>>>>    End_Function
27215>>>>>>>>>
27215>>>>>>>>>    Procedure ComReset
27217>>>>>>>>>        Handle hDispatchDriver
27217>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27218>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
27219>>>>>>>>>    End_Procedure
27220>>>>>>>>>
27220>>>>>>>>>    Function ComTop Returns Integer
27222>>>>>>>>>        Handle hDispatchDriver
27222>>>>>>>>>        Integer retVal
27222>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27223>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
27224>>>>>>>>>        Function_Return retVal
27225>>>>>>>>>    End_Function
27226>>>>>>>>>
27226>>>>>>>>>    Function ComLeft Returns Integer
27228>>>>>>>>>        Handle hDispatchDriver
27228>>>>>>>>>        Integer retVal
27228>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27229>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
27230>>>>>>>>>        Function_Return retVal
27231>>>>>>>>>    End_Function
27232>>>>>>>>>
27232>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
27234>>>>>>>>>        Handle hDispatchDriver
27234>>>>>>>>>        Variant retVal
27234>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27235>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27236>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
27237>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
27238>>>>>>>>>        Function_Return retVal
27239>>>>>>>>>    End_Function
27240>>>>>>>>>
27240>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
27242>>>>>>>>>        Handle hDispatchDriver
27242>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27243>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
27244>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
27245>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
27246>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
27247>>>>>>>>>    End_Procedure
27248>>>>>>>>>End_Class
27249>>>>>>>>>
27249>>>>>>>>>// CLSID: {C0DE2000-01E8-43E6-BC94-A31B89077DC4}
27249>>>>>>>>>Class cCJRibbonPaintManager is a cComAutomationObject
27250>>>>>>>>>
27250>>>>>>>>>    Function ComCaptionFont Returns Variant
27252>>>>>>>>>        Variant retVal
27252>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
27253>>>>>>>>>        Function_Return retVal
27254>>>>>>>>>    End_Function
27255>>>>>>>>>
27255>>>>>>>>>    Procedure Set ComCaptionFont Variant value
27257>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
27258>>>>>>>>>    End_Procedure
27259>>>>>>>>>
27259>>>>>>>>>    Function ComHotTrackingGroups Returns Boolean
27261>>>>>>>>>        Boolean retVal
27261>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BOOL to retVal
27262>>>>>>>>>        Function_Return retVal
27263>>>>>>>>>    End_Function
27264>>>>>>>>>
27264>>>>>>>>>    Procedure Set ComHotTrackingGroups Boolean value
27266>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BOOL to value
27267>>>>>>>>>    End_Procedure
27268>>>>>>>>>
27268>>>>>>>>>    Function ComWindowCaptionFont Returns Variant
27270>>>>>>>>>        Variant retVal
27270>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_DISPATCH to retVal
27271>>>>>>>>>        Function_Return retVal
27272>>>>>>>>>    End_Function
27273>>>>>>>>>
27273>>>>>>>>>    Procedure Set ComWindowCaptionFont Variant value
27275>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_DISPATCH to value
27276>>>>>>>>>    End_Procedure
27277>>>>>>>>>End_Class
27278>>>>>>>>>
27278>>>>>>>>>// CLSID: {C0DE2000-F6FB-49A2-A8C7-C5BD794C3C3B}
27278>>>>>>>>>Class cCJMiniToolBar is a cComAutomationObject
27279>>>>>>>>>
27279>>>>>>>>>    Function ComTitle Returns String
27281>>>>>>>>>        String retVal
27281>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
27282>>>>>>>>>        Function_Return retVal
27283>>>>>>>>>    End_Function
27284>>>>>>>>>
27284>>>>>>>>>    Procedure Set ComTitle String value
27286>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
27287>>>>>>>>>    End_Procedure
27288>>>>>>>>>
27288>>>>>>>>>    Function ComVisible Returns Boolean
27290>>>>>>>>>        Boolean retVal
27290>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
27291>>>>>>>>>        Function_Return retVal
27292>>>>>>>>>    End_Function
27293>>>>>>>>>
27293>>>>>>>>>    Procedure Set ComVisible Boolean value
27295>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
27296>>>>>>>>>    End_Procedure
27297>>>>>>>>>
27297>>>>>>>>>    Function ComPosition Returns XTPBarPosition
27299>>>>>>>>>        XTPBarPosition retVal
27299>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
27300>>>>>>>>>        Function_Return retVal
27301>>>>>>>>>    End_Function
27302>>>>>>>>>
27302>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
27304>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
27305>>>>>>>>>    End_Procedure
27306>>>>>>>>>
27306>>>>>>>>>    Function ComBarID Returns Integer
27308>>>>>>>>>        Integer retVal
27308>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
27309>>>>>>>>>        Function_Return retVal
27310>>>>>>>>>    End_Function
27311>>>>>>>>>
27311>>>>>>>>>    Procedure Set ComBarID Integer value
27313>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
27314>>>>>>>>>    End_Procedure
27315>>>>>>>>>
27315>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
27317>>>>>>>>>        Boolean retVal
27317>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
27318>>>>>>>>>        Function_Return retVal
27319>>>>>>>>>    End_Function
27320>>>>>>>>>
27320>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
27322>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
27323>>>>>>>>>    End_Procedure
27324>>>>>>>>>
27324>>>>>>>>>    Function ComWidth Returns Integer
27326>>>>>>>>>        Integer retVal
27326>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
27327>>>>>>>>>        Function_Return retVal
27328>>>>>>>>>    End_Function
27329>>>>>>>>>
27329>>>>>>>>>    Procedure Set ComWidth Integer value
27331>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
27332>>>>>>>>>    End_Procedure
27333>>>>>>>>>
27333>>>>>>>>>    Function ComCloseable Returns Boolean
27335>>>>>>>>>        Boolean retVal
27335>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
27336>>>>>>>>>        Function_Return retVal
27337>>>>>>>>>    End_Function
27338>>>>>>>>>
27338>>>>>>>>>    Procedure Set ComCloseable Boolean value
27340>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
27341>>>>>>>>>    End_Procedure
27342>>>>>>>>>
27342>>>>>>>>>    Function ComEnableAnimation Returns Boolean
27344>>>>>>>>>        Boolean retVal
27344>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
27345>>>>>>>>>        Function_Return retVal
27346>>>>>>>>>    End_Function
27347>>>>>>>>>
27347>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
27349>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
27350>>>>>>>>>    End_Procedure
27351>>>>>>>>>
27351>>>>>>>>>    Function ComShowGripper Returns Boolean
27353>>>>>>>>>        Boolean retVal
27353>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
27354>>>>>>>>>        Function_Return retVal
27355>>>>>>>>>    End_Function
27356>>>>>>>>>
27356>>>>>>>>>    Procedure Set ComShowGripper Boolean value
27358>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
27359>>>>>>>>>    End_Procedure
27360>>>>>>>>>
27360>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
27362>>>>>>>>>        XTPButtonStyle retVal
27362>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
27363>>>>>>>>>        Function_Return retVal
27364>>>>>>>>>    End_Function
27365>>>>>>>>>
27365>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
27367>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
27368>>>>>>>>>    End_Procedure
27369>>>>>>>>>
27369>>>>>>>>>    Function ComCustomizable Returns Boolean
27371>>>>>>>>>        Boolean retVal
27371>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
27372>>>>>>>>>        Function_Return retVal
27373>>>>>>>>>    End_Function
27374>>>>>>>>>
27374>>>>>>>>>    Procedure Set ComCustomizable Boolean value
27376>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
27377>>>>>>>>>    End_Procedure
27378>>>>>>>>>
27378>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
27380>>>>>>>>>        Boolean retVal
27380>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
27381>>>>>>>>>        Function_Return retVal
27382>>>>>>>>>    End_Function
27383>>>>>>>>>
27383>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
27385>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
27386>>>>>>>>>    End_Procedure
27387>>>>>>>>>
27387>>>>>>>>>    Function ComCustomControlKeyboardInteraction Returns Boolean
27389>>>>>>>>>        Boolean retVal
27389>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 302 OLE_VT_BOOL to retVal
27390>>>>>>>>>        Function_Return retVal
27391>>>>>>>>>    End_Function
27392>>>>>>>>>
27392>>>>>>>>>    Procedure Set ComCustomControlKeyboardInteraction Boolean value
27394>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 302 OLE_VT_BOOL to value
27395>>>>>>>>>    End_Procedure
27396>>>>>>>>>
27396>>>>>>>>>    Function ComSelectedControl Returns Variant
27398>>>>>>>>>        Variant retVal
27398>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
27399>>>>>>>>>        Function_Return retVal
27400>>>>>>>>>    End_Function
27401>>>>>>>>>
27401>>>>>>>>>    Procedure Set ComSelectedControl Variant value
27403>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
27404>>>>>>>>>    End_Procedure
27405>>>>>>>>>
27405>>>>>>>>>    Function ComType Returns XTPBarType
27407>>>>>>>>>        Handle hDispatchDriver
27407>>>>>>>>>        XTPBarType retVal
27407>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27408>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
27409>>>>>>>>>        Function_Return retVal
27410>>>>>>>>>    End_Function
27411>>>>>>>>>
27411>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
27413>>>>>>>>>        Handle hDispatchDriver
27413>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27414>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27415>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
27416>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
27417>>>>>>>>>    End_Procedure
27418>>>>>>>>>
27418>>>>>>>>>    Function ComBuiltIn Returns Boolean
27420>>>>>>>>>        Handle hDispatchDriver
27420>>>>>>>>>        Boolean retVal
27420>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27421>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
27422>>>>>>>>>        Function_Return retVal
27423>>>>>>>>>    End_Function
27424>>>>>>>>>
27424>>>>>>>>>    Procedure ComDelete
27426>>>>>>>>>        Handle hDispatchDriver
27426>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27427>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
27428>>>>>>>>>    End_Procedure
27429>>>>>>>>>
27429>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
27431>>>>>>>>>        Handle hDispatchDriver
27431>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27432>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
27433>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
27434>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
27435>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
27436>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
27437>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
27438>>>>>>>>>    End_Procedure
27439>>>>>>>>>
27439>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
27441>>>>>>>>>        Handle hDispatchDriver
27441>>>>>>>>>        OLE_HANDLE retVal
27441>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27442>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
27443>>>>>>>>>        Function_Return retVal
27444>>>>>>>>>    End_Function
27445>>>>>>>>>
27445>>>>>>>>>    Function ComCommandBars Returns Variant
27447>>>>>>>>>        Handle hDispatchDriver
27447>>>>>>>>>        Variant retVal
27447>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27448>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
27449>>>>>>>>>        Function_Return retVal
27450>>>>>>>>>    End_Function
27451>>>>>>>>>
27451>>>>>>>>>    Function ComControls Returns Variant
27453>>>>>>>>>        Handle hDispatchDriver
27453>>>>>>>>>        Variant retVal
27453>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27454>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
27455>>>>>>>>>        Function_Return retVal
27456>>>>>>>>>    End_Function
27457>>>>>>>>>
27457>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
27459>>>>>>>>>        Handle hDispatchDriver
27459>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27460>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
27461>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
27462>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
27463>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
27464>>>>>>>>>    End_Procedure
27465>>>>>>>>>
27465>>>>>>>>>    Function ComGetIconWidth Returns Integer
27467>>>>>>>>>        Handle hDispatchDriver
27467>>>>>>>>>        Integer retVal
27467>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27468>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
27469>>>>>>>>>        Function_Return retVal
27470>>>>>>>>>    End_Function
27471>>>>>>>>>
27471>>>>>>>>>    Function ComGetIconHeight Returns Integer
27473>>>>>>>>>        Handle hDispatchDriver
27473>>>>>>>>>        Integer retVal
27473>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27474>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
27475>>>>>>>>>        Function_Return retVal
27476>>>>>>>>>    End_Function
27477>>>>>>>>>
27477>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
27479>>>>>>>>>        Handle hDispatchDriver
27479>>>>>>>>>        Variant retVal
27479>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27480>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
27481>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
27482>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
27483>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
27484>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
27485>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
27486>>>>>>>>>        Function_Return retVal
27487>>>>>>>>>    End_Function
27488>>>>>>>>>
27488>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
27490>>>>>>>>>        Handle hDispatchDriver
27490>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27491>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
27492>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
27493>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
27494>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
27495>>>>>>>>>    End_Procedure
27496>>>>>>>>>
27496>>>>>>>>>    Procedure ComRedrawBar
27498>>>>>>>>>        Handle hDispatchDriver
27498>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27499>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
27500>>>>>>>>>    End_Procedure
27501>>>>>>>>>
27501>>>>>>>>>    Procedure ComRecalcLayout
27503>>>>>>>>>        Handle hDispatchDriver
27503>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27504>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
27505>>>>>>>>>    End_Procedure
27506>>>>>>>>>
27506>>>>>>>>>    Procedure ComReset
27508>>>>>>>>>        Handle hDispatchDriver
27508>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27509>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
27510>>>>>>>>>    End_Procedure
27511>>>>>>>>>
27511>>>>>>>>>    Function ComPopupContextMenu Variant llPopupBar Variant llFlags Variant llx Variant lly Returns Integer
27513>>>>>>>>>        Handle hDispatchDriver
27513>>>>>>>>>        Integer retVal
27513>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27514>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
27515>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llPopupBar
27516>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFlags
27517>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llx
27518>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lly
27519>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_I4 to retVal
27520>>>>>>>>>        Function_Return retVal
27521>>>>>>>>>    End_Function
27522>>>>>>>>>
27522>>>>>>>>>    Function ComPopupMiniToolBar Variant llFlags Variant llx Variant lly Returns Integer
27524>>>>>>>>>        Handle hDispatchDriver
27524>>>>>>>>>        Integer retVal
27524>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27525>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
27526>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFlags
27527>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llx
27528>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lly
27529>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_I4 to retVal
27530>>>>>>>>>        Function_Return retVal
27531>>>>>>>>>    End_Function
27532>>>>>>>>>End_Class
27533>>>>>>>>>
27533>>>>>>>>>// CLSID: {C0DE2000-CBD0-4AF0-9D33-EB56AB0648D8}
27533>>>>>>>>>Class cCJRecentFileList is a cComAutomationObject
27534>>>>>>>>>
27534>>>>>>>>>    Function ComMaxSize Returns Integer
27536>>>>>>>>>        Integer retVal
27536>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
27537>>>>>>>>>        Function_Return retVal
27538>>>>>>>>>    End_Function
27539>>>>>>>>>
27539>>>>>>>>>    Procedure Set ComMaxSize Integer value
27541>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
27542>>>>>>>>>    End_Procedure
27543>>>>>>>>>
27543>>>>>>>>>    Function ComPinable Returns Boolean
27545>>>>>>>>>        Boolean retVal
27545>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
27546>>>>>>>>>        Function_Return retVal
27547>>>>>>>>>    End_Function
27548>>>>>>>>>
27548>>>>>>>>>    Procedure Set ComPinable Boolean value
27550>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
27551>>>>>>>>>    End_Procedure
27552>>>>>>>>>
27552>>>>>>>>>    Function Com_NewEnum Returns Variant
27554>>>>>>>>>        Handle hDispatchDriver
27554>>>>>>>>>        Variant retVal
27554>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27555>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
27556>>>>>>>>>        Function_Return retVal
27557>>>>>>>>>    End_Function
27558>>>>>>>>>
27558>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
27560>>>>>>>>>        Handle hDispatchDriver
27560>>>>>>>>>        Variant retVal
27560>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27561>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27562>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
27563>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
27564>>>>>>>>>        Function_Return retVal
27565>>>>>>>>>    End_Function
27566>>>>>>>>>
27566>>>>>>>>>    Function ComAdd String llPathName Returns Variant
27568>>>>>>>>>        Handle hDispatchDriver
27568>>>>>>>>>        Variant retVal
27568>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27569>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27570>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPathName
27571>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
27572>>>>>>>>>        Function_Return retVal
27573>>>>>>>>>    End_Function
27574>>>>>>>>>
27574>>>>>>>>>    Function ComCount Returns Integer
27576>>>>>>>>>        Handle hDispatchDriver
27576>>>>>>>>>        Integer retVal
27576>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27577>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
27578>>>>>>>>>        Function_Return retVal
27579>>>>>>>>>    End_Function
27580>>>>>>>>>
27580>>>>>>>>>    Procedure ComRemove Integer llIndex
27582>>>>>>>>>        Handle hDispatchDriver
27582>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27583>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27584>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
27585>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
27586>>>>>>>>>    End_Procedure
27587>>>>>>>>>End_Class
27588>>>>>>>>>
27588>>>>>>>>>// CLSID: {C0DE2000-214E-44E4-854E-A40882ECD0FF}
27588>>>>>>>>>Class cCJRecentFileListItem is a cComAutomationObject
27589>>>>>>>>>
27589>>>>>>>>>    Function ComCaption Returns String
27591>>>>>>>>>        String retVal
27591>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
27592>>>>>>>>>        Function_Return retVal
27593>>>>>>>>>    End_Function
27594>>>>>>>>>
27594>>>>>>>>>    Procedure Set ComCaption String value
27596>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
27597>>>>>>>>>    End_Procedure
27598>>>>>>>>>
27598>>>>>>>>>    Function ComTag Returns String
27600>>>>>>>>>        String retVal
27600>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
27601>>>>>>>>>        Function_Return retVal
27602>>>>>>>>>    End_Function
27603>>>>>>>>>
27603>>>>>>>>>    Procedure Set ComTag String value
27605>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
27606>>>>>>>>>    End_Procedure
27607>>>>>>>>>
27607>>>>>>>>>    Function ComIconId Returns Integer
27609>>>>>>>>>        Integer retVal
27609>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
27610>>>>>>>>>        Function_Return retVal
27611>>>>>>>>>    End_Function
27612>>>>>>>>>
27612>>>>>>>>>    Procedure Set ComIconId Integer value
27614>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
27615>>>>>>>>>    End_Procedure
27616>>>>>>>>>
27616>>>>>>>>>    Function ComPinned Returns Boolean
27618>>>>>>>>>        Boolean retVal
27618>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
27619>>>>>>>>>        Function_Return retVal
27620>>>>>>>>>    End_Function
27621>>>>>>>>>
27621>>>>>>>>>    Procedure Set ComPinned Boolean value
27623>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
27624>>>>>>>>>    End_Procedure
27625>>>>>>>>>
27625>>>>>>>>>    Function ComPathName Returns String
27627>>>>>>>>>        Handle hDispatchDriver
27627>>>>>>>>>        String retVal
27627>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27628>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_BSTR to retVal
27629>>>>>>>>>        Function_Return retVal
27630>>>>>>>>>    End_Function
27631>>>>>>>>>End_Class
27632>>>>>>>>>
27632>>>>>>>>>// CLSID: {C0DE2000-DE30-460B-B55A-40D9D5229C79}
27632>>>>>>>>>Class cCJCommandBarSlider is a cComAutomationObject
27633>>>>>>>>>
27633>>>>>>>>>    Function ComChecked Returns Boolean
27635>>>>>>>>>        Boolean retVal
27635>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
27636>>>>>>>>>        Function_Return retVal
27637>>>>>>>>>    End_Function
27638>>>>>>>>>
27638>>>>>>>>>    Procedure Set ComChecked Boolean value
27640>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
27641>>>>>>>>>    End_Procedure
27642>>>>>>>>>
27642>>>>>>>>>    Function ComBeginGroup Returns Boolean
27644>>>>>>>>>        Boolean retVal
27644>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
27645>>>>>>>>>        Function_Return retVal
27646>>>>>>>>>    End_Function
27647>>>>>>>>>
27647>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
27649>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
27650>>>>>>>>>    End_Procedure
27651>>>>>>>>>
27651>>>>>>>>>    Function ComCaption Returns String
27653>>>>>>>>>        String retVal
27653>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
27654>>>>>>>>>        Function_Return retVal
27655>>>>>>>>>    End_Function
27656>>>>>>>>>
27656>>>>>>>>>    Procedure Set ComCaption String value
27658>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
27659>>>>>>>>>    End_Procedure
27660>>>>>>>>>
27660>>>>>>>>>    Function ComDescriptionText Returns String
27662>>>>>>>>>        String retVal
27662>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
27663>>>>>>>>>        Function_Return retVal
27664>>>>>>>>>    End_Function
27665>>>>>>>>>
27665>>>>>>>>>    Procedure Set ComDescriptionText String value
27667>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
27668>>>>>>>>>    End_Procedure
27669>>>>>>>>>
27669>>>>>>>>>    Function ComId Returns Integer
27671>>>>>>>>>        Integer retVal
27671>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
27672>>>>>>>>>        Function_Return retVal
27673>>>>>>>>>    End_Function
27674>>>>>>>>>
27674>>>>>>>>>    Procedure Set ComId Integer value
27676>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
27677>>>>>>>>>    End_Procedure
27678>>>>>>>>>
27678>>>>>>>>>    Function ComParameter Returns String
27680>>>>>>>>>        String retVal
27680>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
27681>>>>>>>>>        Function_Return retVal
27682>>>>>>>>>    End_Function
27683>>>>>>>>>
27683>>>>>>>>>    Procedure Set ComParameter String value
27685>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
27686>>>>>>>>>    End_Procedure
27687>>>>>>>>>
27687>>>>>>>>>    Function ComShortcutText Returns String
27689>>>>>>>>>        String retVal
27689>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
27690>>>>>>>>>        Function_Return retVal
27691>>>>>>>>>    End_Function
27692>>>>>>>>>
27692>>>>>>>>>    Procedure Set ComShortcutText String value
27694>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
27695>>>>>>>>>    End_Procedure
27696>>>>>>>>>
27696>>>>>>>>>    Function ComCustomShortcutText Returns String
27698>>>>>>>>>        String retVal
27698>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
27699>>>>>>>>>        Function_Return retVal
27700>>>>>>>>>    End_Function
27701>>>>>>>>>
27701>>>>>>>>>    Procedure Set ComCustomShortcutText String value
27703>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
27704>>>>>>>>>    End_Procedure
27705>>>>>>>>>
27705>>>>>>>>>    Function ComTooltipText Returns String
27707>>>>>>>>>        String retVal
27707>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
27708>>>>>>>>>        Function_Return retVal
27709>>>>>>>>>    End_Function
27710>>>>>>>>>
27710>>>>>>>>>    Procedure Set ComTooltipText String value
27712>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
27713>>>>>>>>>    End_Procedure
27714>>>>>>>>>
27714>>>>>>>>>    Function ComVisible Returns Boolean
27716>>>>>>>>>        Boolean retVal
27716>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
27717>>>>>>>>>        Function_Return retVal
27718>>>>>>>>>    End_Function
27719>>>>>>>>>
27719>>>>>>>>>    Procedure Set ComVisible Boolean value
27721>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
27722>>>>>>>>>    End_Procedure
27723>>>>>>>>>
27723>>>>>>>>>    Function ComEnabled Returns Boolean
27725>>>>>>>>>        Boolean retVal
27725>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
27726>>>>>>>>>        Function_Return retVal
27727>>>>>>>>>    End_Function
27728>>>>>>>>>
27728>>>>>>>>>    Procedure Set ComEnabled Boolean value
27730>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
27731>>>>>>>>>    End_Procedure
27732>>>>>>>>>
27732>>>>>>>>>    Function ComIconId Returns Integer
27734>>>>>>>>>        Integer retVal
27734>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
27735>>>>>>>>>        Function_Return retVal
27736>>>>>>>>>    End_Function
27737>>>>>>>>>
27737>>>>>>>>>    Procedure Set ComIconId Integer value
27739>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
27740>>>>>>>>>    End_Procedure
27741>>>>>>>>>
27741>>>>>>>>>    Function ComDefaultItem Returns Boolean
27743>>>>>>>>>        Boolean retVal
27743>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
27744>>>>>>>>>        Function_Return retVal
27745>>>>>>>>>    End_Function
27746>>>>>>>>>
27746>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
27748>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
27749>>>>>>>>>    End_Procedure
27750>>>>>>>>>
27750>>>>>>>>>    Function ComFlags Returns XTPControlFlags
27752>>>>>>>>>        XTPControlFlags retVal
27752>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
27753>>>>>>>>>        Function_Return retVal
27754>>>>>>>>>    End_Function
27755>>>>>>>>>
27755>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
27757>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
27758>>>>>>>>>    End_Procedure
27759>>>>>>>>>
27759>>>>>>>>>    Function ComCategory Returns String
27761>>>>>>>>>        String retVal
27761>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
27762>>>>>>>>>        Function_Return retVal
27763>>>>>>>>>    End_Function
27764>>>>>>>>>
27764>>>>>>>>>    Procedure Set ComCategory String value
27766>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
27767>>>>>>>>>    End_Procedure
27768>>>>>>>>>
27768>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
27770>>>>>>>>>        XTPControlHideFlags retVal
27770>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
27771>>>>>>>>>        Function_Return retVal
27772>>>>>>>>>    End_Function
27773>>>>>>>>>
27773>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
27775>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
27776>>>>>>>>>    End_Procedure
27777>>>>>>>>>
27777>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
27779>>>>>>>>>        Boolean retVal
27779>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
27780>>>>>>>>>        Function_Return retVal
27781>>>>>>>>>    End_Function
27782>>>>>>>>>
27782>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
27784>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
27785>>>>>>>>>    End_Procedure
27786>>>>>>>>>
27786>>>>>>>>>    Function ComAction Returns Variant
27788>>>>>>>>>        Variant retVal
27788>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
27789>>>>>>>>>        Function_Return retVal
27790>>>>>>>>>    End_Function
27791>>>>>>>>>
27791>>>>>>>>>    Procedure Set ComAction Variant value
27793>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
27794>>>>>>>>>    End_Procedure
27795>>>>>>>>>
27795>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
27797>>>>>>>>>        Integer retVal
27797>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
27798>>>>>>>>>        Function_Return retVal
27799>>>>>>>>>    End_Function
27800>>>>>>>>>
27800>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
27802>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
27803>>>>>>>>>    End_Procedure
27804>>>>>>>>>
27804>>>>>>>>>    Function ComWidth Returns Integer
27806>>>>>>>>>        Integer retVal
27806>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
27807>>>>>>>>>        Function_Return retVal
27808>>>>>>>>>    End_Function
27809>>>>>>>>>
27809>>>>>>>>>    Procedure Set ComWidth Integer value
27811>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
27812>>>>>>>>>    End_Procedure
27813>>>>>>>>>
27813>>>>>>>>>    Function ComHeight Returns Integer
27815>>>>>>>>>        Integer retVal
27815>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
27816>>>>>>>>>        Function_Return retVal
27817>>>>>>>>>    End_Function
27818>>>>>>>>>
27818>>>>>>>>>    Procedure Set ComHeight Integer value
27820>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
27821>>>>>>>>>    End_Procedure
27822>>>>>>>>>
27822>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
27824>>>>>>>>>        XTPButtonStyle retVal
27824>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
27825>>>>>>>>>        Function_Return retVal
27826>>>>>>>>>    End_Function
27827>>>>>>>>>
27827>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
27829>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
27830>>>>>>>>>    End_Procedure
27831>>>>>>>>>
27831>>>>>>>>>    Function ComKeyboardTip Returns String
27833>>>>>>>>>        String retVal
27833>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
27834>>>>>>>>>        Function_Return retVal
27835>>>>>>>>>    End_Function
27836>>>>>>>>>
27836>>>>>>>>>    Procedure Set ComKeyboardTip String value
27838>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
27839>>>>>>>>>    End_Procedure
27840>>>>>>>>>
27840>>>>>>>>>    Function ComPos Returns Integer
27842>>>>>>>>>        Integer retVal
27842>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
27843>>>>>>>>>        Function_Return retVal
27844>>>>>>>>>    End_Function
27845>>>>>>>>>
27845>>>>>>>>>    Procedure Set ComPos Integer value
27847>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
27848>>>>>>>>>    End_Procedure
27849>>>>>>>>>
27849>>>>>>>>>    Function ComMin Returns Integer
27851>>>>>>>>>        Integer retVal
27851>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to retVal
27852>>>>>>>>>        Function_Return retVal
27853>>>>>>>>>    End_Function
27854>>>>>>>>>
27854>>>>>>>>>    Procedure Set ComMin Integer value
27856>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to value
27857>>>>>>>>>    End_Procedure
27858>>>>>>>>>
27858>>>>>>>>>    Function ComMax Returns Integer
27860>>>>>>>>>        Integer retVal
27860>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to retVal
27861>>>>>>>>>        Function_Return retVal
27862>>>>>>>>>    End_Function
27863>>>>>>>>>
27863>>>>>>>>>    Procedure Set ComMax Integer value
27865>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to value
27866>>>>>>>>>    End_Procedure
27867>>>>>>>>>
27867>>>>>>>>>    Function ComControls Returns Variant
27869>>>>>>>>>        Handle hDispatchDriver
27869>>>>>>>>>        Variant retVal
27869>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27870>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
27871>>>>>>>>>        Function_Return retVal
27872>>>>>>>>>    End_Function
27873>>>>>>>>>
27873>>>>>>>>>    Function ComParent Returns Variant
27875>>>>>>>>>        Handle hDispatchDriver
27875>>>>>>>>>        Variant retVal
27875>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27876>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
27877>>>>>>>>>        Function_Return retVal
27878>>>>>>>>>    End_Function
27879>>>>>>>>>
27879>>>>>>>>>    Function ComIndex Returns Integer
27881>>>>>>>>>        Handle hDispatchDriver
27881>>>>>>>>>        Integer retVal
27881>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27882>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
27883>>>>>>>>>        Function_Return retVal
27884>>>>>>>>>    End_Function
27885>>>>>>>>>
27885>>>>>>>>>    Function ComType Returns XTPControlType
27887>>>>>>>>>        Handle hDispatchDriver
27887>>>>>>>>>        XTPControlType retVal
27887>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27888>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
27889>>>>>>>>>        Function_Return retVal
27890>>>>>>>>>    End_Function
27891>>>>>>>>>
27891>>>>>>>>>    Procedure ComDelete
27893>>>>>>>>>        Handle hDispatchDriver
27893>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27894>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
27895>>>>>>>>>    End_Procedure
27896>>>>>>>>>
27896>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
27898>>>>>>>>>        Handle hDispatchDriver
27898>>>>>>>>>        Variant retVal
27898>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27899>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
27900>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
27901>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
27902>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
27903>>>>>>>>>        Function_Return retVal
27904>>>>>>>>>    End_Function
27905>>>>>>>>>
27905>>>>>>>>>    Procedure ComSetFocus
27907>>>>>>>>>        Handle hDispatchDriver
27907>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27908>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
27909>>>>>>>>>    End_Procedure
27910>>>>>>>>>
27910>>>>>>>>>    Procedure ComExecute
27912>>>>>>>>>        Handle hDispatchDriver
27912>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27913>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
27914>>>>>>>>>    End_Procedure
27915>>>>>>>>>
27915>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
27917>>>>>>>>>        Handle hDispatchDriver
27917>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27918>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
27919>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
27920>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
27921>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
27922>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
27923>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
27924>>>>>>>>>    End_Procedure
27925>>>>>>>>>
27925>>>>>>>>>    Function ComRibbonGroup Returns Variant
27927>>>>>>>>>        Handle hDispatchDriver
27927>>>>>>>>>        Variant retVal
27927>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27928>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
27929>>>>>>>>>        Function_Return retVal
27930>>>>>>>>>    End_Function
27931>>>>>>>>>
27931>>>>>>>>>    Procedure ComReset
27933>>>>>>>>>        Handle hDispatchDriver
27933>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27934>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
27935>>>>>>>>>    End_Procedure
27936>>>>>>>>>
27936>>>>>>>>>    Function ComTop Returns Integer
27938>>>>>>>>>        Handle hDispatchDriver
27938>>>>>>>>>        Integer retVal
27938>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27939>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
27940>>>>>>>>>        Function_Return retVal
27941>>>>>>>>>    End_Function
27942>>>>>>>>>
27942>>>>>>>>>    Function ComLeft Returns Integer
27944>>>>>>>>>        Handle hDispatchDriver
27944>>>>>>>>>        Integer retVal
27944>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27945>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
27946>>>>>>>>>        Function_Return retVal
27947>>>>>>>>>    End_Function
27948>>>>>>>>>
27948>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
27950>>>>>>>>>        Handle hDispatchDriver
27950>>>>>>>>>        Variant retVal
27950>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27951>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27952>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
27953>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
27954>>>>>>>>>        Function_Return retVal
27955>>>>>>>>>    End_Function
27956>>>>>>>>>
27956>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
27958>>>>>>>>>        Handle hDispatchDriver
27958>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27959>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
27960>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
27961>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
27962>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
27963>>>>>>>>>    End_Procedure
27964>>>>>>>>>End_Class
27965>>>>>>>>>
27965>>>>>>>>>// CLSID: {C0DE2000-138E-4B16-8812-997A65E84AE6}
27965>>>>>>>>>Class cCJCommandBarProgress is a cComAutomationObject
27966>>>>>>>>>
27966>>>>>>>>>    Function ComChecked Returns Boolean
27968>>>>>>>>>        Boolean retVal
27968>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
27969>>>>>>>>>        Function_Return retVal
27970>>>>>>>>>    End_Function
27971>>>>>>>>>
27971>>>>>>>>>    Procedure Set ComChecked Boolean value
27973>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
27974>>>>>>>>>    End_Procedure
27975>>>>>>>>>
27975>>>>>>>>>    Function ComBeginGroup Returns Boolean
27977>>>>>>>>>        Boolean retVal
27977>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
27978>>>>>>>>>        Function_Return retVal
27979>>>>>>>>>    End_Function
27980>>>>>>>>>
27980>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
27982>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
27983>>>>>>>>>    End_Procedure
27984>>>>>>>>>
27984>>>>>>>>>    Function ComCaption Returns String
27986>>>>>>>>>        String retVal
27986>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
27987>>>>>>>>>        Function_Return retVal
27988>>>>>>>>>    End_Function
27989>>>>>>>>>
27989>>>>>>>>>    Procedure Set ComCaption String value
27991>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
27992>>>>>>>>>    End_Procedure
27993>>>>>>>>>
27993>>>>>>>>>    Function ComDescriptionText Returns String
27995>>>>>>>>>        String retVal
27995>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
27996>>>>>>>>>        Function_Return retVal
27997>>>>>>>>>    End_Function
27998>>>>>>>>>
27998>>>>>>>>>    Procedure Set ComDescriptionText String value
28000>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
28001>>>>>>>>>    End_Procedure
28002>>>>>>>>>
28002>>>>>>>>>    Function ComId Returns Integer
28004>>>>>>>>>        Integer retVal
28004>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
28005>>>>>>>>>        Function_Return retVal
28006>>>>>>>>>    End_Function
28007>>>>>>>>>
28007>>>>>>>>>    Procedure Set ComId Integer value
28009>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
28010>>>>>>>>>    End_Procedure
28011>>>>>>>>>
28011>>>>>>>>>    Function ComParameter Returns String
28013>>>>>>>>>        String retVal
28013>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
28014>>>>>>>>>        Function_Return retVal
28015>>>>>>>>>    End_Function
28016>>>>>>>>>
28016>>>>>>>>>    Procedure Set ComParameter String value
28018>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
28019>>>>>>>>>    End_Procedure
28020>>>>>>>>>
28020>>>>>>>>>    Function ComShortcutText Returns String
28022>>>>>>>>>        String retVal
28022>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
28023>>>>>>>>>        Function_Return retVal
28024>>>>>>>>>    End_Function
28025>>>>>>>>>
28025>>>>>>>>>    Procedure Set ComShortcutText String value
28027>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
28028>>>>>>>>>    End_Procedure
28029>>>>>>>>>
28029>>>>>>>>>    Function ComCustomShortcutText Returns String
28031>>>>>>>>>        String retVal
28031>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
28032>>>>>>>>>        Function_Return retVal
28033>>>>>>>>>    End_Function
28034>>>>>>>>>
28034>>>>>>>>>    Procedure Set ComCustomShortcutText String value
28036>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
28037>>>>>>>>>    End_Procedure
28038>>>>>>>>>
28038>>>>>>>>>    Function ComTooltipText Returns String
28040>>>>>>>>>        String retVal
28040>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
28041>>>>>>>>>        Function_Return retVal
28042>>>>>>>>>    End_Function
28043>>>>>>>>>
28043>>>>>>>>>    Procedure Set ComTooltipText String value
28045>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
28046>>>>>>>>>    End_Procedure
28047>>>>>>>>>
28047>>>>>>>>>    Function ComVisible Returns Boolean
28049>>>>>>>>>        Boolean retVal
28049>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
28050>>>>>>>>>        Function_Return retVal
28051>>>>>>>>>    End_Function
28052>>>>>>>>>
28052>>>>>>>>>    Procedure Set ComVisible Boolean value
28054>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
28055>>>>>>>>>    End_Procedure
28056>>>>>>>>>
28056>>>>>>>>>    Function ComEnabled Returns Boolean
28058>>>>>>>>>        Boolean retVal
28058>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
28059>>>>>>>>>        Function_Return retVal
28060>>>>>>>>>    End_Function
28061>>>>>>>>>
28061>>>>>>>>>    Procedure Set ComEnabled Boolean value
28063>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
28064>>>>>>>>>    End_Procedure
28065>>>>>>>>>
28065>>>>>>>>>    Function ComIconId Returns Integer
28067>>>>>>>>>        Integer retVal
28067>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
28068>>>>>>>>>        Function_Return retVal
28069>>>>>>>>>    End_Function
28070>>>>>>>>>
28070>>>>>>>>>    Procedure Set ComIconId Integer value
28072>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
28073>>>>>>>>>    End_Procedure
28074>>>>>>>>>
28074>>>>>>>>>    Function ComDefaultItem Returns Boolean
28076>>>>>>>>>        Boolean retVal
28076>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
28077>>>>>>>>>        Function_Return retVal
28078>>>>>>>>>    End_Function
28079>>>>>>>>>
28079>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
28081>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
28082>>>>>>>>>    End_Procedure
28083>>>>>>>>>
28083>>>>>>>>>    Function ComFlags Returns XTPControlFlags
28085>>>>>>>>>        XTPControlFlags retVal
28085>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
28086>>>>>>>>>        Function_Return retVal
28087>>>>>>>>>    End_Function
28088>>>>>>>>>
28088>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
28090>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
28091>>>>>>>>>    End_Procedure
28092>>>>>>>>>
28092>>>>>>>>>    Function ComCategory Returns String
28094>>>>>>>>>        String retVal
28094>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
28095>>>>>>>>>        Function_Return retVal
28096>>>>>>>>>    End_Function
28097>>>>>>>>>
28097>>>>>>>>>    Procedure Set ComCategory String value
28099>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
28100>>>>>>>>>    End_Procedure
28101>>>>>>>>>
28101>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
28103>>>>>>>>>        XTPControlHideFlags retVal
28103>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
28104>>>>>>>>>        Function_Return retVal
28105>>>>>>>>>    End_Function
28106>>>>>>>>>
28106>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
28108>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
28109>>>>>>>>>    End_Procedure
28110>>>>>>>>>
28110>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
28112>>>>>>>>>        Boolean retVal
28112>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
28113>>>>>>>>>        Function_Return retVal
28114>>>>>>>>>    End_Function
28115>>>>>>>>>
28115>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
28117>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
28118>>>>>>>>>    End_Procedure
28119>>>>>>>>>
28119>>>>>>>>>    Function ComAction Returns Variant
28121>>>>>>>>>        Variant retVal
28121>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
28122>>>>>>>>>        Function_Return retVal
28123>>>>>>>>>    End_Function
28124>>>>>>>>>
28124>>>>>>>>>    Procedure Set ComAction Variant value
28126>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
28127>>>>>>>>>    End_Procedure
28128>>>>>>>>>
28128>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
28130>>>>>>>>>        Integer retVal
28130>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
28131>>>>>>>>>        Function_Return retVal
28132>>>>>>>>>    End_Function
28133>>>>>>>>>
28133>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
28135>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
28136>>>>>>>>>    End_Procedure
28137>>>>>>>>>
28137>>>>>>>>>    Function ComWidth Returns Integer
28139>>>>>>>>>        Integer retVal
28139>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
28140>>>>>>>>>        Function_Return retVal
28141>>>>>>>>>    End_Function
28142>>>>>>>>>
28142>>>>>>>>>    Procedure Set ComWidth Integer value
28144>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
28145>>>>>>>>>    End_Procedure
28146>>>>>>>>>
28146>>>>>>>>>    Function ComHeight Returns Integer
28148>>>>>>>>>        Integer retVal
28148>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
28149>>>>>>>>>        Function_Return retVal
28150>>>>>>>>>    End_Function
28151>>>>>>>>>
28151>>>>>>>>>    Procedure Set ComHeight Integer value
28153>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
28154>>>>>>>>>    End_Procedure
28155>>>>>>>>>
28155>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
28157>>>>>>>>>        XTPButtonStyle retVal
28157>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
28158>>>>>>>>>        Function_Return retVal
28159>>>>>>>>>    End_Function
28160>>>>>>>>>
28160>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
28162>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
28163>>>>>>>>>    End_Procedure
28164>>>>>>>>>
28164>>>>>>>>>    Function ComKeyboardTip Returns String
28166>>>>>>>>>        String retVal
28166>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
28167>>>>>>>>>        Function_Return retVal
28168>>>>>>>>>    End_Function
28169>>>>>>>>>
28169>>>>>>>>>    Procedure Set ComKeyboardTip String value
28171>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
28172>>>>>>>>>    End_Procedure
28173>>>>>>>>>
28173>>>>>>>>>    Function ComPos Returns Integer
28175>>>>>>>>>        Integer retVal
28175>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
28176>>>>>>>>>        Function_Return retVal
28177>>>>>>>>>    End_Function
28178>>>>>>>>>
28178>>>>>>>>>    Procedure Set ComPos Integer value
28180>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
28181>>>>>>>>>    End_Procedure
28182>>>>>>>>>
28182>>>>>>>>>    Function ComMin Returns Integer
28184>>>>>>>>>        Integer retVal
28184>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to retVal
28185>>>>>>>>>        Function_Return retVal
28186>>>>>>>>>    End_Function
28187>>>>>>>>>
28187>>>>>>>>>    Procedure Set ComMin Integer value
28189>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to value
28190>>>>>>>>>    End_Procedure
28191>>>>>>>>>
28191>>>>>>>>>    Function ComMax Returns Integer
28193>>>>>>>>>        Integer retVal
28193>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to retVal
28194>>>>>>>>>        Function_Return retVal
28195>>>>>>>>>    End_Function
28196>>>>>>>>>
28196>>>>>>>>>    Procedure Set ComMax Integer value
28198>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to value
28199>>>>>>>>>    End_Procedure
28200>>>>>>>>>
28200>>>>>>>>>    Function ComControls Returns Variant
28202>>>>>>>>>        Handle hDispatchDriver
28202>>>>>>>>>        Variant retVal
28202>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28203>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
28204>>>>>>>>>        Function_Return retVal
28205>>>>>>>>>    End_Function
28206>>>>>>>>>
28206>>>>>>>>>    Function ComParent Returns Variant
28208>>>>>>>>>        Handle hDispatchDriver
28208>>>>>>>>>        Variant retVal
28208>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28209>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
28210>>>>>>>>>        Function_Return retVal
28211>>>>>>>>>    End_Function
28212>>>>>>>>>
28212>>>>>>>>>    Function ComIndex Returns Integer
28214>>>>>>>>>        Handle hDispatchDriver
28214>>>>>>>>>        Integer retVal
28214>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28215>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
28216>>>>>>>>>        Function_Return retVal
28217>>>>>>>>>    End_Function
28218>>>>>>>>>
28218>>>>>>>>>    Function ComType Returns XTPControlType
28220>>>>>>>>>        Handle hDispatchDriver
28220>>>>>>>>>        XTPControlType retVal
28220>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28221>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
28222>>>>>>>>>        Function_Return retVal
28223>>>>>>>>>    End_Function
28224>>>>>>>>>
28224>>>>>>>>>    Procedure ComDelete
28226>>>>>>>>>        Handle hDispatchDriver
28226>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28227>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
28228>>>>>>>>>    End_Procedure
28229>>>>>>>>>
28229>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
28231>>>>>>>>>        Handle hDispatchDriver
28231>>>>>>>>>        Variant retVal
28231>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28232>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28233>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
28234>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
28235>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
28236>>>>>>>>>        Function_Return retVal
28237>>>>>>>>>    End_Function
28238>>>>>>>>>
28238>>>>>>>>>    Procedure ComSetFocus
28240>>>>>>>>>        Handle hDispatchDriver
28240>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28241>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
28242>>>>>>>>>    End_Procedure
28243>>>>>>>>>
28243>>>>>>>>>    Procedure ComExecute
28245>>>>>>>>>        Handle hDispatchDriver
28245>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28246>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
28247>>>>>>>>>    End_Procedure
28248>>>>>>>>>
28248>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
28250>>>>>>>>>        Handle hDispatchDriver
28250>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28251>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
28252>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
28253>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
28254>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
28255>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
28256>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
28257>>>>>>>>>    End_Procedure
28258>>>>>>>>>
28258>>>>>>>>>    Function ComRibbonGroup Returns Variant
28260>>>>>>>>>        Handle hDispatchDriver
28260>>>>>>>>>        Variant retVal
28260>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28261>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
28262>>>>>>>>>        Function_Return retVal
28263>>>>>>>>>    End_Function
28264>>>>>>>>>
28264>>>>>>>>>    Procedure ComReset
28266>>>>>>>>>        Handle hDispatchDriver
28266>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28267>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
28268>>>>>>>>>    End_Procedure
28269>>>>>>>>>
28269>>>>>>>>>    Function ComTop Returns Integer
28271>>>>>>>>>        Handle hDispatchDriver
28271>>>>>>>>>        Integer retVal
28271>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28272>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
28273>>>>>>>>>        Function_Return retVal
28274>>>>>>>>>    End_Function
28275>>>>>>>>>
28275>>>>>>>>>    Function ComLeft Returns Integer
28277>>>>>>>>>        Handle hDispatchDriver
28277>>>>>>>>>        Integer retVal
28277>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28278>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
28279>>>>>>>>>        Function_Return retVal
28280>>>>>>>>>    End_Function
28281>>>>>>>>>
28281>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
28283>>>>>>>>>        Handle hDispatchDriver
28283>>>>>>>>>        Variant retVal
28283>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28284>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
28285>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
28286>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
28287>>>>>>>>>        Function_Return retVal
28288>>>>>>>>>    End_Function
28289>>>>>>>>>
28289>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
28291>>>>>>>>>        Handle hDispatchDriver
28291>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28292>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28293>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
28294>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
28295>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
28296>>>>>>>>>    End_Procedure
28297>>>>>>>>>End_Class
28298>>>>>>>>>
28298>>>>>>>>>// CLSID: {C0DE2000-939E-46A8-B81A-507496C30A68}
28298>>>>>>>>>Class cCJCommandBarScrollBar is a cComAutomationObject
28299>>>>>>>>>
28299>>>>>>>>>    Function ComChecked Returns Boolean
28301>>>>>>>>>        Boolean retVal
28301>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
28302>>>>>>>>>        Function_Return retVal
28303>>>>>>>>>    End_Function
28304>>>>>>>>>
28304>>>>>>>>>    Procedure Set ComChecked Boolean value
28306>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
28307>>>>>>>>>    End_Procedure
28308>>>>>>>>>
28308>>>>>>>>>    Function ComBeginGroup Returns Boolean
28310>>>>>>>>>        Boolean retVal
28310>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
28311>>>>>>>>>        Function_Return retVal
28312>>>>>>>>>    End_Function
28313>>>>>>>>>
28313>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
28315>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
28316>>>>>>>>>    End_Procedure
28317>>>>>>>>>
28317>>>>>>>>>    Function ComCaption Returns String
28319>>>>>>>>>        String retVal
28319>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
28320>>>>>>>>>        Function_Return retVal
28321>>>>>>>>>    End_Function
28322>>>>>>>>>
28322>>>>>>>>>    Procedure Set ComCaption String value
28324>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
28325>>>>>>>>>    End_Procedure
28326>>>>>>>>>
28326>>>>>>>>>    Function ComDescriptionText Returns String
28328>>>>>>>>>        String retVal
28328>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
28329>>>>>>>>>        Function_Return retVal
28330>>>>>>>>>    End_Function
28331>>>>>>>>>
28331>>>>>>>>>    Procedure Set ComDescriptionText String value
28333>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
28334>>>>>>>>>    End_Procedure
28335>>>>>>>>>
28335>>>>>>>>>    Function ComId Returns Integer
28337>>>>>>>>>        Integer retVal
28337>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
28338>>>>>>>>>        Function_Return retVal
28339>>>>>>>>>    End_Function
28340>>>>>>>>>
28340>>>>>>>>>    Procedure Set ComId Integer value
28342>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
28343>>>>>>>>>    End_Procedure
28344>>>>>>>>>
28344>>>>>>>>>    Function ComParameter Returns String
28346>>>>>>>>>        String retVal
28346>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
28347>>>>>>>>>        Function_Return retVal
28348>>>>>>>>>    End_Function
28349>>>>>>>>>
28349>>>>>>>>>    Procedure Set ComParameter String value
28351>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
28352>>>>>>>>>    End_Procedure
28353>>>>>>>>>
28353>>>>>>>>>    Function ComShortcutText Returns String
28355>>>>>>>>>        String retVal
28355>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
28356>>>>>>>>>        Function_Return retVal
28357>>>>>>>>>    End_Function
28358>>>>>>>>>
28358>>>>>>>>>    Procedure Set ComShortcutText String value
28360>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
28361>>>>>>>>>    End_Procedure
28362>>>>>>>>>
28362>>>>>>>>>    Function ComCustomShortcutText Returns String
28364>>>>>>>>>        String retVal
28364>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
28365>>>>>>>>>        Function_Return retVal
28366>>>>>>>>>    End_Function
28367>>>>>>>>>
28367>>>>>>>>>    Procedure Set ComCustomShortcutText String value
28369>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
28370>>>>>>>>>    End_Procedure
28371>>>>>>>>>
28371>>>>>>>>>    Function ComTooltipText Returns String
28373>>>>>>>>>        String retVal
28373>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
28374>>>>>>>>>        Function_Return retVal
28375>>>>>>>>>    End_Function
28376>>>>>>>>>
28376>>>>>>>>>    Procedure Set ComTooltipText String value
28378>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
28379>>>>>>>>>    End_Procedure
28380>>>>>>>>>
28380>>>>>>>>>    Function ComVisible Returns Boolean
28382>>>>>>>>>        Boolean retVal
28382>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
28383>>>>>>>>>        Function_Return retVal
28384>>>>>>>>>    End_Function
28385>>>>>>>>>
28385>>>>>>>>>    Procedure Set ComVisible Boolean value
28387>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
28388>>>>>>>>>    End_Procedure
28389>>>>>>>>>
28389>>>>>>>>>    Function ComEnabled Returns Boolean
28391>>>>>>>>>        Boolean retVal
28391>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
28392>>>>>>>>>        Function_Return retVal
28393>>>>>>>>>    End_Function
28394>>>>>>>>>
28394>>>>>>>>>    Procedure Set ComEnabled Boolean value
28396>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
28397>>>>>>>>>    End_Procedure
28398>>>>>>>>>
28398>>>>>>>>>    Function ComIconId Returns Integer
28400>>>>>>>>>        Integer retVal
28400>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
28401>>>>>>>>>        Function_Return retVal
28402>>>>>>>>>    End_Function
28403>>>>>>>>>
28403>>>>>>>>>    Procedure Set ComIconId Integer value
28405>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
28406>>>>>>>>>    End_Procedure
28407>>>>>>>>>
28407>>>>>>>>>    Function ComDefaultItem Returns Boolean
28409>>>>>>>>>        Boolean retVal
28409>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
28410>>>>>>>>>        Function_Return retVal
28411>>>>>>>>>    End_Function
28412>>>>>>>>>
28412>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
28414>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
28415>>>>>>>>>    End_Procedure
28416>>>>>>>>>
28416>>>>>>>>>    Function ComFlags Returns XTPControlFlags
28418>>>>>>>>>        XTPControlFlags retVal
28418>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
28419>>>>>>>>>        Function_Return retVal
28420>>>>>>>>>    End_Function
28421>>>>>>>>>
28421>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
28423>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
28424>>>>>>>>>    End_Procedure
28425>>>>>>>>>
28425>>>>>>>>>    Function ComCategory Returns String
28427>>>>>>>>>        String retVal
28427>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
28428>>>>>>>>>        Function_Return retVal
28429>>>>>>>>>    End_Function
28430>>>>>>>>>
28430>>>>>>>>>    Procedure Set ComCategory String value
28432>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
28433>>>>>>>>>    End_Procedure
28434>>>>>>>>>
28434>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
28436>>>>>>>>>        XTPControlHideFlags retVal
28436>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
28437>>>>>>>>>        Function_Return retVal
28438>>>>>>>>>    End_Function
28439>>>>>>>>>
28439>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
28441>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
28442>>>>>>>>>    End_Procedure
28443>>>>>>>>>
28443>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
28445>>>>>>>>>        Boolean retVal
28445>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
28446>>>>>>>>>        Function_Return retVal
28447>>>>>>>>>    End_Function
28448>>>>>>>>>
28448>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
28450>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
28451>>>>>>>>>    End_Procedure
28452>>>>>>>>>
28452>>>>>>>>>    Function ComAction Returns Variant
28454>>>>>>>>>        Variant retVal
28454>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
28455>>>>>>>>>        Function_Return retVal
28456>>>>>>>>>    End_Function
28457>>>>>>>>>
28457>>>>>>>>>    Procedure Set ComAction Variant value
28459>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
28460>>>>>>>>>    End_Procedure
28461>>>>>>>>>
28461>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
28463>>>>>>>>>        Integer retVal
28463>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
28464>>>>>>>>>        Function_Return retVal
28465>>>>>>>>>    End_Function
28466>>>>>>>>>
28466>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
28468>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
28469>>>>>>>>>    End_Procedure
28470>>>>>>>>>
28470>>>>>>>>>    Function ComWidth Returns Integer
28472>>>>>>>>>        Integer retVal
28472>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
28473>>>>>>>>>        Function_Return retVal
28474>>>>>>>>>    End_Function
28475>>>>>>>>>
28475>>>>>>>>>    Procedure Set ComWidth Integer value
28477>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
28478>>>>>>>>>    End_Procedure
28479>>>>>>>>>
28479>>>>>>>>>    Function ComHeight Returns Integer
28481>>>>>>>>>        Integer retVal
28481>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
28482>>>>>>>>>        Function_Return retVal
28483>>>>>>>>>    End_Function
28484>>>>>>>>>
28484>>>>>>>>>    Procedure Set ComHeight Integer value
28486>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
28487>>>>>>>>>    End_Procedure
28488>>>>>>>>>
28488>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
28490>>>>>>>>>        XTPButtonStyle retVal
28490>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
28491>>>>>>>>>        Function_Return retVal
28492>>>>>>>>>    End_Function
28493>>>>>>>>>
28493>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
28495>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
28496>>>>>>>>>    End_Procedure
28497>>>>>>>>>
28497>>>>>>>>>    Function ComKeyboardTip Returns String
28499>>>>>>>>>        String retVal
28499>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
28500>>>>>>>>>        Function_Return retVal
28501>>>>>>>>>    End_Function
28502>>>>>>>>>
28502>>>>>>>>>    Procedure Set ComKeyboardTip String value
28504>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
28505>>>>>>>>>    End_Procedure
28506>>>>>>>>>
28506>>>>>>>>>    Function ComPos Returns Integer
28508>>>>>>>>>        Integer retVal
28508>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
28509>>>>>>>>>        Function_Return retVal
28510>>>>>>>>>    End_Function
28511>>>>>>>>>
28511>>>>>>>>>    Procedure Set ComPos Integer value
28513>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
28514>>>>>>>>>    End_Procedure
28515>>>>>>>>>
28515>>>>>>>>>    Function ComMin Returns Integer
28517>>>>>>>>>        Integer retVal
28517>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to retVal
28518>>>>>>>>>        Function_Return retVal
28519>>>>>>>>>    End_Function
28520>>>>>>>>>
28520>>>>>>>>>    Procedure Set ComMin Integer value
28522>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to value
28523>>>>>>>>>    End_Procedure
28524>>>>>>>>>
28524>>>>>>>>>    Function ComMax Returns Integer
28526>>>>>>>>>        Integer retVal
28526>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to retVal
28527>>>>>>>>>        Function_Return retVal
28528>>>>>>>>>    End_Function
28529>>>>>>>>>
28529>>>>>>>>>    Procedure Set ComMax Integer value
28531>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to value
28532>>>>>>>>>    End_Procedure
28533>>>>>>>>>
28533>>>>>>>>>    Function ComScrollBarStyle Returns XTPScrollBarStyle
28535>>>>>>>>>        XTPScrollBarStyle retVal
28535>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 204 OLE_VT_I4 to retVal
28536>>>>>>>>>        Function_Return retVal
28537>>>>>>>>>    End_Function
28538>>>>>>>>>
28538>>>>>>>>>    Procedure Set ComScrollBarStyle XTPScrollBarStyle value
28540>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 204 OLE_VT_I4 to value
28541>>>>>>>>>    End_Procedure
28542>>>>>>>>>
28542>>>>>>>>>    Function ComControls Returns Variant
28544>>>>>>>>>        Handle hDispatchDriver
28544>>>>>>>>>        Variant retVal
28544>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28545>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
28546>>>>>>>>>        Function_Return retVal
28547>>>>>>>>>    End_Function
28548>>>>>>>>>
28548>>>>>>>>>    Function ComParent Returns Variant
28550>>>>>>>>>        Handle hDispatchDriver
28550>>>>>>>>>        Variant retVal
28550>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28551>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
28552>>>>>>>>>        Function_Return retVal
28553>>>>>>>>>    End_Function
28554>>>>>>>>>
28554>>>>>>>>>    Function ComIndex Returns Integer
28556>>>>>>>>>        Handle hDispatchDriver
28556>>>>>>>>>        Integer retVal
28556>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28557>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
28558>>>>>>>>>        Function_Return retVal
28559>>>>>>>>>    End_Function
28560>>>>>>>>>
28560>>>>>>>>>    Function ComType Returns XTPControlType
28562>>>>>>>>>        Handle hDispatchDriver
28562>>>>>>>>>        XTPControlType retVal
28562>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28563>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
28564>>>>>>>>>        Function_Return retVal
28565>>>>>>>>>    End_Function
28566>>>>>>>>>
28566>>>>>>>>>    Procedure ComDelete
28568>>>>>>>>>        Handle hDispatchDriver
28568>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28569>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
28570>>>>>>>>>    End_Procedure
28571>>>>>>>>>
28571>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
28573>>>>>>>>>        Handle hDispatchDriver
28573>>>>>>>>>        Variant retVal
28573>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28574>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28575>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
28576>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
28577>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
28578>>>>>>>>>        Function_Return retVal
28579>>>>>>>>>    End_Function
28580>>>>>>>>>
28580>>>>>>>>>    Procedure ComSetFocus
28582>>>>>>>>>        Handle hDispatchDriver
28582>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28583>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
28584>>>>>>>>>    End_Procedure
28585>>>>>>>>>
28585>>>>>>>>>    Procedure ComExecute
28587>>>>>>>>>        Handle hDispatchDriver
28587>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28588>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
28589>>>>>>>>>    End_Procedure
28590>>>>>>>>>
28590>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
28592>>>>>>>>>        Handle hDispatchDriver
28592>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28593>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
28594>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
28595>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
28596>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
28597>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
28598>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
28599>>>>>>>>>    End_Procedure
28600>>>>>>>>>
28600>>>>>>>>>    Function ComRibbonGroup Returns Variant
28602>>>>>>>>>        Handle hDispatchDriver
28602>>>>>>>>>        Variant retVal
28602>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28603>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
28604>>>>>>>>>        Function_Return retVal
28605>>>>>>>>>    End_Function
28606>>>>>>>>>
28606>>>>>>>>>    Procedure ComReset
28608>>>>>>>>>        Handle hDispatchDriver
28608>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28609>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
28610>>>>>>>>>    End_Procedure
28611>>>>>>>>>
28611>>>>>>>>>    Function ComTop Returns Integer
28613>>>>>>>>>        Handle hDispatchDriver
28613>>>>>>>>>        Integer retVal
28613>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28614>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
28615>>>>>>>>>        Function_Return retVal
28616>>>>>>>>>    End_Function
28617>>>>>>>>>
28617>>>>>>>>>    Function ComLeft Returns Integer
28619>>>>>>>>>        Handle hDispatchDriver
28619>>>>>>>>>        Integer retVal
28619>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28620>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
28621>>>>>>>>>        Function_Return retVal
28622>>>>>>>>>    End_Function
28623>>>>>>>>>
28623>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
28625>>>>>>>>>        Handle hDispatchDriver
28625>>>>>>>>>        Variant retVal
28625>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28626>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
28627>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
28628>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
28629>>>>>>>>>        Function_Return retVal
28630>>>>>>>>>    End_Function
28631>>>>>>>>>
28631>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
28633>>>>>>>>>        Handle hDispatchDriver
28633>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28634>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28635>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
28636>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
28637>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
28638>>>>>>>>>    End_Procedure
28639>>>>>>>>>End_Class
28640>>>>>>>>>
28640>>>>>>>>>// CLSID: {C0DE2000-C46D-4A11-B782-A5A3684189A4}
28640>>>>>>>>>Class cCJCommandBarPopupColor is a cComAutomationObject
28641>>>>>>>>>
28641>>>>>>>>>    Function ComChecked Returns Boolean
28643>>>>>>>>>        Boolean retVal
28643>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
28644>>>>>>>>>        Function_Return retVal
28645>>>>>>>>>    End_Function
28646>>>>>>>>>
28646>>>>>>>>>    Procedure Set ComChecked Boolean value
28648>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
28649>>>>>>>>>    End_Procedure
28650>>>>>>>>>
28650>>>>>>>>>    Function ComBeginGroup Returns Boolean
28652>>>>>>>>>        Boolean retVal
28652>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
28653>>>>>>>>>        Function_Return retVal
28654>>>>>>>>>    End_Function
28655>>>>>>>>>
28655>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
28657>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
28658>>>>>>>>>    End_Procedure
28659>>>>>>>>>
28659>>>>>>>>>    Function ComCaption Returns String
28661>>>>>>>>>        String retVal
28661>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
28662>>>>>>>>>        Function_Return retVal
28663>>>>>>>>>    End_Function
28664>>>>>>>>>
28664>>>>>>>>>    Procedure Set ComCaption String value
28666>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
28667>>>>>>>>>    End_Procedure
28668>>>>>>>>>
28668>>>>>>>>>    Function ComDescriptionText Returns String
28670>>>>>>>>>        String retVal
28670>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
28671>>>>>>>>>        Function_Return retVal
28672>>>>>>>>>    End_Function
28673>>>>>>>>>
28673>>>>>>>>>    Procedure Set ComDescriptionText String value
28675>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
28676>>>>>>>>>    End_Procedure
28677>>>>>>>>>
28677>>>>>>>>>    Function ComId Returns Integer
28679>>>>>>>>>        Integer retVal
28679>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
28680>>>>>>>>>        Function_Return retVal
28681>>>>>>>>>    End_Function
28682>>>>>>>>>
28682>>>>>>>>>    Procedure Set ComId Integer value
28684>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
28685>>>>>>>>>    End_Procedure
28686>>>>>>>>>
28686>>>>>>>>>    Function ComParameter Returns String
28688>>>>>>>>>        String retVal
28688>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
28689>>>>>>>>>        Function_Return retVal
28690>>>>>>>>>    End_Function
28691>>>>>>>>>
28691>>>>>>>>>    Procedure Set ComParameter String value
28693>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
28694>>>>>>>>>    End_Procedure
28695>>>>>>>>>
28695>>>>>>>>>    Function ComShortcutText Returns String
28697>>>>>>>>>        String retVal
28697>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
28698>>>>>>>>>        Function_Return retVal
28699>>>>>>>>>    End_Function
28700>>>>>>>>>
28700>>>>>>>>>    Procedure Set ComShortcutText String value
28702>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
28703>>>>>>>>>    End_Procedure
28704>>>>>>>>>
28704>>>>>>>>>    Function ComCustomShortcutText Returns String
28706>>>>>>>>>        String retVal
28706>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
28707>>>>>>>>>        Function_Return retVal
28708>>>>>>>>>    End_Function
28709>>>>>>>>>
28709>>>>>>>>>    Procedure Set ComCustomShortcutText String value
28711>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
28712>>>>>>>>>    End_Procedure
28713>>>>>>>>>
28713>>>>>>>>>    Function ComTooltipText Returns String
28715>>>>>>>>>        String retVal
28715>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
28716>>>>>>>>>        Function_Return retVal
28717>>>>>>>>>    End_Function
28718>>>>>>>>>
28718>>>>>>>>>    Procedure Set ComTooltipText String value
28720>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
28721>>>>>>>>>    End_Procedure
28722>>>>>>>>>
28722>>>>>>>>>    Function ComVisible Returns Boolean
28724>>>>>>>>>        Boolean retVal
28724>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
28725>>>>>>>>>        Function_Return retVal
28726>>>>>>>>>    End_Function
28727>>>>>>>>>
28727>>>>>>>>>    Procedure Set ComVisible Boolean value
28729>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
28730>>>>>>>>>    End_Procedure
28731>>>>>>>>>
28731>>>>>>>>>    Function ComEnabled Returns Boolean
28733>>>>>>>>>        Boolean retVal
28733>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
28734>>>>>>>>>        Function_Return retVal
28735>>>>>>>>>    End_Function
28736>>>>>>>>>
28736>>>>>>>>>    Procedure Set ComEnabled Boolean value
28738>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
28739>>>>>>>>>    End_Procedure
28740>>>>>>>>>
28740>>>>>>>>>    Function ComIconId Returns Integer
28742>>>>>>>>>        Integer retVal
28742>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
28743>>>>>>>>>        Function_Return retVal
28744>>>>>>>>>    End_Function
28745>>>>>>>>>
28745>>>>>>>>>    Procedure Set ComIconId Integer value
28747>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
28748>>>>>>>>>    End_Procedure
28749>>>>>>>>>
28749>>>>>>>>>    Function ComDefaultItem Returns Boolean
28751>>>>>>>>>        Boolean retVal
28751>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
28752>>>>>>>>>        Function_Return retVal
28753>>>>>>>>>    End_Function
28754>>>>>>>>>
28754>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
28756>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
28757>>>>>>>>>    End_Procedure
28758>>>>>>>>>
28758>>>>>>>>>    Function ComFlags Returns XTPControlFlags
28760>>>>>>>>>        XTPControlFlags retVal
28760>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
28761>>>>>>>>>        Function_Return retVal
28762>>>>>>>>>    End_Function
28763>>>>>>>>>
28763>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
28765>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
28766>>>>>>>>>    End_Procedure
28767>>>>>>>>>
28767>>>>>>>>>    Function ComCategory Returns String
28769>>>>>>>>>        String retVal
28769>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
28770>>>>>>>>>        Function_Return retVal
28771>>>>>>>>>    End_Function
28772>>>>>>>>>
28772>>>>>>>>>    Procedure Set ComCategory String value
28774>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
28775>>>>>>>>>    End_Procedure
28776>>>>>>>>>
28776>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
28778>>>>>>>>>        XTPControlHideFlags retVal
28778>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
28779>>>>>>>>>        Function_Return retVal
28780>>>>>>>>>    End_Function
28781>>>>>>>>>
28781>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
28783>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
28784>>>>>>>>>    End_Procedure
28785>>>>>>>>>
28785>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
28787>>>>>>>>>        Boolean retVal
28787>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
28788>>>>>>>>>        Function_Return retVal
28789>>>>>>>>>    End_Function
28790>>>>>>>>>
28790>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
28792>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
28793>>>>>>>>>    End_Procedure
28794>>>>>>>>>
28794>>>>>>>>>    Function ComAction Returns Variant
28796>>>>>>>>>        Variant retVal
28796>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
28797>>>>>>>>>        Function_Return retVal
28798>>>>>>>>>    End_Function
28799>>>>>>>>>
28799>>>>>>>>>    Procedure Set ComAction Variant value
28801>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
28802>>>>>>>>>    End_Procedure
28803>>>>>>>>>
28803>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
28805>>>>>>>>>        Integer retVal
28805>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
28806>>>>>>>>>        Function_Return retVal
28807>>>>>>>>>    End_Function
28808>>>>>>>>>
28808>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
28810>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
28811>>>>>>>>>    End_Procedure
28812>>>>>>>>>
28812>>>>>>>>>    Function ComWidth Returns Integer
28814>>>>>>>>>        Integer retVal
28814>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
28815>>>>>>>>>        Function_Return retVal
28816>>>>>>>>>    End_Function
28817>>>>>>>>>
28817>>>>>>>>>    Procedure Set ComWidth Integer value
28819>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
28820>>>>>>>>>    End_Procedure
28821>>>>>>>>>
28821>>>>>>>>>    Function ComHeight Returns Integer
28823>>>>>>>>>        Integer retVal
28823>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
28824>>>>>>>>>        Function_Return retVal
28825>>>>>>>>>    End_Function
28826>>>>>>>>>
28826>>>>>>>>>    Procedure Set ComHeight Integer value
28828>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
28829>>>>>>>>>    End_Procedure
28830>>>>>>>>>
28830>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
28832>>>>>>>>>        XTPButtonStyle retVal
28832>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
28833>>>>>>>>>        Function_Return retVal
28834>>>>>>>>>    End_Function
28835>>>>>>>>>
28835>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
28837>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
28838>>>>>>>>>    End_Procedure
28839>>>>>>>>>
28839>>>>>>>>>    Function ComKeyboardTip Returns String
28841>>>>>>>>>        String retVal
28841>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
28842>>>>>>>>>        Function_Return retVal
28843>>>>>>>>>    End_Function
28844>>>>>>>>>
28844>>>>>>>>>    Procedure Set ComKeyboardTip String value
28846>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
28847>>>>>>>>>    End_Procedure
28848>>>>>>>>>
28848>>>>>>>>>    Function ComColor Returns OLE_COLOR
28850>>>>>>>>>        OLE_COLOR retVal
28850>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
28851>>>>>>>>>        Function_Return retVal
28852>>>>>>>>>    End_Function
28853>>>>>>>>>
28853>>>>>>>>>    Procedure Set ComColor OLE_COLOR value
28855>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
28856>>>>>>>>>    End_Procedure
28857>>>>>>>>>
28857>>>>>>>>>    Function ComCommandBar Returns Variant
28859>>>>>>>>>        Variant retVal
28859>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
28860>>>>>>>>>        Function_Return retVal
28861>>>>>>>>>    End_Function
28862>>>>>>>>>
28862>>>>>>>>>    Procedure Set ComCommandBar Variant value
28864>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
28865>>>>>>>>>    End_Procedure
28866>>>>>>>>>
28866>>>>>>>>>    Function ComControls Returns Variant
28868>>>>>>>>>        Handle hDispatchDriver
28868>>>>>>>>>        Variant retVal
28868>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28869>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
28870>>>>>>>>>        Function_Return retVal
28871>>>>>>>>>    End_Function
28872>>>>>>>>>
28872>>>>>>>>>    Function ComParent Returns Variant
28874>>>>>>>>>        Handle hDispatchDriver
28874>>>>>>>>>        Variant retVal
28874>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28875>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
28876>>>>>>>>>        Function_Return retVal
28877>>>>>>>>>    End_Function
28878>>>>>>>>>
28878>>>>>>>>>    Function ComIndex Returns Integer
28880>>>>>>>>>        Handle hDispatchDriver
28880>>>>>>>>>        Integer retVal
28880>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28881>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
28882>>>>>>>>>        Function_Return retVal
28883>>>>>>>>>    End_Function
28884>>>>>>>>>
28884>>>>>>>>>    Function ComType Returns XTPControlType
28886>>>>>>>>>        Handle hDispatchDriver
28886>>>>>>>>>        XTPControlType retVal
28886>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28887>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
28888>>>>>>>>>        Function_Return retVal
28889>>>>>>>>>    End_Function
28890>>>>>>>>>
28890>>>>>>>>>    Procedure ComDelete
28892>>>>>>>>>        Handle hDispatchDriver
28892>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28893>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
28894>>>>>>>>>    End_Procedure
28895>>>>>>>>>
28895>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
28897>>>>>>>>>        Handle hDispatchDriver
28897>>>>>>>>>        Variant retVal
28897>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28898>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28899>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
28900>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
28901>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
28902>>>>>>>>>        Function_Return retVal
28903>>>>>>>>>    End_Function
28904>>>>>>>>>
28904>>>>>>>>>    Procedure ComSetFocus
28906>>>>>>>>>        Handle hDispatchDriver
28906>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28907>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
28908>>>>>>>>>    End_Procedure
28909>>>>>>>>>
28909>>>>>>>>>    Procedure ComExecute
28911>>>>>>>>>        Handle hDispatchDriver
28911>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28912>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
28913>>>>>>>>>    End_Procedure
28914>>>>>>>>>
28914>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
28916>>>>>>>>>        Handle hDispatchDriver
28916>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28917>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
28918>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
28919>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
28920>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
28921>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
28922>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
28923>>>>>>>>>    End_Procedure
28924>>>>>>>>>
28924>>>>>>>>>    Function ComRibbonGroup Returns Variant
28926>>>>>>>>>        Handle hDispatchDriver
28926>>>>>>>>>        Variant retVal
28926>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28927>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
28928>>>>>>>>>        Function_Return retVal
28929>>>>>>>>>    End_Function
28930>>>>>>>>>
28930>>>>>>>>>    Procedure ComReset
28932>>>>>>>>>        Handle hDispatchDriver
28932>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28933>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
28934>>>>>>>>>    End_Procedure
28935>>>>>>>>>
28935>>>>>>>>>    Function ComTop Returns Integer
28937>>>>>>>>>        Handle hDispatchDriver
28937>>>>>>>>>        Integer retVal
28937>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28938>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
28939>>>>>>>>>        Function_Return retVal
28940>>>>>>>>>    End_Function
28941>>>>>>>>>
28941>>>>>>>>>    Function ComLeft Returns Integer
28943>>>>>>>>>        Handle hDispatchDriver
28943>>>>>>>>>        Integer retVal
28943>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28944>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
28945>>>>>>>>>        Function_Return retVal
28946>>>>>>>>>    End_Function
28947>>>>>>>>>
28947>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
28949>>>>>>>>>        Handle hDispatchDriver
28949>>>>>>>>>        Variant retVal
28949>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28950>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
28951>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
28952>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
28953>>>>>>>>>        Function_Return retVal
28954>>>>>>>>>    End_Function
28955>>>>>>>>>
28955>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
28957>>>>>>>>>        Handle hDispatchDriver
28957>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28958>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28959>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
28960>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
28961>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
28962>>>>>>>>>    End_Procedure
28963>>>>>>>>>End_Class
28964>>>>>>>>>
28964>>>>>>>>>// CLSID: {C0DE2000-0835-494F-8FFB-1516C2D7D943}
28964>>>>>>>>>Class cCJCommandBarControlColorSelector is a cComAutomationObject
28965>>>>>>>>>
28965>>>>>>>>>    Function ComChecked Returns Boolean
28967>>>>>>>>>        Boolean retVal
28967>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
28968>>>>>>>>>        Function_Return retVal
28969>>>>>>>>>    End_Function
28970>>>>>>>>>
28970>>>>>>>>>    Procedure Set ComChecked Boolean value
28972>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
28973>>>>>>>>>    End_Procedure
28974>>>>>>>>>
28974>>>>>>>>>    Function ComBeginGroup Returns Boolean
28976>>>>>>>>>        Boolean retVal
28976>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
28977>>>>>>>>>        Function_Return retVal
28978>>>>>>>>>    End_Function
28979>>>>>>>>>
28979>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
28981>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
28982>>>>>>>>>    End_Procedure
28983>>>>>>>>>
28983>>>>>>>>>    Function ComCaption Returns String
28985>>>>>>>>>        String retVal
28985>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
28986>>>>>>>>>        Function_Return retVal
28987>>>>>>>>>    End_Function
28988>>>>>>>>>
28988>>>>>>>>>    Procedure Set ComCaption String value
28990>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
28991>>>>>>>>>    End_Procedure
28992>>>>>>>>>
28992>>>>>>>>>    Function ComDescriptionText Returns String
28994>>>>>>>>>        String retVal
28994>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
28995>>>>>>>>>        Function_Return retVal
28996>>>>>>>>>    End_Function
28997>>>>>>>>>
28997>>>>>>>>>    Procedure Set ComDescriptionText String value
28999>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
29000>>>>>>>>>    End_Procedure
29001>>>>>>>>>
29001>>>>>>>>>    Function ComId Returns Integer
29003>>>>>>>>>        Integer retVal
29003>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
29004>>>>>>>>>        Function_Return retVal
29005>>>>>>>>>    End_Function
29006>>>>>>>>>
29006>>>>>>>>>    Procedure Set ComId Integer value
29008>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
29009>>>>>>>>>    End_Procedure
29010>>>>>>>>>
29010>>>>>>>>>    Function ComParameter Returns String
29012>>>>>>>>>        String retVal
29012>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
29013>>>>>>>>>        Function_Return retVal
29014>>>>>>>>>    End_Function
29015>>>>>>>>>
29015>>>>>>>>>    Procedure Set ComParameter String value
29017>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
29018>>>>>>>>>    End_Procedure
29019>>>>>>>>>
29019>>>>>>>>>    Function ComShortcutText Returns String
29021>>>>>>>>>        String retVal
29021>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
29022>>>>>>>>>        Function_Return retVal
29023>>>>>>>>>    End_Function
29024>>>>>>>>>
29024>>>>>>>>>    Procedure Set ComShortcutText String value
29026>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
29027>>>>>>>>>    End_Procedure
29028>>>>>>>>>
29028>>>>>>>>>    Function ComCustomShortcutText Returns String
29030>>>>>>>>>        String retVal
29030>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
29031>>>>>>>>>        Function_Return retVal
29032>>>>>>>>>    End_Function
29033>>>>>>>>>
29033>>>>>>>>>    Procedure Set ComCustomShortcutText String value
29035>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
29036>>>>>>>>>    End_Procedure
29037>>>>>>>>>
29037>>>>>>>>>    Function ComTooltipText Returns String
29039>>>>>>>>>        String retVal
29039>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
29040>>>>>>>>>        Function_Return retVal
29041>>>>>>>>>    End_Function
29042>>>>>>>>>
29042>>>>>>>>>    Procedure Set ComTooltipText String value
29044>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
29045>>>>>>>>>    End_Procedure
29046>>>>>>>>>
29046>>>>>>>>>    Function ComVisible Returns Boolean
29048>>>>>>>>>        Boolean retVal
29048>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
29049>>>>>>>>>        Function_Return retVal
29050>>>>>>>>>    End_Function
29051>>>>>>>>>
29051>>>>>>>>>    Procedure Set ComVisible Boolean value
29053>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
29054>>>>>>>>>    End_Procedure
29055>>>>>>>>>
29055>>>>>>>>>    Function ComEnabled Returns Boolean
29057>>>>>>>>>        Boolean retVal
29057>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
29058>>>>>>>>>        Function_Return retVal
29059>>>>>>>>>    End_Function
29060>>>>>>>>>
29060>>>>>>>>>    Procedure Set ComEnabled Boolean value
29062>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
29063>>>>>>>>>    End_Procedure
29064>>>>>>>>>
29064>>>>>>>>>    Function ComIconId Returns Integer
29066>>>>>>>>>        Integer retVal
29066>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
29067>>>>>>>>>        Function_Return retVal
29068>>>>>>>>>    End_Function
29069>>>>>>>>>
29069>>>>>>>>>    Procedure Set ComIconId Integer value
29071>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
29072>>>>>>>>>    End_Procedure
29073>>>>>>>>>
29073>>>>>>>>>    Function ComDefaultItem Returns Boolean
29075>>>>>>>>>        Boolean retVal
29075>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
29076>>>>>>>>>        Function_Return retVal
29077>>>>>>>>>    End_Function
29078>>>>>>>>>
29078>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
29080>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
29081>>>>>>>>>    End_Procedure
29082>>>>>>>>>
29082>>>>>>>>>    Function ComFlags Returns XTPControlFlags
29084>>>>>>>>>        XTPControlFlags retVal
29084>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
29085>>>>>>>>>        Function_Return retVal
29086>>>>>>>>>    End_Function
29087>>>>>>>>>
29087>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
29089>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
29090>>>>>>>>>    End_Procedure
29091>>>>>>>>>
29091>>>>>>>>>    Function ComCategory Returns String
29093>>>>>>>>>        String retVal
29093>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
29094>>>>>>>>>        Function_Return retVal
29095>>>>>>>>>    End_Function
29096>>>>>>>>>
29096>>>>>>>>>    Procedure Set ComCategory String value
29098>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
29099>>>>>>>>>    End_Procedure
29100>>>>>>>>>
29100>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
29102>>>>>>>>>        XTPControlHideFlags retVal
29102>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
29103>>>>>>>>>        Function_Return retVal
29104>>>>>>>>>    End_Function
29105>>>>>>>>>
29105>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
29107>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
29108>>>>>>>>>    End_Procedure
29109>>>>>>>>>
29109>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
29111>>>>>>>>>        Boolean retVal
29111>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
29112>>>>>>>>>        Function_Return retVal
29113>>>>>>>>>    End_Function
29114>>>>>>>>>
29114>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
29116>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
29117>>>>>>>>>    End_Procedure
29118>>>>>>>>>
29118>>>>>>>>>    Function ComAction Returns Variant
29120>>>>>>>>>        Variant retVal
29120>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
29121>>>>>>>>>        Function_Return retVal
29122>>>>>>>>>    End_Function
29123>>>>>>>>>
29123>>>>>>>>>    Procedure Set ComAction Variant value
29125>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
29126>>>>>>>>>    End_Procedure
29127>>>>>>>>>
29127>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
29129>>>>>>>>>        Integer retVal
29129>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
29130>>>>>>>>>        Function_Return retVal
29131>>>>>>>>>    End_Function
29132>>>>>>>>>
29132>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
29134>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
29135>>>>>>>>>    End_Procedure
29136>>>>>>>>>
29136>>>>>>>>>    Function ComWidth Returns Integer
29138>>>>>>>>>        Integer retVal
29138>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
29139>>>>>>>>>        Function_Return retVal
29140>>>>>>>>>    End_Function
29141>>>>>>>>>
29141>>>>>>>>>    Procedure Set ComWidth Integer value
29143>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
29144>>>>>>>>>    End_Procedure
29145>>>>>>>>>
29145>>>>>>>>>    Function ComHeight Returns Integer
29147>>>>>>>>>        Integer retVal
29147>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
29148>>>>>>>>>        Function_Return retVal
29149>>>>>>>>>    End_Function
29150>>>>>>>>>
29150>>>>>>>>>    Procedure Set ComHeight Integer value
29152>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
29153>>>>>>>>>    End_Procedure
29154>>>>>>>>>
29154>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
29156>>>>>>>>>        XTPButtonStyle retVal
29156>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
29157>>>>>>>>>        Function_Return retVal
29158>>>>>>>>>    End_Function
29159>>>>>>>>>
29159>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
29161>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
29162>>>>>>>>>    End_Procedure
29163>>>>>>>>>
29163>>>>>>>>>    Function ComKeyboardTip Returns String
29165>>>>>>>>>        String retVal
29165>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
29166>>>>>>>>>        Function_Return retVal
29167>>>>>>>>>    End_Function
29168>>>>>>>>>
29168>>>>>>>>>    Procedure Set ComKeyboardTip String value
29170>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
29171>>>>>>>>>    End_Procedure
29172>>>>>>>>>
29172>>>>>>>>>    Function ComColor Returns OLE_COLOR
29174>>>>>>>>>        OLE_COLOR retVal
29174>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
29175>>>>>>>>>        Function_Return retVal
29176>>>>>>>>>    End_Function
29177>>>>>>>>>
29177>>>>>>>>>    Procedure Set ComColor OLE_COLOR value
29179>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
29180>>>>>>>>>    End_Procedure
29181>>>>>>>>>
29181>>>>>>>>>    Function ComControls Returns Variant
29183>>>>>>>>>        Handle hDispatchDriver
29183>>>>>>>>>        Variant retVal
29183>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29184>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
29185>>>>>>>>>        Function_Return retVal
29186>>>>>>>>>    End_Function
29187>>>>>>>>>
29187>>>>>>>>>    Function ComParent Returns Variant
29189>>>>>>>>>        Handle hDispatchDriver
29189>>>>>>>>>        Variant retVal
29189>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29190>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29191>>>>>>>>>        Function_Return retVal
29192>>>>>>>>>    End_Function
29193>>>>>>>>>
29193>>>>>>>>>    Function ComIndex Returns Integer
29195>>>>>>>>>        Handle hDispatchDriver
29195>>>>>>>>>        Integer retVal
29195>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29196>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
29197>>>>>>>>>        Function_Return retVal
29198>>>>>>>>>    End_Function
29199>>>>>>>>>
29199>>>>>>>>>    Function ComType Returns XTPControlType
29201>>>>>>>>>        Handle hDispatchDriver
29201>>>>>>>>>        XTPControlType retVal
29201>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29202>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
29203>>>>>>>>>        Function_Return retVal
29204>>>>>>>>>    End_Function
29205>>>>>>>>>
29205>>>>>>>>>    Procedure ComDelete
29207>>>>>>>>>        Handle hDispatchDriver
29207>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29208>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
29209>>>>>>>>>    End_Procedure
29210>>>>>>>>>
29210>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
29212>>>>>>>>>        Handle hDispatchDriver
29212>>>>>>>>>        Variant retVal
29212>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29213>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
29214>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
29215>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
29216>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
29217>>>>>>>>>        Function_Return retVal
29218>>>>>>>>>    End_Function
29219>>>>>>>>>
29219>>>>>>>>>    Procedure ComSetFocus
29221>>>>>>>>>        Handle hDispatchDriver
29221>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29222>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
29223>>>>>>>>>    End_Procedure
29224>>>>>>>>>
29224>>>>>>>>>    Procedure ComExecute
29226>>>>>>>>>        Handle hDispatchDriver
29226>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29227>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
29228>>>>>>>>>    End_Procedure
29229>>>>>>>>>
29229>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
29231>>>>>>>>>        Handle hDispatchDriver
29231>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29232>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
29233>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
29234>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
29235>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
29236>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
29237>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
29238>>>>>>>>>    End_Procedure
29239>>>>>>>>>
29239>>>>>>>>>    Function ComRibbonGroup Returns Variant
29241>>>>>>>>>        Handle hDispatchDriver
29241>>>>>>>>>        Variant retVal
29241>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29242>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
29243>>>>>>>>>        Function_Return retVal
29244>>>>>>>>>    End_Function
29245>>>>>>>>>
29245>>>>>>>>>    Procedure ComReset
29247>>>>>>>>>        Handle hDispatchDriver
29247>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29248>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
29249>>>>>>>>>    End_Procedure
29250>>>>>>>>>
29250>>>>>>>>>    Function ComTop Returns Integer
29252>>>>>>>>>        Handle hDispatchDriver
29252>>>>>>>>>        Integer retVal
29252>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29253>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
29254>>>>>>>>>        Function_Return retVal
29255>>>>>>>>>    End_Function
29256>>>>>>>>>
29256>>>>>>>>>    Function ComLeft Returns Integer
29258>>>>>>>>>        Handle hDispatchDriver
29258>>>>>>>>>        Integer retVal
29258>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29259>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
29260>>>>>>>>>        Function_Return retVal
29261>>>>>>>>>    End_Function
29262>>>>>>>>>
29262>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
29264>>>>>>>>>        Handle hDispatchDriver
29264>>>>>>>>>        Variant retVal
29264>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29265>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
29266>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
29267>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
29268>>>>>>>>>        Function_Return retVal
29269>>>>>>>>>    End_Function
29270>>>>>>>>>
29270>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
29272>>>>>>>>>        Handle hDispatchDriver
29272>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29273>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
29274>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
29275>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
29276>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
29277>>>>>>>>>    End_Procedure
29278>>>>>>>>>End_Class
29279>>>>>>>>>
29279>>>>>>>>>// CLSID: {C0DE2000-9D54-40A3-B626-83FB0F80B8F4}
29279>>>>>>>>>Class cCJRibbonBackstageView is a cComAutomationObject
29280>>>>>>>>>
29280>>>>>>>>>    Function ComStyle Returns XTPRibbonBackstageStyle
29282>>>>>>>>>        XTPRibbonBackstageStyle retVal
29282>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1102 OLE_VT_I4 to retVal
29283>>>>>>>>>        Function_Return retVal
29284>>>>>>>>>    End_Function
29285>>>>>>>>>
29285>>>>>>>>>    Procedure Set ComStyle XTPRibbonBackstageStyle value
29287>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1102 OLE_VT_I4 to value
29288>>>>>>>>>    End_Procedure
29289>>>>>>>>>
29289>>>>>>>>>    Function ComControls Returns Variant
29291>>>>>>>>>        Handle hDispatchDriver
29291>>>>>>>>>        Variant retVal
29291>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29292>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29293>>>>>>>>>        Function_Return retVal
29294>>>>>>>>>    End_Function
29295>>>>>>>>>
29295>>>>>>>>>    Function ComAddCommand Integer llId String llCaption Returns Variant
29297>>>>>>>>>        Handle hDispatchDriver
29297>>>>>>>>>        Variant retVal
29297>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29298>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
29299>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
29300>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
29301>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1000 OLE_VT_DISPATCH to retVal
29302>>>>>>>>>        Function_Return retVal
29303>>>>>>>>>    End_Function
29304>>>>>>>>>
29304>>>>>>>>>    Function ComAddTab Integer llId String llCaption OLE_HANDLE llControlPaneHwnd Returns Variant
29306>>>>>>>>>        Handle hDispatchDriver
29306>>>>>>>>>        Variant retVal
29306>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29307>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
29308>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
29309>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
29310>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llControlPaneHwnd
29311>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1001 OLE_VT_DISPATCH to retVal
29312>>>>>>>>>        Function_Return retVal
29313>>>>>>>>>    End_Function
29314>>>>>>>>>
29314>>>>>>>>>    Procedure ComClose
29316>>>>>>>>>        Handle hDispatchDriver
29316>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29317>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1002 OLE_VT_VOID
29318>>>>>>>>>    End_Procedure
29319>>>>>>>>>
29319>>>>>>>>>    Procedure ComSetTheme XTPVisualTheme llTheme
29321>>>>>>>>>        Handle hDispatchDriver
29321>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29322>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
29323>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTheme
29324>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1003 OLE_VT_VOID
29325>>>>>>>>>    End_Procedure
29326>>>>>>>>>
29326>>>>>>>>>    Function ComAddMenuSeparator Returns Variant
29328>>>>>>>>>        Handle hDispatchDriver
29328>>>>>>>>>        Variant retVal
29328>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29329>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1004 OLE_VT_DISPATCH to retVal
29330>>>>>>>>>        Function_Return retVal
29331>>>>>>>>>    End_Function
29332>>>>>>>>>
29332>>>>>>>>>    Function ComGetForeColor Returns OLE_COLOR
29334>>>>>>>>>        Handle hDispatchDriver
29334>>>>>>>>>        OLE_COLOR retVal
29334>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29335>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1100 OLE_VT_I4 to retVal
29336>>>>>>>>>        Function_Return retVal
29337>>>>>>>>>    End_Function
29338>>>>>>>>>
29338>>>>>>>>>    Function ComGetBackColor Returns OLE_COLOR
29340>>>>>>>>>        Handle hDispatchDriver
29340>>>>>>>>>        OLE_COLOR retVal
29340>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29341>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1101 OLE_VT_I4 to retVal
29342>>>>>>>>>        Function_Return retVal
29343>>>>>>>>>    End_Function
29344>>>>>>>>>End_Class
29345>>>>>>>>>
29345>>>>>>>>>// CLSID: {C0DE2000-2F93-41B3-B097-2DA852A25BFC}
29345>>>>>>>>>Class cCJRibbonBackstageCommand is a cComAutomationObject
29346>>>>>>>>>
29346>>>>>>>>>    Function ComCaption Returns String
29348>>>>>>>>>        String retVal
29348>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
29349>>>>>>>>>        Function_Return retVal
29350>>>>>>>>>    End_Function
29351>>>>>>>>>
29351>>>>>>>>>    Procedure Set ComCaption String value
29353>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
29354>>>>>>>>>    End_Procedure
29355>>>>>>>>>
29355>>>>>>>>>    Function ComDescriptionText Returns String
29357>>>>>>>>>        String retVal
29357>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
29358>>>>>>>>>        Function_Return retVal
29359>>>>>>>>>    End_Function
29360>>>>>>>>>
29360>>>>>>>>>    Procedure Set ComDescriptionText String value
29362>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
29363>>>>>>>>>    End_Procedure
29364>>>>>>>>>
29364>>>>>>>>>    Function ComId Returns Integer
29366>>>>>>>>>        Integer retVal
29366>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
29367>>>>>>>>>        Function_Return retVal
29368>>>>>>>>>    End_Function
29369>>>>>>>>>
29369>>>>>>>>>    Procedure Set ComId Integer value
29371>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
29372>>>>>>>>>    End_Procedure
29373>>>>>>>>>
29373>>>>>>>>>    Function ComParameter Returns String
29375>>>>>>>>>        String retVal
29375>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
29376>>>>>>>>>        Function_Return retVal
29377>>>>>>>>>    End_Function
29378>>>>>>>>>
29378>>>>>>>>>    Procedure Set ComParameter String value
29380>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
29381>>>>>>>>>    End_Procedure
29382>>>>>>>>>
29382>>>>>>>>>    Function ComEnabled Returns Boolean
29384>>>>>>>>>        Boolean retVal
29384>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
29385>>>>>>>>>        Function_Return retVal
29386>>>>>>>>>    End_Function
29387>>>>>>>>>
29387>>>>>>>>>    Procedure Set ComEnabled Boolean value
29389>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
29390>>>>>>>>>    End_Procedure
29391>>>>>>>>>
29391>>>>>>>>>    Function ComVisible Returns Boolean
29393>>>>>>>>>        Boolean retVal
29393>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
29394>>>>>>>>>        Function_Return retVal
29395>>>>>>>>>    End_Function
29396>>>>>>>>>
29396>>>>>>>>>    Procedure Set ComVisible Boolean value
29398>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
29399>>>>>>>>>    End_Procedure
29400>>>>>>>>>
29400>>>>>>>>>    Function ComIconId Returns Integer
29402>>>>>>>>>        Integer retVal
29402>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
29403>>>>>>>>>        Function_Return retVal
29404>>>>>>>>>    End_Function
29405>>>>>>>>>
29405>>>>>>>>>    Procedure Set ComIconId Integer value
29407>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
29408>>>>>>>>>    End_Procedure
29409>>>>>>>>>
29409>>>>>>>>>    Function ComAction Returns Variant
29411>>>>>>>>>        Variant retVal
29411>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
29412>>>>>>>>>        Function_Return retVal
29413>>>>>>>>>    End_Function
29414>>>>>>>>>
29414>>>>>>>>>    Procedure Set ComAction Variant value
29416>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
29417>>>>>>>>>    End_Procedure
29418>>>>>>>>>
29418>>>>>>>>>    Function ComControls Returns Variant
29420>>>>>>>>>        Handle hDispatchDriver
29420>>>>>>>>>        Variant retVal
29420>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29421>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
29422>>>>>>>>>        Function_Return retVal
29423>>>>>>>>>    End_Function
29424>>>>>>>>>
29424>>>>>>>>>    Function ComParent Returns Variant
29426>>>>>>>>>        Handle hDispatchDriver
29426>>>>>>>>>        Variant retVal
29426>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29427>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29428>>>>>>>>>        Function_Return retVal
29429>>>>>>>>>    End_Function
29430>>>>>>>>>
29430>>>>>>>>>    Function ComIndex Returns Integer
29432>>>>>>>>>        Handle hDispatchDriver
29432>>>>>>>>>        Integer retVal
29432>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29433>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
29434>>>>>>>>>        Function_Return retVal
29435>>>>>>>>>    End_Function
29436>>>>>>>>>
29436>>>>>>>>>    Procedure ComDelete
29438>>>>>>>>>        Handle hDispatchDriver
29438>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29439>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
29440>>>>>>>>>    End_Procedure
29441>>>>>>>>>End_Class
29442>>>>>>>>>
29442>>>>>>>>>// CLSID: {C0DE2000-FCAC-4EF3-B27E-2E8A04B170E4}
29442>>>>>>>>>Class cCJRibbonBackstageTab is a cComAutomationObject
29443>>>>>>>>>
29443>>>>>>>>>    Function ComCaption Returns String
29445>>>>>>>>>        String retVal
29445>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
29446>>>>>>>>>        Function_Return retVal
29447>>>>>>>>>    End_Function
29448>>>>>>>>>
29448>>>>>>>>>    Procedure Set ComCaption String value
29450>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
29451>>>>>>>>>    End_Procedure
29452>>>>>>>>>
29452>>>>>>>>>    Function ComDescriptionText Returns String
29454>>>>>>>>>        String retVal
29454>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
29455>>>>>>>>>        Function_Return retVal
29456>>>>>>>>>    End_Function
29457>>>>>>>>>
29457>>>>>>>>>    Procedure Set ComDescriptionText String value
29459>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
29460>>>>>>>>>    End_Procedure
29461>>>>>>>>>
29461>>>>>>>>>    Function ComId Returns Integer
29463>>>>>>>>>        Integer retVal
29463>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
29464>>>>>>>>>        Function_Return retVal
29465>>>>>>>>>    End_Function
29466>>>>>>>>>
29466>>>>>>>>>    Procedure Set ComId Integer value
29468>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
29469>>>>>>>>>    End_Procedure
29470>>>>>>>>>
29470>>>>>>>>>    Function ComParameter Returns String
29472>>>>>>>>>        String retVal
29472>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
29473>>>>>>>>>        Function_Return retVal
29474>>>>>>>>>    End_Function
29475>>>>>>>>>
29475>>>>>>>>>    Procedure Set ComParameter String value
29477>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
29478>>>>>>>>>    End_Procedure
29479>>>>>>>>>
29479>>>>>>>>>    Function ComEnabled Returns Boolean
29481>>>>>>>>>        Boolean retVal
29481>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
29482>>>>>>>>>        Function_Return retVal
29483>>>>>>>>>    End_Function
29484>>>>>>>>>
29484>>>>>>>>>    Procedure Set ComEnabled Boolean value
29486>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
29487>>>>>>>>>    End_Procedure
29488>>>>>>>>>
29488>>>>>>>>>    Function ComVisible Returns Boolean
29490>>>>>>>>>        Boolean retVal
29490>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
29491>>>>>>>>>        Function_Return retVal
29492>>>>>>>>>    End_Function
29493>>>>>>>>>
29493>>>>>>>>>    Procedure Set ComVisible Boolean value
29495>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
29496>>>>>>>>>    End_Procedure
29497>>>>>>>>>
29497>>>>>>>>>    Function ComIconId Returns Integer
29499>>>>>>>>>        Integer retVal
29499>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
29500>>>>>>>>>        Function_Return retVal
29501>>>>>>>>>    End_Function
29502>>>>>>>>>
29502>>>>>>>>>    Procedure Set ComIconId Integer value
29504>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
29505>>>>>>>>>    End_Procedure
29506>>>>>>>>>
29506>>>>>>>>>    Function ComDefaultItem Returns Boolean
29508>>>>>>>>>        Boolean retVal
29508>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
29509>>>>>>>>>        Function_Return retVal
29510>>>>>>>>>    End_Function
29511>>>>>>>>>
29511>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
29513>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
29514>>>>>>>>>    End_Procedure
29515>>>>>>>>>
29515>>>>>>>>>    Function ComAction Returns Variant
29517>>>>>>>>>        Variant retVal
29517>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
29518>>>>>>>>>        Function_Return retVal
29519>>>>>>>>>    End_Function
29520>>>>>>>>>
29520>>>>>>>>>    Procedure Set ComAction Variant value
29522>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
29523>>>>>>>>>    End_Procedure
29524>>>>>>>>>
29524>>>>>>>>>    Function ComControls Returns Variant
29526>>>>>>>>>        Handle hDispatchDriver
29526>>>>>>>>>        Variant retVal
29526>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29527>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
29528>>>>>>>>>        Function_Return retVal
29529>>>>>>>>>    End_Function
29530>>>>>>>>>
29530>>>>>>>>>    Function ComParent Returns Variant
29532>>>>>>>>>        Handle hDispatchDriver
29532>>>>>>>>>        Variant retVal
29532>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29533>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29534>>>>>>>>>        Function_Return retVal
29535>>>>>>>>>    End_Function
29536>>>>>>>>>
29536>>>>>>>>>    Function ComIndex Returns Integer
29538>>>>>>>>>        Handle hDispatchDriver
29538>>>>>>>>>        Integer retVal
29538>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29539>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
29540>>>>>>>>>        Function_Return retVal
29541>>>>>>>>>    End_Function
29542>>>>>>>>>
29542>>>>>>>>>    Procedure ComDelete
29544>>>>>>>>>        Handle hDispatchDriver
29544>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29545>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
29546>>>>>>>>>    End_Procedure
29547>>>>>>>>>End_Class
29548>>>>>>>>>
29548>>>>>>>>>// CLSID: {C0DE2000-3890-484C-A9B0-978E6AA0AA8D}
29548>>>>>>>>>Class cCJRibbonBackstageMenuSeparator is a cComAutomationObject
29549>>>>>>>>>
29549>>>>>>>>>    Function ComId Returns Integer
29551>>>>>>>>>        Integer retVal
29551>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
29552>>>>>>>>>        Function_Return retVal
29553>>>>>>>>>    End_Function
29554>>>>>>>>>
29554>>>>>>>>>    Procedure Set ComId Integer value
29556>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
29557>>>>>>>>>    End_Procedure
29558>>>>>>>>>
29558>>>>>>>>>    Function ComVisible Returns Boolean
29560>>>>>>>>>        Boolean retVal
29560>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
29561>>>>>>>>>        Function_Return retVal
29562>>>>>>>>>    End_Function
29563>>>>>>>>>
29563>>>>>>>>>    Procedure Set ComVisible Boolean value
29565>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
29566>>>>>>>>>    End_Procedure
29567>>>>>>>>>
29567>>>>>>>>>    Function ComDefaultItem Returns Boolean
29569>>>>>>>>>        Boolean retVal
29569>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
29570>>>>>>>>>        Function_Return retVal
29571>>>>>>>>>    End_Function
29572>>>>>>>>>
29572>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
29574>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
29575>>>>>>>>>    End_Procedure
29576>>>>>>>>>
29576>>>>>>>>>    Function ComControls Returns Variant
29578>>>>>>>>>        Handle hDispatchDriver
29578>>>>>>>>>        Variant retVal
29578>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29579>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
29580>>>>>>>>>        Function_Return retVal
29581>>>>>>>>>    End_Function
29582>>>>>>>>>
29582>>>>>>>>>    Function ComParent Returns Variant
29584>>>>>>>>>        Handle hDispatchDriver
29584>>>>>>>>>        Variant retVal
29584>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29585>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29586>>>>>>>>>        Function_Return retVal
29587>>>>>>>>>    End_Function
29588>>>>>>>>>
29588>>>>>>>>>    Function ComIndex Returns Integer
29590>>>>>>>>>        Handle hDispatchDriver
29590>>>>>>>>>        Integer retVal
29590>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29591>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
29592>>>>>>>>>        Function_Return retVal
29593>>>>>>>>>    End_Function
29594>>>>>>>>>
29594>>>>>>>>>    Procedure ComDelete
29596>>>>>>>>>        Handle hDispatchDriver
29596>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29597>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
29598>>>>>>>>>    End_Procedure
29599>>>>>>>>>End_Class
29600>>>>>>>>>
29600>>>>>>>Use tWinStructs.pkg
29600>>>>>>>Use Winkern.pkg
29600>>>>>>>
29600>>>>>>>// idle timer used for updates.
29600>>>>>>>Class cCJIdleHandler is a cIdleHandler
29601>>>>>>>    Procedure OnIdle
29603>>>>>>>        Delegate Send Update
29605>>>>>>>    End_Procedure
29606>>>>>>>End_Class
29607>>>>>>>
29607>>>>>>>// xtpThemeOffice2007 was removed by CJ
29607>>>>>>>Define xtpThemeOffice2007 for xtpThemeResource
29607>>>>>>>
29607>>>>>>>// define custom theme names. We use these to turn these into usable
29607>>>>>>>// themes and their dll/ini files. This is in addition to whatever codejock provides
29607>>>>>>>
29607>>>>>>>Enum_List
29607>>>>>>>    Define xtpThemeOffice2007Aqua for 1024
29607>>>>>>>    Define xtpThemeOffice2007Blue
29607>>>>>>>    Define xtpThemeOffice2007Black
29607>>>>>>>    Define xtpThemeOffice2007Silver
29607>>>>>>>    
29607>>>>>>>    Define xtpThemeOffice2010
29607>>>>>>>    Define xtpThemeOffice2010Blue
29607>>>>>>>    Define xtpThemeOffice2010Black
29607>>>>>>>    Define xtpThemeOffice2010Silver
29607>>>>>>>    
29607>>>>>>>    Define xtpThemeOffice2013Word
29607>>>>>>>    Define xtpThemeOffice2013Outlook
29607>>>>>>>    Define xtpThemeOffice2013Excel
29607>>>>>>>    Define xtpThemeOffice2013PowerPoint
29607>>>>>>>    Define xtpThemeOffice2013Access
29607>>>>>>>    Define xtpThemeOffice2013Publisher
29607>>>>>>>    Define xtpThemeOffice2013OneNote
29607>>>>>>>    
29607>>>>>>>    Define xtpThemeOffice2016Access
29607>>>>>>>    Define xtpThemeOffice2016Excel
29607>>>>>>>    Define xtpThemeOffice2016OneNote
29607>>>>>>>    Define xtpThemeOffice2016Outlook
29607>>>>>>>    Define xtpThemeOffice2016Publisher
29607>>>>>>>    Define xtpThemeOffice2016PowerPoint
29607>>>>>>>    Define xtpThemeOffice2016Word
29607>>>>>>>    
29607>>>>>>>    Define xtpThemeWindows7
29607>>>>>>>    
29607>>>>>>>    Define xtpThemeVisualStudio2015Blue
29607>>>>>>>    
29607>>>>>>>    Define xtpThemeVisualStudio2015Dark
29607>>>>>>>    Define xtpThemeVisualStudio2015Light
29607>>>>>>>    
29607>>>>>>>End_Enum_List
29607>>>>>>>
29607>>>>>>>// Used for key bindings along with the VK_ defintions
29607>>>>>>>Define xtpKey_None for 0
29607>>>>>>>Define xtpKey_Shift for 4
29607>>>>>>>Define xtpKey_Ctrl for 8
29607>>>>>>>Define xtpKey_Alt for 16
29607>>>>>>>
29607>>>>>>>Define ID_CommandBarsAutoStart for 20001 // start for auto assigned menu items
29607>>>>>>>Define ID_StatusBarsAutoStart  for 10001 // start for auto assigned status panes
29607>>>>>>>Define ID_CommandBarIDAutoStart for 5000 // start for auto assigned commandbar BarIds
29607>>>>>>>Define ID_ImageAutoStart for 5000 // start for auto assigned image ids
29607>>>>>>>
29607>>>>>>>// options for loading and saving command bar layout
29607>>>>>>>Enum_List
29607>>>>>>>    Define rlNoSaveRestore         // don't load or save anything
29607>>>>>>>    Define rlSaveRestoreLayout     // just load and save the layout (position of toolbars)
29607>>>>>>>    Define rlSaveRestoreFullLayout // load/save layout plus addition info such as theme, large icons, etc.
29607>>>>>>>    Define rlSaveRestoreAll        // load and save layout and the controls (useful if you customize)
29607>>>>>>>End_Enum_List
29607>>>>>>>
29607>>>>>>>Enum_List
29607>>>>>>>    Define stNoStretch
29607>>>>>>>    Define stStretch
29607>>>>>>>    Define stStretchShared
29607>>>>>>>End_Enum_List
29607>>>>>>>
29607>>>>>>>// special StatusBar Id valus (piID) values for statusbar panes.
29607>>>>>>>Enum_List
29607>>>>>>>    Define sbpIDAutoAssign for -1    // ID will be auto assigned during pane's end_construct_Object
29607>>>>>>>    Define sbpIDIdlePane   for 0     // Used to display idle text and the DescriptionText of controls on mouse over.
29607>>>>>>>    Define sbpIDCapslock   for 59137 // Indicates whether CAPS Lock is on or off.
29607>>>>>>>    Define sbpIDNumLock    for 59138 // Indicates whether Num Lock is on or off.
29607>>>>>>>    Define sbpIDScrollLock for 59139 // Indicates whether Scroll Lock is on or off
29607>>>>>>>End_Enum_List
29607>>>>>>>
29607>>>>>>>// this keeps track of a global commandbars, which should be the Main menu's commandBars object
29607>>>>>>>// context menus use this to attach to commandbars
29607>>>>>>>Global_Variable Integer ghoCommandBars
29607>>>>>>>Move 0 to ghoCommandBars
29608>>>>>>>
29608>>>>>>>
29608>>>>>>>
29608>>>>>>>Class cCJCommandBarSystem is a cCJCommandBars
29609>>>>>>>    
29609>>>>>>>    Procedure Construct_Object
29611>>>>>>>        Handle hoTimer hoMain
29611>>>>>>>        Forward Send Construct_Object
29613>>>>>>>        
29613>>>>>>>        // do we save/restore command bars and if so how
29613>>>>>>>        Property Integer peRestoreLayout rlNoSaveRestore
29614>>>>>>>        
29614>>>>>>>        // This allows developers to control when a load layout should not be used
29614>>>>>>>        // because it is out of date. Just keep incrementing this value when you change
29614>>>>>>>        // something that is not compatible
29614>>>>>>>        Property Integer piLayoutBuild 1
29615>>>>>>>        
29615>>>>>>>        // Name used to save a store commandbars. Can be changed to create
29615>>>>>>>        // custom setups.
29615>>>>>>>        Property String  psLayoutSection "CommandBars"
29616>>>>>>>        
29616>>>>>>>        // if true this expects client area and a panel. Auto assigned
29616>>>>>>>        Property Boolean pbMDIMenu False
29617>>>>>>>        
29617>>>>>>>        Property Handle phoStatusBar 0 // assigned automatically
29618>>>>>>>        
29618>>>>>>>        Property Integer pePrivateVisualTheme xtpThemeWhidbey
29619>>>>>>>        Property Boolean pbPrivateEnableCustomization False
29620>>>>>>>        Property Boolean pbPrivateAltDragCustomization False
29621>>>>>>>        Property Integer pePrivateAnimation xtpAnimateWindowsDefault
29622>>>>>>>        Property Boolean pbPrivateLargeIcons False
29623>>>>>>>        Property Boolean pbPrivateShowTextBelowIcons False
29624>>>>>>>        Property Boolean pbPrivateAlwaysShowFullMenus True
29625>>>>>>>        Property Boolean pbPrivateShowFullAfterDelay True
29626>>>>>>>        Property Boolean pbPrivateOfficeStyleDisabledIcons False
29627>>>>>>>        Property Boolean pbPrivateIconsWithShadow True
29628>>>>>>>        Property Boolean pbPrivateToolBarScreenTips True
29629>>>>>>>        Property Boolean pbPrivateShowPopupBarToolTips False
29630>>>>>>>        Property Boolean pbPrivateToolBarAccelTips True
29631>>>>>>>        Property Boolean pbPrivateAutoHideUnusedPopups False
29632>>>>>>>        Property Boolean pbPrivateShowExpandButtonAlways False
29633>>>>>>>        Property Boolean pbPrivateSyncFloatingToolbars True
29634>>>>>>>        Property Boolean pbPrivateFloatToolbarsByDoubleClick False
29635>>>>>>>        Property Boolean pbPrivateAutoResizeIcons False
29636>>>>>>>        
29636>>>>>>>        Property Boolean pbCustomizeShowKeyboardPage False
29637>>>>>>>        Property Boolean pbCustomizeShowOptionsPage False
29638>>>>>>>        
29638>>>>>>>        // This is design-time only.
29638>>>>>>>        Property Boolean pbTabbedWorkspaces False
29639>>>>>>>        // This is mostly design-time only.
29639>>>>>>>        Property Boolean pbCenterTabbedViews True
29640>>>>>>>        Property Handle phoPrivateActions           (Create(Self,U_cCJCommandBarActions))
29641>>>>>>>        Property Handle phoPrivateDesignerControls  (Create(Self,U_cCJCommandBarControls))
29642>>>>>>>        Property Handle phoPrivateKeyBindings       (Create(Self,U_cCJKeyBindings))
29643>>>>>>>        Property Handle phoPrivateOptions           (Create(Self,U_cCJCommandBarsOptions))
29644>>>>>>>        Property Boolean pbPrivateTimerUpdate True
29645>>>>>>>        
29645>>>>>>>        // array of all registered actions (i.e., actions that have a DF object and are COM instanciated)
29645>>>>>>>        Property Handle[] phoRegisteredActions
29646>>>>>>>        
29646>>>>>>>        // array of actions that should actively updated via timer refresh
29646>>>>>>>        Property Handle[] phoActiveUpdates
29647>>>>>>>        
29647>>>>>>>        // array of action IDs that can be reused. We do this because we cannot destroy actions
29647>>>>>>>        Property Integer[] piActionIdPool
29648>>>>>>>        
29648>>>>>>>        // last auto assigned BarId
29648>>>>>>>        Property Integer piLastBarId ID_CommandBarIDAutoStart
29649>>>>>>>        
29649>>>>>>>        // last auto assigned image ID
29649>>>>>>>        Property Integer piLastImageId ID_ImageAutoStart
29650>>>>>>>        
29650>>>>>>>        // used to determine of Load should occur. When the count changes in the
29650>>>>>>>        // the action IDs or barIds it is not safe to reload things.
29650>>>>>>>        Property Integer piLastAssignedDesignTimeID 0
29651>>>>>>>        Property Integer piLastAssignedDesignTimeBarID 0
29652>>>>>>>        
29652>>>>>>>        Property Handle phoTimer 0
29653>>>>>>>        
29653>>>>>>>        Get Create U_cCJIdleHandler to hoTimer
29654>>>>>>>        Set phoTimer to hoTimer
29655>>>>>>>        
29655>>>>>>>        Get Main_Panel_id to hoMain
29656>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
29657>>>>>>>        Set peNeighborhood to nhPublic
29658>>>>>>>        // if commandbar is part of a focusable ring (like a view) we never want it to
29658>>>>>>>        // take the focus
29658>>>>>>>        Set Skip_State to True
29659>>>>>>>        
29659>>>>>>>        Send AssignMDIMenu // determine if this is an MDI commandbar.
29660>>>>>>>    End_Procedure
29661>>>>>>>    
29661>>>>>>>    
29661>>>>>>>    // this will figure out if this is an MDI menu and assign the ghoCommandBars
29661>>>>>>>    // global variable if needed.
29661>>>>>>>    // We assume it is MDI if the main_panel_id is commandbars parent and it is MDI style
29661>>>>>>>    Procedure AssignMDIMenu
29663>>>>>>>        Handle hoMain hoParent
29663>>>>>>>        Boolean bIsMdi
29663>>>>>>>        Get parent to hoParent
29664>>>>>>>        Get Main_Panel_Id to hoMain
29665>>>>>>>        Move (hoMain and hoMain=hoParent and  MDI_State(hoMain)) to bIsMdi
29666>>>>>>>        Set pbMDIMenu to bIsMdi
29667>>>>>>>        If bIsMdi Begin
29669>>>>>>>            Set phoCommandBars of hoMain to Self
29670>>>>>>>            Move Self to ghoCommandBars
29671>>>>>>>        End
29671>>>>>>>>
29671>>>>>>>    End_Procedure
29672>>>>>>>    
29672>>>>>>>    Function IsMDIMenu Returns Boolean
29674>>>>>>>        Boolean bMDI
29674>>>>>>>        Get pbMDIMenu to bMDI
29675>>>>>>>        Function_Return bMDI
29676>>>>>>>    End_Function
29677>>>>>>>    
29677>>>>>>>    // returns the ClientArea DF object if this is an MDI style system.
29677>>>>>>>    Function ClientAreaObject Returns Handle
29679>>>>>>>        Boolean bMDI
29679>>>>>>>        Handle hoClientArea
29679>>>>>>>        Get IsMDIMenu to bMDI
29680>>>>>>>        If (bMDI) Begin
29682>>>>>>>            Get Client_Id of (Parent(Self)) to hoClientArea
29683>>>>>>>        End
29683>>>>>>>>
29683>>>>>>>        Function_Return hoClientArea
29684>>>>>>>    End_Function
29685>>>>>>>    
29685>>>>>>>    // Generic Get and Set property that is used to get and set a DF/COM options property.
29685>>>>>>>    // can be used by any integer or boolean property
29685>>>>>>>    
29685>>>>>>>    Procedure SetComOptionsProperty Handle hmPrivateProperty Handle hmCOMProperty Integer iValue
29687>>>>>>>        Handle hoOptions
29687>>>>>>>        Set hmPrivateProperty to iValue
29688>>>>>>>        If (IsComObjectCreated(Self)) Begin
29690>>>>>>>            Get OptionsObject to hoOptions
29691>>>>>>>            Set hmCOMProperty of hoOptions to iValue
29692>>>>>>>        End
29692>>>>>>>>
29692>>>>>>>    End_Procedure
29693>>>>>>>    
29693>>>>>>>    Function GetComOptionsProperty Handle hmPrivateProperty Handle hmCOMProperty Returns Integer
29695>>>>>>>        Handle hoOptions
29695>>>>>>>        Integer iValue
29695>>>>>>>        If (IsComObjectCreated(Self)) Begin
29697>>>>>>>            Get OptionsObject to hoOptions
29698>>>>>>>            Get hmCOMProperty of hoOptions to iValue
29699>>>>>>>        End
29699>>>>>>>>
29699>>>>>>>        Else Begin
29700>>>>>>>            Get hmPrivateProperty to iValue
29701>>>>>>>        End
29701>>>>>>>>
29701>>>>>>>        Function_Return iValue
29702>>>>>>>    End_Function
29703>>>>>>>    
29703>>>>>>>    // You can call this to handle whatever Theme or Custom theme you have. This is
29703>>>>>>>    // called by Set peVisualTheme
29703>>>>>>>    Procedure ApplyVisualTheme Integer eTheme String sDll String sIni
29705>>>>>>>        Boolean bOk
29705>>>>>>>        Integer iOldAuto
29705>>>>>>>        If (sDll<>"") Begin
29707>>>>>>>            Get LoadResourceImagesFromFile sDll sIni to bOk
29708>>>>>>>            If (not(bOk)) Begin
29710>>>>>>>                Error DFERR_PROGRAM (SFormat("Cannot load Theme resource file %1 %2",sDll,sIni))
29711>>>>>>>>
29711>>>>>>>            End
29711>>>>>>>>
29711>>>>>>>        End
29711>>>>>>>>
29711>>>>>>>        Get pbAutoResizeIcons to iOldAuto
29712>>>>>>>        Set ComVisualTheme to eTheme
29713>>>>>>>        Set pbAutoResizeIcons to iOldAuto
29714>>>>>>>    End_Procedure
29715>>>>>>>    
29715>>>>>>>    
29715>>>>>>>    // This converts our thems to themes that can be used by Codejock and its system
29715>>>>>>>    // of using dlls and inis for some themes. This will change over time and can be
29715>>>>>>>    // augmented for custom values
29715>>>>>>>    Procedure VisualThemeParams Integer ByRef eTheme String ByRef sDll String ByRef sIni
29717>>>>>>>        Case Begin
29717>>>>>>>            Case (eTheme=xtpThemeOffice2007)
29719>>>>>>>            Case (eTheme=xtpThemeResource)
29722>>>>>>>            Case (eTheme=xtpThemeOffice2007Blue)
29725>>>>>>>                Move "Office2007.dll" to sDll
29726>>>>>>>                Move "Office2007Blue.ini" to sIni
29727>>>>>>>                Move xtpThemeResource to eTheme
29728>>>>>>>                Case Break
29729>>>>>>>            Case (eTheme=xtpThemeOffice2007Aqua)
29732>>>>>>>                Move "Office2007.dll" to sDll
29733>>>>>>>                Move "Office2007Aqua.ini" to sIni
29734>>>>>>>                Move xtpThemeResource to eTheme
29735>>>>>>>                Case Break
29736>>>>>>>            Case (eTheme=xtpThemeOffice2007Black)
29739>>>>>>>                Move "Office2007.dll" to sDll
29740>>>>>>>                Move "Office2007Black.ini" to sIni
29741>>>>>>>                Move xtpThemeResource to eTheme
29742>>>>>>>                Case Break
29743>>>>>>>            Case (eTheme=xtpThemeOffice2007Silver)
29746>>>>>>>                Move "Office2007.dll" to sDll
29747>>>>>>>                Move "Office2007Silver.ini" to sIni
29748>>>>>>>                Move xtpThemeResource to eTheme
29749>>>>>>>                Case Break
29750>>>>>>>            
29750>>>>>>>            Case (eTheme=xtpThemeOffice2010Blue)
29753>>>>>>>            Case (eTheme=xtpThemeOffice2010)
29756>>>>>>>                Move "Office2010.dll" to sDll
29757>>>>>>>                Move "Office2010Blue.ini" to sIni
29758>>>>>>>                Move xtpThemeResource to eTheme
29759>>>>>>>                Case Break
29760>>>>>>>            Case (eTheme=xtpThemeOffice2010Black)
29763>>>>>>>                Move "Office2010.dll" to sDll
29764>>>>>>>                Move "Office2010Black.ini" to sIni
29765>>>>>>>                Move xtpThemeResource to eTheme
29766>>>>>>>                Case Break
29767>>>>>>>            Case (eTheme=xtpThemeOffice2010Silver)
29770>>>>>>>                Move "Office2010.dll" to sDll
29771>>>>>>>                Move "Office2010Silver.ini" to sIni
29772>>>>>>>                Move xtpThemeResource to eTheme
29773>>>>>>>                Case Break
29774>>>>>>>            
29774>>>>>>>            Case (eTheme=xtpThemeOffice2013)
29777>>>>>>>            Case (eTheme=xtpThemeOffice2013Word)
29780>>>>>>>                Move "Office2013.dll" to sDll
29781>>>>>>>                Move "Office2013Word.ini" to sIni
29782>>>>>>>                Move xtpThemeOffice2013 to eTheme
29783>>>>>>>                Case Break
29784>>>>>>>            Case (eTheme=xtpThemeOffice2013Excel)
29787>>>>>>>                Move "Office2013.dll" to sDll
29788>>>>>>>                Move "Office2013Excel.ini" to sIni
29789>>>>>>>                Move xtpThemeOffice2013 to eTheme
29790>>>>>>>                Case Break
29791>>>>>>>            Case (eTheme=xtpThemeOffice2013PowerPoint)
29794>>>>>>>                Move "Office2013.dll" to sDll
29795>>>>>>>                Move "Office2013PowerPoint.ini" to sIni
29796>>>>>>>                Move xtpThemeOffice2013 to eTheme
29797>>>>>>>                Case Break
29798>>>>>>>            Case (eTheme=xtpThemeOffice2013OutLook)
29801>>>>>>>                Move "Office2013.dll" to sDll
29802>>>>>>>                Move "Office2013OutLook.ini" to sIni
29803>>>>>>>                Move xtpThemeOffice2013 to eTheme
29804>>>>>>>                Case Break
29805>>>>>>>            Case (eTheme=xtpThemeOffice2013Publisher)
29808>>>>>>>                Move "Office2013.dll" to sDll
29809>>>>>>>                Move "Office2013Publisher.ini" to sIni
29810>>>>>>>                Move xtpThemeOffice2013 to eTheme
29811>>>>>>>                Case Break
29812>>>>>>>            Case (eTheme=xtpThemeOffice2013Access)
29815>>>>>>>                Move "Office2013.dll" to sDll
29816>>>>>>>                Move "Office2013Access.ini" to sIni
29817>>>>>>>                Move xtpThemeOffice2013 to eTheme
29818>>>>>>>                Case Break
29819>>>>>>>            Case (eTheme=xtpThemeOffice2013OneNote)
29822>>>>>>>                Move "Office2013.dll" to sDll
29823>>>>>>>                Move "Office2013OneNote.ini" to sIni
29824>>>>>>>                Move xtpThemeOffice2013 to eTheme
29825>>>>>>>                Case Break
29826>>>>>>>                
29826>>>>>>>            Case (eTheme=xtpThemeOffice2016Access)
29829>>>>>>>                Move "Office2016.dll" to sDll
29830>>>>>>>                Move "Office2016AccessWhite.ini" to sIni
29831>>>>>>>                Move xtpThemeOffice2013 to eTheme
29832>>>>>>>                Case Break
29833>>>>>>>            Case (eTheme=xtpThemeOffice2016Excel)
29836>>>>>>>                Move "Office2016.dll" to sDll
29837>>>>>>>                Move "Office2016ExcelWhite.ini" to sIni
29838>>>>>>>                Move xtpThemeOffice2013 to eTheme
29839>>>>>>>                Case Break
29840>>>>>>>            Case (eTheme=xtpThemeOffice2016OneNote)
29843>>>>>>>                Move "Office2016.dll" to sDll
29844>>>>>>>                Move "Office2016OneNoteWhite.ini" to sIni
29845>>>>>>>                Move xtpThemeOffice2013 to eTheme
29846>>>>>>>                Case Break
29847>>>>>>>            Case (eTheme=xtpThemeOffice2016Outlook)
29850>>>>>>>                Move "Office2016.dll" to sDll
29851>>>>>>>                Move "Office2016OutlookWhite.ini" to sIni
29852>>>>>>>                Move xtpThemeOffice2013 to eTheme
29853>>>>>>>                Case Break
29854>>>>>>>            Case (eTheme=xtpThemeOffice2016Publisher)
29857>>>>>>>                Move "Office2016.dll" to sDll
29858>>>>>>>                Move "Office2016PublisherWhite.ini" to sIni
29859>>>>>>>                Move xtpThemeOffice2013 to eTheme
29860>>>>>>>                Case Break
29861>>>>>>>            Case (eTheme=xtpThemeOffice2016PowerPoint)
29864>>>>>>>                Move "Office2016.dll" to sDll
29865>>>>>>>                Move "Office2016PowerPointWhite.ini" to sIni
29866>>>>>>>                Move xtpThemeOffice2013 to eTheme
29867>>>>>>>                Case Break
29868>>>>>>>            Case (eTheme=xtpThemeOffice2016Word)
29871>>>>>>>                Move "Office2016.dll" to sDll
29872>>>>>>>                Move "Office2016WordWhite.ini" to sIni
29873>>>>>>>                Move xtpThemeOffice2013 to eTheme
29874>>>>>>>                Case Break
29875>>>>>>>            
29875>>>>>>>            Case (eTheme=xtpThemeWindows7)
29878>>>>>>>                Move "Windows7.dll" to sDll
29879>>>>>>>                Move "Windows7Blue.ini" to sIni
29880>>>>>>>                Move xtpThemeResource to eTheme
29881>>>>>>>                Case Break
29882>>>>>>>            
29882>>>>>>>            Case (eTheme=xtpThemeVisualStudio2012)
29885>>>>>>>            Case (eTheme=xtpThemeVisualStudio2012Light)
29888>>>>>>>                Move "VisualStudio2012.dll" to sDll
29889>>>>>>>                Move "VisualStudio2012Light.ini" to sIni
29890>>>>>>>                Move xtpThemeVisualStudio2012 to eTheme
29891>>>>>>>                Case Break
29892>>>>>>>            Case (eTheme=xtpThemeVisualStudio2012Dark)
29895>>>>>>>                Move "VisualStudio2012.dll" to sDll
29896>>>>>>>                Move "VisualStudio2012Dark.ini" to sIni
29897>>>>>>>                Move xtpThemeVisualStudio2012Dark to eTheme
29898>>>>>>>                Case Break
29899>>>>>>>            
29899>>>>>>>            Case (eTheme=xtpThemeVisualStudio2015)
29902>>>>>>>            Case (eTheme=xtpThemeVisualStudio2015Blue)
29905>>>>>>>                Move "VisualStudio2015.dll" to sDll
29906>>>>>>>                Move "VisualStudio2015Blue.ini" to sIni
29907>>>>>>>                Move xtpThemeVisualStudio2015 to eTheme
29908>>>>>>>                Case Break
29909>>>>>>>            Case (eTheme=xtpThemeVisualStudio2015Light)
29912>>>>>>>                Move "VisualStudio2015.dll" to sDll
29913>>>>>>>                Move "VisualStudio2015Light.ini" to sIni
29914>>>>>>>                Move xtpThemeVisualStudio2015 to eTheme
29915>>>>>>>                Case Break
29916>>>>>>>            Case (eTheme=xtpThemeVisualStudio2015Dark)
29919>>>>>>>                Move "VisualStudio2015.dll" to sDll
29920>>>>>>>                Move "VisualStudio2015Dark.ini" to sIni
29921>>>>>>>                Move xtpThemeVisualStudio2015Dark to eTheme
29922>>>>>>>                Case Break
29923>>>>>>>            Case Else
29923>>>>>>>                Move "" to sDll
29924>>>>>>>                Move "" to sIni
29925>>>>>>>        Case End
29925>>>>>>>    End_Procedure
29926>>>>>>>    
29926>>>>>>>    
29926>>>>>>>    Procedure Set peVisualTheme Integer eValue
29928>>>>>>>        String sDll sIni
29928>>>>>>>        Integer iOldAuto
29928>>>>>>>        Set pePrivateVisualTheme to eValue
29929>>>>>>>        If (IsComObjectCreated(Self)) Begin
29931>>>>>>>            Send VisualThemeParams (&eValue) (&sDll) (&sIni)
29932>>>>>>>            Send ApplyVisualTheme eValue sDll sIni
29933>>>>>>>        End
29933>>>>>>>>
29933>>>>>>>    End_Procedure
29934>>>>>>>    
29934>>>>>>>    Function peVisualTheme Returns Integer
29936>>>>>>>        Integer eValue
29936>>>>>>>        // always returns our version of the theme because we have custom values
29936>>>>>>>        // If you need the actual theme use ComVisualTheme
29936>>>>>>>        Get pePrivateVisualTheme to eValue
29937>>>>>>>        Function_Return eValue
29938>>>>>>>    End_Function
29939>>>>>>>    
29939>>>>>>>    Procedure Set pbEnableCustomization Boolean bValue
29941>>>>>>>        Set pbPrivateEnableCustomization to bValue
29942>>>>>>>        If (IsComObjectCreated(Self)) Begin
29944>>>>>>>            Send ComEnableCustomization bValue
29945>>>>>>>        End
29945>>>>>>>>
29945>>>>>>>    End_Procedure
29946>>>>>>>    
29946>>>>>>>    Function pbEnableCustomization Returns Boolean
29948>>>>>>>        Boolean bValue
29948>>>>>>>        Get pbPrivateEnableCustomization to bValue
29949>>>>>>>        Function_Return bValue
29950>>>>>>>    End_Function
29951>>>>>>>    
29951>>>>>>>    
29951>>>>>>>    // these are set in the cCJCommandBars's Option object
29951>>>>>>>    
29951>>>>>>>    Procedure Set peAnimation Integer eValue
29953>>>>>>>        Send SetComOptionsProperty set_pePrivateAnimation set_ComAnimation eValue
29954>>>>>>>    End_Procedure
29955>>>>>>>    
29955>>>>>>>    Function peAnimation Returns Integer
29957>>>>>>>        Integer eValue
29957>>>>>>>        Get GetComOptionsProperty get_pePrivateAnimation get_ComAnimation to eValue
29958>>>>>>>        Function_Return eValue
29959>>>>>>>    End_Function
29960>>>>>>>    
29960>>>>>>>    
29960>>>>>>>    Procedure Set pbAlwaysShowFullMenus Boolean bValue
29962>>>>>>>        Send SetComOptionsProperty set_pbPrivateAlwaysShowFullMenus set_ComAlwaysShowFullMenus bValue
29963>>>>>>>    End_Procedure
29964>>>>>>>    
29964>>>>>>>    Function pbAlwaysShowFullMenus Returns Boolean
29966>>>>>>>        Boolean bValue
29966>>>>>>>        Get GetComOptionsProperty get_pbPrivateAlwaysShowFullMenus get_ComAlwaysShowFullMenus to bValue
29967>>>>>>>        Function_Return bValue
29968>>>>>>>    End_Function
29969>>>>>>>    
29969>>>>>>>    Procedure Set pbShowFullAfterDelay Boolean bValue
29971>>>>>>>        Send SetComOptionsProperty set_pbPrivateShowFullAfterDelay set_ComShowFullAfterDelay bValue
29972>>>>>>>    End_Procedure
29973>>>>>>>    
29973>>>>>>>    Function pbShowFullAfterDelay Returns Boolean
29975>>>>>>>        Boolean bValue
29975>>>>>>>        Get GetComOptionsProperty get_pbPrivateShowFullAfterDelay get_ComShowFullAfterDelay to bValue
29976>>>>>>>        Function_Return bValue
29977>>>>>>>    End_Function
29978>>>>>>>    
29978>>>>>>>    Procedure Set pbAutoHideUnusedPopups Boolean bValue
29980>>>>>>>        Send SetComOptionsProperty set_pbPrivateAutoHideUnusedPopups set_ComAutoHideUnusedPopups bValue
29981>>>>>>>    End_Procedure
29982>>>>>>>    
29982>>>>>>>    Function pbAutoHideUnusedPopups Returns Boolean
29984>>>>>>>        Boolean bValue
29984>>>>>>>        Get GetComOptionsProperty get_pbPrivateAutoHideUnusedPopups get_ComAutoHideUnusedPopups to bValue
29985>>>>>>>        Function_Return bValue
29986>>>>>>>    End_Function
29987>>>>>>>    
29987>>>>>>>    Procedure Set pbToolBarScreenTips Boolean bValue
29989>>>>>>>        Send SetComOptionsProperty set_pbPrivateToolBarScreenTips set_ComToolBarScreenTips bValue
29990>>>>>>>    End_Procedure
29991>>>>>>>    
29991>>>>>>>    Function pbToolBarScreenTips Returns Boolean
29993>>>>>>>        Boolean bValue
29993>>>>>>>        Get GetComOptionsProperty get_pbPrivateToolBarScreenTips get_ComToolBarScreenTips to bValue
29994>>>>>>>        Function_Return bValue
29995>>>>>>>    End_Function
29996>>>>>>>    
29996>>>>>>>    Procedure Set pbShowPopupBarToolTips Boolean bValue
29998>>>>>>>        Send SetComOptionsProperty set_pbPrivateShowPopupBarToolTips set_ComShowPopupBarToolTips bValue
29999>>>>>>>    End_Procedure
30000>>>>>>>    
30000>>>>>>>    Function pbShowPopupBarToolTips Returns Boolean
30002>>>>>>>        Boolean bValue
30002>>>>>>>        Get GetComOptionsProperty get_pbPrivateShowPopupBarToolTips get_ComShowPopupBarToolTips to bValue
30003>>>>>>>        Function_Return bValue
30004>>>>>>>    End_Function
30005>>>>>>>    
30005>>>>>>>    Procedure Set pbToolBarAccelTips Boolean bValue
30007>>>>>>>        Send SetComOptionsProperty set_pbPrivateToolBarAccelTips set_ComToolBarAccelTips bValue
30008>>>>>>>    End_Procedure
30009>>>>>>>    
30009>>>>>>>    Function pbToolBarAccelTips Returns Boolean
30011>>>>>>>        Boolean bValue
30011>>>>>>>        Get GetComOptionsProperty get_pbPrivateToolBarAccelTips get_ComToolBarAccelTips to bValue
30012>>>>>>>        Function_Return bValue
30013>>>>>>>    End_Function
30014>>>>>>>    
30014>>>>>>>    Procedure Set pbShowExpandButtonAlways Boolean bValue
30016>>>>>>>        Send SetComOptionsProperty set_pbPrivateShowExpandButtonAlways set_ComShowExpandButtonAlways bValue
30017>>>>>>>    End_Procedure
30018>>>>>>>    
30018>>>>>>>    Function pbShowExpandButtonAlways Returns Boolean
30020>>>>>>>        Boolean bValue
30020>>>>>>>        Get GetComOptionsProperty get_pbPrivateShowExpandButtonAlways get_ComShowExpandButtonAlways to bValue
30021>>>>>>>        Function_Return bValue
30022>>>>>>>    End_Function
30023>>>>>>>    
30023>>>>>>>    Procedure Set pbLargeIcons Boolean bValue
30025>>>>>>>        Send SetComOptionsProperty set_pbPrivateLargeIcons set_ComLargeIcons bValue
30026>>>>>>>    End_Procedure
30027>>>>>>>    
30027>>>>>>>    Function pbLargeIcons Returns Boolean
30029>>>>>>>        Boolean bValue
30029>>>>>>>        Get GetComOptionsProperty get_pbPrivateLargeIcons get_ComLargeIcons to bValue
30030>>>>>>>        Function_Return bValue
30031>>>>>>>    End_Function
30032>>>>>>>    
30032>>>>>>>    Procedure Set pbSyncFloatingToolbars Boolean bValue
30034>>>>>>>        Send SetComOptionsProperty set_pbPrivateSyncFloatingToolbars set_ComSyncFloatingToolbars bValue
30035>>>>>>>    End_Procedure
30036>>>>>>>    
30036>>>>>>>    Function pbSyncFloatingToolbars Returns Boolean
30038>>>>>>>        Boolean bValue
30038>>>>>>>        Get GetComOptionsProperty get_pbPrivateSyncFloatingToolbars get_ComSyncFloatingToolbars to bValue
30039>>>>>>>        Function_Return bValue
30040>>>>>>>    End_Function
30041>>>>>>>    
30041>>>>>>>    Procedure Set pbFloatToolbarsByDoubleClick Boolean bValue
30043>>>>>>>        Send SetComOptionsProperty set_pbPrivateFloatToolbarsByDoubleClick set_ComFloatToolbarsByDoubleClick bValue
30044>>>>>>>    End_Procedure
30045>>>>>>>    
30045>>>>>>>    Function pbFloatToolbarsByDoubleClick Returns Boolean
30047>>>>>>>        Boolean bValue
30047>>>>>>>        Get GetComOptionsProperty get_pbPrivateFloatToolbarsByDoubleClick get_ComFloatToolbarsByDoubleClick to bValue
30048>>>>>>>        Function_Return bValue
30049>>>>>>>    End_Function
30050>>>>>>>    
30050>>>>>>>    Procedure Set pbShowTextBelowIcons Boolean bValue
30052>>>>>>>        Send SetComOptionsProperty set_pbPrivateShowTextBelowIcons set_ComShowTextBelowIcons bValue
30053>>>>>>>    End_Procedure
30054>>>>>>>    
30054>>>>>>>    Function pbShowTextBelowIcons Returns Boolean
30056>>>>>>>        Boolean bValue
30056>>>>>>>        Get GetComOptionsProperty get_pbPrivateShowTextBelowIcons get_ComShowTextBelowIcons to bValue
30057>>>>>>>        Function_Return bValue
30058>>>>>>>    End_Function
30059>>>>>>>    
30059>>>>>>>    Procedure Set pbAltDragCustomization Boolean bValue
30061>>>>>>>        Send SetComOptionsProperty set_pbPrivateAltDragCustomization set_ComAltDragCustomization bValue
30062>>>>>>>    End_Procedure
30063>>>>>>>    
30063>>>>>>>    Function pbAltDragCustomization Returns Boolean
30065>>>>>>>        Boolean bValue
30065>>>>>>>        Get GetComOptionsProperty get_pbPrivateAltDragCustomization get_ComAltDragCustomization to bValue
30066>>>>>>>        Function_Return bValue
30067>>>>>>>    End_Function
30068>>>>>>>    
30068>>>>>>>    Procedure Set pbOfficeStyleDisabledIcons Boolean bValue
30070>>>>>>>        Send SetComOptionsProperty set_pbPrivateOfficeStyleDisabledIcons set_ComOfficeStyleDisabledIcons bValue
30071>>>>>>>    End_Procedure
30072>>>>>>>    
30072>>>>>>>    Function pbOfficeStyleDisabledIcons Returns Boolean
30074>>>>>>>        Boolean bValue
30074>>>>>>>        Get GetComOptionsProperty get_pbPrivateOfficeStyleDisabledIcons get_ComOfficeStyleDisabledIcons to bValue
30075>>>>>>>        Function_Return bValue
30076>>>>>>>    End_Function
30077>>>>>>>    
30077>>>>>>>    Procedure Set pbIconsWithShadow Boolean bValue
30079>>>>>>>        Send SetComOptionsProperty set_pbPrivateIconsWithShadow set_ComIconsWithShadow bValue
30080>>>>>>>    End_Procedure
30081>>>>>>>    
30081>>>>>>>    Function pbIconsWithShadow Returns Boolean
30083>>>>>>>        Boolean bValue
30083>>>>>>>        Get GetComOptionsProperty get_pbPrivateIconsWithShadow get_ComIconsWithShadow to bValue
30084>>>>>>>        Function_Return bValue
30085>>>>>>>    End_Function
30086>>>>>>>    
30086>>>>>>>    Procedure Set pbTimerUpdate Boolean bValue
30088>>>>>>>        Handle hoTimer
30088>>>>>>>        Set pbPrivateTimerUpdate to bValue
30089>>>>>>>        If (IsComObjectCreated(Self)) Begin
30091>>>>>>>            Get phoTimer to hoTimer
30092>>>>>>>            Set pbEnabled of hoTimer to bValue
30093>>>>>>>        End
30093>>>>>>>>
30093>>>>>>>    End_Procedure
30094>>>>>>>    
30094>>>>>>>    Function pbTimerUpdate Returns Boolean
30096>>>>>>>        Boolean bValue
30096>>>>>>>        Get pbPrivateTimerUpdate to bValue
30097>>>>>>>        Function_Return bValue
30098>>>>>>>    End_Function
30099>>>>>>>    
30099>>>>>>>    
30099>>>>>>>    Procedure Set pbAutoResizeIcons Boolean bValue
30101>>>>>>>        Handle hoPaint
30101>>>>>>>        Variant vPaint
30101>>>>>>>        
30101>>>>>>>        Set pbPrivateAutoResizeIcons to bValue
30102>>>>>>>        If (IsComObjectCreated(Self)) Begin
30104>>>>>>>            Get Create (RefClass(cCJPaintManager)) to hoPaint
30105>>>>>>>            Get ComPaintManager to vPaint
30106>>>>>>>            Set pvComObject of hoPaint to vPaint
30107>>>>>>>            Set ComAutoResizeIcons of hoPaint to bValue
30108>>>>>>>            Send Destroy of hoPaint
30109>>>>>>>        End
30109>>>>>>>>
30109>>>>>>>    End_Procedure
30110>>>>>>>    
30110>>>>>>>    Function pbAutoResizeIcons Returns Boolean
30112>>>>>>>        Boolean bValue
30112>>>>>>>        Get pbPrivateAutoResizeIcons to bValue
30113>>>>>>>        Function_Return bValue
30114>>>>>>>    End_Function
30115>>>>>>>    
30115>>>>>>>    
30115>>>>>>>    // returns the CommandBars object handle, which is this object. All menu objects
30115>>>>>>>    // within a command bar will get this via delegation. The exception is context menus (and
30115>>>>>>>    // children of context menus) which uses the global commandbars variable instead.
30115>>>>>>>    Function CommandBarSystemObject Returns Handle
30117>>>>>>>        Function_Return Self
30118>>>>>>>    End_Function
30119>>>>>>>    
30119>>>>>>>    // these are here to make life easier. These return a df-object attached to
30119>>>>>>>    // the following collecions and child objects. These are used enough that
30119>>>>>>>    // an easy access to them was provided.
30119>>>>>>>    
30119>>>>>>>    Function ActionsCollection Returns Handle
30121>>>>>>>        Handle hoPrivate
30121>>>>>>>        Variant vCom
30121>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30123>>>>>>>            Function_Return 0
30124>>>>>>>        End
30124>>>>>>>>
30124>>>>>>>        
30124>>>>>>>        Get phoPrivateActions to hoPrivate
30125>>>>>>>        Get ComActions of hoPrivate to vCom
30126>>>>>>>        Set pvComObject of hoPrivate to vCom
30127>>>>>>>        Function_Return hoPrivate
30128>>>>>>>    End_Function
30129>>>>>>>    
30129>>>>>>>    Function DesignerControlsCollection Returns Handle
30131>>>>>>>        Handle hoPrivate
30131>>>>>>>        Variant vCom
30131>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30133>>>>>>>            Function_Return 0
30134>>>>>>>        End
30134>>>>>>>>
30134>>>>>>>        
30134>>>>>>>        Get phoPrivateDesignerControls to hoPrivate
30135>>>>>>>        Get ComDesignerControls to vCom
30136>>>>>>>        Set pvComObject of hoPrivate to vCom
30137>>>>>>>        Function_Return hoPrivate
30138>>>>>>>    End_Function
30139>>>>>>>    
30139>>>>>>>    Function KeyBindingsCollection Returns Handle
30141>>>>>>>        Handle hoPrivate
30141>>>>>>>        Variant vCom
30141>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30143>>>>>>>            Function_Return 0
30144>>>>>>>        End
30144>>>>>>>>
30144>>>>>>>        
30144>>>>>>>        Get phoPrivateKeyBindings to hoPrivate
30145>>>>>>>        Get ComKeyBindings to vCom
30146>>>>>>>        Set pvComObject of hoPrivate to vCom
30147>>>>>>>        Function_Return hoPrivate
30148>>>>>>>    End_Function
30149>>>>>>>    
30149>>>>>>>    Function OptionsObject Returns Handle
30151>>>>>>>        Handle hoPrivate
30151>>>>>>>        Variant vCom
30151>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30153>>>>>>>            Function_Return 0
30154>>>>>>>        End
30154>>>>>>>>
30154>>>>>>>        
30154>>>>>>>        Get phoPrivateOptions to hoPrivate
30155>>>>>>>        Get ComOptions to vCom
30156>>>>>>>        Set pvComObject of hoPrivate to vCom
30157>>>>>>>        Function_Return hoPrivate
30158>>>>>>>    End_Function
30159>>>>>>>    
30159>>>>>>>    
30159>>>>>>>    // when a commandbars is deactivated, this is called.
30159>>>>>>>    // save layout as needed
30159>>>>>>>    // release all of the action objects in the various arrays
30159>>>>>>>    // make sure that all DF objects are released.
30159>>>>>>>    // One oddity is that at this point the object is deactivated and this causes the
30159>>>>>>>    // statubar's visibleState to always be false. We correct for this in the statusbar's pbVisible
30159>>>>>>>    Procedure ReleaseComObject
30161>>>>>>>        Handle[] hoObjects hoEmpty
30163>>>>>>>        Handle hoTimer hoObj
30163>>>>>>>        Integer i iCount
30163>>>>>>>        Variant vTab
30163>>>>>>>        
30163>>>>>>>        Get phoTimer to hoTimer
30164>>>>>>>        Set pbEnabled of hoTimer to False
30165>>>>>>>        
30165>>>>>>>        Send SaveEnvironment // save layout if needed
30166>>>>>>>        
30166>>>>>>>        // clear the active updates array
30166>>>>>>>        Set phoActiveUpdates to hoEmpty
30167>>>>>>>        
30167>>>>>>>        // release all actions attached to DF objects. This will release actions
30167>>>>>>>        // in context menus
30167>>>>>>>        Get phoRegisteredActions to hoObjects
30168>>>>>>>        Move (SizeOfArray(hoObjects)) to iCount
30169>>>>>>>        For i from 0 to (iCount-1)
30175>>>>>>>>
30175>>>>>>>            // it's possible that we've got actions that have been already been destroyed during shut down (context menus)
30175>>>>>>>            Get Object_Id of hoObjects[i] to hoObj
30176>>>>>>>            If hoObj Begin
30178>>>>>>>                Send ReleaseComObject of hoObj
30179>>>>>>>            End
30179>>>>>>>>
30179>>>>>>>        Loop
30180>>>>>>>>
30180>>>>>>>        Set phoRegisteredActions to hoEmpty
30181>>>>>>>        
30181>>>>>>>        // this should not be needed, but it can't hurt.
30181>>>>>>>        Broadcast Recursive_up Send ReleaseComObject
30183>>>>>>>        Send OnRelease
30184>>>>>>>        Forward Send ReleaseComObject
30186>>>>>>>    End_Procedure
30187>>>>>>>    
30187>>>>>>>    Procedure OnCreateTabbedWorkspace Handle hoTabWorkspace Handle hoTabPaintManager
30189>>>>>>>    End_Procedure
30190>>>>>>>    
30190>>>>>>>    // This sets all of the commandbars properties and the options properties
30190>>>>>>>    Procedure CreateCommandBars
30192>>>>>>>        Handle hWND hoClient hoMain hoOptions hoImageManager hoCommandBar hoTimer hoPaint
30192>>>>>>>        Variant vToolbarObject vImageManager vPaint
30192>>>>>>>        Integer eVisualTheme eAnimation
30192>>>>>>>        Integer iLast
30192>>>>>>>        Boolean bMDIMEnu
30192>>>>>>>        Boolean bEnableCustomization bAltDragCustomization bLargeIcons bShowTextBelowIcons bAlwaysShowFullMenus bShowFullAfterDelay
30192>>>>>>>        Boolean bToolBarScreenTips bToolBarAccelTips bShowPopupBarToolTips bAutoHideUnusedPopups
30192>>>>>>>        Boolean bOfficeStyleDisabledIcons bFloatToolbarsByDoubleClick bSyncFloatingToolbars bShowExpandButtonAlways bIconsWithShadow
30192>>>>>>>        Boolean bTimer bAutoResizeIcons bTabbedWorkspaces
30192>>>>>>>        
30192>>>>>>>        Get pePrivateVisualTheme to eVisualTheme
30193>>>>>>>        Get pbPrivateEnableCustomization to bEnableCustomization
30194>>>>>>>        Get pbPrivateAltDragCustomization to bAltDragCustomization
30195>>>>>>>        Get pePrivateAnimation to eAnimation
30196>>>>>>>        Get pbPrivateLargeIcons to bLargeIcons
30197>>>>>>>        Get pbPrivateShowTextBelowIcons to bShowTextBelowIcons
30198>>>>>>>        Get pbPrivateAlwaysShowFullMenus to bAlwaysShowFullMenus
30199>>>>>>>        Get pbPrivateShowFullAfterDelay to bShowFullAfterDelay
30200>>>>>>>        Get pbPrivateToolBarScreenTips to bToolBarScreenTips
30201>>>>>>>        Get pbPrivateToolBarAccelTips to bToolBarAccelTips
30202>>>>>>>        Get pbPrivateShowPopupBarToolTips to bShowPopupBarToolTips
30203>>>>>>>        Get pbPrivateOfficeStyleDisabledIcons to bOfficeStyleDisabledIcons
30204>>>>>>>        Get pbPrivateIconsWithShadow to bIconsWithShadow
30205>>>>>>>        Get pbPrivateFloatToolbarsByDoubleClick to bFloatToolbarsByDoubleClick
30206>>>>>>>        Get pbPrivateSyncFloatingToolbars   to bSyncFloatingToolbars
30207>>>>>>>        Get pbPrivateShowExpandButtonAlways to bShowExpandButtonAlways
30208>>>>>>>        Get pbPrivateAutoHideUnusedPopups   to bAutoHideUnusedPopups
30209>>>>>>>        Get pbPrivateAutoResizeIcons        to bAutoResizeIcons
30210>>>>>>>        Get pbTabbedWorkspaces to bTabbedWorkspaces
30211>>>>>>>        
30211>>>>>>>        // attach to parent window. This should actually happen automatically
30211>>>>>>>        Get Parent to hoMain
30212>>>>>>>        Get Window_Handle of hoMain to hWND
30213>>>>>>>        Send ComAttachToWindow hWND
30214>>>>>>>        
30214>>>>>>>        // if an MDI menu, find and set the client area
30214>>>>>>>        Get pbMDIMenu to bMDIMenu
30215>>>>>>>        If bMDIMEnu Begin
30217>>>>>>>            Get ClientAreaObject to hoClient
30218>>>>>>>            If hoClient Begin
30220>>>>>>>                If not (Active_State(hoClient)) Begin
30222>>>>>>>                    Send Add_Focus of hoClient hoMain
30223>>>>>>>                End
30223>>>>>>>>
30223>>>>>>>                Get Window_Handle of hoClient to hWND
30224>>>>>>>                Send ComSetMDIClient hWND
30225>>>>>>>            End
30225>>>>>>>>
30225>>>>>>>        End
30225>>>>>>>>
30225>>>>>>>        
30225>>>>>>>        // make sure the first command bar is a main menu
30225>>>>>>>        Get Create U_cCJCommandBar to hoCommandBar
30226>>>>>>>        Get ComAddMenuBar "Main menu" to vToolbarObject
30227>>>>>>>        Set pvComObject of hoCommandBar to vToolbarObject
30228>>>>>>>        Set ComVisible of hoCommandBar to False
30229>>>>>>>        Send Destroy of hoCommandBar
30230>>>>>>>        
30230>>>>>>>        
30230>>>>>>>        // the following are set directly in the object
30230>>>>>>>        Set ComScaleMode to  xtpScalePixel
30231>>>>>>>        //Set ComVisualTheme to eVisualTheme
30231>>>>>>>        Set peVisualTheme to eVisualTheme
30232>>>>>>>        Send ComEnableCustomization bEnableCustomization
30233>>>>>>>        
30233>>>>>>>        // the following are set in the options object
30233>>>>>>>        Get OptionsObject to hoOptions
30234>>>>>>>        // event is completely disabled
30234>>>>>>>        //Set ComUpdatePeriod of hoOptions to 0 // we don't use this method, shut off the timer
30234>>>>>>>        Set ComAltDragCustomization of hoOptions to bAltDragCustomization
30235>>>>>>>        Set ComAnimation of hoOptions to eAnimation
30236>>>>>>>        Set ComLargeIcons of hoOptions to bLargeIcons
30237>>>>>>>        Set ComShowTextBelowIcons of hoOptions to bShowTextBelowIcons
30238>>>>>>>        Set ComShowFullAfterDelay of hoOptions to bShowFullAfterDelay
30239>>>>>>>        Set ComAlwaysShowFullMenus of hoOptions to bAlwaysShowFullMenus
30240>>>>>>>        Set ComToolBarAccelTips of hoOptions to  bToolBarAccelTips
30241>>>>>>>        Set ComToolBarScreenTips of hoOptions to bToolBarScreenTips
30242>>>>>>>        Set ComShowPopupBarToolTips of hoOptions to bShowPopupBarToolTips
30243>>>>>>>        Set ComOfficeStyleDisabledIcons of hoOptions to bOfficeStyleDisabledIcons
30244>>>>>>>        Set ComIconsWithShadow of hoOptions to bIconsWithShadow
30245>>>>>>>        Set ComFloatToolbarsByDoubleClick of hoOptions to bFloatToolbarsByDoubleClick
30246>>>>>>>        Set ComSyncFloatingToolbars of hoOptions to bSyncFloatingToolbars
30247>>>>>>>        Set ComShowExpandButtonAlways of hoOptions to bShowExpandButtonAlways
30248>>>>>>>        Get ComAutoHideUnusedPopups of hoOptions to bAutoHideUnusedPopups
30249>>>>>>>        
30249>>>>>>>        // the following are set in the paint object
30249>>>>>>>        Get Create (RefClass(cCJPaintManager)) to hoPaint
30250>>>>>>>        Get ComPaintManager to vPaint
30251>>>>>>>        Set pvComObject of hoPaint to vPaint
30252>>>>>>>        Set ComAutoResizeIcons of hoPaint to bAutoResizeIcons
30253>>>>>>>        Send Destroy of hoPaint
30254>>>>>>>        
30254>>>>>>>        Send ComEnableActions
30255>>>>>>>        
30255>>>>>>>        // We must explicitly create an image list collection and add it to the object
30255>>>>>>>        Get Create U_cCJImageManager to hoImageManager
30256>>>>>>>        Send CreateComObject of hoImageManager
30257>>>>>>>        Get ComIcons of hoImageManager to vImageManager
30258>>>>>>>        Set ComIcons to vImageManager
30259>>>>>>>        Send destroy of hoImageManager
30260>>>>>>>        // as of 18.3 it appears we must explicitly set this or you get fuzzy images
30260>>>>>>>        Send ComSetDPIScallingOptions of hoOptions False False
30261>>>>>>>        
30261>>>>>>>        // if tabbed workspace, enable it.
30261>>>>>>>        If (bTabbedWorkspaces) Begin
30263>>>>>>>            Send EnableTabbedWorkspace
30264>>>>>>>        End
30264>>>>>>>>
30264>>>>>>>        
30264>>>>>>>        
30264>>>>>>>        // event sent before any child objects are created.
30264>>>>>>>        Send OnCreateCommandBars
30265>>>>>>>        
30265>>>>>>>        // this creates all of the actions and items
30265>>>>>>>        Broadcast Send CreateComInstance
30267>>>>>>>        
30267>>>>>>>        // we keep track of the last action Id and last bar Id auto assigned.
30267>>>>>>>        // We use this to determine if a load environment can be safely done.
30267>>>>>>>        // Anything auto-assigned after this is considered to be dynamic.
30267>>>>>>>        Get LastAssignedId to iLast
30268>>>>>>>        Set piLastAssignedDesignTimeId to iLast
30269>>>>>>>        Get piLastBarId to iLast
30270>>>>>>>        Set piLastAssignedDesignTimeBarId to iLast
30271>>>>>>>        
30271>>>>>>>        Send LoadEnvironment // load layout if needed
30272>>>>>>>        
30272>>>>>>>        Get pbTimerUpdate to bTimer
30273>>>>>>>        If bTimer Begin
30275>>>>>>>            Get phoTimer to hoTimer
30276>>>>>>>            Set pbEnabled of hoTimer to True
30277>>>>>>>        End
30277>>>>>>>>
30277>>>>>>>        
30277>>>>>>>        Send ComRecalcLayout
30278>>>>>>>    End_Procedure
30279>>>>>>>    
30279>>>>>>>    // enable tabbed workspaces. This should only happen when the CON commandbars are
30279>>>>>>>    // being created as part of CreateCommandBars when pbTabbedWorkspaces is true.
30279>>>>>>>    // Use OnCreateTabbedWorkspace to customize
30279>>>>>>>    Procedure EnableTabbedWorkspace
30281>>>>>>>        Variant vTab vPaint
30281>>>>>>>        Handle hoTab hoPaint
30281>>>>>>>        Integer iFgs
30281>>>>>>>        
30281>>>>>>>        Get Create (RefClass(cCJTabWorkspace)) to hoTab
30282>>>>>>>        Get ComShowTabWorkspace True to vTab
30283>>>>>>>        Set pvComObject of hoTab to vTab
30284>>>>>>>        Send ComEnableGroups of hoTab
30285>>>>>>>        Get ComFlags of hoTab to iFgs
30286>>>>>>>        Set ComFlags of hoTab to (iFgs ior xtpWorkspaceShowCloseTab ior xtpWorkspaceShowActiveFiles)
30287>>>>>>>        Get ComPaintManager of hoTab to vPaint
30288>>>>>>>        Get Create (RefClass(cCJTabPaintManager)) to hoPaint
30289>>>>>>>        Set pvComObject of hoPaint to vPaint
30290>>>>>>>        Set ComShowIcons of hoPaint to False
30291>>>>>>>        // event to customize tabbed workspace
30291>>>>>>>        Send OnCreateTabbedWorkspace hoTab hoPaint
30292>>>>>>>        Send Destroy of hoPaint
30293>>>>>>>        Send Destroy of hoTab
30294>>>>>>>    End_Procedure
30295>>>>>>>    
30295>>>>>>>    // Perform an Update. This can be called manually or via the timer
30295>>>>>>>    // it send update to the Statusbar and to all active actions
30295>>>>>>>    Procedure Update
30297>>>>>>>        Handle[] hoActions
30298>>>>>>>        Handle hoStatusBar
30298>>>>>>>        Integer i iActions
30298>>>>>>>        Variant vAction
30298>>>>>>>        If (IsComObjectCreated(Self)) Begin
30300>>>>>>>            Send OnUpdate // update event for commandbars
30301>>>>>>>            Get phoActiveUpdates to hoActions
30302>>>>>>>            Move (SizeOfArray(hoActions)) to iActions
30303>>>>>>>            For i from 0 to (iActions-1)
30309>>>>>>>>
30309>>>>>>>                Send Update of hoActions[i]
30310>>>>>>>            Loop
30311>>>>>>>>
30311>>>>>>>            Get phoStatusBar to hoStatusBar
30312>>>>>>>            If (hoStatusBar) Begin
30314>>>>>>>                Send Update of hoStatusBar
30315>>>>>>>            End
30315>>>>>>>>
30315>>>>>>>        End
30315>>>>>>>>
30315>>>>>>>    End_Procedure
30316>>>>>>>    
30316>>>>>>>    Procedure UpdateAllActions
30318>>>>>>>        Handle[] hoActions
30319>>>>>>>        Integer i iActions
30319>>>>>>>        Variant vAction
30319>>>>>>>        Get phoRegisteredActions to hoActions
30320>>>>>>>        Move (SizeOfArray(hoActions)) to iActions
30321>>>>>>>        For i from 0 to (iActions-1)
30327>>>>>>>>
30327>>>>>>>            Send Update of hoActions[i]
30328>>>>>>>        Loop
30329>>>>>>>>
30329>>>>>>>    End_Procedure
30330>>>>>>>    
30330>>>>>>>    Function LastAssignedId Returns Integer
30332>>>>>>>        Integer[] iActionIdPool
30333>>>>>>>        Integer iId iCount
30333>>>>>>>        Get piActionIdPool to iActionIdPool
30334>>>>>>>        Move (SizeOfArray(iActionIdPool)) to iCount
30335>>>>>>>        If (iCount=0) Begin
30337>>>>>>>            Move ID_CommandBarsAutoStart to iId
30338>>>>>>>        End
30338>>>>>>>>
30338>>>>>>>        Else Begin
30339>>>>>>>            Move (iActionIdPool[0]) to iId
30340>>>>>>>        End
30340>>>>>>>>
30340>>>>>>>        Function_Return iId
30341>>>>>>>    End_Function
30342>>>>>>>    
30342>>>>>>>    Function AssignID Returns Integer // auto assign an Id. Callend in end_construct_object if needed
30344>>>>>>>        Integer[] iActionIdPool
30345>>>>>>>        Integer iId iCount
30345>>>>>>>        Get piActionIdPool to iActionIdPool
30346>>>>>>>        Move (SizeOfArray(iActionIdPool)) to iCount
30347>>>>>>>        If (iCount=0) Begin
30349>>>>>>>            Move ID_CommandBarsAutoStart to iId
30350>>>>>>>            Move iId to iActionIdPool[0]
30351>>>>>>>        End
30351>>>>>>>>
30351>>>>>>>        Else If (iCount=1) Begin
30354>>>>>>>            Move (iActionIdPool[0]+1) to iId
30355>>>>>>>            Move iId to iActionIdPool[0]
30356>>>>>>>        End
30356>>>>>>>>
30356>>>>>>>        Else Begin
30357>>>>>>>            Move iActionIdPool[iCount-1] to iId
30358>>>>>>>            Move (ResizeArray(iActionIdPool,iCount-1)) to iActionIdPool
30359>>>>>>>        End
30359>>>>>>>>
30359>>>>>>>        Set piActionIdPool to iActionIdPool
30360>>>>>>>        Function_Return iId
30361>>>>>>>    End_Function
30362>>>>>>>    
30362>>>>>>>    Procedure ReleaseID Integer iId // might be needed to maintain a pool of actions
30364>>>>>>>        Integer[] iActionIdPool
30365>>>>>>>        Integer iCount iIndex
30365>>>>>>>        Get piActionIdPool to iActionIdPool
30366>>>>>>>        // we must make sure that an action is never added to the pool more than once.
30366>>>>>>>        // this first value is a trick value (the highest number) so we allow a hit on
30366>>>>>>>        // that one. So -1 or 0 is ok
30366>>>>>>>        If (SearchArray(iId,iActionIdPool)<=0) Begin
30368>>>>>>>            Move (SizeOfArray(iActionIdPool)) to iCount
30369>>>>>>>            Move iId to iActionIdPool[iCount]
30370>>>>>>>            Set piActionIdPool to iActionIdPool
30371>>>>>>>        End
30371>>>>>>>>
30371>>>>>>>        Else Begin
30372>>>>>>>            Error DFERR_PROGRAM "Assert: Duplicate released ID in commandbars"
30373>>>>>>>>
30373>>>>>>>        End
30373>>>>>>>>
30373>>>>>>>    End_Procedure
30374>>>>>>>    
30374>>>>>>>    Function AssignBarId Returns Integer
30376>>>>>>>        Integer iId
30376>>>>>>>        Get piLastBarId to iId
30377>>>>>>>        Increment iId
30378>>>>>>>        Set piLastBarId to iId
30379>>>>>>>        Function_Return iId
30380>>>>>>>    End_Function
30381>>>>>>>    
30381>>>>>>>    Procedure AddActiveAction Handle hoAction
30383>>>>>>>        Handle[] hoActiveActions
30384>>>>>>>        Get phoActiveUpdates to hoActiveActions
30385>>>>>>>        Move hoAction to hoActiveActions[SizeOfArray(hoActiveActions)]
30386>>>>>>>        Set phoActiveUpdates to hoActiveActions
30387>>>>>>>    End_Procedure
30388>>>>>>>    
30388>>>>>>>    Procedure RegisterAction Handle hoAction
30390>>>>>>>        Boolean bActive
30390>>>>>>>        Handle[] hoActions
30391>>>>>>>        Get phoRegisteredActions to hoActions
30392>>>>>>>        Move hoAction to hoActions[SizeOfArray(hoActions)]
30393>>>>>>>        Set phoRegisteredActions to hoActions
30394>>>>>>>        Get pbActiveUpdate of hoAction to bActive
30395>>>>>>>        If bActive Begin
30397>>>>>>>            Send AddActiveAction hoAction
30398>>>>>>>        End
30398>>>>>>>>
30398>>>>>>>    End_Procedure
30399>>>>>>>    
30399>>>>>>>    // remove action from list of active actions.
30399>>>>>>>    Procedure RemoveActiveAction Handle hoAction
30401>>>>>>>        Handle[] hoActiveActions
30402>>>>>>>        Integer iIndex i iCount
30402>>>>>>>        Get phoActiveUpdates to hoActiveActions
30403>>>>>>>        Move (SearchArray(hoAction,hoActiveActions)) to iIndex
30404>>>>>>>        If (iIndex<>-1) Begin
30406>>>>>>>            Move (SizeOfArray(hoActiveActions)) to iCount
30407>>>>>>>            For i from iIndex to (iCount-2)
30413>>>>>>>>
30413>>>>>>>                Move hoActiveActions[i+1] to hoActiveActions[i]
30414>>>>>>>            Loop
30415>>>>>>>>
30415>>>>>>>            Move (ResizeArray(hoActiveActions,iCount-1)) to hoActiveActions
30416>>>>>>>            Set phoActiveUpdates to hoActiveActions
30417>>>>>>>        End
30417>>>>>>>>
30417>>>>>>>    End_Procedure
30418>>>>>>>    
30418>>>>>>>    // remove action from list of registered actions.
30418>>>>>>>    Procedure RemoveRegisteredAction Handle hoAction
30420>>>>>>>        Handle[] hoActiveActions
30421>>>>>>>        Boolean bActive
30421>>>>>>>        Integer iIndex i iCount
30421>>>>>>>        Get phoRegisteredActions to hoActiveActions
30422>>>>>>>        Move (SearchArray(hoAction,hoActiveActions)) to iIndex
30423>>>>>>>        If (iIndex<>-1) Begin
30425>>>>>>>            Move (SizeOfArray(hoActiveActions)) to iCount
30426>>>>>>>            For i from iIndex to (iCount-2)
30432>>>>>>>>
30432>>>>>>>                Move hoActiveActions[i+1] to hoActiveActions[i]
30433>>>>>>>            Loop
30434>>>>>>>>
30434>>>>>>>            Move (ResizeArray(hoActiveActions,iCount-1)) to hoActiveActions
30435>>>>>>>            Set phoRegisteredActions to hoActiveActions
30436>>>>>>>        End
30436>>>>>>>>
30436>>>>>>>        Get pbActiveUpdate of hoAction to bActive
30437>>>>>>>        If bActive Begin
30439>>>>>>>            Send RemoveActiveAction hoAction
30440>>>>>>>        End
30440>>>>>>>>
30440>>>>>>>    End_Procedure
30441>>>>>>>    
30441>>>>>>>    // Retrieves a populated tGrpIconDir struct for the passed icon name. The data is populated
30441>>>>>>>    // from the icon group resource related to the passed icon name.
30441>>>>>>>    // sIcon        - is the name of the icon file e.g. "cut.ico" - this must be an icon resource compiled
30441>>>>>>>    //                into the running application.
30441>>>>>>>    // GroupIconDir - [out] This is the tWinGrpIconDir struct that is populated and passed back
30441>>>>>>>    // Returns      - True of the icon group data could be read otherwise returns false.
30441>>>>>>>    Function GetIconGroupData String sIcon tWinGrpIconDir ByRef GroupIconDir Returns Boolean
30443>>>>>>>        Handle hResInfo hResData
30443>>>>>>>        Pointer lpType lpIconInfo lpDest
30443>>>>>>>        Integer iIcon icIcon
30443>>>>>>>        Longptr iStructSize
30443>>>>>>>        Boolean bOK
30443>>>>>>>        tWinGrpIconDirEntry GroupIconDirEntry
30443>>>>>>>        tWinGrpIconDirEntry GroupIconDirEntry
30443>>>>>>>        
30443>>>>>>>        // Retrieve information about the icon group resource
30443>>>>>>>        Move (FindResource(GetModuleHandleW(0), Utf8ToAnsi(sIcon), RT_GROUP_ICON)) to hResInfo   // get the resource info handle for the icon group resource
30444>>>>>>>        If (hResInfo = 0) ;            Function_Return False
30447>>>>>>>        
30447>>>>>>>        Move (LoadResource(GetModuleHandleW(0), hResInfo)) to hResData               // get the resource data handle from the resource info handle
30448>>>>>>>        If (hResData = 0) ;            Function_Return False
30451>>>>>>>        
30451>>>>>>>        Move (LockResource(hResData)) to lpIconInfo                                 // pointer to tGrpIconDir struct
30452>>>>>>>        If (lpIconInfo = 0) ;            Function_Return False
30455>>>>>>>        
30455>>>>>>>        // Copy the resource information into our Group Icon Dir Struct
30455>>>>>>>        Move (AddressOf(GroupIconDir)) to lpDest
30456>>>>>>>        Move (MemCopy(lpDest, lpIconInfo, 6)) to bOK     // copy the base data
30457>>>>>>>        If (not(bOK)) ;            Function_Return False
30460>>>>>>>        
30460>>>>>>>        Move GroupIconDir.idCount to icIcon                            // get the number of IconDirEntry members
30461>>>>>>>        Move GroupIconDirEntry to GroupIconDir.idEntries[icIcon-1]     // create the empty IconDirEntry array
30462>>>>>>>        Move (SizeOfType(tWinGrpIconDirEntry)) to iStructSize
30463>>>>>>>        Move (lpIconInfo + 6) to lpIconInfo    // advance the memory pointer to the start of the array
30464>>>>>>>        
30464>>>>>>>        For iIcon from 0 to (icIcon-1)    // copy each array member one by one
30470>>>>>>>>
30470>>>>>>>            Move (AddressOf(GroupIconDir.idEntries[iIcon])) to lpDest
30471>>>>>>>            Move (MemCopy(lpDest, lpIconInfo, iStructSize)) to bOK     // copy the base data
30472>>>>>>>            If (not(bOK)) ;                Function_Return False
30475>>>>>>>            
30475>>>>>>>            // advance the memory pointer to the start of the next array member
30475>>>>>>>            Move (lpIconInfo + iStructSize) to lpIconInfo
30476>>>>>>>        Loop
30477>>>>>>>>
30477>>>>>>>        
30477>>>>>>>        Function_Return True
30478>>>>>>>    End_Function
30479>>>>>>>    
30479>>>>>>>    // Loads all icon image resources that belong to the icon group of the passed icon name.
30479>>>>>>>    // The entire icon group is added to the commandbar's icons collection with the same icon ID.
30479>>>>>>>    // sIcon        - Name of the resource group icon we are loading e.g. "Save.ico"
30479>>>>>>>    // iID          - CJ Commandbar ID to be assigned to the icons that we load
30479>>>>>>>    // hoImageIcons - Handle to the command bar's cCJImageManagerIcons object where the icon will be added
30479>>>>>>>    // eImageType   - The commandbar image type, e.g. xtpImageNormal
30479>>>>>>>    // Boolean      - Returns True if successful, otherwise returns False
30479>>>>>>>    Function LoadIconGroupFromResource String sIcon Integer iID Handle hoImageIcons Integer eImageType Returns Boolean
30481>>>>>>>        Integer iIcon
30481>>>>>>>        tWinGrpIconDir GroupIconDir
30481>>>>>>>        tWinGrpIconDir GroupIconDir
30481>>>>>>>        Boolean bRetValue
30481>>>>>>>        
30481>>>>>>>        Get GetIconGroupData sIcon (&GroupIconDir) to bRetValue
30482>>>>>>>        
30482>>>>>>>        If (bRetValue) Begin
30484>>>>>>>            // Iterate the icon entries...
30484>>>>>>>            For iIcon from 0 to (GroupIconDir.idCount-1)
30490>>>>>>>>
30490>>>>>>>                Send ComLoadIconFromResource of hoImageIcons (GetModuleHandleW(0)) GroupIconDir.idEntries[iIcon].nID iID eImageType
30491>>>>>>>            Loop
30492>>>>>>>>
30492>>>>>>>        End
30492>>>>>>>>
30492>>>>>>>        
30492>>>>>>>        Function_Return bRetValue
30493>>>>>>>    End_Function
30494>>>>>>>    
30494>>>>>>>    
30494>>>>>>>    // Adds an image to imagelist. Pass if bmp or icon, the image name and the Id and image type (normal, disabled, etc.)
30494>>>>>>>    // With Bitmaps this will first look for the resource then search for the file in the file path.
30494>>>>>>>    // With Icons it checks for the file first (explained below)
30494>>>>>>>    // return Image Id if success
30494>>>>>>>    Function AddImageType Boolean bIsIcon String sImage Integer iId Integer eImageType Returns Integer
30496>>>>>>>        Handle hBitmap
30496>>>>>>>        Variant vImageManager
30496>>>>>>>        Handle hoImageIcons
30496>>>>>>>        Integer iVoid
30496>>>>>>>        Boolean bOk
30496>>>>>>>        String sFileImage
30496>>>>>>>        
30496>>>>>>>        If (iId=0) Begin
30498>>>>>>>            Get piLastImageId to iId
30499>>>>>>>            Increment iId
30500>>>>>>>            Set piLastImageId to iId
30501>>>>>>>        End
30501>>>>>>>>
30501>>>>>>>        
30501>>>>>>>        Get CreateNamed (RefClass(cCJImageManagerIcons)) "oImageManagerIcons" to hoImageIcons
30502>>>>>>>        Get ComIcons to vImageManager
30503>>>>>>>        Set pvComObject of hoImageIcons to vImageManager
30504>>>>>>>        
30504>>>>>>>        If bIsIcon Begin
30506>>>>>>>            Get LoadIconGroupFromResource sImage iId hoImageIcons eImageType to bOk
30507>>>>>>>            
30507>>>>>>>            If (not(bOk)) Begin
30509>>>>>>>                Get_File_Path sImage to sFileImage // find path in DFPATH, if appropriate
30510>>>>>>>                If (sFileImage<>"") Begin
30512>>>>>>>                    Send ComLoadIcon of hoImageIcons sFileImage iId eImageType
30513>>>>>>>                    Move True to bOk
30514>>>>>>>                End
30514>>>>>>>>
30514>>>>>>>            End
30514>>>>>>>>
30514>>>>>>>        End
30514>>>>>>>>
30514>>>>>>>        Else Begin
30515>>>>>>>            // if a bitmap - load from resource first then from file
30515>>>>>>>            Move (LoadImage(GetModuleHandleW(0), sImage, IMAGE_BITMAP, 0, 0, 0)) to hBitmap
30516>>>>>>>            
30516>>>>>>>            If (hBitmap=0) Begin // the bitmap was not in the EXE resource
30518>>>>>>>                Get_File_Path sImage to sFileImage // find path in DFPATH, if appropriate
30519>>>>>>>                
30519>>>>>>>                If (sFileImage <>"") Begin // The image was found!
30521>>>>>>>                    Send ComLoadBitmap of hoImageIcons sFileImage iId eImageType
30522>>>>>>>                    Move True to bOk
30523>>>>>>>                End
30523>>>>>>>>
30523>>>>>>>            End
30523>>>>>>>>
30523>>>>>>>            
30523>>>>>>>            If hBitmap Begin
30525>>>>>>>                Send ComAddBitmap of hoImageIcons hBitmap iId eImageType False
30526>>>>>>>                Move (DeleteObject(hBitmap)) to iVoid
30527>>>>>>>                Move True to bOk
30528>>>>>>>            End
30528>>>>>>>>
30528>>>>>>>        End
30528>>>>>>>>
30528>>>>>>>        
30528>>>>>>>        Send Destroy of hoImageIcons
30529>>>>>>>        
30529>>>>>>>        Function_Return (If(bOk, iId, 0))
30530>>>>>>>    End_Function
30531>>>>>>>    
30531>>>>>>>    // Adds an image to imagelist.
30531>>>>>>>    // We assume that this is an icon unless the .bmp extension is passed.
30531>>>>>>>    // return True if success
30531>>>>>>>    Function AddImage String sImage Integer iId Integer eImageType Returns Integer
30533>>>>>>>        Boolean bIsIcon
30533>>>>>>>        // Command Bars support many graphics formats including .bmp, .gif, .jpg etc.
30533>>>>>>>        // These are all non-icon formats...
30533>>>>>>>        Move (Right(Lowercase(sImage), 4) = ".ico") to bIsIcon
30534>>>>>>>        Get AddImageType bIsIcon sImage iId eImageType to iId
30535>>>>>>>        Function_Return iId
30536>>>>>>>    End_Function
30537>>>>>>>    
30537>>>>>>>    // Create a StateOptions object and set it as needed. This is used to save and
30537>>>>>>>    // load settings. You could augment this to customize as needed.
30537>>>>>>>    Function CreateStateOptions Integer eLayout Returns Handle
30539>>>>>>>        Handle hoStateOptions
30539>>>>>>>        Variant vStateOptions
30539>>>>>>>        
30539>>>>>>>        Get Create U_cCJStateOptions to hoStateOptions
30540>>>>>>>        Get ComCreateStateOptions to vStateOptions
30541>>>>>>>        Set pvComObject of hoStateOptions to vStateOptions
30542>>>>>>>        
30542>>>>>>>        Set ComLoadSilent of hoStateOptions to True
30543>>>>>>>        
30543>>>>>>>        // If True, only CommandBars that have been customized will be saved.
30543>>>>>>>        Set ComSaveOnlyCustomized of hoStateOptions to True
30544>>>>>>>        
30544>>>>>>>        // If True, the original state of the CommandBars is saved along with the customized state
30544>>>>>>>        // For example, if a button on a toolbar is moved, then both the original and modified states will be saved.
30544>>>>>>>        Set ComSaveOriginalControls of hoStateOptions to True
30545>>>>>>>        
30545>>>>>>>        Set ComSerializeDesignerControls of hoStateOptions to False
30546>>>>>>>        
30546>>>>>>>        // If True, the controls in the CommandBars will be saved. If False, no controls will be saved,
30546>>>>>>>        // regardless of the other settings.
30546>>>>>>>        Set ComSerializeControls of hoStateOptions to (eLayout=rlSaveRestoreAll)
30547>>>>>>>        
30547>>>>>>>        // If True, the images stored in the ImageManager will be saved.
30547>>>>>>>        Set ComSerializeImages of hoStateOptions to False
30548>>>>>>>        
30548>>>>>>>        // If True, the layout of the CommandBars will be saved. The Layout includes information such as
30548>>>>>>>        // bar position, location, and size.
30548>>>>>>>        Set ComSerializeLayout of hoStateOptions to (eLayout<>rlNoSaveRestore)
30549>>>>>>>        
30549>>>>>>>        // If True, the setting on the Keyboard and Options pages of the Customize dialog will
30549>>>>>>>        // be saved. This includes shortcut keys and CommandBar options like large icons and full menus.
30549>>>>>>>        Set ComSerializeOptions of hoStateOptions to (eLayout=rlSaveRestoreAll or eLayout=rlSaveRestoreFullLayout)
30550>>>>>>>        
30550>>>>>>>        // in our model, actions are never saved.
30550>>>>>>>        Set ComSerializeActions of hoStateOptions to False
30551>>>>>>>        
30551>>>>>>>        Function_Return hoStateOptions
30552>>>>>>>    End_Function
30553>>>>>>>    
30553>>>>>>>    Function CreatePropExchangeObject Returns Handle
30555>>>>>>>        Handle hoPropExchange hoGlobal
30555>>>>>>>        Variant vPropExchange vGlobal
30555>>>>>>>        
30555>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30557>>>>>>>            Error DFERR_PROGRAM "Cannot exchange Commands bars data. COM object not created"
30558>>>>>>>>
30558>>>>>>>            Function_Return 0
30559>>>>>>>        End
30559>>>>>>>>
30559>>>>>>>        
30559>>>>>>>        Get Create U_cCJCommandBarsGlobalSettings to hoGlobal
30560>>>>>>>        Get ComGlobalSettings to vGlobal
30561>>>>>>>        Set pvComObject of hoGlobal to vGlobal
30562>>>>>>>        Get ComCreatePropExchange of hoGlobal to vPropExchange
30563>>>>>>>        Get Create U_cCJPropExchange to hoPropExchange
30564>>>>>>>        Set pvComObject of hoPropExchange to vPropExchange
30565>>>>>>>        Send Destroy of hoGlobal
30566>>>>>>>        Function_Return hoPropExchange
30567>>>>>>>    End_Function
30568>>>>>>>    
30568>>>>>>>    // exchange the current commandbar layout with the prop exchange object.
30568>>>>>>>    // pass the exchange object and the section name to save this under. The exchange
30568>>>>>>>    // object contains information if this is a save or load (ComLoading).
30568>>>>>>>    // can be called by any exchange object allowing developers to save a commandbar
30568>>>>>>>    // structure as part of other information they may be saving and loading
30568>>>>>>>    
30568>>>>>>>    Procedure ExchangeLayout Handle hoExchange String sSection Integer eLayout
30570>>>>>>>        Variant vSection vOptions
30570>>>>>>>        Handle hoExchangePref hoStatusBar  hoStateOptions
30570>>>>>>>        Integer iLast iLastBar iStatusBarVisible iBuild iIDBuild iIDCount iIDBarCount
30570>>>>>>>        Boolean bLoad bSerializeControls
30570>>>>>>>        
30570>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30572>>>>>>>            Error DFERR_PROGRAM "Cannot exchange Commands bars data. COM object not created"
30573>>>>>>>>
30573>>>>>>>            Procedure_Return
30574>>>>>>>        End
30574>>>>>>>>
30574>>>>>>>        
30574>>>>>>>        Get phoStatusBar to hoStatusBar
30575>>>>>>>        Get ComLoading of hoExchange to bLoad
30576>>>>>>>        Get piLastAssignedDesignTimeId to iLast
30577>>>>>>>        Get piLastAssignedDesignTimeBarId to iLastBar
30578>>>>>>>        Get piLayoutBuild to iBuild
30579>>>>>>>        
30579>>>>>>>        Get CreateStateOptions eLayout to hoStateOptions
30580>>>>>>>        Get ComSerializeControls of hoStateOptions to bSerializeControls
30581>>>>>>>        Get pvComObject of hoStateOptions to vOptions
30582>>>>>>>        
30582>>>>>>>        Get Create U_cCJPropExchange to hoExchangePref
30583>>>>>>>        
30583>>>>>>>        Get ComGetSection of hoExchange sSection to vSection
30584>>>>>>>        Set pvComObject of hoExchangePref to vSection
30585>>>>>>>        
30585>>>>>>>        If (not(bLoad)) Begin
30587>>>>>>>            
30587>>>>>>>            Send ComDoPropExchange vSection vOptions
30588>>>>>>>            Send ComExchangeInt of hoExchangePref "IDCount" (&iLast) 0
30589>>>>>>>            Send ComExchangeInt of hoExchangePref "BarIDCount" (&iLastBar) 0
30590>>>>>>>            If (hoStatusBar) Begin
30592>>>>>>>                Get pbVisible of hoStatusBar to iStatusBarVisible
30593>>>>>>>                Send ComExchangeInt of hoExchangePref "IsStatusBarVisible" (&iStatusBarVisible) 1
30594>>>>>>>            End
30594>>>>>>>>
30594>>>>>>>            Send ComExchangeInt of hoExchangePref "Build" (&iBuild) 0
30595>>>>>>>        End
30595>>>>>>>>
30595>>>>>>>        Else Begin
30596>>>>>>>            // get the build from the data. If it is not what we expect, don't load - it is out of date
30596>>>>>>>            Send ComExchangeInt of hoExchangePref "Build" (&iIDBuild) 0
30597>>>>>>>            If (iIDBuild=iBuild) Begin
30599>>>>>>>                Send ComExchangeInt of hoExchangePref "IDCount" (&iIDCount) 0
30600>>>>>>>                Send ComExchangeInt of hoExchangePref "BarIDCount" (&iIDBarCount) 0
30601>>>>>>>                If (hoStatusBar) Begin
30603>>>>>>>                    Send ComExchangeInt of hoExchangePref "IsStatusBarVisible" (&iStatusBarVisible) 1
30604>>>>>>>                    Set pbVisible of hoStatusBar to iStatusBarVisible
30605>>>>>>>                End
30605>>>>>>>>
30605>>>>>>>                
30605>>>>>>>                // do the load if we serialize controls and the control count is ok
30605>>>>>>>                // and if the barId count is ok
30605>>>>>>>                If ((not(bSerializeControls) or iLast=iIDCount) and iLastBar=iIDBarCount) Begin
30607>>>>>>>                    Send ComDoPropExchange vSection vOptions
30608>>>>>>>                End
30608>>>>>>>>
30608>>>>>>>                Send ComRecalcLayout
30609>>>>>>>            End
30609>>>>>>>>
30609>>>>>>>        End
30609>>>>>>>>
30609>>>>>>>        
30609>>>>>>>        Send destroy of hoExchangePref
30610>>>>>>>        Send Destroy of hoStateOptions
30611>>>>>>>    End_Procedure
30612>>>>>>>    
30612>>>>>>>    
30612>>>>>>>    // saves and loads commands info to the registry.
30612>>>>>>>    // While this is private. It provides a good model for how to do this kind of thing.
30612>>>>>>>    Function LoadLayoutFromRegistry Integer eLayout String sKey Returns Boolean
30614>>>>>>>        Handle hoExchange
30614>>>>>>>        Boolean bOk
30614>>>>>>>        String sSection sFullKey
30614>>>>>>>        
30614>>>>>>>        If (eLayout=rlNoSaveRestore) Begin
30616>>>>>>>            Function_Return True
30617>>>>>>>        End
30617>>>>>>>>
30617>>>>>>>        
30617>>>>>>>        Move ("HKEY_CURRENT_USER\" - sKey) to sFullKey
30618>>>>>>>        Get psLayoutSection to sSection
30619>>>>>>>        Get CreatePropExchangeObject to hoExchange
30620>>>>>>>        
30620>>>>>>>        Get ComCreateAsRegistry of hoExchange True sFullKey to bOk
30621>>>>>>>        
30621>>>>>>>        If not (bOk) Begin
30623>>>>>>>            Error DFERR_PROGRAM "Assert: Cannot load from registry"
30624>>>>>>>>
30624>>>>>>>        End
30624>>>>>>>>
30624>>>>>>>        
30624>>>>>>>        If bOk Begin
30626>>>>>>>            Send ExchangeLayout hoExchange sSection eLayout
30627>>>>>>>            Send ComRecalcLayout
30628>>>>>>>        End
30628>>>>>>>>
30628>>>>>>>        Send destroy of hoExchange
30629>>>>>>>        Function_Return bOk
30630>>>>>>>    End_Function
30631>>>>>>>    
30631>>>>>>>    
30631>>>>>>>    Procedure SaveLayoutToRegistry Integer eLayout String sKey
30633>>>>>>>        Handle hoExchange hoRegistry
30633>>>>>>>        Boolean bOk bExists bVoid
30633>>>>>>>        String sSection sFullKey sShortKey
30633>>>>>>>        
30633>>>>>>>        If (eLayout=rlNoSaveRestore) Begin
30635>>>>>>>            Procedure_Return
30636>>>>>>>        End
30636>>>>>>>>
30636>>>>>>>        
30636>>>>>>>        Move ("HKEY_CURRENT_USER\" - sKey) to sFullKey
30637>>>>>>>        Get psLayoutSection to sSection
30638>>>>>>>        Move (sKey - "\" - sSection) to sShortKey
30639>>>>>>>        
30639>>>>>>>        If (sKey="" or sSection="") Begin
30641>>>>>>>            Error DFERR_PROGRAM "Assert: Registry Key or Section name is invalid"
30642>>>>>>>>
30642>>>>>>>        End
30642>>>>>>>>
30642>>>>>>>        
30642>>>>>>>        Get CreatePropExchangeObject to hoExchange
30643>>>>>>>        Get ComCreateAsRegistry of hoExchange False sFullKey to bOk
30644>>>>>>>        
30644>>>>>>>        If not (bOk) Begin
30646>>>>>>>            Error DFERR_PROGRAM "Assert: Cannot save layout to registry"
30647>>>>>>>>
30647>>>>>>>        End
30647>>>>>>>>
30647>>>>>>>        
30647>>>>>>>        If bOk Begin
30649>>>>>>>            // delete the existing registry information for this section
30649>>>>>>>            Get Create U_cRegistry to hoRegistry
30650>>>>>>>            Set pbLazyWrite of hoRegistry to False
30651>>>>>>>            Get KeyExists of hoRegistry sShortKey to bExists
30652>>>>>>>            If bExists Begin
30654>>>>>>>                Get DeleteKey of hoRegistry sShortKey to bVoid
30655>>>>>>>            End
30655>>>>>>>>
30655>>>>>>>            Send Destroy of hoRegistry
30656>>>>>>>            
30656>>>>>>>            Send ExchangeLayout hoExchange sSection eLayout
30657>>>>>>>        End
30657>>>>>>>>
30657>>>>>>>        
30657>>>>>>>        Send destroy of hoExchange
30658>>>>>>>    End_Procedure
30659>>>>>>>    
30659>>>>>>>    
30659>>>>>>>    Function LoadLayoutFromXML Integer eLayout String sFileName Returns Boolean
30661>>>>>>>        Handle hoExchange
30661>>>>>>>        String sSection
30661>>>>>>>        Boolean bOk
30661>>>>>>>        
30661>>>>>>>        If (eLayout=rlNoSaveRestore) Begin
30663>>>>>>>            Function_Return True
30664>>>>>>>        End
30664>>>>>>>>
30664>>>>>>>        
30664>>>>>>>        Get psLayoutSection to sSection
30665>>>>>>>        Get CreatePropExchangeObject to hoExchange
30666>>>>>>>        
30666>>>>>>>        Get ComCreateAsXML of hoExchange True "Settings" to bOk
30667>>>>>>>        
30667>>>>>>>        If not (bOk) Begin
30669>>>>>>>            Error DFERR_PROGRAM "Assert: Cannot load layout from XML"
30670>>>>>>>>
30670>>>>>>>        End
30670>>>>>>>>
30670>>>>>>>        
30670>>>>>>>        If bOk Begin
30672>>>>>>>            Get ComLoadFromFile of hoExchange sFileName to bOk
30673>>>>>>>            If bOk Begin
30675>>>>>>>                Send ExchangeLayout hoExchange sSection eLayout
30676>>>>>>>                Send ComRecalcLayout
30677>>>>>>>            End
30677>>>>>>>>
30677>>>>>>>        End
30677>>>>>>>>
30677>>>>>>>        Send destroy of hoExchange
30678>>>>>>>        Function_Return bOk
30679>>>>>>>    End_Function
30680>>>>>>>    
30680>>>>>>>    Procedure SaveLayoutToXML Integer eLayout String sFileName
30682>>>>>>>        Handle hoExchange
30682>>>>>>>        String sSection
30682>>>>>>>        Boolean bOk
30682>>>>>>>        
30682>>>>>>>        If (eLayout=rlNoSaveRestore) Begin
30684>>>>>>>            Procedure_Return
30685>>>>>>>        End
30685>>>>>>>>
30685>>>>>>>        
30685>>>>>>>        Get psLayoutSection to sSection
30686>>>>>>>        Get CreatePropExchangeObject to hoExchange
30687>>>>>>>        
30687>>>>>>>        Get ComCreateAsXML of hoExchange False "Settings" to bOk
30688>>>>>>>        
30688>>>>>>>        If not (bOk) Begin
30690>>>>>>>            Error DFERR_PROGRAM "Assert: Cannot save XML layout"
30691>>>>>>>>
30691>>>>>>>        End
30691>>>>>>>>
30691>>>>>>>        
30691>>>>>>>        If bOk Begin
30693>>>>>>>            Send ExchangeLayout hoExchange sSection eLayout
30694>>>>>>>            Send ComSaveToFile of hoExchange sFileName
30695>>>>>>>        End
30695>>>>>>>>
30695>>>>>>>        Send destroy of hoExchange
30696>>>>>>>    End_Procedure
30697>>>>>>>    
30697>>>>>>>    // needed in case where no application object is present
30697>>>>>>>    Register_Function pbPreserveEnvironment Returns Boolean
30697>>>>>>>    Register_Function RegistryKeyString Returns String
30697>>>>>>>    
30697>>>>>>>    // Standard SaveEnvironment Behavior. This is called when the commandbar system
30697>>>>>>>    // is closed. It will save environment if:
30697>>>>>>>    // 1) application Object exists and pbPreserveEnvironment is true
30697>>>>>>>    // 2) peRestoreLayout is not rlNoSaveRestore
30697>>>>>>>    // This is good for augmentation if you wish to change the standard save
30697>>>>>>>    Procedure SaveEnvironment
30699>>>>>>>        Handle eLayout
30699>>>>>>>        String sKey
30699>>>>>>>        Boolean bPreserveEnvironment
30699>>>>>>>        
30699>>>>>>>        If (ghoApplication=0) Begin
30701>>>>>>>            Procedure_Return
30702>>>>>>>        End
30702>>>>>>>>
30702>>>>>>>        Get pbPreserveEnvironment of ghoApplication to bPreserveEnvironment
30703>>>>>>>        If bPreserveEnvironment Begin
30705>>>>>>>            Get peRestoreLayout to eLayout
30706>>>>>>>            Get RegistryKeyString of ghoApplication to sKey
30707>>>>>>>            Send SaveLayoutToRegistry eLayout sKey
30708>>>>>>>        End
30708>>>>>>>>
30708>>>>>>>    End_Procedure
30709>>>>>>>    
30709>>>>>>>    
30709>>>>>>>    // Standard LoadEnvironment Behavior. This is called when the commandbar system
30709>>>>>>>    // is created. It will load environment if:
30709>>>>>>>    // 1) application Object exists and pbPreserveEnvironment is true
30709>>>>>>>    // 2) peRestoreLayout is not rlNoSaveRestore
30709>>>>>>>    // This is good for augmentation if you wish to change the standard load.
30709>>>>>>>    
30709>>>>>>>    Procedure LoadEnvironment
30711>>>>>>>        Handle eLayout
30711>>>>>>>        String sKey
30711>>>>>>>        Boolean bOk bPreserveEnvironment
30711>>>>>>>        
30711>>>>>>>        If (ghoApplication=0) Begin
30713>>>>>>>            Procedure_Return
30714>>>>>>>        End
30714>>>>>>>>
30714>>>>>>>        Get pbPreserveEnvironment of ghoApplication to bPreserveEnvironment
30715>>>>>>>        If bPreserveEnvironment Begin
30717>>>>>>>            Get peRestoreLayout to eLayout
30718>>>>>>>            Get RegistryKeyString of ghoApplication to sKey
30719>>>>>>>            Get LoadLayoutFromRegistry eLayout sKey to bOk
30720>>>>>>>        End
30720>>>>>>>>
30720>>>>>>>    End_Procedure
30721>>>>>>>    
30721>>>>>>>    
30721>>>>>>>    Procedure RestoreLayout
30723>>>>>>>        Variant vToolBarObject
30723>>>>>>>        Send ComDeleteAll
30724>>>>>>>        Get ComAddMenuBar "Main menu" to vToolbarObject
30725>>>>>>>        //Broadcast Send CreateComCommandBarInstance
30725>>>>>>>        Broadcast Send CreateComInstance
30727>>>>>>>        Send ComRecalcLayout
30728>>>>>>>    End_Procedure
30729>>>>>>>    
30729>>>>>>>    // used to dock a commandbar, on the same row and to the right of another commandbar
30729>>>>>>>    // used by pbDockNextTo property in toolbars
30729>>>>>>>    Procedure DockNextTo Variant vBarToDock Variant vBarOnLeft
30731>>>>>>>        Integer iLeft iTop iRight iBottom iPosition
30731>>>>>>>        Handle hoBarOnLeft
30731>>>>>>>        Get Create U_cCJCommandBar to hoBarOnLeft
30732>>>>>>>        Set pvComObject of hoBarOnLeft to vBarOnLeft
30733>>>>>>>        Send ComRecalcLayout
30734>>>>>>>        Send ComGetWindowRect of hoBarOnLeft (&iLeft) (&iTop) (&iRight) (&iBottom)
30735>>>>>>>        Get ComPosition of hoBarOnLeft to iPosition
30736>>>>>>>        Send ComDockToolBar vBarToDock (iLeft+1) ((iBottom + iTop)/2) iPosition
30737>>>>>>>        Send Destroy of hoBarOnLeft
30738>>>>>>>    End_Procedure
30739>>>>>>>    
30739>>>>>>>    // This only works if this command bar is placed inside of BasicPanel or if the
30739>>>>>>>    // command bar is in a modal dialog that is placed inside of a Panel
30739>>>>>>>    Function Is_Function Integer iMsgId Integer hoObjId Boolean bDelegateFg Returns Boolean
30741>>>>>>>        Boolean bOk
30741>>>>>>>        Handle hoMain
30741>>>>>>>        // this should get resolved via delegation
30741>>>>>>>        Get Main_Panel_id to hoMain
30742>>>>>>>        If (hoObjId>Desktop and hoMain) ;            Get Is_Function of hoMain iMsgId hoObjId bDelegateFg to bOk
30745>>>>>>>        Function_Return bOk
30746>>>>>>>    End_Function
30747>>>>>>>    
30747>>>>>>>    // these must be registered if you are using this with a non-db application. If you are using this
30747>>>>>>>    // with a non-db application, you should not be calling the DEOInformation method as you will get
30747>>>>>>>    // a runtime programming error.
30747>>>>>>>    
30747>>>>>>>    Register_Function Server Returns Integer
30747>>>>>>>    Register_Function DEO_Object Returns Integer
30747>>>>>>>    Register_Function DEO_Control_Object Returns Integer
30747>>>>>>>    Register_Function File_Field_Index Integer iFile Integer iField Returns Integer
30747>>>>>>>    
30747>>>>>>>    // returns information about the Focus object. If it returns True its a DEO. If a DEO the
30747>>>>>>>    // server, hasRecord, changed and hasindex info will all be returned by ref.
30747>>>>>>>    // If false, these are all unchanged.
30747>>>>>>>    Function DEOInformation Handle ByRef hoServer Boolean ByRef bHasRecord Boolean ByRef bChanged Boolean ByRef bHasIndex Returns Boolean
30749>>>>>>>        Handle hoFocus
30749>>>>>>>        Boolean bISDeo bIsControl
30749>>>>>>>        Integer iFile iField
30749>>>>>>>        Get Focus of desktop to hoFocus
30750>>>>>>>        Get Is_Function Get_Deo_Object hoFocus True to bIsDeo
30751>>>>>>>        If bISDEO Begin
30753>>>>>>>            Move False to bHasRecord
30754>>>>>>>            Move False to bChanged
30755>>>>>>>            Move False to bHasIndex
30756>>>>>>>            Get Server of hoFocus to hoServer
30757>>>>>>>            If hoServer Begin
30759>>>>>>>                Get HasRecord of hoServer to bHasRecord
30760>>>>>>>                Get Should_Save of hoServer to bChanged
30761>>>>>>>                Get Is_Function Get_DEO_Control_Object hoFocus False to bIsControl
30762>>>>>>>                If (bIsControl) Begin
30764>>>>>>>                    Get Data_File of hoFocus to iFile
30765>>>>>>>                    Get Data_Field of hoFocus to iField
30766>>>>>>>                    Move ( iFile>0 and File_Field_Index(hoServer,iFile,iField)>-1) to bHasIndex
30767>>>>>>>                End
30767>>>>>>>>
30767>>>>>>>            End
30767>>>>>>>>
30767>>>>>>>        End
30767>>>>>>>>
30767>>>>>>>        Function_Return bISDeo
30768>>>>>>>    End_Function
30769>>>>>>>    
30769>>>>>>>    // Find all controls within this control with the passed Id.
30769>>>>>>>    Procedure ControlsInControl Integer iId Handle hoControl Variant[] ByRef ArrayOfvControls
30771>>>>>>>        Variant vCommandBar
30771>>>>>>>        Handle  hoCommandBar
30771>>>>>>>        Integer eType
30771>>>>>>>        Get ComType of hoControl to eType
30772>>>>>>>        If (eType=xtpControlPopup or eType=xtpControlButtonPopup or eType=xtpControlSplitButtonPopup) Begin
30774>>>>>>>            Get Create U_cCJCommandBar to hoCommandbar
30775>>>>>>>            Get ComCommandBar of hoControl to vCommandBar
30776>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
30777>>>>>>>            Send ControlsInCommandBar iId hoCommandBar (&ArrayOfvControls)
30778>>>>>>>            Send Destroy of hoCommandBar
30779>>>>>>>        End
30779>>>>>>>>
30779>>>>>>>    End_Procedure
30780>>>>>>>    
30780>>>>>>>    // Find all controls within this commandbar with the passed Id.
30780>>>>>>>    Procedure ControlsInCommandBar Integer iId Handle hoCommandBar Variant[] ByRef ArrayOfvControls
30782>>>>>>>        Variant vNewControl  vNewControls
30782>>>>>>>        Handle  hoNewControl hoNewControls
30782>>>>>>>        Integer iControls i  iNewId
30782>>>>>>>        
30782>>>>>>>        Get Create U_cCJCommandBarControls to hoNewControls
30783>>>>>>>        Get Create U_cCJCommandBarPopup to hoNewControl
30784>>>>>>>        
30784>>>>>>>        Get ComControls of hoCommandBar to vNewControls
30785>>>>>>>        Set pvComObject of hoNewControls to vNewControls
30786>>>>>>>        
30786>>>>>>>        Get ComCount of hoNewControls to iControls
30787>>>>>>>        For i from 1 to iControls
30793>>>>>>>>
30793>>>>>>>            Get ComItem of hoNewControls i to  vNewControl
30794>>>>>>>            Set pvComObject of hoNewControl to vNewControl
30795>>>>>>>            
30795>>>>>>>            Get ComId of hoNewControl to iNewId
30796>>>>>>>            If (iNewId=iId) Begin
30798>>>>>>>                Move vNewControl to ArrayOfvControls[SizeOfArray(ArrayOfvControls)]
30799>>>>>>>            End
30799>>>>>>>>
30799>>>>>>>            
30799>>>>>>>            Send ControlsInControl iId hoNewControl (&ArrayOfvControls)
30800>>>>>>>        Loop
30801>>>>>>>>
30801>>>>>>>        
30801>>>>>>>        Send Destroy of hoNewControl
30802>>>>>>>        Send Destroy of hoNewControls
30803>>>>>>>    End_Procedure
30804>>>>>>>    
30804>>>>>>>    // Find all controls within the commandbarsystem with the passed Id.
30804>>>>>>>    // This can be used to search for Ids within a popup menu item. You only need to use
30804>>>>>>>    // this is there is a chance that there will be more than one control with this id.
30804>>>>>>>    Function FindControls Integer iId Returns Variant[]
30806>>>>>>>        Variant[] ArrayOfvControls
30807>>>>>>>        Variant vCommandBar
30807>>>>>>>        Integer iCommandBars i
30807>>>>>>>        Handle hoCommandBar
30807>>>>>>>        
30807>>>>>>>        Get Create U_cCJCommandBar to hoCommandbar
30808>>>>>>>        Get ComCount to iCommandBars
30809>>>>>>>        For i from 1 to iCommandBars
30815>>>>>>>>
30815>>>>>>>            Get ComItem i to vCommandBar
30816>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
30817>>>>>>>            Send ControlsInCommandBar iId hoCommandBar (&ArrayOfvControls)
30818>>>>>>>        Loop
30819>>>>>>>>
30819>>>>>>>        Send Destroy of hoCommandBar
30820>>>>>>>        Function_Return ArrayOfvControls
30821>>>>>>>    End_Function
30822>>>>>>>    
30822>>>>>>>    
30822>>>>>>>    
30822>>>>>>>    // this sends update to the action of all of the child menu items. Note these are the children
30822>>>>>>>    // of visual control, not the children of the action. This is used to enable, disable all
30822>>>>>>>    // menu items, etc.
30822>>>>>>>    
30822>>>>>>>    Procedure PopupInit Handle hoCommandBar Handle hoCommandBarControls
30824>>>>>>>        Handle hoControl hoAction hoItem
30824>>>>>>>        Variant vAction vControl
30824>>>>>>>        Integer i iCount
30824>>>>>>>        
30824>>>>>>>        Get Create U_cCJCommandBarControl to hoControl
30825>>>>>>>        Get Create U_cCJCommandBarAction to hoAction
30826>>>>>>>        
30826>>>>>>>        Get ComCount of hoCommandBarControls to iCount
30827>>>>>>>        // for each control we must find its action and set the action, which in
30827>>>>>>>        // turn will set this control (and any other control there might be with that action).
30827>>>>>>>        For i from 1 to iCount
30833>>>>>>>>
30833>>>>>>>            Get ComItem of hoCommandBarControls i to vControl
30834>>>>>>>            Set pvComObject of hoControl to vControl
30835>>>>>>>            Get ComAction of hoControl to vAction
30836>>>>>>>            // it is possible that there will be no action, in which case do nothing
30836>>>>>>>            If not (IsNullComObject(vAction)) Begin
30838>>>>>>>                Set pvComObject of hoAction to vAction
30839>>>>>>>                Get ComTag of hoAction to hoItem
30840>>>>>>>                If hoItem Begin
30842>>>>>>>                    Send Update of hoItem
30843>>>>>>>                End
30843>>>>>>>>
30843>>>>>>>            End
30843>>>>>>>>
30843>>>>>>>        Loop
30844>>>>>>>>
30844>>>>>>>        
30844>>>>>>>        Send Destroy of hoAction
30845>>>>>>>        Send Destroy of hoControl
30846>>>>>>>    End_Procedure
30847>>>>>>>    
30847>>>>>>>    
30847>>>>>>>    Procedure OnCreate
30849>>>>>>>        Forward Send OnCreate
30851>>>>>>>        Send CreateCommandBars
30852>>>>>>>    End_Procedure
30853>>>>>>>    
30853>>>>>>>    Procedure OnCreateCommandBars
30855>>>>>>>    End_Procedure
30856>>>>>>>    
30856>>>>>>>    Procedure OnRelease
30858>>>>>>>    End_Procedure
30859>>>>>>>    
30859>>>>>>>    Procedure OnUpdate
30861>>>>>>>    End_Procedure
30862>>>>>>>    
30862>>>>>>>    Procedure OnComExecute Variant llControl
30864>>>>>>>        Handle hoControl hoAction hoActionPointer
30864>>>>>>>        Variant vAction
30864>>>>>>>        Get Create U_cCJCommandBarControl to hoControl
30865>>>>>>>        Get Create U_cCJCommandBarAction to hoAction
30866>>>>>>>        
30866>>>>>>>        Set pvComObject of hoControl to llControl
30867>>>>>>>        Get ComAction of hoControl to vAction
30868>>>>>>>        // There should always be an action but it is possible that all
30868>>>>>>>        // CJ controls will not use this. (colorselector). So we must test.
30868>>>>>>>        If not (IsNullComObject(vAction)) Begin
30870>>>>>>>            Set pvComObject of hoAction to vAction
30871>>>>>>>            Get ComTag of hoAction to hoActionPointer
30872>>>>>>>        End
30872>>>>>>>>
30872>>>>>>>        Send Destroy of hoAction
30873>>>>>>>        Send Destroy of hoControl
30874>>>>>>>        
30874>>>>>>>        If hoActionPointer Begin
30876>>>>>>>            Send Execute of hoActionPointer llControl
30877>>>>>>>        End
30877>>>>>>>>
30877>>>>>>>        Else Begin
30878>>>>>>>            // if for some reason there is no action COM and/or DF object
30878>>>>>>>            // we allow this to be handled by this class as an unhandled
30878>>>>>>>            // execute
30878>>>>>>>            Send OnUnhandledExecute llControl
30879>>>>>>>        End
30879>>>>>>>>
30879>>>>>>>        
30879>>>>>>>    End_Procedure
30880>>>>>>>    
30880>>>>>>>    // this happens when the execute control either has no COM action
30880>>>>>>>    // or it has no DF action object. In such a case, we don't do anything other than
30880>>>>>>>    // call this method. Note that there may be a valid action but fo rsome reason
30880>>>>>>>    // the ComAction property did not get properly assigned by CJ. This seems to happen
30880>>>>>>>    // with the color selector object.
30880>>>>>>>    Procedure OnUnhandledExecute Variant llControl
30882>>>>>>>    End_Procedure
30883>>>>>>>    
30883>>>>>>>    
30883>>>>>>>    Procedure OnComControlSelected Variant llControl
30885>>>>>>>        Handle hoControl hoAction hoActionPointer
30885>>>>>>>        Variant vAction
30885>>>>>>>        If (not(IsNullComObject(llControl))) Begin
30887>>>>>>>            Get Create U_cCJCommandBarControl to hoControl
30888>>>>>>>            Get Create U_cCJCommandBarAction to hoAction
30889>>>>>>>            
30889>>>>>>>            Set pvComObject of hoControl to llControl
30890>>>>>>>            Get ComAction of hoControl to vAction
30891>>>>>>>            If (not(IsNullComObject(vAction))) Begin
30893>>>>>>>                Set pvComObject of hoAction to vAction
30894>>>>>>>                Get ComTag of hoAction to hoActionPointer
30895>>>>>>>            End
30895>>>>>>>>
30895>>>>>>>            Send Destroy of hoAction
30896>>>>>>>            Send Destroy of hoControl
30897>>>>>>>            
30897>>>>>>>            If hoActionPointer Begin
30899>>>>>>>                Send OnSelected of hoActionPointer llControl
30900>>>>>>>            End
30900>>>>>>>>
30900>>>>>>>            Else Begin
30901>>>>>>>                Send OnUnhandledControlSelected llControl
30902>>>>>>>            End
30902>>>>>>>>
30902>>>>>>>        End
30902>>>>>>>>
30902>>>>>>>        
30902>>>>>>>    End_Procedure
30903>>>>>>>    
30903>>>>>>>    Procedure OnUnhandledControlSelected Variant llControl
30905>>>>>>>    End_Procedure
30906>>>>>>>    
30906>>>>>>>    Procedure OnComInitCommandsPopup Variant llCommandBar
30908>>>>>>>        Handle hoCommandBar hoAction hoActionPointer hoCommandBarControl hoCommandBarControls
30908>>>>>>>        Variant vAction vCommandBarControl vCommandBarControls
30908>>>>>>>        Integer eType
30908>>>>>>>        
30908>>>>>>>        Get Create U_cCJCommandbar to hoCommandBar
30909>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
30910>>>>>>>        
30910>>>>>>>        Set pvComObject of hoCommandBar to llCommandBar
30911>>>>>>>        Get ComControls of hoCommandBar to vCommandBarControls
30912>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
30913>>>>>>>        
30913>>>>>>>        Get ComType of hoCommandBar to eType
30914>>>>>>>        
30914>>>>>>>        // if no parent it's a context menu. This is not handled here. It is handled by
30914>>>>>>>        // the context menu during the popup
30914>>>>>>>        Get ComParent of hoCommandBar to vCommandBarControl
30915>>>>>>>        If (not(IsNullComObject(vCommandBarControl))) Begin
30917>>>>>>>            // set all the child objects enabled and disabled
30917>>>>>>>            Send PopupInit hoCommandBar hoCommandBarControls
30918>>>>>>>            
30918>>>>>>>            Get Create U_cCJCommandbarControl to hoCommandBarControl
30919>>>>>>>            Get Create U_cCJCommandbarAction to hoAction
30920>>>>>>>            
30920>>>>>>>            Set pvComObject of hoCommandBarControl to vCommandBarControl
30921>>>>>>>            Get ComAction of hoCommandBarControl to vAction
30922>>>>>>>            // builtin menus like customize may not have actions
30922>>>>>>>            If not (IsNullComObject(vAction)) Begin
30924>>>>>>>                Set pvComObject of hoAction to vAction
30925>>>>>>>                Get ComTag of hoAction to hoActionPointer
30926>>>>>>>            End
30926>>>>>>>>
30926>>>>>>>            
30926>>>>>>>            Send Destroy of hoAction
30927>>>>>>>            Send Destroy of hoCommandBarControl
30928>>>>>>>            
30928>>>>>>>            If hoActionPointer Begin
30930>>>>>>>                Send OnPopupInit of hoActionPointer vCommandBarControl hoCommandBarControls
30931>>>>>>>            End
30931>>>>>>>>
30931>>>>>>>            Else Begin
30932>>>>>>>                Send OnUnhandledInitCommandsPopup llCommandBar
30933>>>>>>>            End
30933>>>>>>>>
30933>>>>>>>        End
30933>>>>>>>>
30933>>>>>>>        
30933>>>>>>>        Send Destroy of hoCommandBarControls
30934>>>>>>>        Send Destroy of hoCommandBar
30935>>>>>>>        
30935>>>>>>>    End_Procedure
30936>>>>>>>    
30936>>>>>>>    Procedure OnUnhandledInitCommandsPopup Variant llCommandBar
30938>>>>>>>    End_Procedure
30939>>>>>>>    
30939>>>>>>>    
30939>>>>>>>    Procedure OnComCustomization Variant vCustomizeOptions
30941>>>>>>>        Handle hoCustomize
30941>>>>>>>        Boolean bShowKeyboardPage bShowOptionsPage
30941>>>>>>>        
30941>>>>>>>        // directly support setting of keyboard and option tab pages.
30941>>>>>>>        // any other customization should be done by developer
30941>>>>>>>        Get pbCustomizeShowKeyboardPage to bShowKeyboardPage
30942>>>>>>>        Get pbCustomizeShowOptionsPage to bShowOptionsPage
30943>>>>>>>        Get Create U_cCJCustomizeOptions to hoCustomize
30944>>>>>>>        Set pvComObject of hoCustomize to vCustomizeOptions
30945>>>>>>>        Set ComShowKeyboardPage of hoCustomize to bShowKeyboardPage
30946>>>>>>>        Set ComShowOptionsPage of hoCustomize to bShowOptionsPage
30947>>>>>>>        Send Destroy of hoCustomize
30948>>>>>>>        
30948>>>>>>>        Forward Send OnComCustomization vCustomizeOptions
30950>>>>>>>    End_Procedure
30951>>>>>>>    
30951>>>>>>>    
30951>>>>>>>    // we do it this way so function DFBinPath is always created. Makes Compiler happy
30951>>>>>>>    Function DFBinPath Returns String
30953>>>>>>>        String sRoot
30953>>>>>>>        Get DFBinPath of ghoApplication to sRoot
30954>>>>>>>        Function_Return sRoot
30955>>>>>>>    End_Function
30956>>>>>>>    
30956>>>>>>>    
30956>>>>>>>    // returns the path for the ResourceImages, which is bin\styles (as of 19)
30956>>>>>>>    //
30956>>>>>>>    Function ResourceImagesPath Returns String
30958>>>>>>>        String sPath
30958>>>>>>>        If ghoApplication Begin
30960>>>>>>>            Get DFBinPath to sPath
30961>>>>>>>            Move (sPath +"\styles") to sPath
30962>>>>>>>        End
30962>>>>>>>>
30962>>>>>>>        Else Begin
30963>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
30964>>>>>>>>
30964>>>>>>>        End
30964>>>>>>>>
30964>>>>>>>        Function_Return sPath
30965>>>>>>>    End_Function
30966>>>>>>>    
30966>>>>>>>    // Loads theme images for File and Ini. This is used with peVisualTheme=xtpThemeResource
30966>>>>>>>    // which must be set *after* this is called.
30966>>>>>>>    // From CJ Docs:
30966>>>>>>>    //   Supported Styles as of version 15.0:
30966>>>>>>>    //     Office2007.dll
30966>>>>>>>    //     Office2010.dll
30966>>>>>>>    //     Windows7.dll
30966>>>>>>>    //
30966>>>>>>>    //   Each Styles Dll contains 1 or more styles:
30966>>>>>>>    //     Office2007.dll
30966>>>>>>>    //          - Office2007Aqua.ini
30966>>>>>>>    //          - Office2007Black.ini
30966>>>>>>>    //          - Office2007Blue.ini
30966>>>>>>>    //          - Office2007Silver.ini
30966>>>>>>>    //     Office2010.dll
30966>>>>>>>    //          - Office2010Black.ini
30966>>>>>>>    //          - Office2010Blue.ini
30966>>>>>>>    //          - Office2010Silver.ini
30966>>>>>>>    //     Windows7.dll
30966>>>>>>>    //          - Windows7Blue.ini
30966>>>>>>>    //
30966>>>>>>>    // If the sFile is passed relateive, it expects the dll to be placed in \Programs
30966>>>>>>>    // which the developer must do.
30966>>>>>>>    //
30966>>>>>>>    // Normally you'd call this within OnCreateCommandBars as follows:
30966>>>>>>>    //    Procedure OnCreateCommandBars
30966>>>>>>>    //        Boolean bOk
30966>>>>>>>    //        Forward Send OnCreateCommandBars
30966>>>>>>>    //        Get LoadResourceImagesFromFile "Office2010.dll" "Office2010Black.ini" to bOk
30966>>>>>>>    //        Set peVisualTheme to xtpThemeResource
30966>>>>>>>    //    End_Procedure
30966>>>>>>>    
30966>>>>>>>    Function LoadResourceImagesFromFile String sFile String sIni Returns Boolean
30968>>>>>>>        Handle hoGlobal hoRes
30968>>>>>>>        Variant vGlobal vRes
30968>>>>>>>        Boolean bOk
30968>>>>>>>        String sDir
30968>>>>>>>        Get Create (RefClass(cCJCommandBarsGlobalSettings)) to hoGlobal
30969>>>>>>>        Send CreateComObject of hoGlobal
30970>>>>>>>        If (not(IsFileNameQualified(sFile))) Begin
30972>>>>>>>            Get ResourceImagesPath to sDir
30973>>>>>>>            Move (sDir + "\"+ sFile) to sFile
30974>>>>>>>        End
30974>>>>>>>>
30974>>>>>>>        Get ComResourceImages of hoGlobal to vRes
30975>>>>>>>        Get Create (RefClass(cCJResourceImages)) to hoRes
30976>>>>>>>        Set pvComObject of hoRes to vRes
30977>>>>>>>        Get ComLoadFromFile of hoRes sFile sIni to bOk
30978>>>>>>>        Send Destroy of hoRes
30979>>>>>>>        Send Destroy of hoGlobal
30980>>>>>>>        Function_Return bOk
30981>>>>>>>    End_Function
30982>>>>>>>    
30982>>>>>>>End_Class
30983>>>>>>>
30983>>>>>>>Class cCJCommandBarMixin is a Mixin
30984>>>>>>>    
30984>>>>>>>    Procedure Define_cCJCommandBarMixin
30986>>>>>>>        
30986>>>>>>>        Property Integer piBarID            0
30987>>>>>>>        
30987>>>>>>>        Property Boolean pbDockNextTo             True
30988>>>>>>>        
30988>>>>>>>        Property Integer peBarPosition xtpBarTop
30989>>>>>>>        
30989>>>>>>>        Property Boolean pbEnableDocking           True
30990>>>>>>>        Property Boolean pbHideWrap                False
30991>>>>>>>        Property Integer peStretched               stNoStretch
30992>>>>>>>        
30992>>>>>>>        Property Boolean pbPrivateCloseable        True
30993>>>>>>>        Property Boolean pbPrivateCustomizable     True
30994>>>>>>>        Property Boolean pbPrivateEnableAnimation  False
30995>>>>>>>        Property Boolean pbPrivateShowExpandButton True
30996>>>>>>>        Property String  psPrivateTitle            "Toolbar"
30997>>>>>>>        Property Boolean pbPrivateVisible          True
30998>>>>>>>        Property Integer piPrivateWidth            0
30999>>>>>>>        Property Boolean pbPrivateGripper          True
31000>>>>>>>        
31000>>>>>>>        Set peNeighborhood to nhNo
31001>>>>>>>        
31001>>>>>>>    End_Procedure
31002>>>>>>>    
31002>>>>>>>    // Generic Get and Set property that is used to get and set a DF/COM property.
31002>>>>>>>    // can be used by any integer or boolean property
31002>>>>>>>    
31002>>>>>>>    Procedure SetComProperty Handle hmPrivateProperty Handle hmCOMProperty Integer iValue
31004>>>>>>>        Set hmPrivateProperty to iValue
31005>>>>>>>        If (IsComObjectCreated(Self)) Begin
31007>>>>>>>            Set hmCOMProperty to iValue
31008>>>>>>>        End
31008>>>>>>>>
31008>>>>>>>    End_Procedure
31009>>>>>>>    
31009>>>>>>>    Function GetComProperty Handle hmPrivateProperty Handle hmCOMProperty Returns Integer
31011>>>>>>>        Integer iValue
31011>>>>>>>        If (IsComObjectCreated(Self)) Begin
31013>>>>>>>            Get hmCOMProperty to iValue
31014>>>>>>>        End
31014>>>>>>>>
31014>>>>>>>        Else Begin
31015>>>>>>>            Get hmPrivateProperty to iValue
31016>>>>>>>        End
31016>>>>>>>>
31016>>>>>>>        Function_Return iValue
31017>>>>>>>    End_Function
31018>>>>>>>    
31018>>>>>>>    Procedure Set pbCloseable Boolean bValue
31020>>>>>>>        Send SetComProperty set_pbPrivateCloseable set_ComCloseable bValue
31021>>>>>>>    End_Procedure
31022>>>>>>>    
31022>>>>>>>    Function pbCloseable Returns Boolean
31024>>>>>>>        Boolean bValue
31024>>>>>>>        Get GetComProperty get_pbPrivateCloseable get_ComCloseable to bValue
31025>>>>>>>        Function_Return bValue
31026>>>>>>>    End_Function
31027>>>>>>>    
31027>>>>>>>    Procedure Set pbCustomizable Boolean bValue
31029>>>>>>>        Send SetComProperty set_pbPrivateCustomizable set_ComCustomizable bValue
31030>>>>>>>    End_Procedure
31031>>>>>>>    
31031>>>>>>>    Function pbCustomizable Returns Boolean
31033>>>>>>>        Boolean bValue
31033>>>>>>>        Get GetComProperty get_pbPrivateCustomizable get_ComCustomizable to bValue
31034>>>>>>>        Function_Return bValue
31035>>>>>>>    End_Function
31036>>>>>>>    
31036>>>>>>>    Procedure Set pbEnableAnimation Boolean bValue
31038>>>>>>>        Send SetComProperty set_pbPrivateEnableAnimation set_ComEnableAnimation bValue
31039>>>>>>>    End_Procedure
31040>>>>>>>    
31040>>>>>>>    Function pbEnableAnimation Returns Boolean
31042>>>>>>>        Boolean bValue
31042>>>>>>>        Get GetComProperty get_pbPrivateEnableAnimation get_ComEnableAnimation to bValue
31043>>>>>>>        Function_Return bValue
31044>>>>>>>    End_Function
31045>>>>>>>    
31045>>>>>>>    Procedure Set pbShowExpandButton Boolean bValue
31047>>>>>>>        Send SetComProperty set_pbPrivateShowExpandButton set_ComShowExpandButton bValue
31048>>>>>>>    End_Procedure
31049>>>>>>>    
31049>>>>>>>    Function pbShowExpandButton Returns Boolean
31051>>>>>>>        Boolean bValue
31051>>>>>>>        Get GetComProperty get_pbPrivateShowExpandButton get_ComShowExpandButton to bValue
31052>>>>>>>        Function_Return bValue
31053>>>>>>>    End_Function
31054>>>>>>>    
31054>>>>>>>    Procedure Set pbVisible Boolean bValue
31056>>>>>>>        Send SetComProperty set_pbPrivateVisible set_ComVisible bValue
31057>>>>>>>    End_Procedure
31058>>>>>>>    
31058>>>>>>>    Function pbVisible Returns Boolean
31060>>>>>>>        Boolean bValue
31060>>>>>>>        Get GetComProperty get_pbPrivateVisible get_ComVisible to bValue
31061>>>>>>>        Function_Return bValue
31062>>>>>>>    End_Function
31063>>>>>>>    
31063>>>>>>>    Procedure Set piWidth Integer iValue
31065>>>>>>>        Send SetComProperty set_piPrivateWidth set_ComWidth iValue
31066>>>>>>>    End_Procedure
31067>>>>>>>    
31067>>>>>>>    Function piWidth Returns Integer
31069>>>>>>>        Integer iValue
31069>>>>>>>        Get GetComProperty get_piPrivateWidth get_ComWidth to iValue
31070>>>>>>>        Function_Return iValue
31071>>>>>>>    End_Function
31072>>>>>>>    
31072>>>>>>>    Procedure Set pbGripper Boolean bValue
31074>>>>>>>        Set pbPrivateGripper to bValue
31075>>>>>>>        If (IsComObjectCreated(Self)) Begin
31077>>>>>>>            Send ComModifyStyle (If(not(bValue),xtp_CBRS_GRIPPER,0)) (If(bValue,xtp_CBRS_GRIPPER,0))
31078>>>>>>>        End
31078>>>>>>>>
31078>>>>>>>    End_Procedure
31079>>>>>>>    
31079>>>>>>>    Function pbGripper Returns Boolean
31081>>>>>>>        Boolean bValue
31081>>>>>>>        Get pbPrivateGripper to bValue
31082>>>>>>>        Function_Return bValue
31083>>>>>>>    End_Function
31084>>>>>>>    
31084>>>>>>>    Procedure Set psTitle String sValue
31086>>>>>>>        Set psPrivateTitle to sValue
31087>>>>>>>        If (IsComObjectCreated(Self)) Begin
31089>>>>>>>            Set ComTitle to sValue
31090>>>>>>>        End
31090>>>>>>>>
31090>>>>>>>    End_Procedure
31091>>>>>>>    
31091>>>>>>>    Function psTitle Returns String
31093>>>>>>>        String sValue
31093>>>>>>>        If (IsComObjectCreated(Self)) Begin
31095>>>>>>>            Get ComTitle to sValue
31096>>>>>>>        End
31096>>>>>>>>
31096>>>>>>>        Else Begin
31097>>>>>>>            Get psPrivateTitle to sValue
31098>>>>>>>        End
31098>>>>>>>>
31098>>>>>>>        Function_Return sValue
31099>>>>>>>    End_Function
31100>>>>>>>    
31100>>>>>>>    Procedure InitComInstance
31102>>>>>>>        Handle hoCommandBars hoNextTo
31102>>>>>>>        Variant vCommandBar vNextTo
31102>>>>>>>        String sTitle
31102>>>>>>>        Integer iBarId iWidth iDockFgs iBars eBarPosition
31102>>>>>>>        Integer eNextToPosition eNextToType iDockingFlags eStretched
31102>>>>>>>        Boolean bCloseable bCustomizable bEnableAnimation bShowExpandButton
31102>>>>>>>        Boolean bEnableDocking bHideWrap
31102>>>>>>>        Boolean bGripper bDockNextTo bNextToVisible
31102>>>>>>>        
31102>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31103>>>>>>>        
31103>>>>>>>        Get psPrivateTitle to sTitle
31104>>>>>>>        Get pbPrivateCloseable to bCloseable
31105>>>>>>>        Get pbPrivateCustomizable to bCustomizable
31106>>>>>>>        Get pbPrivateEnableAnimation to bEnableAnimation
31107>>>>>>>        Get pbPrivateShowExpandButton to bShowExpandButton
31108>>>>>>>        Get piPrivateWidth to iWidth
31109>>>>>>>        Get pbEnableDocking to bEnableDocking
31110>>>>>>>        Get pbHideWrap to bHideWrap
31111>>>>>>>        Get peStretched to eStretched
31112>>>>>>>        
31112>>>>>>>        Get pbPrivateGripper to bGripper
31113>>>>>>>        Get piBarId to iBarId
31114>>>>>>>        Get pbDockNextTo to bDockNextTo
31115>>>>>>>        Get peBarPosition to eBarPosition
31116>>>>>>>        
31116>>>>>>>        
31116>>>>>>>        Get CreateCommandBar to vCommandBar
31117>>>>>>>        
31117>>>>>>>        Set pvComObject to vCommandBar
31118>>>>>>>        Set ComTitle to sTitle
31119>>>>>>>        Set ComCloseable to bCloseable
31120>>>>>>>        Set ComCustomizable to bCustomizable
31121>>>>>>>        Set ComEnableAnimation to bEnableAnimation
31122>>>>>>>        Set ComShowExpandButton to bShowExpandButton
31123>>>>>>>        
31123>>>>>>>        Send ComModifyStyle (If(not(bGripper),xtp_CBRS_GRIPPER,0)) (If(bGripper,xtp_CBRS_GRIPPER,0))
31124>>>>>>>        
31124>>>>>>>        If (iBarId<>0) Begin
31126>>>>>>>            Set ComBarID to iBarId
31127>>>>>>>        End
31127>>>>>>>>
31127>>>>>>>        Else Begin
31128>>>>>>>            Get ComBarId to iBarId
31129>>>>>>>            Set piBarID to iBarId
31130>>>>>>>        End
31130>>>>>>>>
31130>>>>>>>        
31130>>>>>>>        // enabled docking is determiend by iORing flags. We simplify docking to allow all or
31130>>>>>>>        // none. In addition we support hidewrap and the two stretched flags.
31130>>>>>>>        If bEnableDocking Begin
31132>>>>>>>            Move (iDockingFlags ior xtpFlagAlignAny ior xtpFlagFloating) to iDockingFlags
31133>>>>>>>        End
31133>>>>>>>>
31133>>>>>>>        If bHideWrap Begin
31135>>>>>>>            Move (iDockingFlags ior xtpFlagHideWrap) to iDockingFlags
31136>>>>>>>        End
31136>>>>>>>>
31136>>>>>>>        If (eStretched=stStretch) Begin
31138>>>>>>>            Move (iDockingFlags ior xtpFlagStretched) to iDockingFlags
31139>>>>>>>        End
31139>>>>>>>>
31139>>>>>>>        Else If (eStretched=stStretchShared) Begin
31142>>>>>>>            Move (iDockingFlags ior xtpFlagStretchedShared) to iDockingFlags
31143>>>>>>>        End
31143>>>>>>>>
31143>>>>>>>        Send ComEnableDocking iDockingFlags
31144>>>>>>>        
31144>>>>>>>        If (iWidth>0) Begin
31146>>>>>>>            Set ComWidth to iWidth
31147>>>>>>>        End
31147>>>>>>>>
31147>>>>>>>        
31147>>>>>>>        // if we DockNextTo we want to doc "next" to the last command bar that is located
31147>>>>>>>        // in the same position (e.g. top, bottom, left, right). "Next" is relative to the position
31147>>>>>>>        // where top/bottom is Right-of and let/right is below. Menubars are excluded from this logic
31147>>>>>>>        // if we DockNextTo we want to doc "next" to the last command bar that is located
31147>>>>>>>        // in the same position (e.g. top, bottom, left, right). "Next" is relative to the position
31147>>>>>>>        // where top/bottom is Right-of and let/right is below. Menubars are excluded from this logic
31147>>>>>>>        If bDockNextTo Begin
31149>>>>>>>            Get ComCount of hoCommandBars to iBars
31150>>>>>>>            Get Create U_cCJCommandBar to hoNextTo
31151>>>>>>>            While (iBars>1)
31155>>>>>>>                Get ComItem of hoCommandBars (iBars-1) to vNextTo
31156>>>>>>>                Set pvComObject of hoNextTo to vNextTo
31157>>>>>>>                Get ComVisible of hoNextTo to bNextToVisible
31158>>>>>>>                Get ComPosition of hoNextTo to eNextToPosition
31159>>>>>>>                Get ComType of hoNextTo to eNextToType
31160>>>>>>>                If (bNextToVisible and eNextToType=xtpBarTypeNormal and eNextToPosition=eBarPosition) Begin
31162>>>>>>>                    Send DockNextTo vCommandBar vNextTo
31163>>>>>>>                    Move 0 to iBars
31164>>>>>>>                End
31164>>>>>>>>
31164>>>>>>>                Decrement iBars
31165>>>>>>>            Loop
31166>>>>>>>>
31166>>>>>>>            Send Destroy of hoNextTo
31167>>>>>>>        End
31167>>>>>>>>
31167>>>>>>>        
31167>>>>>>>    End_Procedure
31168>>>>>>>    
31168>>>>>>>    // This is called when the commandbar is created and is bound to the commandbar object.
31168>>>>>>>    Procedure OnCreate
31170>>>>>>>    End_Procedure
31171>>>>>>>    
31171>>>>>>>    Procedure End_Construct_Object
31173>>>>>>>        Integer iID
31173>>>>>>>        Handle hoCommandBars
31173>>>>>>>        Get piBarId to iID
31174>>>>>>>        If (iID=0) Begin
31176>>>>>>>            Get CommandBarSystemObject to hoCommandBars
31177>>>>>>>            Get AssignBarId of hoCommandBars to iId
31178>>>>>>>            Set piBarId to iID
31179>>>>>>>        End
31179>>>>>>>>
31179>>>>>>>        Forward Send End_Construct_Object
31181>>>>>>>    End_Procedure
31182>>>>>>>    
31182>>>>>>>End_Class
31183>>>>>>>
31183>>>>>>>
31183>>>>>>>
31183>>>>>>>
31183>>>>>>>
31183>>>>>>>Class cCJAbstractCommandBar is a cCJCommandBar
31184>>>>>>>    
31184>>>>>>>    Import_Class_Protocol cCJCommandBarMixin
31185>>>>>>>    
31185>>>>>>>    Procedure Construct_Object
31187>>>>>>>        Forward Send Construct_Object
31189>>>>>>>        Send Define_cCJCommandBarMixin
31190>>>>>>>    End_Procedure
31191>>>>>>>    
31191>>>>>>>    // Must be defined in a sub-class
31191>>>>>>>    Function CreateCommandBar Returns Variant
31193>>>>>>>        Error DFERR_PROGRAM "Assert: CreateCommandBar not defined in superclass"
31194>>>>>>>>
31194>>>>>>>    End_Function
31195>>>>>>>    
31195>>>>>>>    Procedure CreateComInstance
31197>>>>>>>        Handle hoCommandBarControls
31197>>>>>>>        Variant vCommandBarControls
31197>>>>>>>        
31197>>>>>>>        Send InitComInstance // creates control and returns it attached
31198>>>>>>>        Send OnCreate
31199>>>>>>>        
31199>>>>>>>        
31199>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
31200>>>>>>>        Get ComControls to vCommandBarControls
31201>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
31202>>>>>>>        
31202>>>>>>>        Broadcast Send CreateComInstance hoCommandBarControls
31204>>>>>>>        
31204>>>>>>>        // after this command bar and all its children are created, we set this as the reset point.
31204>>>>>>>        Send ComCreateOriginalControls of hoCommandBarControls
31205>>>>>>>        
31205>>>>>>>        Send Destroy of hoCommandBarControls
31206>>>>>>>        
31206>>>>>>>    End_Procedure
31207>>>>>>>    
31207>>>>>>>End_Class
31208>>>>>>>
31208>>>>>>>Class cCJMenuBar is a cCJAbstractCommandBar
31209>>>>>>>    
31209>>>>>>>    Procedure Construct_object
31211>>>>>>>        Forward Send Construct_Object
31213>>>>>>>        Set piBarId to 1 // menu is always 1
31214>>>>>>>        Set psTitle to "Main Menu"
31215>>>>>>>        Set pbCloseable to False
31216>>>>>>>        Set pbGripper to False
31217>>>>>>>        Set pbEnableDocking to False
31218>>>>>>>        Set pbHideWrap to False
31219>>>>>>>        Set peStretched to stStretch
31220>>>>>>>        Set pbCustomizable to False
31221>>>>>>>        
31221>>>>>>>    End_Procedure
31222>>>>>>>    
31222>>>>>>>    Function CreateCommandBar Returns Variant
31224>>>>>>>        Variant vCommandBar
31224>>>>>>>        Handle hoCommandBars
31224>>>>>>>        Integer eBarPosition
31224>>>>>>>        Get peBarPosition to eBarPosition
31225>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31226>>>>>>>        Get ComActiveMenuBar of hoCommandBars to vCommandBar
31227>>>>>>>        Set pvComObject to vCommandBar
31228>>>>>>>        Set ComPosition to eBarPosition
31229>>>>>>>        Function_Return vCommandBar
31230>>>>>>>    End_Function
31231>>>>>>>    
31231>>>>>>>    
31231>>>>>>>    Procedure CreateComInstance
31233>>>>>>>        // Menubar is invisible by default to allow applications to not force the default menubar on
31233>>>>>>>        // applications that do not have them declared in their application. Here is where we set
31233>>>>>>>        // Visible back to true because if this code is executed then the application really does have
31233>>>>>>>        // a menubar. We do this as late as possible in the process because Set ComVisible is a little
31233>>>>>>>        // fragile if the COM controls are not all set up correctly.
31233>>>>>>>        //17.1
31233>>>>>>>        Boolean bVisible
31233>>>>>>>        Forward Send CreateComInstance
31235>>>>>>>        Get pbPrivateVisible to bVisible
31236>>>>>>>        Set ComVisible to bVisible
31237>>>>>>>    End_Procedure
31238>>>>>>>    
31238>>>>>>>End_Class
31239>>>>>>>
31239>>>>>>>Class cCJToolbar is a cCJAbstractCommandBar
31240>>>>>>>    
31240>>>>>>>    Function CreateCommandBar Returns Variant
31242>>>>>>>        Variant vCommandBar
31242>>>>>>>        Handle hoCommandBars
31242>>>>>>>        Integer eBarPosition
31242>>>>>>>        Get peBarPosition to eBarPosition
31243>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31244>>>>>>>        Get ComAdd of hoCommandBars "Toolbar" eBarPosition to vCommandBar
31245>>>>>>>        Function_Return vCommandBar
31246>>>>>>>    End_Function
31247>>>>>>>    
31247>>>>>>>End_Class
31248>>>>>>>
31248>>>>>>>
31248>>>>>>>Class cCJTabToolBar is a cCJComTabToolBar
31249>>>>>>>    
31249>>>>>>>    Import_Class_Protocol cCJCommandBarMixin
31250>>>>>>>    
31250>>>>>>>    Procedure Construct_Object
31252>>>>>>>        Forward Send Construct_Object
31254>>>>>>>        Send Define_cCJCommandBarMixin
31255>>>>>>>        Property Boolean pbPrivateAllowReorder   False
31256>>>>>>>        
31256>>>>>>>    End_Procedure
31257>>>>>>>    
31257>>>>>>>    Procedure Set pbAllowReorder Boolean bValue
31259>>>>>>>        Send SetComProperty set_pbPrivateAllowReorder set_ComAllowReorder bValue
31260>>>>>>>    End_Procedure
31261>>>>>>>    
31261>>>>>>>    Function pbAllowReorder Returns Boolean
31263>>>>>>>        Boolean bValue
31263>>>>>>>        Get GetComProperty get_pbPrivateAllowReorder get_ComAllowReorder to bValue
31264>>>>>>>        Function_Return bValue
31265>>>>>>>    End_Function
31266>>>>>>>    
31266>>>>>>>    
31266>>>>>>>    Function CreateCommandBar Returns Variant
31268>>>>>>>        Variant vCommandBar
31268>>>>>>>        Handle hoCommandBars
31268>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31269>>>>>>>        Get ComAddTabToolBar of hoCommandBars "TabToolbar" to vCommandBar
31270>>>>>>>        Function_Return vCommandBar
31271>>>>>>>    End_Function
31272>>>>>>>    
31272>>>>>>>    Procedure CreateComInstance
31274>>>>>>>        Handle hoCommandBarControls
31274>>>>>>>        Variant vCommandBarControls
31274>>>>>>>        Boolean bAllowReorder
31274>>>>>>>        Get pbPrivateAllowReorder to bAllowReorder
31275>>>>>>>        
31275>>>>>>>        Send InitComInstance // creates control and returns it attached
31276>>>>>>>        
31276>>>>>>>        Set ComAllowReorder to bAllowReorder
31277>>>>>>>        
31277>>>>>>>        Send OnCreate
31278>>>>>>>        
31278>>>>>>>        
31278>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
31279>>>>>>>        Get ComControls to vCommandBarControls
31280>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
31281>>>>>>>        
31281>>>>>>>        
31281>>>>>>>        Broadcast Send CreateComInstance Self // we pass attached tabmenubar control to tab children
31283>>>>>>>        
31283>>>>>>>        // after this command bar and all its children are created, we set this as the reset point.
31283>>>>>>>        Send ComCreateOriginalControls of hoCommandBarControls
31284>>>>>>>        Send ComUpdateTabs
31285>>>>>>>        Send ComRedrawBar
31286>>>>>>>        Send ComRecalcLayout
31287>>>>>>>        Send Destroy of hoCommandBarControls
31288>>>>>>>        
31288>>>>>>>        //  Commandbars are static and do not change based on loading and editing
31288>>>>>>>        // If so, we will keep the objects bound. If this does not work we will need to
31288>>>>>>>        // use the AttachComObject method.
31288>>>>>>>        
31288>>>>>>>    End_Procedure
31289>>>>>>>    
31289>>>>>>>    Function FindByCategory String sName Returns Variant
31291>>>>>>>        Boolean bAttached bOk
31291>>>>>>>        Handle hoItem
31291>>>>>>>        Variant vItem
31291>>>>>>>        Integer i iCount
31291>>>>>>>        String sCat
31291>>>>>>>        
31291>>>>>>>        Move (IsComObjectCreated(Self)) to bAttached
31292>>>>>>>        If not bAttached Begin
31294>>>>>>>            Error DFERR_PROGRAM "Assert: Find by Category commandbar not attached"
31295>>>>>>>>
31295>>>>>>>            Function_Return (NullComObject())
31296>>>>>>>        End
31296>>>>>>>>
31296>>>>>>>        
31296>>>>>>>        Get Create U_cCJComTabControlItem to hoItem
31297>>>>>>>        Get ComCategoryCount to iCount
31298>>>>>>>        For i from 0 to (iCount-1)
31304>>>>>>>>
31304>>>>>>>            Get ComCategory i to vItem
31305>>>>>>>            Set pvComObject of hoItem to vItem
31306>>>>>>>            Get ComCaption of hoItem to sCat
31307>>>>>>>            Move (sCat=sName) to bOk
31308>>>>>>>            If bOk ;                Break
31311>>>>>>>        Loop
31312>>>>>>>>
31312>>>>>>>        Send destroy of hoItem
31313>>>>>>>        If not bOk Begin
31315>>>>>>>            Move (NullComObject()) to vItem
31316>>>>>>>        End
31316>>>>>>>>
31316>>>>>>>        Function_Return vItem
31317>>>>>>>    End_Function
31318>>>>>>>    
31318>>>>>>>End_Class
31319>>>>>>>
31319>>>>>>>
31319>>>>>>>Class cCJTabControlItem is a cCJComTabControlItem
31320>>>>>>>    
31320>>>>>>>    Procedure Construct_Object
31322>>>>>>>        Forward Send Construct_Object
31324>>>>>>>        Property String psCategory ""
31325>>>>>>>        Property String psToolTip ""
31326>>>>>>>        Property String psImage ""
31327>>>>>>>        Set peNeighborhood to nhNo
31328>>>>>>>    End_Procedure
31329>>>>>>>    
31329>>>>>>>    Procedure CreateComInstance Handle hoTabToolBar
31331>>>>>>>        Handle hoCommandBars hoCommandBarControls  hoControl
31331>>>>>>>        Variant vCommandBarControls vTab vControl
31331>>>>>>>        String sCategory sTip sImage
31331>>>>>>>        Integer iCount i iNewCount iId
31331>>>>>>>        Boolean bOk
31331>>>>>>>        
31331>>>>>>>        Get psCategory to sCategory
31332>>>>>>>        Get psToolTip to sTip
31333>>>>>>>        Get psImage to sImage
31334>>>>>>>        
31334>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31335>>>>>>>        
31335>>>>>>>        Get ComCategoryCount of hoTabToolBar to iCount
31336>>>>>>>        Get ComInsertCategory of hoTabToolbar iCount sCategory to vTab
31337>>>>>>>        Set pvComObject to vTab
31338>>>>>>>        
31338>>>>>>>        Set ComToolTip to sTip
31339>>>>>>>        
31339>>>>>>>        If (sImage<>"") Begin
31341>>>>>>>            Get AddImage of hoCommandBars sImage 0 xtpImageNormal to iId
31342>>>>>>>            Set ComImage to iId
31343>>>>>>>        End
31343>>>>>>>>
31343>>>>>>>        
31343>>>>>>>        If (iCount=0) Begin
31345>>>>>>>            Set ComSelected to True
31346>>>>>>>        End
31346>>>>>>>>
31346>>>>>>>        
31346>>>>>>>        Send OnCreate
31347>>>>>>>        
31347>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
31348>>>>>>>        Get ComControls of hoTabToolBar to vCommandBarControls
31349>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
31350>>>>>>>        
31350>>>>>>>        // before creating the child com controls, get the count of controls
31350>>>>>>>        Get ComCount of hoCommandBarControls to iCount
31351>>>>>>>        
31351>>>>>>>        Broadcast Send CreateComInstance hoCommandBarControls
31353>>>>>>>        
31353>>>>>>>        // get the new count of controls. The difference are the new controls.
31353>>>>>>>        Get ComCount of hoCommandBarControls to iNewCount
31354>>>>>>>        
31354>>>>>>>        Get create U_cCJCommandBarControl to hoControl
31355>>>>>>>        For i from (iCount+1) to iNewCount
31361>>>>>>>>
31361>>>>>>>            Get ComItem of hoCommandBarControls i to vControl
31362>>>>>>>            Set pvComObject of hoControl to vControl
31363>>>>>>>            Set ComCategory of hoControl to sCategory
31364>>>>>>>        Loop
31365>>>>>>>>
31365>>>>>>>        Send Destroy of hoControl
31366>>>>>>>        Send Destroy of hoCommandBarControls
31367>>>>>>>        
31367>>>>>>>    End_Procedure
31368>>>>>>>    
31368>>>>>>>    Procedure OnCreate
31370>>>>>>>    End_Procedure
31371>>>>>>>    
31371>>>>>>>End_Class
31372>>>>>>>
31372>>>>>>>
31372>>>>>>>
31372>>>>>>>Class cCJContextMenu is a cCJCommandBar
31373>>>>>>>    
31373>>>>>>>    Procedure Construct_Object
31375>>>>>>>        Forward Send Construct_Object
31377>>>>>>>        Property Boolean pbEnableAnimation  False
31378>>>>>>>        Property Boolean pbControlDoubleGripper    False
31379>>>>>>>        Property Boolean pbControlPopupToolBar   False
31380>>>>>>>        
31380>>>>>>>        Property Handle phoCommandBars 0
31381>>>>>>>        
31381>>>>>>>        // this is set using SetPopupLocation.
31381>>>>>>>        Property tWinPoint pLocation
31382>>>>>>>    End_Procedure
31383>>>>>>>    
31383>>>>>>>    
31383>>>>>>>    // context menus use a differnt logic for finding the commandbars. Normally it will just attach to
31383>>>>>>>    // the global commandbars. However, a developer can choose attach this to a different commandbars by
31383>>>>>>>    // setting phoCommandBars.
31383>>>>>>>    Function CommandBarSystemObject Returns Handle
31385>>>>>>>        Handle hoCommandBars
31385>>>>>>>        Get phoCommandBars to hoCommandBars
31386>>>>>>>        If (hoCommandBars=0) Begin
31388>>>>>>>            Move ghoCommandBars to hoCommandBars
31389>>>>>>>        End
31389>>>>>>>>
31389>>>>>>>        Function_Return hoCommandBars
31390>>>>>>>    End_Function
31391>>>>>>>    
31391>>>>>>>    Function CreateCommandBar Returns Variant
31393>>>>>>>        Variant vCommandBar
31393>>>>>>>        Handle hoCommandBars
31393>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31394>>>>>>>        Get ComAdd of hoCommandBars "Context Toolbar" xtpBarPopup to vCommandBar
31395>>>>>>>        Function_Return vCommandBar
31396>>>>>>>    End_Function
31397>>>>>>>    
31397>>>>>>>    Procedure CreatePopupComInstance
31399>>>>>>>        Handle hoCommandBars hoCommandBarControls
31399>>>>>>>        Variant vCommandBar vCommandBarControls
31399>>>>>>>        Boolean bEnableAnimation bDoubleGripper bPopupToolBar
31399>>>>>>>        
31399>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31400>>>>>>>        Get pbEnableAnimation to bEnableAnimation
31401>>>>>>>        Get pbControlDoubleGripper to bDoubleGripper
31402>>>>>>>        Get pbControlPopupToolBar  to bPopupToolBar
31403>>>>>>>        
31403>>>>>>>        Get CreateCommandBar to vCommandBar
31404>>>>>>>        Set pvComObject to vCommandBar
31405>>>>>>>        
31405>>>>>>>        Set ComEnableAnimation to bEnableAnimation
31406>>>>>>>        Set ComDoubleGripper to bDoubleGripper
31407>>>>>>>        Send ComSetPopupToolBar bPopupToolBar
31408>>>>>>>        
31408>>>>>>>        Send OnCreate
31409>>>>>>>        
31409>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
31410>>>>>>>        Get ComControls to vCommandBarControls
31411>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
31412>>>>>>>        
31412>>>>>>>        Broadcast Send CreateComInstance hoCommandBarControls
31414>>>>>>>        
31414>>>>>>>        // This does the same thing OnComPopupInit does.
31414>>>>>>>        
31414>>>>>>>        // this does all of the inital setting of enabled, etc.
31414>>>>>>>        Send PopupInit of hoCommandBars Self hoCommandBarControls
31415>>>>>>>        // user event to do whatever
31415>>>>>>>        Send OnPopupInit vCommandBar hoCommandBarControls
31416>>>>>>>        
31416>>>>>>>        Send Destroy of hoCommandBarControls
31417>>>>>>>        
31417>>>>>>>        // we keep the control attached with popups or we lose it.
31417>>>>>>>    End_Procedure
31418>>>>>>>    
31418>>>>>>>    
31418>>>>>>>    Procedure Popup
31420>>>>>>>        Handle hoCommandBars
31420>>>>>>>        Integer iLoc iId iRet
31420>>>>>>>        tWinPoint Pt PtZero
31420>>>>>>>        tWinPoint Pt PtZero
31420>>>>>>>        
31420>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31421>>>>>>>        If (hoCommandBars=0) Begin
31423>>>>>>>            Error DFERR_PROGRAM "Context menu not attached to commandbars"
31424>>>>>>>>
31424>>>>>>>            Procedure_Return
31425>>>>>>>        End
31425>>>>>>>>
31425>>>>>>>        
31425>>>>>>>        // this will create the context menu and return it attached.
31425>>>>>>>        Send CreatePopupComInstance
31426>>>>>>>        
31426>>>>>>>        // see if location has been set before popup by SetPopupLocation
31426>>>>>>>        Get pLocation to pt
31427>>>>>>>        If (pt.x=0 and Pt.y=0) Begin
31429>>>>>>>            Move (GetCursorPos(addressOf(Pt))) to iRet    // Get the mouse location (this technique supports -ve co-ordinates
31430>>>>>>>        End
31430>>>>>>>>
31430>>>>>>>        Else Begin
31431>>>>>>>            // if set, we use the setting and clear this location for the next popup
31431>>>>>>>            Set pLocation to PtZero
31432>>>>>>>        End
31432>>>>>>>>
31432>>>>>>>        
31432>>>>>>>        Get ComShowPopup OLE_VT_Empty Pt.x Pt.y to iID
31433>>>>>>>        
31433>>>>>>>        // This releases all actions (which will still exist on the COM side)
31433>>>>>>>        // and controls (controls should already be released on both DF and COM side)
31433>>>>>>>        Broadcast Recursive_up Send ReleaseComObject
31435>>>>>>>        Send ReleaseComObject // after popup CJ deletes the controls, so we release this
31436>>>>>>>    End_Procedure
31437>>>>>>>    
31437>>>>>>>    Procedure OnCreate
31439>>>>>>>    End_Procedure
31440>>>>>>>    
31440>>>>>>>    // before called, self and all items IsEnabled, IsChecked and IsVisible are called
31440>>>>>>>    // the first param is of no interest as it is this object which is already attached
31440>>>>>>>    Procedure OnPopupInit Variant vCommandBarControl Handle hoCommandBarControls
31442>>>>>>>    End_Procedure
31443>>>>>>>    
31443>>>>>>>    // This can be called before popup to select a custom popup location. If not called
31443>>>>>>>    // the location is determined in Popup by looking at the mouse position. This must be
31443>>>>>>>    // called before each popup
31443>>>>>>>    Procedure SetPopupLocation Integer iY Integer iX
31445>>>>>>>        tWinPoint pt
31445>>>>>>>        tWinPoint pt
31445>>>>>>>        Move iX to pt.x
31446>>>>>>>        Move iy to pt.y
31447>>>>>>>        Set pLocation to pt
31448>>>>>>>    End_Procedure
31449>>>>>>>    
31449>>>>>>>End_Class
31450>>>>>>>
31450>>>>>>>// used for the Customize dialog
31450>>>>>>>// This provides a way to add controls to the config menu that are not defined
31450>>>>>>>// elsewhere in the menu
31450>>>>>>>
31450>>>>>>>Class cCJDesignerMenu is a cObject
31451>>>>>>>    
31451>>>>>>>    Procedure Construct_Object
31453>>>>>>>        Forward Send Construct_Object
31455>>>>>>>        Set peNeighborhood to nhNo
31456>>>>>>>    End_Procedure
31457>>>>>>>    
31457>>>>>>>    // Get the Controls Collection for the designer and call all children
31457>>>>>>>    Procedure CreateComInstance
31459>>>>>>>        Handle hoCommandBarControls
31459>>>>>>>        Get DesignerControlsCollection to hoCommandBarControls
31460>>>>>>>        Broadcast Send CreateComInstance hoCommandBarControls
31462>>>>>>>    End_Procedure
31463>>>>>>>    
31463>>>>>>>End_Class
31464>>>>>>>
31464>>>>>>>// This creates an action object. It will normally not be directly instanciated but will be used
31464>>>>>>>// as the superclass of the cCJMenuItem class.
31464>>>>>>>
31464>>>>>>>
31464>>>>>>>Class cCJAction is a cCJCommandBarAction
31465>>>>>>>    
31465>>>>>>>    Procedure Construct_Object
31467>>>>>>>        Forward Send Construct_Object
31469>>>>>>>        
31469>>>>>>>        // normally auto assigned. It can be manually assigned.
31469>>>>>>>        Property Integer piId 0
31470>>>>>>>        
31470>>>>>>>        // determins if this action should be updated by the timer. You only set this true if
31470>>>>>>>        // the checked state, enabled state or visible state will be changed by other actions
31470>>>>>>>        // within the program.
31470>>>>>>>        Property Boolean pbPrivateActiveUpdate False
31471>>>>>>>        
31471>>>>>>>        Property Boolean pbPrivateChecked False
31472>>>>>>>        Property Boolean pbPrivateEnabled True
31473>>>>>>>        Property Boolean pbPrivateVisible True
31474>>>>>>>        Property String  psPrivateCaption ""
31475>>>>>>>        Property String  psPrivateCategory C_$CategoryOther
31476>>>>>>>        Property String  psPrivateDescriptionText ""
31477>>>>>>>        Property String  psPrivateTooltipText ""
31478>>>>>>>        Property String  psPrivateShortcutText ""
31479>>>>>>>        Property Integer piPrivateShortCutKey 0
31480>>>>>>>        
31480>>>>>>>        // These are just initial values, if the developer needs to dynamically change
31480>>>>>>>        // images they should use the ComIconId to select the item they need from the image list
31480>>>>>>>        
31480>>>>>>>        // normally only psImage needs to be set
31480>>>>>>>        Property String psImage ""
31481>>>>>>>        Property String psImageDisabled ""
31482>>>>>>>        Property String psImageHot ""
31483>>>>>>>        Property String psImageChecked ""
31484>>>>>>>        Property String psImagePressed ""
31485>>>>>>>        
31485>>>>>>>        Property Integer piPrivateIconId 0
31486>>>>>>>        
31486>>>>>>>        Set peNeighborhood to nhNo
31487>>>>>>>    End_Procedure
31488>>>>>>>    
31488>>>>>>>    
31488>>>>>>>    Procedure Set pbChecked Boolean bValue
31490>>>>>>>        Set pbPrivateChecked to bValue
31491>>>>>>>        If (IsComObjectCreated(Self)) Begin
31493>>>>>>>            Set ComChecked to bValue
31494>>>>>>>        End
31494>>>>>>>>
31494>>>>>>>    End_Procedure
31495>>>>>>>    
31495>>>>>>>    Function pbChecked Returns Boolean
31497>>>>>>>        Boolean bValue
31497>>>>>>>        If (IsComObjectCreated(Self)) Begin
31499>>>>>>>            Get ComChecked to bValue
31500>>>>>>>        End
31500>>>>>>>>
31500>>>>>>>        Else Begin
31501>>>>>>>            Get pbPrivateChecked to bValue
31502>>>>>>>        End
31502>>>>>>>>
31502>>>>>>>        Function_Return bValue
31503>>>>>>>    End_Function
31504>>>>>>>    
31504>>>>>>>    Procedure Set pbEnabled Boolean bValue
31506>>>>>>>        Set pbPrivateEnabled to bValue
31507>>>>>>>        If (IsComObjectCreated(Self)) Begin
31509>>>>>>>            Set ComEnabled to bValue
31510>>>>>>>        End
31510>>>>>>>>
31510>>>>>>>    End_Procedure
31511>>>>>>>    
31511>>>>>>>    Function pbEnabled Returns Boolean
31513>>>>>>>        Boolean bValue
31513>>>>>>>        If (IsComObjectCreated(Self)) Begin
31515>>>>>>>            Get ComEnabled to bValue
31516>>>>>>>        End
31516>>>>>>>>
31516>>>>>>>        Else Begin
31517>>>>>>>            Get pbPrivateEnabled to bValue
31518>>>>>>>        End
31518>>>>>>>>
31518>>>>>>>        Function_Return bValue
31519>>>>>>>    End_Function
31520>>>>>>>    
31520>>>>>>>    Procedure Set pbVisible Boolean bValue
31522>>>>>>>        Set pbPrivateVisible to bValue
31523>>>>>>>        If (IsComObjectCreated(Self)) Begin
31525>>>>>>>            Set ComVisible to bValue
31526>>>>>>>        End
31526>>>>>>>>
31526>>>>>>>    End_Procedure
31527>>>>>>>    
31527>>>>>>>    Function pbVisible Returns Boolean
31529>>>>>>>        Boolean bValue
31529>>>>>>>        If (IsComObjectCreated(Self)) Begin
31531>>>>>>>            Get ComVisible to bValue
31532>>>>>>>        End
31532>>>>>>>>
31532>>>>>>>        Else Begin
31533>>>>>>>            Get pbPrivateVisible to bValue
31534>>>>>>>        End
31534>>>>>>>>
31534>>>>>>>        Function_Return bValue
31535>>>>>>>    End_Function
31536>>>>>>>    
31536>>>>>>>    
31536>>>>>>>    Procedure Set psCaption String sValue
31538>>>>>>>        Set psPrivateCaption to sValue
31539>>>>>>>        If (IsComObjectCreated(Self)) Begin
31541>>>>>>>            Set ComCaption to sValue
31542>>>>>>>        End
31542>>>>>>>>
31542>>>>>>>    End_Procedure
31543>>>>>>>    
31543>>>>>>>    Function psCaption Returns String
31545>>>>>>>        String sValue
31545>>>>>>>        If (IsComObjectCreated(Self)) Begin
31547>>>>>>>            Get ComCaption to sValue
31548>>>>>>>        End
31548>>>>>>>>
31548>>>>>>>        Else Begin
31549>>>>>>>            Get psPrivateCaption to sValue
31550>>>>>>>        End
31550>>>>>>>>
31550>>>>>>>        Function_Return sValue
31551>>>>>>>    End_Function
31552>>>>>>>    
31552>>>>>>>    Procedure Set psCategory String sValue
31554>>>>>>>        Set psPrivateCategory to sValue
31555>>>>>>>        If (IsComObjectCreated(Self)) Begin
31557>>>>>>>            Set ComCategory to sValue
31558>>>>>>>        End
31558>>>>>>>>
31558>>>>>>>    End_Procedure
31559>>>>>>>    
31559>>>>>>>    Function psCategory Returns String
31561>>>>>>>        String sValue
31561>>>>>>>        If (IsComObjectCreated(Self)) Begin
31563>>>>>>>            Get ComCategory to sValue
31564>>>>>>>        End
31564>>>>>>>>
31564>>>>>>>        Else Begin
31565>>>>>>>            Get psPrivateCategory to sValue
31566>>>>>>>        End
31566>>>>>>>>
31566>>>>>>>        Function_Return sValue
31567>>>>>>>    End_Function
31568>>>>>>>    
31568>>>>>>>    Procedure Set psDescription String sValue
31570>>>>>>>        Set psPrivateDescriptionText to sValue
31571>>>>>>>        If (IsComObjectCreated(Self)) Begin
31573>>>>>>>            Set ComDescriptionText to sValue
31574>>>>>>>        End
31574>>>>>>>>
31574>>>>>>>    End_Procedure
31575>>>>>>>    
31575>>>>>>>    Function psDescription Returns String
31577>>>>>>>        String sValue
31577>>>>>>>        If (IsComObjectCreated(Self)) Begin
31579>>>>>>>            Get ComDescriptionText to sValue
31580>>>>>>>        End
31580>>>>>>>>
31580>>>>>>>        Else Begin
31581>>>>>>>            Get psPrivateDescriptionText to sValue
31582>>>>>>>        End
31582>>>>>>>>
31582>>>>>>>        Function_Return sValue
31583>>>>>>>    End_Function
31584>>>>>>>    
31584>>>>>>>    Procedure Set psToolTip String sValue
31586>>>>>>>        Set psPrivateToolTipText to sValue
31587>>>>>>>        If (IsComObjectCreated(Self)) Begin
31589>>>>>>>            Set ComToolTipText to sValue
31590>>>>>>>        End
31590>>>>>>>>
31590>>>>>>>    End_Procedure
31591>>>>>>>    
31591>>>>>>>    Function psToolTip Returns String
31593>>>>>>>        String sValue
31593>>>>>>>        If (IsComObjectCreated(Self)) Begin
31595>>>>>>>            Get ComToolTipText to sValue
31596>>>>>>>        End
31596>>>>>>>>
31596>>>>>>>        Else Begin
31597>>>>>>>            Get psPrivateToolTipText to sValue
31598>>>>>>>        End
31598>>>>>>>>
31598>>>>>>>        Function_Return sValue
31599>>>>>>>    End_Function
31600>>>>>>>    
31600>>>>>>>    Procedure Set psShortcut String sValue
31602>>>>>>>        Set psPrivateShortcutText to sValue
31603>>>>>>>        If (IsComObjectCreated(Self)) Begin
31605>>>>>>>            Set ComShortcutText to sValue
31606>>>>>>>        End
31606>>>>>>>>
31606>>>>>>>    End_Procedure
31607>>>>>>>    
31607>>>>>>>    Function psShortcut Returns String
31609>>>>>>>        String sValue
31609>>>>>>>        If (IsComObjectCreated(Self)) Begin
31611>>>>>>>            Get ComShortcutText to sValue
31612>>>>>>>        End
31612>>>>>>>>
31612>>>>>>>        Else Begin
31613>>>>>>>            Get psPrivateShortcutText to sValue
31614>>>>>>>        End
31614>>>>>>>>
31614>>>>>>>        Function_Return sValue
31615>>>>>>>    End_Function
31616>>>>>>>    
31616>>>>>>>    
31616>>>>>>>    Procedure Set piShortCutKey Integer iExtra Integer iKey
31618>>>>>>>        Set piPrivateShortCutKey to (iKey + (iExtra*65536))
31619>>>>>>>        If (IsComObjectCreated(Self)) Begin
31621>>>>>>>            Send BindKey iExtra iKey
31622>>>>>>>        End
31622>>>>>>>>
31622>>>>>>>    End_Procedure
31623>>>>>>>    
31623>>>>>>>    Function piShortCutKey Returns Integer
31625>>>>>>>        Integer iValue
31625>>>>>>>        Get piPrivateShortCutKey to iValue
31626>>>>>>>        Function_Return iValue
31627>>>>>>>    End_Function
31628>>>>>>>    
31628>>>>>>>    Procedure BindKey Integer iExtra Integer iKey
31630>>>>>>>        Integer iId
31630>>>>>>>        Handle hoKeyBindings hoCommandBars
31630>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31631>>>>>>>        Get piId to iId
31632>>>>>>>        If (iId=0) Begin
31634>>>>>>>            Error DFERR_PROGRAM "Assert: action Id zero in keybinding"
31635>>>>>>>>
31635>>>>>>>            Procedure_Return
31636>>>>>>>        End
31636>>>>>>>>
31636>>>>>>>        Get KeyBindingsCollection of hoCommandBars to hoKeyBindings
31637>>>>>>>        
31637>>>>>>>        Send ComAdd of hoKeyBindings iExtra iKey iId
31638>>>>>>>    End_Procedure
31639>>>>>>>    
31639>>>>>>>    Procedure Set pbActiveUpdate Boolean bValue
31641>>>>>>>        Handle hoCommandBars
31641>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31642>>>>>>>        Set pbPrivateActiveUpdate to bValue
31643>>>>>>>        If (IsComObjectCreated(Self)) Begin
31645>>>>>>>            If bValue Begin
31647>>>>>>>                Send AddActiveAction of hoCommandBars Self
31648>>>>>>>            End
31648>>>>>>>>
31648>>>>>>>            Else Begin
31649>>>>>>>                Send RemoveActiveAction of hoCommandBars Self
31650>>>>>>>            End
31650>>>>>>>>
31650>>>>>>>        End
31650>>>>>>>>
31650>>>>>>>    End_Procedure
31651>>>>>>>    
31651>>>>>>>    Function pbActiveUpdate Returns Integer
31653>>>>>>>        Boolean bValue
31653>>>>>>>        Get pbPrivateActiveUpdate to bValue
31654>>>>>>>        Function_Return bValue
31655>>>>>>>    End_Function
31656>>>>>>>    
31656>>>>>>>    // normally this is zero and not changed. When zero the imageId used will be
31656>>>>>>>    // the statusbarId and this is the ID that is used when the psImage method is used.
31656>>>>>>>    // Using psImage is preferred as it adds the icon and assigns it to the object.
31656>>>>>>>    // This can be used to change icons. Note 0=use StatusbarId
31656>>>>>>>    Procedure Set piIconId Integer iValue
31658>>>>>>>        Set piPrivateIconId to iValue
31659>>>>>>>        If (IsComObjectCreated(Self)) Begin
31661>>>>>>>            Set ComIconId to iValue
31662>>>>>>>        End
31662>>>>>>>>
31662>>>>>>>    End_Procedure
31663>>>>>>>    
31663>>>>>>>    Function piIconId Returns Integer
31665>>>>>>>        Integer iValue
31665>>>>>>>        If (IsComObjectCreated(Self)) Begin
31667>>>>>>>            Get ComIconId to iValue
31668>>>>>>>        End
31668>>>>>>>>
31668>>>>>>>        Else Begin
31669>>>>>>>            Get piPrivateIconId to iValue
31670>>>>>>>        End
31670>>>>>>>>
31670>>>>>>>        Function_Return iValue
31671>>>>>>>    End_Function
31672>>>>>>>    
31672>>>>>>>    
31672>>>>>>>    
31672>>>>>>>    // For augmentation. Return true if the item should be visible
31672>>>>>>>    Function IsVisible Returns Boolean
31674>>>>>>>        Boolean bBool
31674>>>>>>>        Get pbVisible to bBool
31675>>>>>>>        Function_Return bBool
31676>>>>>>>    End_Function
31677>>>>>>>    
31677>>>>>>>    // For augmentation. Return true if the item should be enabled
31677>>>>>>>    Function IsEnabled Returns Boolean
31679>>>>>>>        Boolean bBool
31679>>>>>>>        Get pbEnabled to bBool
31680>>>>>>>        Function_Return bBool
31681>>>>>>>    End_Function
31682>>>>>>>    
31682>>>>>>>    // For augmentation. Return true if the item should be checked
31682>>>>>>>    Function IsChecked Returns Boolean
31684>>>>>>>        Boolean bBool
31684>>>>>>>        Get pbChecked to bBool
31685>>>>>>>        Function_Return bBool
31686>>>>>>>    End_Function
31687>>>>>>>    
31687>>>>>>>    Procedure CreateComAction
31689>>>>>>>        Variant vID vAction
31689>>>>>>>        Handle hoCommandBars hoActions
31689>>>>>>>        Handle[] hoActiveActions
31690>>>>>>>        String sCaption sToolTip sDescriptionText sCategory  sShortCutText
31690>>>>>>>        String sIcon sIconDisabled sIconHot sIconChecked sIconPressed
31690>>>>>>>        Integer iId iShortCut iIconId iAssignedId
31690>>>>>>>        Boolean bVisible bChecked bEnabled bOk
31690>>>>>>>        
31690>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31691>>>>>>>        Get piId to iID
31692>>>>>>>        If (iId=0) Begin
31694>>>>>>>            // this can happen with context menus defined before the Commandbars is created
31694>>>>>>>            Get AssignId of hoCommandBars to iID
31695>>>>>>>            Set piId to iID
31696>>>>>>>        End
31696>>>>>>>>
31696>>>>>>>        
31696>>>>>>>        Get psPrivateCaption to sCaption
31697>>>>>>>        Get psPrivateTooltipText to sToolTip
31698>>>>>>>        Get psPrivateShortcutText to sShortCutText
31699>>>>>>>        Get psPrivateDescriptionText to sDescriptionText
31700>>>>>>>        Get psPrivateCategory to sCategory
31701>>>>>>>        Get pbPrivateVisible to bVisible
31702>>>>>>>        Get pbPrivateChecked to bChecked
31703>>>>>>>        Get pbPrivateEnabled to bEnabled
31704>>>>>>>        Get piPrivateShortCutKey to iShortCut
31705>>>>>>>        Get psImage to sIcon
31706>>>>>>>        Get psImageDisabled to sIconDisabled
31707>>>>>>>        Get psImageHot to sIconHot
31708>>>>>>>        Get psImageChecked to sIconChecked
31709>>>>>>>        Get psImagePressed to sIconPressed
31710>>>>>>>        Get piPrivateIconId to iIconId
31711>>>>>>>        
31711>>>>>>>        Get CommandBarSystemObject to hoCommandBars // via delegation
31712>>>>>>>        Get ActionsCollection of hoCommandBars to hoActions
31713>>>>>>>        Get ComAdd of hoActions iID sCaption sToolTip sDescriptionText sCategory to vAction
31714>>>>>>>        Set pvComObject to vAction
31715>>>>>>>        Set ComEnabled to bEnabled
31716>>>>>>>        Set ComVisible to bVisible
31717>>>>>>>        Set ComChecked to bChecked
31718>>>>>>>        Set ComShortcutText to sShortCutText
31719>>>>>>>        Set piIconId to iIconId
31720>>>>>>>        Set ComTag to Self // used as back pointer from com object to DF object
31721>>>>>>>        
31721>>>>>>>        If (sIcon<>"") Begin
31723>>>>>>>            Get AddImage of hoCommandBars sIcon iId xtpImageNormal to iAssignedId
31724>>>>>>>        End
31724>>>>>>>>
31724>>>>>>>        If (sIconDisabled<>"") Begin
31726>>>>>>>            Get AddImage of hoCommandBars sIconDisabled iId xtpImageDisabled to iAssignedId
31727>>>>>>>        End
31727>>>>>>>>
31727>>>>>>>        If (sIconHot<>"") Begin
31729>>>>>>>            Get AddImage of hoCommandBars sIconHot iId xtpImageHot to iAssignedId
31730>>>>>>>        End
31730>>>>>>>>
31730>>>>>>>        If (sIconChecked<>"") Begin
31732>>>>>>>            Get AddImage of hoCommandBars sIconChecked iId xtpImageChecked to iAssignedId
31733>>>>>>>        End
31733>>>>>>>>
31733>>>>>>>        If (sIconPressed<>"") Begin
31735>>>>>>>            Get AddImage of hoCommandBars sIconPressed iId xtpImagePressed to iAssignedId
31736>>>>>>>        End
31736>>>>>>>>
31736>>>>>>>        
31736>>>>>>>        If (iShortCut<>0) Begin
31738>>>>>>>            Send BindKey (hi(iShortCut)) (low(iShortCut))
31739>>>>>>>        End
31739>>>>>>>>
31739>>>>>>>        
31739>>>>>>>        Send OnCreateAction
31740>>>>>>>        
31740>>>>>>>        Send RegisterAction of hoCommandBars Self
31741>>>>>>>        
31741>>>>>>>    End_Procedure
31742>>>>>>>    
31742>>>>>>>    // called during initial activation to set all default actions.
31742>>>>>>>    Procedure CreateComInstance
31744>>>>>>>        Send CreateComAction
31745>>>>>>>        // actions are flat. You don't look for child actions
31745>>>>>>>    End_Procedure
31746>>>>>>>    
31746>>>>>>>    // find the first control that matches this action's ID. This searches the entire
31746>>>>>>>    // commandbar system and "first" is just the first one it happens to find.
31746>>>>>>>    Function FindFirstControl Returns Variant
31748>>>>>>>        Variant vControl
31748>>>>>>>        Integer iId
31748>>>>>>>        Handle hoCommandBars hoCommandBar
31748>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31749>>>>>>>        Get piId to iId
31750>>>>>>>        Get ComFindControl of hoCommandBars xtpControlError iId Nothing True to vControl
31751>>>>>>>        If (IsNullComObject(vControl)) Begin
31753>>>>>>>            // if not found this could be from our context menu. ComFindControl does not search
31753>>>>>>>            // the active context menu. We will test the focused command bar to see if we can
31753>>>>>>>            // find the object in there. This may create a duplicate search but it will not matter.
31753>>>>>>>            Get ComFocusedCommandBar of hoCommandBars to vControl
31754>>>>>>>            If (not(IsNullComObject(vControl))) Begin
31756>>>>>>>                Get Create U_cCJCommandBar to hoCommandBar
31757>>>>>>>                Set pvComObject of hoCommandBar to vControl
31758>>>>>>>                Get ComFindControl of hoCommandBar xtpControlError iId Nothing True to vControl
31759>>>>>>>                Send Destroy of hoCommandBar
31760>>>>>>>            End
31760>>>>>>>>
31760>>>>>>>        End
31760>>>>>>>>
31760>>>>>>>        Function_Return vControl
31761>>>>>>>    End_Function
31762>>>>>>>    
31762>>>>>>>    // delete all com controls for this action
31762>>>>>>>    Procedure DeleteAllControlsForAction
31764>>>>>>>        Handle hoCommandBars hoControl
31764>>>>>>>        Variant vControl
31764>>>>>>>        Get Create U_cCJCommandBarControl to hoControl
31765>>>>>>>        Repeat
31765>>>>>>>>
31765>>>>>>>            Get FindFirstControl to vControl
31766>>>>>>>            If not (IsNullComObject(vControl)) Begin
31768>>>>>>>                Set pvComObject of hoControl to vControl
31769>>>>>>>                Send ComDelete to hoControl
31770>>>>>>>            End
31770>>>>>>>>
31770>>>>>>>        Until (IsNullComObject(vControl))
31772>>>>>>>        Send Destroy of hoControl
31773>>>>>>>    End_Procedure
31774>>>>>>>    
31774>>>>>>>    // find all controls owned by this action anywhere in the commandbar system
31774>>>>>>>    // returns a variant array. This is only needed if you expect that there will be
31774>>>>>>>    // multiple hits such as could happen if you allow end user editing.
31774>>>>>>>    // This was created because there is no COM message to do this. This is pretty low level
31774>>>>>>>    // (like ComFindControl) and will not be used much.
31774>>>>>>>    Function FindAllControls Returns Variant[]
31776>>>>>>>        Variant[] ArrayofvControls
31777>>>>>>>        Integer iId
31777>>>>>>>        Handle hoCommandBars
31777>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31778>>>>>>>        Get piId to iId
31779>>>>>>>        Get FindControls of hoCommandBars iId to ArrayofvControls
31780>>>>>>>        Function_Return ArrayofvControls
31781>>>>>>>    End_Function
31782>>>>>>>    
31782>>>>>>>    // Return the class for the passed control type. Good for augmentation
31782>>>>>>>    Function ClassForControlType Integer eType Returns Integer
31784>>>>>>>        Integer iClass
31784>>>>>>>        Case Begin
31784>>>>>>>            Case (eType=xtpControlButton)
31786>>>>>>>            Case (eType=xtpControlCheckBox)
31789>>>>>>>            Case (eType=xtpControlRadioButton)
31792>>>>>>>            Case (eType=xtpControlLabel)
31795>>>>>>>                Move U_cCJCommandBarButton to eType
31796>>>>>>>                Case Break
31797>>>>>>>            Case (eType=xtpControlPopup)
31800>>>>>>>            Case (eType=xtpControlButtonPopup)
31803>>>>>>>            Case (eType=xtpControlSplitButtonPopup)
31806>>>>>>>                Move U_cCJCommandBarPopup to eType
31807>>>>>>>                Case Break
31808>>>>>>>            Case (eType=xtpControlComboBox)
31811>>>>>>>                Move U_cCJCommandBarComboBox to eType
31812>>>>>>>                Case Break
31813>>>>>>>            Case (eType=xtpControlCustom)
31816>>>>>>>                Move U_cCJCommandBarControlCustom to eType
31817>>>>>>>                Case Break
31818>>>>>>>            Case (eType=xtpControlEdit)
31821>>>>>>>                Move U_cCJCommandBarEdit to eType
31822>>>>>>>                Case Break
31823>>>>>>>            Case (eType=xtpControlGallery)
31826>>>>>>>                Move U_cCJCommandBarGallery to eType
31827>>>>>>>                Case Break
31828>>>>>>>            Case Else
31828>>>>>>>                Move U_cCJCommandBarControl to eType
31829>>>>>>>        Case End
31829>>>>>>>        Function_Return eType
31830>>>>>>>    End_Function
31831>>>>>>>    
31831>>>>>>>    // Creates a DF object of the proper type and binds it to the COM object.
31831>>>>>>>    Function CreateProxyControl Variant vControl Returns Handle
31833>>>>>>>        Handle hoObj
31833>>>>>>>        Integer eType iClass
31833>>>>>>>        Get Create U_cCJCommandBarControl to hoObj
31834>>>>>>>        Set pvComObject of hoObj to vControl
31835>>>>>>>        Get ComType of hoObj to eType
31836>>>>>>>        Send Destroy of hoObj
31837>>>>>>>        Move 0 to hoObj
31838>>>>>>>        Get ClassForControlType eType to iCLass
31839>>>>>>>        If (iClass<>0) Begin
31841>>>>>>>            Get Create iClass to hoObj
31842>>>>>>>            Set pvComObject of hoObj to vControl
31843>>>>>>>        End
31843>>>>>>>>
31843>>>>>>>        Function_Return hoObj
31844>>>>>>>    End_Function
31845>>>>>>>    
31845>>>>>>>    // use this to find the COM control and return a DF object. You must call this if
31845>>>>>>>    // you don't already have the control pointer. You should only call this if you know that
31845>>>>>>>    // there will only be one control attached to the action. Make no assumption about what "First" means. It's
31845>>>>>>>    // the first one the COM control finds.
31845>>>>>>>    Function CreateFirstProxyControl Returns Handle
31847>>>>>>>        Variant vControl
31847>>>>>>>        Handle hoControl
31847>>>>>>>        Get FindFirstControl to vControl
31848>>>>>>>        If (not(IsNullComObject(vControl))) Begin
31850>>>>>>>            Get CreateProxyControl vControl to hoControl
31851>>>>>>>        End
31851>>>>>>>>
31851>>>>>>>        Function_Return hoControl
31852>>>>>>>    End_Function
31853>>>>>>>    
31853>>>>>>>    
31853>>>>>>>    // when a manual destroy is sent we need to do some cleanup.
31853>>>>>>>    // If an active action, it must be removed from the active action array
31853>>>>>>>    // All menu controls for this action will be removed, wherever they are within the system
31853>>>>>>>    // The Action Id will be added back to the pool for reuse. This is needed because the com
31853>>>>>>>    // action is not destroyed (there is no interface for this).
31853>>>>>>>    Procedure Destroy
31855>>>>>>>        Handle hoCommandBars
31855>>>>>>>        Integer iId
31855>>>>>>>        Variant vControl
31855>>>>>>>        
31855>>>>>>>        Get piId to iId
31856>>>>>>>        // if no com object then this never got activated or another action object is
31856>>>>>>>        // used for this (which doesn't really make sense).
31856>>>>>>>        If (iId>0) Begin
31858>>>>>>>            Get CommandBarSystemObject to hoCommandBars
31859>>>>>>>            If (IsComObjectCreated(Self)) Begin
31861>>>>>>>                Send DeleteAllControlsForAction
31862>>>>>>>            End
31862>>>>>>>>
31862>>>>>>>            Send ReleaseId of hoCommandBars (piId(Self))
31863>>>>>>>        End
31863>>>>>>>>
31863>>>>>>>        Forward Send Destroy
31865>>>>>>>    End_Procedure
31866>>>>>>>    
31866>>>>>>>    // if the action is being released we must remove it from the action pool. This is needed for
31866>>>>>>>    // context menus which whose actions get created and released with each invocation. This will also
31866>>>>>>>    // happen when an object is destroyed. If the com object is created, destroy will send ReleaseComObject
31866>>>>>>>    Procedure ReleaseComObject
31868>>>>>>>        Integer iId
31868>>>>>>>        Handle hoCommandBars
31868>>>>>>>        Get piId to iId
31869>>>>>>>        If (iId>0 and IsComObjectCreated(Self)) Begin
31871>>>>>>>            Get CommandBarSystemObject to hoCommandBars
31872>>>>>>>            Send RemoveRegisteredAction of hoCommandBars Self
31873>>>>>>>        End
31873>>>>>>>>
31873>>>>>>>        Forward Send ReleaseComObject
31875>>>>>>>    End_Procedure
31876>>>>>>>    
31876>>>>>>>    
31876>>>>>>>    // called when this action is selected. Only send OnExecute if the
31876>>>>>>>    // action is enabled.
31876>>>>>>>    Procedure Execute Variant vCommandBarControl
31878>>>>>>>        Boolean bIsEnabled
31878>>>>>>>        Variant vObject
31878>>>>>>>        Get IsEnabled to bIsEnabled
31879>>>>>>>        If bIsEnabled Begin
31881>>>>>>>            // we will allow no parameter being passed. In such a case the developer probably sent
31881>>>>>>>            // execute themselves and did not pass a com pointer (which you don't normally care about)
31881>>>>>>>            // if this happens just pass a null com object to the OnExecute.
31881>>>>>>>            If (Num_Arguments=0) Begin
31883>>>>>>>                Move (NullComObject()) to vObject
31884>>>>>>>            End
31884>>>>>>>>
31884>>>>>>>            Else Begin
31885>>>>>>>                Move vCommandBarControl to vObject
31886>>>>>>>            End
31886>>>>>>>>
31886>>>>>>>            Send OnExecute vObject
31887>>>>>>>            Send Update
31888>>>>>>>        End
31888>>>>>>>>
31888>>>>>>>    End_Procedure
31889>>>>>>>    
31889>>>>>>>    // Updates the action. Can be called by timer when active update or
31889>>>>>>>    // called when a menu pops up
31889>>>>>>>    Procedure Update
31891>>>>>>>        Set pbVisible to (IsVisible(Self))
31892>>>>>>>        Set pbEnabled to (IsEnabled(Self))
31893>>>>>>>        Set pbChecked to (IsChecked(Self))
31894>>>>>>>        Send OnUpdate
31895>>>>>>>    End_Procedure
31896>>>>>>>    
31896>>>>>>>    // Event called to update the action
31896>>>>>>>    Procedure OnUpdate
31898>>>>>>>    End_Procedure
31899>>>>>>>    
31899>>>>>>>    // before this is called IsEnabled is called
31899>>>>>>>    Procedure OnExecute Variant vCommandBarControl
31901>>>>>>>    End_Procedure
31902>>>>>>>    
31902>>>>>>>    // when hover over
31902>>>>>>>    Procedure OnSelected Variant vCommandBarControl
31904>>>>>>>    End_Procedure
31905>>>>>>>    
31905>>>>>>>    // creation of action.
31905>>>>>>>    Procedure OnCreateAction
31907>>>>>>>    End_Procedure
31908>>>>>>>    
31908>>>>>>>    // before called, self and all items IsEnabled, IsChecked and IsVisible are called
31908>>>>>>>    Procedure OnPopupInit Variant vCommandBarControl Handle hoCommandBarControls
31910>>>>>>>    End_Procedure
31911>>>>>>>    
31911>>>>>>>    Procedure End_Construct_Object
31913>>>>>>>        Integer iID
31913>>>>>>>        Handle hoCommandBars
31913>>>>>>>        Get piId to iID
31914>>>>>>>        // if the ID is 0, auto-assign it.
31914>>>>>>>        If (iID=0) Begin
31916>>>>>>>            Get CommandBarSystemObject to hoCommandBars
31917>>>>>>>            // context menus may not be able to assign an id until they are created.
31917>>>>>>>            If (hoCommandBars<>0) Begin
31919>>>>>>>                Get AssignId of hoCommandBars to iID
31920>>>>>>>                Set piId to iID
31921>>>>>>>            End
31921>>>>>>>>
31921>>>>>>>        End
31921>>>>>>>>
31921>>>>>>>        Forward Send End_Construct_Object
31923>>>>>>>    End_Procedure
31924>>>>>>>    
31924>>>>>>>    
31924>>>>>>>End_Class
31925>>>>>>>
31925>>>>>>>// can be used by all controls. Menu, toolbar and popups.
31925>>>>>>>
31925>>>>>>>
31925>>>>>>>Class cCJMenuItem is a cCJAction
31926>>>>>>>    
31926>>>>>>>    Procedure Construct_Object
31928>>>>>>>        Forward Send Construct_Object
31930>>>>>>>        
31930>>>>>>>        // note that these properties are design time and initalize time only properties
31930>>>>>>>        Property Integer peControlType xtpControlButton
31931>>>>>>>        
31931>>>>>>>        Property Integer peControlStyle xtpButtonAutomatic
31932>>>>>>>        
31932>>>>>>>        Property Boolean pbControlBeginGroup   False
31933>>>>>>>        Property Boolean pbControlCloseSubMenu True
31934>>>>>>>        Property Boolean pbControlFlagRightAlign False
31935>>>>>>>        Property Boolean pbControlFlagLeftPopup  False
31936>>>>>>>        Property Boolean pbControlFlagNoMovable  False
31937>>>>>>>        Property Boolean pbControlFlagControlStretched False
31938>>>>>>>        Property Boolean pbControlFlagShowPopupBarToolTip False
31939>>>>>>>        Property Boolean pbControlFlagWrapRow False
31940>>>>>>>        Property Boolean pbControlDoubleGripper    False
31941>>>>>>>        Property Boolean pbControlPopupToolBar   False
31942>>>>>>>        
31942>>>>>>>        Property Boolean pbAddToDesignerMenu False
31943>>>>>>>        
31943>>>>>>>        // Used to redirect an action to a different object.
31943>>>>>>>        Property Integer phoAction Self
31944>>>>>>>        
31944>>>>>>>        Property Boolean pbInCreateTempInstance False
31945>>>>>>>        
31945>>>>>>>    End_Procedure
31946>>>>>>>    
31946>>>>>>>    // returns true if the control is a popup type - i.e., it will have child menu items. Good for Augmentation
31946>>>>>>>    Function IsPopup Returns Boolean
31948>>>>>>>        Integer eType
31948>>>>>>>        Get peControlType to eType
31949>>>>>>>        Function_Return (eType=xtpControlPopup or eType=xtpControlButtonPopup or eType=xtpControlSplitButtonPopup)
31950>>>>>>>    End_Function
31951>>>>>>>    
31951>>>>>>>    
31951>>>>>>>    
31951>>>>>>>    // must create action and then the visual control
31951>>>>>>>    Procedure CreateComInstance Handle hoControls
31953>>>>>>>        Variant vNewControl vNewControls vCommandBar
31953>>>>>>>        Handle hoNewControl hoNewControls hoCommandBar hoAction hoDesignerControls
31953>>>>>>>        Integer iId
31953>>>>>>>        Boolean bPopup
31953>>>>>>>        
31953>>>>>>>        Send AssignAction
31954>>>>>>>        Get CreateComControl hoControls to vNewControl
31955>>>>>>>        If (IsNullComObject(vNewControl)) Begin
31957>>>>>>>            Procedure_Return
31958>>>>>>>        End
31958>>>>>>>>
31958>>>>>>>        
31958>>>>>>>        Get piId to iId
31959>>>>>>>        
31959>>>>>>>        Get Create U_cCJCommandBarPopup to hoNewControl
31960>>>>>>>        Get Create U_cCJCommandBar to hoCommandbar
31961>>>>>>>        Get Create U_cCJCommandBarControls to hoNewControls
31962>>>>>>>        
31962>>>>>>>        Set pvComObject of hoNewControl to vNewControl
31963>>>>>>>        
31963>>>>>>>        Get IsPopup to bPopup
31964>>>>>>>        If (bPopup) Begin
31966>>>>>>>            
31966>>>>>>>            Get ComCommandBar of hoNewControl to vCommandBar
31967>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
31968>>>>>>>            Get ComControls of hoCommandBar to vNewControls
31969>>>>>>>            Set pvComObject of hoNewControls to vNewControls
31970>>>>>>>            
31970>>>>>>>            Broadcast Send CreateComInstance hoNewControls
31972>>>>>>>            
31972>>>>>>>        End
31972>>>>>>>>
31972>>>>>>>        
31972>>>>>>>        // if add to designer, create another instance of this control and add it to the designer
31972>>>>>>>        // controls. This uses the same action as the regular control. We do this after the child controls
31972>>>>>>>        // are created so that menus will contain all of their children.
31972>>>>>>>        If (pbAddToDesignerMenu(Self)) Begin
31974>>>>>>>            Get DesignerControlsCollection to hoDesignerControls
31975>>>>>>>            // if a designer control for this action already exists, we will not add it again.
31975>>>>>>>            Get ComFind of hoDesignerControls xtpControlError iId Nothing True to vNewControl
31976>>>>>>>            If (IsNullComObject(vNewControl)) Begin
31978>>>>>>>                Get CreateComControl hoDesignerControls to vNewControl
31979>>>>>>>                Set pvComObject of hoNewControl to vNewControl
31980>>>>>>>                If (bPopup) Begin
31982>>>>>>>                    Get ComCommandBar of hoNewControl to vCommandBar
31983>>>>>>>                    Set pvComObject of hoCommandBar to vCommandBar
31984>>>>>>>                    Get ComControls of hoCommandBar to vNewControls
31985>>>>>>>                    Set pvComObject of hoNewControls to vNewControls
31986>>>>>>>                    // note that it is safe to do this because the actions will not get
31986>>>>>>>                    // created again. Only the controls will get created.
31986>>>>>>>                    Broadcast Send CreateComInstance hoNewControls
31988>>>>>>>                End
31988>>>>>>>>
31988>>>>>>>            End
31988>>>>>>>>
31988>>>>>>>        End
31988>>>>>>>>
31988>>>>>>>        
31988>>>>>>>        Send Destroy of hoNewControls
31989>>>>>>>        Send Destroy of hoCommandBar
31990>>>>>>>        Send Destroy of hoNewControl
31991>>>>>>>        
31991>>>>>>>    End_Procedure
31992>>>>>>>    
31992>>>>>>>    // handle action for this menu-item. If the item is the action, make sure a com instance is created
31992>>>>>>>    // if this is not the action, attach to the action which should be created
31992>>>>>>>    // lots of assertions if there is a problem
31992>>>>>>>    Procedure AssignAction
31994>>>>>>>        Handle hoAction
31994>>>>>>>        Integer iId
31994>>>>>>>        
31994>>>>>>>        Get phoAction to hoAction
31995>>>>>>>        
31995>>>>>>>        If not hoAction Begin
31997>>>>>>>            Error DFERR_PROGRAM "Assert: action object is not assigned for menu item"
31998>>>>>>>>
31998>>>>>>>            Procedure_Return
31999>>>>>>>        End
31999>>>>>>>>
31999>>>>>>>        
31999>>>>>>>        // If the action object is self (normal) then we create an action com object if needed.
31999>>>>>>>        // it is possible that the action will already be created. If so, do nothing.
31999>>>>>>>        If (hoAction=Self) Begin
32001>>>>>>>            If not (IsComObjectCreated(Self)) Begin
32003>>>>>>>                Send CreateComAction
32004>>>>>>>            End
32004>>>>>>>>
32004>>>>>>>            Get piId to iId
32005>>>>>>>        End
32005>>>>>>>>
32005>>>>>>>        // if the action is some other object, we will assume it has already been created and just assign
32005>>>>>>>        // its id.
32005>>>>>>>        Else Begin
32006>>>>>>>            Get piId of hoAction to iId
32007>>>>>>>            Set piId to iId
32008>>>>>>>        End
32008>>>>>>>>
32008>>>>>>>        
32008>>>>>>>        If (iId=0) Begin
32010>>>>>>>            Error DFERR_PROGRAM "Assert: Action ID is zero"
32011>>>>>>>>
32011>>>>>>>            Procedure_Return
32012>>>>>>>        End
32012>>>>>>>>
32012>>>>>>>        
32012>>>>>>>        If not (IsComObjectCreated(hoAction)) Begin
32014>>>>>>>            Error  DFERR_PROGRAM "Assert: Action com object not created"
32015>>>>>>>>
32015>>>>>>>            Procedure_Return
32016>>>>>>>        End
32016>>>>>>>>
32016>>>>>>>    End_Procedure
32017>>>>>>>    
32017>>>>>>>    Function AddDynamicControl Handle hoControls Returns Variant
32019>>>>>>>        Variant vNewControl vCommandBar vNewControls
32019>>>>>>>        Boolean bOldTemp bPopup
32019>>>>>>>        Handle hoNewControl  hoCommandBar hoNewControls
32019>>>>>>>        
32019>>>>>>>        Get pbInCreateTempInstance to bOldTemp
32020>>>>>>>        Set pbInCreateTempInstance to True
32021>>>>>>>        
32021>>>>>>>        Send AssignAction
32022>>>>>>>        Get CreateComControl hoControls to vNewControl // if null, an assertion will be declared
32023>>>>>>>        
32023>>>>>>>        Get IsPopup to bPopup
32024>>>>>>>        If (bPopup) Begin
32026>>>>>>>            
32026>>>>>>>            Get Create U_cCJCommandBarPopup to hoNewControl
32027>>>>>>>            Get Create U_cCJCommandBar to hoCommandbar
32028>>>>>>>            Get Create U_cCJCommandBarControls to hoNewControls
32029>>>>>>>            
32029>>>>>>>            Set pvComObject of hoNewControl to vNewControl
32030>>>>>>>            
32030>>>>>>>            Get ComCommandBar of hoNewControl to vCommandBar
32031>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
32032>>>>>>>            Get ComControls of hoCommandBar to vNewControls
32033>>>>>>>            Set pvComObject of hoNewControls to vNewControls
32034>>>>>>>            
32034>>>>>>>            Broadcast Send CreateComInstance hoNewControls
32036>>>>>>>            
32036>>>>>>>            Send Destroy of hoNewControls
32037>>>>>>>            Send Destroy of hoCommandBar
32038>>>>>>>            Send Destroy of hoNewControl
32039>>>>>>>            
32039>>>>>>>        End
32039>>>>>>>>
32039>>>>>>>        
32039>>>>>>>        
32039>>>>>>>        Set pbInCreateTempInstance to bOldTemp
32040>>>>>>>        
32040>>>>>>>        Function_Return vNewControl
32041>>>>>>>    End_Function
32042>>>>>>>    
32042>>>>>>>    // used to actually create the desired control and add it to the passed commandbars
32042>>>>>>>    Function CreateCommandBarControl Handle hoControls Integer eType Integer iId Boolean bInCreateTempInstance Returns Variant
32044>>>>>>>        Variant vControl
32044>>>>>>>        Get ComAdd of hoControls eType iId "" Nothing bInCreateTempInstance to vControl
32045>>>>>>>        Function_Return vControl
32046>>>>>>>    End_Function
32047>>>>>>>    
32047>>>>>>>    // create the menu item control. Return a DataFlex object for this control
32047>>>>>>>    // This assumes that an action ID exiss and that a com action object is created.
32047>>>>>>>    
32047>>>>>>>    Function CreateComControl Handle hoControls Returns Variant
32049>>>>>>>        Handle hoObj hoCommandBar hoCommandBars
32049>>>>>>>        Variant vControl vCommandbar
32049>>>>>>>        Integer iId eType eStyle eFlags iClass
32049>>>>>>>        Boolean bPopup bBegin bClose bDoubleGripper bPopupToolBar
32049>>>>>>>        Boolean bFlagStretch bFlagLeftPopup bFlagNoMove bFlagRightAlign bFlagShowTip bFlagWrap
32049>>>>>>>        Boolean bInCreateTempInstance
32049>>>>>>>        
32049>>>>>>>        
32049>>>>>>>        Get pbInCreateTempInstance to bInCreateTempInstance
32050>>>>>>>        
32050>>>>>>>        Get piId to iId
32051>>>>>>>        Get peControlType to eType
32052>>>>>>>        Get peControlStyle to eStyle
32053>>>>>>>        Get pbControlBeginGroup to bBegin
32054>>>>>>>        Get pbControlCloseSubMenu to bClose
32055>>>>>>>        Get pbControlFlagControlStretched to bFlagStretch
32056>>>>>>>        Get pbControlFlagLeftPopup to bFlagLeftPopup
32057>>>>>>>        Get pbControlFlagNoMovable to bFlagNoMove
32058>>>>>>>        Get pbControlFlagRightAlign to bFlagRightAlign
32059>>>>>>>        Get pbControlFlagShowPopupBarToolTip to bFlagShowTip
32060>>>>>>>        Get pbControlDoubleGripper to bDoubleGripper
32061>>>>>>>        Get pbControlPopupToolBar to bPopupToolBar
32062>>>>>>>        Get pbControlFlagWrapRow to bFlagWrap
32063>>>>>>>        // assemble the COMFlags from the flag properties.
32063>>>>>>>        Move (If(bFlagStretch,xtpFlagControlStretched,0) + ;            If(bFlagLeftPopup,xtpFlagLeftPopup,0) +;            If(bFlagNoMove,xtpFlagNoMovable,0) +;            If(bFlagRightAlign,xtpFlagRightAlign,0) +;            If(bFlagShowTip,xtpFlagShowPopupBarTip,0) +;            If(bFlagWrap,xtpFlagWrapRow,0) ) to eFlags
32064>>>>>>>        
32064>>>>>>>        Get CreateCommandBarControl hoControls eType iId bInCreateTempInstance to vControl
32065>>>>>>>        
32065>>>>>>>        If (IsNullComObject(vControl)) Begin
32067>>>>>>>            Error DFERR_PROGRAM ("Assert: could not create com control: Type" - String(eType) - ", iId=" - String(iId))
32068>>>>>>>>
32068>>>>>>>            Function_Return vControl
32069>>>>>>>        End
32069>>>>>>>>
32069>>>>>>>        
32069>>>>>>>        Get IsPopup to bPopup
32070>>>>>>>        Get ClassForControlType eType to iClass
32071>>>>>>>        Get Create iClass to hoObj
32072>>>>>>>        Set pvComObject of hoObj to vControl
32073>>>>>>>        Set ComStyle of hoObj to eStyle
32074>>>>>>>        Set ComBeginGroup of hoObj to bBegin
32075>>>>>>>        Set ComCloseSubMenuOnClick of hoObj to bClose
32076>>>>>>>        Set ComFlags of hoObj to eFlags
32077>>>>>>>        
32077>>>>>>>        If bPopup Begin
32079>>>>>>>            Get Create U_cCJCommandBar to hoCommandbar
32080>>>>>>>            Get ComCommandBar of hoObj to vCommandBar
32081>>>>>>>            
32081>>>>>>>            // it appears that it is possible to have a popup that does not get assigned
32081>>>>>>>            // a commandbar. If that happens we will add a commandbar to the control
32081>>>>>>>            // the hard way.
32081>>>>>>>            If (IsNullComObject(vCommandbar)) Begin
32083>>>>>>>                Get CommandBarSystemObject to hoCommandBars
32084>>>>>>>                Get ComAdd of hoCommandBars "Popup" xtpBarPopup to vCommandBar
32085>>>>>>>                Set ComCommandBar of hoObj to vCommandBar
32086>>>>>>>            End
32086>>>>>>>>
32086>>>>>>>            
32086>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
32087>>>>>>>            
32087>>>>>>>            If (bDoubleGripper) Begin
32089>>>>>>>                Set ComDoubleGripper of hoCommandBar to True
32090>>>>>>>            End
32090>>>>>>>>
32090>>>>>>>            If (bPopupToolBar) Begin
32092>>>>>>>                Send ComSetPopupToolBar of hoCommandBar True
32093>>>>>>>            End
32093>>>>>>>>
32093>>>>>>>            
32093>>>>>>>            Send Destroy of hoCommandBar
32094>>>>>>>        End
32094>>>>>>>>
32094>>>>>>>        
32094>>>>>>>        Send OnCreateControl hoObj
32095>>>>>>>        
32095>>>>>>>        Send destroy of hoObj
32096>>>>>>>        
32096>>>>>>>        Function_Return vControl
32097>>>>>>>        
32097>>>>>>>    End_Function
32098>>>>>>>    
32098>>>>>>>    Procedure OnCreateControl Handle hoObj
32100>>>>>>>    End_Procedure
32101>>>>>>>    
32101>>>>>>>End_Class
32102>>>>>>>
32102>>>>>>>
32102>>>>>>>Class cCJStatusBar is a cCJComStatusBar
32103>>>>>>>    
32103>>>>>>>    Procedure Construct_Object
32105>>>>>>>        Boolean bMDI
32105>>>>>>>        Handle hoCommandBars
32105>>>>>>>        Forward Send Construct_Object
32107>>>>>>>        
32107>>>>>>>        Property Boolean pbPrivateDrawDisabledText True
32108>>>>>>>        Property String  psPrivateIdleText ''
32109>>>>>>>        Property Boolean pbPrivateVisible True
32110>>>>>>>        
32110>>>>>>>        Property Integer piStatusBarId ID_StatusBarsAutoStart
32111>>>>>>>        
32111>>>>>>>        Property Integer phoViewPane 0
32112>>>>>>>        
32112>>>>>>>        Set peNeighborhood to nhNo
32113>>>>>>>        
32113>>>>>>>        
32113>>>>>>>    End_Procedure
32114>>>>>>>    
32114>>>>>>>    // Remove the references to the statusbar when it is about to be destroyed.
32114>>>>>>>    Procedure Destroy_Object
32116>>>>>>>        Handle hoCommandBars
32116>>>>>>>        Boolean bMDI
32116>>>>>>>        Get CommandBarSystemObject to hoCommandBars
32117>>>>>>>        // if this is an MDI command bar, reset the main Status bar
32117>>>>>>>        Get pbMDIMenu of hoCommandBars to bMDI
32118>>>>>>>        If bMDI Begin
32120>>>>>>>            Set Statusbar_Id to 0
32121>>>>>>>        End
32121>>>>>>>>
32121>>>>>>>        Set phoStatusBar of hoCommandBars to 0
32122>>>>>>>        Forward Send Destroy_Object
32124>>>>>>>    End_Procedure
32125>>>>>>>    
32125>>>>>>>    Procedure Set pbDrawDisabledText Boolean bValue
32127>>>>>>>        Set pbPrivateDrawDisabledText to bValue
32128>>>>>>>        If (IsComObjectCreated(Self)) Begin
32130>>>>>>>            Set ComDrawDisabledText to bValue
32131>>>>>>>        End
32131>>>>>>>>
32131>>>>>>>    End_Procedure
32132>>>>>>>    
32132>>>>>>>    Function pbDrawDisabledText Returns Boolean
32134>>>>>>>        Boolean bValue
32134>>>>>>>        If (IsComObjectCreated(Self)) Begin
32136>>>>>>>            Get ComDrawDisabledText to bValue
32137>>>>>>>        End
32137>>>>>>>>
32137>>>>>>>        Else Begin
32138>>>>>>>            Get pbPrivateDrawDisabledText to bValue
32139>>>>>>>        End
32139>>>>>>>>
32139>>>>>>>        Function_Return bValue
32140>>>>>>>    End_Function
32141>>>>>>>    
32141>>>>>>>    Procedure Set pbVisible Boolean bValue
32143>>>>>>>        Set pbPrivateVisible to bValue
32144>>>>>>>        If (IsComObjectCreated(Self)) Begin
32146>>>>>>>            Set ComVisible to bValue
32147>>>>>>>        End
32147>>>>>>>>
32147>>>>>>>    End_Procedure
32148>>>>>>>    
32148>>>>>>>    Function pbVisible Returns Boolean
32150>>>>>>>        Boolean bValue
32150>>>>>>>        // for some reason visible state of statusbar is set false when
32150>>>>>>>        // commandbarsystem is not active. So we also check active_state
32150>>>>>>>        If (IsComObjectCreated(Self) and Active_State(Self)) Begin
32152>>>>>>>            Get ComVisible to bValue
32153>>>>>>>        End
32153>>>>>>>>
32153>>>>>>>        Else Begin
32154>>>>>>>            Get pbPrivateVisible to bValue
32155>>>>>>>        End
32155>>>>>>>>
32155>>>>>>>        Function_Return bValue
32156>>>>>>>    End_Function
32157>>>>>>>    
32157>>>>>>>    Procedure Set psIdleText String sValue
32159>>>>>>>        Set psPrivateIdleText to sValue
32160>>>>>>>        If (IsComObjectCreated(Self)) Begin
32162>>>>>>>            Set ComIdleText to sValue
32163>>>>>>>        End
32163>>>>>>>>
32163>>>>>>>    End_Procedure
32164>>>>>>>    
32164>>>>>>>    Function psIdleText Returns String
32166>>>>>>>        String sValue
32166>>>>>>>        If (IsComObjectCreated(Self)) Begin
32168>>>>>>>            Get ComIdleText to sValue
32169>>>>>>>        End
32169>>>>>>>>
32169>>>>>>>        Else Begin
32170>>>>>>>            Get psPrivateIdleText to sValue
32171>>>>>>>        End
32171>>>>>>>>
32171>>>>>>>        Function_Return sValue
32172>>>>>>>    End_Function
32173>>>>>>>    
32173>>>>>>>    
32173>>>>>>>    Procedure CreateComInstance
32175>>>>>>>        Handle hoCommandBars
32175>>>>>>>        Variant vStatusBar
32175>>>>>>>        String sTitle
32175>>>>>>>        Integer iBarId iWidth iDockFgs
32175>>>>>>>        Boolean bDrawDisabledText bVisible bMDI
32175>>>>>>>        String  sIdleText
32175>>>>>>>        
32175>>>>>>>        // if already created, we don't do anything. This could happen during
32175>>>>>>>        // a restore
32175>>>>>>>        If (IsComObjectCreated(Self)) Begin
32177>>>>>>>            Procedure_Return
32178>>>>>>>        End
32178>>>>>>>>
32178>>>>>>>        
32178>>>>>>>        Get CommandBarSystemObject to hoCommandBars
32179>>>>>>>        
32179>>>>>>>        // if this is an MDI command bar, we will define this as the main Status bar
32179>>>>>>>        Get pbMDIMenu of hoCommandBars to bMDI
32180>>>>>>>        If bMDI Begin
32182>>>>>>>            Set Statusbar_Id to Self
32183>>>>>>>        End
32183>>>>>>>>
32183>>>>>>>        Set phoStatusBar of hoCommandBars to Self
32184>>>>>>>        
32184>>>>>>>        Get pbPrivateDrawDisabledText to bDrawDisabledText
32185>>>>>>>        Get pbPrivateVisible to bVisible
32186>>>>>>>        Get psPrivateIdleText to sIdleText
32187>>>>>>>        Get ComStatusBar of hoCommandBars to vStatusBar
32188>>>>>>>        Set pvComObject to vStatusBar
32189>>>>>>>        Set ComDrawDisabledText to bDrawDisabledText
32190>>>>>>>        Set ComVisible to bVisible
32191>>>>>>>        Set ComIdleText to sIdleText
32192>>>>>>>        
32192>>>>>>>        Send OnCreate
32193>>>>>>>        
32193>>>>>>>        Broadcast Send CreateComInstance Self
32195>>>>>>>        
32195>>>>>>>    End_Procedure
32196>>>>>>>    
32196>>>>>>>    // display "main" status help. Usually provided from DD.
32196>>>>>>>    Procedure Show_Status_Help String sStatusHelp
32198>>>>>>>        Set psIdleText to sStatusHelp
32199>>>>>>>    End_Procedure
32200>>>>>>>    
32200>>>>>>>    // show the view name in the pane if a phoViewPane exists
32200>>>>>>>    Procedure Show_View_Name String sName
32202>>>>>>>        Handle hoPane
32202>>>>>>>        Get phoViewPane to hoPane
32203>>>>>>>        If (hoPane) Begin
32205>>>>>>>            Set psText of hoPane to sName
32206>>>>>>>        End
32206>>>>>>>>
32206>>>>>>>    End_Procedure
32207>>>>>>>    
32207>>>>>>>    // legacy from old status bar
32207>>>>>>>    Procedure Exit_Menu
32209>>>>>>>    End_Procedure
32210>>>>>>>    
32210>>>>>>>    // returns an array of all pane objects (these are the DF objects, if additional COM panes were
32210>>>>>>>    // created they are not here)
32210>>>>>>>    Function PaneObjects Returns Handle[]
32212>>>>>>>        Handle[] hoPanes
32213>>>>>>>        Broadcast Send RegisterStatusPaneObject (&hoPanes)
32215>>>>>>>        Function_Return hoPanes
32216>>>>>>>    End_Function
32217>>>>>>>    
32217>>>>>>>    // Find the DF object for the passed COM object. Returns 0 if none found
32217>>>>>>>    Function FindPaneObject Variant vPane Returns Handle
32219>>>>>>>        Handle hoPane
32219>>>>>>>        Handle[] hoPanes
32220>>>>>>>        Integer i iPanes iId
32220>>>>>>>        Get Create U_cCJComStatusBarPane to hoPane
32221>>>>>>>        Set pvComObject of hoPane to vPane
32222>>>>>>>        Get ComId of hoPane to iId
32223>>>>>>>        Send destroy of hoPane
32224>>>>>>>        Get PaneObjects to hoPanes // get all df pane objects
32225>>>>>>>        Move (SizeOfArray(hoPanes)) to iPanes
32226>>>>>>>        For i from 0 to (iPanes-1)
32232>>>>>>>>
32232>>>>>>>            If (iId=piId(hoPanes[i])) Begin // search for DF object with same ID as com object
32234>>>>>>>                Function_Return hoPanes[i]
32235>>>>>>>            End
32235>>>>>>>>
32235>>>>>>>        Loop
32236>>>>>>>>
32236>>>>>>>        Function_Return 0
32237>>>>>>>    End_Function
32238>>>>>>>    
32238>>>>>>>    // this returns the width, in pixels, needed to display a string.
32238>>>>>>>    Function PaneTextWidth WString sText Returns Integer
32240>>>>>>>        Handle hWnd hDC
32240>>>>>>>        Integer bOK
32240>>>>>>>        tWinPoint Point
32240>>>>>>>        tWinPoint Point
32240>>>>>>>        
32240>>>>>>>        Get Window_Handle to hWnd
32241>>>>>>>        Move (GetDC(hWnd)) to hDC
32242>>>>>>>        
32242>>>>>>>        Move (GetTextExtentW(hDC, AddressOf(sText), length(sText), AddressOf(Point))) to bOk
32243>>>>>>>        
32243>>>>>>>        Move (ReleaseDC(hWnd, hDC)) to hDC
32244>>>>>>>        Function_Return Point.x
32245>>>>>>>    End_Function
32246>>>>>>>    
32246>>>>>>>    Procedure Update
32248>>>>>>>        Send OnUpdate
32249>>>>>>>    End_Procedure
32250>>>>>>>    
32250>>>>>>>    Procedure OnUpdate
32252>>>>>>>    End_Procedure
32253>>>>>>>    
32253>>>>>>>    Procedure OnCreate
32255>>>>>>>    End_Procedure
32256>>>>>>>    
32256>>>>>>>    Procedure OnComPaneClick Variant llPane
32258>>>>>>>        Handle hoPane
32258>>>>>>>        Get FindPaneObject llPane to hoPane
32259>>>>>>>        If hoPane Begin
32261>>>>>>>            Send onClick of hoPane
32262>>>>>>>        End
32262>>>>>>>>
32262>>>>>>>    End_Procedure
32263>>>>>>>    
32263>>>>>>>    Procedure OnComPaneDblClick Variant llPane
32265>>>>>>>        Handle hoPane
32265>>>>>>>        Get FindPaneObject llPane to hoPane
32266>>>>>>>        If hoPane Begin
32268>>>>>>>            Send onDblClick of hoPane
32269>>>>>>>        End
32269>>>>>>>>
32269>>>>>>>    End_Procedure
32270>>>>>>>    
32270>>>>>>>End_Class
32271>>>>>>>
32271>>>>>>>
32271>>>>>>>Class cCJStatusBarPane is a cCJComStatusBarPane
32272>>>>>>>    
32272>>>>>>>    Procedure Construct_Object
32274>>>>>>>        Forward Send Construct_Object
32276>>>>>>>        Property Integer pePrivateAlignment xtpAlignmentLeft
32277>>>>>>>        Property Integer piPrivateBackGroundColor clNone
32278>>>>>>>        Property Integer piPrivateTextColor clNone
32279>>>>>>>        Property String  psPrivateText ''
32280>>>>>>>        Property String  psPrivateTooltip ''
32281>>>>>>>        Property Boolean pbPrivateVisible True
32282>>>>>>>        Property Integer piPrivateWidth 0
32283>>>>>>>        Property Integer pbPrivateStyleNoBorders False
32284>>>>>>>        Property Integer pbPrivateStyleDisabled False
32285>>>>>>>        Property Integer pbPrivateStyleStretch False
32286>>>>>>>        Property Integer  piPrivateIconId 0
32287>>>>>>>        
32287>>>>>>>        Property String  psImage ''
32288>>>>>>>        
32288>>>>>>>        Property Integer piId sbpIDAutoAssign
32289>>>>>>>        
32289>>>>>>>        Set peNeighborhood to nhNo
32290>>>>>>>    End_Procedure
32291>>>>>>>    
32291>>>>>>>    Procedure Set pbVisible Boolean bValue
32293>>>>>>>        Set pbPrivateVisible to bValue
32294>>>>>>>        If (IsComObjectCreated(Self)) Begin
32296>>>>>>>            Set ComVisible to bValue
32297>>>>>>>        End
32297>>>>>>>>
32297>>>>>>>    End_Procedure
32298>>>>>>>    
32298>>>>>>>    Function pbVisible Returns Boolean
32300>>>>>>>        Boolean bValue
32300>>>>>>>        If (IsComObjectCreated(Self)) Begin
32302>>>>>>>            Get ComVisible to bValue
32303>>>>>>>        End
32303>>>>>>>>
32303>>>>>>>        Else Begin
32304>>>>>>>            Get pbPrivateVisible to bValue
32305>>>>>>>        End
32305>>>>>>>>
32305>>>>>>>        Function_Return bValue
32306>>>>>>>    End_Function
32307>>>>>>>    
32307>>>>>>>    Procedure Set piBackgroundColor Integer iValue
32309>>>>>>>        Set piPrivateBackgroundColor to iValue
32310>>>>>>>        If (IsComObjectCreated(Self)) Begin
32312>>>>>>>            Set ComBackgroundColor to iValue
32313>>>>>>>        End
32313>>>>>>>>
32313>>>>>>>    End_Procedure
32314>>>>>>>    
32314>>>>>>>    Function piBackgroundColor Returns Integer
32316>>>>>>>        Integer iValue
32316>>>>>>>        If (IsComObjectCreated(Self)) Begin
32318>>>>>>>            Get ComBackgroundColor to iValue
32319>>>>>>>        End
32319>>>>>>>>
32319>>>>>>>        Else Begin
32320>>>>>>>            Get piPrivateBackgroundColor to iValue
32321>>>>>>>        End
32321>>>>>>>>
32321>>>>>>>        Function_Return iValue
32322>>>>>>>    End_Function
32323>>>>>>>    
32323>>>>>>>    Procedure Set piTextColor Integer iValue
32325>>>>>>>        Set piPrivateTextColor to iValue
32326>>>>>>>        If (IsComObjectCreated(Self)) Begin
32328>>>>>>>            Set ComTextColor to iValue
32329>>>>>>>        End
32329>>>>>>>>
32329>>>>>>>    End_Procedure
32330>>>>>>>    
32330>>>>>>>    Function piTextColor Returns Integer
32332>>>>>>>        Integer iValue
32332>>>>>>>        If (IsComObjectCreated(Self)) Begin
32334>>>>>>>            Get ComTextColor to iValue
32335>>>>>>>        End
32335>>>>>>>>
32335>>>>>>>        Else Begin
32336>>>>>>>            Get piPrivateTextColor to iValue
32337>>>>>>>        End
32337>>>>>>>>
32337>>>>>>>        Function_Return iValue
32338>>>>>>>    End_Function
32339>>>>>>>    
32339>>>>>>>    Procedure Set piWidth Integer iValue
32341>>>>>>>        Set piPrivateWidth to iValue
32342>>>>>>>        If (IsComObjectCreated(Self)) Begin
32344>>>>>>>            Set ComWidth to iValue
32345>>>>>>>        End
32345>>>>>>>>
32345>>>>>>>    End_Procedure
32346>>>>>>>    
32346>>>>>>>    Function piWidth Returns Integer
32348>>>>>>>        Integer iValue
32348>>>>>>>        If (IsComObjectCreated(Self)) Begin
32350>>>>>>>            Get ComWidth to iValue
32351>>>>>>>        End
32351>>>>>>>>
32351>>>>>>>        Else Begin
32352>>>>>>>            Get piPrivateWidth to iValue
32353>>>>>>>        End
32353>>>>>>>>
32353>>>>>>>        Function_Return iValue
32354>>>>>>>    End_Function
32355>>>>>>>    
32355>>>>>>>    Procedure Set peAlignment Integer eValue
32357>>>>>>>        Set pePrivateAlignment to eValue
32358>>>>>>>        If (IsComObjectCreated(Self)) Begin
32360>>>>>>>            Set ComAlignment to eValue
32361>>>>>>>        End
32361>>>>>>>>
32361>>>>>>>    End_Procedure
32362>>>>>>>    
32362>>>>>>>    Function peAlignment Returns Integer
32364>>>>>>>        Integer eValue
32364>>>>>>>        If (IsComObjectCreated(Self)) Begin
32366>>>>>>>            Get ComAlignment to eValue
32367>>>>>>>        End
32367>>>>>>>>
32367>>>>>>>        Else Begin
32368>>>>>>>            Get pePrivateAlignment to eValue
32369>>>>>>>        End
32369>>>>>>>>
32369>>>>>>>        Function_Return eValue
32370>>>>>>>    End_Function
32371>>>>>>>    
32371>>>>>>>    Procedure SetPaneStyle Integer iMask Boolean bValue Handle hmMessage
32373>>>>>>>        Integer eValue
32373>>>>>>>        Set hmMessage to bValue
32374>>>>>>>        If (IsComObjectCreated(Self)) Begin
32376>>>>>>>            Set ComStyle to eValue
32377>>>>>>>            If (bValue) Begin
32379>>>>>>>                Move (AddBitValue(iMask,eValue)) to eValue
32380>>>>>>>            End
32380>>>>>>>>
32380>>>>>>>            Else Begin
32381>>>>>>>                Move (RemoveBitValue(iMask,eValue)) to eValue
32382>>>>>>>            End
32382>>>>>>>>
32382>>>>>>>            Set ComStyle to eValue
32383>>>>>>>        End
32383>>>>>>>>
32383>>>>>>>    End_Procedure
32384>>>>>>>    
32384>>>>>>>    Function GetPaneStyle Integer iMask Handle hmMessage Returns Boolean
32386>>>>>>>        Integer eValue
32386>>>>>>>        Boolean bValue
32386>>>>>>>        If (IsComObjectCreated(Self)) Begin
32388>>>>>>>            Get ComStyle to eValue
32389>>>>>>>            Move (eValue iand iMask) to bValue
32390>>>>>>>        End
32390>>>>>>>>
32390>>>>>>>        Else Begin
32391>>>>>>>            Get hmMessage to bValue
32392>>>>>>>        End
32392>>>>>>>>
32392>>>>>>>        Function_Return bValue
32393>>>>>>>    End_Function
32394>>>>>>>    
32394>>>>>>>    Procedure Set pbStyleNoBorders Boolean bValue
32396>>>>>>>        Send SetPaneStyle SBPS_NOBORDERS bValue set_pbPrivateStyleNoBorders
32397>>>>>>>    End_Procedure
32398>>>>>>>    
32398>>>>>>>    Function pbStyleNoBorders Returns Boolean
32400>>>>>>>        Boolean bValue
32400>>>>>>>        Get GetPaneStyle SBPS_NOBORDERS get_pbPrivateStyleNoBorders to bValue
32401>>>>>>>        Function_Return bValue
32402>>>>>>>    End_Function
32403>>>>>>>    
32403>>>>>>>    Procedure Set pbStyleDisabled Boolean bValue
32405>>>>>>>        Send SetPaneStyle SBPS_DISABLED bValue set_pbPrivateStyleDisabled
32406>>>>>>>    End_Procedure
32407>>>>>>>    
32407>>>>>>>    Function pbStyleDisabled Returns Boolean
32409>>>>>>>        Boolean bValue
32409>>>>>>>        Get GetPaneStyle SBPS_DISABLED get_pbPrivateStyleDisabled to bValue
32410>>>>>>>        Function_Return bValue
32411>>>>>>>    End_Function
32412>>>>>>>    
32412>>>>>>>    Procedure Set pbStyleStretch Boolean bValue
32414>>>>>>>        Send SetPaneStyle SBPS_STRETCH bValue Set_pbPrivateStyleStretch
32415>>>>>>>    End_Procedure
32416>>>>>>>    
32416>>>>>>>    Function pbStyleStretch Returns Boolean
32418>>>>>>>        Boolean bValue
32418>>>>>>>        Get GetPaneStyle SBPS_STRETCH get_pbPrivateStyleStretch to bValue
32419>>>>>>>        Function_Return bValue
32420>>>>>>>    End_Function
32421>>>>>>>    
32421>>>>>>>    
32421>>>>>>>    Procedure Set psText String sValue
32423>>>>>>>        Set psPrivateText to sValue
32424>>>>>>>        If (IsComObjectCreated(Self)) Begin
32426>>>>>>>            Set ComText to sValue
32427>>>>>>>        End
32427>>>>>>>>
32427>>>>>>>    End_Procedure
32428>>>>>>>    
32428>>>>>>>    Function psText Returns String
32430>>>>>>>        String sValue
32430>>>>>>>        If (IsComObjectCreated(Self)) Begin
32432>>>>>>>            Get ComText to sValue
32433>>>>>>>        End
32433>>>>>>>>
32433>>>>>>>        Else Begin
32434>>>>>>>            Get psPrivateText to sValue
32435>>>>>>>        End
32435>>>>>>>>
32435>>>>>>>        Function_Return sValue
32436>>>>>>>    End_Function
32437>>>>>>>    
32437>>>>>>>    Procedure Set psToolTip String sValue
32439>>>>>>>        Set psPrivateToolTip to sValue
32440>>>>>>>        If (IsComObjectCreated(Self)) Begin
32442>>>>>>>            Set ComToolTip to sValue
32443>>>>>>>        End
32443>>>>>>>>
32443>>>>>>>    End_Procedure
32444>>>>>>>    
32444>>>>>>>    Function psToolTip Returns String
32446>>>>>>>        String sValue
32446>>>>>>>        If (IsComObjectCreated(Self)) Begin
32448>>>>>>>            Get ComToolTip to sValue
32449>>>>>>>        End
32449>>>>>>>>
32449>>>>>>>        Else Begin
32450>>>>>>>            Get psPrivateToolTip to sValue
32451>>>>>>>        End
32451>>>>>>>>
32451>>>>>>>        Function_Return sValue
32452>>>>>>>    End_Function
32453>>>>>>>    
32453>>>>>>>    // normally this is zero and not changed. When zero the imageId used will be
32453>>>>>>>    // the statusbarId and this is the ID that is used when the psImage method is used.
32453>>>>>>>    // Using psImage is preferred as it adds the icon and assigns it to the object.
32453>>>>>>>    // This can be used to change icons. Note 0=use StatusbarId
32453>>>>>>>    Procedure Set piIconId Integer iValue
32455>>>>>>>        Set piPrivateIconId to iValue
32456>>>>>>>        If (IsComObjectCreated(Self)) Begin
32458>>>>>>>            Set ComIconIndex to iValue
32459>>>>>>>        End
32459>>>>>>>>
32459>>>>>>>    End_Procedure
32460>>>>>>>    
32460>>>>>>>    Function piIconId Returns Integer
32462>>>>>>>        Integer iValue
32462>>>>>>>        If (IsComObjectCreated(Self)) Begin
32464>>>>>>>            Get ComIconIndex to iValue
32465>>>>>>>        End
32465>>>>>>>>
32465>>>>>>>        Else Begin
32466>>>>>>>            Get piPrivateIconId to iValue
32467>>>>>>>        End
32467>>>>>>>>
32467>>>>>>>        Function_Return iValue
32468>>>>>>>    End_Function
32469>>>>>>>    
32469>>>>>>>    Procedure CreateComInstance Handle hoStatusBar
32471>>>>>>>        Variant vStatusBarPane
32471>>>>>>>        String sImage sText sToolTip
32471>>>>>>>        Integer iWidth eAlignment eStyle iBackGroundColor iTextColor iId iIconId iNewIconid
32471>>>>>>>        Boolean  bVisible bOk bStyleStretch bStyleDisabled bStyleNoBorders
32471>>>>>>>        Handle hoCommandBars
32471>>>>>>>        
32471>>>>>>>        Get CommandBarSystemObject to hoCommandBars
32472>>>>>>>        
32472>>>>>>>        Get pePrivateAlignment to eAlignment
32473>>>>>>>        Get pbPrivateVisible to bVisible
32474>>>>>>>        Get psPrivateText to sText
32475>>>>>>>        Get psPrivateTooltip to sToolTip
32476>>>>>>>        Get piPrivateBackGroundColor to iBackGroundColor
32477>>>>>>>        Get piPrivateTextColor to iTextColor
32478>>>>>>>        Get psImage to sImage
32479>>>>>>>        Get piPrivateWidth to iWidth
32480>>>>>>>        Get pbPrivateStyleStretch to bStyleStretch
32481>>>>>>>        Get pbPrivateStyleNoBorders to bStyleNoBorders
32482>>>>>>>        Get pbPrivateStyleDisabled to bStyleDisabled
32483>>>>>>>        Get piPrivateIconId to iIconId
32484>>>>>>>        
32484>>>>>>>        Get piId to iId
32485>>>>>>>        
32485>>>>>>>        // this check is added because a duplicate ID throws an exception error
32485>>>>>>>        Get ComFindPane of hoStatusBar iId to vStatusBarPane
32486>>>>>>>        If (not(IsNullComObject(vStatusBarPane))) Begin
32488>>>>>>>            Error DFERR_PROGRAM ("Cannot add status pane. Duplicate Id (" - String(iId) - ")")
32489>>>>>>>>
32489>>>>>>>            Procedure_Return
32490>>>>>>>        End
32490>>>>>>>>
32490>>>>>>>        
32490>>>>>>>        Get ComAddPane of hoStatusBar iId to vStatusBarPane
32491>>>>>>>        Set pvComObject to vStatusBarPane
32492>>>>>>>        Set ComAlignment to eAlignment
32493>>>>>>>        If (sText<>"") Begin
32495>>>>>>>            Set ComText to sText
32496>>>>>>>        End
32496>>>>>>>>
32496>>>>>>>        Set ComToolTip to sToolTip
32497>>>>>>>        If (iBackGroundColor<>clNone) Begin
32499>>>>>>>            Set ComBackgroundColor to iBackGroundColor
32500>>>>>>>        End
32500>>>>>>>>
32500>>>>>>>        If (iTextColor<>clNone) Begin
32502>>>>>>>            Set ComTextColor to iTextColor
32503>>>>>>>        End
32503>>>>>>>>
32503>>>>>>>        
32503>>>>>>>        Move (If(bStyleDisabled,SBPS_DISABLED,0) + ;            If(bStyleNoBorders,SBPS_NOBORDERS,0) + ;            If(bStyleStretch,SBPS_STRETCH,0)) to eStyle
32504>>>>>>>        Set ComStyle to eStyle
32505>>>>>>>        
32505>>>>>>>        If (sImage<>"") Begin
32507>>>>>>>            Get AddImage of hoCommandBars sImage iId xtpImageNormal to iNewIconid
32508>>>>>>>            Set ComIconIndex to iId
32509>>>>>>>        End
32509>>>>>>>>
32509>>>>>>>        If (iIconId<>0) Begin
32511>>>>>>>            Set ComIconIndex to iIconId
32512>>>>>>>        End
32512>>>>>>>>
32512>>>>>>>        
32512>>>>>>>        Set ComVisible to bVisible
32513>>>>>>>        Set ComWidth to iWidth
32514>>>>>>>        
32514>>>>>>>        Send OnCreate
32515>>>>>>>        
32515>>>>>>>    End_Procedure
32516>>>>>>>    
32516>>>>>>>    Procedure RegisterStatusPaneObject Handle[] ByRef hoPanes
32518>>>>>>>        Move Self to hoPanes[SizeOfArray(hoPanes)]
32519>>>>>>>    End_Procedure
32520>>>>>>>    
32520>>>>>>>    // auto assign an Id for the status bar. Called in end_construct_object if needed
32520>>>>>>>    Function AssignStatusBarID Returns Integer
32522>>>>>>>        Integer iId
32522>>>>>>>        Get piStatusBarId  to iId
32523>>>>>>>        Set piStatusBarId to (iId + 1)
32524>>>>>>>        Function_Return iId
32525>>>>>>>    End_Function
32526>>>>>>>    
32526>>>>>>>    Procedure OnCreate
32528>>>>>>>    End_Procedure
32529>>>>>>>    
32529>>>>>>>    Procedure OnClick
32531>>>>>>>    End_Procedure
32532>>>>>>>    
32532>>>>>>>    Procedure OnDblClick
32534>>>>>>>    End_Procedure
32535>>>>>>>    
32535>>>>>>>    Procedure End_Construct_Object
32537>>>>>>>        Integer iID
32537>>>>>>>        Get piId to iID
32538>>>>>>>        If (iID=sbpIDAutoAssign) Begin
32540>>>>>>>            Get AssignStatusBarID to iID
32541>>>>>>>            Set piId to iID
32542>>>>>>>        End
32542>>>>>>>>
32542>>>>>>>        Forward Send End_Construct_Object
32544>>>>>>>    End_Procedure
32545>>>>>>>    
32545>>>>>>>End_Class
32546>>>>>>>
32546>>>>>Use LanguageText.pkg
32546>>>>>
32546>>>>>
32546>>>>>Class cCJUndoMenuItem is a cCJMenuItem
32547>>>>>    
32547>>>>>    Procedure Construct_Object
32549>>>>>        Forward Send Construct_Object
32551>>>>>        Set psCaption   to C_$CaptionUndo
32552>>>>>        Set psToolTip to C_$ToolTipUndo
32553>>>>>        Set psDescription to C_$DescUndo
32554>>>>>        Set psImage to "ActionUndo.ico"
32555>>>>>        Set pbActiveUpdate to True
32556>>>>>        Set psCategory to C_$CategoryEdit
32557>>>>>        Set psShortcut to C_$Key_Ctrl_Z
32558>>>>>    End_Procedure
32559>>>>>    
32559>>>>>    Procedure OnExecute Variant vCommandBarControl
32561>>>>>        Send Undo of (focus(Self))
32562>>>>>    End_Procedure
32563>>>>>    
32563>>>>>    Function IsEnabled Returns Boolean
32565>>>>>        Boolean bEnabled
32565>>>>>        Get CanUndo of (Focus(Self)) to bEnabled
32566>>>>>        Function_Return bEnabled
32567>>>>>    End_Function
32568>>>>>    
32568>>>>>End_Class
32569>>>>>
32569>>>>>
32569>>>>>Class cCJDeleteEditMenuItem is a cCJMenuItem
32570>>>>>    
32570>>>>>    Procedure Construct_Object
32572>>>>>        Forward Send Construct_Object
32574>>>>>        Set psCaption   to C_$CaptionDelete
32575>>>>>        Set psToolTip to C_$ToolTipDelete
32576>>>>>        Set psDescription to C_$DescDelete
32577>>>>>        Set psImage to "actionDelete.ico"
32578>>>>>        Set psShortcut to C_$Key_Delete
32579>>>>>        Set pbActiveUpdate to True
32580>>>>>        Set psCategory to C_$CategoryEdit
32581>>>>>    End_Procedure
32582>>>>>    
32582>>>>>    
32582>>>>>    Procedure OnExecute Variant vCommandBarControl
32584>>>>>        Send Delete of (focus(Self))
32585>>>>>    End_Procedure
32586>>>>>    
32586>>>>>    Function IsEnabled Returns Boolean
32588>>>>>        Boolean bEnabled
32588>>>>>        Get CanDelete of (Focus(Self)) to bEnabled
32589>>>>>        Function_Return bEnabled
32590>>>>>    End_Function
32591>>>>>    
32591>>>>>End_Class
32592>>>>>
32592>>>>>
32592>>>>>Class cCJCutMenuItem is a cCJMenuItem
32593>>>>>    
32593>>>>>    Procedure Construct_Object
32595>>>>>        Forward Send Construct_Object
32597>>>>>        Set psCaption   to C_$CaptionCut
32598>>>>>        Set psToolTip to C_$TooltipCut
32599>>>>>        Set psDescription to C_$DescCut
32600>>>>>        Set psImage to "actionCut.ico"
32601>>>>>        Set psShortcut to C_$Key_Ctrl_X
32602>>>>>        Set pbActiveUpdate to True
32603>>>>>        Set psCategory to C_$CategoryEdit
32604>>>>>    End_Procedure
32605>>>>>    
32605>>>>>    
32605>>>>>    Procedure OnExecute Variant vCommandBarControl
32607>>>>>        Send Cut of (focus(Self))
32608>>>>>    End_Procedure
32609>>>>>    
32609>>>>>    Function IsEnabled Returns Boolean
32611>>>>>        Boolean bEnabled
32611>>>>>        Get CanCut of (Focus(Self)) to bEnabled
32612>>>>>        Function_Return bEnabled
32613>>>>>    End_Function
32614>>>>>    
32614>>>>>End_Class
32615>>>>>
32615>>>>>
32615>>>>>Class cCJCopyMenuItem is a cCJMenuItem
32616>>>>>    
32616>>>>>    Procedure Construct_Object
32618>>>>>        Forward Send Construct_Object
32620>>>>>        Set psCaption   to C_$CaptionCopy
32621>>>>>        Set psToolTip to C_$ToolTipCopy
32622>>>>>        Set psDescription to C_$DescCopy
32623>>>>>        Set psImage to "actionCopy.ico"
32624>>>>>        Set psShortcut to C_$Key_Ctrl_C
32625>>>>>        Set pbActiveUpdate to True
32626>>>>>        Set psCategory to C_$CategoryEdit
32627>>>>>    End_Procedure
32628>>>>>    
32628>>>>>    
32628>>>>>    Procedure OnExecute Variant vCommandBarControl
32630>>>>>        Send Copy of (focus(Self))
32631>>>>>    End_Procedure
32632>>>>>    
32632>>>>>    Function IsEnabled Returns Boolean
32634>>>>>        Boolean bEnabled
32634>>>>>        Get CanCopy of (Focus(Self)) to bEnabled
32635>>>>>        Function_Return bEnabled
32636>>>>>    End_Function
32637>>>>>    
32637>>>>>End_Class
32638>>>>>
32638>>>>>
32638>>>>>Class cCJPasteMenuItem is a cCJMenuItem
32639>>>>>    
32639>>>>>    Procedure Construct_Object
32641>>>>>        Forward Send Construct_Object
32643>>>>>        Set psCaption   to C_$CaptionPaste
32644>>>>>        Set psToolTip to C_$ToolTipPaste
32645>>>>>        Set psDescription to C_$DescPaste
32646>>>>>        Set psImage to "actionPaste.ico"
32647>>>>>        Set pbActiveUpdate to True
32648>>>>>        Set psShortcut to C_$Key_Ctrl_V
32649>>>>>        Set psCategory to C_$CategoryEdit
32650>>>>>    End_Procedure
32651>>>>>    
32651>>>>>    
32651>>>>>    Procedure OnExecute Variant vCommandBarControl
32653>>>>>        Send Paste of (focus(Self))
32654>>>>>    End_Procedure
32655>>>>>    
32655>>>>>    Function IsEnabled Returns Boolean
32657>>>>>        Boolean bEnabled
32657>>>>>        Get CanPaste of (Focus(Self)) to bEnabled
32658>>>>>        Function_Return bEnabled
32659>>>>>    End_Function
32660>>>>>    
32660>>>>>End_Class
32661>>>>>
32661>>>>>Class cCJSelectAllMenuItem is a cCJMenuItem
32662>>>>>    
32662>>>>>    Procedure Construct_Object
32664>>>>>        Forward Send Construct_Object
32666>>>>>        Set psCaption   to C_$CaptionSelectAll
32667>>>>>        Set psToolTip to C_$ToolTipSelectAll
32668>>>>>        Set psDescription to C_$DescSelectAll
32669>>>>>        Set pbActiveUpdate to True
32670>>>>>        Set psShortcut to C_$Key_Ctrl_A
32671>>>>>        Set psCategory to C_$CategoryEdit
32672>>>>>    End_Procedure
32673>>>>>    
32673>>>>>    
32673>>>>>    Procedure OnExecute Variant vCommandBarControl
32675>>>>>        Send Select_All of (focus(Self))
32676>>>>>    End_Procedure
32677>>>>>    
32677>>>>>    Function IsEnabled Returns Boolean
32679>>>>>        Boolean bEnabled
32679>>>>>        Get CanSelect of (Focus(Self)) to bEnabled
32680>>>>>        Function_Return bEnabled
32681>>>>>    End_Function
32682>>>>>    
32682>>>>>End_Class
32683>>>>>
32683>>>>>
32683>>>>>Class cCJExitMenuItem is a cCJMenuItem
32684>>>>>    
32684>>>>>    Procedure Construct_Object
32686>>>>>        Forward Send Construct_Object
32688>>>>>        Set psCaption to C_$CaptionExit
32689>>>>>        Set psToolTip to C_$ToolTipExit
32690>>>>>        Set psDescription to C_$ToolTipExit
32691>>>>>        Set psShortcut to C_$Key_Alt_F4
32692>>>>>        Set psCategory to C_$CategoryFile
32693>>>>>    End_Procedure
32694>>>>>    
32694>>>>>    Procedure OnExecute Variant vCommandBarControl
32696>>>>>        Send Exit_Application of Desktop
32697>>>>>    End_Procedure
32698>>>>>    
32698>>>>>End_Class
32699>>>>>
32699>>>>>Class cCJHelpMenuItem is a cCJMenuItem
32700>>>>>    
32700>>>>>    Procedure Construct_Object
32702>>>>>        Forward Send Construct_Object
32704>>>>>        Set psCaption to C_$CaptionHelp
32705>>>>>        Set psDescription to C_$ToolTipHelp
32706>>>>>        Set psToolTip to C_$DescHelp
32707>>>>>        Set psImage to "ActionHelp.ico"
32708>>>>>        Set psShortcut to "F1"
32709>>>>>        Set psCategory to C_$CategoryHelp
32710>>>>>    End_Procedure
32711>>>>>    
32711>>>>>    Procedure OnExecute Variant vCommandBarControl
32713>>>>>        Send Help of (Focus(Self))
32714>>>>>    End_Procedure
32715>>>>>    
32715>>>>>End_Class
32716>>>>>
32716>>>>>Class cCJStatusbarMenuItem is a cCJMenuItem
32717>>>>>    
32717>>>>>    Procedure Construct_Object
32719>>>>>        Forward Send Construct_Object
32721>>>>>        Set psCaption to C_$CaptionAddStatusbar
32722>>>>>        Set psToolTip to C_$ToolTipAddStatusbar
32723>>>>>        Set psDescription to  C_$DescAddStatusbar
32724>>>>>        Set psCategory to C_$CategoryWindow
32725>>>>>    End_Procedure
32726>>>>>    
32726>>>>>    Procedure OnExecute Variant vCommandBarControl
32728>>>>>        Handle hoCommandBars hoClientArea
32728>>>>>        Get CommandBarSystemObject to hoCommandBars
32729>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32730>>>>>        If hoClientArea Begin
32732>>>>>            // the clientarea's parent panel has message
32732>>>>>            Send Toggle_StatusBar of (Parent(hoClientArea))
32733>>>>>        End
32733>>>>>>
32733>>>>>    End_Procedure
32734>>>>>    
32734>>>>>    Function IsChecked Returns Boolean
32736>>>>>        Boolean bOn
32736>>>>>        Handle hoCommandBars hoClientArea
32736>>>>>        Get CommandBarSystemObject to hoCommandBars
32737>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32738>>>>>        If hoClientArea Begin
32740>>>>>            // the clientarea's parent panel has message
32740>>>>>            Get StatusBar_State of (Parent(hoClientArea)) to bOn
32741>>>>>        End
32741>>>>>>
32741>>>>>        Function_Return bOn
32742>>>>>    End_Function
32743>>>>>End_Class
32744>>>>>
32744>>>>>Class cCJAutoArrangeIconsMenuItem is a cCJMenuItem
32745>>>>>    
32745>>>>>    Procedure Construct_Object
32747>>>>>        Forward Send Construct_Object
32749>>>>>        Set psCaption to C_$CaptionAutoArrangeIcons
32750>>>>>        Set psToolTip to C_$ToolTipAutoArrangeIcons
32751>>>>>        Set psDescription to C_$DescAutoArrangeIcons
32752>>>>>        Set psCategory to C_$CategoryWindow
32753>>>>>    End_Procedure
32754>>>>>    
32754>>>>>    Procedure OnExecute Variant vCommandBarControl
32756>>>>>        Handle hoCommandBars hoClientArea
32756>>>>>        Get CommandBarSystemObject to hoCommandBars
32757>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32758>>>>>        If hoClientArea Begin
32760>>>>>            // the clientarea's parent panel has message
32760>>>>>            Send Toggle_Auto_Arrange_Icons of (Parent(hoClientArea))
32761>>>>>        End
32761>>>>>>
32761>>>>>    End_Procedure
32762>>>>>    
32762>>>>>    Function IsChecked Returns Boolean
32764>>>>>        Boolean bOn
32764>>>>>        Handle hoCommandBars hoClientArea
32764>>>>>        Get CommandBarSystemObject to hoCommandBars
32765>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32766>>>>>        If hoClientArea Begin
32768>>>>>            // the clientarea's parent panel has message
32768>>>>>            Get Auto_Arrange_Icons_State of (Parent(hoClientArea)) to bOn
32769>>>>>        End
32769>>>>>>
32769>>>>>        Function_Return bOn
32770>>>>>    End_Function
32771>>>>>End_Class
32772>>>>>
32772>>>>>Class cCJRestoreMenusMenuItem is a cCJMenuItem
32773>>>>>    
32773>>>>>    Procedure Construct_Object
32775>>>>>        Forward Send Construct_Object
32777>>>>>        Set psCaption to C_$CaptionRestoreMenus
32778>>>>>        Set psToolTip to C_$ToolTipRestoreMenus
32779>>>>>        Set psDescription to C_$DescRestoreMenus
32780>>>>>        Set psCategory to C_$CategoryWindow
32781>>>>>    End_Procedure
32782>>>>>    
32782>>>>>    Procedure OnExecute Variant vCommandBarControl
32784>>>>>        Handle hoCommandBars
32784>>>>>        Get CommandBarSystemObject to hoCommandBars
32785>>>>>        Send RestoreLayout of hoCommandBars
32786>>>>>    End_Procedure
32787>>>>>    
32787>>>>>End_Class
32788>>>>>
32788>>>>>Class cCJCascadeMenuItem is a cCJMenuItem
32789>>>>>    
32789>>>>>    Procedure Construct_Object
32791>>>>>        Forward Send Construct_Object
32793>>>>>        Set psCaption to C_$CaptionCascade
32794>>>>>        Set psToolTip to C_$ToolTipCascade
32795>>>>>        Set psDescription to  C_$DescCascade
32796>>>>>        Set psImage to "ActionCascade.ico"
32797>>>>>        Set psCategory to C_$CategoryWindow
32798>>>>>    End_Procedure
32799>>>>>    
32799>>>>>    Procedure OnExecute Variant vCommandBarControl
32801>>>>>        Handle hoCommandBars hoClientArea
32801>>>>>        Get CommandBarSystemObject to hoCommandBars
32802>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32803>>>>>        If hoClientArea Begin
32805>>>>>            Send Cascade_Windows of hoClientArea
32806>>>>>        End
32806>>>>>>
32806>>>>>    End_Procedure
32807>>>>>End_Class
32808>>>>>
32808>>>>>Class cCJTileHorizontally is a cCJMenuItem
32809>>>>>    
32809>>>>>    Procedure Construct_Object
32811>>>>>        Forward Send Construct_Object
32813>>>>>        Set psCaption to C_$CaptionTileHorizontally
32814>>>>>        Set psToolTip to C_$ToolTipTileHorizontally
32815>>>>>        Set psDescription to  C_$DescTileHorizontally
32816>>>>>        Set psImage to "ActionTileHorizontally.ico"
32817>>>>>        Set psCategory to C_$CategoryWindow
32818>>>>>    End_Procedure
32819>>>>>    
32819>>>>>    Procedure OnExecute Variant vCommandBarControl
32821>>>>>        Handle hoCommandBars hoClientArea
32821>>>>>        Get CommandBarSystemObject to hoCommandBars
32822>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32823>>>>>        If hoClientArea Begin
32825>>>>>            Send Tile_Windows_Horizontal of hoClientArea
32826>>>>>        End
32826>>>>>>
32826>>>>>    End_Procedure
32827>>>>>End_Class
32828>>>>>
32828>>>>>Class cCJTileVertically is a cCJMenuItem
32829>>>>>    
32829>>>>>    Procedure Construct_Object
32831>>>>>        Forward Send Construct_Object
32833>>>>>        Set psCaption to C_$CaptionTileVertically
32834>>>>>        Set psToolTip to C_$ToolTipTileVertically
32835>>>>>        Set psDescription to  C_$DescTileVertically
32836>>>>>        Set psImage to "ActionTileVertically.ico"
32837>>>>>        Set psCategory to C_$CategoryWindow
32838>>>>>    End_Procedure
32839>>>>>    
32839>>>>>    Procedure OnExecute Variant vCommandBarControl
32841>>>>>        Handle hoCommandBars hoClientArea
32841>>>>>        Get CommandBarSystemObject to hoCommandBars
32842>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32843>>>>>        If hoClientArea Begin
32845>>>>>            Send Tile_Windows_Vertical of hoClientArea
32846>>>>>        End
32846>>>>>>
32846>>>>>    End_Procedure
32847>>>>>End_Class
32848>>>>>
32848>>>>>Class cCJMinimizeWindowsMenuItem is a cCJMenuItem
32849>>>>>    
32849>>>>>    Procedure Construct_Object
32851>>>>>        Forward Send Construct_Object
32853>>>>>        Set psCaption to C_$CaptionMinimizeWindows
32854>>>>>        Set psToolTip to C_$ToolTipMinimizeWindows
32855>>>>>        Set psDescription to  C_$DescMinimizeWindows
32856>>>>>        Set psCategory to C_$CategoryWindow
32857>>>>>    End_Procedure
32858>>>>>    
32858>>>>>    Procedure OnExecute Variant vCommandBarControl
32860>>>>>        Handle hoCommandBars hoClientArea
32860>>>>>        Get CommandBarSystemObject to hoCommandBars
32861>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32862>>>>>        If hoClientArea Begin
32864>>>>>            // the clientarea's parent panel has message
32864>>>>>            Send Minimize_all_Windows of (Parent(hoClientArea))
32865>>>>>        End
32865>>>>>>
32865>>>>>    End_Procedure
32866>>>>>End_Class
32867>>>>>
32867>>>>>
32867>>>>>Class cCJRestoreWindowsMenuItem is a cCJMenuItem
32868>>>>>    
32868>>>>>    Procedure Construct_Object
32870>>>>>        Forward Send Construct_Object
32872>>>>>        Set psCaption to C_$CaptionRestoreWindows
32873>>>>>        Set psToolTip to C_$ToolTipRestoreWindows
32874>>>>>        Set psDescription to  C_$DescRestoreWindows
32875>>>>>        Set psCategory to C_$CategoryWindow
32876>>>>>    End_Procedure
32877>>>>>    
32877>>>>>    Procedure OnExecute Variant vCommandBarControl
32879>>>>>        Handle hoCommandBars hoClientArea
32879>>>>>        Get CommandBarSystemObject to hoCommandBars
32880>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32881>>>>>        If hoClientArea Begin
32883>>>>>            // the clientarea's parent panel has message
32883>>>>>            Send Restore_all_Windows of (Parent(hoClientArea))
32884>>>>>        End
32884>>>>>>
32884>>>>>    End_Procedure
32885>>>>>End_Class
32886>>>>>
32886>>>>>Class cCJArrangeIconsMenuItem is a cCJMenuItem
32887>>>>>    
32887>>>>>    Procedure Construct_Object
32889>>>>>        Forward Send Construct_Object
32891>>>>>        Set psCaption to C_$CaptionArrangeIcons
32892>>>>>        Set psToolTip to C_$ToolTipArrangeIcons
32893>>>>>        Set psDescription to  C_$DescArrangeIcons
32894>>>>>        Set psCategory to C_$CategoryWindow
32895>>>>>    End_Procedure
32896>>>>>    
32896>>>>>    Procedure OnExecute Variant vCommandBarControl
32898>>>>>        Handle hoCommandBars hoClientArea
32898>>>>>        Get CommandBarSystemObject to hoCommandBars
32899>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32900>>>>>        If hoClientArea Begin
32902>>>>>            Send Arrange_Icons of hoClientArea
32903>>>>>        End
32903>>>>>>
32903>>>>>    End_Procedure
32904>>>>>    
32904>>>>>End_Class
32905>>>
32905>>>Object oEditContextMenu is a cCJContextMenu
32907>>>    
32907>>>    Move Self to Default_Form_Floating_Menu_ID
32908>>>    
32908>>>    Object oUndoMenuItem is a cCJUndoMenuItem
32910>>>    End_Object
32911>>>    
32911>>>    Object oCutMenuItem is a cCJCutMenuItem
32913>>>        Set pbControlBeginGroup to True
32914>>>    End_Object
32915>>>    
32915>>>    Object oCopyMenuItem is a cCJCopyMenuItem
32917>>>    End_Object
32918>>>
32918>>>    Object oPasteMenuItem is a cCJPasteMenuItem
32920>>>    End_Object
32921>>>
32921>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
32923>>>    End_Object
32924>>>
32924>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
32926>>>        Set pbControlBeginGroup to True
32927>>>    End_Object
32928>>>
32928>>>End_Object
32929>>>
32929>Use cDbUpdateFunctionLibrary.pkg
Including file: cDbUpdateFunctionLibrary.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cDbUpdateFunctionLibrary.pkg)
32929>>>//****************************************************************************
32929>>>// $Module type: Class
32929>>>// $Module name: cDbUpdateFunctionLibrary
32929>>>// $Author     : Nils G. Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
32929>>>// Web-site    : http://www.rdctools.com
32929>>>// Created     : 2014-09-05 @ 09:50 (Military date format: YY-MM-DD)
32929>>>//
32929>>>// Description : The class consists of a function library for database manipulations, aka make changes to a database.
32929>>>//               It has top level functions that uses the DataFlex db API, _but_ also specialized
32929>>>//               functions to make db changes to Sql databases with the DAW & Mertech drivers,
32929>>>//               with the help of Sql-scripts.
32929>>>//
32929>>>// $Rev History:
32929>>>//    2014-09-05  Module header created
32929>>>//
32929>>>//****************************************************************************
32929>>>Use cApplication.pkg
32929>>>Use seq_chnl.pkg
32929>>>Use GlobalFunctionsProcedures.pkg
32929>>>Use Datadict.pkg                        // Declaration of DF_FILE_SQL_TABLE_NAME
Including file: Datadict.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Datadict.pkg)
32929>>>>>Use VDFBase.pkg
32929>>>>>Use LanguageText.pkg // language support VDF pkg replacement strings
32929>>>>>
32929>>>>>Register_Procedure File_Field_Value_Changed
32929>>>>>Register_Procedure File_Field_Mask_Changed
32929>>>>>Register_Procedure File_Field_Label_Changed
32929>>>>>Register_Procedure File_Field_Option_Changed
32929>>>>>Register_Function  Extended_DEO_State Returns Integer
32929>>>>>Register_Function  Entry_Refresh_State Returns Integer
32929>>>>>Register_Procedure Set Entry_Refresh_State Integer iState
32929>>>>>Register_Function  Allow_Foreign_New_Save_State Returns Integer
32929>>>>>Register_Function  Server Returns Integer
32929>>>>>
32929>>>>>Use Data_Set.pkg
Including file: Data_set.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Data_set.pkg)
32929>>>>>>>Use VDFBase.pkg
32929>>>>>>>Use fndmodes.pkg
Including file: fndmodes.pkg    (C:\Program Files\DataFlex 20.1\Pkg\fndmodes.pkg)
32929>>>>>>>>>//
32929>>>>>>>>>// special find modes
32929>>>>>>>>>//
32929>>>>>>>>>Define NEXT_RECORD  for 5 // find-next
32929>>>>>>>>>Define FIRST_RECORD for 6 // find-first
32929>>>>>>>>>Define LAST_RECORD  for 7 // find-last 
32929>>>>>>>Use refmodes.pkg
Including file: refmodes.pkg    (C:\Program Files\DataFlex 20.1\Pkg\refmodes.pkg)
32929>>>>>>>>>//
32929>>>>>>>>>// constants for REFRESH message parameter values
32929>>>>>>>>>//
32929>>>>>>>>>Define MODE_CLEAR             for 1  //notification from origin of clear
32929>>>>>>>>>Define MODE_FIND_OR_CLEAR_SET for 2  //notification from find or clear
32929>>>>>>>>>Define MODE_CLEAR_ALL         for 3  //notification from clear-all
32929>>>>>>>>>Define MODE_DELETE            for 4  //notification after successful delete
32929>>>>>>>>>Define MODE_SAVE              for 5  //notification after successful save
32929>>>>>>>>>
32929>>>>>>>
32929>>>>>>>
32929>>>>>>>//
32929>>>>>>>//Global integer status values
32929>>>>>>>//
32929>>>>>>>Define OPERATION_MODE   for |VI99  //status of data-sets in application
32929>>>>>>>Define OPERATION_ORIGIN for |VI108 //origin of current of data-set operation
32929>>>>>>>
32929>>>>>>>//
32929>>>>>>>//Constants for Operation_Mode global int values
32929>>>>>>>//
32929>>>>>>>Define MODE_WAITING  for 0  //wait-mode
32929>>>>>>>Define MODE_FINDING  for 1  //find-mode
32929>>>>>>>Define MODE_CLEARING for 2  //clear-mode
32929>>>>>>>Define MODE_CREATING for 3  //create-mode
32929>>>>>>>Define MODE_SAVING   for 4  //save-mode
32929>>>>>>>Define MODE_DELETING for 5  //delete-mode
32929>>>>>>>Define MODE_ABORTING for 6  //abort-mode
32929>>>>>>>Define MODE_VALIDATING for 7  //request_validate-mode : added for VDF7
32929>>>>>>>Define MODE_CLEARINGALL for 8 //clear-all mode (added in VDF8)
32929>>>>>>>
32929>>>>>>>//   The Data_Set class is implemented as a subclass of Entry_Client, with
32929>>>>>>>//   a C language handler providing the majority of new behavior.  The
32929>>>>>>>//   Data_Set class is intended to be a grouping agent for data-entry objects
32929>>>>>>>//   and a container for subordinate Data_Sets.
32929>>>>>>>//
32929>>>>>>>Use BaseData_Set.pkg
32929>>>>>>>
32929>>>>>>>// Data_Set class definition, public class layer. (Extra class layer needed
32929>>>>>>>// to augment C-based (Constrain) procedure(s).)
32929>>>>>>>
32929>>>>>>>Class DataSet is a BaseData_Set
32930>>>>>>>    
32930>>>>>>>    
32930>>>>>>>    // maintain old name for the time being to maximize compatability
32930>>>>>>>    // between character mode and windows versions. Developers should be
32930>>>>>>>    // able to move DS classes back and forth without changes.
32930>>>>>>>    Replace_Class_Name Data_Set DataSet
32930>>>>>>>    
32930>>>>>>>    Procedure Construct_Object //Integer Img#
32932>>>>>>>        Forward Send Construct_Object No_Image //Img#
32934>>>>>>>        
32934>>>>>>>        Property Integer Constrain_File 0
32935>>>>>>>        Property Integer Auto_Fill_State False
32936>>>>>>>        Property Integer Change_Disabled_State  False
32937>>>>>>>        // RT sets this inside of Mark_components a part of old entry_client DSO behavior. Now it is never used
32937>>>>>>>        Property Integer Component_State False
32938>>>>>>>        
32938>>>>>>>    End_Procedure
32939>>>>>>>    
32939>>>>>>>    
32939>>>>>>>    //
32939>>>>>>>    // This may be called by legacy DSO and DDO code
32939>>>>>>>    //
32939>>>>>>>    // IMPORTANT NOTE of change for 8.2:
32939>>>>>>>    //         DO NOT call or augment this anymore.
32939>>>>>>>    //
32939>>>>>>>    //         for sending: Find all cases of Field_main_index and change it to File_Field_Index
32939>>>>>>>    //
32939>>>>>>>    //         for augmenting: In DSOs - replace Field_main_index with File_field_index
32939>>>>>>>    //                         In DDOs - replace Field_main_Index with Field_Index and do not pass
32939>>>>>>>    //                                   the file parameter.
32939>>>>>>>    //                                   See DDOs Field_index and File_field_Index for more
32939>>>>>>>    //
32939>>>>>>>    Function Field_Main_Index Integer file Integer Field Returns Integer
32941>>>>>>>        Integer dataType fldNdx retval ordr
32941>>>>>>>        Move -1 to retval      //field has no main index (default)
32942>>>>>>>        If (file <> 0) Begin
32944>>>>>>>//      FIELD_DEF file field to dataType fldNdx
32944>>>>>>>            Get_Attribute DF_FIELD_INDEX of file Field to fldNdx // main index field
32947>>>>>>>            If (fldNdx > 0 or Field = 0) ;                Move fldNdx to retval //field has main index
32950>>>>>>>        End
32950>>>>>>>>
32950>>>>>>>        If (file = main_file(Self)) Begin
32952>>>>>>>            Get ordering to ordr
32953>>>>>>>            If (ordr >= 0) ;                Move ordr to retval  //ordering takes precedence over main index
32956>>>>>>>        End
32956>>>>>>>>
32956>>>>>>>        Function_Return retval
32957>>>>>>>    End_Function
32958>>>>>>>    
32958>>>>>>>    // This allows packages that still use data-sets instead of DDOs to use this
32958>>>>>>>    // message syntax.
32958>>>>>>>    // Note that this will never get here if the DD class is used as
32958>>>>>>>    // it has its own handler for this. It only is called if DSOs are used in which
32958>>>>>>>    // case it calls the old message field_main_index above.
32958>>>>>>>    // DDO based objects will NEVER call this code
32958>>>>>>>    //
32958>>>>>>>    Function File_Field_Index Integer iFile Integer iField Returns Integer
32960>>>>>>>        Function_Return (Field_main_Index(Self,iFile,iField))
32961>>>>>>>    End_Function
32962>>>>>>>    
32962>>>>>>>    
32962>>>>>>>    Procedure Item_Find Integer eFindMode ;            Integer iFile Integer iField ;            Integer bDoEntryUpdate Integer bShowFindErr Integer bDeferred
32964>>>>>>>        
32964>>>>>>>        RowID   riRow
32964>>>>>>>        Integer iIndex
32964>>>>>>>        Handle  hoServer
32964>>>>>>>        Integer iSegments iSeg iSegFld iSegFldMainIndex
32964>>>>>>>        Boolean bChanged bDoCheck bOk
32964>>>>>>>        
32964>>>>>>>        //Get Field_Main_Index iFile iField to iIndex
32964>>>>>>>        Get File_Field_Index iFile iField to iIndex
32965>>>>>>>        If (iIndex<>-1) Begin
32967>>>>>>>            // get prior rowId before it get cleared
32967>>>>>>>            Move (GetRowID(iFile)) to riRow
32968>>>>>>>            //  'hold' buffer to prepare for entry_update
32968>>>>>>>            Set_Attribute DF_FILE_STATUS of iFile to DF_FILE_INACTIVE
32971>>>>>>>            If bDoEntryUpdate Begin
32973>>>>>>>                Send Request_Entry_Update iFile 1  //entUpdt all DEOs as required
32974>>>>>>>                
32974>>>>>>>                // If the buffer is cleared (no record and no changed data) then we want
32974>>>>>>>                // to do a constrained_clear which will force the buffer to get cleared
32974>>>>>>>                // according to the rules of the current constraints.
32974>>>>>>>                //Get_field_value iFile 0 to iRec
32974>>>>>>>                //Move (GetRowID(iFile)) to riRow // 12.1 moved above the set file inactive
32974>>>>>>>                
32974>>>>>>>                // If there was an active record to begin with we consider this changed (not cleared)
32974>>>>>>>                If (not(IsNullRowId(riRow))) Begin
32976>>>>>>>                    Move True to bChanged
32977>>>>>>>                End
32977>>>>>>>>
32977>>>>>>>                Else Begin
32978>>>>>>>                    // or, if the record was already changed or the entry_update created a change
32978>>>>>>>                    // we consider this changed
32978>>>>>>>                    Get_Attribute DF_FILE_CHANGED of iFile to bChanged
32981>>>>>>>                End
32981>>>>>>>>
32981>>>>>>>                
32981>>>>>>>                If not bChanged Begin
32983>>>>>>>                    // if buffer is unchanged, do a constrained clear. It is unchanged if there was not
32983>>>>>>>                    // active record, the record was unchanged, and the update didn't change anything.
32983>>>>>>>                    Constrained_Clear eFindMode iFile by iIndex
32986>>>>>>>                End
32986>>>>>>>>
32986>>>>>>>                Else If (eFindMode=GE or eFindMode=LE and iIndex>0) Begin
32989>>>>>>>                    
32989>>>>>>>                    // If mode is GE or LE we need to do some extra processing. We want to clear
32989>>>>>>>                    // all index segemnt fields that occur after this field in the index. This way
32989>>>>>>>                    // dbList searches and find ge searches (f9) will always find the first record
32989>>>>>>>                    // that matches the data in the field being searched. This was if an index like
32989>>>>>>>                    // customer.name x customer.number where you had 10 identical names "john" typing
32989>>>>>>>                    // john will find the first record, because customer.number will get cleared.
32989>>>>>>>                    // Note we can no do this with GT or LT or you'd get stuck in fields
32989>>>>>>>                    
32989>>>>>>>                    // check all fields for index. Once you find the iField field, clear all
32989>>>>>>>                    // fields that follow it. Only do this if the other fields do not use the
32989>>>>>>>                    // same index as its primary index (in which case we assume the data is intentional).
32989>>>>>>>                    // This should handle most cases.
32989>>>>>>>                    Get_Attribute DF_INDEX_NUMBER_SEGMENTS of iFile iIndex to iSegments
32992>>>>>>>                    For iSeg from 1 to iSegments
32998>>>>>>>>
32998>>>>>>>                        Get_Attribute DF_INDEX_SEGMENT_FIELD of iFile iIndex iSeg to iSegFld
33001>>>>>>>                        If not bDoCheck Begin
33003>>>>>>>                            If (iSegFld=iField) ;                                Move True to bDoCheck // marked after we find the find field in the index
33006>>>>>>>                        End
33006>>>>>>>>
33006>>>>>>>                        Else Begin // we get here after we've found the main field segment
33007>>>>>>>                            // if main index if this segment is same as our find index, do nothing
33007>>>>>>>                            Get File_Field_Index iFile iSegFld to iSegFldMainIndex
33008>>>>>>>                            If (iSegFldMainIndex<>iIndex) ;                                Set_Field_Value iFile iSegFld to ''
33013>>>>>>>                        End
33013>>>>>>>>
33013>>>>>>>                    Loop
33014>>>>>>>>
33014>>>>>>>                End
33014>>>>>>>>
33014>>>>>>>                
33014>>>>>>>                Get Which_Data_Set iFile to hoServer
33015>>>>>>>                If (hoServer and iFile=main_file(hoServer)) ;                    Send Attach_Main_File to hoServer
33018>>>>>>>                Else ;                    Attach iFile
33020>>>>>>>            End
33020>>>>>>>>
33020>>>>>>>            
33020>>>>>>>            Move False to Err
33021>>>>>>>            
33021>>>>>>>            If (Is_SuperFind_Required(Self,iFile)) ;                Send Request_SuperFind eFindMode iFile iField
33024>>>>>>>            Else If bDeferred ;                Send Request_Read eFindMode iFile iIndex
33028>>>>>>>            Else ;                Send Request_Find eFindMode iFile iIndex
33030>>>>>>>            
33030>>>>>>>            If (not(Found) and not(err)) Begin
33032>>>>>>>                // refind original record (or leave it cleared if not record)
33032>>>>>>>                Move (FindByRowId(iFile,riRow)) to bOk
33033>>>>>>>                
33033>>>>>>>                If bShowFindErr ;                    Error (If(eFindMode<2, DFERR_FIND_PRIOR_BEG_OF_FILE, DFERR_FIND_PAST_END_OF_FILE))
33036>>>>>>>                Move False to Found
33037>>>>>>>            End
33037>>>>>>>>
33037>>>>>>>        End
33037>>>>>>>>
33037>>>>>>>        Else ;            If bShowFindErr ;                Error DFERR_FIELD_NOT_INDEXED
33041>>>>>>>    End_Procedure
33042>>>>>>>    
33042>>>>>>>    
33042>>>>>>>    // We only care about should_saves of DEOs and not DSOs when
33042>>>>>>>    // exiting the app. Create a handler for data set class. We still
33042>>>>>>>    // broadcast in case we've got nested deos in the dso (hopefully not).
33042>>>>>>>    //
33042>>>>>>>    Function Exit_Application_Check Returns Integer
33044>>>>>>>        Integer rVal
33044>>>>>>>        Broadcast Get Exit_Application_Check to Rval // check w/ kids
33046>>>>>>>        Function_Return rVal
33047>>>>>>>    End_Function
33048>>>>>>>    
33048>>>>>>>    Procedure Constrain
33050>>>>>>>        Integer iFile
33050>>>>>>>        Send OnConstrain
33051>>>>>>>        Forward Send Constrain
33053>>>>>>>        Get Constrain_File to iFile
33054>>>>>>>        If iFile ;            Constrain (Main_file(Self)) relates to iFile
33057>>>>>>>    End_Procedure
33058>>>>>>>    
33058>>>>>>>    Procedure OnConstrain
33060>>>>>>>    End_Procedure
33061>>>>>>>    
33061>>>>>>>    // Less confusing Message for adding Updating servers
33061>>>>>>>    //
33061>>>>>>>    Procedure Set DDO_Server Handle ObjId
33063>>>>>>>        Send Attach_Server ObjId
33064>>>>>>>    End_Procedure
33065>>>>>>>    
33065>>>>>>>    // This is called when a view takes or retakes the
33065>>>>>>>    // focus. If DD not in use, do nothing.
33065>>>>>>>    //
33065>>>>>>>    Procedure Refind_DD_Records
33067>>>>>>>        If (in_use_state(Self)) ;            Send refind_records
33070>>>>>>>    End_Procedure
33071>>>>>>>    
33071>>>>>>>    // this returns true if the data-set is changed AND there are attached
33071>>>>>>>    // DEO objects. Without this you can get "changes exist" condition reported
33071>>>>>>>    // that the user will have no way of saving.
33071>>>>>>>    //
33071>>>>>>>    Function Data_Set_Should_Save Returns Integer
33073>>>>>>>        Function_Return (Should_Save(Self) and ;            Data_Set_User_interface_count(Self))
33074>>>>>>>    End_Function
33075>>>>>>>    
33075>>>>>>>    // returns 0 indicating that this is not DD enabled. DataDictionary objects will return 1.
33075>>>>>>>    // Add DSOs and DDOs must understand this message
33075>>>>>>>    
33075>>>>>>>    Function Extended_DSO_State Returns Integer
33077>>>>>>>        Function_Return 0
33078>>>>>>>    End_Function
33079>>>>>>>    
33079>>>>>>>    
33079>>>>>>>End_Class
33080>>>>>>>
33080>>>>>>>
33080>>>>>>>
33080>>>>>Use DDValtbl.pkg  // validation table classes
Including file: Ddvaltbl.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Ddvaltbl.pkg)
33080>>>>>>>//  Validation Table Support for Extended Data-Sets. Fields may
33080>>>>>>>//  attached to validation tables which can then be used for
33080>>>>>>>//  validation (if Validate_state is true) or list loading.
33080>>>>>>>//  Developers can create their own validation tables as long as they
33080>>>>>>>//  conform to the following external interface:
33080>>>>>>>//
33080>>>>>>>// Properties
33080>>>>>>>//   Static_State       - if list must be rebuilt each validation, load
33080>>>>>>>//   Allow_Blank_state  - If Blank or 0 is a valid response
33080>>>>>>>//   Validate_State     - should table be used for validation
33080>>>>>>>//   Table_Loaded_State - is the validation table initialized?
33080>>>>>>>//
33080>>>>>>>// Methods
33080>>>>>>>//  Get Validate_Value sValue to iVal - if iVal=0, it is legal
33080>>>>>>>//  Send Fill_list                    - fills a static list
33080>>>>>>>//  Send Request_Fill_From_List iObject iMessage
33080>>>>>>>//        This is a callback that will fill an external list by sending
33080>>>>>>>//        the passed message (iMessage) back to the requesting object
33080>>>>>>>//        (iObject). It will send this message for each item in the
33080>>>>>>>//        validation table. It always passes back four params. Those are:
33080>>>>>>>//                     iItem - Item count being passed back
33080>>>>>>>//                     sData - The Database value of the item
33080>>>>>>>//                     sDesc - The Value's description, "" if none
33080>>>>>>>//                     iFile - File number associated with the item (if any)
33080>>>>>>>//                     iRec  - Record associated with the item (if any)
33080>>>>>>>// Developers can create classes of any complexity to support validation
33080>>>>>>>// tables. We have provided the following four classes.
33080>>>>>>>//
33080>>>>>>>//  ValidationTable is an Array
33080>>>>>>>//           Provides simple one dimensional table support. The table must be
33080>>>>>>>//           loaded manually by creating fill_list and sending the message
33080>>>>>>>//           Add_Table_Value (send Add_Table_Value Value). If list is static
33080>>>>>>>//           it is filled once. If non-static it is filled each time it is
33080>>>>>>>//           requested to validate or fill a foreign lis.
33080>>>>>>>//
33080>>>>>>>//  DescriptionValidationTable is a ValidationTable
33080>>>>>>>//           Provides a more complex three dimension array allowing the
33080>>>>>>>//           object to store a data value, description value and a record
33080>>>>>>>//           number. The developer must fill this list using the Add_table_
33080>>>>>>>//           value message passing up to three values (data, desc, record).
33080>>>>>>>//
33080>>>>>>>//  FileValidationTable is a DescriptionValidationTable
33080>>>>>>>//           Provides a data aware table. This can be used to load data from
33080>>>>>>>//           data-files, from data-sets. If you use data-sets you can place
33080>>>>>>>//           constraints within the data-set. You must define the file-number,
33080>>>>>>>//           data-set (if any), the file index, the file's data field, and
33080>>>>>>>//           the file's description field. You can also define an optional
33080>>>>>>>//           "Type". All records are constrained to this type (with or with-
33080>>>>>>>//           data-sets). If is assumed that this file has an optimized finding
33080>>>>>>>//           index.
33080>>>>>>>//
33080>>>>>>>//  CodeValidationTable is a FileValidationTable
33080>>>>>>>//           Used for Code lists. Simply set Type_Value to the "type"
33080>>>>>>>//
33080>>>>>>>Use VDFBase.pkg
33080>>>>>>>
33080>>>>>>>
33080>>>>>>>Class ValidationTable is an Array
33081>>>>>>>    
33081>>>>>>>    Procedure Construct_Object
33083>>>>>>>        Forward Send Construct_Object
33085>>>>>>>        Property Integer Static_State        True
33086>>>>>>>        
33086>>>>>>>        Property Integer Table_Loaded_State  False
33087>>>>>>>        
33087>>>>>>>        Property Integer Validate_State      True
33088>>>>>>>        Property Integer Allow_Blank_State   False
33089>>>>>>>        Property Integer Main_File           0
33090>>>>>>>        Property String  Table_Title         DD_VALIDATION_LIST_TITLE
33091>>>>>>>        
33091>>>>>>>        Property Integer Number_Elements     1
33092>>>>>>>        
33092>>>>>>>        // System maintained. Sub-classes use these
33092>>>>>>>        // These are SET by Next_Code_Record. You may GET their values
33092>>>>>>>        
33092>>>>>>>        Property String  Current_Code            ''
33093>>>>>>>        
33093>>>>>>>        Property String  Current_Description     ''
33094>>>>>>>        
33094>>>>>>>        Property RowID Current_RowId
33095>>>>>>>    End_Procedure
33096>>>>>>>    
33096>>>>>>>    Function Data_Item_Count Returns Integer
33098>>>>>>>        Function_Return (Item_Count(Self))
33099>>>>>>>    End_Function
33100>>>>>>>    
33100>>>>>>>    Function Data_Value Integer iItem Returns String
33102>>>>>>>        Function_Return (Value(Self,iItem))
33103>>>>>>>    End_Function
33104>>>>>>>    
33104>>>>>>>    Procedure Set Data_Value Integer iItem String sValue
33106>>>>>>>        Set Value  iItem to sValue
33107>>>>>>>    End_Procedure
33108>>>>>>>    
33108>>>>>>>    Function Data_Description Integer iItem Returns String
33110>>>>>>>        Function_Return ''
33111>>>>>>>    End_Function
33112>>>>>>>    
33112>>>>>>>    Procedure Set Data_Description Integer iItem String sValue
33114>>>>>>>    End_Procedure
33115>>>>>>>    
33115>>>>>>>    Function Data_RowId Integer iItem Returns RowID
33117>>>>>>>        Function_Return (NullRowId())
33118>>>>>>>    End_Function
33119>>>>>>>    
33119>>>>>>>    Procedure Set Data_RowId Integer iItem RowID riValue
33121>>>>>>>    End_Procedure
33122>>>>>>>    
33122>>>>>>>    
33122>>>>>>>    Procedure Add_Table_Value String sValue
33124>>>>>>>        Set Data_Value  (Data_Item_Count(Self)) to sValue
33125>>>>>>>    End_Procedure
33126>>>>>>>    
33126>>>>>>>    Function Validate_Value String sCode Returns Integer
33128>>>>>>>        Integer iMax
33128>>>>>>>        Integer iCnt
33128>>>>>>>        If (sCode = '');            Function_Return (not(Allow_Blank_State(Self)))
33131>>>>>>>        If (Table_Loaded_State(Self)=0 or Static_State(Self)=0) Begin
33133>>>>>>>            Send Delete_Data
33134>>>>>>>            Send Fill_list
33135>>>>>>>            Set Table_Loaded_State to True
33136>>>>>>>        End
33136>>>>>>>>
33136>>>>>>>        Get Data_Item_Count to iMax
33137>>>>>>>        Decrement iMax
33138>>>>>>>        For iCnt from 0 to iMax
33144>>>>>>>>
33144>>>>>>>            If (sCode=Data_Value(Self,iCnt)) Begin
33146>>>>>>>                Set Current_Code        to sCode
33147>>>>>>>                Set Current_Description to (Data_Description(Self,iCnt))
33148>>>>>>>                Set Current_RowId       to (Data_RowId(Self,iCnt))
33149>>>>>>>                Function_Return 0
33150>>>>>>>            End
33150>>>>>>>>
33150>>>>>>>        Loop
33151>>>>>>>>
33151>>>>>>>        Function_Return 1 // 0=OK
33152>>>>>>>    End_Function
33153>>>>>>>    
33153>>>>>>>    Function Find_Code_Description String sCode Returns String
33155>>>>>>>        If (sCode='' or ;            (sCode<>Current_Code(Self) and ;            Validate_Value(Self,sCode) ) );            Function_Return ''
33158>>>>>>>        Function_Return (Current_Description(Self))
33159>>>>>>>    End_Function
33160>>>>>>>    
33160>>>>>>>    
33160>>>>>>>    //  The deveveloper (or a sub-class) must fill this list. It is done
33160>>>>>>>    //  by finding the item and sending the Message:
33160>>>>>>>    //    Send Add_Table_Value sValue {sDescr}
33160>>>>>>>    //
33160>>>>>>>    Procedure Fill_List
33162>>>>>>>        Set Table_Loaded_State to True
33163>>>>>>>    End_Procedure
33164>>>>>>>    
33164>>>>>>>    Procedure Request_Fill_From_List Integer iObj Integer iMsg
33166>>>>>>>        Integer iMax
33166>>>>>>>        Integer iCnt
33166>>>>>>>        Integer iFile
33166>>>>>>>        
33166>>>>>>>        If (iObj=0 or iMsg=0) ;            Procedure_Return
33169>>>>>>>        
33169>>>>>>>        If (Table_Loaded_State(Self)=0 or Static_State(Self)=0) Begin
33171>>>>>>>            Send Delete_Data
33172>>>>>>>            Send Fill_list
33173>>>>>>>            Set Table_Loaded_State to True
33174>>>>>>>        End
33174>>>>>>>>
33174>>>>>>>        Get Main_File to iFile
33175>>>>>>>        Get Data_Item_Count to iMax
33176>>>>>>>        Decrement iMax
33177>>>>>>>        For iCnt from 0 to iMax
33183>>>>>>>>
33183>>>>>>>            Send iMsg to iObj iCnt (Data_Value(Self,iCnt)) ;                (Data_Description(Self,iCnt)) iFile ;                (Data_RowId(Self,iCnt))
33184>>>>>>>        Loop
33185>>>>>>>>
33185>>>>>>>    End_Procedure
33186>>>>>>>    
33186>>>>>>>    
33186>>>>>>>    // returns all data in a two dimension variant array.
33186>>>>>>>    // [i][0] = data
33186>>>>>>>    // [i][1] = description
33186>>>>>>>    // This can be used by Crystal CDO classes (this is why a variant array is used)
33186>>>>>>>    Function TableData Returns Variant[][]
33188>>>>>>>        Variant[][2] vData
33189>>>>>>>        Integer iMax i
33189>>>>>>>        If (Table_Loaded_State(Self)=0 or Static_State(Self)=0) Begin
33191>>>>>>>            Send Delete_Data
33192>>>>>>>            Send Fill_list
33193>>>>>>>            Set Table_Loaded_State to True
33194>>>>>>>        End
33194>>>>>>>>
33194>>>>>>>        Get Data_Item_Count to iMax
33195>>>>>>>        For i from 0 to (iMax-1)
33201>>>>>>>>
33201>>>>>>>            Get Data_Value       i to vData[i][0]
33202>>>>>>>            Get Data_Description i to vData[i][1]
33203>>>>>>>        Loop
33204>>>>>>>>
33204>>>>>>>        Function_Return vData
33205>>>>>>>    End_Function
33206>>>>>>>    
33206>>>>>>>End_Class
33207>>>>>>>
33207>>>>>>>
33207>>>>>>>
33207>>>>>>>Class DescriptionValidationTable is an ValidationTable
33208>>>>>>>    
33208>>>>>>>    Procedure Construct_Object
33210>>>>>>>        Forward Send Construct_Object
33212>>>>>>>        Set Number_Elements to 2
33213>>>>>>>    End_Procedure
33214>>>>>>>    
33214>>>>>>>    Function Data_Item_Count Returns Integer
33216>>>>>>>        Function_Return (item_count(Self)/3)
33217>>>>>>>    End_Function
33218>>>>>>>    
33218>>>>>>>    Function Data_Value Integer iItem Returns String
33220>>>>>>>        Function_Return (Value(Self,iItem*3))
33221>>>>>>>    End_Function
33222>>>>>>>    
33222>>>>>>>    Procedure Set Data_Value Integer iItem String sValue
33224>>>>>>>        Set Value  (iItem*3) to sValue
33225>>>>>>>    End_Procedure
33226>>>>>>>    
33226>>>>>>>    Function Data_Description Integer iItem Returns String
33228>>>>>>>        Function_Return (Value(Self,iItem*3+1))
33229>>>>>>>    End_Function
33230>>>>>>>    
33230>>>>>>>    Procedure Set Data_Description Integer iItem String sValue
33232>>>>>>>        Set Value  (iItem*3+1) to sValue
33233>>>>>>>    End_Procedure
33234>>>>>>>    
33234>>>>>>>    Function Data_RowId Integer iItem Returns RowID
33236>>>>>>>        String sRowId
33236>>>>>>>        Get Value (iItem*3+2) to sRowId
33237>>>>>>>        Function_Return (DeSerializeRowId(sRowId))
33238>>>>>>>    End_Function
33239>>>>>>>    
33239>>>>>>>    Procedure Set Data_RowId Integer iItem RowID riValue
33241>>>>>>>        Set Value  (iItem*3+2) to (SerializeRowId(riValue))
33242>>>>>>>    End_Procedure
33243>>>>>>>    
33243>>>>>>>    Procedure Add_Table_Value String sData String sDescr RowID riRec
33245>>>>>>>        String  sVal
33245>>>>>>>        RowID   riRecVal
33245>>>>>>>        Integer iCnt
33245>>>>>>>        Get Data_Item_Count to iCnt
33246>>>>>>>        Set Data_Value iCnt to sData
33247>>>>>>>        
33247>>>>>>>        // If one param passed use it for both display and database values
33247>>>>>>>        If (num_arguments <= 1);            Move sData  to sVal
33250>>>>>>>        Else ;            Move sDescr to sVal
33252>>>>>>>        Set Data_Description iCnt to sVal
33253>>>>>>>        
33253>>>>>>>        If (num_arguments <= 2) ;            Move (NullRowId()) to riRecVal
33256>>>>>>>        Else ;            Move riRec        to riRecVal
33258>>>>>>>        Set Data_RowId iCnt to riRecVal
33259>>>>>>>    End_Procedure
33260>>>>>>>End_Class
33261>>>>>>>
33261>>>>>>>
33261>>>>>>>Class FileValidationTable is an DescriptionValidationTable
33262>>>>>>>    
33262>>>>>>>    Procedure Construct_Object
33264>>>>>>>        Forward Send Construct_Object
33266>>>>>>>        Property Integer No_Fill_State     False // this is never used and is obsolete. (JJT)
33267>>>>>>>        Property Integer Ordering          1   // Indx1 is a good guess.
33268>>>>>>>        Property String  Type_Value        ''  // default these two to
33269>>>>>>>        Property Integer Type_Field        0   // Undefined (none).
33270>>>>>>>        Property Integer Code_Field        1   // Fld 1=code, 2=descr
33271>>>>>>>        Property Integer Description_Field 2   // are good guesses.
33272>>>>>>>        
33272>>>>>>>        Property Integer Code_Load_Object  0   // or (Code_Loader(Self))
33273>>>>>>>    End_Procedure
33274>>>>>>>    
33274>>>>>>>    Function Table_Loaded_State Returns Integer
33276>>>>>>>        Integer iRVal
33276>>>>>>>        Get No_fill_State to iRVal // if true, table always is loaded
33277>>>>>>>        If not iRval ;            Forward Get table_loaded_State to iRVal
33281>>>>>>>        Function_Return iRval
33282>>>>>>>    End_Function
33283>>>>>>>    
33283>>>>>>>    Function Validate_Value String sCode Returns Integer
33285>>>>>>>        Integer iRVal
33285>>>>>>>        Integer iDSO
33285>>>>>>>        Get Code_Load_Object  to iDSO
33286>>>>>>>        // we use standard validate, if code is blank, OR if
33286>>>>>>>        //   1. if no code DSO or the code DSO exists but is not busy.
33286>>>>>>>        //   2. AND it is not no-fill
33286>>>>>>>        //   3. AND it is static
33286>>>>>>>        // Else we find the record directly
33286>>>>>>>        // Note that the operation mode is busy during request_validate (the
33286>>>>>>>        // ddo does this). WHen operation mode is busy we must not use
33286>>>>>>>        // the code dso (must find manually).
33286>>>>>>>        If (sCode='' or ;            ( (iDSO=0 or Operation_Mode=0)    and ; // if no code DSO or DSO not busy            No_Fill_State(Self)=0 and ;            Static_State(Self) ) ) ;            Forward Get Validate_Value sCode to iRVal
33290>>>>>>>        Else If (sCode<>Current_Code(Self)) ;            Get Find_Value sCode to iRVal
33294>>>>>>>        Function_Return iRVal // OK
33295>>>>>>>    End_Function
33296>>>>>>>    
33296>>>>>>>    Procedure Initialize_File
33298>>>>>>>        Integer iFile iCodeField iDescField iDSO iIndex iTypeField
33298>>>>>>>        Get Code_Load_Object  to iDSO
33299>>>>>>>        Get Main_File         to iFile
33300>>>>>>>        Get Code_Field        to iCodeField
33301>>>>>>>        Get Description_Field to iDescField
33302>>>>>>>        Get Ordering          to iIndex
33303>>>>>>>        Get Type_Field        to iTypeField
33304>>>>>>>        If (iDSO and Operation_Mode=0) ;            Send Initialize_File to iDSO ;            iFile iIndex iCodeField iDescField ;            iTypeField (Type_Value(Self))
33307>>>>>>>        Else Begin
33308>>>>>>>            Clear iFile
33309>>>>>>>            // if Type exists, seed the type value
33309>>>>>>>            If iTypeField ;                Set_Field_Value iFile iTypeField to (Type_Value(Self))
33314>>>>>>>        End
33314>>>>>>>>
33314>>>>>>>    End_Procedure
33315>>>>>>>    
33315>>>>>>>    Function Find_Value String Code Returns Integer
33317>>>>>>>        Integer iFile iCodeField iDescField iDSO iIndex iTypeField
33317>>>>>>>        Get Code_Load_Object  to iDSO
33318>>>>>>>        Get Main_File         to iFile
33319>>>>>>>        Get Ordering          to iIndex
33320>>>>>>>        Get Code_Field        to iCodeField
33321>>>>>>>        Get Description_Field to iDescField
33322>>>>>>>        Get Type_Field        to iTypeField
33323>>>>>>>        Send Initialize_File
33324>>>>>>>        //
33324>>>>>>>        Set_Field_Value iFile iCodeField to Code
33327>>>>>>>        If (iDSO and Operation_Mode=0) ;            Send Request_Find to iDSO EQ iFile iIndex
33330>>>>>>>        Else ;            Vfind iFile iIndex EQ
33333>>>>>>>        If not (Found) ;            Function_Return 1
33336>>>>>>>        // Set properties Current_code and Current_Description
33336>>>>>>>        Send Store_Current_Data iFile iCodeField iDescField
33337>>>>>>>        Function_Return 0
33338>>>>>>>    End_Function
33339>>>>>>>    
33339>>>>>>>    // internal
33339>>>>>>>    Procedure Store_Current_Data Integer iFile Integer iCodeField Integer iDescField
33341>>>>>>>        String sVal
33341>>>>>>>        Get_Field_Value iFile iCodeField to sVal
33344>>>>>>>        Set Current_Code to (trim(sVal))
33345>>>>>>>        If iDescField Begin
33347>>>>>>>            Get_Field_Value iFile iDescField to sVal
33350>>>>>>>            Set Current_Description to (trim(sVal))
33351>>>>>>>        End
33351>>>>>>>>
33351>>>>>>>        Set Current_RowId to (GetRowId(iFile))
33352>>>>>>>    End_Procedure
33353>>>>>>>    
33353>>>>>>>    Function Next_Code_Record Returns Boolean
33355>>>>>>>        Integer iFile iCodeField iDescField iIndex
33355>>>>>>>        Integer iTypeField
33355>>>>>>>        String sTypeValue sFoundTypeValue
33355>>>>>>>        Boolean bFound
33355>>>>>>>        Handle hoDSO
33355>>>>>>>        Get Code_Load_Object  to hoDSO
33356>>>>>>>        Get Description_Field to iDescField
33357>>>>>>>        Get Code_Field        to iCodeField
33358>>>>>>>        Get Main_File         to iFile
33359>>>>>>>        
33359>>>>>>>        If hoDSO Begin
33361>>>>>>>            Get Next_Code_record of hoDSO to bFound
33362>>>>>>>        End
33362>>>>>>>>
33362>>>>>>>        Else Begin
33363>>>>>>>            Get Ordering to iIndex
33364>>>>>>>            Vfind iFile iIndex GT
33366>>>>>>>            Move (Found) to bFound
33367>>>>>>>            If bFound Begin
33369>>>>>>>                // if found see if we are at the end of the valid list of types
33369>>>>>>>                Get Type_Field to iTypeField
33370>>>>>>>                Get Type_Value to sTypeValue
33371>>>>>>>                If ((iTypeField<>0) and (sTypeValue<>"")) Begin
33373>>>>>>>                    Get_Field_Value iFile iTypeField to sFoundTypeValue
33376>>>>>>>                    Move (Trim(sTypeValue)=Trim(sFoundTypeValue)) to bFound
33377>>>>>>>                End
33377>>>>>>>>
33377>>>>>>>            End
33377>>>>>>>>
33377>>>>>>>        End
33377>>>>>>>>
33377>>>>>>>        If bFound Begin
33379>>>>>>>            Send Store_Current_Data iFile iCodeField iDescField
33380>>>>>>>        End
33380>>>>>>>>
33380>>>>>>>        Function_Return bFound
33381>>>>>>>    End_Function
33382>>>>>>>    
33382>>>>>>>    Procedure Fill_List
33384>>>>>>>        RowID riId
33384>>>>>>>        Boolean bFound
33384>>>>>>>        String sCode sDesc
33384>>>>>>>        If (Static_State(Self)=0 or No_Fill_State(Self)) ;            Procedure_Return
33387>>>>>>>        //
33387>>>>>>>        Send Delete_Data
33388>>>>>>>        Send Initialize_File
33389>>>>>>>        Get Next_Code_Record to bFound
33390>>>>>>>        While bFound
33394>>>>>>>            Get Current_Code        to sCode
33395>>>>>>>            Get Current_Description to sDesc
33396>>>>>>>            Get Current_RowId       to riId
33397>>>>>>>            Send Add_Table_Value sCode sDesc riId
33398>>>>>>>            Get Next_Code_Record to bFound
33399>>>>>>>        Loop
33400>>>>>>>>
33400>>>>>>>        Set Table_Loaded_State to True
33401>>>>>>>    End_Procedure
33402>>>>>>>    
33402>>>>>>>    Procedure Request_Fill_From_List Integer iObj Integer iMsg
33404>>>>>>>        Integer iItem
33404>>>>>>>        Integer iFile
33404>>>>>>>        RowID   riId
33404>>>>>>>        Boolean bFound
33404>>>>>>>        String sCode sDesc
33404>>>>>>>        
33404>>>>>>>        If (iObj=0 or iMsg=0) ;            Procedure_Return
33407>>>>>>>        
33407>>>>>>>        If (Static_State(Self) and No_Fill_State(Self)=0 ) ;            Forward Send Request_Fill_From_List iObj iMsg
33411>>>>>>>        Else Begin
33412>>>>>>>            Get Main_File to iFile
33413>>>>>>>            Send Initialize_File
33414>>>>>>>            Get Next_Code_Record to bFound
33415>>>>>>>            While bFound
33419>>>>>>>                Get Current_Code        to sCode
33420>>>>>>>                Get Current_Description to sDesc
33421>>>>>>>                Get Current_RowId       to riId
33422>>>>>>>                Send iMSG to iObj iItem sCode sDesc iFile riId
33423>>>>>>>                Increment iItem
33424>>>>>>>                Get Next_Code_Record to bFound
33425>>>>>>>            Loop
33426>>>>>>>>
33426>>>>>>>        End
33426>>>>>>>>
33426>>>>>>>    End_Procedure
33427>>>>>>>End_Class
33428>>>>>>>
33428>>>>>>>Use CodeLoad.pkg
Including file: codeload.pkg    (C:\Program Files\DataFlex 20.1\Pkg\codeload.pkg)
33428>>>>>>>>>// Interface:
33428>>>>>>>>>//
33428>>>>>>>>>//  Procedure Initialize_File Integer File# Integer Index# Integer Code# ;
33428>>>>>>>>>//                            Integer Desc# Integer Type# String Type
33428>>>>>>>>>//
33428>>>>>>>>>//      This initializes the data-set for finding. You MUST pass all five
33428>>>>>>>>>//      parameters here. They are:
33428>>>>>>>>>//          File#  -  main file to use
33428>>>>>>>>>//         Index#  - Index to use for finding
33428>>>>>>>>>//          Code#  - field number of the code
33428>>>>>>>>>//          Desc#  - field number of the code's description
33428>>>>>>>>>//          Type#  - field number of the constraining Type (0 if none)
33428>>>>>>>>>//           Type  - the constrain type value ('' = allow all records)
33428>>>>>>>>>//
33428>>>>>>>>>//      You MUST send this message before finding records. Alternately,
33428>>>>>>>>>//      you could set the individual properties and send rebuild_constraints
33428>>>>>>>>>//      and CLEAR to initalize the file (see code on how to do this).
33428>>>>>>>>>//
33428>>>>>>>>>//    Get Next_Code_record to ret_Int
33428>>>>>>>>>//
33428>>>>>>>>>//      Returns the next record number. 0 if no more. If record exists it
33428>>>>>>>>>//      sets the value of Current_Code and Crnt_Description.
33428>>>>>>>>>//
33428>>>>>>>>>//    Get Current_Code to Ret_String
33428>>>>>>>>>//    Get Crnt_Description to Ret_String
33428>>>>>>>>>//
33428>>>>>>>>>//      Returns the code and description of the last valid record found
33428>>>>>>>>>//      with the Next_Code_Record Message
33428>>>>>>>>>//
33428>>>>>>>>>//   Sample Usage:  This was created primarily to be used by the
33428>>>>>>>>>//                  radio-entry-form classes. In particular those using
33428>>>>>>>>>//                  the "code" look up file. Look at those packages if
33428>>>>>>>>>//                  you wish to use them yourself.
33428>>>>>>>>>//
33428>>>>>>>>>Use Data_Set.pkg
33428>>>>>>>>>
33428>>>>>>>>>Class Code_Loader_Data_Set is a DataSet
33429>>>>>>>>>    
33429>>>>>>>>>    Procedure Construct_Object Integer Img#
33431>>>>>>>>>        Forward Send Construct_Object Img#
33433>>>>>>>>>        // These should be set by the Initialize_File message
33433>>>>>>>>>        Property String  Type_Value           '' // assume no defaults.
33434>>>>>>>>>        Property Integer Type_Field           0  // These values should be
33435>>>>>>>>>        Property Integer Code_Field           0  // set by initialize_file
33436>>>>>>>>>        Property Integer Description_Field    0  //
33437>>>>>>>>>        
33437>>>>>>>>>        // These are SET by Next_Code_Record. You may GET their values
33437>>>>>>>>>        Property String  Current_Code         ''
33438>>>>>>>>>        Property String  Current_Description  ''
33439>>>>>>>>>    End_Procedure
33440>>>>>>>>>    
33440>>>>>>>>>    // If a Type exists (not a '') and there is a type field and a
33440>>>>>>>>>    // main_file constrain to the type. Else no constraints
33440>>>>>>>>>    Procedure OnConstrain
33442>>>>>>>>>        String sType
33442>>>>>>>>>        Integer iFile iField
33442>>>>>>>>>        Get Type_Value to sType
33443>>>>>>>>>        Get Main_File  to iFile
33444>>>>>>>>>        Get Type_Field to iField
33445>>>>>>>>>        If (sType<>'' and iFile<>0 and iField<>0) ;            Vconstrain iFile iField eq sType
33450>>>>>>>>>    End_Procedure
33451>>>>>>>>>    
33451>>>>>>>>>    //  This initializes the data-set for finding. You MUST pass all five
33451>>>>>>>>>    //  parameters here. They are:
33451>>>>>>>>>    //     File#  -  main file to use
33451>>>>>>>>>    //    Index#  - Index to use for finding
33451>>>>>>>>>    //     Code#  - field number of the code
33451>>>>>>>>>    //     Desc#  - field number of the code's description
33451>>>>>>>>>    //     Type#  - field number of the constraining Type (0 if none)
33451>>>>>>>>>    //      Type  - the constrain type value ('' = allow all records)
33451>>>>>>>>>    //
33451>>>>>>>>>    Procedure Initialize_File Integer File# Integer Index# Integer Code# ;            Integer Desc# Integer Type# String Type
33453>>>>>>>>>        // note: all params are required!
33453>>>>>>>>>        Set Main_File         to File#
33454>>>>>>>>>        Set Ordering          to Index#
33455>>>>>>>>>        Set Code_Field        to Code#
33456>>>>>>>>>        Set Description_Field to Desc#
33457>>>>>>>>>        Set Type_Field        to Type#
33458>>>>>>>>>        Set Type_Value        to Type
33459>>>>>>>>>        //
33459>>>>>>>>>        Send Rebuild_Constraints // set up constraints
33460>>>>>>>>>        Send Clear               // initialize the file
33461>>>>>>>>>    End_Procedure
33462>>>>>>>>>    
33462>>>>>>>>>    //  Find the next record: Return 0 if no record, 1 if record exists
33462>>>>>>>>>    //   if record exists set Current_Code and Current_Description
33462>>>>>>>>>    //
33462>>>>>>>>>    Function Next_Code_Record Returns Boolean
33464>>>>>>>>>        Integer iFile iField
33464>>>>>>>>>        String sValue
33464>>>>>>>>>        Send Request_Find GT (Main_File(Self)) (Ordering(Self))
33465>>>>>>>>>        If not (Found) ;            Function_Return False
33468>>>>>>>>>        // Set properties Current_code and Current_Description
33468>>>>>>>>>        Get Main_File to iFile
33469>>>>>>>>>        
33469>>>>>>>>>        Get Code_Field to iField
33470>>>>>>>>>        Get_Field_Value iFile iField to sValue
33473>>>>>>>>>        Set Current_Code to sValue
33474>>>>>>>>>        
33474>>>>>>>>>        Get Description_Field to iField
33475>>>>>>>>>        Get_Field_Value iFile iField to sValue
33478>>>>>>>>>        Set Current_Description to sValue
33479>>>>>>>>>        Function_Return True
33480>>>>>>>>>    End_Function
33481>>>>>>>>>    
33481>>>>>>>>>End_Class
33482>>>>>>>Use cCodeMaintOpen_Mixin.pkg
Including file: cCodeMaintOpen_Mixin.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCodeMaintOpen_Mixin.pkg)
33482>>>>>>>>>// Mixin class to support transistion support for CodeType and CodeMast files.
33482>>>>>>>>>// These files used to be in filelist and they used to reside at 207 and 208 and they
33482>>>>>>>>>// were always opened with "open as"
33482>>>>>>>>>// We want these to be in the filelist at 253 and 254. These open methods will attempt to open these files
33482>>>>>>>>>// as such. If these are old files (not in filelist or wrong number) they will get loaded with the old
33482>>>>>>>>>// open as - thus keeping this backwards compatible.
33482>>>>>>>>>// By adding to filelist, we can sort the files and we can open them as other database sources.
33482>>>>>>>>>Use VDFBase.pkg
33482>>>>>>>>>
33482>>>>>>>>>Declare_Datafile CodeType
Including file: CodeType.fd    (C:\Projects\DF20\DbUpdateFramework\DDSrc\CodeType.fd)
33482>>>>>>>>>Declare_Datafile CodeMast
Including file: CodeMast.fd    (C:\Projects\DF20\DbUpdateFramework\DDSrc\CodeMast.fd)
33482>>>>>>>>>Define C_Expected_CodeType_FileNumber for 253  // and the logical name must be CODETYPE
33482>>>>>>>>>Define C_Expected_CodeMast_FileNumber for 254  // and the logical name must be CODEMAST
33482>>>>>>>>>
33482>>>>>>>>>Class cCodeMaintOpen_Mixin is a Mixin
33483>>>>>>>>>    
33483>>>>>>>>>    Procedure OpenCodeMast
33485>>>>>>>>>        String sName
33485>>>>>>>>>        If (Codemast.File_number=C_Expected_CodeMast_FileNumber) Begin
33487>>>>>>>>>            Get_Attribute DF_FILE_LOGICAL_NAME of Codemast.File_number to sName
33490>>>>>>>>>            If (uppercase(trim(sName))="CODEMAST") Begin
33492>>>>>>>>>                Open CodeMast
33494>>>>>>>>>                Procedure_Return
33495>>>>>>>>>            End
33495>>>>>>>>>>
33495>>>>>>>>>        End
33495>>>>>>>>>>
33495>>>>>>>>>        Open "CodeMast" as Codemast.File_number
33497>>>>>>>>>    End_Procedure
33498>>>>>>>>>    
33498>>>>>>>>>    Procedure OpenCodeType
33500>>>>>>>>>        String sName
33500>>>>>>>>>        If (Codetype.File_number=C_Expected_CodeType_FileNumber) Begin
33502>>>>>>>>>            Get_Attribute DF_FILE_LOGICAL_NAME of CodeType.File_number to sName
33505>>>>>>>>>            If (uppercase(trim(sName))="CODETYPE") Begin
33507>>>>>>>>>                Open CodeType
33509>>>>>>>>>                Procedure_Return
33510>>>>>>>>>            End
33510>>>>>>>>>>
33510>>>>>>>>>        End
33510>>>>>>>>>>
33510>>>>>>>>>        Open "CodeType" as CodeType.File_number
33512>>>>>>>>>    End_Procedure
33513>>>>>>>>>    
33513>>>>>>>>>End_Class
33514>>>>>>>
33514>>>>>>>//
33514>>>>>>>//  This is the object we need for loading files.
33514>>>>>>>//
33514>>>>>>>Object Code_loader is a Code_loader_Data_Set no_Image
33516>>>>>>>End_Object
33517>>>>>>>
33517>>>>>>>
33517>>>>>>>Class CodeValidationTable is an FileValidationTable
33518>>>>>>>    
33518>>>>>>>    // supports opening of file in reserved filelist area.
33518>>>>>>>    Import_Class_Protocol cCodeMaintOpen_Mixin
33519>>>>>>>    
33519>>>>>>>    Procedure Construct_Object
33521>>>>>>>        Forward Send Construct_Object
33523>>>>>>>        
33523>>>>>>>        Send OpenCodeMast                       // methods supports w/ filelist (new) and without (old)
33524>>>>>>>        
33524>>>>>>>        Set Main_File to CodeMast.File_Number   // name of file is CODEMAST
33525>>>>>>>        Set Ordering to 1                       // Index 1: Types x Code
33526>>>>>>>        Set Type_Field to 1                     // Fld 1: Type
33527>>>>>>>        Set Code_Field to 2                     // Fld 2: Code
33528>>>>>>>        Set Description_Field to 3              // Fld 3: Description
33529>>>>>>>        Set Code_load_Object to (Code_Loader(Self))
33530>>>>>>>    End_Procedure
33531>>>>>>>    
33531>>>>>>>End_Class
33532>>>>>
33532>>>>>// Used to by DDOConstraintFindMeta to return constraint expression info in a friendlier fashion
33532>>>>>Struct tDDOConstraintFindMeta
33532>>>>>    Integer iJumpInSegments
33532>>>>>    Boolean bJumpOut
33532>>>>>    Boolean bPreRelate
33532>>>>>    Boolean bPostRelate
33532>>>>>End_Struct
33532>>>>>
33532>>>>>// used by webapp resynchs
33532>>>>>Struct tDDChangedParentInfo
33532>>>>>    Integer iTable
33532>>>>>    Boolean bSwitched
33532>>>>>End_Struct
33532>>>>>
33532>>>>>// used by webapp resynchs
33532>>>>>Struct tDDChangedInfo
33532>>>>>    Boolean bChanged
33532>>>>>    tDDChangedParentInfo[] ParentChanged
33532>>>>>    tDDChangedParentInfo[] ParentChanged
33532>>>>>End_Struct
33532>>>>>
33532>>>>>Enum_List
33532>>>>>    Define CONST_EXP_JUMPOUT     for 1
33532>>>>>    Define CONST_EXP_PRE_RELATE  for 2
33532>>>>>    Define CONST_EXP_POST_RELATE for 4
33532>>>>>End_Enum_List
33532>>>>>
33532>>>>>// Constraint Find Types
33532>>>>>Enum_List
33532>>>>>    Define CONST_VALUE for 0    // Constrain File.Field eq sValue
33532>>>>>    Define CONST_CHILD          // Constrain File Relates to iOtherFile
33532>>>>>    Define CONST_FIELD          // Constrain File.field eq OtherFile.OtherField
33532>>>>>    Define CONST_EXP            // Constrain File as (Expression) - expression is internal
33532>>>>>    Define CONST_RELATES        // Sames a CONST_CHILD - should never be used
33532>>>>>End_Enum_List
33532>>>>>
33532>>>>>// Constraint Find Modes
33532>>>>>Enum_List
33532>>>>>    Define CONST_LT for 0
33532>>>>>    Define CONST_LE for 1
33532>>>>>    Define CONST_EQ for 2
33532>>>>>    Define CONST_GE for 3
33532>>>>>    Define CONST_GT for 4
33532>>>>>    Define CONST_NE for 5
33532>>>>>    Define CONST_Matches for 6       // a matches not capable of a jump in e.g., "?A*"
33532>>>>>    Define CONST_Contains for 7      // a contains
33532>>>>>    Define CONST_MatchesJumpIn for 9 // a matches which is capable of a jump in e.g., "A*"
33532>>>>>    // note that BETWEEN is actually two constraints a GE and LE
33532>>>>>End_Enum_List
33532>>>>>
33532>>>>>// Struct used to DDOConstraints to return current constraints in an array
33532>>>>>Struct tConstraintDef
33532>>>>>    Integer eType // constraint Find type
33532>>>>>    Integer eMode // constrain file mode
33532>>>>>    Integer iFile
33532>>>>>    Integer iField
33532>>>>>    String sValue
33532>>>>>    Integer iOtherFile
33532>>>>>    Integer iOtherField
33532>>>>>End_Struct
33532>>>>>
33532>>>>>// values passed to OnPre/PostFind to indicate the operation type
33532>>>>>Enum_List
33532>>>>>    Define DDFindRequestFind    // request_find
33532>>>>>    Define DDFindFindByRowRec   // FindByRowId, Find_By_Recnum
33532>>>>>    Define DDFindRequestAssign  // Request_assign
33532>>>>>    Define DDFindClear          // Clear (note Clear_All doesn't do this)
33532>>>>>End_Enum_List
33532>>>>>
33532>>>>>
33532>>>>>// these are private
33532>>>>>Define DD_RememberLast for "_REMEMBER$LAST_"
33532>>>>>Use tDDRemembered.pkg
Including file: tDDRemembered.pkg    (C:\Program Files\DataFlex 20.1\Pkg\tDDRemembered.pkg)
33532>>>>>>>// DDRemember Struct used for DataDictionary Class
33532>>>>>>>
33532>>>>>>>// private
33532>>>>>>>
33532>>>>>>>Struct tDDRemembered
33532>>>>>>>    Integer iField // searches are performed on this segement - it must be first
33532>>>>>>>    String sDefault
33532>>>>>>>    String sLastValue
33532>>>>>>>End_Struct
33532>>>>>>>
33532>>>>>
33532>>>>>// Used to assign a global validation_object. This can be used for
33532>>>>>// automatic prompt object on non-relational validations (checks, validation_
33532>>>>>// tables, etc.)
33532>>>>>Integer DD_Global_Validation_Prompt_Object
33532>>>>>Move 0 to DD_Global_Validation_Prompt_Object
33533>>>>>
33533>>>>>// Used for Dso traversal marking - Private (do not use)
33533>>>>>Integer   DD_Current_Mark_Id
33533>>>>>Move 0 to DD_Current_Mark_Id
33534>>>>>
33534>>>>>// Used to validate DSO structures during Save and deletes
33534>>>>>Enumeration_List
33534>>>>>    Define DD_VALIDATE_STRUCTURE_ALWAYS // Validate each save/delete operation.
33534>>>>>    Define DD_VALIDATE_STRUCTURE_NEVER  // Never validate these operations.
33534>>>>>    Define DD_VALIDATE_STRUCTURE_ONCE   // Validate Once (first save or delete).
33534>>>>>End_Enumeration_List
33534>>>>>
33534>>>>>// Used as a start for error handing in DSOs. Only affects errors that go
33534>>>>>// through operation_not_allowed and Field_Error. Used by Error_Report_Mode
33534>>>>>Enumeration_List
33534>>>>>    Define DD_ERROR_REPORT              // Report Error on screen
33534>>>>>    Define DD_ERROR_NO_REPORT           // Show no Error..
33534>>>>>End_Enumeration_List
33534>>>>>
33534>>>>>Enumeration_List
33534>>>>>    Define DD_Lock_on_All             for  7  // 111
33534>>>>>    Define DD_Lock_on_New_Save_Delete for  5  // 101
33534>>>>>    Define DD_Lock_on_Delete          for  4  // 100
33534>>>>>    Define DD_Lock_on_Save            for  2  // 010
33534>>>>>    Define DD_Lock_on_New_Save        for  1  // 001
33534>>>>>End_Enumeration_List
33534>>>>>
33534>>>>>
33534>>>>>Define DD_DEFAULT_ERROR_NUMBER  for 999
33534>>>>>
33534>>>>>
33534>>>>>
33534>>>>>
33534>>>>>// The next replaces will be used to indicate default item-options
33534>>>>>// instead of a fieldnumber which is normally used.
33534>>>>>
33534>>>>>// these are the DD bits that pertain to DEO Item options.
33534>>>>>Define DD_DEO_MASK for (DD_NOENTER ior DD_SKIPFOUND ior DD_CAPSLOCK ior DD_ZERO_SUPPRESS ior DD_AUTORETURN ior DD_AUTOBACK ior DD_AUTOCLEAR)
33534>>>>>
33534>>>>>
33534>>>>>// Special parameter options that can get passed to Set Field_Options. The
33534>>>>>// purpose is to clear all fields or the remaining passed parameters. Normally,
33534>>>>>// these are not used so it does not matter if their interface is a bit odd.
33534>>>>>Enumeration_List
33534>>>>>    Define DD_CLEAR_FIELD_OPTIONS      for -1
33534>>>>>    Define DD_CLEAR_ALL_FIELD_OPTIONS  for -2
33534>>>>>End_Enumeration_List
33534>>>>>
33534>>>>>// used to keep track of extra server file information.
33534>>>>>Struct tDDServerInformation
33534>>>>>    Integer iParent             // parent file number
33534>>>>>    Boolean bAllowNullParent    // does this DD (child) allow a null parent
33534>>>>>    Integer bParentNoSwitchIfCommitted // does this DD (child) allow switching committed parents
33534>>>>>    Boolean bNoCascadeDelete           // when a child record exists should cascade delete stop the action
33534>>>>>    Boolean bCascadeDeleteNullTheParent // when a child record exists that is null parent allowed, should we delete or null the parent
33534>>>>>End_Struct
33534>>>>>
33534>>>>>Use DDExtFld.pkg // adds extended field/pointer support
Including file: DDExtFld.pkg    (C:\Program Files\DataFlex 20.1\Pkg\DDExtFld.pkg)
33534>>>>>>>// This is used by the DataDictionary class and provides a method for
33534>>>>>>>// windows DDs (for now) to support local buffers for text and binary buffers.
33534>>>>>>>// Field objects are created within the DD by sending the message:
33534>>>>>>>// The DD interface is:
33534>>>>>>>//
33534>>>>>>>//      Get  Field_Object iField to hExtFieldObject
33534>>>>>>>//      Send DefineExtendedField iField
33534>>>>>>>//      Send DefineAllExtendedFields
33534>>>>>>>//      Send ExtendedFieldsUpdate bSave
33534>>>>>>>//      Send ExtendedFieldsRefresh bCleared
33534>>>>>>>//      Set  File_Field_Current_Pointer_Value iFile iField iLen to pValue
33534>>>>>>>//      Set  Field_Current_Pointer_Value iField iLen to pValue
33534>>>>>>>//      Set  File_Field_Pointer_Entry iFile iField iLen bShowErr to pValue
33534>>>>>>>//      Set  Field_Pointer_Entry iField iOpts iLen bShowErr to pValue
33534>>>>>>>//      Get  File_Field_Current_Pointer_Value iFile iField to pData
33534>>>>>>>//      Get  Field_Current_Pointer_Value iField to pData
33534>>>>>>>//
33534>>>>>>>// Once object is identified, the following interface can be used
33534>>>>>>>//      Get FieldPointer of hExtFieldObject to iMemoryPointer
33534>>>>>>>//      Get FieldLength  of hExtFieldObject to iLen
33534>>>>>>>//      Get File_Number  of hExtFieldObject to iFile
33534>>>>>>>//      Get Field_Number of hExtFieldObject to iFile
33534>>>>>>>//      Set Update_Save_State of hExtFieldObject to bState         // be careful!
33534>>>>>>>//      Set Update_Find_State of hExtFieldObject to bState         // be careful
33534>>>>>>>//      Set FieldRefresh_Save_State of hExtFieldObject to bState   // be careful
33534>>>>>>>//
33534>>>>>>>
33534>>>>>>>//
33534>>>>>>>//  DD structure:
33534>>>>>>>//       DD Object           (property Field_objects points to child)
33534>>>>>>>//           FieldObjects    (array of field#s and field objs)
33534>>>>>>>//              FieldObject1 (heap alloc for each field)
33534>>>>>>>//              FieldObjectn
33534>>>>>>>//
33534>>>>>>>
33534>>>>>>>//
33534>>>>>>>// This is used to create a single extended field object.
33534>>>>>>>//
33534>>>>>>>// Interface
33534>>>>>>>//      Get FieldPointer to iMemoryPointer
33534>>>>>>>//      Get FieldLength  to iLen
33534>>>>>>>//      Get File_Number  to iFile
33534>>>>>>>//      Get Field_Number to iFile
33534>>>>>>>//      get/Set Update_Save_State to bState         // be careful!
33534>>>>>>>//      get/Set Update_Find_State to bState         // be careful
33534>>>>>>>//      get/Set FieldRefresh_Save_State to bState   // be careful
33534>>>>>>>//      get/set FieldChangedState
33534>>>>>>>//      send defineField  iFile iField
33534>>>>>>>//      Send FieldUpdate  bSave
33534>>>>>>>//      Send FieldRefresh bCleared bClearFieldChange
33534>>>>>>>//      Set  Field_pEntry iOpts iLen to pValue
33534>>>>>>>//      Set  Field_pValue iLen to pValue
33534>>>>>>>//
33534>>>>>>>Use VDFBase.pkg
33534>>>>>>>
33534>>>>>>>Class FieldObject is a cObject
33535>>>>>>>    
33535>>>>>>>    Procedure Construct_Object
33537>>>>>>>        Forward Send construct_object
33539>>>>>>>        // these are all set by DefineField and should not be changed
33539>>>>>>>        Property Integer File_Number        0
33540>>>>>>>        Property Integer Field_Number       0
33541>>>>>>>        Property Integer FieldLength        0
33542>>>>>>>        
33542>>>>>>>        // maintained by object
33542>>>>>>>        Property UChar[] pFieldArray
33543>>>>>>>        
33543>>>>>>>        // these can be changed, with care, by the developer
33543>>>>>>>        Property Integer Update_Save_State  True
33544>>>>>>>        Property Integer Update_Find_State  False // usually no point for finds
33545>>>>>>>        Property Integer FieldRefresh_State True
33546>>>>>>>        
33546>>>>>>>        // hopefully never used
33546>>>>>>>        Property Pointer pLegacyFieldPointer       0
33547>>>>>>>        
33547>>>>>>>    End_Procedure
33548>>>>>>>    
33548>>>>>>>    Procedure Set FieldChangedState Integer bState
33550>>>>>>>        Integer iField
33550>>>>>>>        Get Field_Number to iField
33551>>>>>>>        Delegate Set Field_Changed_state iField to bState
33553>>>>>>>    End_Procedure
33554>>>>>>>    
33554>>>>>>>    Function FieldChangedState Returns Integer
33556>>>>>>>        Integer iField  bState
33556>>>>>>>        Get Field_Number to iField
33557>>>>>>>        Delegate Get Field_Changed_state iField to bState
33559>>>>>>>        Function_Return bState
33560>>>>>>>    End_Function
33561>>>>>>>    
33561>>>>>>>    // return the field option specified
33561>>>>>>>    Function IsSaveNoPut Returns Boolean
33563>>>>>>>        Integer iField
33563>>>>>>>        Boolean  bState
33563>>>>>>>        Get Field_Number to iField
33564>>>>>>>        Delegate Get FieldSaveNoPut iField to bState
33566>>>>>>>        Function_Return bState
33567>>>>>>>    End_Function
33568>>>>>>>    
33568>>>>>>>    // for object: define file, field, fieldlength and allocate heap memory
33568>>>>>>>    //             and set memory pointer
33568>>>>>>>    Procedure DefineField Integer iFile Integer iField
33570>>>>>>>        Integer iFldLen
33570>>>>>>>        Set File_Number  to iFile
33571>>>>>>>        Set Field_Number to iField
33572>>>>>>>        Get_Attribute DF_FIELD_LENGTH of iFile iField to iFldLen
33575>>>>>>>        Set FieldLength  to iFldLen
33576>>>>>>>    End_Procedure
33577>>>>>>>    
33577>>>>>>>    // Move from the DD Buffer to the file buffer
33577>>>>>>>    Procedure FieldUpdate Integer bSave
33579>>>>>>>        Integer iFile iField iFieldLen
33579>>>>>>>        UChar[] FieldArray
33580>>>>>>>        Integer iType
33580>>>>>>>        Boolean bNoPut
33580>>>>>>>        
33580>>>>>>>        // if bSave, part of save which means only update if changed
33580>>>>>>>        // if not bsave, part of find. You usually would not update this. You
33580>>>>>>>        // don't index on these types of fields
33580>>>>>>>        If ( (bSave and Update_Save_State(Self) and FieldChangedState(Self)) or ;            (not(bSave) and Update_Find_state(Self) ) ) Begin
33582>>>>>>>            // if save, we must respect DD_NoPut
33582>>>>>>>            If (bSave) Begin
33584>>>>>>>                // we are looking at the DD's field buffer itemoptions for, which
33584>>>>>>>                // should be set appropriately before a save. This setting has any
33584>>>>>>>                // changes made to support dd_commit
33584>>>>>>>                Get IsSaveNoPut to bNoPut
33585>>>>>>>                If bNoPut Begin
33587>>>>>>>                    Procedure_Return
33588>>>>>>>                End
33588>>>>>>>>
33588>>>>>>>            End
33588>>>>>>>>
33588>>>>>>>            Get pFieldArray to FieldArray
33589>>>>>>>            Get File_Number to iFile
33590>>>>>>>            Get Field_Number to iField
33591>>>>>>>            If iFile Begin
33593>>>>>>>                Set_Field_Value iFile iField to FieldArray // LENGTH iFieldLen
33596>>>>>>>            End
33596>>>>>>>>
33596>>>>>>>        End
33596>>>>>>>>
33596>>>>>>>    End_Procedure
33597>>>>>>>    
33597>>>>>>>    // Move from File buffer to local DD Buffer
33597>>>>>>>    // bCleared determines if this is a find or a clear.
33597>>>>>>>    // bClearFieldChange determines if we should clear the FieldChangedState.
33597>>>>>>>    Procedure FieldRefresh Boolean bCleared Boolean bClearFieldChange
33599>>>>>>>        Integer iFile iField
33599>>>>>>>        Integer bOk
33599>>>>>>>        UChar[] FieldArray
33600>>>>>>>        If (FieldRefresh_state(Self)) Begin
33602>>>>>>>            //Get FieldPointer to pField
33602>>>>>>>            Get File_Number to iFile
33603>>>>>>>            Get Field_Number to iField
33604>>>>>>>            // move from file buffer to memory pointed to by pField
33604>>>>>>>            If (iFile) Begin
33606>>>>>>>                If not bCleared Begin
33608>>>>>>>                    Get_Field_Value iFile iField to FieldArray
33611>>>>>>>                End
33611>>>>>>>>
33611>>>>>>>                Set Field_UCValue to FieldArray
33612>>>>>>>            End
33612>>>>>>>>
33612>>>>>>>        End
33612>>>>>>>>
33612>>>>>>>        If bClearFieldChange Begin
33614>>>>>>>            Set FieldChangedstate to False
33615>>>>>>>        End
33615>>>>>>>>
33615>>>>>>>    End_Procedure
33616>>>>>>>    
33616>>>>>>>    Procedure Set Field_pEntry Integer iOpts Integer iLen Integer bShowErr Pointer pValue
33618>>>>>>>        Integer iFile iField iFldLen iMemLen
33618>>>>>>>        Integer bChanged
33618>>>>>>>        UChar[] FieldArray
33619>>>>>>>        
33619>>>>>>>        // currently we do nothing with bShowErr because we don't checkfor errors!
33619>>>>>>>        
33619>>>>>>>        // if No-enter or Displayonly, this shouldn't be changed. For now we will
33619>>>>>>>        // let NoPut through, since a user might need it for finding.
33619>>>>>>>        If (iOpts iand DD_NOENTER) ;            Procedure_Return
33622>>>>>>>        
33622>>>>>>>        // maybe in the future
33622>>>>>>>        // Force a caplsock if required
33622>>>>>>>        //If (iOpts IAND DD_CAPSLOCK) Move (Uppercase(sValue)) to sValue
33622>>>>>>>        
33622>>>>>>>        Get File_Number  to iFile
33623>>>>>>>        Get Field_Number to iField
33624>>>>>>>        If (iFile) Begin
33626>>>>>>>            Get Is_pValueChanged iLen pValue to bChanged
33627>>>>>>>            If ( bChanged or (iOpts iand DD_FORCEPUT) ) Begin
33629>>>>>>>                Set Field_pValue iLen to pValue
33630>>>>>>>            End
33630>>>>>>>>
33630>>>>>>>            
33630>>>>>>>            
33630>>>>>>>            // Set changed state if changed and it is not No_put. This
33630>>>>>>>            // is an improvement on DEOs which would set changed-state for
33630>>>>>>>            // a no-put. This way, finds use the changed value but saves will
33630>>>>>>>            // not trigger a phony data loss
33630>>>>>>>            //If ( bChanged ) ;
33630>>>>>>>            If ( bChanged and not(iOpts iand DD_NOPUT) ) ;                Set FieldChangedState to True
33633>>>>>>>            
33633>>>>>>>            // The following is really highly unlikely!!!
33633>>>>>>>            // perform autofinds if needed. Note that required checking will occur as
33633>>>>>>>            // part of validation.
33633>>>>>>>            // We will only autofind if the field value is changed. This is consistent with
33633>>>>>>>            // DEOs which do not autofind on unchanged values. This provides optimizations
33633>>>>>>>            // when a parent record is already loaded.
33633>>>>>>>            If (bChanged or FieldChangedState(Self)) Begin
33635>>>>>>>                If (iOpts iand DD_AUTOFIND) ;                    Delegate Send File_Field_AutoFind iFile iField EQ
33639>>>>>>>                Else If (iOpts iand DD_AUTOFIND_GE) ;                    Delegate Send File_Field_AutoFind iFile iField GE
33644>>>>>>>            End
33644>>>>>>>>
33644>>>>>>>        End
33644>>>>>>>>
33644>>>>>>>        
33644>>>>>>>    End_Procedure
33645>>>>>>>    
33645>>>>>>>    // convert pointer to UChar[]
33645>>>>>>>    Function PointerToUCharArray Pointer pValue Integer iLen Returns UChar[]
33647>>>>>>>        UChar[] FieldArray
33648>>>>>>>        Boolean bOk
33648>>>>>>>        Move (ResizeArray(FieldArray,iLen)) to FieldArray
33649>>>>>>>        Move (MemCopy(AddressOf(FieldArray),pValue,iLen)) to bOK
33650>>>>>>>        Function_Return FieldArray
33651>>>>>>>    End_Function
33652>>>>>>>    
33652>>>>>>>    // Raw update of pValue
33652>>>>>>>    Procedure Set Field_UCValue UChar[] FieldArray
33654>>>>>>>        Set pFieldArray to FieldArray
33655>>>>>>>        Send DestroyLegacyFieldHeap
33656>>>>>>>    End_Procedure
33657>>>>>>>    
33657>>>>>>>    // Raw update of pValue
33657>>>>>>>    Procedure Set Field_pValue Integer iLen Pointer pValue
33659>>>>>>>        UChar[] FieldArray
33660>>>>>>>        Get PointerToUCharArray pValue iLen to FieldArray
33661>>>>>>>        Set Field_UCValue to FieldArray
33662>>>>>>>    End_Procedure
33663>>>>>>>    
33663>>>>>>>    Function Is_pValueChanged Integer iLen Pointer pValue Returns Boolean
33665>>>>>>>        Boolean bChanged
33665>>>>>>>        UChar[] FieldArray
33666>>>>>>>        Integer iFldLen
33666>>>>>>>        Get pFieldArray to FieldArray
33667>>>>>>>        Move (SizeOfArray(FieldArray)) to iFldLen
33668>>>>>>>        If (iLen <> SizeOfArray(FieldArray)) Begin
33670>>>>>>>            Move True to bChanged
33671>>>>>>>        End
33671>>>>>>>>
33671>>>>>>>        Else If (iLen) Begin // check for empty pointer
33674>>>>>>>            Move (MemCompare(AddressOf(FieldArray),pValue,iLen)) to bChanged
33675>>>>>>>        End
33675>>>>>>>>
33675>>>>>>>        Function_Return bChanged
33676>>>>>>>    End_Function
33677>>>>>>>    
33677>>>>>>>    // returns data as UChar array - best way to access the data
33677>>>>>>>    Function FieldArray Returns UChar[]
33679>>>>>>>        UChar[] FieldArray
33680>>>>>>>        Get pFieldArray to FieldArray
33681>>>>>>>        Function_Return FieldArray
33682>>>>>>>    End_Function
33683>>>>>>>    
33683>>>>>>>    // legacy method. Hopefully this is never called.
33683>>>>>>>    Function FieldPointer Returns Pointer
33685>>>>>>>        Pointer pValue pOldValue
33685>>>>>>>        Integer iLen
33685>>>>>>>        UChar[] FieldArray
33686>>>>>>>        Boolean bOk
33686>>>>>>>        Get pFieldArray to FieldArray
33687>>>>>>>        Move (SizeOfArray(FieldArray)) to iLen
33688>>>>>>>        Move (Alloc(iLen)) to pValue
33689>>>>>>>        Move (MemCopy(pValue,AddressOf(FieldArray),iLen)) to bOk
33690>>>>>>>        Send DestroyLegacyFieldHeap
33691>>>>>>>        Set pLegacyFieldPointer to pValue
33692>>>>>>>        Function_Return pValue
33693>>>>>>>    End_Function
33694>>>>>>>    
33694>>>>>>>    Procedure DestroyLegacyFieldHeap
33696>>>>>>>        Integer bOK
33696>>>>>>>        Pointer pField
33696>>>>>>>        Get pLegacyFieldPointer to pField
33697>>>>>>>        If (pField ) Begin
33699>>>>>>>            Move (Free(pField)) to bOk
33700>>>>>>>            Set pLegacyFieldPointer to 0
33701>>>>>>>        End
33701>>>>>>>>
33701>>>>>>>    End_Procedure
33702>>>>>>>    
33702>>>>>>>    // augment to release heap allocation
33702>>>>>>>    Procedure Destroy_Object
33704>>>>>>>        Send DestroyLegacyFieldHeap
33705>>>>>>>        Forward Send Destroy_object
33707>>>>>>>    End_Procedure
33708>>>>>>>    
33708>>>>>>>End_Class
33709>>>>>>>
33709>>>>>>>// This contains all extended field objects.
33709>>>>>>>// The array contains a list of all objects where item=field#
33709>>>>>>>// and item+1=field object.
33709>>>>>>>//
33709>>>>>>>// Interface is:
33709>>>>>>>//     Get Field_object iField to hFldObj
33709>>>>>>>//     Send DefineFieldObject iField
33709>>>>>>>//     Send ExtendedFieldsUpdate bSave
33709>>>>>>>//     Send ExtendedFieldsRefresh bCleared
33709>>>>>>>//
33709>>>>>>>Class FieldObjects is an Array
33710>>>>>>>    
33710>>>>>>>    // return object Id for iField. 0 if none.
33710>>>>>>>    Function Field_Object Integer iField Returns Integer
33712>>>>>>>        Integer iItm iCnt
33712>>>>>>>        Get Item_Count to iCnt
33713>>>>>>>        Move 0 to iItm
33714>>>>>>>        While iItm lt iCnt
33718>>>>>>>            If (Value(Self,iItm)=iField) ;                Function_Return (Value(Self,iItm+1))
33721>>>>>>>            Increment iItm
33722>>>>>>>            Increment iItm
33723>>>>>>>        Loop
33724>>>>>>>>
33724>>>>>>>        Function_Return 0
33725>>>>>>>    End_Function
33726>>>>>>>    
33726>>>>>>>    // define an extended object for field
33726>>>>>>>    Procedure DefineFieldObject Integer iField
33728>>>>>>>        Integer hFld
33728>>>>>>>        Integer iCnt  iFile
33728>>>>>>>        Boolean bInUse
33728>>>>>>>        Boolean bHasRecord
33728>>>>>>>        Delegate Get Main_File to iFile
33730>>>>>>>        Get Field_Object iField to hFld // this shouldn't exist yet
33731>>>>>>>        If not hFld Begin
33733>>>>>>>            Get Create U_FieldObject to hFld
33734>>>>>>>            Send DefineField to hFld iFile iField
33735>>>>>>>            Get Item_Count to iCnt          // add to array
33736>>>>>>>            Set Value  iCnt to iField   // Pos   = field#
33737>>>>>>>            Set Value  (iCnt+1) to hFld // Pos+1 = field object
33738>>>>>>>            Delegate Get In_Use_State to bInUse
33740>>>>>>>            If bInUse Begin
33742>>>>>>>                Delegate Send Refind_Records
33744>>>>>>>                Delegate Get HasRecord to bHasRecord
33746>>>>>>>                // updating the newly created field with the file buffer contents we don't
33746>>>>>>>                // want to change the field's changed state, which might have been set already.
33746>>>>>>>                Send FieldRefresh of hFld (not(bHasRecord)) False
33747>>>>>>>            End
33747>>>>>>>>
33747>>>>>>>        End
33747>>>>>>>>
33747>>>>>>>    End_Procedure
33748>>>>>>>    
33748>>>>>>>    // update all extended fields. Field buffer <-- DD buffer
33748>>>>>>>    Procedure ExtendedFieldsUpdate Integer bSave
33750>>>>>>>        Integer iItm iCnt
33750>>>>>>>        Get Item_Count to iCnt
33751>>>>>>>        Move 0 to iItm
33752>>>>>>>        While iItm lt iCnt
33756>>>>>>>            Increment iItm
33757>>>>>>>            Send FieldUpdate to (Value(Self,iItm)) bSave
33758>>>>>>>            Increment iItm
33759>>>>>>>        Loop
33760>>>>>>>>
33760>>>>>>>    End_Procedure
33761>>>>>>>    
33761>>>>>>>    // refresh all extended fields. Field buffer --> DD buffer
33761>>>>>>>    Procedure ExtendedFieldsRefresh Boolean bCleared
33763>>>>>>>        Integer iItm iCnt
33763>>>>>>>        Get Item_Count to iCnt
33764>>>>>>>        Move 0 to iItm
33765>>>>>>>        While iItm lt iCnt
33769>>>>>>>            Increment iItm
33770>>>>>>>            Send FieldRefresh to (Value(Self,iItm)) bCleared True
33771>>>>>>>            Increment iItm
33772>>>>>>>        Loop
33773>>>>>>>>
33773>>>>>>>    End_Procedure
33774>>>>>>>    
33774>>>>>>>    //
33774>>>>>>>    // these are sent from the child field object. We need to direct them
33774>>>>>>>    // to the DDO (the parent).
33774>>>>>>>    Procedure Set Field_Changed_State Integer iField Integer bState
33776>>>>>>>        Delegate Set Field_Changed_state iField to bState
33778>>>>>>>    End_Procedure
33779>>>>>>>    
33779>>>>>>>    Function Field_Changed_State Integer iField Returns Integer
33781>>>>>>>        Integer bState
33781>>>>>>>        Delegate Get Field_Changed_state iField to bState
33783>>>>>>>        Function_Return bState
33784>>>>>>>    End_Function
33785>>>>>>>    
33785>>>>>>>    Procedure File_Field_AutoFind Integer iFile Integer iField Integer iMode
33787>>>>>>>        Delegate Send File_field_AutoFind iFile iField iMode
33789>>>>>>>    End_Procedure
33790>>>>>>>    
33790>>>>>>>    Function FieldSaveNoPut Integer iField Returns Boolean
33792>>>>>>>        Boolean bIsCommited bNoPut
33792>>>>>>>        Delegate Get IsCommitted to bIsCommited
33794>>>>>>>        // we don't know if this is foreign or not (DDOs never do by themselves). We
33794>>>>>>>        // will test for regular. This should never be an issue as the DEO itself
33794>>>>>>>        // will be DisplayOnly as needed (we don't have indexed NoEnter=T/Noput=F issues)
33794>>>>>>>        Delegate Get FieldNoPut iField bIsCommited False to bNoPut
33796>>>>>>>        Function_Return bNoPut
33797>>>>>>>    End_Function
33798>>>>>>>    
33798>>>>>>>    Procedure Destroy_Object
33800>>>>>>>        Delegate Set Field_Objects to 0
33802>>>>>>>        Forward Send Destroy_object
33804>>>>>>>    End_Procedure
33805>>>>>>>    
33805>>>>>>>    
33805>>>>>>>End_Class
33806>>>>>// for text and binary. Must support Address Type
33806>>>>>
33806>>>>>
33806>>>>>// we need these from CLI.pkg for DAW drivers. These values must match what is defined
33806>>>>>// in cli.pkg
33806>>>>>Define DF_FILE_SQL_FILTER for 611
33806>>>>>Define DF_FILE_SQL_FILTER_ACTIVE for 624
33806>>>>>Define DF_FILE_SQL_FILTER_EQ for 636
33806>>>>>// same a CLI.pkg DF_FILE_TABLE_NAME but with a different name
33806>>>>>// used to avoid naming conflict. Must match cli.pkg df_file_table_name
33806>>>>>Define DF_FILE_SQL_TABLE_NAME for 609
33806>>>>>
33806>>>>>Define DF_DATABASE_IDENTIFIER_QUOTE     for 1085
33806>>>>>Define DF_FILE_DATABASE_ID              for 622
33806>>>>>
33806>>>>>// Class helper for SQL/driver assistance.
33806>>>>>// This can only be used within a DataDictionary Class as it expects that
33806>>>>>// certain properties can be Get and Set via delegation.
33806>>>>>Class cDAWSQLDriverHelper is a cObject
33807>>>>>    
33807>>>>>    Function DriverIndex String sDriver Returns Integer
33809>>>>>        String  sCurrentDriver
33809>>>>>        Integer iNumberOfDrivers iDriver iCount
33809>>>>>        Move 0 to iDriver
33810>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
33813>>>>>        For iCount from 1 to iNumberOfDrivers
33819>>>>>>
33819>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
33822>>>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriver) ) Begin
33824>>>>>                Function_Return iCount
33825>>>>>            End
33825>>>>>>
33825>>>>>        Loop
33826>>>>>>
33826>>>>>        Function_Return 0
33827>>>>>    End_Function
33828>>>>>    
33828>>>>>    
33828>>>>>    // returns true if this table supports SQL filter interface
33828>>>>>    Function SupportsSQLFilters Returns Boolean
33830>>>>>        String sDriver
33830>>>>>        Integer iFile iDriver iConformance
33830>>>>>        Delegate Get Main_File to iFile
33832>>>>>        Get_Attribute DF_FILE_DRIVER of iFile to sDriver
33835>>>>>        Get DriverIndex sDriver to iDriver
33836>>>>>        If (iDriver) Begin
33838>>>>>            Get_Attribute DF_DRIVER_CONFORMANCE of iDriver to iConformance
33841>>>>>        End
33841>>>>>>
33841>>>>>        Function_Return (iConformance iand 4)
33842>>>>>    End_Function
33843>>>>>    
33843>>>>>    // SQL Helper functions that return SQL Filters strings that can be used in a where clause
33843>>>>>    
33843>>>>>    // Escape character to escape LIKE wildcards
33843>>>>>    
33843>>>>>    
33843>>>>>    Function SQLEscapedStr String sSQL Returns String
33845>>>>>        String sEscapedSQL
33845>>>>>        // Replace one single quote by 2 single quotes
33845>>>>>        Move (Replaces("'",sSQL,"''")) to sEscapedSQL
33846>>>>>        Function_Return sEscapedSQL
33847>>>>>    End_Function
33848>>>>>    
33848>>>>>    
33848>>>>>    Function SQLEscapeLikeWildcards String sSQL Returns String
33850>>>>>        
33850>>>>>        // Escape the wildcard characters than can be used in a LIKE
33850>>>>>        If (Pos("%",sSQL)) ;            Move (Replaces("%",sSQL,(SQL_LIKE_ESC + "%"))) to sSQL
33853>>>>>        If (Pos("_",sSQL)) ;            Move (Replaces("_",sSQL,(SQL_LIKE_ESC + "_"))) to sSQL
33856>>>>>        
33856>>>>>        Function_Return sSQL
33857>>>>>    End_Function
33858>>>>>    
33858>>>>>    
33858>>>>>    
33858>>>>>    // Creates an SQL Like Filter for this field and search target
33858>>>>>    Function SQLStrLike Integer iField String sSearch Returns String
33860>>>>>        String sFilter sOrigFilter sField
33860>>>>>        Integer iFile
33860>>>>>        Integer iHasLikeEscape
33860>>>>>        String  sPrefix
33860>>>>>        
33860>>>>>        Delegate Get Main_File to iFile
33862>>>>>        Delegate Get psSQLFilter to sOrigFilter
33864>>>>>        Get SQLStrFieldName iField to sField
33865>>>>>        Get SQLEscapedStr sSearch to sSearch
33866>>>>>        
33866>>>>>        Move (Pos(SQL_LIKE_ESC,sSearch)) to iHasLikeEscape
33867>>>>>        If (not(iHasLikeEscape)) Begin
33869>>>>>            Get SQLEscapeLikeWildcards sSearch to sSearch
33870>>>>>        End
33870>>>>>>
33870>>>>>        
33870>>>>>        // Add the N prefix to properly handle Unicode data
33870>>>>>        Move 'N' to sPrefix
33871>>>>>        Move (sField + " LIKE " + sPrefix + "'%" + sSearch + "%'") to sFilter
33872>>>>>        
33872>>>>>        If (not(iHasLikeEscape)) Begin
33874>>>>>            If (Pos(SQL_LIKE_ESC,sFilter)) Begin
33876>>>>>                Move (sFilter + " ESCAPE '" + SQL_LIKE_ESC + "' "  ) to sFilter
33877>>>>>            End
33877>>>>>>
33877>>>>>        End
33877>>>>>>
33877>>>>>        
33877>>>>>        Function_Return sFilter
33878>>>>>    End_Function
33879>>>>>    
33879>>>>>    // Appends two Filters with an AND clause. Both or either can be empty
33879>>>>>    Function SQLStrAppend String sOrigFilter String sFilter Returns String
33881>>>>>        If (sOrigFilter<>"" and sFilter<>"") Begin
33883>>>>>            Move ( "(" + sOrigFilter + ") AND " + sFilter) to sFilter
33884>>>>>        End
33884>>>>>>
33884>>>>>        Else If (sFilter="") Begin
33887>>>>>            Move sOrigFilter to sFilter
33888>>>>>        End
33888>>>>>>
33888>>>>>        Function_Return sFilter
33889>>>>>    End_Function
33890>>>>>    
33890>>>>>    // Appends two filters with an or clause. Both or either can be empty.
33890>>>>>    // This may be used in OnConstrain methods when building SQL WHERE clauses in string values.
33890>>>>>    Function SQLStrAppendOr String sOrigFilter String sFilter Returns String
33892>>>>>        If (sOrigFilter<>"" and sFilter<>"") Begin
33894>>>>>            Move ("(" + sOrigFilter + ") OR (" + sFilter + ")") to sFilter
33895>>>>>        End
33895>>>>>>
33895>>>>>        Else If (sFilter="") Begin
33898>>>>>            Move sOrigFilter to sFilter
33899>>>>>        End
33899>>>>>>
33899>>>>>          Function_Return sFilter 
33900>>>>>    End_Function
33901>>>>>
33901>>>>>
33901>>>>>    Function SQLIdentifierQuote Handle hTable Returns String
33903>>>>>
33903>>>>>        String  sDriver        
33903>>>>>        Integer iDriverIndex
33903>>>>>        Handle  hDatabase
33903>>>>>        String  sIdentifierQuote
33903>>>>>        
33903>>>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriver
33906>>>>>        
33906>>>>>        Get DriverIndex sDriver to iDriverIndex        
33907>>>>>        If (iDriverIndex) Begin
33909>>>>>            Get_Attribute DF_FILE_DATABASE_ID of hTable to hDatabase            
33912>>>>>            If (hDatabase) Begin
33914>>>>>                Get_Attribute DF_DATABASE_IDENTIFIER_QUOTE of iDriverIndex hDatabase to sIdentifierQuote
33917>>>>>            End
33917>>>>>>
33917>>>>>        End
33917>>>>>>
33917>>>>>        
33917>>>>>        Function_Return sIdentifierQuote
33918>>>>>        
33918>>>>>    End_Function
33919>>>>>
33919>>>>>
33919>>>>>
33919>>>>>    // returns the name of the File and Field suitable for an SQL where statement ("Table"."Column")
33919>>>>>    Function SQLStrFileFieldName Integer iField Returns String
33921>>>>>        String sFile sField
33921>>>>>        Integer iFile
33921>>>>>        String  sIdentifierQuote
33921>>>>>        
33921>>>>>        Get Main_File to iFile
33922>>>>>        Get_Attribute DF_FILE_SQL_TABLE_NAME of iFile to sFile
33925>>>>>        Get_Attribute DF_FIELD_NAME of iFile iField to sField
33928>>>>>        Get SQLIdentifierQuote iFile to sIdentifierQuote
33929>>>>>        
33929>>>>>        Function_Return (sIdentifierQuote + sFile + sIdentifierQuote + '.' + sIdentifierQuote + sField + sIdentifierQuote ) 
33930>>>>>    End_Function
33931>>>>>
33931>>>>>    // returns the name of the Field suitable for an SQL where statement ("Column")
33931>>>>>    Function SQLStrFieldName Integer iField Returns String
33933>>>>>        String sField 
33933>>>>>        Integer iFile
33933>>>>>        String sIdentifierQuote
33933>>>>>        Get Main_File to iFile
33934>>>>>        Get_Attribute DF_FIELD_NAME of iFile iField to sField
33937>>>>>        
33937>>>>>        Get SQLIdentifierQuote iFile to sIdentifierQuote
33938>>>>>        
33938>>>>>        Function_Return (sIdentifierQuote + sField + sIdentifierQuote ) 
33939>>>>>
33939>>>>>    End_Function
33940>>>>>
33940>>>>>    // returns the name of the Schema and File and Field suitable for an SQL where statement ("Schema"."Table"."Column")
33940>>>>>    Function SQLStrSchemaFileFieldName Integer iField Returns String
33942>>>>>        String sFile sField sSchema
33942>>>>>        Integer iFile
33942>>>>>        String sIdentifierQuote
33942>>>>>        
33942>>>>>        Get Main_File to iFile
33943>>>>>        Get_Attribute DF_FILE_SQL_TABLE_NAME of iFile to sFile
33946>>>>>        Get_Attribute DF_FIELD_NAME of iFile iField to sField
33949>>>>>        Get_Attribute DF_FILE_OWNER of iFile to sSchema
33952>>>>>
33952>>>>>        Get SQLIdentifierQuote iFile to sIdentifierQuote
33953>>>>>            
33953>>>>>        If (Trim(sSchema) <> "") ;            Function_Return (sIdentifierQuote + sSchema + sIdentifierQuote + '.' + sIdentifierQuote + sFile + sIdentifierQuote + '.' + sIdentifierQuote + sField + sIdentifierQuote ) 
33956>>>>>        Else ;            Function_Return (sIdentifierQuote + sFile + sIdentifierQuote + '.' + sIdentifierQuote + sField + sIdentifierQuote ) 
33958>>>>>            
33958>>>>>            
33958>>>>>            
33958>>>>>    End_Function
33959>>>>>    
33959>>>>>    //  returns the name of a file suitable for a SQL statement
33959>>>>>    Function SQLStrFileName Integer iField Returns String
33961>>>>>        String sFile
33961>>>>>        Integer iFile
33961>>>>>        String sIdentifierQuote
33961>>>>>        
33961>>>>>        Get Main_File to iFile
33962>>>>>        Get_Attribute DF_FILE_SQL_TABLE_NAME of iFile to sFile
33965>>>>>        
33965>>>>>        Get SQLIdentifierQuote iFile to sIdentifierQuote
33966>>>>>        
33966>>>>>        Function_Return (sIdentifierQuote + sFile + sIdentifierQuote)
33967>>>>>    End_Function
33968>>>>>    
33968>>>>>    // called before an SQL Filter find. Make sure that any global and table attributes are
33968>>>>>    // stored.
33968>>>>>    Procedure StoreDefaultSQLFilters
33970>>>>>        String sOldFilter
33970>>>>>        Boolean bOldFilterActive bOldFilterEQ
33970>>>>>        Integer iMain
33970>>>>>        Get Main_File to iMain
33971>>>>>        Get_Attribute DF_FILE_SQL_FILTER of iMain to sOldFilter
33974>>>>>        Get_Attribute DF_FILE_SQL_FILTER_ACTIVE of iMain to bOldFilterActive
33977>>>>>        Get_Attribute DF_FILE_SQL_FILTER_EQ of iMain to bOldFilterEQ
33980>>>>>        Delegate Set psOldFilter to sOldFilter
33982>>>>>        Delegate Set pbOldFilterActive to bOldFilterActive
33984>>>>>        Delegate Set pbOldFilterEq to bOldFilterEQ
33986>>>>>    End_Procedure
33987>>>>>    
33987>>>>>    // called after an SQL find. Must restore the global and table SQL filter attributes
33987>>>>>    Procedure RestoreDefaultSQLFilters
33989>>>>>        String sOldFilter
33989>>>>>        Boolean bOldFilterActive bOldFilterEQ
33989>>>>>        Integer iMain
33989>>>>>        Delegate Get Main_File to iMain
33991>>>>>        Delegate Get psOldFilter to sOldFilter
33993>>>>>        Delegate Get pbOldFilterActive to bOldFilterActive
33995>>>>>        Delegate Get pbOldFilterEq to bOldFilterEQ
33997>>>>>        Set_Attribute DF_FILE_SQL_FILTER of iMain to sOldFilter
34000>>>>>        Set_Attribute DF_FILE_SQL_FILTER_ACTIVE of iMain to bOldFilterActive
34003>>>>>        Set_Attribute DF_FILE_SQL_FILTER_EQ of iMain to bOldFilterEQ
34006>>>>>    End_Procedure
34007>>>>>    
34007>>>>>    // applies the passed SQL filter. If empty, it should make sure that no filter
34007>>>>>    // is applied. If non-empty it should set the filter active, set the filter string
34007>>>>>    // and make sure this is applied to all finds (including find EQ)
34007>>>>>    Procedure ApplySQLFilterStr String sFilter
34009>>>>>        Integer iMain
34009>>>>>        Delegate Get Main_File to iMain
34011>>>>>        If (sFilter<>"") Begin
34013>>>>>            Set_Attribute DF_FILE_SQL_FILTER_ACTIVE of iMain to True
34016>>>>>            Set_Attribute DF_FILE_SQL_FILTER of iMain to sFilter
34019>>>>>            Set_Attribute DF_FILE_SQL_FILTER_EQ of iMain to True
34022>>>>>        End
34022>>>>>>
34022>>>>>        Else Begin
34023>>>>>            Set_Attribute DF_FILE_SQL_FILTER_ACTIVE of iMain to False
34026>>>>>        End
34026>>>>>>
34026>>>>>    End_Procedure
34027>>>>>    
34027>>>>>End_Class
34028>>>>>
34028>>>>>// Every data_set will have a object based on this class. It will hold
34028>>>>>// the values for the fields, the entry_options and the messages IDs of the
34028>>>>>// iEntry, iExit and iValidate messages for each field.
34028>>>>>// It is assumed that an object of this class will always be used as a
34028>>>>>// child object of a Data_Set object.
34028>>>>>//
34028>>>>>// Currently the fieldtypes Overlap, Text and Binary are *not* supported.
34028>>>>>//
34028>>>>>// ITEM-PROPERTY   ASSIGNED-FUNCTION
34028>>>>>//
34028>>>>>// Value           The value of the field. Will be updated whenever the
34028>>>>>//                 value of a field changes due to data-entry or a found
34028>>>>>//                 record.
34028>>>>>// Data_File       Contains the filenumber. Is the same for every item.
34028>>>>>// Data_Field      Contains the fieldnumber for the item. Is equal to the
34028>>>>>//                 items' itemnumber.
34028>>>>>// Item_Options    Used to store the standard item-options of a field.
34028>>>>>// Aux_Value       Used to store the foreign-item-options of a field.
34028>>>>>Class cRecordBuffer is an cDDBuffer
34029>>>>>    
34029>>>>>    // This procedure will be called from the Data_Set when the Main_File is
34029>>>>>    // being set. It will create an item for each field of the file in this
34029>>>>>    // object. Fields of the types DF_OVERLAP, DF_TEXT and DF_BINARY are
34029>>>>>    // currently not added.
34029>>>>>    Procedure Create_Items Integer iFile
34031>>>>>        Integer iField_Count iField
34031>>>>>        
34031>>>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iFile to iField_Count
34034>>>>>        Set Main_File to iFile
34035>>>>>        Send Delete_Data
34036>>>>>        Set Item_Count to (iField_Count+1)
34037>>>>>        For iField from 0 to iField_Count
34043>>>>>>
34043>>>>>            // will skip recnum (field 0) if non-recnum table
34043>>>>>            // will set to skip if binary, text or overlap
34043>>>>>            Set Data_Field iField to iField
34044>>>>>        Loop
34045>>>>>>
34045>>>>>    End_Procedure
34046>>>>>    
34046>>>>>    // when an alias is created, we want to clear any values that will not be applied to
34046>>>>>    // this alias DD such as prompt and zoom objects (which would point to the superclass master)
34046>>>>>    Procedure ReDefineAliasItems Integer iFile
34048>>>>>        Integer i iItems
34048>>>>>        
34048>>>>>        Set Main_File to iFile
34049>>>>>        Get item_count to iItems
34050>>>>>        For i from 0 to (iItems-1)
34056>>>>>>
34056>>>>>            Set Prompt_Object i to 0
34057>>>>>            Set Zoom_Object i to 0
34058>>>>>        Loop
34059>>>>>>
34059>>>>>    End_Procedure
34060>>>>>    
34060>>>>>    
34060>>>>>    // This procedure will be called from the parent Data_Set whenever the
34060>>>>>    // Data_Set changes its Current_Record property, or after a Save, Delete
34060>>>>>    // or Clear operation.
34060>>>>>    // We use this event to store the values of the fields in our local
34060>>>>>    // record buffer.
34060>>>>>    Procedure OnNewCurrentRecord RowID riOld RowID riNew
34062>>>>>        Integer iMain_File
34062>>>>>        Integer iOldState
34062>>>>>        tDDRemembered[] DefaultValues
34062>>>>>        tDDRemembered[] DefaultValues
34063>>>>>        Boolean bRetain bInReSync
34063>>>>>        Integer iFld iFlds iIndex
34063>>>>>        Handle hoDD
34063>>>>>        
34063>>>>>        Get Parent to hoDD
34064>>>>>        Delegate Get Main_File to iMain_File
34066>>>>>        
34066>>>>>        If not (IsNullRowId(riNew)) ;            Send Entry_Display
34069>>>>>        Else Begin
34070>>>>>            
34070>>>>>            If (OPERATION_ORIGIN) Begin
34072>>>>>                // this gets set by webapp during a resync. During resyncs you don't want to rely
34072>>>>>                // on the values in the buffers (as they may not be yours) so you cannot do retain
34072>>>>>                // of rememberlast. Fortunately, you don't need to as this information is not
34072>>>>>                // needed during a resync.
34072>>>>>                Get pbInResync of operation_origin to bInResync
34073>>>>>            End
34073>>>>>>
34073>>>>>            
34073>>>>>            // if we have any 17.0 Remember last value items, we must add those items to our array
34073>>>>>            // only do this if this is the operation origin or a parent (i.e., skip if a child DDO)
34073>>>>>            // Also skip if a resync. See above
34073>>>>>            If ( not(bInReSync) and ;                ( (Operation_Origin=hoDD) or ;                ( OPERATION_ORIGIN and (Which_data_set(Operation_Origin,iMain_File)<>0) ) ) ) Begin
34075>>>>>                Delegate Get pDDDefaults to DefaultValues
34077>>>>>                Move (SizeOfArray(DefaultValues)) to iFlds
34078>>>>>                For iFld from 0 to (iFlds-1)
34084>>>>>>
34084>>>>>                    Move (DefaultValues[iFld].sDefault=DD_RememberLast) to bRetain // if this is a dynamically assigned remember-last
34085>>>>>// I don't think this test is needed
34085>>>>>//              // if a parent DD and not allow-foreign we want to ignore this if this is not an indexed field (for autofind)
34085>>>>>//              If ( bRetain and (Operation_Origin<>hoDD) and not(Allow_Foreign_New_Save_State(hoDD))) Begin
34085>>>>>//                 Get_Attribute DF_FIELD_INDEX of iMain_File DefaultValues[iFld].iField to iIndex
34085>>>>>//                 Move (iIndex<>0) to bRetain
34085>>>>>//              End
34085>>>>>                    If bRetain Begin
34087>>>>>                        Get Value DefaultValues[iFld].iField to DefaultValues[iFld].sLastValue
34088>>>>>                    End
34088>>>>>>
34088>>>>>                    Else Begin
34089>>>>>                        Move '' to DefaultValues[iFld].sLastValue
34090>>>>>                    End
34090>>>>>>
34090>>>>>                Loop
34091>>>>>>
34091>>>>>                Delegate Set pDDDefaults to DefaultValues
34093>>>>>            End
34093>>>>>>
34093>>>>>            
34093>>>>>            // we must do this to make retains not set changed_state
34093>>>>>            Delegate Get Change_Disabled_State to iOldState
34095>>>>>            Delegate Set Change_Disabled_State to True
34097>>>>>            // if mode is anything other than clear we do a clear all (clear keeps retains, clear all does not)
34097>>>>>            // also do clear-all if the DDO is foreign.
34097>>>>>            
34097>>>>>            // If bInReSync, we never use retains as the buffer is not ours yet.
34097>>>>>            // The Entry_Clear, Entry_Clear_All parameter is bIgnoreRetains.
34097>>>>>            // When True retain and retain_all states are ignored and cleared.
34097>>>>>            If (Operation_mode=MODE_CLEARING and ;                ( (Operation_Origin=parent(Self)) or ;                (Which_data_set(Operation_Origin,iMain_File)<>0) ) ) Begin
34099>>>>>                Send Entry_Clear bInReSync
34100>>>>>            End
34100>>>>>>
34100>>>>>            Else Begin
34101>>>>>                Send Entry_Clear_all bInResync
34102>>>>>            End
34102>>>>>>
34102>>>>>            Delegate Set Change_Disabled_State to iOldState
34104>>>>>            Set Changed_State to False
34105>>>>>        End
34105>>>>>>
34105>>>>>    End_Procedure
34106>>>>>    
34106>>>>>    // Make sure to set the Changed_State of the Data_Set to TRUE when a
34106>>>>>    // field value changes and it's not during the Setting of the Defaults.
34106>>>>>    Procedure Set Changed_State Integer iState
34108>>>>>        Integer iNoChange
34108>>>>>        // Server.pkg in dso already knows this property
34108>>>>>        Delegate Get Change_disabled_State to iNoChange
34110>>>>>        If not iNoChange Begin
34112>>>>>            Forward Set Changed_State to iState
34114>>>>>            Delegate Set Changed_State to iState
34116>>>>>        End
34116>>>>>>
34116>>>>>    End_Procedure
34117>>>>>    
34117>>>>>End_Class
34118>>>>>
34118>>>>>
34118>>>>>// Objects of this class will be used to store all kinds of attributes
34118>>>>>// which belong to a field.
34118>>>>>//
34118>>>>>// FA_MIN_VALUE
34118>>>>>// Used to store the mininum value of field.
34118>>>>>//
34118>>>>>// FA_MAX_VALUE
34118>>>>>// Used to store the maximum value of a field.
34118>>>>>//
34118>>>>>// FA_CHECK_VALUE
34118>>>>>// Used to store a string which contains all possible values of a field.
34118>>>>>//
34118>>>>>// FA_CHECKBOX_TRUE
34118>>>>>// Used to store the TRUE value for a checkbox field
34118>>>>>//
34118>>>>>// FA_CHECKBOX_FALSE
34118>>>>>// Used to store the FALSE value of a checkbox field
34118>>>>>//
34118>>>>>// FA_TABLE_OBJECT
34118>>>>>// Stores object Id of a validation table.
34118>>>>>//
34118>>>>>// FA_ERROR_MESSAGE
34118>>>>>// Used to store a error text which will be shown to a user when a fields
34118>>>>>// value violates one of the rules defined for it.
34118>>>>>// This field may contain the special strings @MIN, @MAX and @CHECK. When
34118>>>>>// these are used, these will be replaced by the actual value of MIN_VALUE,
34118>>>>>// MAX_VALUE or CHECK_VALUE.
34118>>>>>//
34118>>>>>
34118>>>>>
34118>>>>>// Validation Types
34118>>>>>Enumeration_List
34118>>>>>    Define FA_VALIDATION_TYPE_NONE
34118>>>>>    Define FA_VALIDATION_TYPE_RANGE
34118>>>>>    Define FA_VALIDATION_TYPE_CHECK
34118>>>>>    Define FA_VALIDATION_TYPE_CHECKBOX
34118>>>>>    Define FA_VALIDATION_TYPE_TABLE
34118>>>>>End_Enumeration_List
34118>>>>>
34118>>>>>
34118>>>>>Class Field_Attributes is a Array
34119>>>>>    
34119>>>>>    Procedure Construct_Object
34121>>>>>        Forward Send Construct_Object
34123>>>>>        // Private: This replaces the use of arrays to get at this value. This
34123>>>>>        // allows us to find specific validation types (like checkboxes) more
34123>>>>>        // quickly than scanning an array
34123>>>>>        Property String Private.Validation_Types     ''
34124>>>>>    End_Procedure
34125>>>>>    
34125>>>>>    // Returns the extended validation type for the passed field.
34125>>>>>    Function Field_Validation_Type Integer iField Returns Integer
34127>>>>>        Integer iType
34127>>>>>        If iField ;            Move (mid(Private.Validation_Types(Self),1,iField)) to iType
34130>>>>>        Else ;            Move FA_VALIDATION_TYPE_NONE to iType
34132>>>>>        Function_Return iType
34133>>>>>    End_Function
34134>>>>>    
34134>>>>>    Procedure Set Field_Validation_Type Integer iField String sType
34136>>>>>        Integer iType
34136>>>>>        String sTypes
34136>>>>>        If iField Begin
34138>>>>>            Get Private.Validation_Types to sTypes
34139>>>>>            Set Private.Validation_Types to (Overstrike(sType, sTypes, iField))
34140>>>>>        End
34140>>>>>>
34140>>>>>    End_Procedure
34141>>>>>    
34141>>>>>    // Set any defaults required by this class when the main file is created.
34141>>>>>    // Create a string which contains all validation types. Set all to
34141>>>>>    // No extended validation type.
34141>>>>>    Procedure Create_Items
34143>>>>>        String  sType
34143>>>>>        Integer iCount
34143>>>>>        Delegate Get Field_Count to iCOunt
34145>>>>>        Move FA_VALIDATION_TYPE_NONE to sType
34146>>>>>        Set Private.Validation_Types to (Repeat(sType,iCount))
34147>>>>>    End_Procedure
34148>>>>>    
34148>>>>>    // Return field number of next field matching the passed validation type.
34148>>>>>    // Pass validation type and last position checked. Return 0 if no match
34148>>>>>    Function Next_Validation_Type String sType Integer iOffset Returns Integer
34150>>>>>        String sTypes
34150>>>>>        Integer iPos
34150>>>>>        Get Private.Validation_Types to sTypes
34151>>>>>        Move (Pos(sType, mid(sTypes,255,iOffset+1))) to iPos
34152>>>>>        If iPos ;            Add iOffset to iPos
34155>>>>>        Function_Return iPos
34156>>>>>    End_Function
34157>>>>>    
34157>>>>>    // This procedure will be called by the Extended_Data_Set to set the
34157>>>>>    // errornumber and message which will be triggered when it needs to.
34157>>>>>    Procedure Set Field_Error Integer iField Integer iErr String sMsg
34159>>>>>        Integer iBase
34159>>>>>        Move (iField * FA_COUNT) to iBase
34160>>>>>        Set Value (iBase + FA_ERROR_NUMBER) to iErr
34161>>>>>        Set Value (iBase + FA_ERROR_MESSAGE) to sMsg
34162>>>>>    End_Procedure
34163>>>>>    
34163>>>>>    // Used to retreive the error number and message for a particular field
34163>>>>>    Function Field_Error_Number Integer iField Returns Integer
34165>>>>>        Integer iErr
34165>>>>>        Get Value (iField*FA_COUNT + FA_ERROR_NUMBER)  to iErr
34166>>>>>        Function_Return iErr
34167>>>>>    End_Function
34168>>>>>    
34168>>>>>    Function Field_Error_Message Integer iField Returns String
34170>>>>>        String sValue
34170>>>>>        Get Value (iField*FA_COUNT + FA_ERROR_MESSAGE) to sValue
34171>>>>>        Function_Return sValue
34172>>>>>    End_Function
34173>>>>>    
34173>>>>>    
34173>>>>>    // This function manages the validation of a field against its extended
34173>>>>>    // validations.
34173>>>>>    Function Validate_Field Integer iField Returns Integer
34175>>>>>        Integer iType
34175>>>>>        Integer iResult
34175>>>>>        Get Field_Validation_Type iField to iType
34176>>>>>        If (iType = FA_VALIDATION_TYPE_RANGE) ;            Get Validate_Field_Range iField to iResult
34179>>>>>        Else If (iType = FA_VALIDATION_TYPE_CHECK) ;            Get Validate_Field_Check iField to iResult
34183>>>>>        Else If (iType = FA_VALIDATION_TYPE_CHECKBOX) ;            Get Validate_Field_Checkbox iField to iResult
34187>>>>>        Else If (iType = FA_VALIDATION_TYPE_TABLE) ;            Get Validate_Field_Table iField to iResult
34191>>>>>        Function_Return iResult
34192>>>>>    End_Function
34193>>>>>    
34193>>>>>    // All extended validations know how to send callback messages (iMsg) to
34193>>>>>    // the calling object (iObj). This allows external lists to get filled w/
34193>>>>>    // the contents of a range. Used by combo boxes, spinners, etc.
34193>>>>>    Procedure Field_Fill_List Integer iField Integer iObj Integer iMsg
34195>>>>>        Integer iType
34195>>>>>        Integer iResult
34195>>>>>        Get Field_Validation_Type iField to iType
34196>>>>>        If (iType = FA_VALIDATION_TYPE_RANGE) ;            Send Field_Fill_List_Field_Range iField iObj iMsg
34199>>>>>        Else If (iType = FA_VALIDATION_TYPE_CHECK) ;            Send Field_Fill_List_Field_Check iField iObj iMsg
34203>>>>>        Else If (iType = FA_VALIDATION_TYPE_CHECKBOX) ;            Send Field_Fill_List_Field_Checkbox iField iObj iMsg
34207>>>>>        Else If (iType = FA_VALIDATION_TYPE_TABLE) ;            Send Field_Fill_List_Field_Table iField iObj iMsg
34211>>>>>    End_Procedure
34212>>>>>    
34212>>>>>    // Return the id of the validation table if one exists. Otherwise return
34212>>>>>    // a zero.
34212>>>>>    Function Field_Table_Object Integer iField Returns Integer
34214>>>>>        Integer iType
34214>>>>>        Integer iObj
34214>>>>>        Integer iBase
34214>>>>>        Move (iField * FA_COUNT) to iBase
34215>>>>>        Get Field_Validation_Type iField to iType
34216>>>>>        If (iType = FA_VALIDATION_TYPE_TABLE) ;            Get Value (iBase + FA_TABLE_OBJECT) to iObj
34219>>>>>        Function_Return iObj
34220>>>>>    End_Function
34221>>>>>    
34221>>>>>    // Procedure to set the range for a field. It will automatically set the
34221>>>>>    // validation type of the field as well.
34221>>>>>    Procedure Set Field_Value_Range Integer iField String sMin String sMax
34223>>>>>        Integer iBase
34223>>>>>        Move (iField * FA_COUNT) to iBase
34224>>>>>        Set Value (iBase + FA_MIN_VALUE) to sMin
34225>>>>>        Set Value (iBase + FA_MAX_VALUE) to sMax
34226>>>>>        Set Field_Validation_Type iField to FA_VALIDATION_TYPE_RANGE
34227>>>>>    End_Procedure
34228>>>>>    
34228>>>>>    // Function to check a fields value agains a given check string.
34228>>>>>    Function Validate_Field_Range Integer iField Returns Integer
34230>>>>>        String  sMin
34230>>>>>        String  sMax
34230>>>>>        String  sValue
34230>>>>>        Integer iField_Type
34230>>>>>        Integer iResult
34230>>>>>        Integer iFile
34230>>>>>        Integer iBase
34230>>>>>        Move (iField * FA_COUNT) to iBase
34231>>>>>        Get Value (iBase + FA_MIN_VALUE) to sMin
34232>>>>>        Get Value (iBase + FA_MAX_VALUE) to sMax
34233>>>>>        Delegate Get Field_Current_Value iField to sValue
34235>>>>>        Delegate Get Main_File to iFile
34237>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iField_Type
34240>>>>>        Move 0 to iResult
34241>>>>>        If (iField_Type=DF_ASCII) ;            Move (sValue < sMin or sValue > sMax) to iResult
34244>>>>>        Else If (iField_Type=DF_BCD) ;            Move (Number(sValue) < Number(sMin) or ;            Number(sValue) > Number(sMax)) to iResult
34248>>>>>        Else If (iField_Type=DF_DATE) ;            Move (Date(sValue) < Date(sMin) or Date(sValue) > Date(sMax)) to iResult
34252>>>>>        Else If (iField_Type=DF_DATETIME) ;            Move (Cast(sValue,DateTime) < Cast(sMin,DateTime) or Cast(sValue,DateTime) > Cast(sMax,DateTime)) to iResult
34256>>>>>        If iResult Begin
34258>>>>>            Delegate Send Field_Error iField DD_INVALID_RANGE sMin sMax
34260>>>>>            Function_Return 1
34261>>>>>        End
34261>>>>>>
34261>>>>>    End_Function
34262>>>>>    
34262>>>>>    // Callback to provide all valid value for this validation.
34262>>>>>    // Just call back with the two range values
34262>>>>>    Procedure Field_Fill_List_Field_Range Integer iField Integer iObj Integer iMsg
34264>>>>>        String  sMin
34264>>>>>        String  sMax
34264>>>>>        Integer iBase
34264>>>>>        Move (iField * FA_COUNT) to iBase
34265>>>>>        Get Value (iBase + FA_MIN_VALUE) to sMin
34266>>>>>        Get Value (iBase + FA_MAX_VALUE) to sMax
34267>>>>>        Send iMsg to iObj 0 sMin '' 0 (NullrowId())
34268>>>>>        Send iMsg to iObj 1 sMax '' 0 (NullrowId())
34269>>>>>    End_Procedure
34270>>>>>    
34270>>>>>    // Procedure to set the check for a field. It will automatically set the
34270>>>>>    // validation type of the field as well.
34270>>>>>    Procedure Set Field_Value_Check Integer iField String sCheck
34272>>>>>        Integer iBase
34272>>>>>        Move (iField * FA_COUNT) to iBase
34273>>>>>        Set Value (iBase + FA_CHECK_VALUE) to sCheck
34274>>>>>        //Set Value iBase to FA_VALIDATION_TYPE_CHECK
34274>>>>>        Set Field_Validation_Type iField to FA_VALIDATION_TYPE_CHECK
34275>>>>>    End_Procedure
34276>>>>>    
34276>>>>>    // Function to check a fields value agains a given check string.
34276>>>>>    Function Validate_Field_Check Integer iField Returns Integer
34278>>>>>        String  sCheck
34278>>>>>        String  sValue
34278>>>>>        Integer iBase
34278>>>>>        Integer iPos
34278>>>>>        Integer iLength
34278>>>>>        Integer iResult
34278>>>>>        Integer iFile
34278>>>>>        Move (iField * FA_COUNT) to iBase
34279>>>>>        Get Value (iBase + FA_CHECK_VALUE) to sCheck
34280>>>>>        Delegate Get Field_Current_Value iField to sValue
34282>>>>>        Delegate Get Main_File to iFile
34284>>>>>        Get_Attribute DF_FIELD_LENGTH of iFile iField to iLength
34287>>>>>        Move (Pad( sValue,iLength)) to sValue
34288>>>>>        // Replace the seperation characters with two of them so the user
34288>>>>>        // can't bypass the check by entering a seperation character.
34288>>>>>        Move (Replaces("|", sValue, "||")) to sValue
34289>>>>>        // Report an error if rules are violated.
34289>>>>>        Move (Pos( sValue, sCheck)) to iPos
34290>>>>>        If not iPos Begin
34292>>>>>            Delegate Send Field_Error iField DD_INVALID_CHECK sCheck
34294>>>>>            Function_Return 1
34295>>>>>        End
34295>>>>>>
34295>>>>>    End_Function
34296>>>>>    
34296>>>>>    // Callback to provide all valid value for this validation.
34296>>>>>    // Call back with all valid check values
34296>>>>>    Procedure Field_Fill_List_Field_Check Integer iField Integer iObj Integer iMsg
34298>>>>>        String  sCheck
34298>>>>>        Integer iBase
34298>>>>>        Integer iPos
34298>>>>>        Integer iItem
34298>>>>>        Move (iField * FA_COUNT) to iBase
34299>>>>>        Get Value (iBase + FA_CHECK_VALUE) to sCheck
34300>>>>>        Append sCheck "|"
34301>>>>>        Move (Pos( "|", sCheck)) to iPos
34302>>>>>        While iPos
34306>>>>>            If (iPos > 1) Begin
34308>>>>>                Send iMsg to iObj iItem (Left(sCheck,iPos-1)) '' 0 (NullrowId())
34309>>>>>                Increment iItem
34310>>>>>            End
34310>>>>>>
34310>>>>>            Move (Mid( sCheck, 255, iPos+1))  to sCheck
34311>>>>>            Move (Pos( "|", sCheck)) to iPos
34312>>>>>        Loop
34313>>>>>>
34313>>>>>    End_Procedure
34314>>>>>    
34314>>>>>    // Procedure to set up a checkbox field. We will store the TRUE and FALSE
34314>>>>>    // Values in the extended array.
34314>>>>>    Procedure Set Field_CheckBox_Values Integer iField String sTrue String sFalse
34316>>>>>        Integer iBase
34316>>>>>        Move (iField * FA_COUNT) to iBase
34317>>>>>        Set Value (iBase + FA_CHECKBOX_TRUE) to sTrue
34318>>>>>        Set Value (iBase + FA_CHECKBOX_FALSE) to sFalse
34319>>>>>        Set Field_Validation_Type iField to FA_VALIDATION_TYPE_CHECKBOX
34320>>>>>    End_Procedure
34321>>>>>    
34321>>>>>    // Return the Value associated with the field and its select-state.
34321>>>>>    Function Field_CheckBox_Value Integer iField Integer iState Returns String
34323>>>>>        Integer iBase
34323>>>>>        Integer iType
34323>>>>>        String sValue
34323>>>>>        Move (iField * FA_COUNT) to iBase
34324>>>>>        Get Field_Validation_Type iField to iType
34325>>>>>        If (iType <> FA_VALIDATION_TYPE_CHECKBOX) ;            Move iState to sValue
34328>>>>>        Else ;            Get Value (iBase + If(iState,FA_CHECKBOX_TRUE,FA_CHECKBOX_FALSE));            to sValue
34330>>>>>        Function_Return sValue
34331>>>>>    End_Function
34332>>>>>    
34332>>>>>    // Return the select_state based on the passed value and field
34332>>>>>    Function Field_Value_Select_State Integer iField String sValue Returns Integer
34334>>>>>        Integer iBase
34334>>>>>        Integer iType
34334>>>>>        String  sTrue
34334>>>>>        Integer iState
34334>>>>>        Integer iFile
34334>>>>>        Integer iField_Type
34334>>>>>        Move (iField * FA_COUNT) to iBase
34335>>>>>        Get Field_Validation_Type iField to iType
34336>>>>>        Get Value (iBase + FA_CHECKBOX_TRUE) to sTrue
34337>>>>>        If (iType <> FA_VALIDATION_TYPE_CHECKBOX) ;            Move (not(sValue=0 or sValue='')) to iState
34340>>>>>        Else Begin
34341>>>>>            Delegate Get Main_File to iFile
34343>>>>>            Get_Attribute DF_FIELD_TYPE of iFile iField to iField_Type
34346>>>>>            If (iField_Type = DF_BCD) ;                Move (Number(sValue)=Number(sTrue)) to iState
34349>>>>>            Else ; // DF_ASCII                Move (sValue=sTrue) to iState
34351>>>>>        End
34351>>>>>>
34351>>>>>        Function_Return iState
34352>>>>>    End_Function
34353>>>>>    
34353>>>>>    
34353>>>>>    // Check that the buffer value is one of the two checkbox values.
34353>>>>>    Function Validate_Field_Checkbox Integer iField Returns Integer
34355>>>>>        String  sTrue
34355>>>>>        String  sFalse
34355>>>>>        String  sValue
34355>>>>>        Integer iField_Type
34355>>>>>        Integer iResult
34355>>>>>        Integer iFile
34355>>>>>        Integer iBase
34355>>>>>        Move (iField * FA_COUNT) to iBase
34356>>>>>        Get Value (iBase + FA_CHECKBOX_TRUE) to sTrue
34357>>>>>        Get Value (iBase + FA_CHECKBOX_FALSE) to sFalse
34358>>>>>        Delegate Get Field_Current_Value iField to sValue
34360>>>>>        Delegate Get Main_File to iFile
34362>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iField_Type
34365>>>>>        Move 0 to iResult
34366>>>>>        If (iField_Type = DF_BCD) ;            Move (Number(sValue)=Number(sTrue) or ;            Number(sValue)=Number(sFalse)) to iResult
34369>>>>>        Else ; // DF_ASCII            Move (sValue=sTrue or sValue=sFalse) to iResult
34371>>>>>        If not iResult Begin
34373>>>>>            Delegate Send Field_Error iField DD_INVALID_CHECKBOX sTrue sFalse
34375>>>>>            Function_Return 1
34376>>>>>        End
34376>>>>>>
34376>>>>>    End_Function
34377>>>>>    
34377>>>>>    // Callback to provide all valid value for this validation.
34377>>>>>    // Just call back with the two true and false values
34377>>>>>    Procedure Field_Fill_List_Field_Checkbox Integer iField Integer iObj Integer iMsg
34379>>>>>        String  sTrue
34379>>>>>        String  sFalse
34379>>>>>        Integer iBase
34379>>>>>        Move (iField * FA_COUNT) to iBase
34380>>>>>        Get Value (iBase + FA_CHECKBOX_TRUE) to sTrue
34381>>>>>        Get Value (iBase + FA_CHECKBOX_FALSE) to sFalse
34382>>>>>        Send iMsg to iObj 0 sTrue '' 0 (NullrowId())
34383>>>>>        Send iMsg to iObj 1 sFalse '' 0 (NullrowId())
34384>>>>>    End_Procedure
34385>>>>>    
34385>>>>>    // The object keeps track of a validation table object. This table object
34385>>>>>    // can be any type of object must at a minimum understand a small message
34385>>>>>    // protocol (see xvaltbl.pkg for info)
34385>>>>>    Procedure Set Field_Value_Table Integer iField Integer iObj
34387>>>>>        Integer iBase
34387>>>>>        Move (iField * FA_COUNT) to iBase
34388>>>>>        Set Value (iBase + FA_TABLE_OBJECT) to iObj
34389>>>>>        Set Field_Validation_Type iField to FA_VALIDATION_TYPE_TABLE
34390>>>>>    End_Procedure
34391>>>>>    
34391>>>>>    // This valdates against a validation table if appropriate (if a table
34391>>>>>    // exists and the table's validate_State is T). It validates by passing
34391>>>>>    // the message validate_value to the validation table object
34391>>>>>    Function Validate_Field_Table Integer iField Returns Integer
34393>>>>>        Integer iBase
34393>>>>>        Integer iTableObj
34393>>>>>        String  sValue
34393>>>>>        Integer iResult
34393>>>>>        Move (iField * FA_COUNT) to iBase
34394>>>>>        Get Value (iBase + FA_TABLE_OBJECT) to iTableObj
34395>>>>>        If (iTableObj and Validate_State(iTableObj) ) Begin
34397>>>>>            Delegate Get Field_Current_Value iField to sValue
34399>>>>>            Get Validate_Value of iTableOBj sValue to iResult
34400>>>>>            If iResult ;                Delegate Send Field_Error iField DD_INVALID_VALUE_TABLE
34404>>>>>        End
34404>>>>>>
34404>>>>>        Function_Return iResult
34405>>>>>    End_Function
34406>>>>>    
34406>>>>>    // Callback to provide all valid value for this validation.
34406>>>>>    // Pass the request on to the validation table. This is the most common
34406>>>>>    // use of this.
34406>>>>>    Procedure Field_Fill_List_Field_Table Integer iField Integer iObj Integer iMsg
34408>>>>>        Integer iBase
34408>>>>>        Integer iTableObj
34408>>>>>        Move (iField * FA_COUNT) to iBase
34409>>>>>        Get Value (iBase + FA_TABLE_OBJECT) to iTableObj
34410>>>>>        If iTableObj ;            Send Request_Fill_From_List to iTableObj iObj iMsg
34413>>>>>    End_Procedure
34414>>>>>    
34414>>>>>    // Often extended valditation types can provide automatic prompt
34414>>>>>    // objects. If the extended type supports a prompt object and there is
34414>>>>>    // a global validation_list object, we will use it
34414>>>>>    Function Prompt_Object Integer iField Returns Integer
34416>>>>>        Integer iType
34416>>>>>        Integer iObj
34416>>>>>        Get Field_Validation_Type iField to iType
34417>>>>>        If not (iType=FA_VALIDATION_TYPE_NONE or iType=FA_VALIDATION_TYPE_RANGE) ;            Move DD_Global_Validation_Prompt_Object to iObj
34420>>>>>        Function_Return iObj
34421>>>>>    End_Function
34422>>>>>    
34422>>>>>    
34422>>>>>End_Class
34423>>>>>
34423>>>>>
34423>>>>>
34423>>>>>// use to keep track of file field pairs such as system file file/field
34423>>>>>Struct tDDFileField
34423>>>>>    Integer iFile
34423>>>>>    Integer iField
34423>>>>>End_Struct
34423>>>>>
34423>>>>>Class Field_Mask_Array is an Array
34424>>>>>    
34424>>>>>    Function Array_Name Integer iField Integer iType Returns String
34426>>>>>        String sName
34426>>>>>        Move (iField*FMA_COUNT+iType) to iField
34427>>>>>        If (Item_Count(Self)>iField) ;            Get value iField to sName
34430>>>>>        // sometimes an array value that is undefined returns a 0, we must change this to ''
34430>>>>>        If (sName = '0') ;            Move '' to sName
34433>>>>>        Function_Return sName
34434>>>>>    End_Function
34435>>>>>    
34435>>>>>    
34435>>>>>    Procedure Set Field_Mask_Type Integer iField Integer iType
34437>>>>>        Set Value (iField*FMA_COUNT+FMA_MASK_TYPE) to iType
34438>>>>>    End_Procedure
34439>>>>>    
34439>>>>>    Function Field_Mask_Type Integer iField Returns Integer
34441>>>>>        Integer iType
34441>>>>>        Move (iField*FMA_COUNT+FMA_MASK_TYPE) to iField
34442>>>>>        If (Item_Count(Self)>iField) ;            Get value iField to iType
34445>>>>>        Function_Return iType
34446>>>>>    End_Function
34447>>>>>    
34447>>>>>    Procedure Set Field_Mask_Value_State Integer iField Integer iState
34449>>>>>        Set Value (iField*FMA_COUNT+FMA_MASK_VALUE_STATE) to iState
34450>>>>>    End_Procedure
34451>>>>>    
34451>>>>>    Function Field_Mask_Value_State Integer iField Returns Integer
34453>>>>>        Integer iState
34453>>>>>        Move (iField*FMA_COUNT+FMA_MASK_VALUE_STATE) to iField
34454>>>>>        If (Item_Count(Self)>iField) ;            Get value iField to iState
34457>>>>>        Function_Return iState
34458>>>>>    End_Function
34459>>>>>    
34459>>>>>    Procedure Set Field_Mask Integer iField String sMask
34461>>>>>        Set Value (iField*FMA_COUNT+FMA_MASK) to sMask
34462>>>>>    End_Procedure
34463>>>>>    
34463>>>>>    Function Field_Mask Integer iField Returns String
34465>>>>>        Function_Return (Array_Name(Self,iField,FMA_MASK))
34466>>>>>    End_Function
34467>>>>>    
34467>>>>>    Procedure Set Field_Label_Short Integer iField String sName
34469>>>>>        Set Value (iField*FMA_COUNT+FMA_SHORT_NAME) to sName
34470>>>>>    End_Procedure
34471>>>>>    
34471>>>>>    Function Field_Label_Short Integer iField Returns String
34473>>>>>        Function_Return (Array_Name(Self,iField,FMA_SHORT_NAME))
34474>>>>>    End_Function
34475>>>>>    
34475>>>>>    Procedure Set Field_Label_Long Integer iField String sName
34477>>>>>        Set Value (iField*FMA_COUNT+FMA_LONG_NAME) to sName
34478>>>>>    End_Procedure
34479>>>>>    
34479>>>>>    Function Field_Label_Long Integer iField Returns String
34481>>>>>        Function_Return (Array_Name(Self,iField,FMA_LONG_NAME))
34482>>>>>    End_Function
34483>>>>>    
34483>>>>>    Procedure Set Field_Class_Name Integer iField String sName
34485>>>>>        Set Value (iField*FMA_COUNT+FMA_CLASS_NAME) to sName
34486>>>>>    End_Procedure
34487>>>>>    
34487>>>>>    Function Field_Class_Name Integer iField Returns String
34489>>>>>        Function_Return (Array_Name(Self,iField,FMA_CLASS_NAME))
34490>>>>>    End_Function
34491>>>>>    
34491>>>>>    Procedure Set Field_WebPrompt_Object Integer iField Handle hoPrompt
34493>>>>>        Set Value (iField*FMA_COUNT+FMA_WEBPROMPTOBJECT) to hoPrompt
34494>>>>>    End_Procedure
34495>>>>>    
34495>>>>>    Function Field_WebPrompt_Object Integer iField Returns Handle
34497>>>>>        Function_Return (Array_Name(Self,iField,FMA_WEBPROMPTOBJECT))
34498>>>>>    End_Function
34499>>>>>    
34499>>>>>End_Class
34500>>>>>
34500>>>>>Class DataDictionary is a DataSet
34501>>>>>    
34501>>>>>    Procedure Construct_Object
34503>>>>>        Forward Send Construct_Object
34505>>>>>        
34505>>>>>        Property String  Existing_Key_Value                           ""
34506>>>>>        Property Integer Protect_Key_State                            True
34507>>>>>        
34507>>>>>        Property String  Key_Fields                                   ""
34508>>>>>        
34508>>>>>        // These are added to support the checking of DSO connections
34508>>>>>        // during deletes and saves. Only the first two properties are Public
34508>>>>>        Property Integer Validate_Save_Structure_Mode   DD_Validate_Structure_Once
34509>>>>>        Property Integer Validate_Delete_Structure_Mode DD_Validate_Structure_Once
34510>>>>>        Property Integer Save_Structure_Validated_State              False
34511>>>>>        Property Integer Cascade_Delete_Structure_Validated_State    False
34512>>>>>        Property Integer No_Cascade_Delete_Structure_Validated_State False
34513>>>>>        
34513>>>>>        Property Integer Last_Mark_Sequence_Id                       0
34514>>>>>        
34514>>>>>        // These are added for optimized traversal of
34514>>>>>        // entry-update and validation and maybe more
34514>>>>>        Property String  Visited_Fields          ""
34515>>>>>        Property Integer Visited_State           False
34516>>>>>        // means will be part of a downward delete (cascade deletable). This only has meaning
34516>>>>>        // when cascade_delete_state is True
34516>>>>>        Property Boolean DownDelete_State        False
34517>>>>>        
34517>>>>>        // these are set by the define_auto_increment, which is obsolete and has been replaced
34517>>>>>        // the Set Field_auto_increment method.
34517>>>>>        Property Integer Auto_Increment_Source_File  0
34518>>>>>        Property Integer Auto_Increment_Source_Field 0
34519>>>>>        Property Integer Auto_Increment_Dest_Field   0
34520>>>>>        
34520>>>>>        // used by the set Field_auto_increment method
34520>>>>>        // these are split into two arrays to make searching for the field easier
34520>>>>>        // the arrays should always be synched.
34520>>>>>        Property Integer[] pAutoIncrementFields
34521>>>>>        Property tDDFileField[] pAutoIncrementSysFileFields
34522>>>>>        
34522>>>>>        // Error Reporting Related
34522>>>>>        // If DD_Error_No_Report errors would be supressed (only ERR gets set)
34522>>>>>        Property Integer Error_Report_Mode           DD_Error_Report
34523>>>>>        
34523>>>>>        // During validation, this is the field being validated.
34523>>>>>        Property Integer Current_Validate_Field      0
34524>>>>>        
34524>>>>>        // when errors are redirected locally this maintains the original handler.
34524>>>>>        Property Integer Old_Error_Object_Id         0
34525>>>>>        
34525>>>>>        // Must be provided if local error handler is to be created
34525>>>>>        Property Integer Error_Processing_State      0
34526>>>>>        
34526>>>>>        // These should be changed most carefully and possible only and the
34526>>>>>        // DSO level. These allow you to defeat full field validation which
34526>>>>>        // makes it easier to corrupt data! Validate_DEO_Only_State limits
34526>>>>>        // save validation to DEOs (which is what data-sets have always done).
34526>>>>>        // Validate_foreign_File_State will skip validation under the following
34526>>>>>        // conditions: 1) DSO if for a parent (it did not originate the save).
34526>>>>>        //
34526>>>>>        Property Integer Validate_DEOs_Only_State    False
34527>>>>>        Property Integer Validate_Foreign_File_State True
34528>>>>>        // if set true, a field validation requested started with this
34528>>>>>        // DD will check all fields, even in an error is encountered
34528>>>>>        Property Integer Validate_All_Fields_State   False
34529>>>>>        
34529>>>>>        // If true, all entry updates will occur through the DD. Else
34529>>>>>        // saves occur through the DD and find occur through the DEOs
34529>>>>>        Property Integer EntryUpdateLocalState True // changed from false to true in 17.0
34530>>>>>        
34530>>>>>        // can be used by Refind_records method (remote refind of recs). Obsolete. Use prFindRowId
34530>>>>>        Property Integer Find_Record_Id 0
34531>>>>>        
34531>>>>>        // can be used by Refind_records method (remote refind of recs)
34531>>>>>        Property RowID prFindRowId (NullRowId())
34532>>>>>        // can be used by Refind_records method (remote refind of recs)
34532>>>>>        Property tDDChangedInfo pDDChangedInfo
34533>>>>>        
34533>>>>>        // Private: Id of field_objects container. This is not created until needed
34533>>>>>        Property Integer Field_Objects 0
34534>>>>>        
34534>>>>>        // Public: If set the DDO will never be foreign, allowing
34534>>>>>        // you to create new parents when a child is saved. This would
34534>>>>>        // normally only be set within the DDO and not the class. This would be
34534>>>>>        // used where a child table wants to save the parent (header) when the
34534>>>>>        // first child is saved. It would disable the foreign key and index
34534>>>>>        // find_Req and required settings (as well as any displayonly).
34534>>>>>        Property Integer Allow_Foreign_New_Save_State False
34535>>>>>        
34535>>>>>        Set pbDDAttach to True // set false to get (very) old attach_main_file_behavior
34536>>>>>        Set pbSmartRelate to True // Only relate if parent is attached via a DDO
34537>>>>>        
34537>>>>>        // If this is an alias file, this is the master file it is based on
34537>>>>>        Property Handle piMasterTable 0
34538>>>>>        
34538>>>>>        Property tDDServerInformation[] pServerInformation
34539>>>>>        
34539>>>>>        Property tDDRemembered[] pDDDefaults
34540>>>>>        
34540>>>>>        Property Boolean pbInSuperFind False
34541>>>>>        
34541>>>>>        // Create the local buffer.
34541>>>>>        Object Record_Buffer is a cRecordBuffer
34543>>>>>        End_Object
34544>>>>>        
34544>>>>>        // Create the extended field attributes array.
34544>>>>>        Object Field_Attributes is a Field_Attributes
34546>>>>>        End_Object
34547>>>>>        
34547>>>>>        // Create an array to maintain Status help values for each field
34547>>>>>        Object Statushelp_Array is an array
34549>>>>>        End_Object
34550>>>>>        
34550>>>>>        Object FieldMask_Array is an Field_Mask_array
34552>>>>>        End_Object
34553>>>>>        
34553>>>>>        
34553>>>>>        // keep track of all system/unknown files that must be set to
34553>>>>>        // default for smart file mode to work right.
34553>>>>>        Object System_File_obj is an Array
34555>>>>>        End_Object
34556>>>>>        
34556>>>>>        // used during Request_Validate
34556>>>>>        Property Handle[] pDDsWithFindReqErrors
34557>>>>>        
34557>>>>>        // Apply SQL filters in constrained finds
34557>>>>>        Property Boolean pbUseDDSQLFilters False
34558>>>>>        // If pbUseDDSQLFilters is true, this determines if the table global filter should be applied as well
34558>>>>>        Property Boolean pbApplyGlobalSQLFilters False
34559>>>>>        // Filter which will get applied before each DDO constrained find. If "", no filter is applied
34559>>>>>        Property String psSQLFilter ""
34560>>>>>        
34560>>>>>        // Old values for SQL Filters which are pushed and popped by StoreSQLDefaultFilters and RestoreSQLDefaultFilters
34560>>>>>        Property String psOldFilter ""
34561>>>>>        Property Boolean pbOldFilterActive
34562>>>>>        Property Boolean pbOldFilterEq
34563>>>>>        
34563>>>>>        // used to point to the composite child object that provides the SQL
34563>>>>>        // interfaces for a driver. This can be used with DAW drivers. Other drivers may require
34563>>>>>        // that you sub-class your DD and create a different object based on a custom class
34563>>>>>        Property Handle phoSQLHelper (Create(Self,RefClass(cDAWSQLDriverHelper)))
34564>>>>>        
34564>>>>>        
34564>>>>>        Property Handle pbInResync False
34565>>>>>        
34565>>>>>        Property Integer piPrimaryIndex -1      // Indicates the unique index used by the webapp view state system (-1 defaults to the primary key or recnum for embedded).
34566>>>>>        
34566>>>>>        Set Smart_FileMode_State to True  // extended DSOs should default to true
34567>>>>>        
34567>>>>>        Send Define_Fields // Developer Hook - define all field rules
34568>>>>>    End_Procedure
34569>>>>>    
34569>>>>>    // Returns 1 to indicate that this is a DD class.
34569>>>>>    Function Extended_DSO_State Returns Integer
34571>>>>>        Function_Return 1
34572>>>>>    End_Function
34573>>>>>    
34573>>>>>    
34573>>>>>    // Used to set up all XDS functions and rules. Called by construct_object
34573>>>>>    // and considered a bit more user friendly.
34573>>>>>    Procedure Define_Fields
34575>>>>>    End_Procedure
34576>>>>>    
34576>>>>>    
34576>>>>>    
34576>>>>>    // This message has been augmented to create a local recordbuffer for a
34576>>>>>    // file. We cannot do this earlier because we need the file to count the
34576>>>>>    // number of necessary fields.
34576>>>>>    Procedure Set Main_File Integer iFile
34578>>>>>        Integer iCurrent_File iMaster
34578>>>>>        Get piMasterTable to iMaster
34579>>>>>        If iMaster Begin
34581>>>>>            // is an alias condition
34581>>>>>            Forward Set Main_File to iFile
34583>>>>>            Send ReDefineAliasItems to (Record_Buffer(Self)) iFile
34584>>>>>        End
34584>>>>>>
34584>>>>>        Else If iFile Begin
34587>>>>>            Get Main_File to iCurrent_File
34588>>>>>            If (iCurrent_File and iCurrent_File <> iFile) Begin
34590>>>>>                Send Data_Set_Error -1 DFERR_PROGRAM DD_CANNOT_CHANGE_MAIN_FILE
34591>>>>>                Procedure_Return
34592>>>>>            End
34592>>>>>>
34592>>>>>            Forward Set Main_File to iFile
34594>>>>>            Send Create_Items to (Record_Buffer(Self)) iFile
34595>>>>>            Send Create_Items to (Field_Attributes(Self))
34596>>>>>        End
34596>>>>>>
34596>>>>>    End_Procedure
34597>>>>>    
34597>>>>>    // This procedure will update the Key_Fields property to include or
34597>>>>>    // excluded the fieldnumber passed in the list of fieldnumbers which make
34597>>>>>    // up an keyvalue.
34597>>>>>    Procedure Set Key_Field_State Integer iField Integer iState
34599>>>>>        String  sKeys
34599>>>>>        Set Key_Field_State of Record_Buffer iField to iState
34600>>>>>        Get Key_Fields to sKeys
34601>>>>>        Set Key_Fields to (Overstrike(If(iState, "X", " "), sKeys, iField))
34602>>>>>    End_Procedure
34603>>>>>    
34603>>>>>    // Will return TRUE if the field passed has been defined as a key.
34603>>>>>    Function Key_Field_State Integer iField Returns Integer
34605>>>>>        Integer iState
34605>>>>>        Get Key_Field_State of Record_Buffer iField to iState
34606>>>>>        Function_Return iState
34607>>>>>    End_Function
34608>>>>>    
34608>>>>>    // Returns complete key value.
34608>>>>>    Function Key_Value Returns String
34610>>>>>        String  sKeys
34610>>>>>        String  sKey_Value
34610>>>>>        String  sValue
34610>>>>>        Integer iField
34610>>>>>        Get Key_Fields to sKeys
34611>>>>>        Move "" to sKey_Value
34612>>>>>        Repeat
34612>>>>>>
34612>>>>>            Move (Pos( "X",sKeys)) to iField
34613>>>>>            If iField Begin
34615>>>>>                Get Field_Current_Value iField to sValue
34616>>>>>                Append sKey_Value sValue
34617>>>>>                Move (Overstrike(" ", sKeys, iField)) to sKeys
34618>>>>>            End
34618>>>>>>
34618>>>>>        Until not iField
34620>>>>>        Function_Return sKey_Value
34621>>>>>    End_Function
34622>>>>>    
34622>>>>>    // This procedure will be called whenever the Data_Set changes its
34622>>>>>    // Current_Record property, or after a Save, Delete or Clear operation.
34622>>>>>    // We send this message to the Record_Buffer object to update its values.
34622>>>>>    Procedure New_Current_Record Integer iOld Integer iNew
34624>>>>>        // does nothing, but exists if developer is using this for some purpose. Is called after
34624>>>>>        // OnNewCurrentRecord (if recnum based table)
34624>>>>>    End_Procedure
34625>>>>>    
34625>>>>>    Procedure OnNewCurrentRecord RowID riOld RowID riNew
34627>>>>>        Integer iObj
34627>>>>>        Integer iOldst
34627>>>>>        Integer iFoc
34627>>>>>        Integer iIsExt
34627>>>>>        Forward Send OnNewCurrentRecord riOld riNew
34629>>>>>        Move (Record_Buffer(Self)) to iObj
34630>>>>>        If iObj Begin
34632>>>>>            Send OnNewCurrentRecord of iObj riOld riNew
34633>>>>>            // must also refresh all defined extended fields
34633>>>>>            Send ExtendedFieldsRefresh (IsNullRowId(riNew)) // pass bCleared (true if a clear)
34634>>>>>            Get Focus of Desktop to iFoc
34635>>>>>            Get Extended_DEO_State of iFoc to iIsExt     // if focus is deo item
34636>>>>>            If iIsExt Begin                               // disable the state so
34638>>>>>                Get Entry_Refresh_State of iFoc to iOldSt // value will come
34639>>>>>                Set Entry_Refresh_State of iFoc to True   // from Local buffer.
34640>>>>>            End
34640>>>>>>
34640>>>>>            Set Existing_Key_Value to (Key_Value(Self))
34641>>>>>            If iIsExt ;                Set Entry_Refresh_State of iFoc to iOldSt
34644>>>>>            // Only set defaults when the record is new
34644>>>>>            If (IsNullRowId(riNew)) ;                Send Prepare_Default_Values
34647>>>>>        End
34647>>>>>>
34647>>>>>    End_Procedure
34648>>>>>    
34648>>>>>    // Shuts off change mode and sends initialize_default_values which is
34648>>>>>    // a user hook routine.
34648>>>>>    Procedure Prepare_Default_Values
34650>>>>>        Integer iOldState
34650>>>>>        Get Change_disabled_State to iOldState
34651>>>>>        Set Change_disabled_State to True
34652>>>>>        Send Private_Field_Defaults
34653>>>>>        // set defaults if this is the main DDO or the DDO is
34653>>>>>        // flagged as supporting saving new records when foreign (a parent)
34653>>>>>        If (Operation_Origin=Self or ;            Allow_Foreign_New_Save_State(Self)) ;            Send Field_Defaults
34656>>>>>        Send AssignDynamicDefaults
34657>>>>>        Set Change_disabled_State to iOldState
34658>>>>>    End_Procedure
34659>>>>>    
34659>>>>>    // Set all checkbox fields to default to False data value.
34659>>>>>    Procedure Private_Field_Defaults
34661>>>>>        Integer iField
34661>>>>>        Repeat
34661>>>>>>
34661>>>>>            Get Next_Validation_Type of (Field_Attributes(Self)) ;                FA_VALIDATION_TYPE_CHECKBOX iField to iField
34662>>>>>            If (iField = 0) ;                Procedure_Return
34665>>>>>            Set Field_Select_State  iField to False
34666>>>>>            Set Field_Changed_State iField to True
34667>>>>>        Loop
34668>>>>>>
34668>>>>>    End_Procedure
34669>>>>>    
34669>>>>>    // Will be called after a clear operation to let the application
34669>>>>>    // programmer set the default values for the record. This should be done
34669>>>>>    // by sending SET Field_Current_Value.
34669>>>>>    Procedure Field_Defaults
34671>>>>>    End_Procedure
34672>>>>>    
34672>>>>>    // Pass type and string value and see if this is valid data for this
34672>>>>>    // type. Currently we check for numbers and dates. Return non-zero
34672>>>>>    // if invalid.
34672>>>>>    Function IsDataInvalid Integer iType String sValue Returns Integer
34674>>>>>        Date    dVal
34674>>>>>        DateTime dtVal
34674>>>>>        Number  nVal
34674>>>>>        Integer bOK
34674>>>>>        Boolean bInvalid
34674>>>>>        
34674>>>>>        Move False to bInvalid
34675>>>>>        If (iType=DF_BCD or iType=DF_DATE or iType=DF_DATETIME) Begin
34677>>>>>            If (iType=DF_DATE) Begin
34679>>>>>                MoveTrapErr sValue to dVal
34680>>>>>                Move (Err) to bInvalid
34681>>>>>            End
34681>>>>>>
34681>>>>>            Else If (iType=DF_DATETIME) Begin
34684>>>>>                MoveTrapErr sValue to dtVal
34685>>>>>                Move (Err) to bInvalid
34686>>>>>//          Move (not(IsDateValid(dtVal))) to bInvalid //jjt-uncomment when working
34686>>>>>            End
34686>>>>>>
34686>>>>>            Else Begin
34687>>>>>                MoveTrapErr sValue to nVal // this may gen an error.
34688>>>>>                Move (Err) to bInvalid
34689>>>>>            End
34689>>>>>>
34689>>>>>            Move False to Err
34690>>>>>        End
34690>>>>>>
34690>>>>>        Function_Return bInvalid
34691>>>>>    End_Function
34692>>>>>    
34692>>>>>    // Return 1 if the passed DEO is part of the DDs list of connected DEOs
34692>>>>>    // First check if server of DEO is this DD. If so, we are owned. If not
34692>>>>>    // we must check the DD's UI DEO list.
34692>>>>>    // The passed object MUST be a valid DEO or an error will occur.
34692>>>>>    Function IsDEOOwned Integer iDEO Returns Integer
34694>>>>>        Integer iMax iCount
34694>>>>>        // if DEOs server is same as current DD it is owned. This is the
34694>>>>>        // fast check
34694>>>>>        If (Server(iDEO)=Self) ;            Function_Return 1
34697>>>>>        // else see if the DEO is in the DD's DEO list
34697>>>>>        Get Data_Set_User_Interface_Count to iMax
34698>>>>>        Decrement iMax
34699>>>>>        For iCount from 0 to iMax
34705>>>>>>
34705>>>>>            If (Data_Set_User_Interface(Self,iCount)=iDEO) ;                Function_Return 1
34708>>>>>        Loop
34709>>>>>>
34709>>>>>        Function_Return 0
34710>>>>>    End_Function
34711>>>>>    
34711>>>>>    // This procedure changes the field value of the given field in the
34711>>>>>    // record-buffer object.
34711>>>>>    // It also sends Field_Value_Changed to notify every the attached DEOs.
34711>>>>>    // This has been optimized so this message is only sent when data is
34711>>>>>    // actually changed.
34711>>>>>    Procedure Set Field_Current_Value Integer iField String sValue
34713>>>>>        Integer iObj
34713>>>>>        String sOldVal
34713>>>>>        Integer iChanged
34713>>>>>        Integer iType
34713>>>>>        Integer iFile
34713>>>>>        Integer iFocObj
34713>>>>>        Integer iCrnt
34713>>>>>        Integer bInvalid
34713>>>>>        Integer iIdentity
34713>>>>>        Address pData
34713>>>>>        Integer iLen
34713>>>>>        
34713>>>>>        Get Main_File to iFile
34714>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
34717>>>>>        
34717>>>>>        // Overlap fields are not supported directly in DDs. It is expected
34717>>>>>        // that you will use the underlying fields instead
34717>>>>>        If (iType = DF_OVERLAP) Begin
34719>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_OVERLAP_ERROR
34720>>>>>            Procedure_Return
34721>>>>>        End
34721>>>>>>
34721>>>>>        
34721>>>>>        If (iType=DF_TEXT or iType=DF_BINARY) Begin // if text or binary direct to pointer
34723>>>>>            Move sValue to sValue // intentional code: make sure passed sValue is a really string
34724>>>>>            Move (SizeOfString(sValue)) to iLen // length to copy
34725>>>>>            Move (AddressOf(sValue)) to pData   // first byte of string
34726>>>>>            // will gen error if ext. field does not exist
34726>>>>>            Set Field_Current_Pointer_Value iField iLen to pData
34727>>>>>            Procedure_Return
34728>>>>>        End
34728>>>>>>
34728>>>>>        
34728>>>>>        
34728>>>>>        // If date or number, force conversion so any error is detected before
34728>>>>>        // the buffer is updated. We don't want the record buffer to contain
34728>>>>>        // invalid data
34728>>>>>        Get IsDataInvalid iType sValue to bInvalid
34729>>>>>        If bInvalid ;         // If an error occurred we have            Procedure_Return  // a bad number or a bad date. Do no more!
34732>>>>>        
34732>>>>>        Move (Record_Buffer(Self)) to iObj
34733>>>>>        Get Value of iObj iField to sOldVal
34734>>>>>        
34734>>>>>        Set Value of iObj iField to sValue
34735>>>>>        
34735>>>>>        // Augmented to handle non DF databases JJT
34735>>>>>        // Some tables may use some field other then recnum for their record identity.
34735>>>>>        // This will be dfrecnum or some other numeric field. When this happens the DD have
34735>>>>>        // to field buffers for the same value. When an update occurs from the DD to the DB buffer
34735>>>>>        // an update can occur twice. If the values are the same, this does not matter. Else the highest
34735>>>>>        // field value will get the update (not recnum). So if someone changes recnum but not its real field
34735>>>>>        // finding may not work right. The DD is updated when a record is found and the API keeps the two values
34735>>>>>        // the same. If the user changes recnum, the real field does not get changed. That is what we are fixing
34735>>>>>        // here. Note that: 1) this has no effect on Dataflex databases (or any DB that has a 0 field recnum).
34735>>>>>        // 2) this type of update is rarely seen anyway (you have to change just the recnum and perform an entry_update).
34735>>>>>        //
34735>>>>>        // if field is recnum and record identity is not 0, we must also update the other field.
34735>>>>>        If (iField=0) Begin
34737>>>>>            Get_Attribute DF_FILE_RECORD_IDENTITY of iFile to iIdentity
34740>>>>>            If (iIdentity>0) ;                Set Value of iObj iIdentity to sValue
34743>>>>>        End
34743>>>>>>
34743>>>>>        
34743>>>>>        // When data-sets are working they should not update the
34743>>>>>        // DEOs.
34743>>>>>        
34743>>>>>        // prior to vdf7, we stopped all operation modes of non-zero. We now allow
34743>>>>>        // validates to pass through and we have a new operation mode for this. This
34743>>>>>        // should be ok, since we already allowed navigation validation through - we just
34743>>>>>        // stopped request_validate validations.
34743>>>>>        If (Operation_Mode=0 or Operation_Mode=MODE_VALIDATING) Begin
34745>>>>>            If (iType=DF_BCD) ;                Move (Number(sValue)<>Number(sOldVal)) to iChanged
34748>>>>>            Else If (iType=DF_DATE) ;                Move (Date(sValue)<>Date(sOldVal)) to iChanged
34752>>>>>            Else If (iType=DF_DATETIME) ;                Move (Cast(sValue,DateTime)<>Cast(sOldVal,DateTime)) to iChanged
34756>>>>>            Else ;                Move (sValue<>sOldVal) to iChanged
34758>>>>>            // if changed, notify all DEOs of this change
34758>>>>>            If iChanged ;                Send Field_Value_Changed iField sValue
34761>>>>>            Else Begin
34762>>>>>                // If here the set value did not change the contents of the DD.
34762>>>>>                // However, it is possible that the current focus DEO may contain
34762>>>>>                // a different value than the one we are setting. In such a case
34762>>>>>                // we must re-synchronize the DEO. Only the one DEO can be affected
34762>>>>>                // because it is the current focus deo/item that can contain a value
34762>>>>>                // that is not yet updated in the DD. This fixes a bug where the
34762>>>>>                // iexit was setting a value which was different from what was in
34762>>>>>                // the DEO but was the same as the old DD value (iExit is called
34762>>>>>                // before the DD is re-synched with the DEO). This could happen
34762>>>>>                // also by sending this message directly with a different value in
34762>>>>>                // the DEO focus item.
34762>>>>>                Get Focus of Desktop to iFocObj
34763>>>>>                // similar logic to Get Field_Current_Value. We check that the DEO
34763>>>>>                // is extended, that entry_refresh is not disabled and that the
34763>>>>>                // DEO's server is this DD.
34763>>>>>                If ( Extended_DEO_State(iFocObj) and ;                    (Entry_Refresh_State(iFocObj)=0)) Begin
34765>>>>>                    Get Current_item of iFocObj to iCrnt
34766>>>>>                    // If Focus DEO has same file and field and it is not checkbox
34766>>>>>                    // we must set its value. Set local value directly sets the value
34766>>>>>                    // in the DEO item. If we used value we'd get recursion!
34766>>>>>                    If ( Data_File(iFocObj,iCrnt)=iFile and ;                        Data_Field(iFocObj,iCrnt)=iField and ;                        IsDEOOwned(Self,iFocObj) and ;                        Checkbox_item_State(iFocObj,iCrnt)=0 ) ;                        Send File_Field_Value_Changed to iFocObj iFile iField sValue True
34769>>>>>                    //Set Local_Value of iFocObj iCrnt to sValue
34769>>>>>                End
34769>>>>>>
34769>>>>>            End
34769>>>>>>
34769>>>>>        End
34769>>>>>>
34769>>>>>    End_Procedure
34770>>>>>    
34770>>>>>    // Sets Field_Current_Value and Sets Field_Changed_State for passed field.
34770>>>>>    Procedure Set Field_Changed_Value Integer iField String sValue
34772>>>>>        Set Field_Changed_State iField to True
34773>>>>>        Set Field_Current_Value iField to sValue
34774>>>>>    End_Procedure
34775>>>>>    
34775>>>>>    
34775>>>>>    // This should only be set by a DEO that is changing a NoPut value. This should only happen when NoEnter=F
34775>>>>>    // for indexed findable noput deos. With foreign-field noputs we may store the value and update them
34775>>>>>    // for finds but we don't want them for saves. The cDDBuffer class handles this but it needs to
34775>>>>>    // know if this was a DEO NoPut update. DDOs have always allowed you to directly update foreign NoPut
34775>>>>>    // fields when the change did not come from a DEO.
34775>>>>>    Procedure Set Field_NoPutValueChangedByDeo Integer iField Boolean bChange
34777>>>>>        Set Item_ChangedByDeo of Record_Buffer iField to bChange
34778>>>>>    End_Procedure
34779>>>>>    
34779>>>>>    Procedure Set File_Field_NoPutValueChangedByDeo Integer iFile Integer iField Boolean bChange
34781>>>>>        Integer iDSO
34781>>>>>        Get Data_set iFile to iDSO
34782>>>>>        If iDSO Begin
34784>>>>>            Set Field_NoPutValueChangedByDeo of iDSO iField to bChange
34785>>>>>        End
34785>>>>>>
34785>>>>>    End_Procedure
34786>>>>>    
34786>>>>>    // Returns the value from the record buffer for the field of which the
34786>>>>>    // fieldnumber has been passed.
34786>>>>>    // If the file/field requested is the focus file/field the use the DEO's
34786>>>>>    // value.
34786>>>>>    Function Field_Current_Value Integer iField Returns String
34788>>>>>        Integer iType
34788>>>>>        Integer iFile
34788>>>>>        String  sValue
34788>>>>>        Integer iFoc
34788>>>>>        Integer iCrnt
34788>>>>>        Integer iFldSize iVoid
34788>>>>>        UChar[] UCData
34789>>>>>        
34789>>>>>        Get Focus of desktop to iFoc
34790>>>>>        Get Main_File to iFile
34791>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
34794>>>>>        
34794>>>>>        // Overlap fields are not supported directly in DDs. It is expected
34794>>>>>        // that you will use the underlying fields instead
34794>>>>>        If (iType=DF_OVERLAP) Begin
34796>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_OVERLAP_ERROR
34797>>>>>            Function_Return ''
34798>>>>>        End
34798>>>>>>
34798>>>>>        
34798>>>>>        If (iType=DF_TEXT or iType=DF_BINARY) Begin // if overlap, text or binary direct to pointer
34800>>>>>            Get Field_Current_UCAValue iField to UCData
34801>>>>>            
34801>>>>>            // we assume a string is passed here. If we return to a string the
34801>>>>>            // pointer message will convert this to a string. Check that max string
34801>>>>>            // length is not larger than Max_Argument_Size has been removed.
34801>>>>>            Move (SizeOfArray(UCData)) to iFldSize
34802>>>>>            Move (UCharArrayToString(UCData)) to sValue
34803>>>>>            // This function has always returned the value as a 0 delimited string.
34803>>>>>            // Therefore trim at first zero. This means that you should not use this method
34803>>>>>            // with Binary types as embedded zeros will cause a truncation.
34803>>>>>            Move (CString(sValue)) to sValue
34804>>>>>            Function_Return sValue
34805>>>>>        End
34805>>>>>>
34805>>>>>        
34805>>>>>        // This was extended to also make sure that the focus's server
34805>>>>>        // is this DD. This prevent the (very unlikely) case of a focus
34805>>>>>        // file/field being the right file/field but for a different view.
34805>>>>>        // 12.1: Also check operation mode, if within an operation assume that the
34805>>>>>        // ddos have the information they need from the deos. During a refresh we don't
34805>>>>>        // the data to be taken from a DEO - the DD buffer has the information you want. Note that
34805>>>>>        // we also changed all methods that set operation_mode to update the DD with the current
34805>>>>>        // DEO field, so the buffer is always correct.
34805>>>>>        If ( (OPERATION_MODE=MODE_WAITING) and ;            Extended_DEO_State(iFoc) and (Entry_Refresh_State(iFoc)=0) ) Begin
34807>>>>>            Get Current_item of iFoc to iCrnt
34808>>>>>            If ( Data_File(iFoc,iCrnt)=iFile and Data_Field(iFoc,iCrnt)=iField and ;                IsDEOOwned(Self,iFoc) and ;                (Checkbox_item_State(iFoc,iCrnt)=0) ) Begin
34810>>>>>                Get Data_Value of iFoc iCrnt to sValue
34811>>>>>            End
34811>>>>>>
34811>>>>>            Else Begin
34812>>>>>                Get Value of (Record_Buffer(Self)) iField to sValue
34813>>>>>            End
34813>>>>>>
34813>>>>>        End
34813>>>>>>
34813>>>>>        Else Begin
34814>>>>>            Get Value of (Record_Buffer(Self)) iField to sValue
34815>>>>>        End
34815>>>>>>
34815>>>>>        
34815>>>>>        // cast value to the proper datatype
34815>>>>>        If (iType=DF_BCD) Begin
34817>>>>>            Function_Return (Number(sValue))
34818>>>>>        End
34818>>>>>>
34818>>>>>        Else If (iType=DF_DATE) Begin
34821>>>>>            Function_Return (Date(sValue))
34822>>>>>        End
34822>>>>>>
34822>>>>>        Else If (iType=DF_DATETIME) Begin
34825>>>>>            Function_Return (Cast(sValue,DateTime))
34826>>>>>        End
34826>>>>>>
34826>>>>>        // else return as string
34826>>>>>        Function_Return sValue
34827>>>>>    End_Function
34828>>>>>    
34828>>>>>    // This sets a default value without setting the DSO's changed_State
34828>>>>>    Procedure Set Field_Default_Value Integer iField String sValue
34830>>>>>        Integer iOldState
34830>>>>>        Get Change_disabled_State to iOldState
34831>>>>>        Set Change_disabled_State to True
34832>>>>>        Set Field_Changed_Value iField to sValue
34833>>>>>        Set Change_disabled_State to iOldState
34834>>>>>    End_Procedure
34835>>>>>    
34835>>>>>    Procedure Set File_Field_default_Value Integer iFile Integer iField String sValue
34837>>>>>        Integer iDSO
34837>>>>>        Get Data_set iFile to iDSO
34838>>>>>        If iDSO ;            Set Field_default_Value of iDSO iField to sValue
34841>>>>>    End_Procedure
34842>>>>>    
34842>>>>>    // Methods to set and get the value of a field. When set all DSOs and
34842>>>>>    // DEOs are notified.
34842>>>>>    Procedure Set File_Field_Current_Value Integer iFile Integer iField String sValue
34844>>>>>        Integer iDSO
34844>>>>>        Get Data_set iFile to iDSO
34845>>>>>        If iDSO ;            Set Field_Current_Value of iDSO iField to sValue
34848>>>>>    End_Procedure
34849>>>>>    
34849>>>>>    Procedure Set File_Field_Changed_Value Integer iFile Integer iField String sValue
34851>>>>>        Integer iDSO
34851>>>>>        Get Data_set iFile to iDSO
34852>>>>>        If iDSO ;            Set Field_Changed_Value of iDSO iField to sValue
34855>>>>>    End_Procedure
34856>>>>>    
34856>>>>>    Function File_Field_Current_Value Integer iFile Integer iField Returns String
34858>>>>>        Integer iDSO
34858>>>>>        String sValue
34858>>>>>        Get Data_set iFile to iDSO
34859>>>>>        If iDSO ;            Get Field_Current_Value of iDSO iField to sValue
34862>>>>>        Function_Return sValue
34863>>>>>    End_Function
34864>>>>>    
34864>>>>>    // This procedure will notify every attached DEO that the value of a
34864>>>>>    // field has been changed. Every DEO needs to update its value to reflect
34864>>>>>    // the new value.
34864>>>>>    Procedure Field_Value_Changed Integer iField String sValue
34866>>>>>        Integer iMax
34866>>>>>        Integer iCount
34866>>>>>        Integer iDEO
34866>>>>>        Integer iMain_File
34866>>>>>        Integer iNoChange
34866>>>>>        Get Change_Disabled_State to iNoChange
34867>>>>>        Get Main_File to iMain_File
34868>>>>>        Get Data_Set_User_Interface_Count to iMax
34869>>>>>        Decrement iMax
34870>>>>>        For iCount from 0 to iMax
34876>>>>>>
34876>>>>>            Get Data_Set_User_Interface iCount to iDEO
34877>>>>>            If (Extended_DEO_State(iDEO) ) Begin
34879>>>>>                Send File_Field_Value_Changed to iDEO iMain_File iField sValue iNoChange
34880>>>>>            End
34880>>>>>>
34880>>>>>        Loop
34881>>>>>>
34881>>>>>    End_Procedure
34882>>>>>    
34882>>>>>    // Gets/Sets Field_Changed_State of the passed field. Will Set Changed_
34882>>>>>    // state if appropriate (if change_disabled_state is false)
34882>>>>>    Function Field_Changed_State Integer iField Returns Integer
34884>>>>>        Function_Return ;            (Item_Changed_State(Record_Buffer(Self), iField))
34885>>>>>    End_Function
34886>>>>>    
34886>>>>>    
34886>>>>>    // Handle NoPut here. If the field is noput set the field_changed_State but do not set the
34886>>>>>    // DD's changed_state. As of 17.0, we changed the rule so that noput DEOs always update the DD.
34886>>>>>    // They set the field_Current_value and they set the field_changed_state. If noput they will
34886>>>>>    // not set changed_state. This now makes windows and web consistent.
34886>>>>>    Procedure Set Field_Changed_State Integer iField Integer iState
34888>>>>>        Boolean bNoPut bOldSt bIsCommitted
34888>>>>>        
34888>>>>>        Get Field_Option iField DD_NOPUT to bNoPut
34889>>>>>        If not bNoPut Begin // if not noput, see if this is a committed and therefore noput
34891>>>>>            Get IsCommitted iField to bIsCommitted
34892>>>>>            If bIsCommitted Begin
34894>>>>>                Get IsFieldCommitted iField to bNoPut
34895>>>>>            End
34895>>>>>>
34895>>>>>        End
34895>>>>>>
34895>>>>>        
34895>>>>>        If bNoPut Begin
34897>>>>>            Get Change_disabled_State to bOldSt
34898>>>>>            Set Change_disabled_State to True
34899>>>>>        End
34899>>>>>>
34899>>>>>        
34899>>>>>        Set Item_Changed_State of (Record_Buffer(Self)) iField to iState
34900>>>>>        // the cDDBuffer class item_changed_state does not attempt to set
34900>>>>>        // changed_state, so we do it here. This will allow for future
34900>>>>>        // greater flexibilities.
34900>>>>>        If (iState) Begin
34902>>>>>            Set Changed_State of (Record_Buffer(Self)) to True
34903>>>>>        End
34903>>>>>>
34903>>>>>        If bNoPut Begin
34905>>>>>            Set Change_disabled_State to bOldSt
34906>>>>>        End
34906>>>>>>
34906>>>>>        
34906>>>>>    End_Procedure
34907>>>>>    
34907>>>>>    // As above, but passes both file and field
34907>>>>>    Function File_Field_Changed_State Integer iFile Integer iField Returns Integer
34909>>>>>        Integer iDSO
34909>>>>>        Get Data_Set iFile to iDSO
34910>>>>>        If iDSO ;            Function_Return (Field_Changed_State(iDSO, iField))
34913>>>>>    End_Function
34914>>>>>    
34914>>>>>    Procedure Set File_Field_Changed_State Integer iFile Integer iField Integer iState
34916>>>>>        Integer iDSO
34916>>>>>        Get Data_Set iFile to iDSO
34917>>>>>        If iDSO ;            Set Field_Changed_State of iDSO iField to iState
34920>>>>>    End_Procedure
34921>>>>>    
34921>>>>>    // This simulates entering a value into a field from a keyboard. Pass the
34921>>>>>    // Field and DD Options and the value. It is up to you to pass the proper
34921>>>>>    // DD options. This is normally sent by File_Field_Entry and you are
34921>>>>>    // advised to use that message and not this one.
34921>>>>>    Procedure Set Field_Entry Integer iField Integer iOpts Integer bShowErr String sValue
34923>>>>>        Integer iFile
34923>>>>>        Integer iType
34923>>>>>        Integer bChanged
34923>>>>>        Integer bInvalid
34923>>>>>        Integer hObj
34923>>>>>        String sOldVal
34923>>>>>        Address pData
34923>>>>>        Integer iLen
34923>>>>>        
34923>>>>>        Get Main_File to iFile
34924>>>>>        
34924>>>>>        // if No-enter or Displayonly, this shouldn't be changed. We will
34924>>>>>        // let NoPut through, since a user might need it for finding.
34924>>>>>        If (iOpts iand DD_NOENTER) ;            Procedure_Return
34927>>>>>        
34927>>>>>        // Force a caplsock if required
34927>>>>>        If (iOpts iand DD_CAPSLOCK) ;            Move (Uppercase(sValue)) to sValue
34930>>>>>        
34930>>>>>        // If date or number, force conversion so any error is detected before
34930>>>>>        // the buffer is updated. We don't want the record buffer to contain
34930>>>>>        // invalid data
34930>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
34933>>>>>        
34933>>>>>        // Overlap fields are not supported directly in DDs. It is expected
34933>>>>>        // that you will use the underlying fields instead
34933>>>>>        If (iType = DF_OVERLAP) Begin
34935>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_OVERLAP_ERROR
34936>>>>>            Procedure_Return
34937>>>>>        End
34937>>>>>>
34937>>>>>        
34937>>>>>        If (iType=DF_TEXT or iType=DF_BINARY) Begin // if text or binary direct to pointer
34939>>>>>            Move sValue to sValue // intentional code: make sure passed sValue is a really string
34940>>>>>            Move (SizeOfString(sValue)) to iLen // length to copy
34941>>>>>            Move (AddressOf(sValue)) to pData   // first byte of string
34942>>>>>            // will gen error if ext. field does not exist
34942>>>>>            Set Field_Pointer_Entry iField iOpts iLen bShowErr to pData
34943>>>>>            Procedure_Return
34944>>>>>        End
34944>>>>>>
34944>>>>>        
34944>>>>>        Get IsDataInvalid iType sValue to bInvalid
34945>>>>>        If bInvalid Begin     // If an error occurred we have
34947>>>>>            If bShowErr ;                Send Data_set_error iField (If(iType=DF_DATE or iType=DF_DATETIME, DFERR_ENTER_VALID_DATE, DFERR_BAD_ENTRY)) ;                (" ("-sValue-")")
34950>>>>>            Procedure_Return  // a bad number or a bad date. Do no more!
34951>>>>>        End
34951>>>>>>
34951>>>>>        // update the value only if the value is changed.
34951>>>>>        Move (Record_Buffer(Self)) to hObj
34952>>>>>        Get Value of hObj iField to sOldVal
34953>>>>>        If (iType=DF_BCD) ;            Move (Number(sValue)<>Number(sOldVal)) to bChanged
34956>>>>>        Else If (iType=DF_DATE) ;            Move (Date(sValue)<>Date(sOldVal)) to bChanged
34960>>>>>        Else If (iType=DF_DATETIME) ;            Move (Cast(sValue,DateTime)<>Cast(sOldVal,DateTime)) to bChanged
34964>>>>>        Else ;            Move (sValue<>sOldVal) to bChanged
34966>>>>>        
34966>>>>>        // if changed or force put, update the value.
34966>>>>>        If ( bChanged or (iOpts iand DD_FORCEPUT) ) ;            Set Field_Current_Value iField to sValue
34969>>>>>        
34969>>>>>        // Set changed state if changed. This is an improvement on DEOs which would set changed-state for
34969>>>>>        // a no-put. Set Field_Changed_State will not set Changed_state if it is noput
34969>>>>>        If ( bChanged) Begin
34971>>>>>            Set Field_Changed_State iField to True
34972>>>>>            // if noput (but not noenter) we must tell the DDO that this should not be
34972>>>>>            // updated during a save.
34972>>>>>            If (iOpts iand DD_NOPUT) Begin
34974>>>>>                Set Field_NoPutValueChangedByDeo iField to True
34975>>>>>            End
34975>>>>>>
34975>>>>>        End
34975>>>>>>
34975>>>>>        
34975>>>>>        // perform autofinds if needed. Note that required checking will occur as
34975>>>>>        // part of validation.
34975>>>>>        // We will only autofind if the field value is changed. This is consistent with
34975>>>>>        // DEOs which do not autofind on unchanged values. This provides optimizations
34975>>>>>        // when a parent record is already loaded.
34975>>>>>        If (bChanged or Field_Changed_state(Self,iField)) Begin
34977>>>>>            // note that autofind is 1 and _ge is 100000001 (8th bit set). So order of
34977>>>>>            // testing is important and make sure we test for exact bit match. Must first
34977>>>>>            // test _GE and the EQ (because EQ bit is part of GE)
34977>>>>>            If ((iOpts iand DD_AUTOFIND_GE)=DD_AUTOFIND_GE) ;                Send File_Field_AutoFind iFile iField GE
34980>>>>>            Else If ((iOpts iand DD_AUTOFIND)=DD_AUTOFIND) ;                Send File_Field_AutoFind iFile iField EQ
34984>>>>>        End
34984>>>>>>
34984>>>>>        
34984>>>>>    End_Procedure
34985>>>>>    
34985>>>>>    // This returns file-field options for a Field_Entry type of environment.
34985>>>>>    // It will strip autofind from main-file DDs but leave foreign field alone.
34985>>>>>    // This is needed for Field_entry. Otherwise adding a field value to an autofind
34985>>>>>    // for save or find causes an autofind to trigger first which either causes the
34985>>>>>    // wrong rec to save or for a double find.
34985>>>>>    Function File_Field_Entry_Options Integer iFile Integer iField Returns Integer
34987>>>>>        Integer iOpts
34987>>>>>        // this will get the appropriate field and foreign field opts
34987>>>>>        Get File_Field_Options iFile iField to iOpts
34988>>>>>        // If the main file (not foreign) we will strip autofind. Autofind should not
34988>>>>>        // be an automatic part of main file entry while it should with foreign fields.
34988>>>>>        If (iFile=Main_File(Self)) Begin
34990>>>>>            // note that autofind is 1 and _ge is 100000001 (8th bit set). So order of
34990>>>>>            // testing is important and make sure we test for exact bit match. Must first
34990>>>>>            // test _GE and the EQ (because EQ bit is part of GE)
34990>>>>>            If ((iOpts iand DD_AUTOFIND_GE)=DD_AUTOFIND_GE) ;                Move (iOpts - DD_AUTOFIND_GE) to iOpts
34993>>>>>            Else If ((iOpts iand DD_AUTOFIND)=DD_AUTOFIND)  ;                Move (iOpts - DD_AUTOFIND)    to iOpts
34997>>>>>        End
34997>>>>>>
34997>>>>>        Function_Return iOpts
34998>>>>>    End_Function
34999>>>>>    
34999>>>>>    // This simulates entering a value into a field from a keyboard. The DD
34999>>>>>    // receiving this message determines if it is Main or Foreign (just like
34999>>>>>    // server). It will do an uppercase, will respect No_Enter and DisplayOnly
34999>>>>>    // and will do a autofind if required. It does not do a field validation.
34999>>>>>    Procedure Set File_Field_Entry Integer iFile Integer iField Integer bShowErr String sValue
35001>>>>>        Integer iOpts
35001>>>>>        Integer hDD
35001>>>>>        Get Data_Set iFile to hDD
35002>>>>>        If hDD Begin
35004>>>>>            // this will get the appropriate field and foreign field opts
35004>>>>>            Get File_Field_Entry_Options iFile iField to iOpts
35005>>>>>            Set Field_Entry of hDD iField iOpts bShowErr to sValue
35006>>>>>        End
35006>>>>>>
35006>>>>>    End_Procedure
35007>>>>>    
35007>>>>>    // return object ID of extended field, 0 if none
35007>>>>>    Function Field_Object Integer iField Returns Integer
35009>>>>>        Integer hoFlds hoField
35009>>>>>        Boolean bAutoAssign
35009>>>>>        Get Field_Objects to hoFlds
35010>>>>>        If hoFlds Begin
35012>>>>>            Get Field_Object of hoFlds iField to hoField
35013>>>>>        End
35013>>>>>>
35013>>>>>        If not hoField Begin
35015>>>>>            Send DefineExtendedField iField // will create field_objects and Field_Object as needed
35016>>>>>            Get Field_Objects to hoFlds
35017>>>>>            Get Field_Object of hoFlds iField to hoField
35018>>>>>        End
35018>>>>>>
35018>>>>>        Function_Return hoField
35019>>>>>    End_Function
35020>>>>>    
35020>>>>>    // This is the same as Field_entry except the value is passed via a
35020>>>>>    // pointer. If data-type is extended (text/binary) it will use and an
35020>>>>>    // extended field object to handle this. If date/number/string we will
35020>>>>>    // convert this to a string and use Field_Entry. It is the caller's
35020>>>>>    // responsibility to pass a valid pointer to valid data...else !@#$%^&^
35020>>>>>    // If an extended Field object is needed and not defined, an error is
35020>>>>>    // returned. If pointer is null, assume empty string passed (this is a
35020>>>>>    // change as of 8.3 - it used to ignore null pointers)
35020>>>>>    Procedure Set Field_Pointer_Entry Integer iField Integer iOpts Integer iLen Integer bShowErr Address pData
35022>>>>>        Integer hFld
35022>>>>>        String  sValue
35022>>>>>        Integer iFile
35022>>>>>        Integer iType
35022>>>>>        
35022>>>>>        Get Main_file to iFile
35023>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
35026>>>>>        
35026>>>>>        // Overlap fields are not supported directly in DDs. It is expected
35026>>>>>        // that you will use the underlying fields instead
35026>>>>>        If (iType = DF_OVERLAP) ;            Send Data_set_Error iField DFERR_PROGRAM  DD_EXTENDED_OVERLAP_ERROR
35029>>>>>        Else If (iType=DF_TEXT or iType=DF_BINARY) Begin
35032>>>>>            Get Field_Object iField to hFld // the object that handles this large text
35033>>>>>            If hFld ;                Set Field_pEntry of hFld iOpts iLen bShowErr to pData
35036>>>>>            Else ;                Send Data_set_Error iField DFERR_PROGRAM  DD_EXTENDED_FIELD_NOT_DEFINED
35038>>>>>        End
35038>>>>>>
35038>>>>>        Else Begin
35039>>>>>            // if number,date or string convert the pointer data to
35039>>>>>            // string data and do a normal entry with it.
35039>>>>>            Move (PointerToString(pData)) to sValue
35040>>>>>            Set Field_Entry iField iOpts bShowErr to sValue
35041>>>>>        End
35041>>>>>>
35041>>>>>    End_Procedure
35042>>>>>    
35042>>>>>    // This is the same as File_Field_entry except the value is passed via a
35042>>>>>    // pointer. See Field_Pointer_Entry for more on this
35042>>>>>    Procedure Set File_Field_Pointer_Entry Integer iFile Integer iField Integer iLen Integer bShowErr Address pData
35044>>>>>        Integer iOpts
35044>>>>>        Integer hDD
35044>>>>>        Get Data_Set iFile to hDD
35045>>>>>        If hDD Begin
35047>>>>>            // this will get the appropriate field and foreign field opts
35047>>>>>            Get File_Field_Entry_Options iFile iField to iOpts
35048>>>>>            Set Field_Pointer_Entry of hDD iField iOpts iLen bShowErr to pData
35049>>>>>        End
35049>>>>>>
35049>>>>>    End_Procedure
35050>>>>>    
35050>>>>>    // This is the same as Field_Current_Value except the value is passed via
35050>>>>>    // a pointer. If data-type is extended (text/binary) it will use and an
35050>>>>>    // extended field object to handle this. If date/number/string we will
35050>>>>>    // convert this to a string and use Field_Entry. It is the caller's
35050>>>>>    // responsibility to pass a valid pointer to valid data...else !@#$%^&^
35050>>>>>    // If an extended Field object is needed and not defined, an error is
35050>>>>>    // returned. If pointer is null, assume empty string passed (this is a
35050>>>>>    // change as of 8.3 - it used to ignore null pointers)
35050>>>>>    Procedure Set Field_Current_Pointer_Value Integer iField Integer iLen Address pData
35052>>>>>        Integer hFld
35052>>>>>        String  sValue
35052>>>>>        Integer iFile iType iCrnt
35052>>>>>        Handle iFocObj
35052>>>>>        Boolean bChanged
35052>>>>>        
35052>>>>>        Get Main_file to iFile
35053>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
35056>>>>>        
35056>>>>>        // Overlap fields are not supported directly in DDs. It is expected
35056>>>>>        // that you will use the underlying fields instead
35056>>>>>        If (iType = DF_OVERLAP) Begin
35058>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_OVERLAP_ERROR
35059>>>>>            Procedure_Return
35060>>>>>        End
35060>>>>>>
35060>>>>>        
35060>>>>>        If (iType<>DF_TEXT and iType<>DF_BINARY) Begin
35062>>>>>            // if number,date or string convert the pointer data to
35062>>>>>            // string data and do a normal entry with it.
35062>>>>>            Move (PointerToString(pData)) to sValue  // create string from pointer data
35063>>>>>            Set Field_Current_Value iField to sValue
35064>>>>>            Procedure_Return
35065>>>>>        End
35065>>>>>>
35065>>>>>        
35065>>>>>        Get Field_Object iField to hFld // the object that handles this large text
35066>>>>>        If not hFld Begin
35068>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_FIELD_NOT_DEFINED
35069>>>>>            Procedure_Return
35070>>>>>        End
35070>>>>>>
35070>>>>>        
35070>>>>>        Get Is_pValueChanged of hFld iLen pData to bChanged
35071>>>>>        If bChanged Begin
35073>>>>>            Set Field_pValue of hFld iLen to pData
35074>>>>>            Send Field_Pointer_Value_Changed iField pData
35075>>>>>        End
35075>>>>>>
35075>>>>>        Else Begin
35076>>>>>            // If here the set value did not change the contents of the DD.
35076>>>>>            // However, it is possible that the current focus DEO may contain
35076>>>>>            // a different value than the one we are setting. In such a case
35076>>>>>            // we must re-synchronize the DEO. Only the one DEO can be affected
35076>>>>>            // because it is the current focus deo/item that can contain a value
35076>>>>>            // that is not yet updated in the DD. This fixes a bug where the
35076>>>>>            // iexit was setting a value which was different from what was in
35076>>>>>            // the DEO but was the same as the old DD value (iExit is called
35076>>>>>            // before the DD is re-synched with the DEO). This could happen
35076>>>>>            // also by sending this message directly with a different value in
35076>>>>>            // the DEO focus item.
35076>>>>>            Get Focus of Desktop to iFocObj
35077>>>>>            // similar logic to Get Field_Pointer_Current_Value. We check that the DEO
35077>>>>>            // is extended, that entry_refresh is not disabled and that the
35077>>>>>            // DEO's server is this DD.
35077>>>>>            If ( Extended_DEO_State(iFocObj) and (Entry_Refresh_State(iFocObj)=0)) Begin
35079>>>>>                // If Focus DEO has same file and field and it is not checkbox
35079>>>>>                // we must set its value. Set local value directly sets the value
35079>>>>>                // in the DEO item. If we used value we'd get recursion!
35079>>>>>                Get Current_item of iFocObj to iCrnt
35080>>>>>                If ( Data_File(iFocObj,iCrnt)=iFile and ;                    Data_Field(iFocObj,iCrnt)=iField and ;                    IsDEOOwned(Self,iFocObj) ) Begin
35082>>>>>                    Send File_Field_Pointer_Value_Changed to iFocObj iFile iField pData True
35083>>>>>                End
35083>>>>>>
35083>>>>>            End
35083>>>>>>
35083>>>>>        End
35083>>>>>>
35083>>>>>    End_Procedure
35084>>>>>    
35084>>>>>    // This is never called but it needed for the compiler. Required for apps DDs that don't compile in a DEO interface
35084>>>>>    Procedure File_Field_Pointer_Value_Changed Integer iFile Integer iField Address pValue Integer iChangeDisabled
35086>>>>>    End_Procedure
35087>>>>>    
35087>>>>>    Procedure Field_Pointer_Value_Changed Integer iField Address pValue
35089>>>>>        Integer iMax
35089>>>>>        Integer iCount
35089>>>>>        Integer iDEO
35089>>>>>        Integer iMain_File
35089>>>>>        Integer iNoChange
35089>>>>>        Get Change_Disabled_State to iNoChange
35090>>>>>        Get Main_File to iMain_File
35091>>>>>        Get Data_Set_User_Interface_Count to iMax
35092>>>>>        Decrement iMax
35093>>>>>        For iCount from 0 to iMax
35099>>>>>>
35099>>>>>            Get Data_Set_User_Interface iCount to iDEO
35100>>>>>            If (Extended_DEO_State(iDEO) ) Begin
35102>>>>>                Send File_Field_Pointer_Value_Changed to iDEO iMain_File iField pValue iNoChange
35103>>>>>            End
35103>>>>>>
35103>>>>>        Loop
35104>>>>>>
35104>>>>>    End_Procedure
35105>>>>>    
35105>>>>>    // This is the same as File_Field_Current_Value except the value is passed
35105>>>>>    // via a pointer. See Field_current_Pointer_Value for more on this
35105>>>>>    Procedure Set File_Field_Current_Pointer_Value Integer iFile Integer iField Integer iLen Address pData
35107>>>>>        Integer hDD
35107>>>>>        Get Data_Set iFile to hDD
35108>>>>>        If hDD ;            Set Field_Current_Pointer_Value of hDD iField iLen to pData
35111>>>>>    End_Procedure
35112>>>>>    
35112>>>>>    // This returns the data pointer to the extended field. At this point
35112>>>>>    // this is the data. Be careful if you change the data, be even more
35112>>>>>    // careful if you change the pointer (don't do it!!!!)
35112>>>>>    Function Field_Current_Pointer_Value Integer iField Returns Address
35114>>>>>        Integer hFld
35114>>>>>        Handle iFoc
35114>>>>>        
35114>>>>>        Get Field_Object iField to hFld // the object that handles this large text
35115>>>>>        If not hFld Begin
35117>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_FIELD_NOT_DEFINED
35118>>>>>            Function_Return 0
35119>>>>>        End
35119>>>>>>
35119>>>>>        
35119>>>>>        
35119>>>>>        // This was extended to also make sure that the focus's server
35119>>>>>        // is this DD. This prevent the (very unlikely) case of a focus
35119>>>>>        // file/field being the right file/field but for a different view.
35119>>>>>        // 12.1: Also check operation mode, if within an operation assume that the
35119>>>>>        // ddos have the information they need from the deos. During a refresh we don't
35119>>>>>        // the data to be taken from a DEO - the DD buffer has the information you want. Note that
35119>>>>>        // we also changed all methods that set operation_mode to update the DD with the current
35119>>>>>        // DEO field, so the buffer is always correct.
35119>>>>>        Get Focus of Desktop to iFoc
35120>>>>>        If ( (OPERATION_MODE=MODE_WAITING) and ;            Extended_DEO_State(iFoc) and (Entry_Refresh_State(iFoc)=0) ) Begin
35122>>>>>            If ( Data_File(iFoc,0)=Main_File(Self) and Data_Field(iFoc,0)=iField and ;                IsDEOOwned(Self,iFoc) ) Begin
35124>>>>>                Send Update_Focus_Field
35125>>>>>            End
35125>>>>>>
35125>>>>>        End
35125>>>>>>
35125>>>>>        
35125>>>>>        Function_Return (FieldPointer(hFld))
35126>>>>>    End_Function
35127>>>>>    
35127>>>>>    
35127>>>>>    Function Field_Current_UCAValue Integer iField Returns UChar[]
35129>>>>>        Integer hFld
35129>>>>>        Handle iFoc
35129>>>>>        UChar[] Data
35130>>>>>        
35130>>>>>        Get Field_Object iField to hFld // the object that handles this large text
35131>>>>>        If not hFld Begin
35133>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_FIELD_NOT_DEFINED
35134>>>>>            Function_Return 0
35135>>>>>        End
35135>>>>>>
35135>>>>>        
35135>>>>>        
35135>>>>>        // This was extended to also make sure that the focus's server
35135>>>>>        // is this DD. This prevent the (very unlikely) case of a focus
35135>>>>>        // file/field being the right file/field but for a different view.
35135>>>>>        // 12.1: Also check operation mode, if within an operation assume that the
35135>>>>>        // ddos have the information they need from the deos. During a refresh we don't
35135>>>>>        // the data to be taken from a DEO - the DD buffer has the information you want. Note that
35135>>>>>        // we also changed all methods that set operation_mode to update the DD with the current
35135>>>>>        // DEO field, so the buffer is always correct.
35135>>>>>        Get Focus of Desktop to iFoc
35136>>>>>        If ( (OPERATION_MODE=MODE_WAITING) and ;            Extended_DEO_State(iFoc) and (Entry_Refresh_State(iFoc)=0) ) Begin
35138>>>>>            If ( Data_File(iFoc,0)=Main_File(Self) and Data_Field(iFoc,0)=iField and ;                IsDEOOwned(Self,iFoc) ) Begin
35140>>>>>                Send Update_Focus_Field
35141>>>>>            End
35141>>>>>>
35141>>>>>        End
35141>>>>>>
35141>>>>>        Get FieldArray of hFld to Data
35142>>>>>        Function_Return Data
35143>>>>>    End_Function
35144>>>>>    
35144>>>>>    Function File_Field_Current_Pointer_Value Integer iFile Integer iField Returns Address
35146>>>>>        Address pValue
35146>>>>>        Integer hDD
35146>>>>>        Get Data_Set iFile to hDD
35147>>>>>        If hDD Begin
35149>>>>>            Get Field_Current_Pointer_Value of hDD iField to pValue // return pointer to first byte of
35150>>>>>            Function_Return pValue                                  // data
35151>>>>>        End
35151>>>>>>
35151>>>>>    End_Function
35152>>>>>    
35152>>>>>    Procedure Set Field_Current_UCAValue Integer iField UChar[] Data
35154>>>>>        Set Field_Current_Pointer_Value iField (SizeOfArray(Data)) to (AddressOf(Data))
35155>>>>>    End_Procedure
35156>>>>>    
35156>>>>>    Procedure Set File_Field_Current_UCAValue Integer iFile Integer iField UChar[] Data
35158>>>>>        Integer hDD
35158>>>>>        Get Data_Set iFile to hDD
35159>>>>>        If hDD Begin
35161>>>>>            Set Field_Current_UCAValue of hDD iField to Data
35162>>>>>        End
35162>>>>>>
35162>>>>>    End_Procedure
35163>>>>>    
35163>>>>>    Function File_Field_Current_UCAValue Integer iFile Integer iField Returns UChar[]
35165>>>>>        UChar[] UCValue
35166>>>>>        Handle hDD
35166>>>>>        Get Data_Set iFile to hDD
35167>>>>>        If hDD Begin
35169>>>>>            Get Field_Current_UCAValue of hDD iField to UCValue // return pointer to first byte of
35170>>>>>            Function_Return UCValue                              // data
35171>>>>>        End
35171>>>>>>
35171>>>>>    End_Function
35172>>>>>    
35172>>>>>    // Create an extended field object for the passed field. .
35172>>>>>    // If field already exists, do nothing. This should only be used with
35172>>>>>    // text and binary fields.
35172>>>>>    Procedure DefineExtendedField Integer iField
35174>>>>>        Integer hFlds
35174>>>>>        Get Field_Objects to hFlds // this may not be created yet.
35175>>>>>        If not hFlds Begin         // if not created, create extended-fields wrapper
35177>>>>>            Object ExtendedFieldObjects is a FieldObjects
35179>>>>>                Move Self to hFlds
35180>>>>>            End_Object
35181>>>>>            Set Field_Objects to hFlds
35182>>>>>        End
35182>>>>>>
35182>>>>>        Send DefineFieldObject to hFlds iField
35183>>>>>    End_Procedure
35184>>>>>    
35184>>>>>    // create extended DD fields for all text and binary files
35184>>>>>    Procedure DefineAllExtendedFields
35186>>>>>        Integer iCount iType iField iFile
35186>>>>>        Get Main_file to iFile
35187>>>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iFile to iCount
35190>>>>>        For iField from 1 to iCount
35196>>>>>>
35196>>>>>            Get_Attribute DF_FIELD_TYPE of iFile iField to iType
35199>>>>>            If (iType=DF_TEXT or iType=DF_BINARY) ; // if text or binary                Send DefineExtendedField iField
35202>>>>>        Loop
35203>>>>>>
35203>>>>>    End_Procedure
35204>>>>>    
35204>>>>>    // Update Extended fields to FileBuffer.  DD-Fields ---> FileBuffer
35204>>>>>    // Private
35204>>>>>    Procedure ExtendedFieldsUpdate Integer bSave
35206>>>>>        Integer hFlds
35206>>>>>        Get Field_Objects to hFlds
35207>>>>>        If hFlds ;            Send ExtendedFieldsUpdate to hFlds bSave
35210>>>>>    End_Procedure
35211>>>>>    
35211>>>>>    // Refresh Extended field from FileBuffer.  DD-Fields <--- FileBuffer
35211>>>>>    // Private
35211>>>>>    Procedure ExtendedFieldsRefresh Boolean bCleared
35213>>>>>        Integer hFlds
35213>>>>>        Get Field_Objects to hFlds
35214>>>>>        If hFlds ;            Send ExtendedFieldsRefresh to hFlds bCleared
35217>>>>>    End_Procedure
35218>>>>>    
35218>>>>>    // This procedure can be used to set the Item_Options of a field. This can
35218>>>>>    // be passed any number of arguments.
35218>>>>>    // Support the following special first parameters:
35218>>>>>    //      DD_CLEAR_FIELD_OPTIONS     - clear all following passed otpions
35218>>>>>    //      DD_CLEAR_ALL_FIELD_OPTIONS - clear all options
35218>>>>>    Procedure Set Field_Options Integer iField Integer iArg1 // plus unknown arguments
35220>>>>>        Integer iObj
35220>>>>>        Integer iOptions
35220>>>>>        Integer iOption
35220>>>>>        Integer iArg
35220>>>>>        Integer iClear
35220>>>>>        Integer iType
35220>>>>>        Move (Record_Buffer(Self)) to iObj
35221>>>>>        Get Item_Options of iObj iField to iOptions
35222>>>>>        //
35222>>>>>        For iArg from 2 to Num_Arguments
35228>>>>>>
35228>>>>>            Move iArg& to iOption // tricky way to parse passed arguments
35229>>>>>            
35229>>>>>            If (iOption = DD_CLEAR_ALL_FIELD_OPTIONS) ;                Move 0 to iOptions
35232>>>>>            Else If (iOption = DD_CLEAR_FIELD_OPTIONS) ;                Move 1 to iClear
35236>>>>>            Else If not iClear ;                Move (iOptions ior iOption) to iOptions
35240>>>>>            Else ; // only unset bits already set! Note multiple bits can be passed                Move (iOptions - (iOptions iand iOption)) to iOptions
35242>>>>>        Loop
35243>>>>>>
35243>>>>>        //
35243>>>>>        //Get_Attribute DF_FIELD_TYPE of (Main_File(self)) iField to iType
35243>>>>>        //If (iType=DF_TEXT or iType=DF_BINARY) ;            // if text of binary
35243>>>>>        //    Move (iOptions iOR DD_DISPLAYONLY) to iOptions // make sure DO is set
35243>>>>>        
35243>>>>>        Set Item_Options of iObj iField to iOptions
35244>>>>>    End_Procedure
35245>>>>>    
35245>>>>>    // This function returns all the item_options which have been set for
35245>>>>>    // a field. The value from the Record_Buffer object will be binary or'ed
35245>>>>>    // with constand Default_Item_Options and the DD_AUTOCLEAR constants when
35245>>>>>    // the Autoclear_State of the field has been set.
35245>>>>>    // Keep in mind that Autoclear is *not* kept in the Item_Options
35245>>>>>    // property.
35245>>>>>    Function Field_Options Integer iField Returns Integer
35247>>>>>        Function_Return (Item_Options(Record_Buffer(Self), iField))
35248>>>>>    End_Function
35249>>>>>    
35249>>>>>    Function Field_Option Integer iField Integer iOption Returns Integer
35251>>>>>        Integer iOptions
35251>>>>>        Integer iState
35251>>>>>        Get Item_Options of (Record_Buffer(Self)) iField to iOptions
35252>>>>>        // All bits must match for it to be True (e.g., displayonly requires noput & noenter)
35252>>>>>        Move ((iOptions iand iOption)=iOption) to iState
35253>>>>>        Function_Return iState
35254>>>>>    End_Function
35255>>>>>    
35255>>>>>    
35255>>>>>    Procedure Set Foreign_Field_Options Integer iField Integer iArg1 // Integer iOption
35257>>>>>        Integer iObj
35257>>>>>        Integer iOptions
35257>>>>>        Integer iOption
35257>>>>>        Integer iArg
35257>>>>>        Integer iClear
35257>>>>>        
35257>>>>>        
35257>>>>>        Move (Record_Buffer(Self)) to iObj
35258>>>>>        Get Aux_Value of iObj iField to iOptions
35259>>>>>        //
35259>>>>>        For iArg from 2 to Num_Arguments
35265>>>>>>
35265>>>>>            Move iArg& to iOption // tricky way to parse passed arguments
35266>>>>>            If (iOption = DD_CLEAR_ALL_FIELD_OPTIONS) ;                Move 0 to iOptions
35269>>>>>            Else If (iOption = DD_CLEAR_FIELD_OPTIONS) ;                Move 1 to iClear
35273>>>>>            Else If not iClear ;                Move (iOptions ior iOption) to iOptions
35277>>>>>            Else ; // only unset bits already set! Note multiple bits can be passed                Move (iOptions - (iOptions iand iOption)) to iOptions
35279>>>>>        Loop
35280>>>>>>
35280>>>>>        //
35280>>>>>        Set Aux_Value of iObj iField to iOptions
35281>>>>>    End_Procedure
35282>>>>>    
35282>>>>>    Function Foreign_Field_Options Integer iField Returns Integer
35284>>>>>        Integer iOpts
35284>>>>>        Get ForeignFieldOptions of Record_Buffer iField to iOpts
35285>>>>>        Function_Return iOpts
35286>>>>>    End_Function
35287>>>>>    
35287>>>>>    Procedure Set Foreign_Field_Option Integer iField Integer iOption Integer bSet
35289>>>>>        If bSet Begin
35291>>>>>            Set Foreign_Field_Options iField to iOption
35292>>>>>        End
35292>>>>>>
35292>>>>>        Else Begin
35293>>>>>            Set Foreign_Field_Options iField to DD_CLEAR_FIELD_OPTIONS iOption
35294>>>>>        End
35294>>>>>>
35294>>>>>    End_Procedure
35295>>>>>    
35295>>>>>    Function Foreign_Field_Option Integer iField Integer iOption Returns Integer
35297>>>>>        Integer iOptions
35297>>>>>        Integer iState
35297>>>>>        Get Foreign_Field_Options iField to iOptions
35298>>>>>        Move ((iOptions iand iOption)=iOption) to iState
35299>>>>>        Function_Return iState
35300>>>>>    End_Function
35301>>>>>    
35301>>>>>    // This procedure is being used by DEOs when they need to copy the item-
35301>>>>>    // options from the Data_Set. When the filenumber being passed is not
35301>>>>>    // equal to the Main_File of this Data_Set, then the Foreign_Field_Options
35301>>>>>    // will be applied.
35301>>>>>    Function File_Field_Options Integer iFile Integer iField Returns Integer
35303>>>>>        Integer iDSO
35303>>>>>        Integer iMain_File
35303>>>>>        Integer iOpts
35303>>>>>        Integer iRB
35303>>>>>        Integer iType
35303>>>>>        Get Main_File to iMain_File
35304>>>>>        If (iFile <> iMain_File) ;            Get Data_Set iFile to iDSO
35307>>>>>        Else ;            Move Self to iDSO
35309>>>>>        If iDSO Begin
35311>>>>>            Get Field_Options of iDSO iField to iOpts
35312>>>>>            // we consider the item to be foreign if the DDO main file is different than the one
35312>>>>>            // passed and we do not allow foreign (parent) new records to be saved.
35312>>>>>            If (iFile<>iMain_File and Allow_Foreign_New_Save_State(iDSO)=0) ; // Add Foreign_Field_Options                Move (iOpts ior Foreign_Field_Options(iDSO, iField)) to iOpts
35315>>>>>            Function_Return iOpts
35316>>>>>        End
35316>>>>>>
35316>>>>>    End_Function
35317>>>>>    
35317>>>>>    
35317>>>>>    // Procedure to set the message to be sent on item entry.
35317>>>>>    Procedure Set Field_Entry_msg Integer iField Integer iMsg
35319>>>>>        Set Item_Entry_MSG of (Record_Buffer(Self)) iField to iMsg
35320>>>>>    End_Procedure
35321>>>>>    
35321>>>>>    // Function to return the message to be sent on item entry.
35321>>>>>    Function Field_Entry_msg Integer iField Returns Integer
35323>>>>>        Function_Return (Item_Entry_MSG(Record_Buffer(Self), iField))
35324>>>>>    End_Function
35325>>>>>    
35325>>>>>    
35325>>>>>    // Procedure to send the message to be sent on item exit.
35325>>>>>    Procedure Set Field_Exit_msg Integer iField Integer iMsg
35327>>>>>        Set Item_Exit_MSG of (Record_Buffer(Self)) iField to iMsg
35328>>>>>    End_Procedure
35329>>>>>    
35329>>>>>    // Function to return the message to be set on item exit.
35329>>>>>    Function Field_Exit_msg Integer iField Returns Integer
35331>>>>>        Function_Return (Item_Exit_MSG(Record_Buffer(Self), iField))
35332>>>>>    End_Function
35333>>>>>    
35333>>>>>    // Procedure to set the message to be sent on item validation.
35333>>>>>    Procedure Set Field_Validate_msg Integer iField Integer iMsg
35335>>>>>        Set Item_Validate_MSG of (Record_Buffer(Self)) iField to iMsg
35336>>>>>    End_Procedure
35337>>>>>    
35337>>>>>    // Function to return the message to be set on item validation.
35337>>>>>    Function Field_Validate_msg Integer iField Returns Integer
35339>>>>>        Function_Return (Item_Validate_MSG(Record_Buffer(Self), iField))
35340>>>>>    End_Function
35341>>>>>    
35341>>>>>    
35341>>>>>    // Used to Get/Set the Prompt_Object for a Field.
35341>>>>>    Procedure Set Field_Prompt_Object Integer iField Integer iObj
35343>>>>>        Set Prompt_Object of (Record_Buffer(Self)) iField to iObj
35344>>>>>    End_Procedure
35345>>>>>    
35345>>>>>    Function Field_Prompt_Object Integer iField Returns Integer
35347>>>>>        Integer iObj
35347>>>>>        Get Prompt_Object of (Record_Buffer(Self)) iField to iObj
35348>>>>>        If (iObj = 0) ;            Get Prompt_Object of (Field_Attributes(Self)) iField to iObj
35351>>>>>        Function_Return iObj
35352>>>>>    End_Function
35353>>>>>    
35353>>>>>    Procedure Set Field_Zoom_Object Integer iField Integer iObj
35355>>>>>        Set Zoom_Object of (Record_Buffer(Self)) iField to iObj
35356>>>>>    End_Procedure
35357>>>>>    
35357>>>>>    Function Field_Zoom_Object Integer iField Returns Integer
35359>>>>>        Function_Return (Zoom_Object(Record_Buffer(Self), iField))
35360>>>>>    End_Function
35361>>>>>    
35361>>>>>    
35361>>>>>    Procedure Set Field_WebPrompt_Object Integer iField Handle hoObj
35363>>>>>        Set Field_WebPrompt_Object of FieldMask_Array iField to hoObj
35364>>>>>    End_Procedure
35365>>>>>    
35365>>>>>    Function Field_WebPrompt_Object Integer iField Returns Handle
35367>>>>>        Handle hoPrompt
35367>>>>>        Get Field_WebPrompt_Object of FieldMask_Array iField to hoPrompt
35368>>>>>        Function_Return hoPrompt
35369>>>>>    End_Function
35370>>>>>    
35370>>>>>    
35370>>>>>    // Used to Get/Set the Prompt_Object for a Field.
35370>>>>>    Function File_Field_Prompt_Object Integer iFile Integer iField Returns Integer
35372>>>>>        Integer iObj
35372>>>>>        Get File_Field_Property iFile iField GET_Field_Prompt_Object to iObj
35373>>>>>        Function_Return iObj
35374>>>>>    End_Function
35375>>>>>    
35375>>>>>    Function File_Field_Zoom_Object Integer iFile Integer iField Returns Integer
35377>>>>>        Integer iObj
35377>>>>>        Get File_Field_Property iFile iField GET_Field_Zoom_Object to iObj
35378>>>>>        Function_Return iObj
35379>>>>>    End_Function
35380>>>>>    
35380>>>>>    Function File_Field_WebPrompt_Object Integer iFile Integer iField Returns Handle
35382>>>>>        Handle hoPrompt
35382>>>>>        Get File_Field_Property iFile iField GET_Field_WebPrompt_Object to hoPrompt
35383>>>>>        Function_Return hoPrompt
35384>>>>>    End_Function
35385>>>>>    
35385>>>>>    // Return the extended validation type for this field.
35385>>>>>    Function Field_Validation_Type Integer iField Returns Integer
35387>>>>>        Integer iType
35387>>>>>        Get Field_Validation_Type of (Field_Attributes(Self)) iField ;            to iType
35388>>>>>        Function_Return iType
35389>>>>>    End_Function
35390>>>>>    
35390>>>>>    // Procedure to define a valid value range for a field.
35390>>>>>    Procedure Set Field_Value_Range Integer iField String sMin String sMax
35392>>>>>        Set Field_Value_Range of (Field_Attributes(Self)) iField ;            to sMin sMax
35393>>>>>    End_Procedure
35394>>>>>    
35394>>>>>    
35394>>>>>    // Procedure to define a validate table for a field.
35394>>>>>    Procedure Set Field_Value_Table Integer iField Integer iObj
35396>>>>>        Set Field_Value_Table of (Field_Attributes(Self)) iField ;            to iObj
35397>>>>>    End_Procedure
35398>>>>>    
35398>>>>>    // This provides a callback to the calling object (iObj) by passing this
35398>>>>>    // object the message iMsg for each item in the table. Note this works for
35398>>>>>    // all extended validation types (range, check, etc.)
35398>>>>>    Procedure Field_Fill_List Integer iField Integer iObj Integer iMsg
35400>>>>>        Send Field_Fill_list to (Field_Attributes(Self)) ;            iField iObj iMsg
35401>>>>>    End_Procedure
35402>>>>>    
35402>>>>>    Procedure File_Field_Fill_List Integer iFile Integer iField ;            Integer iObj Integer iMsg
35404>>>>>        Integer iDSO
35404>>>>>        Get Data_set iFile to iDSO
35405>>>>>        If iDSO ;            Send Field_Fill_list to iDSO iField iObj iMsg
35408>>>>>    End_Procedure
35409>>>>>    
35409>>>>>    // Returns the ID if any of the validation table for this object.
35409>>>>>    Function Field_Table_Object Integer iField Returns Integer
35411>>>>>        Integer iRval
35411>>>>>        Get Field_Table_Object of (Field_Attributes(Self)) iField to iRVal
35412>>>>>        Function_Return iRVal
35413>>>>>    End_Function
35414>>>>>    
35414>>>>>    Function File_Field_Table_Object Integer iFile Integer iField Returns Integer
35416>>>>>        Integer iDSO
35416>>>>>        Get Data_set iFile to iDSO
35417>>>>>        If iDSO ;            Function_Return (Field_Table_Object(iDSO,iField))
35420>>>>>    End_Function
35421>>>>>    
35421>>>>>    // Returns code description value for the passed string for the
35421>>>>>    // passed validation table object. Normally use field_value_description
35421>>>>>    Function Validation_Table_Description Integer iObj String sVal Returns String
35423>>>>>        String sDesc
35423>>>>>        If iObj ;            Get Find_Code_Description of iObj sVal to sDesc
35426>>>>>        Function_Return sDesc
35427>>>>>    End_Function
35428>>>>>    
35428>>>>>    // Returns the description value for the field's code value. This only
35428>>>>>    // works if you have a validation table - else it returns the field value
35428>>>>>    Function Field_Current_Description Integer iField Returns String
35430>>>>>        String sDesc
35430>>>>>        String sVal
35430>>>>>        Integer iObj
35430>>>>>        Get Field_Current_Value iField to sVal
35431>>>>>        Get Field_Table_Object iField to iObj
35432>>>>>        If iObj Begin
35434>>>>>            Get Validation_Table_Description iObj sVal to sDesc
35435>>>>>            If (sDesc="") ;                Move sVal to sDesc // if desc is blank, use value
35438>>>>>        End
35438>>>>>>
35438>>>>>        Else ;            Move sVal to sDesc
35440>>>>>        Function_Return sDesc
35441>>>>>    End_Function
35442>>>>>    
35442>>>>>    Function File_Field_Current_Description Integer iFile Integer iField Returns String
35444>>>>>        Integer iDSO
35444>>>>>        Get Data_set iFile to iDSO
35445>>>>>        If iDSO ;            Function_Return (Field_Current_Description(iDSO,iField))
35448>>>>>    End_Function
35449>>>>>    
35449>>>>>    // Required Messaging to Support Checkbox items in DEOs
35449>>>>>    //  Defines a field as a two item field and defines True and False values
35449>>>>>    Procedure Set Field_CheckBox_Values Integer iField String sTrue String sFalse
35451>>>>>        Set Field_CheckBox_Values of (Field_Attributes(Self)) iField ;            to sTrue sFalse
35452>>>>>    End_Procedure
35453>>>>>    
35453>>>>>    //    Returns a field's select_State based on the pased value
35453>>>>>    Function Field_Value_Select_State Integer iField String sValue Returns Integer
35455>>>>>        Function_Return (Field_Value_Select_State(Field_Attributes(Self),iField,sValue))
35456>>>>>    End_Function
35457>>>>>    
35457>>>>>    //    Returns a field's select_State based on the DD buffer contents
35457>>>>>    Function Field_Select_State Integer iField Returns Integer
35459>>>>>        String sValue
35459>>>>>        Get Field_Current_Value iField to sValue
35460>>>>>        Function_Return (Field_Value_Select_State(Self,iField,sValue))
35461>>>>>    End_Function
35462>>>>>    
35462>>>>>    //   Returns a file/field' select_State based on contents of DD buffer
35462>>>>>    Function File_Field_Select_State Integer iFile Integer iField Returns Integer
35464>>>>>        Integer iDSO
35464>>>>>        Get Data_set iFile to iDSO
35465>>>>>        If iDSO ;            Function_Return (Field_Select_State(iDSO,iField))
35468>>>>>    End_Function
35469>>>>>    
35469>>>>>    //   Returns a file/field' select_State based on passed value
35469>>>>>    Function File_Field_Value_Select_State Integer iFile Integer iField ;            String sValue Returns Integer
35471>>>>>        Integer iDSO
35471>>>>>        Get Data_set iFile to iDSO
35472>>>>>        If iDSO ;            Function_Return (Field_Value_Select_State(iDSO,iField,sValue))
35475>>>>>    End_Function
35476>>>>>    
35476>>>>>    // get the actual database value that corresponds to the boolean value
35476>>>>>    // passed.
35476>>>>>    Function Field_CheckBox_Value Integer iField Integer iState Returns String
35478>>>>>        Function_Return (Field_Checkbox_Value(Field_Attributes(Self),iField,iState))
35479>>>>>    End_Function
35480>>>>>    
35480>>>>>    Function File_Field_CheckBox_Value Integer iFile Integer iField Integer iState Returns String
35482>>>>>        Integer iDSO
35482>>>>>        Get Data_set iFile to iDSO
35483>>>>>        If iDSO ;            Function_Return (Field_Checkbox_Value(iDSO,iField,iState))
35486>>>>>    End_Function
35487>>>>>    
35487>>>>>    // Set the buffer's value based on the state passed. This notifies DEOs
35487>>>>>    Procedure Set Field_Select_State Integer iField Integer iState
35489>>>>>        String sValue
35489>>>>>        Get Field_Checkbox_Value iField iState to sValue
35490>>>>>        Set Field_Current_Value iField to sValue
35491>>>>>    End_Procedure
35492>>>>>    
35492>>>>>    // Set the buffer's value based on the state passed. This notifies DEOs
35492>>>>>    // if needed (set Field_Current_Value does this). First finds proper file
35492>>>>>    // DSO
35492>>>>>    Procedure Set File_Field_Select_State Integer iFile Integer iField Integer iState
35494>>>>>        Integer iDSO
35494>>>>>        Get Data_set iFile to iDSO
35495>>>>>        If iDSO ;            Set Field_Select_State of iDSO iField to iState
35498>>>>>    End_Procedure
35499>>>>>    
35499>>>>>    // Procedure to define a check string for a field.
35499>>>>>    Procedure Set Field_Value_Check Integer iField String sCheck
35501>>>>>        Set Field_Value_Check of (Field_Attributes(Self)) iField ;            to sCheck
35502>>>>>    End_Procedure
35503>>>>>    
35503>>>>>    // This function will be called indirectly by DEOs when an item is being
35503>>>>>    // entered, exited or needs validation. The first argument holds the
35503>>>>>    // fieldnumber for the field and the second holds the id of the message
35503>>>>>    // which can be send to retrieve the message which needs to be send for
35503>>>>>    // this Field/Event combination. The value of the second argument can be
35503>>>>>    // GET_Field_Entry_MSG, GET_Field_Exit_MSG or GET_Field_Validate_MSG.
35503>>>>>    Function Exec_Field_Message Integer iField Integer iMsg_ID Returns Integer
35505>>>>>        Integer iMsg
35505>>>>>        Integer iResult
35505>>>>>        String  sValue
35505>>>>>        Get iMsg_ID iField to iMsg
35506>>>>>        If iMsg Begin
35508>>>>>            Get Field_Current_Value iField to sValue
35509>>>>>            Get iMsg iField sValue to iResult
35510>>>>>        End
35510>>>>>>
35510>>>>>        Function_Return iResult
35511>>>>>    End_Function
35512>>>>>    
35512>>>>>    
35512>>>>>    // This function will be called from within DEOs when an item is being
35512>>>>>    // entered, exited or needs validation. The first argument holds the
35512>>>>>    // file number, the second argument holds the field and the third
35512>>>>>    // holds the id of the message  which can be send to retrieve the message
35512>>>>>    // which needs to be send for this File/Field/Event combination.
35512>>>>>    // The value of the second argument can be  GET_Field_Entry_MSG,
35512>>>>>    // GET_Field_Exit_MSG or GET_Field_Validate_MSG.
35512>>>>>    // This will redirect to the proper data-set object.
35512>>>>>    Function Exec_File_Field_Message Integer iFile Integer iField Integer iMsg_ID Returns Integer
35514>>>>>        Integer iDSO
35514>>>>>        Integer iResult
35514>>>>>        Get Data_set iFile to iDSO
35515>>>>>        If iDSO ;            Get Exec_Field_Message of iDSO iField iMsg_ID to iResult
35518>>>>>        Function_Return iResult
35519>>>>>    End_Function
35520>>>>>    
35520>>>>>    // Find the data-set whose main_file is the same as File#. The message
35520>>>>>    // Which_data_set includes updating parent files, we will throw those out.
35520>>>>>    // This has been augmented to search down the DDO tree if we do not find
35520>>>>>    // the DD with our quick C Which_Data_set search
35520>>>>>    Function Data_Set Integer iFile Returns Integer
35522>>>>>        Integer iTmp
35522>>>>>        Integer iDSO
35522>>>>>        Get Main_File to iTmp
35523>>>>>        If (iTmp = iFile) ;            Function_Return Self
35526>>>>>        Get Which_Data_Set iFile to iDSO
35527>>>>>        If iDSO Begin
35529>>>>>            // check that DS's main-file is the File (and not a parent file)
35529>>>>>            Get Main_File of iDSO to iTmp
35530>>>>>            If (iTmp = iFile) ;                Function_Return iDSO
35533>>>>>        End
35533>>>>>>
35533>>>>>        
35533>>>>>        // This really should have succeeded by now. If not we need to do a
35533>>>>>        // downward sweep looking for DD. This will be a slower process since it
35533>>>>>        // involves flex level DDO structure traversal. We should very rarely ever
35533>>>>>        // get to this point. If we do, it takes longer!
35533>>>>>        
35533>>>>>        // Unlike other traversals we will mark and check in a single
35533>>>>>        // step.
35533>>>>>        // This Mark_Id creates a sequence Id for this clear. This way
35533>>>>>        // DSOs only get cleared one time during this process.
35533>>>>>        Send IncrementCurrentMarkId
35534>>>>>        Get Private.Data_set iFile to iDSO // this does the recursive downward search
35535>>>>>        Function_Return iDSO
35536>>>>>    End_Function
35537>>>>>    
35537>>>>>    Function Private.Data_Set Integer iFile Returns Integer
35539>>>>>        Integer iMax
35539>>>>>        Integer iDSO hDD
35539>>>>>        Integer iCount
35539>>>>>        
35539>>>>>        If (iFile=Main_file(Self)) ;            Function_Return Self
35542>>>>>        
35542>>>>>        // We are only looking at sequence ID.
35542>>>>>        Set Last_Mark_Sequence_id to DD_Current_mark_id
35543>>>>>        
35543>>>>>        // recurse Down first, since we already tried upward direction.
35543>>>>>        Get Data_Set_Client_Count to iMax
35544>>>>>        Decrement iMax
35545>>>>>        For iCount from 0 to iMax
35551>>>>>>
35551>>>>>            Get Data_Set_Client iCount to iDSO
35552>>>>>            // If already cleared during this sequence...do nothing
35552>>>>>            If (Last_Mark_Sequence_id(iDSO)<>DD_Current_mark_id) Begin
35554>>>>>                Get Private.Data_Set of iDSO iFile to hDD
35555>>>>>                If hDD ;                    Function_Return hDD // when found...get out
35558>>>>>            End
35558>>>>>>
35558>>>>>        Loop
35559>>>>>>
35559>>>>>        // recurse up server list next. We do this 2nd because it is
35559>>>>>        // the less likely path for success.
35559>>>>>        Get Data_Set_Server_Count to iMax
35560>>>>>        Decrement iMax
35561>>>>>        For iCount from 0 to iMax
35567>>>>>>
35567>>>>>            Get Data_Set_Server iCount to iDSO
35568>>>>>            // If already cleared during this sequence...do nothing
35568>>>>>            If (Last_Mark_Sequence_id(iDSO)<>DD_Current_mark_id) Begin
35570>>>>>                Get Private.Data_Set of iDSO iFile to hDD
35571>>>>>                If hDD ;                    Function_Return hDD // when found...get out
35574>>>>>            End
35574>>>>>>
35574>>>>>        Loop
35575>>>>>>
35575>>>>>        Function_Return 0 // if here, our traversal has failed.
35576>>>>>    End_Function
35577>>>>>    
35577>>>>>    // These methods can be used to set/get a field property in a flexible
35577>>>>>    // way. The first two argument are the file- and fieldnumber followed by
35577>>>>>    // the ID of the message that should be send. The last argument should
35577>>>>>    // be the value to set or the variable to store the value in.
35577>>>>>    Procedure Set File_Field_Property Integer iFile Integer iField Integer iMsg String sValue
35579>>>>>        Integer iDSO
35579>>>>>        Get Data_Set iFile to iDSO
35580>>>>>        If iDSO Begin
35582>>>>>            Set iMsg of iDSO iField to sValue
35583>>>>>            Procedure_Return sValue
35584>>>>>        End
35584>>>>>>
35584>>>>>    End_Procedure
35585>>>>>    
35585>>>>>    Function File_Field_Property Integer iFile Integer iField Integer iMsg Returns Integer
35587>>>>>        Integer iDSO
35587>>>>>        String  sValue
35587>>>>>        Get Data_Set iFile to iDSO
35588>>>>>        If iDSO Begin
35590>>>>>            Get iMsg of iDSO iField to sValue
35591>>>>>            Function_Return sValue
35592>>>>>        End
35592>>>>>>
35592>>>>>    End_Function
35593>>>>>    
35593>>>>>    // This procedure will return the number of fields in the object
35593>>>>>    Function Field_Count Returns Integer
35595>>>>>        Function_Return (Item_Count(Record_Buffer(Self)) - 1)
35596>>>>>    End_Function
35597>>>>>    
35597>>>>>    // This procedure will clear all flags in the visited_fields string so
35597>>>>>    // that all field will be validated on the next requests.
35597>>>>>    Procedure Clear_Visited_Fields
35599>>>>>        // this clears field visitation marks
35599>>>>>        Set Visited_Fields to (Repeat(" ", Field_Count(Self)))
35600>>>>>    End_Procedure
35601>>>>>    
35601>>>>>    // Private.Initialize_Visited
35601>>>>>    // This procedure will be called when validations (and perhaps other
35601>>>>>    // events) is requested. It clears the visited marks and then proceeds
35601>>>>>    // to clear the marks up the server tree.
35601>>>>>    // This is passed two parameters: Up_and_down, If true upward and downward
35601>>>>>    // initialize. If Clear_Fields also clear the field string
35601>>>>>    Procedure Private.Initialize_Visited Integer Up_and_Down Integer Clear_Fields
35603>>>>>        Integer iMax
35603>>>>>        Integer iDSO
35603>>>>>        Integer iCount
35603>>>>>        
35603>>>>>        // recurse up server list first. Only recurse up
35603>>>>>        Get Data_Set_Server_Count to iMax
35604>>>>>        Decrement iMax
35605>>>>>        For iCount from 0 to iMax
35611>>>>>>
35611>>>>>            Get Data_Set_Server iCount to iDSO
35612>>>>>            // If already cleared during this sequence...do nothing
35612>>>>>            If (Last_Mark_Sequence_id(iDSO)<>DD_Current_mark_id) ;                Send Private.Initialize_Visited to iDSO False Clear_Fields
35615>>>>>        Loop
35616>>>>>>
35616>>>>>        
35616>>>>>        If Clear_Fields ;            Send Clear_Visited_Fields // clear all markers in this object
35619>>>>>        // this clears the visited mark for the entire object
35619>>>>>        Set Visited_State to False
35620>>>>>        Set DownDelete_State to False
35621>>>>>        Set Last_Mark_Sequence_id to DD_Current_mark_id
35622>>>>>        
35622>>>>>        // If Up_and_Down recurse Down server list
35622>>>>>        If Up_and_Down Begin
35624>>>>>            Get Data_Set_Client_Count to iMax
35625>>>>>            Decrement iMax // **EK** This line was missing
35626>>>>>            For iCount from 0 to iMax
35632>>>>>>
35632>>>>>                Get Data_Set_Client iCount to iDSO
35633>>>>>                // If already cleared during this sequence...do nothing
35633>>>>>                If (Last_Mark_Sequence_id(iDSO)<>DD_Current_mark_id) ;                    Send Private.Initialize_Visited to iDSO True Clear_Fields
35636>>>>>            Loop
35637>>>>>>
35637>>>>>        End
35637>>>>>>
35637>>>>>    End_Procedure
35638>>>>>    
35638>>>>>    
35638>>>>>    // Clears Visited marks and (maybe) field visited marks in all required
35638>>>>>    // DSOs. If Up_and_Down is TRUE DSOs are marked up and Down (delete style)
35638>>>>>    // propagation. If False, DSOs are marked up (save style). This does not
35638>>>>>    // have a mode to mark ALL DSOs in a structure. (Not needed so far).
35638>>>>>    // If Clear_Fields is T the field string marker is also cleared.
35638>>>>>    // The method of using the global integer DD_Current_Mark_ID is an opt-
35638>>>>>    // imizer. This is private - do not tamper with it!
35638>>>>>    // Note that Intialize_Visited does not always Clear all DDOs in the structure. When
35638>>>>>    // Up_and_Down is true, it is marking all DDOs that will participate in a cascade delete
35638>>>>>    // which may not be all DDOs in the structure. If you want to initialize all DDOs use InitializeAllVisited
35638>>>>>    Procedure Initialize_Visited Integer Up_and_Down Integer Clear_Fields
35640>>>>>        Send IncrementCurrentMarkId
35641>>>>>        Send Private.Initialize_Visited Up_and_Down Clear_Fields
35642>>>>>    End_Procedure
35643>>>>>    
35643>>>>>    Procedure InitializeAllVisited2
35645>>>>>        Integer iMax iCount
35645>>>>>        Handle hoDSO
35645>>>>>        
35645>>>>>        Set Visited_State to False
35646>>>>>        Set Last_Mark_Sequence_id to DD_Current_mark_id // marks this as visited
35647>>>>>        
35647>>>>>        // recurse up server list.
35647>>>>>        Get Data_Set_Server_Count to iMax
35648>>>>>        For iCount from 0 to (iMax-1)
35654>>>>>>
35654>>>>>            Get Data_Set_Server iCount to hoDSO
35655>>>>>            // If already cleared during this sequence...do nothing
35655>>>>>            If (Last_Mark_Sequence_id(hoDSO)<>DD_Current_mark_id) ;                Send InitializeAllVisited2 of hoDSO
35658>>>>>        Loop
35659>>>>>>
35659>>>>>        
35659>>>>>        // recurse down client list.
35659>>>>>        Get Data_Set_Client_Count to iMax
35660>>>>>        For iCount from 0 to (iMax-1)
35666>>>>>>
35666>>>>>            Get Data_Set_Client iCount to hoDSO
35667>>>>>            // If already cleared during this sequence...do nothing
35667>>>>>            If (Last_Mark_Sequence_id(hoDSO)<>DD_Current_mark_id) ;                Send InitializeAllVisited2 to hoDSO
35670>>>>>        Loop
35671>>>>>>
35671>>>>>    End_Procedure
35672>>>>>    
35672>>>>>    // clears visited flag for *all* ddos in the structure.
35672>>>>>    Procedure InitializeAllVisited
35674>>>>>        Send IncrementCurrentMarkId
35675>>>>>        Send InitializeAllVisited2
35676>>>>>    End_Procedure
35677>>>>>    
35677>>>>>    
35677>>>>>    // Internal recursive message to check file connections. Called from
35677>>>>>    // Valid_connections only. Private message
35677>>>>>    Function Private.Valid_Structure Integer Up_And_Down Returns Integer
35679>>>>>        Integer iRval iCount iMax
35679>>>>>        Handle iDSO iPDSO
35679>>>>>        Integer iPMax iPCount iPMain
35679>>>>>        Boolean bUpDown bNull bCascadeNull bDown
35679>>>>>        
35679>>>>>        // Check Current Connections
35679>>>>>        Get Valid_Servers to iRval           // always check servers
35680>>>>>        If (iRval=0 and Up_and_Down) ;       // check Clients if required            Get Valid_Clients to iRval
35683>>>>>        Set Visited_State to True
35684>>>>>        
35684>>>>>        // Ask Server data-sets to check their server connections
35684>>>>>        If not iRval Begin // check up
35686>>>>>            Get Data_Set_Server_Count to iMax
35687>>>>>            Decrement iMax
35688>>>>>            For iCount from 0 to iMax
35694>>>>>>
35694>>>>>                Get Data_Set_Server iCount to iDSO
35695>>>>>                If not (Visited_state(iDSO)) ;                    Get Private.Valid_Structure of iDSO False to iRVal
35698>>>>>            Until iRval
35700>>>>>        End
35700>>>>>>
35700>>>>>        
35700>>>>>        // If required, Ask Clients to check their server and client connections
35700>>>>>        //
35700>>>>>        If (iRval=0 and Up_and_Down) Begin // check down
35702>>>>>            Get Data_Set_Client_Count to iMax
35703>>>>>            Decrement iMax
35704>>>>>            For iCount from 0 to iMax
35710>>>>>>
35710>>>>>                Get Data_Set_Client iCount to iDSO
35711>>>>>                If not (Visited_state(iDSO)) Begin
35713>>>>>                    Get Data_Set_Server_Count of iDSO to iPMax
35714>>>>>                    // test if all deletable parents for a non parent null allowed/cascade delete null
35714>>>>>                    For iPCount from 0 to (iPMax-1)
35720>>>>>>
35720>>>>>                        Get Data_Set_Server of iDSO iPCount to iPDSO
35721>>>>>                        Get DownDelete_State of iPDSO to bDown
35722>>>>>                        If (bDown) Begin
35724>>>>>                            Get Main_File of iPDSO to iPMain
35725>>>>>                            Get IsNullParentAllowed of iDSO iPMain to bNull
35726>>>>>                            Get IsCascadeDeleteNull of iDSO iPMain to bCascadeNull
35727>>>>>                            Move (not(bNull) or not(bCascadeNull)) to bUpDown
35728>>>>>                        End
35728>>>>>>
35728>>>>>                    Until bUpDown
35730>>>>>                    Get Private.Valid_Structure of iDSO bUpDown to iRVal
35731>>>>>                End
35731>>>>>>
35731>>>>>            Until iRval
35733>>>>>        End
35733>>>>>>
35733>>>>>        
35733>>>>>        Function_Return iRVal
35734>>>>>        
35734>>>>>    End_Function
35735>>>>>    
35735>>>>>    // Validate data-set updating connections against required connections
35735>>>>>    // Pass: Up_and_down=T if we should check Server and Client connections
35735>>>>>    //                  =F is we only check servers
35735>>>>>    // Ret: 0 if ok, Missing File# if not ok.
35735>>>>>    // Up_And_Down should be true when testing for cascade delete structures and
35735>>>>>    // false when testing for save / delete-no-cascade structures
35735>>>>>    Function Valid_Structure Integer Up_And_Down Returns Integer
35737>>>>>        Send Initialize_Visited Up_and_Down False // False=don't clear field marks
35738>>>>>        If (Up_And_Down) Begin
35740>>>>>            Send MarkDDOsForCascadeDelete
35741>>>>>        End
35741>>>>>>
35741>>>>>        Function_Return (Private.Valid_Structure(Self,Up_and_Down))
35742>>>>>    End_Function
35743>>>>>    
35743>>>>>    // mark all DDOs which are part of this deletes cascade delete tree
35743>>>>>    // mark this and all clients as Downward deletable. This includes
35743>>>>>    // cacscade delete and cascade set to null (not for cascade_delete_state=F)
35743>>>>>    Procedure MarkDDOsForCascadeDelete
35745>>>>>        Integer iMax  iCount
35745>>>>>        Boolean bDown
35745>>>>>        Handle hoDDO
35745>>>>>        Set DownDelete_State to True
35746>>>>>        Get Data_Set_Client_Count to iMax
35747>>>>>        For iCount from 0 to (iMax-1)
35753>>>>>>
35753>>>>>            Get Data_Set_Client iCount to hoDDO
35754>>>>>            Get DownDelete_State of hoDDO to bDown
35755>>>>>            If not bDown Begin // circular DDO test - never do this
35757>>>>>                Send MarkDDOsForCascadeDelete of hoDDO
35758>>>>>            End
35758>>>>>>
35758>>>>>        Loop
35759>>>>>>
35759>>>>>    End_Procedure
35760>>>>>    
35760>>>>>    
35760>>>>>    // This function will execute the validation message for each field within
35760>>>>>    // this object. If DoAllFG is true all items are validated. If false
35760>>>>>    // only unvisited items are checked.
35760>>>>>    // Added bNoStop, If true, all items are validated. It is up to you to
35760>>>>>    // do something with the possible cascade of errors
35760>>>>>    // if the err returns DFERR_ENTER_VALID_REC_ID we will not continue
35760>>>>>    // the validation (the other fields will be bad). This works best if the
35760>>>>>    // findreq appears as one of the first fields in the file (which is almost
35760>>>>>    // always the case
35760>>>>>    Function Validate_Fields Integer DoAllFg Integer bNoStop Returns Integer
35762>>>>>        Integer iRetval
35762>>>>>        Integer iMax
35762>>>>>        Integer iCount
35762>>>>>        Integer iFile
35762>>>>>        Integer iErr
35762>>>>>        String  sVS
35762>>>>>        Get Visited_Fields to sVS
35763>>>>>        Get Field_Count to iMax
35764>>>>>        Get Main_File to iFile
35765>>>>>        For iCount from 1 to iMax
35771>>>>>>
35771>>>>>            If (DoAllFG or Mid(sVS, 1, iCount)=" ") Begin
35773>>>>>                Get Validate_Field iCount to iErr
35774>>>>>                If iErr Begin
35776>>>>>                    Move iErr to iRetVal
35777>>>>>                    // error occurred. If not no-stop or the error is
35777>>>>>                    // a findreq error - we are done.
35777>>>>>                    If (not(bNoStop) or iRetVal=DFERR_ENTER_VALID_REC_ID) ;                        Function_Return iRetVal
35780>>>>>                End
35780>>>>>>
35780>>>>>            End
35780>>>>>>
35780>>>>>        Loop
35781>>>>>>
35781>>>>>        Function_Return iRetval
35782>>>>>    End_Function
35783>>>>>    
35783>>>>>    // 17.0 - added support for null-parents. If null parents allowed, req lets it through
35783>>>>>    Function Validate_Required Integer iField Returns Integer
35785>>>>>        Boolean bNull bErr
35785>>>>>        
35785>>>>>        Move (trim(Field_Current_Value(Self,iField))='') to bErr
35786>>>>>        If bErr ;            Send Data_set_Error iField DFERR_ENTRY_REQUIRED ""
35789>>>>>        Function_Return bErr
35790>>>>>    End_Function
35791>>>>>    
35791>>>>>    // return true if we should skip validation for this field. This can happen with Null allowed parents.
35791>>>>>    // if this is foreign, new and has no changes and is null allowed we will skip.
35791>>>>>    Function SkipValidate Integer iField Returns Boolean
35793>>>>>        Boolean bSkip bFieldChanged bEmpty
35793>>>>>        String sValue
35793>>>>>        
35793>>>>>        If (OPERATION_ORIGIN<>Self and not(HasRecord(Self)) and not(changed_state(Self))) Begin
35795>>>>>            // We must also check field_changed_state and only skip if this is not changed.
35795>>>>>            Get Field_Changed_State iField to bFieldChanged
35796>>>>>            // Retain and remember may set field_changed_state to true even when empty. If this field is changed
35796>>>>>            // but its value is empty we assume it is a candidate for Null checking, so we will set field-changed to false
35796>>>>>            If bFieldChanged Begin
35798>>>>>                Get Field_Current_Value iField to sValue
35799>>>>>                Get IsEmptyField iField sValue to bEmpty
35800>>>>>                If bEmpty Begin
35802>>>>>                    Move False to bFieldChanged
35803>>>>>                End
35803>>>>>>
35803>>>>>            End
35803>>>>>>
35803>>>>>            If (not(bFieldChanged)) Begin
35805>>>>>                // we must find the child that points to this DD, starting with operation_origin. If a child
35805>>>>>                // is found, it will be in array position 1 (0 is self, 1 is child)
35805>>>>>                Get IsNullParentOrAncestor to bSkip
35806>>>>>            End
35806>>>>>>
35806>>>>>        End
35806>>>>>>
35806>>>>>        Function_Return bSkip
35807>>>>>    End_Function
35808>>>>>    
35808>>>>>    
35808>>>>>    // This will tell us if this DD can be treated as either a null parent
35808>>>>>    // or an ancestor of a null parent. This should only be called for a DD
35808>>>>>    // that is a candidate for this meaning that it does not have a change.
35808>>>>>    // We will test if its child allows this parent to be null or if this
35808>>>>>    // is in the path of an allowed null parent. We assume that parents of
35808>>>>>    // null parents will also be null. This is used to test if validations are
35808>>>>>    // needed.
35808>>>>>    Function IsNullParentOrAncestor Returns Boolean
35810>>>>>        Handle[] hoDDs
35811>>>>>        Integer i iSize iMain
35811>>>>>        Boolean bNullAllowed
35811>>>>>        // gets an array where 0 is self, 1 is parent, 2 is grandparent, and the
35811>>>>>        // last item is the operation_origin.
35811>>>>>        Send DDOServerPath of operation_origin Self (&hoDDs)
35812>>>>>        Move (SizeOfArray(hoDDs)) to iSize
35813>>>>>        If (iSize) Begin
35815>>>>>            // see if the immediate child allows this to be null.
35815>>>>>            Get Main_File to iMain
35816>>>>>            Get IsNullParentAllowed of hoDDs[1] iMain to bNullAllowed
35817>>>>>            
35817>>>>>            // if null not allowed, see if this is an ancestor to a null allowed
35817>>>>>            // parent where all DDs in this path are unchanged. For example:
35817>>>>>            // G.DD <- P.DD <- C.DD where we C.DD allows P.DD to be null and we
35817>>>>>            // want to test if G.DD needs validation
35817>>>>>            Move 1 to i
35818>>>>>            While (not(bNullAllowed) and (i+1<iSize) and not(changed_state(hoDDs[i])) )
35822>>>>>                Get Main_File of hoDDs[i] to iMain
35823>>>>>                Get IsNullParentAllowed of hoDDs[i+1] iMain to bNullAllowed
35824>>>>>                Increment i
35825>>>>>            Loop
35826>>>>>>
35826>>>>>            
35826>>>>>        End
35826>>>>>>
35826>>>>>        Function_Return bNullAllowed
35827>>>>>    End_Function
35828>>>>>    
35828>>>>>    
35828>>>>>    Function Validate_FindReq Integer iField Returns Integer
35830>>>>>        Integer bErr iOpts
35830>>>>>        // if no current record, we have not found the required record.
35830>>>>>        Move (not(HasRecord(Self))) to bErr
35831>>>>>        // We also need to check if the field is changed. If the field is changed and this
35831>>>>>        // is an autofind field, this indicates that an autofind was attempted and failed. We
35831>>>>>        // can't jut rely on current_record because a failed autofind restores the old current
35831>>>>>        // record. For this to work, DEOs must set the DD field's changed_state to true on
35831>>>>>        // no-put fields (dd_deomx.pkg was changed to do this).
35831>>>>>        If (not(bErr) and field_changed_state(Self,iField)) Begin
35833>>>>>            Get Field_Options iField to iOpts
35834>>>>>            Move ( ((iOpts iand DD_AUTOFIND)=DD_AUTOFIND) or ;                ((iOpts iand DD_AUTOFIND_GE)=DD_AUTOFIND_GE) ) ;                to bErr
35835>>>>>        End
35835>>>>>>
35835>>>>>        If bErr ;            Send Data_set_Error iField DFERR_ENTER_VALID_REC_ID ""
35838>>>>>        Function_Return bErr
35839>>>>>    End_Function
35840>>>>>    
35840>>>>>    // This function will be called to validate a field.
35840>>>>>    // mark field currently being validated
35840>>>>>    // Altered to Check DD options (required, findreq)
35840>>>>>    Function Validate_Field Integer iField Returns Integer
35842>>>>>        Integer iResult
35842>>>>>        Integer iMsg
35842>>>>>        Integer iObj
35842>>>>>        String  sValue
35842>>>>>        Integer iFile
35842>>>>>        Integer iOpts iMain
35842>>>>>        Boolean bSkipValidate
35842>>>>>        Handle[] hoDDs
35843>>>>>        
35843>>>>>        Set Current_Validate_Field to iField
35844>>>>>        
35844>>>>>        // test if we should skip validation on this field
35844>>>>>        Get SkipValidate iField to bSkipValidate
35845>>>>>        
35845>>>>>        If (not(bSkipValidate)) Begin
35847>>>>>            
35847>>>>>            Move (Record_Buffer(Self)) to iObj
35848>>>>>            Get Main_File to iFile
35849>>>>>            
35849>>>>>            // Check for DD option failures: required, find_required
35849>>>>>            // "File_field" gets regular and foreign fields as needed
35849>>>>>            //Get File_Field_Options iFile iField to iOpts
35849>>>>>            Get Field_Options iField to iOpts  // get reg options
35850>>>>>            // if this is not the DDO that started the validation, we will assume that
35850>>>>>            // this is foreign. Operation_origin is set in Request_Validate
35850>>>>>            // If foreign (as defined above) and we do not allow new saves when
35850>>>>>            // foreign, we will consider this to be foreign and add foreign options
35850>>>>>            If (Operation_Origin<>Self and ;                Allow_Foreign_New_Save_State(Self)=0)  ;                Move (iOpts ior Foreign_Field_Options(Self, iField)) to iOpts
35853>>>>>            
35853>>>>>            
35853>>>>>            // Check for FindReq first. If it fails, set iResult to DFERR_ENTER_VALID_REC_ID so
35853>>>>>            // the calling function knows that a findreq failed. Always do this validation first
35853>>>>>            If (iOpts iand DD_FINDREQ) ;                Get Validate_FindReq  iField to iResult
35856>>>>>            If iResult Begin
35858>>>>>                Send AddDDHasFindReqError
35859>>>>>                Move DFERR_ENTER_VALID_REC_ID to iResult
35860>>>>>            End
35860>>>>>>
35860>>>>>            Else Begin
35861>>>>>                
35861>>>>>                If (iOpts iand DD_REQUIRED) ;                    Get Validate_Required iField to iResult
35864>>>>>                
35864>>>>>                If (iResult=0) Begin
35866>>>>>                    // First execute the user defined validation message
35866>>>>>                    Get Item_Validate_MSG of iObj iField to iMsg
35867>>>>>                    If iMsg Begin
35869>>>>>                        Get Field_Current_Value iField to sValue
35870>>>>>                        Get iMsg iField sValue to iResult
35871>>>>>                    End
35871>>>>>>
35871>>>>>                End
35871>>>>>>
35871>>>>>                
35871>>>>>                // Check for keys
35871>>>>>                If (iResult=0 and Key_Field_State(Self, iField)) ;                    Get Validate_Key_Field iField to iResult
35874>>>>>                
35874>>>>>                // Do extended validations
35874>>>>>                If (iResult=0) ;                    Get Validate_Field of (Field_Attributes(Self)) iField to iResult
35877>>>>>            End
35877>>>>>>
35877>>>>>        End
35877>>>>>>
35877>>>>>        
35877>>>>>        Set Current_Validate_Field to 0
35878>>>>>        // Mark this field being validated
35878>>>>>        Get Visited_Fields to sValue
35879>>>>>        Set Visited_Fields to (Overstrike("X", sValue, iField))
35880>>>>>        
35880>>>>>        Function_Return iResult
35881>>>>>        
35881>>>>>    End_Function
35882>>>>>    
35882>>>>>    
35882>>>>>    // This function will be called to validate a field.
35882>>>>>    Function File_Field_Validate_Field Integer iFile Integer iField Returns Integer
35884>>>>>        Integer iDSO
35884>>>>>        Integer iResult
35884>>>>>        Integer hOldOrigin
35884>>>>>        Get Data_Set iFile to iDSO
35885>>>>>        If not iDSO ;            Function_Return 0
35888>>>>>        
35888>>>>>        // This function is only called by the DEOs.
35888>>>>>        // It is possible for validate_item when called as part of
35888>>>>>        // request_validate to get called more than once
35888>>>>>        // when a field is foreign (it is attached to both its DDO and the
35888>>>>>        // child-main ddo). This makes sure the validation is only called once.
35888>>>>>        // (vdf7 change: previously we set OpMode to Mode_Saving and checked that, now we have
35888>>>>>        // a mode just for request_validate).
35888>>>>>        If (Operation_Mode=MODE_VALIDATING and ;         // if from request_validate            Mid(Visited_Fields(iDSO), 1, iField)="X" ) ; // and already marked            Function_Return 0                         // skip it
35891>>>>>        
35891>>>>>        Move Operation_origin to hOldOrigin
35892>>>>>        
35892>>>>>        // if from request_validate operation_origin will be set and should not
35892>>>>>        // be reset here.
35892>>>>>        If (OPERATION_ORIGIN=0) Begin
35894>>>>>            Move Self to Operation_Origin
35895>>>>>        End
35895>>>>>>
35895>>>>>        
35895>>>>>        Get Validate_Field of iDSO iField to iResult
35896>>>>>        Move hOldOrigin to Operation_Origin
35897>>>>>        Function_Return iResult
35898>>>>>    End_Function
35899>>>>>    
35899>>>>>    // This function will be called to check if a key has been changed.
35899>>>>>    Function Validate_Key_Field Integer iField Returns Integer
35901>>>>>        String  sOld_Value
35901>>>>>        String  sNew_Value
35901>>>>>        String  sKeys
35901>>>>>        Integer iState
35901>>>>>        Boolean bMultiKeys
35901>>>>>        Get Protect_Key_State to iState
35902>>>>>        If iState Begin
35904>>>>>            Get Key_Value to sNew_Value
35905>>>>>            // Only check existing records.
35905>>>>>            If (HasRecord(Self)) Begin
35907>>>>>                Get Existing_Key_Value to sOld_Value
35908>>>>>                If (sNew_Value <> sOld_Value) Begin
35910>>>>>                    // we have an error. If there is only one key field we know
35910>>>>>                    // where the field is and we can report that field. If we have
35910>>>>>                    // multiple key fields, we don't really know where the offending key change
35910>>>>>                    // is, so we will not report a field.
35910>>>>>                    Get Key_Fields to sKeys
35911>>>>>                    Move (Pos("X",sKeys)<>RightPos("X",sKeys)) to bMultiKeys
35912>>>>>                    Send Data_set_Error (If(bMultiKeys, -1, iField)) 0 DD_TEXT_NO_KEY_CHANGE_ALLOWED
35913>>>>>                    Function_Return 1
35914>>>>>                End
35914>>>>>>
35914>>>>>            End
35914>>>>>>
35914>>>>>        End
35914>>>>>>
35914>>>>>    End_Function
35915>>>>>    
35915>>>>>    
35915>>>>>    // During request_validate process tell us if this DD has had a find_request error. This
35915>>>>>    // is handled by the DD that originated the request_validate. Very private
35915>>>>>    Function DDHasFindReqError Returns Boolean
35917>>>>>        Handle[] DDsWithFindReqErrors
35918>>>>>        Integer iIndex
35918>>>>>        If (OPERATION_ORIGIN) Begin
35920>>>>>            Get pDDsWithFindReqErrors of OPERATION_ORIGIN to DDsWithFindReqErrors
35921>>>>>            Move (SearchArray(Self,DDsWithFindReqErrors)) to iIndex
35922>>>>>            Function_Return (iIndex<>-1)
35923>>>>>        End
35923>>>>>>
35923>>>>>    End_Function
35924>>>>>    
35924>>>>>    // During a request_validate a find_request error has occurred. Add this DD
35924>>>>>    // to list of DDs that have this error. This is handled by the DD that
35924>>>>>    // originated the request_validate.  Very private
35924>>>>>    Procedure AddDDHasFindReqError
35926>>>>>        Handle[] DDsWithFindReqErrors
35927>>>>>        If (OPERATION_ORIGIN) Begin
35929>>>>>            Get pDDsWithFindReqErrors of OPERATION_ORIGIN to DDsWithFindReqErrors
35930>>>>>            Move Self to DDsWithFindReqErrors[SizeOfArray(DDsWithFindReqErrors)]
35931>>>>>            Set pDDsWithFindReqErrors of OPERATION_ORIGIN to DDsWithFindReqErrors
35932>>>>>        End
35932>>>>>>
35932>>>>>    End_Procedure
35933>>>>>    
35933>>>>>    // This function will execute the validation message for each field of the
35933>>>>>    // data set and all of its parents in parent first order.
35933>>>>>    // Pass: DoALLFg bNoStop
35933>>>>>    // Added bNoStop, If true, all items are validated. It is up to you to
35933>>>>>    // do something with the possible cascade of errors
35933>>>>>    Function Validate_Data_Sets Integer DoAllFg Integer bNoStop Returns Integer
35935>>>>>        Integer iDSO
35935>>>>>        Integer iRetval
35935>>>>>        Integer iCount
35935>>>>>        Integer iMax
35935>>>>>        Integer bErr
35935>>>>>        Boolean bDDHasFindReqError
35935>>>>>        // ShowLn "Validate_Data_Sets in Data_Set in " (Name(self))
35935>>>>>        // Validate if not foreign, or foreign new saves allowed, or
35935>>>>>        // foreign validation is supported (it normally is)
35935>>>>>        If (Operation_Origin=Self or ;            Allow_Foreign_New_Save_State(Self) or ;            Validate_Foreign_File_State(Self)) Begin
35937>>>>>            
35937>>>>>            If (bNoStop) Begin
35939>>>>>                // if do all, it is possible that this DD as a find-req error. If so there is no
35939>>>>>                // need to look for more errors in this DD or its parents. This makes the do all checking
35939>>>>>                // a little more intelligent and doesn't return a bunch of errors when it is not needed
35939>>>>>                Get DDHasFindReqError to bDDHasFindReqError
35940>>>>>            End
35940>>>>>>
35940>>>>>            
35940>>>>>            If (not(bDDHasFindReqError)) Begin
35942>>>>>                Get Data_Set_Server_Count to iMax
35943>>>>>                Decrement iMax
35944>>>>>                For iCount from 0 to iMax
35950>>>>>>
35950>>>>>                    Get Data_Set_Server iCount to iDSO
35951>>>>>                    If not (Visited_state(iDSO)) Begin
35953>>>>>                        Get Validate_Data_Sets of iDSO DoAllFg bNoStop to bErr
35954>>>>>                        If bErr Begin
35956>>>>>                            Move bErr to iRetVal
35957>>>>>                            If bNoStop ;                                Move 0 to bErr
35960>>>>>                        End
35960>>>>>>
35960>>>>>                    End
35960>>>>>>
35960>>>>>                Until bErr
35962>>>>>                If not bErr Begin
35964>>>>>                    Get Validate_Fields DoAllFg bNoStop to bErr
35965>>>>>                    If bErr ;                        Move bErr to iRetVal
35968>>>>>                End
35968>>>>>>
35968>>>>>            End
35968>>>>>>
35968>>>>>        End
35968>>>>>>
35968>>>>>        Set Visited_State to True
35969>>>>>        Function_Return iRetval
35970>>>>>    End_Function
35971>>>>>    
35971>>>>>    // This tests the DDO and all "up" DDOs to see if a switched parent / commit test even needs to be
35971>>>>>    // tested. This is called by the top ValidateSwitchedCommittedParents to see if a switch parent test
35971>>>>>    // even needs to be applied before it has to refinds records.
35971>>>>>    // Return true is there is nothing to test (i.e., the shortcut worked).
35971>>>>>    Function IsCommittedRecursiveUpParentChangeAllowed Returns Boolean
35973>>>>>        Boolean bAllowed bCommitted bVisited bHasRecord
35973>>>>>        Integer iServers iSrvr iParent
35973>>>>>        Handle hoSrvr
35973>>>>>        
35973>>>>>        
35973>>>>>        // optimization. We only test committed parents if one parent does not allow changing committed records.
35973>>>>>        // This avoids extra finds and relates when not needed
35973>>>>>        Set Visited_State to True
35974>>>>>        Get Data_Set_Server_Count to iServers
35975>>>>>        Get IsCommitted to bCommitted
35976>>>>>        Move 0 to iSrvr
35977>>>>>        Move True to bAllowed
35978>>>>>        While (iSrvr<iServers and bAllowed)
35982>>>>>            Get Data_Set_Server iSrvr to hoSrvr
35983>>>>>            Get Main_File of hoSrvr to iParent
35984>>>>>            // if committed and parent change not allowed, we are done
35984>>>>>            If (bCommitted) Begin
35986>>>>>                Get IsCommittedParentChangeAllowed iParent to bAllowed
35987>>>>>            End
35987>>>>>>
35987>>>>>            // if still allowed, check all parents
35987>>>>>            If (bAllowed) Begin
35989>>>>>                Get Visited_State of hoSrvr to bVisited
35990>>>>>                If not bVisited Begin
35992>>>>>                    Get IsCommittedRecursiveUpParentChangeAllowed of hoSrvr to bAllowed
35993>>>>>                End
35993>>>>>>
35993>>>>>            End
35993>>>>>>
35993>>>>>            Increment iSrvr
35994>>>>>        Loop
35995>>>>>>
35995>>>>>        Function_Return bAllowed
35996>>>>>    End_Function
35997>>>>>    
35997>>>>>    
35997>>>>>    // special validate-save check for changed committed parent. If the record is committed
35997>>>>>    // and it has a switched parent and this is not allowed, we have an error. This should rarely happen because the
35997>>>>>    // DEOs should guard aginst this. This is a recursive routine that requires special attention the first time through.
35997>>>>>    // When called from the we must refind the original record and all original parents. This way we can compare these parent
35997>>>>>    // rowids to the DD row id (if different, they've changed). At the end we must restore the DD records. Because this takes time
35997>>>>>    // we only even do this if this is committed and there is a chance that there are changed parents
35997>>>>>    
35997>>>>>    Function ValidateSwitchedCommittedParents Boolean bTop Returns Boolean
35999>>>>>        Integer iServers iSrvr iMain iParent iPMain
35999>>>>>        Handle hoSrvr
35999>>>>>        RowID riCrnt riParent riPCrnt
35999>>>>>        Boolean bChanged bCommitted bAllowed bErr bParentChanged bVisited
35999>>>>>        Boolean bHasRecord bPHasRecord bFound
35999>>>>>        
35999>>>>>        
35999>>>>>        // Shortcut optimization. This tests for any committed DDO with a parent that doesn't allow a switch
35999>>>>>        // return true if there is any reason to actually test any DDO up the tree for a parent change
35999>>>>>        If bTop Begin
36001>>>>>            // init visited nodes, these will be tested and set in IsCommittedRecursiveUpParentChangeAllowed
36001>>>>>            Send Initialize_Visited False False //false=up only, true=clear fields
36002>>>>>            Get IsCommittedRecursiveUpParentChangeAllowed to bAllowed
36003>>>>>            If bAllowed Begin
36005>>>>>                Function_Return False // if all are allowed, we have nothing to test - its ok
36006>>>>>            End
36006>>>>>>
36006>>>>>        End
36006>>>>>>
36006>>>>>        
36006>>>>>        Get Main_File to iMain
36007>>>>>        Get CurrentRowId to riCrnt
36008>>>>>        Get Data_Set_Server_Count to iServers
36009>>>>>        Get HasRecord to bHasRecord
36010>>>>>        
36010>>>>>        If (bHasRecord and (bTop or not(IsSameRowID(GetRowID(iMain),riCrnt))) ) Begin
36012>>>>>            // this refinds the main record and, most importantly, relates all original parents on up
36012>>>>>            // We now have the original parents which we can test to see if they are changed.
36012>>>>>            Get ReadByRowIdEx iMain riCrnt to bFound
36013>>>>>            If not bFound Begin
36015>>>>>                Error DFERR_CANT_REFIND_RECORD
36016>>>>>>
36016>>>>>                Function_Return True
36017>>>>>            End
36017>>>>>>
36017>>>>>        End
36017>>>>>>
36017>>>>>        
36017>>>>>        If (bTop) Begin
36019>>>>>            // If at start, init visited nodes, these will be tested and set during recursive calls to this function
36019>>>>>            Send Initialize_Visited False False // false=up only, true=clear fields
36020>>>>>        End
36020>>>>>>
36020>>>>>        
36020>>>>>        Set Visited_State to True
36021>>>>>        Get IsCommitted to bCommitted
36022>>>>>        If bCommitted Begin
36024>>>>>            // Parent_Changed_State tells us a parent is changed but not which one. Look at each child to see if it is changed.
36024>>>>>            // First see any any of the parents are changed.
36024>>>>>            Get Parent_Changed_State to bChanged
36025>>>>>            If bChanged Begin
36027>>>>>                // Parent_Changed_State tells us a parent is changed but not which one. Look at each child to see if it is changed.
36027>>>>>                Move 0 to iSrvr
36028>>>>>                While (iSrvr<iServers and not(bErr))
36032>>>>>                    Get Data_Set_Server iSrvr to hoSrvr
36033>>>>>                    Get Main_File of hoSrvr to iParent
36034>>>>>                    Get CurrentRowId of hoSrvr to riParent
36035>>>>>                    Move (not(IsSameRowID(GetRowID(iParent),riParent))) to bParentChanged // is parent changed?
36036>>>>>                    If bParentChanged Begin
36038>>>>>                        Get IsCommittedParentChangeAllowed iParent to bAllowed // is changing committed parent allowed?
36039>>>>>                        If not bAllowed Begin
36041>>>>>                            Move True to bErr
36042>>>>>                            If bErr Begin
36044>>>>>                                Send Data_Set_Error of hoSrvr -1 0 DD_CANNOT_SWITCH_PARENT
36045>>>>>                            End
36045>>>>>>
36045>>>>>                        End
36045>>>>>>
36045>>>>>                    End
36045>>>>>>
36045>>>>>                    Increment iSrvr
36046>>>>>                Loop
36047>>>>>>
36047>>>>>            End
36047>>>>>>
36047>>>>>        End
36047>>>>>>
36047>>>>>        
36047>>>>>        // no error in immediate we must continue this check up the parent tree.
36047>>>>>        Move 0 to iSrvr
36048>>>>>        While (iSrvr<iServers and not(bErr))
36052>>>>>            Get Data_Set_Server iSrvr to hoSrvr
36053>>>>>            Get Visited_State of hoSrvr to bVisited
36054>>>>>            If (not(bVisited)) Begin
36056>>>>>                
36056>>>>>                // if new record, we need to refind parent records from here since you cannot
36056>>>>>                // have done a find/relate on a new record.
36056>>>>>                If (not(bHasRecord)) Begin
36058>>>>>                    Get HasRecord of hoSrvr to bPHasRecord
36059>>>>>                    If (bPHasRecord) Begin
36061>>>>>                        Get Main_File of hoSrvr to iPMain
36062>>>>>                        Get CurrentRowId of hoSrvr to riPCrnt
36063>>>>>                        If (not(IsNullRowID(riPCrnt))) Begin
36065>>>>>                            Get ReadByRowIdEx of hoSrvr iPMain riPCrnt to bFound
36066>>>>>                            If not bFound Begin
36068>>>>>                                Error DFERR_CANT_REFIND_RECORD
36069>>>>>>
36069>>>>>                                Function_Return True
36070>>>>>                            End
36070>>>>>>
36070>>>>>                        End
36070>>>>>>
36070>>>>>                    End
36070>>>>>>
36070>>>>>                End
36070>>>>>>
36070>>>>>                
36070>>>>>                Get ValidateSwitchedCommittedParents of hoSrvr False to bErr // call recursively up the parent tree
36071>>>>>            End
36071>>>>>>
36071>>>>>            Increment iSrvr
36072>>>>>        Loop
36073>>>>>>
36073>>>>>        
36073>>>>>        If bTop Begin // if back to the top, make sure our buffers are correct.
36075>>>>>            Send Refind_Records
36076>>>>>        End
36076>>>>>>
36076>>>>>        
36076>>>>>        Function_Return bErr
36077>>>>>    End_Function
36078>>>>>    
36078>>>>>    Procedure Entry_Update_Data_Sets Integer iFile Integer iAll
36080>>>>>        
36080>>>>>        Handle hoBuff hoDSO
36080>>>>>        Boolean bCommit bIsFind bVisited bIsForeign
36080>>>>>        Integer iMax iCount iItems iOpts iChanges
36080>>>>>        
36080>>>>>        
36080>>>>>        Move record_buffer to hoBuff
36081>>>>>        Move (OPERATION_MODE<>MODE_SAVING) to bIsFind
36082>>>>>        
36082>>>>>        // first recurse to all parent ddos
36082>>>>>        Get Data_Set_Server_Count to iMax
36083>>>>>        Decrement iMax
36084>>>>>        For iCount from 0 to iMax
36090>>>>>>
36090>>>>>            Get Data_Set_Server iCount to hoDSO
36091>>>>>            Get Visited_State of hoDSO to bVisited
36092>>>>>            If not (bVisited) Begin
36094>>>>>                Send Entry_Update_Data_Sets to hoDSO iFile iAll
36095>>>>>            End
36095>>>>>>
36095>>>>>        Loop
36096>>>>>>
36096>>>>>        
36096>>>>>        // if find, we only do this if the main file is the same as the find file
36096>>>>>        If (not(bIsFind) or iFile=Main_File(Self)) Begin
36098>>>>>            If (not(bIsFind)) Begin
36100>>>>>                // if a save, we care if it is committed.
36100>>>>>                Get IsCommitted to bCommit
36101>>>>>            End
36101>>>>>>
36101>>>>>            
36101>>>>>            // pass if Find (True) or save (False). We only care about commit on saves
36101>>>>>            // The setting of bIsForeign is an approximation. Foreign is really a DEO and and not
36101>>>>>            // a DD concept - in fact, at this point we don't really know. For example, a save in a header/dtl
36101>>>>>            // detail DEO (ordrdtl grid)has header DEOs that are not really foreign. This test errs on the side
36101>>>>>            // of assuming it's foreign. This would cause problems with incorrect parent NoPuts except we also
36101>>>>>            // set a flag, Field_NoPutValueChangedByDeo, when a field is changed via a NoPut DEO. The DD will still update
36101>>>>>            // foreign NoPuts unless this field flag is set.
36101>>>>>            Move (OPERATION_ORIGIN<>Self and Allow_Foreign_New_Save_State(Self)=0) to bIsForeign
36102>>>>>            Send Entry_Update of hoBuff bIsFind (If(bCommit,1,0) + If(bIsForeign,2,0))
36103>>>>>            
36103>>>>>            // also move data from extended dd fields to buffer
36103>>>>>            Send ExtendedFieldsUpdate (not(bIsFind))
36104>>>>>        End
36104>>>>>>
36104>>>>>        Set Visited_State to True
36105>>>>>        
36105>>>>>    End_Procedure
36106>>>>>    
36106>>>>>    // is this field NoPut based passed Commit and Foreign flags.
36106>>>>>    Function FieldNoPut Integer iField Boolean bIsCommited Boolean bIsForeign Returns Boolean
36108>>>>>        Boolean bNoPut
36108>>>>>        // this uses runtime logic - the same use for moving DD Buffer to Field Buffer
36108>>>>>        Get IsFieldDDNoPut of Record_Buffer iField (If(bIsCommited,1,0) + If(bIsForeign,2,0)) to bNoPut
36109>>>>>        Function_Return bNoPut
36110>>>>>    End_Function
36111>>>>>    
36111>>>>>    
36111>>>>>    // Check that Server data-sets exist for all required server file numbers
36111>>>>>    Function Valid_Servers Returns Integer
36113>>>>>        Integer iRval
36113>>>>>        Integer iCount
36113>>>>>        Integer iMax
36113>>>>>        Integer iDSO
36113>>>>>        Integer iPos
36113>>>>>        Integer iFile
36113>>>>>        String  sFiles
36113>>>>>        
36113>>>>>        // First assemble a string of all server file#s in ','##',' format
36113>>>>>        Move ',' to sFiles
36114>>>>>        Get Data_Set_Server_Count to iMax
36115>>>>>        Decrement iMax
36116>>>>>        For iCount from 0 to iMax
36122>>>>>>
36122>>>>>            Get Data_Set_Server iCount to iDSO
36123>>>>>            Move ( sFiles + String(Main_file(iDSO)) + ",") to sFiles
36124>>>>>        Loop
36125>>>>>>
36125>>>>>        
36125>>>>>        // Make sure each required File exists
36125>>>>>        Get Server_File_Count to iMax
36126>>>>>        Decrement iMax
36127>>>>>        For iCount from 0 to iMax
36133>>>>>>
36133>>>>>            Get Server_File iCount to iFile
36134>>>>>            Move (Pos ( ','+String(iFile)+',' , sFiles)) to iPos
36135>>>>>            If (iPos = 0) ;                Move iFile to iRVal
36138>>>>>        Until iRval
36140>>>>>        Function_Return iRVal
36141>>>>>    End_Function
36142>>>>>    
36142>>>>>    
36142>>>>>    // Check that Client data-sets exist for all required Client file numbers
36142>>>>>    Function Valid_Clients Returns Integer
36144>>>>>        Integer iRval
36144>>>>>        Integer iCount
36144>>>>>        Integer iMax
36144>>>>>        Integer iDSO
36144>>>>>        Integer iPos
36144>>>>>        Integer iFile
36144>>>>>        String  sFiles
36144>>>>>        
36144>>>>>        // First assemble a string of all Client file#s in ','##',' format
36144>>>>>        Move ',' to sFiles
36145>>>>>        Get Data_Set_Client_Count to iMax
36146>>>>>        Decrement iMax
36147>>>>>        For iCount from 0 to iMax
36153>>>>>>
36153>>>>>            Get Data_Set_Client iCount to iDSO
36154>>>>>            Move ( sFiles + String(Main_file(iDSO))+",") to sFiles
36155>>>>>        Loop
36156>>>>>>
36156>>>>>        
36156>>>>>        // Make sure each required File exists
36156>>>>>        Get Client_File_Count to iMax
36157>>>>>        Decrement iMax
36158>>>>>        For iCount from 0 to iMax
36164>>>>>>
36164>>>>>            Get Client_File iCount to iFile
36165>>>>>            Move (Pos( ','+String(iFile)+',', sFiles)) to iPos
36166>>>>>            If (iPos = 0) ;                Move iFile to iRVal
36169>>>>>        Until iRval
36171>>>>>        Function_Return iRVal
36172>>>>>    End_Function
36173>>>>>    
36173>>>>>    
36173>>>>>    // Validates save updating connections. If error returns file# that is
36173>>>>>    // expected and missing. If no error Set Validated_Save_connectio_State
36173>>>>>    // indicating that the connection validation has occurred and is ok
36173>>>>>    Function Validate_Save_Structure Integer ForceFg Returns Integer
36175>>>>>        Integer iRval
36175>>>>>        Integer iMode
36175>>>>>        If not ForceFg Begin
36177>>>>>            Get Validate_Save_Structure_Mode to iMode
36178>>>>>            Move ( iMode=DD_VALIDATE_STRUCTURE_ALWAYS or ;                (iMode=DD_VALIDATE_STRUCTURE_ONCE and ;                Save_Structure_Validated_state(Self)=0 ) ) ;                to ForceFg
36179>>>>>        End
36179>>>>>>
36179>>>>>        If ForceFg Begin
36181>>>>>            Get Valid_Structure False to iRval
36182>>>>>            If (iRVal = 0) ;                Set Save_Structure_Validated_State to True
36185>>>>>        End
36185>>>>>>
36185>>>>>        Function_Return iRVal
36186>>>>>    End_Function
36187>>>>>    
36187>>>>>    // Validates Delete Structure. If cascade_state is true this must check
36187>>>>>    // up and down the tree. If no cascade_state just check up the tree.  If
36187>>>>>    // Ok, set Validated_Delete_no_Cascade_Connection_State and and or
36187>>>>>    // Validated_Delete_Cascade_Connection_State
36187>>>>>    // Pass: ForceFg - if TRUE force the validation.
36187>>>>>    Function Validate_Delete_Structure Integer ForceFg Returns Integer
36189>>>>>        Integer iCascade
36189>>>>>        Integer iMode
36189>>>>>        Integer iSt
36189>>>>>        Integer iRval
36189>>>>>        Get Cascade_delete_State to iCascade
36190>>>>>        If not ForceFg Begin
36192>>>>>            Get Validate_Delete_Structure_Mode to iMode
36193>>>>>            If (iMode=DD_VALIDATE_STRUCTURE_ONCE and iCascade );                Get Cascade_Delete_Structure_Validated_state to iSt
36196>>>>>            Else ;                Get No_Cascade_Delete_Structure_Validated_state to iSt
36198>>>>>            Move ( iMode=DD_VALIDATE_STRUCTURE_ALWAYS or ;                (iMode=DD_VALIDATE_STRUCTURE_ONCE and iSt=0) ) to ForceFg
36199>>>>>        End
36199>>>>>>
36199>>>>>        
36199>>>>>        If ForceFg Begin
36201>>>>>            Get Valid_Structure iCascade to iRval
36202>>>>>            If (iRval = 0) Begin
36204>>>>>                Set No_Cascade_Delete_Structure_Validated_State to True
36205>>>>>                If iCascade ;                    Set Cascade_Delete_Structure_Validated_State to True
36208>>>>>            End
36208>>>>>>
36208>>>>>        End
36208>>>>>>
36208>>>>>        Function_Return iRval
36209>>>>>    End_Function
36210>>>>>    
36210>>>>>    
36210>>>>>    // This procedure will be called whenever the Data_Set wants its DEOs to
36210>>>>>    // write their values to the record buffer. The value of OPERATION_MODE
36210>>>>>    // determines if this is for finding an record or before saving a record.
36210>>>>>    // We use this event to tell our Record_Buffer to update the
36210>>>>>    // global record buffer.
36210>>>>>    // Modified to visit all server DSOs
36210>>>>>    // Note that this is only sent to the DSO starting the operation.
36210>>>>>    // We must manually send this to all server data-sets ourselves
36210>>>>>    // Note that during a DSO save this will get passed iFile=0 and iAll=3
36210>>>>>    // Changed to Support EntryUpdateLocalState (private)
36210>>>>>    // as of 17.0, EntryUpdateLocalState is True which means that entry_updates
36210>>>>>    // for finds now through the DD Buffer (saves always did).
36210>>>>>    Procedure Request_Entry_Update Integer iFile Integer iAll
36212>>>>>        If ((Operation_Mode=MODE_SAVING and iAll=3) or (EntryUpdateLocalState(Self)) ) Begin //3=dso save
36214>>>>>            If (OPERATION_MODE=MODE_WAITING) Begin
36216>>>>>                // we will only not be in an operation if we are doing a find with EntryUpdateLocalState
36216>>>>>                // set to true. In such a case make this a finding. I am not this is actually needed
36216>>>>>                Send Update_Focus_Field_For_Operation MODE_FINDING
36217>>>>>            End
36217>>>>>>
36217>>>>>            Else Begin
36218>>>>>                // if here we already have an operation_mode so there is no need to do anything special
36218>>>>>                Send Update_Focus_Field // Make sure buffer has latest focus item changes
36219>>>>>            End
36219>>>>>>
36219>>>>>            Send Initialize_Visited False False // Clear up, do not clear fields
36220>>>>>            Send Entry_Update_Data_Sets iFile iAll
36221>>>>>        End
36221>>>>>>
36221>>>>>        Forward Send Request_Entry_Update iFile iAll
36223>>>>>    End_Procedure
36224>>>>>    
36224>>>>>    
36224>>>>>    
36224>>>>>    // Forces the focus field to get update its value with the data-set.
36224>>>>>    // This insures that the DSO and DEO contain the same values.
36224>>>>>    Procedure Update_Focus_Field
36226>>>>>        Integer iFocObj
36226>>>>>        Get Focus of desktop to iFocObj
36227>>>>>        If (Extended_DEO_State(iFocObj)) ;            Send Update_Focus_Field to iFocObj
36230>>>>>    End_Procedure
36231>>>>>    
36231>>>>>    // very internal. Used to set Operation_mode and Operation_origin before the
36231>>>>>    // update. A developer can use this in the DEO to know what state the update is in.
36231>>>>>    // This was created because a DEO value change will trigger an OnChange event and you
36231>>>>>    // can look at this and know that this is part of a DD operation.
36231>>>>>    // This is *only* called by the DD operations in this class and the change is made for as
36231>>>>>    // small of a period as possible.
36231>>>>>    Procedure Update_Focus_Field_For_Operation Integer iOperationMode
36233>>>>>        Integer iOldMode iOldOrigin
36233>>>>>        
36233>>>>>        Move OPERATION_MODE to iOldMode
36234>>>>>        Move OPERATION_ORIGIN to iOldOrigin
36235>>>>>        Move iOperationMode to OPERATION_MODE
36236>>>>>        Move Self to OPERATION_ORIGIN
36237>>>>>        Send Update_Focus_Field
36238>>>>>        Move iOldMode to OPERATION_MODE
36239>>>>>        Move iOldOrigin to OPERATION_ORIGIN
36240>>>>>    End_Procedure
36241>>>>>    
36241>>>>>    
36241>>>>>    // Augment to validate all field values that do not get
36241>>>>>    // validated as part of the item validation process. The advantage
36241>>>>>    // of item validation (over only field validation) is that an error
36241>>>>>    // returns you to the offending item.
36241>>>>>    Function Request_Validate Returns Integer
36243>>>>>        Integer iRetval iOldOrigin iOldMode iRetVal2
36243>>>>>        Handle[] DDsWithFindReqErrors
36244>>>>>        
36244>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
36246>>>>>            Send Update_Focus_Field_For_Operation MODE_VALIDATING // added 12.1/15.1
36247>>>>>        End
36247>>>>>>
36247>>>>>        Move Operation_Origin to iOldOrigin
36248>>>>>        Move Self to Operation_Origin
36249>>>>>        Move Operation_Mode to iOldMode
36250>>>>>        // clear all find req DD markers at the origin of the validate request. When request validates occur
36250>>>>>        // they will get added to this array and can be tested to see of such an error has occurred.
36250>>>>>        Set pDDsWithFindReqErrors to DDsWithFindReqErrors
36251>>>>>        // Prior to VDF7, we set this to Mode_Saving. We now have a special mode just for request_validate.
36251>>>>>        // We do this because:
36251>>>>>        //   1) because it is useful (more detail never hurts) and
36251>>>>>        //   2) we will allow set_field_current_value to update when mode_validation is set
36251>>>>>        Move MODE_VALIDATING to Operation_Mode
36252>>>>>        Send Initialize_Visited False True //false=up only, true=clear fields
36253>>>>>        Forward Get Request_Validate to iRetval // normal deo validate
36255>>>>>        // If DEO validation failed, do not validate other fields unless Validate_All_Fields is set
36255>>>>>        If ( (iRetval=0 or (Validate_All_Fields_State(Self))) and Validate_DEOs_Only_State(Self)=0) Begin
36257>>>>>            Get Validate_Data_Sets False (Validate_All_Fields_State(Self)) to iRetval2
36258>>>>>            Move (iRetval or iRetVal2) to iRetval
36259>>>>>        End
36259>>>>>>
36259>>>>>        
36259>>>>>        If (iRetval=0) Begin
36261>>>>>            Get ValidateSwitchedCommittedParents True to iRetval
36262>>>>>        End
36262>>>>>>
36262>>>>>        
36262>>>>>        Move iOldMode   to Operation_Mode
36263>>>>>        Move iOldOrigin to Operation_Origin
36264>>>>>        Function_Return iRetval
36265>>>>>    End_Function
36266>>>>>    
36266>>>>>    Function Request_Validate_All Returns Integer
36268>>>>>        Integer bOld iRetVal
36268>>>>>        Get Validate_All_Fields_State to bOld
36269>>>>>        Set Validate_All_Fields_State to True
36270>>>>>        Get request_validate to iretVal
36271>>>>>        Set Validate_All_Fields_State to bOld
36272>>>>>        Function_Return iRetval
36273>>>>>    End_Function
36274>>>>>    
36274>>>>>    
36274>>>>>    
36274>>>>>    // Like Item_find except entry-update is forced through the DD, not DEO
36274>>>>>    Procedure File_Field_Find Integer iFindMode Integer iFile Integer iField ;            Integer bEntUpdt  Integer bShowErr Integer bDfrd
36276>>>>>        Integer bOld
36276>>>>>        Get EntryUpdateLocalState to bOld
36277>>>>>        Set EntryUpdateLocalState to True
36278>>>>>        Send Item_Find iFindMode iFile iField bEntUpdt bShowErr bDfrd
36279>>>>>        Set EntryUpdateLocalState to bOld
36280>>>>>    End_Procedure
36281>>>>>    
36281>>>>>    // Autofind for requestd file, field and mode.
36281>>>>>    //    If mode not passed, EQ is assummed
36281>>>>>    Procedure File_Field_AutoFind Integer iFile Integer iField Integer iFindMode
36283>>>>>        Integer eMode
36283>>>>>        If iFile  Begin
36285>>>>>            // if no 3rd argument, default to autofind
36285>>>>>            Move (If(Num_Arguments<3,EQ,iFindMode)) to eMode
36286>>>>>            Send File_Field_Find eMode iFile iField True False False
36287>>>>>        End
36287>>>>>>
36287>>>>>    End_Procedure
36288>>>>>    
36288>>>>>    // Autofind in default mode (does not set changed states). Can be used
36288>>>>>    // within Clear and Clear_all to autofind parents. Parent values can be
36288>>>>>    // maintained using retainAll option
36288>>>>>    Procedure File_Field_Default_AutoFind Integer iFile Integer iField
36290>>>>>        Integer iOldState
36290>>>>>        Handle  hoDD
36290>>>>>        Get Data_set iFile to hoDD
36291>>>>>        If hoDD Begin
36293>>>>>            Get Change_disabled_State of hoDD to iOldState
36294>>>>>            Set Change_disabled_State of hoDD to True
36295>>>>>            Send File_Field_AutoFind  of hoDD iFile iField EQ
36296>>>>>            Set Change_disabled_State of hoDD to iOldState
36297>>>>>            Set changed_state to False
36298>>>>>        End
36298>>>>>>
36298>>>>>    End_Procedure
36299>>>>>    
36299>>>>>    // File_Index_find
36299>>>>>    // Like item_find except you pass the index you want to find with and
36299>>>>>    // ent-update occurs through DDO buffers not deo buffers.
36299>>>>>    // This is currently private and is only used by web-applications
36299>>>>>    Procedure File_Index_Find Integer iFindMode Integer iFile Integer iIndex ;            Integer bEntUpdt  Integer bShowErr Integer bDfrd
36301>>>>>        Integer bOld
36301>>>>>        RowID riRec
36301>>>>>        Integer wasChanged hDD iOldStat
36301>>>>>        Boolean bOk
36301>>>>>        
36301>>>>>        Get Data_Set iFile to hDD
36302>>>>>        If (hDD=0) Begin
36304>>>>>            Error DFERR_PROGRAM C_$CannotFindDD
36305>>>>>>
36305>>>>>            Procedure_Return
36306>>>>>        End
36306>>>>>>
36306>>>>>        
36306>>>>>        Get EntryUpdateLocalState to bOld
36307>>>>>        Set EntryUpdateLocalState to True
36308>>>>>        
36308>>>>>        //  'hold' buffer to prepare for entry_update
36308>>>>>        Move (getRowId(iFile)) to riRec
36309>>>>>        Get_Attribute DF_FILE_STATUS of iFile to iOldStat
36312>>>>>        Set_Attribute DF_FILE_STATUS of iFile to DF_FILE_INACTIVE
36315>>>>>        
36315>>>>>        If bEntUpdt Begin
36317>>>>>            Send Request_Entry_Update to hDD iFile 1  //entUpdt all DEOs as required
36318>>>>>            
36318>>>>>            //
36318>>>>>            // we really only need to know if any segment of the index changed
36318>>>>>            // but since we don't have field-changed flags, we look at the
36318>>>>>            // whole recbuf - this is consistent with 2.3b and 3.0 non-dataset
36318>>>>>            // behavior.
36318>>>>>            //
36318>>>>>            Move (iOldStat<>DF_FILE_INACTIVE) to wasChanged
36319>>>>>            If not wasChanged ;                Get_Attribute DF_FILE_CHANGED of iFile to wasChanged
36324>>>>>            If not wasChanged ;                Constrained_Clear iFindMode iFile by iIndex
36329>>>>>            
36329>>>>>        End
36329>>>>>>
36329>>>>>        Move False to Err
36330>>>>>        If bDfrd ;            Send Request_Read iFindMode iFile iIndex
36333>>>>>        Else ;            Send Request_Find iFindMode iFile iIndex
36335>>>>>        If (not(Found) and  not(err)) Begin
36337>>>>>            // refind original record (or leave it cleared if not record)
36337>>>>>            Move (FindByRowId(iFile,riRec)) to bOk
36338>>>>>            
36338>>>>>            If bShowErr ;                Error (If(iFindMode<2, DFERR_FIND_PRIOR_BEG_OF_FILE, DFERR_FIND_PAST_END_OF_FILE))
36341>>>>>            Move False to Err
36342>>>>>        End
36342>>>>>>
36342>>>>>        Set EntryUpdateLocalState to bOld
36343>>>>>    End_Procedure
36344>>>>>    
36344>>>>>    // This does a refind of all records based on the contents of the
36344>>>>>    // refine_record_id property.
36344>>>>>    // This would be used after clearing the DDs and loading the local rencum
36344>>>>>    // buffer with recnums. This can be used by remote DEOs (BPOs).
36344>>>>>    //
36344>>>>>    // Find all existing records. This must be done in bottom-up, breadth
36344>>>>>    // first order. i.e., Start with the passed DD, find it and then find for
36344>>>>>    // parents. Only find if the record is non-zero and it is different than
36344>>>>>    // the current_record.
36344>>>>>    // This order will allow us to support changed parents.
36344>>>>>    // Don't use this if you do not understand what it does.
36344>>>>>    // Private.Find_Records is a helper. We will keep this private because
36344>>>>>    // it is rather specialized and only used by WebApp.
36344>>>>>    Procedure Find_Records
36346>>>>>        Send Initialize_Visited False False // Clear up, do not clear fields
36347>>>>>        Send Private.Find_Records           // refind all records in upward sweep
36348>>>>>    End_Procedure
36349>>>>>    
36349>>>>>    
36349>>>>>    Procedure Private.Find_Records
36351>>>>>        Integer hPrnt
36351>>>>>        Integer iMax
36351>>>>>        Integer iCount
36351>>>>>        RowID riRec
36351>>>>>        Integer iRec iMain
36351>>>>>        // works with both recId and rowId. Only one should ever be set.
36351>>>>>        // find(clear) record, if needed
36351>>>>>        Get Main_File to iMain
36352>>>>>        // assume that either prFindRowId or Find_record_id has a value - never both
36352>>>>>        // also assume Find_record_id only has values when you are using a recnum table
36352>>>>>        Get prFindRowId to riRec
36353>>>>>        If not (IsNullRowId(riRec)) Begin
36355>>>>>            If not (IsSameRowId(riRec, CurrentRowId(Self) ) ) Begin
36357>>>>>                Send FindByRowId iMain riRec // find an Relate all parents
36358>>>>>            End
36358>>>>>>
36358>>>>>            Set prFindRowId to (NullRowId())  // reset refind rec back to zero.
36359>>>>>        End
36359>>>>>>
36359>>>>>        Else Begin
36360>>>>>            // if this has a recnum, it better be a recnum table or an error will occur.
36360>>>>>            // This is not being tested for a recnum table on purpose. If someone is setting Find_record_id
36360>>>>>            // on a non-recnum table, they doing something wrong. An Error will be a good thing.
36360>>>>>            Get Find_Record_Id to iRec
36361>>>>>            If iRec Begin
36363>>>>>                If (iRec<>Current_record(Self)) Begin
36365>>>>>                    Send Find_By_Recnum iMain iRec // find an Relate all parents
36366>>>>>                End
36366>>>>>>
36366>>>>>                Set Find_record_id to 0 // reset refind rec back to zero.
36367>>>>>            End
36367>>>>>>
36367>>>>>        End
36367>>>>>>
36367>>>>>        Set Visited_State to True
36368>>>>>        
36368>>>>>        // recurse and do the same to all parent files
36368>>>>>        // in almost all cases, there will be no new finding here since the relate has
36368>>>>>        // found the records. If the record is different than the relate, we have
36368>>>>>        // a switched parent state (should_save will be set appropriately).
36368>>>>>        Get Data_Set_Server_Count to iMax
36369>>>>>        Decrement iMax
36370>>>>>        For iCount from 0 to iMax
36376>>>>>>
36376>>>>>            Get Data_Set_Server iCount to hPrnt
36377>>>>>            If not (Visited_state(hPrnt)) ;                Send Private.Find_Records to hPrnt
36380>>>>>        Loop
36381>>>>>>
36381>>>>>    End_Procedure
36382>>>>>    
36382>>>>>    // This Mark_Id creates a sequence Id for this clear. This way
36382>>>>>    // DDOs only get cleared one time during this process.
36382>>>>>    Procedure IncrementCurrentMarkId
36384>>>>>        If (DD_Current_Mark_ID>65536) Begin
36386>>>>>            Move 0 to DD_Current_Mark_id
36387>>>>>        End
36387>>>>>>
36387>>>>>        Increment DD_Current_Mark_id
36388>>>>>    End_Procedure
36389>>>>>    
36389>>>>>    
36389>>>>>    // private use by new webapp framework as of 18.2.
36389>>>>>    // pass bStart as True if this is the start of the resynch.
36389>>>>>    Function ReSyncRecords Boolean bStart Returns Handle
36391>>>>>        RowID riRowId riCrnt
36391>>>>>        Boolean bOk bOldReSync bVisited
36391>>>>>        Handle hoOtherDDO hoBadDDO hoBadPrntDDO
36391>>>>>        Integer iMax iCount iMain
36391>>>>>
36391>>>>>        If bStart Begin
36393>>>>>            Send InitializeAllVisited
36394>>>>>        End
36394>>>>>>
36394>>>>>        
36394>>>>>        // we want depth first traversal. Make sure children are handled before parents
36394>>>>>        // Recursively traverse Children, Find by RowId, Recursively traverse Parents
36394>>>>>        // Use visited_state logic to avoid multiple visits caused by diamond DDO strutures
36394>>>>>        
36394>>>>>        //mark first so we don't visit this coming back up.
36394>>>>>        Set Visited_State to True
36395>>>>>        
36395>>>>>        // traverse downward first
36395>>>>>        Get Data_Set_Client_Count to iMax
36396>>>>>        For iCount from 0 to (iMax-1)
36402>>>>>>
36402>>>>>            Get Data_Set_Client iCount to hoOtherDDO
36403>>>>>            Get Visited_State of hoOtherDDO to bVisited
36404>>>>>            If not bVisited Begin
36406>>>>>                Get ReSyncRecords of hoOtherDDO False to hoBadPrntDDO
36407>>>>>                If (hoBadPrntDDO and not(hoBadDDO)) Begin
36409>>>>>                    Move hoBadPrntDDO to hoBadDDO
36410>>>>>                End
36410>>>>>>
36410>>>>>            End
36410>>>>>>
36410>>>>>        Loop
36411>>>>>>
36411>>>>>        
36411>>>>>        // Find record for DD. It might already be correct if child has already
36411>>>>>        // related it in. If not correct after a relate, this has been switched by this
36411>>>>>        // user or switched by another user, in which case it will be swtitched back
36411>>>>>        // (DDOs have always worked this way).
36411>>>>>        Get prFindRowId to riRowId
36412>>>>>        Get Main_File to iMain
36413>>>>>        Get CurrentRowId to riCrnt
36414>>>>>        If ( not(IsSameRowId(riRowID, riCrnt)) ) Begin
36416>>>>>            Get pbInReSync to bOldReSync
36417>>>>>            Set pbInReSync to True
36418>>>>>            
36418>>>>>            If (IsNullRowId(riRowID)) Begin
36420>>>>>                Send Clear
36421>>>>>            End
36421>>>>>>
36421>>>>>            Else Begin
36422>>>>>                Get FindByRowIdExNoAutoFill iMain riRowId to bOk
36423>>>>>                If not bOk Begin
36425>>>>>                    Move Self to hoBadDDO
36426>>>>>                End
36426>>>>>>
36426>>>>>            End
36426>>>>>>
36426>>>>>            Set pbInReSync to bOldReSync
36427>>>>>        End
36427>>>>>>
36427>>>>>        
36427>>>>>        // finally traverse to parents
36427>>>>>        Get Data_Set_Server_Count to iMax
36428>>>>>        For iCount from 0 to (iMax-1)
36434>>>>>>
36434>>>>>            Get Data_Set_Server iCount to hoOtherDDO
36435>>>>>            Get Visited_State of hoOtherDDO to bVisited
36436>>>>>            If not bVisited Begin
36438>>>>>                Get ReSyncRecords of hoOtherDDO False to hoBadPrntDDO
36439>>>>>                If (hoBadPrntDDO and not(hoBadDDO)) Begin
36441>>>>>                    Move hoBadPrntDDO to hoBadDDO
36442>>>>>                End
36442>>>>>>
36442>>>>>            End
36442>>>>>>
36442>>>>>        Loop
36443>>>>>>
36443>>>>>        
36443>>>>>        If bStart Begin
36445>>>>>            Send InitializeAllVisited
36446>>>>>            Send ResetChangedStates
36447>>>>>        End
36447>>>>>>
36447>>>>>        
36447>>>>>        Function_Return hoBadDDO
36448>>>>>    End_Function
36449>>>>>    
36449>>>>>
36449>>>>>    Procedure ResetChangedStates
36451>>>>>        Boolean bVisited
36451>>>>>        Handle hoOtherDDO
36451>>>>>        Integer iMax iCount
36451>>>>>        tDDChangedInfo DDChangedInfo
36451>>>>>        tDDChangedInfo DDChangedInfo
36451>>>>>                
36451>>>>>        // we want depth first traversal.
36451>>>>>        //mark first so we don't visit this coming back up.
36451>>>>>        Set Visited_State to True
36452>>>>>        
36452>>>>>        // traverse downward first
36452>>>>>        Get Data_Set_Client_Count to iMax
36453>>>>>        For iCount from 0 to (iMax-1)
36459>>>>>>
36459>>>>>            Get Data_Set_Client iCount to hoOtherDDO
36460>>>>>            Get Visited_State of hoOtherDDO to bVisited
36461>>>>>            If not bVisited Begin
36463>>>>>                Send ResetChangedStates of hoOtherDDO
36464>>>>>            End
36464>>>>>>
36464>>>>>        Loop
36465>>>>>>
36465>>>>>        
36465>>>>>        // Set changed states for this DDO
36465>>>>>        Get pDDChangedInfo to DDChangedInfo
36466>>>>>        Set Changed_State to False // clears changed_state and parent_changed_states            
36467>>>>>        Set Changed_State to DDChangedInfo.bChanged            
36468>>>>>        For iCount from 0 to (SizeOfArray(DDChangedInfo.ParentChanged)-1)
36474>>>>>>
36474>>>>>            Send SetParentDDOSwitched DDChangedInfo.ParentChanged[iCount].iTable DDChangedInfo.ParentChanged[iCount].bSwitched
36475>>>>>        Loop
36476>>>>>>
36476>>>>>        
36476>>>>>        // finally traverse to parents
36476>>>>>        Get Data_Set_Server_Count to iMax
36477>>>>>        For iCount from 0 to (iMax-1)
36483>>>>>>
36483>>>>>            Get Data_Set_Server iCount to hoOtherDDO
36484>>>>>            Get Visited_State of hoOtherDDO to bVisited
36485>>>>>            If not bVisited Begin
36487>>>>>                Send ResetChangedStates of hoOtherDDO
36488>>>>>            End
36488>>>>>>
36488>>>>>        Loop
36489>>>>>>
36489>>>>>        
36489>>>>>    End_Procedure
36490>>>>>
36490>>>>>    // private use by new webapp framework (pre 18.2)
36490>>>>>    Function ReSyncRecord Returns Boolean
36492>>>>>        RowID riRowId
36492>>>>>        Boolean bOk bOldReSync
36492>>>>>        Handle hPrnt
36492>>>>>        Integer iMax iCount iMain
36492>>>>>        
36492>>>>>        Get pbInReSync to bOldReSync
36493>>>>>        
36493>>>>>        Get prFindRowId to riRowId
36494>>>>>        Get Main_File to iMain
36495>>>>>        If not (IsSameRowId(riRowID, CurrentRowId(Self) ) ) Begin
36497>>>>>            If (IsNullRowId(riRowID)) Begin
36499>>>>>                Set pbInReSync to True
36500>>>>>                Send Clear
36501>>>>>                Set pbInReSync to bOldReSync
36502>>>>>            End
36502>>>>>>
36502>>>>>            Else Begin
36503>>>>>                Set pbInReSync to True
36504>>>>>                Get FindByRowIdExNoAutoFill iMain riRowId to bOk
36505>>>>>                Set pbInReSync to bOldReSync
36506>>>>>                If not bOk Begin
36508>>>>>                    Function_Return False
36509>>>>>                End
36509>>>>>>
36509>>>>>            End
36509>>>>>>
36509>>>>>            
36509>>>>>            // check that the relate found all the parent records we expect.
36509>>>>>            // This should be correct unless a parent has been switched. Constrained
36509>>>>>            // parents, by definition, should already be correct. See **Note** below
36509>>>>>            Get Data_Set_Server_Count to iMax
36510>>>>>            For iCount from 0 to (iMax-1)
36516>>>>>>
36516>>>>>                Get Data_Set_Server iCount to hPrnt
36517>>>>>                If (Constrain_File(Self)<>Main_File(hPrnt) and ;                    not (IsSameRowID(prFindRowId(hPrnt),CurrentRowId(hPrnt)))) Begin
36519>>>>>                    // the parent is either wrong or not processed yet. Either way
36519>>>>>                    // make it right.
36519>>>>>                    Get ReSyncRecord of hPrnt to bOk
36520>>>>>                    If not bOk Begin
36522>>>>>                        Function_Return False
36523>>>>>                    End
36523>>>>>>
36523>>>>>                End
36523>>>>>>
36523>>>>>            Loop
36524>>>>>>
36524>>>>>        End
36524>>>>>>
36524>>>>>        
36524>>>>>        Function_Return True
36525>>>>>    End_Function
36526>>>>>    
36526>>>>>    // **Note** - dealing with changed parents and diamonds during a resync.
36526>>>>>    // If there is not a relates-to contraint between DD and child it is possible
36526>>>>>    // that the child find's relate will change the just found parent DD.
36526>>>>>    // Assuming this is not a structure bug, it means the parent is changed parent and that
36526>>>>>    // change must occur after the child record has been found and related. Therefore we add
36526>>>>>    // check after each child find to see if an parent is incorrect. If it is, either it is a
36526>>>>>    // switched parent or we haven't processed it yet. If the record is fine it
36526>>>>>    // just does nothing. For example (where *=relates-to):
36526>>>>>    //     W
36526>>>>>    //   */  \*
36526>>>>>    //   X    Y
36526>>>>>    //    \  /*
36526>>>>>    //     Z
36526>>>>>    // Assume you found a Z and changed its parent X.
36526>>>>>    // The refind order can be: WXZY or WYZX
36526>>>>>    // If WXZY the refound parent will be lost because Z will relate after the X
36526>>>>>    // find and replace it with the original parent. To control this we add this check
36526>>>>>    // after child Z has done its work. We only need to do this when child DDOs exist
36526>>>>>    // that are not constrained. This can change the order that DDOs are resynced but it
36526>>>>>    // should not matter.
36526>>>>>    
36526>>>>>    
36526>>>>>    
36526>>>>>    // Private use by new webapp framework
36526>>>>>    Procedure ReSyncClearAll
36528>>>>>        Boolean bOldReSync
36528>>>>>        Get pbInReSync to bOldReSync
36529>>>>>        // we need this to stop RememberLast and retains. We don't want those during a resyc clear
36529>>>>>        Set pbInReSync to True
36530>>>>>        Send Clear_All
36531>>>>>        Set pbInReSync to bOldReSync
36532>>>>>    End_Procedure
36533>>>>>    
36533>>>>>    // returns table name for error display. By default it returns the logical name
36533>>>>>    // can be augmented to return other information
36533>>>>>    Function ErrorMessageTableName Integer iTable Returns String
36535>>>>>        String sTable
36535>>>>>        Get_Attribute DF_FILE_LOGICAL_NAME of iTable to sTable
36538>>>>>        Function_Return sTable
36539>>>>>    End_Function
36540>>>>>    
36540>>>>>    
36540>>>>>    // Augmented to test updating connections.
36540>>>>>    // If error report it.
36540>>>>>    Procedure Request_Save
36542>>>>>        Integer iRval
36542>>>>>        String sTable
36542>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
36544>>>>>            Send Update_Focus_Field_For_Operation MODE_SAVING // added in 12.1/15.1
36545>>>>>            Get Validate_Save_Structure False to iRval
36546>>>>>            If iRval Begin
36548>>>>>                Get ErrorMessageTableName iRval to sTable
36549>>>>>                Move (String(iRval) * "(" - sTable -")") to sTable
36550>>>>>                Send Data_Set_Error -1 DFERR_PROGRAM DD_INVALID_SAVE_STRUCTURE sTable
36551>>>>>                Procedure_Return
36552>>>>>            End
36552>>>>>>
36552>>>>>        End
36552>>>>>>
36552>>>>>        Forward Send Request_Save
36554>>>>>    End_Procedure
36555>>>>>    
36555>>>>>    // Augmented to test updating connections.
36555>>>>>    // If error report it.
36555>>>>>    Procedure Request_Delete
36557>>>>>        Integer iRval
36557>>>>>        String sTable
36557>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
36559>>>>>            Send Update_Focus_Field_For_Operation MODE_DELETING // added to 12.1/15.1
36560>>>>>            Get Validate_Delete_Structure False to iRval
36561>>>>>            If iRval Begin
36563>>>>>                Get ErrorMessageTableName iRval to sTable
36564>>>>>                Move (String(iRval) * "(" - sTable -")") to sTable
36565>>>>>                Send data_Set_Error -1 DFERR_PROGRAM DD_INVALID_DELETE_STRUCTURE sTable
36566>>>>>                Procedure_Return
36567>>>>>            End
36567>>>>>>
36567>>>>>        End
36567>>>>>>
36567>>>>>        Forward Send Request_Delete
36569>>>>>    End_Procedure
36570>>>>>    
36570>>>>>    // Set status-line help for the passed field. This could have been named
36570>>>>>    // Set Field_Status_Help but this keeps this message interface consistent
36570>>>>>    // with the rest of DF for windows.
36570>>>>>    Procedure Set Status_Help Integer iField String sVal
36572>>>>>        Set Value of (StatusHelp_Array(Self)) iField to sVal
36573>>>>>    End_Procedure
36574>>>>>    
36574>>>>>    // Get status-line help for the passed field. This could have been named
36574>>>>>    // Get Field_Status_Help but this keeps this message interface consistent
36574>>>>>    // with the rest of DF for windows.
36574>>>>>    Function Status_Help Integer iField Returns String
36576>>>>>        String sHelp
36576>>>>>        Integer iObj
36576>>>>>        Move (StatusHelp_Array(Self)) to iObj
36577>>>>>        If (Item_Count(iObj)>iField) Begin
36579>>>>>            Get value of iObj iField to sHelp
36580>>>>>            If (sHelp = '0') ;                Move '' to shelp
36583>>>>>        End
36583>>>>>>
36583>>>>>        Function_Return shelp
36584>>>>>    End_Function
36585>>>>>    
36585>>>>>    // Get status-line help for the passed file and field. This is called
36585>>>>>    // by DEOs (or any other object) that needs help for a particular file
36585>>>>>    // and field.
36585>>>>>    Function File_Field_Status_Help Integer iFile Integer iField Returns String
36587>>>>>        Integer iDSO
36587>>>>>        String sValue
36587>>>>>        Get Data_set iFile to iDSO
36588>>>>>        If iDSO ;            Get Status_Help of iDSO iField to sValue
36591>>>>>        Function_Return sValue
36592>>>>>    End_Function
36593>>>>>    
36593>>>>>    // Allows user to set a mask type. Legal value is any of the current mask
36593>>>>>    // window types. 0 Means undefined.
36593>>>>>    Procedure Set Field_Mask_Type Integer iField Integer iType
36595>>>>>        Set Field_Mask_Type of (FieldMask_Array(Self)) iField to iType
36596>>>>>    End_Procedure
36597>>>>>    
36597>>>>>    Function Field_Mask_Type Integer iField Returns Integer
36599>>>>>        Function_Return (Field_Mask_Type(FieldMask_Array(Self),iField))
36600>>>>>    End_Function
36601>>>>>    
36601>>>>>    Function File_Field_Mask_Type Integer iFile Integer iField Returns Integer
36603>>>>>        Integer iDSO
36603>>>>>        Get Data_set iFile to iDSO
36604>>>>>        If iDSO ;            Function_Return (Field_Mask_Type(iDSO,iField))
36607>>>>>    End_Function
36608>>>>>    
36608>>>>>    // If TRUE the value returned by DEO will contain mask characters.
36608>>>>>    // Currently not supported.
36608>>>>>    Procedure Set Field_Mask_Value_State Integer iField Integer iState
36610>>>>>        Set Field_Mask_Value_State of (FieldMask_Array(Self)) iField to iState
36611>>>>>    End_Procedure
36612>>>>>    
36612>>>>>    Function Field_Mask_Value_State Integer iField Returns Integer
36614>>>>>        Function_Return (Field_Mask_Value_State(FieldMask_Array(Self),iField))
36615>>>>>    End_Function
36616>>>>>    
36616>>>>>    Function File_Field_Mask_Value_State Integer iFile Integer iField Returns Integer
36618>>>>>        Integer iDSO
36618>>>>>        Get Data_set iFile to iDSO
36619>>>>>        If iDSO ;            Function_Return (Field_Mask_Value_State(iDSO,iField))
36622>>>>>    End_Function
36623>>>>>    
36623>>>>>    // Allows user to set a mask strinng. Legal value is any of the current
36623>>>>>    // masks. Note an empty string with a valid mask type implies that the
36623>>>>>    // system should figure it out by itself.
36623>>>>>    Procedure Set Field_Mask Integer iField String sMask
36625>>>>>        Set Field_Mask of (FieldMask_Array(Self)) iField to sMask
36626>>>>>        If (Data_Set_User_Interface_Count(Self)) ;            Send Field_Mask_Changed iField sMask
36629>>>>>    End_Procedure
36630>>>>>    
36630>>>>>    Function Field_Mask Integer iField Returns String
36632>>>>>        Function_Return (Field_Mask(FieldMask_Array(Self),iField))
36633>>>>>    End_Function
36634>>>>>    
36634>>>>>    Function File_Field_Mask Integer iFile Integer iField Returns String
36636>>>>>        Integer iDSO
36636>>>>>        String sValue
36636>>>>>        Get Data_set iFile to iDSO
36637>>>>>        If iDSO ;            Get Field_Mask of iDSO iField to sValue
36640>>>>>        Function_Return sValue
36641>>>>>    End_Function
36642>>>>>    
36642>>>>>    // Short for field. This is normally used by grid headers.
36642>>>>>    Procedure Set Field_Label_Short Integer iField String sName
36644>>>>>        Set Field_Label_Short of (FieldMask_Array(Self)) iField to sName
36645>>>>>        If (Data_Set_User_Interface_Count(Self)) ;            Send Field_Label_Changed iField 0 sName
36648>>>>>    End_Procedure
36649>>>>>    
36649>>>>>    Function Field_Label_Short Integer iField Returns String
36651>>>>>        Function_Return (Field_Label_Short(FieldMask_Array(Self),iField))
36652>>>>>    End_Function
36653>>>>>    
36653>>>>>    Function File_Field_Label_Short Integer iFile Integer iField Returns String
36655>>>>>        Integer iDSO
36655>>>>>        String sValue
36655>>>>>        Get Data_set iFile to iDSO
36656>>>>>        If iDSO ;            Get Field_Label_Short of iDSO iField to sValue
36659>>>>>        Function_Return sValue
36660>>>>>    End_Function
36661>>>>>    
36661>>>>>    // Full Name for field. This is normally used by form labels
36661>>>>>    Procedure Set Field_Label_Long Integer iField String sName
36663>>>>>        Set Field_Label_Long of (FieldMask_Array(Self)) iField to sName
36664>>>>>        If (Data_Set_User_Interface_Count(Self)) ;            Send Field_Label_Changed iField 1 sName
36667>>>>>    End_Procedure
36668>>>>>    
36668>>>>>    Function Field_Label_Long Integer iField Returns String
36670>>>>>        Function_Return (Field_Label_Long(FieldMask_Array(Self),iField))
36671>>>>>    End_Function
36672>>>>>    
36672>>>>>    Function File_Field_Label_Long Integer iFile Integer iField Returns String
36674>>>>>        Integer iDSO
36674>>>>>        String sValue
36674>>>>>        Get Data_set iFile to iDSO
36675>>>>>        If iDSO ;            Get Field_Label_Long of iDSO iField to sValue
36678>>>>>        Function_Return sValue
36679>>>>>    End_Function
36680>>>>>    
36680>>>>>    // This is not really a DD attribute (it is in the API) but it is
36680>>>>>    // appropriate to be accessed from the DD
36680>>>>>    Function Field_Label_Tag Integer iField Returns String
36682>>>>>        String sName
36682>>>>>        Integer iFile
36682>>>>>        Get Main_File to iFile
36683>>>>>        If iFile ;            Get_Attribute DF_FIELD_NAME of iFile iField to sName
36688>>>>>        Function_Return sName
36689>>>>>    End_Function
36690>>>>>    
36690>>>>>    Function SmartCase String sName Returns String
36692>>>>>        Integer iPos iNewPos
36692>>>>>        String sRight
36692>>>>>        Move (Replaces("_",lowercase(sName)," ")) to sName
36693>>>>>        Move (Trim (Replaces(".",sName," "))) to sName
36694>>>>>        Move 1 to iPos
36695>>>>>        Repeat
36695>>>>>>
36695>>>>>            Move (mid(sName,255,iPos+1)) to sRight
36696>>>>>            Move (left(sName,iPos-1) + Uppercase(mid(sName,1,iPos)) + sRight) to sName
36697>>>>>            Move (Pos( " ", sRight)) to iNewPos
36698>>>>>            If (iNewPos = 0) ;                Break
36701>>>>>            Add (iNewPos+1) to iPos
36702>>>>>        Loop
36703>>>>>>
36703>>>>>        Function_Return sName
36704>>>>>    End_Function
36705>>>>>    
36705>>>>>    Enumeration_List
36705>>>>>        Define DD_LABEL_SHORT
36705>>>>>        Define DD_LABEL_LONG
36705>>>>>        Define DD_LABEL_TAG
36705>>>>>    End_Enumeration_List
36705>>>>>    
36705>>>>>    // Handy function to get the label for a field. Three "types" are
36705>>>>>    // supported:
36705>>>>>    // DD_LABEL_SHORT  use short, if none use long, if none use smart tag
36705>>>>>    // DD_LABEL_LONG   use long, if none use smart tag
36705>>>>>    // DD_LABEL_TAG    use smart tag
36705>>>>>    // If you want an explicit field name use oneof the other messages.
36705>>>>>    Function Field_Label Integer iField Integer iType Returns String
36707>>>>>        Integer iServer
36707>>>>>        String sValue
36707>>>>>        If (iType = DD_LABEL_SHORT) ;  // 0 = Short            Get Field_Label_Short iField to sValue
36710>>>>>        If (iType = DD_LABEL_LONG or (iType=DD_LABEL_SHORT and sValue='')) ;            Get Field_Label_Long iField to sValue
36713>>>>>        If (iType = DD_LABEL_TAG or sValue="") Begin
36715>>>>>            Get Field_Label_Tag iField to sValue
36716>>>>>            Get SmartCase sValue to sValue
36717>>>>>        End
36717>>>>>>
36717>>>>>        Function_Return sValue
36718>>>>>    End_Function
36719>>>>>    
36719>>>>>    Function File_Field_Label Integer iFile Integer iField Integer iType Returns String
36721>>>>>        Integer iDSO
36721>>>>>        String sValue
36721>>>>>        Get Data_set iFile to iDSO
36722>>>>>        If iDSO ;            Get Field_Label of iDSO iField iType to sValue
36725>>>>>        Function_Return sValue
36726>>>>>    End_Function
36727>>>>>    
36727>>>>>    // Normally this will not be used by a running program. However, it
36727>>>>>    // could be possible to create classes dynamically at runtime, in which
36727>>>>>    // case these messages could be useful. No File_Field is provided. If the
36727>>>>>    // person knows enough to create dynamic classes they can find the DD.
36727>>>>>    Procedure Set Field_Class_Name Integer iField String sName
36729>>>>>        Set Field_Class_Name of (FieldMask_Array(Self)) iField to sName
36730>>>>>    End_Procedure
36731>>>>>    
36731>>>>>    Function Field_Class_Name Integer iField Returns String
36733>>>>>        Function_Return (Field_Class_Name(FieldMask_Array(Self),iField))
36734>>>>>    End_Function
36735>>>>>    
36735>>>>>    // This procedure should be used to set a specific error number and
36735>>>>>    // message for a particular field. This can be used with the Field_error
36735>>>>>    // message to generate this error during a validation.
36735>>>>>    Procedure Set Field_Error Integer iField Integer iErr String sMsg
36737>>>>>        Set Field_Error of (Field_Attributes(Self)) iField to iErr sMsg
36738>>>>>    End_Procedure
36739>>>>>    
36739>>>>>    // Used to retreive the error number and message for a particular field
36739>>>>>    Function Field_Error_Number Integer iField Returns Integer
36741>>>>>        Function_Return (Field_Error_Number(Field_Attributes(Self),iField))
36742>>>>>    End_Function
36743>>>>>    
36743>>>>>    Function Field_Error_Message Integer iField Returns String
36745>>>>>        Function_Return (Field_Error_Message(Field_Attributes(Self),iField))
36746>>>>>    End_Function
36747>>>>>    
36747>>>>>    // This procedure is used to declare an error on a standard field
36747>>>>>    // validation violation like Range or Check.
36747>>>>>    // Can pass 1 to 4 params:
36747>>>>>    // iField -                  Standard usage. Generates field as defined
36747>>>>>    //                           for this field. If field=-1, General error
36747>>>>>    // iField SDefault           If no field error mess (or field=-1) use
36747>>>>>    //                           the default message
36747>>>>>    // iField sDefault sParam1 {sParam2} Replace occurances of @PARAM1 and
36747>>>>>    //                           @PARAM2 in text with these values
36747>>>>>    Procedure Field_Error Integer iField String sDefault ;            String sParam1 String sParam2
36749>>>>>        Integer iErr
36749>>>>>        String  sMess
36749>>>>>        If (iField >= 0) Begin
36751>>>>>            Get Field_Error_Number  iField to iErr
36752>>>>>            Get Field_Error_Message iField to sMess
36753>>>>>        End
36753>>>>>>
36753>>>>>        If (sMess="" and Num_Arguments>1) ;            Move sDefault to sMess
36756>>>>>        If (Num_Arguments = 4) ;            Send Data_Set_Error iField iErr sMess sParam1 sParam2
36759>>>>>        Else If (Num_Arguments = 3) ;            Send Data_Set_Error iField iErr sMess sParam1
36763>>>>>        Else ;            Send Data_Set_Error iField iErr sMess
36765>>>>>    End_Procedure
36766>>>>>    
36766>>>>>    // Procedure Data_Set_Error
36766>>>>>    // This procedure is used to declare a data-set error. Pass error number
36766>>>>>    // and optional error message text.
36766>>>>>    // If iErr is 0, use the default error number.
36766>>>>>    // sParam1 and sParam2 are optional. If passed they are used as text
36766>>>>>    // replacements for @PARAM1 and @PARAM2.
36766>>>>>    // We pass iField (even though we don't use it) so that augmentations
36766>>>>>    // could support error logging down to a field level. If a non-field error
36766>>>>>    // is required the developer should pass negative values (e.g., -1)
36766>>>>>    // This will redirect errors locally if not already redirected
36766>>>>>    //
36766>>>>>    // Altered to additionally support %1 %2 replacements as well as
36766>>>>>    // replacements for @PARAM1 and @PARAM2. (vdf8.2)
36766>>>>>    Procedure Data_set_error Integer iField Integer iErr String sMess ;            String sParam1 String sParam2
36768>>>>>        Integer iOldField
36768>>>>>        Get Current_validate_field to iOldField
36769>>>>>        If (iField <> 0) ;            Set Current_Validate_field to iField
36772>>>>>        
36772>>>>>        If (iErr = 0) ; // if no error is passes, used a default error            Move DD_DEFAULT_ERROR_NUMBER to iErr
36775>>>>>        
36775>>>>>        If (sMess > "") Begin
36777>>>>>            
36777>>>>>            // Support message replacements.. Up to two values
36777>>>>>            // altered to support @Param1/2 and %1 %2 messages
36777>>>>>            If (Num_Arguments>3) Begin
36779>>>>>                Move (Replaces("@PARAM1", sMess, sParam1)) to sMess
36780>>>>>                If (Num_Arguments>4) Begin
36782>>>>>                    Move (Replaces("@PARAM2", sMess, sParam2)) to sMess
36783>>>>>                    Move (SFormat(sMess,sParam1,sParam2)) to sMess
36784>>>>>                End
36784>>>>>>
36784>>>>>                Else Begin
36785>>>>>                    Move (SFormat(sMess,sParam1)) to sMess
36786>>>>>                End
36786>>>>>>
36786>>>>>            End
36786>>>>>>
36786>>>>>            Move Self to ghoErrorSource
36787>>>>>            Error iErr sMess
36788>>>>>>
36788>>>>>            Move 0 to ghoErrorSource
36789>>>>>        End
36789>>>>>>
36789>>>>>        Else ;            Send Operation_Not_Allowed iErr
36791>>>>>        Set Current_validate_field to iOldField
36792>>>>>        Move True to Err // make sure Err is still set
36793>>>>>    End_Procedure
36794>>>>>    
36794>>>>>    // Augment to support Error_Report_Mode. Allows errors without error mess
36794>>>>>    // This will redirect errors locally if not already redirected
36794>>>>>    Procedure Operation_Not_Allowed Integer iErr
36796>>>>>        Integer bOK
36796>>>>>        Move Self to ghoErrorSource
36797>>>>>        Forward Send Operation_Not_Allowed iErr
36799>>>>>        Move 0 to ghoErrorSource
36800>>>>>    End_Procedure
36801>>>>>    
36801>>>>>    // Local error handler. When errors are redirected to the DD this proce-
36801>>>>>    // dure handles the errors. If error_report_mode is NO-report it sets
36801>>>>>    // the err indicator and returns. Else it redirects the error to the
36801>>>>>    // main error handler first moving its ID to ghoErrorSource. This way the
36801>>>>>    // handler knows who sent this message and will get additional error info
36801>>>>>    // by calling Get Extended_error_message
36801>>>>>    Procedure Error_Report Integer iError Integer iLine String ErrMsg
36803>>>>>        Integer hoErrId
36803>>>>>        Integer bRedirect
36803>>>>>        If (Error_Processing_State(Self)) ;  // this prevents recursion            Procedure_Return
36806>>>>>        Set Error_Processing_State to True
36807>>>>>        
36807>>>>>        // if no report mode, just set the err indicator to true.
36807>>>>>        If (Error_Report_Mode(Self)=DD_ERROR_NO_REPORT) ;            Move True to Err
36810>>>>>        Else Begin
36811>>>>>            Get Old_error_object_id to hoErrId  // the original error handler
36812>>>>>            If hoErrId Begin
36814>>>>>                Move (ghoErrorSource=0) to bRedirect
36815>>>>>                If bRedirect ;                    Move Self to ghoErrorSource // error handler can use this
36818>>>>>                Move hoErrID to Error_object_id
36819>>>>>                Send Error_Report to hoErrId iError iLine ErrMsg
36820>>>>>                Move Self to Error_object_id
36821>>>>>                If bRedirect ;                    Move 0 to ghoErrorSource
36824>>>>>            End
36824>>>>>>
36824>>>>>            Else ;                Send error_report of desktop iError iLine ErrMsg
36826>>>>>            //else forward send error_report iError iLine ErrMsg
36826>>>>>        End
36826>>>>>>
36826>>>>>        Set Error_Processing_State to False
36827>>>>>    End_Procedure
36828>>>>>    
36828>>>>>    // This is called (by the system error handler) to get additional informa-
36828>>>>>    // tion about the error. Returns a multi line string with each line
36828>>>>>    // separated by a "\n". Return the file number, name, and if possible
36828>>>>>    // the field number and name.
36828>>>>>    Function Extended_Error_Message Returns String
36830>>>>>        String sExtMess
36830>>>>>        String sFile
36830>>>>>        Integer iFile iField
36830>>>>>        Get main_file to iFile
36831>>>>>        Get Current_Validate_Field to iField
36832>>>>>        Get ErrorMessageTableName iFile to sFile
36833>>>>>        Move (DD_FILE_TEXT* String(iFile) * "-" * sFile) to sExtMess
36834>>>>>        If (iField > 0) ;            Append sExtMess "\n" ;            (DD_FIELD_TEXT* String(iField) * "-" * Field_Label(Self,iField,DD_LABEL_LONG))
36838>>>>>        Set Current_Validate_Field to 0
36839>>>>>        Function_Return sExtMess
36840>>>>>    End_Function
36841>>>>>    
36841>>>>>    Function Extended_Error_File Returns Integer
36843>>>>>        Function_Return (Main_File(Self))
36844>>>>>    End_Function
36845>>>>>    
36845>>>>>    Function Extended_Error_Field Returns Integer
36847>>>>>        Function_Return (Current_Validate_Field(Self))
36848>>>>>    End_Function
36849>>>>>    
36849>>>>>    
36849>>>>>    // The following messages are used to control smart file mode exception
36849>>>>>    // handling. The message "Send Add_system_File file# Fg" allows you to
36849>>>>>    // add system files (or any other files not known to the dso structure)
36849>>>>>    // within define_fields. This allows you to not have to augment the msg
36849>>>>>    // reset_filemodes_for_lock. The only truly public messages here are
36849>>>>>    // Add_system_file and Remove_system_File (which s/b rarely used).
36849>>>>>    
36849>>>>>    // Adds a system file for smart_file_mode handling. A second optional
36849>>>>>    // parameter may be passed to determine of the sys file should only be
36849>>>>>    // locked during a new save (and not during a delete or a save of an
36849>>>>>    // existing record). It is expected that this will be the only public
36849>>>>>    // message used to control smart filemode. All of the remaining sys file
36849>>>>>    // messages are considered advanced.
36849>>>>>    Procedure Add_System_File Integer iFile Integer iLock_Mode
36851>>>>>        Integer iobj iCnt iMode
36851>>>>>        If (Num_arguments = 1) ;            Move DD_Lock_on_All to iMode
36854>>>>>        Else ;            Move iLock_Mode     to iMode
36856>>>>>        Move (system_file_obj(Self)) to iObj
36857>>>>>        Get Item_Count  of iObj to iCnt
36858>>>>>        Set Array_Value of iObj iCnt to iFile
36859>>>>>        Increment iCnt
36860>>>>>        Set Array_Value of iObj iCnt to iMode
36861>>>>>    End_Procedure
36862>>>>>    
36862>>>>>    // Return number of system files
36862>>>>>    Function System_File_Count Returns Integer
36864>>>>>        Function_Return (Item_Count(System_File_Obj(Self))/2)
36865>>>>>    End_Function
36866>>>>>    
36866>>>>>    // Returns system file number for passed item.
36866>>>>>    Function System_File_Number Integer iItem Returns Integer
36868>>>>>        Function_Return (Integer_Value(System_File_Obj(Self),iItem*2))
36869>>>>>    End_Function
36870>>>>>    
36870>>>>>    // Returns system flag to determine if file is only used during a new
36870>>>>>    // save (and not during an exiting save or a delete).
36870>>>>>    Function System_File_Lock_Mode Integer iItem Returns Integer
36872>>>>>        Function_Return (Integer_Value(System_File_Obj(Self),iItem*2+1))
36873>>>>>    End_Function
36874>>>>>    
36874>>>>>    // Removes a system_file for smart_file_Mode handling. This remvoes the
36874>>>>>    // first occurance of the file (S/b the only occurance). We assume that
36874>>>>>    // this will be rarely used.
36874>>>>>    Procedure Remove_System_File Integer iFile
36876>>>>>        Integer iobj iCnt iItmCnt
36876>>>>>        Get System_file_Count to iItmCnt
36877>>>>>        Decrement iItmCnt
36878>>>>>        For iCnt from 0 to iItmCnt
36884>>>>>>
36884>>>>>            If (System_File_Number(Self,iCnt)=iFile) Begin
36886>>>>>                Move (system_file_obj(Self)) to iObj
36887>>>>>                Move (iCnt*2) to iCnt
36888>>>>>                Send Delete_Item to iObj iCnt
36889>>>>>                Send Delete_Item to iObj iCnt
36890>>>>>                Procedure_Return
36891>>>>>            End
36891>>>>>>
36891>>>>>        Loop
36892>>>>>>
36892>>>>>    End_Procedure
36893>>>>>    
36893>>>>>    // These set messages, add_client_file, add_server_file and add_system_file
36893>>>>>    // were added to more easily support visual DD class modeling. They do the
36893>>>>>    // same thing the Send counterpart messages do
36893>>>>>    
36893>>>>>    Procedure Set Add_Client_File Integer iFile
36895>>>>>        Send Add_Client_File iFile
36896>>>>>    End_Procedure
36897>>>>>    
36897>>>>>    Procedure Set Add_Server_File Integer iFile
36899>>>>>        Send Add_Server_File iFile
36900>>>>>    End_Procedure
36901>>>>>    
36901>>>>>    Procedure Set Add_System_File Integer iFile Integer iLock_Mode
36903>>>>>        // allow no arguments because the old message allowed this
36903>>>>>        If (Num_arguments=1) Begin
36905>>>>>            Send Add_System_File iFile
36906>>>>>        End
36906>>>>>>
36906>>>>>        Else Begin
36907>>>>>            Send Add_System_File iFile iLock_Mode
36908>>>>>        End
36908>>>>>>
36908>>>>>    End_Procedure
36909>>>>>    
36909>>>>>    // The Set Field_Auto_Increment method replaces the need to use the Define_Auto_Incrmement
36909>>>>>    // command. This models more easily and it supports multiple auto-increment fields
36909>>>>>    Procedure Set Field_Auto_Increment Integer iField Integer iSysFile Integer iSysField
36911>>>>>        Integer[] AutoIncFields
36912>>>>>        tDDFileField[] SysFileFields
36912>>>>>        tDDFileField[] SysFileFields
36913>>>>>        Integer iIndex
36913>>>>>        
36913>>>>>        If (iField=0 or (iSysFile<>0 and iSysField=0)) Begin
36915>>>>>            Error DFERR_PROGRAM "Auto-increment source or destination field is 0"
36916>>>>>>
36916>>>>>            Procedure_Return
36917>>>>>        End
36917>>>>>>
36917>>>>>        // setting the sysfile to 0 is valid. It can be used to clear an existing sysfile
36917>>>>>        If (iSysFile=0) Begin
36919>>>>>            Move 0 to iSysField
36920>>>>>        End
36920>>>>>>
36920>>>>>        Get pAutoIncrementFields to AutoIncFields
36921>>>>>        Get pAutoIncrementSysFileFields to SysFileFields
36922>>>>>        // the destination field array is a list of fields that have auto-incr info. There
36922>>>>>        // can only be zero or one entry per field arranged in no defined order.
36922>>>>>        // see if field is already defined. If not add this to the end.
36922>>>>>        Move (SearchArray(iField,AutoIncFields)) to iIndex
36923>>>>>        If (iIndex=-1) Begin
36925>>>>>            Move (SizeOfArray(SysFileFields)) to iIndex
36926>>>>>        End
36926>>>>>>
36926>>>>>        Move iField    to AutoIncFields[iIndex]
36927>>>>>        Move iSysFile  to SysFileFields[iIndex].iFile
36928>>>>>        Move iSysField to SysFileFields[iIndex].iField
36929>>>>>        Set pAutoIncrementFields to AutoIncFields
36930>>>>>        Set pAutoIncrementSysFileFields to SysFileFields
36931>>>>>    End_Procedure
36932>>>>>    
36932>>>>>    // Get auto-increment system file/field value for a field. There really should be no
36932>>>>>    // reason to ever need this. Field is returned byref
36932>>>>>    Function Field_Auto_Increment Integer iField Integer ByRef iSysField Returns Integer
36934>>>>>        Integer iSysFile
36934>>>>>        Integer[] AutoIncFields
36935>>>>>        tDDFileField[] SysFileFields
36935>>>>>        tDDFileField[] SysFileFields
36936>>>>>        Integer iIndex
36936>>>>>        
36936>>>>>        Get pAutoIncrementFields to AutoIncFields
36937>>>>>        Move (SearchArray(iField,AutoIncFields)) to iIndex
36938>>>>>        If (iIndex>-1) Begin
36940>>>>>            Get pAutoIncrementSysFileFields to SysFileFields
36941>>>>>            Move SysFileFields[iIndex].iFile to iSysFile
36942>>>>>            Move SysFileFields[iIndex].iField to iSysField
36943>>>>>        End
36943>>>>>>
36943>>>>>        Else Begin
36944>>>>>            Move 0 to iSysFile
36945>>>>>            Move 0 to iSysField
36946>>>>>        End
36946>>>>>>
36946>>>>>        Function_Return iSysFile
36947>>>>>    End_Function
36948>>>>>    
36948>>>>>    
36948>>>>>    // Augmented to set any system files defined via the Add_System_file
36948>>>>>    // message. This allows us to hide this procedure for the vast majority
36948>>>>>    // of cases.
36948>>>>>    Procedure Reset_Filemodes_For_Lock
36950>>>>>        Boolean bNewRec
36950>>>>>        Integer  iItmCnt iCnt iMode iFile
36950>>>>>        Integer iMain iMaster iOpts
36950>>>>>        Handle hoDD
36950>>>>>        
36950>>>>>        Forward Send Reset_Filemodes_for_lock
36952>>>>>        
36952>>>>>        Get System_File_Count to iItmCnt
36953>>>>>        If iItmCnt Begin
36955>>>>>            Move (not(HasRecord(Self))) to bNewRec
36956>>>>>            Decrement iItmCnt
36957>>>>>            For iCnt from 0 to iItmCnt
36963>>>>>>
36963>>>>>                Get System_File_Number         iCnt to iFile
36964>>>>>                Get System_File_Lock_Mode iCnt to iMode
36965>>>>>                If ( (iMode=DD_Lock_on_All) or ;                    (Operation_Mode=MODE_DELETING and (iMode iand DD_Lock_on_Delete) ) or ;                    (Operation_Mode=MODE_SAVING and ( (iMode iand DD_Lock_on_Save) or ;                    ( (iMode iand DD_Lock_on_New_Save) and bNewRec) ) ) ) Begin
36967>>>>>                    Set_Attribute DF_FILE_MODE of iFile to DF_FILEMODE_DEFAULT
36970>>>>>                End
36970>>>>>>
36970>>>>>            Loop
36971>>>>>>
36971>>>>>        End
36971>>>>>>
36971>>>>>        
36971>>>>>        // augment to support DD magnaged alias tables.
36971>>>>>        // If an alias, set the alias to the proper alias no locks only if
36971>>>>>        // the master file is actually part of this DDO structure. This allows you
36971>>>>>        // to use alias files without the master being present (or even open). This will work without needing
36971>>>>>        // to set the Master|Alias DF_FILE_ALIAS attributes. If the file is master and part of the DDO structure
36971>>>>>        // it will already have its No_locks attribute cleared. If not part of the DD, its not needed.
36971>>>>>        //
36971>>>>>        Get MasterForAlias to iMaster
36972>>>>>        If iMaster Begin
36974>>>>>            Get Main_File to iMain
36975>>>>>            Get Data_Set iMaster to hoDD // is the master in the DD structure
36976>>>>>            If hoDD Begin
36978>>>>>                Get_Attribute DF_FILE_MODE of iMain to iOpts
36981>>>>>                Set_Attribute DF_FILE_MODE of iMain to (iOpts ior DF_FILEMODE_NO_LOCKS)
36984>>>>>                // note this will be reset to what it was when the transaction ends
36984>>>>>            End
36984>>>>>>
36984>>>>>        End
36984>>>>>>
36984>>>>>        
36984>>>>>    End_Procedure
36985>>>>>    
36985>>>>>    // Augmented to handle auto-increment fields if defined. The value from
36985>>>>>    // the auto-incre sys file is incremented, saved and moved to the new
36985>>>>>    // record. As of 17.0 this is no longer in Creating, which is called after
36985>>>>>    // AutoIncrement.
36985>>>>>    Procedure AutoIncrement
36987>>>>>        Integer iSrcFile iSrcField i iAutoFields
36987>>>>>        Integer iDestFile iDestField
36987>>>>>        Number nNum
36987>>>>>        Integer[] AutoIncFields
36988>>>>>        tDDFileField[] AutoIncSysFileFields
36988>>>>>        tDDFileField[] AutoIncSysFileFields
36989>>>>>        Handle hoOwner
36989>>>>>        
36989>>>>>        Forward Send AutoIncrement
36991>>>>>        
36991>>>>>        // this supports the older Define_Auto_Increment logic. Only one is supported
36991>>>>>        // this is exists for backwards compatibility
36991>>>>>        Get Auto_Increment_Source_File to iSrcFile
36992>>>>>        If iSrcFile Begin // do we have auto increment?
36994>>>>>            Get Auto_Increment_Source_Field  to iSrcField
36995>>>>>            Get Auto_Increment_Dest_Field    to iDestField
36996>>>>>            If (iSrcField and iDestField) Begin  // just in case of error
36998>>>>>                Get Main_file to iDestFile
36999>>>>>                Get_Field_Value iSrcFile iSrcField to nNum
37002>>>>>                Move (nNum+1) to nNum
37003>>>>>                Set_Field_Value iSrcFile  iSrcField  to nNum
37006>>>>>                Set_Field_Value iDestFile iDestField to nNum
37009>>>>>                // if the file's DD is a parent file in the structure, this will get saved as part of normal operations
37009>>>>>                // if the DD is not a parent file, it is a sysfile and we must save it
37009>>>>>                Get Which_Data_Set iSrcFile to hoOwner
37010>>>>>                If not hoOwner Begin
37012>>>>>                    SaveRecord iSrcFile
37013>>>>>                End
37013>>>>>>
37013>>>>>            End
37013>>>>>>
37013>>>>>        End
37013>>>>>>
37013>>>>>        // this supports the newer set syntax which support multiple fields. It is expected that you will
37013>>>>>        // use one syntax of the other, not both. If you use the old syntax, you cannot use the new one
37013>>>>>        Else Begin
37014>>>>>            Get pAutoIncrementFields to AutoIncFields
37015>>>>>            Move (SizeOfArray(AutoIncFields)) to iAutoFields
37016>>>>>            If (iAutoFields>0) Begin
37018>>>>>                Get pAutoIncrementSysFileFields to AutoIncSysFileFields
37019>>>>>                Get Main_file to iDestFile
37020>>>>>                For i from 0 to (iAutoFields-1)
37026>>>>>>
37026>>>>>                    // it is legal to set the sysfile to 0, this means it has been cleared and is not used
37026>>>>>                    If (AutoIncSysFileFields[i].iFile>0) Begin
37028>>>>>                        // we assume both the fields are valid and that they've already been tested when added
37028>>>>>                        Get_Field_Value AutoIncSysFileFields[i].iFile AutoIncSysFileFields[i].iField to nNum
37031>>>>>                        Move (nNum+1) to nNum
37032>>>>>                        Set_Field_Value AutoIncSysFileFields[i].iFile AutoIncSysFileFields[i].iField to nNum
37035>>>>>                        Set_Field_Value iDestFile AutoIncFields[i] to nNum
37038>>>>>                        // if the file's DD is a parent file in the structure, this will get saved as part of normal operations
37038>>>>>                        // if the DD is not a parent file, it is a sysfile and we must save it
37038>>>>>                        Get Which_Data_Set AutoIncSysFileFields[i].iFile to hoOwner
37039>>>>>                        If not hoOwner Begin
37041>>>>>                            SaveRecord AutoIncSysFileFields[i].iFile
37042>>>>>                        End
37042>>>>>>
37042>>>>>                    End
37042>>>>>>
37042>>>>>                Loop
37043>>>>>>
37043>>>>>            End
37043>>>>>>
37043>>>>>        End
37043>>>>>>
37043>>>>>        
37043>>>>>    End_Procedure
37044>>>>>    
37044>>>>>    // Augmented to fix a bug in the data-set C code. When a record is saved
37044>>>>>    // as part of a delete operation OnNewCurrentRecord is not called. It
37044>>>>>    // should be. We will do this in flex code for now.
37044>>>>>    Procedure Save_Main_File
37046>>>>>        RowID riRec
37046>>>>>        Integer iRec iMain
37046>>>>>        Boolean bRecnumTable bChanged
37046>>>>>        
37046>>>>>        Get Main_File to iMain
37047>>>>>        Get_Attribute DF_FILE_CHANGED of iMain to bChanged
37050>>>>>        If bChanged Begin
37052>>>>>            Send OnSaveRecord // OnSaveRecord sent if there is something to save
37053>>>>>        End
37053>>>>>>
37053>>>>>        
37053>>>>>        Forward Send Save_Main_File
37055>>>>>        
37055>>>>>        If (Operation_Mode = MODE_DELETING) Begin  // during a delete the crnt
37057>>>>>            Get CurrentRowId to riRec             // rec of parents do not change
37058>>>>>            Send OnNewCurrentRecord riRec riRec  // so old and new are the same.
37059>>>>>            // for backwards compatibility reasons, we also send new_current_record if appropriate
37059>>>>>            Get_Attribute DF_FILE_RECNUM_TABLE of iMain to bRecnumTable
37062>>>>>            If (bRecnumTable) Begin
37064>>>>>                Get_Field_Value iMain 0 to iRec
37067>>>>>                Send New_Current_Record iRec iRec
37068>>>>>            End
37068>>>>>>
37068>>>>>        End
37068>>>>>>
37068>>>>>    End_Procedure
37069>>>>>    
37069>>>>>    // Augmented to not clear if a system-file. The auto-latching of views
37069>>>>>    // may cause a sys file DD to get cleared. This corrects this. This really
37069>>>>>    // belongs in Data_set (C) but we will not risk this for now.
37069>>>>>    Procedure Clear_Main_File
37071>>>>>        Integer iFile iIsSys
37071>>>>>        Get Main_File to iFile
37072>>>>>        If iFile Begin
37074>>>>>            Get_Attribute DF_FILE_IS_SYSTEM_FILE of iFile to iIsSys
37077>>>>>            If iIsSys ;                Procedure_Return
37080>>>>>        End
37080>>>>>>
37080>>>>>        Forward Send Clear_main_file
37082>>>>>    End_Procedure
37083>>>>>    
37083>>>>>    // Executes a request_find on the mainfile. This is easier that having to
37083>>>>>    // pass file number all the time. Useful for batch operations.
37083>>>>>    // If Index is 0, use find_by_recnum (it handles a recnum of 0 better)
37083>>>>>    Procedure Find Integer iMode Integer iIndex
37085>>>>>        Integer iFile
37085>>>>>        Integer iRec
37085>>>>>        Get Main_file to iFile
37086>>>>>        If (iIndex<>0 or iMode<>EQ) ;            Send request_find iMode iFile iIndex
37089>>>>>        Else Begin
37090>>>>>            // this would never happen with row ID
37090>>>>>            Get_Field_Value iFile 0 to iRec // get recnum value
37093>>>>>            Send find_by_recnum iFile iRec
37094>>>>>        End
37094>>>>>>
37094>>>>>    End_Procedure
37095>>>>>    
37095>>>>>    // So many people make the mistake of using requeset_clear and request_
37095>>>>>    // clear_all that will support these are alteratives to clear and
37095>>>>>    // clear_all. The preferred messages remain Clear and Clear_all.
37095>>>>>    // This would not work if you nested DEOs within DSOs (no-one does).
37095>>>>>    Procedure Request_Clear
37097>>>>>        Send Clear
37098>>>>>    End_Procedure
37099>>>>>    
37099>>>>>    Procedure Request_Clear_All
37101>>>>>        Send Clear_All
37102>>>>>    End_Procedure
37103>>>>>    
37103>>>>>    // we want changed_state to always go through the
37103>>>>>    // Record_buffer object. From there it is sent to
37103>>>>>    // here. So if state or RB does not match we must
37103>>>>>    // send to the RB object...it will delegate to here
37103>>>>>    
37103>>>>>    Procedure Set Changed_State Integer bState
37105>>>>>        Integer hRB
37105>>>>>        Move (record_buffer(Self)) to hRB
37106>>>>>        If (hRB and changed_state(hRB)<>bState) ;            Set changed_state of hRB to bState
37109>>>>>        Else ;            Forward Set changed_state to bState
37112>>>>>    End_Procedure
37113>>>>>    
37113>>>>>    // this lets us use the new attach logic
37113>>>>>    
37113>>>>>    // This is a smarter attach than the normal attach command. It only attaches data from a parent
37113>>>>>    // if 1) the DDO parent is connected to the structure and 2) if there is a record to attach. It will
37113>>>>>    // not attach empty records into a child. This should make the finding (and saving) more sensible when
37113>>>>>    // partial DD structures are used. For example, often a report does not all of the parent DDOs - however if
37113>>>>>    // they are not provided, finding can get messed up because blank data is being moved into the child before a
37113>>>>>    // find. This has been a problem since 3.0. This should just make it go away.
37113>>>>>    // as of 17.0, we get the related field info through the local DSO if needed
37113>>>>>    
37113>>>>>    // as if 18.1 this is only called when there is an attachable relationship. This gives us a chance to do any
37113>>>>>    // customizations and to cancel the attach. We've left this to the flex level so we can fine tune attaches.
37113>>>>>    Function ShouldFieldAttach Integer iField Handle hoRelDD Returns Boolean
37115>>>>>        Boolean bDoAttach bChanged
37115>>>>>        Integer iFile iStat iRelFile iType
37115>>>>>        String sValue
37115>>>>>        
37115>>>>>        Get Main_File to iFile
37116>>>>>        Get Main_File of hoRelDD to iRelFile
37117>>>>>        
37117>>>>>        // before we attach check if Find mode and relfile is new and unchanged..if so skip.
37117>>>>>        // If operation_mode is 0, this is probably a Find (item_find sends attach_main_file for some reason).
37117>>>>>        Move True to bDoAttach
37118>>>>>        If (Operation_mode=MODE_FINDING or OPERATION_MODE=0) Begin
37120>>>>>            // we can test the file status to see if we have a record or not. If we have a record, we attach
37120>>>>>            Get_Attribute DF_FILE_STATUS  of iRelFile to iStat
37123>>>>>            If (iStat=DF_FILE_INACTIVE) Begin
37125>>>>>                // if no record, we need to look for changes. We can't just look at the file's changed state because the DD
37125>>>>>                // may have set defaults, which have been moved to the buffer. We should be able to check the DD's changed state
37125>>>>>                // because this is not set with default values. When doing a find entry_update this should be ok. If this were
37125>>>>>                // a save, this would cause problems (but this is not a save). Prior to 17.0 this was not an issue with windows
37125>>>>>                // applications because find entry_updates were done at the DEO level (unlike web applications).
37125>>>>>                Get Changed_State of hoRelDD to bChanged
37126>>>>>                Move bChanged to bDoAttach
37127>>>>>                
37127>>>>>                // special Triumph workaround for Item_Find with blank inner segment. They were counting on the item_find attach_main_file
37127>>>>>                // which would slip through the "no-attach on find when parent is empty optimization". This was needed to force a string segment
37127>>>>>                // that was "" to get filled with spaces from the parent field. The child field was set to "" because of a constrained_clear
37127>>>>>                // in Item_find. This workaround is as narrow as possible. If an item_find attach_main_file (operation_mode=0) and this is
37127>>>>>                // an empty parent (bOk was just set to False), and the field is DF_Ascii and the child value is empty (no trailing spaces)
37127>>>>>                // then force an attach. Since the parent should be "", we can just Set_Field_value to "", which fills the field buffer.
37127>>>>>                // There is no real logic as to why this is being done other than to make it work like it used to with the least
37127>>>>>                // amount of side-effects.
37127>>>>>                If (not(bDoAttach) and OPERATION_MODE=0) Begin
37129>>>>>                    Get_Attribute DF_FIELD_TYPE of iFile iField to iType
37132>>>>>                    If (iType=DF_ASCII) Begin
37134>>>>>                        Get_Field_Value iFile iField to sValue
37137>>>>>                        // if no spaces, this probably was cleared via constrained_clear in Item_Find. We should update
37137>>>>>                        If (Ascii(Left(sValue,1))=0) Begin
37139>>>>>                            Set_Field_Value iFile iField to ""
37142>>>>>                        End
37142>>>>>>
37142>>>>>                    End
37142>>>>>>
37142>>>>>                End
37142>>>>>>
37142>>>>>                
37142>>>>>            End
37142>>>>>>
37142>>>>>        End
37142>>>>>>
37142>>>>>        Function_Return bDoAttach
37143>>>>>    End_Function
37144>>>>>    
37144>>>>>    // Notify all DEOs that a mask has changed.
37144>>>>>    //        this message is sent by set Field_Mask
37144>>>>>    Procedure Field_Mask_Changed Integer iField String sMask
37146>>>>>        Integer i iDEOs iDEO
37146>>>>>        Integer iMain_File
37146>>>>>        Get Main_File to iMain_File
37147>>>>>        Get Data_Set_User_Interface_Count to iDEOs
37148>>>>>        Decrement iDEOs
37149>>>>>        For i from 0 to iDEOs
37155>>>>>>
37155>>>>>            Get Data_Set_User_Interface i to iDEO
37156>>>>>            If (Extended_DEO_State(iDEO)) ;                Send File_Field_Mask_Changed to iDEO ;                iMain_File iField sMask
37159>>>>>        Loop
37160>>>>>>
37160>>>>>    End_Procedure
37161>>>>>    
37161>>>>>    // Notify all DEOs that a label has changed.
37161>>>>>    //   This message is sent by Set Field_Label_long & Field_Label_Short
37161>>>>>    Procedure Field_label_Changed Integer iField Boolean bLong String sLabel
37163>>>>>        Integer i iDEOs iDEO
37163>>>>>        Integer iMain_File
37163>>>>>        Get Main_File to iMain_File
37164>>>>>        Get Data_Set_User_Interface_Count to iDEOs
37165>>>>>        Decrement iDEOs
37166>>>>>        For i from 0 to iDEOs
37172>>>>>>
37172>>>>>            Get Data_Set_User_Interface i to iDEO
37173>>>>>            If (Extended_DEO_State(iDEO)) ;                Send File_Field_Label_Changed to iDEO ;                iMain_File iField bLong sLabel
37176>>>>>        Loop
37177>>>>>>
37177>>>>>    End_Procedure
37178>>>>>    
37178>>>>>    // Notify all DEOs that a field option has changed.
37178>>>>>    //   This message is sent by Set Field_Option
37178>>>>>    Procedure Field_Option_Changed Integer iField Integer iOptions Boolean bClear
37180>>>>>        Integer i iDEOs iDEO
37180>>>>>        Integer iMain_File
37180>>>>>        Get Main_File to iMain_File
37181>>>>>        Get Data_Set_User_Interface_Count to iDEOs
37182>>>>>        Decrement iDEOs
37183>>>>>        For i from 0 to iDEOs
37189>>>>>>
37189>>>>>            Get Data_Set_User_Interface i to iDEO
37190>>>>>            If (Extended_DEO_State(iDEO)) ;                Send File_Field_Option_Changed of iDEO ;                iMain_File iField iOptions bClear
37193>>>>>        Loop
37194>>>>>>
37194>>>>>    End_Procedure
37195>>>>>    
37195>>>>>    
37195>>>>>    //   Set, clear or toggle a field option
37195>>>>>    //   Multiple options can be passed as an expression
37195>>>>>    //   (e.g. Set Field_option 2 (dd_Retain IOR dd_NoEnter).
37195>>>>>    //   Unlike set Field_options this notifies DEOs of changes
37195>>>>>    // supports setting and clearing. e.g.:
37195>>>>>    //    Set Field_Option Field Customer.Name DD_NoEnter to True
37195>>>>>    // This new syntax is now the recommended syntax but the older syntax without
37195>>>>>    // the last parameter is supported (where true is the default). The old syntax is
37195>>>>>    // only supported for compatibility. This means that Field_Option_Clear should
37195>>>>>    // also be replaced with Field_Option
37195>>>>>    Procedure Set Field_Option Integer iField Integer iOption Boolean bSet
37197>>>>>        Boolean bSetTrue
37197>>>>>        Move (If(num_arguments>2, bSet, True)) to bSetTrue // support for old deprecated syntax
37198>>>>>        If bSetTrue Begin
37200>>>>>            Set Field_options iField to iOption
37201>>>>>        End
37201>>>>>>
37201>>>>>        Else Begin
37202>>>>>            Set Field_options iField to DD_CLEAR_FIELD_OPTIONS iOption
37203>>>>>        End
37203>>>>>>
37203>>>>>        If (Data_Set_User_Interface_Count(Self)) Begin
37205>>>>>            Send Field_Option_Changed iField iOption (not(bSetTrue))
37206>>>>>        End
37206>>>>>>
37206>>>>>    End_Procedure
37207>>>>>    
37207>>>>>    Procedure Set File_Field_Option Integer iFile Integer iField Integer iOption Boolean bSet
37209>>>>>        Handle hoDD
37209>>>>>        Boolean bSetTrue
37209>>>>>        Move (If(num_arguments>3, bSet, True)) to bSetTrue // support for old deprecated syntax
37210>>>>>        Get Data_set iFile to hoDD
37211>>>>>        If hoDD Begin
37213>>>>>            Set Field_Option of hoDD iField iOption to bSetTrue
37214>>>>>        End
37214>>>>>>
37214>>>>>        
37214>>>>>    End_Procedure
37215>>>>>    
37215>>>>>    Procedure Set Field_Option_Clear Integer iField Integer iOptions
37217>>>>>        Set Field_Option iField iOptions to False
37218>>>>>    End_Procedure
37219>>>>>    
37219>>>>>    Procedure Set File_Field_Option_Clear Integer iFile Integer iField Integer iOptions
37221>>>>>        Set File_Field_Option iFile iField iOptions to False
37222>>>>>    End_Procedure
37223>>>>>    
37223>>>>>    Procedure Set Field_Option_Toggle Integer iField Integer iOption
37225>>>>>        Integer iOldOption
37225>>>>>        Get Field_Options iField to iOldOption
37226>>>>>        // if old and new have overlapping bits, we assume clear
37226>>>>>        Set Field_Option iField iOption to ((iOldOption iand iOption)=0)
37227>>>>>    End_Procedure
37228>>>>>    
37228>>>>>    Procedure Set File_Field_Option_Toggle Integer iFile Integer iField Integer iOption
37230>>>>>        Handle hoDD
37230>>>>>        Get Data_set iFile to hoDD
37231>>>>>        If hoDD ;            Set Field_Option_Toggle of hoDD iField to iOption
37234>>>>>    End_Procedure
37235>>>>>    
37235>>>>>    // This returns the main index for a field. This replaces the DSO message Field_Main_index which
37235>>>>>    // should no longer be used by DDOs. The old message has the problem that the DDO or DSO using
37235>>>>>    // this message may not be the owner of the field. So augmenting the owner DDO did not insure that
37235>>>>>    // all requests for this index would go through it. Now you can augment Field_Index and always
37235>>>>>    // be sure that any DDO requesting an index for a file (via file_field_index) will always go to
37235>>>>>    // the owner object.
37235>>>>>    Function Field_Index Integer iField Returns Integer
37237>>>>>        Integer iFile iIndex iOrder
37237>>>>>        // ordering takes precendence
37237>>>>>        Get ordering to iOrder
37238>>>>>        If (iOrder>=0);            Move iOrder to iIndex  //ordering takes precedence over main index
37241>>>>>        Else Begin
37242>>>>>            Get Main_file to iFile
37243>>>>>            Get_Attribute DF_FIELD_INDEX of iFile iField to iIndex // main index field
37246>>>>>            If (iIndex=0 and iField>0) ; // If field is not recnum and there is no index, the                Move -1 to iIndex        // field has no main index
37249>>>>>        End
37249>>>>>>
37249>>>>>        Function_Return iIndex
37250>>>>>    End_Function
37251>>>>>    
37251>>>>>    // In all cases, this message should be sent instead of Field_Main_Index. If
37251>>>>>    // augmentation was used in Field_Main_Index, use Field_Index to insure the owner object
37251>>>>>    // is called.
37251>>>>>    
37251>>>>>    Function File_Field_Index Integer iFile Integer iField Returns Integer
37253>>>>>        Integer iIndex
37253>>>>>        Handle hoDD
37253>>>>>        Get Data_set iFile to hoDD
37254>>>>>        If (hoDD) ;            Get Field_Index of hoDD iField to iIndex
37257>>>>>        Else ;            Move -1 to iIndex
37259>>>>>        Function_Return iIndex
37260>>>>>    End_Function
37261>>>>>    
37261>>>>>    // 12/1 change: Make sure all of the major DD operations update the DD with the value in
37261>>>>>    // the focus field. After the actual find, save, clar or delete, the DD buffer contains information that
37261>>>>>    // is not yet reflected in the DEOs (before refresh is called) we want to make sure that we
37261>>>>>    // don't try to get data from the DEO. Get Field_Current_Value now checks if operation_mode is
37261>>>>>    // non-zero. If it is, it always gets from the DD buffer.
37261>>>>>    
37261>>>>>    Procedure Clear
37263>>>>>        Boolean bOpOk
37263>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37264>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37266>>>>>            Send Update_Focus_Field_For_Operation MODE_CLEARING
37267>>>>>        End
37267>>>>>>
37267>>>>>        If (bOpOk) Begin
37269>>>>>            Send OnPreFind DDFindClear
37270>>>>>        End
37270>>>>>>
37270>>>>>        Forward Send Clear
37272>>>>>        If (bOpOk) Begin
37274>>>>>            Send DefaultParentAutofinds
37275>>>>>            Send OnPostFind DDFindClear True
37276>>>>>        End
37276>>>>>>
37276>>>>>    End_Procedure
37277>>>>>    
37277>>>>>    Procedure Clear_All
37279>>>>>        Boolean bOpOk
37279>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37280>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37282>>>>>            Send Update_Focus_Field_For_Operation MODE_CLEARINGALL
37283>>>>>        End
37283>>>>>>
37283>>>>>        Forward Send clear_all
37285>>>>>        If (bOpOk) Begin
37287>>>>>            Send DefaultParentAutofinds
37288>>>>>        End
37288>>>>>>
37288>>>>>    End_Procedure
37289>>>>>    
37289>>>>>    Procedure Request_Assign Integer iFile
37291>>>>>        Handle hoDD
37291>>>>>        Boolean bFound
37291>>>>>        Boolean bOpOk
37291>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37292>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37294>>>>>            Send Update_Focus_Field_For_Operation MODE_FINDING
37295>>>>>        End
37295>>>>>>
37295>>>>>        
37295>>>>>        If (bOpOk) Begin
37297>>>>>            If (num_arguments=0 or iFile=0) Begin
37299>>>>>                Move Self to hoDD
37300>>>>>            End
37300>>>>>>
37300>>>>>            Else Begin
37301>>>>>                Get Data_Set iFile to hoDD
37302>>>>>            End
37302>>>>>>
37302>>>>>            If hoDD Begin
37304>>>>>                Send OnPreFind of hoDD DDFindRequestAssign
37305>>>>>            End
37305>>>>>>
37305>>>>>        End
37305>>>>>>
37305>>>>>        
37305>>>>>        If (num_arguments=0) Begin
37307>>>>>            Forward Send Request_Assign
37309>>>>>        End
37309>>>>>>
37309>>>>>        Else Begin
37310>>>>>            Forward Send Request_Assign iFile
37312>>>>>        End
37312>>>>>>
37312>>>>>        
37312>>>>>        If (bOpOk) Begin
37314>>>>>            If (hoDD) Begin
37316>>>>>                Move (Found) to bFound
37317>>>>>                Send OnPostFind of hoDD DDFindRequestAssign bFound
37318>>>>>                Move bFound to Found
37319>>>>>            End
37319>>>>>>
37319>>>>>        End
37319>>>>>>
37319>>>>>    End_Procedure
37320>>>>>    
37320>>>>>    
37320>>>>>    Procedure Find_By_Recnum Integer iFile Integer iRecord
37322>>>>>        Handle hoDD
37322>>>>>        Boolean bFound
37322>>>>>        Boolean bOpOk
37322>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37323>>>>>        Send Update_Focus_Field_For_Operation MODE_FINDING
37324>>>>>        
37324>>>>>        If (bOpOk) Begin
37326>>>>>            Get Data_Set iFile to hoDD
37327>>>>>            If hoDD Begin
37329>>>>>                Send OnPreFind of hoDD DDFindFindByRowRec
37330>>>>>            End
37330>>>>>>
37330>>>>>        End
37330>>>>>>
37330>>>>>        
37330>>>>>        Forward Send Find_By_Recnum iFile iRecord
37332>>>>>        
37332>>>>>        If (bOpOk) Begin
37334>>>>>            If (hoDD) Begin
37336>>>>>                Move (Found) to bFound
37337>>>>>                Send OnPostFind of hoDD DDFindFindByRowRec bFound
37338>>>>>                Move bFound to Found
37339>>>>>            End
37339>>>>>>
37339>>>>>        End
37339>>>>>>
37339>>>>>    End_Procedure
37340>>>>>    
37340>>>>>    Procedure FindByRowId Integer iFile RowID riRowId
37342>>>>>        Handle hoDD
37342>>>>>        Boolean bFound
37342>>>>>        Boolean bOpOk
37342>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37343>>>>>        Send Update_Focus_Field_For_Operation MODE_FINDING
37344>>>>>        
37344>>>>>        If (bOpOk) Begin
37346>>>>>            Get Data_Set iFile to hoDD
37347>>>>>            If hoDD Begin
37349>>>>>                Send OnPreFind of hoDD DDFindFindByRowRec
37350>>>>>            End
37350>>>>>>
37350>>>>>        End
37350>>>>>>
37350>>>>>        
37350>>>>>        Forward Send FindByRowId iFile riRowId
37352>>>>>        
37352>>>>>        If (bOpOk) Begin
37354>>>>>            If (hoDD) Begin
37356>>>>>                Move (Found) to bFound
37357>>>>>                Send OnPostFind of hoDD DDFindFindByRowRec bFound
37358>>>>>                Move bFound to Found
37359>>>>>            End
37359>>>>>>
37359>>>>>        End
37359>>>>>>
37359>>>>>    End_Procedure
37360>>>>>    
37360>>>>>    Function FindByRowIdEx Integer iFile RowID riRowId Returns Boolean
37362>>>>>        Handle hoDD
37362>>>>>        Boolean bFound bSuccess
37362>>>>>        Boolean bOpOk
37362>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37363>>>>>        Send Update_Focus_Field_For_Operation MODE_FINDING
37364>>>>>        
37364>>>>>        If (bOpOk) Begin
37366>>>>>            Get Data_Set iFile to hoDD
37367>>>>>            If hoDD Begin
37369>>>>>                Send OnPreFind of hoDD DDFindFindByRowRec
37370>>>>>            End
37370>>>>>>
37370>>>>>        End
37370>>>>>>
37370>>>>>        
37370>>>>>        Forward Get FindByRowIdEx iFile riRowId to bSuccess
37372>>>>>        
37372>>>>>        If (bOpOk) Begin
37374>>>>>            If (hoDD) Begin
37376>>>>>                Move (Found) to bFound
37377>>>>>                Send OnPostFind of hoDD DDFindFindByRowRec bFound
37378>>>>>                Move bFound to Found
37379>>>>>            End
37379>>>>>>
37379>>>>>        End
37379>>>>>>
37379>>>>>        Function_Return bSuccess
37380>>>>>    End_Function
37381>>>>>    
37381>>>>>    Function FindByRowIdExNoAutoFill Integer iFile RowID riRowId Returns Boolean
37383>>>>>        Handle hoDD
37383>>>>>        Boolean bFound bSuccess
37383>>>>>        Boolean bOpOk
37383>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37384>>>>>        Send Update_Focus_Field_For_Operation MODE_FINDING
37385>>>>>        
37385>>>>>        If (bOpOk) Begin
37387>>>>>            Get Data_Set iFile to hoDD
37388>>>>>            If hoDD Begin
37390>>>>>                Send OnPreFind of hoDD DDFindFindByRowRec
37391>>>>>            End
37391>>>>>>
37391>>>>>        End
37391>>>>>>
37391>>>>>        
37391>>>>>        Forward Get FindByRowIdExNoAutoFill iFile riRowId to bSuccess
37393>>>>>        
37393>>>>>        If (bOpOk) Begin
37395>>>>>            If (hoDD) Begin
37397>>>>>                Move (Found) to bFound
37398>>>>>                Send OnPostFind of hoDD DDFindFindByRowRec bFound
37399>>>>>                Move bFound to Found
37400>>>>>            End
37400>>>>>>
37400>>>>>        End
37400>>>>>>
37400>>>>>        Function_Return bSuccess
37401>>>>>    End_Function
37402>>>>>    
37402>>>>>    
37402>>>>>    Procedure Request_Find Integer eFindMode Integer iFile Integer iIndex
37404>>>>>        Handle hoDD
37404>>>>>        Boolean bFound
37404>>>>>        Boolean bOpOk
37404>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37405>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37407>>>>>            Send Update_Focus_Field_For_Operation MODE_FINDING
37408>>>>>        End
37408>>>>>>
37408>>>>>        
37408>>>>>        If (bOpOk) Begin
37410>>>>>            Get Data_Set iFile to hoDD
37411>>>>>            If hoDD Begin
37413>>>>>                Send OnPreFind of hoDD DDFindRequestFind
37414>>>>>            End
37414>>>>>>
37414>>>>>        End
37414>>>>>>
37414>>>>>        
37414>>>>>        Forward Send Request_Find eFindMode iFile iIndex
37416>>>>>        
37416>>>>>        If (bOpOk) Begin
37418>>>>>            If (hoDD) Begin
37420>>>>>                Move (Found) to bFound
37421>>>>>                Send OnPostFind of hoDD DDFindRequestFind bFound
37422>>>>>                Move bFound to Found
37423>>>>>            End
37423>>>>>>
37423>>>>>        End
37423>>>>>>
37423>>>>>    End_Procedure
37424>>>>>    
37424>>>>>    Procedure OnPreFind Integer eMessage
37426>>>>>    End_Procedure
37427>>>>>    
37427>>>>>    Procedure OnPostFind Integer eMessage Boolean bFound
37429>>>>>    End_Procedure
37430>>>>>    
37430>>>>>    
37430>>>>>    
37430>>>>>    Procedure Request_Superfind Integer eFindMode Integer iFile Integer iField
37432>>>>>        Boolean bInSuperFind
37432>>>>>        // we need to set pbInSuperFind so Entry_update in the DEOs will know that
37432>>>>>        // they should perform an entry_update. Superfind entry_updates have never gone through
37432>>>>>        // the DD's field buffer.
37432>>>>>        Get pbInSuperFind to bInSuperFind
37433>>>>>        Set pbInSuperFind to True
37434>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37436>>>>>            Send Update_Focus_Field_For_Operation MODE_FINDING
37437>>>>>        End
37437>>>>>>
37437>>>>>        Forward Send Request_Superfind eFindMode iFile iField
37439>>>>>        Set pbInSuperFind to bInSuperFind
37440>>>>>    End_Procedure
37441>>>>>    
37441>>>>>    // Augmented to return true if a non-constrained parent DD has a change. This way
37441>>>>>    // Should_Save_row only filters changes in a consrained parent.
37441>>>>>    
37441>>>>>    Function Should_Save_Row Returns Boolean
37443>>>>>        Boolean bShouldSaveRow bShouldSave bRelatesToConstraint
37443>>>>>        Integer iServers iServer iServerFile
37443>>>>>        Handle hoServerDD
37443>>>>>        Forward Get Should_Save_Row to bShouldSaveRow // will be true if this DD is changed or has a changed parent.
37445>>>>>        Get Should_Save to bShouldSave // will be true if there is a change anywhere up the entire save structure
37446>>>>>        If (not(bShouldSaveRow) and bShouldSave) Begin
37448>>>>>            // If here we have a changed in an server but not the this DD. We need a further refinement. If the server
37448>>>>>            // change is in a constrained server, we don't consider this a change because you can switch rows without losing
37448>>>>>            // data (with RT changes made for 17.0).
37448>>>>>            Get Data_Set_Server_Count to iServers
37449>>>>>            For iServer from 0 to (iServers-1)
37455>>>>>>
37455>>>>>                Get Data_Set_Server iServer to hoServerDD
37456>>>>>                Get Should_Save of hoServerDD to bShouldSave
37457>>>>>                If bShouldSave Begin
37459>>>>>                    Get Main_File of hoServerDD to iServerFile
37460>>>>>                    Get IsRelatesToConstrained iServerFile to bRelatesToConstraint
37461>>>>>                    If not bRelatesToConstraint Begin
37463>>>>>                        Function_Return True
37464>>>>>                    End
37464>>>>>>
37464>>>>>                End
37464>>>>>>
37464>>>>>            Loop
37465>>>>>>
37465>>>>>        End
37465>>>>>>
37465>>>>>        Function_Return bShouldSaveRow
37466>>>>>    End_Function
37467>>>>>    
37467>>>>>    // returns true if any relates-to constraining server needs a save. Normally there will be
37467>>>>>    // one or zero related-to parents. If Should_Save_Row returns false it is possible that there
37467>>>>>    // is a change up the relates-to constrained branch. If so, this will return True. This can be
37467>>>>>    // used to better determine the changed status of your DDO sructure
37467>>>>>    Function ShouldSaveConstrainedToServer Returns Boolean
37469>>>>>        Boolean bShouldSave bRelatesToConstraint
37469>>>>>        Integer iServers iServer iServerFile
37469>>>>>        Handle hoServerDD
37469>>>>>        Get Data_Set_Server_Count to iServers
37470>>>>>        For iServer from 0 to (iServers-1)
37476>>>>>>
37476>>>>>            Get Data_Set_Server iServer to hoServerDD
37477>>>>>            Get Main_File of hoServerDD to iServerFile
37478>>>>>            Get IsRelatesToConstrained iServerFile to bRelatesToConstraint
37479>>>>>            If bRelatesToConstraint Begin
37481>>>>>                Get Should_Save of hoServerDD to bShouldSave
37482>>>>>                If bShouldSave Begin
37484>>>>>                    Function_Return True
37485>>>>>                End
37485>>>>>>
37485>>>>>            End
37485>>>>>>
37485>>>>>        Loop
37486>>>>>>
37486>>>>>        Function_Return False
37487>>>>>    End_Function
37488>>>>>    
37488>>>>>    Function FindServerInformationElement Integer iFile Returns Integer
37490>>>>>        tDDServerInformation[] ServerInformation
37490>>>>>        tDDServerInformation[] ServerInformation
37491>>>>>        tDDServerInformation ServerSearch
37491>>>>>        tDDServerInformation ServerSearch
37491>>>>>        Integer iIndex
37491>>>>>        Move iFile to ServerSearch.iParent
37492>>>>>        Get pServerInformation to ServerInformation
37493>>>>>        Function_Return (SearchArray(ServerSearch,ServerInformation))
37494>>>>>    End_Function
37495>>>>>    
37495>>>>>    Procedure AddServerData Integer iFile Integer eParam Boolean bValue
37497>>>>>        tDDServerInformation[] ServerInformation
37497>>>>>        tDDServerInformation[] ServerInformation
37498>>>>>        Integer iIndex
37498>>>>>        Handle hoDDO
37498>>>>>        
37498>>>>>        Get pServerInformation to ServerInformation
37499>>>>>        Get FindServerInformationElement iFile to iIndex
37500>>>>>        If (iIndex=-1) Begin
37502>>>>>            Move (SizeOfArray(ServerInformation)) to iIndex
37503>>>>>            Move iFile to ServerInformation[iIndex].iParent
37504>>>>>            // defaults must always be false!
37504>>>>>            Move False to ServerInformation[iIndex].bParentNoSwitchIfCommitted
37505>>>>>            Move False to ServerInformation[iIndex].bAllowNullParent
37506>>>>>            Move False to ServerInformation[iIndex].bNoCascadeDelete
37507>>>>>            Move False to ServerInformation[iIndex].bCascadeDeleteNullTheParent
37508>>>>>        End
37508>>>>>>
37508>>>>>        
37508>>>>>        If (eParam=0) Begin
37510>>>>>            If (bValue<>ServerInformation[iIndex].bAllowNullParent) Begin
37512>>>>>                Move bValue to ServerInformation[iIndex].bAllowNullParent
37513>>>>>                Send AdjustDeleteValidateStructure iFile
37514>>>>>            End
37514>>>>>>
37514>>>>>        End
37514>>>>>>
37514>>>>>        Else If (eParam=1) Begin
37517>>>>>            Move bValue to ServerInformation[iIndex].bParentNoSwitchIfCommitted
37518>>>>>        End
37518>>>>>>
37518>>>>>        Else If (eParam=2) Begin
37521>>>>>            Move bValue to ServerInformation[iIndex].bNoCascadeDelete
37522>>>>>        End
37522>>>>>>
37522>>>>>        Else Begin // (3)
37523>>>>>            If (bValue<>ServerInformation[iIndex].bCascadeDeleteNullTheParent) Begin
37525>>>>>                Move bValue to ServerInformation[iIndex].bCascadeDeleteNullTheParent
37526>>>>>                Send AdjustDeleteValidateStructure iFile
37527>>>>>            End
37527>>>>>>
37527>>>>>        End
37527>>>>>>
37527>>>>>        Set pServerInformation to ServerInformation
37528>>>>>    End_Procedure
37529>>>>>    
37529>>>>>    Function GetServerData Integer iFile Integer eParam Returns Boolean
37531>>>>>        Boolean bValue
37531>>>>>        tDDServerInformation[] ServerInformation
37531>>>>>        tDDServerInformation[] ServerInformation
37532>>>>>        Integer iIndex
37532>>>>>        Get pServerInformation to ServerInformation
37533>>>>>        Get FindServerInformationElement iFile to iIndex
37534>>>>>        // when not found in array, we want to make sure that we return false. Therefore
37534>>>>>        // false should always be the default.
37534>>>>>        If (iIndex<>-1) Begin
37536>>>>>            If (eParam=0) Begin
37538>>>>>                Move ServerInformation[iIndex].bAllowNullParent to bValue
37539>>>>>            End
37539>>>>>>
37539>>>>>            Else If (eParam=1) Begin
37542>>>>>                Move ServerInformation[iIndex].bParentNoSwitchIfCommitted to bValue
37543>>>>>            End
37543>>>>>>
37543>>>>>            Else If (eParam=2) Begin
37546>>>>>                Move ServerInformation[iIndex].bNoCascadeDelete to bValue
37547>>>>>            End
37547>>>>>>
37547>>>>>            Else Begin
37548>>>>>                Move ServerInformation[iIndex].bCascadeDeleteNullTheParent to bValue
37549>>>>>            End
37549>>>>>>
37549>>>>>        End
37549>>>>>>
37549>>>>>        Function_Return bValue
37550>>>>>    End_Function
37551>>>>>    
37551>>>>>    Procedure AdjustDeleteValidateStructure2
37553>>>>>        Integer iCount i
37553>>>>>        Handle hoDDO
37553>>>>>        Boolean bVisited
37553>>>>>        Set Visited_State to True
37554>>>>>        Set Cascade_Delete_Structure_Validated_State to False
37555>>>>>        Get Data_Set_Server_Count to iCount
37556>>>>>        For i from 0 to (iCount-1)
37562>>>>>>
37562>>>>>            Get Data_Set_Server i to hoDDO
37563>>>>>            Get Visited_State of hoDDO to bVisited
37564>>>>>            If (not(bVisited)) Begin
37566>>>>>                Send AdjustDeleteValidateStructure2 of hoDDO
37567>>>>>            End
37567>>>>>>
37567>>>>>        Loop
37568>>>>>>
37568>>>>>    End_Procedure
37569>>>>>    
37569>>>>>    // This is called in the unlikely case that NullParent/CascadeNull are set dynamically. It
37569>>>>>    // tells the parent DDO to recheck its validate-delete structure and it tells all ancestors of
37569>>>>>    // this parent to do the same. If called while DDOs are being created (via a class setting) there
37569>>>>>    // will not be a connected parent for iFile, which is fine.
37569>>>>>    Procedure AdjustDeleteValidateStructure Integer iFile
37571>>>>>        Handle hoDDO
37571>>>>>        Get Which_Data_Set iFile to hoDDO
37572>>>>>        If hoDDO Begin
37574>>>>>            Send Initialize_Visited of hoDDO False False
37575>>>>>            Send AdjustDeleteValidateStructure2 of hoDDO
37576>>>>>        End
37576>>>>>>
37576>>>>>    End_Procedure
37577>>>>>    
37577>>>>>    // Used to add a null parent to the list of parents that allow this
37577>>>>>    Procedure Set ParentNullAllowed Integer iParent Boolean bAllowed
37579>>>>>        Send AddServerData iParent 0 bAllowed
37580>>>>>    End_Procedure
37581>>>>>    
37581>>>>>    // returns true if null parent allowed for this parent file
37581>>>>>    Function ParentNullAllowed Integer iParent Returns Boolean
37583>>>>>        Boolean bValue
37583>>>>>        Get GetServerData iParent 0 to bValue
37584>>>>>        Function_Return bValue
37585>>>>>    End_Function
37586>>>>>    
37586>>>>>    // returns true if null parent allowed for this parent file. This is the function
37586>>>>>    // that can be used for augmentation. This is the methid that is called by the runtime
37586>>>>>    // to determine if a null parent is allowed
37586>>>>>    Function IsNullParentAllowed Integer iServer Returns Boolean
37588>>>>>        Boolean bAllowed
37588>>>>>        Get ParentNullAllowed iServer to bAllowed
37589>>>>>        Function_Return bAllowed
37590>>>>>    End_Function
37591>>>>>    
37591>>>>>    Procedure Set ParentNoSwitchIfCommitted Integer iParent Boolean bAllowed
37593>>>>>        Send AddServerData iParent 1 bAllowed
37594>>>>>    End_Procedure
37595>>>>>    
37595>>>>>    Function ParentNoSwitchIfCommitted Integer iParent Returns Boolean
37597>>>>>        Boolean bValue
37597>>>>>        Get GetServerData iParent 1 to bValue
37598>>>>>        Function_Return bValue
37599>>>>>    End_Function
37600>>>>>    
37600>>>>>    
37600>>>>>    Procedure Set CascadeDeleteAllowed Integer iParent Boolean bAllowed
37602>>>>>        Send AddServerData iParent 2 (not(bAllowed))
37603>>>>>    End_Procedure
37604>>>>>    
37604>>>>>    Function CascadeDeleteAllowed Integer iParent Returns Boolean
37606>>>>>        Boolean bValue
37606>>>>>        Get GetServerData iParent 2 to bValue // note that False=allowed
37607>>>>>        Function_Return (not(bValue))
37608>>>>>    End_Function
37609>>>>>    
37609>>>>>    Function IsCascadeDeleteAllowed Integer iServer Returns Boolean
37611>>>>>        Boolean bAllowed
37611>>>>>        Get CascadeDeleteAllowed iServer to bAllowed
37612>>>>>        Function_Return bAllowed
37613>>>>>    End_Function
37614>>>>>    
37614>>>>>    Procedure Set CascadeDeleteNull Integer iParent Boolean bAllowed
37616>>>>>        Send AddServerData iParent 3 bAllowed
37617>>>>>    End_Procedure
37618>>>>>    
37618>>>>>    Function CascadeDeleteNull Integer iParent Returns Boolean
37620>>>>>        Boolean bValue
37620>>>>>        Get GetServerData iParent 3 to bValue
37621>>>>>        Function_Return bValue
37622>>>>>    End_Function
37623>>>>>    
37623>>>>>    Function IsCascadeDeleteNull Integer iServer Returns Boolean
37625>>>>>        Boolean bAllowed
37625>>>>>        Get CascadeDeleteNull iServer to bAllowed
37626>>>>>        Function_Return bAllowed
37627>>>>>    End_Function
37628>>>>>    
37628>>>>>    // return an array with the server path from this DD to passed top. The top will be
37628>>>>>    // in 0 and its child in 1, grand-child in 2, etc. If empty, no path was found. To start
37628>>>>>    // this process the byref hoDDs array MUST be empty
37628>>>>>    Procedure DDOServerPath Handle hoTop Handle[] ByRef hoDDs
37630>>>>>        Handle hoServer
37630>>>>>        Integer iServers iServer
37630>>>>>        If (hoTop=Self) Begin
37632>>>>>            Move Self to hoDDs[SizeOfArray(hoDDs)]
37633>>>>>            Procedure_Return
37634>>>>>        End
37634>>>>>>
37634>>>>>        Get Data_Set_Server_Count to iServers
37635>>>>>        For iServer from 0 to (iServers-1)
37641>>>>>>
37641>>>>>            Get Data_Set_Server iServer to hoServer
37642>>>>>            Send DDOServerPath of hoServer hoTop (&hoDDs)
37643>>>>>            If (SizeOfArray(hoDDs)) Begin
37645>>>>>                Move Self to hoDDs[SizeOfArray(hoDDs)]
37646>>>>>                Procedure_Return
37647>>>>>            End
37647>>>>>>
37647>>>>>        Loop
37648>>>>>>
37648>>>>>    End_Procedure
37649>>>>>    
37649>>>>>    // returns True if the value passed can be considered empty for this field.
37649>>>>>    Function IsEmptyField Integer iField String sValue Returns Boolean
37651>>>>>        Integer iFile iDataType iValidationType
37651>>>>>        Number nNum
37651>>>>>        Boolean bInvalid bChecked
37651>>>>>        Get Main_File to iFile
37652>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iDataType
37655>>>>>        Get IsDataInvalid iDataType sValue to bInvalid
37656>>>>>        If bInvalid Begin
37658>>>>>            Function_Return True
37659>>>>>        End
37659>>>>>>
37659>>>>>        
37659>>>>>        // DDs set checkbox fields to the False value as default. We must test its select_state
37659>>>>>        Get Field_Validation_Type of (Field_Attributes(Self)) iField to iValidationType
37660>>>>>        If (iValidationType=FA_VALIDATION_TYPE_CHECKBOX) Begin
37662>>>>>            Get Field_Select_State iField to bChecked
37663>>>>>            If not bChecked Begin
37665>>>>>                Function_Return True
37666>>>>>            End
37666>>>>>>
37666>>>>>        End
37666>>>>>>
37666>>>>>        
37666>>>>>        If ((iDataType=DF_BCD or iDataType=DF_DATE) and (Number(sValue)=0)) Begin
37668>>>>>            Move "" to sValue
37669>>>>>        End
37669>>>>>>
37669>>>>>        Else If (iDataType=DF_DATETIME and IsNullDateTime(cast(sValue,DateTime))) Begin
37672>>>>>            Move "" to sValue
37673>>>>>        End
37673>>>>>>
37673>>>>>        Function_Return (sValue="")
37674>>>>>    End_Function
37675>>>>>    
37675>>>>>    
37675>>>>>    // is the record committed
37675>>>>>    Function IsCommitted Returns Boolean
37677>>>>>        Boolean bHasRecord
37677>>>>>        Get HasRecord to bHasRecord
37678>>>>>        Function_Return bHasRecord
37679>>>>>    End_Function
37680>>>>>    
37680>>>>>    // is the field committed. It assumes the record is already committed
37680>>>>>    Function IsFieldCommitted Integer iField Returns Boolean
37682>>>>>        Boolean bIsCommitted
37682>>>>>        Get Field_Option iField DD_COMMIT to bIsCommitted
37683>>>>>        Function_Return bIsCommitted
37684>>>>>    End_Function
37685>>>>>    
37685>>>>>    // is a parent change allowed for this parent server.
37685>>>>>    Function IsCommittedParentChangeAllowed Integer iServer Returns Boolean
37687>>>>>        Boolean bNoSwitch
37687>>>>>        Get ParentNoSwitchIfCommitted iServer to bNoSwitch
37688>>>>>        Function_Return (not(bNoSwitch))
37689>>>>>    End_Function
37690>>>>>    
37690>>>>>    // Are we allowed to find with this file when it is used as a parent?
37690>>>>>    // Check all child DDOs and see if any are committed and do not allow switching parents when committed.
37690>>>>>    //  The rules for each child are switching is ok If:
37690>>>>>    // 1. the child is not committed,
37690>>>>>    // 2. it has a relates-to constraint (Find will change child which is ok)
37690>>>>>    // 3. if IsCommittedParentChangeAllowed allowed.
37690>>>>>    //
37690>>>>>    Function AllowParentFind Returns Boolean
37692>>>>>        Integer iClients iClient iMain
37692>>>>>        Handle hoChild
37692>>>>>        Boolean bIsCommitted
37692>>>>>        Get Data_Set_Client_Count to iClients
37693>>>>>        For iClient from 0 to (iClients-1)
37699>>>>>>
37699>>>>>            Get Data_Set_Client iClient to hoChild
37700>>>>>            Get IsCommitted of hoChild to bIsCommitted
37701>>>>>            If bIsCommitted Begin
37703>>>>>                Get Main_File to iMain
37704>>>>>                Get IsRelatesToConstrained of hoChild iMain to bIsCommitted
37705>>>>>                If not bIsCommitted Begin
37707>>>>>                    Get IsCommittedParentChangeAllowed of hoChild iMain to bIsCommitted
37708>>>>>                    If (not(bIsCommitted)) Begin
37710>>>>>                        Function_Return False
37711>>>>>                    End
37711>>>>>>
37711>>>>>                End
37711>>>>>>
37711>>>>>            End
37711>>>>>>
37711>>>>>        Loop
37712>>>>>>
37712>>>>>        Function_Return True
37713>>>>>    End_Function
37714>>>>>    
37714>>>>>    // aumgented to do nothing if there is no index (instead of annoying error message) and
37714>>>>>    // to do nothing if a find is not allowed because it is a no switch parent of a committed child.
37714>>>>>    Procedure Item_Find Integer eFindMode ;            Integer iFile Integer iField ;            Integer bDoEntryUpdate Integer bShowFindErr Integer bDeferred
37716>>>>>        
37716>>>>>        Integer iIndex iMain
37716>>>>>        Handle  hoOwner
37716>>>>>        Boolean bOk
37716>>>>>        
37716>>>>>        Get File_Field_Index iFile iField to iIndex
37717>>>>>        If (iIndex=-1)  Begin
37719>>>>>            Procedure_Return
37720>>>>>        End
37720>>>>>>
37720>>>>>        Get Main_File to iMain
37721>>>>>        If (iMain<>iFile) Begin
37723>>>>>            Get Which_Data_Set iFile to hoOwner
37724>>>>>            If hoOwner Begin
37726>>>>>                Get AllowParentFind of hoOwner to bOk
37727>>>>>                If not bOk Begin
37729>>>>>                    Procedure_Return
37730>>>>>                End
37730>>>>>>
37730>>>>>            End
37730>>>>>>
37730>>>>>        End
37730>>>>>>
37730>>>>>        
37730>>>>>        If not bDeferred Begin
37732>>>>>            Send Refind_Records // make sure the buffers are correct before the find
37733>>>>>        End
37733>>>>>>
37733>>>>>        
37733>>>>>        Forward Send Item_Find eFindMode iFile iField bDoEntryUpdate bShowFindErr bDeferred
37735>>>>>    End_Procedure
37736>>>>>    
37736>>>>>    
37736>>>>>    Function Field_CommitNoEnterOnIndex Integer iField Returns Boolean
37738>>>>>        Function_Return False
37739>>>>>    End_Function
37740>>>>>    
37740>>>>>    // Return the committed options for this field based on the committed status or this record,
37740>>>>>    // the committed status of the field and whether, if committed, it should be noput or noput+noenter
37740>>>>>    Function File_Field_Committed_Options Integer iFile Integer iField Returns Integer
37742>>>>>        Boolean bIsCommitted bNoEnter
37742>>>>>        Integer iNewOpts iIndex
37742>>>>>        Handle hoOwner
37742>>>>>        
37742>>>>>        Get Which_Data_Set iFile to hoOwner
37743>>>>>        If not hoOwner ;            Function_Return 0
37746>>>>>        
37746>>>>>        Get File_Field_Index iFile iField to iIndex
37747>>>>>        Get IsCommitted of hoOwner iField to bIsCommitted
37748>>>>>        If bIsCommitted Begin
37750>>>>>            Get IsFieldCommitted of hoOwner iField to bIsCommitted
37751>>>>>            If bIsCommitted Begin
37753>>>>>                Move True to bNoEnter
37754>>>>>                If (iIndex<>-1) Begin
37756>>>>>                    Get Field_CommitNoEnterOnIndex iField to bNoEnter
37757>>>>>                End
37757>>>>>>
37757>>>>>                // if committed, it is noput and, if non-indexed, also noenter
37757>>>>>                Move (If(bNoEnter,DD_DISPLAYONLY,DD_NOPUT)) to iNewOpts
37758>>>>>            End
37758>>>>>>
37758>>>>>        End
37758>>>>>>
37758>>>>>        // if a finding parent field, we want to know if you are allowed to switch parents as we will assume
37758>>>>>        // that this field is used for finding.
37758>>>>>        If (hoOwner<>Self and iIndex>-1) Begin
37760>>>>>            Get AllowParentFind of hoOwner to bIsCommitted
37761>>>>>            If not bIsCommitted Begin
37763>>>>>                Move DD_DISPLAYONLY to iNewOpts
37764>>>>>            End
37764>>>>>>
37764>>>>>        End
37764>>>>>>
37764>>>>>        
37764>>>>>        Function_Return iNewOpts
37765>>>>>    End_Function
37766>>>>>    
37766>>>>>    // Returns the current field-field options based on regular options, foreign field status
37766>>>>>    // plus committed record status
37766>>>>>    Function File_Field_DynamicEntryOptions Integer iFile Integer iField Returns Integer
37768>>>>>        Integer iCOpts iFOpts
37768>>>>>        If (iFile=0) Begin
37770>>>>>            Function_Return 0
37771>>>>>        End
37771>>>>>>
37771>>>>>        Get File_Field_Options iFile iField to iFOpts            // regular options (handles regular and foreign)
37772>>>>>        Get File_Field_Committed_Options iFile iField to iCOpts  // possible NoPut, NoEnter additions
37773>>>>>        Function_Return (iFOpts ior iCOpts)
37774>>>>>    End_Function
37775>>>>>    
37775>>>>>    Function DDRememberedFieldIndex Integer iField Returns Integer
37777>>>>>        tDDRemembered[] DefaultValues
37777>>>>>        tDDRemembered[] DefaultValues
37778>>>>>        tDDRemembered SearchItem
37778>>>>>        tDDRemembered SearchItem
37778>>>>>        Integer iIndex
37778>>>>>        Get pDDDefaults to DefaultValues
37779>>>>>        Move iField to SearchItem.iField
37780>>>>>        Move (SearchArray(SearchItem,DefaultValues)) to iIndex
37781>>>>>        Function_Return iIndex
37782>>>>>    End_Function
37783>>>>>    
37783>>>>>    // Interface used to set or clear a dynamic default (remembered) value for a DD field. If the
37783>>>>>    // value passed is empty ("" or as empty as defined by the data-type) it is cleared. If the value
37783>>>>>    // is DD_RememberLast, it will use the last value before a clear as the default, else it uses the
37783>>>>>    // passed value as the default
37783>>>>>    Procedure Set Field_RememberedValue Integer iField String sValue
37785>>>>>        tDDRemembered[] DefaultValues
37785>>>>>        tDDRemembered[] DefaultValues
37786>>>>>        Integer iIndex
37786>>>>>        Boolean bNull
37786>>>>>        Get DDRememberedFieldIndex iField to iIndex
37787>>>>>        Get pDDDefaults to DefaultValues
37788>>>>>        If (sValue<>DD_RememberLast) Begin // if it is rememberlast, we know it is not null
37790>>>>>            Get IsEmptyField iField sValue to bNull
37791>>>>>        End
37791>>>>>>
37791>>>>>        If (not(bNull)) Begin
37793>>>>>            If (iIndex=-1) Begin
37795>>>>>                Move (SizeOfArray(DefaultValues)) to iIndex
37796>>>>>                Move iField to DefaultValues[iIndex].iField
37797>>>>>            End
37797>>>>>>
37797>>>>>            Move sValue to DefaultValues[iIndex].sDefault
37798>>>>>            Set pDDDefaults to DefaultValues
37799>>>>>        End
37799>>>>>>
37799>>>>>        Else If  (iIndex<>-1) Begin
37802>>>>>            Set pDDDefaults to (RemoveFromArray(DefaultValues,iIndex))
37803>>>>>        End
37803>>>>>>
37803>>>>>    End_Procedure
37804>>>>>    
37804>>>>>    // get the remembered value as per rules above
37804>>>>>    Function Field_RememberedValue Integer iField Returns String
37806>>>>>        tDDRemembered[] DefaultValues
37806>>>>>        tDDRemembered[] DefaultValues
37807>>>>>        Integer iIndex
37807>>>>>        Get DDRememberedFieldIndex iField to iIndex
37808>>>>>        If (iIndex<>-1) Begin
37810>>>>>            Get pDDDefaults to DefaultValues
37811>>>>>            Function_Return DefaultValues[iIndex].sDefault
37812>>>>>        End
37812>>>>>>
37812>>>>>        Function_Return ''
37813>>>>>    End_Function
37814>>>>>    
37814>>>>>    Procedure AssignDynamicDefaults
37816>>>>>        Integer iField iFields iFile
37816>>>>>        tDDRemembered[] DefaultValues
37816>>>>>        tDDRemembered[] DefaultValues
37817>>>>>        Boolean bMain
37817>>>>>        String sValue
37817>>>>>        
37817>>>>>        Get Main_File to iFile
37818>>>>>        Get pDDDefaults to DefaultValues
37819>>>>>        Move (SizeOfArray(DefaultValues)) to iFields
37820>>>>>        For iField from 0 to (iFields-1)
37826>>>>>>
37826>>>>>            If ( DefaultValues[iField].sDefault<>"") Begin
37828>>>>>                If (DefaultValues[iField].sDefault=DD_RememberLast) Begin
37830>>>>>                    Move DefaultValues[iField].sLastValue to sValue
37831>>>>>                End
37831>>>>>>
37831>>>>>                Else Begin
37832>>>>>                    Move DefaultValues[iField].sDefault to sValue
37833>>>>>                End
37833>>>>>>
37833>>>>>                Set Field_Changed_Value DefaultValues[iField].iField to sValue
37834>>>>>            End
37834>>>>>>
37834>>>>>        Loop
37835>>>>>>
37835>>>>>    End_Procedure
37836>>>>>    
37836>>>>>    // Clears all remembered defaults for this DD.
37836>>>>>    Procedure ClearRememberedDefaults
37838>>>>>        tDDRemembered[] DefaultValues
37838>>>>>        tDDRemembered[] DefaultValues
37839>>>>>        Set pDDDefaults to DefaultValues
37840>>>>>    End_Procedure
37841>>>>>    
37841>>>>>    Procedure PrivateClearAllRememberedDefaults
37843>>>>>        Integer iCount iMax
37843>>>>>        Handle hoDD
37843>>>>>        Boolean bVisisted
37843>>>>>        
37843>>>>>        Set Visited_State to True
37844>>>>>        
37844>>>>>        Get Data_Set_Server_Count to iMax
37845>>>>>        Decrement iMax
37846>>>>>        For iCount from 0 to iMax
37852>>>>>>
37852>>>>>            Get Data_Set_Server iCount to hoDD
37853>>>>>            Get Visited_State of hoDD to bVisisted
37854>>>>>            If not (bVisisted) Begin
37856>>>>>                Send PrivateClearAllRememberedDefaults of hoDD
37857>>>>>            End
37857>>>>>>
37857>>>>>        Loop
37858>>>>>>
37858>>>>>        
37858>>>>>        Send ClearRememberedDefaults
37859>>>>>        
37859>>>>>        Get Data_Set_Client_Count to iMax
37860>>>>>        Decrement iMax
37861>>>>>        For iCount from 0 to iMax
37867>>>>>>
37867>>>>>            Get Data_Set_Client iCount to hoDD
37868>>>>>            Get Visited_State of hoDD to bVisisted
37869>>>>>            If not (bVisisted) Begin
37871>>>>>                Send PrivateClearAllRememberedDefaults of hoDD
37872>>>>>            End
37872>>>>>>
37872>>>>>        Loop
37873>>>>>>
37873>>>>>        
37873>>>>>    End_Procedure
37874>>>>>    
37874>>>>>    // Clears all remembered defaults for all DDs in this structure.
37874>>>>>    Procedure ClearAllRememberedDefaults
37876>>>>>        Send InitializeAllVisited
37877>>>>>        Send PrivateClearAllRememberedDefaults
37878>>>>>    End_Procedure
37879>>>>>    
37879>>>>>    // This is called after a clear or clear all is sent to this DD. It does autofinds as needed
37879>>>>>    // for any parent DDs. It does this if the parent is not a relates to contraining parent, if
37879>>>>>    // a field has an index, it has a changed value and it is autofind or autofind_ge.
37879>>>>>    Procedure DefaultParentAutofinds
37881>>>>>        Integer i iServers iField iFields iFile iIndex iOpts
37881>>>>>        Boolean bDoAutoFind bRelates bIsEmptyField
37881>>>>>        String sValue
37881>>>>>        Handle hoServer
37881>>>>>        Get Data_Set_Server_Count to iServers
37882>>>>>        For i from 0 to (iServers-1)
37888>>>>>>
37888>>>>>            Get Data_Set_Server i to hoServer
37889>>>>>            Get Main_File of hoServer to iFile
37890>>>>>            Get IsRelatesToConstrained iFile to bRelates
37891>>>>>            // never autofind on a relates-to constraining parent
37891>>>>>            If not (bRelates) Begin
37893>>>>>                
37893>>>>>                Get Field_Count of hoServer to iFields
37894>>>>>                Move False to bDoAutoFind
37895>>>>>                Move 1 to iField
37896>>>>>                While (not(bDoAutoFind) and (iField<=iFields))
37900>>>>>                    Get_Attribute DF_FIELD_INDEX of iFile iField to iIndex
37903>>>>>                    If (iIndex>0) Begin
37905>>>>>                        Get Field_Changed_State of hoServer iField to bDoAutoFind
37906>>>>>                        If bDoAutoFind Begin
37908>>>>>                            Get Field_Current_Value of hoServer iField to sValue
37909>>>>>                            Get IsEmptyField of hoServer iField sValue to bIsEmptyField
37910>>>>>                            Move (not(bIsEmptyField)) to bDoAutoFind
37911>>>>>                            If bDoAutoFind Begin
37913>>>>>                                Get File_Field_Options iFile iField to iOpts
37914>>>>>                                // if this is a retain or retainall we don't do this because we want
37914>>>>>                                // to maintain backwards compatibility
37914>>>>>                                Move ( (iOpts iand DD_AUTOFIND or iOpts iand DD_AUTOFIND_GE) and ;                                    not( iOpts iand DD_RETAIN or iOpts iand DD_RETAINALL) ) to bDoAutoFind
37915>>>>>                                If bDoAutoFind Begin
37917>>>>>                                    Send File_Field_Default_AutoFind iFile iField
37918>>>>>                                    Set Changed_State to False // clears parent changed state
37919>>>>>                                End
37919>>>>>>
37919>>>>>                            End
37919>>>>>>
37919>>>>>                        End
37919>>>>>>
37919>>>>>                    End
37919>>>>>>
37919>>>>>                    Increment iField
37920>>>>>                Loop
37921>>>>>>
37921>>>>>                
37921>>>>>                // Only check for grandparent autofinds if this parent did not do a an autofind
37921>>>>>                // Doing an autofind on an autofind parent's parent is just too confusing
37921>>>>>                If not bDoAutoFind Begin
37923>>>>>                    Send DefaultParentAutofinds of hoServer
37924>>>>>                End
37924>>>>>>
37924>>>>>            End
37924>>>>>>
37924>>>>>        Loop
37925>>>>>>
37925>>>>>    End_Procedure
37926>>>>>    
37926>>>>>    // Set this DD to be an alias, passing the file number of the alias
37926>>>>>    // This can only be called once per instance and the Main_File must already have been set
37926>>>>>    // most likely in a superclass.
37926>>>>>    // This sets Main_File to the alias, stores the original master file (accessed via MasterForAlias).
37926>>>>>    // It also clears all existing relatonships. Normally we expect the alias class to set
37926>>>>>    // sets pbUseDDRelates and pbNoCascadeDeleteStrict to true. We don't do that automatically so that
37926>>>>>    // the Studio's property panel will show the correct values. When an alias is defined using the
37926>>>>>    // studio it will set these two properties.
37926>>>>>    // This means you must set any required relationships yourself
37926>>>>>    Procedure Set Alias_File Integer iTable
37928>>>>>        Integer iMain iMaster iFieldsM iFieldsA
37928>>>>>        Get Main_File to iMain
37929>>>>>        Get MasterForAlias to iMaster
37930>>>>>        
37930>>>>>        If (iTable=0 and iMaster) Begin
37932>>>>>            Error DFERR_PROGRAM "Cannot unset alias table"
37933>>>>>>
37933>>>>>            Procedure_Return
37934>>>>>        End
37934>>>>>>
37934>>>>>        If (iTable=iMain) Begin
37936>>>>>            Error DFERR_PROGRAM "Cannot set alias table to self"
37937>>>>>>
37937>>>>>            Procedure_Return
37938>>>>>        End
37938>>>>>>
37938>>>>>        If (iMaster) Begin
37940>>>>>            Error DFERR_PROGRAM "Cannot redefine alias table"
37941>>>>>>
37941>>>>>            Procedure_Return
37942>>>>>        End
37942>>>>>>
37942>>>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iMain to iFieldsM
37945>>>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iTable to iFieldsA
37948>>>>>        If (iFieldsA<>iFieldsM) Begin
37950>>>>>            Error DFERR_PROGRAM "Alias and Master file are not based on the same table"
37951>>>>>>
37951>>>>>            Procedure_Return
37952>>>>>        End
37952>>>>>>
37952>>>>>        
37952>>>>>        Set piMasterTable to iMain
37953>>>>>        Set Main_File to iTable
37954>>>>>        Send DefineAsAlias
37955>>>>>    End_Procedure
37956>>>>>    
37956>>>>>    Procedure DefineAsAlias
37958>>>>>        Integer i iFile
37958>>>>>        
37958>>>>>        // We expect he developer to set these properties to True
37958>>>>>        //Set pbUseDDRelates to True
37958>>>>>        //Set pbNoCascadeDeleteStrict to True
37958>>>>>        
37958>>>>>        Send ClearDDRelates
37959>>>>>        Get Client_File_Count to i
37960>>>>>        While i
37964>>>>>            Decrement i
37965>>>>>            Get Client_File i to iFile
37966>>>>>            Send Remove_Client_File iFile
37967>>>>>        Loop
37968>>>>>>
37968>>>>>        Get Server_File_Count to i
37969>>>>>        While i
37973>>>>>            Decrement i
37974>>>>>            Get Server_File i to iFile
37975>>>>>            Send Remove_Server_File iFile
37976>>>>>        Loop
37977>>>>>>
37977>>>>>    End_Procedure
37978>>>>>    
37978>>>>>    Function MasterForAlias Returns Integer
37980>>>>>        Integer iMaster
37980>>>>>        Get piMasterTable to iMaster
37981>>>>>        Function_Return iMaster
37982>>>>>    End_Function
37983>>>>>    
37983>>>>>    Function IsAlias Returns Boolean
37985>>>>>        Integer iMaster
37985>>>>>        Get piMasterTable to iMaster
37986>>>>>        Function_Return (iMaster<>0)
37987>>>>>    End_Function
37988>>>>>    
37988>>>>>    
37988>>>>>    Procedure OnSaveRecord
37990>>>>>    End_Procedure
37991>>>>>    
37991>>>>>    Procedure StoreDefaultSQLFilters
37993>>>>>        Handle hoSQLHelper
37993>>>>>        Get phoSQLHelper to hoSQLHelper
37994>>>>>        Send StoreDefaultSQLFilters of hoSQLHelper
37995>>>>>    End_Procedure
37996>>>>>    
37996>>>>>    Procedure RestoreDefaultSQLFilters
37998>>>>>        Handle hoSQLHelper
37998>>>>>        Get phoSQLHelper to hoSQLHelper
37999>>>>>        Send RestoreDefaultSQLFilters of hoSQLHelper
38000>>>>>    End_Procedure
38001>>>>>    
38001>>>>>    Procedure ApplySQLFilterStr String sFilter
38003>>>>>        Handle hoSQLHelper
38003>>>>>        Get phoSQLHelper to hoSQLHelper
38004>>>>>        Send ApplySQLFilterStr of hoSQLHelper sFilter
38005>>>>>    End_Procedure
38006>>>>>    
38006>>>>>    
38006>>>>>    Procedure ApplySQLFilter
38008>>>>>        String sNewFilter sOldFilter
38008>>>>>        Boolean bApplyGlobalSQLFilters bOldFilterActive
38008>>>>>        Handle hoSQLHelper
38008>>>>>        Get phoSQLHelper to hoSQLHelper
38009>>>>>        Get psSQLFilter to sNewFilter
38010>>>>>        // if we have am active  table filter we can either ignore it or and it to the where clause
38010>>>>>        // pbApplyGlobalSQLFilters determines what to do.
38010>>>>>        Get pbApplyGlobalSQLFilters to bApplyGlobalSQLFilters
38011>>>>>        Get pbOldFilterActive to bOldFilterActive
38012>>>>>        If (bApplyGlobalSQLFilters and bOldFilterActive) Begin
38014>>>>>            Get psOldFilter to sOldFilter
38015>>>>>            Get SQLStrAppend sOldFilter sNewFilter to sNewFilter
38016>>>>>        End
38016>>>>>>
38016>>>>>        Send ApplySQLFilterStr of hoSQLHelper sNewFilter
38017>>>>>    End_Procedure
38018>>>>>    
38018>>>>>    Procedure Data_Set_PreFind
38020>>>>>        Boolean bUseDDSQLFilters
38020>>>>>        String sOldDDFilter
38020>>>>>        Get pbUseDDSQLFilters to bUseDDSQLFilters
38021>>>>>        If bUseDDSQLFilters Begin
38023>>>>>            
38023>>>>>            Send StoreDefaultSQLFilters
38024>>>>>            
38024>>>>>            // this can get called during cascade deletes. In such a case we will
38024>>>>>            // never explicitly not apply an SQL filters because it could violate relational integrity
38024>>>>>            If (OPERATION_MODE=MODE_DELETING) Begin
38026>>>>>                Get psSQLFilter to sOldDDFilter
38027>>>>>                Set psSQLFilter to "" // make sure there is no filter applied
38028>>>>>            End
38028>>>>>>
38028>>>>>            
38028>>>>>            Send ApplySQLFilter
38029>>>>>            
38029>>>>>            If (OPERATION_MODE=MODE_DELETING) Begin
38031>>>>>                Set psSQLFilter to sOldDDFilter
38032>>>>>            End
38032>>>>>>
38032>>>>>        End
38032>>>>>>
38032>>>>>    End_Procedure
38033>>>>>    
38033>>>>>    Procedure Data_Set_PostFind
38035>>>>>        Boolean bUseDDSQLFilters
38035>>>>>        Get pbUseDDSQLFilters to bUseDDSQLFilters
38036>>>>>        If bUseDDSQLFilters Begin
38038>>>>>            Send RestoreDefaultSQLFilters
38039>>>>>        End
38039>>>>>>
38039>>>>>    End_Procedure
38040>>>>>    
38040>>>>>    
38040>>>>>    // returns active constraints in atConstraintDef array.
38040>>>>>    // Should be called after constraints are built
38040>>>>>    // typically right after Rebuild_Constraints
38040>>>>>    
38040>>>>>    Function DDOConstraints Returns tConstraintDef[]
38042>>>>>        tConstraintDef[] Constraints
38042>>>>>        tConstraintDef[] Constraints
38043>>>>>        Integer i iCount i1
38043>>>>>        Get DATA_SET_CONSTRAINT_COUNT to iCount
38044>>>>>        For i from 0 to (iCount-1)
38050>>>>>>
38050>>>>>            Get DATA_SET_CONSTRAINT_INFO i 0 to i1 // type / mode
38051>>>>>            Move (Hi(i1)) to  Constraints[i].eType
38052>>>>>            Move (Low(i1)) to  Constraints[i].eMode
38053>>>>>            Get DATA_SET_CONSTRAINT_INFO i 1 to i1 // file / field
38054>>>>>            Move (Hi(i1)) to  Constraints[i].iFile
38055>>>>>            Move (Low(i1)) to  Constraints[i].iField
38056>>>>>            Get DATA_SET_CONSTRAINT_INFO i 2 to i1 // other file /field
38057>>>>>            Move (Hi(i1)) to  Constraints[i].iOtherFile
38058>>>>>            Move (Low(i1)) to  Constraints[i].iOtherField
38059>>>>>            Get DATA_SET_CONSTRAINT_INFO_Value i  to Constraints[i].sValue
38060>>>>>        Loop
38061>>>>>>
38061>>>>>        Function_Return Constraints
38062>>>>>    End_Function
38063>>>>>    
38063>>>>>    // returns constraint finding information about the current find. This tells us what kinds
38063>>>>>    // of constraint find "expressions" are used. This will actually do a cosntrained find
38063>>>>>    // initialization much like Establish_Find_Direction, which means it can change the values in
38063>>>>>    // the file buffer to assist with a jump-in.
38063>>>>>    Function DDOConstraintFindMeta Integer eMode Integer iOrder Returns tDDOConstraintFindMeta
38065>>>>>        tDDOConstraintFindMeta FindMeta
38065>>>>>        tDDOConstraintFindMeta FindMeta
38065>>>>>        Integer i
38065>>>>>        Get Data_Set_Constraint_Exps eMode iOrder to i
38066>>>>>        Move (Hi(i)) to FindMeta.iJumpInSegments
38067>>>>>        Move (i iand CONST_EXP_JUMPOUT) to FindMeta.bJumpOut
38068>>>>>        Move (i iand CONST_EXP_PRE_RELATE) to FindMeta.bPreRelate
38069>>>>>        Move (i iand CONST_EXP_POST_RELATE) to FindMeta.bPostRelate
38070>>>>>        Function_Return FindMeta
38071>>>>>    End_Function
38072>>>>>    
38072>>>>>    // this tells you if the current find or read requires a relate to evaluate the DF constraint.
38072>>>>>    // If false you could use this to set no_relate_state to false for the find/read process and then
38072>>>>>    // restore it when complete. Be careful using this.
38072>>>>>    Function DDOConstraintNeedsRelate Integer iOrder Returns Boolean
38074>>>>>        tDDOConstraintFindMeta FindMeta
38074>>>>>        tDDOConstraintFindMeta FindMeta
38074>>>>>        Get DDOConstraintFindMeta (GE) iOrder to FindMeta
38075>>>>>        Function_Return FindMeta.bPostRelate
38076>>>>>    End_Function
38077>>>>>    
38077>>>>>    // returns true if this table supports SQL filter interface
38077>>>>>    Function SupportsSQLFilters Returns Boolean
38079>>>>>        Boolean bSupports
38079>>>>>        Handle hoSQLHelper
38079>>>>>        Get phoSQLHelper to hoSQLHelper
38080>>>>>        Get SupportsSQLFilters of hoSQLHelper to bSupports
38081>>>>>        Function_Return bSupports
38082>>>>>    End_Function
38083>>>>>    
38083>>>>>    // SQL Helper functions that return SQL Filters strings that can be used in a where clause
38083>>>>>    
38083>>>>>    // Creates an SQL Like Filter for this field and search target
38083>>>>>    Function SQLStrLike Integer iField String sSearch Returns String
38085>>>>>        String sFilter
38085>>>>>        Handle hoSQLHelper
38085>>>>>        Get phoSQLHelper to hoSQLHelper
38086>>>>>        Get SQLStrLike of hoSQLHelper iField sSearch to sFilter
38087>>>>>        Function_Return sFilter
38088>>>>>    End_Function
38089>>>>>    
38089>>>>>    // Appends two Filters with an AND clause. Both or either can be empty
38089>>>>>    Function SQLStrAppend String sOrigFilter String sFilter Returns String
38091>>>>>        Handle hoSQLHelper
38091>>>>>        Get phoSQLHelper to hoSQLHelper
38092>>>>>        Get SQLStrAppend of hoSQLHelper sOrigFilter sFilter to sFilter
38093>>>>>        Function_Return sFilter
38094>>>>>    End_Function
38095>>>>>    
38095>>>>>    // Appends two Filters with an AND clause. Both or either can be empty
38095>>>>>    Function SQLStrAppendOr String sOrigFilter String sFilter Returns String
38097>>>>>        Handle hoSQLHelper
38097>>>>>        Get phoSQLHelper to hoSQLHelper
38098>>>>>        Get SQLStrAppendOr of hoSQLHelper sOrigFilter sFilter to sFilter
38099>>>>>        Function_Return sFilter
38100>>>>>    End_Function
38101>>>>>
38101>>>>>    // returns the name of the File and Field suitable for an SQL where statement
38101>>>>>    Function SQLStrFileFieldName Integer iField Returns String
38103>>>>>        String sName
38103>>>>>        Handle hoSQLHelper
38103>>>>>        Get phoSQLHelper to hoSQLHelper
38104>>>>>        Get SQLStrFileFieldName of hoSQLHelper iField to sName
38105>>>>>        Function_Return sName
38106>>>>>    End_Function
38107>>>>>
38107>>>>>    // returns the name of the Field suitable for an SQL where statement
38107>>>>>    Function SQLStrFieldName Integer iField Returns String
38109>>>>>        String sName
38109>>>>>        Handle hoSQLHelper
38109>>>>>        Get phoSQLHelper to hoSQLHelper
38110>>>>>        Get SQLStrFieldName of hoSQLHelper iField to sName
38111>>>>>        Function_Return sName
38112>>>>>    End_Function
38113>>>>>
38113>>>>>    // returns the name of the Schema and File and Field suitable for an SQL where statement
38113>>>>>    Function SQLStrSchemaFileFieldName Integer iField Returns String
38115>>>>>        String sName
38115>>>>>        Handle hoSQLHelper
38115>>>>>        Get phoSQLHelper to hoSQLHelper
38116>>>>>        Get SQLStrSchemaFileFieldName of hoSQLHelper iField to sName
38117>>>>>        Function_Return sName
38118>>>>>    End_Function
38119>>>>>    
38119>>>>>    //  returns the name of a file suitable for a SQL statement
38119>>>>>    Function SQLStrFileName Integer iField Returns String
38121>>>>>        String sName
38121>>>>>        Handle hoSQLHelper
38121>>>>>        Get phoSQLHelper to hoSQLHelper
38122>>>>>        Get SQLStrFileName of hoSQLHelper iField to sName
38123>>>>>        Function_Return sName
38124>>>>>    End_Function
38125>>>>>    
38125>>>>>    // creates escaped SQL string by replacing single quote with two single quotes
38125>>>>>    Function SQLEscapedStr String sSQL Returns String
38127>>>>>        Handle hoSQLHelper
38127>>>>>        Get phoSQLHelper to hoSQLHelper
38128>>>>>        Get SQLEscapedStr of hoSQLHelper sSQL to sSQL
38129>>>>>        Function_Return sSQL
38130>>>>>    End_Function
38131>>>>>    
38131>>>>>    // Returns:
38131>>>>>    //       The record id string based on piPrimaryIndex.
38131>>>>>    Function PrimaryRecordId Returns String
38133>>>>>        Integer iIndex iFile iSegments iSegment iField
38133>>>>>        String sVal sId
38133>>>>>        
38133>>>>>        Get Main_File to iFile
38134>>>>>        Get piPrimaryIndex to iIndex
38135>>>>>        
38135>>>>>        If (iIndex < 0) Begin
38137>>>>>            Get_Attribute DF_FILE_PRIMARY_INDEX of iFile to iIndex
38140>>>>>        End
38140>>>>>>
38140>>>>>        
38140>>>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of iFile iIndex to iSegments
38143>>>>>        For iSegment from 1 to iSegments
38149>>>>>>
38149>>>>>            Get_Attribute DF_INDEX_SEGMENT_FIELD of iFile iIndex iSegment to iField
38152>>>>>            
38152>>>>>            Get_Field_Value iFile iField to sVal
38155>>>>>            Move (Trim(sVal)) to sVal
38156>>>>>            
38156>>>>>            //  Encode join sign for multi segment indexes
38156>>>>>            If (iSegments > 1) Begin
38158>>>>>                Move (Replaces("_", sVal, "~5F~")) to sVal
38159>>>>>            End
38159>>>>>>
38159>>>>>            
38159>>>>>            If (iSegment = 1) Begin
38161>>>>>                Move sVal to sId
38162>>>>>            End
38162>>>>>>
38162>>>>>            Else Begin
38163>>>>>                Move (sId + "_" + sVal) to sId
38164>>>>>            End
38164>>>>>>
38164>>>>>            
38164>>>>>        Loop
38165>>>>>>
38165>>>>>        
38165>>>>>        Function_Return sId
38166>>>>>    End_Function
38167>>>>>    
38167>>>>>    
38167>>>>>    // Finds a record on the global buffer based on the record id.
38167>>>>>    //
38167>>>>>    // Params:
38167>>>>>    //       sRecordId   Record id generated by PrimaryRecordId.
38167>>>>>    Function FindByPrimaryRecordId String sRecordId Returns Boolean
38169>>>>>        Integer iIndex iFile iSegments iSegment iField
38169>>>>>        String[] aValues
38170>>>>>        String sVal
38170>>>>>        Boolean bTrapped
38170>>>>>        
38170>>>>>        Get Main_File to iFile
38171>>>>>        Get piPrimaryIndex to iIndex
38172>>>>>        
38172>>>>>        If (iIndex < 0) Begin
38174>>>>>            Get_Attribute DF_FILE_PRIMARY_INDEX of iFile to iIndex
38177>>>>>        End
38177>>>>>>
38177>>>>>        
38177>>>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of iFile iIndex to iSegments
38180>>>>>        
38180>>>>>        If (iSegments > 1) Begin
38182>>>>>            Move (StrSplitToArray(sRecordId, "_")) to aValues
38183>>>>>        End
38183>>>>>>
38183>>>>>        Else Begin
38184>>>>>            Move sRecordId to aValues[0]
38185>>>>>        End
38185>>>>>>
38185>>>>>        
38185>>>>>        If (iSegments = SizeOfArray(aValues)) Begin
38187>>>>>            Clear iFile
38188>>>>>            
38188>>>>>            Send Ignore_Error of Error_Object_Id 56
38189>>>>>            Send Ignore_Error of Error_Object_Id 11
38190>>>>>            
38190>>>>>            For iSegment from 1 to iSegments
38196>>>>>>
38196>>>>>                Get_Attribute DF_INDEX_SEGMENT_FIELD of iFile iIndex iSegment to iField
38199>>>>>                
38199>>>>>                Move aValues[iSegment - 1] to sVal
38200>>>>>                If (iSegments > 1) Begin
38202>>>>>                    Move (Replaces("~5F~", sVal, "_")) to sVal
38203>>>>>                End
38203>>>>>>
38203>>>>>                
38203>>>>>                Set_Field_Value iFile iField to sVal
38206>>>>>            Loop
38207>>>>>>
38207>>>>>            Send Trap_Error of Error_Object_Id 56
38208>>>>>            Send Trap_Error of Error_Object_Id 11
38209>>>>>            
38209>>>>>            Vfind iFile iIndex EQ
38211>>>>>            
38211>>>>>            Function_Return (Found)
38212>>>>>        End
38212>>>>>>
38212>>>>>        
38212>>>>>        Function_Return False
38213>>>>>    End_Function
38214>>>>>    
38214>>>>>    // Converts a RecordId to a RowId by finding it on the global buffer.
38214>>>>>    //
38214>>>>>    // Params:
38214>>>>>    //       sRecordId   Record id based on piPrimaryIndex.
38214>>>>>    //       rRowId      (ByRef) Will be filled with the rowid.
38214>>>>>    // Returns:
38214>>>>>    //       True if the record id was valid.
38214>>>>>    Function RecordIdToRowId String sRecordId RowID ByRef rRowId Returns Boolean
38216>>>>>        Boolean bFound
38216>>>>>        
38216>>>>>        Get FindByPrimaryRecordId sRecordId to bFound
38217>>>>>        If (bFound) Begin
38219>>>>>            Move (GetRowID(Main_File(Self))) to rRowId
38220>>>>>        End
38220>>>>>>
38220>>>>>        Else Begin
38221>>>>>            Move (NullRowID()) to rRowId
38222>>>>>        End
38222>>>>>>
38222>>>>>        
38222>>>>>        Function_Return bFound
38223>>>>>    End_Function
38224>>>>>    
38224>>>>>    // Converts a RowId into a record ID. Note that it performs a find on the global buffer.
38224>>>>>    //
38224>>>>>    // Params:
38224>>>>>    //       riRowId     RowID.
38224>>>>>    // Returns:
38224>>>>>    //       Record id based on piPrimaryIndex.
38224>>>>>    Function RowIdToRecordId RowID riRowId Returns String
38226>>>>>        Boolean bFound
38226>>>>>        String sRecId
38226>>>>>        
38226>>>>>        If (not(IsNullRowID(riRowId))) Begin
38228>>>>>            Move (FindByRowID(Main_File(Self), riRowId)) to bFound
38229>>>>>            
38229>>>>>            If (bFound) Begin
38231>>>>>                Get PrimaryRecordId to sRecId
38232>>>>>            End
38232>>>>>>
38232>>>>>        End
38232>>>>>>
38232>>>>>        
38232>>>>>        Function_Return sRecId
38233>>>>>    End_Function
38234>>>>>End_Class
38235>>>>>
38235>>>>>// This message will be send as a notification message from an
38235>>>>>// Extended_Data_Set whenever a fieldvalue has been changed.
38235>>>>>// It has been defined FOR cUIObject or Desktop  here so that attached
38235>>>>>// DEO which do not know anything about Extended_Data_Sets don't get
38235>>>>>// frustrated.
38235>>>>>// All focusable objects and DEOs must understand this. This should be
38235>>>>>// changed at some point in the future.
38235>>>>>Function Extended_DEO_State for cUIObject Returns Integer
38237>>>>>End_Function
38238>>>>>
38238>>>>>
38238>>>>>// this command is now obsolete. use Set Field_auto_increment
38238>>>>>
38238>>>Use Dfcursor.pkg
38238>>>Use DUFStatusPanel.pkg
Including file: DUFStatusPanel.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\DUFStatusPanel.pkg)
38238>>>>>// StatPnl.pkg - creates the standard status_panel object.
38238>>>>>//
38238>>>>>//
38238>>>>>// This is the default Status Panel object used by any of the Visual DataFlex classes that
38238>>>>>// invoke the standard status panel. The standard has always been that the package name
38238>>>>>// is StatPnl.pkg and the name of the object is Status_Panel. As of 12.0, there are major
38238>>>>>// changes in the way the status panel operates The Sentinel based external status panel used in
38238>>>>>// prior revisions has been replace with status panel that is part of the application.
38238>>>>>// This should work much better and faster than the old sentinel based solution.
38238>>>>>// While the way this operates has changed, the interface has not and therefore this should work
38238>>>>>// with most applications.
38238>>>>>//
38238>>>>>// As of 12.0, we have added a global handle that contains the object ID of this status panel.
38238>>>>>// This variable ghoStatusPanel can be used in place of the object name Status_Panel. This provides
38238>>>>>// a cleaner more robust interface.
38238>>>>>//
38238>>>>>//
38238>>>>>// Compatibility Note:
38238>>>>>//
38238>>>>>// When used in the standard way, this change will require no changes. A developer will only need to
38238>>>>>// change their code if they've modified the sentinel program, which was a difficult thing to do.
38238>>>>>//
38238>>>>>// If for some reason you application will not work using this as a replacement for the old status
38238>>>>>// panel, you've probably done something special with the old status-panel. If you don't want to
38238>>>>>// figure out how to use the new one and you want to continue using the old one you are going to need
38238>>>>>// to add some code to include the old status panel in your application. Add the following to your project (your src).
38238>>>>>//
38238>>>>>// Use StatPnl.pkg    // Make sure you load the new status panel object first. this is not optional!
38238>>>>>// Use OldStatPnl.pkg // load the old status panel. Status_Panel is now this old object
38238>>>>>//
38238>>>>>// If you do this, you will lose access to the new status-panel via Status_Panel. However, you
38238>>>>>// can still access the new object via the ghoStatusPanel handle.
38238>>>>>//
38238>>>>>//
38238>>>>>// Creating your own Status Panel objects
38238>>>>>//
38238>>>>>// If a developer wishes to create a custom panel, they should use this package as their template.
38238>>>>>// This panel can be visually modeled and changed any way you wish. Just save your new custom panel
38238>>>>>// with a different file and object name and direct your status panel request to the new object.
38238>>>>>//
38238>>>>>// If the new panel changes the interface and updates objects that are not currently defined, you
38238>>>>>// want to make sure you send the message ProcessEvents after you've updated the object. This allows
38238>>>>>// the object to paint when inside of a tight loop. For example, if you wanted to add a progress
38238>>>>>// bar (cProgressBar) you would want to Send ProcessEvents after you update the progress bar.
38238>>>>>// e.g.
38238>>>>>//       Procedure UpdateStatusBar
38238>>>>>//           Send DoAdvance of oProgressBar
38238>>>>>//           Send ProcessEvents
38238>>>>>//       End_Procedure
38238>>>>>//
38238>>>>>// of course, if you use the standard interfaces in status bar and your forward send these
38238>>>>>// messages this will be done for you.
38238>>>>>//
38238>>>>>// the standard Interface for status panels are:
38238>>>>>//
38238>>>>>// Send Initialize_StatusPanel - initializes values for caption, title & message
38238>>>>>// Send Start_StatusPanel      - start the status panel
38238>>>>>// Send Stop_StatusPanel       - stop the status panel
38238>>>>>// Send Update_StatusPanel     - update the status panel's action area
38238>>>>>// Get  Check_StatusPanel      - check for cancel (if cancel or pbCancel is set, close the panel)
38238>>>>>//
38238>>>>>// Get/Set Caption_Text - updates the caption bar
38238>>>>>// Get/Set Title_Text   - updates the title area
38238>>>>>// Get/Set Message_Text - updates the Message area
38238>>>>>// Get/Set Action_Text  - updates the action area
38238>>>>>// Get/Set Button_Text  - updates the button area
38238>>>>>//
38238>>>>>// Get/Set Allow_cancel_state - determines if panel can be canceled
38238>>>>>// Send EnableCancelButton - code you should provide to enable/disable cancel button
38238>>>>>//
38238>>>>>// ghoStatusPanel - global handle that points to the standard status panel.
38238>>>>>Use cProcessStatusPanel.pkg
38238>>>>>Use cCJSkinFramework.pkg
Including file: cCJSkinFramework.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCJSkinFramework.pkg)
38238>>>>>>>Use windows.pkg
38238>>>>>>>Use cCJComSkinFramework.pkg
Including file: cCJComSkinFramework.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCJComSkinFramework.pkg)
38238>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.SkinFramework.Unicode.x64.v20.0.0.ocx
38238>>>>>>>>>Use FlexCom20.pkg
38238>>>>>>>>>
38238>>>>>>>>>// Changes to Imported package
38238>>>>>>>>>//     OLEXTPxx to XTPxx
38238>>>>>>>>>//     OLExtpxx to xtpxx
38238>>>>>>>>>//     OLESkinFramework to SkinFramework
38238>>>>>>>>>//     OLESTDxxx and OLEXPxxxx to STD/XP
38238>>>>>>>>>//     cCom classes to cCJ
38238>>>>>>>>>//     cCJAutomationObject back to cComAutomationObject
38238>>>>>>>>>//     cCJActiveXControl back to cComActiveXControl
38238>>>>>>>>>//     cCJSkinFramework to cCJComSkinFramework
38238>>>>>>>>>//     Use statements as noted below (classes moved to these files)
38238>>>>>>>>>//     Set classlibrary of all cComAutomation objects to Windows (for class doc)
38238>>>>>>>>>
38238>>>>>>>>>// These have been extracted from this class and moved into seperate packages
38238>>>>>>>>>// because other Codejock classes use these.
38238>>>>>>>>>Use cCJColorManager.pkg     // cCJColorManager
38238>>>>>>>>>
38238>>>>>>>>>
38238>>>>>>>>>Define SkinFrameworkApplyOptions for Integer
38238>>>>>>>>>    Define xtpSkinApplyMetrics for 1
38238>>>>>>>>>    Define xtpSkinApplyFrame for 2
38238>>>>>>>>>    Define xtpSkinApplyColors for 4
38238>>>>>>>>>    Define xtpSkinApplyMenus for 8
38238>>>>>>>>>
38238>>>>>>>>>// CLSID: {C0DE2000-28D7-4F2C-87A7-7266367B4655}
38238>>>>>>>>>// Dispatch interface for SkinFramework Control
38238>>>>>>>>>Class cCJ_DSkinFramework is a Mixin
38239>>>>>>>>>
38239>>>>>>>>>    Function ComApplyOptions Returns SkinFrameworkApplyOptions
38241>>>>>>>>>        SkinFrameworkApplyOptions retVal
38241>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
38242>>>>>>>>>        Function_Return retVal
38243>>>>>>>>>    End_Function
38244>>>>>>>>>
38244>>>>>>>>>    Procedure Set ComApplyOptions SkinFrameworkApplyOptions value
38246>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
38247>>>>>>>>>    End_Procedure
38248>>>>>>>>>
38248>>>>>>>>>    Function ComAutoApplyNewWindows Returns Boolean
38250>>>>>>>>>        Boolean retVal
38250>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
38251>>>>>>>>>        Function_Return retVal
38252>>>>>>>>>    End_Function
38253>>>>>>>>>
38253>>>>>>>>>    Procedure Set ComAutoApplyNewWindows Boolean value
38255>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
38256>>>>>>>>>    End_Procedure
38257>>>>>>>>>
38257>>>>>>>>>    Function ComAutoApplyNewThreads Returns Boolean
38259>>>>>>>>>        Boolean retVal
38259>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
38260>>>>>>>>>        Function_Return retVal
38261>>>>>>>>>    End_Function
38262>>>>>>>>>
38262>>>>>>>>>    Procedure Set ComAutoApplyNewThreads Boolean value
38264>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
38265>>>>>>>>>    End_Procedure
38266>>>>>>>>>
38266>>>>>>>>>    Function ComLoadSkin String llResourcePath String llIniFileName Returns Boolean
38268>>>>>>>>>        Handle hDispatchDriver
38268>>>>>>>>>        Boolean retVal
38268>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38269>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38270>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llResourcePath
38271>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llIniFileName
38272>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
38273>>>>>>>>>        Function_Return retVal
38274>>>>>>>>>    End_Function
38275>>>>>>>>>
38275>>>>>>>>>    Procedure ComApplyWindow OLE_HANDLE llhWnd
38277>>>>>>>>>        Handle hDispatchDriver
38277>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38278>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38279>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
38280>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
38281>>>>>>>>>    End_Procedure
38282>>>>>>>>>
38282>>>>>>>>>    Procedure ComEnableThemeDialogTexture OLE_HANDLE llhWnd Integer llFlags
38284>>>>>>>>>        Handle hDispatchDriver
38284>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38285>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38286>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
38287>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llFlags
38288>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
38289>>>>>>>>>    End_Procedure
38290>>>>>>>>>
38290>>>>>>>>>    Procedure ComRemoveWindow OLE_HANDLE llhWnd
38292>>>>>>>>>        Handle hDispatchDriver
38292>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38293>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38294>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
38295>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
38296>>>>>>>>>    End_Procedure
38297>>>>>>>>>
38297>>>>>>>>>    Procedure ComRemoveAllWindows
38299>>>>>>>>>        Handle hDispatchDriver
38299>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38300>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
38301>>>>>>>>>    End_Procedure
38302>>>>>>>>>
38302>>>>>>>>>    Procedure ComAddWindowClass String llClassName String llBaseClassName
38304>>>>>>>>>        Handle hDispatchDriver
38304>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38305>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38306>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
38307>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llBaseClassName
38308>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
38309>>>>>>>>>    End_Procedure
38310>>>>>>>>>
38310>>>>>>>>>    Procedure ComRemoveWindowClass String llClassName
38312>>>>>>>>>        Handle hDispatchDriver
38312>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38313>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38314>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
38315>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
38316>>>>>>>>>    End_Procedure
38317>>>>>>>>>
38317>>>>>>>>>    Function ComEnumerateSkinDirectory String llPath Boolean llRecursive Returns Variant
38319>>>>>>>>>        Handle hDispatchDriver
38319>>>>>>>>>        Variant retVal
38319>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38320>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38321>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
38322>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRecursive
38323>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
38324>>>>>>>>>        Function_Return retVal
38325>>>>>>>>>    End_Function
38326>>>>>>>>>
38326>>>>>>>>>    Function ComEnumerateSkinFile String llPath Returns Variant
38328>>>>>>>>>        Handle hDispatchDriver
38328>>>>>>>>>        Variant retVal
38328>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38329>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38330>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
38331>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
38332>>>>>>>>>        Function_Return retVal
38333>>>>>>>>>    End_Function
38334>>>>>>>>>
38334>>>>>>>>>    Function ComGetColor XTPColorManagerColor llIndex Returns OLE_COLOR
38336>>>>>>>>>        Handle hDispatchDriver
38336>>>>>>>>>        OLE_COLOR retVal
38336>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38337>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38338>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
38339>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_I4 to retVal
38340>>>>>>>>>        Function_Return retVal
38341>>>>>>>>>    End_Function
38342>>>>>>>>>
38342>>>>>>>>>    Procedure ComExcludeModule String llModuleName
38344>>>>>>>>>        Handle hDispatchDriver
38344>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38345>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38346>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llModuleName
38347>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
38348>>>>>>>>>    End_Procedure
38349>>>>>>>>>
38349>>>>>>>>>    Function ComCreateSchema String llResourcePath String llIniFileName Returns Variant
38351>>>>>>>>>        Handle hDispatchDriver
38351>>>>>>>>>        Variant retVal
38351>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38352>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38353>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llResourcePath
38354>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llIniFileName
38355>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
38356>>>>>>>>>        Function_Return retVal
38357>>>>>>>>>    End_Function
38358>>>>>>>>>
38358>>>>>>>>>    Procedure ComSetWindowTheme OLE_HANDLE llhWnd Variant llSchema
38360>>>>>>>>>        Handle hDispatchDriver
38360>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38361>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38362>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
38363>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llSchema
38364>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
38365>>>>>>>>>    End_Procedure
38366>>>>>>>>>
38366>>>>>>>>>    Procedure ComAboutBox
38368>>>>>>>>>        Handle hDispatchDriver
38368>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38369>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
38370>>>>>>>>>    End_Procedure
38371>>>>>>>>>End_Class
38372>>>>>>>>>
38372>>>>>>>>>// CLSID: {C0DE2000-4463-4030-B324-AC6A8075FEC8}
38372>>>>>>>>>// Event interface for SkinFramework Control
38372>>>>>>>>>Class cCJ_DSkinFrameworkEvents is a Mixin
38373>>>>>>>>>
38373>>>>>>>>>    Procedure RegisterComEvents
38375>>>>>>>>>    End_Procedure
38376>>>>>>>>>End_Class
38377>>>>>>>>>
38377>>>>>>>>>// CoClass
38377>>>>>>>>>// ProgID: Codejock.SkinFramework.20.0.0
38377>>>>>>>>>// CLSID: {C0DE2000-2217-42EE-B1B0-82C890431F17}
38377>>>>>>>>>// SkinFramework Control
38377>>>>>>>>>Class cCJComSkinFramework is a cComActiveXControl
38378>>>>>>>>>    Import_Class_Protocol cCJ_DSkinFramework
38379>>>>>>>>>    Import_Class_Protocol cCJ_DSkinFrameworkEvents
38380>>>>>>>>>
38380>>>>>>>>>    Procedure Construct_Object
38382>>>>>>>>>        Forward Send Construct_Object
38384>>>>>>>>>        Set psProgID to "{C0DE2000-2217-42EE-B1B0-82C890431F17}"
38385>>>>>>>>>        Set psEventId to "{C0DE2000-4463-4030-B324-AC6A8075FEC8}"
38386>>>>>>>>>        Set psLicenseKey to ("Skin Framework Control Copyright (c) 1998-2021 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.SkinFramework.ActiveX.v20.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: GGE-OLD-QQR-EJS")
38387>>>>>>>>>        Set peAutoCreate to acAutoCreate
38388>>>>>>>>>    End_Procedure
38389>>>>>>>>>End_Class
38390>>>>>>>>>
38390>>>>>>>>>// CLSID: {C0DE2000-CA9A-4AA9-8601-0AB7F551AA3D}
38390>>>>>>>>>// SkinFramework Global Settings
38390>>>>>>>>>Class cCJISkinFrameworkGlobalSettings is a Mixin
38391>>>>>>>>>
38391>>>>>>>>>    Function ComLicense Returns String
38393>>>>>>>>>        String retVal
38393>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to retVal
38394>>>>>>>>>        Function_Return retVal
38395>>>>>>>>>    End_Function
38396>>>>>>>>>
38396>>>>>>>>>    Procedure Set ComLicense String value
38398>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to value
38399>>>>>>>>>    End_Procedure
38400>>>>>>>>>
38400>>>>>>>>>    Function ComTitle Returns String
38402>>>>>>>>>        String retVal
38402>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to retVal
38403>>>>>>>>>        Function_Return retVal
38404>>>>>>>>>    End_Function
38405>>>>>>>>>
38405>>>>>>>>>    Procedure Set ComTitle String value
38407>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to value
38408>>>>>>>>>    End_Procedure
38409>>>>>>>>>
38409>>>>>>>>>    // Set this value to True to force using legacy SkinFramework core that has been in use up to version 19
38409>>>>>>>>>    Function ComUseLegacyCore Returns Boolean
38411>>>>>>>>>        Boolean retVal
38411>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 110 OLE_VT_BOOL to retVal
38412>>>>>>>>>        Function_Return retVal
38413>>>>>>>>>    End_Function
38414>>>>>>>>>
38414>>>>>>>>>    // Set this value to True to force using legacy SkinFramework core that has been in use up to version 19
38414>>>>>>>>>    Procedure Set ComUseLegacyCore Boolean value
38416>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 110 OLE_VT_BOOL to value
38417>>>>>>>>>    End_Procedure
38418>>>>>>>>>
38418>>>>>>>>>    Function ComVersion Returns String
38420>>>>>>>>>        Handle hDispatchDriver
38420>>>>>>>>>        String retVal
38420>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38421>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_BSTR to retVal
38422>>>>>>>>>        Function_Return retVal
38423>>>>>>>>>    End_Function
38424>>>>>>>>>
38424>>>>>>>>>    Function ComUnicode Returns Boolean
38426>>>>>>>>>        Handle hDispatchDriver
38426>>>>>>>>>        Boolean retVal
38426>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38427>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_BOOL to retVal
38428>>>>>>>>>        Function_Return retVal
38429>>>>>>>>>    End_Function
38430>>>>>>>>>
38430>>>>>>>>>    Function ComOcxPath Returns String
38432>>>>>>>>>        Handle hDispatchDriver
38432>>>>>>>>>        String retVal
38432>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38433>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_BSTR to retVal
38434>>>>>>>>>        Function_Return retVal
38435>>>>>>>>>    End_Function
38436>>>>>>>>>End_Class
38437>>>>>>>>>
38437>>>>>>>>>// CoClass
38437>>>>>>>>>// ProgID: Codejock.SkinFrameworkGlobalSettings.20.0.0
38437>>>>>>>>>// CLSID: {C0DE2000-F744-4373-B38D-29CE83EF0EE5}
38437>>>>>>>>>// SkinFramework Global Settings
38437>>>>>>>>>Class cCJComSkinFrameworkGlobalSettings is a cComAutomationObject
38438>>>>>>>>>    Import_Class_Protocol cCJISkinFrameworkGlobalSettings
38439>>>>>>>>>
38439>>>>>>>>>    Procedure Construct_Object
38441>>>>>>>>>        Forward Send Construct_Object
38443>>>>>>>>>        Set psProgID to "{C0DE2000-F744-4373-B38D-29CE83EF0EE5}"
38444>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
38445>>>>>>>>>    End_Procedure
38446>>>>>>>>>End_Class
38447>>>>>>>>>
38447>>>>>>>>>// CLSID: {C0DE2000-1038-498E-A936-361F08B4C4AA}
38447>>>>>>>>>Class cCJSkinIniFile is a cComAutomationObject
38448>>>>>>>>>
38448>>>>>>>>>    Function ComColorScheme Returns String
38450>>>>>>>>>        String retVal
38450>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
38451>>>>>>>>>        Function_Return retVal
38452>>>>>>>>>    End_Function
38453>>>>>>>>>
38453>>>>>>>>>    Procedure Set ComColorScheme String value
38455>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
38456>>>>>>>>>    End_Procedure
38457>>>>>>>>>
38457>>>>>>>>>    Function ComFontSize Returns String
38459>>>>>>>>>        String retVal
38459>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
38460>>>>>>>>>        Function_Return retVal
38461>>>>>>>>>    End_Function
38462>>>>>>>>>
38462>>>>>>>>>    Procedure Set ComFontSize String value
38464>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
38465>>>>>>>>>    End_Procedure
38466>>>>>>>>>
38466>>>>>>>>>    Function ComIniFileName Returns String
38468>>>>>>>>>        String retVal
38468>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
38469>>>>>>>>>        Function_Return retVal
38470>>>>>>>>>    End_Function
38471>>>>>>>>>
38471>>>>>>>>>    Procedure Set ComIniFileName String value
38473>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
38474>>>>>>>>>    End_Procedure
38475>>>>>>>>>End_Class
38476>>>>>>>>>
38476>>>>>>>>>// CLSID: {C0DE2000-4834-499E-95B4-30E0C3F43A10}
38476>>>>>>>>>Class cCJSkinDescription is a cComAutomationObject
38477>>>>>>>>>
38477>>>>>>>>>    Function ComName Returns String
38479>>>>>>>>>        String retVal
38479>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
38480>>>>>>>>>        Function_Return retVal
38481>>>>>>>>>    End_Function
38482>>>>>>>>>
38482>>>>>>>>>    Procedure Set ComName String value
38484>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
38485>>>>>>>>>    End_Procedure
38486>>>>>>>>>
38486>>>>>>>>>    Function ComPath Returns String
38488>>>>>>>>>        String retVal
38488>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
38489>>>>>>>>>        Function_Return retVal
38490>>>>>>>>>    End_Function
38491>>>>>>>>>
38491>>>>>>>>>    Procedure Set ComPath String value
38493>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
38494>>>>>>>>>    End_Procedure
38495>>>>>>>>>
38495>>>>>>>>>    Function ComCount Returns Integer
38497>>>>>>>>>        Handle hDispatchDriver
38497>>>>>>>>>        Integer retVal
38497>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38498>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
38499>>>>>>>>>        Function_Return retVal
38500>>>>>>>>>    End_Function
38501>>>>>>>>>
38501>>>>>>>>>    Function ComIniFile Integer llIndex Returns Variant
38503>>>>>>>>>        Handle hDispatchDriver
38503>>>>>>>>>        Variant retVal
38503>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38504>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38505>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
38506>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
38507>>>>>>>>>        Function_Return retVal
38508>>>>>>>>>    End_Function
38509>>>>>>>>>
38509>>>>>>>>>    Function Com_NewEnum Returns Variant
38511>>>>>>>>>        Handle hDispatchDriver
38511>>>>>>>>>        Variant retVal
38511>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38512>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
38513>>>>>>>>>        Function_Return retVal
38514>>>>>>>>>    End_Function
38515>>>>>>>>>End_Class
38516>>>>>>>>>
38516>>>>>>>>>// CLSID: {C0DE2000-FB37-4B08-A2B9-F6F8B253D697}
38516>>>>>>>>>Class cCJSkinDescriptions is a cComAutomationObject
38517>>>>>>>>>
38517>>>>>>>>>    Function ComCount Returns Integer
38519>>>>>>>>>        Handle hDispatchDriver
38519>>>>>>>>>        Integer retVal
38519>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38520>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
38521>>>>>>>>>        Function_Return retVal
38522>>>>>>>>>    End_Function
38523>>>>>>>>>
38523>>>>>>>>>    Function ComSkin Integer llIndex Returns Variant
38525>>>>>>>>>        Handle hDispatchDriver
38525>>>>>>>>>        Variant retVal
38525>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38526>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38527>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
38528>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
38529>>>>>>>>>        Function_Return retVal
38530>>>>>>>>>    End_Function
38531>>>>>>>>>
38531>>>>>>>>>    Function Com_NewEnum Returns Variant
38533>>>>>>>>>        Handle hDispatchDriver
38533>>>>>>>>>        Variant retVal
38533>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38534>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
38535>>>>>>>>>        Function_Return retVal
38536>>>>>>>>>    End_Function
38537>>>>>>>>>End_Class
38538>>>>>>>>>
38538>>>>>>>>>// CLSID: {C0DE2000-C56F-43C0-BCF1-8193B35FE4C4}
38538>>>>>>>>>Class cCJSkinSchema is a cComAutomationObject
38539>>>>>>>>>
38539>>>>>>>>>    Function ComGetColor XTPColorManagerColor llIndex Returns OLE_COLOR
38541>>>>>>>>>        Handle hDispatchDriver
38541>>>>>>>>>        OLE_COLOR retVal
38541>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38542>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38543>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
38544>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
38545>>>>>>>>>        Function_Return retVal
38546>>>>>>>>>    End_Function
38547>>>>>>>>>End_Class
38548>>>>>>>Use cApplication.pkg
38548>>>>>>>
38548>>>>>>>Struct tSkinInformation
38548>>>>>>>    String sName     // description of the skin
38548>>>>>>>    String sSkinfile // file path. Can be relative or full
38548>>>>>>>    String sSkinIni  // section name
38548>>>>>>>End_Struct
38548>>>>>>>
38548>>>>>>>
38548>>>>>>>Class cCJSkinFramework is a cCJComSkinFramework
38549>>>>>>>    
38549>>>>>>>    Procedure Construct_Object
38551>>>>>>>        Forward Send Construct_Object
38553>>>>>>>        
38553>>>>>>>        Property String psSkinFile ""
38554>>>>>>>        Property String psSkinIni ""
38555>>>>>>>        Property Boolean pbLoadPreference False
38556>>>>>>>        
38556>>>>>>>        Set peAutoCreate to acAutoCreate
38557>>>>>>>        
38557>>>>>>>        Move Self to ghoSkinFramework
38558>>>>>>>    End_Procedure
38559>>>>>>>    
38559>>>>>>>    // return the default skin path, which is the programs directory.
38559>>>>>>>    // This requires an application object.
38559>>>>>>>    // If you want to different skin path, override this.
38559>>>>>>>    Function SkinPath Returns String
38561>>>>>>>        String sPath sPaths
38561>>>>>>>        Handle hoWorkspace
38561>>>>>>>        If ghoApplication Begin
38563>>>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
38564>>>>>>>            Get psProgramPath of hoWorkspace to sPaths
38565>>>>>>>            Get PathAtIndex of hoWorkspace sPaths 1 to sPath
38566>>>>>>>        End
38566>>>>>>>>
38566>>>>>>>        Else Begin
38567>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
38568>>>>>>>>
38568>>>>>>>        End
38568>>>>>>>>
38568>>>>>>>        Function_Return sPath
38569>>>>>>>    End_Function
38570>>>>>>>    
38570>>>>>>>    // Returns the Qualified name of psSkinFile. If the file is already qualified it just
38570>>>>>>>    // returns itself. If it is not, it uses SkinPath to get the path.
38570>>>>>>>    Function SkinQFile Returns String
38572>>>>>>>        String sFile sPath sSep
38572>>>>>>>        Boolean bQualified
38572>>>>>>>        Get psSkinFile to sFile
38573>>>>>>>        If not (IsFileNameQualified(sFile)) Begin
38575>>>>>>>            Get SkinPath to sPath
38576>>>>>>>            Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sSep
38577>>>>>>>            Move (sPath - sSep - sFile) to sFile
38578>>>>>>>        End
38578>>>>>>>>
38578>>>>>>>        Function_Return sFile
38579>>>>>>>    End_Function
38580>>>>>>>    
38580>>>>>>>    // defines the default VDF window class mapping.
38580>>>>>>>    Procedure OnAddVDFWindowClasses
38582>>>>>>>        Send ComAddWindowClass "DFlistbox"               "ListBox"
38583>>>>>>>        Send ComAddWindowClass "DFentry"                 "Edit"
38584>>>>>>>        Send ComAddWindowClass "DFtextbox"               "Edit"
38585>>>>>>>        Send ComAddWindowClass "DFRichEditCtrl"          "Edit"
38586>>>>>>>        Send ComAddWindowClass "DFcombobox"              "ComboBox"
38587>>>>>>>        Send ComAddWindowClass "DFformlist"              "Edit"
38588>>>>>>>        Send ComAddWindowClass "DFFormListHeader"        "SysHeader32"
38589>>>>>>>        Send ComAddWindowClass "DFbutton"                "Button"
38590>>>>>>>        Send ComAddWindowClass "HPromptBtn"              "Button"
38591>>>>>>>        Send ComAddWindowClass "Hspinbtn"                "msctls_updown32"
38592>>>>>>>        Send ComAddWindowClass "DFSysTabControl32"       "SysTabControl32"
38593>>>>>>>        Send ComAddWindowClass "DFMDIClient"             "MDIClient"
38594>>>>>>>        Send ComAddWindowClass "DFedit"                  "edit"
38595>>>>>>>        Send ComAddWindowClass "DFlistedit"              "edit"
38596>>>>>>>        Send ComAddWindowClass "DFscrollbar"             "scrollbar"
38597>>>>>>>        Send ComAddWindowClass "DFgroup"                 "Button"
38598>>>>>>>        Send ComAddWindowClass "DFComboGrid"             "ComboBox"
38599>>>>>>>        // External class
38599>>>>>>>        Send ComAddWindowClass "cVdfAnimation"           "SysAnimate32"
38600>>>>>>>        Send ComAddWindowClass "cVdfProgressBar"         "msctls_progress32"
38601>>>>>>>        Send ComAddWindowClass "cVdfStatusBar"           "msctls_statusbar32"
38602>>>>>>>        Send ComAddWindowClass "cVdfToolbar"             "ToolbarWindow32"
38603>>>>>>>        Send ComAddWindowClass "cObsoleteVdfProgressBar" "msctls_progress32"
38604>>>>>>>        Send ComAddWindowClass "cVdfTrackBar"            "msctls_trackbar32"
38605>>>>>>>        Send ComAddWindowClass "cObsoleteBasicStatusBar" "msctls_statusbar32"
38606>>>>>>>        Send ComAddWindowClass "cVdfTreeView"            "SysTreeView32"
38607>>>>>>>    End_Procedure
38608>>>>>>>    
38608>>>>>>>    // Used to support developer designed class mappings (e.g. COM controls)
38608>>>>>>>    Procedure OnAddCustomWindowClasses
38610>>>>>>>    End_Procedure
38611>>>>>>>    
38611>>>>>>>    // called when object is created during end_construct_object.
38611>>>>>>>    Procedure OnCreate
38613>>>>>>>        Integer iOpts
38613>>>>>>>        Boolean bUseWindowsFont
38613>>>>>>>        Forward Send OnCreate
38615>>>>>>>        
38615>>>>>>>        // if we are using the windows fonts we will disable the apply metrics which
38615>>>>>>>        // never really looked good anyway. This test only exists or legacy purposes
38615>>>>>>>        Get pbUseWindowsFont of Desktop to bUseWindowsFont
38616>>>>>>>        If bUseWindowsFont Begin
38618>>>>>>>            Get ComApplyOptions to iOpts
38619>>>>>>>            Set ComApplyOptions to (RemoveBitValue(xtpSkinApplyMetrics, iOpts))
38620>>>>>>>        End
38620>>>>>>>>
38620>>>>>>>        
38620>>>>>>>        // this works around a CJ issue where skins applied to other threads causes an exception upon close down.
38620>>>>>>>        // We saw this with our mssql driver but it could occur elsewhere. This has been reported in the CJ newsgroup
38620>>>>>>>        // and this was the suggested workaround.
38620>>>>>>>        Set ComAutoApplyNewThreads to False
38621>>>>>>>        
38621>>>>>>>        Send OnAddVDFWindowClasses
38622>>>>>>>        Send OnAddCustomWindowClasses
38623>>>>>>>        
38623>>>>>>>        // if preferences are used, it will set psSkinFile and psSkinIni
38623>>>>>>>        If (pbLoadPreference(Self)) Begin
38625>>>>>>>            Send LoadSkinPreference
38626>>>>>>>        End
38626>>>>>>>>
38626>>>>>>>        // if a skin file name exists, we apply the skin.
38626>>>>>>>        If (psSkinFile(Self)<>"") Begin
38628>>>>>>>            Send ApplySkin
38629>>>>>>>        End
38629>>>>>>>>
38629>>>>>>>    End_Procedure
38630>>>>>>>    
38630>>>>>>>    // called by framework as part of application exit.
38630>>>>>>>    Procedure Broadcast_Notify_Exit_Application
38632>>>>>>>        Send Notify_Exit_Application
38633>>>>>>>    End_Procedure
38634>>>>>>>    
38634>>>>>>>    Procedure Notify_Exit_Application
38636>>>>>>>        If (pbLoadPreference(Self)) Begin
38638>>>>>>>            Send SaveSkinPreference
38639>>>>>>>        End
38639>>>>>>>>
38639>>>>>>>    End_Procedure
38640>>>>>>>    
38640>>>>>>>    Procedure NotifyPreApplySkin
38642>>>>>>>        Broadcast Send OnPreApplySkin of Desktop True
38644>>>>>>>    End_Procedure
38645>>>>>>>    
38645>>>>>>>    Procedure NotifyPostApplySkin
38647>>>>>>>        Broadcast Send OnPostApplySkin of Desktop True
38649>>>>>>>    End_Procedure
38650>>>>>>>    
38650>>>>>>>    // returns an array of all skins in the path. If path is "", use the default path.
38650>>>>>>>    // If the default path is used, returns the file names as relative names, else use full path.
38650>>>>>>>    Function EnumerateSkins String sPath Boolean bRecursive Returns tSkinInformation[]
38652>>>>>>>        tSkinInformation[] Skins
38652>>>>>>>        tSkinInformation[] Skins
38653>>>>>>>        String sSkinName sSkinFile sDefaultPath sSep
38653>>>>>>>        Variant vSkinDescriptions vSkinDescription vSkinIniFile
38653>>>>>>>        Handle hSkinDescriptions hSkinDescription hSkinIniFile
38653>>>>>>>        Integer iSkinsCount iSkinFilesCount iNumSkins iNumSkinFiles iArrayItem
38653>>>>>>>        Integer iPos iDfltLen
38653>>>>>>>        Boolean bUseRelativePath
38653>>>>>>>        
38653>>>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sSep
38654>>>>>>>        
38654>>>>>>>        Get SkinPath to sDefaultPath
38655>>>>>>>        If (sPath="") Begin
38657>>>>>>>            Move sDefaultPath to sPath
38658>>>>>>>        End
38658>>>>>>>>
38658>>>>>>>        Move (Uppercase(sDefaultPath)) to sDefaultPath
38659>>>>>>>        Move (Length(sDefaultPath)) to iDfltLen
38660>>>>>>>        Move (sDefaultPath=Uppercase(sPath)) to bUseRelativePath
38661>>>>>>>        
38661>>>>>>>        Get ComEnumerateSkinDirectory sPath bRecursive to vSkinDescriptions
38662>>>>>>>        If (not(IsNullComObject(vSkinDescriptions))) Begin
38664>>>>>>>            
38664>>>>>>>            Get Create U_cCJSkinDescriptions to hSkinDescriptions
38665>>>>>>>            Get Create U_cCJSkinDescription to hSkinDescription
38666>>>>>>>            Get Create U_cCJSkinIniFile to hSkinIniFile
38667>>>>>>>            
38667>>>>>>>            Set pvComObject of hSkinDescriptions to vSkinDescriptions
38668>>>>>>>            Get ComCount of hSkinDescriptions to iNumSkinFiles
38669>>>>>>>            
38669>>>>>>>            For iSkinFilesCount from 0 to (iNumSkinFiles-1)
38675>>>>>>>>
38675>>>>>>>                Get ComSkin of hSkinDescriptions iSkinFilesCount to vSkinDescription
38676>>>>>>>                Set pvComObject of hSkinDescription to vSkinDescription
38677>>>>>>>                
38677>>>>>>>                Get ComCount of hSkinDescription to iNumSkins
38678>>>>>>>                
38678>>>>>>>                For iSkinsCount from 0 to (iNumSkins-1)
38684>>>>>>>>
38684>>>>>>>                    Get ComIniFile of hSkinDescription iSkinsCount to vSkinIniFile
38685>>>>>>>                    Set pvComObject of hSkinIniFile to vSkinIniFile
38686>>>>>>>                    
38686>>>>>>>                    Get ComName of hSkinDescription to Skins[iArrayItem].sName
38687>>>>>>>                    Get ComPath of hSkinDescription to sSkinFile
38688>>>>>>>                    If bUseRelativePath Begin
38690>>>>>>>                        Move (pos(sDefaultPath,uppercase(sSkinFile))) to iPos
38691>>>>>>>                        If iPos Begin
38693>>>>>>>                            Move (Remove(sSkinFile,iPos,iDfltLen)) to sSkinFile
38694>>>>>>>                            While (Left(sSkinFile,1)=sSep)
38698>>>>>>>                                Move (Remove(sSkinFile,1,1)) to sSkinFile
38699>>>>>>>                            Loop
38700>>>>>>>>
38700>>>>>>>                        End
38700>>>>>>>>
38700>>>>>>>                    End
38700>>>>>>>>
38700>>>>>>>                    Move sSkinFile to Skins[iArrayItem].sSkinfile
38701>>>>>>>                    Get ComIniFileName of hSkinIniFile to Skins[iArrayItem].sSkinIni
38702>>>>>>>                    
38702>>>>>>>                    Increment iArrayItem
38703>>>>>>>                Loop
38704>>>>>>>>
38704>>>>>>>            Loop
38705>>>>>>>>
38705>>>>>>>            
38705>>>>>>>            Send Destroy of hSkinDescriptions
38706>>>>>>>            Send Destroy of hSkinDescription
38707>>>>>>>            Send Destroy of hSkinIniFile
38708>>>>>>>            
38708>>>>>>>        End
38708>>>>>>>>
38708>>>>>>>        Function_Return Skins
38709>>>>>>>    End_Function
38710>>>>>>>    
38710>>>>>>>    // Save the skin preference. This requires an application object.
38710>>>>>>>    // Only do this if the application object allows it.
38710>>>>>>>    // This is called during startup if pbLoadPreference is True
38710>>>>>>>    // Suitable for override
38710>>>>>>>    Procedure SaveSkinPreference
38712>>>>>>>        String sSkin sIni
38712>>>>>>>        If ghoApplication Begin
38714>>>>>>>            If (pbPreserveEnvironment(ghoApplication)) Begin
38716>>>>>>>                Get psSkinFile to sSkin
38717>>>>>>>                Get psSkinIni to sIni
38718>>>>>>>                Send WriteString of ghoApplication "Preferences" "SkinFile" sSkin
38719>>>>>>>                Send WriteString of ghoApplication "Preferences" "SkinIni" sIni
38720>>>>>>>            End
38720>>>>>>>>
38720>>>>>>>        End
38720>>>>>>>>
38720>>>>>>>        Else Begin
38721>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
38722>>>>>>>>
38722>>>>>>>        End
38722>>>>>>>>
38722>>>>>>>    End_Procedure
38723>>>>>>>    
38723>>>>>>>    // Load the skin preference. This requires an application object.
38723>>>>>>>    // Only do this if the application object allows it.
38723>>>>>>>    // This is called during startup if pbLoadPreference is True
38723>>>>>>>    // Suitable for override
38723>>>>>>>    Procedure LoadSkinPreference
38725>>>>>>>        String sSkin sIni
38725>>>>>>>        Boolean bExists
38725>>>>>>>        If ghoApplication Begin
38727>>>>>>>            If (pbPreserveEnvironment(ghoApplication)) Begin
38729>>>>>>>                Get ValueExists of ghoApplication "Preferences" "SkinFile" to bExists
38730>>>>>>>                If bExists Begin
38732>>>>>>>                    Get ReadString of ghoApplication "Preferences" "SkinFile" "" to sSkin
38733>>>>>>>                    Get ReadString of ghoApplication "Preferences" "SkinIni" "" to sIni
38734>>>>>>>                    Set psSkinFile to sSkin
38735>>>>>>>                    Set psSkinIni to sIni
38736>>>>>>>                End
38736>>>>>>>>
38736>>>>>>>            End
38736>>>>>>>>
38736>>>>>>>        End
38736>>>>>>>>
38736>>>>>>>        Else Begin
38737>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
38738>>>>>>>>
38738>>>>>>>        End
38738>>>>>>>>
38738>>>>>>>    End_Procedure
38739>>>>>>>    
38739>>>>>>>    // Can be called to apply the current skin.
38739>>>>>>>    Procedure ApplySkin
38741>>>>>>>        Boolean bOk
38741>>>>>>>        String sSkin sIni
38741>>>>>>>        If (IsComObjectCreated(Self)) Begin
38743>>>>>>>            Get SkinQFile to sSkin
38744>>>>>>>            Get psSkinIni to sIni
38745>>>>>>>            
38745>>>>>>>            Send NotifyPreApplySkin
38746>>>>>>>            // when skins are used we don't want to use built in Visual Styles
38746>>>>>>>            Send EnableVisualStyles of Desktop (sSkin="")
38747>>>>>>>            Get ComLoadSkin sSkin sIni to bOK
38748>>>>>>>            If (sSkin<>"" and not(bOk)) Begin
38750>>>>>>>                // if not ok, no skin was appied. Enable visual styles
38750>>>>>>>                Send EnableVisualStyles of Desktop True
38751>>>>>>>            End
38751>>>>>>>>
38751>>>>>>>            Send NotifyPostApplySkin
38752>>>>>>>        End
38752>>>>>>>>
38752>>>>>>>    End_Procedure
38753>>>>>>>    
38753>>>>>>>    
38753>>>>>>>End_Class
38754>>>>>Use cProgressBar.pkg
Including file: cProgressBar.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cProgressBar.pkg)
38754>>>>>>>Use Windows.pkg
38754>>>>>>>Use cWinControl.pkg
Including file: cWinControl.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cWinControl.pkg)
38754>>>>>>>>>Use Windows.pkg
38754>>>>>>>>>
38754>>>>>>>>>// Key State Masks for Mouse Messages
38754>>>>>>>>>
38754>>>>>>>>>Define MK_LBUTTON  for |CI$0001
38754>>>>>>>>>Define MK_RBUTTON  for |CI$0002
38754>>>>>>>>>Define MK_SHIFT    for |CI$0004
38754>>>>>>>>>Define MK_CONTROL  for |CI$0008
38754>>>>>>>>>Define MK_MBUTTON  for |CI$0010
38754>>>>>>>>>Define MK_XBUTTON1 for |CI$0020
38754>>>>>>>>>Define MK_XBUTTON2 for |CI$0040
38754>>>>>>>>>
38754>>>>>>>>>Enum_List // Mouse Key Flags
38754>>>>>>>>>    Define mkLeft    for MK_LBUTTON
38754>>>>>>>>>    Define mkMiddle  for MK_MBUTTON
38754>>>>>>>>>    Define mkRight   for MK_RBUTTON
38754>>>>>>>>>    Define mkX1      for MK_XBUTTON1
38754>>>>>>>>>    Define mkX2      for MK_XBUTTON2
38754>>>>>>>>>    Define mkShift   for MK_SHIFT
38754>>>>>>>>>    Define mkControl for MK_CONTROL
38754>>>>>>>>>End_Enum_List
38754>>>>>>>>>
38754>>>>>>>>>Enum_List // Mouse Buttons. Used in OnMouseXXX messages
38754>>>>>>>>>    Define mbLeft
38754>>>>>>>>>    Define mbMiddle
38754>>>>>>>>>    Define mbRight
38754>>>>>>>>>    Define mbX1
38754>>>>>>>>>    Define mbX2
38754>>>>>>>>>End_Enum_List
38754>>>>>>>>>
38754>>>>>>>>>Class cWinControl is a DfBaseControl
38755>>>>>>>>>    Procedure Construct_Object
38757>>>>>>>>>        Forward Send Construct_Object
38759>>>>>>>>>        Property Integer private_pbEnabled True
38760>>>>>>>>>        Property Integer private_pbVisible True
38761>>>>>>>>>    End_Procedure
38762>>>>>>>>>    
38762>>>>>>>>>    Procedure End_Construct_Object
38764>>>>>>>>>        Forward Send End_Construct_Object
38766>>>>>>>>>        
38766>>>>>>>>>        Set External_Message WM_LBUTTONDOWN   to msg_OnWmLButtonDown
38767>>>>>>>>>        Set External_Message WM_MBUTTONDOWN   to msg_OnWmMButtonDown
38768>>>>>>>>>        Set External_Message WM_RBUTTONDOWN   to msg_OnWmRButtonDown
38769>>>>>>>>>        Set External_Message WM_LBUTTONUP     to msg_OnWmLButtonUp
38770>>>>>>>>>        Set External_Message WM_MBUTTONUP     to msg_OnWmMButtonUp
38771>>>>>>>>>        Set External_Message WM_RBUTTONUP     to msg_OnWmRButtonUp
38772>>>>>>>>>        Set External_Message WM_LBUTTONDBLCLK to msg_OnWmLButtonDblClk
38773>>>>>>>>>        Set External_Message WM_MBUTTONDBLCLK to msg_OnWmMButtonDblClk
38774>>>>>>>>>        Set External_Message WM_RBUTTONDBLCLK to msg_OnWmRButtonDblClk
38775>>>>>>>>>        Set External_Message WM_MOUSEMOVE     to msg_OnWmMouseMove
38776>>>>>>>>>    End_Procedure
38777>>>>>>>>>    
38777>>>>>>>>>    Procedure Notify Longptr wParam Longptr lParam
38779>>>>>>>>>        //Intentionally cancelled
38779>>>>>>>>>    End_Procedure
38780>>>>>>>>>    
38780>>>>>>>>>    Procedure Command Longptr wParam Longptr lParam
38782>>>>>>>>>        //Intentionally cancelled
38782>>>>>>>>>    End_Procedure
38783>>>>>>>>>    
38783>>>>>>>>>    Procedure DoRecreateWindow
38785>>>>>>>>>        // Recreates the window
38785>>>>>>>>>        If (Window_Handle(Self)) Begin
38787>>>>>>>>>            // attempt to do this without disturbing the focus tree.
38787>>>>>>>>>            Send Page_delete // prior to 8.3 this was Send Page_Object 0
38788>>>>>>>>>            Send Page 1      //                       Send Page_Object 1
38789>>>>>>>>>        End
38789>>>>>>>>>>
38789>>>>>>>>>    End_Procedure
38790>>>>>>>>>    
38790>>>>>>>>>    Procedure DoUpdateWindow
38792>>>>>>>>>        // Forces windows to update the window by bypassing WM_PAINT
38792>>>>>>>>>        Handle hWnd
38792>>>>>>>>>        
38792>>>>>>>>>        Get Window_Handle to hWnd
38793>>>>>>>>>        If hWnd ;            Move (UpdateWindow(hWnd)) to hWnd
38796>>>>>>>>>    End_Procedure
38797>>>>>>>>>    
38797>>>>>>>>>    Procedure Page Integer iState
38799>>>>>>>>>        Set Window_Style to WS_DISABLED (private_pbEnabled(Self) =False)
38800>>>>>>>>>        Set Window_Style to WS_VISIBLE (private_pbVisible(Self))
38801>>>>>>>>>        Forward Send Page iState
38803>>>>>>>>>    End_Procedure
38804>>>>>>>>>    
38804>>>>>>>>>    Procedure OnWmLButtonUp Integer wParam Integer lParam
38806>>>>>>>>>        Integer x y eButton
38806>>>>>>>>>        
38806>>>>>>>>>        Move (Hi(lParam))  to y
38807>>>>>>>>>        Move (Low(lParam)) to x
38808>>>>>>>>>        
38808>>>>>>>>>        Send OnMouseUp mbLeft x y wParam
38809>>>>>>>>>    End_Procedure
38810>>>>>>>>>    
38810>>>>>>>>>    Procedure OnWmMButtonUp Integer wParam Integer lParam
38812>>>>>>>>>        Integer x y eButton
38812>>>>>>>>>        
38812>>>>>>>>>        Move (Hi(lParam))  to y
38813>>>>>>>>>        Move (Low(lParam)) to x
38814>>>>>>>>>        
38814>>>>>>>>>        Send OnMouseUp mbMiddle x y wParam
38815>>>>>>>>>    End_Procedure
38816>>>>>>>>>    
38816>>>>>>>>>    Procedure OnWmRButtonUp Integer wParam Integer lParam
38818>>>>>>>>>        Integer x y eButton
38818>>>>>>>>>        
38818>>>>>>>>>        Move (Hi(lParam))  to y
38819>>>>>>>>>        Move (Low(lParam)) to x
38820>>>>>>>>>        
38820>>>>>>>>>        Send OnMouseUp mbRight x y wParam
38821>>>>>>>>>    End_Procedure
38822>>>>>>>>>    
38822>>>>>>>>>    Procedure OnWmLButtonDown Integer wParam Integer lParam
38824>>>>>>>>>        Integer x y eButton fKeys
38824>>>>>>>>>        
38824>>>>>>>>>        Move (Hi(lParam))  to y
38825>>>>>>>>>        Move (Low(lParam)) to x
38826>>>>>>>>>        
38826>>>>>>>>>        Send OnMouseDown mbLeft x y wParam
38827>>>>>>>>>    End_Procedure
38828>>>>>>>>>    Procedure OnWmMButtonDown Integer wParam Integer lParam
38830>>>>>>>>>        Integer x y eButton
38830>>>>>>>>>        
38830>>>>>>>>>        Move (Hi(lParam))  to y
38831>>>>>>>>>        Move (Low(lParam)) to x
38832>>>>>>>>>        
38832>>>>>>>>>        Send OnMouseDown mbMiddle x y wParam
38833>>>>>>>>>    End_Procedure
38834>>>>>>>>>    Procedure OnWmRButtonDown Integer wParam Integer lParam
38836>>>>>>>>>        Integer x y eButton
38836>>>>>>>>>        
38836>>>>>>>>>        Move (Hi(lParam))  to y
38837>>>>>>>>>        Move (Low(lParam)) to x
38838>>>>>>>>>        
38838>>>>>>>>>        Send OnMouseDown mbRight x y wParam
38839>>>>>>>>>    End_Procedure
38840>>>>>>>>>    
38840>>>>>>>>>    Procedure OnWmLButtonDblClk Integer wParam Integer lParam
38842>>>>>>>>>        Integer x y eButton
38842>>>>>>>>>        
38842>>>>>>>>>        Move (Hi(lParam))  to y
38843>>>>>>>>>        Move (Low(lParam)) to x
38844>>>>>>>>>        
38844>>>>>>>>>        Send OnMouseDoubleClick mbLeft x y wParam
38845>>>>>>>>>    End_Procedure
38846>>>>>>>>>    Procedure OnWmMButtonDblClk Integer wParam Integer lParam
38848>>>>>>>>>        Integer x y eButton
38848>>>>>>>>>        
38848>>>>>>>>>        Move (Hi(lParam))  to y
38849>>>>>>>>>        Move (Low(lParam)) to x
38850>>>>>>>>>        
38850>>>>>>>>>        Send OnMouseDoubleClick mbMiddle x y wParam
38851>>>>>>>>>    End_Procedure
38852>>>>>>>>>    Procedure OnWmRButtonDblClk Integer wParam Integer lParam
38854>>>>>>>>>        Integer x y eButton
38854>>>>>>>>>        
38854>>>>>>>>>        Move (Hi(lParam))  to y
38855>>>>>>>>>        Move (Low(lParam)) to x
38856>>>>>>>>>        
38856>>>>>>>>>        Send OnMouseDoubleClick mbRight x y wParam
38857>>>>>>>>>    End_Procedure
38858>>>>>>>>>    
38858>>>>>>>>>    Procedure OnWmMouseMove Integer wParam Integer lParam
38860>>>>>>>>>        Integer x y eButton
38860>>>>>>>>>        
38860>>>>>>>>>        Move (Hi(lParam))  to y
38861>>>>>>>>>        Move (Low(lParam)) to x
38862>>>>>>>>>        
38862>>>>>>>>>        Send OnMouseMove x y wParam
38863>>>>>>>>>    End_Procedure
38864>>>>>>>>>    
38864>>>>>>>>>    Procedure OnMouseDown Integer eButton Integer x Integer y Integer fKeys
38866>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
38866>>>>>>>>>        //String sButton
38866>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
38866>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
38866>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
38866>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
38866>>>>>>>>>        
38866>>>>>>>>>        //If (eButton = mbLeft) Move 'Left Button' To sButton
38866>>>>>>>>>        //If (eButton = mbRight) Move 'Right Button' To sButton
38866>>>>>>>>>        //Showln 'OnMouseDown ' sButton ' ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
38866>>>>>>>>>    End_Procedure
38867>>>>>>>>>    
38867>>>>>>>>>    Procedure OnMouseUp Integer eButton Integer x Integer y Integer fKeys
38869>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
38869>>>>>>>>>        //String sButton
38869>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
38869>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
38869>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
38869>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
38869>>>>>>>>>        
38869>>>>>>>>>        //If (eButton = mbLeft) Move 'Left Button' To sButton
38869>>>>>>>>>        //If (eButton = mbRight) Move 'Right Button' To sButton
38869>>>>>>>>>        //Showln 'OnMouseUp ' sButton ' ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
38869>>>>>>>>>    End_Procedure
38870>>>>>>>>>    
38870>>>>>>>>>    Procedure OnMouseDoubleClick Integer eButton Integer x Integer y Integer fKeys
38872>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
38872>>>>>>>>>        //String sButton
38872>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
38872>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
38872>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
38872>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
38872>>>>>>>>>        
38872>>>>>>>>>        //If (eButton = mbLeft) Move 'Left Button' To sButton
38872>>>>>>>>>        //If (eButton = mbRight) Move 'Right Button' To sButton
38872>>>>>>>>>        //Showln 'OnMouseDblClk ' sButton ' ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
38872>>>>>>>>>    End_Procedure
38873>>>>>>>>>    
38873>>>>>>>>>    Procedure OnMouseMove Integer x Integer y Integer fKeys
38875>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
38875>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
38875>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
38875>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
38875>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
38875>>>>>>>>>        
38875>>>>>>>>>        //Showln 'OnMouseMove ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
38875>>>>>>>>>    End_Procedure
38876>>>>>>>>>    
38876>>>>>>>>>    Procedure Set pbEnabled Boolean bEnabled
38878>>>>>>>>>        Handle hWnd
38878>>>>>>>>>        
38878>>>>>>>>>        If (bEnabled <> private_pbEnabled(Self)) Begin
38880>>>>>>>>>            Set private_pbEnabled to bEnabled
38881>>>>>>>>>            Get Window_Handle to hWnd
38882>>>>>>>>>            If hWnd ;                Move (EnableWindow(hWnd, bEnabled)) to hWnd
38885>>>>>>>>>        End
38885>>>>>>>>>>
38885>>>>>>>>>    End_Procedure
38886>>>>>>>>>    Function pbEnabled Returns Boolean
38888>>>>>>>>>        Function_Return (private_pbEnabled(Self))
38889>>>>>>>>>    End_Function
38890>>>>>>>>>    
38890>>>>>>>>>    Procedure Set pbVisible Boolean bVisible
38892>>>>>>>>>        Handle  hWnd
38892>>>>>>>>>        Integer iVoid
38892>>>>>>>>>        
38892>>>>>>>>>        If (bVisible <> private_pbVisible(Self)) Begin
38894>>>>>>>>>            Set private_pbVisible to bVisible
38895>>>>>>>>>            Get Window_Handle to hWnd
38896>>>>>>>>>            If hWnd ;                Move (ShowWindow(hWnd, If (bVisible, SW_SHOWNA, SW_HIDE))) to iVoid
38899>>>>>>>>>        End
38899>>>>>>>>>>
38899>>>>>>>>>    End_Procedure
38900>>>>>>>>>    Function pbVisible Returns Boolean
38902>>>>>>>>>        Function_Return (private_pbVisible(Self))
38903>>>>>>>>>    End_Function
38904>>>>>>>>>    
38904>>>>>>>>>End_Class
38905>>>>>>>Use CommCtrl.pkg
38905>>>>>>>
38905>>>>>>>//{ OverrideProperty=pbEnabled DesignTime=False }
38905>>>>>>>Class cProgressBar is a cWinControl
38906>>>>>>>    
38906>>>>>>>    Procedure Construct_Object
38908>>>>>>>        Forward Send Construct_Object
38910>>>>>>>        Property Integer private_piMinimum
38911>>>>>>>        Property Integer private_piMaximum   100
38912>>>>>>>        Property Integer private_piAdvanceBy 10
38913>>>>>>>        Property Integer private_piPosition
38914>>>>>>>        Property Integer private_pbVertical  False
38915>>>>>>>        Property Integer private_pbSmooth    False
38916>>>>>>>        Property Integer private_piBackColor clDefault
38917>>>>>>>        Property Integer private_piBarColor  clDefault
38918>>>>>>>        
38918>>>>>>>        Send Define_ToolTip_Support_Mixin
38919>>>>>>>        
38919>>>>>>>        Set External_Class_Name 'cVdfProgressBar' to 'msctls_progress32'
38920>>>>>>>        Set Focus_Mode to NonFocusable
38921>>>>>>>        Set Skip_State to True
38922>>>>>>>        Set pbUseFormWindowHandle to False     // Must come after Define_ToolTip_Support_Mixin
38923>>>>>>>    End_Procedure
38924>>>>>>>    
38924>>>>>>>    Import_Class_Protocol ToolTip_Support_Mixin
38925>>>>>>>    
38925>>>>>>>    Procedure Set piMinimum Integer iMin
38927>>>>>>>        Integer iMax
38927>>>>>>>        
38927>>>>>>>        Set private_piMinimum to iMin
38928>>>>>>>        Get private_piMaximum to iMax
38929>>>>>>>        Send Windows_Message PBM_SETRANGE32 iMin iMax
38930>>>>>>>    End_Procedure
38931>>>>>>>    Function piMinimum Returns Integer
38933>>>>>>>        If (Window_Handle(Self));            Function_Return (WindowsMessage(PBM_GETRANGE, 1, 0))
38936>>>>>>>        Else;            Function_Return (private_piMinimum(Self))
38938>>>>>>>    End_Function
38939>>>>>>>    
38939>>>>>>>    Procedure Set piMaximum Integer iMax
38941>>>>>>>        Integer iMin
38941>>>>>>>        
38941>>>>>>>        Set private_piMaximum to iMax
38942>>>>>>>        Get private_piMinimum to iMin
38943>>>>>>>        Send Windows_Message PBM_SETRANGE32 iMin iMax
38944>>>>>>>    End_Procedure
38945>>>>>>>    Function piMaximum Returns Integer
38947>>>>>>>        If (Window_Handle(Self));            Function_Return (WindowsMessage(PBM_GETRANGE, 0, 0))
38950>>>>>>>        Else;            Function_Return (private_piMaximum(Self))
38952>>>>>>>    End_Function
38953>>>>>>>    
38953>>>>>>>    Procedure Set piAdvanceBy Integer iAdvanceBy
38955>>>>>>>        Set private_piAdvanceBy to iAdvanceBy
38956>>>>>>>        Send Windows_Message PBM_SETSTEP iAdvanceBy 0
38957>>>>>>>    End_Procedure
38958>>>>>>>    Function piAdvanceBy Returns Integer
38960>>>>>>>        Function_Return (private_piAdvanceBy(Self))
38961>>>>>>>    End_Function
38962>>>>>>>    
38962>>>>>>>    Procedure Set piPosition Integer iPos
38964>>>>>>>        Set private_piPosition to iPos
38965>>>>>>>        Send Windows_Message PBM_SETPOS iPos 0
38966>>>>>>>    End_Procedure
38967>>>>>>>    
38967>>>>>>>    Function piPosition Returns Integer
38969>>>>>>>        If (Window_Handle(Self));            Function_Return (WindowsMessage(PBM_GETPOS, 0, 0))
38972>>>>>>>        Else;            Function_Return (private_piPosition(Self))
38974>>>>>>>    End_Function
38975>>>>>>>    
38975>>>>>>>    Procedure Set pbVertical Boolean bVertical
38977>>>>>>>        If (private_pbVertical(Self) <> bVertical) Begin
38979>>>>>>>            Set private_pbVertical to bVertical
38980>>>>>>>            Send DoRecreateWindow
38981>>>>>>>        End
38981>>>>>>>>
38981>>>>>>>    End_Procedure
38982>>>>>>>    
38982>>>>>>>    Function pbVertical Returns Boolean
38984>>>>>>>        Function_Return (private_pbVertical(Self))
38985>>>>>>>    End_Function
38986>>>>>>>    
38986>>>>>>>    Procedure Set pbSmooth Boolean bSmooth
38988>>>>>>>        If (private_pbSmooth(Self) <> bSmooth) Begin
38990>>>>>>>            Set private_pbSmooth to bSmooth
38991>>>>>>>            Send DoRecreateWindow
38992>>>>>>>        End
38992>>>>>>>>
38992>>>>>>>    End_Procedure
38993>>>>>>>    Function pbSmooth Returns Boolean
38995>>>>>>>        Function_Return (private_pbSmooth(Self))
38996>>>>>>>    End_Function
38997>>>>>>>    
38997>>>>>>>    Procedure Set piBackColor Integer rgbColor
38999>>>>>>>        Set private_piBackColor to rgbColor
39000>>>>>>>        Send Windows_Message PBM_SETBKCOLOR 0 rgbColor
39001>>>>>>>    End_Procedure
39002>>>>>>>    Function piBackColor Returns Integer
39004>>>>>>>        Function_Return (private_piBackColor(Self))
39005>>>>>>>    End_Function
39006>>>>>>>    
39006>>>>>>>    Procedure Set piBarColor Integer rgbColor
39008>>>>>>>        Set private_piBarColor to rgbColor
39009>>>>>>>        Send Windows_Message PBM_SETBARCOLOR 0 rgbColor
39010>>>>>>>    End_Procedure
39011>>>>>>>    Function piBarColor Returns Integer
39013>>>>>>>        Function_Return (private_piBarColor(Self))
39014>>>>>>>    End_Function
39015>>>>>>>    
39015>>>>>>>    Procedure DoAdvance
39017>>>>>>>        Send Windows_Message PBM_STEPIT 0 0
39018>>>>>>>    End_Procedure
39019>>>>>>>    
39019>>>>>>>    Procedure DoAdvanceBy  Integer iAdvanceBy
39021>>>>>>>        Send Windows_Message PBM_DELTAPOS iAdvanceBy 0
39022>>>>>>>    End_Procedure
39023>>>>>>>    
39023>>>>>>>    Procedure private_DoInitWindow
39025>>>>>>>        Set piBarColor  to (private_piBarColor(Self))
39026>>>>>>>        Set piBackColor to (private_piBackColor(Self))
39027>>>>>>>        Set piAdvanceBy to (private_piAdvanceBy(Self))
39028>>>>>>>        Set piMinimum   to (private_piMinimum(Self))
39029>>>>>>>        Set piMaximum   to (private_piMaximum(Self))
39030>>>>>>>        Set piPosition  to (private_piPosition(Self))
39031>>>>>>>    End_Procedure
39032>>>>>>>    
39032>>>>>>>    Procedure Page_Object Integer iState
39034>>>>>>>        Handle hWnd
39034>>>>>>>        
39034>>>>>>>        Get Window_Handle to hWnd
39035>>>>>>>        If (hWnd=0 and iState) Begin
39037>>>>>>>            Set Window_Style to PBS_VERTICAL (private_pbVertical(Self))
39038>>>>>>>            Set Window_Style to PBS_SMOOTH   (private_pbSmooth(Self))
39039>>>>>>>            Forward Send Page_Object True
39041>>>>>>>        End
39041>>>>>>>>
39041>>>>>>>        Else ;            Forward Send Page_Object iState
39044>>>>>>>        
39044>>>>>>>        // Handle tooltip support....
39044>>>>>>>        If (iState = 0) Begin
39046>>>>>>>            Send RequestDeleteToolTip
39047>>>>>>>        End
39047>>>>>>>>
39047>>>>>>>        Else Begin
39048>>>>>>>            Send RequestAddToolTip
39049>>>>>>>        End
39049>>>>>>>>
39049>>>>>>>    End_Procedure
39050>>>>>>>    
39050>>>>>>>    Procedure Page Integer iState
39052>>>>>>>        Forward Send Page iState
39054>>>>>>>        If (iState =1);            Send private_DoInitWindow
39057>>>>>>>    End_Procedure
39058>>>>>>>    
39058>>>>>>>    // Called by Page_Object. Handles tooltip creation. We use a dedicated
39058>>>>>>>    // method to perform AddToolTip because it is often the case that Page_Object
39058>>>>>>>    // is implemented in a mixin class.
39058>>>>>>>    Procedure RequestAddToolTip
39060>>>>>>>        Send AddToolTip
39061>>>>>>>    End_Procedure
39062>>>>>>>    
39062>>>>>>>    
39062>>>>>>>    // Called by Page_Object. Handles tooltip removal.
39062>>>>>>>    Procedure RequestDeleteToolTip
39064>>>>>>>        Send DeleteToolTip
39065>>>>>>>    End_Procedure
39066>>>>>>>End_Class
39067>>>>>Use Windows.pkg
39067>>>>>Use DUFLanguageConstants.inc
Including file: DUFLanguageConstants.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\DUFLanguageConstants.inc)
39067>>>>>>>// *** The Database Update Framework Include file for Languages ***
39067>>>>>>>// Language constant declarations for all classes included in "DUF - The Database Update Framework"
39067>>>>>>>// They have all been placed in this central spot to make translations to various languages more convenient.
39067>>>>>>>//
39067>>>>>>>Use LanguageText.Pkg
39067>>>>>>>
39067>>>>>>>    // *** cSQLConnectionsIniFile.pkg Class Language Constants ***
39067>>>>>>>    Define CS_DUF_DuplicateConnectionIDPre  for "Cannot register connection ID"
39067>>>>>>>    Define CS_DUF_DuplicateConnectionIDPost for "This ID already exists."
39067>>>>>>>    // *** cSQLConnectionsHandler.pkg Class Language Constants ***
39067>>>>>>>    Define CS_DUF_SetupErrorcConnection     for "Cannot login to the database server as the cConnection hasn't been setup properly. Can't continue. Program will now exit."
39067>>>>>>>    Define CS_DUF_CannotLoginToServer       for "Could not login to the database server. Can't continue. Program will now exit."
39067>>>>>>>    Define CS_DUF_ErrorText                 for "\n\nError Text:"
39067>>>>>>>    // *** cDbUpdateFunctionLibrary.pkg Class Language Constants ***
39067>>>>>>>    Define CS_DUF_ConnectError              for "SQL error. Could not connect to the SQL database manager"
39067>>>>>>>    Define CS_DUF_AttachError               for "Could not attach to the database:"
39067>>>>>>>    Define CS_DUF_DeletingIndex             for "Deleting index"
39067>>>>>>>    Define CS_DUF_CopyingData               for "Copying data"
39067>>>>>>>    Define CS_DUF_CreatingIndex             for "Creating index"
39067>>>>>>>    Define CS_DUF_LoginToDbServerFailed     for  "Login failed to the database server. The following connect string was used:\n"
39067>>>>>>>    Define CS_DUF_DoYouWantToExit           for "Do you want to stop the database update and exit?"  
39067>>>>>>>    Define CS_DUF_NoIntFilesFound           for "No .int files found! Nothing was changed."
39067>>>>>>>    // *** cDbUpdateVersion.pkg Class Language Constants ***
39067>>>>>>>    Define CS_DUF_UpdateVersion             for "Updating database"
39067>>>>>>>    Define CS_DUF_UpdateFromVersion         for "from version"
39067>>>>>>>    Define CS_DUF_UpdateToVersion           for "to version:"
39067>>>>>>>    Define CS_DUF_DbUpdateTableMissing      for "Cannot open the 'DbVersion' table that is used when updating the database! Cannot continue!"
39067>>>>>>>    // *** cDbUpdateHandler.inc Language Constants ***
39067>>>>>>>    Define CS_DUF_DatabaseInUseShort        for "There are others using the application/database. Are you sure you still want to update the database?"
39067>>>>>>>    Define CS_DUF_DatabaseNeedsUpdate       for ("The database needs to be updated." + "\n\nATTENTION! The database may not be in use while this work is performed. Make sure that nobody else is using the application before clicking 'Yes' below.\n\n" + "Start update now?")
39067>>>>>>>    Define CS_DUF_HeaderUpdateText          for "Important!"
39067>>>>>>>    Define CS_DUF_DatabaseInUseText         for "There are others using the application/database or at least one table could NOT be opened exclusively. Please close all other applications using the database and try again. The Application will now close."
39067>>>>>>>    Define CS_DUF_WorkingHeaderText         for "Working!"
39067>>>>>>>    Define CS_DUF_WorkingUpdateText         for "The database is being updated. Please wait..."
39067>>>>>>>    Define CS_DUF_DatabaseUpdatedText       for "Ready! The database was updated."
39067>>>>>>>    Define CS_DUF_DatabaseCheckedText       for "Ready! The database was checked but no updates was needed."
39067>>>>>>>    Define CS_DUF_DbUpdatedErrorText        for "One or more errors occured while the database was updated. Please check the logfile.\n\nThe program will now close."
39067>>>>>>>    Define CS_DUF_UpdateInProgressTxt       for ("System locked!\n\nThe database is being updated. Please try again later...\n\n" * "The program will now close.")
39067>>>>>>>    // *** cDbUpdateHandler.pkg Class Language Constants ***
39067>>>>>>>    Define CS_DUF_DatabaseConnStringSpec    for "The database specified in the connection string: '"
39067>>>>>>>    Define CS_DUF_DatabaseDoesntExist       for "' doesn't exist!\n\nYou need to create it with a database management software or by using the 'SqlDatabaseCreate' function, which can be used in the 'OnPreUpdate' event of the cDbUpdateHandler object.\n\nThe program will now exit."
39067>>>>>>>    // *** cDbUpdateLogFile.pkg Class Language Constants ***   
39067>>>>>>>    Define CS_DUF_LogFileNotFound           for "Could not locate the log file:\n\n"
39067>>>>>>>
39067>>>>>>>
39067>>>>>>>
39067>>>>>>>
39067>>>>>>>
39067>>>>>>>
39067>>>>>>>
39067>>>>>>>
39067>>>>>>>
39067>>>>>>>
39067>>>>>>>
39067>>>>>>>
39067>>>>>
39067>>>>>
39067>>>>>    Global_Variable Handle ghoProgressBar // will contain the ID of the embedded progress bar.
39067>>>>>
39067>>>>>    Global_Variable Handle ghoProgressBarOverall // will contain the ID of the embedded progress bar with overall results
39067>>>>>
39067>>>>>Object Status_Panel is a cProcessStatusPanel
39069>>>>>    Set Size to 152 222
39070>>>>>    Set Border_Style to Border_Dialog
39071>>>>>    Set Icon to "Default.ico"
39072>>>>>    Move Self to ghoStatusPanel // this can be used throughout the applicaton to access this object
39073>>>>>
39073>>>>>    Property Boolean Cancel_Button_Visible_State True
39075>>>>>
39075>>>>>    Procedure Activate
39078>>>>>        Integer iSizeBefore
39078>>>>>        Get GuiSize to iSizeBefore
39079>>>>>        Forward Send Activate
39081>>>>>        Set GuiSize to (Hi(iSizeBefore)) (Low(iSizeBefore))
39082>>>>>    End_Procedure
39083>>>>>
39083>>>>>    Procedure End_Construct_Object
39086>>>>>        Forward Send End_Construct_Object
39088>>>>>        Set Label of oTitleTxt      to ""
39089>>>>>        Set Label of oTableNameTxt  to ""
39090>>>>>        Set Label of oMessageTxt    to ""
39091>>>>>        Set Label of oActionTxt     to ""
39092>>>>>    End_Procedure
39093>>>>>
39093>>>>>    Object oTitleTxt is a TextBox
39095>>>>>        Set Location to 5 21
39096>>>>>        Set Size to 8 179
39097>>>>>        Set Auto_Size_State to False
39098>>>>>        Set Justification_Mode  to jMode_Center
39099>>>>>        Set Label to "This is the Title Text"
39100>>>>>    End_Object
39101>>>>>
39101>>>>>    Object oTableNameTxt is a TextBox
39103>>>>>        Set Size to 19 204
39104>>>>>        Set Location to 18 9
39105>>>>>        Set Auto_Size_State to False
39106>>>>>        Set Justification_Mode to JMode_Left
39107>>>>>        Set Label to "This is the TableName Text"
39108>>>>>    End_Object
39109>>>>>
39109>>>>>    Object oMessageTxt is a TextBox
39111>>>>>        Set Location to 39 9
39112>>>>>        Set Size to 19 204
39113>>>>>        Set Auto_Size_State to False
39114>>>>>        Set Justification_Mode to JMode_Left
39115>>>>>        Set Label to "This is the Message text"
39116>>>>>    End_Object
39117>>>>>
39117>>>>>    Object oActionTxt is a TextBox
39119>>>>>        Set Size to 16 204
39120>>>>>        Set Location to 60 9
39121>>>>>        Set Auto_Size_State to False
39122>>>>>        Set Justification_Mode to JMode_Left
39123>>>>>        Set Label to "This is the Action Text"
39124>>>>>    End_Object
39125>>>>>
39125>>>>>    Object oStopButton is a Button
39127>>>>>        Set Location to 123 82
39128>>>>>        Set Label to C_$Cancel
39129>>>>>
39129>>>>>        Procedure OnClick 
39132>>>>>            Integer iRetval
39132>>>>>            Get YesNo_Box CS_DUF_DoYouWantToExit to iRetval
39133>>>>>            If (iRetval = MBR_Yes) Begin
39135>>>>>                Send Exit_Application
39136>>>>>            End
39136>>>>>>
39136>>>>>        End_Procedure
39137>>>>>
39137>>>>>    End_Object
39138>>>>>
39138>>>>>    Object oPercentage_tb is a TextBox
39140>>>>>        Set Location to 74 196
39141>>>>>        Set Size to 10 25
39142>>>>>//        Set Label to "% Done"
39142>>>>>    End_Object
39143>>>>>
39143>>>>>    Object oCopyRight is a TextBox
39145>>>>>        Set Location to 140 21
39146>>>>>        Set Size to 9 197
39147>>>>>        Set FontPointHeight to 8
39148>>>>>        Set Auto_Size_State to False
39149>>>>>        Set Justification_Mode  to jMode_Center
39150>>>>>        Set Label to "Copyright 2001-2020 RDC Tools International"
39151>>>>>    End_Object
39152>>>>>
39152>>>>>    Object oProgressBar is a cProgressBar
39154>>>>>        Set Size to 10 179
39155>>>>>        Set Location to 83 22
39156>>>>>        Set pbVisible to True // default
39157>>>>>        Move Self to ghoProgressBar // this can be used throughout your application to access the progress bar
39158>>>>>    End_Object
39159>>>>>
39159>>>>>    Procedure Set Progress_Bar_Visible_State Boolean bVisible
39162>>>>>        Set pbVisible of ghoProgressBar to bVisible
39163>>>>>    End_Procedure
39164>>>>>
39164>>>>>    Function Progress_Bar_Visible_State Returns Boolean
39167>>>>>        Boolean bVisible
39167>>>>>        Get pbVisible of ghoProgressBar to bVisible
39168>>>>>        Function_Return (bVisible)
39169>>>>>    End_Function
39170>>>>>
39170>>>>>    Object oProgressBarOverall is a cProgressBar
39172>>>>>        Set Size to 10 179
39173>>>>>        Set Location to 107 22
39174>>>>>        Set pbVisible to True // default
39175>>>>>        Move Self to ghoProgressBarOverall // this can be used throughout your application to access the progress bar
39176>>>>>    End_Object
39177>>>>>
39177>>>>>    Object oOverallProgress_tb is a TextBox
39179>>>>>        Set Size to 10 65
39180>>>>>        Set Location to 95 24
39181>>>>>        Set Label to "Overall Progress"
39182>>>>>    End_Object
39183>>>>>
39183>>>>>    Procedure Set Progress_Bar_Overall_Visible_State Boolean bVisible
39186>>>>>        Set pbVisible of ghoProgressBarOverall to bVisible
39187>>>>>    End_Procedure
39188>>>>>
39188>>>>>    Function Progress_Bar_Overall_Visible_State Returns Boolean
39191>>>>>        Boolean bVisible
39191>>>>>        Get pbVisible of ghoProgressBarOverall to bVisible
39192>>>>>        Function_Return (bVisible)
39193>>>>>    End_Function
39194>>>>>
39194>>>>>    // These messages bind the standard cProcessStatusPanel interface to the actual
39194>>>>>    // objects defined within this instance of the status panel.
39194>>>>>
39194>>>>>    // note: all of the messages that change text should be forwarded
39194>>>>>    // as the forwarded messages allows the panel to paint when in a tight loop
39194>>>>>
39194>>>>>    Procedure Set Message_Text String sText
39197>>>>>        Set Label of oMessageTxt to sText
39198>>>>>        Forward Set Message_Text to sText
39200>>>>>    End_Procedure
39201>>>>>
39201>>>>>    Function Message_Text Returns String
39204>>>>>        Function_Return (Label(oMessageTxt))
39205>>>>>    End_Function
39206>>>>>
39206>>>>>    Procedure Set Action_Text String sText
39209>>>>>        Set Label of oActionTxt to sText
39210>>>>>        Forward Set Action_Text to sText
39212>>>>>    End_Procedure
39213>>>>>
39213>>>>>    Function Action_Text Returns String
39216>>>>>        Function_Return (Label(oActionTxt))
39217>>>>>    End_Function
39218>>>>>
39218>>>>>    Procedure Set Button_Text String sText
39221>>>>>        Set Label of oStopButton to sText
39222>>>>>        Forward Set Button_Text to sText
39224>>>>>    End_Procedure
39225>>>>>
39225>>>>>    Function Button_Text Returns String
39228>>>>>        Function_Return (Label(oStopButton))
39229>>>>>    End_Function
39230>>>>>
39230>>>>>    Procedure Set Title_Text String sText
39233>>>>>        Set Label of oTitleTxt to sText
39234>>>>>        Forward Set Title_Text to sText
39236>>>>>    End_Procedure
39237>>>>>
39237>>>>>    Function Title_Text Returns String
39240>>>>>        Function_Return (Label(oTitleTxt))
39241>>>>>    End_Function
39242>>>>>
39242>>>>>    Procedure Set TableName_Text String sText
39245>>>>>        Set Label of oTableNameTxt to sText
39246>>>>>    End_Procedure
39247>>>>>
39247>>>>>    Function TableName_Text Returns String
39250>>>>>        Function_Return (Label(oTableNameTxt))
39251>>>>>    End_Function
39252>>>>>
39252>>>>>    Procedure Set License_Text String sText
39255>>>>>//        Set Label of oLicense_txt to sText
39255>>>>>    End_Procedure
39256>>>>>
39256>>>>>    // gets called when status panel is activated passing whether a button
39256>>>>>    // should appear
39256>>>>>    Procedure EnableCancelButton Boolean bEnable
39259>>>>>        Boolean bVisible
39259>>>>>        Get Cancel_Button_Visible_State to bVisible
39260>>>>>        If (bEnable = False) Begin
39262>>>>>            Set Visible_State of oStopButton to bVisible
39263>>>>>        End
39263>>>>>>
39263>>>>>        Set Enabled_State of oStopButton to bEnable
39264>>>>>    End_Procedure
39265>>>>>
39265>>>>>    Procedure Reset_StatusPanel
39268>>>>>        Set Allow_Cancel_State of ghoStatusPanel to True
39269>>>>>        Set Cancel_Button_Visible_State of ghoStatusPanel to True
39270>>>>>        Set Progress_Bar_Visible_State  of ghoStatusPanel to True
39271>>>>>        Set Progress_Bar_Overall_Visible_State of ghoProgressBarOverall to False
39272>>>>>    End_Procedure
39273>>>>>
39273>>>>>//    Object oProgressBar is a cProgressBar
39273>>>>>//        Move Self to ghoProgressBar
39273>>>>>//        Set Location to 1 25
39273>>>>>//        Set Size to 9 173
39273>>>>>//        Set piMinimum        to 0
39273>>>>>//        Set piMaximum        to 2000
39273>>>>>//        Set piAdvanceBy      to 100
39273>>>>>//        Set pbSmooth to True
39273>>>>>//
39273>>>>>//        // For some weird reason the application skin makes the coloring of the progressbar
39273>>>>>//        // to malfunction. By telling the CodeJock SkinFramework to skip this object, the
39273>>>>>//        // color will show correctly.
39273>>>>>//        Procedure Page Integer iPageObject
39273>>>>>//            Handle hWin
39273>>>>>//            Forward Send Page iPageObject
39273>>>>>//            If (ghoSkinFramework <> 0) Begin
39273>>>>>//                Get Window_Handle to hWin
39273>>>>>//                Send ComRemoveWindow of ghoSkinFramework hWin
39273>>>>>//            End
39273>>>>>//        End_Procedure
39273>>>>>//    End_Object
39273>>>>>
39273>>>>>End_Object
39274>>>>>
39274>>>Use cDbUpdateFunctionLibrary_Mixin.pkg  // Properties used by the cDbUpdateFunctionLibrary class.
Including file: cDbUpdateFunctionLibrary_Mixin.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cDbUpdateFunctionLibrary_Mixin.pkg)
39274>>>>>// *** Mixin Class For the cDbUpdateFunctionLibrary Class ***
39274>>>>>//
39274>>>>>// We need to create a mixin class for the library.
39274>>>>>// Why? Because we import the library to the cDbUpdateVersion class; that imports
39274>>>>>// all messages (functions & procedures) but all Properties are "lost", aka not imported by
39274>>>>>// the Import_Class_Protocol command. So we need a way to create our properties somewhere else...
39274>>>>>// Note: This class should _not_ have a construct_object defined.
39274>>>>>//
39274>>>>>Use VdfBase.pkg
39274>>>>>Use WinUuid.pkg
Including file: WinUuid.pkg    (C:\Program Files\DataFlex 20.1\Pkg\WinUuid.pkg)
39274>>>>>>>Use Unicode.Pkg
39274>>>>>>>
39274>>>>>>>External_Function WinAPI_UuidCreate "UuidCreate" Rpcrt4.dll ;    Pointer Uuid ;    Returns Integer
39275>>>>>>>
39275>>>>>>>External_Function WinAPI_UuidToString  "UuidToStringW" Rpcrt4.dll ;    Pointer pUuid ;    Pointer lpUUIDString ;    Returns Integer
39276>>>>>>>
39276>>>>>>>External_Function WinAPI_UuidCreateSequential "UuidCreateSequential" Rpcrt4.dll ;    Pointer pUuid ;    Returns Integer
39277>>>>>>>
39277>>>>>>>External_Function WinAPI_RpcStringFree "RpcStringFreeW" Rpcrt4.dll ;    Pointer pStr ;    Returns Integer
39278>>>>>>>
39278>>>>>>>
39278>>>>>>>// Returns a 'random' Universally Unique Identifier string as a 32 digit hex number.
39278>>>>>>>Function RandomHexUUID Global Returns String
39280>>>>>>>    Pointer pUUID pUUIDStr
39280>>>>>>>    Integer iRetval iOffset iChar
39280>>>>>>>    String sUUID
39280>>>>>>>    
39280>>>>>>>    Move (Alloc(16)) to pUUID
39281>>>>>>>    
39281>>>>>>>    Move (WinAPI_UuidCreate (pUUID)) to iRetval
39282>>>>>>>    
39282>>>>>>>    If (iRetval = 0) Begin
39284>>>>>>>        Move 0 to pUUIDStr
39285>>>>>>>        
39285>>>>>>>        Move (WinAPI_UuidToString (pUUID, AddressOf(pUUIDStr))) to iRetval
39286>>>>>>>        If (iRetval = 0) Begin
39288>>>>>>>            Move (PointerToWString(pUUIDStr)) to sUUID
39289>>>>>>>            Move (WinAPI_RpcStringFree (AddressOf (pUUIDStr))) to iRetval
39290>>>>>>>            
39290>>>>>>>            Move (Uppercase (sUUID)) to sUUID
39291>>>>>>>        End
39291>>>>>>>>
39291>>>>>>>    End
39291>>>>>>>>
39291>>>>>>>    
39291>>>>>>>    Move (Free(pUUID)) to iRetval
39292>>>>>>>    
39292>>>>>>>    Function_Return sUUID
39293>>>>>>>End_Function
39294>>>>>>>
39294>>>>>>>
39294>>>>>>>// Returns a sequential Universally Unique Identifier string as a 32 digit hex number.
39294>>>>>>>Function SeqHexUUID Global Returns String
39296>>>>>>>    Pointer pUUID pUUIDStr
39296>>>>>>>    Integer iRetval iOffset iChar
39296>>>>>>>    String sUUID
39296>>>>>>>    
39296>>>>>>>    Move (Alloc(16)) to pUUID
39297>>>>>>>    
39297>>>>>>>    Move (WinAPI_UuidCreateSequential (pUUID)) to iRetval
39298>>>>>>>    
39298>>>>>>>    If (iRetval = 0) Begin
39300>>>>>>>        Move 0 to pUUIDStr
39301>>>>>>>        
39301>>>>>>>        Move (WinAPI_UuidToString (pUUID, AddressOf(pUUIDStr))) to iRetval
39302>>>>>>>        If (iRetval = 0) Begin
39304>>>>>>>            Move (PointerToWString(pUUIDStr)) to sUUID
39305>>>>>>>            Move (WinAPI_RpcStringFree (AddressOf (pUUIDStr))) to iRetval
39306>>>>>>>            
39306>>>>>>>            Move (Uppercase (sUUID)) to sUUID
39307>>>>>>>        End
39307>>>>>>>>
39307>>>>>>>    End
39307>>>>>>>>
39307>>>>>>>    
39307>>>>>>>    Move (Free(pUUID)) to iRetval
39308>>>>>>>    
39308>>>>>>>    Function_Return sUUID
39309>>>>>>>End_Function
39310>>>>>Use cli.pkg
39310>>>>>Use sql.pkg
Including file: sql.pkg    (C:\Program Files\DataFlex 20.1\Pkg\sql.pkg)
39310>>>>>>>// Embedded SQL classes for use with Data Access Worldwide CLI    
39310>>>>>>>// Connectivty Kits.                                              
39310>>>>>>>Use CLI.pkg
39310>>>>>>>
39310>>>>>>>// Global storage for results
39310>>>>>>>Integer SQLResult
39310>>>>>>>
39310>>>>>>>// Embedded SQL function constants
39310>>>>>>>Define FUNC_SQLCONNECT             for 1000000
39310>>>>>>>Define FUNC_SQLFILECONNECT         for 1000001
39310>>>>>>>Define FUNC_SQLDISCONNECT          for 1000002
39310>>>>>>>Define FUNC_SQLOPEN                for 1000003
39310>>>>>>>Define FUNC_SQLCLOSE               for 1000004
39310>>>>>>>Define FUNC_SQLPREPARE             for 1000005
39310>>>>>>>Define FUNC_SQLEXECUTE             for 1000006
39310>>>>>>>Define FUNC_SQLEXECDIRECT          for 1000007
39310>>>>>>>Define FUNC_SQLFETCH               for 1000008
39310>>>>>>>Define FUNC_SQLCOLUMNINFO          for 1000009
39310>>>>>>>Define FUNC_SQLCOLUMNVALUE         for 1000010
39310>>>>>>>Define FUNC_SQLBINDFILE            for 1000011
39310>>>>>>>Define FUNC_SQLGETDATA             for 1000012
39310>>>>>>>Define FUNC_SQLCOLSTRINGATTRIBLEN  for 1000013
39310>>>>>>>Define FUNC_SQLCOLSTRINGATTRIB     for 1000014
39310>>>>>>>Define FUNC_SQLCOLINTATTRIB        for 1000015
39310>>>>>>>Define FUNC_SQLSTMTINTATTRIB       for 1000016
39310>>>>>>>Define FUNC_SQLSETPROCNAME         for 1000017
39310>>>>>>>Define FUNC_SQLSETPROCARG          for 1000018
39310>>>>>>>Define FUNC_SQLCALL                for 1000019
39310>>>>>>>Define FUNC_SQLGETPROCARGLEN       for 1000020
39310>>>>>>>Define FUNC_SQLGETPROCARG          for 1000021
39310>>>>>>>Define FUNC_SQLGETPROCRETVALLEN    for 1000022
39310>>>>>>>Define FUNC_SQLGETPROCRETVAL       for 1000023
39310>>>>>>>Define FUNC_SQLNEXTRESULTSET       for 1000024
39310>>>>>>>Define FUNC_SQLBUFFERSTATUS        for 1000025
39310>>>>>>>Define FUNC_SQLSETPROCSCHEMA       for 1000026
39310>>>>>>>Define FUNC_SQLGETMESSAGE          for 1000027
39310>>>>>>>Define FUNC_SQLSETSTMTINTATTRIB    for 1000028
39310>>>>>>>
39310>>>>>>>// Embedded SQL statement attribute constants
39310>>>>>>>Define SQLSTMTATTRIB_COLUMNCOUNT    for 1
39310>>>>>>>Define SQLSTMTATTRIB_ROWCOUNT       for 2
39310>>>>>>>Define SQLSTMTATTRIB_ROWCOUNT_TYPE  for 3
39310>>>>>>>Define SQLSTMTATTRIB_NUMMESSAGES    for 4
39310>>>>>>>Define SQLSTMTATTRIB_CURSOR_TYPE    for 5
39310>>>>>>>
39310>>>>>>>// Embedded SQL possible values for SQLSTMTATTRIB_CURSOR_TYPE
39310>>>>>>>Define SQL_CURSOR_FORWARD_ONLY      for 0
39310>>>>>>>Define SQL_CURSOR_KEYSET_DRIVEN     for 1
39310>>>>>>>Define SQL_CURSOR_DYNAMIC           for 2
39310>>>>>>>Define SQL_CURSOR_STATIC            for 3
39310>>>>>>>
39310>>>>>>>
39310>>>>>>>// Embedded SQL column attribute constants
39310>>>>>>>Define SQLCOLATTRIB_SIZE           for 1
39310>>>>>>>Define SQLCOLATTRIB_LENGTH         for 1
39310>>>>>>>Define SQLCOLATTRIB_PRECISION      for 2
39310>>>>>>>Define SQLCOLATTRIB_LABEL          for 3
39310>>>>>>>Define SQLCOLATTRIB_BASECOLUMNNAME for 4
39310>>>>>>>Define SQLCOLATTRIB_BASETABLENAME  for 5
39310>>>>>>>Define SQLCOLATTRIB_SQLTYPE        for 6
39310>>>>>>>Define SQLCOLATTRIB_NULLABLE       for 7
39310>>>>>>>Define SQLCOLATTRIB_DFTYPE         for 8
39310>>>>>>>
39310>>>>>>>
39310>>>>>>>// Types used for conversion with ConvertToXml
39310>>>>>>>Define esqlTime      for 8
39310>>>>>>>Define esqlDatetime  for 9
39310>>>>>>>
39310>>>>>>>// Global variables holding last executed embedded SQL connection and statement handles.
39310>>>>>>>Integer giLastSQLhdbc
39310>>>>>>>Integer giLastSQLhstmt
39310>>>>>>>
39310>>>>>>>Move -1 to giLastSQLhdbc
39311>>>>>>>Move -1 to giLastSQLhstmt
39312>>>>>>>
39312>>>>>>>Struct tSQLColumn
39312>>>>>>>    Integer iSQLType
39312>>>>>>>    Integer iSQLSize
39312>>>>>>>    Integer iSQLPrecision
39312>>>>>>>    Integer iVariableDataType
39312>>>>>>>End_Struct
39312>>>>>>>
39312>>>>>>>// Statement object for embedded sql                           
39312>>>>>>>//   An object is created for each statement. These will be children    
39312>>>>>>>//   of cSQLConnection objects which manage the create and destruction  
39312>>>>>>>//   of these.                                                          
39312>>>>>>>
39312>>>>>>>Class cSQLStatement is a cObject
39313>>>>>>>    
39313>>>>>>>    Procedure Construct_object
39315>>>>>>>        Forward Send Construct_object
39317>>>>>>>        
39317>>>>>>>        Property Handle  phCLIStatementHandle   0
39318>>>>>>>        Property Handle  phCLIConnectionHandle  0
39319>>>>>>>        Property String  psDriverID             ""
39320>>>>>>>        
39320>>>>>>>        Property Integer piLastColumn      0
39321>>>>>>>        Property Integer piLastArgument    0
39322>>>>>>>        Property Integer piBindFile        0
39323>>>>>>>        
39323>>>>>>>        Property Integer piColumnCount     0
39324>>>>>>>        
39324>>>>>>>        // True if there is at least 1 column with a variable length data type
39324>>>>>>>        Property Integer piHasVariableDataType  0
39325>>>>>>>        
39325>>>>>>>        // Max size of buffer for variable length data. Default 16000
39325>>>>>>>        Property Integer piMaxVariableBufferLength 16000
39326>>>>>>>        
39326>>>>>>>        // Allocated buffer for SQLGetData.
39326>>>>>>>        Property WString psVariableBuffer  ""
39327>>>>>>>        
39327>>>>>>>        // Allocated size of psVariableBuffer
39327>>>>>>>        Property Integer piVariableBufferLength 0
39328>>>>>>>        
39328>>>>>>>        // Stores column properties of a result set.
39328>>>>>>>        Property tSQLColumn[] paSQLColumns
39329>>>>>>>        
39329>>>>>>>        // piFetchResult is set by SQLFetchRowValues and SQLFetchResultSetValues
39329>>>>>>>        //   0    = Fetch returned no data.
39329>>>>>>>        //   <> 0 = Row fetched
39329>>>>>>>        Property Integer piFetchResult     0
39330>>>>>>>        
39330>>>>>>>        
39330>>>>>>>        Property String psDummyZeroDate              '0001-01-01'
39331>>>>>>>        Property String psDummyZeroDateMssqlDatetime '1753-01-01'
39332>>>>>>>        
39332>>>>>>>    End_Procedure
39333>>>>>>>    
39333>>>>>>>    // Store basic information about the statement.
39333>>>>>>>    Procedure StoreStatementInfo Handle hCLIStatementHandle String sDrvrId Handle hCLIConnectionHandle
39335>>>>>>>        
39335>>>>>>>        Set phCLIStatementHandle   to hCLIStatementHandle
39336>>>>>>>        Set phCLIConnectionHandle  to hCLIConnectionHandle
39337>>>>>>>        Set psDriverID             to sDrvrId
39338>>>>>>>        
39338>>>>>>>    End_Procedure
39339>>>>>>>    
39339>>>>>>>    
39339>>>>>>>    // Destroy the cSQLStatement object
39339>>>>>>>    Procedure DestroySQLStatement
39341>>>>>>>        Send Destroy
39342>>>>>>>    End_Procedure
39343>>>>>>>    
39343>>>>>>>    // Handle an error that has occurred while checking properties.
39343>>>>>>>    Procedure HandleError Integer ihstmt Integer ihdbc String sDrvrId String sOriginMsg
39345>>>>>>>        Integer iErrHandle
39345>>>>>>>        Integer iErrNum
39345>>>>>>>        String  sLocationInfo
39345>>>>>>>        
39345>>>>>>>        // Get the DataFlex statement identifier
39345>>>>>>>        Move Self to iErrHandle
39346>>>>>>>        
39346>>>>>>>        // Determine error number
39346>>>>>>>        If (ihstmt = 0) ;            Move CLIERR_SQLINVALID_CLI_STMT_HANDLE to iErrNum
39349>>>>>>>        Else If (ihdbc = 0) ;            Move CLIERR_SQLINVALID_CLI_CONN_HANDLE to iErrNum
39353>>>>>>>        Else If (sDrvrId = "") ;            Move CLIERR_SQLINVALID_DRIVER_ID to iErrNum
39357>>>>>>>        Else ;            Move CLIERR_SQL_ERROR to iErrNum
39359>>>>>>>        
39359>>>>>>>        // Create location ifnormation
39359>>>>>>>        Move "[" to sLocationInfo
39360>>>>>>>        If (sOriginMsg <> "") Begin
39362>>>>>>>            Move (Append(sLocationInfo, sOriginMsg)) to sLocationInfo
39363>>>>>>>            Move (Append(sLocationInfo, ", "))       to sLocationInfo
39364>>>>>>>        End
39364>>>>>>>>
39364>>>>>>>        Move (Append(sLocationInfo, "DataFlex hstmt = ")) to sLocationInfo
39365>>>>>>>        Move (Append(sLocationInfo, iErrHandle))          to sLocationInfo
39366>>>>>>>        Move (Append(sLocationInfo, "]"))                 to sLocationInfo
39367>>>>>>>        
39367>>>>>>>        // Generate the error
39367>>>>>>>        Error iErrNum sLocationInfo
39368>>>>>>>>
39368>>>>>>>    End_Procedure
39369>>>>>>>    
39369>>>>>>>    // Handle general error not related to the properties
39369>>>>>>>    Procedure StmtError Integer iErrNum String sErrText String sOriginMsg
39371>>>>>>>        Integer iErrHandle
39371>>>>>>>        String  sLocationInfo
39371>>>>>>>        
39371>>>>>>>        // Get the DataFlex statement identifier
39371>>>>>>>        Move Self to iErrHandle
39372>>>>>>>        
39372>>>>>>>        // Create location information
39372>>>>>>>        Move "[" to sLocationInfo
39373>>>>>>>        If (sOriginMsg <> "") Begin
39375>>>>>>>            Move (Append(sLocationInfo, sOriginMsg)) to sLocationInfo
39376>>>>>>>            Move (Append(sLocationInfo, ", "))       to sLocationInfo
39377>>>>>>>        End
39377>>>>>>>>
39377>>>>>>>        If (sErrtext <> "") Begin
39379>>>>>>>            Move (Append(sLocationInfo, sErrtext)) to sLocationInfo
39380>>>>>>>            Move (Append(sLocationInfo, ", "))     to sLocationInfo
39381>>>>>>>        End
39381>>>>>>>>
39381>>>>>>>        Move (Append(sLocationInfo, "DataFlex hstmt = ")) to sLocationInfo
39382>>>>>>>        Move (Append(sLocationInfo, iErrHandle))          to sLocationInfo
39383>>>>>>>        Move (Append(sLocationInfo, "]"))                 to sLocationInfo
39384>>>>>>>        
39384>>>>>>>        // Generate the error
39384>>>>>>>        Error iErrNum sLocationInfo
39385>>>>>>>>
39385>>>>>>>    End_Procedure
39386>>>>>>>    
39386>>>>>>>    // Handle an illegal attribute error
39386>>>>>>>    Procedure SQLIllegalAttribute String sErrText String sOriginMsg
39388>>>>>>>        Integer bReport
39388>>>>>>>        
39388>>>>>>>        Get_Attribute DF_REPORT_UNSUPPORTED_ATTRIBUTES to bReport
39391>>>>>>>        If (bReport) ;            Send StmtError CLIERR_SQLINVALID_ATTRIBUTE sErrtext sOriginMsg
39394>>>>>>>    End_Procedure
39395>>>>>>>    
39395>>>>>>>    // Check if a column number is legal
39395>>>>>>>    Function SQLPrivateColumnIsLegal Integer ihdbc String sDrvrId Integer ihstmt Integer iCol Returns Integer
39397>>>>>>>        Integer bLegal
39397>>>>>>>        Integer iNumColumns
39397>>>>>>>        
39397>>>>>>>        Get SQLPrivateStmtAttribute SQLSTMTATTRIB_COLUMNCOUNT ihdbc sDrvrId ihstmt to iNumColumns
39398>>>>>>>        If (iCol > 0 and iCol <= iNumColumns) ;            Move DFTRUE to bLegal
39401>>>>>>>        Else ;            Move DFFALSE to bLegal
39403>>>>>>>        
39403>>>>>>>        Function_Return bLegal
39404>>>>>>>    End_Function
39405>>>>>>>    
39405>>>>>>>    
39405>>>>>>>    
39405>>>>>>>    // Close a statement and free all alllocated resources
39405>>>>>>>    Procedure SQLClose
39407>>>>>>>        Integer ihdbc
39407>>>>>>>        Integer ihstmt
39407>>>>>>>        Integer iVoid
39407>>>>>>>        String  sDrvrId
39407>>>>>>>        String  sEmpty
39407>>>>>>>        
39407>>>>>>>        // Initialize
39407>>>>>>>        Move "" to sEmpty
39408>>>>>>>        
39408>>>>>>>        // Get the cli handles
39408>>>>>>>        Get phCLIStatementHandle  to ihstmt
39409>>>>>>>        Get phCLIConnectionHandle to ihdbc
39410>>>>>>>        Get psDriverId            to sDrvrId
39411>>>>>>>        
39411>>>>>>>        // Free the CLI handle
39411>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39413>>>>>>>            // Call the driver function to close
39413>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCLOSE ;                Callback Self ;                Passing ihdbc sEmpty ihstmt ;                Result iVoid
39418>>>>>>>            
39418>>>>>>>            Move -1 to giLastSQLhstmt
39419>>>>>>>            // Free the DataFlex handle
39419>>>>>>>            Send DestroySQLStatement
39420>>>>>>>        End
39420>>>>>>>>
39420>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLClose"
39422>>>>>>>    End_Procedure
39423>>>>>>>    
39423>>>>>>>    // Prepare a statement for execution
39423>>>>>>>    Procedure SQLPrepare String sStatement
39425>>>>>>>        Integer ihdbc
39425>>>>>>>        Integer ihstmt
39425>>>>>>>        Integer iVoid
39425>>>>>>>        String  sDrvrId
39425>>>>>>>        
39425>>>>>>>        // Get the cli handles
39425>>>>>>>        Get phCLIStatementHandle  to ihstmt
39426>>>>>>>        Get phCLIConnectionHandle to ihdbc
39427>>>>>>>        Get psDriverId            to sDrvrId
39428>>>>>>>        
39428>>>>>>>        // Prepare
39428>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39430>>>>>>>            // Call the driver function to prepare
39430>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLPREPARE ;                Callback Self ;                Passing ihdbc sStatement ihstmt ;                Result iVoid
39435>>>>>>>            Set piLastArgument to 0
39436>>>>>>>
39436>>>>>>>        End
39436>>>>>>>>
39436>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLPrepare"
39438>>>>>>>    End_Procedure
39439>>>>>>>    
39439>>>>>>>    Procedure SQLGetStatementAttributes
39441>>>>>>>        Integer ihdbc ihstmt iNumColumns iCol iMaxSize
39441>>>>>>>        String sMaxValue
39441>>>>>>>        tSQLColumn[] aSQLColumns
39441>>>>>>>        tSQLColumn[] aSQLColumns
39442>>>>>>>        
39442>>>>>>>        Integer iSqlType
39442>>>>>>>        Integer iSQLSize
39442>>>>>>>        Integer iSQLprecision
39442>>>>>>>        Integer iVariableDataType
39442>>>>>>>        
39442>>>>>>>        String  sDrvrId
39442>>>>>>>        
39442>>>>>>>        Integer iHasVariableDataType
39442>>>>>>>        
39442>>>>>>>        Move 0 to iHasVariableDataType
39443>>>>>>>        
39443>>>>>>>        
39443>>>>>>>        // Get the cli handles
39443>>>>>>>        Get phCLIStatementHandle  to ihstmt
39444>>>>>>>        Get phCLIConnectionHandle to ihdbc
39445>>>>>>>        Get psDriverId            to sDrvrId
39446>>>>>>>        
39446>>>>>>>        Get SQLPrivateStmtAttribute SQLSTMTATTRIB_COLUMNCOUNT ihdbc sDrvrId ihstmt to iNumColumns
39447>>>>>>>        
39447>>>>>>>        Set piColumnCount to iNumColumns
39448>>>>>>>        
39448>>>>>>>        // Fill columns array
39448>>>>>>>        For iCol from 1 to iNumColumns
39454>>>>>>>>
39454>>>>>>>            Move 0 to iVariableDataType
39455>>>>>>>            
39455>>>>>>>            Get SQLPrivateColAttribute iCol SQLCOLATTRIB_SQLTYPE ihdbc sDrvrId ihstmt to iSQLType
39456>>>>>>>            Get SQLPrivateColAttribute iCol SQLCOLATTRIB_SIZE ihdbc sDrvrId ihstmt to iSQLSize
39457>>>>>>>            Get SQLPrivateColAttribute iCol SQLCOLATTRIB_PRECISION ihdbc sDrvrId ihstmt to iSQLPrecision
39458>>>>>>>            
39458>>>>>>>            If ( (iSQLType = SQL_LONGVARCHAR) or (iSQLType = SQL_WLONGVARCHAR) ) Begin
39460>>>>>>>                // text type
39460>>>>>>>                Move 1 to iVariableDataType
39461>>>>>>>            End
39461>>>>>>>>
39461>>>>>>>            Else Begin
39462>>>>>>>                If (sDrvrId = "MSSQLDRV") Begin
39464>>>>>>>                    // SQL Server varchar(max) and nvarchar(max) types return Size = 0
39464>>>>>>>                    If ( ((iSQLType = SQL_VARCHAR) and (iSQLSize = 0) ) or ;                        ((iSQLType = SQL_WVARCHAR) and (iSQLSize = 0) ) ) Begin
39466>>>>>>>                        
39466>>>>>>>                        Move 1 to iVariableDataType
39467>>>>>>>                    End
39467>>>>>>>>
39467>>>>>>>                End
39467>>>>>>>>
39467>>>>>>>            End
39467>>>>>>>>
39467>>>>>>>            
39467>>>>>>>            Move iSqlType           to aSQLColumns[iCol].iSQLType
39468>>>>>>>            Move iSQLSize           to aSQLColumns[iCol].iSQLSize
39469>>>>>>>            Move iSQLPrecision      to aSQLColumns[iCol].iSQLPrecision
39470>>>>>>>            Move iVariableDataType  to aSQLColumns[iCol].iVariableDataType
39471>>>>>>>            
39471>>>>>>>            If (not(iVariableDataType)) Begin
39473>>>>>>>                If (iSQLSize > iMaxSize) Begin
39475>>>>>>>                    Move iSQLSize to iMaxSize
39476>>>>>>>                End
39476>>>>>>>>
39476>>>>>>>            End
39476>>>>>>>>
39476>>>>>>>            Else Begin
39477>>>>>>>                Move 1 to iHasVariableDataType
39478>>>>>>>            End
39478>>>>>>>>
39478>>>>>>>            
39478>>>>>>>        Loop
39479>>>>>>>>
39479>>>>>>>        
39479>>>>>>>        Set paSQLColumns   to aSQLColumns
39480>>>>>>>        Set piHasVariableDataType to iHasVariableDataType
39481>>>>>>>        
39481>>>>>>>    End_Procedure
39482>>>>>>>    
39482>>>>>>>    // Execute a prepared statement
39482>>>>>>>    Procedure SQLExecute
39484>>>>>>>        Integer ihdbc
39484>>>>>>>        Integer ihstmt
39484>>>>>>>        Integer iVoid
39484>>>>>>>        String  sDrvrId
39484>>>>>>>        String  sEmpty
39484>>>>>>>        
39484>>>>>>>        // Initialize
39484>>>>>>>        Move "" to sEmpty
39485>>>>>>>        
39485>>>>>>>        // Get the cli handles
39485>>>>>>>        Get phCLIStatementHandle  to ihstmt
39486>>>>>>>        Get phCLIConnectionHandle to ihdbc
39487>>>>>>>        Get psDriverId            to sDrvrId
39488>>>>>>>        
39488>>>>>>>        // Execute
39488>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39490>>>>>>>            // Call the driver function to execute
39490>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLEXECUTE ;                Callback Self ;                Passing ihdbc sEmpty ihstmt ;                Result iVoid
39495>>>>>>>            Send SQLGetStatementAttributes
39496>>>>>>>            Set piLastArgument to 0
39497>>>>>>>        End
39497>>>>>>>>
39497>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLExecute"
39499>>>>>>>    End_Procedure
39500>>>>>>>    
39500>>>>>>>    
39500>>>>>>>    
39500>>>>>>>    // Prepare and execute a statement
39500>>>>>>>    Procedure SQLExecDirect String sStatement
39502>>>>>>>        Integer ihdbc
39502>>>>>>>        Integer ihstmt
39502>>>>>>>        Integer iVoid
39502>>>>>>>        String  sDrvrId
39502>>>>>>>        
39502>>>>>>>        // Get the cli handles
39502>>>>>>>        Get phCLIStatementHandle  to ihstmt
39503>>>>>>>        Get phCLIConnectionHandle to ihdbc
39504>>>>>>>        Get psDriverId            to sDrvrId
39505>>>>>>>        
39505>>>>>>>        // ExecDirect
39505>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39507>>>>>>>            // Call the driver function to execdirect
39507>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLEXECDIRECT ;                Callback Self ;                Passing ihdbc sStatement ihstmt ;                Result iVoid
39512>>>>>>>            Send SQLGetStatementAttributes
39513>>>>>>>        End
39513>>>>>>>>
39513>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLExecDirect"
39515>>>>>>>    End_Procedure
39516>>>>>>>    
39516>>>>>>>    // Fetch the next row
39516>>>>>>>    // Returns  : 0   = No more data
39516>>>>>>>    //<>0 = Success
39516>>>>>>>    Function SQLFetch Returns Integer
39518>>>>>>>        Integer ihdbc
39518>>>>>>>        Integer ihstmt
39518>>>>>>>        Integer iResult
39518>>>>>>>        String  sDrvrId
39518>>>>>>>        String  sEmpty
39518>>>>>>>        
39518>>>>>>>        // Initialize
39518>>>>>>>        Move "" to sEmpty
39519>>>>>>>        Move 0  to iResult
39520>>>>>>>        
39520>>>>>>>        // Get the cli handles
39520>>>>>>>        Get phCLIStatementHandle  to ihstmt
39521>>>>>>>        Get phCLIConnectionHandle to ihdbc
39522>>>>>>>        Get psDriverId            to sDrvrId
39523>>>>>>>        
39523>>>>>>>        // Fetch
39523>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39525>>>>>>>            Move False to Err
39526>>>>>>>            
39526>>>>>>>            // Call the driver function to fetch
39526>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLFETCH Callback Self Passing ihdbc sEmpty ihstmt Result iResult
39531>>>>>>>            
39531>>>>>>>            // If something went wrong, adjust the result
39531>>>>>>>            If (Err) ;                Move 0 to iResult
39534>>>>>>>            
39534>>>>>>>            Set piLastcolumn to 0
39535>>>>>>>        End
39535>>>>>>>>
39535>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLFetch"
39537>>>>>>>        
39537>>>>>>>        Function_Return iResult
39538>>>>>>>    End_Function
39539>>>>>>>    
39539>>>>>>>    // Fetch the next row and return an array with all column values
39539>>>>>>>    // Returns  : Array of strings with all column values
39539>>>>>>>    // Sets piFetchResult property
39539>>>>>>>    //   0    = No more data
39539>>>>>>>    //   <> 0 = Success
39539>>>>>>>    Function SQLFetchRowValues Returns String[]
39541>>>>>>>        
39541>>>>>>>        String[] asValues
39542>>>>>>>        
39542>>>>>>>        tSQLColumn[] aSQLColumns
39542>>>>>>>        tSQLColumn[] aSQLColumns
39543>>>>>>>        
39543>>>>>>>        Integer ihdbc
39543>>>>>>>        Integer ihstmt
39543>>>>>>>        Integer iResult iVoid
39543>>>>>>>        Integer iColCount iCol
39543>>>>>>>        String  sDrvrId
39543>>>>>>>        String  sEmpty
39543>>>>>>>        Longptr pResultWStr
39543>>>>>>>        WString wVariableResult
39543>>>>>>>        Integer iHasVariableDataType
39543>>>>>>>        Integer iLen
39543>>>>>>>        Integer iVariableBufferLength
39543>>>>>>>        
39543>>>>>>>        // Initialize
39543>>>>>>>        Move "" to sEmpty
39544>>>>>>>        Move 0  to iResult
39545>>>>>>>        
39545>>>>>>>        // Get the cli handles
39545>>>>>>>        Get phCLIStatementHandle  to ihstmt
39546>>>>>>>        Get phCLIConnectionHandle to ihdbc
39547>>>>>>>        Get psDriverId            to sDrvrId
39548>>>>>>>        
39548>>>>>>>        Get paSQLColumns to aSQLColumns
39549>>>>>>>        Get piColumnCount to iColCount
39550>>>>>>>        Get piHasVariableDataType to iHasVariableDataType
39551>>>>>>>        
39551>>>>>>>        If (iHasVariableDataType) Begin
39553>>>>>>>            
39553>>>>>>>            Get piVariableBufferLength      to iVariableBufferLength
39554>>>>>>>            Get piMaxVariableBufferLength   to iLen
39555>>>>>>>            
39555>>>>>>>            If (iLen > iVariableBufferLength) Begin
39557>>>>>>>                // Allocate
39557>>>>>>>                Move (Repeat(' ', iLen)) to wVariableResult
39558>>>>>>>                
39558>>>>>>>                Set piVariableBufferLength to iLen
39559>>>>>>>                Set psVariableBuffer       to wVariableResult
39560>>>>>>>                
39560>>>>>>>                Get piVariableBufferLength to iVariableBufferLength
39561>>>>>>>            End
39561>>>>>>>>
39561>>>>>>>        End
39561>>>>>>>>
39561>>>>>>>        
39561>>>>>>>        // Fetch
39561>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39563>>>>>>>            Move (False) to Err
39564>>>>>>>            
39564>>>>>>>            // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
39564>>>>>>>            // in the next FUNC_SQLCOLUMNVALUE call.
39564>>>>>>>            // If hdbc and hstmt have not changed since the last call we don't have to set it.
39564>>>>>>>            If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
39566>>>>>>>                // Setup function arguments
39566>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO Callback 0 Passing ihdbc iCol ihstmt Result iVoid
39571>>>>>>>                Move ihstmt to giLastSQLhstmt
39572>>>>>>>                Move ihdbc to giLastSQLhdbc
39573>>>>>>>            End
39573>>>>>>>>
39573>>>>>>>            
39573>>>>>>>            // Call the driver function to fetch
39573>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLFETCH Callback 0 Passing ihdbc sEmpty ihstmt Result iResult
39578>>>>>>>            
39578>>>>>>>            // If something went wrong, adjust the result
39578>>>>>>>            If (Err) ;                Move 0 to iResult
39581>>>>>>>            
39581>>>>>>>            If (iResult) Begin
39583>>>>>>>                For iCol from 1 to iColCount
39589>>>>>>>>
39589>>>>>>>                    
39589>>>>>>>                    If (not(aSQLColumns[iCol].iVariableDataType)) Begin
39591>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNVALUE ;                            Callback 0 ;                            Passing sEmpty sEmpty iCol ;                            Result pResultWStr
39596>>>>>>>                            
39596>>>>>>>                        If (pResultWStr) Begin
39598>>>>>>>                            Move (CString(PointerToWString(pResultWStr))) to asValues[iCol - 1]
39599>>>>>>>                        End
39599>>>>>>>>
39599>>>>>>>                        Else Begin
39600>>>>>>>                            Move "" to asValues[iCol - 1]
39601>>>>>>>                        End
39601>>>>>>>>
39601>>>>>>>                        
39601>>>>>>>                    End
39601>>>>>>>>
39601>>>>>>>                    Else Begin
39602>>>>>>>                        Get psVariableBuffer       to wVariableResult
39603>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLGETDATA ;                            Callback 0 ;                            Passing iCol iVariableBufferLength (AddressOf(wVariableResult));                            Result iVoid
39608>>>>>>>                        
39608>>>>>>>                        Move (CString(wVariableResult)) to asValues[iCol - 1]
39609>>>>>>>                    End
39609>>>>>>>>
39609>>>>>>>                    
39609>>>>>>>                Loop
39610>>>>>>>>
39610>>>>>>>            End
39610>>>>>>>>
39610>>>>>>>        End
39610>>>>>>>>
39610>>>>>>>        Else Begin
39611>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLFetchRowValues"
39612>>>>>>>        End
39612>>>>>>>>
39612>>>>>>>        
39612>>>>>>>        Set piFetchResult to iResult
39613>>>>>>>        
39613>>>>>>>        Function_Return asValues
39614>>>>>>>        
39614>>>>>>>    End_Function
39615>>>>>>>    
39615>>>>>>>    // Fetch a complete result set.
39615>>>>>>>    // Returns  : 2-dimensional array of strings with result set
39615>>>>>>>    // Sets piFetchResult property
39615>>>>>>>    //   0    = No more data
39615>>>>>>>    //   <> 0 = Success
39615>>>>>>>    Function SQLFetchResultsetValues Returns String[][]
39617>>>>>>>        
39617>>>>>>>        String[][] asValues
39618>>>>>>>        
39618>>>>>>>        Integer ihdbc ihstmt iResult iVoid iColCount iCol iRow
39618>>>>>>>        String sDrvrId sEmpty sMax
39618>>>>>>>        Longptr pResultWStr
39618>>>>>>>        WString wResult
39618>>>>>>>        
39618>>>>>>>        tSQLColumn[] aSQLColumns
39618>>>>>>>        tSQLColumn[] aSQLColumns
39619>>>>>>>        WString  wVariableResult
39619>>>>>>>        Integer iHasVariableDataType
39619>>>>>>>        Integer iLen
39619>>>>>>>        Integer iVariableBufferLength
39619>>>>>>>        
39619>>>>>>>        // Initialize
39619>>>>>>>        Move "" to sEmpty
39620>>>>>>>        Move 0  to iResult
39621>>>>>>>        
39621>>>>>>>        // Get the cli handles
39621>>>>>>>        Get phCLIStatementHandle  to ihstmt
39622>>>>>>>        Get phCLIConnectionHandle to ihdbc
39623>>>>>>>        Get psDriverId            to sDrvrId
39624>>>>>>>        
39624>>>>>>>        // Fetch
39624>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39626>>>>>>>            Move False to Err
39627>>>>>>>            
39627>>>>>>>            // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
39627>>>>>>>            // in the next FUNC_SQLCOLUMNVALUE call.
39627>>>>>>>            // If hdbc and hstmt have not changed since the last call we don't have to set it.
39627>>>>>>>            If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
39629>>>>>>>                // Setup function arguments
39629>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO Callback 0 Passing ihdbc iCol ihstmt Result iVoid
39634>>>>>>>                Move ihstmt to giLastSQLhstmt
39635>>>>>>>                Move ihdbc to giLastSQLhdbc
39636>>>>>>>            End
39636>>>>>>>>
39636>>>>>>>            
39636>>>>>>>            Get piColumnCount to iColCount
39637>>>>>>>            If (iColCount) Begin
39639>>>>>>>                Get paSQLColumns to aSQLColumns
39640>>>>>>>                Get piHasVariableDataType to iHasVariableDataType
39641>>>>>>>                If (iHasVariableDataType) Begin
39643>>>>>>>                    Get piVariableBufferLength      to iVariableBufferLength
39644>>>>>>>                    Get piMaxVariableBufferLength   to iLen
39645>>>>>>>                    If (iLen > iVariableBufferLength) Begin
39647>>>>>>>                        // Allocate
39647>>>>>>>                        Move (Repeat(' ', iLen)) to wVariableResult
39648>>>>>>>                        
39648>>>>>>>                        Set piVariableBufferLength to iLen
39649>>>>>>>                        Set psVariableBuffer       to wVariableResult
39650>>>>>>>                        
39650>>>>>>>                        Get piVariableBufferLength to iVariableBufferLength
39651>>>>>>>                    End
39651>>>>>>>>
39651>>>>>>>                    Else Begin
39652>>>>>>>                        Set psVariableBuffer       to wVariableResult
39653>>>>>>>                    End
39653>>>>>>>>
39653>>>>>>>                End
39653>>>>>>>>
39653>>>>>>>                
39653>>>>>>>                // Call the driver function to fetch
39653>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLFETCH Callback Self Passing ihdbc sEmpty ihstmt Result iResult
39658>>>>>>>                If (Err) ;                    Move 0 to iResult
39661>>>>>>>                
39661>>>>>>>                While (iResult <> 0)
39665>>>>>>>                    
39665>>>>>>>                    For iCol from 1 to (iColCount)
39671>>>>>>>>
39671>>>>>>>                        
39671>>>>>>>                        If (not(aSQLColumns[iCol].iVariableDataType)) Begin
39673>>>>>>>                            
39673>>>>>>>                            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNVALUE ;                                Callback 0 ;                                Passing sEmpty sEmpty iCol ;                                Result pResultWStr
39678>>>>>>>                            
39678>>>>>>>                            If (pResultWStr) Begin
39680>>>>>>>                                Move (CString(PointerToWString(pResultWStr))) to asValues[iRow][iCol - 1]
39681>>>>>>>                            End
39681>>>>>>>>
39681>>>>>>>                            Else Begin
39682>>>>>>>                                Move "" to asValues[iRow][iCol - 1]
39683>>>>>>>                            End
39683>>>>>>>>
39683>>>>>>>                        End
39683>>>>>>>>
39683>>>>>>>                        Else Begin
39684>>>>>>>                            //Variable data
39684>>>>>>>                            Move wVariableResult to wResult
39685>>>>>>>                            Call_Driver 0 sDrvrId Function FUNC_SQLGETDATA ;                                Callback 0 ;                                Passing iCol iVariableBufferLength (AddressOf(wResult)) ;                                Result iVoid
39690>>>>>>>                            
39690>>>>>>>                            Move (CString(wResult)) to asValues[iRow][iCol - 1]
39691>>>>>>>                        End
39691>>>>>>>>
39691>>>>>>>                    Loop
39692>>>>>>>>
39692>>>>>>>                    
39692>>>>>>>                    Increment iRow
39693>>>>>>>                    
39693>>>>>>>                    // Call the driver function to fetch
39693>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLFETCH Callback Self Passing ihdbc sEmpty ihstmt Result iResult
39698>>>>>>>                    If (Err) ;                        Move 0 to iResult
39701>>>>>>>                    
39701>>>>>>>                Loop
39702>>>>>>>>
39702>>>>>>>            End
39702>>>>>>>>
39702>>>>>>>        End
39702>>>>>>>>
39702>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLFetchResultsetValues"
39704>>>>>>>        
39704>>>>>>>        Set piFetchResult to iResult
39705>>>>>>>        
39705>>>>>>>        Function_Return asValues
39706>>>>>>>    End_Function
39707>>>>>>>    
39707>>>>>>>    // Get the next column
39707>>>>>>>    Function SQLNextColumn Returns String
39709>>>>>>>        Integer iCol
39709>>>>>>>        String  sResult
39709>>>>>>>        
39709>>>>>>>        Get piLastColumn to iCol
39710>>>>>>>        Increment iCol
39711>>>>>>>        Get SQLColumnValue iCol to sResult
39712>>>>>>>        Set piLastColumn to iCol
39713>>>>>>>        
39713>>>>>>>        Function_Return sResult
39714>>>>>>>    End_Function
39715>>>>>>>    
39715>>>>>>>    
39715>>>>>>>    // Returns the native type of a column
39715>>>>>>>    Function SQLColumnType Integer iCol Returns Integer
39717>>>>>>>        Integer ihdbc
39717>>>>>>>        Integer ihstmt
39717>>>>>>>        String  sDrvrId
39717>>>>>>>        Integer iSQLType
39717>>>>>>>        Integer iColumns
39717>>>>>>>        
39717>>>>>>>        tSQLColumn[] aSQLColumns
39717>>>>>>>        tSQLColumn[] aSQLColumns
39718>>>>>>>        
39718>>>>>>>        // Get the cli handles
39718>>>>>>>        Get phCLIStatementHandle  to ihstmt
39719>>>>>>>        Get phCLIConnectionHandle to ihdbc
39720>>>>>>>        Get psDriverId            to sDrvrId
39721>>>>>>>        
39721>>>>>>>        // Get the value
39721>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39723>>>>>>>            
39723>>>>>>>            Get paSQLColumns   to aSQLColumns
39724>>>>>>>            Move (SizeOfArray(aSQLColumns)) to iColumns
39725>>>>>>>            
39725>>>>>>>            If (iCol >= 1 and iCol <= iColumns) Begin
39727>>>>>>>                Move aSQLColumns[iCol].iSQLType to iSQLType
39728>>>>>>>            End
39728>>>>>>>>
39728>>>>>>>            Else Begin
39729>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLColumnType"
39730>>>>>>>            End
39730>>>>>>>>
39730>>>>>>>        End
39730>>>>>>>>
39730>>>>>>>        Else Begin
39731>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLColumnType"
39732>>>>>>>        End
39732>>>>>>>>
39732>>>>>>>        
39732>>>>>>>        Function_Return iSQLType
39733>>>>>>>    End_Function
39734>>>>>>>    
39734>>>>>>>    // Returns the size (max length) of a column
39734>>>>>>>    Function SQLColumnSize Integer iCol Returns Integer
39736>>>>>>>        Integer ihdbc
39736>>>>>>>        Integer ihstmt
39736>>>>>>>        String  sDrvrId
39736>>>>>>>        Integer iSQLSize
39736>>>>>>>        Integer iColumns
39736>>>>>>>        
39736>>>>>>>        tSQLColumn[] aSQLColumns
39736>>>>>>>        tSQLColumn[] aSQLColumns
39737>>>>>>>        
39737>>>>>>>        // Get the cli handles
39737>>>>>>>        Get phCLIStatementHandle  to ihstmt
39738>>>>>>>        Get phCLIConnectionHandle to ihdbc
39739>>>>>>>        Get psDriverId            to sDrvrId
39740>>>>>>>        
39740>>>>>>>        // Get the value
39740>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39742>>>>>>>            
39742>>>>>>>            Get paSQLColumns   to aSQLColumns
39743>>>>>>>            Move (SizeOfArray(aSQLColumns)) to iColumns
39744>>>>>>>            
39744>>>>>>>            If (iCol >= 1 and iCol <= iColumns) Begin
39746>>>>>>>                Move aSQLColumns[iCol].iSQLSize to iSQLSize
39747>>>>>>>            End
39747>>>>>>>>
39747>>>>>>>            Else Begin
39748>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLColumnSize"
39749>>>>>>>            End
39749>>>>>>>>
39749>>>>>>>        End
39749>>>>>>>>
39749>>>>>>>        Else Begin
39750>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLColumnSize"
39751>>>>>>>        End
39751>>>>>>>>
39751>>>>>>>        
39751>>>>>>>        Function_Return iSQLSize
39752>>>>>>>    End_Function
39753>>>>>>>    
39753>>>>>>>    //  Returns 1 for variable length datatypes.
39753>>>>>>>    //  For example SQL Server varchar(max) or text type
39753>>>>>>>    //  The data of variable length datatype columns should be retrieved with SQLGetData
39753>>>>>>>    Function SQLColumnVariableDatatype Integer iCol Returns Integer
39755>>>>>>>        Integer ihdbc
39755>>>>>>>        Integer ihstmt
39755>>>>>>>        String  sDrvrId
39755>>>>>>>        Integer iVariableDataType
39755>>>>>>>        Integer iColumns
39755>>>>>>>        
39755>>>>>>>        tSQLColumn[] aSQLColumns
39755>>>>>>>        tSQLColumn[] aSQLColumns
39756>>>>>>>        
39756>>>>>>>        // Get the cli handles
39756>>>>>>>        Get phCLIStatementHandle  to ihstmt
39757>>>>>>>        Get phCLIConnectionHandle to ihdbc
39758>>>>>>>        Get psDriverId            to sDrvrId
39759>>>>>>>        
39759>>>>>>>        // Get the value
39759>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39761>>>>>>>            
39761>>>>>>>            Get paSQLColumns   to aSQLColumns
39762>>>>>>>            Move (SizeOfArray(aSQLColumns)) to iColumns
39763>>>>>>>            
39763>>>>>>>            If (iCol >= 1 and iCol <= iColumns) Begin
39765>>>>>>>                Move aSQLColumns[iCol].iVariableDataType to iVariableDataType
39766>>>>>>>            End
39766>>>>>>>>
39766>>>>>>>            Else Begin
39767>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLColumnVariableDatatype"
39768>>>>>>>            End
39768>>>>>>>>
39768>>>>>>>        End
39768>>>>>>>>
39768>>>>>>>        Else Begin
39769>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLColumnVariableDatatype"
39770>>>>>>>        End
39770>>>>>>>>
39770>>>>>>>        
39770>>>>>>>        Function_Return iVariableDataType
39771>>>>>>>    End_Function
39772>>>>>>>    
39772>>>>>>>    
39772>>>>>>>    // Return the value of a column in a fetched row of a given
39772>>>>>>>    // statement.
39772>>>>>>>    Function SQLColumnValue Integer iCol Returns String
39774>>>>>>>        Integer ihdbc
39774>>>>>>>        Integer ihstmt
39774>>>>>>>        String  sDrvrId sResult
39774>>>>>>>        Longptr pResultWStr
39774>>>>>>>        
39774>>>>>>>        Integer iVoid
39774>>>>>>>        Integer iColSize
39774>>>>>>>        Integer iColPrecision
39774>>>>>>>        String  sEmpty
39774>>>>>>>        Integer bLegalColumn
39774>>>>>>>        
39774>>>>>>>        // Initialize
39774>>>>>>>        Move "" to sResult
39775>>>>>>>        
39775>>>>>>>        // Get the cli handles
39775>>>>>>>        Get phCLIStatementHandle  to ihstmt
39776>>>>>>>        Get phCLIConnectionHandle to ihdbc
39777>>>>>>>        Get psDriverId            to sDrvrId
39778>>>>>>>        
39778>>>>>>>        // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
39778>>>>>>>        // in the next FUNC_SQLCOLUMNVALUE call.
39778>>>>>>>        // If hdbc and hstmt have not changed since the last call we don't have to set it.
39778>>>>>>>        If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
39780>>>>>>>            // Setup function arguments
39780>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback 0 ;                Passing ihdbc iCol ihstmt ;                Result iVoid
39785>>>>>>>            Move ihstmt to giLastSQLhstmt
39786>>>>>>>            Move ihdbc to giLastSQLhdbc
39787>>>>>>>        End
39787>>>>>>>>
39787>>>>>>>        
39787>>>>>>>        If (iCol >= 1 and iCol <= piColumnCount(Self)) Begin
39789>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNVALUE ;                Callback 0 ;                Passing sResult sEmpty iCol ;                Result pResultWStr
39794>>>>>>>            
39794>>>>>>>            If (pResultWStr) Begin
39796>>>>>>>                Move (PointerToWString(pResultWStr)) to sResult
39797>>>>>>>            End
39797>>>>>>>>
39797>>>>>>>            Else Begin
39798>>>>>>>                Move "" to sResult
39799>>>>>>>            End
39799>>>>>>>>
39799>>>>>>>        End
39799>>>>>>>>
39799>>>>>>>        Else Begin
39800>>>>>>>            Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLColumnValue"
39801>>>>>>>        End
39801>>>>>>>>
39801>>>>>>>        
39801>>>>>>>        Function_Return sResult
39802>>>>>>>        
39802>>>>>>>    End_Function
39803>>>>>>>    
39803>>>>>>>    // Add a file to the files used to place the statement result in.
39803>>>>>>>    Procedure SQLBindFile Integer iFileNum
39805>>>>>>>        Integer ihdbc
39805>>>>>>>        Integer ihstmt
39805>>>>>>>        Integer iVoid
39805>>>>>>>        String  sDrvrId
39805>>>>>>>        String  sFileType
39805>>>>>>>        Integer bIsOpen
39805>>>>>>>        
39805>>>>>>>        // Get the cli handles
39805>>>>>>>        Get phCLIStatementHandle  to ihstmt
39806>>>>>>>        Get phCLIConnectionHandle to ihdbc
39807>>>>>>>        Get psDriverId            to sDrvrId
39808>>>>>>>        
39808>>>>>>>        // If a file number is not passed see if we can use the statement's
39808>>>>>>>        // default file number which is usually set with SetFileConnection
39808>>>>>>>        If (iFileNum = 0) Begin
39810>>>>>>>            Get piBindFile to iFileNum
39811>>>>>>>            If (iFileNum = 0) Begin
39813>>>>>>>                // Logic error, if 0 is passed as filenumber, piBindFile should be set.
39813>>>>>>>                Send StmtError CLIERR_SQLINVALID_BIND_FILE "piBindFile should be set" "SQLBindFile"
39814>>>>>>>                
39814>>>>>>>                Move 0 to SQLResult
39815>>>>>>>                Procedure_Return
39816>>>>>>>            End
39816>>>>>>>>
39816>>>>>>>        End
39816>>>>>>>>
39816>>>>>>>        
39816>>>>>>>        // Bind the file
39816>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39818>>>>>>>            // Chek if the file is open
39818>>>>>>>            Get_Attribute DF_FILE_OPENED of iFileNum to bIsOpen
39821>>>>>>>            If (bIsOpen) Begin
39823>>>>>>>                // Check if the file has the correct type
39823>>>>>>>                Get_Attribute DF_FILE_DRIVER of iFileNum to sFileType
39826>>>>>>>                If (sFileType = sDrvrId) Begin
39828>>>>>>>                    // Call the driver function to add a file to a statement
39828>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLBINDFILE ;                        Callback Self ;                        Passing ihdbc iFileNum ihstmt ;                        Result iVoid
39833>>>>>>>                End
39833>>>>>>>>
39833>>>>>>>                Else ;                    Send StmtError CLIERR_SQLINVALID_BIND_FILE ("File" * String(iFileNum) * "type incompatible with statement ("  + sFileType + ")") "SQLBindFile"
39835>>>>>>>            End
39835>>>>>>>>
39835>>>>>>>            Else ;                Send StmtError CLIERR_SQLINVALID_BIND_FILE ("File not open (number =" * String(iFileNum) + ")") "SQLBindFile"
39837>>>>>>>        End
39837>>>>>>>>
39837>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLBindFile"
39839>>>>>>>    End_Procedure
39840>>>>>>>    
39840>>>>>>>    
39840>>>>>>>    
39840>>>>>>>    // Get data of a column.                                  
39840>>>>>>>    Function SQLGetData Integer iCol Integer iLen Returns String
39842>>>>>>>        Integer ihdbc
39842>>>>>>>        Integer ihstmt
39842>>>>>>>        Integer iVoid
39842>>>>>>>        Integer iColSize
39842>>>>>>>        Integer iResult
39842>>>>>>>        String  sDrvrId
39842>>>>>>>        WString wResult
39842>>>>>>>        String  sEmpty
39842>>>>>>>        Integer bLegalColumn
39842>>>>>>>        
39842>>>>>>>        Integer iVariableBufferLength
39842>>>>>>>        
39842>>>>>>>        // Initialize
39842>>>>>>>        Move "" to sEmpty
39843>>>>>>>        Move 0 to iResult
39844>>>>>>>        
39844>>>>>>>        // Get the cli handles
39844>>>>>>>        Get phCLIStatementHandle  to ihstmt
39845>>>>>>>        Get phCLIConnectionHandle to ihdbc
39846>>>>>>>        Get psDriverId            to sDrvrId
39847>>>>>>>        
39847>>>>>>>        // Get the data
39847>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39849>>>>>>>            // Check if the column exists
39849>>>>>>>            If (iCol >= 1 and iCol <= piColumnCount(Self)) Begin
39851>>>>>>>                If (iLen = 0) Begin
39853>>>>>>>                    Get SQLColumnValue iCol to wResult
39854>>>>>>>                End
39854>>>>>>>>
39854>>>>>>>                Else Begin
39855>>>>>>>                    // Add 1 for string terminator
39855>>>>>>>                    Move (iLen + 1) to iLen
39856>>>>>>>                    
39856>>>>>>>                    Get piVariableBufferLength to iVariableBufferLength
39857>>>>>>>                    If (iLen > iVariableBufferLength) Begin
39859>>>>>>>                        // Allocate
39859>>>>>>>                        Move (Repeat(' ', iLen)) to wResult
39860>>>>>>>                        
39860>>>>>>>                        Set piVariableBufferLength to iLen
39861>>>>>>>                        Set psVariableBuffer       to wResult
39862>>>>>>>                    End
39862>>>>>>>>
39862>>>>>>>                    Else Begin
39863>>>>>>>                        Get psVariableBuffer       to wResult
39864>>>>>>>                    End
39864>>>>>>>>
39864>>>>>>>                    
39864>>>>>>>                    
39864>>>>>>>                    // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
39864>>>>>>>                    // in the next FUNC_SQLCOLUMNVALUE call.
39864>>>>>>>                    // If hdbc and hstmt have not changed since the last call we don't have to set it.
39864>>>>>>>                    If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
39866>>>>>>>                        // Setup function arguments
39866>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                            Callback 0 ;                            Passing ihdbc iCol ihstmt ;                            Result iVoid
39871>>>>>>>                        Move ihstmt to giLastSQLhstmt
39872>>>>>>>                        Move ihdbc to giLastSQLhdbc
39873>>>>>>>                    End
39873>>>>>>>>
39873>>>>>>>                    
39873>>>>>>>                    Move False to Err
39874>>>>>>>                    // Call the driver function to get the data
39874>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLGETDATA ;                        Callback Self ;                        Passing iCol iLen (AddressOf(wResult)) ;                        Result iResult
39879>>>>>>>                    
39879>>>>>>>                    // If something went wrong, adjust the result
39879>>>>>>>                    If (Err) Begin
39881>>>>>>>                        Move 0 to iResult
39882>>>>>>>                    End
39882>>>>>>>>
39882>>>>>>>                    
39882>>>>>>>                    // SQL_NO_TOTAL (-4) Not all data retrieved. Unknown how much is left. 
39882>>>>>>>                    If (iResult = -4) Begin
39884>>>>>>>                        Move (SizeOfWString(wResult)) to iResult
39885>>>>>>>                    End
39885>>>>>>>>
39885>>>>>>>                End
39885>>>>>>>>
39885>>>>>>>            End
39885>>>>>>>>
39885>>>>>>>            Else Begin
39886>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLGetData"
39887>>>>>>>            End
39887>>>>>>>>
39887>>>>>>>        End
39887>>>>>>>>
39887>>>>>>>        Else Begin
39888>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLGetData"
39889>>>>>>>        End
39889>>>>>>>>
39889>>>>>>>        
39889>>>>>>>        // Fill global result
39889>>>>>>>        If (iResult > 0) Begin
39891>>>>>>>            Move 1 to SQLResult // SQLResult == 1 : Something was found
39892>>>>>>>        End
39892>>>>>>>>
39892>>>>>>>        Else Begin
39893>>>>>>>           Move 0 to SQLResult // SQLResult == 0 : no (more) data found
39894>>>>>>>        End
39894>>>>>>>>
39894>>>>>>>        
39894>>>>>>>        Function_Return (CString(wResult))
39895>>>>>>>    End_Function
39896>>>>>>>
39896>>>>>>>    // SQLGetDataToUChar (SQLGetData returning uchar array)
39896>>>>>>>    // Use for binary data and for character data containing Unicode non-bmp characters
39896>>>>>>>    Function SQLGetDataToUChar Integer iCol Integer iLen Returns UChar[]
39898>>>>>>>        Integer ihdbc
39898>>>>>>>        Integer ihstmt
39898>>>>>>>        Integer iVoid
39898>>>>>>>        Integer iColSize
39898>>>>>>>        Integer iResult
39898>>>>>>>        String  sDrvrId
39898>>>>>>>        UChar[] uaResult
39899>>>>>>>        
39899>>>>>>>        Integer iSQLType
39899>>>>>>>        Integer iBinaryType
39899>>>>>>>        Integer iLenArray
39899>>>>>>>        Integer iResizeSize
39899>>>>>>>        
39899>>>>>>>        Move 0 to iResult
39900>>>>>>>        
39900>>>>>>>        // Get the cli handles
39900>>>>>>>        Get phCLIStatementHandle  to ihstmt
39901>>>>>>>        Get phCLIConnectionHandle to ihdbc
39902>>>>>>>        Get psDriverId            to sDrvrId
39903>>>>>>>        
39903>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39905>>>>>>>            // Check if the column exists
39905>>>>>>>            If (iCol >= 1 and iCol <= piColumnCount(Self)) Begin
39907>>>>>>>                            
39907>>>>>>>                Get SQLColumnType iCol to iSQLType
39908>>>>>>>                If ( (iSQLType = SQL_BINARY) or (iSQLType = SQL_VARBINARY) or (iSQLType = SQL_LONGVARBINARY) ) Begin
39910>>>>>>>                    Move 1 to iBinaryType
39911>>>>>>>                End
39911>>>>>>>>
39911>>>>>>>                Else Begin
39912>>>>>>>                    Move 0 to iBinaryType 
39913>>>>>>>                End
39913>>>>>>>>
39913>>>>>>>    
39913>>>>>>>                If (iBinaryType) Begin
39915>>>>>>>                    Move (ResizeArray(uaResult,iLen)) to uaResult
39916>>>>>>>                End
39916>>>>>>>>
39916>>>>>>>                Else Begin
39917>>>>>>>                    // Character type
39917>>>>>>>                    // returned as wstring (2 bytes per character)
39917>>>>>>>                    // Add 1 for string terminator
39917>>>>>>>                    Move (iLen + 1) to iLen
39918>>>>>>>                    Move (iLen * 2) to iLenArray // wstring 2 bytes per char
39919>>>>>>>                    Move (ResizeArray(uaResult,iLenArray)) to uaResult
39920>>>>>>>                End
39920>>>>>>>>
39920>>>>>>>
39920>>>>>>>                // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
39920>>>>>>>                // in the next FUNC_SQLCOLUMNVALUE call.
39920>>>>>>>                If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
39922>>>>>>>                    // Setup function arguments
39922>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                        Callback 0 ;                        Passing ihdbc iCol ihstmt ;                        Result iVoid
39927>>>>>>>                    Move ihstmt to giLastSQLhstmt
39928>>>>>>>                    Move ihdbc to giLastSQLhdbc
39929>>>>>>>                End
39929>>>>>>>>
39929>>>>>>>                
39929>>>>>>>                Move False to Err
39930>>>>>>>                
39930>>>>>>>                // Call the driver function to get the data
39930>>>>>>>                // iResult will be the length of the data in bytes 
39930>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLGETDATA ;                    Callback Self ;                    Passing iCol iLen (AddressOf(uaResult[0])) ;                    Result iResult
39935>>>>>>>                
39935>>>>>>>                // If something went wrong, adjust the result
39935>>>>>>>                If (Err) Begin
39937>>>>>>>                    Move 0 to iResult
39938>>>>>>>                End
39938>>>>>>>>
39938>>>>>>>                
39938>>>>>>>                // SQL_NO_TOTAL (-4) Not all data retrieved. Unknown how much is left. 
39938>>>>>>>                If (iResult = -4) Begin
39940>>>>>>>                    Move (SizeOfArray(uaResult)) to iResult
39941>>>>>>>                End
39941>>>>>>>>
39941>>>>>>>                
39941>>>>>>>                If (iBinaryType) Begin
39943>>>>>>>                    If (iResult < iLen) Begin
39945>>>>>>>                        Move (ResizeArray(uaResult,iResult)) to uaResult
39946>>>>>>>                    End
39946>>>>>>>>
39946>>>>>>>                End
39946>>>>>>>>
39946>>>>>>>                Else Begin
39947>>>>>>>                    // Character data
39947>>>>>>>                    //   iResult has length of data in bytes (without zero terminator)
39947>>>>>>>                    //   uaResult will have data + zero terminator
39947>>>>>>>                    If (iResult < (iLenArray - 2) ) Begin
39949>>>>>>>                        // Received less than requested, strip off trailing zeroes.
39949>>>>>>>                        Move iResult to iResizeSize
39950>>>>>>>                    End
39950>>>>>>>>
39950>>>>>>>                    Else Begin
39951>>>>>>>                        // Strip off zero terminator
39951>>>>>>>                        Move (iLenArray - 2) to iResizeSize
39952>>>>>>>                    End
39952>>>>>>>>
39952>>>>>>>                    
39952>>>>>>>                    Move (ResizeArray(uaResult,iResizeSize)) to uaResult
39953>>>>>>>                    
39953>>>>>>>                End
39953>>>>>>>>
39953>>>>>>>            End
39953>>>>>>>>
39953>>>>>>>            Else Begin
39954>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLGetData"
39955>>>>>>>            End
39955>>>>>>>>
39955>>>>>>>        End
39955>>>>>>>>
39955>>>>>>>        Else Begin
39956>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLGetData"
39957>>>>>>>        End
39957>>>>>>>>
39957>>>>>>>        
39957>>>>>>>        // Fill global result
39957>>>>>>>        If (iResult > 0) Begin
39959>>>>>>>            Move 1 to SQLResult // SQLResult == 1 : Something was found
39960>>>>>>>        End
39960>>>>>>>>
39960>>>>>>>        Else Begin
39961>>>>>>>           Move 0 to SQLResult // SQLResult == 0 : no (more) data found
39962>>>>>>>        End
39962>>>>>>>>
39962>>>>>>>        
39962>>>>>>>        Function_Return uaResult
39963>>>>>>>
39963>>>>>>>    End_Function
39964>>>>>>>    
39964>>>>>>>    
39964>>>>>>>    // Map a column name to a number, if the name id not found no
39964>>>>>>>    // error is generated the returned number will be 0 (zero) in
39964>>>>>>>    // that case
39964>>>>>>>    Function SQLColumnMap String sColname Returns Integer
39966>>>>>>>        Integer ihdbc
39966>>>>>>>        Integer ihstmt
39966>>>>>>>        Integer iNumColumns
39966>>>>>>>        Integer iColCount
39966>>>>>>>        Integer iColNum
39966>>>>>>>        String  sDrvrId
39966>>>>>>>        String  sCurColName
39966>>>>>>>        
39966>>>>>>>        // Get the cli handles
39966>>>>>>>        Get phCLIStatementHandle  to ihstmt
39967>>>>>>>        Get phCLIConnectionHandle to ihdbc
39968>>>>>>>        Get psDriverId            to sDrvrId
39969>>>>>>>        
39969>>>>>>>        // Get the number by looping through the column names
39969>>>>>>>        Move 0 to iColNum
39970>>>>>>>        Get SQLPrivateStmtAttribute SQLSTMTATTRIB_COLUMNCOUNT ihdbc sDrvrId ihstmt to iNumColumns
39971>>>>>>>        For iColCount from 1 to iNumColumns
39977>>>>>>>>
39977>>>>>>>            Get SQLPrivateColAttribute iColCount SQLCOLATTRIB_LABEL ihdbc sDrvrId ihstmt to sCurColName
39978>>>>>>>            If (Uppercase(Trim(sColName)) = Uppercase(Trim(sCurColName))) ;                Move iColCount to iColNum
39981>>>>>>>            
39981>>>>>>>            If (iColNum) ;                Break
39984>>>>>>>        Loop
39985>>>>>>>>
39985>>>>>>>        
39985>>>>>>>        Function_Return iColNum
39986>>>>>>>    End_Function
39987>>>>>>>    
39987>>>>>>>    
39987>>>>>>>    // SQLStmtAttribute
39987>>>>>>>    // Moved to SQLGetStatementAttribute. 
39987>>>>>>>    // This function is still here for backward compatibility.
39987>>>>>>>
39987>>>>>>>    Function SQLStmtAttribute Integer iAttribId Returns String
39989>>>>>>>        String  sResult
39989>>>>>>>
39989>>>>>>>        Get SQLGetStmtAttribute iAttribId to sResult        
39990>>>>>>>        
39990>>>>>>>        Function_Return sResult
39991>>>>>>>    End_Function
39992>>>>>>>
39992>>>>>>> 
39992>>>>>>>   Function SQLGetStmtAttribute Integer iAttribId Returns String
39994>>>>>>>        Integer ihdbc
39994>>>>>>>        Integer ihstmt
39994>>>>>>>        String  sResult
39994>>>>>>>        String  sDrvrId
39994>>>>>>>        
39994>>>>>>>        // Initialize
39994>>>>>>>        Move "" to sResult
39995>>>>>>>        
39995>>>>>>>        // Get the cli handles
39995>>>>>>>        Get phCLIStatementHandle  to ihstmt
39996>>>>>>>        Get phCLIConnectionHandle to ihdbc
39997>>>>>>>        Get psDriverId            to sDrvrId
39998>>>>>>>        
39998>>>>>>>        // Get the attribute
39998>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") ;            Get SQLPrivateStmtAttribute iAttribId ihdbc sDrvrId ihstmt to sResult
40001>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLGetStmtAttribute"
40003>>>>>>>        
40003>>>>>>>        Function_Return sResult
40004>>>>>>>    End_Function
40005>>>>>>>
40005>>>>>>>    
40005>>>>>>>    Procedure SQLSetStmtAttribute Integer iAttribId String sAttribValue 
40007>>>>>>>
40007>>>>>>>        Integer ihdbc
40007>>>>>>>        Integer ihstmt
40007>>>>>>>        String  sDrvrId
40007>>>>>>>        
40007>>>>>>>        Integer iLen
40007>>>>>>>        Integer bLegalAttrib
40007>>>>>>>        Integer iVoid
40007>>>>>>>        Integer iAttribValue
40007>>>>>>>
40007>>>>>>>        Get phCLIStatementHandle  to ihstmt
40008>>>>>>>        Get phCLIConnectionHandle to ihdbc
40009>>>>>>>        Get psDriverId            to sDrvrId
40010>>>>>>>        
40010>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40012>>>>>>>            Case Begin
40012>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_CURSOR_TYPE)
40014>>>>>>>                    Move DFTRUE to bLegalAttrib
40015>>>>>>>                    Break
40016>>>>>>>                    
40016>>>>>>>                Case Else
40016>>>>>>>                    Move DFFALSE to bLegalAttrib
40017>>>>>>>                    Send SQLIllegalAttribute ("Attribute is = " + String(iAttribId) + ")") "SQLSetStmtAttribute"
40018>>>>>>>            Case End
40018>>>>>>>
40018>>>>>>>            If (bLegalAttrib) Begin
40020>>>>>>>                If (iAttribId = SQLSTMTATTRIB_CURSOR_TYPE) Begin
40022>>>>>>>                    
40022>>>>>>>                    Move sAttribValue to iAttribValue // Check numeric?
40023>>>>>>>                    Case Begin
40023>>>>>>>                        Case (iAttribValue = SQL_CURSOR_FORWARD_ONLY)
40025>>>>>>>                        Case (iAttribValue = SQL_CURSOR_DYNAMIC)
40028>>>>>>>                        Case (iAttribValue = SQL_CURSOR_KEYSET_DRIVEN)
40031>>>>>>>                        Case (iAttribValue = SQL_CURSOR_STATIC)
40034>>>>>>>                            Break
40035>>>>>>>                            
40035>>>>>>>                        Case Else
40035>>>>>>>                            Move DFFALSE to bLegalAttrib
40036>>>>>>>                            Send StmtError CLIERR_SQLINVALID_ATTRIBUTE (SFormat("Invalid value for SQLSTMTATTRIB_CURSOR_TYPE: %1", iAttribValue)) "SQLSetStmtAttribute"
40037>>>>>>>
40037>>>>>>>                    Case End
40037>>>>>>>                End
40037>>>>>>>>
40037>>>>>>>            End
40037>>>>>>>>
40037>>>>>>>
40037>>>>>>>            
40037>>>>>>>            If (bLegalAttrib) Begin
40039>>>>>>>                
40039>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                    Callback Self ;                    Passing ihdbc iVoid ihstmt ;                    Result iVoid
40044>>>>>>>                
40044>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLSETSTMTINTATTRIB ;                    Callback Self ;                    Passing iAttribId iAttribValue 0 ;                    Result iVoid
40049>>>>>>>            End
40049>>>>>>>>
40049>>>>>>>        End
40049>>>>>>>>
40049>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLPrivateStmtAttribute"
40051>>>>>>>        
40051>>>>>>>        
40051>>>>>>>        
40051>>>>>>>    End_Procedure
40052>>>>>>>    
40052>>>>>>>    
40052>>>>>>>    
40052>>>>>>>    Function SQLPrivateStmtAttribute Integer iAttribId Integer ihdbc String sDrvrId Integer ihstmt Returns String
40054>>>>>>>        String  sResult
40054>>>>>>>        Integer iLen
40054>>>>>>>        Integer bLegalAttrib
40054>>>>>>>        
40054>>>>>>>        // Initialize
40054>>>>>>>        Move ""     to sResult
40055>>>>>>>        
40055>>>>>>>        // Get the attribute
40055>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40057>>>>>>>            Case Begin
40057>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_COLUMNCOUNT)
40059>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_ROWCOUNT)
40062>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_ROWCOUNT_TYPE)
40065>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_NUMMESSAGES)
40068>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_CURSOR_TYPE)
40071>>>>>>>                    Move DFTRUE to bLegalAttrib
40072>>>>>>>                    Break
40073>>>>>>>                    
40073>>>>>>>                Case Else
40073>>>>>>>                    Move DFFALSE to bLegalAttrib
40074>>>>>>>                    Send SQLIllegalAttribute ("Attribute is = " + String(iAttribId) + ")") "SQLPrivateStmtAttribute"
40075>>>>>>>            Case End
40075>>>>>>>            
40075>>>>>>>            If (bLegalAttrib) Begin
40077>>>>>>>                // Setup function arguments
40077>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLSTMTINTATTRIB ;                    Callback Self ;                    Passing ihdbc iAttribId ihstmt ;                    Result sResult
40082>>>>>>>            End
40082>>>>>>>>
40082>>>>>>>        End
40082>>>>>>>>
40082>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLPrivateStmtAttribute"
40084>>>>>>>        
40084>>>>>>>        Function_Return sResult
40085>>>>>>>    End_Function
40086>>>>>>>    
40086>>>>>>>    
40086>>>>>>>    
40086>>>>>>>    // Get a column's attribute
40086>>>>>>>    Function SQLColAttribute Integer iCol Integer iAttribId Returns String
40088>>>>>>>        Integer ihdbc
40088>>>>>>>        Integer ihstmt
40088>>>>>>>        String  sResult
40088>>>>>>>        String  sDrvrId
40088>>>>>>>        
40088>>>>>>>        // Initialize
40088>>>>>>>        Move "" to sResult
40089>>>>>>>        
40089>>>>>>>        // Get the cli handles
40089>>>>>>>        Get phCLIStatementHandle  to ihstmt
40090>>>>>>>        Get phCLIConnectionHandle to ihdbc
40091>>>>>>>        Get psDriverId            to sDrvrId
40092>>>>>>>        
40092>>>>>>>        // Get the attribute
40092>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") ;            Get SQLPrivateColAttribute iCol iAttribId ihdbc sDrvrId ihstmt to sResult
40095>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLColAttribute"
40097>>>>>>>        
40097>>>>>>>        Function_Return sResult
40098>>>>>>>    End_Function
40099>>>>>>>    
40099>>>>>>>    Function SQLPrivateColAttribute Integer iCol Integer iAttribId Integer ihdbc String sDrvrId Integer ihstmt Returns String
40101>>>>>>>        String  sResult
40101>>>>>>>        String  sEmpty
40101>>>>>>>        Integer bIsStringAttribute
40101>>>>>>>        Integer iLen
40101>>>>>>>        Integer iVoid
40101>>>>>>>        Integer bLegalAttrib
40101>>>>>>>        Integer bLegalColumn
40101>>>>>>>        
40101>>>>>>>        // Initialize
40101>>>>>>>        Move "" to sResult
40102>>>>>>>        Move "" to sEmpty
40103>>>>>>>        Move 0  to iLen
40104>>>>>>>        
40104>>>>>>>        // Get the attribute
40104>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40106>>>>>>>            Get SQLPrivateColumnIsLegal ihdbc sDrvrId ihstmt iCol to bLegalColumn
40107>>>>>>>            If (bLegalColumn) Begin
40109>>>>>>>                // Determine the atributes type
40109>>>>>>>                Case Begin
40109>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_SIZE)
40111>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_LENGTH)
40114>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_PRECISION)
40117>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_SQLTYPE)
40120>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_NULLABLE)
40123>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_DFTYPE)
40126>>>>>>>                        Move DFFALSE to bIsStringAttribute
40127>>>>>>>                        Move DFTRUE to bLegalAttrib
40128>>>>>>>                        Break
40129>>>>>>>                        
40129>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_LABEL)
40132>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_BASECOLUMNNAME)
40135>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_BASETABLENAME)
40138>>>>>>>                        Move DFTRUE to bIsStringAttribute
40139>>>>>>>                        Move DFTRUE to bLegalAttrib
40140>>>>>>>                        Break
40141>>>>>>>                        
40141>>>>>>>                    Case Else
40141>>>>>>>                        Move DFFALSE to bLegalAttrib
40142>>>>>>>                        Send SQLIllegalAttribute ("Attribute is = " + String(iAttribId) + ")") "SQLPrivateColAttribute"
40143>>>>>>>                Case End
40143>>>>>>>                
40143>>>>>>>                If (bLegalAttrib) Begin
40145>>>>>>>                    // Setup function arguments
40145>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                        Callback Self ;                        Passing ihdbc iCol ihstmt ;                        Result iVoid
40150>>>>>>>                    
40150>>>>>>>                    If (bIsStringAttribute) Begin
40152>>>>>>>                        // Call the driver function to get the data length
40152>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLCOLSTRINGATTRIBLEN ;                            Callback Self ;                            Passing sEmpty sEmpty iAttribId ;                            Result iLen
40157>>>>>>>                        
40157>>>>>>>                        If (iLen) Begin
40159>>>>>>>                            // Allocate
40159>>>>>>>                            Move (Repeat(' ', iLen)) to sResult
40160>>>>>>>                            
40160>>>>>>>                            // Call the driver function to get the name
40160>>>>>>>                            Call_Driver 0 sDrvrId Function FUNC_SQLCOLSTRINGATTRIB ;                                Callback Self ;                                Passing sResult sEmpty iAttribId ;                                Result iVoid
40165>>>>>>>                        End
40165>>>>>>>>
40165>>>>>>>                    End
40165>>>>>>>>
40165>>>>>>>                    Else Begin
40166>>>>>>>                        // get the attribute
40166>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLCOLINTATTRIB ;                            Callback Self ;                            Passing sEmpty sEmpty iAttribId ;                            Result sResult
40171>>>>>>>                    End
40171>>>>>>>>
40171>>>>>>>                End
40171>>>>>>>>
40171>>>>>>>            End
40171>>>>>>>>
40171>>>>>>>            Else ;                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLPrivateColAttribute"
40173>>>>>>>        End
40173>>>>>>>>
40173>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLPrivateColAttribute"
40175>>>>>>>        
40175>>>>>>>        Function_Return sResult
40176>>>>>>>    End_Function
40177>>>>>>>    
40177>>>>>>>    
40177>>>>>>>    // Preapre for calling a stored procedure, pass the procedure name.
40177>>>>>>>    Procedure SQLSetProcedureName String sProcName String sSchemaArg
40179>>>>>>>        Integer ihdbc
40179>>>>>>>        Integer ihstmt
40179>>>>>>>        String  sDrvrId
40179>>>>>>>        Integer iVoid
40179>>>>>>>        String  sSchema
40179>>>>>>>        String  sEmpty
40179>>>>>>>        
40179>>>>>>>        // Initialize
40179>>>>>>>        Move "" to sEmpty
40180>>>>>>>        
40180>>>>>>>        // Get the cli handles
40180>>>>>>>        Get phCLIStatementHandle  to ihstmt
40181>>>>>>>        Get phCLIConnectionHandle to ihdbc
40182>>>>>>>        Get psDriverId            to sDrvrId
40183>>>>>>>        
40183>>>>>>>        // Call the procedure
40183>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40185>>>>>>>            If (Num_Arguments >= 2) ;                Move sSchemaArg to sSchema
40188>>>>>>>            Else ;                Move "" to sSchema
40190>>>>>>>            
40190>>>>>>>            If (sSchema <> "") Begin
40192>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLSETPROCSCHEMA ;                    Callback Self ;                    Passing ihdbc sSchema ihstmt ;                    Result iVoid
40197>>>>>>>            End
40197>>>>>>>>
40197>>>>>>>            
40197>>>>>>>            // Call the procedure
40197>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLSETPROCNAME ;                Callback Self ;                Passing ihdbc sProcName ihstmt ;                Result iVoid
40202>>>>>>>            
40202>>>>>>>            Set piLastArgument to 0
40203>>>>>>>        End
40203>>>>>>>>
40203>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLSetProcedurename"
40205>>>>>>>    End_Procedure
40206>>>>>>>    
40206>>>>>>>    // Pass the next argument
40206>>>>>>>    Procedure SQLSetNextArgument String sArgument
40208>>>>>>>        Integer iArgnum
40208>>>>>>>        
40208>>>>>>>        Get piLastArgument to iArgnum
40209>>>>>>>        Increment iArgnum
40210>>>>>>>        Send SQLSetArgument iArgnum sArgument
40211>>>>>>>        Set piLastArgument to iArgnum
40212>>>>>>>    End_Procedure
40213>>>>>>>    
40213>>>>>>>    
40213>>>>>>>    
40213>>>>>>>    // Set the next argument
40213>>>>>>>    Procedure SQLSetArgument Integer iArgnum String sArgument
40215>>>>>>>        Integer ihdbc
40215>>>>>>>        Integer ihstmt
40215>>>>>>>        String  sDrvrId
40215>>>>>>>        Integer iVoid
40215>>>>>>>        String  sEmpty
40215>>>>>>>        
40215>>>>>>>        // Initialize
40215>>>>>>>        Move "" to sEmpty
40216>>>>>>>        
40216>>>>>>>        // Get the cli handles
40216>>>>>>>        Get phCLIStatementHandle  to ihstmt
40217>>>>>>>        Get phCLIConnectionHandle to ihdbc
40218>>>>>>>        Get psDriverId            to sDrvrId
40219>>>>>>>        
40219>>>>>>>        // Call the procedure
40219>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40221>>>>>>>            // Pass the information
40221>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback Self ;                Passing ihdbc iArgnum ihstmt ;                Result iVoid
40226>>>>>>>            
40226>>>>>>>            // Pass the argument
40226>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLSETPROCARG ;                Callback Self ;                Passing sArgument sEmpty 0 ;                Result iVoid
40231>>>>>>>        End
40231>>>>>>>>
40231>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLSetArgument"
40233>>>>>>>    End_Procedure
40234>>>>>>>    
40234>>>>>>>    Procedure SQLSetNextParameter String sParamValue Integer iParamType
40236>>>>>>>        Integer iParamNum 
40236>>>>>>>        Integer iType
40236>>>>>>>        
40236>>>>>>>        If (num_arguments < 2) Begin
40238>>>>>>>            Move typeString to iType
40239>>>>>>>        End
40239>>>>>>>>
40239>>>>>>>        Else Begin
40240>>>>>>>            Move iParamType to iType
40241>>>>>>>        End
40241>>>>>>>>
40241>>>>>>>        
40241>>>>>>>        Get piLastArgument to iParamNum
40242>>>>>>>        Increment iParamNum
40243>>>>>>>        Send SQLSetParameter iParamNum sParamValue iType
40244>>>>>>>        Set piLastArgument to iParamNum
40245>>>>>>>    End_Procedure
40246>>>>>>>
40246>>>>>>>    Procedure SQLSetParameter Integer iParamNum String sParamValue Integer iParamType
40248>>>>>>>        
40248>>>>>>>        Integer ihdbc
40248>>>>>>>        Integer ihstmt
40248>>>>>>>        String  sDrvrId
40248>>>>>>>        Integer iVoid
40248>>>>>>>        String  sEmpty
40248>>>>>>>        Integer iType
40248>>>>>>>        
40248>>>>>>>        If (num_arguments < 3) Begin
40250>>>>>>>            Move typeString to iType
40251>>>>>>>        End
40251>>>>>>>>
40251>>>>>>>        Else Begin
40252>>>>>>>            Move iParamType to iType
40253>>>>>>>        End
40253>>>>>>>>
40253>>>>>>>        
40253>>>>>>>        Case Begin
40253>>>>>>>            Case (iType = typeDate )    
40255>>>>>>>
40255>>>>>>>                If (sParamValue <> "") Begin
40257>>>>>>>                    ConvertToXml typeDate sParamValue to sParamValue
40258>>>>>>>                End
40258>>>>>>>>
40258>>>>>>>                
40258>>>>>>>                Break
40259>>>>>>>
40259>>>>>>>            Case (iType = typeDatetime )    
40262>>>>>>>
40262>>>>>>>                If (sParamValue <> "") Begin
40264>>>>>>>                    ConvertToXml esqlDatetime sParamValue to sParamValue
40265>>>>>>>                    Move (Replace('T',sParamValue,' ')) to sParamValue 
40266>>>>>>>                End
40266>>>>>>>>
40266>>>>>>>
40266>>>>>>>                Break
40267>>>>>>>
40267>>>>>>>            Case (iType = typeNumber )    
40270>>>>>>>
40270>>>>>>>                If (sParamValue <> "") Begin
40272>>>>>>>                    ConvertToXml typeNumber sParamValue to sParamValue
40273>>>>>>>                End
40273>>>>>>>>
40273>>>>>>>                
40273>>>>>>>                Break
40274>>>>>>>            
40274>>>>>>>            Case (iType = typeTime )    
40277>>>>>>>
40277>>>>>>>                If (sParamValue <> "") Begin
40279>>>>>>>                    ConvertToXml esqlTime sParamValue to sParamValue
40280>>>>>>>                End
40280>>>>>>>>
40280>>>>>>>                
40280>>>>>>>                Break
40281>>>>>>>                
40281>>>>>>>            Case Else
40281>>>>>>>                    // sParamValue is a string type or a type that must be passed as a string
40281>>>>>>>                    Break
40282>>>>>>>                
40282>>>>>>>        Case End
40282>>>>>>>        
40282>>>>>>>        
40282>>>>>>>        // Initialize
40282>>>>>>>        Move "" to sEmpty
40283>>>>>>>        
40283>>>>>>>        // Get the cli handles
40283>>>>>>>        Get phCLIStatementHandle  to ihstmt
40284>>>>>>>        Get phCLIConnectionHandle to ihdbc
40285>>>>>>>        Get psDriverId            to sDrvrId
40286>>>>>>>        
40286>>>>>>>        // Call the procedure
40286>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40288>>>>>>>            // Pass the information
40288>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback Self ;                Passing ihdbc iParamnum ihstmt ;                Result iVoid
40293>>>>>>>            
40293>>>>>>>            // Pass the argument
40293>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLSETPROCARG ;                Callback Self ;                Passing sParamValue sEmpty 0 ;                Result iVoid
40298>>>>>>>        End
40298>>>>>>>>
40298>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLSetParameter"
40300>>>>>>>    End_Procedure
40301>>>>>>>    
40301>>>>>>>    
40301>>>>>>>    // Call a stored procedure
40301>>>>>>>    Procedure SQLCall
40303>>>>>>>        Integer ihdbc
40303>>>>>>>        Integer ihstmt
40303>>>>>>>        String  sDrvrId
40303>>>>>>>        Integer iVoid
40303>>>>>>>        String  sEmpty
40303>>>>>>>        
40303>>>>>>>        // Initialize
40303>>>>>>>        Move "" to sEmpty
40304>>>>>>>        
40304>>>>>>>        // Get the cli handles
40304>>>>>>>        Get phCLIStatementHandle  to ihstmt
40305>>>>>>>        Get phCLIConnectionHandle to ihdbc
40306>>>>>>>        Get psDriverId            to sDrvrId
40307>>>>>>>        
40307>>>>>>>        // Call the procedure
40307>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40309>>>>>>>            // Call the procedure
40309>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCALL ;                Callback Self ;                Passing ihdbc sEmpty ihstmt ;                Result iVoid
40314>>>>>>>            
40314>>>>>>>            Send SQLGetStatementAttributes
40315>>>>>>>            Set piLastArgument to 0
40316>>>>>>>        End
40316>>>>>>>>
40316>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLCall"
40318>>>>>>>    End_Procedure
40319>>>>>>>    
40319>>>>>>>    
40319>>>>>>>    // Get the next argument
40319>>>>>>>    Function SQLGetNextArgument Returns String
40321>>>>>>>        Integer iArgnum
40321>>>>>>>        String  sResult
40321>>>>>>>        
40321>>>>>>>        Get piLastArgument to iArgnum
40322>>>>>>>        Increment iArgnum
40323>>>>>>>        Get SQLGetArgument iArgnum to sResult
40324>>>>>>>        Set piLastArgument to iArgnum
40325>>>>>>>        
40325>>>>>>>        Function_Return sResult
40326>>>>>>>    End_Function
40327>>>>>>>    
40327>>>>>>>    
40327>>>>>>>    
40327>>>>>>>    // Get the specified argument from a procedure
40327>>>>>>>    Function SQLGetArgument Integer iArgnum Returns String
40329>>>>>>>        Integer ihdbc
40329>>>>>>>        Integer ihstmt
40329>>>>>>>        String  sDrvrId
40329>>>>>>>        Integer iVoid
40329>>>>>>>        String  sEmpty
40329>>>>>>>        String  sArgument
40329>>>>>>>        Integer iLen
40329>>>>>>>        
40329>>>>>>>        // Initialize
40329>>>>>>>        Move "" to sEmpty
40330>>>>>>>        Move "" to sArgument
40331>>>>>>>        
40331>>>>>>>        // Get the cli handles
40331>>>>>>>        Get phCLIStatementHandle  to ihstmt
40332>>>>>>>        Get phCLIConnectionHandle to ihdbc
40333>>>>>>>        Get psDriverId            to sDrvrId
40334>>>>>>>        
40334>>>>>>>        // Call the procedure
40334>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40336>>>>>>>            // Pass the information
40336>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback Self ;                Passing ihdbc iArgnum ihstmt ;                Result iVoid
40341>>>>>>>            
40341>>>>>>>            // Get the length
40341>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLGETPROCARGLEN ;                Callback Self ;                Passing sEmpty sEmpty 0 ;                Result iLen
40346>>>>>>>            
40346>>>>>>>            If (iLen) Begin
40348>>>>>>>                // Allocate
40348>>>>>>>                Move (Repeat(' ', iLen)) to sArgument
40349>>>>>>>                
40349>>>>>>>                // Pass the argument
40349>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLGETPROCARG ;                    Callback Self ;                    Passing sArgument sEmpty 0 ;                    Result iVoid
40354>>>>>>>            End
40354>>>>>>>>
40354>>>>>>>        End
40354>>>>>>>>
40354>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLGetArgument"
40356>>>>>>>        
40356>>>>>>>        Function_Return sArgument
40357>>>>>>>    End_Function
40358>>>>>>>    
40358>>>>>>>    
40358>>>>>>>    // Get the return value of a stored function
40358>>>>>>>    Function SQLReturnValue Returns String
40360>>>>>>>        Integer ihdbc
40360>>>>>>>        Integer ihstmt
40360>>>>>>>        String  sDrvrId
40360>>>>>>>        Integer iVoid
40360>>>>>>>        String  sEmpty
40360>>>>>>>        String  sRetval
40360>>>>>>>        Integer iLen
40360>>>>>>>        
40360>>>>>>>        // Initialize
40360>>>>>>>        Move "" to sEmpty
40361>>>>>>>        Move "" to sRetval
40362>>>>>>>        
40362>>>>>>>        // Get the cli handles
40362>>>>>>>        Get phCLIStatementHandle  to ihstmt
40363>>>>>>>        Get phCLIConnectionHandle to ihdbc
40364>>>>>>>        Get psDriverId            to sDrvrId
40365>>>>>>>        
40365>>>>>>>        // Call the procedure
40365>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40367>>>>>>>            // Get the length
40367>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLGETPROCRETVALLEN ;                Callback Self ;                Passing ihdbc sEmpty ihstmt  ;                Result iLen
40372>>>>>>>            
40372>>>>>>>            If (iLen) Begin
40374>>>>>>>                // Allocate
40374>>>>>>>                Move (Repeat(' ', iLen)) to sRetval
40375>>>>>>>                
40375>>>>>>>                // Pass the argument
40375>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLGETPROCRETVAL ;                    Callback Self ;                    Passing ihdbc sRetval ihstmt ;                    Result iVoid
40380>>>>>>>            End
40380>>>>>>>>
40380>>>>>>>        End
40380>>>>>>>>
40380>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLReturnValue"
40382>>>>>>>        
40382>>>>>>>        Function_Return sRetval
40383>>>>>>>    End_Function
40384>>>>>>>    
40384>>>>>>>    
40384>>>>>>>    // Switch to the next set
40384>>>>>>>    // Returns : 0   = No more result sets
40384>>>>>>>    //     <>0 = Switched to next set
40384>>>>>>>    Function SQLNextResultSet Returns Integer
40386>>>>>>>        Integer ihdbc
40386>>>>>>>        Integer ihstmt
40386>>>>>>>        String  sDrvrId
40386>>>>>>>        Integer iResult
40386>>>>>>>        String  sEmpty
40386>>>>>>>        
40386>>>>>>>        // Initialize
40386>>>>>>>        Move "" to sEmpty
40387>>>>>>>        Move 0  to iResult
40388>>>>>>>        
40388>>>>>>>        // Get the cli handles
40388>>>>>>>        Get phCLIStatementHandle  to ihstmt
40389>>>>>>>        Get phCLIConnectionHandle to ihdbc
40390>>>>>>>        Get psDriverId            to sDrvrId
40391>>>>>>>        
40391>>>>>>>        // Call the procedure
40391>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40393>>>>>>>            // Get the length
40393>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLNEXTRESULTSET ;                Callback Self ;                Passing ihdbc sEmpty ihstmt  ;                Result iResult
40398>>>>>>>            
40398>>>>>>>            Send SQLGetStatementAttributes
40399>>>>>>>            Set piLastArgument to 0
40400>>>>>>>        End
40400>>>>>>>>
40400>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLNextResultSet"
40402>>>>>>>        
40402>>>>>>>        Function_Return iResult
40403>>>>>>>    End_Function
40404>>>>>>>    
40404>>>>>>>    
40404>>>>>>>    // Setup a file that will be acivated after a succesfull
40404>>>>>>>    //fetch on the statement
40404>>>>>>>    Procedure SQLFetchActivatesBuffer Integer iFileNum Integer bState
40406>>>>>>>        Integer ihdbc
40406>>>>>>>        Integer ihstmt
40406>>>>>>>        String  sDrvrId
40406>>>>>>>        Integer iResult
40406>>>>>>>        Integer bIsOpen
40406>>>>>>>        Integer iVoid
40406>>>>>>>        String  sFileType
40406>>>>>>>        
40406>>>>>>>        // Check if file is open
40406>>>>>>>        Get_Attribute DF_FILE_OPENED of iFileNum to bIsOpen
40409>>>>>>>        If (bIsOpen) Begin
40411>>>>>>>            // Get the cli handles
40411>>>>>>>            Get phCLIStatementHandle  to ihstmt
40412>>>>>>>            Get phCLIConnectionHandle to ihdbc
40413>>>>>>>            Get psDriverId            to sDrvrId
40414>>>>>>>            
40414>>>>>>>            // Call the procedure
40414>>>>>>>            If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40416>>>>>>>                // Check if the file has the correct type
40416>>>>>>>                Get_Attribute DF_FILE_DRIVER of iFileNum to sFileType
40419>>>>>>>                If (sFileType = sDrvrId) Begin
40421>>>>>>>                    // Setup the buffer
40421>>>>>>>                    Call_Driver iFileNum sDrvrId Function FUNC_SQLBUFFERSTATUS ;                        Callback Self ;                        Passing ihdbc bState ihstmt  ;                        Result iVoid
40426>>>>>>>                End
40426>>>>>>>>
40426>>>>>>>                Else ;                    Send StmtError CLIERR_SQLINVALID_BIND_FILE ("File" * String(iFileNum) * "type incompatible with statement ("  + sFileType + ")") "SQLBindFile"
40428>>>>>>>            End
40428>>>>>>>>
40428>>>>>>>            Else ;                Send HandleError ihstmt ihdbc sDrvrId "SQLFetchActivatesBuffer"
40430>>>>>>>        End
40430>>>>>>>>
40430>>>>>>>        Else ;            Send StmtError CLIERR_SQLINVALID_BUFFER ("File not open (number =" * String(iFileNum) + ")") "SQLFetchActivatesBuffer"
40432>>>>>>>    End_Procedure
40433>>>>>>>    
40433>>>>>>>    
40433>>>>>>>    
40433>>>>>>>    Function SQLGetMessage Integer iMessageNum Returns String
40435>>>>>>>        Integer ihdbc
40435>>>>>>>        Integer ihstmt
40435>>>>>>>        String  sDrvrId
40435>>>>>>>        String  sMessage
40435>>>>>>>        Integer iVoid
40435>>>>>>>        
40435>>>>>>>        // Initialize
40435>>>>>>>        Move "" to sMessage
40436>>>>>>>        
40436>>>>>>>        // Get the cli handles
40436>>>>>>>        Get phCLIStatementHandle  to ihstmt
40437>>>>>>>        Get phCLIConnectionHandle to ihdbc
40438>>>>>>>        Get psDriverId            to sDrvrId
40439>>>>>>>        
40439>>>>>>>        // Call the procedure
40439>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40441>>>>>>>            // Setup function arguments
40441>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback Self ;                Passing ihdbc iMessageNum ihstmt ;                Result iVoid
40446>>>>>>>            
40446>>>>>>>            Move (Repeat(' ', 1024)) to sMessage
40447>>>>>>>            // Get the length
40447>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLGETMESSAGE ;                Callback Self ;                Passing iVoid sMessage iVoid ;                Result iVoid
40452>>>>>>>        End
40452>>>>>>>>
40452>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLGetDiagRec"
40454>>>>>>>        
40454>>>>>>>        Function_Return sMessage
40455>>>>>>>    End_Function
40456>>>>>>>    
40456>>>>>>>    
40456>>>>>>>    
40456>>>>>>>    // Remove the component identifier from a diagnostic message
40456>>>>>>>    Function RemoveComponentIdentifier String sDiagMessage Returns String
40458>>>>>>>        While (Left(sDiagMessage, 1) = "[")
40462>>>>>>>            Move (Right(sDiagMessage, Length(sDiagMessage) - Pos("]", sDiagMessage))) to sDiagMessage
40463>>>>>>>        Loop
40464>>>>>>>>
40464>>>>>>>        
40464>>>>>>>        Function_Return sDiagMessage
40465>>>>>>>    End_Function
40466>>>>>>>    
40466>>>>>>>    
40466>>>>>>>    
40466>>>>>>>    // Convert a DataFlex date to a SQL Date. Use dummy zero dates.
40466>>>>>>>    Function DFDateToSQLDate Date dDFDate Integer iSQLType Returns String
40468>>>>>>>        
40468>>>>>>>        Integer iType
40468>>>>>>>        String  sSQLDate
40468>>>>>>>        Integer iOrgDateFmt
40468>>>>>>>        Integer iOrgDateSep
40468>>>>>>>        
40468>>>>>>>        String sDriverId
40468>>>>>>>        String sDummyZeroDate
40468>>>>>>>        String sDummyZeroDateMssqlDatetime
40468>>>>>>>        
40468>>>>>>>        // Change date format to military, SQL dates are military dates
40468>>>>>>>        Get_Attribute DF_DATE_FORMAT to iOrgDateFmt
40471>>>>>>>        Get_Attribute DF_DATE_SEPARATOR to iOrgDateSep
40474>>>>>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_MILITARY
40477>>>>>>>        Set_Attribute DF_DATE_SEPARATOR to (Ascii('-'))
40480>>>>>>>        
40480>>>>>>>        // We only need to convert if the date is 0
40480>>>>>>>        If (Integer(dDFDate = 0)) Begin
40482>>>>>>>            
40482>>>>>>>            If (num_arguments < 2) Begin
40484>>>>>>>                Move SQL_TYPE_TIMESTAMP to iType
40485>>>>>>>            End
40485>>>>>>>>
40485>>>>>>>            Else Begin
40486>>>>>>>                Move iSQLType to iType
40487>>>>>>>            End
40487>>>>>>>>
40487>>>>>>>            
40487>>>>>>>            
40487>>>>>>>            Get psDriverID to sDriverId
40488>>>>>>>            Get psDummyZeroDate to sDummyZeroDate
40489>>>>>>>            
40489>>>>>>>            If ( (iType = SQL_TYPE_TIMESTAMP) and (sDriverID = 'MSSQLDRV') ) Begin
40491>>>>>>>                Get psDummyZeroDateMssqlDatetime to sDummyZeroDateMssqlDatetime
40492>>>>>>>                Move sDummyZeroDateMssqlDatetime to sSQLDate
40493>>>>>>>            End
40493>>>>>>>>
40493>>>>>>>            Else Begin
40494>>>>>>>                Move sDummyZeroDate to sSQLDate
40495>>>>>>>            End
40495>>>>>>>>
40495>>>>>>>            
40495>>>>>>>        End
40495>>>>>>>>
40495>>>>>>>        Else Begin
40496>>>>>>>            Move dDFDate to sSQLDate
40497>>>>>>>        End
40497>>>>>>>>
40497>>>>>>>        
40497>>>>>>>        // Change date format back to original
40497>>>>>>>        Set_Attribute DF_DATE_FORMAT to iOrgDateFmt
40500>>>>>>>        Set_Attribute DF_DATE_SEPARATOR to iOrgDateSep
40503>>>>>>>        
40503>>>>>>>        Function_Return sSQLDate
40504>>>>>>>    End_Function
40505>>>>>>>    
40505>>>>>>>    
40505>>>>>>>    // Convert a SQL date to a DataFlex Date. Use dummy zero dates.
40505>>>>>>>    Function SQLDateToDFDate String sSQLDate Returns Date
40507>>>>>>>        
40507>>>>>>>        Integer iType
40507>>>>>>>        Date    dDFDate
40507>>>>>>>        Integer iOrgDateFmt
40507>>>>>>>        Integer iOrgDateSep
40507>>>>>>>        
40507>>>>>>>        String  sDriverId
40507>>>>>>>        String  sDummyZeroDate
40507>>>>>>>        String  sDummyZeroDateMssqlDatetime
40507>>>>>>>        
40507>>>>>>>        Get psDriverID to sDriverId
40508>>>>>>>        
40508>>>>>>>        Get psDummyZeroDate to sDummyZeroDate
40509>>>>>>>        Get psDummyZeroDateMssqlDatetime to sDummyZeroDateMssqlDatetime
40510>>>>>>>        
40510>>>>>>>        Get_Attribute DF_DATE_FORMAT to iOrgDateFmt
40513>>>>>>>        Get_Attribute DF_DATE_SEPARATOR to iOrgDateSep
40516>>>>>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_MILITARY
40519>>>>>>>        Set_Attribute DF_DATE_SEPARATOR to (Ascii('-'))
40522>>>>>>>        
40522>>>>>>>        Move (Left(sSQLDate,10)) to sSQLDate
40523>>>>>>>        
40523>>>>>>>        If ( (sSQLDate = sDummyZeroDate) or ;            ( (sDriverId = 'MSSQLDRV') and (sSQLDate = sDummyZeroDateMssqlDatetime) ) )  Begin
40525>>>>>>>            Move 0 to dDFDate
40526>>>>>>>        End
40526>>>>>>>>
40526>>>>>>>        Else Begin
40527>>>>>>>            Move sSQLDate to dDFDate
40528>>>>>>>        End
40528>>>>>>>>
40528>>>>>>>        
40528>>>>>>>        // Change date format back to original
40528>>>>>>>        Set_Attribute DF_DATE_FORMAT to iOrgDateFmt
40531>>>>>>>        Set_Attribute DF_DATE_SEPARATOR to iOrgDateSep
40534>>>>>>>        
40534>>>>>>>        Function_Return dDFDate
40535>>>>>>>    End_Function
40536>>>>>>>    
40536>>>>>>>End_Class
40537>>>>>>>
40537>>>>>>>
40537>>>>>>>// Connection object for embedded SQL                          
40537>>>>>>>// This provides the ability to create a connection for a driver.     
40537>>>>>>>// It will contain child statement objects                            
40537>>>>>>>
40537>>>>>>>Class cSQLConnection is a cObject
40538>>>>>>>    
40538>>>>>>>    Procedure Construct_object
40540>>>>>>>        Forward Send Construct_object
40542>>>>>>>        
40542>>>>>>>        Property Integer phCLIConnectionHandle       0
40543>>>>>>>        
40543>>>>>>>        Property String  psDriverID        ""
40544>>>>>>>        Property Integer piBindFile        0
40545>>>>>>>        
40545>>>>>>>        Property String psDummyZeroDate              '0001-01-01'
40546>>>>>>>        Property String psDummyZeroDateMssqlDatetime '1753-01-01'
40547>>>>>>>        
40547>>>>>>>    End_Procedure
40548>>>>>>>    
40548>>>>>>>    
40548>>>>>>>    
40548>>>>>>>    // Store basic information about the connection
40548>>>>>>>    Procedure StoreConnectionInfo Handle hCLIConnectionHandle String sDrvrId
40550>>>>>>>        
40550>>>>>>>        String sDummyZeroDate
40550>>>>>>>        Integer iDriverIndex
40550>>>>>>>        
40550>>>>>>>        Set phCLIConnectionHandle to hCLIConnectionHandle
40551>>>>>>>        Set psDriverID            to sDrvrId
40552>>>>>>>        
40552>>>>>>>        Case Begin
40552>>>>>>>            Case (sDrvrId = "MSSQLDRV")
40554>>>>>>>                Set psDummyZeroDate to '0001-01-01'
40555>>>>>>>                Set psDummyZeroDateMssqlDatetime to '1753-01-01'
40556>>>>>>>                Break
40557>>>>>>>            Case (sDrvrId = "DB2_DRV")
40560>>>>>>>                Set psDummyZeroDate to '0001-01-01'
40561>>>>>>>                Break
40562>>>>>>>            Case (sDrvrId = "ODBC_DRV")
40565>>>>>>>                Get DriverIndex "ODBC_DRV" to iDriverIndex
40566>>>>>>>                If (iDriverIndex <> 0) Begin
40568>>>>>>>                    Get_Attribute DF_DRIVER_DUMMY_ZERO_DATE_VALUE of iDriverIndex to sDummyZeroDate
40571>>>>>>>                End
40571>>>>>>>>
40571>>>>>>>                Else Begin
40572>>>>>>>                    Move '0001-01-01' to sDummyZeroDate
40573>>>>>>>                End
40573>>>>>>>>
40573>>>>>>>
40573>>>>>>>                Set psDummyZeroDate to sDummyZeroDate
40574>>>>>>>                Break
40575>>>>>>>                
40575>>>>>>>        Case End
40575>>>>>>>        
40575>>>>>>>    End_Procedure
40576>>>>>>>    
40576>>>>>>>    Function DriverIndex String sDriver Returns Integer
40578>>>>>>>        
40578>>>>>>>        String  sCurrentDriver
40578>>>>>>>        Integer iNumberOfDrivers iDriver iCount
40578>>>>>>>        
40578>>>>>>>        Move 0 to iDriver
40579>>>>>>>        
40579>>>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
40582>>>>>>>        For iCount from 1 to iNumberOfDrivers
40588>>>>>>>>
40588>>>>>>>            
40588>>>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
40591>>>>>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriver) ) Begin
40593>>>>>>>                Move iCount to iDriver
40594>>>>>>>            End
40594>>>>>>>>
40594>>>>>>>        Loop
40595>>>>>>>>
40595>>>>>>>        
40595>>>>>>>        Function_Return iDriver
40596>>>>>>>        
40596>>>>>>>    End_Function
40597>>>>>>>
40597>>>>>>>    
40597>>>>>>>    // Destroy the SQLConnection object
40597>>>>>>>    Procedure DestroySQLConnection
40599>>>>>>>        Send Destroy
40600>>>>>>>    End_Procedure
40601>>>>>>>    
40601>>>>>>>    
40601>>>>>>>    // Connect to a database server
40601>>>>>>>    // Returns : 1 Succesfully connected
40601>>>>>>>    //           0 Not connected
40601>>>>>>>    Function SQLConnect String sDrvrID String sConnect Returns Integer
40603>>>>>>>        Integer ihdbc
40603>>>>>>>        String  sEmpty
40603>>>>>>>        
40603>>>>>>>        // Initialize
40603>>>>>>>        Move "" to sEmpty
40604>>>>>>>        Move 0  to ihdbc
40605>>>>>>>        
40605>>>>>>>        Move False to Err
40606>>>>>>>        
40606>>>>>>>        // Call the driver function to connect
40606>>>>>>>        Call_Driver 0 sDrvrId Function FUNC_SQLCONNECT ;            Callback Self ;            Passing sConnect sEmpty Self ;            Result ihdbc
40611>>>>>>>        
40611>>>>>>>        // If there was an error, make result invalid
40611>>>>>>>        If (Err) ;            Move 0 to ihdbc
40614>>>>>>>        
40614>>>>>>>        // Check result and store it
40614>>>>>>>        If (ihdbc <> 0) ;            Send StoreConnectionInfo ihdbc sDrvrId
40617>>>>>>>        
40617>>>>>>>        // Return success status
40617>>>>>>>        Function_Return (ihdbc <> 0)
40618>>>>>>>    End_Function
40619>>>>>>>    
40619>>>>>>>    
40619>>>>>>>    // Use a connection of an already open file
40619>>>>>>>    Function SQLFileConnect Integer iFileNum Returns Integer
40621>>>>>>>        Integer ihdbc
40621>>>>>>>        Integer bIsOpen
40621>>>>>>>        String  sDrvrId
40621>>>>>>>        String  sEmpty
40621>>>>>>>        
40621>>>>>>>        // Initialize
40621>>>>>>>        Move "" to sEmpty
40622>>>>>>>        Move 0  to ihdbc
40623>>>>>>>        
40623>>>>>>>        // Check if file is open
40623>>>>>>>        Get_Attribute DF_FILE_OPENED of iFileNum to bIsOpen
40626>>>>>>>        If (bIsOpen) Begin
40628>>>>>>>            // Fill the driver id, assume longest is 255 characters
40628>>>>>>>            Move (Repeat(' ', 255)) to sDrvrId
40629>>>>>>>            Get_Attribute DF_FILE_DRIVER of iFileNum to sDrvrId
40632>>>>>>>            
40632>>>>>>>            Move False to Err
40633>>>>>>>            
40633>>>>>>>            // Call the driver function to connect
40633>>>>>>>            Call_Driver iFileNum sDrvrId Function FUNC_SQLFILECONNECT ;                Callback Self ;                Passing sEmpty sEmpty 0 ;                Result ihdbc
40638>>>>>>>            
40638>>>>>>>            // If there was an error, make result invalid
40638>>>>>>>            If (Err) ;                Move 0 to ihdbc
40641>>>>>>>            
40641>>>>>>>            // Check result and store it
40641>>>>>>>            If (ihdbc <> 0) Begin
40643>>>>>>>                // Somehow Call_driver overwrites the sDrvrId variable, restore it here
40643>>>>>>>                Get_Attribute DF_FILE_DRIVER of iFileNum to sDrvrId
40646>>>>>>>                Send StoreConnectionInfo ihdbc sDrvrId
40647>>>>>>>                
40647>>>>>>>                // Set filenum so it can be used for fetching
40647>>>>>>>                Set piBindFile to iFileNum
40648>>>>>>>            End
40648>>>>>>>>
40648>>>>>>>        End
40648>>>>>>>>
40648>>>>>>>        
40648>>>>>>>        // Return success status
40648>>>>>>>        Function_Return (ihdbc <> 0)
40649>>>>>>>    End_Function
40650>>>>>>>    
40650>>>>>>>    
40650>>>>>>>    // Establish an embedded SQL connection that uses an existing connection from an earlier login or open.
40650>>>>>>>    // Existing connections are identified by there connectstring. (can be obtained with DF_DRIVER_SERVER_NAME attribute)
40650>>>>>>>    // If sConnectString exist in the list of existing connections, that connection will be used for embedded SQL.
40650>>>>>>>    // The connectstring must be an exact match, but can be case insensitive
40650>>>>>>>    // The connectstring can contain a connection id. For example: "DFCONNID=MyConnectionID"
40650>>>>>>>    // If no matching connectstring is found, this function will return 0
40650>>>>>>>    // This function will only work with CLI connectivity kits 6.2 or later
40650>>>>>>>    Function SQLConnectionConnect String sDrvrID String sConnectString Returns Integer
40652>>>>>>>        Integer ihdbc
40652>>>>>>>        String  sEmpty
40652>>>>>>>        Integer iFileNum
40652>>>>>>>        
40652>>>>>>>        // Initialize
40652>>>>>>>        Move "" to sEmpty
40653>>>>>>>        Move 0  to ihdbc
40654>>>>>>>        
40654>>>>>>>        Move False to Err
40655>>>>>>>        
40655>>>>>>>        // Call the driver function
40655>>>>>>>        //   Note we call FUNC_SQLFILECONNECT with iFileNum = 0.
40655>>>>>>>        //   This will perform SQLConnectionConnect instead of SQLFileConnect
40655>>>>>>>        Move 0 to iFileNum
40656>>>>>>>        Call_Driver iFileNum sDrvrId Function FUNC_SQLFILECONNECT ;            Callback Self ;            Passing sConnectString sEmpty Self ;            Result ihdbc
40661>>>>>>>        
40661>>>>>>>        // If there was an error, make result invalid
40661>>>>>>>        If (Err) ;            Move 0 to ihdbc
40664>>>>>>>        
40664>>>>>>>        // Check result and store it
40664>>>>>>>        If (ihdbc <> 0) ;            Send StoreConnectionInfo ihdbc sDrvrId
40667>>>>>>>        
40667>>>>>>>        // Return success status
40667>>>>>>>        Function_Return (ihdbc <> 0)
40668>>>>>>>    End_Function
40669>>>>>>>    
40669>>>>>>>    
40669>>>>>>>    // Disconnect from an embedded SQL server and free allocated
40669>>>>>>>    // resources
40669>>>>>>>    Procedure SQLDisconnect
40671>>>>>>>        Integer ihdbc
40671>>>>>>>        Integer iVoid
40671>>>>>>>        String  sDrvrId
40671>>>>>>>        String  sEmpty
40671>>>>>>>        
40671>>>>>>>        // Initialize
40671>>>>>>>        Move "" to sEmpty
40672>>>>>>>        
40672>>>>>>>        // Get the cli handle
40672>>>>>>>        Get phCLIConnectionHandle to ihdbc
40673>>>>>>>        Get psDriverId to sDrvrId
40674>>>>>>>        
40674>>>>>>>        // Free the CLI handle
40674>>>>>>>        If (ihdbc <> 0) Begin
40676>>>>>>>            // Call the driver function to disconnect
40676>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLDISCONNECT ;                Callback Self ;                Passing sEmpty sEmpty ihdbc ;                Result iVoid
40681>>>>>>>            
40681>>>>>>>            Move -1 to giLastSQLhdbc
40682>>>>>>>            
40682>>>>>>>            // Free the DataFlex handle
40682>>>>>>>            Send DestroySQLConnection
40683>>>>>>>        End
40683>>>>>>>>
40683>>>>>>>    End_Procedure
40684>>>>>>>    
40684>>>>>>>    // Create a cSQLStatement object
40684>>>>>>>    Function CreateSQLStatement Returns Handle
40686>>>>>>>        
40686>>>>>>>        Handle hoSQLStatement
40686>>>>>>>        Get Create (RefClass(cSQLStatement)) to hoSQLStatement
40687>>>>>>>        
40687>>>>>>>        // If the connection has a default Bind File, assign it to the
40687>>>>>>>        // statement object. The default is set when you open a file with a
40687>>>>>>>        // SetFileConnection command.
40687>>>>>>>        Set piBindFile of hoSQLStatement to (piBindFile(Self))
40688>>>>>>>        
40688>>>>>>>        Function_Return hoSQLStatement
40689>>>>>>>    End_Function
40690>>>>>>>    
40690>>>>>>>    
40690>>>>>>>    // Open a statement for use
40690>>>>>>>    Function SQLOpen Returns Handle
40692>>>>>>>        Handle  hoSQLStatement
40692>>>>>>>        Integer ihdbc
40692>>>>>>>        Integer ihstmt
40692>>>>>>>        Integer iVoid
40692>>>>>>>        String  sDrvrId
40692>>>>>>>        String  sEmpty
40692>>>>>>>        String  sDummyZeroDate
40692>>>>>>>        String  sDummyZeroDateMssqlDatetime
40692>>>>>>>        
40692>>>>>>>        // Initialize
40692>>>>>>>        Move "" to sEmpty
40693>>>>>>>        
40693>>>>>>>        // Get the cli handle to the connection
40693>>>>>>>        Get phCLIConnectionHandle to ihdbc
40694>>>>>>>        Get psDriverId  to sDrvrId
40695>>>>>>>        
40695>>>>>>>        // Allocate a new handle and populate it
40695>>>>>>>        If (ihdbc <> 0) Begin
40697>>>>>>>            // Create a new cSQLStatement object
40697>>>>>>>            Get CreateSQLStatement to hoSQLStatement
40698>>>>>>>            
40698>>>>>>>            // Call the driver function to allocate a cli statement handle
40698>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLOPEN ;                Callback Self ;                Passing hoSQLStatement sEmpty ihdbc ;                Result ihstmt
40703>>>>>>>            
40703>>>>>>>            // If unsuccessful destroy hoSQLStatement
40703>>>>>>>            If (ihstmt = 0) Begin
40705>>>>>>>                Send DestroySQLStatement of hoSQLStatement
40706>>>>>>>                Move 0 to hoSQLStatement
40707>>>>>>>            End
40707>>>>>>>>
40707>>>>>>>            Else Begin
40708>>>>>>>                Send StoreStatementInfo of hoSQLStatement ihstmt sDrvrId ihdbc
40709>>>>>>>                
40709>>>>>>>                // Store DummyZeroDate of hoSQLConnection in hoSQLStatement
40709>>>>>>>                Get psDummyZeroDate              to sDummyZeroDate
40710>>>>>>>                Get psDummyZeroDateMssqlDatetime to sDummyZeroDateMssqlDatetime
40711>>>>>>>                
40711>>>>>>>                Set psDummyZeroDate              of hoSQLStatement to sDummyZeroDate
40712>>>>>>>                Set psDummyZeroDateMssqlDatetime of hoSQLStatement to sDummyZeroDateMssqlDatetime
40713>>>>>>>                
40713>>>>>>>            End
40713>>>>>>>>
40713>>>>>>>        End
40713>>>>>>>>
40713>>>>>>>        
40713>>>>>>>        Function_Return hoSQLStatement
40714>>>>>>>    End_Function
40715>>>>>>>    
40715>>>>>>>End_Class
40716>>>>>>>
40716>>>>>>>// Manager for embedded SQL handles.                           
40716>>>>>>>// We want to be able to use multiple drivers and multiple            
40716>>>>>>>// connections within a driver and multiple statements within a       
40716>>>>>>>// connection. To allow this we have placed our own handle logic on   
40716>>>>>>>// top of the driver handle logic. This way we can handle the         
40716>>>>>>>// situation where two driver handles may be equal.                   
40716>>>>>>>
40716>>>>>>>Class cSQLHandleManager is a cObject
40717>>>>>>>    
40717>>>>>>>    Procedure Construct_object
40719>>>>>>>        Forward Send Construct_object
40721>>>>>>>        
40721>>>>>>>        Property String  psDefaultDriver      ""
40722>>>>>>>        Property String  psDefaultConnection  ""
40723>>>>>>>        
40723>>>>>>>    End_Procedure
40724>>>>>>>    
40724>>>>>>>    // Create a cSQLConnection object
40724>>>>>>>    Function CreateSQLConnection Returns Handle
40726>>>>>>>        Handle hoSQLConnection
40726>>>>>>>        Get Create (RefClass(cSQLConnection)) to hoSQLConnection
40727>>>>>>>        Function_Return hoSQLConnection
40728>>>>>>>    End_Function
40729>>>>>>>    
40729>>>>>>>    
40729>>>>>>>    // Store default connection information
40729>>>>>>>    Procedure SQLSetConnect String sDriver String sConnect
40731>>>>>>>        Set psDefaultDriver      to sDriver
40732>>>>>>>        Set psDefaultConnection  to sConnect
40733>>>>>>>    End_Procedure
40734>>>>>>>    
40734>>>>>>>    
40734>>>>>>>    // Make a connection to an embedded SQL server
40734>>>>>>>    // Returns : The DataFlex handle to the connection
40734>>>>>>>    Function SQLConnect String sDrvrID String sConnect Returns Integer
40736>>>>>>>        Handle hoSQLConnection
40736>>>>>>>        Integer bOK
40736>>>>>>>        
40736>>>>>>>        // Check arguments
40736>>>>>>>        If (sDrvrID = "" and sConnect = "") Begin
40738>>>>>>>            Get psDefaultDriver      to sDrvrId
40739>>>>>>>            Get psDefaultConnection  to sConnect
40740>>>>>>>        End
40740>>>>>>>>
40740>>>>>>>        
40740>>>>>>>        // Create a cSQLConnection object
40740>>>>>>>        Get CreateSQLConnection to hoSQLConnection
40741>>>>>>>        // Connect to the database
40741>>>>>>>        Get SQLConnect of hoSQLConnection sDrvrID sConnect to bOK
40742>>>>>>>        
40742>>>>>>>        // If connection to the database failed, destroy the cSQLConnection object and return a 0 handle
40742>>>>>>>        If (not(bOK)) Begin
40744>>>>>>>            Send DestroySQLConnection of hoSQLConnection
40745>>>>>>>            Move 0 to hoSQLConnection
40746>>>>>>>        End
40746>>>>>>>>
40746>>>>>>>        
40746>>>>>>>        Function_Return hoSQLConnection
40747>>>>>>>    End_Function
40748>>>>>>>    
40748>>>>>>>    
40748>>>>>>>    
40748>>>>>>>    // Make an existing connection available for use with Embedded SQL.
40748>>>>>>>    // The connection is identified by the number of a file
40748>>>>>>>    // that is open for that connection.
40748>>>>>>>    Function SQLFileConnect Integer iFileNum Returns Handle
40750>>>>>>>        Handle hoSQLConnection
40750>>>>>>>        Integer bOK
40750>>>>>>>        
40750>>>>>>>        // Create a cSQLConnection object
40750>>>>>>>        Get CreateSQLConnection to hoSQLConnection
40751>>>>>>>        Get SQLFileConnect of hoSQLConnection iFileNum to bOK
40752>>>>>>>        
40752>>>>>>>        // If connection to the database failed, destroy the cSQLConnection object and return a 0 handle
40752>>>>>>>        If (not(bOK)) Begin
40754>>>>>>>            Send DestroySQLConnection of hoSQLConnection
40755>>>>>>>            Move 0 to hoSQLConnection
40756>>>>>>>        End
40756>>>>>>>>
40756>>>>>>>        
40756>>>>>>>        Function_Return hoSQLConnection
40757>>>>>>>    End_Function
40758>>>>>>>    
40758>>>>>>>    // Establish an embedded SQL connection that uses an existing connection from an earlier login or open.
40758>>>>>>>    // Existing connections are identified by there connectstring. (can be obtained with DF_DRIVER_SERVER_NAME attribute)
40758>>>>>>>    // If sConnectString exist in the list of existing connections, that connection will be used for embedded SQL.
40758>>>>>>>    // The connectstrings must be an exact match, but can be case insensitive
40758>>>>>>>    // If no matching connectstring is found, this function will return 0
40758>>>>>>>    // This function will only work with CLI connectivity kits 6.2 or later
40758>>>>>>>    Function SQLConnectionConnect String sDrvrID String sConnectString Returns Integer
40760>>>>>>>        Handle hoSQLConnection
40760>>>>>>>        Integer bOK
40760>>>>>>>        
40760>>>>>>>        // Check arguments
40760>>>>>>>        If (sDrvrID = "" and sConnectString = "") Begin
40762>>>>>>>            Get psDefaultDriver      to sDrvrId
40763>>>>>>>            Get psDefaultConnection  to sConnectString
40764>>>>>>>        End
40764>>>>>>>>
40764>>>>>>>        
40764>>>>>>>        // Create a cSQLConnection object
40764>>>>>>>        Get CreateSQLConnection to hoSQLConnection
40765>>>>>>>        // Connect to the database
40765>>>>>>>        Get SQLConnectionConnect of hoSQLConnection sDrvrID sConnectString to bOK
40766>>>>>>>        
40766>>>>>>>        // If connection to the database failed, destroy the cSQLConnection object and return a 0 handle
40766>>>>>>>        If (not(bOK)) Begin
40768>>>>>>>            Send DestroySQLConnection of hoSQLConnection
40769>>>>>>>            Move 0 to hoSQLConnection
40770>>>>>>>        End
40770>>>>>>>>
40770>>>>>>>        
40770>>>>>>>        Function_Return hoSQLConnection
40771>>>>>>>    End_Function
40772>>>>>>>    
40772>>>>>>>    
40772>>>>>>>End_Class
40773>>>>>Use MSSqldrv.pkg
Including file: MSSqldrv.pkg    (C:\Program Files\DataFlex 20.1\Pkg\MSSqldrv.pkg)
40773>>>>>>>//     Package that declares MS SQL driver constants and functions.
40773>>>>>>>//     This package can be used by developers who want to add Data Access
40773>>>>>>>//     MS SQL Client specific code to a DataFlex application.
40773>>>>>>>
40773>>>>>>>Use Cli.pkg
40773>>>>>>>Use SQL.pkg
40773>>>>>>>
40773>>>>>>>//   Driver Indentification
40773>>>>>>>
40773>>>>>>>//   Error number constants
40773>>>>>>>
40773>>>>>>>
40773>>>>>>>//   Possible DF_DRIVER_SQLSERVER_CLIENT_VERSION values
40773>>>>>>>
40773>>>>>>>
40773>>>>>>>
40773>>>>>>>
40773>>>>>>>
40773>>>>>>>
40773>>>>>>>// SQL Server spcific types.
40773>>>>>>>Define SQL_SS_TIMESTAMPOFFSET   for   (-155) //SQL server datetimeoffset type */
40773>>>>>>>Define SQL_SS_TIME2             for   (-154) //SQL server time type */
40773>>>>>>>Define SQL_SS_XML               for   (-152) //SQL server xml type */
40773>>>>>>>Define SQL_SS_VARIANT           for   (-150) //SQL server variant type */
40773>>>>>>>
40773>>>>>>>// SQL Server spcific types.
40773>>>>>>>Define SQL_TYPE_TIMESTAMP2      for   (-200) //SQL server datetime2 type */
40773>>>>>>>Define SQL_VARCHARMAX           for   (-201) //SQL server varchar(max) type */
40773>>>>>>>Define SQL_WVARCHARMAX          for   (-202) //SQL server wvarchar(max) type */
40773>>>>>>>Define SQL_VARBINARYMAX         for   (-203) //SQL server varbinary(max) type */
40773>>>>>>>Define SQL_TYPE_MONEY           for   (-204) //SQL server money type */
40773>>>>>>>Define SQL_TYPE_SMALLMONEY      for   (-205) //SQL server smallmoney type */
40773>>>>>>>Define SQL_TYPE_SMALLDATETIME   for   (-206) //SQL server smalldatetype type */
40773>>>>>>>
40773>>>>>>>
40773>>>>>>>//   MSSQL_SetConstraint <FileNum> <ConstraintText>
40773>>>>>>>//
40773>>>>>>>//     Setup a constraint for a file.
40773>>>>>>>
40773>>>>>>>
40773>>>>>>>Class cMSSQLHandler is a cCLIHandler
40774>>>>>>>    
40774>>>>>>>    Procedure Construct_Object
40776>>>>>>>        Forward Send Construct_Object
40778>>>>>>>        
40778>>>>>>>        Set psDriverID to MSSQLDRV_ID
40779>>>>>>>    End_Procedure
40780>>>>>>>    
40780>>>>>>>    
40780>>>>>>>    
40780>>>>>>>    //   Extract the list from the out connect string.
40780>>>>>>>    Function ExtractList String sOutConnStr Integer hoStore Returns Integer
40782>>>>>>>        String  sItem
40782>>>>>>>        Integer iStart
40782>>>>>>>        Integer iEnd
40782>>>>>>>        
40782>>>>>>>        If (hoStore = 0) ;            Move Current_object to hoStore
40785>>>>>>>        
40785>>>>>>>        Send Delete_Data to hoStore
40786>>>>>>>        Move (Pos("{", sOutConnStr)) to iStart
40787>>>>>>>        While (iStart > 0)
40791>>>>>>>            Move (Right(sOutConnStr, Length(sOutConnStr) - iStart)) to sOutConnStr
40792>>>>>>>            If (Left(sOutConnStr, 1) = "}") ;                Move 0 to iStart
40795>>>>>>>            Else Begin
40796>>>>>>>                Move (Pos(",", sOutConnStr)) to iStart
40797>>>>>>>                Move (Pos("}", sOutConnStr)) to iEnd
40798>>>>>>>                If ((iStart = 0) or (iEnd < iStart)) ;                    Move iEnd to iStart
40801>>>>>>>                
40801>>>>>>>                If (iStart > 0) ;                    Set Value of hoStore  (Item_Count(Current_Object)) to (Left(sOutConnStr, iStart - 1))
40804>>>>>>>                
40804>>>>>>>                If (iStart = iEnd) ;                    Move 0 to iStart
40807>>>>>>>            End
40807>>>>>>>>
40807>>>>>>>        Loop
40808>>>>>>>>
40808>>>>>>>        
40808>>>>>>>        Function_Return (Item_Count(hoStore))
40809>>>>>>>    End_Procedure
40810>>>>>>>    
40810>>>>>>>    
40810>>>>>>>    
40810>>>>>>>    //   Call the driver's browse connect function
40810>>>>>>>    Function BrowseConnect String sInConnStr Returns String
40812>>>>>>>        String  sDriver
40812>>>>>>>        String  sOutConnStr
40812>>>>>>>        Integer iArg
40812>>>>>>>        Integer iRetval
40812>>>>>>>        
40812>>>>>>>        Get psDriverID to sDriver
40813>>>>>>>        If (sDriver <> "") Begin
40815>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
40816>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
40821>>>>>>>        End
40821>>>>>>>>
40821>>>>>>>        
40821>>>>>>>        Function_Return sOutConnStr
40822>>>>>>>    End_Function// BrowseConnect
40823>>>>>>>    
40823>>>>>>>    
40823>>>>>>>    Function BrowseConnectLocal String sInConnStr Returns String
40825>>>>>>>        String  sDriver
40825>>>>>>>        String  sOutConnStr
40825>>>>>>>        Integer iArg
40825>>>>>>>        Integer iRetval
40825>>>>>>>        
40825>>>>>>>        Move 1 to iArg // Browses only local
40826>>>>>>>        
40826>>>>>>>        Get psDriverID to sDriver
40827>>>>>>>        If (sDriver <> "") Begin
40829>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
40830>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
40835>>>>>>>        End
40835>>>>>>>>
40835>>>>>>>        
40835>>>>>>>        Function_Return sOutConnStr
40836>>>>>>>    End_Function// BrowseConnect
40837>>>>>>>    
40837>>>>>>>    
40837>>>>>>>    Function EnumerateServersNetworkOrLocal Integer iNetworkLocal  Returns Integer
40839>>>>>>>        
40839>>>>>>>        String  sServerList
40839>>>>>>>        Integer iNumServers
40839>>>>>>>        Integer iDriver
40839>>>>>>>        Integer iClientVersion
40839>>>>>>>        String  sDriver
40839>>>>>>>        
40839>>>>>>>        Get DriverIndex MSSQLDRV_ID to iDriver
40840>>>>>>>        
40840>>>>>>>        If (iDriver) Begin
40842>>>>>>>            
40842>>>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
40845>>>>>>>            
40845>>>>>>>            Get SqlServerClientDriverName iClientVersion to sDriver
40846>>>>>>>            
40846>>>>>>>            Move ("DRIVER={" + sDriver + "};") to sDriver
40847>>>>>>>            If (iNetworkLocal = 0) Begin
40849>>>>>>>                Get BrowseConnect sDriver to sServerList
40850>>>>>>>            End
40850>>>>>>>>
40850>>>>>>>            Else Begin
40851>>>>>>>                Get BrowseConnectLocal sDriver to sServerList
40852>>>>>>>            End
40852>>>>>>>>
40852>>>>>>>            Get ExtractList sServerList Current_object to iNumServers
40853>>>>>>>        End
40853>>>>>>>>
40853>>>>>>>        
40853>>>>>>>        Function_Return iNumServers
40854>>>>>>>        
40854>>>>>>>    End_Function
40855>>>>>>>    
40855>>>>>>>    //   Enumerate the available SQL Server database servers
40855>>>>>>>    //   This function will return all SQL Server instances on the network.
40855>>>>>>>    //   This may take a long time.
40855>>>>>>>    //   To enumerate only local SQL Server instances use EnumerateServersLocal
40855>>>>>>>    Function EnumerateServers Returns Integer
40857>>>>>>>        
40857>>>>>>>        Integer iNumServers
40857>>>>>>>        Integer iNetworkLocal
40857>>>>>>>        
40857>>>>>>>        Move 0 to iNetworkLocal // 0 = enumerate network servers
40858>>>>>>>        
40858>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
40859>>>>>>>        
40859>>>>>>>        Function_Return iNumServers
40860>>>>>>>        
40860>>>>>>>    End_Function
40861>>>>>>>    
40861>>>>>>>    
40861>>>>>>>    //   Enumerate the available SQL Server database servers
40861>>>>>>>    //   This function will return only return SQL Server instance on the local machine
40861>>>>>>>    //   To enumerate all SQL Server instances in a network use EnumerateServers
40861>>>>>>>    Function EnumerateServersLocal Returns Integer
40863>>>>>>>        
40863>>>>>>>        Integer iNumServers
40863>>>>>>>        Integer iNetworkLocal
40863>>>>>>>        
40863>>>>>>>        Move 1 to iNetworkLocal // 1 = enumerate local servers
40864>>>>>>>        
40864>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
40865>>>>>>>        
40865>>>>>>>        Function_Return iNumServers
40866>>>>>>>        
40866>>>>>>>    End_Function
40867>>>>>>>    
40867>>>>>>>    
40867>>>>>>>    
40867>>>>>>>    //   Enumerate database in a given server.
40867>>>>>>>    Function EnumerateDatabases String sServer String sUser String sPassWord Returns Integer
40869>>>>>>>        Integer hoSQL
40869>>>>>>>        String  sConnect
40869>>>>>>>        String  sDatabase
40869>>>>>>>        Integer hdbc
40869>>>>>>>        Integer hstmt
40869>>>>>>>        Integer iFetchResult
40869>>>>>>>        
40869>>>>>>>        If (Num_Arguments < 3) ;            Move "" to sPassWord
40872>>>>>>>        If (Num_Arguments < 2) ;            Move "" to sUser
40875>>>>>>>        
40875>>>>>>>        If (sUser <> "") ;            Move ("SERVER=" + Trim(sServer) + ";UID=" + Trim(sUser) + ";PWD=" + Trim(sPassword) + ";") to sConnect
40878>>>>>>>        Else ;            Move ("SERVER=" + Trim(sServer) + ";Trusted_Connection=yes") to sConnect
40880>>>>>>>        
40880>>>>>>>        Object oEnumDBSQLmanager is a cSQLHandleManager
40882>>>>>>>            Move Current_Object to hoSQL
40883>>>>>>>        End_Object
40884>>>>>>>        
40884>>>>>>>        If (hoSQL <> 0) Begin
40886>>>>>>>            Get SQLConnect of hoSQL "MSSQLDRV" sConnect to hdbc
40887>>>>>>>            If (hdbc <> 0) Begin
40889>>>>>>>                Get SQLOpen of hdbc to hstmt
40890>>>>>>>                If (hstmt <> 0) Begin
40892>>>>>>>                    //   We could do a direct select on the sysdatabases table but we use
40892>>>>>>>                    //   the stored procedure sp_database instead. SQL Server recommends this
40892>>>>>>>                    //   approach in case meta data might change, the stored procedure will
40892>>>>>>>                    //   stay the same.
40892>>>>>>>                    Send SQLSetProcedureName to hstmt "sp_databases"
40893>>>>>>>                    Send SQLCall to hstmt
40894>>>>>>>                    Repeat
40894>>>>>>>>
40894>>>>>>>                        Get SQLFetch of hstmt to iFetchResult
40895>>>>>>>                        If (iFetchResult <> 0) Begin
40897>>>>>>>                            Get SQLColumnValue of hstmt 1 to sDatabase
40898>>>>>>>                            Set Value  (Item_Count(Current_Object)) to sDatabase
40899>>>>>>>                        End
40899>>>>>>>>
40899>>>>>>>                    Until (iFetchResult = 0)
40901>>>>>>>                    
40901>>>>>>>                    Send SQLClose to hstmt
40902>>>>>>>                End
40902>>>>>>>>
40902>>>>>>>                Send SQLDisconnect to hdbc
40903>>>>>>>            End
40903>>>>>>>>
40903>>>>>>>        End
40903>>>>>>>>
40903>>>>>>>        Send Destroy_Object to hoSQL
40904>>>>>>>        
40904>>>>>>>        Function_Return (Item_Count(Current_Object))
40905>>>>>>>    End_Function
40906>>>>>>>    
40906>>>>>>>    
40906>>>>>>>    Function SqlServerClientVersionName Integer iClientVersion  Returns String
40908>>>>>>>        
40908>>>>>>>        String  sSqlServerClientVersionName
40908>>>>>>>        
40908>>>>>>>        
40908>>>>>>>        Case Begin
40908>>>>>>>            
40908>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
40910>>>>>>>                Move SQLSERVER2017CLIENTNAME to sSqlServerClientVersionName
40911>>>>>>>                Case Break
40912>>>>>>>                
40912>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
40915>>>>>>>                Move SQLSERVER2016CLIENTNAME to sSqlServerClientVersionName
40916>>>>>>>                Case Break
40917>>>>>>>            
40917>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
40920>>>>>>>                Move SQLSERVER2014CLIENTNAME to sSqlServerClientVersionName
40921>>>>>>>                Case Break
40922>>>>>>>            
40922>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
40925>>>>>>>                Move SQLSERVER2012CLIENTNAME to sSqlServerClientVersionName
40926>>>>>>>                Case Break
40927>>>>>>>            
40927>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
40930>>>>>>>                Move SQLSERVER2008CLIENTNAME to sSqlServerClientVersionName
40931>>>>>>>                Case Break
40932>>>>>>>            
40932>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
40935>>>>>>>                Move SQLSERVER2005CLIENTNAME to sSqlServerClientVersionName
40936>>>>>>>                Case Break
40937>>>>>>>            
40937>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
40940>>>>>>>                Move SQLSERVER2000CLIENTNAME to sSqlServerClientVersionName
40941>>>>>>>                Case Break
40942>>>>>>>            
40942>>>>>>>            Case Else
40942>>>>>>>                Move SQLSERVERUNKNOWNCLIENTNAME to sSqlServerClientVersionName
40943>>>>>>>                
40943>>>>>>>        Case End
40943>>>>>>>        
40943>>>>>>>        
40943>>>>>>>        Function_Return sSqlServerClientVersionName
40944>>>>>>>        
40944>>>>>>>    End_Function
40945>>>>>>>
40945>>>>>>>
40945>>>>>>>    Function SqlServerClientDriverName Integer iClientVersion  Returns String
40947>>>>>>>        
40947>>>>>>>        String  sSqlServerClientDriverName
40947>>>>>>>        
40947>>>>>>>        Case Begin
40947>>>>>>>            
40947>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
40949>>>>>>>                Move SQLSERVER2017DRVRSTR to sSqlServerClientDriverName
40950>>>>>>>                Case Break
40951>>>>>>>                
40951>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
40954>>>>>>>                Move SQLSERVER2016DRVRSTR to sSqlServerClientDriverName
40955>>>>>>>                Case Break
40956>>>>>>>            
40956>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
40959>>>>>>>                Move SQLSERVER2014DRVRSTR to sSqlServerClientDriverName
40960>>>>>>>                Case Break
40961>>>>>>>            
40961>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
40964>>>>>>>                Move SQLSERVER2012DRVRSTR to sSqlServerClientDriverName
40965>>>>>>>                Case Break
40966>>>>>>>            
40966>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
40969>>>>>>>                Move SQLSERVER2008DRVRSTR to sSqlServerClientDriverName
40970>>>>>>>                Case Break
40971>>>>>>>            
40971>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
40974>>>>>>>                Move SQLSERVER2005DRVRSTR to sSqlServerClientDriverName
40975>>>>>>>                Case Break
40976>>>>>>>            
40976>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
40979>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
40980>>>>>>>                Case Break
40981>>>>>>>            
40981>>>>>>>            Case Else
40981>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
40982>>>>>>>                
40982>>>>>>>        Case End
40982>>>>>>>        
40982>>>>>>>        
40982>>>>>>>        Function_Return sSqlServerClientDriverName
40983>>>>>>>        
40983>>>>>>>    End_Function
40984>>>>>>>    
40984>>>>>>>    
40984>>>>>>>End_Class
40985>>>>>>>
40985>>>>>>>
40985>>>>>Use db2_drv.pkg
Including file: db2_drv.pkg    (C:\Program Files\DataFlex 20.1\Pkg\db2_drv.pkg)
40985>>>>>>>// DB2_DRV.PKG                                                          
40985>>>>>>>//   Package that declares DB2 driver constants and functions.          
40985>>>>>>>//   This package can be used by developers who want to add DB2 driver  
40985>>>>>>>//   specific code to a DataFlex application.                           
40985>>>>>>>
40985>>>>>>>Use Cli.pkg
40985>>>>>>>
40985>>>>>>>// Driver attributes
40985>>>>>>>
40985>>>>>>>
40985>>>>>>>// Driver Indentification
40985>>>>>>>
40985>>>>>>>// Error number constants
40985>>>>>>>
40985>>>>>>>// Call driver function identifiers
40985>>>>>>>
40985>>>>>>>// DB2 specific data types
40985>>>>>>>Define SQL_CLOB           for   (-99)
40985>>>>>>>Define SQL_BLOB           for   (-98)
40985>>>>>>>Define SQL_XML            for   (-370)
40985>>>>>>>// DB2 Graphic types are Unicode types
40985>>>>>>>Define SQL_GRAPHIC        for   (-95)
40985>>>>>>>Define SQL_VARGRAPHIC     for   (-96)
40985>>>>>>>Define SQL_LONGVARGRAPHIC for   (-97)
40985>>>>>>>Define SQL_DBCLOB         for   (-350)
40985>>>>>>>
40985>>>>>>>
40985>>>>>>>// Extra DB2 commands
40985>>>>>>>
40985>>>>>>>
40985>>>>>>>// DB2_SetConstraint <FileNum> <ConstraintText>                         
40985>>>>>>>//   Setup a constraint for a file.                                     
40985>>>>>>>
40985>>>>>>>
40985>>>>>>>
40985>>>>>>>Class cDB2Handler is a cCLIHandler
40986>>>>>>>    
40986>>>>>>>    Procedure Construct_Object
40988>>>>>>>        Forward Send Construct_Object
40990>>>>>>>        
40990>>>>>>>        Set psDriverID to DB2_DRV_ID
40991>>>>>>>    End_Procedure
40992>>>>>>>    
40992>>>>>>>    
40992>>>>>>>    
40992>>>>>>>    // Reset the datasource list to the beginning
40992>>>>>>>    Procedure SeedDataSources
40994>>>>>>>        String  sDriver
40994>>>>>>>        String  sVoid
40994>>>>>>>        Integer iRetval
40994>>>>>>>        
40994>>>>>>>        Get psDriverID to sDriver
40995>>>>>>>        If (sDriver <> "") ;            Call_Driver 0 sDRiver Function CLI_INITDATASOURCES Callback 0 Passing sVoid sVoid SQL_FETCH_ALL Result iRetval
41002>>>>>>>    End_Procedure
41003>>>>>>>    
41003>>>>>>>    
41003>>>>>>>    
41003>>>>>>>    // Call the driver's data sources function
41003>>>>>>>    Function DataSources Returns String
41005>>>>>>>        String  sDriver
41005>>>>>>>        String  sDataSource
41005>>>>>>>        String  sDescription
41005>>>>>>>        Integer iLength
41005>>>>>>>        Integer iRetval
41005>>>>>>>        
41005>>>>>>>        Get psDriverID to sDriver
41006>>>>>>>        If (sDriver <> "") Begin
41008>>>>>>>            Move 8192 to iLength
41009>>>>>>>            Move (Repeat(" ", iLength)) to sDataSource
41010>>>>>>>            Move (Repeat(" ", iLength)) to sDescription
41011>>>>>>>            Call_Driver 0 sDRiver Function CLI_DATASOURCES Callback 0 Passing sDataSource sDescription iLength Result iRetval
41016>>>>>>>        End
41016>>>>>>>>
41016>>>>>>>        
41016>>>>>>>        If (sDataSource <> "" or sDescription <> "") ;            Function_Return (sDataSource - (If(sDescription <> "", "," *  sDescription, "")))
41019>>>>>>>        Else ;            Function_Return ""
41021>>>>>>>    End_Function
41022>>>>>>>    
41022>>>>>>>End_Class
41023>>>>>Use odbc_drv.pkg
Including file: odbc_drv.pkg    (C:\Program Files\DataFlex 20.1\Pkg\odbc_drv.pkg)
41023>>>>>>>//   Package that declares ODBC driver constants and functions.         
41023>>>>>>>//   This package can be used by developers who want to add Data Access 
41023>>>>>>>//   ODBC Client specific code to a DataFlex application.               
41023>>>>>>>
41023>>>>>>>Use Cli.pkg
41023>>>>>>>
41023>>>>>>>// Driver Indentification
41023>>>>>>>
41023>>>>>>>// Error number constants
41023>>>>>>>
41023>>>>>>>// Call driver function identifiers
41023>>>>>>>
41023>>>>>>>Class cODBCHandler is a cCLIHandler
41024>>>>>>>    
41024>>>>>>>    Procedure Construct_Object
41026>>>>>>>        Forward Send Construct_Object
41028>>>>>>>        
41028>>>>>>>        Set psDriverID to ODBC_DRV_ID
41029>>>>>>>    End_Procedure
41030>>>>>>>    
41030>>>>>>>    
41030>>>>>>>    
41030>>>>>>>    // Setup the type of data sources returned by the datasources function
41030>>>>>>>    Procedure Set DataSourceType Integer iNewType
41032>>>>>>>        String  sDriver
41032>>>>>>>        String  sVoid
41032>>>>>>>        Integer iRetval
41032>>>>>>>        
41032>>>>>>>        Get psDriverID to sDriver
41033>>>>>>>        If (sDriver <> "") ;            Call_Driver 0 sDRiver Function CLI_INITDATASOURCES Callback 0 Passing sVoid sVoid iNewType Result iRetval
41040>>>>>>>    End_Procedure
41041>>>>>>>    
41041>>>>>>>    
41041>>>>>>>    // Call the driver's data sources function
41041>>>>>>>    Function DataSources Returns String
41043>>>>>>>        String  sDriver
41043>>>>>>>        String  sDataSource
41043>>>>>>>        String  sDescription
41043>>>>>>>        Integer iLength
41043>>>>>>>        Integer iRetval
41043>>>>>>>        
41043>>>>>>>        Get psDriverID to sDriver
41044>>>>>>>        If (sDriver <> "") Begin
41046>>>>>>>            Move 8192 to iLength
41047>>>>>>>            Move (Repeat(" ", iLength)) to sDataSource
41048>>>>>>>            Move (Repeat(" ", iLength)) to sDescription
41049>>>>>>>            Call_Driver 0 sDRiver Function CLI_DATASOURCES Callback 0 Passing sDataSource sDescription iLength Result iRetval
41054>>>>>>>        End
41054>>>>>>>>
41054>>>>>>>        
41054>>>>>>>        If (sDataSource <> "" or sDescription <> "") ;            Function_Return (sDataSource - (If(sDescription <> "", "," * sDescription, "")))
41057>>>>>>>        Else ;            Function_Return ""
41059>>>>>>>    End_Function
41060>>>>>>>    
41060>>>>>>>End_Class
41061>>>>>>>
41061>>>>>Use DFBTRDRV.PKG
Including file: DFBTRDRV.PKG    (C:\Program Files\DataFlex 20.1\Pkg\DFBTRDRV.PKG)
41061>>>>>>>// $File title : Package for the DataFlex Connectivity Kit for Pervasive.SQL
41061>>>>>>>// Notice      : This package contains constants and commands, used to call
41061>>>>>>>//               specific functions in the DFBTRDRV.
41061>>>>>>>Use Ui
41061>>>>>>>//
41061>>>>>>>// Driver Indentification
41061>>>>>>>//
41061>>>>>>>
41061>>>>>>>// Driver attributes
41061>>>>>>>//
41061>>>>>>>// Call_Driver functions ID's
41061>>>>>>>//
41061>>>>>>>//
41061>>>>>>>// DFBTRFN_CONVERT_FILE options
41061>>>>>>>//
41061>>>>>>>
41061>>>>>>>//
41061>>>>>>>// DFBTRFN_SET_OWNER options
41061>>>>>>>//
41061>>>>>>>
41061>>>>>>>//
41061>>>>>>>// DFBTRFN_SET_TRANSACTION_TYPE options
41061>>>>>>>//
41061>>>>>>>
41061>>>>>>>
41061>>>>>>>//
41061>>>>>>>// Command to create all vars which may be needed
41061>>>>>>>// in other commands.
41061>>>>>>>//
41061>>>>>>>
41061>>>>>>>
41061>>>>>>>
41061>>>>>>>//
41061>>>>>>>// Command to set the owner of a Btrieve file.
41061>>>>>>>// File must have been opened.
41061>>>>>>>// Filenumber needs to be passed.
41061>>>>>>>// To clear set the owner to "".
41061>>>>>>>// Examples:
41061>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret"
41061>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY CALLBACK MyCallBack
41061>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" ENCRYPT
41061>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY ENCRYPT CALLBACK MyCallBack
41061>>>>>>>// To clear:
41061>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to ""
41061>>>>>>>//
41061>>>>>>>
41061>>>>>>>
41061>>>>>>>
41061>>>>>>>//
41061>>>>>>>// Command to parse DFBTR_SET_OWNVER
41061>>>>>>>// options.
41061>>>>>>>//
41061>>>>>>>
41061>>>>>>>
41061>>>>>>>
41061>>>>>>>//
41061>>>>>>>// Command to parse for Callback
41061>>>>>>>//
41061>>>>>>>
41061>>>>>>>
41061>>>>>>>
41061>>>>>>>//
41061>>>>>>>// Command to clear the owner of a Btrieve file.
41061>>>>>>>// File must have been opened.
41061>>>>>>>// Filenumber needs to be passed.
41061>>>>>>>// Examples:
41061>>>>>>>//      DFBTR_CLEAR_OWNER MyFileNumber
41061>>>>>>>//
41061>>>>>>>
41061>>>>>>>
41061>>>>>>>
41061>>>>>>>//
41061>>>>>>>// Command to add a owner name to the internal list of ownernames
41061>>>>>>>// which will be tries when opening files.
41061>>>>>>>//
41061>>>>>>>
41061>>>>>>>
41061>>>>>>>
41061>>>>>>>//
41061>>>>>>>// Command to remove all owners from the internal list of ownernames
41061>>>>>>>//
41061>>>>>>>
41061>>>>>>>
41061>>>>>>>//
41061>>>>>>>// Command to set the owner name to be used when opening the DDF files.
41061>>>>>>>// The DDF owner is required when Pervasive.SQL security is turned on.
41061>>>>>>>// The DDF owner is equal to the password of the Master user in Pervasive.SQL
41061>>>>>>>// This command overwrites the DDF_OWNER setting in DFBTRDRV.INT
41061>>>>>>>//
41061>>>>>>>
41061>>>>>>>//
41061>>>>>>>// Command to change the transaction type.
41061>>>>>>>// Valid types are:
41061>>>>>>>//     DFBTRTT_NONE
41061>>>>>>>//     DFBTRTT_EXCLUSIVE
41061>>>>>>>//     DFBTRTT_CONCURRENT
41061>>>>>>>//
41061>>>>>>>//
41061>>>>>>>
41061>>>>>>>
41061>>>>>>>
41061>>>>>>>//
41061>>>>>>>// Command to get the current transaction type.
41061>>>>>>>//
41061>>>>>>>
41061>>>>>>>//
41061>>>>>>>// Command to set explicit_locking
41061>>>>>>>//
41061>>>>>>>
41061>>>>>>>//
41061>>>>>>>// Command to get explicit locking
41061>>>>>>>//
41061>>>>>>>
41061>>>>>>>//
41061>>>>>>>// Command to set detection for incompatible positive signs in numeric fields
41061>>>>>>>//
41061>>>>>>>
41061>>>>>>>//
41061>>>>>>>// Command to get detection for incompatible positive signs in numeric fields
41061>>>>>>>//
41061>>>>>>>
41061>>>>>>>// Purpose: An instance of this class can be used as a broker object to
41061>>>>>>>//          call several Dfbtrdrv releated methods.
41061>>>>>>>
41061>>>>>>>Class cDFBtrDrvHandler is an Array
41062>>>>>>>    
41062>>>>>>>    Procedure Construct_Object Integer iImage
41064>>>>>>>        Forward Send Construct_object iImage
41066>>>>>>>        
41066>>>>>>>        Property String  psDriverID "DFBTRDRV"
41067>>>>>>>    End_Procedure
41068>>>>>>>    
41068>>>>>>>    //  The revsion of a Dfbtrdrv Connectivity Kit
41068>>>>>>>    //
41068>>>>>>>    
41068>>>>>>>    Function CKRevision Returns String
41070>>>>>>>        String  sDriverID
41070>>>>>>>        String  sRevision
41070>>>>>>>        String  sVoid
41070>>>>>>>        Integer iRetval
41070>>>>>>>        
41070>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41070>>>>>>>        // This error would otherwise be raised when we have an older
41070>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
41070>>>>>>>        Send Ignore_error to Error_object_Id 20491
41071>>>>>>>        Get psDriverID to sDriverID
41072>>>>>>>        Move (Repeat(" ", 255)) to sRevision
41073>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKREVISION Callback 0 Passing sRevision sVoid 0 Result iRetval
41078>>>>>>>        Send Trap_Error to Error_object_Id 20491
41079>>>>>>>        If (Trim(sRevision) = "") Begin
41081>>>>>>>            // Unable to get the revision. return all zeroes.
41081>>>>>>>            Move "0.0.0.0" to sRevision
41082>>>>>>>        End
41082>>>>>>>>
41082>>>>>>>        Function_Return sRevision
41083>>>>>>>    End_Function
41084>>>>>>>    
41084>>>>>>>    Function CkUsesUri Returns Integer
41086>>>>>>>        String  sDriverID
41086>>>>>>>        String  sVoid1
41086>>>>>>>        String  sVoid2
41086>>>>>>>        Integer iRetval
41086>>>>>>>        
41086>>>>>>>        Get psDriverID to sDriverID
41087>>>>>>>        
41087>>>>>>>        Move 0 to iRetval
41088>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41088>>>>>>>        // This error would otherwise be raised when we have an older
41088>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKUSESURI function
41088>>>>>>>        Send Ignore_error to Error_object_Id 20491
41089>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKUSESURI Callback 0 Passing sVoid1 sVoid2 0 Result iRetval
41094>>>>>>>        Send Trap_Error to Error_object_Id 20491
41095>>>>>>>        
41095>>>>>>>        Function_Return iRetval
41096>>>>>>>    End_Function
41097>>>>>>>    
41097>>>>>>>    
41097>>>>>>>    
41097>>>>>>>    // Extract the Nth part of a a.b.c.d revsion string.
41097>>>>>>>    //
41097>>>>>>>    // Returns : The part version number or -1 if there is no such part number.
41097>>>>>>>    //
41097>>>>>>>    
41097>>>>>>>    Function ExtractPartFromRevision Integer iPartNum String sRevision Returns Integer
41099>>>>>>>        Integer iPartRev
41099>>>>>>>        Integer iCurrentPart
41099>>>>>>>        Integer iSeparatorPos
41099>>>>>>>        
41099>>>>>>>        If (iPartNum > 4) ;            Function_Return -1
41102>>>>>>>        
41102>>>>>>>        Move 0 to iCurrentPart
41103>>>>>>>        Repeat
41103>>>>>>>>
41103>>>>>>>            Move (Pos(".", sRevision)) to iSeparatorPos
41104>>>>>>>            If (iSeparatorPos > 0) Begin
41106>>>>>>>                Move (Left(sRevision, iSeparatorPos - 1)) to iPartRev
41107>>>>>>>                Move (Right(sRevision, Length(sRevision) - iSeparatorPos)) to sRevision
41108>>>>>>>                Increment iCurrentPart
41109>>>>>>>            End
41109>>>>>>>>
41109>>>>>>>            Else If (sRevision <> "") Begin
41112>>>>>>>                Move sRevision to iPartRev
41113>>>>>>>                Move "" to sRevision
41114>>>>>>>                Increment iCurrentPart
41115>>>>>>>            End
41115>>>>>>>>
41115>>>>>>>            Else ;                Move -1 to iPartRev
41117>>>>>>>        Until (iCurrentPart >= iPartNum or iPartRev = -1)
41119>>>>>>>        
41119>>>>>>>        Function_Return iPartRev
41120>>>>>>>    End_Function
41121>>>>>>>    
41121>>>>>>>    
41121>>>>>>>    
41121>>>>>>>    //
41121>>>>>>>    //  Returns the major revision of the CK
41121>>>>>>>    //
41121>>>>>>>    
41121>>>>>>>    Function CKMajorRevision Returns Integer
41123>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 1, CKRevision(Current_Object)))
41124>>>>>>>    End_Function
41125>>>>>>>    
41125>>>>>>>    
41125>>>>>>>    
41125>>>>>>>    //  Returns the minor revision of the CK
41125>>>>>>>    //
41125>>>>>>>    
41125>>>>>>>    Function CKMinorRevision Returns Integer
41127>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 2, CKRevision(Current_Object)))
41128>>>>>>>    End_Function
41129>>>>>>>    
41129>>>>>>>    
41129>>>>>>>    //  Returns the release revision of the CK
41129>>>>>>>    //
41129>>>>>>>    
41129>>>>>>>    Function CKReleaseRevision Returns Integer
41131>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 3, CKRevision(Current_Object)))
41132>>>>>>>    End_Function
41133>>>>>>>    
41133>>>>>>>    
41133>>>>>>>    //  Returns the major revision of the CK
41133>>>>>>>    //
41133>>>>>>>    
41133>>>>>>>    Function CKBuildRevision Returns Integer
41135>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 4, CKRevision(Current_Object)))
41136>>>>>>>    End_Function
41137>>>>>>>    
41137>>>>>>>    
41137>>>>>>>    //  Determines if the CK conforms to a passed minimal revsion.
41137>>>>>>>    //
41137>>>>>>>    
41137>>>>>>>    Function IsMinimalRevision Integer iMajor Integer iMinor Integer iRelease Integer iBuild Returns Integer
41139>>>>>>>        If (iMajor < CKMajorRevision(Current_object)) ;            Function_Return (True)
41142>>>>>>>        Else If (iMajor = CKMajorRevision(Current_object)) Begin
41145>>>>>>>            If (iMinor < CKMinorRevision(Current_object)) ;                Function_Return (True)
41148>>>>>>>            Else If (iMinor = CKMinorRevision(Current_object)) Begin
41151>>>>>>>                If (iRelease < CKReleaseRevision(Current_object)) ;                    Function_Return (True)
41154>>>>>>>                Else If (iRelease = CKReleaseRevision(Current_object) and iBuild <= CKBuildRevision(Current_object)) ;                    Function_Return (True)
41158>>>>>>>            End
41158>>>>>>>>
41158>>>>>>>        End
41158>>>>>>>>
41158>>>>>>>        
41158>>>>>>>        Function_Return (False)
41159>>>>>>>    End_Function
41160>>>>>>>    
41160>>>>>>>    //   Functions to query the Pervasive.SQL version:
41160>>>>>>>    //       PSQLRequesterVersionInfo    Integer iFileNum Returns String
41160>>>>>>>    //       PSQLLocalEngineVersionInfo  Integer iFileNum Returns String
41160>>>>>>>    //       PSQLServerEngineVersionInfo Integer iFileNum Returns String
41160>>>>>>>    //
41160>>>>>>>    //   All 3 functions return the version of a Pervasive.SQL component
41160>>>>>>>    //   in the following format:
41160>>>>>>>    //       <version>.<revision>.<type>
41160>>>>>>>    //   possible values for <type>:
41160>>>>>>>    //       9 for 32-bit Windows workstation/workgroup engine or Linux
41160>>>>>>>    //         server using Workgroup authentication mode
41160>>>>>>>    //       C for client cache engine
41160>>>>>>>    //       D for DOS workstation
41160>>>>>>>    //       N for client Requester
41160>>>>>>>    //       S for NetWare server
41160>>>>>>>    //       T for 32-bit Windows server engine
41160>>>>>>>    //       U for Linux server using PAM or BTPASSWD authentication
41160>>>>>>>    //
41160>>>>>>>    //   example:
41160>>>>>>>    //       8.50.T
41160>>>>>>>    //   will be returned for a Pervasive.SQL 8.5 Server Engine running on
41160>>>>>>>    //   32-bits Windows server.
41160>>>>>>>    //
41160>>>>>>>    //   The FileNumber parameter must specify an opened table or 0.
41160>>>>>>>    //   For PSQLServerEngineVersionInfo the FileNumber can not be 0.
41160>>>>>>>    //
41160>>>>>>>    //   If the version information is not available or can not be obtained
41160>>>>>>>    //   the functions will return "0.0.0"
41160>>>>>>>    
41160>>>>>>>    //  Returns the version information of the
41160>>>>>>>    //           Pervasive.SQL Client requester.
41160>>>>>>>    
41160>>>>>>>    Function PSQLRequesterVersionInfo Integer iFileNum Returns String
41162>>>>>>>        
41162>>>>>>>        String  sDriverID
41162>>>>>>>        String  sVersion
41162>>>>>>>        String  sVoid
41162>>>>>>>        Integer iRetval
41162>>>>>>>        
41162>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41162>>>>>>>        // This error would otherwise be raised when we have an older
41162>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
41162>>>>>>>        Send Ignore_error to Error_object_Id 20491
41163>>>>>>>        Get psDriverID to sDriverID
41164>>>>>>>        Move (Repeat(" ", 255)) to sVersion
41165>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLREQUESTERVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
41170>>>>>>>        Send Trap_Error to Error_object_Id 20491
41171>>>>>>>        If (Trim(sVersion) = "") Begin
41173>>>>>>>            // Unable to get the revision. return all zeroes.
41173>>>>>>>            Move "0.0.0" to sVersion
41174>>>>>>>        End
41174>>>>>>>>
41174>>>>>>>        Function_Return sVersion
41175>>>>>>>    End_Function
41176>>>>>>>    
41176>>>>>>>    //           Pervasive.SQL Engine
41176>>>>>>>    
41176>>>>>>>    Function PSQLLocalEngineVersionInfo Integer iFileNum Returns String
41178>>>>>>>        
41178>>>>>>>        String  sDriverID
41178>>>>>>>        String  sVersion
41178>>>>>>>        String  sVoid
41178>>>>>>>        Integer iRetval
41178>>>>>>>        
41178>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41178>>>>>>>        // This error would otherwise be raised when we have an older
41178>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
41178>>>>>>>        Send Ignore_error to Error_object_Id 20491
41179>>>>>>>        Get psDriverID to sDriverID
41180>>>>>>>        Move (Repeat(" ", 255)) to sVersion
41181>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLLOCALENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
41186>>>>>>>        Send Trap_Error to Error_object_Id 20491
41187>>>>>>>        If (Trim(sVersion) = "") Begin
41189>>>>>>>            // Unable to get the revision. return all zeroes.
41189>>>>>>>            Move "0.0.0" to sVersion
41190>>>>>>>        End
41190>>>>>>>>
41190>>>>>>>        Function_Return sVersion
41191>>>>>>>    End_Function
41192>>>>>>>    
41192>>>>>>>    //  Returns the version information of the
41192>>>>>>>    //           Pervasive.SQL Server Engine
41192>>>>>>>    
41192>>>>>>>    Function PSQLServerEngineVersionInfo Integer iFileNum Returns String
41194>>>>>>>        
41194>>>>>>>        String  sDriverID
41194>>>>>>>        String  sVersion
41194>>>>>>>        String  sVoid
41194>>>>>>>        Integer iRetval
41194>>>>>>>        
41194>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41194>>>>>>>        // This error would otherwise be raised when we have an older
41194>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
41194>>>>>>>        Send Ignore_error to Error_object_Id 20491
41195>>>>>>>        Get psDriverID to sDriverID
41196>>>>>>>        Move (Repeat(" ", 255)) to sVersion
41197>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLSERVERENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
41202>>>>>>>        Send Trap_Error to Error_object_Id 20491
41203>>>>>>>        If (Trim(sVersion) = "") Begin
41205>>>>>>>            // Unable to get the revision. return all zeroes.
41205>>>>>>>            Move "0.0.0" to sVersion
41206>>>>>>>        End
41206>>>>>>>>
41206>>>>>>>        Function_Return sVersion
41207>>>>>>>    End_Function
41208>>>>>>>    
41208>>>>>>>End_Class
41209>>>>>>>
41209>>>>>>>
41209>>>>>Use cSQLConnectionIniFile.inc
Including file: cSQLConnectionIniFile.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cSQLConnectionIniFile.inc)
41209>>>>>>>//****************************************************************************
41209>>>>>>>// $Module type: Include file
41209>>>>>>>// $Module name: cSQLConnectionIniFile.inc
41209>>>>>>>//
41209>>>>>>>// $Author     : Nils G. Svedmyr, RDC Tools International.
41209>>>>>>>// Copyright (c) 2012 RDC Tools International
41209>>>>>>>// E-mail      : support@rdctools.com
41209>>>>>>>// Web-site    : http://www.rdctools.com
41209>>>>>>>//
41209>>>>>>>// Created     : 2017-01-18 @ 13:04 (Military date format - Year-Month-Day)
41209>>>>>>>//
41209>>>>>>>// Note        : Header file with constant declarations for the cSQLConnectionIniFile class.
41209>>>>>>>//
41209>>>>>>>// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
41209>>>>>>>// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
41209>>>>>>>// This is free software; you can redistribute it and/or modify it under the terms of the
41209>>>>>>>// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
41209>>>>>>>// in the help folder for more details.
41209>>>>>>>//
41209>>>>>>>Use Winkern.pkg
41209>>>>>>>Use cIniFile.pkg
41209>>>>>>>    Use cCryptographerEx.pkg
Including file: cCryptographerEx.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCryptographerEx.pkg)
41209>>>>>>>>>Use VdfBase.pkg
41209>>>>>>>>>
41209>>>>>>>>>Use CryptographerConstants.pkg
Including file: CryptographerConstants.pkg    (C:\Program Files\DataFlex 20.1\Pkg\CryptographerConstants.pkg)
41209>>>>>>>>>>>//   Author  : Ulbe Stellema
41209>>>>>>>>>>>// Algorithm classes
41209>>>>>>>>>>>Define ALG_CLASS_ANY                    for |CI$00000000 // (0)
41209>>>>>>>>>>>Define ALG_CLASS_SIGNATURE              for |CI$00002000 // (1 << 13)
41209>>>>>>>>>>>Define ALG_CLASS_MSG_ENCRYPT            for |CI$00004000 // (2 << 13)
41209>>>>>>>>>>>Define ALG_CLASS_DATA_ENCRYPT           for |CI$00006000 // (3 << 13)
41209>>>>>>>>>>>Define ALG_CLASS_HASH                   for |CI$00008000 // (4 << 13)
41209>>>>>>>>>>>Define ALG_CLASS_KEY_EXCHANGE           for |CI$0000A000 // (5 << 13)
41209>>>>>>>>>>>Define ALG_CLASS_ALL                    for |CI$0000E000 // (7 << 13)
41209>>>>>>>>>>>
41209>>>>>>>>>>>// Algorithm types
41209>>>>>>>>>>>Define ALG_TYPE_ANY                     for |CI$00000000 // (0)
41209>>>>>>>>>>>Define ALG_TYPE_DSS                     for |CI$00000200 // (1 << 9)
41209>>>>>>>>>>>Define ALG_TYPE_RSA                     for |CI$00000400 // (2 << 9)
41209>>>>>>>>>>>Define ALG_TYPE_BLOCK                   for |CI$00000600 // (3 << 9)
41209>>>>>>>>>>>Define ALG_TYPE_STREAM                  for |CI$00000800 // (4 << 9)
41209>>>>>>>>>>>Define ALG_TYPE_DH                      for |CI$00000A00 // (5 << 9)
41209>>>>>>>>>>>Define ALG_TYPE_SECURECHANNEL           for |CI$00000C00 // (6 << 9)
41209>>>>>>>>>>>
41209>>>>>>>>>>>// Generic sub-ids
41209>>>>>>>>>>>Define ALG_SID_ANY                      for |CI$00000000 // (0)
41209>>>>>>>>>>>
41209>>>>>>>>>>>// RSA sub-ids
41209>>>>>>>>>>>Define ALG_SID_RSA_ANY                  for 0
41209>>>>>>>>>>>Define ALG_SID_RSA_PKCS                 for 1
41209>>>>>>>>>>>Define ALG_SID_RSA_MSATWORK             for 2
41209>>>>>>>>>>>Define ALG_SID_RSA_ENTRUST              for 3
41209>>>>>>>>>>>Define ALG_SID_RSA_PGP                  for 4
41209>>>>>>>>>>>
41209>>>>>>>>>>>// DSS sub-ids
41209>>>>>>>>>>>Define ALG_SID_DSS_ANY                  for 0
41209>>>>>>>>>>>Define ALG_SID_DSS_PKCS                 for 1
41209>>>>>>>>>>>Define ALG_SID_DSS_DMS                  for 2
41209>>>>>>>>>>>
41209>>>>>>>>>>>// DES sub_ids
41209>>>>>>>>>>>Define ALG_SID_DES                      for 1
41209>>>>>>>>>>>Define ALG_SID_3DES                     for 3
41209>>>>>>>>>>>Define ALG_SID_DESX                     for 4
41209>>>>>>>>>>>Define ALG_SID_IDEA                     for 5
41209>>>>>>>>>>>Define ALG_SID_CAST                     for 6
41209>>>>>>>>>>>Define ALG_SID_SAFERSK64                for 7
41209>>>>>>>>>>>Define ALG_SID_SAFERSK128               for 8
41209>>>>>>>>>>>Define ALG_SID_3DES_112                 for 9
41209>>>>>>>>>>>Define ALG_SID_CYLINK_MEK               for 12
41209>>>>>>>>>>>Define ALG_SID_RC5                      for 13
41209>>>>>>>>>>>Define ALG_SID_AES_128                  for 14
41209>>>>>>>>>>>Define ALG_SID_AES_192                  for 15
41209>>>>>>>>>>>Define ALG_SID_AES_256                  for 16
41209>>>>>>>>>>>Define ALG_SID_AES                      for 17
41209>>>>>>>>>>>
41209>>>>>>>>>>>// Fortezza sub-ids
41209>>>>>>>>>>>Define ALG_SID_SKIPJACK                 for 10
41209>>>>>>>>>>>Define ALG_SID_TEK                      for 11
41209>>>>>>>>>>>
41209>>>>>>>>>>>// RC2 sub-ids
41209>>>>>>>>>>>Define ALG_SID_RC2                      for 2
41209>>>>>>>>>>>
41209>>>>>>>>>>>// Stream cipher sub-ids
41209>>>>>>>>>>>Define ALG_SID_RC4                      for 1
41209>>>>>>>>>>>Define ALG_SID_SEAL                     for 2
41209>>>>>>>>>>>
41209>>>>>>>>>>>// Diffie-Hellman sub-ids
41209>>>>>>>>>>>Define ALG_SID_DH_SANDF                 for 1
41209>>>>>>>>>>>Define ALG_SID_DH_EPHEM                 for 2
41209>>>>>>>>>>>Define ALG_SID_AGREED_KEY_ANY           for 3
41209>>>>>>>>>>>Define ALG_SID_KEA                      for 4
41209>>>>>>>>>>>
41209>>>>>>>>>>>// Hash sub ids
41209>>>>>>>>>>>Define ALG_SID_MD2                      for 1
41209>>>>>>>>>>>Define ALG_SID_MD4                      for 2
41209>>>>>>>>>>>Define ALG_SID_MD5                      for 3
41209>>>>>>>>>>>Define ALG_SID_SHA                      for 4
41209>>>>>>>>>>>Define ALG_SID_SHA1                     for 4
41209>>>>>>>>>>>Define ALG_SID_MAC                      for 5
41209>>>>>>>>>>>Define ALG_SID_RIPEMD                   for 6
41209>>>>>>>>>>>Define ALG_SID_RIPEMD160                for 7
41209>>>>>>>>>>>Define ALG_SID_SSL3SHAMD5               for 8
41209>>>>>>>>>>>Define ALG_SID_HMAC                     for 9
41209>>>>>>>>>>>Define ALG_SID_TLS1PRF                  for 10
41209>>>>>>>>>>>Define ALG_SID_HASH_REPLACE_OWF         for 11
41209>>>>>>>>>>>Define ALG_SID_SHA_256                  for 12
41209>>>>>>>>>>>Define ALG_SID_SHA_384                  for 13
41209>>>>>>>>>>>Define ALG_SID_SHA_512                  for 14
41209>>>>>>>>>>>
41209>>>>>>>>>>>// secure channel sub ids
41209>>>>>>>>>>>Define ALG_SID_SSL3_MASTER              for 1
41209>>>>>>>>>>>Define ALG_SID_SCHANNEL_MASTER_HASH     for 2
41209>>>>>>>>>>>Define ALG_SID_SCHANNEL_MAC_KEY         for 3
41209>>>>>>>>>>>Define ALG_SID_PCT1_MASTER              for 4
41209>>>>>>>>>>>Define ALG_SID_SSL2_MASTER              for 5
41209>>>>>>>>>>>Define ALG_SID_TLS1_MASTER              for 6
41209>>>>>>>>>>>Define ALG_SID_SCHANNEL_ENC_KEY         for 7
41209>>>>>>>>>>>
41209>>>>>>>>>>>// algorithm identifier definitions
41209>>>>>>>>>>>Define CALG_MD2                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD2)
41209>>>>>>>>>>>Define CALG_MD4                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD4)
41209>>>>>>>>>>>Define CALG_MD5                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD5)
41209>>>>>>>>>>>Define CALG_SHA                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA)
41209>>>>>>>>>>>Define CALG_SHA1                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA1)
41209>>>>>>>>>>>Define CALG_MAC                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MAC)
41209>>>>>>>>>>>Define CALG_RSA_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
41209>>>>>>>>>>>Define CALG_DSS_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_DSS ior ALG_SID_DSS_ANY)
41209>>>>>>>>>>>Define CALG_NO_SIGN                     for (ALG_CLASS_SIGNATURE ior ALG_TYPE_ANY ior ALG_SID_ANY)
41209>>>>>>>>>>>Define CALG_RSA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
41209>>>>>>>>>>>Define CALG_DES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DES)
41209>>>>>>>>>>>Define CALG_3DES_112                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES_112)
41209>>>>>>>>>>>Define CALG_3DES                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES)
41209>>>>>>>>>>>Define CALG_DESX                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DESX)
41209>>>>>>>>>>>Define CALG_RC2                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC2)
41209>>>>>>>>>>>Define CALG_RC4                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_RC4)
41209>>>>>>>>>>>Define CALG_SEAL                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_SEAL)
41209>>>>>>>>>>>Define CALG_DH_SF                       for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_SANDF)
41209>>>>>>>>>>>Define CALG_DH_EPHEM                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_EPHEM)
41209>>>>>>>>>>>Define CALG_AGREEDKEY_ANY               for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_AGREED_KEY_ANY)
41209>>>>>>>>>>>Define CALG_KEA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_KEA)
41209>>>>>>>>>>>Define CALG_HUGHES_MD5                  for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_ANY ior ALG_SID_MD5)
41209>>>>>>>>>>>Define CALG_SKIPJACK                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_SKIPJACK)
41209>>>>>>>>>>>Define CALG_TEK                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_TEK)
41209>>>>>>>>>>>Define CALG_CYLINK_MEK                  for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_CYLINK_MEK)
41209>>>>>>>>>>>Define CALG_SSL3_SHAMD5                 for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SSL3SHAMD5)
41209>>>>>>>>>>>Define CALG_SSL3_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL3_MASTER)
41209>>>>>>>>>>>Define CALG_SCHANNEL_MASTER_HASH        for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MASTER_HASH)
41209>>>>>>>>>>>Define CALG_SCHANNEL_MAC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MAC_KEY)
41209>>>>>>>>>>>Define CALG_SCHANNEL_ENC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_ENC_KEY)
41209>>>>>>>>>>>Define CALG_PCT1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_PCT1_MASTER)
41209>>>>>>>>>>>Define CALG_SSL2_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL2_MASTER)
41209>>>>>>>>>>>Define CALG_TLS1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_TLS1_MASTER)
41209>>>>>>>>>>>Define CALG_RC5                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC5)
41209>>>>>>>>>>>Define CALG_HMAC                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HMAC)
41209>>>>>>>>>>>Define CALG_TLS1PRF                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_TLS1PRF)
41209>>>>>>>>>>>Define CALG_HASH_REPLACE_OWF            for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HASH_REPLACE_OWF)
41209>>>>>>>>>>>Define CALG_AES_128                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_128)
41209>>>>>>>>>>>Define CALG_AES_192                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_192)
41209>>>>>>>>>>>Define CALG_AES_256                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_256)
41209>>>>>>>>>>>Define CALG_AES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES)
41209>>>>>>>>>>>Define CALG_SHA_256                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_256)
41209>>>>>>>>>>>Define CALG_SHA_384                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_384)
41209>>>>>>>>>>>Define CALG_SHA_512                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_512)
41209>>>>>>>>>>>
41209>>>>>>>>>>>// Providers
41209>>>>>>>>>>>Define MS_DEF_PROV                      for "Microsoft Base Cryptographic Provider v1.0"
41209>>>>>>>>>>>Define MS_ENHANCED_PROV                 for "Microsoft Enhanced Cryptographic Provider v1.0"
41209>>>>>>>>>>>Define MS_STRONG_PROV                   for "Microsoft Strong Cryptographic Provider"
41209>>>>>>>>>>>Define MS_DEF_RSA_SIG_PROV              for "Microsoft RSA Signature Cryptographic Provider"
41209>>>>>>>>>>>Define MS_DEF_RSA_SCHANNEL_PROV         for "Microsoft RSA SChannel Cryptographic Provider"
41209>>>>>>>>>>>Define MS_DEF_DSS_PROV                  for "Microsoft Base DSS Cryptographic Provider"
41209>>>>>>>>>>>Define MS_DEF_DSS_DH_PROV               for "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
41209>>>>>>>>>>>Define MS_ENH_DSS_DH_PROV               for "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
41209>>>>>>>>>>>Define MS_DEF_DH_SCHANNEL_PROV          for "Microsoft DH SChannel Cryptographic Provider"
41209>>>>>>>>>>>Define MS_SCARD_PROV                    for "Microsoft Base Smart Card Crypto Provider"
41209>>>>>>>>>>>Define MS_ENH_RSA_AES_PROV              for "Microsoft Enhanced RSA and AES Cryptographic Provider"
41209>>>>>>>>>>>
41209>>>>>>>>>>>// dwFlags definitions for CryptAcquireContext
41209>>>>>>>>>>>Define CRYPT_VERIFYCONTEXT              for |CI$F0000000
41209>>>>>>>>>>>Define CRYPT_NEWKEYSET                  for |CI$00000008
41209>>>>>>>>>>>Define CRYPT_DELETEKEYSET               for |CI$00000010
41209>>>>>>>>>>>Define CRYPT_MACHINE_KEYSET             for |CI$00000020
41209>>>>>>>>>>>Define CRYPT_SILENT                     for |CI$00000040
41209>>>>>>>>>>>
41209>>>>>>>>>>>// dwFlag definitions for CryptGenKey
41209>>>>>>>>>>>Define CRYPT_EXPORTABLE                 for |CI$00000001
41209>>>>>>>>>>>Define CRYPT_USER_PROTECTED             for |CI$00000002
41209>>>>>>>>>>>Define CRYPT_CREATE_SALT                for |CI$00000004
41209>>>>>>>>>>>Define CRYPT_UPDATE_KEY                 for |CI$00000008
41209>>>>>>>>>>>Define CRYPT_NO_SALT                    for |CI$00000010
41209>>>>>>>>>>>Define CRYPT_PREGEN                     for |CI$00000040
41209>>>>>>>>>>>Define CRYPT_RECIPIENT                  for |CI$00000010
41209>>>>>>>>>>>Define CRYPT_INITIATOR                  for |CI$00000040
41209>>>>>>>>>>>Define CRYPT_ONLINE                     for |CI$00000080
41209>>>>>>>>>>>Define CRYPT_SF                         for |CI$00000100
41209>>>>>>>>>>>Define CRYPT_CREATE_IV                  for |CI$00000200
41209>>>>>>>>>>>Define CRYPT_KEK                        for |CI$00000400
41209>>>>>>>>>>>Define CRYPT_DATA_KEY                   for |CI$00000800
41209>>>>>>>>>>>Define CRYPT_VOLATILE                   for |CI$00001000
41209>>>>>>>>>>>Define CRYPT_SGCKEY                     for |CI$00002000
41209>>>>>>>>>>>Define CRYPT_ARCHIVABLE                 for |CI$00004000
41209>>>>>>>>>>>
41209>>>>>>>>>>>// Provider types
41209>>>>>>>>>>>Define PROV_RSA_FULL                    for 1
41209>>>>>>>>>>>Define PROV_RSA_SIG                     for 2
41209>>>>>>>>>>>Define PROV_DSS                         for 3
41209>>>>>>>>>>>Define PROV_FORTEZZA                    for 4
41209>>>>>>>>>>>Define PROV_MS_EXCHANGE                 for 5
41209>>>>>>>>>>>Define PROV_SSL                         for 6
41209>>>>>>>>>>>Define PROV_RSA_SCHANNEL                for 12
41209>>>>>>>>>>>Define PROV_DSS_DH                      for 13
41209>>>>>>>>>>>Define PROV_EC_ECDSA_SIG                for 14
41209>>>>>>>>>>>Define PROV_EC_ECNRA_SIG                for 15
41209>>>>>>>>>>>Define PROV_EC_ECDSA_FULL               for 16
41209>>>>>>>>>>>Define PROV_EC_ECNRA_FULL               for 17
41209>>>>>>>>>>>Define PROV_DH_SCHANNEL                 for 18
41209>>>>>>>>>>>Define PROV_SPYRUS_LYNKS                for 20
41209>>>>>>>>>>>Define PROV_RNG                         for 21
41209>>>>>>>>>>>Define PROV_INTEL_SEC                   for 22
41209>>>>>>>>>>>Define PROV_REPLACE_OWF                 for 23
41209>>>>>>>>>>>Define PROV_RSA_AES                     for 24
41209>>>>>>>>>>>
41209>>>>>>>>>>>// KP_MODE
41209>>>>>>>>>>>// KP_MODE
41209>>>>>>>>>>>Define CRYPT_MODE_CBC                   for 1       // Cipher block chaining
41209>>>>>>>>>>>Define CRYPT_MODE_ECB                   for 2       // Electronic code book
41209>>>>>>>>>>>Define CRYPT_MODE_OFB                   for 3       // Output feedback mode
41209>>>>>>>>>>>Define CRYPT_MODE_CFB                   for 4       // Cipher feedback mode
41209>>>>>>>>>>>Define CRYPT_MODE_CTS                   for 5       // Ciphertext stealing mode
41209>>>>>>>>>>>Define CRYPT_MODE_CBCI                  for 6       // ANSI CBC Interleaved
41209>>>>>>>>>>>Define CRYPT_MODE_CFBP                  for 7       // ANSI CFB Pipelined
41209>>>>>>>>>>>Define CRYPT_MODE_OFBP                  for 8       // ANSI OFB Pipelined
41209>>>>>>>>>>>Define CRYPT_MODE_CBCOFM                for 9       // ANSI CBC + OF Masking
41209>>>>>>>>>>>Define CRYPT_MODE_CBCOFMI               for 10      // ANSI CBC + OFM Interleaved
41209>>>>>>>>>>>
41209>>>>>>>>>>>// dwParam definitions for CryptGetKeyParam
41209>>>>>>>>>>>Define KP_IV                            for 1       // Initialization vector
41209>>>>>>>>>>>Define KP_SALT                          for 2       // Salt value
41209>>>>>>>>>>>Define KP_PADDING                       for 3       // Padding values
41209>>>>>>>>>>>Define KP_MODE                          for 4       // Mode of the cipher
41209>>>>>>>>>>>Define KP_MODE_BITS                     for 5       // Number of bits to feedback
41209>>>>>>>>>>>Define KP_PERMISSIONS                   for 6       // Key permissions DWORD
41209>>>>>>>>>>>Define KP_ALGID                         for 7       // Key algorithm
41209>>>>>>>>>>>Define KP_BLOCKLEN                      for 8       // Block size of the cipher
41209>>>>>>>>>>>Define KP_KEYLEN                        for 9       // Length of key in bits
41209>>>>>>>>>>>Define KP_SALT_EX                       for 10      // Length of salt in bytes
41209>>>>>>>>>>>Define KP_P                             for 11      // DSS/Diffie-Hellman P value
41209>>>>>>>>>>>Define KP_G                             for 12      // DSS/Diffie-Hellman G value
41209>>>>>>>>>>>Define KP_Q                             for 13      // DSS Q value
41209>>>>>>>>>>>Define KP_X                             for 14      // Diffie-Hellman X value
41209>>>>>>>>>>>Define KP_Y                             for 15      // Y value
41209>>>>>>>>>>>Define KP_RA                            for 16      // Fortezza RA value
41209>>>>>>>>>>>Define KP_RB                            for 17      // Fortezza RB value
41209>>>>>>>>>>>Define KP_INFO                          for 18      // for putting information into an RSA envelope
41209>>>>>>>>>>>Define KP_EFFECTIVE_KEYLEN              for 19      // setting and getting RC2 effective key length
41209>>>>>>>>>>>Define KP_SCHANNEL_ALG                  for 20      // for setting the Secure Channel algorithms
41209>>>>>>>>>>>Define KP_CLIENT_RANDOM                 for 21      // for setting the Secure Channel client random data
41209>>>>>>>>>>>Define KP_SERVER_RANDOM                 for 22      // for setting the Secure Channel server random data
41209>>>>>>>>>>>Define KP_RP                            for 23
41209>>>>>>>>>>>Define KP_PRECOMP_MD5                   for 24
41209>>>>>>>>>>>Define KP_PRECOMP_SHA                   for 25
41209>>>>>>>>>>>Define KP_CERTIFICATE                   for 26      // for setting Secure Channel certificate data (PCT1)
41209>>>>>>>>>>>Define KP_CLEAR_KEY                     for 27      // for setting Secure Channel clear key data (PCT1)
41209>>>>>>>>>>>Define KP_PUB_EX_LEN                    for 28
41209>>>>>>>>>>>Define KP_PUB_EX_VAL                    for 29
41209>>>>>>>>>>>Define KP_KEYVAL                        for 30
41209>>>>>>>>>>>Define KP_ADMIN_PIN                     for 31
41209>>>>>>>>>>>Define KP_KEYEXCHANGE_PIN               for 32
41209>>>>>>>>>>>Define KP_SIGNATURE_PIN                 for 33
41209>>>>>>>>>>>Define KP_PREHASH                       for 34
41209>>>>>>>>>>>Define KP_ROUNDS                        for 35
41209>>>>>>>>>>>Define KP_OAEP_PARAMS                   for 36      // for setting OAEP params on RSA keys
41209>>>>>>>>>>>Define KP_CMS_KEY_INFO                  for 37
41209>>>>>>>>>>>Define KP_CMS_DH_KEY_INFO               for 38
41209>>>>>>>>>>>Define KP_PUB_PARAMS                    for 39      // for setting public parameters
41209>>>>>>>>>>>Define KP_VERIFY_PARAMS                 for 40      // for verifying DSA and DH parameters
41209>>>>>>>>>>>Define KP_HIGHEST_VERSION               for 41      // for TLS protocol version setting
41209>>>>>>>>>>>Define KP_GET_USE_COUNT                 for 42      // for use with PP_CRYPT_COUNT_KEY_USE contexts
41209>>>>>>>>>>>
41209>>>>>>>>>>>// dwParam definitions for CryptGetHashParam
41209>>>>>>>>>>>Define HP_ALGID                         for |CI$0001  // Hash algorithm
41209>>>>>>>>>>>Define HP_HASHVAL                       for |CI$0002  // Hash value
41209>>>>>>>>>>>Define HP_HASHSIZE                      for |CI$0004  // Hash value size
41209>>>>>>>>>>>Define HP_HMAC_INFO                     for |CI$0005  // information for creating an HMA
41209>>>>>>>>>>>
41209>>>>>>>>>>>// key BLOB types
41209>>>>>>>>>>>Define KEYSTATEBLOB                     for |CI$0C
41209>>>>>>>>>>>Define OPAQUEKEYBLOB                    for |CI$09
41209>>>>>>>>>>>Define PLAINTEXTKEYBLOB                 for |CI$08
41209>>>>>>>>>>>Define PRIVATEKEYBLOB                   for |CI$07
41209>>>>>>>>>>>Define PUBLICKEYBLOB                    for |CI$06
41209>>>>>>>>>>>Define PUBLICKEYBLOBEX                  for |CI$0A
41209>>>>>>>>>>>Define SIMPLEBLOB                       for |CI$01
41209>>>>>>>>>>>Define SYMMETRICWRAPKEYBLOB             for |CI$0B
41209>>>>>>>>>>>
41209>>>>>>>>>>>Define CUR_BLOB_VERSION                 for 2
41209>>>>>>>>>>>
41209>>>>>>>>>>>// KP_PADDING
41209>>>>>>>>>>>Define PKCS5_PADDING                    for 1       // PKCS 5 (sec 6.2) padding method
41209>>>>>>>>>>>Define RANDOM_PADDING                   for 2
41209>>>>>>>>>>>Define ZERO_PADDING                     for 3
41209>>>>>>>>>>>
41209>>>>>>>>>>>//  Structure cryptimportkey
41209>>>>>>>>>>>Struct PUBLICKEYSTRUC
41209>>>>>>>>>>>    UChar    bType
41209>>>>>>>>>>>    UChar    bVersion
41209>>>>>>>>>>>    UShort   reserved
41209>>>>>>>>>>>    UInteger aiKeyAlg
41209>>>>>>>>>>>End_Struct
41209>>>>>>>>>>>
41209>>>>>>>>>>>Struct tPLAINTEXTKEYBLOB
41209>>>>>>>>>>>    PUBLICKEYSTRUC hdr
41209>>>>>>>>>>>    PUBLICKEYSTRUC hdr
41209>>>>>>>>>>>    UInteger       dwKeySize
41209>>>>>>>>>>>//    UChar[]        rgbKeyData
41209>>>>>>>>>>>End_Struct
41209>>>>>>>>>>>
41209>>>>>>>>>>>
41209>>>>>>>>>>>
41209>>>>>>>>>>>//  Structure for specifying the inner and outer strings when calculating HMAC hash (use with CryptSetHashParam)
41209>>>>>>>>>>>Struct HMAC_INFO
41209>>>>>>>>>>>    UInteger HashAlgid
41209>>>>>>>>>>>    Pointer pbInnerString
41209>>>>>>>>>>>    DWord cbInnerString
41209>>>>>>>>>>>    Pointer pbOuterString
41209>>>>>>>>>>>    DWord cbOuterString
41209>>>>>>>>>>>End_Struct
41209>>>>>>>>>>>
41209>>>>>>>>>>>Struct BLOBHEADER
41209>>>>>>>>>>>    UChar   bType
41209>>>>>>>>>>>    UChar   bVersion
41209>>>>>>>>>>>    Short   reserved
41209>>>>>>>>>>>    Integer aiKeyAlg
41209>>>>>>>>>>>End_Struct
41209>>>>>>>>>>>
41209>>>>>>>>>>>Struct CryptoBlob
41209>>>>>>>>>>>    BLOBHEADER  header
41209>>>>>>>>>>>    BLOBHEADER  header
41209>>>>>>>>>>>    Integer     cbKeySize
41209>>>>>>>>>>>    UChar[32]   rgbKeyData
41209>>>>>>>>>>>End_Struct
41209>>>>>>>>>>>
41209>>>>>>>>>>>
41209>>>>>>>>>>>// Note: lpContainer and lpProvider refer to WString types.
41209>>>>>>>>>>>External_Function CryptAcquireContextW "CryptAcquireContextW" advapi32.dll ;    Pointer phProv ;    Pointer lpContainer ;    Pointer lpProvider ;    Integer dwProvType ;    Integer dwFlags ;    Returns Boolean
41210>>>>>>>>>>>
41210>>>>>>>>>>>// Compatibilty wrapper Function CryptAcquireContext
41210>>>>>>>>>>>Function CryptAcquireContext Global ;    Pointer phProv ;    Pointer szContainer ;    Pointer szProvider ;    Integer dwProvType ;    Integer dwFlags ;    Returns Boolean
41212>>>>>>>>>>>    
41212>>>>>>>>>>>    Boolean bResult
41212>>>>>>>>>>>    UWide   uwContainer uwProvider
41212>>>>>>>>>>>    UWide   uwContainer uwProvider
41212>>>>>>>>>>>
41212>>>>>>>>>>>    Send StringToWide szContainer (&uwContainer)
41213>>>>>>>>>>>    Send StringToWide szProvider (&uwProvider)
41214>>>>>>>>>>>    
41214>>>>>>>>>>>    Move (CryptAcquireContextW (phProv, uwContainer.lpUText, uwProvider.lpUText, dwProvType, dwFlags)) to bResult                   
41215>>>>>>>>>>>
41215>>>>>>>>>>>    Function_Return bResult
41216>>>>>>>>>>>End_Function
41217>>>>>>>>>>>
41217>>>>>>>>>>>External_Function CryptReleaseContext "CryptReleaseContext" advapi32.dll ;    Handle hProv ;    Integer dwFlags ;    Returns Boolean
41218>>>>>>>>>>>
41218>>>>>>>>>>>External_Function CryptCreateHash "CryptCreateHash" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hKey ;    Integer dwFlags ;    Pointer phHash ;    Returns Boolean
41219>>>>>>>>>>>
41219>>>>>>>>>>>External_Function CryptDestroyHash "CryptDestroyHash" advapi32.dll ;    Handle hHash ;    Returns Boolean
41220>>>>>>>>>>>
41220>>>>>>>>>>>External_Function CryptHashData "CryptHashData" advapi32.dll ;    Handle hHash ;    Pointer pbData ;    Integer dwDataLen ;    Integer dwFlags ;    Returns Boolean
41221>>>>>>>>>>>
41221>>>>>>>>>>>External_Function CryptDeriveKey "CryptDeriveKey" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hBaseData ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
41222>>>>>>>>>>>
41222>>>>>>>>>>>External_Function CryptGetHashParam "CryptGetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    DWord dwFlags ;    Returns Integer
41223>>>>>>>>>>>
41223>>>>>>>>>>>External_Function CryptDestroyKey "CryptDestroyKey" advapi32.dll ;    Handle hKey ;    Returns Boolean
41224>>>>>>>>>>>
41224>>>>>>>>>>>External_Function CryptImportKey "CryptImportKey" advapi32.dll ;    Handle hProv ;    Pointer pbData ;    Integer dwDataLen ;    Handle hPubKey ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
41225>>>>>>>>>>>
41225>>>>>>>>>>>External_Function CryptGetKeyParam "CryptGetKeyParam" advapi32.dll ;    Handle hKey ;    Integer dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwFlags ;    Returns Boolean
41226>>>>>>>>>>>    
41226>>>>>>>>>>>External_Function CryptSetKeyParam "CryptSetKeyParam" advapi32.dll ;    Handle   hKey ;    UInteger dwParam ;    Pointer  pbdata ;    UInteger dwFlags ;    Returns  Boolean
41227>>>>>>>>>>>
41227>>>>>>>>>>>External_Function CryptEncrypt "CryptEncrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwBufLen ;    Returns Boolean
41228>>>>>>>>>>>
41228>>>>>>>>>>>External_Function CryptDecrypt "CryptDecrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Returns Boolean
41229>>>>>>>>>>>
41229>>>>>>>>>>>External_Function CryptGenRandom "CryptGenRandom" advapi32.dll ;    Handle hProv ;    DWord dwLen ;    Pointer pbBuffer ;    Returns Boolean
41230>>>>>>>>>>>    
41230>>>>>>>>>>>External_Function CryptSetHashParam "CryptSetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Integer dwFlags ;    Returns Boolean
41231>>>>>>>>>>>    
41231>>>>>>>>>>>External_Function CryptGenKey "CryptGenKey" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
41232>>>>>>>>>>>    
41232>>>>>>>>>>>External_Function CryptExportKey "CryptExportKey" advapi32.dll ;    Handle hKey ;    Handle hExpKey ;    Integer dwBlobType ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Returns Boolean
41233>>>>>>>>>
41233>>>>>>>>>Class cCryptographerEx is a cObject
41234>>>>>>>>>    
41234>>>>>>>>>    Procedure Construct_Object
41236>>>>>>>>>        Forward Send Construct_Object
41238>>>>>>>>>        
41238>>>>>>>>>        Property String     psProvider  MS_ENHANCED_PROV
41239>>>>>>>>>        Property Integer    piProvider  PROV_RSA_FULL
41240>>>>>>>>>        Property Integer    piCipher    CALG_RC4
41241>>>>>>>>>        Property Integer    piHash      CALG_MD5
41242>>>>>>>>>        
41242>>>>>>>>>        // Private properties
41242>>>>>>>>>        Property Handle     Private_phProv
41243>>>>>>>>>        
41243>>>>>>>>>        // Block cipher properties
41243>>>>>>>>>        Property UChar[]    paKey
41244>>>>>>>>>        Property UChar[]    paIV
41245>>>>>>>>>        Property Integer    piKeyAlg        PLAINTEXTKEYBLOB
41246>>>>>>>>>        Property Integer    piKeyType       CALG_AES_256
41247>>>>>>>>>        Property Integer    piKeyPadding    PKCS5_PADDING
41248>>>>>>>>>        Property Integer    piKeyMode       CRYPT_MODE_CBC
41249>>>>>>>>>        Property Integer    piBlockSize     16
41250>>>>>>>>>    End_Procedure
41251>>>>>>>>>    
41251>>>>>>>>>    
41251>>>>>>>>>    // Acquire key container handle
41251>>>>>>>>>    Function AcquireContext Returns Handle
41253>>>>>>>>>        Integer iProvider
41253>>>>>>>>>        WString wProvider
41253>>>>>>>>>        Handle hProv
41253>>>>>>>>>        Boolean bOk
41253>>>>>>>>>        Pointer pProv
41253>>>>>>>>>        
41253>>>>>>>>>        Move 0 to hProv
41254>>>>>>>>>        Get piProvider to iProvider
41255>>>>>>>>>        Get psProvider to wProvider
41256>>>>>>>>>        
41256>>>>>>>>>        //  Determine address to be passed as provider
41256>>>>>>>>>        If (Trim(wProvider) <> "") Begin
41258>>>>>>>>>            Move (AddressOf(wProvider)) to pProv
41259>>>>>>>>>        End
41259>>>>>>>>>>
41259>>>>>>>>>        Else Begin
41260>>>>>>>>>            Move 0 to pProv
41261>>>>>>>>>        End
41261>>>>>>>>>>
41261>>>>>>>>>        
41261>>>>>>>>>        //  Acquire Crypto Context. Note: pProv is pointer to UTF16 string.
41261>>>>>>>>>        Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_VERIFYCONTEXT)) to bOk
41262>>>>>>>>>        If (not(bOk) or hProv = 0) Begin
41264>>>>>>>>>            Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_NEWKEYSET ior CRYPT_VERIFYCONTEXT)) to bOk
41265>>>>>>>>>        End
41265>>>>>>>>>>
41265>>>>>>>>>        
41265>>>>>>>>>        If (not(bOk) or hProv = 0) Begin
41267>>>>>>>>>            // Fallback to original
41267>>>>>>>>>            Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,0)) to bOk
41268>>>>>>>>>            
41268>>>>>>>>>            If (not(bOk) or hProv = 0) Begin
41270>>>>>>>>>                Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_NEWKEYSET)) to bOk
41271>>>>>>>>>            End
41271>>>>>>>>>>
41271>>>>>>>>>        End
41271>>>>>>>>>>
41271>>>>>>>>>        Set Private_phProv to hProv
41272>>>>>>>>>        
41272>>>>>>>>>        Function_Return hProv
41273>>>>>>>>>    End_Function
41274>>>>>>>>>    
41274>>>>>>>>>    // Releases key container handle
41274>>>>>>>>>    Function ReleaseContext Handle hProv Returns Boolean
41276>>>>>>>>>        Function_Return (CryptReleaseContext(hProv,0))
41277>>>>>>>>>    End_Function
41278>>>>>>>>>    
41278>>>>>>>>>    // Creates hash object
41278>>>>>>>>>    Function CreateHash Handle hProv Returns Handle
41280>>>>>>>>>        Integer iAlgorithm
41280>>>>>>>>>        Handle hHash
41280>>>>>>>>>        Boolean bOk
41280>>>>>>>>>        
41280>>>>>>>>>        Move 0 to hHash
41281>>>>>>>>>        Get piHash to iAlgorithm
41282>>>>>>>>>        Move (CryptCreateHash(hProv,iAlgorithm,0,0,AddressOf(hHash))) to bOk
41283>>>>>>>>>        
41283>>>>>>>>>        Function_Return hHash
41284>>>>>>>>>    End_Function
41285>>>>>>>>>    
41285>>>>>>>>>    // Destroys the hash object
41285>>>>>>>>>    Function DestroyHash Handle hHash Returns Boolean
41287>>>>>>>>>        Function_Return (CryptDestroyHash(hHash))
41288>>>>>>>>>    End_Function
41289>>>>>>>>>    
41289>>>>>>>>>    // Adds data to hash object
41289>>>>>>>>>    Function HashData Handle hHash UChar[] ucData Returns Boolean
41291>>>>>>>>>        Function_Return (CryptHashData(hHash,AddressOf(ucData), SizeOfArray(ucData),0))
41292>>>>>>>>>    End_Function
41293>>>>>>>>>    
41293>>>>>>>>>    // Generates session key
41293>>>>>>>>>    Function DeriveKey Handle hProv Handle hHash Returns Handle
41295>>>>>>>>>        Integer iAlgorithm
41295>>>>>>>>>        Handle hKey
41295>>>>>>>>>        Boolean bOk
41295>>>>>>>>>        
41295>>>>>>>>>        Move 0 to hKey
41296>>>>>>>>>        Get piCipher to iAlgorithm
41297>>>>>>>>>        Move (CryptDeriveKey(hProv,iAlgorithm,hHash,CRYPT_EXPORTABLE,AddressOf(hKey))) to bOk
41298>>>>>>>>>        
41298>>>>>>>>>        Function_Return hKey
41299>>>>>>>>>    End_Function
41300>>>>>>>>>    
41300>>>>>>>>>    // Imports a plain text key
41300>>>>>>>>>    Function ImportPlainTextKey Handle hProv UChar[] ucaKey Returns Handle
41302>>>>>>>>>        tPLAINTEXTKEYBLOB blobhead
41302>>>>>>>>>        tPLAINTEXTKEYBLOB blobhead
41302>>>>>>>>>        Boolean   bSuccess
41302>>>>>>>>>        Handle    hKey
41302>>>>>>>>>        Integer   iHeadSize iKeySize
41302>>>>>>>>>        UChar[]   ucaKeyblob
41303>>>>>>>>>        Integer iVoid
41303>>>>>>>>>        
41303>>>>>>>>>        Move (SizeOfType(tPLAINTEXTKEYBLOB)) to iHeadSize
41304>>>>>>>>>        Move (SizeOfArray(ucaKey)) to iKeySize
41305>>>>>>>>>        
41305>>>>>>>>>        Move PLAINTEXTKEYBLOB to blobhead.hdr.bType
41306>>>>>>>>>        Move CUR_BLOB_VERSION   to blobhead.hdr.bVersion
41307>>>>>>>>>        Get piCipher            to blobhead.hdr.aiKeyAlg
41308>>>>>>>>>        Move iKeySize           to blobhead.dwKeySize
41309>>>>>>>>>        
41309>>>>>>>>>        Move (ResizeArray(ucaKeyblob, iHeadSize)) to ucaKeyblob
41310>>>>>>>>>        Move (CopyMemory(AddressOf(ucaKeyblob), AddressOf(blobhead), iHeadSize)) to iVoid
41311>>>>>>>>>        Move (AppendArray(ucaKeyblob, ucaKey)) to ucaKeyblob
41312>>>>>>>>>        
41312>>>>>>>>>        Move 0 to hKey
41313>>>>>>>>>        Move (CryptImportKey(hProv, AddressOf(ucaKeyblob), SizeOfArray(ucaKeyblob), 0, 0, AddressOf(hKey))) to bSuccess
41314>>>>>>>>>        If (not(bSuccess)) Begin
41316>>>>>>>>>            Move (ShowLastError()) to iVoid
41317>>>>>>>>>        End
41317>>>>>>>>>>
41317>>>>>>>>>        
41317>>>>>>>>>        Function_Return hKey
41318>>>>>>>>>    End_Function
41319>>>>>>>>>    
41319>>>>>>>>>    // Destroys the key
41319>>>>>>>>>    Function DestroyKey Handle hKey Returns Boolean
41321>>>>>>>>>        Function_Return (CryptDestroyKey(hKey))
41322>>>>>>>>>    End_Function
41323>>>>>>>>>    
41323>>>>>>>>>    // Retrieves key data
41323>>>>>>>>>    Function KeyParameter Handle hKey Integer iQuery Returns Integer
41325>>>>>>>>>        Integer iBuffer iLen
41325>>>>>>>>>        Boolean bOk
41325>>>>>>>>>        
41325>>>>>>>>>        Move (SizeOfType(Integer)) to iLen
41326>>>>>>>>>        Move (CryptGetKeyParam(hKey,iQuery,AddressOf(iBuffer),AddressOf(iLen),0)) to bOk
41327>>>>>>>>>        Function_Return iBuffer
41328>>>>>>>>>    End_Function
41329>>>>>>>>>    
41329>>>>>>>>>    // Retrieves a hash value
41329>>>>>>>>>    Function HashValue Handle lhHash Returns UChar[]
41331>>>>>>>>>        UChar[] ucHash
41332>>>>>>>>>        Integer liResult
41332>>>>>>>>>        DWord   dwDataLen
41332>>>>>>>>>        
41332>>>>>>>>>        Move 0 to dwDataLen
41333>>>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,0,AddressOf(dwDataLen),0)) to liResult
41334>>>>>>>>>        If (liResult = 0) ;            Function_Return ""
41337>>>>>>>>>        
41337>>>>>>>>>        Move (ResizeArray(ucHash, dwDataLen, 0)) to ucHash
41338>>>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,AddressOf(ucHash),AddressOf(dwDataLen),0)) to liResult
41339>>>>>>>>>        If (liResult = 0) ;            Function_Return ""
41342>>>>>>>>>        
41342>>>>>>>>>        Function_Return ucHash
41343>>>>>>>>>    End_Function
41344>>>>>>>>>
41344>>>>>>>>>    // Encrypts data
41344>>>>>>>>>    Function Encrypt UChar[] ucPassword UChar[] ucData Returns UChar[]
41346>>>>>>>>>        Handle hProv hHash hKey
41346>>>>>>>>>        Integer iAlgorithm iDataLen iCipherLen iErr
41346>>>>>>>>>        Boolean bOk
41346>>>>>>>>>        
41346>>>>>>>>>        Get AcquireContext to hProv
41347>>>>>>>>>        If (hProv) Begin
41349>>>>>>>>>            Get CreateHash hProv to hHash
41350>>>>>>>>>            If (hHash) Begin
41352>>>>>>>>>                Get HashData hHash ucPassword to bOk
41353>>>>>>>>>                If (bOk) Begin
41355>>>>>>>>>                    Get piCipher to iAlgorithm
41356>>>>>>>>>                    Get DeriveKey hProv hHash to hKey
41357>>>>>>>>>                End
41357>>>>>>>>>>
41357>>>>>>>>>                Get DestroyHash hHash to bOk
41358>>>>>>>>>            End
41358>>>>>>>>>>
41358>>>>>>>>>            
41358>>>>>>>>>            If (hKey) Begin
41360>>>>>>>>>                //  First call to determine resulting data size
41360>>>>>>>>>                Move (SizeOfArray(ucData)) to iDataLen
41361>>>>>>>>>                Move (SizeOfArray(ucData)) to iCipherLen
41362>>>>>>>>>                Move (CryptEncrypt(hKey, 0, True, 0, 0, AddressOf(iCipherLen), iDataLen)) to bOk
41363>>>>>>>>>                
41363>>>>>>>>>                //  Reserve space in string
41363>>>>>>>>>                If (iDataLen < iCipherLen) Begin
41365>>>>>>>>>                    Move (ResizeArray(ucData, iCipherLen, 0)) to ucData
41366>>>>>>>>>                End
41366>>>>>>>>>>
41366>>>>>>>>>                
41366>>>>>>>>>                //  Call to really decrypt
41366>>>>>>>>>                Move (CryptEncrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iDataLen),SizeOfArray(ucData))) to bOk
41367>>>>>>>>>                //If (not(bOk)) Begin
41367>>>>>>>>>                //Move "" to sData
41367>>>>>>>>>                //Move (GetLastError()) to iErr
41367>>>>>>>>>                //End
41367>>>>>>>>>                
41367>>>>>>>>>                Get DestroyKey hKey to bOk
41368>>>>>>>>>            End 
41368>>>>>>>>>>
41368>>>>>>>>>            Get ReleaseContext hProv to bOk
41369>>>>>>>>>        End 
41369>>>>>>>>>>
41369>>>>>>>>>        Function_Return ucData
41370>>>>>>>>>    End_Function
41371>>>>>>>>>    
41371>>>>>>>>>    // Decrypts data
41371>>>>>>>>>    Function Decrypt UChar[] ucPassword UChar[] ucData Returns UChar[]
41373>>>>>>>>>        Handle hProv hHash hKey
41373>>>>>>>>>        Integer iAlgorithm iDataLen
41373>>>>>>>>>        Boolean bOk
41373>>>>>>>>>        
41373>>>>>>>>>        Get AcquireContext to hProv
41374>>>>>>>>>        If (hProv) Begin
41376>>>>>>>>>            Get CreateHash hProv to hHash
41377>>>>>>>>>            If (hHash) Begin
41379>>>>>>>>>                Get HashData hHash ucPassword to bOk
41380>>>>>>>>>                If (bOk) Begin
41382>>>>>>>>>                    Get piCipher to iAlgorithm
41383>>>>>>>>>                    Get DeriveKey hProv hHash to hKey
41384>>>>>>>>>                End
41384>>>>>>>>>>
41384>>>>>>>>>                Get DestroyHash hHash to bOk
41385>>>>>>>>>            End
41385>>>>>>>>>>
41385>>>>>>>>>            
41385>>>>>>>>>            If (hKey) Begin
41387>>>>>>>>>                Move (SizeOfArray(ucData)) to iDataLen
41388>>>>>>>>>                Move (CryptDecrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iDataLen))) to bOk
41389>>>>>>>>>                //  Resulting data can be shorter as the input string, in that case we shorten the result string
41389>>>>>>>>>                If (SizeOfArray (ucData) > iDataLen) Begin
41391>>>>>>>>>                    Move (ResizeArray(ucData, iDataLen)) to ucData
41392>>>>>>>>>                End
41392>>>>>>>>>>
41392>>>>>>>>>                
41392>>>>>>>>>                Get DestroyKey hKey to bOk
41393>>>>>>>>>            End
41393>>>>>>>>>>
41393>>>>>>>>>            Get ReleaseContext hProv to bOk
41394>>>>>>>>>        End
41394>>>>>>>>>>
41394>>>>>>>>>        Function_Return ucData
41395>>>>>>>>>    End_Function
41396>>>>>>>>>    
41396>>>>>>>>>    // Creates a key
41396>>>>>>>>>    Function CreateKey Handle hProv Returns Handle
41398>>>>>>>>>        Integer iAlg iType iByte iLength iSize
41398>>>>>>>>>        CryptoBlob keyBlob
41398>>>>>>>>>        CryptoBlob keyBlob
41398>>>>>>>>>        Boolean bOk
41398>>>>>>>>>        Handle hKey
41398>>>>>>>>>        UChar[] aKey
41399>>>>>>>>>
41399>>>>>>>>>        Get paKey to aKey
41400>>>>>>>>>        Get piKeyAlg to iAlg
41401>>>>>>>>>        Get piKeyType to iType
41402>>>>>>>>>        Move iAlg                   to keyBlob.header.bType
41403>>>>>>>>>        Move CUR_BLOB_VERSION       to keyBlob.header.bVersion
41404>>>>>>>>>        Move iType                  to keyBlob.header.aiKeyAlg
41405>>>>>>>>>        Move (SizeOfArray(aKey))    to keyBlob.cbKeySize
41406>>>>>>>>>        
41406>>>>>>>>>        Move (SizeOfArray(aKey)-1) to iLength
41407>>>>>>>>>        For iByte from 0 to iLength
41413>>>>>>>>>>
41413>>>>>>>>>            Move aKey[iByte] to keyBlob.rgbKeyData[iByte]
41414>>>>>>>>>        Loop
41415>>>>>>>>>>
41415>>>>>>>>>        
41415>>>>>>>>>        Move 0 to hKey
41416>>>>>>>>>        Move (CryptImportKey(hProv,AddressOf(keyBlob),SizeOfType(CryptoBlob),0,0,AddressOf(hKey))) to bOk
41417>>>>>>>>>        Function_Return hKey
41418>>>>>>>>>    End_Function
41419>>>>>>>>>    
41419>>>>>>>>>    // Sets the key parameters
41419>>>>>>>>>    Function SetKeyParameters Handle hKey Returns Boolean
41421>>>>>>>>>        Integer iPadding iMode
41421>>>>>>>>>        Boolean bOk
41421>>>>>>>>>        UChar[] aIV
41422>>>>>>>>>        
41422>>>>>>>>>        //Move (SizeOfArray(aIV)-1) to iLength
41422>>>>>>>>>        //For iByte from 0 to iLength
41422>>>>>>>>>        //    Move iByte to aIV[iByte]
41422>>>>>>>>>        //Loop
41422>>>>>>>>>
41422>>>>>>>>>        // Set initialization vector
41422>>>>>>>>>        Get paIV to aIV
41423>>>>>>>>>        Move (CryptSetKeyParam(hKey,KP_IV,AddressOf(aIV),0)) to bOk
41424>>>>>>>>>        If (bOk) Begin
41426>>>>>>>>>            // Set padding
41426>>>>>>>>>            Get piKeyPadding to iPadding
41427>>>>>>>>>            Move (CryptSetKeyParam(hKey,KP_PADDING,AddressOf(iPadding),0)) to bOk
41428>>>>>>>>>            If (bOk) Begin
41430>>>>>>>>>                // Set move
41430>>>>>>>>>                Get piKeyMode to iMode
41431>>>>>>>>>                Move (CryptSetKeyParam(hKey,KP_MODE,AddressOf(iMode),0)) to bOk
41432>>>>>>>>>            End
41432>>>>>>>>>>
41432>>>>>>>>>        End
41432>>>>>>>>>>
41432>>>>>>>>>        Function_Return bOk        
41433>>>>>>>>>    End_Function
41434>>>>>>>>>    
41434>>>>>>>>>    // Encrypts using block cipher
41434>>>>>>>>>    Function BlockEncrypt UChar[] ucData Returns UChar[]
41436>>>>>>>>>        Handle hProv hKey
41436>>>>>>>>>        Integer iLen iSize iBlocks
41436>>>>>>>>>        Boolean bOk
41436>>>>>>>>>        
41436>>>>>>>>>        Get AcquireContext to hProv
41437>>>>>>>>>        If (hProv) Begin
41439>>>>>>>>>            // Create key
41439>>>>>>>>>            Get CreateKey hProv to hKey
41440>>>>>>>>>            If (hKey) Begin
41442>>>>>>>>>                Get SetKeyParameters hKey to bOk
41443>>>>>>>>>                If (bOk) Begin
41445>>>>>>>>>                    // Buffer for block ciphers can be up to block length larger
41445>>>>>>>>>                    Get piBlockSize to iSize
41446>>>>>>>>>                    Move (SizeOfArray(ucData)) to iLen
41447>>>>>>>>>                    
41447>>>>>>>>>                    Move ((iLen/iSize)+1) to iBlocks
41448>>>>>>>>>                    Move (ResizeArray(ucData,iBlocks*iSize)) to ucData
41449>>>>>>>>>                    Move (CryptEncrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iLen),SizeOfArray(ucData))) to bOk
41450>>>>>>>>>                End
41450>>>>>>>>>>
41450>>>>>>>>>                Get DestroyKey hKey to bOk
41451>>>>>>>>>            End
41451>>>>>>>>>>
41451>>>>>>>>>            Get ReleaseContext hProv to bOk
41452>>>>>>>>>        End
41452>>>>>>>>>>
41452>>>>>>>>>        Function_Return ucData
41453>>>>>>>>>    End_Function
41454>>>>>>>>>    
41454>>>>>>>>>    // Decrypts using block cipher
41454>>>>>>>>>    Function BlockDecrypt UChar[] ucData Returns UChar[]
41456>>>>>>>>>        Handle hProv hKey
41456>>>>>>>>>        Integer iLen
41456>>>>>>>>>        Boolean bOk
41456>>>>>>>>>        
41456>>>>>>>>>        Get AcquireContext to hProv
41457>>>>>>>>>        If (hProv) Begin
41459>>>>>>>>>            // Create key
41459>>>>>>>>>            Get CreateKey hProv to hKey
41460>>>>>>>>>            If (hKey) Begin
41462>>>>>>>>>                Get SetKeyParameters hKey to bOk
41463>>>>>>>>>                If (bOk) Begin
41465>>>>>>>>>                    Move (SizeOfArray(ucData)) to iLen
41466>>>>>>>>>                    Move (CryptDecrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iLen))) to bOk
41467>>>>>>>>>                    Move (ResizeArray(ucData,iLen)) to ucData
41468>>>>>>>>>                End
41468>>>>>>>>>>
41468>>>>>>>>>                Get DestroyKey hKey to bOk
41469>>>>>>>>>            End
41469>>>>>>>>>>
41469>>>>>>>>>            Get ReleaseContext hProv to bOk
41470>>>>>>>>>        End
41470>>>>>>>>>>
41470>>>>>>>>>        Function_Return ucData
41471>>>>>>>>>    End_Function
41472>>>>>>>>>    
41472>>>>>>>>>    
41472>>>>>>>>>    //  Generates random data.
41472>>>>>>>>>    Function GenerateRandom Integer iBytes Returns UChar[]
41474>>>>>>>>>        Handle hProv
41474>>>>>>>>>        UChar[] uaResult
41475>>>>>>>>>        Boolean bRes
41475>>>>>>>>>        
41475>>>>>>>>>        Get AcquireContext to hProv
41476>>>>>>>>>        
41476>>>>>>>>>        Move (ResizeArray(uaResult, iBytes)) to uaResult
41477>>>>>>>>>        Move (CryptGenRandom(hProv, iBytes, AddressOf(uaResult))) to bRes
41478>>>>>>>>>        
41478>>>>>>>>>        Get ReleaseContext hProv to bRes
41479>>>>>>>>>        
41479>>>>>>>>>        Function_Return uaResult
41480>>>>>>>>>    End_Function
41481>>>>>>>>>    
41481>>>>>>>>>    //  Generates random data and does a base64 encoding to properly present it as a string.
41481>>>>>>>>>    Function GenerateRandomString Integer iLength Returns String
41483>>>>>>>>>        String sResult
41483>>>>>>>>>        UChar[] ucData
41484>>>>>>>>>        Pointer pBase64
41484>>>>>>>>>        Integer iVoid
41484>>>>>>>>>        
41484>>>>>>>>>        Get GenerateRandom iLength to ucData
41485>>>>>>>>>        
41485>>>>>>>>>        Move (Base64Encode(AddressOf(ucData), iLength)) to pBase64
41486>>>>>>>>>        Move (PointerToString(pBase64)) to sResult
41487>>>>>>>>>        Move (Free(pBase64)) to iVoid
41488>>>>>>>>>        
41488>>>>>>>>>        Function_Return (Left(sResult, iLength))
41489>>>>>>>>>    End_Function
41490>>>>>>>>>    
41490>>>>>>>>>End_Class
41491>>>>>>>Use Base64Functions.pkg
Including file: Base64Functions.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\Base64Functions.pkg)
41491>>>>>>>>>//> This package enables base64 encoding and decoding of strings:
41491>>>>>>>>>//>
41491>>>>>>>>>//>     Get EncodeString of oBase64Functions sValue to sValue
41491>>>>>>>>>//>     Get DecodeString of oBase64Functions sValue to sValue
41491>>>>>>>>>//>
41491>>>>>>>>>//> Remember to set the "max argument size" if dealing with very large
41491>>>>>>>>>//> strings.
41491>>>>>>>>>//>
41491>>>>>>>>>//> For 17.1 and later the functionality of this package is based on two functions (Base64Encode and
41491>>>>>>>>>//> Base64Decode) that are built into the runtime.
41491>>>>>>>>>//>
41491>>>>>>>>>//> But for versions up to and including 17.0 it's based on the vdfBase64.dll file that was obtained
41491>>>>>>>>>//> from DAE that have kindly allowed me to distribute it to other DF developers. Programs including
41491>>>>>>>>>//> this package will give off an error on start-up if vdfBase64.dll is not found in the /bin folder
41491>>>>>>>>>//> if the VDF runtime. You will find the DLL in the /programs folder of the StureApsPublicLib workspace
41491>>>>>>>>>
41491>>>>>>>>>Use VdfBase.pkg
41491>>>>>>>>>
41491>>>>>>>>>// Functions in vdfBase64.dll
41491>>>>>>>>>External_Function xxBase64Encode "vdfbase64Encode" vdfBase64.dll Pointer pBuffer Returns Integer
41492>>>>>>>>>External_Function xxBase64Decode "vdfbase64Decode" vdfBase64.dll Pointer pBuffer Returns Integer
41493>>>>>>>>>External_Function xxBase64Free   "vdfbase64Free"   vdfBase64.dll Pointer pBuffer Returns Integer
41494>>>>>>>>>
41494>>>>>>>>>// Structure
41494>>>>>>>>>Struct txxfBase64Buffer
41494>>>>>>>>>    Pointer pData
41494>>>>>>>>>    Integer iLength
41494>>>>>>>>>End_Struct 
41494>>>>>>>>>
41494>>>>>>>>>Global_Variable Integer oBase64Functions
41494>>>>>>>>>
41494>>>>>>>>>Object _oBase64Functions is a cObject
41496>>>>>>>>>    Move Self to oBase64Functions
41497>>>>>>>>>
41497>>>>>>>>>
41497>>>>>>>>>    Function EncodeString String sValue Returns String
41500>>>>>>>>>        Address pBase64
41500>>>>>>>>>        String sResult
41500>>>>>>>>>        Integer iVoid
41500>>>>>>>>>        Move (Base64Encode(AddressOf(sValue), Length(sValue))) to pBase64
41501>>>>>>>>>        Move (PointerToString(pBase64)) to sResult
41502>>>>>>>>>        Move (Free(pBase64)) to iVoid
41503>>>>>>>>>        Function_Return sResult
41504>>>>>>>>>    End_Function
41505>>>>>>>>>
41505>>>>>>>>>    Function DecodeString String sValue Returns String
41508>>>>>>>>>        Address pBinary
41508>>>>>>>>>        String sBinary
41508>>>>>>>>>        Integer iVoid iLen
41508>>>>>>>>>        Move (Base64Decode(AddressOf(sValue), &iLen)) to pBinary
41509>>>>>>>>>        Move (Repeat(Character(0), iLen)) to sBinary
41510>>>>>>>>>        Move (MemCopy(AddressOf(sBinary), pBinary, iLen)) to iVoid
41511>>>>>>>>>        Move (Free(pBinary)) to iVoid
41512>>>>>>>>>        Function_Return sBinary
41513>>>>>>>>>    End_Function
41514>>>>>>>>>
41514>>>>>>>>>End_Object
41515>>>>>>>Use MSSqldrv.pkg
41515>>>>>>>Use db2_drv.pkg
41515>>>>>>>Use odbc_drv.pkg
41515>>>>>>>Use DFBtrDrv.pkg
41515>>>>>>>Use vWin32fh.pkg
41515>>>>>>>
41515>>>>>>>Use DUFLanguageConstants.inc
41515>>>>>>>Use MertechDUF.pkg
Including file: MertechDUF.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\MertechDUF.pkg)
41515>>>>>>>>>//
41515>>>>>>>>>// Use of Mertech drivers:
41515>>>>>>>>>// Put the line "Define DUF_Use_Mertech_Drivers in YOUR code prior the "Use" statement for this package if using Mertech drivers!
41515>>>>>>>>>// And put the line right before the "Use cDbUpdateHandler.pkg" line.
41515>>>>>>>>>//Define DUF_Use_Mertech_Drivers
41515>>>>>>>>>//
#REM DO ~ USE MERTECH.INC
41515>>>>>>>>>// MySQL Data Types
41515>>>>>>>>>Define eMySQL_DECIMAL                               for 0
41515>>>>>>>>>Define eMySQL_TINY                                  for 1
41515>>>>>>>>>Define eMySQL_SHORT                                 for 2
41515>>>>>>>>>Define eMySQL_LONG                                  for 3
41515>>>>>>>>>Define eMySQL_FLOAT                                 for 4
41515>>>>>>>>>Define eMySQL_DOUBLE                                for 5
41515>>>>>>>>>Define eMySQL_NULL                                  for 6
41515>>>>>>>>>Define eMySQL_TIMESTAMP                             for 7
41515>>>>>>>>>Define eMySQL_LONGLONG                              for 8
41515>>>>>>>>>Define eMySQL_INT24                                 for 9
41515>>>>>>>>>Define eMySQL_DATE                                  for 10
41515>>>>>>>>>Define eMySQL_TIME                                  for 11
41515>>>>>>>>>Define eMySQL_DATETIME                              for 12
41515>>>>>>>>>Define eMySQL_YEAR                                  for 13
41515>>>>>>>>>Define eMySQL_NEWDATE                               for 14
41515>>>>>>>>>Define eMySQL_BIT                                   for 16
41515>>>>>>>>>Define eMySQL_NEWDECIMAL                            for 246
41515>>>>>>>>>Define eMySQL_ENUM                                  for 247
41515>>>>>>>>>Define eMySQL_SET                                   for 248
41515>>>>>>>>>Define eMySQL_TINY_BLOB                             for 249
41515>>>>>>>>>Define eMySQL_MEDIUM_BLOB                           for 250
41515>>>>>>>>>Define eMySQL_LONG_BLOB                             for 251
41515>>>>>>>>>Define eMySQL_BLOB                                  for 252
41515>>>>>>>>>Define eMySQL_VAR_STRING                            for 253
41515>>>>>>>>>Define eMySQL_STRING                                for 254
41515>>>>>>>>>Define eMySQL_TINY_TEXT                             for -249
41515>>>>>>>>>Define eMySQL_MEDIUM_TEXT                           for -250
41515>>>>>>>>>Define eMySQL_LONG_TEXT                             for -251
41515>>>>>>>>>Define eMySQL_TEXT                                  for -252
41515>>>>>>>>>
41515>>>>>>>>>// Oracle Data Types
41515>>>>>>>>>Define eOracle_VARCHAR2                             for   1
41515>>>>>>>>>Define eOracle_NUMBER                               for   2
41515>>>>>>>>>Define eOracle_INT                                  for   3
41515>>>>>>>>>Define eOracle_FLOAT                                for   4
41515>>>>>>>>>Define eOracle_STRING                               for   5
41515>>>>>>>>>Define eOracle_LONG                                 for   8
41515>>>>>>>>>Define eOracle_ROWID                                for  11
41515>>>>>>>>>Define eOracle_DATE                                 for  12
41515>>>>>>>>>Define eOracle_RAW                                  for  23
41515>>>>>>>>>Define eOracle_LONGRAW                              for  24
41515>>>>>>>>>Define eOracle_CHAR                                 for  96
41515>>>>>>>>>Define eOracle_MSLABEL                              for 106
41515>>>>>>>>>Define eOracle_CLOB                                 for 112
41515>>>>>>>>>Define eOracle_BLOB                                 for 113
41515>>>>>>>>>Define eOracle_TIMESTAMP                            for 187
41515>>>>>>>>>Define eOracle_TIMESTAMPTZ                          for 188
41515>>>>>>>>>Define eOracle_INTERVALYM                           for 189
41515>>>>>>>>>Define eOracle_INTERVALDS                           for 190
41515>>>>>>>>>Define eOracle_TIMESTAMPLTZ                         for 232
41515>>>>>>>>>Define eOracle_NCHAR                                for 286
41515>>>>>>>>>Define eOracle_NVARCHAR2                            for 287
41515>>>>>>>>>Define eOracle_NCLOB                                for 288
41515>>>>>>>>>
41515>>>>>>>>>// PostgreSQL Data Types
41515>>>>>>>>>Define ePgSQL_CIRCLE                                for  718
41515>>>>>>>>>Define ePgSQL_MONEY                                 for  790
41515>>>>>>>>>Define ePgSQL_BOOL                                  for   16
41515>>>>>>>>>Define ePgSQL_BYTEA                                 for   17
41515>>>>>>>>>Define ePgSQL_CHAR                                  for   18
41515>>>>>>>>>Define ePgSQL_INT2                                  for   21
41515>>>>>>>>>Define ePgSQL_INT4                                  for   23
41515>>>>>>>>>Define ePgSQL_REGPROC                               for   24
41515>>>>>>>>>Define ePgSQL_REGPROCEDURE                          for 2202
41515>>>>>>>>>Define ePgSQL_REGOPER                               for 2203
41515>>>>>>>>>Define ePgSQL_REGOPERATOR                           for 2204
41515>>>>>>>>>Define ePgSQL_REGCLASS                              for 2205
41515>>>>>>>>>Define ePgSQL_REGTYPE                               for 2206
41515>>>>>>>>>Define ePgSQL_TEXT                                  for   25
41515>>>>>>>>>Define ePgSQL_CITEXT                                for  -25
41515>>>>>>>>>Define ePgSQL_OID                                   for   26
41515>>>>>>>>>Define ePgSQL_TID                                   for   27
41515>>>>>>>>>Define ePgSQL_XID                                   for   28
41515>>>>>>>>>Define ePgSQL_CID                                   for   29
41515>>>>>>>>>Define ePgSQL_XML                                   for  142
41515>>>>>>>>>Define ePgSQL_BPCHAR                                for 1042
41515>>>>>>>>>Define ePgSQL_VARCHAR                               for 1043
41515>>>>>>>>>Define ePgSQL_INT8                                  for   20
41515>>>>>>>>>Define ePgSQL_PATH                                  for  602
41515>>>>>>>>>Define ePgSQL_FLOAT4                                for  700
41515>>>>>>>>>Define ePgSQL_FLOAT8                                for  701
41515>>>>>>>>>Define ePgSQL_ABSTIME                               for  702
41515>>>>>>>>>Define ePgSQL_RELTIME                               for  703
41515>>>>>>>>>Define ePgSQL_TINTERVAL                             for  704
41515>>>>>>>>>Define ePgSQL_POINT                                 for  600
41515>>>>>>>>>Define ePgSQL_LINE                                  for  628
41515>>>>>>>>>Define ePgSQL_LSEG                                  for  601
41515>>>>>>>>>Define ePgSQL_BOX                                   for  603
41515>>>>>>>>>Define ePgSQL_POLYGON                               for  604
41515>>>>>>>>>Define ePgSQL_ACLITEM                               for 1033
41515>>>>>>>>>Define ePgSQL_MACADDR                               for  829
41515>>>>>>>>>Define ePgSQL_INET                                  for  869
41515>>>>>>>>>Define ePgSQL_CIDR                                  for  650
41515>>>>>>>>>Define ePgSQL_TIMESTAMP                             for 1114
41515>>>>>>>>>Define ePgSQL_DATE                                  for 1082
41515>>>>>>>>>Define ePgSQL_TIME                                  for 1083
41515>>>>>>>>>Define ePgSQL_TIMESTAMPTZ                           for 1184
41515>>>>>>>>>Define ePgSQL_INTERVAL                              for 1186
41515>>>>>>>>>Define ePgSQL_NUMERIC                               for 1700
41515>>>>>>>>>Define ePgSQL_TIMETZ                                for 1266
41515>>>>>>>>>Define ePgSQL_BIT                                   for 1560
41515>>>>>>>>>Define ePgSQL_VARBIT                                for 1562
41515>>>>>>>>>Define ePgSQL_UUID                                  for 2950
41515>>>>>>>>>
41515>>>>>>>>>// SQL Server Data Types
41515>>>>>>>>>Define eSQLServer_NA                                for    0
41515>>>>>>>>>Define eSQLServer_CHAR                              for    1
41515>>>>>>>>>Define eSQLServer_NUMERIC                           for    2
41515>>>>>>>>>Define eSQLServer_DECIMAL                           for    3
41515>>>>>>>>>Define eSQLServer_INT                               for    4
41515>>>>>>>>>Define eSQLServer_SMALLINT                          for    5
41515>>>>>>>>>Define eSQLServer_FLOAT                             for    6
41515>>>>>>>>>Define eSQLServer_REAL                              for    7
41515>>>>>>>>>Define eSQLServer_DOUBLE                            for    8
41515>>>>>>>>>Define eSQLServer_DATETIME                          for   11
41515>>>>>>>>>Define eSQLServer_VARCHAR                           for   12
41515>>>>>>>>>Define eSQLServer_DATE                              for   40
41515>>>>>>>>>Define eSQLServer_TIME                              for   41
41515>>>>>>>>>Define eSQLServer_DATETIME2                         for   42
41515>>>>>>>>>Define eSQLServer_DATETIMEOFFSET                    for   43
41515>>>>>>>>>Define eSQLServer_SMALLDATETIME                     for   58
41515>>>>>>>>>Define eSQLServer_TIMESTAMP                         for   93
41515>>>>>>>>>Define eSQLServer_HIERARCHYID                       for  128
41515>>>>>>>>>Define eSQLServer_GEOMETRY                          for  129
41515>>>>>>>>>Define eSQLServer_GEOGRAPHY                         for  130
41515>>>>>>>>>Define eSQLServer_TEXT                              for   -1
41515>>>>>>>>>Define eSQLServer_BINARY                            for   -2
41515>>>>>>>>>Define eSQLServer_VARBINARY                         for   -3
41515>>>>>>>>>Define eSQLServer_IMAGE                             for   -4
41515>>>>>>>>>Define eSQLServer_BIGINT                            for   -5
41515>>>>>>>>>Define eSQLServer_TINYINT                           for   -6
41515>>>>>>>>>Define eSQLServer_BIT                               for   -7
41515>>>>>>>>>Define eSQLServer_NCHAR                             for   -8
41515>>>>>>>>>Define eSQLServer_NVARCHAR                          for   -9
41515>>>>>>>>>Define eSQLServer_NTEXT                             for  -10
41515>>>>>>>>>Define eSQLServer_GUID                              for  -11
41515>>>>>>>>>Define eSQLServer_VARBINARYMAX                      for  -98
41515>>>>>>>>>Define eSQLServer_VARCHARMAX                        for  -99
41515>>>>>>>>>Define eSQLServer_NVARCHARMAX                       for -100
41515>>>>>>>>>Define eSQLServer_SQLVARIANT                        for -150
41515>>>>>>>>>Define eSQLServer_XML                               for -370
41515>>>>>>>>>
41515>>>>>>>>>Use cDbUpdateFunctionLibrary.inc
Including file: cDbUpdateFunctionLibrary.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cDbUpdateFunctionLibrary.inc)
41515>>>>>>>>>>>Use DUFLanguageConstants.inc
41515>>>>>>>>>>>
41515>>>>>>>>>>>Register_Function paSQLQueryMessages Returns String[]
41515>>>>>>>>>>>Register_Procedure Set paSQLQueryMessages String[] aSQLQueryMessages
41515>>>>>>>>>>>
41515>>>>>>>>>>>    Define CS_DatabaseUpdateFramework for " ***  The Database Update Framework (DUF) ***"
41515>>>>>>>>>>>
41515>>>>>>>>>>>    Define DATAFLEX_ID for "DATAFLEX"
41515>>>>>>>>>>>
41515>>>>>>>>>>>    Define CS_OEM_Txt for "OEM"
41515>>>>>>>>>>>
41515>>>>>>>>>>>    Define CS_ANSI_Txt for "ANSI"
41515>>>>>>>>>>>
41515>>>>>>>>>>>    Define CS_DFCONNID for "DFCONNID"
41515>>>>>>>>>>>
41515>>>>>>>>>>>    Define CS_SERVER for "SERVER"
41515>>>>>>>>>>>
41515>>>>>>>>>>>    Define CS_SERVER_NAME for "SERVER_NAME"
41515>>>>>>>>>>>
41515>>>>>>>>>>>    Define CS_DRIVER_NAME for "DRIVER_NAME"
41515>>>>>>>>>>>
41515>>>>>>>>>>>    Define CS_DATABASE_NAME for "DATABASE_NAME"
41515>>>>>>>>>>>
41515>>>>>>>>>>>    Define CS_SCHEMA_NAME for "SCHEMA_NAME"
41515>>>>>>>>>>>
41515>>>>>>>>>>>    Define CS_TABLE_CHARACTER_FORMAT for "TABLE_CHARACTER_FORMAT"
41515>>>>>>>>>>>
41515>>>>>>>>>>>    Define CS_USE_DUMMY_ZERO_DATE for "USE_DUMMY_ZERO_DATE"
41515>>>>>>>>>>>
41515>>>>>>>>>>>    Define CS_SYSTEM_FILE for "SYSTEM_FILE"
41515>>>>>>>>>>>
41515>>>>>>>>>>>    Define CS_RECNUM_TABLE for "RECNUM_TABLE"
41515>>>>>>>>>>>
41515>>>>>>>>>>>    Define CS_PRIMARY_INDEX for "PRIMARY_INDEX"
41515>>>>>>>>>>>
41515>>>>>>>>>>>    Define CS_INDEX_NUMBER for "INDEX_NUMBER"
41515>>>>>>>>>>>
41515>>>>>>>>>>>    Define CS_INDEX_NAME for "INDEX_NAME"
41515>>>>>>>>>>>
41515>>>>>>>>>>>    Define CS_DUFLowestAllowedDateValue for "01/01/1753"
41515>>>>>>>>>>>    Define CS_DUFLowestSQLDateValue     for "1753-01-01"
41515>>>>>>>>>>>
41515>>>>>>>>>>>    Define CS_DUFBackupDataFolder for "BackupData"
41515>>>>>>>>>>>
41515>>>>>>>>>>>// Global handle to a cDatabaseUpdateHandler object
41515>>>>>>>>>>>    Global_Variable Handle ghoDbUpdateHandler    
41515>>>>>>>>>>>    Move 0 to ghoDbUpdateHandler
41516>>>>>>>>>>>
41516>>>>>>>>>>>    Global_Variable Handle ghoDbUpdateFunctionLibrary  
41516>>>>>>>>>>>    Move 0 to ghoDbUpdateFunctionLibrary
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tSQLScriptArray
41517>>>>>>>>>>>    Boolean bError
41517>>>>>>>>>>>    Boolean bArgumentSizeChanged
41517>>>>>>>>>>>    Integer iOrgArgumentSize
41517>>>>>>>>>>>    String[] sSQLScriptArray
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tSqlErrorArray
41517>>>>>>>>>>>    String[]  sSqlErrorArray
41517>>>>>>>>>>>    String[]  sSqlStatementArray
41517>>>>>>>>>>>    Integer[] iSqlErrorArray
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tSqlColumnNew
41517>>>>>>>>>>>    String  sBaseColumnName
41517>>>>>>>>>>>    String  sBaseTableName
41517>>>>>>>>>>>    String  sLabel
41517>>>>>>>>>>>    Integer iSqlType
41517>>>>>>>>>>>    Integer iSize
41517>>>>>>>>>>>    Integer iPrecision
41517>>>>>>>>>>>    Integer iDFType
41517>>>>>>>>>>>    Integer iDFNativeType
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tColumnType
41517>>>>>>>>>>>    String  sSQLType
41517>>>>>>>>>>>    Integer iSQLType
41517>>>>>>>>>>>    Boolean bCanEditSize
41517>>>>>>>>>>>    Integer iDefaultSize
41517>>>>>>>>>>>    Integer iMinSize
41517>>>>>>>>>>>    Number  nMaxSize
41517>>>>>>>>>>>    String  sDataFlexType
41517>>>>>>>>>>>    Integer iDataFlexType
41517>>>>>>>>>>>    Boolean bNativeDataType
41517>>>>>>>>>>>    String  sPrecision
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>// Used to store/retreive SQL keywords in a struct array.
41517>>>>>>>>>>>// Various SQL back-ends can have slightly different
41517>>>>>>>>>>>// keywords.
41517>>>>>>>>>>>Struct tSQLKeyWords
41517>>>>>>>>>>>    Integer iSQLWord
41517>>>>>>>>>>>    Integer iSQLDbType
41517>>>>>>>>>>>    String  sSQLPhrase // Can be more than one word.
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tSQLRelation
41517>>>>>>>>>>>    Integer iFileNumber
41517>>>>>>>>>>>    Integer iFieldNumber
41517>>>>>>>>>>>    String  sFileName
41517>>>>>>>>>>>    String  sFieldName
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tSQLLoggedInUser
41517>>>>>>>>>>>    String sUser
41517>>>>>>>>>>>    String sProgram
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>// Used as a start for error handing. Used by Error_Report_Mode property
41517>>>>>>>>>>>Enumeration_List
41517>>>>>>>>>>>    Define DUF_ERROR_REPORT    // Report Error on screen
41517>>>>>>>>>>>    Define DUF_ERROR_NO_REPORT // Show no Error..
41517>>>>>>>>>>>End_Enumeration_List
41517>>>>>>>>>>>
41517>>>>>>>>>>>// We need to re-define the standard constants because several driver constants
41517>>>>>>>>>>>// have the same value and we need to be able to distinguish which data type to use when
41517>>>>>>>>>>>// SQL Back-ends (iSQLDbType in the tSQLKeywords struct).
41517>>>>>>>>>>>// They can have slightly different SQL keywords.
41517>>>>>>>>>>>// Note: If a new type is added to the list,
41517>>>>>>>>>>>//       the struct array xxx must be adjusted
41517>>>>>>>>>>>//       so that it is filled with all SQL
41517>>>>>>>>>>>//       keywords for that new type.
41517>>>>>>>>>>>Enum_List
41517>>>>>>>>>>>    Define EN_DbTypeDataFlex   for 0
41517>>>>>>>>>>>    Define EN_DbTypeMSSQL      for 1
41517>>>>>>>>>>>    Define EN_DbTypeMySQL      for 2
41517>>>>>>>>>>>    Define EN_DbTypeOracle     for 3
41517>>>>>>>>>>>    Define EN_DbTypeDB2        for 4
41517>>>>>>>>>>>    Define EN_DbTypePostgre    for 5
41517>>>>>>>>>>>    Define EN_DbTypePervasive  for 6
41517>>>>>>>>>>>//    Define EN_DbTypeMSSQL
41517>>>>>>>>>>>//    Define EN_DbTypeMySQL
41517>>>>>>>>>>>//    Define EN_DbTypeOracle
41517>>>>>>>>>>>//    Define EN_DbTypeDB2
41517>>>>>>>>>>>//    Define EN_DbTypePostgre
41517>>>>>>>>>>>//    Define EN_DbTypeDataFlex // Embedded database.
41517>>>>>>>>>>>End_Enum_List
41517>>>>>>>>>>>
41517>>>>>>>>>>>// We need to have our "own" constants for the standard DataFlex data types.
41517>>>>>>>>>>>// These can be used with SQL functions such as e.g. SQLColumnAdd, instead
41517>>>>>>>>>>>// of using one of the driver specific integer constants such as e.g. "SQL_VARCHAR".
41517>>>>>>>>>>>Define CS_DbTypeMSSQL       for "Microsoft SQL Server"
41517>>>>>>>>>>>Define CS_DbTypeMySQL       for "MySQL"
41517>>>>>>>>>>>Define CS_DbTypeOracle      for "Oracle"
41517>>>>>>>>>>>Define CS_DbTypeDB2         for "IBM DB2"
41517>>>>>>>>>>>Define CS_DbTypePostgre     for "PostgreSQL"
41517>>>>>>>>>>>Define CS_DbTypeDataFlex    for "DataFlex Embedded"
41517>>>>>>>>>>>
41517>>>>>>>>>>>// We need to re-define the standard constants because several driver constants
41517>>>>>>>>>>>// have the same value and we need to be able to distinguish which data type to use when
41517>>>>>>>>>>>// e.g. creating a column with embedded SQL (ESQL).
41517>>>>>>>>>>>Enum_List
41517>>>>>>>>>>>    Define DF_ASCII_DUF     for -1500 // All of these are DF_xxx constant values - 1500
41517>>>>>>>>>>>    Define DF_BCD_DUF       for -1499
41517>>>>>>>>>>>    Define DF_DATE_DUF      for -1498
41517>>>>>>>>>>>    Define DF_TEXT_DUF      for -1495
41517>>>>>>>>>>>    Define DF_BINARY_DUF    for -1494
41517>>>>>>>>>>>    Define DF_DATETIME_DUF  for -1493
41517>>>>>>>>>>>End_Enum_List
41517>>>>>>>>>>>
41517>>>>>>>>>>>    Define SQL_TEXT for (DF_TEXT + 1024)
41517>>>>>>>>>>>
41517>>>>>>>>>>>Define SQL_CHARBIT          for (DF_BINARY + 1024)
41517>>>>>>>>>>>Define SQL_LONGVARCHARBIT   for (DF_BINARY + 1025)
41517>>>>>>>>>>>Define SQL_VARCHARBIT       for (DF_BINARY + 1026)
41517>>>>>>>>>>>
41517>>>>>>>>>>>// These are not defined pre DF 18:
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tSQLIntTableInfo
41517>>>>>>>>>>>    String sDriverName
41517>>>>>>>>>>>    String sServerName
41517>>>>>>>>>>>    String sDatabaseName
41517>>>>>>>>>>>    String sSchemaName
41517>>>>>>>>>>>    Boolean bRecnumTable
41517>>>>>>>>>>>    Integer iPrimaryIndex
41517>>>>>>>>>>>    Integer iGenerateRecordIdMethod  // RIM_NONE, RIM_IDENTITY_COLUMN,  RIM_DISPENSER_TABLE, RIM_EXTERNAL
41517>>>>>>>>>>>    String sTableCharacterFormat
41517>>>>>>>>>>>    Boolean bUseDummyZeroDate
41517>>>>>>>>>>>    Integer iFileDummyUpdateColumn // Init value to -1 if not exists (value can be in range 1 - number of columns)
41517>>>>>>>>>>>    Integer iFileBlockSize         // Init value to -1 if not exists
41517>>>>>>>>>>>    Integer iFileMaxRowsFetched    // Init value to -1 if not exists
41517>>>>>>>>>>>    Integer iFileGetRidAfterCreate // Init value to -1. But is boolean!
41517>>>>>>>>>>>    Integer iFileJitBinding        // Init value to -1. But is boolean!
41517>>>>>>>>>>>    String sRefindAfterSave        // Yes or No (how to handle?)
41517>>>>>>>>>>>    String sSystemFile             // Yes or No (how to handle?)
41517>>>>>>>>>>>    String sFileIndexTablespace
41517>>>>>>>>>>>    String sFileLongTablespace
41517>>>>>>>>>>>    String sTableTablespace
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tSQLIntColumnInfo
41517>>>>>>>>>>>    Integer iFieldNumber
41517>>>>>>>>>>>    Integer iFieldIndex
41517>>>>>>>>>>>    Integer iFieldRelatedFile
41517>>>>>>>>>>>    Integer iFieldRelatedField
41517>>>>>>>>>>>    Integer iIndexNumber
41517>>>>>>>>>>>    Integer iIndexNumberSegments
41517>>>>>>>>>>>    Integer iIndexSegmentField1
41517>>>>>>>>>>>    Integer iIndexSegmentField2
41517>>>>>>>>>>>    Integer iIndexSegmentFieldn
41517>>>>>>>>>>>    String  sIndexName
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tAPIColumn
41517>>>>>>>>>>>    Integer iFieldNumber
41517>>>>>>>>>>>    String  sFieldName
41517>>>>>>>>>>>    Integer iType
41517>>>>>>>>>>>    String  sType
41517>>>>>>>>>>>    Integer iLength
41517>>>>>>>>>>>    Integer iPrecision
41517>>>>>>>>>>>    Integer iOptions
41517>>>>>>>>>>>    Boolean bIsSQLType
41517>>>>>>>>>>>    Boolean bAllowNULL
41517>>>>>>>>>>>    String  sDefaultValue
41517>>>>>>>>>>>    Boolean bShouldChange
41517>>>>>>>>>>>    Boolean bCancel
41517>>>>>>>>>>>    Boolean bError
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tAPIColumnCompare
41517>>>>>>>>>>>    Integer iFieldNumber
41517>>>>>>>>>>>    // FROM database:
41517>>>>>>>>>>>    Boolean bExistsFrom
41517>>>>>>>>>>>    String  sFieldNameFrom
41517>>>>>>>>>>>    Integer iTypeFrom
41517>>>>>>>>>>>    String  sTypeFrom
41517>>>>>>>>>>>    Integer iLengthFrom
41517>>>>>>>>>>>    Integer iPrecisionFrom
41517>>>>>>>>>>>    Integer iOptionsFrom
41517>>>>>>>>>>>    Boolean bIsSQLTypeFrom
41517>>>>>>>>>>>    Boolean bAllowNULLFrom
41517>>>>>>>>>>>    String  sDefaultValueFrom
41517>>>>>>>>>>>    Boolean bShouldChangeFrom
41517>>>>>>>>>>>    Boolean bCancelFrom
41517>>>>>>>>>>>    Boolean bErrorFrom
41517>>>>>>>>>>>    // TO database:
41517>>>>>>>>>>>    Boolean bExistsTo
41517>>>>>>>>>>>    Integer iFieldNumberTo
41517>>>>>>>>>>>    String  sFieldNameTo
41517>>>>>>>>>>>    Integer iTypeTo
41517>>>>>>>>>>>    String  sTypeTo
41517>>>>>>>>>>>    Integer iLengthTo
41517>>>>>>>>>>>    Integer iPrecisionTo
41517>>>>>>>>>>>    Integer iOptionsTo
41517>>>>>>>>>>>    Boolean bIsSQLTypeTo
41517>>>>>>>>>>>    Boolean bAllowNULLTo
41517>>>>>>>>>>>    String  sDefaultValueTo
41517>>>>>>>>>>>    Boolean bShouldChangeTo
41517>>>>>>>>>>>    Boolean bCancelTo
41517>>>>>>>>>>>    Boolean bErrorTo
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tAPIRelation
41517>>>>>>>>>>>    Handle  hTableFrom
41517>>>>>>>>>>>    Integer iColumnFrom
41517>>>>>>>>>>>    Handle  hTableTo
41517>>>>>>>>>>>    Integer iColumnTo
41517>>>>>>>>>>>    String  sLogicalNameFrom
41517>>>>>>>>>>>    String  sLogicalNameTo
41517>>>>>>>>>>>    String  sFieldNameFrom
41517>>>>>>>>>>>    String  sFieldNameTo
41517>>>>>>>>>>>    Boolean bShouldChange
41517>>>>>>>>>>>    Boolean bCancel
41517>>>>>>>>>>>    Boolean bError
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tAPIRelationCompare
41517>>>>>>>>>>>    // Common:
41517>>>>>>>>>>>    Handle  hTableFrom
41517>>>>>>>>>>>    Integer iColumnFrom
41517>>>>>>>>>>>    Handle  hTableTo
41517>>>>>>>>>>>    Integer iColumnTo
41517>>>>>>>>>>>    // FROM database:
41517>>>>>>>>>>>    Boolean bExistsFrom
41517>>>>>>>>>>>    String  sLogicalNameFrom_From
41517>>>>>>>>>>>    String  sLogicalNameTo_From
41517>>>>>>>>>>>    String  sFieldNameFrom_From
41517>>>>>>>>>>>    String  sFieldNameTo_From
41517>>>>>>>>>>>    Boolean bShouldChange_From
41517>>>>>>>>>>>    Boolean bCancel_From
41517>>>>>>>>>>>    Boolean bError_From
41517>>>>>>>>>>>    // TO database:
41517>>>>>>>>>>>    Boolean bExistsTo
41517>>>>>>>>>>>    String  sLogicalNameFrom_To
41517>>>>>>>>>>>    String  sLogicalNameTo_To
41517>>>>>>>>>>>    String  sFieldNameFrom_To
41517>>>>>>>>>>>    String  sFieldNameTo_To
41517>>>>>>>>>>>    Boolean bShouldChange_To
41517>>>>>>>>>>>    Boolean bCancel_To
41517>>>>>>>>>>>    Boolean bError_To
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tAPIIndexSegment
41517>>>>>>>>>>>    Integer iFieldNumber
41517>>>>>>>>>>>    String  sFieldName
41517>>>>>>>>>>>    Boolean bUppercase
41517>>>>>>>>>>>    Boolean bAscending
41517>>>>>>>>>>>    Boolean bShouldChange
41517>>>>>>>>>>>    Boolean bCancel
41517>>>>>>>>>>>    Boolean bError
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tAPIIndex
41517>>>>>>>>>>>    Integer iIndexNumber
41517>>>>>>>>>>>    Integer iPrimaryIndex
41517>>>>>>>>>>>    String  sSQLIndexName
41517>>>>>>>>>>>    Integer iSQLIndexType
41517>>>>>>>>>>>    Boolean bIsSQLClustered
41517>>>>>>>>>>>    Boolean bIsSQLPrimaryKey
41517>>>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArray
41517>>>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArray
41517>>>>>>>>>>>    Boolean bShouldChange
41517>>>>>>>>>>>    Boolean bCancel
41517>>>>>>>>>>>    Boolean bError
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tAPIIndexCompare
41517>>>>>>>>>>>    // Common:
41517>>>>>>>>>>>    Integer iIndexNumber
41517>>>>>>>>>>>    // FROM database:
41517>>>>>>>>>>>    Boolean bExistsFrom
41517>>>>>>>>>>>    Integer iPrimaryIndexFrom
41517>>>>>>>>>>>    String  sSQLIndexNameFrom
41517>>>>>>>>>>>    Integer iSQLIndexTypeFrom
41517>>>>>>>>>>>    Boolean bIsSQLClusteredFrom
41517>>>>>>>>>>>    Boolean bIsSQLPrimaryKeyFrom
41517>>>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArrayFrom
41517>>>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArrayFrom
41517>>>>>>>>>>>    Boolean bShouldChangeFrom
41517>>>>>>>>>>>    Boolean bCancelFrom
41517>>>>>>>>>>>    Boolean bErrorFrom
41517>>>>>>>>>>>    // TO database:
41517>>>>>>>>>>>    Boolean bExistsTo
41517>>>>>>>>>>>    Integer iPrimaryIndexTo
41517>>>>>>>>>>>    String  sSQLIndexNameTo
41517>>>>>>>>>>>    Integer iSQLIndexTypeTo
41517>>>>>>>>>>>    Boolean bIsSQLClusteredTo
41517>>>>>>>>>>>    Boolean bIsSQLPrimaryKeyTo
41517>>>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArrayTo
41517>>>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArrayTo
41517>>>>>>>>>>>    Boolean bShouldChangeTo
41517>>>>>>>>>>>    Boolean bCancelTo
41517>>>>>>>>>>>    Boolean bErrorTo
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tAPITableNameInfo
41517>>>>>>>>>>>    Integer iTableNumber
41517>>>>>>>>>>>    String  sRootName
41517>>>>>>>>>>>    String  sLogicalName
41517>>>>>>>>>>>    String  sDisplayName
41517>>>>>>>>>>>    String  sDriverID
41517>>>>>>>>>>>    Boolean bIsAlias
41517>>>>>>>>>>>    Boolean bIsSQL
41517>>>>>>>>>>>    Boolean bIsSystemFile
41517>>>>>>>>>>>    Boolean bShouldChange
41517>>>>>>>>>>>    Boolean bCancel
41517>>>>>>>>>>>    Boolean bError
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tAPITableNameInfoCompare
41517>>>>>>>>>>>    Integer iTableNumber
41517>>>>>>>>>>>    // FROM
41517>>>>>>>>>>>    Boolean bExistsFrom
41517>>>>>>>>>>>    String  sRootNameFrom
41517>>>>>>>>>>>    String  sLogicalNameFrom
41517>>>>>>>>>>>    String  sDisplayNameFrom
41517>>>>>>>>>>>    String  sDriverIDFrom
41517>>>>>>>>>>>    Boolean bIsAliasFrom
41517>>>>>>>>>>>    Boolean bIsSQLFrom
41517>>>>>>>>>>>    Boolean bIsSystemFileFrom
41517>>>>>>>>>>>    // TO database:
41517>>>>>>>>>>>    Boolean bExistsTo
41517>>>>>>>>>>>    String  sRootNameTo
41517>>>>>>>>>>>    String  sLogicalNameTo
41517>>>>>>>>>>>    String  sDisplayNameTo
41517>>>>>>>>>>>    String  sDriverIDTo
41517>>>>>>>>>>>    Boolean bIsAliasTo
41517>>>>>>>>>>>    Boolean bIsSQLTo
41517>>>>>>>>>>>    Boolean bIsSystemFileTo // *** Implement!
41517>>>>>>>>>>>    Boolean bShouldChange
41517>>>>>>>>>>>    Boolean bCancel
41517>>>>>>>>>>>    Boolean bError
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tAPITable
41517>>>>>>>>>>>    Handle hTable
41517>>>>>>>>>>>    Boolean bFromTable
41517>>>>>>>>>>>    Boolean bToTable
41517>>>>>>>>>>>    tAPITableNameInfo ApiTableInfo
41517>>>>>>>>>>>    tAPITableNameInfo ApiTableInfo
41517>>>>>>>>>>>    tAPIColumn[]      aApiColumns
41517>>>>>>>>>>>    tAPIColumn[]      aApiColumns
41517>>>>>>>>>>>    tAPIIndex[]       aApiIndexes
41517>>>>>>>>>>>    tAPIIndex[]       aApiIndexes
41517>>>>>>>>>>>    tAPIRelation[]    aApiRelations
41517>>>>>>>>>>>    tAPIRelation[]    aApiRelations
41517>>>>>>>>>>>    Boolean bShouldChange
41517>>>>>>>>>>>    Boolean bCancel
41517>>>>>>>>>>>    Boolean bError
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tAPITableCompare
41517>>>>>>>>>>>    Handle hTable
41517>>>>>>>>>>>    // FROM database:
41517>>>>>>>>>>>    Boolean bExistsFrom
41517>>>>>>>>>>>    // TO database:
41517>>>>>>>>>>>    Boolean bExistsTo
41517>>>>>>>>>>>    // Both:
41517>>>>>>>>>>>    tAPITableNameInfoCompare APITableNameInfoCompare
41517>>>>>>>>>>>    tAPITableNameInfoCompare APITableNameInfoCompare
41517>>>>>>>>>>>    tAPIColumnCompare[]     aAPIColumnsCompare
41517>>>>>>>>>>>    tAPIColumnCompare[]     aAPIColumnsCompare
41517>>>>>>>>>>>    tAPIIndexCompare[]      aAPIIndexesCompare
41517>>>>>>>>>>>    tAPIIndexCompare[]      aAPIIndexesCompare
41517>>>>>>>>>>>    tAPIRelationCompare[]   aAPIRelationsCompare
41517>>>>>>>>>>>    tAPIRelationCompare[]   aAPIRelationsCompare
41517>>>>>>>>>>>    Boolean bShouldChange   // Not implemented yet (!)
41517>>>>>>>>>>>    Boolean bCancel         // User cancel
41517>>>>>>>>>>>    Boolean bError          // Error occured while collecting data
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>Struct tAPITableBooleans
41517>>>>>>>>>>>    Boolean bApiTableUpdateAuto
41517>>>>>>>>>>>    Boolean bCompareDate_DateTime
41517>>>>>>>>>>>    Boolean bCompareIndexAscending
41517>>>>>>>>>>>    Boolean bCompareIndexUppercase
41517>>>>>>>>>>>    Boolean bCompareFilelistUppercase
41517>>>>>>>>>>>End_Struct
41517>>>>>>>>>>>
41517>>>>>>>>>>>Define C_tAPIColumn_None for 0
41517>>>>>>>>>>>Define C_tAPIColumn_Identity for 1
41517>>>>>>>>>>>
41517>>>>>>>>>>>// SQL Key-Word Constants:  CI_SQLSelect CI_SQLName CI_SQLFrom  CI_SQLSys
41517>>>>>>>>>>>// Used by the _SqlFindKeyWord function to return a proper keyword depending on the backend SQL,
41517>>>>>>>>>>>// i.e. one of the EN_DbTypeXXX members from the Enum_list above.
41517>>>>>>>>>>>// E.g. the CI_SQLAlterTable is only defined once, but the _SqlFindKeyWord function can return
41517>>>>>>>>>>>// different wording content depending on the EN_xxx value also passed to the function.
41517>>>>>>>>>>>Enum_List
41517>>>>>>>>>>>    Define CI_SQLAlterDatabase         //for "ALTER DATABASE"
41517>>>>>>>>>>>    Define CI_SQLSingle_User           //for "SINGLE_USER"
41517>>>>>>>>>>>    Define CI_SQLMulti_User            //for "USER_USER"
41517>>>>>>>>>>>    Define CI_SQLRollback              //for "ROLLBACK"
41517>>>>>>>>>>>    Define CI_SQLIMMEDIATE             //for "IMMEDIATE"
41517>>>>>>>>>>>    Define CI_SQLAlterTable            //for "ALTER TABLE"
41517>>>>>>>>>>>    Define CI_SQLAlterColumn           //for "ALTER COLUMN"
41517>>>>>>>>>>>    Define CI_SQLRenameColumn          //for "RENAME COLUMN"
41517>>>>>>>>>>>    Define CI_SQLColumn                //for "COLUMN"
41517>>>>>>>>>>>    Define CI_SQLSelect                //for "SELECT"
41517>>>>>>>>>>>    Define CI_SQLWhere                 //for "WHERE"
41517>>>>>>>>>>>    Define CI_SQLInfoSchema            //for "INFORMATION_SCHEMA.COLUMNS"
41517>>>>>>>>>>>    Define CI_SQLTable_Name            //for "TABLE_NAME"
41517>>>>>>>>>>>    Define CI_SQLTable                 //for "TABLE"
41517>>>>>>>>>>>    Define CI_SQLSys                   //for "SYS"
41517>>>>>>>>>>>    Define CI_SQLSp_Help               //for "SP_HELP"
41517>>>>>>>>>>>    Define CI_SQLFrom                  //for "FROM"
41517>>>>>>>>>>>    Define CI_SQLAdd                   //for "ADD"
41517>>>>>>>>>>>    Define CI_SQLDropColumn            //for "DROP"
41517>>>>>>>>>>>    Define CI_SQLCreateDatabase        //for "CREATE DATABASE"
41517>>>>>>>>>>>    Define CI_SQLDatabaseCollation     //for "COLLATE"
41517>>>>>>>>>>>    Define CI_SQLCreateTable           //for "CREATE TABLE"
41517>>>>>>>>>>>    Define CI_SQLDropTable             //for "DROP TABLE"
41517>>>>>>>>>>>    Define CI_SQLCreateView            //for "CREATE VIEW"
41517>>>>>>>>>>>    Define CI_SQLRenameTable           //for "RENAME TABLE"
41517>>>>>>>>>>>//    Define CI_SQLSelectFromWhereName   //for "SELECT name from [master].[dbo].[sysdatabases] where name"
41517>>>>>>>>>>>    Define CI_SQLDropView              //for "DROP VIEW"
41517>>>>>>>>>>>    Define CI_SQLSetNoCountOn          //for "SET NOCOUNT ON"
41517>>>>>>>>>>>    Define CI_SQLTo                    //for "TO"
41517>>>>>>>>>>>    Define CI_SQLGO                    //for "GO"
41517>>>>>>>>>>>    Define CI_SQLUse                   //for "USE"
41517>>>>>>>>>>>    Define CI_SQLDBO                   //for "DBO"
41517>>>>>>>>>>>
41517>>>>>>>>>>>    Define CI_SQLName                  //for "NAME"
41517>>>>>>>>>>>    Define CI_SQLMaster                //for "MASTER"
41517>>>>>>>>>>>    Define CI_SQLDatabases             //for "DATABASES"
41517>>>>>>>>>>>    Define CI_SQLSysIndexes            //for "SYS.INDEXES"
41517>>>>>>>>>>>    Define CI_SQLObjectID              //for "OBJECT_ID"
41517>>>>>>>>>>>    Define CI_SQLID                    //for "ID"
41517>>>>>>>>>>>    Define CI_SQLAND                   //for "AND"
41517>>>>>>>>>>>    Define CI_SQLUpdate                //for "UPDATE"
41517>>>>>>>>>>>    Define CI_SQLSet                   //for "SET"
41517>>>>>>>>>>>    Define CI_SQLWith                  //for "WITH"
41517>>>>>>>>>>>    Define CI_SQLNotNull               //for "NOT NULL"
41517>>>>>>>>>>>    Define CI_SQL_SAFE_UPDATES         //for "SQL_SAFE_UPDATES"  
41517>>>>>>>>>>>    Define CI_SQLDescription          //for "SELECT name, description from sys.fn_helpcollations()" (Enumerates all collates)
41517>>>>>>>>>>>End_Enum_List
41517>>>>>>>>>>>
41517>>>>>>>>>>>
41517>>>>>>>
41517>>>>>>>// This needs to be after Mertech drivers are defined.
41517>>>>>>>//Use cDbUpdateFunctionLibrary_Mixin.pkg
41517>>>>>>>
41517>>>>>>>
41517>>>>>>>// Create a new PSQL identifier for the Btrieve driver.
41517>>>>>>>    Define PSQLDRV_ID for "DFBTRDRV"
41517>>>>>>>
41517>>>>>>>    Define SQLFLEX   for "SQL_DRV"
41517>>>>>>>
41517>>>>>>>    Define MDSPgSQL  for "MDSPGSQL"
41517>>>>>>>
41517>>>>>>>    Define MDSMySQL  for "MDSMYSQL"
41517>>>>>>>
41517>>>>>>>    Define MDSDB2    for "MDS_DB2"
41517>>>>>>>
41517>>>>>>>    Define ORAFLEX   for "ORA_DRV"
41517>>>>>>>
41517>>>>>>>// SQL Back-ends (iSQLDbType in the tSQLKeywords struct).
41517>>>>>>>// They can have slightly different SQL keywords.
41517>>>>>>>// Note: If a new type is added to the list,
41517>>>>>>>//       the struct array xxx must be adjusted
41517>>>>>>>//       so that it is filled with all SQL
41517>>>>>>>//       keywords for that new type.
41517>>>>>>>Enum_List  
41517>>>>>>>End_Enum_List
41517>>>>>>>
41517>>>>>>>// We need to have our "own" constants for the standard DataFlex data types.
41517>>>>>>>// These can be used with SQL functions such as e.g. SQLColumnAdd, instead
41517>>>>>>>// of using one of the driver specific integer constants such as e.g. "SQL_VARCHAR".
41517>>>>>>>Define CS_DbTypeDataFlex    for "DataFlex Embedded"
41517>>>>>>>Define CS_DbTypeMSSQL       for "Microsoft SQL Server"
41517>>>>>>>Define CS_DbTypeMySQL       for "MySQL"
41517>>>>>>>Define CS_DbTypeOracle      for "Oracle"
41517>>>>>>>Define CS_DbTypeDB2         for "IBM DB2"
41517>>>>>>>Define CS_DbTypePostgre     for "PostgreSQL"
41517>>>>>>>Define CS_DbTypePervasive   for "Pervasive.SQL (Btrieve)"
41517>>>>>>>
41517>>>>>>>
41517>>>>>>>// SQLConnection.ini constants:
41517>>>>>>>    Define CS_SQLConnectionIDText       for "DFConnectionId"
41517>>>>>>>Define CS_SQLIniFileName                for "SQLConnections.ini"
41517>>>>>>>Define CS_SQLDF19IniFileName            for "DFConnId.ini"
41517>>>>>>>Define CS_SQLIniConnectionSection       for "SQL Connections" // Obsolete!
41517>>>>>>>Define CS_SQLIniSectionName             for "Connection"
41517>>>>>>>Define CS_SQLODBCIniSectionName         for "ODBC"
41517>>>>>>>
41517>>>>>>>// DF 19 ini-file settings:
41517>>>>>>>Define CS_SQLIniConnectionIdKeyword     for "Id"
41517>>>>>>>Define CS_SQLIniDriverKeyword           for "Driver"
41517>>>>>>>Define CS_SQLIniConnectionKeyWord       for "Connection"
41517>>>>>>>Define CS_SQLIniUIDKeyword              for "UID"
41517>>>>>>>Define CS_SQLIniPWDKeyword              for "PWD"
41517>>>>>>>Define CS_SQLIniDFPWDKeyword            for "DFPWD"
41517>>>>>>>Define CS_SQLIniServerKeyword           for "SERVER"
41517>>>>>>>Define CS_SQLIniDSNKeyword              for "DSN"
41517>>>>>>>Define CS_SQLIniFileDSNKeyword          for "FILEDSN"
41517>>>>>>>Define CS_SQLIniDatabaseKeyword         for "DATABASE"
41517>>>>>>>Define CS_SQLIniTrustedKeyword          for "Trusted_Connection" 
41517>>>>>>>Define CS_SQLIniDisabledKeyword         for "Disabled"
41517>>>>>>>
41517>>>>>>>// Database Update Framework extended settings:
41517>>>>>>>Define CS_SQLIniDbTypeKeyword           for "DbType"
41517>>>>>>>Define CS_SQLIniSchemaKeyword           for "Schema"
41517>>>>>>>Define CS_SQLIniBaseTableSpaceKeyword   for "Base Table Space"
41517>>>>>>>Define CS_SQLIniLongTableSpaceKeyword   for "Long Table Space"
41517>>>>>>>Define CS_SQLIniIndexTableSpaceKeyword  for "Index Table Space"
41517>>>>>>>Define CS_SQLIniSilentLoginKeyword      for "Silent Login"
41517>>>>>>>Define CS_SQLIniDisabledKeyword         for "Disabled"      // For compatability with DF19.
41517>>>>>>>
41517>>>>>>>Define CS_SQLIniConnectionPWD           for "PWD"
41517>>>>>>>Define CS_SQLIniConnectionYes           for "Yes"
41517>>>>>>>Define CS_SQLIniConnectionNo            for "No"
41517>>>>>>>
41517>>>>>>>Struct tSQLConnection
41517>>>>>>>    Boolean bEnabled                // 1. There can only be one active/enabled connection at a time.
41517>>>>>>>    String sConnectionID            // 2. The name of the connection ID.
41517>>>>>>>    Integer iDbType                 // 3. Database type; "MS-SQL Server", "DB2", "Oracle", "MySQL", "PostgreSQL"
41517>>>>>>>    String sDriverID                // 4. Name of the driver. E.g. MSSQLDRV, DB2_DRV, ODBC_DRV or PSQLDRV_ID.
41517>>>>>>>    String sServer                  // 5. SQL Server/DSN/ODBC source name. (In DF19 this is the "sString" member of the tConnection struct.)
41517>>>>>>>    String sDatabase                // 6. SQL Database
41517>>>>>>>    String sConnectionString        // 7. Full connection string as is needed by e.g. the login command.
41517>>>>>>>    Boolean bTrusted                // 8. Trusted connection (then is UID & PWD not used)
41517>>>>>>>    String sUserID                  // 9. User ID
41517>>>>>>>    String sPassword                // 10. Password
41517>>>>>>>    String sSchema                  // 11. DB2 (and perhaps ODBC specific)
41517>>>>>>>    String sBaseTableSpace          // 12. DB2 specific
41517>>>>>>>    String sLongTableSpace          // 13. DB2 specific
41517>>>>>>>    String sIndexTableSpace         // 14. DB2 specific
41517>>>>>>>    Boolean bSilentLogin            // 15. True=Silent login. (i.e. don't show Database login dialog if database login to fails). Same as driver "Options" parameter.
41517>>>>>>>    Boolean bError                  // 16. Set to true on error.
41517>>>>>>>    Boolean bDAWConnection          // 17. True if a DFConnId.ini file (from DAW) has been used instead of a DUF SQLConnections.ini file.
41517>>>>>>>//    Boolean bDisabled               // 17. For compatability with DF19 Managed Connections only. Not used by DUF (Database Update Framework).
41517>>>>>>>//    Integer iDriverIndex            // 18. For compatability with DF19 Managed Connections only. Not used by DUF (Database Update Framework).
41517>>>>>>>End_Struct
41517>>>>>Use cDbUpdateFunctionLibrary.inc
41517>>>>>
41517>>>>>Class cDbUpdateFunctionLibrary_Mixin is a Mixin
41518>>>>>    Procedure CreateDbUpdateLibraryProperties
41520>>>>>        Handle hoSQLManagerMT
41520>>>>>
41520>>>>>        Property String private.psUseDatabase ""
41521>>>>>
41521>>>>>        // These are used by the Error routine to show the Table# & Field# if something goes wrong:
41521>>>>>        Property Handle  private.phCurrentTable 0
41522>>>>>        Property Integer private.piCurrentField 0
41523>>>>>
41523>>>>>        Property Handle phoCLIHandler      (Create(Self,RefClass(cCLIHandler)))
41524>>>>>        Property Handle phoSQLManager      (Create(Self,RefClass(cSQLHandleManager)))
41525>>>>>
41525>>>>>        Property Handle phoSQLManagerMT
41526>>>>>
41526>>>>>        Property Handle phoMSSQLHandler    (Create(Self,RefClass(cMSSQLHandler)))
41527>>>>>        Property Handle phoDB2SQLHandler   (Create(Self,RefClass(cDB2Handler)))
41528>>>>>        Property Handle phoODBCSQLHandler  (Create(Self,RefClass(cODBCHandler)))
41529>>>>>        Property Handle phoSQLConnectionHandler 0
41530>>>>>        Property tSQLKeyWords[] paSQLKeywordArray
41531>>>>>
41531>>>>>        Property Boolean pbHandleQueryErrors True
41532>>>>>
41532>>>>>        Property tSqlColumnNew[] paQueryColumns
41533>>>>>        Property String[] paSQLFetchResults
41534>>>>>
41534>>>>>        // Error handling
41534>>>>>        Property Integer Error_Report_Mode DUF_ERROR_REPORT
41535>>>>>        Property Boolean pbSqlError False
41536>>>>>        Property tSqlErrorArray paSqlErrorArray
41537>>>>>        Property Boolean pbProcessingError False
41538>>>>>
41538>>>>>        // Statistics on query
41538>>>>>        Property TimeSpan ptsTotalQueryTime
41539>>>>>        Property TimeSpan ptsQueryExec
41540>>>>>        Property TimeSpan ptsFetchResults
41541>>>>>        Property Integer piColumns 0
41542>>>>>        Property Integer piRows 0
41543>>>>>        Property Integer piRowType 0
41544>>>>>        Property String[] paQueryMessages
41545>>>>>        Property String psSQLStatementString
41546>>>>>
41546>>>>>        Property Integer[] paTableConvertExceptions
41547>>>>>
41547>>>>>        Property Integer[] paTableDateCorrectionExceptions
41548>>>>>
41548>>>>>        // Number of SQL statements (chunks) to be executed when executing a really big
41548>>>>>        // SQL file that has been compiled into the program. It is way faster to divide
41548>>>>>        // the statements in smaller chunks than to execute them all at the same time.
41548>>>>>        Property Integer piChunkMax 500
41549>>>>>
41549>>>>>        // Fill the paSQLKeywordArray array with values;
41549>>>>>        Send SetupSQLKeywordArray
41550>>>>>        Move Self to ghoDbUpdateFunctionLibrary
41551>>>>>    End_Procedure
41552>>>>>
41552>>>>>    // Custom array find function. It compares both the iSQLWord & iSQLDbType params.
41552>>>>>    Function CompareFindSQLKeyWords tSQLKeyWords SQLKeywords1 tSQLKeyWords SQLKeywords2 Returns Integer
41554>>>>>        If (SQLKeywords1.iSQLWord = SQLKeywords2.iSQLWord and SQLKeywords1.iSQLDbType = SQLKeywords2.iSQLDbType) Begin
41556>>>>>            Function_Return (EQ)
41557>>>>>        End
41557>>>>>>
41557>>>>>        Function_Return (GT)
41558>>>>>    End_Function
41559>>>>>
41559>>>>>    // Custom array sort function. It compares both the iSQLWord & iSQLDbType params.
41559>>>>>    Function CompareSortSQLKeyWords tSQLKeyWords SQLKeywords1 tSQLKeyWords SQLKeywords2 Returns Integer
41561>>>>>        If (SQLKeywords1.iSQLWord   < SQLKeywords2.iSQLWord) ;            Function_Return (LT)
41564>>>>>        If (SQLKeywords1.iSQLWord   > SQLKeywords2.iSQLWord) ;            Function_Return (GT)
41567>>>>>        If (SQLKeywords1.iSQLDbType < SQLKeywords2.iSQLDbType) ;            Function_Return (LT)
41570>>>>>        If (SQLKeywords1.iSQLDbType > SQLKeywords2.iSQLDbType) ;            Function_Return (GT)
41573>>>>>
41573>>>>>        Function_Return (EQ)
41574>>>>>    End_Function
41575>>>>>
41575>>>>>    Procedure Add_Element Integer iSQLKeywordConstant Integer iEN_dbType String sSQLKeyword
41577>>>>>        tSQLKeyWords[] SQLKeywordArray
41577>>>>>        tSQLKeyWords[] SQLKeywordArray
41578>>>>>        Integer iSize
41578>>>>>
41578>>>>>        Get paSQLKeywordArray to SQLKeywordArray
41579>>>>>        Move (SizeOfArray(SQLKeywordArray)) to iSize
41580>>>>>        Move iSQLKeywordConstant to SQLKeywordArray[iSize].iSQLWord
41581>>>>>        Move iEN_dbType          to SQLKeywordArray[iSize].iSQLDbType
41582>>>>>        Move sSQLKeyword         to SQLKeywordArray[iSize].sSQLPhrase
41583>>>>>
41583>>>>>        Set paSQLKeywordArray to SQLKeywordArray
41584>>>>>    End_Procedure
41585>>>>>
41585>>>>>    // Creates a struct array with all SQL keywords
41585>>>>>    // for all EN_xxx SQL back-ends. Various back-ends can
41585>>>>>    // have slightly different wording.
41585>>>>>    // If a new EN_dbTypexxx type is added; additions
41585>>>>>    // needs to be done for every keyword group below.
41585>>>>>    Procedure SetupSQLKeywordArray
41587>>>>>        tSQLKeyWords[] SQLKeywordArray SQLKeywordArraySorted
41587>>>>>        tSQLKeyWords[] SQLKeywordArray SQLKeywordArraySorted
41589>>>>>
41589>>>>>        // This should only be called once; but in case it is
41589>>>>>        // we delete the array first.
41589>>>>>        Set paSQLKeywordArray to SQLKeywordArray
41590>>>>>
41590>>>>>        // ToDo: *** Not all SQL Key-words has been checked for other backends than MS-SQL ***
41590>>>>>        //
41590>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypeMSSQL    "ALTER DATABASE"
41591>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypeMySQL    "ALTER DATABASE"
41592>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypeOracle   "ALTER DATABASE"
41593>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypeDB2      "ALTER DATABASE"
41594>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypePostgre  "ALTER DATABASE"
41595>>>>>
41595>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypeMSSQL    "SINGLE_USER"
41596>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypeMySQL    "SINGLE_USER"
41597>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypeOracle   "SINGLE_USER"
41598>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypeDB2      "SINGLE_USER"
41599>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypePostgre  "SINGLE_USER"
41600>>>>>
41600>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypeMSSQL    "MULTI_USER"
41601>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypeMySQL    "MULTI_USER"
41602>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypeOracle   "MULTI_USER"
41603>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypeDB2      "MULTI_USER"
41604>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypePostgre  "MULTI_USER"
41605>>>>>
41605>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypeMSSQL    "ROLLBACK"
41606>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypeMySQL    "ROLLBACK"
41607>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypeOracle   "ROLLBACK"
41608>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypeDB2      "ROLLBACK"
41609>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypePostgre  "ROLLBACK"
41610>>>>>
41610>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypeMSSQL    "IMMEDIATE"
41611>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypeMySQL    "IMMEDIATE"
41612>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypeOracle   "IMMEDIATE"
41613>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypeDB2      "IMMEDIATE"
41614>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypePostgre  "IMMEDIATE"
41615>>>>>
41615>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypeMSSQL    "ALTER TABLE"
41616>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypeMySQL    "ALTER TABLE"
41617>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypeOracle   "ALTER TABLE"
41618>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypeDB2      "ALTER TABLE"
41619>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypePostgre  "ALTER TABLE"
41620>>>>>
41620>>>>>        Send Add_Element CI_SQLAdd EN_dbTypeMSSQL           "ADD"
41621>>>>>        Send Add_Element CI_SQLAdd EN_dbTypeMySQL           "ADD"
41622>>>>>        Send Add_Element CI_SQLAdd EN_dbTypeOracle          "ADD"
41623>>>>>        Send Add_Element CI_SQLAdd EN_dbTypeDB2             "ADD"
41624>>>>>        Send Add_Element CI_SQLAdd EN_dbTypePostgre         "ADD"
41625>>>>>
41625>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypeMSSQL        "UPDATE"
41626>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypeMySQL        "UPDATE"
41627>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypeOracle       "UPDATE"
41628>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypeDB2          "UPDATE"
41629>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypePostgre      "UPDATE"
41630>>>>>
41630>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypeMSSQL       "NOT NULL"
41631>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypeMySQL       "NOT NULL"
41632>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypeOracle      "" // Seems like Oracle can't handle setting a new column to 'NOT NULL' if the table exists with data(!)
41633>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypeDB2         "DEFAULT NOT NULL"
41634>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypePostgre     "NOT NULL"
41635>>>>>
41635>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_DbTypeMSSQL   ""
41636>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_dbTypeMySQL   "SQL_SAFE_UPDATES"
41637>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_dbTypeOracle  ""
41638>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_dbTypeDB2     ""
41639>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_dbTypePostgre ""
41640>>>>>
41640>>>>>        Send Add_Element CI_SQLSet EN_dbTypeMSSQL           "SET"
41641>>>>>        Send Add_Element CI_SQLSet EN_dbTypeMySQL           "SET"
41642>>>>>        Send Add_Element CI_SQLSet EN_dbTypeOracle          "SET"
41643>>>>>        Send Add_Element CI_SQLSet EN_dbTypeDB2             "SET"
41644>>>>>        Send Add_Element CI_SQLSet EN_dbTypePostgre         "SET"
41645>>>>>
41645>>>>>        Send Add_Element CI_SQLWith EN_dbTypeMSSQL          "WITH"
41646>>>>>        Send Add_Element CI_SQLWith EN_dbTypeMySQL          "WITH"
41647>>>>>        Send Add_Element CI_SQLWith EN_dbTypeOracle         "WITH"
41648>>>>>        Send Add_Element CI_SQLWith EN_dbTypeDB2            "WITH"
41649>>>>>        Send Add_Element CI_SQLWith EN_dbTypePostgre        "WITH"
41650>>>>>
41650>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypeMSSQL    "CREATE DATABASE"
41651>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypeMySQL    "CREATE DATABASE"
41652>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypeOracle   "CREATE DATABASE"
41653>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypeDB2      "CREATE DATABASE"
41654>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypePostgre  "CREATE DATABASE"
41655>>>>>
41655>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypeMSSQL    "COLLATE"
41656>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypeMySQL    "COLLATE"
41657>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypeOracle   "COLLATE"
41658>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypeDB2      "COLLATE"
41659>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypePostgre  "COLLATE"
41660>>>>>
41660>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypeMSSQL    "CREATE VIEW"
41661>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypeMySQL    "CREATE VIEW"
41662>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypeOracle   "CREATE VIEW"
41663>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypeDB2      "CREATE VIEW"
41664>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypePostgre  "CREATE VIEW"
41665>>>>>
41665>>>>>        Send Add_Element CI_SQLDropView EN_dbTypeMSSQL      "DROP VIEW"
41666>>>>>        Send Add_Element CI_SQLDropView EN_dbTypeMySQL      "DROP VIEW"
41667>>>>>        Send Add_Element CI_SQLDropView EN_dbTypeOracle     "DROP VIEW"
41668>>>>>        Send Add_Element CI_SQLDropView EN_dbTypeDB2        "DROP VIEW"
41669>>>>>        Send Add_Element CI_SQLDropView EN_dbTypePostgre    "DROP VIEW"
41670>>>>>
41670>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypeMSSQL   "CREATE TABLE"
41671>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypeMySQL   "CREATE TABLE"
41672>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypeOracle  "CREATE TABLE"
41673>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypeDB2     "CREATE TABLE"
41674>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypePostgre "CREATE TABLE"
41675>>>>>
41675>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypeMSSQL     "DROP TABLE"
41676>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypeMySQL     "DROP TABLE"
41677>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypeOracle    "DROP TABLE"
41678>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypeDB2       "DROP TABLE"
41679>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypePostgre   "DROP TABLE"
41680>>>>>
41680>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypeMSSQL   "EXEC sp_rename"
41681>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypeMySQL   "RENAME TABLE"
41682>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypeOracle  "RENAME TABLE"
41683>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypeDB2     "RENAME TABLE"
41684>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypePostgre "RENAME TO"
41685>>>>>
41685>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypeMSSQL    "DROP COLUMN"
41686>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypeMySQL    "DROP COLUMN"
41687>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypeOracle   "DROP COLUMN"
41688>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypeDB2      "DROP COLUMN"
41689>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypePostgre  "DROP COLUMN"
41690>>>>>
41690>>>>>        Send Add_Element CI_SQLColumn EN_dbTypeMSSQL        "COLUMN"
41691>>>>>        Send Add_Element CI_SQLColumn EN_dbTypeMySQL        "COLUMN"
41692>>>>>        Send Add_Element CI_SQLColumn EN_dbTypeOracle       "COLUMN"
41693>>>>>        Send Add_Element CI_SQLColumn EN_dbTypeDB2          "COLUMN"
41694>>>>>        Send Add_Element CI_SQLColumn EN_dbTypePostgre      "COLUMN"
41695>>>>>
41695>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypeMSSQL   "ALTER COLUMN"
41696>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypeMySQL   "MODIFY"
41697>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypeOracle  "MODIFY"
41698>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypeDB2     "ALTER COLUMN"
41699>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypePostgre "ALTER COLUMN"
41700>>>>>
41700>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypeMSSQL   "EXEC sp_RENAME"
41701>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypeMySQL   "CHANGE"
41702>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypeOracle  "RENAME COLUMN"
41703>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypeDB2     "RENAME COLUMN"
41704>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypePostgre "RENAME COLUMN"
41705>>>>>
41705>>>>>        Send Add_Element CI_SQLSelect EN_dbTypeMSSQL        "SELECT"
41706>>>>>        Send Add_Element CI_SQLSelect EN_dbTypeMySQL        "SELECT"
41707>>>>>        Send Add_Element CI_SQLSelect EN_dbTypeOracle       "SELECT"
41708>>>>>        Send Add_Element CI_SQLSelect EN_dbTypeDB2          "SELECT"
41709>>>>>        Send Add_Element CI_SQLSelect EN_dbTypePostgre      "SELECT"
41710>>>>>
41710>>>>>        Send Add_Element CI_SQLWhere EN_dbTypeMSSQL         "WHERE"
41711>>>>>        Send Add_Element CI_SQLWhere EN_dbTypeMySQL         "WHERE"
41712>>>>>        Send Add_Element CI_SQLWhere EN_dbTypeOracle        "WHERE"
41713>>>>>        Send Add_Element CI_SQLWhere EN_dbTypeDB2           "WHERE"
41714>>>>>        Send Add_Element CI_SQLWhere EN_dbTypePostgre       "WHERE"
41715>>>>>
41715>>>>>        Send Add_Element CI_SQLFrom EN_dbTypeMSSQL          "FROM"
41716>>>>>        Send Add_Element CI_SQLFrom EN_dbTypeMySQL          "FROM"
41717>>>>>        Send Add_Element CI_SQLFrom EN_dbTypeOracle         "FROM"
41718>>>>>        Send Add_Element CI_SQLFrom EN_dbTypeDB2            "FROM"
41719>>>>>        Send Add_Element CI_SQLFrom EN_dbTypePostgre        "FROM"
41720>>>>>
41720>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypeMSSQL    "INFORMATION_SCHEMA.COLUMNS"
41721>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypeMySQL    "INFORMATION_SCHEMA.COLUMNS"
41722>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypeOracle   "INFORMATION_SCHEMA.COLUMNS"
41723>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypeDB2      "INFORMATION_SCHEMA.COLUMNS"
41724>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypePostgre  "INFORMATION_SCHEMA.COLUMNS"
41725>>>>>
41725>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypeMSSQL    "TABLE_NAME"
41726>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypeMySQL    "TABLE_NAME"
41727>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypeOracle   "TABLE_NAME"
41728>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypeDB2      "TABLE_NAME"
41729>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypePostgre  "TABLE_NAME"
41730>>>>>
41730>>>>>        Send Add_Element CI_SQLTable EN_dbTypeMSSQL         "TABLE"
41731>>>>>        Send Add_Element CI_SQLTable EN_dbTypeMySQL         "TABLE"
41732>>>>>        Send Add_Element CI_SQLTable EN_dbTypeOracle        "TABLE"
41733>>>>>        Send Add_Element CI_SQLTable EN_dbTypeDB2           "TABLE"
41734>>>>>        Send Add_Element CI_SQLTable EN_dbTypePostgre       "TABLE"
41735>>>>>
41735>>>>>        Send Add_Element CI_SQLSys EN_dbTypeMSSQL           "SYS"
41736>>>>>        Send Add_Element CI_SQLSys EN_dbTypeMySQL           "SYS"
41737>>>>>        Send Add_Element CI_SQLSys EN_dbTypeOracle          "SYS"
41738>>>>>        Send Add_Element CI_SQLSys EN_dbTypeDB2             "SYS"
41739>>>>>        Send Add_Element CI_SQLSys EN_dbTypePostgre         "SYS"
41740>>>>>
41740>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypeMSSQL       "SP_HELP"
41741>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypeMySQL       "SP_HELP"
41742>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypeOracle      "SP_HELP"
41743>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypeDB2         "SP_HELP"
41744>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypePostgre     "SP_HELP"
41745>>>>>
41745>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypeMSSQL      "SET NOCOUNT ON"
41746>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypeMySQL      "SET NOCOUNT ON"
41747>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypeOracle     "SET NOCOUNT ON"
41748>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypeDB2        "SET NOCOUNT ON"
41749>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypePostgre    "SET NOCOUNT ON"
41750>>>>>
41750>>>>>        Send Add_Element CI_SQLTo EN_dbTypeMSSQL            "TO"
41751>>>>>        Send Add_Element CI_SQLTo EN_dbTypeMySQL            "TO"
41752>>>>>        Send Add_Element CI_SQLTo EN_dbTypeOracle           "TO"
41753>>>>>        Send Add_Element CI_SQLTo EN_dbTypeDB2              "TO"
41754>>>>>        Send Add_Element CI_SQLTo EN_dbTypePostgre          "TO"
41755>>>>>
41755>>>>>        Send Add_Element CI_SQLGO EN_dbTypeMSSQL            "GO"
41756>>>>>        Send Add_Element CI_SQLGO EN_dbTypeMySQL            "GO"
41757>>>>>        Send Add_Element CI_SQLGO EN_dbTypeOracle           "GO"
41758>>>>>        Send Add_Element CI_SQLGO EN_dbTypeDB2              "GO"
41759>>>>>        Send Add_Element CI_SQLGO EN_dbTypePostgre          "GO"
41760>>>>>
41760>>>>>        Send Add_Element CI_SQLUse EN_dbTypeMSSQL           "USE"
41761>>>>>        Send Add_Element CI_SQLUse EN_dbTypeMySQL           "USE"
41762>>>>>        Send Add_Element CI_SQLUse EN_dbTypeOracle          "USE"
41763>>>>>        Send Add_Element CI_SQLUse EN_dbTypeDB2             "USE"
41764>>>>>        Send Add_Element CI_SQLUse EN_dbTypePostgre         "USE"
41765>>>>>
41765>>>>>        Send Add_Element CI_SQLDBO EN_dbTypeMSSQL           "dbo"
41766>>>>>        Send Add_Element CI_SQLDBO EN_dbTypeMySQL           "dbo"
41767>>>>>        Send Add_Element CI_SQLDBO EN_dbTypeOracle          "dbo"
41768>>>>>        Send Add_Element CI_SQLDBO EN_dbTypeDB2             "dbo"
41769>>>>>        Send Add_Element CI_SQLDBO EN_dbTypePostgre         "dbo"
41770>>>>>
41770>>>>>        Send Add_Element CI_SQLMaster EN_dbTypeMSSQL        "MASTER"
41771>>>>>        Send Add_Element CI_SQLMaster EN_dbTypeMySQL        "MASTER"
41772>>>>>        Send Add_Element CI_SQLMaster EN_dbTypeOracle       "MASTER"
41773>>>>>        Send Add_Element CI_SQLMaster EN_dbTypeDB2          "MASTER"
41774>>>>>        Send Add_Element CI_SQLMaster EN_dbTypePostgre      "MASTER"
41775>>>>>
41775>>>>>        Send Add_Element CI_SQLName EN_dbTypeMSSQL          "NAME"
41776>>>>>        Send Add_Element CI_SQLName EN_dbTypeMySQL          "NAME"
41777>>>>>        Send Add_Element CI_SQLName EN_dbTypeOracle         "NAME"
41778>>>>>        Send Add_Element CI_SQLName EN_dbTypeDB2            "NAME"
41779>>>>>        Send Add_Element CI_SQLName EN_dbTypePostgre        "NAME"
41780>>>>>
41780>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypeMSSQL     "DATABASES"
41781>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypeMySQL     "DATABASES"
41782>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypeOracle    "DATABASES"
41783>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypeDB2       "DATABASES"
41784>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypePostgre   "DATABASES"
41785>>>>>
41785>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypeMSSQL    "SYS.INDEXES"
41786>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypeMySQL    "SYS.INDEXES"
41787>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypeOracle   "SYS.INDEXES"
41788>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypeDB2      "SYS.INDEXES"
41789>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypePostgre  "SYS.INDEXES"
41790>>>>>
41790>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypeMSSQL      "OBJECT_ID"
41791>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypeMySQL      "OBJECT_ID"
41792>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypeOracle     "OBJECT_ID"
41793>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypeDB2        "OBJECT_ID"
41794>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypePostgre    "OBJECT_ID"
41795>>>>>
41795>>>>>        Send Add_Element CI_SQLID EN_dbTypeMSSQL            "ID"
41796>>>>>        Send Add_Element CI_SQLID EN_dbTypeMySQL            "ID"
41797>>>>>        Send Add_Element CI_SQLID EN_dbTypeOracle           "ID"
41798>>>>>        Send Add_Element CI_SQLID EN_dbTypeDB2              "ID"
41799>>>>>        Send Add_Element CI_SQLID EN_dbTypePostgre          "ID"
41800>>>>>
41800>>>>>        Send Add_Element CI_SQLAND EN_dbTypeMSSQL           "AND"
41801>>>>>        Send Add_Element CI_SQLAND EN_dbTypeMySQL           "AND"
41802>>>>>        Send Add_Element CI_SQLAND EN_dbTypeOracle          "AND"
41803>>>>>        Send Add_Element CI_SQLAND EN_dbTypeDB2             "AND"
41804>>>>>        Send Add_Element CI_SQLAND EN_dbTypePostgre         "AND"
41805>>>>>
41805>>>>>        Send Add_Element CI_SQLDescription EN_dbTypeMSSQL   "DESCRIPTION"
41806>>>>>        Send Add_Element CI_SQLDescription EN_dbTypeMySQL   "DESCRIPTION"
41807>>>>>        Send Add_Element CI_SQLDescription EN_dbTypeOracle  "DESCRIPTION"
41808>>>>>        Send Add_Element CI_SQLDescription EN_dbTypeDB2     "DESCRIPTION"
41809>>>>>        Send Add_Element CI_SQLDescription EN_dbTypePostgre "DESCRIPTION"
41810>>>>>
41810>>>>>        // In case we didn't put the above in order (and we don't need to); we sort the struct array.
41810>>>>>        Get paSQLKeywordArray to SQLKeywordArray
41811>>>>>        Move (SortArray(SQLKeywordArray, Self, (RefFunc(CompareSortSQLKeyWords)))) to SQLKeywordArraySorted
41812>>>>>        Set paSQLKeywordArray to SQLKeywordArraySorted
41813>>>>>
41813>>>>>    End_Procedure
41814>>>>>
41814>>>>>End_Class
41815>>>Use cSQLConnectionHandler.pkg
Including file: cSQLConnectionHandler.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cSQLConnectionHandler.pkg)
41815>>>>>//****************************************************************************
41815>>>>>// $Module type: Class
41815>>>>>// $Module name: cSQLConnectionHandler.pkg
41815>>>>>// $Author     : Nils Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
41815>>>>>// Web-site    : http://www.rdctools.com
41815>>>>>// Created     : 2015-08-11 @ 16:02 (Military date format: YY-MM-DD)
41815>>>>>//
41815>>>>>// Description : A handler class for using CLI connection ID's to login to a database server.
41815>>>>>//
41815>>>>>// $Rev History:
41815>>>>>//    2015-08-11  Module header created
41815>>>>>//    2016-09-26  Changed name of the objecthandle from ghoCreateConnectionID to ghoSQLConnectionHandler.
41815>>>>>//                Added a new structure for passing connection data back & forth.
41815>>>>>//                Added better error handling.
41815>>>>>//                Added a decompose message for the connection string.
41815>>>>>//    2017-01-09  Added support for Mertech drivers
41815>>>>>//                Big overhaul to comply better with "Managed Connections" (DF 19)
41815>>>>>//                These changes make the class compatible with DFConnId.ini (can read/write DAW connection ini-files)
41815>>>>>//    2017-02-12  Reworked the whole connection property interface.
41815>>>>>//                Now there is one struct property that is the at cencter of a connection.
41815>>>>>//****************************************************************************
41815>>>>>Use cli.pkg
41815>>>>>Use MSSqldrv.pkg
41815>>>>>Use db2_drv.pkg
41815>>>>>Use odbc_drv.pkg
41815>>>>>Use cSQLConnectionIniFile.pkg
Including file: cSQLConnectionIniFile.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cSQLConnectionIniFile.pkg)
41815>>>>>>>//****************************************************************************
41815>>>>>>>// $Module type: Class
41815>>>>>>>// $Module name: cSQLConnectionIniFile.pkg
41815>>>>>>>//
41815>>>>>>>// $Author     : Nils G. Svedmyr, RDC Tools International.
41815>>>>>>>// Copyright (c) 2012 RDC Tools International
41815>>>>>>>// E-mail      : support@rdctools.com
41815>>>>>>>// Web-site    : http://www.rdctools.com
41815>>>>>>>//
41815>>>>>>>// Created     : 2012-09-20 @ 18:04 (Military date format - Year-Month-Day)
41815>>>>>>>//
41815>>>>>>>// Note        : The file must be USEd after declaration of the ghoApplication object, as it uses
41815>>>>>>>//               properties of that object.
41815>>>>>>>//
41815>>>>>>>// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
41815>>>>>>>// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
41815>>>>>>>// This is free software; you can redistribute it and/or modify it under the terms of the
41815>>>>>>>// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
41815>>>>>>>// in the help folder for more details.
41815>>>>>>>//
41815>>>>>>>Use cSQLConnectionIniFile.inc
41815>>>>>>>Use cDbUpdateDatabaseDriver.pkg
Including file: cDbUpdateDatabaseDriver.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cDbUpdateDatabaseDriver.pkg)
41815>>>>>>>>>Use cSQLConnectionIniFile.inc
41815>>>>>>>>>
41815>>>>>>>>>Class cDbUpdateGenericDatabaseDriver is a cObject
41816>>>>>>>>>    Procedure Construct_Object
41818>>>>>>>>>        Forward Send Construct_Object
41820>>>>>>>>>        Property String psDriverID DATAFLEX_ID
41821>>>>>>>>>    End_Procedure
41822>>>>>>>>>
41822>>>>>>>>>    Function ServerKeyword String sServer Returns String
41824>>>>>>>>>        String sRetval
41824>>>>>>>>>        If (Uppercase(sServer) contains ("." + CS_SQLIniDSNKeyword)) Begin
41826>>>>>>>>>            Move CS_SQLIniFileDSNKeyword to sRetval    
41827>>>>>>>>>        End                                        
41827>>>>>>>>>>
41827>>>>>>>>>        Else Begin
41828>>>>>>>>>            Move CS_SQLIniDSNKeyword to sRetval
41829>>>>>>>>>        End
41829>>>>>>>>>>
41829>>>>>>>>>            
41829>>>>>>>>>        Function_Return sRetval
41830>>>>>>>>>    End_Function
41831>>>>>>>>>
41831>>>>>>>>>    Function ConstructConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
41833>>>>>>>>>        String sConnect sServerKeyWord sDriverID
41833>>>>>>>>>
41833>>>>>>>>>        Get psDriverID to sDriverID
41834>>>>>>>>>        Get ServerKeyword sServer to sServerKeyWord
41835>>>>>>>>>        Move (sConnect + sServerKeyWord + "=" + sServer) to sConnect
41836>>>>>>>>>        If (sServerKeyWord = CS_SQLIniDSNKeyword or sServerKeyWord = CS_SQLIniFileDSNKeyword) Begin
41838>>>>>>>>>            Move "" to sDatabase
41839>>>>>>>>>        End
41839>>>>>>>>>>
41839>>>>>>>>>        
41839>>>>>>>>>        // 2019-10-20 I think this was plain wrong for the DAW ODBC_DRV driver. At least it didn't work for login to an MS-SQL db.
41839>>>>>>>>>//        If (bTrusted = False and (sDriverID = ODBC_DRV_ID and sServerKeyWord = CS_SQLIniDSNKeyword)) Begin
41839>>>>>>>>>//            Function_Return sConnect
41839>>>>>>>>>//        End
41839>>>>>>>>>
41839>>>>>>>>>        If (sDatabase <> "") Begin
41841>>>>>>>>>            Move (sConnect + ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
41842>>>>>>>>>        End
41842>>>>>>>>>>
41842>>>>>>>>>        If (bTrusted = True) Begin
41844>>>>>>>>>            Move (sConnect + ";" + CS_SQLIniTrustedKeyword + "=Yes") to sConnect
41845>>>>>>>>>        End
41845>>>>>>>>>>
41845>>>>>>>>>        Else Begin
41846>>>>>>>>>            Move (sConnect + ";" + CS_SQLIniUIDKeyword + "=" + sUserID + ";" + CS_SQLIniPWDKeyword + "=" + sPassword) to sConnect
41847>>>>>>>>>        End
41847>>>>>>>>>>
41847>>>>>>>>>        Function_Return sConnect
41848>>>>>>>>>    End_Function
41849>>>>>>>>>
41849>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
41851>>>>>>>>>        Boolean bLoginSuccessful
41851>>>>>>>>>        String sDriverID
41851>>>>>>>>>
41851>>>>>>>>>        Get psDriverID to sDriverID
41852>>>>>>>>>        If (sDriverID = DATAFLEX_ID or sDriverID = "") Begin
41854>>>>>>>>>            Function_Return True
41855>>>>>>>>>        End
41855>>>>>>>>>>
41855>>>>>>>>>        Move 0 to LastErr  // Do NOT use the Err flag, it will be set true by the login command although it is successful.
41856>>>>>>>>>        If (bTrusted = False and sDatabase <> "") Begin
41858>>>>>>>>>            Move (SFormat("SERVER=%1;DATABASE=%2", sServer, sDatabase)) to sServer
41859>>>>>>>>>            Login sServer sUserId sPassword sDriverID  
41861>>>>>>>>>        End
41861>>>>>>>>>>
41861>>>>>>>>>        Else Begin
41862>>>>>>>>>            Login sConnectionString "" "" sDriverID
41864>>>>>>>>>        End
41864>>>>>>>>>>
41864>>>>>>>>>        Move (LastErr = 0) to bLoginSuccessful
41865>>>>>>>>>        Function_Return bLoginSuccessful
41866>>>>>>>>>    End_Function
41867>>>>>>>>>End_Class
41868>>>>>>>>>
41868>>>>>>>>>Class cDbUpdateMSSQLDriver is a cDbUpdateGenericDatabaseDriver
41869>>>>>>>>>    Function ServerKeyword String sServer Returns String
41871>>>>>>>>>        Function_Return CS_SQLIniServerKeyword
41872>>>>>>>>>    End_Function
41873>>>>>>>>>End_Class
41874>>>>>>>>>
41874>>>>>>>>>Class cDbUpdateODBCDriver is a cDbUpdateGenericDatabaseDriver
41875>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
41877>>>>>>>>>        Boolean bLoginSuccessful
41877>>>>>>>>>        String sDriverID
41877>>>>>>>>>
41877>>>>>>>>>        Get psDriverID to sDriverID
41878>>>>>>>>>        Move (Trim(sDriverID)) to sDriverID
41879>>>>>>>>>        If (sDriverID = DATAFLEX_ID or sDriverID = "") Begin
41881>>>>>>>>>            Function_Return True
41882>>>>>>>>>        End
41882>>>>>>>>>>
41882>>>>>>>>>        Move 0 to LastErr  // Do NOT use the Err flag, it will be set true by the login command although it is successful.
41883>>>>>>>>>        If (bTrusted = False) Begin
41885>>>>>>>>>            If (Uppercase(sServer) contains ("." + String(CS_SQLIniDSNKeyword))) Begin
41887>>>>>>>>>                Move (CS_SQLIniFileDSNKeyword + "=" + sServer) to sServer
41888>>>>>>>>>            End
41888>>>>>>>>>>
41888>>>>>>>>>            Else If (not(Uppercase(sServer) contains CS_SQLIniDSNKeyword)) Begin
41891>>>>>>>>>                Move (CS_SQLIniDSNKeyword + "=" + sServer) to sServer
41892>>>>>>>>>            End
41892>>>>>>>>>>
41892>>>>>>>>>            Login sServer sUserId sPassword sDriverID  
41894>>>>>>>>>        End
41894>>>>>>>>>>
41894>>>>>>>>>        Else Begin
41895>>>>>>>>>            Login sConnectionString "" "" sDriverID
41897>>>>>>>>>        End
41897>>>>>>>>>>
41897>>>>>>>>>        Move (LastErr = 0) to bLoginSuccessful
41898>>>>>>>>>
41898>>>>>>>>>        Function_Return bLoginSuccessful
41899>>>>>>>>>    End_Function
41900>>>>>>>>>End_Class
41901>>>>>>>>>
41901>>>>>>>>>Class cDbUpdateDB2Driver is a cDbUpdateGenericDatabaseDriver
41902>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
41904>>>>>>>>>        Boolean bLoginSuccessful
41904>>>>>>>>>        String sDriverID
41904>>>>>>>>>
41904>>>>>>>>>        Move False to Err
41905>>>>>>>>>        Get psDriverID to sDriverID
41906>>>>>>>>>        If (not(Uppercase(sServer) contains CS_SQLIniDSNKeyword)) Begin
41908>>>>>>>>>            Move (CS_SQLIniDSNKeyword + "=" + sServer) to sServer
41909>>>>>>>>>        End
41909>>>>>>>>>>
41909>>>>>>>>>        Login sServer sUserId sPassword sDriverID
41911>>>>>>>>>
41911>>>>>>>>>        Move (not(Err)) to bLoginSuccessful
41912>>>>>>>>>        Function_Return bLoginSuccessful
41913>>>>>>>>>    End_Function
41914>>>>>>>>>End_Class
41915>>>>>>>>>
41915>>>>>>>>>Class cDbUpdatePSQLDriver is a cDbUpdateGenericDatabaseDriver
41916>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
41918>>>>>>>>>        Boolean bLoginSuccessful
41918>>>>>>>>>        String sDriverID
41918>>>>>>>>>
41918>>>>>>>>>        Move False to Err
41919>>>>>>>>>        Get psDriverID to sDriverID
41920>>>>>>>>>//        If (not(Uppercase(sServer) contains CS_SQLIniDSNKeyword)) Begin
41920>>>>>>>>>//            Move (CS_SQLIniDSNKeyword + "=" + sServer) to sServer
41920>>>>>>>>>//        End
41920>>>>>>>>>        Login sServer sUserId sPassword sDriverID
41922>>>>>>>>>
41922>>>>>>>>>        Move (not(Err)) to bLoginSuccessful
41923>>>>>>>>>        Function_Return bLoginSuccessful
41924>>>>>>>>>    End_Function
41925>>>>>>>>>End_Class
41926>>>>>>>>>
41926>>>>>>>>>Class cDbUpdateDataFlexDriver is a cDbUpdateGenericDatabaseDriver
41927>>>>>>>>>    Function ConstructConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
41929>>>>>>>>>        Function_Return ""
41930>>>>>>>>>    End_Function
41931>>>>>>>>>End_Class
41932>>>>>>>>>
41932>>>>>>>>>Class cDbUpdateSQLFLEXDriver is a cDbUpdateGenericDatabaseDriver
41933>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
41935>>>>>>>>>        Boolean bLoginSuccessful
41935>>>>>>>>>        String sDriverID
41935>>>>>>>>>
41935>>>>>>>>>        Get psDriverID to sDriverID
41936>>>>>>>>>        //For the Mertech driver, using the Err indicator is the sanctioned way
41936>>>>>>>>>        Move False to Err
41937>>>>>>>>>        If (bTrusted = False) Begin
41939>>>>>>>>>            Login sServer sUserId sPassword sDriverID
41941>>>>>>>>>        End
41941>>>>>>>>>>
41941>>>>>>>>>        Else Begin
41942>>>>>>>>>            Login sServer "" "" sDriverID
41944>>>>>>>>>        End
41944>>>>>>>>>>
41944>>>>>>>>>        Move (not(Err)) to bLoginSuccessful
41945>>>>>>>>>
41945>>>>>>>>>        Function_Return bLoginSuccessful
41946>>>>>>>>>    End_Function
41947>>>>>>>>>End_Class
41948>>>>>>>>>
41948>>>>>>>>>Class cDbUpdateORAFLEXDriver is a cDbUpdateGenericDatabaseDriver
41949>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
41951>>>>>>>>>        Boolean bLoginSuccessful
41951>>>>>>>>>        String sDriverID
41951>>>>>>>>>        Integer iPos
41951>>>>>>>>>
41951>>>>>>>>>        Get psDriverID to sDriverID
41952>>>>>>>>>        Move (Pos("/", sServer)) to iPos
41953>>>>>>>>>        If (iPos = 0) Begin
41955>>>>>>>>>            If (sDatabase <> "") Begin
41957>>>>>>>>>                Move (sServer + "/" + sDatabase) to sServer
41958>>>>>>>>>            End
41958>>>>>>>>>>
41958>>>>>>>>>        End
41958>>>>>>>>>>
41958>>>>>>>>>        // For the Mertech driver, using the Err indicator is the sanctioned way
41958>>>>>>>>>        Move False to Err
41959>>>>>>>>>        // For Oracle I don't believe "Trusted" doesn't exist.
41959>>>>>>>>>        Login sServer sUserId sPassword sDriverID
41961>>>>>>>>>
41961>>>>>>>>>        Move (not(Err)) to bLoginSuccessful
41962>>>>>>>>>        Function_Return bLoginSuccessful
41963>>>>>>>>>    End_Function
41964>>>>>>>>>End_Class
41965>>>>>>>>>
41965>>>>>>>>>Class cDbUpdateMDSMySQLDriver is a cDbUpdateGenericDatabaseDriver
41966>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
41968>>>>>>>>>        Boolean bLoginSuccessful
41968>>>>>>>>>        String sDriverID
41968>>>>>>>>>
41968>>>>>>>>>        Get psDriverID to sDriverID
41969>>>>>>>>>        // For the Mertech driver, using the Err indicator is the sanctioned way
41969>>>>>>>>>        Move False to Err
41970>>>>>>>>>        If (bTrusted = False) Begin
41972>>>>>>>>>            Login sServer sUserId sPassword sDriverID
41974>>>>>>>>>        End
41974>>>>>>>>>>
41974>>>>>>>>>        Else Begin
41975>>>>>>>>>            Login sServer "" "" sDriverID
41977>>>>>>>>>        End
41977>>>>>>>>>>
41977>>>>>>>>>        Move (not(Err)) to bLoginSuccessful
41978>>>>>>>>>        Function_Return bLoginSuccessful
41979>>>>>>>>>    End_Function
41980>>>>>>>>>End_Class
41981>>>>>>>>>
41981>>>>>>>>>Class cDbUpdateMDSPgSQLDriver is a cDbUpdateGenericDatabaseDriver
41982>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
41984>>>>>>>>>        Boolean bLoginSuccessful
41984>>>>>>>>>        String sDriverID
41984>>>>>>>>>
41984>>>>>>>>>        Get psDriverID to sDriverID
41985>>>>>>>>>        // For the Mertech driver, using the Err indicator is the sanctioned way
41985>>>>>>>>>        Move False to Err
41986>>>>>>>>>        If (bTrusted = False) Begin
41988>>>>>>>>>            Login sServer sUserId sPassword sDriverID
41990>>>>>>>>>        End
41990>>>>>>>>>>
41990>>>>>>>>>        Else Begin
41991>>>>>>>>>            Login sServer "" "" sDriverID
41993>>>>>>>>>        End
41993>>>>>>>>>>
41993>>>>>>>>>        Move (not(Err)) to bLoginSuccessful
41994>>>>>>>>>        Function_Return bLoginSuccessful
41995>>>>>>>>>    End_Function
41996>>>>>>>>>End_Class
41997>>>>>>>>>
41997>>>>>>>>>Class cDbUpdateDatabaseDriver is a cObject
41998>>>>>>>>>    Procedure Construct_Object
42000>>>>>>>>>        Forward Send Construct_Object
42002>>>>>>>>>        Property String psDriverID DATAFLEX_ID
42003>>>>>>>>>        Property Handle phoDriverSpecificObject
42004>>>>>>>>>    End_Procedure
42005>>>>>>>>>
42005>>>>>>>>>    Function CreateDriver Returns Handle
42007>>>>>>>>>        String sDriverID
42007>>>>>>>>>        Handle hoDriver hcDriverClass
42007>>>>>>>>>
42007>>>>>>>>>        Get psDriverID to sDriverID
42008>>>>>>>>>        Case Begin
42008>>>>>>>>>            Case (sDriverID = MSSQLDRV_ID)
42010>>>>>>>>>                Move (RefClass(cDbUpdateMSSQLDriver))    to hcDriverClass
42011>>>>>>>>>                Case Break
42012>>>>>>>>>            Case (sDriverID = ODBC_DRV_ID)
42015>>>>>>>>>                Move (RefClass(cDbUpdateODBCDriver))     to hcDriverClass
42016>>>>>>>>>                Case Break
42017>>>>>>>>>            Case (sDriverID = DB2_DRV_ID)
42020>>>>>>>>>                Move (RefClass(cDbUpdateDB2Driver))      to hcDriverClass
42021>>>>>>>>>                Case Break               
42022>>>>>>>>>//            Case (sDriverID = DFBTRDRV_ID)
42022>>>>>>>>>//                Move (RefClass(cDbUpdateDatabaseDriver)) to hcDriverClass
42022>>>>>>>>>//                Case Break
42022>>>>>>>>>            Case (sDriverID = SQLFLEX)
42025>>>>>>>>>                Move (RefClass(cDbUpdateSQLFLEXDriver))  to hcDriverClass
42026>>>>>>>>>                Case Break
42027>>>>>>>>>            Case (sDriverID = ORAFLEX)
42030>>>>>>>>>                Move (RefClass(cDbUpdateORAFLEXDriver))  to hcDriverClass
42031>>>>>>>>>                Case Break
42032>>>>>>>>>            Case (sDriverID = MDSPgSQL)
42035>>>>>>>>>                Move (RefClass(cDbUpdateMDSPgSQLDriver)) to hcDriverClass
42036>>>>>>>>>                Case Break
42037>>>>>>>>>            Case (sDriverID = MDSMySQL)
42040>>>>>>>>>                Move (RefClass(cDbUpdateMDSMySQLDriver)) to hcDriverClass
42041>>>>>>>>>                Case Break
42042>>>>>>>>>            // DATAFLEX_ID = Default driver
42042>>>>>>>>>            Case Else
42042>>>>>>>>>                Move (RefClass(cDbUpdateDataFlexDriver)) to hcDriverClass
42043>>>>>>>>>                Move DATAFLEX_ID to sDriverID
42044>>>>>>>>>        Case End
42044>>>>>>>>>
42044>>>>>>>>>        Get Create hcDriverClass to hoDriver
42045>>>>>>>>>        Set psDriverID of hoDriver to sDriverID
42046>>>>>>>>>        Set phoDriverSpecificObject to hoDriver
42047>>>>>>>>>
42047>>>>>>>>>        Function_Return hoDriver
42048>>>>>>>>>    End_Function
42049>>>>>>>>>
42049>>>>>>>>>    Procedure DestroyDriver
42051>>>>>>>>>        If (phoDriverSpecificObject(Self)) Begin
42053>>>>>>>>>            Send Destroy of (phoDriverSpecificObject(Self))
42054>>>>>>>>>        End
42054>>>>>>>>>>
42054>>>>>>>>>    End_Procedure
42055>>>>>>>>>
42055>>>>>>>>>    Function ConstructConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
42057>>>>>>>>>        String sConnect
42057>>>>>>>>>        Handle hoDriver
42057>>>>>>>>>
42057>>>>>>>>>        Get CreateDriver to hoDriver
42058>>>>>>>>>        Get ConstructConnectionString of hoDriver sServer sDatabase bTrusted sUserID sPassword to sConnect
42059>>>>>>>>>        Send DestroyDriver
42060>>>>>>>>>        Function_Return sConnect
42061>>>>>>>>>    End_Function
42062>>>>>>>>>
42062>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
42064>>>>>>>>>        Boolean bLoginSuccessful
42064>>>>>>>>>        Handle hoDriver
42064>>>>>>>>>
42064>>>>>>>>>        Get CreateDriver to hoDriver
42065>>>>>>>>>        Get DbLogin of hoDriver sConnectionString sServer sDatabase bTrusted sUserID sPassword to bLoginSuccessful
42066>>>>>>>>>        Send DestroyDriver
42067>>>>>>>>>        Function_Return bLoginSuccessful
42068>>>>>>>>>    End_Function
42069>>>>>>>>>
42069>>>>>>>>>End_Class
42070>>>>>>>
42070>>>>>>>    Use cLoginEncryption.pkg
Including file: cLoginEncryption.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cLoginEncryption.pkg)
42070>>>>>>>>>Use cCryptographerEx.pkg
42070>>>>>>>>>
42070>>>>>>>>>Class cLoginEncryption is a cObject
42071>>>>>>>>>    
42071>>>>>>>>>    Procedure Construct_Object
42073>>>>>>>>>        Forward Send Construct_Object
42075>>>>>>>>>        // this must be set to a multi (40ish) character random key
42075>>>>>>>>>        Property String psEncryptPassword ""
42076>>>>>>>>>        
42076>>>>>>>>>        Object oDataCrypter is a cCryptographerEx
42078>>>>>>>>>            Set piHash to CALG_SHA_256
42079>>>>>>>>>            Set piCipher to CALG_AES_256
42080>>>>>>>>>            Set psProvider to "" //  Not providing a specific provider gives the default provider for the provider type
42081>>>>>>>>>            Set piProvider to PROV_RSA_AES
42082>>>>>>>>>        End_Object
42083>>>>>>>>>    End_Procedure
42084>>>>>>>>>    
42084>>>>>>>>>    // This can be augmented to return a password encryption key using any
42084>>>>>>>>>    // hidden mechanism desired.
42084>>>>>>>>>    Function GetEncryptionPassword Returns String
42086>>>>>>>>>        String sPassword
42086>>>>>>>>>        Get psEncryptPassword to sPassword
42087>>>>>>>>>        Function_Return sPassword
42088>>>>>>>>>    End_Function
42089>>>>>>>>>    
42089>>>>>>>>>    // Encrypts a string into an unreadable hash that can later be decrypted using DecryptKey.
42089>>>>>>>>>    //
42089>>>>>>>>>    // Params:
42089>>>>>>>>>    //   sPlainText     String to encrypt.
42089>>>>>>>>>    // Returns:
42089>>>>>>>>>    //   Base64 encoded hash.
42089>>>>>>>>>    Function EncryptPassword String sPlainText Returns String
42091>>>>>>>>>        String sEncryptPassword sBase64
42091>>>>>>>>>        UChar[] ucBinary
42092>>>>>>>>>        Pointer pBase64
42092>>>>>>>>>        Integer iVoid
42092>>>>>>>>>        
42092>>>>>>>>>        //  Encrypt Key
42092>>>>>>>>>        Get GetEncryptionPassword to sEncryptPassword
42093>>>>>>>>>        If (sEncryptPassword = "") Begin
42095>>>>>>>>>            Error DFERR_PROGRAM "No encryption password set"
42096>>>>>>>>>>
42096>>>>>>>>>        End
42096>>>>>>>>>>
42096>>>>>>>>>        
42096>>>>>>>>>        Get Encrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) (StringToUCharArray(sPlainText)) to ucBinary
42097>>>>>>>>>        
42097>>>>>>>>>        If (SizeOfArray(ucBinary) = 0) Begin
42099>>>>>>>>>            Error DFERR_PROGRAM "Unable to encrypt database login password"
42100>>>>>>>>>>
42100>>>>>>>>>            Function_Return ""
42101>>>>>>>>>        End
42101>>>>>>>>>>
42101>>>>>>>>>        
42101>>>>>>>>>        //  Encode binary hash to Base64
42101>>>>>>>>>        Move (Base64Encode(AddressOf(ucBinary), SizeOfArray(ucBinary))) to pBase64
42102>>>>>>>>>        Move (PointerToString(pBase64)) to sBase64
42103>>>>>>>>>        Move (Free(pBase64)) to iVoid
42104>>>>>>>>>        
42104>>>>>>>>>        Function_Return sBase64
42105>>>>>>>>>    End_Function
42106>>>>>>>>>    
42106>>>>>>>>>    
42106>>>>>>>>>    // Decrypts the unreadable hash generated by EncryptKey into a readable string.
42106>>>>>>>>>    //
42106>>>>>>>>>    // Params:
42106>>>>>>>>>    //   sBase64EncryptedPassword       Base64 Encrypted password
42106>>>>>>>>>    // Returns:
42106>>>>>>>>>    //   Readable plain text password
42106>>>>>>>>>    Function DecryptPassword String sBase64EncryptedPassword Returns String
42108>>>>>>>>>        String sEncryptPassword
42108>>>>>>>>>        UChar[] ucBinary ucPlain
42110>>>>>>>>>        Boolean bIsHex
42110>>>>>>>>>        Integer iLen iVoid
42110>>>>>>>>>        Pointer pBinary
42110>>>>>>>>>        
42110>>>>>>>>>        If (sBase64EncryptedPassword <> "") Begin
42112>>>>>>>>>            //  Decode from Base64
42112>>>>>>>>>            Move (Base64Decode(AddressOf(sBase64EncryptedPassword), &iLen)) to pBinary
42113>>>>>>>>>            
42113>>>>>>>>>            Move (ResizeArray(ucBinary, iLen, 0)) to ucBinary
42114>>>>>>>>>            Move (MemCopy(AddressOf(ucBinary), pBinary, iLen)) to iVoid
42115>>>>>>>>>                        
42115>>>>>>>>>            Move (Free(pBinary)) to iVoid
42116>>>>>>>>>            
42116>>>>>>>>>            //  Encrypted binary hash to string
42116>>>>>>>>>            Get GetEncryptionPassword to sEncryptPassword
42117>>>>>>>>>            Get Decrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) ucBinary to ucPlain
42118>>>>>>>>>        End
42118>>>>>>>>>>
42118>>>>>>>>>        
42118>>>>>>>>>        Function_Return (UCharArrayToString(ucPlain))
42119>>>>>>>>>    End_Function
42120>>>>>>>>>End_Class
42121>>>>>>>
42121>>>>>>>Class cSQLConnectionIniFile is a cIniFile
42122>>>>>>>    Procedure Construct_Object
42124>>>>>>>        Forward Send Construct_Object
42126>>>>>>>
42126>>>>>>>        Property String Private_psIniFilePath
42127>>>>>>>        Property String Private_psIniFileName CS_SQLIniFileName
42128>>>>>>>        Property String psIniSectionName (CS_SQLIniSectionName + "1")
42129>>>>>>>
42129>>>>>>>        Property Boolean pbDFConnId False
42130>>>>>>>
42130>>>>>>>        // *** You really want to change this value! ***
42130>>>>>>>        // It is used when encrypting/decrypting passwords.
42130>>>>>>>        Property String psHashString "zx!2139(LI0+?ips7433"
42131>>>>>>>
42131>>>>>>>    End_Procedure
42132>>>>>>>
42132>>>>>>>    Procedure End_Construct_Object
42134>>>>>>>        Forward Send End_Construct_Object
42136>>>>>>>    End_Procedure
42137>>>>>>>
42137>>>>>>>    Procedure Set psIniFilePath String sPath
42139>>>>>>>        String sIniFile
42139>>>>>>>        Get vFolderFormat sPath to sPath
42140>>>>>>>        Set private_psIniFilePath to sPath
42141>>>>>>>        Get psIniFileName to sIniFile
42142>>>>>>>        Set psFileName to (sPath + sIniFile)
42143>>>>>>>    End_Procedure
42144>>>>>>>
42144>>>>>>>    Function psIniFilePath Returns String
42146>>>>>>>        Function_Return (private_psIniFilePath(Self))
42147>>>>>>>    End_Function
42148>>>>>>>
42148>>>>>>>    Procedure Set psIniFileName String sFileName
42150>>>>>>>        String sPath
42150>>>>>>>        Get psIniFilePath to sPath
42151>>>>>>>        Set psFileName to (sPath + sFileName)
42152>>>>>>>        Set private_psIniFileName to sFileName
42153>>>>>>>    End_Procedure
42154>>>>>>>
42154>>>>>>>    Function psIniFileName Returns String
42156>>>>>>>        Function_Return (private_psIniFileName(Self))
42157>>>>>>>    End_Function
42158>>>>>>>
42158>>>>>>>    // *** Generalized messages to Get & Set values of the ini file.
42158>>>>>>>    // Sets a value in the program's ini file (write)
42158>>>>>>>    // Pass a section name, the value name parameter and the value itself to be written.
42158>>>>>>>    Procedure Set IniFileValue String sSection String sValueName String sValue
42160>>>>>>>        String sIniFile sPath
42160>>>>>>>
42160>>>>>>>        Get psIniFilePath to sPath
42161>>>>>>>        Get psIniFileName to sIniFile
42162>>>>>>>        Move (sPath + sIniFile) to sIniFile
42163>>>>>>>        Set psFileName to sIniFile
42164>>>>>>>        Send WriteString sSection sValueName sValue
42165>>>>>>>    End_Procedure
42166>>>>>>>
42166>>>>>>>    // Get a value from program's ini-file (read)
42166>>>>>>>    // Pass a section name and the name of the value parameter & a default value.
42166>>>>>>>    // Returns the value
42166>>>>>>>    Function IniFileValue String sSection String sValueName String sDefaultValue Returns String
42168>>>>>>>        String sValue sIniFile sPath
42168>>>>>>>
42168>>>>>>>        Get psIniFilePath to sPath
42169>>>>>>>        Get psIniFileName to sIniFile
42170>>>>>>>        Move (sPath + sIniFile) to sIniFile
42171>>>>>>>        Set psFileName to sIniFile
42172>>>>>>>        Get ReadString sSection sValueName sDefaultValue to sValue
42173>>>>>>>
42173>>>>>>>        Function_Return sValue
42174>>>>>>>    End_Function
42175>>>>>>>
42175>>>>>>>    // Sort function that first sorts on bEnabled & then on the connection string.
42175>>>>>>>    Function SortActiveFirst tSQLConnection SQLConnectionRow1 tSQLConnection SQLConnectionRow2 Returns Integer
42177>>>>>>>        If (SQLConnectionRow1.bEnabled > SQLConnectionRow2.bEnabled) ;            Function_Return (LT)
42180>>>>>>>        If (SQLConnectionRow1.bEnabled < SQLConnectionRow2.bEnabled) ;            Function_Return (GT)
42183>>>>>>>
42183>>>>>>>        If (SQLConnectionRow1.sConnectionID < SQLConnectionRow2.sConnectionID) ;            Function_Return (LT)
42186>>>>>>>        If (SQLConnectionRow1.sConnectionID > SQLConnectionRow2.sConnectionID) ;            Function_Return (GT)
42189>>>>>>>
42189>>>>>>>        If (SQLConnectionRow1.iDbType < SQLConnectionRow2.iDbType) ;            Function_Return (LT)
42192>>>>>>>        If (SQLConnectionRow1.iDbType > SQLConnectionRow2.iDbType) ;            Function_Return (GT)
42195>>>>>>>
42195>>>>>>>        If (SQLConnectionRow1.sServer < SQLConnectionRow2.sServer) ;            Function_Return (LT)
42198>>>>>>>        If (SQLConnectionRow1.sServer > SQLConnectionRow2.sServer) ;            Function_Return (GT)
42201>>>>>>>
42201>>>>>>>        If (SQLConnectionRow1.sDatabase < SQLConnectionRow2.sDatabase) ;            Function_Return (LT)
42204>>>>>>>        If (SQLConnectionRow1.sDatabase > SQLConnectionRow2.sDatabase) ;            Function_Return (GT)
42207>>>>>>>
42207>>>>>>>        If (SQLConnectionRow1.sDriverID < SQLConnectionRow2.sDriverID) ;            Function_Return (LT)
42210>>>>>>>        If (SQLConnectionRow1.sDriverID > SQLConnectionRow2.sDriverID) ;            Function_Return (GT)
42213>>>>>>>
42213>>>>>>>        If (SQLConnectionRow1.sConnectionString < SQLConnectionRow2.sConnectionString) ;            Function_Return (LT)
42216>>>>>>>        If (SQLConnectionRow1.sConnectionString > SQLConnectionRow2.sConnectionString) ;            Function_Return (GT)
42219>>>>>>>
42219>>>>>>>        Function_Return (EQ)
42220>>>>>>>    End_Function
42221>>>>>>>
42221>>>>>>>    Function SQLIniFileNumberOfConnections Returns Integer
42223>>>>>>>        Handle hoSections
42223>>>>>>>        Integer iItems
42223>>>>>>>
42223>>>>>>>        Send ReadSections hoSections
42224>>>>>>>        Move (Item_Count(hoSections)) to iItems
42225>>>>>>>        Function_Return iItems
42226>>>>>>>    End_Function
42227>>>>>>>
42227>>>>>>>    // The normal connection string looks something like this;
42227>>>>>>>    // "SERVER=.\SQLEXPRESS; DATABASE=OrderEntry; TRUSTED_CONNECTION=Yes; ,0"
42227>>>>>>>    // ...but the full connection string looks like this;
42227>>>>>>>    // "DFConnectionId OrderEntry, SERVER=.\SQLEXPRESS; DATABASE=OrderEntry; TRUSTED_CONNECTION=Yes; ,0"
42227>>>>>>>//    Function SQLIniFileAddConnection String sFullConnectionString Returns Boolean
42227>>>>>>>//        String sSection
42227>>>>>>>//        Integer iCount
42227>>>>>>>//
42227>>>>>>>//        Move False to Err
42227>>>>>>>//        Get psIniSectionName to sSection
42227>>>>>>>//        Get SQLIniFileNumberOfConnections to iCount
42227>>>>>>>//        Increment iCount
42227>>>>>>>//        Set IniFileValue sSection (CS_SQLIniSectionName + String(iCount)) to sFullConnectionString
42227>>>>>>>//
42227>>>>>>>//        Function_Return (Err = False)
42227>>>>>>>//    End_Function
42227>>>>>>>
42227>>>>>>>    Function SQLIniFileDeleteAllConnections Returns Boolean
42229>>>>>>>        Integer iCount
42229>>>>>>>        Boolean bExists
42229>>>>>>>        String sSection
42229>>>>>>>
42229>>>>>>>        Move False to Err
42230>>>>>>>        Move 1 to iCount
42231>>>>>>>        Get psIniSectionName to sSection
42232>>>>>>>        Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists
42233>>>>>>>        While (bExists = True)
42237>>>>>>>            Send DeleteSection (CS_SQLIniSectionName + String(iCount))
42238>>>>>>>            Increment iCount
42239>>>>>>>            Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists
42240>>>>>>>        Loop
42241>>>>>>>>
42241>>>>>>>        Function_Return (Err = False)
42242>>>>>>>    End_Function
42243>>>>>>>
42243>>>>>>>    Function SQLIniFileDeleteConnection Integer iItem Returns Boolean
42245>>>>>>>        Integer iCount
42245>>>>>>>        String sSection
42245>>>>>>>        Boolean bExists
42245>>>>>>>
42245>>>>>>>        Move False to Err
42246>>>>>>>        Move 1 to iCount
42247>>>>>>>        Get psIniSectionName to sSection
42248>>>>>>>        Get KeyExists sSection CS_SQLIniConnectionIdKeyword to bExists
42249>>>>>>>        While (bExists = True)
42253>>>>>>>            If (iCount = iItem) Begin
42255>>>>>>>                Send DeleteSection sSection
42256>>>>>>>//                Set IniFileValue sSection (CS_SQLIniSectionName + String(iCount)) to ""
42256>>>>>>>                Move 9999 to iCount // Just some ridiculously high number to get out of the loop as we're done.
42257>>>>>>>            End
42257>>>>>>>>
42257>>>>>>>            Increment iCount
42258>>>>>>>            Get KeyExists sSection (CS_SQLIniSectionName + String(iCount)) to bExists
42259>>>>>>>        Loop
42260>>>>>>>>
42260>>>>>>>
42260>>>>>>>        Function_Return (Err = False)
42261>>>>>>>    End_Function
42262>>>>>>>
42262>>>>>>>    // Returns all connection details for the passed Connection ID as a tSQLConnection
42262>>>>>>>    // If it fails the returned struct member SQLConnection.bError = True.
42262>>>>>>>    Function SQLIniFileConnectionID String sConnectionID Returns tSQLConnection
42264>>>>>>>        tSQLConnection[] SQLConnectionsArray
42264>>>>>>>        tSQLConnection[] SQLConnectionsArray
42265>>>>>>>        tSQLConnection   SQLConnection
42265>>>>>>>        tSQLConnection   SQLConnection
42265>>>>>>>        Integer iIndex
42265>>>>>>>
42265>>>>>>>        Get SQLIniFileConnectionIDIndex sConnectionID to iIndex
42266>>>>>>>        If (iIndex = -1) Begin
42268>>>>>>>            Move True to SQLConnection.bError
42269>>>>>>>            Function_Return SQLConnection
42270>>>>>>>        End
42270>>>>>>>>
42270>>>>>>>
42270>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42271>>>>>>>        Move SQLConnectionsArray[iIndex -1] to SQLConnection
42272>>>>>>>
42272>>>>>>>        Function_Return SQLConnection
42273>>>>>>>    End_Function
42274>>>>>>>
42274>>>>>>>    // Returns -1 if the passed connection ID was not found, else the item number.
42274>>>>>>>    Function SQLIniFileConnectionIDIndex String sConnectionID Returns Integer
42276>>>>>>>        tSQLConnection[] SQLConnectionsArray
42276>>>>>>>        tSQLConnection[] SQLConnectionsArray
42277>>>>>>>        Integer iRetval iCount iSize
42277>>>>>>>        String sValue
42277>>>>>>>        Boolean bExists
42277>>>>>>>
42277>>>>>>>        Move -1 to iRetval
42278>>>>>>>
42278>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42279>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42280>>>>>>>        Decrement iSize
42281>>>>>>>        For iCount from 0 to iSize
42287>>>>>>>>
42287>>>>>>>            Move SQLConnectionsArray[iCount].sConnectionID to sValue
42288>>>>>>>            Move (Uppercase(sValue) = Uppercase(sConnectionID)) to bExists
42289>>>>>>>            If (bExists) Begin
42291>>>>>>>                Move (iCount + 1) to iRetval // The [ConnectionX] keys are one-based (starts at 1) but the loop starts at zero.
42292>>>>>>>                Move iSize to iCount         // We're done!
42293>>>>>>>            End
42293>>>>>>>>
42293>>>>>>>        Loop
42294>>>>>>>>
42294>>>>>>>
42294>>>>>>>        Function_Return iRetval
42295>>>>>>>    End_Function
42296>>>>>>>
42296>>>>>>>    // Checks if the passed sConnectionID exists more than once in the passed struct array.
42296>>>>>>>    // Used to check that ConnectionID's are unique.
42296>>>>>>>    Function IsConnectionIDDuplicate String sConnectionID Returns Boolean
42298>>>>>>>        Integer iCount iSize iItems
42298>>>>>>>        String sValue
42298>>>>>>>        Boolean bExists
42298>>>>>>>        tSQLConnection[] SQLConnectionsArray
42298>>>>>>>        tSQLConnection[] SQLConnectionsArray
42299>>>>>>>
42299>>>>>>>        Move 0 to iItems
42300>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42301>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42302>>>>>>>        Decrement iSize
42303>>>>>>>        For iCount from 0 to iSize
42309>>>>>>>>
42309>>>>>>>            Move SQLConnectionsArray[iCount].sConnectionID to sValue
42310>>>>>>>            Move (sValue = sConnectionID) to bExists
42311>>>>>>>            If (bExists) Begin
42313>>>>>>>                Increment iItems
42314>>>>>>>            End
42314>>>>>>>>
42314>>>>>>>        Loop
42315>>>>>>>>
42315>>>>>>>
42315>>>>>>>        Function_Return (iItems > 1)
42316>>>>>>>    End_Function
42317>>>>>>>
42317>>>>>>>    // To update the SQLConnections.ini file with a new default Connection ID.
42317>>>>>>>    Function SQLIniFileSetDefaultConnection String sConnectionID Returns Boolean
42319>>>>>>>        Boolean bOK
42319>>>>>>>        Integer iSize iCount
42319>>>>>>>        tSQLConnection[] SQLConnectionsArray
42319>>>>>>>        tSQLConnection[] SQLConnectionsArray
42320>>>>>>>        tSQLConnection SQLConnection
42320>>>>>>>        tSQLConnection SQLConnection
42320>>>>>>>        String sConnectionString
42320>>>>>>>
42320>>>>>>>        Move False to Err
42321>>>>>>>        Get psConnectionString to sConnectionString
42322>>>>>>>
42322>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42323>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42324>>>>>>>        Decrement iSize
42325>>>>>>>        // Set all current connection to inactive.
42325>>>>>>>        For iCount from 0 to iSize
42331>>>>>>>>
42331>>>>>>>            Move False to SQLConnectionsArray[iCount].bEnabled
42332>>>>>>>        Loop
42333>>>>>>>>
42333>>>>>>>
42333>>>>>>>        Get SQLIniFileConnectionID sConnectionID to SQLConnection
42334>>>>>>>        Move True              to SQLConnection.bEnabled
42335>>>>>>>        Move sConnectionString to SQLConnection.sConnectionString
42336>>>>>>>        Move (InsertInArray(SQLConnectionsArray, 0, SQLConnection)) to SQLConnectionsArray
42337>>>>>>>        Get SQLIniFileWriteConnections SQLConnectionsArray to bOK
42338>>>>>>>
42338>>>>>>>        Function_Return (bOK = True)
42339>>>>>>>    End_Function
42340>>>>>>>
42340>>>>>>>    // Used for updating an existing connection with new data.
42340>>>>>>>    // Returns True if successful.
42340>>>>>>>    Function SQLIniFileUpdateConnection tSQLConnection SQLConnection Returns Boolean
42342>>>>>>>        Boolean bOK
42342>>>>>>>        Integer iItem iSize iCount
42342>>>>>>>        tSQLConnection[] SQLConnectionsArray
42342>>>>>>>        tSQLConnection[] SQLConnectionsArray
42343>>>>>>>
42343>>>>>>>        Move False to Err
42344>>>>>>>        Move -1 to iItem
42345>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42346>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42347>>>>>>>        Decrement iSize
42348>>>>>>>        // Set all current connection to inactive.
42348>>>>>>>        For iCount from 0 to iSize
42354>>>>>>>>
42354>>>>>>>            Move False to SQLConnectionsArray[iCount].bEnabled
42355>>>>>>>            If (SQLConnectionsArray[iCount].sConnectionID = SQLConnection.sConnectionID) Begin
42357>>>>>>>                Move iCount to iItem
42358>>>>>>>            End
42358>>>>>>>>
42358>>>>>>>        Loop
42359>>>>>>>>
42359>>>>>>>
42359>>>>>>>        If (iItem <> -1) Begin
42361>>>>>>>            Move True to SQLConnection.bEnabled
42362>>>>>>>            Move SQLConnection to SQLConnectionsArray[iItem]
42363>>>>>>>            Get SQLIniFileWriteConnections SQLConnectionsArray to bOK
42364>>>>>>>        End
42364>>>>>>>>
42364>>>>>>>
42364>>>>>>>        Function_Return (bOK = True)
42365>>>>>>>    End_Function
42366>>>>>>>
42366>>>>>>>    Function SQLIniFileReadConnections Returns tSQLConnection[]
42368>>>>>>>        tSQLConnection[] SQLConnectionsArray
42368>>>>>>>        tSQLConnection[] SQLConnectionsArray
42369>>>>>>>        String sSection sValue
42369>>>>>>>        Integer iCount
42369>>>>>>>        Boolean bExists
42369>>>>>>>
42369>>>>>>>        Get psIniSectionName to sSection
42370>>>>>>>        Get SectionExists sSection to bExists
42371>>>>>>>        If (bExists = False) Begin
42373>>>>>>>            Function_Return SQLConnectionsArray
42374>>>>>>>        End
42374>>>>>>>>
42374>>>>>>>        Get SectionExists CS_SQLIniConnectionSection to bExists
42375>>>>>>>        If (bExists = True) Begin
42377>>>>>>>            Error DFERR_PROGRAM "Sorry, the format for the SQLConnections.ini file has been changed and this file has the old format that is no longer valid and thus cannot be read. You need to re-enter your connection(s)."
42378>>>>>>>>
42378>>>>>>>        End
42378>>>>>>>>
42378>>>>>>>
42378>>>>>>>        Move 1 to iCount // The section name "[ConnectionXX]" starts with "1"
42379>>>>>>>        Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists
42380>>>>>>>
42380>>>>>>>        While (bExists = True)                 
42384>>>>>>>            // 2018-07-14 Change to allow disabling all connections in test environment.
42384>>>>>>>            // We always put the enabled/active connection at the top
42384>>>>>>>//            Move (iCount = 1) to bEnabled
42384>>>>>>>//            Move bEnabled to SQLConnectionsArray[iCount].bEnabled
42384>>>>>>>
42384>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniConnectionIdKeyword ""        to SQLConnectionsArray[iCount].sConnectionID
42385>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDriverKeyword       ""        to SQLConnectionsArray[iCount].sDriverID
42386>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDisabledKeyword     ""        to sValue
42387>>>>>>>            Move (If(Uppercase(sValue) = "YES", False, True))                                               to SQLConnectionsArray[iCount].bEnabled
42388>>>>>>>
42388>>>>>>>            // The iDbType might be missing from the ini-file. This is e.g. the case when a DAW Managed Connection "DFConnId.ini" file is read.
42388>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDbTypeKeyword       "99"      to sValue
42389>>>>>>>            If (sValue = "99") Begin
42391>>>>>>>                Get SqlUtilDbTypeFromDriver SQLConnectionsArray[iCount].sDriverID to sValue
42392>>>>>>>            End
42392>>>>>>>>
42392>>>>>>>            Move sValue                                                                                     to SQLConnectionsArray[iCount].iDbType
42393>>>>>>>
42393>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniConnectionKeyWord   ""        to SQLConnectionsArray[iCount].sConnectionString
42394>>>>>>>            Get ParseKeyWord SQLConnectionsArray[iCount].sConnectionString (CS_SQLIniServerKeyword + "=")   to SQLConnectionsArray[iCount].sServer
42395>>>>>>>            If (SQLConnectionsArray[iCount].sServer = "") Begin
42397>>>>>>>                Get ParseKeyWord SQLConnectionsArray[iCount].sConnectionString (CS_SQLIniFileDSNKeyword +"=") to SQLConnectionsArray[iCount].sServer
42398>>>>>>>            End
42398>>>>>>>>
42398>>>>>>>            If (SQLConnectionsArray[iCount].sServer = "") Begin
42400>>>>>>>                Get ParseKeyWord SQLConnectionsArray[iCount].sConnectionString (CS_SQLIniDSNKeyword +"=")   to SQLConnectionsArray[iCount].sServer
42401>>>>>>>            End
42401>>>>>>>>
42401>>>>>>>
42401>>>>>>>            Get ParseKeyWord SQLConnectionsArray[iCount].sConnectionString (CS_SQLIniDatabaseKeyword + "=") to SQLConnectionsArray[iCount].sDatabase
42402>>>>>>>
42402>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniTrustedKeyword      ""        to sValue
42403>>>>>>>            Move (If(Uppercase(sValue) = "YES", True, False))                                               to SQLConnectionsArray[iCount].bTrusted
42404>>>>>>>
42404>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniUIDKeyword          ""        to SQLConnectionsArray[iCount].sUserID
42405>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDFPWDKeyword        ""        to sValue
42406>>>>>>>            If (pbDFConnId(Self) = False and sValue <> "") Begin
42408>>>>>>>                Get DecryptPassword sValue to sValue
42409>>>>>>>            End
42409>>>>>>>>
42409>>>>>>>            Move sValue                                                                                     to SQLConnectionsArray[iCount].sPassword
42410>>>>>>>
42410>>>>>>>            // Here we reconstruct the connection string to be complete with all params;
42410>>>>>>>            Get ConstructConnectionString SQLConnectionsArray[iCount].sDriverID SQLConnectionsArray[iCount].sServer SQLConnectionsArray[iCount].sDatabase ;                                          SQLConnectionsArray[iCount].bTrusted SQLConnectionsArray[iCount].sUserID SQLConnectionsArray[iCount].sPassword ;                                          to SQLConnectionsArray[iCount].sConnectionString
42411>>>>>>>
42411>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniSchemaKeyword          ""     to SQLConnectionsArray[iCount].sSchema
42412>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniBaseTableSpaceKeyword  ""     to SQLConnectionsArray[iCount].sBaseTableSpace
42413>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniLongTableSpaceKeyword  ""     to SQLConnectionsArray[iCount].sLongTableSpace
42414>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniIndexTableSpaceKeyword ""     to SQLConnectionsArray[iCount].sIndexTableSpace
42415>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniSilentLoginKeyword     ""     to sValue
42416>>>>>>>            Move (If(Uppercase(sValue) = "YES", True, False))                                               to SQLConnectionsArray[iCount].bSilentLogin
42417>>>>>>>
42417>>>>>>>            Increment iCount
42418>>>>>>>            Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists
42419>>>>>>>        Loop
42420>>>>>>>>
42420>>>>>>>
42420>>>>>>>        // Lastly, we remove the very first array item as it is empty (we started at 1 because that is the first [Connection#])
42420>>>>>>>        If (SizeOfArray(SQLConnectionsArray) > 0) Begin
42422>>>>>>>            Move (RemoveFromArray(SQLConnectionsArray, 0)) to SQLConnectionsArray
42423>>>>>>>        End
42423>>>>>>>>
42423>>>>>>>
42423>>>>>>>        Function_Return SQLConnectionsArray
42424>>>>>>>    End_Function
42425>>>>>>>
42425>>>>>>>    Function SQLIniFileWriteConnections tSQLConnection[] SQLConnectionsArray Returns Boolean
42427>>>>>>>        Integer iCount iSize
42427>>>>>>>        Boolean bOK
42427>>>>>>>        String sSection sValue
42427>>>>>>>
42427>>>>>>>        // First we need to _remove_ all current connections from the ini-file.
42427>>>>>>>        Move 0 to iCount
42428>>>>>>>        Get SQLIniFileDeleteAllConnections to bOK
42429>>>>>>>        If (bOK = False) Begin
42431>>>>>>>            Function_Return False
42432>>>>>>>        End
42432>>>>>>>>
42432>>>>>>>
42432>>>>>>>        Move False to Err
42433>>>>>>>        Get psIniSectionName to sSection
42434>>>>>>>        // Sorting will make sure we have the active connection record as the first connection item in the ini-file.
42434>>>>>>>        Move (SortArray(SQLConnectionsArray, Self, (RefFunc(SortActiveFirst)))) to SQLConnectionsArray
42435>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42436>>>>>>>        Decrement iSize
42437>>>>>>>
42437>>>>>>>        For iCount from 0 to iSize
42443>>>>>>>>
42443>>>>>>>            // DF 19 compatible settings:
42443>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniConnectionIdKeyword   to SQLConnectionsArray[iCount].sConnectionID
42444>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniDriverKeyword         to SQLConnectionsArray[iCount].sDriverID
42445>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniDisabledKeyword       to (If(SQLConnectionsArray[iCount].bEnabled = 0, "Yes", "No"))
42446>>>>>>>            
42446>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniUIDKeyword            to SQLConnectionsArray[iCount].sUserID
42447>>>>>>>
42447>>>>>>>            Move SQLConnectionsArray[iCount].sPassword to sValue
42448>>>>>>>            If (pbDFConnId(Self) = False and sValue <> "") Begin
42450>>>>>>>                Get EncryptPassword sValue to sValue
42451>>>>>>>            End
42451>>>>>>>>
42451>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniDFPWDKeyword          to sValue
42452>>>>>>>
42452>>>>>>>            If (SQLConnectionsArray[iCount].bTrusted = True) Begin
42454>>>>>>>                Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniTrustedKeyword    to CS_SQLIniConnectionYes
42455>>>>>>>            End
42455>>>>>>>>
42455>>>>>>>
42455>>>>>>>            Get ConstructShortConnectionString SQLConnectionsArray[iCount].sDriverID SQLConnectionsArray[iCount].sServer SQLConnectionsArray[iCount].sDatabase ;                                            to SQLConnectionsArray[iCount].sConnectionString
42456>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniConnectionKeyWord     to SQLConnectionsArray[iCount].sConnectionString
42457>>>>>>>
42457>>>>>>>            // The Database Update Framework extended settings:
42457>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniDbTypeKeyword          to SQLConnectionsArray[iCount].iDbType
42458>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniSchemaKeyword          to SQLConnectionsArray[iCount].sSchema
42459>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniBaseTableSpaceKeyword  to SQLConnectionsArray[iCount].sBaseTableSpace
42460>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniLongTableSpaceKeyword  to SQLConnectionsArray[iCount].sLongTableSpace
42461>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniIndexTableSpaceKeyword to SQLConnectionsArray[iCount].sIndexTableSpace
42462>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniSilentLoginKeyword     to (If(SQLConnectionsArray[iCount].bSilentLogin = 1, "Yes", "No"))
42463>>>>>>>        Loop
42464>>>>>>>>
42464>>>>>>>
42464>>>>>>>        Function_Return (bOK and Err = False)
42465>>>>>>>    End_Function
42466>>>>>>>
42466>>>>>>>    // *** DbType conversion routines - Converts between string/integer and driver ID values ***
42466>>>>>>>    //
42466>>>>>>>    // SQL utility function that returns a database type (string) constant
42466>>>>>>>    // corresponding to the passed iDbType.
42466>>>>>>>    Function SqlUtilDbTypeToString Integer iDbType Returns String
42468>>>>>>>        String sRetval
42468>>>>>>>        If (iDbType = EN_dbTypeMSSQL) Begin
42470>>>>>>>            Move CS_dbTypeMSSQL to sRetval
42471>>>>>>>        End
42471>>>>>>>>
42471>>>>>>>        If (iDbType = EN_dbTypeMySQL) Begin
42473>>>>>>>            Move CS_dbTypeMySQL to sRetval
42474>>>>>>>        End
42474>>>>>>>>
42474>>>>>>>        If (iDbType = EN_dbTypeOracle) Begin
42476>>>>>>>            Move CS_dbTypeOracle to sRetval
42477>>>>>>>        End
42477>>>>>>>>
42477>>>>>>>        If (iDbType = EN_dbTypeDB2) Begin
42479>>>>>>>            Move CS_dbTypeDB2 to sRetval
42480>>>>>>>        End
42480>>>>>>>>
42480>>>>>>>        If (iDbType = EN_dbTypePostgre) Begin
42482>>>>>>>            Move CS_dbTypePostgre to sRetval
42483>>>>>>>        End
42483>>>>>>>>
42483>>>>>>>        If (iDbType = EN_DbTypePervasive) Begin
42485>>>>>>>            Move CS_DbTypePervasive to sRetval
42486>>>>>>>        End
42486>>>>>>>>
42486>>>>>>>        Function_Return sRetval
42487>>>>>>>    End_Function
42488>>>>>>>
42488>>>>>>>    // SQL utility function that returns a database type constant (integer)
42488>>>>>>>    // corresponding to the passed sDbType string constant.
42488>>>>>>>    Function SqlUtilDbTypeToInteger String sDbType  Returns Integer
42490>>>>>>>        Integer iRetval
42490>>>>>>>        If (sDbType = CS_dbTypeMSSQL) Begin
42492>>>>>>>            Move EN_dbTypeMSSQL to iRetval
42493>>>>>>>        End
42493>>>>>>>>
42493>>>>>>>        If (sDbType = CS_dbTypeMySQL) Begin
42495>>>>>>>            Move EN_dbTypeMySQL to iRetval
42496>>>>>>>        End
42496>>>>>>>>
42496>>>>>>>        If (sDbType = CS_dbTypeOracle) Begin
42498>>>>>>>            Move EN_dbTypeOracle to iRetval
42499>>>>>>>        End
42499>>>>>>>>
42499>>>>>>>        If (sDbType = CS_dbTypeDB2) Begin
42501>>>>>>>            Move EN_dbTypeDB2 to iRetval
42502>>>>>>>        End
42502>>>>>>>>
42502>>>>>>>        If (sDbType = CS_dbTypePostgre) Begin
42504>>>>>>>            Move EN_dbTypePostgre to iRetval
42505>>>>>>>        End
42505>>>>>>>>
42505>>>>>>>        If (sDbType = CS_DbTypePervasive) Begin
42507>>>>>>>            Move EN_DbTypePervasive to iRetval
42508>>>>>>>        End
42508>>>>>>>>
42508>>>>>>>        Function_Return iRetval
42509>>>>>>>    End_Function
42510>>>>>>>
42510>>>>>>>    // Pass an integer DbType and function returns the database type integer as a string value.
42510>>>>>>>    // Used e.g. when reading a connection ini-file to display the database type in
42510>>>>>>>    // the SQL Connection program's grid.
42510>>>>>>>    Function SqlUtilDbTypeIntegerToStringConstant Integer iDbType Returns String
42512>>>>>>>        String sRetval
42512>>>>>>>        If (iDbType = EN_dbTypeMSSQL) Begin
42514>>>>>>>            Move "EN_dbTypeMSSQL" to sRetval
42515>>>>>>>        End
42515>>>>>>>>
42515>>>>>>>        If (iDbType = EN_dbTypeMySQL) Begin
42517>>>>>>>            Move "EN_dbTypeMySQL" to sRetval
42518>>>>>>>        End
42518>>>>>>>>
42518>>>>>>>        If (iDbType = EN_dbTypeOracle) Begin
42520>>>>>>>            Move "EN_dbTypeOracle" to sRetval
42521>>>>>>>        End
42521>>>>>>>>
42521>>>>>>>        If (iDbType = EN_dbTypeDB2) Begin
42523>>>>>>>            Move "EN_dbTypeDB2" to sRetval
42524>>>>>>>        End
42524>>>>>>>>
42524>>>>>>>        If (iDbType = EN_dbTypePostgre) Begin
42526>>>>>>>            Move "EN_dbTypePostgre" to sRetval
42527>>>>>>>        End
42527>>>>>>>>
42527>>>>>>>        If (iDbType = EN_DbTypePervasive) Begin
42529>>>>>>>            Move "EN_dbTypePervasive" to sRetval
42530>>>>>>>        End
42530>>>>>>>>
42530>>>>>>>        Function_Return sRetval
42531>>>>>>>    End_Function
42532>>>>>>>
42532>>>>>>>    // Pass a driver id and the function will return
42532>>>>>>>    // a dbType as an integer. Obviously for the ODBC_DRV this doesn't
42532>>>>>>>    // quite work and always returns "MS SQL Server"
42532>>>>>>>    Function SqlUtilDbTypeFromDriver String sDriverID Returns Integer
42534>>>>>>>        Integer iRetval
42534>>>>>>>        If (sDriverID = MSSQLDRV_ID) Begin
42536>>>>>>>            Move EN_dbTypeMSSQL to iRetval
42537>>>>>>>        End
42537>>>>>>>>
42537>>>>>>>        If (sDriverID = SQLFLEX) Begin
42539>>>>>>>            Move EN_dbTypeMSSQL to iRetval
42540>>>>>>>        End
42540>>>>>>>>
42540>>>>>>>        If (sDriverID = ODBC_DRV_ID) Begin
42542>>>>>>>            Move EN_dbTypeMSSQL to iRetval
42543>>>>>>>        End
42543>>>>>>>>
42543>>>>>>>        If (sDriverID = MDSMySQL) Begin
42545>>>>>>>            Move EN_dbTypeMySQL to iRetval
42546>>>>>>>        End
42546>>>>>>>>
42546>>>>>>>        If (sDriverID = ORAFLEX) Begin
42548>>>>>>>            Move EN_dbTypeOracle to iRetval
42549>>>>>>>        End
42549>>>>>>>>
42549>>>>>>>        If (sDriverID = DB2_DRV_ID) Begin
42551>>>>>>>            Move EN_dbTypeDB2 to iRetval
42552>>>>>>>        End
42552>>>>>>>>
42552>>>>>>>        If (sDriverID = MDSPgSQL) Begin
42554>>>>>>>            Move EN_dbTypePostgre to iRetval
42555>>>>>>>        End
42555>>>>>>>>
42555>>>>>>>        If (sDriverID = DFBTRDRV_ID) Begin
42557>>>>>>>            Move EN_DbTypePervasive to iRetval
42558>>>>>>>        End
42558>>>>>>>>
42558>>>>>>>        Function_Return iRetval
42559>>>>>>>    End_Function
42560>>>>>>>
Including file: ParseKeyWord.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ParseKeyWord.pkg)
42560>>>>>>>>
42560>>>>>>>>Function ParseKeyWord String sConnect String sKeyWord Returns String
42562>>>>>>>>    Integer iStart iEnd
42562>>>>>>>>    String sRetval
42562>>>>>>>>
42562>>>>>>>>    Move (Trim(sConnect)) to sConnect
42563>>>>>>>>    Move (Pos(Uppercase(sKeyWord), Uppercase(sConnect)))  to iStart
42564>>>>>>>>    If (iStart = 0) Begin
42566>>>>>>>>        Function_Return ""
42567>>>>>>>>    End
42567>>>>>>>>>
42567>>>>>>>>    Move (Left(sConnect, (iStart -1 + Length(sKeyWord)))) to sRetval
42568>>>>>>>>    Move (Replace(sRetval, sConnect, "")) to sRetval
42569>>>>>>>>    If (sKeyWord = Uppercase(CS_SQLConnectionIDText)) Begin
42571>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
42572>>>>>>>>    End
42572>>>>>>>>>
42572>>>>>>>>    Else Begin
42573>>>>>>>>        Move (Pos(";", sRetval))          to iEnd
42574>>>>>>>>    End
42574>>>>>>>>>
42574>>>>>>>>    If (iEnd = 0 and (sRetval contains ",")) Begin
42576>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
42577>>>>>>>>        Decrement iEnd
42578>>>>>>>>    End
42578>>>>>>>>>
42578>>>>>>>>    If (iEnd <> 0) Begin
42580>>>>>>>>        Move (Left(sRetval, (iEnd -1)))   to sRetval
42581>>>>>>>>    End
42581>>>>>>>>>
42581>>>>>>>>    Move (Replace("=", sRetval, ""))      to sRetval
42582>>>>>>>>
42582>>>>>>>>    Function_Return (Trim(sRetval))
42583>>>>>>>>End_Function
42584>>>>>>>>
42584>>>>>>>>
42584>>>>>>>
42584>>>>>>>    Function ConstructConnectionString String sDriverID String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
42586>>>>>>>        String sConnect
42586>>>>>>>        Handle hoDriver
42586>>>>>>>
42586>>>>>>>        Get Create (RefClass(cDbUpdateDatabaseDriver)) to hoDriver
42587>>>>>>>        Set psDriverID of hoDriver to sDriverID
42588>>>>>>>        Get ConstructConnectionString of hoDriver sServer sDatabase bTrusted sUserID sPassword to sConnect
42589>>>>>>>        Send Destroy of hoDriver
42590>>>>>>>
42590>>>>>>>        Function_Return sConnect
42591>>>>>>>    End_Function
42592>>>>>>>
42592>>>>>>>    // Short connection string used when writing to ini-file. This is to be compatible with DF19 DFConnId.ini files that uses this short format.
42592>>>>>>>    Function ConstructShortConnectionString String sDriverID String sServer String sDatabase Returns String
42594>>>>>>>        String sConnect
42594>>>>>>>
42594>>>>>>>        Case Begin
42594>>>>>>>            Case (sDriverID = MSSQLDRV_ID or sDriverID = SQLFLEX)
42596>>>>>>>                Move (sConnect * CS_SQLIniServerKeyword + "=" + sServer) to sConnect
42597>>>>>>>                If (sDatabase <> "") Begin
42599>>>>>>>                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
42600>>>>>>>                End
42600>>>>>>>>
42600>>>>>>>                Case Break
42601>>>>>>>
42601>>>>>>>            Case (sDriverID = ODBC_DRV_ID)
42604>>>>>>>                If (Uppercase(sServer) contains ".DSN") Begin
42606>>>>>>>                    Move (CS_SQLIniFileDSNKeyword + "=" + sServer) to sConnect
42607>>>>>>>                End
42607>>>>>>>>
42607>>>>>>>                Else If (not(Uppercase(sServer) contains "DSN")) Begin
42610>>>>>>>                    Move (CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
42611>>>>>>>                End
42611>>>>>>>>
42611>>>>>>>
42611>>>>>>>                If (sDatabase <> "") Begin
42613>>>>>>>                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
42614>>>>>>>                End
42614>>>>>>>>
42614>>>>>>>                Case Break
42615>>>>>>>
42615>>>>>>>            Case (sDriverID = DB2_DRV_ID)
42618>>>>>>>                Move (sConnect * CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
42619>>>>>>>                If (sDatabase <> "") Begin
42621>>>>>>>                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
42622>>>>>>>                End
42622>>>>>>>>
42622>>>>>>>                Case Break
42623>>>>>>>
42623>>>>>>>            Case (sDriverID = ORAFLEX)
42626>>>>>>>                Move (sConnect * CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
42627>>>>>>>                If (sDatabase <> "") Begin
42629>>>>>>>                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
42630>>>>>>>                End
42630>>>>>>>>
42630>>>>>>>                Case Break
42631>>>>>>>
42631>>>>>>>            Case (sDriverID = MDSPgSQL)
42634>>>>>>>                Move (sConnect * CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
42635>>>>>>>                If (sDatabase <> "") Begin
42637>>>>>>>                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
42638>>>>>>>                End
42638>>>>>>>>
42638>>>>>>>                Case Break
42639>>>>>>>
42639>>>>>>>            Case (sDriverID = MDSMySQL)
42642>>>>>>>                Move (sConnect * CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
42643>>>>>>>                If (sDatabase <> "") Begin
42645>>>>>>>                    Move (sConnect * ";" +CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
42646>>>>>>>                End
42646>>>>>>>>
42646>>>>>>>                Case Break
42647>>>>>>>
42647>>>>>>>            Case (sDriverID = DATAFLEX_ID)    // Dummy stub.
42650>>>>>>>                Break
42651>>>>>>>
42651>>>>>>>            Case Else
42651>>>>>>>                Move "" to sConnect
42652>>>>>>>        Case End
42652>>>>>>>
42652>>>>>>>        Function_Return sConnect
42653>>>>>>>    End_Function
42654>>>>>>>
42654>>>>>>>    // Use Base64
42654>>>>>>>    Function EncryptPassword String sPassword Returns String
42656>>>>>>>        String sRetval
42656>>>>>>>        Handle hoLoginEncryption
42656>>>>>>>
42656>>>>>>>        Get Create (RefClass(cLoginEncryption)) to hoLoginEncryption
42657>>>>>>>        Set psEncryptPassword of hoLoginEncryption to (psHashString(Self))
42658>>>>>>>        Get EncryptPassword of hoLoginEncryption sPassword to sRetval
42659>>>>>>>        Send Destroy of hoLoginEncryption
42660>>>>>>>          
42660>>>>>>>        Function_Return sRetval
42661>>>>>>>    End_Function
42662>>>>>>>
42662>>>>>>>    Function DecryptPassword String sPassword Returns String
42664>>>>>>>        String sRetval
42664>>>>>>>        Handle hoLoginEncryption
42664>>>>>>>
42664>>>>>>>        Get Create (RefClass(cLoginEncryption)) to hoLoginEncryption
42665>>>>>>>        Set psEncryptPassword of hoLoginEncryption to (psHashString(Self))
42666>>>>>>>        Get DecryptPassword of hoLoginEncryption sPassword to sRetval
42667>>>>>>>        Send Destroy of hoLoginEncryption
42668>>>>>>>
42668>>>>>>>        Function_Return sRetval
42669>>>>>>>    End_Function
42670>>>>>>>
42670>>>>>>>    // Returns the full path of the Application (no trailing "\")
42670>>>>>>>    Function ApplicationPath Returns String
42672>>>>>>>        String sApplicationFileName sPath
42672>>>>>>>        Integer iNumChars iRetval
42672>>>>>>>
42672>>>>>>>        Move (Repeat(Character(0), 1024))    to sApplicationFileName
42673>>>>>>>        Move (GetModuleFileName(0, AddressOf(sApplicationFileName), 1024)) to iNumChars
42674>>>>>>>        Move (CString(sApplicationFileName)) to sApplicationFileName
42675>>>>>>>        Move (PathRemoveFileSpec(AddressOf(sApplicationFileName))) to iRetval
42676>>>>>>>        Move (CString(sApplicationFileName)) to sPath
42677>>>>>>>
42677>>>>>>>        Function_Return sPath
42678>>>>>>>    End_Function
42679>>>>>>>
42679>>>>>>>    // Pass a filename including the extension. The return value
42679>>>>>>>    // will be the path of of the first found "sSearchFileName in the workspace.
42679>>>>>>>    // If not found in the workspace it will be search "globally" by the Get_File_Path command.
42679>>>>>>>    Function SearchLocallyThenGloballyForFile String sSearchFileName Returns String
42681>>>>>>>        Boolean bExists
42681>>>>>>>        Handle hoPaths hoIniFile
42681>>>>>>>        String[] asWorkSpaceFiles
42682>>>>>>>        String sProgramsPath sSection sFileName sRelativePath sRelativePaths sPath sDirSep sProgramsDir
42682>>>>>>>        Integer iSize iCount iPath iNoOfPaths iCountPath
42682>>>>>>>        
42682>>>>>>>        Get psIniFilePath to sProgramsPath
42683>>>>>>>        Get vFolderFormat sProgramsPath to sProgramsPath 
42684>>>>>>>        Move (Lowercase(sSearchFileName)) to sSearchFileName
42685>>>>>>>        Get vFilePathExists (sProgramsPath + sSearchFileName) to bExists   
42686>>>>>>>        If (bExists = True) Begin
42688>>>>>>>            Function_Return sProgramsPath
42689>>>>>>>        End                      
42689>>>>>>>>
42689>>>>>>>    
42689>>>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
42690>>>>>>>        If (Right(sProgramsPath, 1) ="\") Begin
42692>>>>>>>            Move (Left(sProgramsPath, Length(sProgramsPath) -1)) to sProgramsPath        
42693>>>>>>>        End                                              
42693>>>>>>>>
42693>>>>>>>        Get StringFromRightOfChar sProgramsPath sDirSep to sProgramsDir
42694>>>>>>>        
42694>>>>>>>        Move False to bExists
42695>>>>>>>        Get Create (RefClass(Array)) to hoPaths
42696>>>>>>>        Get WorkspaceIniFiles sProgramsPath to asWorkspaceFiles
42697>>>>>>>        Move (SizeOfArray(asWorkspaceFiles)) to iSize
42698>>>>>>>        Decrement iSize       
42699>>>>>>>        
42699>>>>>>>        For iCount from 0 to iSize
42705>>>>>>>>
42705>>>>>>>            Move asWorkspaceFiles[iCount] to sFileName
42706>>>>>>>            Get Create (Refclass(cIniFile)) to hoIniFile
42707>>>>>>>            Set psFileName of hoIniFile to sFileName
42708>>>>>>>            Send ReadSection of hoIniFile "Workspace" hoPaths
42709>>>>>>>            For iPath from 0 to (Item_Count(hoPaths) -1)
42715>>>>>>>>
42715>>>>>>>                Get Value of hoPaths iPath to sSection    
42716>>>>>>>                Get ReadString of hoIniFile "Workspace" sSection "" to sRelativePath 
42717>>>>>>>                // Check if there are more than one path specified;
42717>>>>>>>                Get CountOfPaths of (phoWorkspace(ghoApplication)) sRelativePath to iNoOfPaths
42718>>>>>>>                If (iNoOfPaths > 1) Begin         
42720>>>>>>>                    Move sRelativePath to sRelativePaths
42721>>>>>>>                    For iCountPath from 1 to iNoOfPaths
42727>>>>>>>>
42727>>>>>>>                        Get PathAtIndex of (phoWorkspace(ghoApplication)) sRelativePaths iCountPath to sRelativePath
42728>>>>>>>                        Get FullPathNames of (phoWorkspace(ghoApplication)) sRelativePath to sPath   
42729>>>>>>>                        Move (Replace((sDirSep + sProgramsDir + sDirSep), sPath, sDirSep)) to sPath
42730>>>>>>>                        Get vFolderFormat sPath to sPath
42731>>>>>>>                        Get vFilePathExists (sPath + sSearchFileName) to bExists
42732>>>>>>>                        If (bExists = True) Begin
42734>>>>>>>                            Move iNoOfPaths to iCountPath
42735>>>>>>>                            Move (Item_Count(hoPaths)) to iPath // We're done.
42736>>>>>>>                            Move iSize to iCount
42737>>>>>>>                        End                                                    
42737>>>>>>>>
42737>>>>>>>                    Loop
42738>>>>>>>>
42738>>>>>>>                End
42738>>>>>>>>
42738>>>>>>>                Else Begin
42739>>>>>>>                    Get FullPathNames of (phoWorkspace(ghoApplication)) sRelativePath to sPath   
42740>>>>>>>                    Move (Replace((sDirSep + sProgramsDir + sDirSep), sPath, sDirSep)) to sPath
42741>>>>>>>                    Get vFolderFormat sPath to sPath
42742>>>>>>>                    Get vFilePathExists (sPath + sSearchFileName) to bExists
42743>>>>>>>                    If (bExists = True) Begin
42745>>>>>>>                        Move (Item_Count(hoPaths)) to iPath // We're done.
42746>>>>>>>                        Move iSize to iCount
42747>>>>>>>                    End                                                    
42747>>>>>>>>
42747>>>>>>>                End
42747>>>>>>>>
42747>>>>>>>            Loop
42748>>>>>>>>
42748>>>>>>>            If (bExists = False) Begin
42750>>>>>>>                Move "" to sPath    
42751>>>>>>>            End
42751>>>>>>>>
42751>>>>>>>            Send Destroy of hoIniFile          
42752>>>>>>>        Loop        
42753>>>>>>>>
42753>>>>>>>        Send Destroy of hoPaths
42754>>>>>>>        
42754>>>>>>>        // Then not found in workspace, look for the file in DFSysPath;
42754>>>>>>>        If (sPath = "") Begin
42756>>>>>>>            Get_File_Path sSearchFileName to sFileName   
42757>>>>>>>            Get ParseFolderName sFileName to sPath
42758>>>>>>>        End                  
42758>>>>>>>>
42758>>>>>>>        
42758>>>>>>>        Function_Return sPath    
42759>>>>>>>    End_Function
42760>>>>>>>    
42760>>>>>>>    // Pass the path to the workspace Programs folder - returns a string array
42760>>>>>>>    // with one or more .ws file names.
42760>>>>>>>    // First checks if there is a .sws file - and if so reads the name of the
42760>>>>>>>    // workspace file (.ws) and returns it as a string array.
42760>>>>>>>    // If _no_ .sws file is found, enumerates the passed sProgramsPath variable
42760>>>>>>>    Function WorkspaceIniFiles String sProgramsPath Returns String[]
42762>>>>>>>        String[] asSWSFiles asWorkspaceFiles   
42764>>>>>>>        String sFile sHomePath sDirSep
42764>>>>>>>        Integer iCh iSize
42764>>>>>>>        Boolean bExists      
42764>>>>>>>        Handle hoIniFile 
42764>>>>>>>        
42764>>>>>>>        Move (ResizeArray(asSWSFiles, 0)) to asSWSFiles
42765>>>>>>>        Move (ResizeArray(asWorkspaceFiles, 0)) to asWorkspaceFiles
42766>>>>>>>        If (Right(sProgramsPath, 1) ="\") Begin
42768>>>>>>>            Move (Left(sProgramsPath, Length(sProgramsPath) -1)) to sProgramsPath        
42769>>>>>>>        End                                              
42769>>>>>>>>
42769>>>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
42770>>>>>>>        Get StringFromRightOfChar sProgramsPath sDirSep to sHomePath
42771>>>>>>>        Move (Replace(sHomePath, sProgramsPath, "")) to sHomePath
42772>>>>>>>        Get vFolderFormat sHomePath to sHomePath 
42773>>>>>>>        
42773>>>>>>>        // First check if theres an .sws file. If there is we will open it and
42773>>>>>>>        // read the name of the .ws file name.
42773>>>>>>>        File_Exist (sHomePath + "*.sws") bExists
42774>>>>>>>        If (bExists = True) Begin
42776>>>>>>>            Get Seq_Open_input_Channel ("dir:" + sHomePath + "*.sws") to iCh
42777>>>>>>>            If (iCh < 0) Begin
42779>>>>>>>                Function_Return asSWSFiles
42780>>>>>>>            End                                 
42780>>>>>>>>
42780>>>>>>>            
42780>>>>>>>            Repeat
42780>>>>>>>>
42780>>>>>>>                Readln channel iCh sFile
42782>>>>>>>                If (Trim(sFile) <> "") Begin
42784>>>>>>>                    Move sFile to asSWSFiles[SizeOfArray(asSWSFiles)]
42785>>>>>>>                End
42785>>>>>>>>
42785>>>>>>>            Until (SeqEof = True)
42787>>>>>>>            Send Seq_Close_Channel iCh    
42788>>>>>>>            
42788>>>>>>>            Move (SizeOfArray(asSWSFiles)) to iSize
42789>>>>>>>            If (iSize <> 0) Begin
42791>>>>>>>                Get Create (RefClass(cIniFile)) to hoIniFile  
42792>>>>>>>                // Use the file with that is last as it might have the DataFlex version in it,
42792>>>>>>>                // and thus is the latest one and it is more likely it is accurate (?)...
42792>>>>>>>                Move asSWSFiles[SizeOfArray(asSWSFiles) -1] to sFile
42793>>>>>>>                Set psFileName of hoIniFile to (sHomePath + sFile)
42794>>>>>>>                Get ReadString of hoIniFile "WorkspacePaths" "ConfigFile" "" to sFile
42795>>>>>>>                If (sFile <> "") Begin
42797>>>>>>>                    Move (Replace(".", sFile, sHomePath)) to sFile
42798>>>>>>>                    Move (Replace((sDirSep + String(sDirSep)), sFile, sDirSep)) to sFile
42799>>>>>>>                    File_Exist sFile bExists
42800>>>>>>>                    If (bExists = True) Begin
42802>>>>>>>                        Move sFile to asWorkspaceFiles[0] 
42803>>>>>>>                    End
42803>>>>>>>>
42803>>>>>>>                End
42803>>>>>>>>
42803>>>>>>>                Send Destroy of hoIniFile
42804>>>>>>>            End
42804>>>>>>>>
42804>>>>>>>        End
42804>>>>>>>>
42804>>>>>>>        
42804>>>>>>>        // If no .sws file exists, enumerate the .ws files from the Programs folder:    
42804>>>>>>>        If (SizeOfArray(asWorkspaceFiles) = 0) Begin
42806>>>>>>>            Get vFolderFormat sProgramsPath to sProgramsPath 
42807>>>>>>>            File_Exist (sProgramsPath + "*.ws") bExists
42808>>>>>>>            If (bExists = False) Begin
42810>>>>>>>                Function_Return asWorkspaceFiles
42811>>>>>>>            End
42811>>>>>>>>
42811>>>>>>>        
42811>>>>>>>            Get Seq_Open_input_Channel ("dir:" + sProgramsPath + "*.ws") to iCh
42812>>>>>>>            If (iCh < 0) Begin
42814>>>>>>>                Function_Return asWorkspaceFiles
42815>>>>>>>            End                                 
42815>>>>>>>>
42815>>>>>>>            
42815>>>>>>>            Repeat
42815>>>>>>>>
42815>>>>>>>                Readln channel iCh sFile
42817>>>>>>>                If (Trim(sFile) <> "") Begin
42819>>>>>>>                    Move sFile to asWorkspaceFiles[SizeOfArray(asWorkspaceFiles)]
42820>>>>>>>                End
42820>>>>>>>>
42820>>>>>>>            Until (SeqEof = True)
42822>>>>>>>            Send Seq_Close_Channel iCh
42823>>>>>>>        End
42823>>>>>>>>
42823>>>>>>>        
42823>>>>>>>        Function_Return asWorkspaceFiles
42824>>>>>>>    End_Function
42825>>>>>>>
42825>>>>>>>End_Class
42826>>>>>Use cDbUpdateDatabaseDriver.pkg
42826>>>>>Use vWin32fh.pkg
42826>>>>>
42826>>>>>// The cConnection class is the new SQL connections class for DF 19.
42826>>>>>// If an object of the cConnection class hasn't been instantiated we use a "dummy" class in its place.
42826>>>>>    Use cConnectionDUF.pkg
Including file: cConnectionDUF.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cConnectionDUF.pkg)
42826>>>>>>>// * Dummy class * that will only be used if DF 18.2 or less.
42826>>>>>>>//
42826>>>>>>>// The cConnection class is new to DF 19 and that DF 19 package/class
42826>>>>>>>// will be used automatically instead of this package
42826>>>>>>>// if the current DF version is 19 and up _and_ the class
42826>>>>>>>// has been instantianted in the cApplication object.
42826>>>>>>>//
42826>>>>>>>// If an object of the original cConnection class is placed in
42826>>>>>>>// the cApplication, that connection logic will be used instead
42826>>>>>>>// of the Database Update Framework's SQLConnections logic. Or more
42826>>>>>>>// correctly; "Managed Connection" settings will be read and applied
42826>>>>>>>// instead of those defined in the framework's SQLConnections.ini file.
42826>>>>>>>//
42826>>>>>>>Struct tConnection
42826>>>>>>>    String sId                // connection id
42826>>>>>>>    String sString            // server-string as added via the ini file
42826>>>>>>>    String sUID               // User Id
42826>>>>>>>    String sPWD               // non-encrypted password
42826>>>>>>>    Boolean bTrustedConnection // Trusted connection
42826>>>>>>>    Integer iOptions          // connection ID options (don't use)
42826>>>>>>>    String sDriver            // name of driver
42826>>>>>>>    Integer iDriverIndex      // loaded driver index (is 1 based, 0 if none)
42826>>>>>>>    String sConnectionString  // Full connection string assembled from various strings
42826>>>>>>>    String sSection           // this is usually the section name as it appears
42826>>>>>>>                              // in the connections ini file (e.g., [Connection1])
42826>>>>>>>    Boolean bDisabled         // if set, this is not an active Id
42826>>>>>>>End_Struct
42826>>>>>>>
42826>>>>>>>
42826>>>>>>>Class cConnection is a cObject
42827>>>>>>>
42827>>>>>>>    Procedure Construct_Object
42829>>>>>>>        Forward Send Construct_Object
42831>>>>>>>
42831>>>>>>>    End_Procedure
42832>>>>>>>
42832>>>>>>>    Function ConnectionIdInfo Returns tConnection
42834>>>>>>>        tConnection Connection
42834>>>>>>>        tConnection Connection
42834>>>>>>>        Function_Return Connection
42835>>>>>>>    End_Function
42836>>>>>>>
42836>>>>>>>    Function IsConnectionIdLoggedIn Returns Boolean
42838>>>>>>>        Function_Return False
42839>>>>>>>    End_Function
42840>>>>>>>
42840>>>>>>>    Function LoginConnectionId Returns String
42842>>>>>>>        Function_Return ""
42843>>>>>>>    End_Function
42844>>>>>>>
42844>>>>>>>    // get array of managed connections across all drivers
42844>>>>>>>    // returns array of connections in tConnection.
42844>>>>>>>    Function ConnectionIDs Returns tConnection[]
42846>>>>>>>        tConnection[] Connections
42846>>>>>>>        tConnection[] Connections
42847>>>>>>>        Function_Return Connections
42848>>>>>>>    End_Function
42849>>>>>>>
42849>>>>>>>    Function ConnectionIdIndex String sConnectionID Returns Integer
42851>>>>>>>        Function_Return 0
42852>>>>>>>    End_Function
42853>>>>>>>
42853>>>>>>>    Function RedirectConnectionId String sConnectionID String sServer String sUserId String sPw Boolean bTrusted Boolean bKeepOpen Returns Boolean
42855>>>>>>>        Function_Return False
42856>>>>>>>    End_Function
42857>>>>>>>
42857>>>>>>>End_Class
42858>>>>>
42858>>>>>// We're making references to this object handle so we need it defined
42858>>>>>// here as well as for the cDbUpdateHandler class
42858>>>>>
42858>>>>>    Global_Variable Handle ghoSQLConnectionHandler
42858>>>>>    Move 0 to ghoSQLConnectionHandler
42859>>>>>
42859>>>>>Class cSQLConnectionHandler is a cObject
42860>>>>>
42860>>>>>    Procedure Construct_Object
42862>>>>>        Forward Send Construct_Object
42864>>>>>        Move Self to ghoSQLConnectionHandler
42865>>>>>
42865>>>>>        Property Handle phoSQLConnectionIniFile (Create(Self,RefClass(cSQLConnectionIniFile)))
42866>>>>>
42866>>>>>        // These properties are used by the cDbUpdateVersion and cDbUpdateFunctionLibrary classes,
42866>>>>>        // but put here so they can be set/get in both class objects. Those classes has "relay"
42866>>>>>        // methods to this class.
42866>>>>>        Property Boolean pbUseConnectionID True
42867>>>>>        Property Boolean pbToANSI          True
42868>>>>>        Property Boolean pbRecnum          True
42869>>>>>        Property Boolean pbCopyData        True
42870>>>>>        Property Boolean pbApiTableUpdateAuto    False
42871>>>>>        Property Boolean pbCompareDate_DateTime  False
42872>>>>>        Property Boolean pbCompareIndexAscending False
42873>>>>>        Property Boolean pbCompareIndexUppercase False
42874>>>>>
42874>>>>>        // Driver default value settings:
42874>>>>>        // Note: When the object is created the corresponding values
42874>>>>>        // from the driver .int files are read.
42874>>>>>        // Sample: Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_NUMERIC of {driverNumber} to {StringVariable}
42874>>>>>        Property String psDriverDefaultValueASCII    ""
42875>>>>>        Property String psDriverDefaultValueBinary   ""
42876>>>>>        Property String psDriverDefaultValueDate     ""
42877>>>>>        Property String psDriverDefaultValueDateTime ""
42878>>>>>        Property String psDriverDefaultValueNumeric  ""
42879>>>>>        Property String psDriverDefaultValueText     ""
42880>>>>>
42880>>>>>        // Driver "nullability" settings:
42880>>>>>        // Note: When the object is created the corresponding values
42880>>>>>        // from the driver .int files are read.
42880>>>>>        // Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_ASCII of {driverNumber} to {BooleanVariable}
42880>>>>>        Property Boolean pbDriverDefaultNullableASCII    False
42881>>>>>        Property Boolean pbDriverDefaultNullableBinary   False
42882>>>>>        Property Boolean pbDriverDefaultNullableDate     False
42883>>>>>        Property Boolean pbDriverDefaultNullableDateTime False
42884>>>>>        Property Boolean pbDriverDefaultNullableNumeric  False
42885>>>>>        Property Boolean pbDriverDefaultNullableText     False
42886>>>>>
42886>>>>>        // *** This is the central point of connection data for the Database Update Framework ***
42886>>>>>        //     It is private because the get/set version also updates the DAW/Mertech
42886>>>>>        //     driver interfaces.
42886>>>>>        //     There are also procedure/function pairs to set/get individual data members
42886>>>>>        //     of the struct they are all routed throu this struct property.
42886>>>>>        Property tSQLConnection Private.pSQLConnection
42887>>>>>
42887>>>>>    End_Procedure
42888>>>>>
42888>>>>>    Procedure End_Construct_Object
42890>>>>>        tSQLConnection SQLConnection
42890>>>>>        tSQLConnection SQLConnection
42890>>>>>
42890>>>>>        Forward Send End_Construct_Object
42892>>>>>
42892>>>>>        // Now is the time to read and apply SQL connection settings.
42892>>>>>        Get SetupSQLConnection True True to SQLConnection
42893>>>>>        Set Private.pSQLConnection to SQLConnection
42894>>>>>    End_Procedure
42895>>>>>
42895>>>>>    // *** Properties ***
42895>>>>>    // All connection related "properties" (get/set pairs) are really done by changing the
42895>>>>>    // private.pSQLConnection struct connection property. These "properties" are
42895>>>>>    // merely here for conveniance.
42895>>>>>    //
42895>>>>>    // The pSQLConnection get/set are here so we have a "central hub"
42895>>>>>    // where we update data to/from the DAW & Mertech driver interfaces and this framework.
42895>>>>>    // This struct property contains all the connection data.
42895>>>>>    //
42895>>>>>    Procedure Set pSQLConnection tSQLConnection SQLConnection
42897>>>>>        Boolean bOK
42897>>>>>
42897>>>>>        Set Private.pSQLConnection to SQLConnection
42898>>>>>
42898>>>>>        // When starting a program we might not have a connection id yet:
42898>>>>>        If (SQLConnection.sDriverID = DATAFLEX_ID) Begin
42900>>>>>//        If (SQLConnection.sConnectionID = "" or SQLConnection.sDriverID = DATAFLEX_ID) Begin
42900>>>>>            Procedure_Return
42901>>>>>        End
42901>>>>>>
42901>>>>>
42901>>>>>        // If a DAW DFConnId.ini file was read instead of the DUF SQLConnections.ini file we should by now
42901>>>>>        // be logged in already and don't want to do it again.
42901>>>>>        If (SQLConnection.bDAWConnection = False) Begin
42903>>>>>            // After we have set the class property we need to tell the DAW/Mertech
42903>>>>>            // driver interfaces about the change & make a new login.
42903>>>>>            Get SQLLogin SQLConnection to bOK
42904>>>>>            If (bOK = False) Begin
42906>>>>>                Error DFERR_PROGRAM "Login error."
42907>>>>>>
42907>>>>>            End
42907>>>>>>
42907>>>>>        End
42907>>>>>>
42907>>>>>
42907>>>>>        // Now is the time to setup our driver default values by reading the driver .int file:
42907>>>>>        Send SetupDriverDefaults SQLConnection.sDriverID
42908>>>>>
42908>>>>>    End_Procedure
42909>>>>>
42909>>>>>    // Similar to _SqlCheckCurrentDriver but generates no error and it doesn't
42909>>>>>    // attempt to load the driver.
42909>>>>>    // Returns true if the passed driver is SQL based.
42909>>>>>    Function IsSQLDriver String sDriverID Returns Boolean
42911>>>>>        Boolean bOK
42911>>>>>
42911>>>>>        Get IsDAWSQLDriver sDriverID to bOK
42912>>>>>        If (bOK = False) Begin
42914>>>>>            Get IsMertechDriver sDriverID to bOK
42915>>>>>        End
42915>>>>>>
42915>>>>>
42915>>>>>        Function_Return bOK
42916>>>>>    End_Function
42917>>>>>
42917>>>>>    // Reads the driver .int file and sets class properties of the cDbUpdateFunctionLibrary accordingly.
42917>>>>>    Procedure SetupDriverDefaults String sDriverID
42919>>>>>        String sAttributeValue
42919>>>>>        Integer iDriverID
42919>>>>>        Boolean bNULL bSQLDriver bIsMertechDriver
42919>>>>>
42919>>>>>        Get IsSQLDriver sDriverID to bSQLDriver
42920>>>>>        If (bSQLDriver = False) Begin
42922>>>>>            Procedure_Return
42923>>>>>        End                                      
42923>>>>>>
42923>>>>>        Get IsMertechDriver sDriverID to bIsMertechDriver
42924>>>>>        If (bIsMertechDriver = True) Begin
42926>>>>>            Procedure_Return
42927>>>>>        End
42927>>>>>>
42927>>>>>        
42927>>>>>        Get DriverIndex sDriverID to iDriverID
42928>>>>>
42928>>>>>        // Driver default values for various data types:
42928>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_ASCII of iDriverID      to sAttributeValue
42931>>>>>        Set psDriverDefaultValueASCII                                   to sAttributeValue
42932>>>>>
42932>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_BINARY of iDriverID     to sAttributeValue
42935>>>>>        Set psDriverDefaultValueBinary                                  to sAttributeValue
42936>>>>>
42936>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_DATE of iDriverID       to sAttributeValue
42939>>>>>        Set psDriverDefaultValueDate                                    to sAttributeValue
42940>>>>>
42940>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_DATETIME of iDriverID   to sAttributeValue
42943>>>>>        Set psDriverDefaultValueDateTime                                to sAttributeValue
42944>>>>>
42944>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_NUMERIC of iDriverID    to sAttributeValue
42947>>>>>        Set psDriverDefaultValueNumeric                                 to sAttributeValue
42948>>>>>
42948>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_TEXT of iDriverID       to sAttributeValue
42951>>>>>        Set psDriverDefaultValueText                                    to sAttributeValue
42952>>>>>
42952>>>>>        // The default setting for the "nullability" of newly created ASCII columns.
42952>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_ASCII      of iDriverID to bNULL
42955>>>>>        Set pbDriverDefaultNullableASCII to bNULL
42956>>>>>
42956>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_BINARY     of iDriverID to bNULL
42959>>>>>        Set pbDriverDefaultNullableBinary to bNULL
42960>>>>>
42960>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_DATE       of iDriverID to bNULL
42963>>>>>        Set pbDriverDefaultNullableDate to bNULL
42964>>>>>
42964>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_DATETIME   of iDriverID to bNULL
42967>>>>>        Set pbDriverDefaultNullableDateTime to bNULL
42968>>>>>
42968>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_NUMERIC    of iDriverID to bNULL
42971>>>>>        Set pbDriverDefaultNullableNumeric to bNULL
42972>>>>>
42972>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_TEXT       of iDriverID to bNULL
42975>>>>>        Set pbDriverDefaultNullableText to bNULL
42976>>>>>
42976>>>>>    End_Procedure
42977>>>>>
42977>>>>>    Function SQLLogin tSQLConnection SQLConnection Returns Boolean
42979>>>>>        Boolean bOK bIsDaw bIsMertech
42979>>>>>        String sConnectionString
42979>>>>>        Handle hoErrorObj hoDriver hoIniFile
42979>>>>>        Integer iDriverID
42979>>>>>
42979>>>>>        Move False to bOK
42980>>>>>        Get IsDAWSQLDriver SQLConnection.sDriverID to bIsDaw
42981>>>>>        If (bIsDaw = False) Begin
42983>>>>>            Get IsMertechDriver SQLConnection.sDriverID to bIsMertech
42984>>>>>            If (bIsMertech = False) Begin
42986>>>>>                Function_Return False
42987>>>>>            End
42987>>>>>>
42987>>>>>        End
42987>>>>>>
42987>>>>>
42987>>>>>        Get phoSQLConnectionIniFile to hoIniFile
42988>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to sConnectionString
42989>>>>>        Get DriverIndex SQLConnection.sDriverID to iDriverID
42990>>>>>        If (iDriverID = 0) Begin
42992>>>>>            Move hoErrorObj to Error_Object_Id
42993>>>>>            Function_Return False
42994>>>>>        End
42994>>>>>>
42994>>>>>
42994>>>>>        // There's a bug in Mertech drivers creating "an Exception error" in the debugger (probably will crash an application too.)
42994>>>>>        If (bIsMertech = False) Begin
42996>>>>>            Set_Attribute DF_DRIVER_SILENT_LOGIN of iDriverID to SQLConnection.bSilentLogin
42999>>>>>        End
42999>>>>>>
42999>>>>>
42999>>>>>        Get Create (RefClass(cDbUpdateDatabaseDriver)) to hoDriver
43000>>>>>        Set psDriverID of hoDriver to SQLConnection.sDriverID
43001>>>>>        Get DbLogin    of hoDriver sConnectionString SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to bOK
43002>>>>>        Send Destroy   of hoDriver
43003>>>>>
43003>>>>>        Function_Return bOK
43004>>>>>    End_Function
43005>>>>>
43005>>>>>    Function pSQLConnection Returns tSQLConnection
43007>>>>>        tSQLConnection SQLConnection
43007>>>>>        tSQLConnection SQLConnection
43007>>>>>        Get Private.pSQLConnection to SQLConnection
43008>>>>>        Function_Return SQLConnection
43009>>>>>    End_Function
43010>>>>>
43010>>>>>    Procedure Set psConnectionID String sValue
43012>>>>>        tSQLConnection SQLConnection
43012>>>>>        tSQLConnection SQLConnection
43012>>>>>
43012>>>>>        Get Private.pSQLConnection to SQLConnection
43013>>>>>        If (SQLConnection.sConnectionID = "") Begin
43015>>>>>            Move sValue to SQLConnection.sConnectionID
43016>>>>>        End
43016>>>>>>
43016>>>>>
43016>>>>>        // Else we might want to change the current connection ID
43016>>>>>        Else If (SQLConnection.sConnectionID <> "" and SQLConnection.sConnectionID <> sValue) Begin
43019>>>>>            Move False to Err
43020>>>>>            Logout SQLConnection.sDriverID
43021>>>>>            // This will also make a login to the new server.
43021>>>>>            Get SQLIniFileConnectionID of (phoSQLConnectionIniFile(Self)) sValue to SQLConnection
43022>>>>>        End
43022>>>>>>
43022>>>>>        Set pSQLConnection to SQLConnection
43023>>>>>    End_Procedure
43024>>>>>
43024>>>>>    Function psConnectionID Returns String
43026>>>>>        tSQLConnection SQLConnection
43026>>>>>        tSQLConnection SQLConnection
43026>>>>>        Get Private.pSQLConnection to SQLConnection
43027>>>>>        Function_Return SQLConnection.sConnectionID
43028>>>>>    End_Function
43029>>>>>
43029>>>>>    // Note: If the psDriverID + other connection properties are to be changed,
43029>>>>>    //       the psDriverID *must* be the first property that is changed!
43029>>>>>    //       Otherwise errors might be raised by the driver when e.g. the format
43029>>>>>    //       for a connection string has the wrong format for that driver.
43029>>>>>    Procedure Set psDriverID String sValue
43031>>>>>        tSQLConnection SQLConnection
43031>>>>>        tSQLConnection SQLConnection
43031>>>>>        Get pSQLConnection to SQLConnection
43032>>>>>        Move sValue        to SQLConnection.sDriverID
43033>>>>>        Set pSQLConnection to SQLConnection
43034>>>>>        If (sValue <> DATAFLEX_ID) Begin
43036>>>>>            Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43037>>>>>        End
43037>>>>>>
43037>>>>>    End_Procedure
43038>>>>>
43038>>>>>    Function psDriverID Returns String
43040>>>>>        tSQLConnection SQLConnection
43040>>>>>        tSQLConnection SQLConnection
43040>>>>>        Get Private.pSQLConnection to SQLConnection
43041>>>>>        If (SQLConnection.sDriverID = "") Begin
43043>>>>>            Move DATAFLEX_ID to SQLConnection.sDriverID // Default is the DataFlex driver.
43044>>>>>        End
43044>>>>>>
43044>>>>>        Function_Return SQLConnection.sDriverID
43045>>>>>    End_Function
43046>>>>>
43046>>>>>    Procedure Set psConnectionString String sValue
43048>>>>>        tSQLConnection SQLConnection
43048>>>>>        tSQLConnection SQLConnection
43048>>>>>        Get Private.pSQLConnection to SQLConnection
43049>>>>>        Move sValue        to SQLConnection.sConnectionString
43050>>>>>        Set pSQLConnection to SQLConnection
43051>>>>>    End_Procedure
43052>>>>>
43052>>>>>    Function psConnectionString Returns String
43054>>>>>        tSQLConnection SQLConnection
43054>>>>>        tSQLConnection SQLConnection
43054>>>>>        Get Private.pSQLConnection to SQLConnection
43055>>>>>        Function_Return SQLConnection.sConnectionString
43056>>>>>    End_Function
43057>>>>>
43057>>>>>    Procedure Set psServer String sValue
43059>>>>>        tSQLConnection SQLConnection
43059>>>>>        tSQLConnection SQLConnection
43059>>>>>        Get Private.pSQLConnection to SQLConnection
43060>>>>>        Move sValue        to SQLConnection.sServer
43061>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43062>>>>>        Set pSQLConnection to SQLConnection
43063>>>>>    End_Procedure
43064>>>>>
43064>>>>>    Function psServer Returns String
43066>>>>>        tSQLConnection SQLConnection
43066>>>>>        tSQLConnection SQLConnection
43066>>>>>        Get Private.pSQLConnection to SQLConnection
43067>>>>>        Function_Return SQLConnection.sServer
43068>>>>>    End_Function
43069>>>>>
43069>>>>>    Procedure Set psDatabase String sValue
43071>>>>>        tSQLConnection SQLConnection
43071>>>>>        tSQLConnection SQLConnection
43071>>>>>        Get Private.pSQLConnection to SQLConnection
43072>>>>>        Move sValue        to SQLConnection.sDatabase
43073>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43074>>>>>        Set pSQLConnection to SQLConnection
43075>>>>>    End_Procedure
43076>>>>>
43076>>>>>    Function psDatabase Returns String
43078>>>>>        tSQLConnection SQLConnection
43078>>>>>        tSQLConnection SQLConnection
43078>>>>>        Get Private.pSQLConnection to SQLConnection
43079>>>>>        Function_Return SQLConnection.sDatabase
43080>>>>>    End_Function
43081>>>>>
43081>>>>>    Procedure Set psUserID String sValue
43083>>>>>        tSQLConnection SQLConnection
43083>>>>>        tSQLConnection SQLConnection
43083>>>>>        Get Private.pSQLConnection to SQLConnection
43084>>>>>        Move sValue        to SQLConnection.sUserID
43085>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43086>>>>>        Set pSQLConnection to SQLConnection
43087>>>>>    End_Procedure
43088>>>>>
43088>>>>>    Function psUserID Returns String
43090>>>>>        tSQLConnection SQLConnection
43090>>>>>        tSQLConnection SQLConnection
43090>>>>>        Get Private.pSQLConnection to SQLConnection
43091>>>>>        Function_Return SQLConnection.sUserID
43092>>>>>    End_Function
43093>>>>>
43093>>>>>    // This is the uncrypted password
43093>>>>>    Procedure Set psPassword String sValue
43095>>>>>        tSQLConnection SQLConnection
43095>>>>>        tSQLConnection SQLConnection
43095>>>>>        Get Private.pSQLConnection to SQLConnection
43096>>>>>        Move sValue        to SQLConnection.sPassword
43097>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43098>>>>>        Set pSQLConnection to SQLConnection
43099>>>>>    End_Procedure
43100>>>>>
43100>>>>>    Function psPassword Returns String
43102>>>>>        tSQLConnection SQLConnection
43102>>>>>        tSQLConnection SQLConnection
43102>>>>>        Get Private.pSQLConnection to SQLConnection
43103>>>>>        Function_Return SQLConnection.sPassword
43104>>>>>    End_Function
43105>>>>>
43105>>>>>    Procedure Set pbTrusted Boolean bValue
43107>>>>>        tSQLConnection SQLConnection
43107>>>>>        tSQLConnection SQLConnection
43107>>>>>        Get Private.pSQLConnection to SQLConnection
43108>>>>>        Move bValue        to SQLConnection.bTrusted
43109>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43110>>>>>        Set pSQLConnection to SQLConnection
43111>>>>>    End_Procedure
43112>>>>>
43112>>>>>    Function pbTrusted Returns Boolean
43114>>>>>        tSQLConnection SQLConnection
43114>>>>>        tSQLConnection SQLConnection
43114>>>>>        Get Private.pSQLConnection to SQLConnection
43115>>>>>        Function_Return SQLConnection.bTrusted
43116>>>>>    End_Function
43117>>>>>
43117>>>>>    // *** All of these properties are special to the Database Update Framework ***
43117>>>>>    //     Thus they are not propagated to the DAW/Mertech classes and that is why
43117>>>>>    //     the Private.pSQLConnection property is set instead of the going throu
43117>>>>>    //     the central pSQLConnection "hub".
43117>>>>>    Procedure Set pbSilentLogin Boolean bValue
43119>>>>>        tSQLConnection SQLConnection
43119>>>>>        tSQLConnection SQLConnection
43119>>>>>        Get Private.pSQLConnection to SQLConnection
43120>>>>>        Move bValue to SQLConnection.bTrusted
43121>>>>>        Set Private.pSQLConnection to SQLConnection
43122>>>>>    End_Procedure
43123>>>>>
43123>>>>>    Function pbSilentLogin Returns Boolean
43125>>>>>        tSQLConnection SQLConnection
43125>>>>>        tSQLConnection SQLConnection
43125>>>>>        Get Private.pSQLConnection to SQLConnection
43126>>>>>        Function_Return SQLConnection.bSilentLogin
43127>>>>>    End_Function
43128>>>>>
43128>>>>>    Procedure Set piDbType Integer iValue
43130>>>>>        tSQLConnection SQLConnection
43130>>>>>        tSQLConnection SQLConnection
43130>>>>>        Get Private.pSQLConnection to SQLConnection
43131>>>>>        Move iValue to SQLConnection.iDbType
43132>>>>>        Set Private.pSQLConnection to SQLConnection
43133>>>>>    End_Procedure
43134>>>>>
43134>>>>>    Function piDbType Returns Integer
43136>>>>>        tSQLConnection SQLConnection
43136>>>>>        tSQLConnection SQLConnection
43136>>>>>        Get Private.pSQLConnection to SQLConnection
43137>>>>>        Function_Return SQLConnection.iDbType
43138>>>>>    End_Function
43139>>>>>
43139>>>>>    Procedure Set psBaseTableSpace String sValue
43141>>>>>        tSQLConnection SQLConnection
43141>>>>>        tSQLConnection SQLConnection
43141>>>>>        Get Private.pSQLConnection to SQLConnection
43142>>>>>        Move sValue to SQLConnection.sBaseTableSpace
43143>>>>>        Set Private.pSQLConnection to SQLConnection
43144>>>>>    End_Procedure
43145>>>>>
43145>>>>>    Function psBaseTableSpace Returns String
43147>>>>>        tSQLConnection SQLConnection
43147>>>>>        tSQLConnection SQLConnection
43147>>>>>        Get Private.pSQLConnection to SQLConnection
43148>>>>>        Function_Return SQLConnection.sBaseTableSpace
43149>>>>>    End_Function
43150>>>>>
43150>>>>>    Procedure Set psIndexTableSpace String sValue
43152>>>>>        tSQLConnection SQLConnection
43152>>>>>        tSQLConnection SQLConnection
43152>>>>>        Get Private.pSQLConnection to SQLConnection
43153>>>>>        Move sValue to SQLConnection.sIndexTableSpace
43154>>>>>        Set Private.pSQLConnection to SQLConnection
43155>>>>>    End_Procedure
43156>>>>>
43156>>>>>    Function psIndexTableSpace Returns String
43158>>>>>        tSQLConnection SQLConnection
43158>>>>>        tSQLConnection SQLConnection
43158>>>>>        Get Private.pSQLConnection to SQLConnection
43159>>>>>        Function_Return SQLConnection.sIndexTableSpace
43160>>>>>    End_Function
43161>>>>>
43161>>>>>    Procedure Set psLongTableSpace String sValue
43163>>>>>        tSQLConnection SQLConnection
43163>>>>>        tSQLConnection SQLConnection
43163>>>>>        Get Private.pSQLConnection to SQLConnection
43164>>>>>        Move sValue to SQLConnection.sLongTableSpace
43165>>>>>        Set Private.pSQLConnection to SQLConnection
43166>>>>>    End_Procedure
43167>>>>>
43167>>>>>    Function psLongTableSpace Returns String
43169>>>>>        tSQLConnection SQLConnection
43169>>>>>        tSQLConnection SQLConnection
43169>>>>>        Get Private.pSQLConnection to SQLConnection
43170>>>>>        Function_Return SQLConnection.sLongTableSpace
43171>>>>>    End_Function
43172>>>>>
43172>>>>>    Procedure Set psSchema String sValue
43174>>>>>        tSQLConnection SQLConnection
43174>>>>>        tSQLConnection SQLConnection
43174>>>>>        Get Private.pSQLConnection to SQLConnection
43175>>>>>        Move sValue to SQLConnection.sSchema
43176>>>>>        Set Private.pSQLConnection to SQLConnection
43177>>>>>    End_Procedure
43178>>>>>
43178>>>>>    Function psSchema Returns String
43180>>>>>        tSQLConnection SQLConnection
43180>>>>>        tSQLConnection SQLConnection
43180>>>>>        Get Private.pSQLConnection to SQLConnection
43181>>>>>        Function_Return SQLConnection.sSchema
43182>>>>>    End_Function
43183>>>>>
43183>>>>>    Procedure Set pbEnabled Boolean bValue
43185>>>>>        tSQLConnection SQLConnection
43185>>>>>        tSQLConnection SQLConnection
43185>>>>>        Get Private.pSQLConnection to SQLConnection
43186>>>>>        Move bValue to SQLConnection.bEnabled
43187>>>>>        Set Private.pSQLConnection to SQLConnection
43188>>>>>    End_Procedure
43189>>>>>
43189>>>>>    Function pbEnabled Returns Boolean
43191>>>>>        tSQLConnection SQLConnection
43191>>>>>        tSQLConnection SQLConnection
43191>>>>>        Get Private.pSQLConnection to SQLConnection
43192>>>>>        Function_Return SQLConnection.bEnabled
43193>>>>>    End_Function
43194>>>>>
43194>>>>>
43194>>>>>    // ************************************
43194>>>>>    Function SetupSQLConnection Boolean bReadDFConnSettings Boolean bReadSQLConnections Returns tSQLConnection
43196>>>>>        tSQLConnection SQLConnection
43196>>>>>        tSQLConnection SQLConnection
43196>>>>>
43196>>>>>        // If this object was created by the cDbUpdateHandler class we will
43196>>>>>        // deferr reading SQL connection values until later.
43196>>>>>        If (bReadDFConnSettings = True) Begin
43198>>>>>            // This is the new SQL login logic for DF 19 and up; "Managed Connections"
43198>>>>>            If (ghoConnection > 0) Begin
43200>>>>>                Get ReadcConnections to SQLConnection
43201>>>>>            End
43201>>>>>>
43201>>>>>
43201>>>>>            // In addition to the above; there might be other values set even if a cConnection
43201>>>>>            // object is used.
43201>>>>>            If (bReadSQLConnections = True) Begin
43203>>>>>                Get ReadSQLConnectionsIniSettings to SQLConnection
43204>>>>>            End
43204>>>>>>
43204>>>>>        End
43204>>>>>>
43204>>>>>
43204>>>>>        Function_Return SQLConnection
43205>>>>>    End_Function
43206>>>>>
43206>>>>>    // This is for the new cConnection class used by DF 19 and up (only).
43206>>>>>    Function ReadcConnections Returns tSQLConnection
43208>>>>>        tConnection Connection
43208>>>>>        tConnection Connection
43208>>>>>        tSQLConnection SQLConnection SQLConnectionEmpty
43208>>>>>        tSQLConnection SQLConnection SQLConnectionEmpty
43208>>>>>        Integer iRetval iDbType
43208>>>>>        Boolean bOK bConnected
43208>>>>>        String sConnectionID
43208>>>>>
43208>>>>>
43208>>>>>        Function_Return SQLConnection
43209>>>>>    End_Function
43210>>>>>
43210>>>>>    // Returns True if the psConnectionID has been set in the cDbUpateHandler object,
43210>>>>>    // or the DAW cConnect array of registered connection only contains one active/enabled
43210>>>>>    // connection id for a particular driver.
43210>>>>>    // So either the psConnectionID or the psDriverID can have been set in the cDbUpdateHandler
43210>>>>>    // object. We can then match a connection id from the DAW cConnect class array.
43210>>>>>    // Returns False if there are multiple connections that are enabled or the psConnectionID has
43210>>>>>    // been set in the cDbUpdateHandler object but it cannot be found amongst the registered
43210>>>>>    // connections of the DAW cConnect class.
43210>>>>>    Function IsSinglecConnection String ByRef sConnectionID Returns Boolean
43212>>>>>        tConnection[] ConnIdArray
43212>>>>>        tConnection[] ConnIdArray
43213>>>>>        Integer iCount iSize iConnectionIDCounter
43213>>>>>        Boolean bEnabled bFound
43213>>>>>        String sConnectionID2 sDriverID sDriverConn
43213>>>>>
43213>>>>>        Move False to bFound
43214>>>>>        If (ghoConnection > 0) Begin
43216>>>>>
43216>>>>>            // The property of the cDbUpdateHandler container object
43216>>>>>            Get psDriverID to sDriverID
43217>>>>>
43217>>>>>            Move 0 to iConnectionIDCounter
43218>>>>>            // This is the the DAW cConnect array with all registered connection id's.
43218>>>>>            Move (SizeOfArray(ConnIdArray)) to iSize
43219>>>>>            Decrement iSize
43220>>>>>            For iCount from 0 to iSize
43226>>>>>>
43226>>>>>                Move ConnIdArray[iCount].sDriver to sDriverConn
43227>>>>>                Move ConnIdArray[iCount].sId to sConnectionID2
43228>>>>>                Move (ConnIdArray[iCount].bDisabled = False) to bEnabled
43229>>>>>                // If no psConnectionID specified in the cDbUpdateHandler, we check if there is a driver
43229>>>>>                // connection in the DAW cConnect object _and_ that there is only one!
43229>>>>>                If (sConnectionID = "") Begin
43231>>>>>                    Move (sDriverID = sDriverConn and bEnabled = True) to bFound
43232>>>>>                End
43232>>>>>>
43232>>>>>                Else Begin
43233>>>>>                    If (Uppercase(sConnectionID) = Uppercase(sConnectionID2)) Begin
43235>>>>>                        Move iSize to iCount // Then we've found what we were looking for and we're out of here...
43236>>>>>                    End
43236>>>>>>
43236>>>>>                End
43236>>>>>>
43236>>>>>
43236>>>>>                If (bFound = True) Begin
43238>>>>>                    Increment iConnectionIDCounter
43239>>>>>                End
43239>>>>>>
43239>>>>>            Loop
43240>>>>>>
43240>>>>>            Move (iConnectionIDCounter <= 1 and sDriverConn <> "" and sConnectionID2 <> "") to bFound
43241>>>>>            If (bFound = True) Begin
43243>>>>>                Move sConnectionID2 to sConnectionID
43244>>>>>            End
43244>>>>>>
43244>>>>>        End
43244>>>>>>
43244>>>>>
43244>>>>>        // Special case; a cConnection object has been setup in the cApplication,
43244>>>>>        // but no DFConn.ini record has been created.
43244>>>>>        If (iSize = -1) Begin
43246>>>>>            Move True to bFound
43247>>>>>        End
43247>>>>>>
43247>>>>>
43247>>>>>        Function_Return bFound
43248>>>>>    End_Function
43249>>>>>
43249>>>>>    // Send on object creation to read the default connection string settings, and
43249>>>>>    // create a connection to the server.
43249>>>>>    Function ReadSQLConnectionsIniSettings Returns tSQLConnection
43251>>>>>        String sPath sFileName
43251>>>>>        Boolean bExists bActive
43251>>>>>        tSQLConnection[] SQLConnectionArray
43251>>>>>        tSQLConnection[] SQLConnectionArray
43252>>>>>        tSQLConnection SQLConnection SQLConnectionEmpty
43252>>>>>        tSQLConnection SQLConnection SQLConnectionEmpty
43252>>>>>        Handle hoIniFile
43252>>>>>        Integer iSize iCount iRetval
43252>>>>>
43252>>>>>        Get psIniFilePath to sPath
43253>>>>>        Get phoSQLConnectionIniFile to hoIniFile
43254>>>>>        If (sPath = "") Begin
43256>>>>>            Get ApplicationPath of hoIniFile to sPath
43257>>>>>            Set psIniFilePath   of hoIniFile to sPath
43258>>>>>        End
43258>>>>>>
43258>>>>>        Get vFolderFormat sPath to sPath
43259>>>>>        Get psIniFileName to sFileName
43260>>>>>        Get vFilePathExists (sPath + sFileName) to bExists
43261>>>>>
43261>>>>>        Get SQLIniFileReadConnections of hoIniFile to SQLConnectionArray
43262>>>>>        Move (SizeOfArray(SQLConnectionArray)) to iSize
43263>>>>>        If (iSize = 0) Begin
43265>>>>>            // This may have been set by the "ReadcConnections" function,
43265>>>>>            // if a cConnection object has been setup for DataFlex 19 or later
43265>>>>>            // in the cApplication object.
43265>>>>>            Get pSQLConnection to SQLConnection
43266>>>>>            If (SQLConnection.sConnectionID = "") Begin
43268>>>>>                Function_Return SQLConnectionEmpty
43269>>>>>            End
43269>>>>>>
43269>>>>>            Move SQLConnection to SQLConnectionArray[0] 
43270>>>>>            Move 1 to iSize
43271>>>>>        End
43271>>>>>>
43271>>>>>
43271>>>>>        Move False to bActive
43272>>>>>        // The first connection should be the one that is active, but all connections might have been disabled.
43272>>>>>        Decrement iSize
43273>>>>>        For iCount from 0 to iSize
43279>>>>>>
43279>>>>>            Move SQLConnectionArray[iCount] to SQLConnection
43280>>>>>            If (SQLConnection.bEnabled = True) Begin
43282>>>>>                Move True to bActive
43283>>>>>                Move iSize to iCount // We've found the enabled item, so we're out of here.
43284>>>>>            End
43284>>>>>>
43284>>>>>        Loop
43285>>>>>>
43285>>>>>
43285>>>>>        // In case all connections have been disabled, we're out of here.
43285>>>>>        If (bActive = False) Begin
43287>>>>>            Function_Return SQLConnectionEmpty
43288>>>>>        End
43288>>>>>>
43288>>>>>
43288>>>>>        Send CreateSQLConnection SQLConnection.sDriverID SQLConnection.sConnectionID ;             SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted ;             SQLConnection.sUserID SQLConnection.sPassword SQLConnection.bSilentLogin False
43289>>>>>
43289>>>>>        Set pSQLConnection to SQLConnection
43290>>>>>        Get AutoSetConnectionID to iRetval
43291>>>>>
43291>>>>>        Function_Return SQLConnection
43292>>>>>    End_Function
43293>>>>>
43293>>>>>    Procedure Set psIniFilePath String sPath
43295>>>>>        Set psIniFilePath of (phoSQLConnectionIniFile(Self)) to sPath
43296>>>>>    End_Procedure
43297>>>>>
43297>>>>>    Function psIniFilePath Returns String
43299>>>>>        String sRetval
43299>>>>>        Get psIniFilePath of (phoSQLConnectionIniFile(Self)) to sRetval
43300>>>>>        Function_Return sRetval
43301>>>>>    End_Function
43302>>>>>
43302>>>>>    Procedure Set psIniFileName String sFileName
43304>>>>>        Set psIniFileName of (phoSQLConnectionIniFile(Self)) to sFileName
43305>>>>>    End_Procedure
43306>>>>>
43306>>>>>    Function psIniFileName Returns String
43308>>>>>        String sRetval
43308>>>>>        Get psIniFileName of (phoSQLConnectionIniFile(Self)) to sRetval
43309>>>>>        Function_Return sRetval
43310>>>>>    End_Function
43311>>>>>
43311>>>>>    Procedure Set psIniSectionName String sSection
43313>>>>>        Set psIniSectionName of (phoSQLConnectionIniFile(Self)) to sSection
43314>>>>>    End_Procedure
43315>>>>>
43315>>>>>    Function psIniSectionName Returns String
43317>>>>>        String sRetval
43317>>>>>        Get psIniSectionName of (phoSQLConnectionIniFile(Self)) to sRetval
43318>>>>>        Function_Return sRetval
43319>>>>>    End_Function
43320>>>>>
43320>>>>>    Procedure Set IniFileValue String sSection String sValueName String sValue
43322>>>>>        Handle ho
43322>>>>>        Get phoSQLConnectionIniFile to ho
43323>>>>>        Set IniFileValue of ho to sSection sValueName sValue
43324>>>>>    End_Procedure
43325>>>>>
43325>>>>>    Function IniFileValue String sSection String sValueName String sDefaultValue Returns String
43327>>>>>        Handle ho
43327>>>>>        String sRetval
43327>>>>>        Get phoSQLConnectionIniFile to ho
43328>>>>>        Get IniFileValue of ho sSection sValueName sDefaultValue to sRetval
43329>>>>>        Function_Return sRetval
43330>>>>>    End_Function
43331>>>>>
43331>>>>>    Function SectionExists String sSection Returns Boolean
43333>>>>>        Handle ho
43333>>>>>        Boolean bRetval
43333>>>>>        Get phoSQLConnectionIniFile to ho
43334>>>>>        Get SectionExists of ho sSection to bRetval
43335>>>>>        Function_Return bRetval
43336>>>>>    End_Function
43337>>>>>
43337>>>>>    Function KeyExists String sSection String sKey Returns Boolean
43339>>>>>        Handle ho
43339>>>>>        Boolean bRetval
43339>>>>>        Get phoSQLConnectionIniFile to ho
43340>>>>>        Get KeyExists of ho sSection sKey to bRetval
43341>>>>>        Function_Return bRetval
43342>>>>>    End_Function
43343>>>>>
43343>>>>>    Function EncryptPassword String sPassword Returns String
43345>>>>>        Handle ho
43345>>>>>        String sRetval
43345>>>>>        Get phoSQLConnectionIniFile to ho
43346>>>>>        Get EncryptPassword of ho sPassword to sRetval
43347>>>>>        Function_Return sRetval
43348>>>>>    End_Function
43349>>>>>
43349>>>>>    Function DecryptPassword String sPassword Returns String
43351>>>>>        Handle ho
43351>>>>>        String sRetval
43351>>>>>        Get phoSQLConnectionIniFile to ho
43352>>>>>        Get DecryptPassword of ho sPassword to sRetval
43353>>>>>        Function_Return sRetval
43354>>>>>    End_Function
43355>>>>>
43355>>>>>    // *** Main Connection Message ***
43355>>>>>    Procedure CreateSQLConnection String sDriverID String sConnectionID String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Boolean bSilent Boolean bExitProgram
43357>>>>>        Handle hoDriver
43357>>>>>        String sConnectionString sError
43357>>>>>        Boolean bLoginSuccessful
43357>>>>>
43357>>>>>        Get ConstructConnectionString sDriverID sServer sDatabase bTrusted sUserID sPassword to sConnectionString
43358>>>>>        Get Create (RefClass(cDbUpdateDatabaseDriver)) to hoDriver
43359>>>>>        Set psDriverID of hoDriver to sDriverID
43360>>>>>        Get DbLogin of hoDriver sConnectionString sServer sDatabase bTrusted sUserID sPassword to bLoginSuccessful
43361>>>>>        If (bLoginSuccessful = False) Begin
43363>>>>>            Error DFERR_PROGRAM (CS_DUF_CannotLoginToServer * CS_DUF_ErrorText * String(sError) + "\nConnectionID = " * sConnectionID + "\nConnection String = " * sConnectionString)   
43364>>>>>>
43364>>>>>            If (bExitProgram = True) Begin
43366>>>>>                Send Exit_Application
43367>>>>>            End
43367>>>>>>
43367>>>>>        End
43367>>>>>>
43367>>>>>        Send Destroy of hoDriver
43368>>>>>    End_Procedure
43369>>>>>
43369>>>>>    Function RedirectConnection String sOldConnection String sNewConnection Returns Integer
43371>>>>>        Integer iRetval
43371>>>>>        Handle hoCLI
43371>>>>>        String sDriverID
43371>>>>>
43371>>>>>        Get psDriverID to sDriverID
43372>>>>>        Get Create (Refclass(cCLIHandler)) to hoCLI
43373>>>>>        If (hoCLI <> 0) Begin
43375>>>>>            Set psDriverID of hoCLI to sDriverID
43376>>>>>            Get RedirectConnection of hoCLI sOldConnection sNewConnection to iRetval
43377>>>>>            Send Destroy of hoCLI
43378>>>>>        End
43378>>>>>>
43378>>>>>
43378>>>>>        Function_Return iRetval
43379>>>>>    End_Function
43380>>>>>
43380>>>>>    Procedure CreateConnParamsFromConnectionString String sDriverID String sConnectionString
43382>>>>>        tSQLConnection SQLConnection
43382>>>>>        tSQLConnection SQLConnection
43382>>>>>
43382>>>>>        Set psDriverID to sDriverID
43383>>>>>        Get DeComposeConnectionString sDriverID sConnectionString to SQLConnection
43384>>>>>        Send CreateSQLConnection SQLConnection.sDriverID SQLConnection.sConnectionID SQLConnection.sServer;                                 SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword SQLConnection.bTrusted False
43385>>>>>    End_Procedure
43386>>>>>
43386>>>>>    // This is needed when e.g. the connection id we have specified in the program code
43386>>>>>    // also exists in e.g. the MSSQLDRV.ini file (can either be local in the Data folder
43386>>>>>    // or the one in the DataFlex Bin folder.)
43386>>>>>    // We then need to delete the current one before creating a new one.
43386>>>>>    // This is because the parameters may differ between the program code and the
43386>>>>>    // MSSQLDRV.ini file in a deployed environment. Also DataFlex will generate an error
43386>>>>>    // when one tries to create a Connection ID that already exists.
43386>>>>>    Procedure RemoveExistingConnectionID String sDriverID String sConnectionID
43388>>>>>        Integer iResult iDriver iNumConn iConn
43388>>>>>        Handle hoCLI
43388>>>>>        String sID
43388>>>>>
43388>>>>>        If (sDriverID = "" or sConnectionID = "") Begin
43390>>>>>            Procedure_Return
43391>>>>>        End
43391>>>>>>
43391>>>>>
43391>>>>>        Move 0 to iResult
43392>>>>>        Get Create (RefClass(cCLIHandler)) to hoCLI
43393>>>>>        If (hoCLI <> 0) Begin
43395>>>>>            Set psDriverID of hoCLI to sDriverID
43396>>>>>            Get DriverIndex sDriverID to iDriver
43397>>>>>            Get_Attribute DF_DRIVER_NUMBER_CONNECTION_IDS of iDriver to iNumConn
43400>>>>>            Decrement iNumConn
43401>>>>>            For iConn from 0 to iNumConn
43407>>>>>>
43407>>>>>                Get_Attribute DF_DRIVER_CONNECTION_ID of iDriver iConn to sID
43410>>>>>                If (Uppercase(sID) = Uppercase(sConnectionID)) Begin
43412>>>>>                    Get DeleteConnectionID of hoCLI sConnectionID -1 to iResult
43413>>>>>                End
43413>>>>>>
43413>>>>>            Loop
43414>>>>>>
43414>>>>>            Send Destroy of hoCLI
43415>>>>>        End
43415>>>>>>
43415>>>>>
43415>>>>>    End_Procedure
43416>>>>>
43416>>>>>    Function ExistingConnectionSettings String sDriverID String sConnectionID Returns tSQLConnection
43418>>>>>        Integer iResult iDriver iNumConn iConn
43418>>>>>        Handle hoCLI
43418>>>>>        String sID sConnectionString sVal sDatabase
43418>>>>>        tSQLConnection SQLConnection
43418>>>>>        tSQLConnection SQLConnection
43418>>>>>        Boolean bTrusted
43418>>>>>
43418>>>>>        Move 0 to iResult
43419>>>>>        Get Create (RefClass(cCLIHandler)) to hoCLI
43420>>>>>        If (hoCLI <> 0) Begin
43422>>>>>            Set psDriverID of hoCLI to sDriverID
43423>>>>>            Get DriverIndex sDriverID to iDriver
43424>>>>>            Get_Attribute DF_DRIVER_NUMBER_CONNECTION_IDS of iDriver to iNumConn
43427>>>>>            Decrement iNumConn
43428>>>>>            For iConn from 0 to iNumConn
43434>>>>>>
43434>>>>>                Get_Attribute DF_DRIVER_CONNECTION_ID of iDriver iConn to sID
43437>>>>>                If (Uppercase(sID) = Uppercase(sConnectionID)) Begin
43439>>>>>                    Move sDriverID                                                      to SQLConnection.sDriverID      // For completeness only...
43440>>>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID of iDriver iConn              to SQLConnection.sConnectionID  // For completeness only...
43443>>>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID_STRING of iDriver iConn       to sConnectionString
43446>>>>>                    Move sConnectionString                                              to SQLConnection.sConnectionString
43447>>>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID_OPTIONS of iDriver iConn      to SQLConnection.bSilentLogin
43450>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniServerKeyword + "=")   to SQLConnection.sServer
43451>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniDatabaseKeyword + "=") to SQLConnection.sDatabase
43452>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")      to SQLConnection.sUserID
43453>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")      to SQLConnection.sPassword
43454>>>>>
43454>>>>>                    Case Begin
43454>>>>>                        Case (sDriverID = MSSQLDRV_ID)
43456>>>>>                            Get ParseKeyWord sConnectionString (CS_SQLIniTrustedKeyword + "=") to sVal
43457>>>>>                            Move (If(Uppercase(sVal) = Uppercase(CS_SQLIniConnectionYes), True, False)) to bTrusted
43458>>>>>                            Move bTrusted                                               to SQLConnection.bTrusted
43459>>>>>                            Case Break
43460>>>>>                        Case (sDriverID = DB2_DRV_ID)
43463>>>>>                            Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=") to SQLConnection.sServer
43464>>>>>                            Case Break
43465>>>>>                        Case (sDriverID = ODBC_DRV_ID)
43468>>>>>                            Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=") to SQLConnection.sServer
43469>>>>>                            If (SQLConnection.sServer = "") Begin
43471>>>>>                                Get ParseKeyWord sConnectionString (CS_SQLIniFileDSNKeyword  + "=") to SQLConnection.sServer
43472>>>>>                            End
43472>>>>>>
43472>>>>>                            Case Break
43473>>>>>                        Case (sDriverID = SQLFLEX)
43476>>>>>                            Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=") to SQLConnection.sServer
43477>>>>>                            Move (CS_SQLIniServerKeyword + "=" + SQLConnection.sServer)    to sConnectionString
43478>>>>>                            If (SQLConnection.bTrusted = True) Begin
43480>>>>>                                Move (sConnectionString + ";" + CS_SQLIniTrustedKeyword + "=" + CS_SQLIniConnectionYes) to sConnectionString
43481>>>>>                            End
43481>>>>>>
43481>>>>>                            Else Begin
43482>>>>>                                Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")    to sVal
43483>>>>>                                Move (sConnectionString + ";" + CS_SQLIniUIDKeyword + "=" + sVal) to sConnectionString
43484>>>>>                                Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")    to sVal
43485>>>>>                                Move (sConnectionString + ";" + CS_SQLIniPWDKeyword + "=" + sVal) to sConnectionString
43486>>>>>                            End
43486>>>>>>
43486>>>>>                            Move sConnectionString                                         to SQLConnection.sConnectionString
43487>>>>>                            Case Break
43488>>>>>                        Case (sDriverID = MDSMySQL)
43491>>>>>                            Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=") to SQLConnection.sServer
43492>>>>>                            Move (CS_SQLIniServerKeyword + "=" + SQLConnection.sServer)    to sConnectionString
43493>>>>>                            If (SQLConnection.bTrusted = True) Begin
43495>>>>>                                Move (sConnectionString + ";" + CS_SQLIniTrustedKeyword + "=" + CS_SQLIniConnectionYes) to sConnectionString
43496>>>>>                            End
43496>>>>>>
43496>>>>>                            Else Begin
43497>>>>>                                Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")    to sVal
43498>>>>>                                Move (sConnectionString + ";" + CS_SQLIniUIDKeyword + "=" + sVal) to sConnectionString
43499>>>>>                                Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")    to sVal
43500>>>>>                                Move (sConnectionString + ";" + CS_SQLIniPWDKeyword + "=" + sVal) to sConnectionString
43501>>>>>                            End
43501>>>>>>
43501>>>>>                            Move sConnectionString                                         to SQLConnection.sConnectionString
43502>>>>>                            Case Break
43503>>>>>                        Case (sDriverID = MDSPgSQL)
43506>>>>>                            Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=") to SQLConnection.sServer
43507>>>>>                            Move (CS_SQLIniServerKeyword + "=" + SQLConnection.sServer)    to sConnectionString
43508>>>>>                            If (SQLConnection.bTrusted = True) Begin
43510>>>>>                                Move (sConnectionString + ";" + CS_SQLIniTrustedKeyword + "=" + CS_SQLIniConnectionYes) to sConnectionString
43511>>>>>                            End
43511>>>>>>
43511>>>>>                            Else Begin
43512>>>>>                                Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")    to sVal
43513>>>>>                                Move (sConnectionString + ";" + CS_SQLIniUIDKeyword + "=" + sVal) to sConnectionString
43514>>>>>                                Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")    to sVal
43515>>>>>                                Move (sConnectionString + ";" + CS_SQLIniPWDKeyword + "=" + sVal) to sConnectionString
43516>>>>>                            End
43516>>>>>>
43516>>>>>                            Move sConnectionString                                                to SQLConnection.sConnectionString
43517>>>>>                            Case Break
43518>>>>>
43518>>>>>                        Case (sDriverID = ORAFLEX)
43521>>>>>                            Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=")      to SQLConnection.sServer
43522>>>>>                            Move (CS_SQLIniServerKeyword + "=" + SQLConnection.sServer)         to sConnectionString
43523>>>>>                            Get ParseKeyWord sConnectionString (CS_SQLIniDatabaseKeyword + "=") to sDatabase
43524>>>>>                            If (sDatabase <> "" and (not(SQLConnection.sServer contains "/"))) Begin
43526>>>>>                                Move (SQLConnection.sServer + "/" + sDatabase)                  to SQLConnection.sServer
43527>>>>>                            End
43527>>>>>>
43527>>>>>                            If (SQLConnection.bTrusted = True) Begin
43529>>>>>                                Move (sConnectionString + ";" + CS_SQLIniTrustedKeyword + "=" + CS_SQLIniConnectionYes) to sConnectionString
43530>>>>>                            End
43530>>>>>>
43530>>>>>                            Else Begin
43531>>>>>                                Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")    to sVal
43532>>>>>                                Move (sConnectionString + ";" + CS_SQLIniUIDKeyword + "=" + sVal) to sConnectionString
43533>>>>>                                Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")    to sVal
43534>>>>>                                Move (sConnectionString + ";" + CS_SQLIniPWDKeyword + "=" + sVal) to sConnectionString
43535>>>>>                            End
43535>>>>>>
43535>>>>>                            Move sConnectionString                                         to SQLConnection.sConnectionString
43536>>>>>                            Case Break
43537>>>>>                        Case Else
43537>>>>>                            Error ("Wrong driver ID passed:" * sDriverID)
43538>>>>>>
43538>>>>>                            Case Break
43539>>>>>                    Case End
43539>>>>>                End
43539>>>>>>
43539>>>>>            Loop
43540>>>>>>
43540>>>>>            Send Destroy of hoCLI
43541>>>>>        End
43541>>>>>>
43541>>>>>
43541>>>>>        Function_Return SQLConnection
43542>>>>>    End_Function
43543>>>>>
43543>>>>>    Function DriverIndex String sDriverID Returns Integer
43545>>>>>        String  sCurrentDriver
43545>>>>>        Integer iNumberOfDrivers iDriver iCount
43545>>>>>
43545>>>>>        Move 0 to iDriver
43546>>>>>        Move 0 to iCount
43547>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
43550>>>>>        For iCount from 1 to iNumberOfDrivers
43556>>>>>>
43556>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
43559>>>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriverID) ) Begin
43561>>>>>                Function_Return iCount
43562>>>>>            End
43562>>>>>>
43562>>>>>        Loop
43563>>>>>>
43563>>>>>
43563>>>>>        // If driver not previously loaded; attempt to do so now.
43563>>>>>        If (iDriver = 0) Begin
43565>>>>>            Move 0 to LastErr
43566>>>>>            Load_Driver sDriverID
43567>>>>>            // If driver could not be loaded.
43567>>>>>            If (LastErr = DFERR_CANT_LOAD_DLL) Begin
43569>>>>>                Move -1 to iCount
43570>>>>>            End
43570>>>>>>
43570>>>>>        End
43570>>>>>>
43570>>>>>        Function_Return iCount
43571>>>>>    End_Function
43572>>>>>
43572>>>>>    // This will update connection settings of the cCLIHandler object with that passed struct values.
43572>>>>>    Procedure UpdateConnectionString tSQLConnection SQLConnection
43574>>>>>        String sDriverID sConnectionID sServer sDatabase sUserID sPassword
43574>>>>>        Boolean bTrusted bSilent
43574>>>>>        Integer iRetval
43574>>>>>
43574>>>>>        Move SQLConnection.sDriverID     to sDriverID
43575>>>>>        Move SQLConnection.sConnectionID to sConnectionID
43576>>>>>        Move SQLConnection.sServer       to sServer
43577>>>>>        Move SQLConnection.sDatabase     to sDatabase
43578>>>>>        Move SQLConnection.bTrusted      to bTrusted
43579>>>>>        Move SQLConnection.sUserID       to sUserID
43580>>>>>        Move SQLConnection.sPassword     to sPassword
43581>>>>>        Move SQLConnection.bSilentLogin  to bSilent
43582>>>>>
43582>>>>>        Send CreateSQLConnection sDriverID sConnectionID sServer sDatabase bTrusted sUserID sPassword bSilent False
43583>>>>>        // Note that this message will first delete the current ConnectionID if it exists; which is needed by the cCLIHandler logic.
43583>>>>>        Get AutoSetConnectionID to iRetval
43584>>>>>    End_Procedure
43585>>>>>
43585>>>>>    // Called when the object is constructed.
43585>>>>>    // It will check the psDriverID for a ConnectionID and save it
43585>>>>>    // as psConnectionID property. It is later used whenever a login to
43585>>>>>    // the database is needed.
43585>>>>>    Function AutoSetConnectionID Returns Boolean
43587>>>>>        String sConnectionID sDriverID sConnectionString
43587>>>>>        Integer iDriver iRetval
43587>>>>>        Handle hoCLI
43587>>>>>        Boolean bOK bSilent bMertechDriver
43587>>>>>
43587>>>>>        Get pbSilentLogin      to bSilent
43588>>>>>        Get psConnectionID     to sConnectionID
43589>>>>>        Get psConnectionString to sConnectionString
43590>>>>>        // Get the driver Connection ID string & set the psConnectionString property.
43590>>>>>        Get psDriverID to sDriverID
43591>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
43592>>>>>        If (bOK = False) Begin
43594>>>>>            Function_Return False
43595>>>>>        End
43595>>>>>>
43595>>>>>
43595>>>>>        // Mertech drivers can't use connection ID's.
43595>>>>>        Get IsMertechDriver sDriverID to bMertechDriver
43596>>>>>        If (bMertechDriver = True) Begin
43598>>>>>            // This ensures that the correct Server & Database attributes are set both for
43598>>>>>            // embedded SQL calls and "normal" database commands like e.g. "Open".
43598>>>>>            Get _MertechSQLManagerHandle to hoCLI
43599>>>>>            Function_Return (hoCLI <> 0)
43600>>>>>        End
43600>>>>>>
43600>>>>>
43600>>>>>        Get DriverIndex sDriverID          to iDriver
43601>>>>>        // If driver not loaded; load it.
43601>>>>>        If (iDriver = 0) Begin
43603>>>>>            Load_Driver sDriverID
43604>>>>>            Get DriverIndex sDriverID      to iDriver
43605>>>>>        End
43605>>>>>>
43605>>>>>        // This shouldn't be possible; unless the driver.dll file is missing or something...
43605>>>>>        If (iDriver = 0) Begin
43607>>>>>            Error DFERR_PROGRAM ("The database driver could not be loaded! Connection to database failed." * sDriverID)
43608>>>>>>
43608>>>>>            Function_Return False
43609>>>>>        End           
43609>>>>>>
43609>>>>>        Set_Attribute DF_DRIVER_LOGIN_ON_OPEN of iDriver to True
43612>>>>>        
43612>>>>>        Get Create (RefClass(cCLIHandler)) to hoCLI
43613>>>>>        Set psDriverID of hoCLI            to sDriverID
43614>>>>>        // Delete the connection first; in case it exists
43614>>>>>        Get DeleteConnectionID of hoCLI sConnectionID -1 to iRetval
43615>>>>>        Get CreateConnectionID of hoCLI sConnectionID sConnectionString bSilent to iRetval 
43616>>>>>        Send Destroy of hoCLI
43617>>>>>
43617>>>>>        Function_Return (iRetval = 0)
43618>>>>>    End_Function
43619>>>>>
43619>>>>>    // Returns the handle of the Mertech SQL handler.
43619>>>>>    // It also ensures that the correct Server & Database attributes are set both for
43619>>>>>    // embedded SQL calls and "normal" database commands like e.g. "Open".
43619>>>>>    // Note: This does _not_ return a proper CLI handler handle as it is not in this class.
43619>>>>>    //       So the return value is of no use! But we don't need the handle for this class.
43619>>>>>    Function _MertechSQLManagerHandle Returns Handle
43621>>>>>        Handle hoSQLHandler
43621>>>>>        String sDriverID sServer sDatabase
43621>>>>>
43621>>>>>        Move 0 to hoSQLHandler
43622>>>>>        Get psDriverID to sDriverID
43623>>>>>        Get psServer   to sServer
43624>>>>>        Get psDatabase to sDatabase
43625>>>>>
43625>>>>>        Function_Return hoSQLHandler
43626>>>>>    End_Function
43627>>>>>
43627>>>>>    Function _SqlCheckCurrentDriver String sDriverID Returns Boolean
43629>>>>>        Boolean bOK bMertechDriver
43629>>>>>
43629>>>>>        Get IsDAWSQLDriver sDriverID to bOK
43630>>>>>
43630>>>>>        If (bOK = False) Begin
43632>>>>>            Get IsMertechDriver sDriverID to bOK
43633>>>>>        End
43633>>>>>>
43633>>>>>
43633>>>>>        If (bOK = False) Begin
43635>>>>>            Get IsMertechDriver sDriverID to bMertechDriver
43636>>>>>            If (bMertechDriver = True) Begin
43638>>>>>                Error DFERR_PROGRAM "Driver needs to be one of MSSQLDRV_ID, DB2_DRV_ID, ODBC_DRV_ID, SQLFLEX, ORAFLEX, MDSPgSQL or MDSMYSQL"
43639>>>>>>
43639>>>>>            End
43639>>>>>>
43639>>>>>            Else Begin
43640>>>>>                Error DFERR_PROGRAM "Driver needs to be one of MSSQLDRV_ID, DB2_DRV_ID or ODBC_DRV_ID"
43641>>>>>>
43641>>>>>            End
43641>>>>>>
43641>>>>>            Function_Return False
43642>>>>>        End
43642>>>>>>
43642>>>>>
43642>>>>>        Function_Return True
43643>>>>>    End_Function
43644>>>>>
43644>>>>>    Function IsDAWSQLDriver String sDriverID Returns Boolean
43646>>>>>        Boolean bOK
43646>>>>>        Move (sDriverID = MSSQLDRV_ID or sDriverID = DB2_DRV_ID or sDriverID = ODBC_DRV_ID or sDriverID = DFBTRDRV_ID) to bOK
43647>>>>>        Function_Return bOK
43648>>>>>    End_Function
43649>>>>>
43649>>>>>    Function IsMertechDriver String sDriverID Returns Boolean
43651>>>>>        Boolean bOK
43651>>>>>        Move False to bOK
43652>>>>>//        #IFDEF DUF_Use_Mertech_Drivers
43652>>>>>            Move (sDriverID = SQLFLEX or sDriverID = ORAFLEX or sDriverID = MDSPgSQL or sDriverID = MDSMYSQL) to bOK
43653>>>>>//        #ENDIF
43653>>>>>        Function_Return bOK
43654>>>>>    End_Function
43655>>>>>
43655>>>>>    Function ConstructConnectionString String sDriverID String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
43657>>>>>        Handle hoIniFile
43657>>>>>        String sConnect
43657>>>>>
43657>>>>>        Get phoSQLConnectionIniFile to hoIniFile
43658>>>>>        Get ConstructConnectionString of hoIniFile sDriverID sServer sDatabase bTrusted sUserID sPassword to sConnect
43659>>>>>
43659>>>>>        Function_Return sConnect
43660>>>>>    End_Function
43661>>>>>
43661>>>>>    // Sample sConnString: "SERVER=(local)\SQLEXPRESS;UID=dbuser;PWD=secret;DATABASE=OrderEntry;, 0"
43661>>>>>    // Pass a complete driver connection string
43661>>>>>    // Returns the following as a struct:
43661>>>>>    //   sServer, sDatabase, sUser, sPassword & True if Trusted_Connection is used.
43661>>>>>    // Finally also returns a boolean TRUE if trusted_connection=yes, else false is returned.
43661>>>>>    //
43661>>>>>    Function DeComposeConnectionString String sDriverID String sConnectionString Returns tSQLConnection
43663>>>>>        tSQLConnection SQLConnection
43663>>>>>        tSQLConnection SQLConnection
43663>>>>>        String sValue sConnectionID sServer sDatabase sUserID sPassword
43663>>>>>        Boolean bTrusted bSilent bOK
43663>>>>>        Integer iPos
43663>>>>>
43663>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
43664>>>>>        If (bOK = False) Begin
43666>>>>>            Function_Return SQLConnection
43667>>>>>        End
43667>>>>>>
43667>>>>>
43667>>>>>        Move False to bTrusted
43668>>>>>        Move False to bSilent
43669>>>>>
43669>>>>>        Case Begin
43669>>>>>            Case (sDriverID = MSSQLDRV_ID)
43671>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniServerKeyword + "=")   to sServer
43672>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniDatabaseKeyword + "=") to sDatabase
43673>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniTrustedKeyword + "=")  to sValue
43674>>>>>                Move (If(Uppercase(sValue) = "YES", True, False))                   to bTrusted
43675>>>>>                If (bTrusted = False) Begin
43677>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")  to sUserID
43678>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")  to sPassword
43679>>>>>                End
43679>>>>>>
43679>>>>>                Case Break
43680>>>>>
43680>>>>>            Case (sDriverID = ODBC_DRV_ID)
43683>>>>>                If (uppercase(sConnectionString) contains ("." + CS_SQLIniDSNKeyword)) Begin
43685>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniFileDSNKeyword + "=")  to sServer
43686>>>>>                End
43686>>>>>>
43686>>>>>                Else Begin
43687>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=")      to sServer
43688>>>>>                End
43688>>>>>>
43688>>>>>
43688>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniTrustedKeyword + "=")  to sValue
43689>>>>>                Move (If(Uppercase(sValue) = "YES", True, False))                   to bTrusted
43690>>>>>                If (bTrusted = False) Begin
43692>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")  to sUserID
43693>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")  to sPassword
43694>>>>>                End
43694>>>>>>
43694>>>>>                Case Break
43695>>>>>
43695>>>>>            Case (sDriverID = DB2_DRV_ID)
43698>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=")      to sServer
43699>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")      to sUserID
43700>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")      to sPassword
43701>>>>>                Case Break
43702>>>>>
43702>>>>>            Case (sDriverID = SQLFLEX)
43705>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniServerKeyword + "=")   to sServer
43706>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniTrustedKeyword + "=")  to sValue
43707>>>>>                Move (If(Uppercase(sValue) = "YES", True, False))                   to bTrusted
43708>>>>>                If (bTrusted = False) Begin
43710>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")  to sUserID
43711>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")  to sPassword
43712>>>>>                End
43712>>>>>>
43712>>>>>                Case Break
43713>>>>>
43713>>>>>            Case (sDriverID = ORAFLEX)
43716>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=")      to sServer
43717>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniDatabaseKeyword + "=") to sDatabase
43718>>>>>                If (sDatabase <> "" and (not(sServer contains "/"))) Begin
43720>>>>>                    Move (sServer + "/" + sDatabase)                                to sServer
43721>>>>>                End
43721>>>>>>
43721>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")      to sUserID
43722>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")      to sPassword
43723>>>>>                Case Break
43724>>>>>
43724>>>>>            Case (sDriverID = MDSPgSQL)
43727>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=")      to sServer
43728>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniDatabaseKeyword + "=") to sDatabase
43729>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")      to sUserID
43730>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")      to sPassword
43731>>>>>                Case Break
43732>>>>>
43732>>>>>            Case (sDriverID = MDSMySQL)
43735>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=")      to sServer
43736>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniDatabaseKeyword + "=") to sDatabase
43737>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")      to sUserID
43738>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")      to sPassword
43739>>>>>                Case Break
43740>>>>>
43740>>>>>            Case (sDriverID = DATAFLEX_ID)    // Dummy stub.
43743>>>>>                Break
43744>>>>>        Case End
43744>>>>>
43744>>>>>        Get ParseKeyWord sConnectionString (Uppercase(CS_SQLConnectionIDText))  to sConnectionID
43745>>>>>
43745>>>>>        // bSilent?
43745>>>>>        Move (Pos(",0", sConnectionString))                                     to iPos
43746>>>>>        If (iPos = 0) Begin
43748>>>>>            Move (Pos(",1", sConnectionString))                                 to iPos
43749>>>>>        End
43749>>>>>>
43749>>>>>        If (iPos = 0) Begin
43751>>>>>            Move "0"                                                            to sValue
43752>>>>>        End
43752>>>>>>
43752>>>>>        Else Begin
43753>>>>>            Move (Mid(sConnectionString, 1, (iPos +1)))                         to sValue
43754>>>>>        End
43754>>>>>>
43754>>>>>        Move (If(sValue = 1, True, False))                                      to bSilent
43755>>>>>
43755>>>>>        Move (Trim(sDriverID))                                                  to SQLConnection.sDriverID
43756>>>>>        Move (Trim(sConnectionID))                                              to SQLConnection.sConnectionID
43757>>>>>        Move (Trim(sConnectionString))                                          to SQLConnection.sConnectionString
43758>>>>>        Move (Trim(sServer))                                                    to SQLConnection.sServer
43759>>>>>        Move (Trim(sDatabase))                                                  to SQLConnection.sDatabase
43760>>>>>        Move bTrusted                                                           to SQLConnection.bTrusted
43761>>>>>        Move (Trim(sUserID))                                                    to SQLConnection.sUserID
43762>>>>>        Move (Trim(sPassword))                                                  to SQLConnection.sPassword
43763>>>>>        Move bSilent                                                            to SQLConnection.bSilentLogin
43764>>>>>
43764>>>>>        Function_Return SQLConnection
43765>>>>>    End_Function
43766>>>>>
Including file: ParseKeyWord.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ParseKeyWord.pkg)
43766>>>>>>
43766>>>>>>Function ParseKeyWord String sConnect String sKeyWord Returns String
43768>>>>>>    Integer iStart iEnd
43768>>>>>>    String sRetval
43768>>>>>>
43768>>>>>>    Move (Trim(sConnect)) to sConnect
43769>>>>>>    Move (Pos(Uppercase(sKeyWord), Uppercase(sConnect)))  to iStart
43770>>>>>>    If (iStart = 0) Begin
43772>>>>>>        Function_Return ""
43773>>>>>>    End
43773>>>>>>>
43773>>>>>>    Move (Left(sConnect, (iStart -1 + Length(sKeyWord)))) to sRetval
43774>>>>>>    Move (Replace(sRetval, sConnect, "")) to sRetval
43775>>>>>>    If (sKeyWord = Uppercase(CS_SQLConnectionIDText)) Begin
43777>>>>>>        Move (Pos(",", sRetval))          to iEnd
43778>>>>>>    End
43778>>>>>>>
43778>>>>>>    Else Begin
43779>>>>>>        Move (Pos(";", sRetval))          to iEnd
43780>>>>>>    End
43780>>>>>>>
43780>>>>>>    If (iEnd = 0 and (sRetval contains ",")) Begin
43782>>>>>>        Move (Pos(",", sRetval))          to iEnd
43783>>>>>>        Decrement iEnd
43784>>>>>>    End
43784>>>>>>>
43784>>>>>>    If (iEnd <> 0) Begin
43786>>>>>>        Move (Left(sRetval, (iEnd -1)))   to sRetval
43787>>>>>>    End
43787>>>>>>>
43787>>>>>>    Move (Replace("=", sRetval, ""))      to sRetval
43788>>>>>>
43788>>>>>>    Function_Return (Trim(sRetval))
43789>>>>>>End_Function
43790>>>>>>
43790>>>>>>
43790>>>>>
43790>>>>>    // To update the SQLSettings.ini file with updated connection data (SQLConnection struct data).
43790>>>>>    Function SQLIniFileSetDefaultConnection String sConnectionID Returns Boolean
43792>>>>>        Handle ho
43792>>>>>        Integer iIndex
43792>>>>>        Boolean bRetval bOK
43792>>>>>        tSQLConnection SQLConnection
43792>>>>>        tSQLConnection SQLConnection
43792>>>>>
43792>>>>>        Get pSQLConnection to SQLConnection
43793>>>>>        Get phoSQLConnectionIniFile to ho
43794>>>>>        Get SQLIniFileConnectionIDIndex of ho sConnectionID to iIndex
43795>>>>>        If (iIndex = -1) Begin
43797>>>>>            Function_Return False
43798>>>>>        End
43798>>>>>>
43798>>>>>
43798>>>>>        Get SQLIniFileUpdateConnection of ho SQLConnection to bRetval
43799>>>>>        Send UpdateConnectionString SQLConnection
43800>>>>>        If (ghoConnection > 0) Begin
43802>>>>>            Get ConnectionIdIndex of ghoConnection SQLConnection.sConnectionID to iIndex
43803>>>>>            If (iIndex <> -1) Begin
43805>>>>>                Get RedirectConnectionId of ghoConnection SQLConnection.sConnectionID (SQLConnection.sServer + ";" + CS_SQLIniDatabaseKeyword + "=" + SQLConnection.sDatabase) SQLConnection.sUserID SQLConnection.sPassword SQLConnection.bTrusted True to bOK
43806>>>>>            End
43806>>>>>>
43806>>>>>        End
43806>>>>>>
43806>>>>>
43806>>>>>        Function_Return bRetval
43807>>>>>    End_Function
43808>>>>>
43808>>>>>End_Class
43809>>>Use vWin32fh.pkg
43809>>>Use Dfabout.pkg
Including file: DfAbout.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\DFAbout\DfAbout.pkg)
43809>>>>>Use LanguageText.pkg
43809>>>>>Use Windows.pkg
43809>>>>>Use Dfclient.pkg
Including file: Dfclient.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Dfclient.pkg)
43809>>>>>>>Use Windows.pkg
43809>>>>>>>Use DfPanel.pkg
43809>>>>>>>Use EnClient.pkg
Including file: Enclient.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Enclient.pkg)
43809>>>>>>>>>Use windows.pkg
43809>>>>>>>>>Use NESTING.pkg       //include DEO nesting standard support module
Including file: nesting.pkg    (C:\Program Files\DataFlex 20.1\Pkg\nesting.pkg)
43809>>>>>>>>>>>Use VDFBase.pkg
43809>>>>>>>>>>>
43809>>>>>>>>>>>Class nesting_mixin is a mixin
43810>>>>>>>>>>>    
43810>>>>>>>>>>>    //   Component_State indicates if this object has a parent object which is
43810>>>>>>>>>>>    //   also a data-entry object.
43810>>>>>>>>>>>    //
43810>>>>>>>>>>>    //   Has_Components_State indicates if this object has at least one child-
43810>>>>>>>>>>>    //   object which is also a data-entry object.
43810>>>>>>>>>>>    //
43810>>>>>>>>>>>    //   First_DEO and Last_DEO are used temporarily during the searches for
43810>>>>>>>>>>>    //   the first and last data-entry object children of this object (see
43810>>>>>>>>>>>    //   Find_First_DEO, Find_Last_DEO, Inquire_First_DEO and Inquire_Last_DEO).
43810>>>>>>>>>>>    //
43810>>>>>>>>>>>    Procedure define_nesting
43812>>>>>>>>>>>        Property Integer Component_State        0
43813>>>>>>>>>>>        Property Integer Has_Components_State   0
43814>>>>>>>>>>>        Property Integer First_DEO              0
43815>>>>>>>>>>>        Property Integer Last_DEO               0
43816>>>>>>>>>>>        
43816>>>>>>>>>>>        // Stop_ui support - Moved from its own mixin package.
43816>>>>>>>>>>>        Property Integer Stop_UI_State False
43817>>>>>>>>>>>        
43817>>>>>>>>>>>    End_Procedure
43818>>>>>>>>>>>    
43818>>>>>>>>>>>    
43818>>>>>>>>>>>    //   This procedure is used to locate the first data-entry object among
43818>>>>>>>>>>>    //   this object's siblings (its parent's children).
43818>>>>>>>>>>>    //
43818>>>>>>>>>>>    //   This procedure is typically invoked via the BROADCAST command from
43818>>>>>>>>>>>    //   the Find_First_DEO function of this object's parent.
43818>>>>>>>>>>>    //
43818>>>>>>>>>>>    Procedure inquire_first_DEO Integer obj# Integer recurseClients
43820>>>>>>>>>>>        If (focus_mode(Self) = FOCUSABLE) Begin
43822>>>>>>>>>>>            If (recurseClients and client_area_state(Self)) ;                Broadcast_Focus Send inquire_first_DEO obj# recurseClients
43826>>>>>>>>>>>            Else Begin
43827>>>>>>>>>>>                Set first_DEO of obj# to Self
43828>>>>>>>>>>>                Procedure_Return 1  //to stop broadcast, since this object answered
43829>>>>>>>>>>>            End
43829>>>>>>>>>>>>
43829>>>>>>>>>>>        End
43829>>>>>>>>>>>>
43829>>>>>>>>>>>    End_Procedure
43830>>>>>>>>>>>    
43830>>>>>>>>>>>    //   If this object is focusable, set Lastt_DEO to this object's id.
43830>>>>>>>>>>>    //
43830>>>>>>>>>>>    //   This procedure is used to locate the last data-entry object among
43830>>>>>>>>>>>    //   this object's siblings (its parent's children).
43830>>>>>>>>>>>    //
43830>>>>>>>>>>>    //   This procedure is typically invoked via the BROADCAST command from
43830>>>>>>>>>>>    //   the Find_Last_DEO function of this object's parent.
43830>>>>>>>>>>>    //
43830>>>>>>>>>>>    Procedure inquire_last_DEO Integer obj# Integer recurseClients
43832>>>>>>>>>>>        If (focus_mode(Self) = FOCUSABLE) Begin
43834>>>>>>>>>>>            If (recurseClients and client_area_state(Self)) ;                Broadcast_Focus Send inquire_last_DEO obj# recurseClients
43838>>>>>>>>>>>            Else ;                Set last_DEO of obj# to Self
43840>>>>>>>>>>>        End
43840>>>>>>>>>>>>
43840>>>>>>>>>>>    End_Procedure
43841>>>>>>>>>>>    
43841>>>>>>>>>>>    //   This function returns the object id of the first data-entry object
43841>>>>>>>>>>>    //   which is a child of this object, or 0.
43841>>>>>>>>>>>    //
43841>>>>>>>>>>>    //   This function 'searches' by broadcasting Inquire_First_DEO, which
43841>>>>>>>>>>>    //   returns a 1 to terminate the broadcast after the first data-entry
43841>>>>>>>>>>>    //   object has been located.
43841>>>>>>>>>>>    //
43841>>>>>>>>>>>    Function find_first_DEO Returns Integer
43843>>>>>>>>>>>        Set First_DEO to 0
43844>>>>>>>>>>>        Broadcast_Focus Send inquire_first_DEO Self False //sets First_DEO property
43846>>>>>>>>>>>        Function_Return (first_deo(Self))
43847>>>>>>>>>>>    End_Function
43848>>>>>>>>>>>    
43848>>>>>>>>>>>    
43848>>>>>>>>>>>    //   This function returns the object id of the last data-entry object
43848>>>>>>>>>>>    //   which is a child of this object, or 0.
43848>>>>>>>>>>>    //
43848>>>>>>>>>>>    //   This function 'searches' by broadcasting Inquire_Last_DEO, which sets
43848>>>>>>>>>>>    //   the property Last_DEO.  Thus, the last object reached by the broadcast
43848>>>>>>>>>>>    //   is the last value to be set into Last_DEO.
43848>>>>>>>>>>>    //
43848>>>>>>>>>>>    Function find_last_DEO Returns Integer
43850>>>>>>>>>>>        Set Last_DEO to 0
43851>>>>>>>>>>>        Broadcast_Focus Send inquire_last_DEO Self False //sets Last_DEO property
43853>>>>>>>>>>>        Function_Return (Last_DEO(Self))
43854>>>>>>>>>>>    End_Function
43855>>>>>>>>>>>    
43855>>>>>>>>>>>    //   Removes this object from the screen and focus-tree, and also removes
43855>>>>>>>>>>>    //   this object's children from the screen and focus-tree.
43855>>>>>>>>>>>    //
43855>>>>>>>>>>>    //   If no flag argument was passed, AREA_TYPE becomes the flag parameter.
43855>>>>>>>>>>>    //
43855>>>>>>>>>>>    //   Client-objects already automatically remove their children from the
43855>>>>>>>>>>>    //   focus-tree.
43855>>>>>>>>>>>    //
43855>>>>>>>>>>>    Procedure Deactivate Integer eDeactivateScope Returns Integer
43857>>>>>>>>>>>        Integer retval Fg
43857>>>>>>>>>>>        If (num_arguments > 0) ;            Move eDeactivateScope to Fg
43860>>>>>>>>>>>        Else ;            Move AREA_TYPE to Fg
43862>>>>>>>>>>>        Forward Get msg_deactivate fg to retval
43864>>>>>>>>>>>        
43864>>>>>>>>>>>        If ( not(retval) and (fg = 0) ) Begin
43866>>>>>>>>>>>            
43866>>>>>>>>>>>            // This broadcast no_stop is probably not ever used, but would be if a
43866>>>>>>>>>>>            // child was in the focus tree, but not as a focus-child. weird, but needs be here.
43866>>>>>>>>>>>            If ( client_Area_state(Self)=0) ;                Broadcast NO_STOP Send deactivate 0
43871>>>>>>>>>>>            
43871>>>>>>>>>>>            If ( Stop_UI_State(Self) ) ;                Send Stop_Ui
43874>>>>>>>>>>>        End
43874>>>>>>>>>>>>
43874>>>>>>>>>>>        Procedure_Return retval
43875>>>>>>>>>>>    End_Procedure
43876>>>>>>>>>>>    
43876>>>>>>>>>>>    //   This procedure marks an object as a child data-entry object, and
43876>>>>>>>>>>>    //   attempts to use its parent's Server if this object has no Server.
43876>>>>>>>>>>>    //   Typically sent via broadcast from parent DEO.
43876>>>>>>>>>>>    //
43876>>>>>>>>>>>    Procedure Mark_As_Component
43878>>>>>>>>>>>        Set Component_State to True
43879>>>>>>>>>>>        Delegate Set Has_Components_State to True
43881>>>>>>>>>>>    End_Procedure
43882>>>>>>>>>>>    
43882>>>>>>>>>>>    
43882>>>>>>>>>>>    //   This procedure marks child data-entry objects as components.
43882>>>>>>>>>>>    //
43882>>>>>>>>>>>    //   The child data-entry objects must understand Mark_As_Component as a
43882>>>>>>>>>>>    //   method of setting their Component_State to TRUE.
43882>>>>>>>>>>>    Procedure Mark_Components
43884>>>>>>>>>>>        Set Component_State to False
43885>>>>>>>>>>>        Broadcast Send Mark_As_Component
43887>>>>>>>>>>>    End_Procedure
43888>>>>>>>>>>>End_Class
43889>>>>>>>>>>>
43889>>>>>>>>>Use NAVIGATE.pkg      //include DEO navigation standard support module
Including file: navigate.pkg    (C:\Program Files\DataFlex 20.1\Pkg\navigate.pkg)
43889>>>>>>>>>>>
43889>>>>>>>>>>>
43889>>>>>>>>>>>
43889>>>>>>>>>>>Use VDFBase.pkg
43889>>>>>>>>>>>
43889>>>>>>>>>>>
43889>>>>>>>>>>>Register_Function verify_data_loss Returns Integer
43889>>>>>>>>>>>
43889>>>>>>>>>>>Class navigate_mixin is a mixin
43890>>>>>>>>>>>    
43890>>>>>>>>>>>    Procedure define_navigation
43892>>>>>>>>>>>        On_Key kBegin_of_Panel    Send Beginning_of_Panel PRIVATE
43893>>>>>>>>>>>        On_Key kCancel            Send Request_Cancel     PRIVATE
43894>>>>>>>>>>>        On_Key kEnd_of_Panel      Send End_of_Panel       PRIVATE
43895>>>>>>>>>>>        On_Key kExit_Function     Send Exit_Function      PRIVATE
43896>>>>>>>>>>>        On_Key kSwitch            Send Switch             PRIVATE
43897>>>>>>>>>>>        On_Key kSwitch_Back       Send Switch_Back        PRIVATE
43898>>>>>>>>>>>        Property Integer Auto_Top_Panel_State             True
43899>>>>>>>>>>>        Property Integer private.Verify_Exit_Msg          0
43900>>>>>>>>>>>    End_Procedure
43901>>>>>>>>>>>    
43901>>>>>>>>>>>    Function Verify_Exit_msg Returns Integer
43903>>>>>>>>>>>        Integer msg#
43903>>>>>>>>>>>        Get private.verify_exit_msg to msg#
43904>>>>>>>>>>>        If (msg# = 0 and Component_State(Self)) ;            Delegate Get verify_exit_msg to msg#
43908>>>>>>>>>>>        Function_Return msg#
43909>>>>>>>>>>>    End_Function
43910>>>>>>>>>>>    
43910>>>>>>>>>>>    
43910>>>>>>>>>>>    Procedure Set Verify_Exit_msg Integer msg#
43912>>>>>>>>>>>        Set private.verify_Exit_Msg to msg#
43913>>>>>>>>>>>    End_Procedure
43914>>>>>>>>>>>    
43914>>>>>>>>>>>    
43914>>>>>>>>>>>    Function Verify_Exit Returns Integer
43916>>>>>>>>>>>        Integer msg#
43916>>>>>>>>>>>        Get verify_Exit_msg to msg#
43917>>>>>>>>>>>        If (msg# <> 0) ;            Get msg# to msg#
43920>>>>>>>>>>>        Function_Return msg#
43921>>>>>>>>>>>    End_Function
43922>>>>>>>>>>>    
43922>>>>>>>>>>>    
43922>>>>>>>>>>>    
43922>>>>>>>>>>>    
43922>>>>>>>>>>>    //   The deactivate message-send passes AREA_FLAG, which means that we want
43922>>>>>>>>>>>    //   to deactivate the object in the focus tree which is either a scope
43922>>>>>>>>>>>    //   (i.e. Scope_State = TRUE) or a pop-up (i.e. PopUp_State = TRUE), and
43922>>>>>>>>>>>    //   which is closest to this object in an 'upward' direction (i.e.
43922>>>>>>>>>>>    //   client/parent, not child or sibling).
43922>>>>>>>>>>>    //
43922>>>>>>>>>>>    Procedure Request_Cancel
43924>>>>>>>>>>>        Integer foc#
43924>>>>>>>>>>>        If (verify_exit(Self) = 0) Begin
43926>>>>>>>>>>>            Send deactivate AREA_FLAG
43927>>>>>>>>>>>            Get focus of desktop to foc#
43928>>>>>>>>>>>            If (foc# and skip_State(foc#)) ;                Send switch to foc#
43931>>>>>>>>>>>        End
43931>>>>>>>>>>>>
43931>>>>>>>>>>>    End_Procedure
43932>>>>>>>>>>>    
43932>>>>>>>>>>>    
43932>>>>>>>>>>>    
43932>>>>>>>>>>>    Procedure Exit_Function
43934>>>>>>>>>>>        Send request_cancel
43935>>>>>>>>>>>    End_Procedure
43936>>>>>>>>>>>    
43936>>>>>>>>>>>End_Class
43937>>>>>>>>>>>
43937>>>>>>>>>>>
43937>>>>>>>>>>>
43937>>>>>>>>>Use SERVER.pkg        //include Server support module
Including file: Server.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Server.pkg)
43937>>>>>>>>>>>
43937>>>>>>>>>>>Use VDFBase.pkg
43937>>>>>>>>>>>Use brdcster.pkg
Including file: brdcster.pkg    (C:\Program Files\DataFlex 20.1\Pkg\brdcster.pkg)
43937>>>>>>>>>>>>>Use Set.pkg
43937>>>>>>>>>>>>>
43937>>>>>>>>>>>>>//   This class is defined as a subclass of Set with a C language handler
43937>>>>>>>>>>>>>//   providing additional behavior.
43937>>>>>>>>>>>>>//
43937>>>>>>>>>>>>>Class Broadcaster is a Set 0 0 Broadcast_Handler
43938>>>>>>>>>>>>>End_Class
43939>>>>>>>>>>>>>
43939>>>>>>>>>>>>>
43939>>>>>>>>>>>>>Function make_broadcaster for cDesktop Returns Integer
43941>>>>>>>>>>>>>    Integer obj#
43941>>>>>>>>>>>>>    Object broadcasterTemplate is a broadcaster
43943>>>>>>>>>>>>>        Move Self to obj#
43944>>>>>>>>>>>>>    End_Object
43945>>>>>>>>>>>>>    Function_Return obj#
43946>>>>>>>>>>>>>End_Function
43947>>>>>>>>>>>>>
43947>>>>>>>>>>>>>
43947>>>>>>>>>>>
43947>>>>>>>>>>>Register_Procedure Item_Find Integer mode Integer datafile Integer datafield ;    Integer entUpdtFlag Integer errFlag Integer dfrdFlag
43947>>>>>>>>>>>Register_Procedure Add_User_Interface Integer obj#
43947>>>>>>>>>>>Register_Procedure Remove_User_Interface Integer obj#
43947>>>>>>>>>>>Register_Procedure Clear
43947>>>>>>>>>>>Register_Function  Component_State Returns Integer
43947>>>>>>>>>>>Register_Function  Can_Delete Returns Integer
43947>>>>>>>>>>>Register_Object Element
43947>>>>>>>>>>>
43947>>>>>>>>>>>// Values for DSO_Detach_Mode
43947>>>>>>>>>>>//   DETACH_NEVER        = Never
43947>>>>>>>>>>>//   DETACH_IF_ALLOWED   = do if changed_state=F and DEO Static_Server
43947>>>>>>>>>>>//   DETACH_IF_NO_CHANGE = do if changed_state=F
43947>>>>>>>>>>>//   DETACH_ALWAYS       = do it no matter what
43947>>>>>>>>>>>
43947>>>>>>>>>>>Enumeration_List
43947>>>>>>>>>>>    Define Detach_Never
43947>>>>>>>>>>>    Define Detach_If_No_Change
43947>>>>>>>>>>>    Define Detach_Always
43947>>>>>>>>>>>    Define Detach_If_Allowed
43947>>>>>>>>>>>End_Enumeration_List
43947>>>>>>>>>>>
43947>>>>>>>>>>>
43947>>>>>>>>>>>Class server_mixin is a mixin
43948>>>>>>>>>>>    
43948>>>>>>>>>>>    //   Server is the object id of the database agent for this object.
43948>>>>>>>>>>>    //
43948>>>>>>>>>>>    //   Watched_Servers is a set of object ids for database agents whose state
43948>>>>>>>>>>>    //   must also be monitored by this object (but which never receive requests
43948>>>>>>>>>>>    //   directly from this object, unlike the Server).
43948>>>>>>>>>>>    //
43948>>>>>>>>>>>    //   Servers_Scanned determines if the items of this object have been
43948>>>>>>>>>>>    //   scanned to see if this object should be connected to other database
43948>>>>>>>>>>>    //   agents as 'just watching' (see Watched_Servers, above).
43948>>>>>>>>>>>    //
43948>>>>>>>>>>>    //   Auto_Fill_State determines if this object should always automatically
43948>>>>>>>>>>>    //   fill itself with data when it is activated.
43948>>>>>>>>>>>    //
43948>>>>>>>>>>>    //   Deferred_State determines if this object's browsing in database files
43948>>>>>>>>>>>    //   should be reflected immediately in this object's database agent (and
43948>>>>>>>>>>>    //   the agents' agents, etc.), or not.
43948>>>>>>>>>>>    //
43948>>>>>>>>>>>    //
43948>>>>>>>>>>>    Procedure define_server
43950>>>>>>>>>>>        Integer obj#
43950>>>>>>>>>>>        Property Integer private.Server           0
43951>>>>>>>>>>>        Property Integer Watched_Servers          0
43952>>>>>>>>>>>        // used to send Set Changed_State to "foreign" servers, while Watched_Servers
43952>>>>>>>>>>>        // is used for sending messages from the DDO to DEOs (there are more of them)
43952>>>>>>>>>>>        Property Integer ChangedStateWatched_Servers     0
43953>>>>>>>>>>>        Property Integer private.Servers_Scanned  0
43954>>>>>>>>>>>        
43954>>>>>>>>>>>        Property Integer Auto_Fill_State False
43955>>>>>>>>>>>        Property Integer Deferred_State  False
43956>>>>>>>>>>>        
43956>>>>>>>>>>>        // added to support DEO request-delegation. This is set true
43956>>>>>>>>>>>        // if the server is explicitly set in this DEO (normally via a
43956>>>>>>>>>>>        // USING parameter).
43956>>>>>>>>>>>        Property Integer explicit_server_state False
43957>>>>>>>>>>>        
43957>>>>>>>>>>>        // Since this package's SET changed_state is using change_
43957>>>>>>>>>>>        // disabled_state we might as well define it here. This gets changed
43957>>>>>>>>>>>        // by Clear_mx to support setting of defaults without changing the
43957>>>>>>>>>>>        // objects changed_state.
43957>>>>>>>>>>>        
43957>>>>>>>>>>>        // This stops changed_state from getting changed. It allows item_changed_
43957>>>>>>>>>>>        // state to chagne without the object's changed_state getting changed.
43957>>>>>>>>>>>        // This should be considered protected (i.e., likely to change). The new
43957>>>>>>>>>>>        // messages Entry_Defaults and Set Default_Value are both public and use
43957>>>>>>>>>>>        // this. Try to use these messages instead of this property.
43957>>>>>>>>>>>        Property Integer Change_Disabled_State  False
43958>>>>>>>>>>>        
43958>>>>>>>>>>>        // If true DEO will not disconnect from server when deactivating.
43958>>>>>>>>>>>        // If true View should handles attaching and detaching.
43958>>>>>>>>>>>        Register_Function Default_static_server_state Returns Integer
43958>>>>>>>>>>>        Property Integer Static_Server_State  (Default_Static_Server_State(Self))
43959>>>>>>>>>>>        
43959>>>>>>>>>>>        // Properties to better support tables. If Refresh_dirty_state
43959>>>>>>>>>>>        // is true then the list object needs refreshing (because it was inactive
43959>>>>>>>>>>>        // and changes were made that were not updated). After add_focus is
43959>>>>>>>>>>>        // complete the add_focus_msg is sent (allows tables to initialize the
43959>>>>>>>>>>>        // list).
43959>>>>>>>>>>>        Property Integer Refresh_dirty_state  True // when not active/dirty
43960>>>>>>>>>>>        Property Integer Add_focus_msg        0    // by dflt no message
43961>>>>>>>>>>>        
43961>>>>>>>>>>>        // This will call a stub procedure which will be augmented (or replaced)
43961>>>>>>>>>>>        // by the xdeo mixins
43961>>>>>>>>>>>        Send Define_Extended_DEO_Mixin
43962>>>>>>>>>>>        
43962>>>>>>>>>>>    End_Procedure
43963>>>>>>>>>>>    
43963>>>>>>>>>>>    
43963>>>>>>>>>>>    Procedure remove_deo_from_server
43965>>>>>>>>>>>        Integer obj# isclient wsrvr
43965>>>>>>>>>>>        Get Server to obj#
43966>>>>>>>>>>>        // as of 17.0, containers will be added as a DEO so it receives the Refresh message
43966>>>>>>>>>>>        If (obj# <> 0) ;            Send remove_user_interface to obj# Self
43969>>>>>>>>>>>        Get Watched_Servers to wsrvr
43970>>>>>>>>>>>        If wsrvr ;            Send remove_user_interface to wsrvr Self True // TRUE for watchers
43973>>>>>>>>>>>        Set Refresh_dirty_state to True
43974>>>>>>>>>>>    End_Procedure
43975>>>>>>>>>>>    
43975>>>>>>>>>>>    
43975>>>>>>>>>>>    //   This function returns the object id of the database server which
43975>>>>>>>>>>>    //   encloses this object, if any.  Note that only the Data_Set class
43975>>>>>>>>>>>    //   defines this function to return anything other than 0.
43975>>>>>>>>>>>    //
43975>>>>>>>>>>>    //   This function is used with delegation to locate the Data_Set
43975>>>>>>>>>>>    //   which is the closest parent of this object.
43975>>>>>>>>>>>    //
43975>>>>>>>>>>>    Function Find_Server Returns Integer
43977>>>>>>>>>>>    End_Function
43978>>>>>>>>>>>    
43978>>>>>>>>>>>    Register_Function Server Returns Integer
43978>>>>>>>>>>>    
43978>>>>>>>>>>>    
43978>>>>>>>>>>>    //   This function returns the object id of the database agent of this object,
43978>>>>>>>>>>>    //   or 0.
43978>>>>>>>>>>>    Function Locate_Server Returns Integer
43980>>>>>>>>>>>        Function_Return (Server(Self))
43981>>>>>>>>>>>    End_Function
43982>>>>>>>>>>>    
43982>>>>>>>>>>>    
43982>>>>>>>>>>>    //   This function returns the object id of the database agent of this
43982>>>>>>>>>>>    //   object, or 0.
43982>>>>>>>>>>>    //   If this object's Server is 0, this object's parent's Server is
43982>>>>>>>>>>>    //   returned, if any.
43982>>>>>>>>>>>    //
43982>>>>>>>>>>>    // Notes
43982>>>>>>>>>>>    //
43982>>>>>>>>>>>    //   This function is used to allow nested data-entry objects to use the
43982>>>>>>>>>>>    //   database agent defined by their parent object.
43982>>>>>>>>>>>    //
43982>>>>>>>>>>>    Function Server Returns Integer
43984>>>>>>>>>>>        Integer obj#
43984>>>>>>>>>>>        Get private.Server to obj#
43985>>>>>>>>>>>        If (obj# = 0 and Component_State(Self)) ;            Function_Return (Locate_Server(parent(Self)))
43988>>>>>>>>>>>        Function_Return obj#
43989>>>>>>>>>>>    End_Function
43990>>>>>>>>>>>    
43990>>>>>>>>>>>    
43990>>>>>>>>>>>    //   This procedure sets the value of the Server property of this object,
43990>>>>>>>>>>>    //   notifying child-objects of the change, and destroying and creating
43990>>>>>>>>>>>    //   connections with database agents, as required.
43990>>>>>>>>>>>    //
43990>>>>>>>>>>>    //   If the Server of this object is changed while this object is inactive,
43990>>>>>>>>>>>    //   no notification of child-objects is required or performed.
43990>>>>>>>>>>>    Procedure Set Server Integer newVal
43992>>>>>>>>>>>        Integer oldVal
43992>>>>>>>>>>>        Set explicit_server_state to (newVal <> 0)
43993>>>>>>>>>>>        Get Server to oldVal
43994>>>>>>>>>>>        If (newVal <> 0) ;            Set private.Server to (object_id(newVal))
43997>>>>>>>>>>>        Else ;            Set private.Server to newVal
43999>>>>>>>>>>>        If (active_state(Self)) Begin
44001>>>>>>>>>>>            Broadcast Send server_changed oldVal newVal
44003>>>>>>>>>>>            If (oldVal <> 0) ;                Send remove_deo_from_server  //detach from current server
44006>>>>>>>>>>>            If (newval <> 0) ;                Send attach_deo_to_server    //attach to new server
44009>>>>>>>>>>>        End
44009>>>>>>>>>>>>
44009>>>>>>>>>>>    End_Procedure
44010>>>>>>>>>>>    
44010>>>>>>>>>>>    //   This procedure servers as notification of a change in the connection
44010>>>>>>>>>>>    //   of this object's parent to its database agent.  If this object uses
44010>>>>>>>>>>>    //   its parent's database agent by default (see the Server and Find_Server
44010>>>>>>>>>>>    //   functions, above), it must disconnect from the old agent and connect
44010>>>>>>>>>>>    //   with the new agent.
44010>>>>>>>>>>>    Procedure server_changed Integer oldVal Integer newVal
44012>>>>>>>>>>>        Integer oldSrvr
44012>>>>>>>>>>>        // as of 17.0, containers will be added as a DEO so it receives the Refresh message
44012>>>>>>>>>>>        Get private.Server to oldSrvr
44013>>>>>>>>>>>        If (oldSrvr = 0) Begin  //assumes Server(self) = oldVal by deleg
44015>>>>>>>>>>>            If (oldVal <> 0) ;                Send remove_user_interface to oldVal Self
44018>>>>>>>>>>>            If (newVal <> 0) ;                Send add_user_interface to newVal Self
44021>>>>>>>>>>>        End
44021>>>>>>>>>>>>
44021>>>>>>>>>>>    End_Procedure
44022>>>>>>>>>>>    
44022>>>>>>>>>>>    
44022>>>>>>>>>>>    //   This procedure empties the Watched_Servers broadcaster, after
44022>>>>>>>>>>>    //   detaching this object from all of the broadcaster's elements.
44022>>>>>>>>>>>    //   This procedure is invoked by Find_Servers_to_Watch, in preparation
44022>>>>>>>>>>>    //   for a scan. Deletes both sets of watched servers
44022>>>>>>>>>>>    //
44022>>>>>>>>>>>    Procedure delete_watched_servers
44024>>>>>>>>>>>        Integer vis#
44024>>>>>>>>>>>        
44024>>>>>>>>>>>        Get watched_servers to vis#
44025>>>>>>>>>>>        If vis# Begin
44027>>>>>>>>>>>            Send Remove_User_Interface to vis# Self True //detach from all, TRUE for watchers
44028>>>>>>>>>>>            Set broadcast_state of vis# to False
44029>>>>>>>>>>>            Send delete_Data to vis#                    //empty it
44030>>>>>>>>>>>            Set broadcast_state of vis# to True
44031>>>>>>>>>>>        End
44031>>>>>>>>>>>>
44031>>>>>>>>>>>        
44031>>>>>>>>>>>        Get ChangedStateWatched_Servers to vis#
44032>>>>>>>>>>>        If vis# Begin
44034>>>>>>>>>>>            Set broadcast_state of vis# to False
44035>>>>>>>>>>>            Send delete_Data to vis#                    //empty it
44036>>>>>>>>>>>            Set broadcast_state of vis# to True
44037>>>>>>>>>>>        End
44037>>>>>>>>>>>>
44037>>>>>>>>>>>    End_Procedure
44038>>>>>>>>>>>    
44038>>>>>>>>>>>    //   This procedure adds the specified object id (obj#) to this object's
44038>>>>>>>>>>>    //   set of database agents who are merely 'watched', and establishes a
44038>>>>>>>>>>>    //   connection between the database agent and this object.
44038>>>>>>>>>>>    Procedure add_watched_server Integer obj#
44040>>>>>>>>>>>        Integer vis# ndx
44040>>>>>>>>>>>        Get watched_servers to vis#
44041>>>>>>>>>>>        // if w server does not exist, first create it
44041>>>>>>>>>>>        If (Vis# = 0) Begin
44043>>>>>>>>>>>            Get Create of Desktop U_Broadcaster to Vis#
44044>>>>>>>>>>>            Set Watched_Servers to Vis#
44045>>>>>>>>>>>        End
44045>>>>>>>>>>>>
44045>>>>>>>>>>>        //
44045>>>>>>>>>>>        Set broadcast_state of vis# to False
44046>>>>>>>>>>>        Get find_element of vis# obj# to ndx
44047>>>>>>>>>>>        If (ndx < 0) ;            Send add_element to vis# obj#
44050>>>>>>>>>>>        Set broadcast_state of vis# to True
44051>>>>>>>>>>>        If (ndx lt 0 and active_State(Self)) ;            Send add_user_interface to obj# Self True // TRUE for watchers
44054>>>>>>>>>>>    End_Procedure
44055>>>>>>>>>>>    
44055>>>>>>>>>>>    Procedure add_ChangedStateWatched_Servers Integer obj#
44057>>>>>>>>>>>        Integer vis# ndx
44057>>>>>>>>>>>        Get ChangedStateWatched_Servers to vis#
44058>>>>>>>>>>>        If (Vis# = 0) Begin
44060>>>>>>>>>>>            Get Create of Desktop U_Broadcaster to Vis#
44061>>>>>>>>>>>            Set ChangedStateWatched_Servers to Vis#
44062>>>>>>>>>>>        End
44062>>>>>>>>>>>>
44062>>>>>>>>>>>        //
44062>>>>>>>>>>>        Set broadcast_state of vis# to False
44063>>>>>>>>>>>        Get find_element of vis# obj# to ndx
44064>>>>>>>>>>>        If (ndx < 0) ;            Send add_element to vis# obj#
44067>>>>>>>>>>>        Set broadcast_state of vis# to True
44068>>>>>>>>>>>    End_Procedure
44069>>>>>>>>>>>    
44069>>>>>>>>>>>    
44069>>>>>>>>>>>    //   This procedure removes the specified object id (obj#) from this object's
44069>>>>>>>>>>>    //   set of database agents who are merely 'watched', and destroys the
44069>>>>>>>>>>>    //   connection between the database agent and this object.
44069>>>>>>>>>>>    Procedure remove_watched_server Integer obj#
44071>>>>>>>>>>>        Integer vis# ndx
44071>>>>>>>>>>>        Get watched_servers to vis#
44072>>>>>>>>>>>        // Only if w server exists
44072>>>>>>>>>>>        If vis# Begin
44074>>>>>>>>>>>            Set broadcast_state of vis# to False
44075>>>>>>>>>>>            Get find_element of vis# obj# to ndx
44076>>>>>>>>>>>            If (ndx >= 0) ;                Send remove_element to vis# obj#
44079>>>>>>>>>>>            Set broadcast_state of vis# to True
44080>>>>>>>>>>>            If (ndx >= 0 and active_State(Self)) ;                Send remove_user_interface to obj# Self True // TRUE for watchers
44083>>>>>>>>>>>        End
44083>>>>>>>>>>>>
44083>>>>>>>>>>>    End_Procedure
44084>>>>>>>>>>>    
44084>>>>>>>>>>>    //   This procedure causes the scanning of this object's items' fields,
44084>>>>>>>>>>>    //   and the production of a set of database agents who should be 'watched'.
44084>>>>>>>>>>>    //   This procedure depends completely upon Find_Servers_To_Watch, below.
44084>>>>>>>>>>>    //
44084>>>>>>>>>>>    Procedure Scan_Servers
44086>>>>>>>>>>>        Send find_servers_to_watch False
44087>>>>>>>>>>>    End_Procedure
44088>>>>>>>>>>>    
44088>>>>>>>>>>>    //   This procedure scans the fields of this object's items to determine
44088>>>>>>>>>>>    //   what other database agents (data_sets) other than this object's Server
44088>>>>>>>>>>>    //   should be 'watched' (for data changes).
44088>>>>>>>>>>>    //   This procedure is invoked once per object, the first time the object
44088>>>>>>>>>>>    //   is activated.  If the data_file, data_field, and/or main_file of this
44088>>>>>>>>>>>    //   object are changed (don't change them while this object is active!),
44088>>>>>>>>>>>    //   set Private.Servers_Scanned to FALSE to force this object to scan
44088>>>>>>>>>>>    //   again (when it is next activated).
44088>>>>>>>>>>>    //
44088>>>>>>>>>>>    
44088>>>>>>>>>>>    // 17.0: The logic has been retooled to add more watched servers to the DDOs. This is done so
44088>>>>>>>>>>>    // DD operations will send Refresh to these additional watched-servers. There are two changes:
44088>>>>>>>>>>>    // 1. Containers are now made watched servers for the Server and all parent servers
44088>>>>>>>>>>>    // 2. Non-file.field DEOs (e.g., expressions) are made watched servers for the server (which it
44088>>>>>>>>>>>    //    already did and for all parent servers. Without this, parent entry_item expressions were not
44088>>>>>>>>>>>    //    getting updated
44088>>>>>>>>>>>    // Here is how watched-servers works.
44088>>>>>>>>>>>    // Each DEO attaches and detaches from its Server by sending Add_User_interface and Remove_User_interface
44088>>>>>>>>>>>    // to the server DD. Once attached, the DD knows about this DEO and sends messages to it as needed (Refresh,
44088>>>>>>>>>>>    // Entry_Update, etc.). In addition, a DEO may need to attach a parent DDO so that changes in that parent DD
44088>>>>>>>>>>>    // results in those messages being sent. This is needed if the binding table in entry_item refers to a parent
44088>>>>>>>>>>>    // table. So we need to send Add_User_interface and Remove_User_interface to that parent server as well. If a DEO
44088>>>>>>>>>>>    // has multiple, there could be multiple parent servers. As of 17.0, we are also attaching to parent servers if
44088>>>>>>>>>>>    // we are unsure about how the DEO is being used. If an expression is used, it might need to be updated when
44088>>>>>>>>>>>    // a parent (or any ancestor) changes. Each DEO keeps track of servers that it attaches to and this is referred
44088>>>>>>>>>>>    // to as the watched_server list. This list is maintained so the DEO knows which DDOs to attach and detach to.
44088>>>>>>>>>>>    
44088>>>>>>>>>>>    
44088>>>>>>>>>>>    Procedure find_servers_to_watch Integer tableFlag
44090>>>>>>>>>>>        Integer i file# obj# maxitems count p srvr# self# srvrfile
44090>>>>>>>>>>>        String fileStr fStr
44090>>>>>>>>>>>        Boolean bContainer bDoAll
44090>>>>>>>>>>>        
44090>>>>>>>>>>>        Get Client_Area_State to bContainer
44091>>>>>>>>>>>        Set private.Servers_Scanned to True
44092>>>>>>>>>>>        
44092>>>>>>>>>>>        Get Server to srvr#
44093>>>>>>>>>>>        
44093>>>>>>>>>>>        If (srvr#=0) Begin
44095>>>>>>>>>>>            Procedure_Return
44096>>>>>>>>>>>        End
44096>>>>>>>>>>>>
44096>>>>>>>>>>>        
44096>>>>>>>>>>>        Send delete_watched_servers  //empty Watched_Servers broadcaster first
44097>>>>>>>>>>>        
44097>>>>>>>>>>>        Get main_file of srvr# to srvrfile  // data-set's main-file
44098>>>>>>>>>>>        
44098>>>>>>>>>>>        If bContainer Begin
44100>>>>>>>>>>>            // containers should get added to all parent DDOs
44100>>>>>>>>>>>            Send WatchAllParentServers srvr#
44101>>>>>>>>>>>            Procedure_Return
44102>>>>>>>>>>>        End
44102>>>>>>>>>>>>
44102>>>>>>>>>>>        
44102>>>>>>>>>>>        If (tableFlag <> 0) ;            Get Prototype_Object to self# // tables
44105>>>>>>>>>>>        Else ;            Move Self to self# // forms and text windows
44107>>>>>>>>>>>        
44107>>>>>>>>>>>        Get item_count of self# to maxitems
44108>>>>>>>>>>>        Decrement maxitems
44109>>>>>>>>>>>        
44109>>>>>>>>>>>        // if no items do nothing
44109>>>>>>>>>>>        // if one item do quick check
44109>>>>>>>>>>>        // if multiple items do it the hard way
44109>>>>>>>>>>>        
44109>>>>>>>>>>>        If (maxitems<0) Begin
44111>>>>>>>>>>>            // if no items, which is unusual, we don't know what this DEO is so we will treat it like a container
44111>>>>>>>>>>>            // and add it as a watched server for all DDOs
44111>>>>>>>>>>>            Send WatchAllParentServers srvr#
44112>>>>>>>>>>>            Procedure_Return  // no items
44113>>>>>>>>>>>        End
44113>>>>>>>>>>>>
44113>>>>>>>>>>>        
44113>>>>>>>>>>>        If (maxitems=0) Begin // only 1 item - skip most of the nonsense
44115>>>>>>>>>>>            Get data_file of self# 0 to file#
44116>>>>>>>>>>>            // we need watched server if file exists, it is not the main file
44116>>>>>>>>>>>            // and is not an updating file (as opposed to updating data-set).
44116>>>>>>>>>>>            If (file#>0 and file#<>srvrfile) Begin
44118>>>>>>>>>>>                Get which_data_set of srvr# file# to obj#
44119>>>>>>>>>>>                If (obj# <> 0 and obj# <> srvr#) Begin
44121>>>>>>>>>>>                    Send add_Watched_server obj#
44122>>>>>>>>>>>                    Send add_ChangedStateWatched_Servers obj#
44123>>>>>>>>>>>                End
44123>>>>>>>>>>>>
44123>>>>>>>>>>>            End
44123>>>>>>>>>>>>
44123>>>>>>>>>>>            Else If (file#=0) Begin
44126>>>>>>>>>>>                // if no file (e.g., expression) we don't know when it changes so we tell all servers
44126>>>>>>>>>>>                // that this is a watcher
44126>>>>>>>>>>>                Send WatchAllParentServers srvr#
44127>>>>>>>>>>>            End
44127>>>>>>>>>>>>
44127>>>>>>>>>>>            If File# ;                Send Copy_Item_Options Srvr# file# (Data_Field(Self#,0)) Self# 0
44130>>>>>>>>>>>        End
44130>>>>>>>>>>>>
44130>>>>>>>>>>>        Else Begin  // multiple items - do what you must
44131>>>>>>>>>>>            Move -1 to count
44132>>>>>>>>>>>            Move "," to fileStr
44133>>>>>>>>>>>            If tableFlag Begin
44135>>>>>>>>>>>                Get main_file to file#
44136>>>>>>>>>>>                If (file# <> srvrfile) Begin    // only do this if mainfile is not the srvr file
44138>>>>>>>>>>>                    Append fileStr file# ","   //insert mainfile to be sure it's watched
44140>>>>>>>>>>>                    Increment count
44141>>>>>>>>>>>                End
44141>>>>>>>>>>>>
44141>>>>>>>>>>>            End
44141>>>>>>>>>>>>
44141>>>>>>>>>>>            For i from 0 to maxitems
44147>>>>>>>>>>>>
44147>>>>>>>>>>>                Get data_file of self# i to file#
44148>>>>>>>>>>>                If (file#=0) Begin
44150>>>>>>>>>>>                    // as soon as we don't know what the item is used for we will have
44150>>>>>>>>>>>                    // to attach to all parent DDOs.
44150>>>>>>>>>>>                    Move True to bDoAll
44151>>>>>>>>>>>                End
44151>>>>>>>>>>>>
44151>>>>>>>>>>>                If (file# > 0 and file#<>srvrfile and ;                    not(fileStr contains (","+String(file#)+",")) ) Begin
44153>>>>>>>>>>>                    Move (fileStr+String(file#) + ",") to fileStr
44154>>>>>>>>>>>                    Increment count
44155>>>>>>>>>>>                End
44155>>>>>>>>>>>>
44155>>>>>>>>>>>                If File# ;                    Send Copy_Item_Options Srvr# file# (Data_Field(Self#,i)) Self# i
44158>>>>>>>>>>>            Loop
44159>>>>>>>>>>>>
44159>>>>>>>>>>>            
44159>>>>>>>>>>>            // if an item's binding table is unknown, we watch all parent DDOs.
44159>>>>>>>>>>>            If bDoAll Begin
44161>>>>>>>>>>>                Send WatchAllParentServers srvr#
44162>>>>>>>>>>>            End
44162>>>>>>>>>>>>
44162>>>>>>>>>>>            Else Begin
44163>>>>>>>>>>>                If (count >= 0) Begin // any watched items?
44165>>>>>>>>>>>                    Move (Right(fileStr, length(fileStr) - 1))  to fileStr  //remove leading comma
44166>>>>>>>>>>>                    For i from 0 to count
44172>>>>>>>>>>>>
44172>>>>>>>>>>>                        Move (Pos( "," ,fileStr)) to p
44173>>>>>>>>>>>                        If (p > 1) Begin
44175>>>>>>>>>>>                            Move (Left( fileStr , p-1)) to fStr
44176>>>>>>>>>>>                            Move (Right( fileStr, length(fileStr) - p)) to fileStr
44177>>>>>>>>>>>                            Move fStr to file#
44178>>>>>>>>>>>                            Get which_data_set of srvr# file# to obj#
44179>>>>>>>>>>>                            If (obj# <> 0 and obj# <> srvr#) Begin
44181>>>>>>>>>>>                                Send add_Watched_server obj#
44182>>>>>>>>>>>                                Send add_ChangedStateWatched_Servers obj#
44183>>>>>>>>>>>                            End
44183>>>>>>>>>>>>
44183>>>>>>>>>>>                        End
44183>>>>>>>>>>>>
44183>>>>>>>>>>>                    Loop
44184>>>>>>>>>>>>
44184>>>>>>>>>>>                End
44184>>>>>>>>>>>>
44184>>>>>>>>>>>            End
44184>>>>>>>>>>>>
44184>>>>>>>>>>>        End
44184>>>>>>>>>>>>
44184>>>>>>>>>>>    End_Procedure
44185>>>>>>>>>>>    
44185>>>>>>>>>>>    // This does nothing. Other sub-classes (or later mixins) should add
44185>>>>>>>>>>>    // logic to this.
44185>>>>>>>>>>>    Procedure Copy_Item_Options Integer iDSO Integer iFile Integer iField ;            Integer iDEO Integer iItem
44187>>>>>>>>>>>    End_Procedure
44188>>>>>>>>>>>    
44188>>>>>>>>>>>    // This does little. Other sub-classes (or later mixins) should add
44188>>>>>>>>>>>    // logic to this.
44188>>>>>>>>>>>    Procedure Define_Extended_DEO_Mixin
44190>>>>>>>>>>>    End_Procedure
44191>>>>>>>>>>>    
44191>>>>>>>>>>>    
44191>>>>>>>>>>>    // created for Nesting support
44191>>>>>>>>>>>    Procedure Mark_As_Component
44193>>>>>>>>>>>        Integer ser#
44193>>>>>>>>>>>        Set Component_State to True
44194>>>>>>>>>>>        Delegate Set Has_Components_State to True
44196>>>>>>>>>>>        Get private.Server to ser#
44197>>>>>>>>>>>        If (ser# = 0) Begin
44199>>>>>>>>>>>            Delegate Get Locate_Server to ser#
44201>>>>>>>>>>>            If (ser# <> 0) ;                Set private.Server to ser#
44204>>>>>>>>>>>        End
44204>>>>>>>>>>>>
44204>>>>>>>>>>>    End_Procedure
44205>>>>>>>>>>>    
44205>>>>>>>>>>>    // This only gets called when the developer is killing this object. During application
44205>>>>>>>>>>>    // shut-down, only destroy_object is called. This augmentation destroys the watched broadcaster
44205>>>>>>>>>>>    // (which is sitting on the desktop). During program shut down we don't care if this is called
44205>>>>>>>>>>>    // because it is getting destroyed anyway. We are making the assumption that a developer controlled
44205>>>>>>>>>>>    // destroy will always be called with the watcher still existing.
44205>>>>>>>>>>>    
44205>>>>>>>>>>>    Procedure Destroy
44207>>>>>>>>>>>        Handle hoWatched
44207>>>>>>>>>>>        Set Changed_State to False //   is this really needed anymore???
44208>>>>>>>>>>>        // if non 0, The watched server, must still exist.
44208>>>>>>>>>>>        Get Watched_Servers to hoWatched
44209>>>>>>>>>>>        If hoWatched Begin
44211>>>>>>>>>>>            Set Broadcast_State of hoWatched to False
44212>>>>>>>>>>>            Send Destroy of hoWatched     // destroy the bcaster
44213>>>>>>>>>>>        End
44213>>>>>>>>>>>>
44213>>>>>>>>>>>        // if non 0, The bound watched server, must still exist.
44213>>>>>>>>>>>        Get ChangedStateWatched_Servers to hoWatched
44214>>>>>>>>>>>        If hoWatched Begin
44216>>>>>>>>>>>            Set Broadcast_State of hoWatched to False
44217>>>>>>>>>>>            Send Destroy of hoWatched     // destroy the bcaster
44218>>>>>>>>>>>        End
44218>>>>>>>>>>>>
44218>>>>>>>>>>>        Forward Send Destroy
44220>>>>>>>>>>>    End_Procedure
44221>>>>>>>>>>>    
44221>>>>>>>>>>>    
44221>>>>>>>>>>>    Function Should_Save Returns Integer
44223>>>>>>>>>>>        Integer Obj# Chngd
44223>>>>>>>>>>>        Get Server to Obj#
44224>>>>>>>>>>>        Get Changed_state to Chngd
44225>>>>>>>>>>>        Function_Return ( Chngd or (obj# <> 0 and Should_Save(obj#)) )
44226>>>>>>>>>>>    End_Function
44227>>>>>>>>>>>    
44227>>>>>>>>>>>    // Added server scan logic here instead of add_focus.
44227>>>>>>>>>>>    Procedure Attach_Deo_To_Server
44229>>>>>>>>>>>        Integer obj# isclient srvscn wsrvr
44229>>>>>>>>>>>        Get Server to obj#
44230>>>>>>>>>>>        Get client_area_state to isclient
44231>>>>>>>>>>>        If (obj# <> 0) ;            Send add_user_interface to obj# Self
44234>>>>>>>>>>>        Get private.Servers_Scanned to srvscn
44235>>>>>>>>>>>        If (srvscn = 0) ;            Send scan_servers
44238>>>>>>>>>>>        Get Watched_Servers to wsrvr
44239>>>>>>>>>>>        If wsrvr Send add_user_interface ;            to wsrvr Self True // TRUE for watchers
44242>>>>>>>>>>>        If (obj# <> 0 and isclient = 0) ;            Send update_dependent_items
44245>>>>>>>>>>>    End_Procedure
44246>>>>>>>>>>>    
44246>>>>>>>>>>>    // Removed server scan logic and moved it to attach-deo_to_server
44246>>>>>>>>>>>    Procedure Add_Focus Handle hoParent Returns Integer
44248>>>>>>>>>>>        Integer srvscn retval msg
44248>>>>>>>>>>>        //
44248>>>>>>>>>>>        // standard DEO behavior
44248>>>>>>>>>>>        //
44248>>>>>>>>>>>        Forward Get msg_Add_Focus hoParent to retval
44250>>>>>>>>>>>        If retval ;            Procedure_Return retval
44253>>>>>>>>>>>        
44253>>>>>>>>>>>        If (client_area_State(Self) = 0) ; //clients already broadcast            Broadcast NO_STOP Send add_focus Self
44258>>>>>>>>>>>        //
44258>>>>>>>>>>>        // server augmentation
44258>>>>>>>>>>>        //
44258>>>>>>>>>>>        If (focus_mode(Self) <> NO_ACTIVATE and Active_State(Self)) ;            Send attach_DEO_to_server
44261>>>>>>>>>>>        
44261>>>>>>>>>>>        // last thing to do is send custom message. With list deos
44261>>>>>>>>>>>        // msg is probably initialize_list. With non-list deos it
44261>>>>>>>>>>>        // is probably nothing
44261>>>>>>>>>>>        Get add_focus_msg to msg
44262>>>>>>>>>>>        If msg ;            Send msg
44265>>>>>>>>>>>    End_Procedure
44266>>>>>>>>>>>    
44266>>>>>>>>>>>    // Connect DEO to Server if Demanded (DoAllfg=t) or ;
44266>>>>>>>>>>>    // allowed  (static_server_State=t). Broadcast if children exist
44266>>>>>>>>>>>    Procedure Connect_DEOs_to_Servers Integer DoAllFg
44268>>>>>>>>>>>        If (DoAllfg or Static_Server_State(Self)) ;            Send Attach_Deo_to_Server
44271>>>>>>>>>>>        If (Has_Components_State(Self)) ;            Broadcast Send Connect_DEOs_to_Servers DoAllfg
44275>>>>>>>>>>>    End_Procedure
44276>>>>>>>>>>>    
44276>>>>>>>>>>>    // Disconnect DEOs from Servers according to rules. Broadcast
44276>>>>>>>>>>>    // to child components.
44276>>>>>>>>>>>    //
44276>>>>>>>>>>>    // Pass: DoAllMode
44276>>>>>>>>>>>    //    DETACH_NEVER        Never
44276>>>>>>>>>>>    //    DETACH_IF_NO_CHANGE Do if changed_state=F
44276>>>>>>>>>>>    //    DETACH_ALWAYS       Do it no matter what
44276>>>>>>>>>>>    //    DETACH_IF_ALLOWED   Do if changed_state=F and auto_attach
44276>>>>>>>>>>>    //                        (I don't think this will be needed!)
44276>>>>>>>>>>>    //
44276>>>>>>>>>>>    Procedure Disconnect_DEOs_from_Servers Integer DoAllMode
44278>>>>>>>>>>>        If (DoAllMode <> DETACH_NEVER) Begin
44280>>>>>>>>>>>            If ( DoAllMode=DETACH_ALWAYS or ; // do all no matter what                ( (Changed_state(Self)=0) and ;                ( (DoAllMode=DETACH_IF_NO_CHANGE) or  ;                (Static_Server_State(Self)) ) ) ) ;                Send Remove_deo_from_server
44283>>>>>>>>>>>            If (Has_Components_State(Self)) ;                Broadcast Send Disconnect_DEOs_from_Servers DoAllMode
44287>>>>>>>>>>>        End
44287>>>>>>>>>>>>
44287>>>>>>>>>>>    End_Procedure
44288>>>>>>>>>>>    
44288>>>>>>>>>>>    // Changed to not remove from server if static.
44288>>>>>>>>>>>    Procedure Remove_Object
44290>>>>>>>>>>>        Forward Send remove_object
44292>>>>>>>>>>>        // remove if not static and no changes
44292>>>>>>>>>>>        If ( Static_Server_State(Self)=0 and ;            Changed_State(Self)=0 ) ;  // only detach if unchanged!            Send remove_DEO_from_server
44295>>>>>>>>>>>    End_Procedure
44296>>>>>>>>>>>    
44296>>>>>>>>>>>    
44296>>>>>>>>>>>    // (JJT) Changed so that this respects Change_disabled_state. I don't
44296>>>>>>>>>>>    //       like this here but its the best I can think of. Therefore, all
44296>>>>>>>>>>>    //       objects using server.pkg must understand Change_disabled_state.
44296>>>>>>>>>>>    //
44296>>>>>>>>>>>    // (JJT) Checks deferred_state and if set do not change the
44296>>>>>>>>>>>    // changed state of the server object. This had been in datalist and is
44296>>>>>>>>>>>    // required to make deferred_state work right. Deferred_state was created
44296>>>>>>>>>>>    // to make selection-lists work correctly and as far as I am concerned it
44296>>>>>>>>>>>    // should be the only supported use of this. Therefore, I would not *ever*
44296>>>>>>>>>>>    // expect deferred_state to be set true in tables, entry_forms, or text_
44296>>>>>>>>>>>    // windows. Since deferred-state is known to this mixin the change
44296>>>>>>>>>>>    // belongs here - but I expect it to only ever change behaviors in
44296>>>>>>>>>>>    // selection-lists.
44296>>>>>>>>>>>    
44296>>>>>>>>>>>    
44296>>>>>>>>>>>    // Changed to not remove from server if static.
44296>>>>>>>>>>>    Procedure Set Changed_State Integer newVal
44298>>>>>>>>>>>        Integer srvr# wsrvr
44298>>>>>>>>>>>        If not (Change_Disabled_State(Self)) Begin
44300>>>>>>>>>>>            Forward Set Changed_State to newVal
44302>>>>>>>>>>>            Get server to srvr#
44303>>>>>>>>>>>            
44303>>>>>>>>>>>            // if deferred keep the server out of it.
44303>>>>>>>>>>>            If not (deferred_State(Self)) Begin
44305>>>>>>>>>>>                If (newVal and srvr#) Begin
44307>>>>>>>>>>>                    Set Changed_State of srvr# to True
44308>>>>>>>>>>>                    // We also set changed_state of all "foreign" servers. These
44308>>>>>>>>>>>                    // are the ones whose Data_File is a parent File
44308>>>>>>>>>>>                    Get ChangedStateWatched_Servers to wsrvr
44309>>>>>>>>>>>                    If wsrvr ;                        Set Changed_State of wSrvr to True
44312>>>>>>>>>>>                End
44312>>>>>>>>>>>>
44312>>>>>>>>>>>                
44312>>>>>>>>>>>                // Remove is changed-state=false, not active and not static
44312>>>>>>>>>>>                If ( not(newVal) and not(Active_State(Self)) and ;                    not(Static_Server_State(Self)) ) ;                    Send remove_DEO_from_Server
44315>>>>>>>>>>>            End
44315>>>>>>>>>>>>
44315>>>>>>>>>>>        End
44315>>>>>>>>>>>>
44315>>>>>>>>>>>    End_Procedure
44316>>>>>>>>>>>    
44316>>>>>>>>>>>    // When an object is created this sets the default value for
44316>>>>>>>>>>>    // Static_Server_state. If a parent DEO exists it will use its
44316>>>>>>>>>>>    // static_server_state property. An Entry_view_Client0 object sets
44316>>>>>>>>>>>    // this - this way view based daf programs will use the new behavior
44316>>>>>>>>>>>    // (although it can be disabled)  but non-daf programs will work like
44316>>>>>>>>>>>    // they always did.
44316>>>>>>>>>>>    Function Default_Static_Server_State Returns Integer
44318>>>>>>>>>>>        Integer rVal
44318>>>>>>>>>>>        // We delegate to get the actual (not default) static state
44318>>>>>>>>>>>        // Note: Can't check with component_state - it not defined yet
44318>>>>>>>>>>>        Delegate Get Static_Server_State to rVal
44320>>>>>>>>>>>        Function_Return rVal
44321>>>>>>>>>>>    End_Function
44322>>>>>>>>>>>    
44322>>>>>>>>>>>    // This adds every parent DDO for the passed DDO to the DEO's list of DDOs to watch.
44322>>>>>>>>>>>    // It adds the parents and then does this recursively up the DDO tree.
44322>>>>>>>>>>>    // This means that this DEO will respond to any DD change for any server. This does not
44322>>>>>>>>>>>    Procedure WatchAllParentServers Handle hoDDO
44324>>>>>>>>>>>        Handle hoSrvr
44324>>>>>>>>>>>        Integer iServer iServers
44324>>>>>>>>>>>        Get Data_Set_Server_Count of hoDDO to iServers
44325>>>>>>>>>>>        For iServer from 0 to (iServers-1)
44331>>>>>>>>>>>>
44331>>>>>>>>>>>            Get Data_Set_Server of hoDDO iServer to hoSrvr
44332>>>>>>>>>>>            Send Add_Watched_Server hoSrvr
44333>>>>>>>>>>>            Send WatchAllParentServers hoSrvr
44334>>>>>>>>>>>        Loop
44335>>>>>>>>>>>>
44335>>>>>>>>>>>    End_Procedure
44336>>>>>>>>>>>    
44336>>>>>>>>>>>    
44336>>>>>>>>>>>End_Class
44337>>>>>>>>>>>
44337>>>>>>>>>>>//
44337>>>>>>>>>>>// The use of using on an object name is no longer supported. We will check for it's usage in case
44337>>>>>>>>>>>// developer's use this in old code.
44337>>>>>>>>>>>// Insetad of using, one should use "Set Server"
44337>>>>>>>>>>>//
44337>>>>>>>>>>>
44337>>>>>>>>>Use VERIFY.pkg        //include Verification support module
Including file: verify.pkg    (C:\Program Files\DataFlex 20.1\Pkg\verify.pkg)
44337>>>>>>>>>>>Use VDFBase.pkg
44337>>>>>>>>>>>
44337>>>>>>>>>>>Register_Function Component_State Returns Integer
44337>>>>>>>>>>>
44337>>>>>>>>>>>
44337>>>>>>>>>>>Class verify_mixin is a mixin
44338>>>>>>>>>>>    Procedure define_verify
44340>>>>>>>>>>>        Property Integer private.Verify_Save_Msg      0
44341>>>>>>>>>>>        Property Integer private.Verify_Delete_Msg    0
44342>>>>>>>>>>>        Property Integer private.Verify_Data_Loss_Msg 0
44343>>>>>>>>>>>    End_Procedure
44344>>>>>>>>>>>    
44344>>>>>>>>>>>    
44344>>>>>>>>>>>    Procedure Set Verify_Save_msg Integer val
44346>>>>>>>>>>>        Set private.Verify_Save_Msg to val
44347>>>>>>>>>>>    End_Procedure
44348>>>>>>>>>>>    
44348>>>>>>>>>>>    Procedure Set Verify_Delete_msg Integer val
44350>>>>>>>>>>>        Set private.Verify_Delete_Msg to val
44351>>>>>>>>>>>    End_Procedure
44352>>>>>>>>>>>    
44352>>>>>>>>>>>    Procedure Set Verify_Data_Loss_msg Integer val
44354>>>>>>>>>>>        Set private.Verify_Data_Loss_Msg to val
44355>>>>>>>>>>>    End_Procedure
44356>>>>>>>>>>>    
44356>>>>>>>>>>>    Function Verify_Save_msg Returns Integer
44358>>>>>>>>>>>        Integer retval
44358>>>>>>>>>>>        Get private.Verify_Save_Msg to retval
44359>>>>>>>>>>>        If (retval = 0 and Component_State(Self)) ;            Delegate Get Verify_Save_Msg to retval
44363>>>>>>>>>>>        Function_Return retval
44364>>>>>>>>>>>    End_Function
44365>>>>>>>>>>>    
44365>>>>>>>>>>>    Function Verify_Delete_msg Returns Integer
44367>>>>>>>>>>>        Integer retval
44367>>>>>>>>>>>        Get private.Verify_Delete_Msg to retval
44368>>>>>>>>>>>        If (retval = 0 and Component_State(Self)) ;            Delegate Get Verify_Delete_Msg to retval
44372>>>>>>>>>>>        Function_Return retval
44373>>>>>>>>>>>    End_Function
44374>>>>>>>>>>>    
44374>>>>>>>>>>>    
44374>>>>>>>>>>>    Function Verify_Data_Loss_msg Returns Integer
44376>>>>>>>>>>>        Integer retval
44376>>>>>>>>>>>        Get private.Verify_Data_Loss_Msg to retval
44377>>>>>>>>>>>        If (retval = 0 and Component_State(Self)) ;            Delegate Get Verify_Data_Loss_Msg to retval
44381>>>>>>>>>>>        Function_Return retval
44382>>>>>>>>>>>    End_Function
44383>>>>>>>>>>>    
44383>>>>>>>>>>>    Function Verify_Save Returns Integer
44385>>>>>>>>>>>        Integer msg# retval
44385>>>>>>>>>>>        Get Verify_Save_Msg to msg#
44386>>>>>>>>>>>        If (msg# <> 0) Begin
44388>>>>>>>>>>>            Get msg# to retval
44389>>>>>>>>>>>            Function_Return retval
44390>>>>>>>>>>>        End
44390>>>>>>>>>>>>
44390>>>>>>>>>>>    End_Function
44391>>>>>>>>>>>    
44391>>>>>>>>>>>    Function Verify_Delete Returns Integer
44393>>>>>>>>>>>        Integer msg# retval
44393>>>>>>>>>>>        Get Verify_Delete_Msg to msg#
44394>>>>>>>>>>>        If (msg# <> 0) Begin
44396>>>>>>>>>>>            Get msg# to retval
44397>>>>>>>>>>>            Function_Return retval
44398>>>>>>>>>>>        End
44398>>>>>>>>>>>>
44398>>>>>>>>>>>    End_Function
44399>>>>>>>>>>>    
44399>>>>>>>>>>>    Function Verify_Data_Loss Returns Integer
44401>>>>>>>>>>>        Integer msg# retval
44401>>>>>>>>>>>        Get Verify_Data_Loss_Msg to msg#
44402>>>>>>>>>>>        If (msg# <> 0) Begin
44404>>>>>>>>>>>            Get msg# to retval
44405>>>>>>>>>>>            Function_Return retval
44406>>>>>>>>>>>        End
44406>>>>>>>>>>>>
44406>>>>>>>>>>>    End_Function
44407>>>>>>>>>>>    
44407>>>>>>>>>>>End_Class
44408>>>>>>>>>Use ACTIONBR.pkg      //include action-bar support module
Including file: Actionbr.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Actionbr.pkg)
44408>>>>>>>>>>>Use VDFBase.pkg
44408>>>>>>>>>>>
44408>>>>>>>>>>>Class Action_Bar_Mixin is a mixin
44409>>>>>>>>>>>    Procedure Define_Action_bar
44411>>>>>>>>>>>    End_Procedure
44412>>>>>>>>>>>    
44412>>>>>>>>>>>    Procedure Define_Access_Keys
44414>>>>>>>>>>>    End_Procedure
44415>>>>>>>>>>>    
44415>>>>>>>>>>>    Procedure Add_Action_bar
44417>>>>>>>>>>>    End_Procedure
44418>>>>>>>>>>>End_Class
44419>>>>>>>>>>>
44419>>>>>>>>>>>
44419>>>>>>>>>>>
44419>>>>>>>>>Use AutoLcMx.pkg   // Auto locate of popup mixin
44419>>>>>>>>>Use DEODlgMx.pkg   // DEO delegation support
Including file: deodlgmx.pkg    (C:\Program Files\DataFlex 20.1\Pkg\deodlgmx.pkg)
44419>>>>>>>>>>>Use VDFBase.pkg
44419>>>>>>>>>>>
44419>>>>>>>>>>>Enum_List
44419>>>>>>>>>>>    Define DELEGATE_NEVER
44419>>>>>>>>>>>    Define DELEGATE_SERVER
44419>>>>>>>>>>>    Define DELEGATE_ALWAYS
44419>>>>>>>>>>>End_Enum_List
44419>>>>>>>>>>>
44419>>>>>>>>>>>
44419>>>>>>>>>>>Register_Function component_state Returns Integer
44419>>>>>>>>>>>
44419>>>>>>>>>>>Class deo_delegate_mixin is a mixin
44420>>>>>>>>>>>    Procedure define_deo_delegate
44422>>>>>>>>>>>        
44422>>>>>>>>>>>        Property Integer DEO_Delegate_Mode     Delegate_Server
44423>>>>>>>>>>>        
44423>>>>>>>>>>>        Property Integer delegate_clear_state  True
44424>>>>>>>>>>>        
44424>>>>>>>>>>>        Property Integer delegate_delete_state True
44425>>>>>>>>>>>        
44425>>>>>>>>>>>        Property Integer delegate_find_state   False
44426>>>>>>>>>>>        
44426>>>>>>>>>>>        Property Integer delegate_save_state   True
44427>>>>>>>>>>>    End_Procedure
44428>>>>>>>>>>>    
44428>>>>>>>>>>>    Function should_delegate Returns Integer
44430>>>>>>>>>>>        Integer Mode Dlg_Obj
44430>>>>>>>>>>>        
44430>>>>>>>>>>>        Delegate Get Object_Id to Dlg_Obj
44432>>>>>>>>>>>        Get Deo_Delegate_Mode to Mode
44433>>>>>>>>>>>        Function_Return ( (((Mode = DELEGATE_SERVER) and ;            not(Explicit_Server_State(Self)) and ;            (Locate_Server(Self) <> Dlg_Obj)) or ; // don't delegate if the object to delegate to is a server.            (Mode = DELEGATE_ALWAYS)) and Component_State(Self))
44434>>>>>>>>>>>    End_Function
44435>>>>>>>>>>>    
44435>>>>>>>>>>>    Function Should_delegate_Clear Returns Integer
44437>>>>>>>>>>>        Function_Return (should_delegate(Self) and ;            delegate_clear_state(Self))
44438>>>>>>>>>>>    End_Function
44439>>>>>>>>>>>    
44439>>>>>>>>>>>    Function Should_delegate_Save Returns Integer
44441>>>>>>>>>>>        Function_Return (should_delegate(Self) and ;            delegate_Save_state(Self))
44442>>>>>>>>>>>    End_Function
44443>>>>>>>>>>>    
44443>>>>>>>>>>>    Function Should_delegate_Delete Returns Integer
44445>>>>>>>>>>>        Function_Return (should_delegate(Self) and ;            delegate_delete_state(Self))
44446>>>>>>>>>>>    End_Function
44447>>>>>>>>>>>    
44447>>>>>>>>>>>    Function Should_delegate_Find Returns Integer
44449>>>>>>>>>>>        Function_Return (should_delegate(Self) and ;            delegate_Find_state(Self))
44450>>>>>>>>>>>    End_Function
44451>>>>>>>>>>>    
44451>>>>>>>>>>>End_Class
44452>>>>>>>>>>>
44452>>>>>>>>>>>//  During a clear (or a save/delete which sends clear) object-validation is
44452>>>>>>>>>>>//  properly shut off. However, the false assumption had been made that the
44452>>>>>>>>>>>//  DEO request_clear/clear_all messages originated with the object that had
44452>>>>>>>>>>>//  the focus. This was never true and is now even less likely to be true
44452>>>>>>>>>>>//  with the request_??? delegation method. The proper solution is to shut
44452>>>>>>>>>>>//  off object-validation in the focus object. The problem here is that
44452>>>>>>>>>>>//  the focus object may not understand this message (text_windows, buttons,
44452>>>>>>>>>>>//  etc). The work-around for now is to make sure that all objects understand
44452>>>>>>>>>>>//  these message. We can not directly add an Object_Validation message to the
44452>>>>>>>>>>>//  desktop (Object class). Because this message is internal this didn't work.
44452>>>>>>>>>>>//  By default this does nothing. Objects using val_mx actually pass this on
44452>>>>>>>>>>>//  object_validation.
44452>>>>>>>>>>>
44452>>>>>>>>>>>Procedure Set Object_Item_validation for cUIObject Integer fg
44454>>>>>>>>>>>End_Procedure
44455>>>>>>>>>>>
44455>>>>>>>>>>>Function Object_Item_Validation for cUIObject Returns Integer
44457>>>>>>>>>>>End_Function
44458>>>>>>>>>
44458>>>>>>>>>Class Entry_Client_mixin is a mixin
44459>>>>>>>>>
44459>>>>>>>>>    Procedure Construct_Object Integer myImg
44461>>>>>>>>>        Forward Send construct_object myImg
44463>>>>>>>>>        Set Ring_State to False
44464>>>>>>>>>        Property Integer private.Changed_State 0
44465>>>>>>>>>        
44465>>>>>>>>>        // We need this property to fully emulate a DEO
44465>>>>>>>>>        // (Actually, entry_clients should realy support ALL the DEO messages!)
44465>>>>>>>>>        Property Integer Auto_Clear_DEO_State True
44466>>>>>>>>>        
44466>>>>>>>>>        Send define_nesting      //invoke DEO nesting standard support constructor
44467>>>>>>>>>        Send define_navigation   //invoke DEO navigation standard support constructor
44468>>>>>>>>>        Send define_server       //invoke Server support constructor
44469>>>>>>>>>        Send define_action_bar   //invoke action-bar support constructor
44470>>>>>>>>>        Send define_verify       //invoke Verification support constructor
44471>>>>>>>>>        Send define_DEO_Delegate
44472>>>>>>>>>        Send Define_Auto_Locate
44473>>>>>>>>>        
44473>>>>>>>>>    End_Procedure
44474>>>>>>>>>    
44474>>>>>>>>>    Import_Class_Protocol NESTING_Mixin
44475>>>>>>>>>    Import_Class_Protocol NAVIGATE_Mixin
44476>>>>>>>>>    Import_Class_Protocol SERVER_Mixin
44477>>>>>>>>>    Import_Class_Protocol VERIFY_Mixin
44478>>>>>>>>>    Import_Class_Protocol ACTION_BAR_Mixin
44479>>>>>>>>>    Import_Class_Protocol Auto_Locate_Mixin
44480>>>>>>>>>    Import_Class_Protocol Deo_Delegate_Mixin
44481>>>>>>>>>    
44481>>>>>>>>>    
44481>>>>>>>>>    //
44481>>>>>>>>>    // created for Server support
44481>>>>>>>>>    //
44481>>>>>>>>>    Procedure Display
44483>>>>>>>>>        Broadcast Send display
44485>>>>>>>>>    End_Procedure
44486>>>>>>>>>    
44486>>>>>>>>>    //
44486>>>>>>>>>    // created for Server support
44486>>>>>>>>>    //
44486>>>>>>>>>    Procedure Clear
44488>>>>>>>>>        Broadcast Send Clear
44490>>>>>>>>>    End_Procedure
44491>>>>>>>>>    
44491>>>>>>>>>    //
44491>>>>>>>>>    // created for Server support
44491>>>>>>>>>    //
44491>>>>>>>>>    Procedure Clear_Set
44493>>>>>>>>>        Broadcast Send clear_set
44495>>>>>>>>>    End_Procedure
44496>>>>>>>>>    
44496>>>>>>>>>    //
44496>>>>>>>>>    // created for property support
44496>>>>>>>>>    //
44496>>>>>>>>>    Function Changed_State Returns Integer
44498>>>>>>>>>        Integer retval
44498>>>>>>>>>        Get Private.Changed_State to retval
44499>>>>>>>>>        Function_Return retval
44500>>>>>>>>>    End_Function
44501>>>>>>>>>    
44501>>>>>>>>>    //
44501>>>>>>>>>    // cancelled from Server mixin
44501>>>>>>>>>    //
44501>>>>>>>>>    Procedure Set Changed_State Integer newVal
44503>>>>>>>>>    End_Procedure
44504>>>>>>>>>    
44504>>>>>>>>>    //
44504>>>>>>>>>    // created for EntItem convenience
44504>>>>>>>>>    //
44504>>>>>>>>>    Procedure Entry_Clear Integer file#
44506>>>>>>>>>        If (Has_Components_State(Self)) ;            Broadcast Send Entry_Clear file#
44510>>>>>>>>>    End_Procedure
44511>>>>>>>>>    
44511>>>>>>>>>    //
44511>>>>>>>>>    // created for EntItem convenience
44511>>>>>>>>>    //
44511>>>>>>>>>    Procedure Entry_Clear_All Integer file#
44513>>>>>>>>>        If (Has_Components_State(Self)) ;            Broadcast Send Entry_Clear_All file#
44517>>>>>>>>>    End_Procedure
44518>>>>>>>>>    
44518>>>>>>>>>    //
44518>>>>>>>>>    // created for EntItem convenience
44518>>>>>>>>>    //
44518>>>>>>>>>    Procedure Entry_Display Integer file# Integer flag
44520>>>>>>>>>        If (Has_Components_State(Self)) ;            Broadcast Send Entry_Display file# flag
44524>>>>>>>>>    End_Procedure
44525>>>>>>>>>    
44525>>>>>>>>>    Procedure End_Construct_Object
44527>>>>>>>>>        Send Mark_Components      // nesting
44528>>>>>>>>>        Send Define_Access_Keys 0 // action_bar_keys
44529>>>>>>>>>        Forward Send End_Construct_Object
44531>>>>>>>>>    End_Procedure
44532>>>>>>>>>    
44532>>>>>>>>>    // Added for deo delegate support
44532>>>>>>>>>    Procedure Request_Clear
44534>>>>>>>>>        Integer obj# retval foc
44534>>>>>>>>>        If (should_delegate_clear(Self)) ;            Delegate Send request_clear
44538>>>>>>>>>        Else Begin
44539>>>>>>>>>            Get Locate_Server to obj# // locate needed in case this is a DSO
44540>>>>>>>>>            If (should_save(Self) and ;                (Verify_Data_Loss(Self) <> 0)) ;                Procedure_Return
44543>>>>>>>>>            
44543>>>>>>>>>            Get Focus of desktop to Foc
44544>>>>>>>>>            Get Object_Item_Validation of Foc to retval
44545>>>>>>>>>            Set Object_Item_Validation of Foc to False
44546>>>>>>>>>            
44546>>>>>>>>>            If (obj# <> 0) ;                Send Clear to obj#
44549>>>>>>>>>            Else ;                Send entry_clear 0
44551>>>>>>>>>            If (Auto_Top_Panel_State(Self)) ;                Send beginning_of_panel
44554>>>>>>>>>            Set Object_Item_Validation of Foc to retval
44555>>>>>>>>>        End
44555>>>>>>>>>>
44555>>>>>>>>>    End_Procedure
44556>>>>>>>>>    
44556>>>>>>>>>    Procedure Request_Clear_All
44558>>>>>>>>>        Integer obj# retval foc
44558>>>>>>>>>        If (should_delegate_clear(Self)) ;            Delegate Send request_clear_all
44562>>>>>>>>>        Else Begin
44563>>>>>>>>>            Get Locate_Server to obj#
44564>>>>>>>>>            If (Should_Save(Self) and ;                (Verify_Data_Loss(Self) <> 0)) ;                Procedure_Return
44567>>>>>>>>>            
44567>>>>>>>>>            Get Focus of desktop to Foc
44568>>>>>>>>>            Get Object_Item_Validation of Foc to retval
44569>>>>>>>>>            Set Object_Item_Validation of Foc to False
44570>>>>>>>>>            
44570>>>>>>>>>            If (obj# <> 0) ;                Send clear_all to obj#
44573>>>>>>>>>            Else ;                Send entry_clear_all 0
44575>>>>>>>>>            If (Auto_Top_Panel_State(Self)) ;                Send beginning_of_panel
44578>>>>>>>>>            Set Object_Item_Validation of Foc to retval
44579>>>>>>>>>        End
44579>>>>>>>>>>
44579>>>>>>>>>    End_Procedure
44580>>>>>>>>>    
44580>>>>>>>>>    Procedure Request_Delete
44582>>>>>>>>>        Integer obj#
44582>>>>>>>>>        
44582>>>>>>>>>        If (should_delegate_delete(Self)) ;            Delegate Send request_delete
44586>>>>>>>>>        Else Begin
44587>>>>>>>>>            Move False to Err
44588>>>>>>>>>            Get Locate_Server to obj#
44589>>>>>>>>>            If (obj# <> 0 and can_delete(obj#) <> 0) Begin
44591>>>>>>>>>                If (Verify_Delete(Self) <> 0) ;                    Procedure_Return
44594>>>>>>>>>                Set changed_State to False
44595>>>>>>>>>                If (Deferred_State(Self)) ;                    Send Request_Assign to obj# 0  //0 means main_file of Server
44598>>>>>>>>>                Send Request_Delete to obj#
44599>>>>>>>>>                // ignore auto_clear_deo_state in deletes. Always clear deleted record
44599>>>>>>>>>                If (not(err)) ;                    Send Request_Clear
44602>>>>>>>>>            End
44602>>>>>>>>>>
44602>>>>>>>>>        End
44602>>>>>>>>>>
44602>>>>>>>>>    End_Procedure
44603>>>>>>>>>    
44603>>>>>>>>>    Procedure Request_Find Integer mode Integer entUpdtFlag
44605>>>>>>>>>        If (should_delegate_find(Self)) ;            Delegate Send request_find mode entUpdtFlag
44609>>>>>>>>>        Else Begin // for now don't support any default find behavior
44610>>>>>>>>>            // in clients
44610>>>>>>>>>            Procedure_Return
44611>>>>>>>>>        End
44611>>>>>>>>>>
44611>>>>>>>>>    End_Procedure
44612>>>>>>>>>    
44612>>>>>>>>>    Procedure Request_Save
44614>>>>>>>>>        Integer obj# retval
44614>>>>>>>>>        
44614>>>>>>>>>        If (should_delegate_save(Self)) ;            Delegate Send request_save
44618>>>>>>>>>        Else Begin
44619>>>>>>>>>            Get Locate_Server to obj#
44620>>>>>>>>>            
44620>>>>>>>>>            If (obj# <> 0 and not(Read_Only_State(obj#))) Begin
44622>>>>>>>>>                Move False to Err
44623>>>>>>>>>                
44623>>>>>>>>>                If (Should_Save(Self)) Begin
44625>>>>>>>>>                    Get Request_Validate of obj# to retval
44626>>>>>>>>>                    If (retval <> 0) ;                        Procedure_Return
44629>>>>>>>>>                    //
44629>>>>>>>>>                    // modification for Verify support
44629>>>>>>>>>                    //
44629>>>>>>>>>                    If (Verify_Save(Self) <> 0) ;                        Procedure_Return
44632>>>>>>>>>                    //
44632>>>>>>>>>                    // modification for Save support
44632>>>>>>>>>                    //
44632>>>>>>>>>                    If (Deferred_State(Self)) ;                        Send Request_Assign to obj# 0  //0 means main_file of server
44635>>>>>>>>>                    
44635>>>>>>>>>                    Send Request_Save to obj#
44636>>>>>>>>>                End
44636>>>>>>>>>>
44636>>>>>>>>>                //
44636>>>>>>>>>                If (not(err) and Auto_Clear_DEO_State(Self)) ;                    Send Request_Clear
44639>>>>>>>>>            End
44639>>>>>>>>>>
44639>>>>>>>>>        End
44639>>>>>>>>>>
44639>>>>>>>>>    End_Procedure
44640>>>>>>>>>    
44640>>>>>>>>>    // this allows us to save a record without it clearing regardless of
44640>>>>>>>>>    // the Auto_Clear_DEO_State value
44640>>>>>>>>>    //
44640>>>>>>>>>    Procedure Request_Save_No_Clear
44642>>>>>>>>>        Integer oldclr
44642>>>>>>>>>        If (should_delegate_save(Self)) ;            Delegate Send request_save_no_clear
44646>>>>>>>>>        Else Begin
44647>>>>>>>>>            Get Auto_Clear_DEO_State to OldClr  // whatever it was
44648>>>>>>>>>            Set Auto_Clear_DEO_State to False   // it is no NO!
44649>>>>>>>>>            Send request_save                   // do your magic
44650>>>>>>>>>            Set Auto_Clear_DEO_State to OldClr  // back to whatever it was
44651>>>>>>>>>        End
44651>>>>>>>>>>
44651>>>>>>>>>    End_Procedure
44652>>>>>>>>>    
44652>>>>>>>>>    Procedure Request_Superfind Integer mode
44654>>>>>>>>>        Integer ser# datafile
44654>>>>>>>>>        
44654>>>>>>>>>        If (should_delegate_find(Self)) ;            Delegate Send request_superfind mode
44658>>>>>>>>>        Else Begin
44659>>>>>>>>>            Procedure_Return
44660>>>>>>>>>        End
44660>>>>>>>>>>
44660>>>>>>>>>    End_Procedure
44661>>>>>>>>>    
44661>>>>>>>>>    //  Augment to Support AutoLocate.
44661>>>>>>>>>    //  This replaces (not augments) the procedure in actionbr. We need
44661>>>>>>>>>    //  to look into this (activating is very risky to augment activating
44661>>>>>>>>>    //  in mixins).
44661>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
44661>>>>>>>>>    Procedure Activating // Returns Integer
44663>>>>>>>>>        Integer InvokingId RVal
44663>>>>>>>>>        Get Focus of desktop to InvokingId
44664>>>>>>>>>        //
44664>>>>>>>>>        Forward Get MSG_activating to rVal   //  This is the standard
44666>>>>>>>>>        If rVal ;            Procedure_Return rVal        //  actionbr activating
44669>>>>>>>>>        Send Add_action_bar                  //  logic
44670>>>>>>>>>        If (Auto_Locate_State(Self) ) ;            Send Auto_Locate InvokingId
44673>>>>>>>>>    End_Procedure
44674>>>>>>>>>    
44674>>>>>>>>>    // add this so that all db clients delegate this message.
44674>>>>>>>>>    // this is used to catch sub-views (tabview). Tab views (sub
44674>>>>>>>>>    // views) will augment this to do something useful
44674>>>>>>>>>    Function SubView_Changed Returns Integer
44676>>>>>>>>>        Integer hObj
44676>>>>>>>>>        Broadcast Get SubView_Changed to hObj
44678>>>>>>>>>        Function_Return hObj
44679>>>>>>>>>    End_Function
44680>>>>>>>>>    
44680>>>>>>>>>    // these are needed to pass these on to possible tabview.
44680>>>>>>>>>    Function Opening_view_Recursive Returns Integer
44682>>>>>>>>>        Integer bFail
44682>>>>>>>>>        Broadcast Get Opening_View_Recursive to bFail
44684>>>>>>>>>        Function_Return bFail
44685>>>>>>>>>    End_Function
44686>>>>>>>>>    
44686>>>>>>>>>    // these are needed to pass these on to possible tabview.
44686>>>>>>>>>    Procedure Seed_Data_Sets_Recursive
44688>>>>>>>>>        Broadcast Send Seed_Data_Sets_Recursive
44690>>>>>>>>>    End_Procedure
44691>>>>>>>>>    
44691>>>>>>>>>    // as of 17.0, clients are added to a DDOs DEO list, which means they receive the messages
44691>>>>>>>>>    // Refresh, Validate_Items and Entry_Update. These are stubs. The Refresh message is the one
44691>>>>>>>>>    // that will be useful. A developer can use this to process DD changes within a view or other
44691>>>>>>>>>    // container
44691>>>>>>>>>    
44691>>>>>>>>>    Procedure Refresh Integer eMode
44693>>>>>>>>>    End_Procedure
44694>>>>>>>>>    
44694>>>>>>>>>    Function Validate_Items Returns Integer
44696>>>>>>>>>    End_Function
44697>>>>>>>>>    
44697>>>>>>>>>    Procedure Entry_Update Integer file# Integer flag
44699>>>>>>>>>    End_Procedure
44700>>>>>>>>>    
44700>>>>>>>>>    Function Data_File Integer iItem Returns Integer
44702>>>>>>>>>        Function_Return 0
44703>>>>>>>>>    End_Function
44704>>>>>>>>>    
44704>>>>>>>>>    Function Data_Field Integer iItem Returns Integer
44706>>>>>>>>>        Function_Return 0
44707>>>>>>>>>    End_Function
44708>>>>>>>>>    
44708>>>>>>>>>    
44708>>>>>>>>>End_Class
44709>>>>>>>>>
44709>>>>>>>>>
44709>>>>>>>>>Define DEFAULT_VIEW_LATCH_STATE         for 1
44709>>>>>>>>>Define DEFAULT_VIEW_STATIC_SERVER_STATE for 1
44709>>>>>>>>>Define DEFAULT_DSO_DETACH_MODE          for DETACH_IF_NO_CHANGE
44709>>>>>>>>>
44709>>>>>>>>>Class Entry_View_Client_mixin is a mixin
44710>>>>>>>>>    Procedure Construct_Object Integer img#
44712>>>>>>>>>        Forward Send construct_object img#
44714>>>>>>>>>        Property String View_Name ''  // default name...could be useful
44715>>>>>>>>>        Set scope_State to True         // defaults to a Scope
44716>>>>>>>>>        Set Attach_Parent_State to True // default...controls parentage better
44717>>>>>>>>>        Set Ring_State to True          // default to Ring...makes sense
44718>>>>>>>>>        
44718>>>>>>>>>        Property Integer DSO_Detach_Mode          Default_DSO_Detach_Mode
44719>>>>>>>>>        Property Integer DEO_Attach_All_State     False
44720>>>>>>>>>        
44720>>>>>>>>>        Property Integer View_Latch_State         True  // Default_View_Latch_State
44721>>>>>>>>>        Property Integer Main_DD                  0
44722>>>>>>>>>        // keeps track of main-file record when new view is entered!
44722>>>>>>>>>        
44722>>>>>>>>>        Property RowID priInitialRowId
44723>>>>>>>>>        
44723>>>>>>>>>        // when false activate will attempt to activate the scope_focus
44723>>>>>>>>>        // when true, activate activates first object.
44723>>>>>>>>>        Property Integer Auto_Top_View_State      False
44724>>>>>>>>>
44724>>>>>>>>>        // When activate is performed (as opposed to set current_scope) the
44724>>>>>>>>>        // first focusable object is activated. Should the first item of the
44724>>>>>>>>>        // first object become the current_item?
44724>>>>>>>>>        // If Top_View is true and Top_Item is false you get the old dac
44724>>>>>>>>>        // behaviors.
44724>>>>>>>>>        Property Integer Auto_Top_Item_State      True
44725>>>>>>>>>        
44725>>>>>>>>>        // When changing views this will keep track of the object that had
44725>>>>>>>>>        // the focus when this view (scope) was exited. This manages nested
44725>>>>>>>>>        // scopes within a view.
44725>>>>>>>>>        Property Integer private.Last_View_Focus  0
44726>>>>>>>>>        Property Integer wasNotinUse_State        False // internal use
44727>>>>>>>>>    End_Procedure
44728>>>>>>>>>    
44728>>>>>>>>>    // Augment exit_application_check. If a change
44728>>>>>>>>>    // is detected activate the changed view. This way the user sees what
44728>>>>>>>>>    // has been changed.
44728>>>>>>>>>    //
44728>>>>>>>>>    Function Exit_Application_Check Returns Integer
44730>>>>>>>>>        Integer rVal Obj
44730>>>>>>>>>        
44730>>>>>>>>>        Get Should_Save to Rval // changes in this object???
44731>>>>>>>>>        If (rVal = 0) ;            Broadcast Get Exit_Application_Check to Rval // check w/ kids
44735>>>>>>>>>        
44735>>>>>>>>>        If (rVal <> 0) Begin  // ok a change exist...activate changed view.
44737>>>>>>>>>            //
44737>>>>>>>>>            // before activating the changed view make sure that we are not
44737>>>>>>>>>            // trying to activate this on top of a modal object. Check the current
44737>>>>>>>>>            // focus and all of its parent record up to (but not including) the
44737>>>>>>>>>            // desktop. If any of these object are modal (have block_mouse_state
44737>>>>>>>>>            // set to true) then do not display the changed view.
44737>>>>>>>>>            //
44737>>>>>>>>>            Get Focus of desktop to Obj
44738>>>>>>>>>            While Obj Gt DESKTOP
44742>>>>>>>>>                If (Block_Mouse_State(Obj)) ;                    Function_Return rVal // if modal..exit
44745>>>>>>>>>                Get Parent of Obj to Obj
44746>>>>>>>>>            Loop
44747>>>>>>>>>>
44747>>>>>>>>>            Send Activate
44748>>>>>>>>>        End
44748>>>>>>>>>>
44748>>>>>>>>>        Function_Return rVal
44749>>>>>>>>>    End_Function
44750>>>>>>>>>    
44750>>>>>>>>>    Function Opening_view_Recursive Returns Integer
44752>>>>>>>>>        Integer main bFail
44752>>>>>>>>>        Set delegation_mode to delegate_to_parent
44753>>>>>>>>>        Get Main_DD to Main
44754>>>>>>>>>        Set WasNotInUse_State to ( Main and In_use_State(Main)=0 )
44755>>>>>>>>>        Get Opening_View to bFail
44756>>>>>>>>>        If not bFail ;            Broadcast Get Opening_View_Recursive to bFail
44760>>>>>>>>>        Function_Return bFail
44761>>>>>>>>>    End_Function
44762>>>>>>>>>    
44762>>>>>>>>>    Procedure Seed_Data_Sets_Recursive
44764>>>>>>>>>        Integer NotInUse
44764>>>>>>>>>        Set delegation_mode to delegate_to_parent
44765>>>>>>>>>        Get WasNotInUse_State to NotInUse
44766>>>>>>>>>        If NotInUse ;            Send Seed_Data_Sets  // if ok, we've got blank in-use DSO.
44769>>>>>>>>>        Set WasNotInUse_State to False
44770>>>>>>>>>        Broadcast Send Seed_Data_Sets_Recursive
44772>>>>>>>>>    End_Procedure
44773>>>>>>>>>    
44773>>>>>>>>>    
44773>>>>>>>>>    //  Augmented to send Opening_view. If add_focus fails it sends
44773>>>>>>>>>    //  closing_view to reverse effects of Opening_view
44773>>>>>>>>>    Procedure Add_Focus Handle hoParent Returns Integer
44775>>>>>>>>>        Integer rVal Main NotInUse
44775>>>>>>>>>        Get Opening_View_Recursive to rval
44776>>>>>>>>>        //
44776>>>>>>>>>        If (rVal = 0) Begin
44778>>>>>>>>>            // Connect DEOs and DSOs as required.
44778>>>>>>>>>            Send Connect_DEOs_to_Servers (DEO_Attach_All_State(Self))
44779>>>>>>>>>            Forward Get MSG_add_focus hoParent to rVal
44781>>>>>>>>>            Send Seed_Data_Sets_Recursive
44782>>>>>>>>>        End
44782>>>>>>>>>>
44782>>>>>>>>>        Procedure_Return rVal
44783>>>>>>>>>    End_Procedure
44784>>>>>>>>>    
44784>>>>>>>>>    // Augmented to Send Closing view
44784>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
44784>>>>>>>>>    Procedure Deactivating //Returns Integer
44786>>>>>>>>>        Integer rVal
44786>>>>>>>>>        Forward Get MSG_Deactivating to rVal
44788>>>>>>>>>        If (rVal = 0) ;            Send closing_View
44791>>>>>>>>>    End_Procedure
44792>>>>>>>>>    
44792>>>>>>>>>    //  Disconnect servers from deos according to rules.
44792>>>>>>>>>    //
44792>>>>>>>>>    Procedure Closing_View
44794>>>>>>>>>        Integer Mode
44794>>>>>>>>>        Get DSO_Detach_Mode to Mode
44795>>>>>>>>>        // If we had a View with no DEOs the DSOs would remain in use. We
44795>>>>>>>>>        // will take the extra step to set all DSOs in-use-states to false.
44795>>>>>>>>>        Send Disconnect_DEOs_from_Servers Mode
44796>>>>>>>>>        // we assume that only DSOs understand Set In_Use_State and that
44796>>>>>>>>>        // no delegation occurs as part of setting this to false.
44796>>>>>>>>>        If (Mode = DETACH_ALWAYS) ;            Broadcast Recursive Set In_use_State to False
44800>>>>>>>>>    End_Procedure
44801>>>>>>>>>    
44801>>>>>>>>>    // use to preload anything into DSOs. By default, if a Main_DD is
44801>>>>>>>>>    // defined, we will attempt to latch on
44801>>>>>>>>>    // the record that was in the buffer when the view was entered!
44801>>>>>>>>>    Procedure Seed_Data_Sets
44803>>>>>>>>>        Integer srvr# File#
44803>>>>>>>>>        Integer bFill
44803>>>>>>>>>        RowID   riInitalRowId
44803>>>>>>>>>        Boolean bFound
44803>>>>>>>>>        Get Main_DD to srvr#
44804>>>>>>>>>        // If no Main-dd we don't do anything automatically, you are on your
44804>>>>>>>>>        // own to seed the data-sets any way you want.
44804>>>>>>>>>        If Srvr# Begin
44806>>>>>>>>>            Get auto_fill_State of srvr# to bFill
44807>>>>>>>>>            // if not auto-fill and we've got a record, someone went to a lot of
44807>>>>>>>>>            // trouble to set up a record. Don't change it. Normally this would
44807>>>>>>>>>            // occur w/ selection lists (which are not auto-fill) that seed the
44807>>>>>>>>>            // list in advance.
44807>>>>>>>>>            If ( bFill=0 and HasRecord(srvr#) ) ;                Procedure_Return
44810>>>>>>>>>            Get priInitialRowId to riInitalRowId
44811>>>>>>>>>            If ( not(IsNullRowId(riInitalRowId)) and View_Latch_State(Self) ) Begin
44813>>>>>>>>>                // if initial record and we latch, refind it via DSO
44813>>>>>>>>>                // Find & relate record manually and then perform
44813>>>>>>>>>                // a request_assign. This will not work if the finding file is
44813>>>>>>>>>                // a constrained child file
44813>>>>>>>>>                Get Main_file of Srvr# to File#
44814>>>>>>>>>                // we can now do this in a single step
44814>>>>>>>>>                Get FindByRowIdEx of srvr# File# riInitalRowId to bFound
44815>>>>>>>>>            End
44815>>>>>>>>>>
44815>>>>>>>>>            Else ;                 // if no initial record, do a formal                If not bFill ;                Send Clear to Srvr# // clear
44819>>>>>>>>>            // If the srvr is auto-fill and there was no initial record we
44819>>>>>>>>>            // will chose to do nothing under the assumption that the server
44819>>>>>>>>>            // has already done an auto-fill and its guess is as good as
44819>>>>>>>>>            // anything we could come up with.
44819>>>>>>>>>        End
44819>>>>>>>>>>
44819>>>>>>>>>    End_Procedure
44820>>>>>>>>>    
44820>>>>>>>>>    //  Needed by view. Find the record number of the requested file.
44820>>>>>>>>>    //  If file = 0 use the main_file of Main_DD (if it exists).
44820>>>>>>>>>    Function FileRowId Integer iFile Returns RowID
44822>>>>>>>>>        Handle hoMain
44822>>>>>>>>>        RowID  riID
44822>>>>>>>>>        // if file not passed use main-file of main data set
44822>>>>>>>>>        If (iFile=0) Begin
44824>>>>>>>>>            Get Main_DD to hoMain
44825>>>>>>>>>            If hoMain Begin
44827>>>>>>>>>                Get main_file of hoMain to iFile
44828>>>>>>>>>            End
44828>>>>>>>>>>
44828>>>>>>>>>        End
44828>>>>>>>>>>
44828>>>>>>>>>        If iFile Begin
44830>>>>>>>>>            Move (GetRowId(iFile)) to riId
44831>>>>>>>>>        End
44831>>>>>>>>>>
44831>>>>>>>>>        Function_Return riId
44832>>>>>>>>>    End_Function
44833>>>>>>>>>    
44833>>>>>>>>>    // We maintain Last_View_Focus to control for nested scopes. A normal
44833>>>>>>>>>    // will have its scope_state true and no scoped children. However, a
44833>>>>>>>>>    // zoom might be scoped. We control this by keeping track of the scope when
44833>>>>>>>>>    // a scope is exited.
44833>>>>>>>>>    
44833>>>>>>>>>    Procedure Set Last_View_Focus Integer Foc
44835>>>>>>>>>        Set private.Last_View_Focus to Foc
44836>>>>>>>>>    End_Procedure
44837>>>>>>>>>    
44837>>>>>>>>>    // Returns The last scope in the view to have the focus. Before returning
44837>>>>>>>>>    // the value make sure that the scope object is active, else return 0
44837>>>>>>>>>    Function Last_View_Focus Returns Integer
44839>>>>>>>>>        Integer foc
44839>>>>>>>>>        Get private.Last_View_Focus to Foc
44840>>>>>>>>>        // if not a valid object or this object is not active make it 0
44840>>>>>>>>>        If (Foc<=DESKTOP or Active_state(Self)=0 or Active_State(Foc)=0) ;            Move 0 to Foc
44843>>>>>>>>>        Function_Return Foc
44844>>>>>>>>>    End_Function
44845>>>>>>>>>    
44845>>>>>>>>>    // Take care of any buffer initialization
44845>>>>>>>>>    Function Opening_View Returns Integer
44847>>>>>>>>>        Integer main
44847>>>>>>>>>        RowID riId
44847>>>>>>>>>        
44847>>>>>>>>>        // if a main DSO exists and it is not in use we must perform
44847>>>>>>>>>        // any required pre-seeding logic.
44847>>>>>>>>>        //Get Main_DD to Main
44847>>>>>>>>>        //If ( Main AND In_use_State(Main)=0 ) Begin
44847>>>>>>>>>        If ( wasNotinUse_State(Self))  Begin
44849>>>>>>>>>            // Always clear all file buffers and keep track of the record number
44849>>>>>>>>>            // that was in the main-dso's file-buffer.
44849>>>>>>>>>            // This is used by seed_data_sets to seed as required.
44849>>>>>>>>>            Get FileRowId 0 to riId
44850>>>>>>>>>            Set priInitialRowId to riId
44851>>>>>>>>>            //Set Initial_Main_record to Rec#
44851>>>>>>>>>            Send Prepare_Data_Sets         // allow custom setting
44852>>>>>>>>>            Broadcast Send clear_main_file // Send refind_records to main
44854>>>>>>>>>        End
44854>>>>>>>>>>
44854>>>>>>>>>    End_Function
44855>>>>>>>>>    
44855>>>>>>>>>    // only called if Main_DD exists and it is not yet in-use
44855>>>>>>>>>    Procedure Prepare_Data_Sets
44857>>>>>>>>>    End_Procedure
44858>>>>>>>>>    
44858>>>>>>>>>    // added to make the file buffers more reliable
44858>>>>>>>>>    Procedure Entering_Scope Returns Integer
44860>>>>>>>>>        Integer rVal
44860>>>>>>>>>        Forward Get MSG_entering_scope to rVal
44862>>>>>>>>>        // The refind is probably a feature that should always happen.
44862>>>>>>>>>        // The main-data-set was a way to make this backwards compatable.
44862>>>>>>>>>        // Maybe that made no sense.
44862>>>>>>>>>        If (rVal = 0) ;            Broadcast Send refind_DD_records // only refinds in-use DDs.
44866>>>>>>>>>        Procedure_Return rVal
44867>>>>>>>>>    End_Procedure
44868>>>>>>>>>    
44868>>>>>>>>>    // Augment to keep track of the scope that had the focus when this
44868>>>>>>>>>    // view was exited. Exiting_Scope seems to get called at the right
44868>>>>>>>>>    // times - only when focus is moved to an object outside of view's focus.
44868>>>>>>>>>    Procedure Exiting_Scope Handle hoNewScope
44870>>>>>>>>>        Integer rVal
44870>>>>>>>>>        Forward Get MSG_Exiting_Scope hoNewScope to rVal
44872>>>>>>>>>        If (rVal = 0) ;            Set Last_View_Focus to (Current_Scope(Self))
44875>>>>>>>>>    End_Procedure
44876>>>>>>>>>    
44876>>>>>>>>>    //  Augmented to allow views to take the focus without changing the
44876>>>>>>>>>    //  focus within the object. The property Auto_top_View_State controls
44876>>>>>>>>>    //  this. If true, always return to first object, first item. If false
44876>>>>>>>>>    //  return to current-item of scope focus (when possible).
44876>>>>>>>>>    //
44876>>>>>>>>>    Procedure Activate Returns Integer
44878>>>>>>>>>        Integer rVal Foc
44878>>>>>>>>>        If ( Auto_Top_View_State(Self)=0 and ; // Do we want behavior?            scope_state(Self) and ;           // s/b true.            Active_state(Self) ) Begin        // Only if active.
44880>>>>>>>>>            // Last_View_Focus is the last scope to have the focus.
44880>>>>>>>>>            // It should be active (if not the prop is 0).
44880>>>>>>>>>            // If for some reason the focus is 0, do a vanilla activate.
44880>>>>>>>>>            Get Last_View_Focus to Foc
44881>>>>>>>>>            If Foc ;                Set Current_Scope to Foc
44884>>>>>>>>>            Else ;                Forward Get Msg_Activate to rVal
44887>>>>>>>>>        End
44887>>>>>>>>>>
44887>>>>>>>>>        Else Begin
44888>>>>>>>>>            Forward Get Msg_Activate to rVal
44890>>>>>>>>>            // first Item of first object.
44890>>>>>>>>>            If ( Rval=0 and Auto_Top_Item_State(Self) ) ;                Send Beginning_of_Panel
44893>>>>>>>>>        End
44893>>>>>>>>>>
44893>>>>>>>>>        Procedure_Return rVal
44894>>>>>>>>>    End_Procedure
44895>>>>>>>>>    
44895>>>>>>>>>    // Views don't delegate to get this property. It uses system default
44895>>>>>>>>>    Function Default_Static_Server_State Returns Integer
44897>>>>>>>>>        Function_Return DEFAULT_VIEW_STATIC_SERVER_STATE
44898>>>>>>>>>    End_Function
44899>>>>>>>>>    
44899>>>>>>>>>End_Class
44900>>>>>>>>>
44900>>>>>>>>>//
44900>>>>>>>>>//  Client for Selection Lists.
44900>>>>>>>>>//
44900>>>>>>>>>//  Selection_lists and Pick_lists need to know if they should
44900>>>>>>>>>//  move their values out. With simple sel/pick lists it figures this
44900>>>>>>>>>//  out if the list is a popup object. (POPUP sets the property
44900>>>>>>>>>//  move_value_out_state to TRUE. If the sel\pick list needs to be
44900>>>>>>>>>//  encapulsated by a client the actual list object is no longer a
44900>>>>>>>>>//  popup (the client is). We need this special client to set the
44900>>>>>>>>>//  move_value_out_state of the list. It does this by broadcasting
44900>>>>>>>>>//  this to all objects. This only works if the sel/pick list object is
44900>>>>>>>>>//  a direct child of the client (which it always will be).
44900>>>>>>>>>//
44900>>>>>>>>>//  Also note that this class supports movable objects
44900>>>>>>>>>
44900>>>>>>>>>Register_Procedure Set Move_Value_Out_State Integer State
44900>>>>>>>>>
44900>>>>>>>>>// used to catch old obsolete syntax
44900>>>>>>>Use DFNav_mx.pkg // Navigation changes for DF DEOs
Including file: Dfnav_mx.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Dfnav_mx.pkg)
44900>>>>>>>>>Use VDFBase.pkg
44900>>>>>>>>>
44900>>>>>>>>>Class DFnavigate_mixin is a Mixin
44901>>>>>>>>>    
44901>>>>>>>>>    Procedure define_DFNavigation
44903>>>>>>>>>        
44903>>>>>>>>>        On_Key kSwitch            Send Switch_Next_Area   PRIVATE
44904>>>>>>>>>        On_Key kSwitch_Back       Send Switch_Prior_Area  PRIVATE
44905>>>>>>>>>        
44905>>>>>>>>>        //  Change Panel switching to view switching.
44905>>>>>>>>>        //  The messages Switch_next_view and Switch_Prior_View
44905>>>>>>>>>        //  need to be resolved (via delegation) in the view object.
44905>>>>>>>>>        //  This means that all dfentry object must be placed inside
44905>>>>>>>>>        //  of a view object. This might cause problems ... we will see.
44905>>>>>>>>>        
44905>>>>>>>>>    End_Procedure
44906>>>>>>>>>    
44906>>>>>>>>>    Procedure Close_Panel
44908>>>>>>>>>        Send Exit_Function
44909>>>>>>>>>    End_Procedure
44910>>>>>>>>>    
44910>>>>>>>>>End_Class
44911>>>>>>>Use dfConfrm.pkg
44911>>>>>>>Use Dfdbmdpn.pkg // adds obsolete pointerButton for dbModalPanel
Including file: Dfdbmdpn.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Dfdbmdpn.pkg)
44911>>>>>>>>>Use Windows.pkg
44911>>>>>>>>>
44911>>>>>>>>>Class PointerButton is a Button
44912>>>>>>>>>    
44912>>>>>>>>>    Procedure Construct_Object
44914>>>>>>>>>        Forward Send Construct_Object
44916>>>>>>>>>        Set focus_mode to pointer_Only
44917>>>>>>>>>    End_Procedure
44918>>>>>>>>>    
44918>>>>>>>>>    Procedure Command Integer i1 Integer i2
44920>>>>>>>>>        Send Redirect_Message
44921>>>>>>>>>    End_Procedure
44922>>>>>>>>>    
44922>>>>>>>>>    Procedure Redirect_Message Returns Integer
44924>>>>>>>>>        Integer msg obj rval
44924>>>>>>>>>        Get message 0 to Msg
44925>>>>>>>>>        Get Aux_Value 0 to obj
44926>>>>>>>>>        If Msg ;            Get Msg of ( If(obj, obj, Focus(desktop)) ) to rval
44929>>>>>>>>>        Procedure_Return rval
44930>>>>>>>>>    End_Procedure
44931>>>>>>>>>    
44931>>>>>>>>>End_Class
44932>>>>>>>Use Dfdafmac.pkg
Including file: Dfdafmac.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Dfdafmac.pkg)
44932>>>>>>>>>Use Windows.pkg
44932>>>>>>>>>Use dfcursor.pkg
44932>>>>>>>>>
44932>>>>>>>>>
44932>>>>>>>>>//  This expects to create a view INSIDE of another object
44932>>>>>>>>>//  (Like a panel)
44932>>>>>>>>>//
44932>>>>>>>>>
44932>>>>>>>>>
44932>>>>>>>>>Define DEFERRED_OBJECT for Deferred_View
44932>>>>>>>>>
44932>>>>>>>>>Class CD_Client is a Container
44933>>>>>>>>>    
44933>>>>>>>>>    Procedure Construct_Object
44935>>>>>>>>>        Forward Send Construct_Object
44937>>>>>>>>>        
44937>>>>>>>>>        Property Integer Created_object_id 0
44938>>>>>>>>>        
44938>>>>>>>>>        Set focus_mode to nonfocusable
44939>>>>>>>>>    End_Procedure
44940>>>>>>>>>    
44940>>>>>>>>>    Procedure Popup
44942>>>>>>>>>        Send Popup_Modal
44943>>>>>>>>>    End_Procedure
44944>>>>>>>>>    
44944>>>>>>>>>    Register_Function Destroy_Object_State Returns Integer
44944>>>>>>>>>    
44944>>>>>>>>>    // is augmented by object instance. Should never
44944>>>>>>>>>    // be called.
44944>>>>>>>>>    Function Popup_Handle Returns Handle
44946>>>>>>>>>        Error DFERR_PROGRAM "Improper use of CD_Popup_Object command"
44947>>>>>>>>>>
44947>>>>>>>>>    End_Function
44948>>>>>>>>>    
44948>>>>>>>>>    Procedure Popup_Modal Returns Integer
44950>>>>>>>>>        Integer iRet
44950>>>>>>>>>        Handle hoId
44950>>>>>>>>>        Boolean bDestroy
44950>>>>>>>>>        Get Popup_Handle to hoId
44951>>>>>>>>>        If hoId Begin
44953>>>>>>>>>            Get msg_Popup_Modal of hoId to iRet
44954>>>>>>>>>            Get Destroy_Object_State of hoId to bDestroy
44955>>>>>>>>>            If bDestroy Begin
44957>>>>>>>>>                Send Destroy of hoId
44958>>>>>>>>>                Set Created_Object_Id to 0
44959>>>>>>>>>            End
44959>>>>>>>>>>
44959>>>>>>>>>            Procedure_Return iRet
44960>>>>>>>>>        End
44960>>>>>>>>>>
44960>>>>>>>>>    End_Procedure
44961>>>>>>>>>    
44961>>>>>>>>>End_Class
44962>>>>>>>>>
44962>>>>>>>>>
44962>>>>>>>>>
44962>>>>>>>
44962>>>>>>>Register_Procedure DoSaveEnvironment Handle hoContainer Boolean bProgram
44962>>>>>>>Register_Procedure DoLoadEnvironment Handle hoContainer Boolean bProgram
44962>>>>>>>
44962>>>>>>>//
44962>>>>>>>//  Grouping classes: Used within views to group objects
44962>>>>>>>//
44962>>>>>>>//  dbContainer3d_
44962>>>>>>>//     dbContainer3d
44962>>>>>>>//
44962>>>>>>>Class dbContainer3d_ is a Container3d STARTMAC ECstart
44963>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
44963>>>>>>>    Import_Class_Protocol Entry_Client_mixin // mixin in CM DEO behaviors
44964>>>>>>>    
44964>>>>>>>    //  Defeat the activating augmentation for auto-locate
44964>>>>>>>    //
44964>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
44964>>>>>>>    Procedure Activating //Returns Integer
44966>>>>>>>        Integer RVal
44966>>>>>>>        Forward Get MSG_activating to rVal
44968>>>>>>>        Procedure_Return rVal
44969>>>>>>>    End_Procedure
44970>>>>>>>End_Class
44971>>>>>>>
44971>>>>>>>Class dbContainer3d is a dbContainer3d_
44972>>>>>>>    Procedure Construct_Object
44974>>>>>>>        Forward Send Construct_Object No_Image
44976>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
44977>>>>>>>    End_Procedure
44978>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
44979>>>>>>>End_Class
44980>>>>>>>
44980>>>>>>>//
44980>>>>>>>// Group Based containers
44980>>>>>>>//
44980>>>>>>>//  dbGroup_
44980>>>>>>>//     dbGroup
44980>>>>>>>//
44980>>>>>>>Class dbGroup_ is a Group STARTMAC ECstart
44981>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
44981>>>>>>>    
44981>>>>>>>    Import_Class_Protocol Entry_Client_mixin
44982>>>>>>>    
44982>>>>>>>    //  Defeat the activating augmentation for auto-locate
44982>>>>>>>    //
44982>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
44982>>>>>>>    Procedure Activating //Returns Integer
44984>>>>>>>        Integer RVal
44984>>>>>>>        Forward Get MSG_activating to rVal
44986>>>>>>>        Procedure_Return rVal
44987>>>>>>>    End_Procedure
44988>>>>>>>End_Class
44989>>>>>>>
44989>>>>>>>Class dbGroup is a dbGroup_
44990>>>>>>>    Procedure Construct_Object
44992>>>>>>>        Forward Send Construct_Object No_Image
44994>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
44995>>>>>>>    End_Procedure
44996>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
44997>>>>>>>End_Class
44998>>>>>>>
44998>>>>>>>
44998>>>>>>>//
44998>>>>>>>// Invisible Grouping object
44998>>>>>>>//
44998>>>>>>>//   dbContainer - invisible container
44998>>>>>>>//
44998>>>>>>>Class dbContainer is an dbContainer3d
44999>>>>>>>    Import_Class_Protocol NonVisual_Container_Mixin
45000>>>>>>>End_Class
45001>>>>>>>
45001>>>>>>>//
45001>>>>>>>// View Support (views are mdi dialogs)
45001>>>>>>>//
45001>>>>>>>//   dbAppClient_
45001>>>>>>>//     dbAppView_
45001>>>>>>>//       dbView
45001>>>>>>>//
45001>>>>>>>Class dbAppClient_ is a View  STARTMAC ECstart
45002>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
45002>>>>>>>    
45002>>>>>>>    Import_Class_Protocol Entry_Client_mixin
45003>>>>>>>    
45003>>>>>>>    //  Defeat the activating augmentation for auto-locate
45003>>>>>>>    //
45003>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
45003>>>>>>>    Procedure Activating //Returns Integer
45005>>>>>>>        Integer RVal
45005>>>>>>>        Forward Get MSG_activating to rVal
45007>>>>>>>        Procedure_Return rVal
45008>>>>>>>    End_Procedure
45009>>>>>>>End_Class
45010>>>>>>>
45010>>>>>>>Class dbAppView_ is a dbAppClient_
45011>>>>>>>    Import_Class_Protocol entry_view_Client_mixin
45012>>>>>>>End_Class
45013>>>>>>>
45013>>>>>>>Class dbView is a dbAppView_
45014>>>>>>>    
45014>>>>>>>    Procedure Construct_Object
45016>>>>>>>        Forward Send Construct_Object No_Image
45018>>>>>>>        
45018>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
45019>>>>>>>        // dialog views get activated as popup objects.
45019>>>>>>>        Set Dso_Detach_Mode to Detach_Always
45020>>>>>>>        
45020>>>>>>>        // set default verify messages. These are good defaults. The
45020>>>>>>>        // developer may wish to change these in their object or sub-class.
45020>>>>>>>        // Note: these messsages are defined in dfconfrm.pkg
45020>>>>>>>        Set Verify_Data_Loss_Msg   to (RefFunc(Data_Loss_Confirmation))
45021>>>>>>>        Set Verify_Delete_Msg      to (RefFunc(Delete_Confirmation))
45022>>>>>>>        Set Verify_Save_Msg        to (RefFunc(Save_Confirmation))
45023>>>>>>>        Set Verify_Exit_Msg        to (RefFunc(Exit_Loss_Confirmation))
45024>>>>>>>        //
45024>>>>>>>    End_Procedure
45025>>>>>>>    
45025>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
45026>>>>>>>    
45026>>>>>>>    //  Returns TRUE to indicate that this is a DEO. This is used by
45026>>>>>>>    //  delegation to figure out if you are within a DEO and should therefore
45026>>>>>>>    //  send a DEO message. DEO clients set this true
45026>>>>>>>    //
45026>>>>>>>    Function DEO_Object Returns Integer
45028>>>>>>>        Function_Return 1
45029>>>>>>>    End_Function
45030>>>>>>>    
45030>>>>>>>    //
45030>>>>>>>    //  Activate message for views that:
45030>>>>>>>    //  1. restores the view if it is minimized
45030>>>>>>>    //  2. Maintains the current scope's focus.
45030>>>>>>>    //
45030>>>>>>>    Procedure Activate_current_scope
45032>>>>>>>        If ( View_mode(Self)=VIEWMODE_ICONIZE ) ;            Set view_mode to viewmode_normal
45035>>>>>>>        Set Current_Scope to Self
45036>>>>>>>    End_Procedure
45037>>>>>>>    
45037>>>>>>>    // ------------deprecated....Use Object_label.
45037>>>>>>>    //  Pass full object name - return the relative name
45037>>>>>>>    //  e.g.,  Main.View.Obj1 --> Obj1
45037>>>>>>>    Function Local_Object_name String nm Returns String
45039>>>>>>>        Integer ps
45039>>>>>>>        Repeat
45039>>>>>>>>
45039>>>>>>>            Move (Pos( ".", nm)) to ps
45040>>>>>>>            If (ps = 0) ;                Function_Return nm
45043>>>>>>>            Increment ps
45044>>>>>>>            Move (Mid( Nm, 255, ps)) to Nm
45045>>>>>>>        Loop
45046>>>>>>>>
45046>>>>>>>    End_Function
45047>>>>>>>    
45047>>>>>>>    Function View_Changed Returns Integer
45049>>>>>>>        Integer Changed
45049>>>>>>>        // first see if any DDOs at this level are changed.
45049>>>>>>>        Broadcast Get Data_Set_Should_Save to Changed // Ask for changes in Data-sets
45051>>>>>>>        // if no changes, see if we have any sub-views that are changed
45051>>>>>>>        // This is used to catch tab-view pages.
45051>>>>>>>        If not Changed ;            Broadcast Get SubView_Changed to Changed
45055>>>>>>>        Function_Return Changed
45056>>>>>>>    End_Function
45057>>>>>>>    
45057>>>>>>>    Procedure Close_Client
45059>>>>>>>        Send Exit_Function
45060>>>>>>>    End_Procedure
45061>>>>>>>    
45061>>>>>>>End_Class
45062>>>>>>>
45062>>>>>>>
45062>>>>>>>
45062>>>>>>>//
45062>>>>>>>// ToolPanel Based Classes
45062>>>>>>>//
45062>>>>>>>//  dbFloatingPanel_
45062>>>>>>>//     dbFloatingPanel
45062>>>>>>>//        dbViewFloatingPanel
45062>>>>>>>//           dbViewToolPanel
45062>>>>>>>//           dbModalPanel <---this will get used
45062>>>>>>>//
45062>>>>>>>Class dbFloatingPanel_ is a FloatingPanel STARTMAC ECstart
45063>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
45063>>>>>>>    
45063>>>>>>>    Import_Class_Protocol Entry_Client_mixin
45064>>>>>>>    
45064>>>>>>>    //  Defeat the activating augmentation for auto-locate
45064>>>>>>>    //
45064>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
45064>>>>>>>    Procedure Activating //Returns Integer
45066>>>>>>>        Integer RVal
45066>>>>>>>        Forward Get MSG_activating to rVal
45068>>>>>>>        Procedure_Return rVal
45069>>>>>>>    End_Procedure
45070>>>>>>>End_Class
45071>>>>>>>
45071>>>>>>>Class dbFloatingPanel is a dbFloatingPanel_
45072>>>>>>>    Procedure Construct_Object
45074>>>>>>>        Forward Send Construct_Object No_Image
45076>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
45077>>>>>>>        Set Minimize_Icon to False
45078>>>>>>>        Set Maximize_Icon to False
45079>>>>>>>    End_Procedure
45080>>>>>>>    
45080>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
45081>>>>>>>    
45081>>>>>>>    //  Returns TRUE to indicate that this is a DEO. This is used by
45081>>>>>>>    //  delegation to figure out if you are within a DEO and should therefore
45081>>>>>>>    //  send a DEO message. DEO clients set this true
45081>>>>>>>    //
45081>>>>>>>    Function DEO_Object Returns Integer
45083>>>>>>>        Function_Return 1
45084>>>>>>>    End_Function
45085>>>>>>>    
45085>>>>>>>    // we Modify this not delegate and look for a parent verify exit msg if this msg is 0.
45085>>>>>>>    // We assume that toolpanels and dbModalPanels are self contained in terms of opening and closing
45085>>>>>>>    // and therefore should only use themselves to figure out if there is a verify exit msg. This is needed
45085>>>>>>>    // in case a db modal panel physically placed inside of another DEO.
45085>>>>>>>    Function Verify_Exit_msg Returns Integer
45087>>>>>>>        Integer msg#
45087>>>>>>>        Get private.verify_exit_msg to msg#
45088>>>>>>>        // don't look at parent DEOs like we do elsewhere.
45088>>>>>>>        //if (msg# = 0 AND Component_State(self)) ;
45088>>>>>>>        //    delegate get verify_exit_msg to msg#
45088>>>>>>>        Function_Return msg#
45089>>>>>>>    End_Function
45090>>>>>>>    
45090>>>>>>>End_Class
45091>>>>>>>
45091>>>>>>>Class dbViewFloatingPanel is a dbFloatingPanel
45092>>>>>>>    Import_Class_Protocol entry_view_Client_mixin
45093>>>>>>>End_Class
45094>>>>>>>
45094>>>>>>>Class dbViewToolPanel is a dbViewFloatingPanel
45095>>>>>>>    
45095>>>>>>>    Procedure Construct_Object
45097>>>>>>>        Forward Send Construct_Object No_Image
45099>>>>>>>        Set Extended_Window_Style to WS_EX_TOOLWINDOW True
45100>>>>>>>    End_Procedure
45101>>>>>>>    
45101>>>>>>>End_Class
45102>>>>>>>
45102>>>>>>>//  EntryModalPanel
45102>>>>>>>
45102>>>>>>>Class dbModalPanel is a dbViewFloatingPanel
45103>>>>>>>    Procedure Construct_Object
45105>>>>>>>        Forward Send Construct_Object No_Image
45107>>>>>>>        
45107>>>>>>>        Set Extended_Window_Style to WS_EX_DLGMODALFRAME True
45108>>>>>>>        Set Modal_State to True
45109>>>>>>>        
45109>>>>>>>        Property Integer List_Object  0
45110>>>>>>>        
45110>>>>>>>        Property Integer Button_Height     14
45111>>>>>>>        Property Integer Button_Width      50
45112>>>>>>>        
45112>>>>>>>        Property Integer Max_Text_Extent   0
45113>>>>>>>        
45113>>>>>>>        Object Button_Ids is an array
45115>>>>>>>        End_Object
45116>>>>>>>    End_Procedure
45117>>>>>>>    
45117>>>>>>>    Function Button_Count Returns Integer
45119>>>>>>>        Function_Return (Item_count(Button_Ids))
45120>>>>>>>    End_Function
45121>>>>>>>    
45121>>>>>>>    Procedure Add_Button String sLabel Integer hMsg Integer hoTo
45123>>>>>>>        Integer hoBtn tx
45123>>>>>>>        // 8.2 - use newer syntax for creating dynamic objects
45123>>>>>>>        Get Create U_PointerButton to hoBtn
45124>>>>>>>        Set peAnchors of hoBtn to anBottomRight
45125>>>>>>>        Set Value of hoBtn 0 to sLabel
45126>>>>>>>        Set Message of hoBtn 0 to hMsg
45127>>>>>>>        If (Num_Arguments>2) ;            Set aux_value of hoBtn 0 to hoTo
45130>>>>>>>        Get Text_Extent of hoBtn sLabel to tx
45131>>>>>>>        Move (low(tx)) to tx
45132>>>>>>>        Set Array_Value of Button_Ids (Button_Count(Self)) to hoBtn
45133>>>>>>>        If (tx > Max_Text_Extent(Self));            Set Max_Text_Extent to tx
45136>>>>>>>    End_Procedure
45137>>>>>>>    
45137>>>>>>>    Procedure Size_Buttons
45139>>>>>>>        Integer bheight bwidth nb obj Bobj bt mt gsiz gwd
45139>>>>>>>        
45139>>>>>>>        Get button_height to bheight
45140>>>>>>>        Get button_width  to bwidth
45141>>>>>>>        Get Button_count to nb
45142>>>>>>>        Decrement nb
45143>>>>>>>        
45143>>>>>>>        Move Button_ids to obj
45144>>>>>>>        
45144>>>>>>>        For bt from 0 to nb
45150>>>>>>>>
45150>>>>>>>            Get integer_value of obj bt to bobj // button id
45151>>>>>>>            Set Size of bobj to bheight bwidth       // set dflt size
45152>>>>>>>            If (bt = 0) Begin
45154>>>>>>>                Get Max_Text_Extent to mt
45155>>>>>>>                Add 8 to mt
45156>>>>>>>                Get guisize of bobj to gsiz
45157>>>>>>>                Move (low(gsiz)) to gwd
45158>>>>>>>                If (gwd < mt) Begin
45160>>>>>>>                    Set guisize of bobj to (hi(gsiz)) mt
45161>>>>>>>                    Send adjust_logicals to bobj
45162>>>>>>>                    Move (low(size(bobj))) to bwidth
45163>>>>>>>                    Set Button_width to bwidth
45164>>>>>>>                End
45164>>>>>>>>
45164>>>>>>>            End
45164>>>>>>>>
45164>>>>>>>        Loop
45165>>>>>>>>
45165>>>>>>>    End_Procedure
45166>>>>>>>    
45166>>>>>>>    Procedure Position_Child_Objects
45168>>>>>>>        Integer lsz psz wd pwd ht llc nb mt bobj obj cht col bt list_obj
45168>>>>>>>        Integer rmrgn swd
45168>>>>>>>        
45168>>>>>>>        If (not(pbSizeToClientArea(Self))) Begin
45170>>>>>>>            // if using old sizing, we have not changed anything for 14.0
45170>>>>>>>            If (caption_bar(Self)) ;                Move (Hi(Physical_fontsize(Self))+4+6) to cht
45173>>>>>>>            Else ;                Move 0 to cht
45175>>>>>>>            
45175>>>>>>>            Get GUISize to psz               // size of panel
45176>>>>>>>            Get List_Object to List_obj      // id of the list object
45177>>>>>>>            If list_obj Begin
45179>>>>>>>                Get GUISize of list_obj to lSz
45180>>>>>>>                Get GUIlocation of list_obj to llc
45181>>>>>>>                Move (low(llc)+low(lsz)+2) to rmrgn
45182>>>>>>>            End
45182>>>>>>>>
45182>>>>>>>            Else ;                Move (low(psz)-8) to rmrgn
45184>>>>>>>            
45184>>>>>>>            Get Button_count to nb        // number of buttons
45185>>>>>>>            
45185>>>>>>>            If (nb = 0) ;                Move ( hi(psz) - 4 - cht - 8) to ht
45188>>>>>>>            Else Begin
45189>>>>>>>                Move Button_ids to obj
45190>>>>>>>                Get integer_value of obj 0 to bobj
45191>>>>>>>                Get guisize of bobj to ht
45192>>>>>>>                Move (low(ht)) to wd
45193>>>>>>>                Move ( hi(ht)) to ht
45194>>>>>>>                Move 8 to swd // width of each space
45195>>>>>>>                If ( (rmrgn - ((wd+swd)*nb-swd)) < 0 ) ;                    Move 2 to swd
45198>>>>>>>                Move ( hi(psz) - ht - 4 - cht - 8) to ht
45199>>>>>>>                
45199>>>>>>>                Move (rmrgn-wd) to col
45200>>>>>>>                Decrement nb
45201>>>>>>>                While nb ge 0
45205>>>>>>>                    Get integer_value of obj nb to bobj
45206>>>>>>>                    Set GUIlocation of bobj to ht col
45207>>>>>>>                    Send Adjust_Logicals to bobj
45208>>>>>>>                    Move (col - swd - wd) to col
45209>>>>>>>                    Decrement nb
45210>>>>>>>                End
45211>>>>>>>>
45211>>>>>>>            End
45211>>>>>>>>
45211>>>>>>>            
45211>>>>>>>            If list_obj Begin
45213>>>>>>>                Get GUISize of list_obj to lSz
45214>>>>>>>                Get GUIlocation of list_obj to llc
45215>>>>>>>                Move ( ht - Hi(llc) - 12 ) to ht
45216>>>>>>>                Set GUIsize of list_obj to ht (low(lsz))
45217>>>>>>>                Send Adjust_Logicals to list_obj
45218>>>>>>>            End
45218>>>>>>>>
45218>>>>>>>        End
45218>>>>>>>>
45218>>>>>>>        Else Begin
45219>>>>>>>            
45219>>>>>>>            // this is still obsolete, but we will make it work with client sizing, which makes it simpler actually
45219>>>>>>>            // bote that 8 is used through out as the GUI spacing amount. This is legacy and will not be changed
45219>>>>>>>            
45219>>>>>>>            Get GUISize to psz               // size of panel
45220>>>>>>>            Get List_Object to List_obj      // id of the list object
45221>>>>>>>            If list_obj Begin
45223>>>>>>>                Get GUISize of list_obj to lSz
45224>>>>>>>                Get GUIlocation of list_obj to llc
45225>>>>>>>                Move (low(llc)+low(lsz)) to rmrgn
45226>>>>>>>            End
45226>>>>>>>>
45226>>>>>>>            Else Begin
45227>>>>>>>                Move (low(psz)-8) to rmrgn
45228>>>>>>>            End
45228>>>>>>>>
45228>>>>>>>            
45228>>>>>>>            Get Button_count to nb        // number of buttons
45229>>>>>>>            
45229>>>>>>>            If (nb = 0) ;                Move ( hi(psz) ) to ht
45232>>>>>>>            Else Begin
45233>>>>>>>                Move Button_ids to obj
45234>>>>>>>                Get integer_value of obj 0 to bobj
45235>>>>>>>                Get guisize of bobj to ht
45236>>>>>>>                Move (low(ht)) to wd
45237>>>>>>>                Move ( hi(ht)) to ht
45238>>>>>>>                Move 8 to swd // width of each space
45239>>>>>>>                Move ( hi(psz) - ht - 8) to ht
45240>>>>>>>                
45240>>>>>>>                Move (rmrgn-wd) to col
45241>>>>>>>                Decrement nb
45242>>>>>>>                While (nb>=0)
45246>>>>>>>                    Get integer_value of obj nb to bobj
45247>>>>>>>                    Set GUIlocation of bobj to ht col
45248>>>>>>>                    Send Adjust_Logicals to bobj
45249>>>>>>>                    Move (col - swd - wd) to col
45250>>>>>>>                    Decrement nb
45251>>>>>>>                End
45252>>>>>>>>
45252>>>>>>>            End
45252>>>>>>>>
45252>>>>>>>            
45252>>>>>>>            If list_obj Begin
45254>>>>>>>                Get GUISize of list_obj to lSz
45255>>>>>>>                Get GUIlocation of list_obj to llc
45256>>>>>>>                Move ( ht - Hi(llc) - 8 ) to ht
45257>>>>>>>                Set GUIsize of list_obj to ht (low(lsz))
45258>>>>>>>                Send Adjust_Logicals of list_obj
45259>>>>>>>            End
45259>>>>>>>>
45259>>>>>>>        End
45259>>>>>>>>
45259>>>>>>>    End_Procedure
45260>>>>>>>    
45260>>>>>>>    Procedure End_Construct_Object
45262>>>>>>>        Send Size_Buttons
45263>>>>>>>        Send Position_Child_Objects
45264>>>>>>>        Forward Send end_construct_object
45266>>>>>>>    End_Procedure
45267>>>>>>>    
45267>>>>>>>    Procedure Search
45269>>>>>>>        Integer Obj#
45269>>>>>>>        Get List_Object to obj#
45270>>>>>>>        If Obj# ;            Send Search to Obj#
45273>>>>>>>    End_Procedure
45274>>>>>>>    
45274>>>>>>>    // created for advanced CD_popup_object support. Returns the true handle of the
45274>>>>>>>    // popup object whether it is a regular object or a CD popup object.
45274>>>>>>>    Function Popup_Handle Returns Handle
45276>>>>>>>        Function_Return Self
45277>>>>>>>    End_Function
45278>>>>>>>    
45278>>>>>>>End_Class
45279>>>>>>>
45279>>>>>>>//
45279>>>>>>>// Panel Based Classes
45279>>>>>>>//
45279>>>>>>>//  dbPanel_
45279>>>>>>>//     dbPanel
45279>>>>>>>//        dbViewPanel_
45279>>>>>>>//           dbViewPanel
45279>>>>>>>//
45279>>>>>>>// None of these are likely to be used
45279>>>>>>>//
45279>>>>>>>
45279>>>>>>>Class dbPanel_ is a BasicPanel STARTMAC ECstart
45280>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
45280>>>>>>>    
45280>>>>>>>    Import_Class_Protocol Entry_Client_mixin
45281>>>>>>>    
45281>>>>>>>    //  Defeat the activating augmentation for auto-locate
45281>>>>>>>    //
45281>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
45281>>>>>>>    Procedure Activating //Returns Integer
45283>>>>>>>        Integer RVal
45283>>>>>>>        Forward Get MSG_activating to rVal
45285>>>>>>>        Procedure_Return rVal
45286>>>>>>>    End_Procedure
45287>>>>>>>End_Class
45288>>>>>>>
45288>>>>>>>Class dbPanel is a dbPanel_
45289>>>>>>>    Procedure Construct_Object
45291>>>>>>>        Forward Send Construct_Object No_Image
45293>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
45294>>>>>>>    End_Procedure
45295>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
45296>>>>>>>End_Class
45297>>>>>>>
45297>>>>>>>Class dbViewPanel_ is a dbPanel
45298>>>>>>>    Import_Class_Protocol entry_view_Client_mixin
45299>>>>>>>End_Class
45300>>>>>>>
45300>>>>>>>Class dbViewPanel is a dbViewPanel_
45301>>>>>>>    Procedure Construct_Object
45303>>>>>>>        Forward Send Construct_Object No_Image
45305>>>>>>>    End_Procedure
45306>>>>>>>    
45306>>>>>>>    //  Returns TRUE to indicate that this is a DEO. This is used by
45306>>>>>>>    //  delegation to figure out if you are within a DEO and should therefore
45306>>>>>>>    //  send a DEO message. DEO clients set this true
45306>>>>>>>    //
45306>>>>>>>    Function DEO_Object Returns Integer
45308>>>>>>>        Function_Return 1
45309>>>>>>>    End_Function
45310>>>>>>>End_Class
45311>>>>>Use DFbitmap.pkg
Including file: Dfbitmap.pkg    (C:\Program Files\DataFlex 20.1\Pkg\Dfbitmap.pkg)
45311>>>>>>>Use LanguageText.pkg
45311>>>>>>>Use Windows.pkg
45311>>>>>>>Use File_Dlg.pkg
45311>>>>>>>
45311>>>>>>>Class BitmapContainer is a Container3D
45312>>>>>>>    
45312>>>>>>>    Procedure Construct_Object
45314>>>>>>>        Forward Send Construct_Object
45316>>>>>>>        
45316>>>>>>>        Property Integer Changed_State False
45317>>>>>>>        
45317>>>>>>>        // If true, double click sends Get Select_Bitmap which invokes
45317>>>>>>>        // an open file dialog
45317>>>>>>>        Property Integer Allow_Select_Bitmap_State  False
45318>>>>>>>        
45318>>>>>>>        // title for common file dialog
45318>>>>>>>        Property String Dialog_Caption C_$SelectBitmapFile
45319>>>>>>>        
45319>>>>>>>        // start-up directory for common file dialog
45319>>>>>>>        Property String Initial_Folder ""
45320>>>>>>>        
45320>>>>>>>        Send Define_ToolTip_Support_Mixin
45321>>>>>>>        
45321>>>>>>>        // this object should not take the focus
45321>>>>>>>        Set Focus_Mode to NonFocusable
45322>>>>>>>        Set Client_Area_State to False
45323>>>>>>>        Set pbUseFormWindowHandle to False   // must come after Define_ToolTip_Support_Mixin
45324>>>>>>>    End_Procedure
45325>>>>>>>    
45325>>>>>>>    Import_Class_Protocol ToolTip_Support_Mixin
45326>>>>>>>    
45326>>>>>>>    // Although this is not a client it should add child objects to
45326>>>>>>>    // the focus tree. Should only be textboxes!
45326>>>>>>>    //
45326>>>>>>>    Procedure Add_Focus Integer Obj
45328>>>>>>>        Forward Send Add_Focus Obj
45330>>>>>>>        Broadcast Send Add_Focus Self
45332>>>>>>>    End_Procedure
45333>>>>>>>    
45333>>>>>>>    // Popup an open file dialog and select a bitmap file. Returns file
45333>>>>>>>    // name
45333>>>>>>>    //
45333>>>>>>>    Function Select_Bitmap Returns String
45335>>>>>>>        String sFileName
45335>>>>>>>        String sPropVal
45335>>>>>>>        Integer iRet
45335>>>>>>>        Handle hoOpenFile
45335>>>>>>>        
45335>>>>>>>        Get Create U_OpenDialog to  hoOpenFile
45336>>>>>>>        // Mask will look like this: "Bitmaps (.bmp;*.rle)|*.bmp;*.rle|All Files (*.*)|*.*"
45336>>>>>>>        Set Filter_String  of hoOpenFile to (C_$Bitmaps * "(.bmp;*.rle)|*.bmp;*.rle|" + C_$AllFiles * "(*.*)|*.*")
45337>>>>>>>        Get Dialog_Caption to sPropVal
45338>>>>>>>        Set Dialog_Caption of hoOpenFile to sPropVal
45339>>>>>>>        Get Initial_Folder to sPropVal
45340>>>>>>>        Set Initial_Folder of hoOpenFile to sPropVal
45341>>>>>>>        Get Show_Dialog    of hoOpenFile  to iRet
45342>>>>>>>        If iRet ;            Get File_Name of hoOpenFile  to sFileName
45345>>>>>>>        Send Destroy of hoOpenFile
45346>>>>>>>        Function_Return sFileName
45347>>>>>>>    End_Function
45348>>>>>>>    
45348>>>>>>>    Procedure Invoke_Select_Bitmap
45350>>>>>>>        String sFileName
45350>>>>>>>        Get Select_Bitmap to sFileName
45351>>>>>>>        If (sFileName<>"") Begin
45353>>>>>>>            Set Bitmap to sFileName
45354>>>>>>>            Set Changed_State to True
45355>>>>>>>        End
45355>>>>>>>>
45355>>>>>>>    End_Procedure
45356>>>>>>>    
45356>>>>>>>    
45356>>>>>>>    // Augmented to invoke the filedialog to retrieve a new bitmap
45356>>>>>>>    Procedure Mouse_Click Integer i1 Integer i2
45358>>>>>>>        Forward Send Mouse_Click i1 i2
45360>>>>>>>        If (Allow_Select_Bitmap_State(Self)) Begin
45362>>>>>>>            Send Invoke_Select_Bitmap
45363>>>>>>>        End
45363>>>>>>>>
45363>>>>>>>    End_Procedure
45364>>>>>>>    
45364>>>>>>>    Procedure Page_Object Integer iState
45366>>>>>>>        Forward Send Page_Object iState
45368>>>>>>>        
45368>>>>>>>        // Handle tooltip support....
45368>>>>>>>        If (iState = 0) Begin
45370>>>>>>>            Send RequestDeleteToolTip
45371>>>>>>>        End
45371>>>>>>>>
45371>>>>>>>        Else Begin
45372>>>>>>>            Send RequestAddToolTip
45373>>>>>>>        End
45373>>>>>>>>
45373>>>>>>>    End_Procedure
45374>>>>>>>    
45374>>>>>>>    
45374>>>>>>>    // Called by Page_Object. Handles tooltip creation. We use a dedicated
45374>>>>>>>    // method to perform AddToolTip because it is often the case that Page_Object
45374>>>>>>>    // is implemented in a mixin class.
45374>>>>>>>    Procedure RequestAddToolTip
45376>>>>>>>        Send AddToolTip
45377>>>>>>>    End_Procedure
45378>>>>>>>    
45378>>>>>>>    
45378>>>>>>>    // Called by Page_Object. Handles tooltip removal.
45378>>>>>>>    Procedure RequestDeleteToolTip
45380>>>>>>>        Send DeleteToolTip
45381>>>>>>>    End_Procedure
45382>>>>>>>End_Class
45383>>>>>Use GlobalFunctionsProcedures.pkg
45383>>>>>Use cRichEdit.pkg
Including file: cRichEdit.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cRichEdit.pkg)
45383>>>>>>>Use Windows.pkg
45383>>>>>>>Use cEdit_Mixin.pkg
Including file: cEdit_mixin.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cEdit_mixin.pkg)
45383>>>>>>>>>// mixin used by both cRichEdit and cTextEdit
45383>>>>>>>>>Use Windows.pkg
45383>>>>>>>>>
45383>>>>>>>>>// for undoType and RedoType
45383>>>>>>>>>Enum_List
45383>>>>>>>>>    Define utUnknown
45383>>>>>>>>>    Define utTyping
45383>>>>>>>>>    Define utDelete
45383>>>>>>>>>    Define utDragDrop
45383>>>>>>>>>    Define utCut
45383>>>>>>>>>    Define utPaste
45383>>>>>>>>>End_Enum_List
45383>>>>>>>>>
45383>>>>>>>>>Class cEdit_Mixin is a Mixin
45384>>>>>>>>>    
45384>>>>>>>>>    Procedure Define_cEdit_Mixin
45386>>>>>>>>>        Send Define_Standard_Object_Mixin
45387>>>>>>>>>        Send Define_Dflabel_Mixin
45388>>>>>>>>>        Send Define_ToolTip_Support_Mixin
45389>>>>>>>>>        
45389>>>>>>>>>        Set Label_Offset to 1 0
45390>>>>>>>>>        Set Label_Justification_Mode to Jmode_Top
45391>>>>>>>>>        Set pbUseFormWindowHandle to False     // Must come after Define_ToolTip_Support_Mixin
45392>>>>>>>>>        Set Color     to clWindow      // should be the default...also system colors don't work
45393>>>>>>>>>        Set TextColor to clWindowText  // should be the default
45394>>>>>>>>>        
45394>>>>>>>>>        Property Boolean Changed_State False
45395>>>>>>>>>        
45395>>>>>>>>>        Property Integer pbSuppressChange False
45396>>>>>>>>>        
45396>>>>>>>>>        Property Integer piPriorEnabledColor 0 // private, used by shadow_display
45397>>>>>>>>>        
45397>>>>>>>>>        Send Define_Shadow_Mixin
45398>>>>>>>>>        
45398>>>>>>>>>        Property Integer Floating_Menu_Object Default_Form_Floating_Menu_Id
45399>>>>>>>>>        
45399>>>>>>>>>        On_Key kEnter Send default_key
45400>>>>>>>>>        
45400>>>>>>>>>        Set Disable_default_action_button_state to True
45401>>>>>>>>>        
45401>>>>>>>>>    End_Procedure
45402>>>>>>>>>    
45402>>>>>>>>>    Import_Class_Protocol Standard_Object_Mixin
45403>>>>>>>>>    Import_Class_Protocol Dflabel_Mixin
45404>>>>>>>>>    Import_Class_Protocol Shadow_Mixin
45405>>>>>>>>>    Import_Class_Protocol ToolTip_Support_Mixin
45406>>>>>>>>>    
45406>>>>>>>>>    // currently there is no built in context menu support (old edit has one).
45406>>>>>>>>>    Procedure Mouse_Down2 Integer iWindowNumber Integer iPosition
45408>>>>>>>>>        Integer obj rval
45408>>>>>>>>>        Forward Send mouse_down2 iWindowNumber iPosition
45410>>>>>>>>>        Get Floating_Menu_object to obj
45411>>>>>>>>>        If obj Begin
45413>>>>>>>>>            If (Focus(desktop)<>Self) Begin
45415>>>>>>>>>                Get msg_Activate to rval
45416>>>>>>>>>            End
45416>>>>>>>>>>
45416>>>>>>>>>            If (Focus(desktop)=Self) Begin
45418>>>>>>>>>                Send Popup to obj
45419>>>>>>>>>            End
45419>>>>>>>>>>
45419>>>>>>>>>        End
45419>>>>>>>>>>
45419>>>>>>>>>    End_Procedure
45420>>>>>>>>>    
45420>>>>>>>>>    Function Object_Shadow_State Returns Integer
45422>>>>>>>>>        Function_Return (Private.Shadow_State(Self))
45423>>>>>>>>>    End_Function
45424>>>>>>>>>    
45424>>>>>>>>>    // enables or disables an active window. Allows enabled_state to be used after object is paged
45424>>>>>>>>>    Procedure Enable_Window Integer iState
45426>>>>>>>>>        Handle hWnd
45426>>>>>>>>>        Get Window_Handle to hWnd
45427>>>>>>>>>        If hWnd ;            Move (EnableWindow(hWnd,iState)) to hWnd
45430>>>>>>>>>    End_Procedure
45431>>>>>>>>>    
45431>>>>>>>>>    Procedure Set Current_Shadow_State Integer iState
45433>>>>>>>>>        Set Private.Shadow_State to iState     // used by get object_shadow_state/enabled_state
45434>>>>>>>>>        Set Window_Style to WS_DISABLED iState // used to set style before the object is paged
45435>>>>>>>>>        Send Enable_Window (not(iState))       // used to enable/disable after object is paged
45436>>>>>>>>>    End_Procedure
45437>>>>>>>>>    
45437>>>>>>>>>    
45437>>>>>>>>>    Procedure Shadow_Display
45439>>>>>>>>>        // control will take care of shadowing itself
45439>>>>>>>>>        Send Label_Shadow_Display // if object has a label text box, handle disabling this
45440>>>>>>>>>    End_Procedure
45441>>>>>>>>>    
45441>>>>>>>>>    Procedure Set Item_Shadow_State Integer iItem Integer iState
45443>>>>>>>>>    End_Procedure
45444>>>>>>>>>    
45444>>>>>>>>>    Function Item_Shadow_State Integer iItem Returns Integer
45446>>>>>>>>>    End_Function
45447>>>>>>>>>    
45447>>>>>>>>>    Procedure OnChange
45449>>>>>>>>>    End_Procedure
45450>>>>>>>>>    
45450>>>>>>>>>    Procedure OnMaxText
45452>>>>>>>>>    End_Procedure
45453>>>>>>>>>    
45453>>>>>>>>>    Procedure Command Longptr wParam Longptr lParam
45455>>>>>>>>>        Integer iParam
45455>>>>>>>>>        Forward Send Command wParam lParam
45457>>>>>>>>>        Move (hi(wParam)) to iParam
45458>>>>>>>>>        If (iParam=EN_CHANGE) Begin
45460>>>>>>>>>            // if we are supressing change notification, do nothing.
45460>>>>>>>>>            If (pbSuppressChange(Self)) ;                Procedure_Return
45463>>>>>>>>>            If not (changed_state(Self)) Begin
45465>>>>>>>>>                Set Changed_state to True
45466>>>>>>>>>            End
45466>>>>>>>>>>
45466>>>>>>>>>            Send OnChange
45467>>>>>>>>>        End
45467>>>>>>>>>>
45467>>>>>>>>>        Else If (iParam=EN_MAXTEXT) Begin
45470>>>>>>>>>            Send OnMaxText
45471>>>>>>>>>        End
45471>>>>>>>>>>
45471>>>>>>>>>    End_Procedure
45472>>>>>>>>>    
45472>>>>>>>>>    // Some messages trigger the command message with a change event. In some circumstances we must suppress this.
45472>>>>>>>>>    // The delete_data message and the page message both do this.
45472>>>>>>>>>    
45472>>>>>>>>>    Procedure Delete_Data
45474>>>>>>>>>        Boolean bWas
45474>>>>>>>>>        Get pbSuppressChange to bWas
45475>>>>>>>>>        Set pbSuppressChange to True // Delete_Data sends command which triggers change. We suppress that here
45476>>>>>>>>>        Forward Send delete_data
45478>>>>>>>>>        Set changed_state to False
45479>>>>>>>>>        Send OnChange
45480>>>>>>>>>        Set pbSuppressChange to bWas
45481>>>>>>>>>    End_Procedure
45482>>>>>>>>>    
45482>>>>>>>>>    Procedure Page Integer iState
45484>>>>>>>>>        Boolean bWas
45484>>>>>>>>>        Get pbSuppressChange to bWas
45485>>>>>>>>>        Set pbSuppressChange to True  // Page sends command which triggers change. We suppress that here
45486>>>>>>>>>        Forward Send Page iState
45488>>>>>>>>>        Set pbSuppressChange to bWas
45489>>>>>>>>>    End_Procedure
45490>>>>>>>>>    
45490>>>>>>>>>    
45490>>>>>>>>>    Procedure AppendTextLn String sText
45492>>>>>>>>>        Send AppendText sText
45493>>>>>>>>>        Send AppendText (character(10))
45494>>>>>>>>>    End_Procedure
45495>>>>>>>>>    
45495>>>>>>>>>    // Called by Page_Object. Handles tooltip creation. We use a dedicated
45495>>>>>>>>>    // method to perform AddToolTip because it is often the case that Page_Object
45495>>>>>>>>>    // is implemented in a mixin class.
45495>>>>>>>>>    Procedure RequestAddToolTip
45497>>>>>>>>>        Send AddToolTip
45498>>>>>>>>>    End_Procedure
45499>>>>>>>>>    
45499>>>>>>>>>    
45499>>>>>>>>>    // Called by Page_Object. Handles tooltip removal.
45499>>>>>>>>>    Procedure RequestDeleteToolTip
45501>>>>>>>>>        Send DeleteToolTip
45502>>>>>>>>>    End_Procedure
45503>>>>>>>>>End_Class
45504>>>>>>>
45504>>>>>>>// constants used for RichEdit Properties
45504>>>>>>>// peAlignment
45504>>>>>>>Enum_List
45504>>>>>>>    Define alLeft   for 1
45504>>>>>>>    Define alRight  for 2
45504>>>>>>>    Define alCenter for 3
45504>>>>>>>End_Enum_List
45504>>>>>>>
45504>>>>>>>// peBullets
45504>>>>>>>Enum_List
45504>>>>>>>    Define buNone
45504>>>>>>>    Define buBullets
45504>>>>>>>    Define buArabicNumbers
45504>>>>>>>    Define buLowerLetters
45504>>>>>>>    Define buUpperLetters
45504>>>>>>>    Define buLowerRomans
45504>>>>>>>    Define buUpperRomans
45504>>>>>>>End_Enum_List
45504>>>>>>>
45504>>>>>>>// peBulletStyle
45504>>>>>>>Enum_List
45504>>>>>>>    Define busRightParen   for 0
45504>>>>>>>    Define busEncloseParen for 256
45504>>>>>>>    Define busPeriod       for 512
45504>>>>>>>    Define busNumberOnly   for 768
45504>>>>>>>    Define busNoDisplay    for 1024
45504>>>>>>>End_Enum_List
45504>>>>>>>
45504>>>>>>>// peLineSpacingType
45504>>>>>>>Enum_List
45504>>>>>>>    Define lstSingle
45504>>>>>>>    Define lstSingleAndOneHalf
45504>>>>>>>    Define lstDouble
45504>>>>>>>End_Enum_List
45504>>>>>>>
45504>>>>>>>Class cRichEdit is a DFBaseRichEdit
45505>>>>>>>    
45505>>>>>>>    Procedure Construct_Object
45507>>>>>>>        Forward Send Construct_Object
45509>>>>>>>        Send Define_cEdit_Mixin
45510>>>>>>>        
45510>>>>>>>        On_Key Key_Ctrl+Key_B Send ToggleBold
45511>>>>>>>        On_Key Key_Ctrl+Key_I Send ToggleItalics
45512>>>>>>>        On_Key Key_Ctrl+Key_U Send ToggleUnderline
45513>>>>>>>        
45513>>>>>>>    End_Procedure
45514>>>>>>>    
45514>>>>>>>    Import_Class_Protocol cEdit_Mixin
45515>>>>>>>    
45515>>>>>>>    Procedure ToggleBold
45517>>>>>>>        Set pbBold to (not(pbBold(Self)))
45518>>>>>>>    End_Procedure
45519>>>>>>>    
45519>>>>>>>    Procedure ToggleItalics
45521>>>>>>>        Set pbItalics to (not(pbItalics(Self)))
45522>>>>>>>    End_Procedure
45523>>>>>>>    
45523>>>>>>>    Procedure ToggleUnderline
45525>>>>>>>        Set pbUnderLine to (not(pbUnderLine(Self)))
45526>>>>>>>    End_Procedure
45527>>>>>>>    
45527>>>>>>>End_Class
45528>>>>>>>
45528>>>>>>>
45528>>>>>Use cTextEdit.pkg
Including file: cTextEdit.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cTextEdit.pkg)
45528>>>>>>>use Windows.pkg
45528>>>>>>>Use cEdit_Mixin.pkg
45528>>>>>>>
45528>>>>>>>Class cTextEdit is a DFBaseTextEdit
45529>>>>>>>    
45529>>>>>>>    Procedure Construct_Object
45531>>>>>>>        Forward Send Construct_Object
45533>>>>>>>        Send Define_cEdit_Mixin
45534>>>>>>>    End_Procedure
45535>>>>>>>    
45535>>>>>>>    Import_Class_Protocol cEdit_Mixin
45536>>>>>>>    
45536>>>>>>>End_Class
45537>>>>>>>
45537>>>>>>>
45537>>>>>>>
45537>>>>>Use cRichEdit.pkg
45537>>>>>Use gFormatNumbers.pkg
Including file: gFormatNumbers.pkg    (C:\Program Files\DataFlex 20.1\Pkg\gFormatNumbers.pkg)
45537>>>>>>>Use cFormatter.pkg
Including file: cFormatter.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cFormatter.pkg)
45537>>>>>>>>>Use VDFBase.pkg
45537>>>>>>>>>
45537>>>>>>>>>Class cFormatter is an cObject
45538>>>>>>>>>    
45538>>>>>>>>>    Procedure Construct_object
45540>>>>>>>>>        Integer iCh
45540>>>>>>>>>        Forward Send construct_object
45542>>>>>>>>>        Property String  psCurrencySymbol
45543>>>>>>>>>        Set psCurrencySymbol to (Default_Currency_Symbol())
45544>>>>>>>>>        
45544>>>>>>>>>        Property String  psLeft
45545>>>>>>>>>        Property String  psright
45546>>>>>>>>>        Property Integer pbThousandsSep
45547>>>>>>>>>        Property Integer piPoints
45548>>>>>>>>>        
45548>>>>>>>>>        Property String  psCurPosLeft
45549>>>>>>>>>        Property String  psCurPosright
45550>>>>>>>>>        Property Integer pbCurPosThousandsSep
45551>>>>>>>>>        Property Integer piCurPosPoints
45552>>>>>>>>>        
45552>>>>>>>>>        Property String  psCurNegLeft
45553>>>>>>>>>        Property String  psCurNegright
45554>>>>>>>>>        Property Integer pbCurNegThousandsSep
45555>>>>>>>>>        Property Integer piCurNegPoints
45556>>>>>>>>>        
45556>>>>>>>>>        Property String  psNumPosLeft
45557>>>>>>>>>        Property String  psNumPosright
45558>>>>>>>>>        Property Integer pbNumPosThousandsSep
45559>>>>>>>>>        Property Integer piNumPosPoints
45560>>>>>>>>>        
45560>>>>>>>>>        Property String  psNumNegLeft
45561>>>>>>>>>        Property String  psNumNegright
45562>>>>>>>>>        Property Integer pbNumNegThousandsSep
45563>>>>>>>>>        Property Integer piNumNegPoints
45564>>>>>>>>>        
45564>>>>>>>>>        Send SetFormat "$,#.##;($,#.##)" True  // currency
45565>>>>>>>>>        Send SetFormat  ",#.*"           False // numeric
45566>>>>>>>>>        
45566>>>>>>>>>    End_Procedure
45567>>>>>>>>>    
45567>>>>>>>>>    // internal
45567>>>>>>>>>    // parse passed format string and set temporary properties with result
45567>>>>>>>>>    Procedure ParseFormat String sFmt
45569>>>>>>>>>        
45569>>>>>>>>>        String sLeft sRight sDigit
45569>>>>>>>>>        Integer bSep iPos i iDigits
45569>>>>>>>>>        
45569>>>>>>>>>        // replace any literals. A "/" followed by anything.
45569>>>>>>>>>        // some literals are special. $ . , / #
45569>>>>>>>>>        Move (Replaces("/$",sFmt,Character(1)))    to sFmt
45570>>>>>>>>>        Move (Replaces("/.",sFmt,Character(2)))    to sFmt
45571>>>>>>>>>        Move (Replaces("/,",sFmt,Character(3)))    to sFmt
45572>>>>>>>>>        Move (Replaces("/"+"/",sFmt,Character(4))) to sFmt
45573>>>>>>>>>        Move (Replaces("/#",sFmt,Character(5)))    to sFmt
45574>>>>>>>>>        Move (Character(9)) to sDigit
45575>>>>>>>>>        Move (Replaces("#",sFmt,sDigit))           to sFmt
45576>>>>>>>>>        Move (Replaces("/",sFmt,""))               to sFmt // replace all others
45577>>>>>>>>>        
45577>>>>>>>>>        Move (Pos(",",sFmt))                 to bSep // if we have any , we use thousand seps
45578>>>>>>>>>        If bSep ;            Move (Replaces(",",sFmt,"")) to sFmt // remove all ,
45581>>>>>>>>>        
45581>>>>>>>>>        Move (Replaces("$",sFmt,psCurrencySymbol(Self))) to sFmt // replace any $ with currency symbol
45582>>>>>>>>>        
45582>>>>>>>>>        Move (Pos(".",sFmt)) to iPos                 // position of decimal
45583>>>>>>>>>        
45583>>>>>>>>>        // Move all the special literals back into place before parsing
45583>>>>>>>>>        Move (Replaces(Character(1),sFmt,"$")) to sFmt
45584>>>>>>>>>        Move (Replaces(Character(2),sFmt,".")) to sFmt
45585>>>>>>>>>        Move (Replaces(Character(3),sFmt,",")) to sFmt
45586>>>>>>>>>        Move (Replaces(Character(4),sFmt,"/")) to sFmt
45587>>>>>>>>>        Move (Replaces(Character(5),sFmt,"#")) to sFmt
45588>>>>>>>>>        
45588>>>>>>>>>        If (iPos>0) Begin                      // if we have a decimanl point
45590>>>>>>>>>            Move 1 to i                        // look for first non # to right and count the #s
45591>>>>>>>>>            If (mid(sFmt,1,iPos+i)="*") Begin  // the "*" is special. It means as many as you want
45593>>>>>>>>>                Move -2 to iDigits
45594>>>>>>>>>                Increment i
45595>>>>>>>>>            End
45595>>>>>>>>>>
45595>>>>>>>>>            While (mid(sFmt,1,iPos+i)=sDigit)
45599>>>>>>>>>                Increment i
45600>>>>>>>>>            Loop
45601>>>>>>>>>>
45601>>>>>>>>>            Move (Mid(sFmt,255,iPos+i)) to sRight // everything to the right of the last # is format stuff
45602>>>>>>>>>            If (iDigits=0) ;                Move (i-1) to iDigits
45605>>>>>>>>>            //
45605>>>>>>>>>            Move 1 to i                           // find the first non-# to the left of the point
45606>>>>>>>>>            While (mid(sFmt,1,iPos-i)=sDigit)     // everything to the left is format stuff
45610>>>>>>>>>                Increment i
45611>>>>>>>>>            Loop
45612>>>>>>>>>>
45612>>>>>>>>>            Move (left(sFmt,iPos-i)) to sLeft
45613>>>>>>>>>        End
45613>>>>>>>>>>
45613>>>>>>>>>        Else Begin                             // we have no decinal
45614>>>>>>>>>            Move 0 to iDigits                  // so points is none
45615>>>>>>>>>            Move (Pos(sDigit,sFmt)) to iPos    // find first #.
45616>>>>>>>>>            If (iPos=0) Begin                  // if none, entire string is left format stuff..wierd!
45618>>>>>>>>>                Move sFmt to sLeft
45619>>>>>>>>>                Move ""   to sRight
45620>>>>>>>>>            End
45620>>>>>>>>>>
45620>>>>>>>>>            Else Begin
45621>>>>>>>>>                Move (left(sFmt,iPos-1)) to sLeft // all char to left of first # is left format stuff
45622>>>>>>>>>                Move 1 to i
45623>>>>>>>>>                While (mid(sFmt,1,iPos+i)=sDigit) // find last #, all char to right is right format
45627>>>>>>>>>                    Increment i
45628>>>>>>>>>                Loop
45629>>>>>>>>>>
45629>>>>>>>>>                Move (Mid(sFmt,255,i+iPos)) to sRight
45630>>>>>>>>>            End
45630>>>>>>>>>>
45630>>>>>>>>>        End
45630>>>>>>>>>>
45630>>>>>>>>>        // set temporary format properties and exit
45630>>>>>>>>>        Set pbThousandsSep to bSep
45631>>>>>>>>>        Set psLeft         to sLeft
45632>>>>>>>>>        Set psRight        to sRight
45633>>>>>>>>>        Set piPoints       to iDigits
45634>>>>>>>>>    End_Procedure
45635>>>>>>>>>    
45635>>>>>>>>>    // Public: Sets a format string. Pass full format for Positve and negative in sFmt. Pass
45635>>>>>>>>>    //         bCurrency true is this is a currency format, false if a numeric format
45635>>>>>>>>>    //
45635>>>>>>>>>    //  e.g. Send SetFormat "$,#.##;($,#.##)" True
45635>>>>>>>>>    Procedure SetFormat String sFmt Integer bCurrency
45637>>>>>>>>>        String sPos sNeg
45637>>>>>>>>>        Integer iPos
45637>>>>>>>>>        
45637>>>>>>>>>        Move (Pos(";",sFmt)) to iPos
45638>>>>>>>>>        If iPos Begin
45640>>>>>>>>>            Move (left(sFmt,iPos-1))    to sPos
45641>>>>>>>>>            Move (mid(sFmt,255,iPos+1)) to sNeg
45642>>>>>>>>>        End
45642>>>>>>>>>>
45642>>>>>>>>>        Else Begin
45643>>>>>>>>>            Move sFmt         to sPos
45644>>>>>>>>>            Move ("-" + sFmt) to sNeg
45645>>>>>>>>>        End
45645>>>>>>>>>>
45645>>>>>>>>>        Send ParseFormat sPos
45646>>>>>>>>>        If bCurrency Begin
45648>>>>>>>>>            Set pbCurPosThousandsSep to (pbThousandsSep(Self))
45649>>>>>>>>>            Set psCurPosLeft         to (psLeft(Self))
45650>>>>>>>>>            Set psCurPosRight        to (psRight(Self))
45651>>>>>>>>>            Set piCurPosPoints       to (piPoints(Self))
45652>>>>>>>>>        End
45652>>>>>>>>>>
45652>>>>>>>>>        Else Begin
45653>>>>>>>>>            Set pbNumPosThousandsSep to (pbThousandsSep(Self))
45654>>>>>>>>>            Set psNumPosLeft         to (psLeft(Self))
45655>>>>>>>>>            Set psNumPosRight        to (psRight(Self))
45656>>>>>>>>>            Set piNumPosPoints       to (piPoints(Self))
45657>>>>>>>>>        End
45657>>>>>>>>>>
45657>>>>>>>>>        
45657>>>>>>>>>        Send ParseFormat sNeg
45658>>>>>>>>>        If bCurrency Begin
45660>>>>>>>>>            Set pbCurNegThousandsSep to (pbThousandsSep(Self))
45661>>>>>>>>>            Set psCurNegLeft         to (psLeft(Self))
45662>>>>>>>>>            Set psCurNegRight        to (psRight(Self))
45663>>>>>>>>>            Set piCurNegPoints       to (piPoints(Self))
45664>>>>>>>>>        End
45664>>>>>>>>>>
45664>>>>>>>>>        Else Begin
45665>>>>>>>>>            Set pbNumNegThousandsSep to (pbThousandsSep(Self))
45666>>>>>>>>>            Set psNumNegLeft         to (psLeft(Self))
45667>>>>>>>>>            Set psNumNegRight        to (psRight(Self))
45668>>>>>>>>>            Set piNumNegPoints       to (piPoints(Self))
45669>>>>>>>>>        End
45669>>>>>>>>>>
45669>>>>>>>>>    End_Procedure
45670>>>>>>>>>    
45670>>>>>>>>>    // low level formatting. Pass parameters
45670>>>>>>>>>    Function Format_Num Number nNumber Integer iPoints Integer bSep ;            String sPrefix String sSuffix Returns String
45672>>>>>>>>>        String  sLeft sRight sNumber sSep sDec
45672>>>>>>>>>        Integer bIsNegative iDec iLen iCh
45672>>>>>>>>>        
45672>>>>>>>>>        Get_Attribute DF_DECIMAL_SEPARATOR to iCh
45675>>>>>>>>>        Move (Character(iCh)) to sDec
45676>>>>>>>>>        
45676>>>>>>>>>        Move (abs(nNumber)) to sNumber
45677>>>>>>>>>        Move (Pos(sDec,sNumber)) to iDec
45678>>>>>>>>>        Move (If(iDec=0, sNumber, left(sNumber,iDec-1))) to sLeft
45679>>>>>>>>>        Move (If(iDec=0, "", mid(sNumber,255,iDec+1)))   to sRight
45680>>>>>>>>>        // format for decimal separator
45680>>>>>>>>>        If (iPoints>=0) ; // if -2, leave it alone, it should not be -1            Move (left(sRight+Repeat("0",iPoints),iPoints)) to sRight
45683>>>>>>>>>        
45683>>>>>>>>>        // format for thousand sep.
45683>>>>>>>>>        If bSep Begin
45685>>>>>>>>>            Get_Attribute DF_THOUSANDS_SEPARATOR to iCh
45688>>>>>>>>>            Move (Character(iCh)) to sSep
45689>>>>>>>>>            Move (Length(sLeft)) to iLen
45690>>>>>>>>>            While (iLen>3)
45694>>>>>>>>>                Move (insert(sSep,sLeft,iLen-2)) to sLeft
45695>>>>>>>>>                Move (iLen-3) to iLen
45696>>>>>>>>>            Loop
45697>>>>>>>>>>
45697>>>>>>>>>        End
45697>>>>>>>>>>
45697>>>>>>>>>        // if decimal points or -2 (allow anything) and there are points to show
45697>>>>>>>>>        If (iPoints>0 or (iPoints=-2 and sRight<>"")) ;            Move (sLeft + sDec + sright) to sLeft
45700>>>>>>>>>        Function_Return (sPrefix + sLeft+ sSuffix)
45701>>>>>>>>>    End_Function
45702>>>>>>>>>    
45702>>>>>>>>>    // Public: Format for currency
45702>>>>>>>>>    Function FormatCur Number nNumber Integer iPoints Returns String
45704>>>>>>>>>        String  sLeft sRight
45704>>>>>>>>>        Integer bSep
45704>>>>>>>>>        If (nNumber<0) Begin
45706>>>>>>>>>            Get pbCurNegThousandsSep to bSep
45707>>>>>>>>>            Get psCurNegLeft         to sLeft
45708>>>>>>>>>            Get psCurNegRight        to sRight
45709>>>>>>>>>            If (iPoints=-1) ;                Get piCurNegPoints       to iPoints
45712>>>>>>>>>        End
45712>>>>>>>>>>
45712>>>>>>>>>        Else Begin
45713>>>>>>>>>            Get pbCurPosThousandsSep to bSep
45714>>>>>>>>>            Get psCurPosLeft         to sLeft
45715>>>>>>>>>            Get psCurPosRight        to sRight
45716>>>>>>>>>            If (iPoints=-1) ;                Get piCurPosPoints       to iPoints
45719>>>>>>>>>        End
45719>>>>>>>>>>
45719>>>>>>>>>        Function_Return (Format_Num(Self, nNumber,iPoints,bSep,sLeft,sRight))
45720>>>>>>>>>    End_Function
45721>>>>>>>>>    
45721>>>>>>>>>    // Public: Format for numeric
45721>>>>>>>>>    Function FormatNum Number nNumber Integer iPoints Returns String
45723>>>>>>>>>        String  sLeft sRight
45723>>>>>>>>>        Integer bSep
45723>>>>>>>>>        If (nNumber<0) Begin
45725>>>>>>>>>            Get pbNumNegThousandsSep to bSep
45726>>>>>>>>>            Get psNumNegLeft         to sLeft
45727>>>>>>>>>            Get psNumNegRight        to sRight
45728>>>>>>>>>            If (iPoints=-1) ;                Get piNumNegPoints       to iPoints
45731>>>>>>>>>        End
45731>>>>>>>>>>
45731>>>>>>>>>        Else Begin
45732>>>>>>>>>            Get pbNumPosThousandsSep to bSep
45733>>>>>>>>>            Get psNumPosLeft         to sLeft
45734>>>>>>>>>            Get psNumPosRight        to sRight
45735>>>>>>>>>            If (iPoints=-1) ;                Get piNumPosPoints       to iPoints
45738>>>>>>>>>        End
45738>>>>>>>>>>
45738>>>>>>>>>        Function_Return (Format_Num(Self, nNumber,iPoints,bSep,sLeft,sRight))
45739>>>>>>>>>    End_Function
45740>>>>>>>>>    
45740>>>>>>>>>    
45740>>>>>>>>>    // Public: Format passing format string
45740>>>>>>>>>    Function FormatVal Number nNumber String sFmt Returns String
45742>>>>>>>>>        Integer iPos bIsNeg
45742>>>>>>>>>        String  sLeft sRight
45742>>>>>>>>>        Integer iPoints bSep
45742>>>>>>>>>        Move (nNumber<0) to bIsNeg
45743>>>>>>>>>        Move (Pos(";",sFmt)) to iPos
45744>>>>>>>>>        Case Begin
45744>>>>>>>>>            Case (iPos and not(bIsNeg)) ;                Move (left(sFmt,iPos-1))    to sFmt
45747>>>>>>>>>            Case (iPos and bIsNeg) ;                Move (mid(sFmt,255,iPos+1)) to sFmt
45751>>>>>>>>>            Case (not(iPos) and not(bIsNeg)) ;                Move sFmt                   to sFmt
45755>>>>>>>>>            Case Else ;                Move ("-" + sFmt)           to sFmt
45757>>>>>>>>>        Case End
45757>>>>>>>>>        Send ParseFormat sFmt
45758>>>>>>>>>        Get pbThousandsSep to bSep
45759>>>>>>>>>        Get psLeft         to sLeft
45760>>>>>>>>>        Get psRight        to sRight
45761>>>>>>>>>        Get piPoints       to iPoints
45762>>>>>>>>>        Function_Return (Format_Num(Self, nNumber,iPoints,bSep,sLeft,sRight))
45763>>>>>>>>>    End_Function
45764>>>>>>>>>    
45764>>>>>>>>>End_Class
45765>>>>>>>
45765>>>>>>>Global_Variable Handle ghoFormatter
45765>>>>>>>Get Create of desktop U_cFormatter to ghoFormatter
45766>>>>>>>
45766>>>>>>>Function FormatNumber Global Number nNum Integer iPoints Returns String
45768>>>>>>>    Function_Return (FormatNum(ghoFormatter, nNum,iPoints))
45769>>>>>>>End_Function
45770>>>>>>>
45770>>>>>>>Function FormatCurrency Global Number nNum Integer iPoints Returns String
45772>>>>>>>    Function_Return (FormatCur(ghoFormatter, nNum,iPoints))
45773>>>>>>>End_Function
45774>>>>>>>
45774>>>>>>>Function FormatValue Global Number nNum String sFmt Returns String
45776>>>>>>>    Function_Return (FormatVal(ghoFormatter, nNum,sFmt))
45777>>>>>>>End_Function
45778>>>>>>>
45778>>>>>>>Procedure SetCurrencyFormat Global String sFmt
45780>>>>>>>    Send SetFormat of ghoFormatter sFmt True
45781>>>>>>>End_Procedure
45782>>>>>>>
45782>>>>>>>Procedure SetNumberFormat Global String sFmt
45784>>>>>>>    Send SetFormat of ghoFormatter sFmt False
45785>>>>>>>End_Procedure
45786>>>>>>>
45786>>>>>>>
45786>>>>>Use tWinStructs.pkg
45786>>>>>
45786>>>>>Use cli.pkg
45786>>>>>Use DFBTRDRV.PKG
45786>>>>>Use MSSqldrv.pkg
45786>>>>>Use db2_drv.pkg
45786>>>>>Use odbc_drv.pkg
45786>>>>>Use seq_chnl.pkg
45786>>>>>
45786>>>>>Register_Function phoWorkspace Returns Handle
45786>>>>>Register_Function Help_filename Returns String
45786>>>>>Register_Function GetHelpFile Returns String
45786>>>>>Register_Function pbEnterKeyAsTabKey Returns Boolean
45786>>>>>
45786>>>>>// Use of Mertech drivers:
45786>>>>>// Ad the line "Define DUF_Use_Mertech_Drivers" prior "Use" of this package to your source code if using Mertech drivers!
45786>>>>>
45786>>>>>
45786>>>>>
45786>>>>>
45786>>>>>
45786>>>>>// *** Constant Declarations: ***
45786>>>>>//
45786>>>>>
45786>>>>>
45786>>>>>
45786>>>>>
45786>>>>>
45786>>>>>
45786>>>>>// 2016-12-12, Samuel:  Added section for Portuguese
45786>>>>>
45786>>>>>
45786>>>>>
45786>>>>>
45786>>>>>
45786>>>>>
45786>>>>>
45786>>>>>
45786>>>>>
45786>>>>>// System icon menu constants. If the upper left hand
45786>>>>>// icon in dialogs is clicked, shadow all menu items except Move & Close.
45786>>>>>    Define SC_RESTORE  for |CI$F120
45786>>>>>    Define SC_MOVE     for |CI$F010
45786>>>>>    Define SC_SIZE     for |CI$F000
45786>>>>>    Define SC_MINIMIZE for |CI$F020
45786>>>>>    Define SC_MAXIMIZE for |CI$F030
45786>>>>>    Define SC_CLOSE    for |CI$F060
45786>>>>>    Define SC_KEYMENU  for |CI$F100
45786>>>>>    Define SC_NEXTWINDOW for |CI$F040
45786>>>>>    Define SC_PREVWINDOW for |CI$F050
45786>>>>>
45786>>>>>Define CS_SignProgram        for "signtool.exe"
45786>>>>>Define CS_TempCertBatchFile  for "certinfo.bat"
45786>>>>>Define CS_VerifyCredentials  for "verify"
45786>>>>>Define CS_VerifyFileParam    for "/a"
45786>>>>>Define CS_DefAuthVerPolicy   for "/pa"
45786>>>>>Define SEE_MASK_NOCLOSEPROCESS for 64 //(0x00000040)
45786>>>>>
45786>>>>>// *** Struct Declarations: ***
45786>>>>>
45786>>>>>Struct AboutSHELLEXECUTEINFO
45786>>>>>    DWord   cbSize
45786>>>>>    Integer fMask
45786>>>>>    Handle  hwnd
45786>>>>>    Pointer lpVerb
45786>>>>>    Pointer lpFile
45786>>>>>    Pointer lpParameters
45786>>>>>    Pointer lpDirectory
45786>>>>>    Integer nShow
45786>>>>>    Pointer hInstApp
45786>>>>>    Pointer lpIDList
45786>>>>>    Pointer lpClass
45786>>>>>    Handle  hkeyClass
45786>>>>>    DWord   dwHotKey
45786>>>>>    Handle  hIconMonitor // Union
45786>>>>>    //Handle  hMonitor     // Union
45786>>>>>    Handle  hProcess
45786>>>>>End_Struct
45786>>>>>
45786>>>>>
45786>>>>>// OBSOLETE STRUCTURE AND WINDOWS API CALL. KEPT FOR BACKWARDS COMPATIBILITY
45786>>>>>//Type MEMORYSTATUS
45786>>>>>//   Field MEMORYSTATUS.dwLength         as DWord // sizeof(MEMORYSTATUS)
45786>>>>>//   Field MEMORYSTATUS.dwMemoryLoad     as DWord // percent Of memory in use
45786>>>>>//   Field MEMORYSTATUS.dwTotalPhys      as DWord // bytes Of physical memory
45786>>>>>//   Field MEMORYSTATUS.dwAvailPhys      as DWord // free physical memory bytes
45786>>>>>//   Field MEMORYSTATUS.dwTotalPageFile  as DWord // bytes Of paging file
45786>>>>>//   Field MEMORYSTATUS.dwAvailPageFile  as DWord // free bytes Of paging file
45786>>>>>//   Field MEMORYSTATUS.dwTotalVirtual   as DWord // user bytes Of address space
45786>>>>>//   Field MEMORYSTATUS.dwAvailVirtual   as DWord // free user bytes
45786>>>>>//End_Type
45786>>>>>
45786>>>>>// *** External Function calls: ***
45786>>>>>//
45786>>>>>    External_Function GetSystemMenu "GetSystemMenu" User32.dll Handle hWnd Boolean bRevert Returns Handle
45787>>>>>
45787>>>>>    External_Function GetRemoveMenu "RemoveMenu" user32.dll Handle hWnd UInteger uPosition UInteger uFlags Returns Handle
45788>>>>>
45788>>>>>// Do not call directly, use the wrapper function instead
45788>>>>>External_Function WNetGetUserW "WNetGetUserW" MPR.DLL ;    Pointer lpName ;    Pointer lpUser_Name ;    Pointer lpLength ;    Returns DWord
45789>>>>>
45789>>>>>    // Wrapper Function WNetGetUser
45789>>>>>    Function WNetGetUser Global ;        Pointer lpName ;        Pointer lpUser_Name ;        Pointer lpLength ;        Returns DWord
45791>>>>>
45791>>>>>        DWord   dwResult
45791>>>>>        UWide   uwName uwUserName
45791>>>>>        UWide   uwName uwUserName
45791>>>>>
45791>>>>>        Send StringToWide lpName (&uwName)
45792>>>>>
45792>>>>>        Send WideSetBuffer lpUser_Name lpLength (&uwUserName)
45793>>>>>
45793>>>>>        Move (WNetGetUserW (uwName.lpUText, uwUserName.lpUText, lpLength)) to dwResult
45794>>>>>
45794>>>>>        Send WideToString (&uwUserName) lpUser_Name
45795>>>>>
45795>>>>>        Function_Return dwResult
45796>>>>>    End_Function
45797>>>>>
45797>>>>>
45797>>>>>
45797>>>>>    External_Function GlobalMemoryStatus "GlobalMemoryStatus" Kernel32.Dll Pointer lpsMemoryStatus Returns Integer
45798>>>>>
45798>>>>>    External_Function GlobalMemoryStatusEx "GlobalMemoryStatusEx" Kernel32.Dll Pointer lpMemoryStatus Returns Integer
45799>>>>>
45799>>>>>External_Function AboutShellExecuteEx "ShellExecuteEx" Shell32.dll Pointer pExecInfo Returns Integer
45800>>>>>
45800>>>>>External_Function AboutWaitForSingleObject "WaitForSingleObject" Kernel32.dll ;  Handle hHandle ;  DWord dwMilliseconds ;  Returns DWord
45801>>>>>
45801>>>>>External_Function AboutCloseHandle "CloseHandle" Kernel32.dll Handle hHandle Returns Integer
45802>>>>>
45802>>>>>// *** Global/Desktop Function Declarations: ***
45802>>>>>
45802>>>>>Function ComputerName Desktop Returns String
45804>>>>>    String sName
45804>>>>>    Get_Environment "COMPUTERNAME" to sName
45805>>>>>>
45805>>>>>    Function_Return sName
45806>>>>>End_Function
45807>>>>>
45807>>>>>Function Network_User_Name Desktop Returns String
45809>>>>>    WString wName
45809>>>>>    Integer iRetval iLength
45809>>>>>
45809>>>>>    Move 0 to iLength
45810>>>>>    Move (WNetGetUserW (0, 0, AddressOf (iLength))) to iRetval
45811>>>>>    Move (ZeroString(iLength)) to wName
45812>>>>>    Move (WNetGetUserW (0, AddressOf (wName), AddressOf (iLength))) to iRetval
45813>>>>>
45813>>>>>    If (iRetval = NO_ERROR) Begin
45815>>>>>        Function_Return (CString (wName))
45816>>>>>    End
45816>>>>>>
45816>>>>>
45816>>>>>    Function_Return "User Unknown"
45817>>>>>End_Function
45818>>>>>
45818>>>>>Function SQLClientVersion Desktop String sDriverID Integer iClient Returns String
45820>>>>>    String sClient sDriver sClientDriver
45820>>>>>    Integer iNumberOfDrivers iDriver iCount iClientVersion
45820>>>>>    Handle hoMsqlDrv
45820>>>>>
45820>>>>>    Move 0 to iDriver
45821>>>>>    Move "" to sClient
45822>>>>>    Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
45825>>>>>    For iCount from 1 to iNumberOfDrivers
45831>>>>>>
45831>>>>>        Get_Attribute DF_DRIVER_NAME of iCount to sDriver
45834>>>>>        If (Uppercase(sDriver) = Uppercase(sDriverID)) Begin
45836>>>>>            Move iCount to iDriver
45837>>>>>            Move iNumberOfDrivers to iCount // We're done.
45838>>>>>        End
45838>>>>>>
45838>>>>>    Loop
45839>>>>>>
45839>>>>>
45839>>>>>    // This info is (at current) only available for the MS SQL driver:
45839>>>>>    If (sDriverID = MSSQLDRV_ID) Begin
45841>>>>>        Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
45844>>>>>        Get Create (RefClass(cMSSQLHandler)) to hoMsqlDrv
45845>>>>>        Get SqlServerClientVersionName of hoMsqlDrv iClientVersion to sClientDriver
45846>>>>>        Send Destroy of hoMsqlDrv
45847>>>>>        Move (SFormat("MSSQLDRV Client Version: %1", sClientDriver)) to sClient
45848>>>>>    End
45848>>>>>>
45848>>>>>
45848>>>>>    Function_Return sClient
45849>>>>>End_Function
45850>>>>>
45850>>>>>// *** Class Declarations: ***
45850>>>>>//
45850>>>>>Class cBitmapContainerDFLink is a BitmapContainer
45851>>>>>    Procedure Mouse_Click Integer iWindowNumber Integer iPosition
45853>>>>>        Send Mouse_Up iWindowNumber iPosition
45854>>>>>    End_Procedure
45855>>>>>    Procedure Mouse_Up Integer iWindowNumber Integer iPosition
45857>>>>>        Forward Send Mouse_Up iWindowNumber iPosition
45859>>>>>        Send Show_HomePage "http://www.dataaccess.com/"
45860>>>>>    End_Procedure
45861>>>>>End_Class
45862>>>>>
45862>>>>>Class cCopyEditorContentButton is a Button
45863>>>>>    Procedure Construct_Object
45865>>>>>        Forward Send Construct_Object
45867>>>>>        Property Handle phoEditorHandle
45868>>>>>        Set psToolTip to C_$DescCopy
45869>>>>>    End_Procedure
45870>>>>>
45870>>>>>    Procedure CopyToWindowsClipboard
45872>>>>>        Handle hoEditor
45872>>>>>        Boolean bCanCopy
45872>>>>>        Address aEditorAddress
45872>>>>>
45872>>>>>        Get phoEditorHandle to hoEditor
45873>>>>>        Send Select_All of hoEditor
45874>>>>>        Get CanCopy of hoEditor to bCanCopy
45875>>>>>        If (bCanCopy = True) Begin
45877>>>>>            Get paValue of hoEditor to aEditorAddress
45878>>>>>            Send Copy   of hoEditor
45879>>>>>            // Remove the selection after text is copied to the clipboard.
45879>>>>>            Send Beginning_of_Data of hoEditor
45880>>>>>            Send Info_Box C_$CopyToClipboard_Text
45881>>>>>        End
45881>>>>>>
45881>>>>>    End_Procedure
45882>>>>>End_Class
45883>>>>>
45883>>>>>Class SysinfoDisplay is a cTextEdit
45884>>>>>    Procedure Construct_Object
45886>>>>>        Forward Send Construct_Object
45888>>>>>
45888>>>>>        Set Size to 100 245
45889>>>>>        Set Location to 6 6
45890>>>>>        Set Border_Style to Border_None
45891>>>>>        Set Read_Only_State to True
45892>>>>>        Set pbWrap to True
45893>>>>>        Set peAnchors to anAll
45894>>>>>    End_Procedure
45895>>>>>
45895>>>>>    // Augmented class message to adjust certain text strings that are wrong...
45895>>>>>
45895>>>>>    Procedure AppendTextLn String sText
45897>>>>>        String sWorkspaceWSFile
45897>>>>>
45897>>>>>        // Only works for English:
45897>>>>>        If (ghoApplication > 0) Begin
45899>>>>>            If (sText contains "Workspace Name") Begin
45901>>>>>                Move "Workspace Config Filename:" to sText
45902>>>>>                Get psWorkspaceWSFile of (phoWorkspace(ghoApplication)) to sWorkspaceWSFile
45903>>>>>                Move (sText * sWorkspaceWSFile) to sText
45904>>>>>            End
45904>>>>>>
45904>>>>>        End
45904>>>>>>
45904>>>>>        Send AppendText sText
45905>>>>>        Send AppendText (character(10))
45906>>>>>    End_Procedure
45907>>>>>
45907>>>>>    //    This method will show the name Of the current directory in the system
45907>>>>>    //    information box
45907>>>>>    Procedure Show_Current_Directory
45909>>>>>        String sDir
45909>>>>>
45909>>>>>        Get_Current_Directory To sDir
45910>>>>>
45910>>>>>        Send AppendTextLn (SFormat (C_$CurrentDirectory, sDir))
45911>>>>>    End_Procedure
45912>>>>>
45912>>>>>    Procedure Show_Windows_Directory
45914>>>>>        String sWindir
45914>>>>>
45914>>>>>        Get_Windows_Directory To sWindir
45915>>>>>
45915>>>>>        Send AppendTextLn (SFormat (C_$WindowsDirectory, sWindir))
45916>>>>>    End_Procedure
45917>>>>>
45917>>>>>    Procedure Show_Current_User
45919>>>>>        Send AppendTextLn (SFormat (C_$Computer_Name, ComputerName (Self)))
45920>>>>>        Send AppendTextLn (SFormat (C_$NetworkUserName, Network_User_Name (Self)))
45921>>>>>    End_Procedure
45922>>>>>
45922>>>>>    Procedure Show_Number_Format
45924>>>>>        Integer iFormat
45924>>>>>        String sFormatText
45924>>>>>
45924>>>>>        Get_Attribute DF_THOUSANDS_SEPARATOR to iFormat
45927>>>>>        Move (Character (iFormat)) To sFormatText
45928>>>>>        Send AppendTextLn (SFormat (C_$ThousandsSeparator, sFormatText, iFormat))
45929>>>>>
45929>>>>>        Get_Attribute DF_DECIMAL_SEPARATOR to iFormat
45932>>>>>        Move (Character (iFormat)) to sFormatText
45933>>>>>        Send AppendTextLn (SFormat (C_$DecimalSeparator, sFormatText))
45934>>>>>    End_Procedure
45935>>>>>
45935>>>>>    Procedure Show_Filelist_Name
45937>>>>>        String sFilename
45937>>>>>
45937>>>>>        Get_Attribute DF_FILELIST_NAME to sFilename
45940>>>>>
45940>>>>>        Send AppendTextLn (SFormat (C_$CurrentFilelist, sFilename))
45941>>>>>    End_Procedure
45942>>>>>
45942>>>>>    Procedure Show_Lock_Delay
45944>>>>>        Integer iLockdelay
45944>>>>>
45944>>>>>        Get_Attribute DF_LOCK_DELAY to iLockdelay
45947>>>>>
45947>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingDelay, iLockDelay))
45948>>>>>    End_Procedure
45949>>>>>
45949>>>>>    Procedure Show_Lock_Timeout
45951>>>>>        Integer iLockTimeout
45951>>>>>
45951>>>>>        Get_Attribute DF_LOCK_TIMEOUT to iLockTimeout
45954>>>>>
45954>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingTimeout, iLockTimeOut))
45955>>>>>    End_Procedure
45956>>>>>
45956>>>>>    Procedure Show_Screen_Size
45958>>>>>        Integer iYscreensize iXscreensize
45958>>>>>
45958>>>>>        Move (GetSystemMetrics (SM_CXSCREEN)) To iXscreensize
45959>>>>>        Move (GetSystemMetrics (SM_CYSCREEN)) To iYscreensize
45960>>>>>
45960>>>>>        Send AppendTextLn (SFormat (C_$VideoResolution, iXscreensize, iYscreensize))
45961>>>>>    End_Procedure
45962>>>>>
45962>>>>>    Procedure Show_Page_Size
45964>>>>>        Send AppendTextLn (SFormat (C_$PageEndFormFeed, Pageend, Pagefeed))
45965>>>>>    End_procedure
45966>>>>>
45966>>>>>    Procedure Show_Date
45968>>>>>        Date dToday
45968>>>>>
45968>>>>>        Move (CurrentDateTime()) to dToday
45969>>>>>
45969>>>>>        Send AppendTextLn (SFormat (C_$CurrentSystemDate, String (dToday)))
45970>>>>>    End_procedure
45971>>>>>
45971>>>>>    Procedure Show_Date_Format
45973>>>>>        Integer iDateFormat
45973>>>>>        String sDateFormat
45973>>>>>
45973>>>>>        Get_Attribute DF_DATE_FORMAT to iDateFormat
45976>>>>>        Case Begin
45976>>>>>            Case (iDateFormat = DF_DATE_USA)
45978>>>>>                Move C_$USA To sDateFormat
45979>>>>>                Case Break
45980>>>>>            Case (iDateFormat = DF_DATE_EUROPEAN)
45983>>>>>                Move C_$European To sDateFormat
45984>>>>>                Case Break
45985>>>>>            Case (iDateFormat = DF_DATE_MILITARY)
45988>>>>>                Move C_$Military To sDateFormat
45989>>>>>                Case Break
45990>>>>>            Case Else
45990>>>>>                Move C_$UnknownDateType To sDateFormat
45991>>>>>                Case Break
45992>>>>>        Case End
45992>>>>>
45992>>>>>        Send AppendTextLn (SFormat (C_$DateFormat, sDateformat))
45993>>>>>    End_Procedure
45994>>>>>
45994>>>>>    // 2013-08-14 NGS
45994>>>>>    // Unformatted numeric values shown doesn't look good. These looks much better.
45994>>>>>    Procedure Show_Systemresources
45996>>>>>        tWinMemoryStatusEx MemoryStatusInfo
45996>>>>>        tWinMemoryStatusEx MemoryStatusInfo
45996>>>>>        Integer iRetval
45996>>>>>        Number nValue
45996>>>>>        String sValue
45996>>>>>
45996>>>>>        Move (SizeOfType (tWinMemoryStatusEx)) to MemoryStatusInfo.dwLength
45997>>>>>        Move (GlobalMemoryStatusEx (AddressOf (MemoryStatusInfo))) to iRetval
45998>>>>>        If (iRetval = 0) Begin
46000>>>>>            Move (ShowLastError ()) to iRetval
46001>>>>>            Procedure_Return
46002>>>>>        End
46002>>>>>>
46002>>>>>
46002>>>>>        Send AppendTextLn ""
46003>>>>>        Move MemoryStatusInfo.ullTotalPhys to nValue
46004>>>>>
46004>>>>>        // Show memory in Gigabytes:
46004>>>>>        Move (nValue/1024/1024/1024) to nValue
46005>>>>>        Move (Round(nValue)) to nValue
46006>>>>>        Get FormatNumber nValue 2 to sValue
46007>>>>>        Send AppendTextLn (SFormat (C_$AvailableMemory, (sValue * "GB")))
46008>>>>>        Send AppendTextLn (SFormat (C_$MemoryUtilization, String(MemoryStatusInfo.dwMemoryLoad) * "%"))
46009>>>>>
46009>>>>>//        Send AppendTextLn (SFormat (C_$AvailablePhysicalMemory, Real (MemoryStatusInfo.ullAvailPhys) / Real (MemoryStatusInfo.ullTotalPhys) * 100.0))
46009>>>>>        Move (Real(MemoryStatusInfo.ullAvailPhys) / Real(MemoryStatusInfo.ullTotalPhys) * 100.0) to nValue
46010>>>>>        Move (Round(nValue)) to nValue
46011>>>>>        Get FormatNumber nValue 0 to sValue
46012>>>>>        Send AppendTextLn (SFormat (C_$AvailablePhysicalMemory, (sValue * "%")))
46013>>>>>
46013>>>>>//        Send AppendTextLn (SFormat (C_$AvailablePagefileSpace, Real (MemoryStatusInfo.ullAvailPageFile) / Real (MemoryStatusInfo.ullTotalPageFile) * 100.0))
46013>>>>>        Move (Real(MemoryStatusInfo.ullAvailPageFile) / Real(MemoryStatusInfo.ullTotalPageFile) * 100.0) to nValue
46014>>>>>        Move (Round(nValue)) to nValue
46015>>>>>        Get FormatNumber nValue 0 to sValue
46016>>>>>        Send AppendTextLn (SFormat (C_$AvailablePagefileSpace, (sValue * "%")))
46017>>>>>
46017>>>>>//        Send AppendTextLn (SFormat (C_$AvailableVirtualMemory, Real (MemoryStatusInfo.ullAvailVirtual) / Real (MemoryStatusInfo.ullTotalVirtual) * 100.0))
46017>>>>>        Move (Real(MemoryStatusInfo.ullAvailVirtual) / Real(MemoryStatusInfo.ullTotalVirtual) * 100.0) to nValue
46018>>>>>        Move (Round(nValue)) to nValue
46019>>>>>        Get FormatNumber nValue 0 to sValue
46020>>>>>        Send AppendTextLn (SFormat (C_$AvailableVirtualMemory, (sValue * "%")))
46021>>>>>
46021>>>>>        // Add an empty row after the memory information:
46021>>>>>        Send AppendTextLn ""
46022>>>>>    End_Procedure
46023>>>>>
46023>>>>>    Procedure Show_Registration
46025>>>>>        String sRegName
46025>>>>>        Integer iSN iUsersMax iUserCount
46025>>>>>
46025>>>>>        Registration sRegName iSN
46026>>>>>>
46026>>>>>        Get_Licensed_Max_Users to iUsersMax
46027>>>>>        Get_Current_User_Count to iUserCount
46028>>>>>
46028>>>>>        Send AppendTextLn (SFormat (C_$Serial, iSN))
46029>>>>>        Send AppendTextLn (SFormat (C_$RegName, sRegName))
46030>>>>>        Send AppendTextLn (SFormat (C_$Current_User_Count, iUserCount))
46031>>>>>        Send AppendTextLn (SFormat (C_$Max_Licensed_User_Count, iUsersMax))
46032>>>>>    End_Procedure
46033>>>>>
46033>>>>>    //****************************************************************************
46033>>>>>    // If workspaces are used, we will send the message EnumerateWorkspaceData
46033>>>>>    // To the workspace object passing the an object and message To send back
46033>>>>>    // To this object. It is expected that the workspace object will send this
46033>>>>>    // message for every line Of information it wants displayed (passing the
46033>>>>>    // information To be displayed
46033>>>>>    //****************************************************************************
46033>>>>>    Register_Procedure EnumerateWorkspaceData Integer hObjId Integer hmMessId
46033>>>>>
46033>>>>>    Procedure Show_ServicePack
46035>>>>>        String sKey sVersion sDataFlex
46035>>>>>        Handle hoRegistry
46035>>>>>        Boolean bExists bOpened
46035>>>>>
46035>>>>>        Move "DataFlex"        to sDataFlex
46036>>>>>
46036>>>>>        Get Create (RefClass(cRegistry)) to hoRegistry
46037>>>>>        Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
46038>>>>>        Set pfAccessRights of hoRegistry to KEY_READ
46039>>>>>        Get KeyExists of hoRegistry "SOFTWARE\Wow6432Node" to bExists
46040>>>>>
46040>>>>>        If (bExists) Begin
46042>>>>>            Move ("SOFTWARE\Wow6432Node\Data Access Worldwide\" + sDataFlex + "\" + SysConf (SYSCONF_DATAFLEX_REV)) to sKey
46043>>>>>        End
46043>>>>>>
46043>>>>>        Else Begin
46044>>>>>            Move ("SOFTWARE\Data Access Worldwide\"             + sDataFlex + "\" + SysConf (SYSCONF_DATAFLEX_REV)) to sKey
46045>>>>>        End
46045>>>>>>
46045>>>>>        Get KeyExists of hoRegistry sKey to bExists
46046>>>>>        If (bExists) Begin
46048>>>>>            Get OpenKey of hoRegistry sKey to bOpened
46049>>>>>            If (bOpened) Begin
46051>>>>>                Get ValueExists of hoRegistry "CurrentVersionDescription" to bExists
46052>>>>>                If (bExists) Begin
46054>>>>>                    Get ReadString of hoRegistry "CurrentVersionDescription" to sVersion
46055>>>>>                End
46055>>>>>>
46055>>>>>                Send CloseKey of hoRegistry
46056>>>>>            End
46056>>>>>>
46056>>>>>        End
46056>>>>>>
46056>>>>>        Send Destroy of hoRegistry
46057>>>>>
46057>>>>>        If (sVersion <> "") Begin
46059>>>>>           Send AppendTextLn sVersion
46060>>>>>           Send AppendTextLn ""
46061>>>>>        End
46061>>>>>>
46061>>>>>    End_Procedure
46062>>>>>
46062>>>>>    Procedure Show_WorkspaceInformation
46064>>>>>        Integer hoWorkspace
46064>>>>>
46064>>>>>        If (ghoApplication <> 0) Begin
46066>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
46067>>>>>            If (hoWorkspace <> 0) Begin
46069>>>>>                Send EnumerateWorkspaceData of hoWorkspace Self msg_AppendTextLn
46070>>>>>            End
46070>>>>>>
46070>>>>>        End
46070>>>>>>
46070>>>>>    End_Procedure
46071>>>>>
46071>>>>>    //****************************************************************************
46071>>>>>    // If connection ids are used, we will send the message EnumerateConnections
46071>>>>>    // to the connection manager object passing the an object and message to send
46071>>>>>    // back to this object. It is expected that the connection manager object will
46071>>>>>    // send this message for every line Of information it wants displayed (passing
46071>>>>>    // the information To be displayed
46071>>>>>    //****************************************************************************
46071>>>>>    Register_Procedure EnumerateConnections Integer hObjId Integer hmMessId
46071>>>>>
46071>>>>>    Procedure Show_ConnectionIdInformation
46073>>>>>        If (ghoConnection > 0) Begin
46075>>>>>            Send EnumerateConnections of ghoConnection Self (RefProc(AppendTextLn))
46076>>>>>            Send AppendTextLn ""
46077>>>>>        End
46077>>>>>>
46077>>>>>    End_Procedure
46078>>>>>
46078>>>>>    Function VersionStr Integer iVer Integer iRev Integer iBld Returns String
46080>>>>>        Function_Return (String (iVer) - "." - String (iRev) - "." - String (iBld))
46081>>>>>    End_Function
46082>>>>>
46082>>>>>    Procedure Show_Versions
46084>>>>>        Integer iVersion iRevision iBuild
46084>>>>>
46084>>>>>        Version_information iVersion iRevision iBuild
46086>>>>>
46086>>>>>        Send AppendTextLn (SFormat (C_$RuntimeVersion, VersionStr(self,iVersion,iRevision,iBuild) ))
46087>>>>>        Send AppendTextLn (SFormat (C_$PackageVersion, VersionStr(self,PKG_VERSION, PKG_REVISION, PKG_BUILD) ))
46088>>>>>        Send AppendTextLn (SFormat (C_$FMACVersion, VersionStr(self,FMAC_VERSION, FMAC_REVISION, FMAC_BUILD) ))
46089>>>>>        Send AppendTextLn "This is a 32-bit exe file"
46090>>>>>    End_Procedure
46091>>>>>
46091>>>>>    Function IsDAWSQLDriver String sDriverID Returns Boolean
46093>>>>>        Boolean bOK
46093>>>>>        Move (sDriverID = MSSQLDRV_ID or sDriverID = DB2_DRV_ID or sDriverID = ODBC_DRV_ID) to bOK
46094>>>>>        Function_Return bOK
46095>>>>>    End_Function
46096>>>>>
46096>>>>>    Function IsMertechDriver String sDriverID Returns Boolean
46098>>>>>        Boolean bOK
46098>>>>>        Function_Return bOK
46099>>>>>    End_Function
46100>>>>>
46100>>>>>    //***
46100>>>>>    //*** BW
46100>>>>>    //*** Procedure: Show_Drivers
46100>>>>>    //*** Purpose  : Show loaded database drivers
46100>>>>>    //***
46100>>>>>
46100>>>>>    Procedure Show_Drivers
46102>>>>>        String sDriverID sVersion sClient sValue
46102>>>>>        Integer iNumberOfDrivers iDriver iClient iUsersMax iSerialNo iNumServers iCount
46102>>>>>        Handle hoCLIHandler hoBtrvHandler
46102>>>>>        Boolean bStudioLicense bIsDAWDriver bIsMertechDriver
46102>>>>>
46102>>>>>        Move False to bStudioLicense
46103>>>>>
46103>>>>>        Get Create (RefClass(cCLIHandler))      to hoCLIHandler
46104>>>>>        Get Create (RefClass(cDFBtrDrvHandler)) to hoBtrvHandler
46105>>>>>
46105>>>>>        // For testing purposes:
46105>>>>>//        Send Ignore_Error of Error_Object_Id DFERR_CANT_LOAD_DLL
46105>>>>>//        Load_Driver MSSQLDRV_ID
46105>>>>>//        Load_Driver ODBC_DRV_ID
46105>>>>>//        Load_Driver DB2_DRV_ID
46105>>>>>//        Send Trap_Error of Error_Object_Id DFERR_CANT_LOAD_DLL
46105>>>>>//
46105>>>>>//        #IFDEF DUF_Use_Mertech_Drivers
46105>>>>>//            Send Ignore_Error of Error_Object_Id DFERR_CANT_LOAD_DLL
46105>>>>>//            Load_Driver SQLFLEX
46105>>>>>//            Load_Driver MDSPgSQL
46105>>>>>//            Load_Driver MDSMySQL
46105>>>>>//            Load_Driver ORAFLEX
46105>>>>>//            Send Trap_Error of Error_Object_Id DFERR_CANT_LOAD_DLL
46105>>>>>//        #ENDIF
46105>>>>>        Move False to Err
46106>>>>>
46106>>>>>        // Loop through all loaded drivers.
46106>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
46109>>>>>        If (iNumberOfDrivers > 1) Begin
46111>>>>>            Send AppendTextLn ""
46112>>>>>        End
46112>>>>>>
46112>>>>>        For iDriver from 1 to iNumberOfDrivers
46118>>>>>>
46118>>>>>            // For some weird reason it can happen that - when using Mertech drivers - that the driver index
46118>>>>>            // was increased in the CLI array, but it has no value. In that case a "Bad parameter..." error
46118>>>>>            // would be thrown, so we safeguard from that here.
46118>>>>>            Send Ignore_Error of Error_Object_Id DFERR_BAD_PARAMETER
46119>>>>>            Get_Attribute DF_DRIVER_NAME of iDriver to sDriverID
46122>>>>>            Send Trap_Error of Error_Object_Id DFERR_BAD_PARAMETER
46123>>>>>            Get IsDAWSQLDriver  sDriverID to bIsDAWDriver
46124>>>>>            Get IsMertechDriver sDriverID to bIsMertechDriver
46125>>>>>
46125>>>>>            If (sDriverID = DFBTRDRV_ID or bIsDAWDriver = True or bIsMertechDriver = True) Begin
46127>>>>>
46127>>>>>                // Pervasive/Btrieve database
46127>>>>>                If (sDriverID = DFBTRDRV_ID) Begin
46129>>>>>                    Get CKRevision of hoBtrvHandler to sVersion
46130>>>>>                    Get PSQLLocalEngineVersionInfo of hoBtrvHandler 0 to sClient
46131>>>>>                    If (sClient <> "0.0.0") Begin
46133>>>>>                        Send AppendTextLn (SFormat (C_$Pervasive_Local_Engine_Version, sClient))
46134>>>>>                    End
46134>>>>>>
46134>>>>>                    Get PSQLServerEngineVersionInfo of hoBtrvHandler 0 to sClient
46135>>>>>                    If (sClient <> "0.0.0") Begin
46137>>>>>                        Send AppendTextLn (SFormat (C_$Pervasive_Server_Engine_Version, sClient))
46138>>>>>                    End
46138>>>>>>
46138>>>>>                End
46138>>>>>>
46138>>>>>
46138>>>>>                Else Begin
46139>>>>>                    Set psDriverID of hoCLIHandler to sDriverID
46140>>>>>                    Move 0 to iNumServers
46141>>>>>                    If (sDriverID <> DATAFLEX_ID) Begin
46143>>>>>                        Get_Attribute DF_DRIVER_NUMBER_SERVERS of iDriver to iNumServers
46146>>>>>                    End
46146>>>>>>
46146>>>>>
46146>>>>>                    If (bIsDAWDriver = True) Begin
46148>>>>>                        If (sDriverID = MSSQLDRV_ID) Begin
46150>>>>>                            Get SQLClientVersion sDriverID iClient to sClient
46151>>>>>                        End
46151>>>>>>
46151>>>>>                        Get CKRevision of hoCLIHandler to sVersion
46152>>>>>                    End
46152>>>>>>
46152>>>>>
46152>>>>>                    If (bIsMertechDriver = True) Begin
46154>>>>>                    End
46154>>>>>>
46154>>>>>
46154>>>>>                    // If the serialnumber is = 0, it means that the
46154>>>>>                    // Studio licens is in use and there is no
46154>>>>>                    // number of max users defined because the driver is
46154>>>>>                    // relying on the info from the VDF license.
46154>>>>>                    If (bStudioLicense = False) Begin
46156>>>>>                        Get SerialNumber of hoCLIHandler to iSerialNo
46157>>>>>                        Move (iSerialNo = 0) to bStudioLicense
46158>>>>>                    End
46158>>>>>>
46158>>>>>                End
46158>>>>>>
46158>>>>>                Send AppendTextLn (SFormat (C_$DatabaseDriver, (sDriverID * "-" * (C_$Version + ": " + sVersion))))
46159>>>>>                If (sClient <> "" and sDriverID = MSSQLDRV_ID) Begin
46161>>>>>                    Send AppendTextLn (C_$SQL_Client_Text * sClient)
46162>>>>>                End
46162>>>>>>
46162>>>>>                If (iNumServers <> 0) Begin
46164>>>>>                    For iCount from 1 to iNumServers
46170>>>>>>
46170>>>>>                        Get_Attribute DF_DRIVER_SERVER_NAME of iDriver iCount to sValue
46173>>>>>                        If (not(sValue contains ";PWD=")) Begin
46175>>>>>                            Send AppendTextLn ("    " + C_$SQLServerText * sValue)
46176>>>>>                        End
46176>>>>>>
46176>>>>>                    Loop
46177>>>>>>
46177>>>>>                End
46177>>>>>>
46177>>>>>            End
46177>>>>>>
46177>>>>>        Loop
46178>>>>>>
46178>>>>>
46178>>>>>        Send AppendTextLn ""
46179>>>>>        If (bStudioLicense = False) Begin
46181>>>>>            Get MaxUsers of hoCLIHandler to iUsersMax
46182>>>>>            Send AppendTextLn (SFormat (C_$Max_DbDriver_Licensed_User_Count, iUsersMax))
46183>>>>>        End
46183>>>>>>
46183>>>>>        Else Begin
46184>>>>>            Send AppendTextLn C_$DF_Studio_License_Text
46185>>>>>        End
46185>>>>>>
46185>>>>>        Send Destroy of hoCLIHandler
46186>>>>>        Send Destroy of hoBtrvHandler
46187>>>>>    End_Procedure
46188>>>>>
46188>>>>>    Procedure Show_HelpFile
46190>>>>>        String sHelpFile
46190>>>>>        Integer eHelpType
46190>>>>>
46190>>>>>        If (ghoApplication <> 0) Begin
46192>>>>>            Get peHelpType Of ghoApplication To eHelpType
46193>>>>>            If (eHelpType = htHtmlHelp and ghoHtmlHelp) Begin
46195>>>>>                Get GetHelpFile Of ghoHtmlHelp To sHelpFile
46196>>>>>            End
46196>>>>>>
46196>>>>>            Else If (eHelpType = htWinHelp and Help_object_id) Begin
46199>>>>>                Get Help_filename Of Help_object_id To sHelpFile
46200>>>>>            End
46200>>>>>>
46200>>>>>            Else Begin
46201>>>>>                Move C_$ThereIsNoHelpfileDefined To sHelpFile
46202>>>>>            End
46202>>>>>>
46202>>>>>
46202>>>>>            Send AppendTextLn (SFormat (C_$HelpFile, sHelpFile))
46203>>>>>        End
46203>>>>>>
46203>>>>>    End_Procedure
46204>>>>>
46204>>>>>    Procedure Show_EnterAsTab
46206>>>>>        Boolean bEnterKeyAsTabKey
46206>>>>>        String sText
46206>>>>>
46206>>>>>        If (ghoApplication <> 0) Begin
46208>>>>>            Get pbEnterKeyAsTabKey Of ghoApplication To bEnterKeyAsTabKey
46209>>>>>            If (bEnterKeyAsTabKey) Begin
46211>>>>>                Move "True" To sText
46212>>>>>            End
46212>>>>>>
46212>>>>>            Else Begin
46213>>>>>                Move "False" To sText
46214>>>>>            End
46214>>>>>>
46214>>>>>            Send AppendTextLn (SFormat (C_$EnterKeyNavForward, sText))
46215>>>>>        End
46215>>>>>>
46215>>>>>    End_Procedure
46216>>>>>
46216>>>>>    //    During activation we will remove the old information and add the newly
46216>>>>>    //    found systeminformation
46216>>>>>    Procedure Add_Focus Integer hoRoot
46218>>>>>        Forward Send Add_Focus hoRoot
46220>>>>>
46220>>>>>        Send Delete_Data
46221>>>>>
46221>>>>>        Set Changed_State To False
46222>>>>>        Set Read_Only_State To True
46223>>>>>
46223>>>>>        Send Show_Registration
46224>>>>>        Send Show_Drivers
46225>>>>>        Send Show_ServicePack
46226>>>>>        Send Show_Versions
46227>>>>>        Send AppendTextLn ""
46228>>>>>
46228>>>>>        If (ghoApplication <> 0) Begin
46230>>>>>            Send Show_WorkSpaceInformation
46231>>>>>            Send Show_HelpFile
46232>>>>>            Send AppendTextLn ""
46233>>>>>        End
46233>>>>>>
46233>>>>>        Else Begin
46234>>>>>            Send AppendTextLn ""
46235>>>>>        End
46235>>>>>>
46235>>>>>
46235>>>>>        If (ghoConnection <> 0) Begin
46237>>>>>            Send Show_ConnectionIdInformation
46238>>>>>        End
46238>>>>>>
46238>>>>>
46238>>>>>        Send Show_Current_User
46239>>>>>        Send Show_Windows_Directory
46240>>>>>        Send Show_Current_Directory
46241>>>>>
46241>>>>>        // This is already shown in the workspace details,
46241>>>>>        // unless no workspace object is present:
46241>>>>>        If (ghoApplication = 0) Begin
46243>>>>>            Send Show_Filelist_Name
46244>>>>>        End
46244>>>>>>
46244>>>>>
46244>>>>>        If (ghoApplication <> 0) Begin
46246>>>>>            Send AppendTextLn ""
46247>>>>>            Send Show_EnterAsTab
46248>>>>>        End
46248>>>>>>
46248>>>>>
46248>>>>>        Send Show_Screen_Size
46249>>>>>        Send Show_Page_Size
46250>>>>>        Send Show_Number_Format
46251>>>>>        Send Show_Date_Format
46252>>>>>        Send Show_Lock_Delay
46253>>>>>        Send Show_Lock_Timeout
46254>>>>>        Send Show_Date
46255>>>>>        Send Show_Systemresources
46256>>>>>        Send Beginning_of_Data
46257>>>>>
46257>>>>>        Set Icon to 'default.ico'
46258>>>>>    End_Procedure
46259>>>>>End_Class
46260>>>>>
46260>>>>>Class SysInfoDialog is a ModalPanel
46261>>>>>    Procedure Construct_Object
46263>>>>>        Forward Send Construct_Object
46265>>>>>
46265>>>>>        Set Label to C_$SystemInformation
46266>>>>>        Set Size to 140 267
46267>>>>>        Set Locate_Mode to CENTER_ON_PARENT
46268>>>>>        Set Border_Style to Border_Thick
46269>>>>>        Set Sysmenu_Icon to False
46270>>>>>
46270>>>>>        // "+1" will make the panel to paint correctly.
46270>>>>>        Set piMinSize to (Hi(Size(Self))) (Low(Size(Self)) +1)
46271>>>>>
46271>>>>>        // 2014-09-14 NGS
46271>>>>>        // Added a container object around the cTexteditor
46271>>>>>        // object to get a border around the text.
46271>>>>>        Object oSysinfoDisplayContainer is a Container3d
46273>>>>>            Set Location to 2 4
46274>>>>>            Set Size to 110 255
46275>>>>>            Set Border_Style to Border_ClientEdge
46276>>>>>            Set Color to clWhite
46277>>>>>            Set peAnchors to anAll
46278>>>>>
46278>>>>>            Object oSysinfoDisplay is a SysInfoDisplay
46280>>>>>            End_Object
46281>>>>>
46281>>>>>        End_Object
46282>>>>>
46282>>>>>        Object oCloseButton is a Button
46284>>>>>            Set Label to C_$Close
46285>>>>>            Set Location to 120 210
46286>>>>>            Set Message item 0 to msg_Close_Panel
46287>>>>>            Set Default_State To True
46288>>>>>            // In case someone likes to make the AboutDialog's Border_Style to thick,
46288>>>>>            // and changes its peAnchors, we might as well prepare this object
46288>>>>>            // for that situation.
46288>>>>>            Set peAnchors to anBottomRight
46289>>>>>        End_Object
46290>>>>>
46290>>>>>        Object oCopyButton is a cCopyEditorContentButton
46292>>>>>            On_Item C_$Copy Send CopyToWindowsClipboard
46293>>>>>            Set Size to 14 50
46294>>>>>            Set Location to 120 158
46295>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46295>>>>>            // we might as well prepare the object for it.
46295>>>>>            Set peAnchors to anBottomRight
46296>>>>>            Set phoEditorHandle to (oSysinfoDisplay(Self))
46297>>>>>        End_Object
46298>>>>>
46298>>>>>        On_Key kCancel Send Close_Panel
46299>>>>>    End_Procedure
46300>>>>>
46300>>>>>    Procedure Page Integer iPageObject
46302>>>>>        Handle hMenu
46302>>>>>        Integer iPrevState
46302>>>>>
46302>>>>>        Forward Send Page iPageObject
46304>>>>>
46304>>>>>        // Ok, this seems to have been fixed in VDF 17.1!
46304>>>>>        //
46304>>>>>    End_Procedure
46305>>>>>
46305>>>>>End_Class
46306>>>>>
46306>>>>>Class cAboutEdit is an cRichEdit
46307>>>>>    Procedure Construct_Object
46309>>>>>        Forward Send Construct_Object
46311>>>>>
46311>>>>>        Property String psContentText
46312>>>>>
46312>>>>>        Set Size to 77 153
46313>>>>>        Set Location to 8 60
46314>>>>>        Set Read_Only_State to True
46315>>>>>        Set Skip_State to True
46316>>>>>        // Font size is calculated in "Twips", which are 1/1440 of an inch,
46316>>>>>        // or 1/20 of a printer's point.
46316>>>>>        Set piRightMargin to (0.1 * 1440)
46317>>>>>        Set Border_Style  to Border_None
46318>>>>>    End_Procedure
46319>>>>>
46319>>>>>    // Adds a line of text to the edit object
46319>>>>>    Procedure Add_Line String sText
46321>>>>>        String sContentText
46321>>>>>        Get psContentText to sContentText
46322>>>>>        Move (sContentText + String(sText)) to sContentText
46323>>>>>        Set psContentText to sContentText
46324>>>>>    End_Procedure
46325>>>>>
46325>>>>>    // Compared to Add_Line above, this adds an extra empty line after the passed value.
46325>>>>>    // Note that we use a property psContentText and add to it,
46325>>>>>    // because the object isn't paged yet when we add these
46325>>>>>    // values and the COM edit object needs to be paged
46325>>>>>    // for the text to become visible. See Also: Procedure Page below.
46325>>>>>    Procedure Add_LineLn String sText
46327>>>>>        String sContentText sCR
46327>>>>>
46327>>>>>        Move (Character(10) + String(Character(13))) to sCR
46328>>>>>        Get psContentText to sContentText
46329>>>>>        Move (sContentText + String(sText) + sCR) to sContentText
46330>>>>>        Set psContentText to sContentText
46331>>>>>    End_Procedure
46332>>>>>
46332>>>>>    Procedure OnLinkClicked Integer iPositionStart Integer iPositionEnd
46334>>>>>        String sLinkText
46334>>>>>        Get TextRange iPositionStart iPositionEnd to sLinkText
46335>>>>>        Send Show_HomePage sLinkText
46336>>>>>    End_Procedure
46337>>>>>
46337>>>>>    Procedure Page Integer iPageObject
46339>>>>>        String sContentText
46339>>>>>
46339>>>>>        Forward Send Page iPageObject
46341>>>>>        Get psContentText to sContentText
46342>>>>>        Send AppendText sContentText
46343>>>>>        send Beginning_of_Data
46344>>>>>    End_Procedure
46345>>>>>
46345>>>>>End_Class
46346>>>>>
46346>>>>>Class AboutDialog is a ModalPanel
46347>>>>>    Procedure Construct_Object
46349>>>>>
46349>>>>>        Forward Send Construct_Object
46351>>>>>
46351>>>>>        Set Label to C_$About
46352>>>>>        Set Size to 118 230
46353>>>>>        Set Locate_Mode to CENTER_ON_PARENT
46354>>>>>        Set Border_Style to Border_Thick
46355>>>>>        Set piMinSize to (Hi(Size(Self))) (Low(Size(Self)))
46356>>>>>
46356>>>>>        Object oSysInfoDialog is a SysInfoDialog
46358>>>>>        End_Object
46359>>>>>
46359>>>>>        Object oBox is a Container3d
46361>>>>>            Set Border_Style to Border_Normal
46362>>>>>            Set Size to 90 220
46363>>>>>            Set Location to 4 5
46364>>>>>            Set Color to clWhite
46365>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46365>>>>>            // we might as well prepare the object for it.
46365>>>>>            Set peAnchors to anAll
46366>>>>>
46366>>>>>            Object oAboutGraphic is a BitmapContainer
46368>>>>>                Set Border_Style To Border_None
46369>>>>>                Set Bitmap_Style to Bitmap_Center
46370>>>>>                Set Color to clWhite
46371>>>>>                Set Size to 45 50
46372>>>>>                Set Location to 0 3
46373>>>>>            End_Object
46374>>>>>
46374>>>>>            Object oPoweredByDFGraphic is a cBitmapContainerDFLink
46376>>>>>                Set Border_Style to Border_None
46377>>>>>                Set Bitmap_Style to Bitmap_Center
46378>>>>>                Set Color to clWhite
46379>>>>>                Set Size to 30 55
46380>>>>>                Set Location to 50 3
46381>>>>>            End_Object
46382>>>>>
46382>>>>>            Object oInfoList_Editor is an cAboutEdit
46384>>>>>                // In case someone wants to set the AboutDialog's Border_Style to thick,
46384>>>>>                // we might as well prepare the object for it.
46384>>>>>                Set peAnchors to anAll
46385>>>>>            End_Object
46386>>>>>
46386>>>>>            // These objects are here for backwards compatability only.
46386>>>>>            // They are not used.
46386>>>>>            Object oProductName is a TextBox
46388>>>>>                Set Label To C_$ProductName
46389>>>>>                Set Size To 10 45
46390>>>>>                Set Location To 8 53
46391>>>>>                Set Visible_State to False
46392>>>>>                Set Focus_Mode to NonFocusable
46393>>>>>            End_Object
46394>>>>>
46394>>>>>            Object oVersion is a TextBox
46396>>>>>                Set Label To C_$Version
46397>>>>>                Set Size To 10 25
46398>>>>>                Set Location To 21 53
46399>>>>>                Set Visible_State to False
46400>>>>>                Set Focus_Mode to NonFocusable
46401>>>>>            End_Object
46402>>>>>
46402>>>>>            Object oCopyright is a TextBox
46404>>>>>                Set Label To C_$Copyright
46405>>>>>                Set Size To 10 31
46406>>>>>                Set Location To 34 53
46407>>>>>                Set Visible_State to False
46408>>>>>                Set Focus_Mode to NonFocusable
46409>>>>>            End_Object
46410>>>>>
46410>>>>>            Object oAuthor is a TextBox
46412>>>>>                Set Label To C_$Author
46413>>>>>                Set Size To 10 22
46414>>>>>                Set Location To 46 53
46415>>>>>                Set Visible_State to False
46416>>>>>                Set Focus_Mode to NonFocusable
46417>>>>>            End_Object
46418>>>>>
46418>>>>>        End_Object
46419>>>>>
46419>>>>>        Object oOKButton is a Button
46421>>>>>            On_Item C_$Close Send Close_Panel
46422>>>>>            Set Location to 98 176
46423>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46423>>>>>            // we might as well prepare the object for it.
46423>>>>>            Set peAnchors to anBottomRight
46424>>>>>        End_Object
46425>>>>>
46425>>>>>        Object oSysInfoButton is a Button
46427>>>>>            On_Item C_$SystemInfo Send Show_Sysinfo
46428>>>>>            Set Location to 98 123
46429>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46429>>>>>            // we might as well prepare the object for it.
46429>>>>>            Set peAnchors to anBottomRight
46430>>>>>        End_Object
46431>>>>>
46431>>>>>        Object oCopyButton is a cCopyEditorContentButton
46433>>>>>            On_Item C_$Copy Send CopyToWindowsClipboard
46434>>>>>            Set Size to 14 50
46435>>>>>            Set Location to 98 70
46436>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46436>>>>>            // we might as well prepare the object for it.
46436>>>>>            Set peAnchors to anBottomRight
46437>>>>>            Set phoEditorHandle to (oInfoList_Editor(Self))
46438>>>>>        End_Object
46439>>>>>
46439>>>>>        On_Key Kcancel Send KeyAction of oOKButton
46440>>>>>        Set Logo   to "DacAbout.bmp"  // Square bitmaps of 80x80 work best
46441>>>>>        Set LogoDF to "DF32.bmp"
46442>>>>>//        Set LogoVDF to "PoweredByOrange.bmp"
46442>>>>>    End_Procedure
46443>>>>>
46443>>>>>    Procedure Page Integer iPageObject
46445>>>>>        Handle hMenu
46445>>>>>        Integer iPrevState
46445>>>>>
46445>>>>>        Forward Send Page iPageObject
46447>>>>>        // Due to a bug in the ModalPanel class, we need to set the icon here:
46447>>>>>        Set Icon to "Default.ico"
46448>>>>>
46448>>>>>        // Shadow upper left corner menu items: (icon menu items)
46448>>>>>        Move (GetSystemMenu(Window_Handle(Self), False)) to hMenu
46449>>>>>        Move (EnableMenuItem(hMenu, SC_RESTORE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46450>>>>>        // The "Move" menu command may come in handy to have.
46450>>>>>        // Move (EnableMenuItem(hMenu, SC_MOVE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46450>>>>>        Move (EnableMenuItem(hMenu, SC_SIZE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46451>>>>>        Move (EnableMenuItem(hMenu, SC_MINIMIZE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46452>>>>>        Move (EnableMenuItem(hMenu, SC_MAXIMIZE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46453>>>>>        // The "Close" menu command may be good to have.
46453>>>>>        // Move (EnableMenuItem(hMenu, SC_CLOSE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46453>>>>>    End_Procedure
46454>>>>>
46454>>>>>    Procedure Set ProductName String sText
46456>>>>>        Set Value of oProductName to sText
46457>>>>>    End_Procedure
46458>>>>>
46458>>>>>    Procedure Set Copyright String sText
46460>>>>>        Set Value of oCopyright to sText
46461>>>>>    End_Procedure
46462>>>>>
46462>>>>>    Procedure Set Author String sText
46464>>>>>        Set Value of oAuthor to sText
46465>>>>>    End_Procedure
46466>>>>>
46466>>>>>    Procedure Set Version String sVersion
46468>>>>>        Handle hoVersionInfo
46468>>>>>        Boolean bIncluded
46468>>>>>        Integer iMajor iMinor iRelease iBuild
46468>>>>>        Date dCompileDate
46468>>>>>        String sCertInfo
46468>>>>>
46468>>>>>        If (sVersion = "") Begin
46470>>>>>            // This automatically shows the program version of the program, if available.
46470>>>>>            // It will be displayed as the second item in the edit object.
46470>>>>>            If (ghoApplication <> 0) Begin
46472>>>>>                Get phoVersionInfo of ghoApplication to hoVersionInfo
46473>>>>>                If (hoVersionInfo <> 0) Begin
46475>>>>>                    Get pbIncluded of hoVersionInfo to bIncluded
46476>>>>>                    If (bIncluded) Begin
46478>>>>>                        Get piVersionMajor of hoVersionInfo to iMajor
46479>>>>>                        Get piVersionMinor of hoVersionInfo to iMinor
46480>>>>>                        Get piVersionRelease of hoVersionInfo to iRelease
46481>>>>>                        Get piVersionBuild of hoVersionInfo to iBuild
46482>>>>>                        Move (SFormat (C_$VERSION + ": %1.%2.%3.%4", iMajor, iMinor, iRelease, iBuild)) to sVersion
46483>>>>>                    End
46483>>>>>>
46483>>>>>                End
46483>>>>>>
46483>>>>>            End
46483>>>>>>
46483>>>>>        End
46483>>>>>>
46483>>>>>
46483>>>>>        // Display the compiled date as the next row in the edit object, after the program version.
46483>>>>>        Get GetCompileDate to dCompileDate
46484>>>>>        If (sVersion <> "") Begin
46486>>>>>            Send Add_Lineln (sVersion + (Character(13)) + C_$Compile_Date * String(dCompileDate))
46487>>>>>        End
46487>>>>>>
46487>>>>>
46487>>>>>        Get IsProgramDigitallySigned to sCertInfo
46488>>>>>        If (sCertInfo <> "-1") Begin
46490>>>>>            If (sCertInfo <> "") Begin
46492>>>>>                Send Add_LineLn sCertInfo
46493>>>>>            End
46493>>>>>>
46493>>>>>            Else Begin
46494>>>>>                Send Add_LineLn "The program has NOT been digitally signed, or there is a problem with the digical certificate."
46495>>>>>            End
46495>>>>>>
46495>>>>>        End
46495>>>>>>
46495>>>>>    End_Procedure
46496>>>>>
46496>>>>>    Function IsDate String sDate Returns Boolean
46498>>>>>        Boolean bIsDate
46498>>>>>        String sGoodCharacters sChar
46498>>>>>        Integer iCount iLength
46498>>>>>
46498>>>>>        Move True to bIsDate
46499>>>>>        Move "0123456789-/" to sGoodCharacters
46500>>>>>        Move (Length(sDate)) to iLength
46501>>>>>        For iCount from 1 to iLength
46507>>>>>>
46507>>>>>            Move (Left(sDate, 1)) to sChar
46508>>>>>            Move (Mid(sDate, 12, 2)) to sDate
46509>>>>>            Move (sGoodCharacters contains sChar) to bIsDate
46510>>>>>            If (bIsDate = False) Begin
46512>>>>>                Move iLength to iCount
46513>>>>>            End
46513>>>>>>
46513>>>>>        Loop
46514>>>>>>
46514>>>>>        Function_Return bIsDate
46515>>>>>    End_Function
46516>>>>>
46516>>>>>    Function GetCompileDate Returns Date
46518>>>>>        Date dCompileDate
46518>>>>>        String sAppFilename sProgram sData sCompileDate
46518>>>>>        Integer iChannel iPos iDateFormat iCount iSize
46518>>>>>        Boolean bIsValid
46518>>>>>
46518>>>>>        Move 0 to dCompileDate
46519>>>>>        // Get full path to the current running executable
46519>>>>>        Get GetApplicationFileName of ghoApplication to sAppFilename
46520>>>>>        Get GetApplicationName     of ghoApplication to sProgram
46521>>>>>
46521>>>>>        //Read the current file  up to where the data we're interesting in is (this was hand calced and so could vary)
46521>>>>>        Get Seq_Open_Input_Channel ("binary:" * sAppFilename) to iChannel
46522>>>>>
46522>>>>>        Get_Argument_Size to iSize
46523>>>>>        Set_Argument_Size 15000000
46524>>>>>>
46524>>>>>        Read_Block channel iChannel sData 15000000   // This must be big enough to reach the compile date location
46526>>>>>        Move (Pos(sProgram,sData)) to iPos
46527>>>>>        If (iPos > 0) Begin
46529>>>>>            // The compile date is 10 characters long and starts 3 characters after the program name
46529>>>>>            Move (Mid(sData, 10, iPos + Length(sProgram) + 3)) to sCompileDate  // In US format
46530>>>>>
46530>>>>>            // If the current date format is non US, we need to temporary
46530>>>>>            // change the format and then move the string to the date variable.
46530>>>>>            Get_Attribute DF_DATE_FORMAT to iDateFormat
46533>>>>>            Set_Attribute DF_DATE_FORMAT to DF_DATE_USA
46536>>>>>            Move (Date(sCompileDate))    to dCompileDate
46537>>>>>            Set_Attribute DF_DATE_FORMAT to iDateFormat // Reset date format
46540>>>>>        End
46540>>>>>>
46540>>>>>        Else Begin
46541>>>>>            Error DFERR_PROGRAM "Compile Date location in .exe not found"
46542>>>>>>
46542>>>>>        End
46542>>>>>>
46542>>>>>
46542>>>>>        Send Seq_Close_Channel iChannel
46543>>>>>        Set_Argument_Size iSize
46544>>>>>>
46544>>>>>//        Read_Block channel iChannel sData (8 * 1024)    // First 8K is .exe header skip it
46544>>>>>//        Read_Block channel iChannel sData 75            // The compile information we're interested in
46544>>>>>
46544>>>>>        // The data is padded with Character(0)s. Strip them out
46544>>>>>//        Move (CString(sData)) to sData
46544>>>>>
46544>>>>>        // The compile date is after the first ", ", so string parsing is required
46544>>>>>//        Move (Pos(", ", sData)) to iPos
46544>>>>>//        Move (Mid(sData, 10, (iPos + 2) ))  to sCompileDate // In US format
46544>>>>>        // If the current date format is non US, we need to temporary
46544>>>>>        // change the format and then move the string to the date variable.
46544>>>>>//        Get_Attribute DF_DATE_FORMAT        to iDateFormat
46544>>>>>//        Set_Attribute DF_DATE_FORMAT        to DF_DATE_USA
46544>>>>>//
46544>>>>>//        // Note the build in IsDateValid can return the wrong result
46544>>>>>//        // when controls characters are part of the sCompileDate.
46544>>>>>//        Get IsDate sCompileDate))           to bIsValid
46544>>>>>//        If (bIsValid = True) Begin
46544>>>>>//            Move (Date(sCompileDate))       to dCompileDate
46544>>>>>//        End
46544>>>>>//
46544>>>>>//        // As of DataFlex 19.1 the header has changed; and so has the compile date location.
46544>>>>>//        // It seems to me that the position for the compilation date can vary. So we read line-by-line
46544>>>>>//        // until we encounter the program name that appears just in front of the compile date.
46544>>>>>//        // Although I'm not sure about if/how the position varies, the below seems to work just fine.
46544>>>>>//        If (dCompileDate = 0) Begin
46544>>>>>//            Move "" to sCompileDate
46544>>>>>//            Move 30000 to iSize
46544>>>>>//            For iCount from 1 to iSize
46544>>>>>//                Readln channel iChannel sData
46544>>>>>//                Move (Pos(sProgram, sData)) to iPos
46544>>>>>//                If (iPos <> 0) Begin
46544>>>>>//                    Move (Mid(sData, 10, (iPos + (Length(sProgram) + 2)))) to sCompileDate
46544>>>>>//                    Move (Trim(sCompileDate)) to sCompileDate
46544>>>>>//                    Move iSize to iCount // We're out of here.
46544>>>>>//                End
46544>>>>>//            Loop
46544>>>>>//            If (Left(sCompileDate, 1) = "0") Begin
46544>>>>>//                Move ("1" + String(sCompileDate)) to sCompileDate
46544>>>>>//            End
46544>>>>>//            Get IsDate sCompileDate)) to bIsValid
46544>>>>>//            If (bIsValid = True) Begin
46544>>>>>//                Move (Date(sCompileDate)) to dCompileDate
46544>>>>>//            End
46544>>>>>//        End
46544>>>>>//        Send Seq_Close_Channel iChannel
46544>>>>>//        Set_Attribute DF_DATE_FORMAT to iDateFormat // Reset date format
46544>>>>>
46544>>>>>        Function_Return dCompileDate
46545>>>>>    End_Function
46546>>>>>
46546>>>>>    // A variant of the ShellExecute Win API, but it waits until the process that is started
46546>>>>>    // (the passed program), has been finished
46546>>>>>    // The DOS box does also _not_ flash briefly.
46546>>>>>    Procedure RunProgramWait String sProgram String sParameter
46548>>>>>        Handle hProcess
46548>>>>>        Integer iVoid
46548>>>>>        AboutSHELLEXECUTEINFO sInfo
46548>>>>>        AboutSHELLEXECUTEINFO sInfo
46548>>>>>
46548>>>>>        Move (SizeOfType(AboutSHELLEXECUTEINFO)) to sInfo.cbSize
46549>>>>>
46549>>>>>        Move SEE_MASK_NOCLOSEPROCESS to sInfo.fMask
46550>>>>>        Move SW_SHOW                 to sInfo.nShow
46551>>>>>
46551>>>>>        Move (AddressOf(sProgram))   to sInfo.lpFile
46552>>>>>        Move (AddressOf(sParameter)) to sInfo.lpParameters
46553>>>>>        // This will "hide" the DOS box from showing (no flasing box):
46553>>>>>        Move 0                       to sInfo.nShow
46554>>>>>
46554>>>>>        Move (AboutShellExecuteEx(AddressOf(sInfo))) to iVoid
46555>>>>>        Move sInfo.hProcess to hProcess
46556>>>>>        If (hProcess) Begin
46558>>>>>            Move (AboutWaitForSingleObject(hProcess, -1)) to iVoid
46559>>>>>            Move (AboutCloseHandle(hProcess)) to iVoid
46560>>>>>        End
46560>>>>>>
46560>>>>>    End_Procedure
46561>>>>>
46561>>>>>    Function AddFolderDelimiter String sPath Returns String
46563>>>>>        String sDirSep
46563>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
46564>>>>>        Move (Trim(sPath)) to sPath
46565>>>>>        If (Right(sPath, 1) <> sDirSep) Begin
46567>>>>>            Move (sPath + sDirSep) to sPath
46568>>>>>        End
46568>>>>>>
46568>>>>>        Function_Return sPath
46569>>>>>    End_Function
46570>>>>>
46570>>>>>    // Returns an empty string if the current program is not digitally signed,
46570>>>>>    // or there is a problem with the certificate.
46570>>>>>    // Note: A copy of the Microsoft signtool.exe program must reside in the Programs folder,
46570>>>>>    //       else nothing is shown in the About object. (Size 355 KB)
46570>>>>>    Function IsProgramDigitallySigned Returns String
46572>>>>>        Boolean bExists
46572>>>>>        String sPath sProgram sParams sRetval
46572>>>>>        Integer iCh
46572>>>>>
46572>>>>>        Move "" to sRetval
46573>>>>>        Get psProgramPath of (phoWorkspace(ghoApplication)) to sPath
46574>>>>>        Get AddFolderDelimiter sPath to sPath
46575>>>>>        File_Exist (sPath + CS_SignProgram) bExists
46576>>>>>        If (bExists = False) Begin
46578>>>>>            Function_Return "-1"
46579>>>>>        End
46579>>>>>>
46579>>>>>
46579>>>>>        Get GetApplicationFileName of ghoApplication to sProgram
46580>>>>>        Move (CS_VerifyCredentials * CS_DefAuthVerPolicy) to sParams
46581>>>>>        Move (sParams * '"' + sProgram + '"') to sParams
46582>>>>>        Move (sParams * String("| clip"))    to sParams
46583>>>>>        Get Seq_New_Channel to iCh
46584>>>>>        Direct_Output channel iCh (sPath + CS_TempCertBatchFile)
46586>>>>>            Writeln channel iCh ('"' + sPath + CS_SignProgram + '"' * sParams)
46589>>>>>        Close_Output channel iCh
46591>>>>>        // New ShellExecute based message that waits for the passed process to end.
46591>>>>>        Send RunProgramWait (sPath + CS_TempCertBatchFile) ""
46592>>>>>        Direct_Input channel iCh "CLIPBOARD:"
46594>>>>>            Readln channel iCh sRetval
46596>>>>>            Readln channel iCh sRetval
46598>>>>>            Readln channel iCh sRetval
46600>>>>>            Readln channel iCh sRetval
46602>>>>>        Close_Input channel iCh
46604>>>>>        Send Seq_Release_Channel iCh
46605>>>>>        If (Lowercase(sRetval) contains "authenticode") Begin
46607>>>>>            Move "This program has been digitally signed and the certificate is valid." to sRetval
46608>>>>>        End
46608>>>>>>
46608>>>>>        Else Begin
46609>>>>>            Move "" to sRetval
46610>>>>>        End
46610>>>>>>
46610>>>>>//        Get DeleteFile (sPath + CS_TempCertBatchFile) to iRetval
46610>>>>>        EraseFile (sPath + CS_TempCertBatchFile)
46611>>>>>>
46611>>>>>        Function_Return sRetval
46612>>>>>    End_Function
46613>>>>>
46613>>>>>    Procedure Add_LineLn String sValue
46615>>>>>        Send Add_LineLn of oInfoList_Editor sValue
46616>>>>>    End_Procedure
46617>>>>>
46617>>>>>    Procedure Add_Line String sValue
46619>>>>>        Send Add_Line of oInfoList_Editor sValue
46620>>>>>    End_Procedure
46621>>>>>
46621>>>>>    Procedure Set Logo string sLogo
46623>>>>>        // Square bitmaps of 80x80 work best
46623>>>>>        Set Bitmap of oAboutGraphic to sLogo
46624>>>>>    End_Procedure
46625>>>>>
46625>>>>>    Procedure Set LogoDF String sLogo
46627>>>>>        Set Bitmap of oPoweredByDFGraphic to sLogo
46628>>>>>    End_Procedure
46629>>>>>
46629>>>>>    Procedure Show_Sysinfo
46631>>>>>        Send Popup_Modal of oSysinfoDialog
46632>>>>>    End_Procedure
46633>>>>>
46633>>>>>    Procedure Show_HomePage String sWebpage
46635>>>>>        Handle hWnd
46635>>>>>        Get Window_Handle to hWnd
46636>>>>>        Runprogram Shell Background (Trim(sWebpage))
46637>>>>>    End_Procedure
46638>>>>>
46638>>>>>End_Class
46639>>>
46639>>>// Martin Moleman on SQL Server and DateTime2 (Don't use DataTime any longer !)
46639>>>// One remark about your change: I would not change to datetime2(7) (7 decimals) but to
46639>>>// datetime2(3) (3 decimals = milliseconds) or If you don't need the milliseconds datetime2(0).
46639>>>// The reason is that the DataFlex DateTime type only allows 3 decimals. When using 7
46639>>>// decimals you may Get truncation that again may cause problems with finding.
46639>>>//
46639>>>// Important! The conversion from DateTime to Date or datetime2 will also convert all dummy zero Date values from 1753-01-01 to 0001-01-01.
46639>>>// This is important to realize. The conversion will actually change the data in the database (done by the driver)
46639>>>
46639>>>
46639>>>// DF_DATABASE_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA
46639>>>// Determines for all DataFlex data types, which SQL native types willbe used when creating new columns.
46639>>>// Set_Attribute DF_DATABASE_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA of {driverNumber} {databaseHandle} ;
46639>>>// to {MAP_DF_TO_SQL_TYPE_SQL2000|MAP_DF_TO_SQL_TYPE_SQL2005|MAP_DF_TO_SQL_TYPE_SQL2008|MAP_DF_TO_SQL_TYPE_SQL2012}
46639>>>//
46639>>>
46639>>>Class cDbUpdateFunctionLibrary is a cObject
46640>>>    Import_Class_Protocol cDbUpdateFunctionLibrary_Mixin
Including file: ParseKeyWord.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ParseKeyWord.pkg)
46641>>>>
46641>>>>Function ParseKeyWord String sConnect String sKeyWord Returns String
46643>>>>    Integer iStart iEnd
46643>>>>    String sRetval
46643>>>>
46643>>>>    Move (Trim(sConnect)) to sConnect
46644>>>>    Move (Pos(Uppercase(sKeyWord), Uppercase(sConnect)))  to iStart
46645>>>>    If (iStart = 0) Begin
46647>>>>        Function_Return ""
46648>>>>    End
46648>>>>>
46648>>>>    Move (Left(sConnect, (iStart -1 + Length(sKeyWord)))) to sRetval
46649>>>>    Move (Replace(sRetval, sConnect, "")) to sRetval
46650>>>>    If (sKeyWord = Uppercase(CS_SQLConnectionIDText)) Begin
46652>>>>        Move (Pos(",", sRetval))          to iEnd
46653>>>>    End
46653>>>>>
46653>>>>    Else Begin
46654>>>>        Move (Pos(";", sRetval))          to iEnd
46655>>>>    End
46655>>>>>
46655>>>>    If (iEnd = 0 and (sRetval contains ",")) Begin
46657>>>>        Move (Pos(",", sRetval))          to iEnd
46658>>>>        Decrement iEnd
46659>>>>    End
46659>>>>>
46659>>>>    If (iEnd <> 0) Begin
46661>>>>        Move (Left(sRetval, (iEnd -1)))   to sRetval
46662>>>>    End
46662>>>>>
46662>>>>    Move (Replace("=", sRetval, ""))      to sRetval
46663>>>>
46663>>>>    Function_Return (Trim(sRetval))
46664>>>>End_Function
46665>>>>
46665>>>>
46665>>>
46665>>>    Procedure Construct_Object
46667>>>        Handle ho
46667>>>        Forward Send Construct_Object
46669>>>
46669>>>        Move Self to ghoDbUpdateFunctionLibrary
46670>>>
46670>>>        Send CreateDbUpdateLibraryProperties
46671>>>        // If no ghoSQLConnectionHandler object has been created prior to this object,
46671>>>        // we will create one as it is used for all ConnectionID, ConnectionString
46671>>>        // etc settings.
46671>>>        If (ghoSQLConnectionHandler = 0) Begin
46673>>>            Get Create (RefClass(cSQLConnectionHandler)) to ho
46674>>>            Set phoSQLConnectionHandler to ho
46675>>>        End   
46675>>>>
46675>>>        
46675>>>        Property String private.psCollation "Latin1_General_CS_AS"
46676>>>
46676>>>    End_Procedure
46677>>>
46677>>>    Procedure End_Construct_Object
46679>>>        Forward Send End_Construct_Object
46681>>>    End_Procedure
46682>>>
46682>>>    // *** SQL Messages for making changes to the SQL back-end ***
46682>>>    //
46682>>>    // * Dummy function for the Studio's Code Explorer *
46682>>>    Function SQL_DATABASE_FUNCTIONS Returns Boolean
46684>>>        Function_Return False
46685>>>    End_Function
46686>>>
46686>>>    // Function for creating a new *Database*.
46686>>>    // Note: This is for creating SQL DATABASES - not tables!
46686>>>    // Returns True if successful.
46686>>>    // ToDo: Currently only works for MS-SQL...
46686>>>    Function SqlDatabaseCreate String sDriverID String sDatabase Boolean bUpdateConnectionString Boolean bPermanantly Returns Boolean
46688>>>        String sSQL sSQL1 sConnectionID sConnectionString
46688>>>        String sCreateDatabaseKeyWord sSelectFromWhereName sCollation sCollateKeyWord
46688>>>        Handle hConnection hStmt hoSQLManager
46688>>>        Integer iFetchResult iDbType
46688>>>        Boolean bOK bMertechDriver bExists
46688>>>
46688>>>        Get piDbType to iDbType
46689>>>//        If (iDbType <> EN_DbTypeMSSQL and sDriverID <> MDSMySQL and sDriverID <> MDSDB2 and sDriverID <> ODBC_DRV_ID) Begin
46689>>>        If (iDbType <> EN_DbTypeMSSQL and iDbType <> EN_DbTypeDB2 and iDbType <> EN_DbTypeMySQL and iDbType <> EN_DbTypePostgre) Begin
46691>>>            Error DFERR_PROGRAM "Sorry, the SqlDatabaseCreate function is currently only supported for MS-SQL, MySQL & PostGre and DB2 with Mertech drivers"
46692>>>>
46692>>>            Function_Return False
46693>>>        End
46693>>>>
46693>>>
46693>>>        Get SqlUtilCheckIfDatabaseExists sDatabase to bExists
46694>>>        If (bExists = True) Begin
46696>>>            Function_Return True
46697>>>        End
46697>>>>
46697>>>
46697>>>        Get IsMertechDriver sDriverID to bMertechDriver
46698>>>        If (bMertechDriver = False) Begin
46700>>>            Get phoSQLManager to hoSQLManager
46701>>>        End
46701>>>>
46701>>>        Else Begin
46702>>>            Get _MertechSQLManagerHandle to hoSQLManager
46703>>>        End
46703>>>>
46703>>>
46703>>>        Get psConnectionID     to sConnectionID
46704>>>        Get psConnectionString to sConnectionString
46705>>>        Move 0 to LastErr
46706>>>
46706>>>        If (sDriverID = ODBC_DRV_ID) Begin
46708>>>            // If an ODBC data source (DSN) we cannot pass the UID & PWD; so strip them from the connection string.
46708>>>            // ToDo: 2018-08-11 I think this is wrong and the uid & pw should be there.
46708>>>//            If (Uppercase(sConnectionString) contains CS_SQLIniDSNKeyword) Begin
46708>>>//                Move (Pos(";", sConnectionString)) to iPos
46708>>>//                If (iPos > 0) Begin
46708>>>//                    Move (Left(sConnectionString, (iPos - 1))) to sConnectionString
46708>>>//                    Move (Trim(sConnectionString)) to sConnectionString
46708>>>//                End
46708>>>//            End
46708>>>        End
46708>>>>
46708>>>
46708>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
46709>>>        Get SqlConnect of hoSQLManager sDriverID sConnectionString to hConnection
46710>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
46711>>>        If (LastErr = CLIERR_LOGIN_UNSUCCESSFUL) Begin
46713>>>            Error DFERR_PROGRAM (CS_DUF_LoginToDbServerFailed + "\n" + sConnectionString)
46714>>>>
46714>>>            Function_Return False
46715>>>        End
46715>>>>
46715>>>
46715>>>        Get SqlOpen of hConnection to hStmt
46716>>>
46716>>>        If (hStmt = 0) Begin
46718>>>            Send SqlDisconnect of hoSQLManager
46719>>>            Error DFERR_PROGRAM CS_DUF_ConnectError
46720>>>>
46720>>>            Function_Return False
46721>>>        End
46721>>>>
46721>>>
46721>>>        Get psCollation to sCollation
46722>>>
46722>>>        Case Begin
46722>>>            Case (sDriverID = MSSQLDRV_ID)
46724>>>                Get _SqlFindKeyWord CI_SQLCreateDatabase to sCreateDatabaseKeyWord
46725>>>                Get _SqlSelectFromWhereName to sSelectFromWhereName
46726>>>                Move (sSelectFromWhereName + "='" + sDatabase + "'") to sSQL
46727>>>
46727>>>                // Check if database exists
46727>>>                Send SqlExecDirect of hStmt sSQL
46728>>>                Get SqlFetch of hStmt to iFetchResult
46729>>>                Send SqlClose of hStmt
46730>>>                Send SqlDisconnect of hConnection
46731>>>                // If database already exists we're out of here!
46731>>>                // Note that we return True as this is not an error.
46731>>>                If (iFetchResult > 0) Begin
46733>>>                    Function_Return True
46734>>>                End
46734>>>>
46734>>>                // Database doesn't exist, create it.
46734>>>                If (iFetchResult = 0) Begin
46736>>>                    Move (sCreateDatabaseKeyWord + " [" + sDatabase + "]") to sSQL1
46737>>>                    Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
46738>>>                    If (sCollation <> "") Begin
46740>>>                        Get _SqlFindKeyWord CI_SQLDatabaseCollation to sCollateKeyWord
46741>>>                        Move (sSQL1 * String(sCollateKeyWord) * String(sCollation)) to sSQL1
46742>>>                    End
46742>>>>
46742>>>                    Send SqlUtilExecuteQuery sSQL1 sDriverID
46743>>>                    Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
46744>>>                    If (LastErr = CLIERR_GENERAL_ERROR) Begin
46746>>>                        Function_Return False
46747>>>                    End
46747>>>>
46747>>>                    // We need to wait a short time for Sql to finish, especially Windows to write the new file to disk.
46747>>>                    Sleep 1
46748>>>                    Send SqlUtilExecuteQuery sSQL sDriverID
46749>>>                End
46749>>>>
46749>>>                Case Break
46750>>>
46750>>>            Case (sDriverID = MDSPgSQL)
46753>>>                SQLIncludeScriptFile ..\Scripts\CreatePostgreSQLDatabase.sql as CreatePostgreSQLDatabase.sql
46753>>>                Get _SqlUtilCreatePostGreSQLDatabaseByScript "CreatePostgreSQLDatabase.sql" sDatabase to bOK
46754>>>                Case Break
46755>>>
46755>>>            Case (sDriverID = MDSMySQL or (iDbType = EN_DbTypeMySQL and sDriverID = ODBC_DRV_ID))
46758>>>                // ToDo: How should this be set/checked?
46758>>>//                If (Lowercase(Left(sCollation, 3)) <> "utf") Begin
46758>>>//                    Set psCollation to "utf8"
46758>>>//                End
46758>>>                SQLIncludeScriptFile ..\Scripts\CreateMySQLDatabase.sql as CreateMySQLDatabase.sql
46758>>>                Get _SqlUtilCreateMySQLDatabaseByScript "CreateMySQLDatabase.sql" sDatabase to bOK
46759>>>                Case Break
46760>>>
46760>>>            Case (sDriverID = MDSDB2)
46763>>>                Case Break
46764>>>
46764>>>            Case Else
46764>>>                Error DFERR_PROGRAM "Unsupported database type"
46765>>>>
46765>>>        Case End
46765>>>
46765>>>        If (Err = False) Begin
46767>>>            Send LogError ("The Database:" * String(sDatabase) * "was created successfully for driver:" * String(sDriverID)) False
46768>>>        End
46768>>>>
46768>>>        // If used in e.g. the cDbUpdateHandler we want to change the login database name to
46768>>>        // the one we just created.
46768>>>        If (bUpdateConnectionString = True and Err = False) Begin
46770>>>            Set psDatabase to sDatabase
46771>>>            //...and perhaps also the SQLConnections.ini file setting.
46771>>>            If (bPermanantly = True) Begin
46773>>>                If (ghoSQLConnectionHandler <> 0) Begin
46775>>>                    Get SQLIniFileSetDefaultConnection of ghoSQLConnectionHandler sConnectionID to bOK
46776>>>                End
46776>>>>
46776>>>            End
46776>>>>
46776>>>        End
46776>>>>
46776>>>
46776>>>        Function_Return (Err = False)
46777>>>    End_Function
46778>>>
46778>>>    // Backs up an SQL database to a folder of choice. If no path is passed the SQL default backup folder
46778>>>    // will be used.
46778>>>    Function SqlDatabaseBackupToDisk String sDatabase String sBackupName String sPath Boolean bShowProg Returns Boolean
46780>>>        Boolean bOK bExists bShowProgress
46780>>>        String sStatement sDriverID
46780>>>        tSQLScriptArray SQLScriptArray SQLScriptArrayPercentReady
46780>>>        tSQLScriptArray SQLScriptArray SQLScriptArrayPercentReady
46780>>>        Integer iDbType
46780>>>
46780>>>        If (sDatabase = "") Begin
46782>>>            Error DFERR_PROGRAM "The database name was not passed as a parameter to the 'SqlUtilBackupDatabaseToDisk' function"
46783>>>>
46783>>>            Function_Return False
46784>>>        End
46784>>>>
46784>>>        If (sBackupName = "") Begin
46786>>>            Error DFERR_PROGRAM "The database backup name was not passed as a parameter to the 'SqlUtilBackupDatabaseToDisk' function"
46787>>>>
46787>>>            Function_Return False
46788>>>        End
46788>>>>
46788>>>
46788>>>        // Create backup-folder if it doesn't exist
46788>>>        Get vFolderExists sPath to bExists
46789>>>        If (bExists = False) Begin
46791>>>            Get vCreateDirectory sPath to bOK
46792>>>            If (bOK = False) Begin
46794>>>                Error DFERR_PROGRAM ("Could not create database backup folder:" * sPath)
46795>>>>
46795>>>                Function_Return False
46796>>>            End
46796>>>>
46796>>>        End
46796>>>>
46796>>>        // Make sure the path ends with a back-slash
46796>>>        If (sPath <> "") Begin
46798>>>            Get vFolderFormat sPath to sPath
46799>>>        End
46799>>>>
46799>>>
46799>>>        Get psDriverID to sDriverID
46800>>>        Get piDbType   to iDbType
46801>>>        If (num_arguments > 3) Begin
46803>>>            Move bShowProg to bShowProgress
46804>>>        End
46804>>>>
46804>>>
46804>>>        Case Begin
46804>>>            Case (iDbType = EN_DbTypeMSSQL)
46806>>>                SQLIncludeScriptFile ..\Scripts\BackupMSSQLDatabase.sql as BackupMSSQLDatabase.sql
46806>>>                SQLIncludeScriptFile ..\Scripts\GetPercentageBackupCompletionMSSQL.sql as GetPercentageBackupCompletionMSSQL.sql
46806>>>                Get SqlUtilReadResource of ghoDbUpdateFunctionLibrary "BackupMSSQLDatabase.sql" sDriverID False to SQLScriptArray
46807>>>                Get SqlUtilReadResource of ghoDbUpdateFunctionLibrary "GetPercentageBackupCompletionMSSQL.sql" sDriverID False to SQLScriptArrayPercentReady
46808>>>
46808>>>                Move SQLScriptArray.sSQLScriptArray[0] to sStatement
46809>>>                Move (Replaces("DATABASE_NAME_XXX", sStatement, sDatabase))   to sStatement
46810>>>                Move (Replaces("BACKUP_PATH_XXX",   sStatement, sPath))       to sStatement
46811>>>                Move (Replaces("BACKUP_NAME_XXX",   sStatement, sBackupName)) to sStatement
46812>>>                Move sStatement to SQLScriptArray.sSQLScriptArray[0]
46813>>>                Get SqlUtilExecuteEmbeddedScript of ghoDbUpdateFunctionLibrary SQLScriptArray sDriverID False "" bShowProgress to bOK
46814>>>                Case Break
46815>>>            Case Else
46815>>>                Send Info_Box ("The SqlUtilBackupDatabaseToDisk function is currently not implemented for the driver:" * sDriverID + ". It would be great if you could spend a couple of minutes and add a little ESQL code snippet to make it work for that driver! Thanks for helping out.")
46816>>>        Case End
46816>>>
46816>>>        Function_Return bOK
46817>>>    End_Function
46818>>>
46818>>>    Function SqlDatabaseCollationQuery String sDatabase Boolean bSilent Returns String
46820>>>//        Boolean bOK bExists
46820>>>        String sStatement sDriverID sRetval //sPrevious
46820>>>        tSQLScriptArray SQLScriptArray SQLScriptArrayPercentReady
46820>>>        tSQLScriptArray SQLScriptArray SQLScriptArrayPercentReady
46820>>>        Integer iDbType iRows iFetchResult //iColumn
46820>>>        Handle hoSQLHandler hoSQLConnect hstmt
46820>>>        tSQLConnection SQLConnection
46820>>>        tSQLConnection SQLConnection
46820>>>
46820>>>        If (sDatabase = "") Begin
46822>>>            Error DFERR_PROGRAM "The database name was not passed as a parameter to the 'SqlUtilDatabaseCollation' function"
46823>>>>
46823>>>            Function_Return ""
46824>>>        End
46824>>>>
46824>>>
46824>>>        Move "" to sRetval
46825>>>        Get psDriverID to sDriverID
46826>>>        Get piDbType   to iDbType
46827>>>
46827>>>        Case Begin
46827>>>            Case (iDbType = EN_DbTypeMSSQL)
46829>>>                SQLIncludeScriptFile ..\Scripts\QueryMSSQLCollation.sql as QueryMSSQLCollation.sql
46829>>>                Get SqlUtilReadResource of ghoDbUpdateFunctionLibrary "QueryMSSQLCollation.sql" sDriverID False to SQLScriptArray
46830>>>
46830>>>                Move SQLScriptArray.sSQLScriptArray[0] to sStatement
46831>>>                Move (Replaces("DATABASE_NAME_XXX", sStatement, sDatabase)) to sStatement
46832>>>                Get phoSQLManager to hoSQLHandler
46833>>>
46833>>>                If (hoSQLHandler <> 0) Begin
46835>>>                    Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
46836>>>                    Get SQLConnect of hoSQLHandler SQLConnection.sDriverID SQLConnection.sConnectionString to hoSQLConnect
46837>>>
46837>>>                    If (hoSQLConnect <> 0) Begin
46839>>>                        Get SQLOpen of hoSQLConnect to hstmt
46840>>>                        If (hstmt <> 0) Begin
46842>>>                            Send SqlExecDirect of hstmt sStatement
46843>>>                            Get SqlStmtAttribute of hstmt SqlSTMTATTRIB_ROWCOUNT to iRows
46844>>>                            Get SQLFetch of hstmt to iFetchResult
46845>>>                            If (iFetchResult <> 0) Begin
46847>>>                                Get SQLColumnValue of hstmt 2 to sRetval // Column 1 = Database Name, 2 = Collation Name.
46848>>>                            End
46848>>>>
46848>>>                            Send SQLClose of hstmt
46849>>>                        End
46849>>>>
46849>>>                        Send SQLDisconnect of hoSQLConnect
46850>>>                    End
46850>>>>
46850>>>                End
46850>>>>
46850>>>                Case Break
46851>>>            Case Else
46851>>>                If (bSilent = False) Begin
46853>>>                    Send Info_Box ("The SqlDatabaseCollationQuery function is currently not implemented for this driver:" * sDriverID + ". It would be great if you could spend a couple of minutes and create a little SQL code snippet and send it to RDC Tools to make this routine work for this driver! Thanks for helping out.")
46854>>>                End
46854>>>>
46854>>>        Case End
46854>>>
46854>>>        Function_Return sRetval
46855>>>    End_Function
46856>>>
46856>>>    Function SqlDatabaseCollationChange String sDatabase String sSQLCollation Returns Boolean
46858>>>        Boolean bMertechDriver // bOK bExists 
46858>>>        String sDriverID sSQL sConnectionID sConnectionString sSet sWith // sSQL1 
46858>>>        String sAlterDatabaseKeyWord sCollateKeyWord sSQLCollationCheck sSingle_User sMulti_User sRollback sImmediate
46858>>>        Handle hConnection hStmt hoSQLManager
46858>>>        Integer iDbType // iFetchResult
46858>>>
46858>>>        If (sDatabase = "") Begin
46860>>>            Error DFERR_PROGRAM "The database name was not passed as a parameter to the 'SqlDatabaseCollationChange' function"
46861>>>>
46861>>>            Function_Return False
46862>>>        End
46862>>>>
46862>>>
46862>>>        If (sSQLCollation = "") Begin
46864>>>            Error DFERR_PROGRAM "The SQL Collation name was not passed as a parameter to the 'SqlDatabaseCollationChange' function"
46865>>>>
46865>>>            Function_Return False
46866>>>        End
46866>>>>
46866>>>
46866>>>        Get psDriverID to sDriverID
46867>>>        Get piDbType   to iDbType
46868>>>
46868>>>        Get IsMertechDriver sDriverID to bMertechDriver
46869>>>        If (bMertechDriver = False) Begin
46871>>>            Get phoSQLManager to hoSQLManager
46872>>>        End
46872>>>>
46872>>>        Else Begin
46873>>>            Get _MertechSQLManagerHandle to hoSQLManager
46874>>>        End
46874>>>>
46874>>>
46874>>>        Get psConnectionID     to sConnectionID
46875>>>        Get psConnectionString to sConnectionString
46876>>>        Move 0 to LastErr
46877>>>
46877>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
46878>>>        Get SqlConnect of hoSQLManager sDriverID sConnectionString to hConnection
46879>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
46880>>>        If (LastErr = CLIERR_LOGIN_UNSUCCESSFUL) Begin
46882>>>            Error DFERR_PROGRAM ("Login failed to the database server. The following connect string was used:\n" + sConnectionString)
46883>>>>
46883>>>            Function_Return False
46884>>>        End
46884>>>>
46884>>>
46884>>>        Get SqlOpen of hConnection to hStmt
46885>>>
46885>>>        If (hStmt = 0) Begin
46887>>>            Send SqlDisconnect of hoSQLManager
46888>>>            Error DFERR_PROGRAM CS_DUF_ConnectError
46889>>>>
46889>>>            Function_Return False
46890>>>        End
46890>>>>
46890>>>
46890>>>        // Check if collation already exists
46890>>>        Get SqlDatabaseCollationQuery sDatabase False to sSQLCollationCheck
46891>>>        // If the current collate is the same as the new; do nothing.
46891>>>        If (sSQLCollation = sSQLCollationCheck) Begin
46893>>>            Function_Return True
46894>>>        End
46894>>>>
46894>>>
46894>>>        Get _SqlFindKeyWord CI_SQLSet               to sSet
46895>>>        Get _SqlFindKeyWord CI_SQLWith              to sWith
46896>>>        Get _SqlFindKeyWord CI_SQLSingle_User       to sSingle_User
46897>>>        Get _SqlFindKeyWord CI_SQLMulti_User        to sMulti_User
46898>>>        Get _SqlFindKeyWord CI_SQLRollback          to sRollback
46899>>>        Get _SqlFindKeyWord CI_SQLIMMEDIATE         to sImmediate
46900>>>        Get _SqlFindKeyWord CI_SQLAlterDatabase     to sAlterDatabaseKeyWord
46901>>>        Get _SqlFindKeyWord CI_SQLDatabaseCollation to sCollateKeyWord
46902>>>
46902>>>        // MS-SQL Syntax:
46902>>>        // ALTER DATABASE [database] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
46902>>>        // ALTER DATABASE [database] COLLATE SQL_1xCompat_CP850_CI_AS;
46902>>>        // ALTER DATABASE [database] SET MULTI_USER;
46902>>>        Move (              sAlterDatabaseKeyWord  * String(sDatabase) * String(sSet) * String(sSingle_User) * String(sWith) * String(sRollback) * String(sImmediate)) to sSQL
46903>>>        Move (sSQL * String(sAlterDatabaseKeyWord) * String(sDatabase) * String(sCollateKeyWord) * String(sSQLCollation)) to sSQL
46904>>>        Move (sSQL * String(sAlterDatabaseKeyWord) * String(sDatabase) * String(sSet) * String(sMulti_User)) to sSQL
46905>>>//        Move (sAlterDatabaseKeyWord * String(sDatabase) * String(sCollateKeyWord) * String(sSQLCollation)) to sSQL
46905>>>
46905>>>        Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
46906>>>        Send SqlUtilExecuteQuery sSQL sDriverID False
46907>>>        Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
46908>>>        If (LastErr = CLIERR_GENERAL_ERROR) Begin
46910>>>           Function_Return False
46911>>>        End
46911>>>>
46911>>>
46911>>>        Function_Return (Err = False)
46912>>>    End_Function
46913>>>
46913>>>
46913>>>    // * Dummy function for the Studio's Code Explorer *
46913>>>    Function SQL_TABLE_FUNCTIONS Returns Boolean
46915>>>        Function_Return False
46916>>>    End_Function
46917>>>
46917>>>    // Converts from SQL to Embedded (DataFlex .dat files).
46917>>>    // To convert from SQL -> SQL (e.g. from Oracle - > MS SQL)
46917>>>    //   first use SQLTableConvertToEmbedded in one cDbUpdateVersion object,
46917>>>    //   and then use the ApiTableConvertToSQL method in a second cDbUpdateVersion object.
46917>>>    // Note: To convert an embedded table to SQL use ApiTableConvertToSQL.
46917>>>    Function SqlTableConvertToEmbedded Handle hTable Boolean bCpyDat Returns Boolean
46919>>>        Handle hToTable
46919>>>        Boolean bOK bExists bOpened bMertechDriver bCopyData
46919>>>        String sDriverID sPhysicalName sRootName sDisplayName
46919>>>        tSQLConnection SQLConnection
46919>>>        tSQLConnection SQLConnection
46919>>>        Integer iPos iMaxRecords
46919>>>
46919>>>        Get psDriverID to sDriverID
46920>>>        Get SqlUtilCheckIfTableHandleExists hTable sDriverID to bExists
46921>>>        If (bExists = False) Begin
46923>>>            Function_Return False
46924>>>        End
46924>>>>
46924>>>
46924>>>        If (num_arguments > 1) Begin
46926>>>            Move bCpyDat to bCopyData
46927>>>        End
46927>>>>
46927>>>        Else Begin
46928>>>            Move False to bCopyData
46929>>>        End
46929>>>>
46929>>>
46929>>>        Open hTable
46931>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
46934>>>        If (bOpened = False) Begin
46936>>>            Error DFERR_PROGRAM ("Could not open table number:" * String(hTable))
46937>>>>
46937>>>            Function_Return False
46938>>>        End
46938>>>>
46938>>>        Move 0 to hToTable
46939>>>
46939>>>        Move 16711679 to iMaxRecords
46940>>>        Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
46943>>>        Move (Pos(".", sDisplayName)) to iPos
46944>>>        If (iPos > 0) Begin
46946>>>            Move (Mid(sDisplayName, 200, (iPos +1))) to sDisplayName
46947>>>        End
46947>>>>
46947>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
46950>>>        Get _TableNameOnly sRootName                 to sRootName
46951>>>        Move (sRootName + ".dat")                    to sPhysicalName
46952>>>
46952>>>        If (ghoProgressBar <> 0) Begin
46954>>>            Send DoAdvance of ghoProgressBar
46955>>>            Set TableName_Text of ghoStatusPanel to ("Converting to Embedded - Table:" * String(sRootName) * "Number:" * String(hTable))
46956>>>        End
46956>>>>
46956>>>
46956>>>        Move False to Err
46957>>>
46957>>>        Structure_Start hToTable DATAFLEX_ID
46958>>>            Structure_Copy hTable to hToTable
46959>>>
46959>>>            Set_Attribute DF_FILE_PHYSICAL_NAME of hToTable to sPhysicalName
46962>>>            Set_Attribute DF_FILE_REUSE_DELETED of hToTable to DF_FILE_DELETED_REUSE
46965>>>            Set_Attribute DF_FILE_MULTIUSER     of hToTable to DF_FILE_USER_MULTI
46968>>>            Set_Attribute DF_FILE_TRANSACTION   of hToTable to DF_FILE_TRANSACTION_CLIENT_ATOMIC
46971>>>            Set_Attribute DF_FILE_MAX_RECORDS   of hToTable to iMaxRecords
46974>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
46975>>>
46975>>>        Structure_End hToTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
46977>>>
46977>>>        Set Action_Text of ghoStatusPanel to ""
46978>>>        Move (not(Err)) to bOK
46979>>>        If (bOK = True and bCopyData = True) Begin
46981>>>            Get ApiTableCopyData hTable sPhysicalName sRootName DATAFLEX_ID to bOK
46982>>>        End
46982>>>>
46982>>>
46982>>>        Get IsMertechDriver sDriverID to bMertechDriver
46983>>>        If (bMertechDriver = True) Begin
46985>>>            Open hTable
46987>>>        End
46987>>>>
46987>>>
46987>>>        // This must be after copying data...
46987>>>        If (Err = False) Begin
46989>>>            Set_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
46992>>>            Set_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
46995>>>        End
46995>>>>
46995>>>        Move (not(Err)) to bOK
46996>>>
46996>>>        Function_Return (bOK = True)
46997>>>    End_Function
46998>>>
46998>>>    Function AddFolderDelimiter String sPath Returns String
47000>>>        String sDirSep
47000>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
47001>>>        Move (Trim(sPath)) to sPath
47002>>>        If (Right(sPath, 1) <> sDirSep) Begin
47004>>>            Move (sPath + sDirSep) to sPath
47005>>>        End
47005>>>>
47005>>>        Function_Return sPath
47006>>>    End_Function
47007>>>
47007>>>    // Creates an SQL Table at the SQL end by its filelist number;
47007>>>    // Also creates a 'DUMMY' column because SQL doesn't like to create a table with no columns!
47007>>>    Function SqlTableCreate Integer hTable Returns Boolean
47009>>>        String sTableName sSQLString sPath sCreateTable sDriverID
47009>>>        Integer iDbType
47009>>>        Boolean bExists
47009>>>
47009>>>        Get psDriverID to sDriverID
47010>>>        Get UtilTableHandleToString hTable to sTableName
47011>>>        Get SqlUtilCheckIfTableNameExists sTableName sDriverID to bExists
47012>>>        If (bExists = True) Begin
47014>>>            Function_Return False
47015>>>        End
47015>>>>
47015>>>
47015>>>        Get psDataPathFirstPart to sPath
47016>>>        Get vFilePathExists (sPath + String(sTableName) + ".int") to bExists
47017>>>
47017>>>        Get piDbType to iDbType
47018>>>        Get _SqlProperTableName sTableName to sTableName
47019>>>        Get _SqlFindKeyWord CI_SQLCreateTable iDbType to sCreateTable
47020>>>        Move (sCreateTable * String(sTableName) * "(Dummy Decimal(2,0))") to sSQLString
47021>>>
47021>>>        Move False to Err
47022>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
47023>>>
47023>>>        Function_Return (Err = False)
47024>>>    End_Function
47025>>>
47025>>>    // Same as SqlTableCreate but creates an SQL Table at the SQL end by a table name;
47025>>>    // Also creates a 'DUMMY' column because SQL doesn't like to create a table with no columns!
47025>>>    Function SqlTableCreateByTableName String sTableName  Returns Boolean
47027>>>        String sSQLString sPath sCreateTable sDriverID
47027>>>        Integer iDbType
47027>>>        Boolean bExists
47027>>>
47027>>>        Get psDriverID to sDriverID
47028>>>        Get SqlUtilCheckIfTableNameExists sTableName sDriverID to bExists
47029>>>        If (bExists = True) Begin
47031>>>            Function_Return False
47032>>>        End
47032>>>>
47032>>>
47032>>>        Get psDataPathFirstPart to sPath
47033>>>        Get vFilePathExists (sPath + String(sTableName) + ".int") to bExists
47034>>>        If (bExists = True) Begin
47036>>>            // ToDo: What should we do if an .int file already exists?
47036>>>        End
47036>>>>
47036>>>
47036>>>        Get piDbType to iDbType
47037>>>        Get _SqlProperTableName sTableName to sTableName
47038>>>        Get _SqlFindKeyWord CI_SQLCreateTable iDbType to sCreateTable
47039>>>        Move (sCreateTable * String(sTableName) * "(Dummy Decimal(2,0))") to sSQLString
47040>>>
47040>>>        Move False to Err
47041>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
47042>>>
47042>>>        Function_Return (Err = False)
47043>>>    End_Function
47044>>>    
47044>>>    // ToDo: 2019-09-23 This needs to be finilized 
47044>>>    // It resets SQL constraints after a Structure_End, if necessary.
47044>>>    Function SqlTableRecreateConstraints Handle hTable Returns Boolean
47046>>>        Boolean bOK                                                            
47046>>>        String sStatement
47046>>>        Move "ALTER TABLE [dbo].[THREADS] ADD  DEFAULT ((0)) FOR [SEGMENTS]" to sStatement
47047>>>        Function_Return bOK
47048>>>    End_Function
47049>>>    
47049>>>    // First deletes the data cache file and then drops the passed SQL table.
47049>>>    // Note: The table needs to exist in filelist.cfg, and it must be possible to open it,
47049>>>    //       else try using the SqlTableRemoveByTableName message.
47049>>>    Function SqlTableRemove Handle hTable Returns Boolean
47051>>>        String sSQLString sPath sDropTable sTableName sDriverID
47051>>>        Integer iRetval iDbType
47051>>>        Boolean bExists bMertechDriver bOK
47051>>>
47051>>>        Get psDriverID to sDriverID
47052>>>        Get IsMertechDriver sDriverID to bMertechDriver
47053>>>        Get UtilTableHandleToString hTable to sTableName
47054>>>        Get SqlUtilCheckIfTableNameExists sTableName sDriverID to bExists
47055>>>        If (bExists = False) Begin
47057>>>            Function_Return False
47058>>>        End
47058>>>>
47058>>>
47058>>>        Get psDataPathFirstPart to sPath
47059>>>        Get UtilDeleteCacheFile sTableName to iRetval
47060>>>
47060>>>        Get piDbType to iDbType
47061>>>        Get _SqlProperTableName sTableName to sTableName
47062>>>        Get _SqlFindKeyWord CI_SQLDropTable iDbType to sDropTable
47063>>>        Move (sDropTable * String(sTableName)) to sSQLString
47064>>>
47064>>>        Move False to Err
47065>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
47066>>>
47066>>>        // We also need to remove the cache-file since the table has been changed
47066>>>        Get UtilDeleteCacheFile sTableName to bOK
47067>>>
47067>>>        Function_Return (Err = False)
47068>>>    End_Function
47069>>>
47069>>>    // First deletes the data cache file and then drops the passed data table.
47069>>>    Function SqlTableRemoveByTableName String sTableName Returns Boolean
47071>>>        String sSQLString sPath sDropTable sVal sSchema sDriverID
47071>>>        Integer iRetval iDbType
47071>>>        Boolean bMertechDriver bOK
47071>>>
47071>>>        Get psDriverID to sDriverID
47072>>>        Get IsMertechDriver sDriverID to bMertechDriver
47073>>>        Get psDataPathFirstPart to sPath
47074>>>        Get UtilDeleteCacheFile sTableName to iRetval
47075>>>
47075>>>        Get piDbType to iDbType
47076>>>        Get _SqlFindKeyWord CI_SQLDropTable iDbType to sDropTable
47077>>>        Get psSchema to sSchema
47078>>>        If (sSchema = "") Begin
47080>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
47081>>>        End
47081>>>>
47081>>>        Move (Uppercase(sTableName)) to sVal
47082>>>        If (not(sVal contains (sSchema + "."))) Begin
47084>>>            Move (Lowercase(sSchema) + "." + sTableName) to sTableName
47085>>>        End
47085>>>>
47085>>>        Move (sDropTable * String(sTableName)) to sSQLString
47086>>>
47086>>>        Move False to Err
47087>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
47088>>>
47088>>>        // We also need to remove the cache-file since the table has been changed
47088>>>        Get UtilDeleteCacheFile sTableName to bOK
47089>>>
47089>>>        Function_Return (Err = False)
47090>>>    End_Function
47091>>>
47091>>>    // *** Sql View Messages ***
47091>>>
47091>>>    // First deletes the data cache file and then drops the passed Sql data view.
47091>>>    Function SqlViewRemove String sDataView Returns Boolean
47093>>>        String sDriverID sSQLString sDropViewKeyWord
47093>>>        Integer iRetval
47093>>>        Boolean bMertechDriver bOK
47093>>>
47093>>>        Get psDriverID to sDriverID
47094>>>        Get IsMertechDriver sDriverID to bMertechDriver
47095>>>        Get UtilDeleteCacheFile sDataView to iRetval
47096>>>
47096>>>        Get _SqlFindKeyWord CI_SQLDropView to sDropViewKeyWord
47097>>>        Move (sDropViewKeyWord * String(sDataView)) to sSQLString
47098>>>        Set psSQLStatementString to sSQLString
47099>>>
47099>>>        // As we don't check if the view exist or not, it might happen
47099>>>        // that it doesn't and that would through an error, so guard for that eventuality (just ignore it).
47099>>>        Move False to Err
47100>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
47101>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
47102>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
47103>>>        Move 0 to LastErr
47104>>>
47104>>>        // We also need to remove the cache-file since the table has been changed
47104>>>        Get UtilDeleteCacheFile sDataView to bOK
47105>>>
47105>>>        Function_Return (Err = False)
47106>>>    End_Function
47107>>>
47107>>>    Function SqlTableRename Handle hTable String sCurrentTableName String sNewtTableName Returns Boolean
47109>>>        Boolean bOK
47109>>>        Integer iDbType
47109>>>        String sDriverID sAlterTable sRenameTable sSQLTo sSQLString
47109>>>
47109>>>        Get psDriverID to sDriverID
47110>>>        Get piDbType   to iDbType
47111>>>
47111>>>        Case Begin
47111>>>            Case (iDbType = EN_DbTypeDB2)
47113>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
47114>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
47115>>>                Move (sRenameTable * sCurrentTableName * sSQLTo * String(sNewtTableName)) to sSQLString
47116>>>            Break
47117>>>
47117>>>            Case (iDbType = EN_DbTypeMSSQL)
47120>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
47121>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
47122>>>                Move (sRenameTable * "'" - sCurrentTableName - "', '" - String(sNewtTableName) - "'") to sSQLString
47123>>>            Break
47124>>>
47124>>>            Case (iDbType = EN_DbTypeOracle)
47127>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
47128>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
47129>>>                Move (sRenameTable * sCurrentTableName * sSQLTo * String(sNewtTableName)) to sSQLString
47130>>>            Break
47131>>>
47131>>>            Case (iDbType = EN_DbTypePostgre)
47134>>>                Get _SqlFindKeyWord CI_SQLAlterTable  to sAlterTable
47135>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
47136>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
47137>>>                Move (sAlterTable * sCurrentTableName * sRenameTable * sSQLTo * String(sNewtTableName)) to sSQLString
47138>>>            Break
47139>>>
47139>>>            Case (iDbType = EN_DbTypeMySQL)
47142>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
47143>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
47144>>>                Move (Replaces("-", sNewtTableName, "_")) to sNewtTableName
47145>>>                Move (sRenameTable * sCurrentTableName * sSQLTo * String(sNewtTableName)) to sSQLString
47146>>>            Break
47147>>>        Case End
47147>>>
47147>>>        Move False to Err
47148>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
47149>>>        Move (Err = False) to bOK
47150>>>
47150>>>        Function_Return bOK
47151>>>    End_Function
47152>>>
47152>>>    // * Dummy function for the Studio's Code Explorer *
47152>>>    Function SQL_COLUMN_FUNCTIONS Returns Boolean
47154>>>        Function_Return False
47155>>>    End_Function
47156>>>
47156>>>    // Sample: Get SqlColumnAdd MyTable.File_Number "NewColumnName" True "InitValue" DF_ASCII_DUF 35
47156>>>    Function SqlColumnAdd Integer hTable String sColumnName Integer iDataType Integer iLen Integer iDec Boolean bInitVal String sColVal Returns Boolean
47158>>>        Integer iLength iDecimals
47158>>>        String sColumnValue
47158>>>        String sTableName sDriverID
47158>>>        Boolean bOK bInitializeValue
47158>>>
47158>>>        Get psDriverID to sDriverID
47159>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47160>>>        If (bOK = False) Begin
47162>>>            Function_Return False
47163>>>        End
47163>>>>
47163>>>
47163>>>        Get UtilTableHandleToString hTable to sTableName
47164>>>        If (sTableName = "") Begin
47166>>>            Function_Return False
47167>>>        End
47167>>>>
47167>>>
47167>>>        If (num_arguments > 3) Begin
47169>>>            Move iLen     to iLength
47170>>>            Move iDec     to iDecimals
47171>>>            Move bInitVal to bInitializeValue
47172>>>            Move sColVal  to sColumnValue
47173>>>        End
47173>>>>
47173>>>
47173>>>        Get SqlColumnAddByTableName sTableName sColumnName iDataType iLen iDecimals bInitializeValue sColumnValue to bOK
47174>>>
47174>>>        Function_Return (bOK = True)
47175>>>    End_Function
47176>>>
47176>>>    // Sample: Get SqlColumnAddByTableName "MyTable" "NewColumnName" DF_ASCII_DUF 35 0 True "InitValue"
47176>>>    Function SqlColumnAddByTableName String sTableName String sColumnName Integer iDataType Integer iLen Integer iDec Boolean bInitVal String sColVal Returns Boolean
47178>>>        Integer iDbType iLength iDecimals iDriver
47178>>>        String sStmt sAlterTable sAddColumn sVal sDataType sLengthAndDecimals sColumnValue
47178>>>        String sDriverID sNotNull
47178>>>        Boolean bOK bInitializeValue bRetval bFixed bDriverIgnoreErrorState bIsMertechDriver
47178>>>        Handle hTable
47178>>>
47178>>>        Get psDriverID to sDriverID
47179>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47180>>>        If (bOK = False) Begin
47182>>>            Function_Return True
47183>>>        End
47183>>>>
47183>>>
47183>>>        Get UtilTableNameToHandle sTableName to hTable
47184>>>        If (hTable = 0) Begin
47186>>>            Get NextFreeFilelistSlot to hTable
47187>>>        End
47187>>>>
47187>>>
47187>>>        Get piDbType to iDbType
47188>>>        // If a field/column already exists; we just ignore the request to not add unneccesary errors to the log.
47188>>>        Get _SqlFindColumnName sTableName sColumnName to sVal
47189>>>        If (Uppercase(sVal) = Uppercase(sColumnName)) Begin
47191>>>            Function_Return True
47192>>>        End
47192>>>>
47192>>>
47192>>>        Get DriverIndex sDriverID to iDriver
47193>>>        Get IsMertechDriver sDriverID to bIsMertechDriver
47194>>>        If (bIsMertechDriver = False) Begin
47196>>>            Get_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
47199>>>            Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to True
47202>>>        End
47202>>>>
47202>>>
47202>>>        Get UtilColumnTypeToString sDriverID iDbType iDataType to sDataType
47203>>>        If (num_arguments > 3) Begin
47205>>>            Move iLen     to iLength
47206>>>            Move iDec     to iDecimals
47207>>>            Move bInitVal to bInitializeValue
47208>>>            Move sColVal  to sColumnValue
47209>>>        End
47209>>>>
47209>>>
47209>>>        Get _SqlProperTableName sTableName   to sTableName
47210>>>        Get _SqlFindKeyWord CI_SQLAlterTable to sAlterTable
47211>>>        Get _SqlFindKeyWord CI_SQLAdd        to sAddColumn
47212>>>        Get SQLUtilDefaultNullValue sDriverID iDbType iDataType to sNotNull
47213>>>
47213>>>        Get UtilColumnTypeFixed sDriverID iDbType iDataType to bFixed
47214>>>        If (bFixed = False) Begin
47216>>>            Get _SqlFormatLengthAndDecimalAsString iLength iDecimals to sLengthAndDecimals
47217>>>        End
47217>>>>
47217>>>        Move (sAlterTable * sTableName * sAddColumn * sColumnName * sDataType + sLengthAndDecimals * sNotNull) to sStmt
47218>>>
47218>>>        Move False to Err
47219>>>        Send SqlUtilExecuteQuery sStmt sDriverID
47220>>>
47220>>>        If (bInitializeValue = True and Err = False) Begin
47222>>>            Get SQLColumnUpdateValue hTable sColumnName sColumnValue to bRetval
47223>>>        End
47223>>>>
47223>>>
47223>>>        If (Err = False) Begin
47225>>>            Get SqlUtilAdjustAuxFiles hTable sTableName sColumnName to bOK
47226>>>        End
47226>>>>
47226>>>
47226>>>        Move (not(Err)) to bRetval
47227>>>
47227>>>        // We also need to remove the cache-file since the table has been changed
47227>>>        Get UtilDeleteCacheFile sTableName to bOK
47228>>>        If (bIsMertechDriver = False) Begin
47230>>>            Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
47233>>>        End
47233>>>>
47233>>>        Function_Return bRetval
47234>>>    End_Function
47235>>>
47235>>>    // To update all current rows for a table column with a common value.
47235>>>    Function SqlColumnUpdateValue Handle hTable String sColumnName String sColumnValue Returns Boolean
47237>>>        String sDriverID sTableName sUpdate sSet sNoCountOn sSqlSafe_Updates sStmt
47237>>>        Boolean bRetval bSQLDriver
47237>>>        Integer iCurrErr iDbType
47237>>>
47237>>>        Move False to bRetval
47238>>>        Get piDbType to iDbType
47239>>>        Get psDriverID to sDriverID
47240>>>        Get IsSQLDriver sDriverID to bSQLDriver
47241>>>        If (bSQLDriver = False) Begin
47243>>>            Function_Return bRetval
47244>>>        End
47244>>>>
47244>>>        Get UtilTableHandleToString hTable to sTableName
47245>>>
47245>>>        Move Err to iCurrErr
47246>>>        Move False to Err
47247>>>        Get _SqlFindKeyWord CI_SQLUpdate       to sUpdate
47248>>>        Get _SqlFindKeyWord CI_SQLSet          to sSet
47249>>>        Get _SqlFindKeyWord CI_SQLSetNoCountOn to sNoCountOn
47250>>>        If (sDriverID = MDSMySQL) Begin
47252>>>            Get _SqlFindKeyWord CI_SQL_SAFE_UPDATES to sSqlSafe_Updates
47253>>>            Move (sSet * sSqlSafe_Updates + "=0;" * sUpdate * sTableName * sSet * sColumnName + "='" + sColumnValue + "'" * sSet * sSqlSafe_Updates + "=1") to sStmt
47254>>>        End
47254>>>>
47254>>>        // If MySQL and DAW's ODBC driver is used we need to do it slightly different.
47254>>>        If (iDbType = EN_DbTypeMySQL) Begin
47256>>>            Get _SqlFindKeyWord CI_SQL_SAFE_UPDATES to sSqlSafe_Updates
47257>>>            Move (sSet * sSqlSafe_Updates + "=0;" * sUpdate * sTableName * sSet * sColumnName + "='" + sColumnValue + "'") to sStmt
47258>>>        End
47258>>>>
47258>>>        Else Begin
47259>>>            Move (sNoCountOn * sUpdate * sTableName * sSet * sColumnName + "='" + sColumnValue + "'") to sStmt
47260>>>        End
47260>>>>
47260>>>
47260>>>        Send SqlUtilExecuteQuery sStmt sDriverID
47261>>>        Move (Err = False) to bRetval
47262>>>        Move iCurrErr to Err
47263>>>
47263>>>        Function_Return bRetval
47264>>>    End_Function
47265>>>
47265>>>    // The fourth & fifth arguments are optional, depending on the iDataType
47265>>>    // passed. For e.g. a DF_ASCII the iLen must be passed.                     // Optional: // Optional:
47265>>>    Function SqlColumnChange Handle hTable String sColumnName Integer iDataType Integer iLen Integer iDec Returns Boolean
47267>>>        String sDriverID sTableName
47267>>>        Boolean bOK
47267>>>
47267>>>        Get psDriverID to sDriverID
47268>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47269>>>        If (bOK = False) Begin
47271>>>            Function_Return False
47272>>>        End
47272>>>>
47272>>>
47272>>>        Get UtilTableHandleToString hTable to sTableName
47273>>>        Get SqlColumnChangeByTableName sTableName sColumnName iDataType iLen iDec to bOK
47274>>>
47274>>>        Function_Return (Err = False)
47275>>>    End_Function
47276>>>
47276>>>    // Same as SqlColumnChange but instead of passing a filelist number; pass the table name as a string.
47276>>>    // The fourth & fifth arguments are optional, depending on the iDataType
47276>>>    // passed. For e.g. a DF_ASCII the iLen must be passed.                     // Optional: // Optional:
47276>>>    Function SqlColumnChangeByTableName String sTableName String sColumnName Integer iDataType Integer iLen Integer iDec Returns Boolean
47278>>>        Integer iDbType iLength iDecimals
47278>>>        String sDriverID sStmt sAlterTable sAlterColumn sDataType sLengthAndDecimals sNotNull
47278>>>        Boolean bExists bOK bFixed
47278>>>        Handle hTable
47278>>>
47278>>>        Get psDriverID to sDriverID
47279>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47280>>>        If (bOK = False) Begin
47282>>>            Function_Return False
47283>>>        End
47283>>>>
47283>>>
47283>>>        Get UtilTableNameToHandle sTableName to hTable
47284>>>        If (hTable = 0) Begin
47286>>>            Get NextFreeFilelistSlot to hTable
47287>>>        End
47287>>>>
47287>>>        Get SQLUtilColumnExists sTableName sColumnName to bExists
47288>>>        If (bExists = False) Begin
47290>>>            Function_Return False
47291>>>        End
47291>>>>
47291>>>
47291>>>        If (num_arguments > 3) Begin
47293>>>            Move iLen to iLength
47294>>>        End
47294>>>>
47294>>>        If (num_arguments > 4) Begin
47296>>>            Move iDec to iDecimals
47297>>>        End
47297>>>>
47297>>>
47297>>>        Get piDbType to iDbType
47298>>>        Get UtilColumnTypeToString sDriverID iDbType iDataType to sDataType
47299>>>
47299>>>        Move False to Err
47300>>>        Get _SqlProperTableName sTableName    to sTableName
47301>>>        Get _SqlFindKeyWord CI_SQLAlterTable  to sAlterTable
47302>>>        Get _SqlFindKeyWord CI_SQLAlterColumn to sAlterColumn
47303>>>        Get SQLUtilDefaultNullValue sDriverID iDbType iDataType to sNotNull
47304>>>
47304>>>        Get UtilColumnTypeFixed sDriverID iDbType iDataType to bFixed
47305>>>        If (bFixed = False) Begin
47307>>>            Get _SqlFormatLengthAndDecimalAsString iLength iDecimals to sLengthAndDecimals
47308>>>        End
47308>>>>
47308>>>
47308>>>        Move (sAlterTable * sTableName * sAlterColumn * sColumnName * sDataType + sLengthAndDecimals * sNotNull) to sStmt
47309>>>        Send SqlUtilExecuteQuery sStmt sDriverID
47310>>>
47310>>>        // We also need to remove the cache-file since the table has been changed
47310>>>        Get UtilDeleteCacheFile sTableName to bOK
47311>>>
47311>>>        Function_Return (Err = False)
47312>>>    End_Function
47313>>>
47313>>>    Function SqlColumnDefaultValue Handle hTable Integer iColumn String sValue Returns Boolean
47315>>>        Boolean bOK bErr bIsSQLDriver
47315>>>        String sDriverID
47315>>>        Integer iDataType
47315>>>
47315>>>        Get psDriverID to sDriverID
47316>>>        Get IsSQLDriver sDriverID to bIsSQLDriver
47317>>>        If (bIsSQLDriver = False) Begin
47319>>>            Function_Return False
47320>>>        End
47320>>>>
47320>>>
47320>>>        Move Err to bErr
47321>>>        Move False to bErr
47322>>>
47322>>>        // There seems to be a problem with the ODBC_DRV driver that sometimes
47322>>>        // inserts randomly character(10) and spaces, so we correct from that here:
47322>>>        Move (Replaces(Character(10), Trim(sValue), "")) to sValue
47323>>>        Get_Attribute DF_FIELD_TYPE of hTable iColumn to iDataType
47326>>>        If (iDataType = DF_BCD and Left(sValue, 1 <> "[")) Begin
47328>>>            Move ("[" + String(sValue) + "]") to sValue
47329>>>        End
47329>>>>
47329>>>
47329>>>        Set_Attribute DF_FIELD_DEFAULT_VALUE of hTable iColumn to sValue
47332>>>        Move (not(Err)) to bOK
47333>>>        Move bErr to Err
47334>>>
47334>>>        Function_Return bOK
47335>>>    End_Function
47336>>>
47336>>>    Function SqlColumnNullable Handle hTable Integer iColumn Boolean bNullable Returns Boolean
47338>>>        Boolean bOK bErr bCurrentState bOpen bIsSQLDriver
47338>>>        String sDriverID
47338>>>
47338>>>        Get psDriverID to sDriverID
47339>>>        Get IsSQLDriver sDriverID to bIsSQLDriver
47340>>>        If (bIsSQLDriver = False) Begin
47342>>>            Function_Return False
47343>>>        End
47343>>>>
47343>>>
47343>>>        Move Err to bErr
47344>>>        Move False to bErr
47345>>>        Get_Attribute DF_FIELD_NULL_ALLOWED of hTable iColumn to bCurrentState
47348>>>        If (bNullable = bCurrentState) Begin
47350>>>            Function_Return True
47351>>>        End
47351>>>>
47351>>>
47351>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
47354>>>        If (bOpen = False) Begin
47356>>>            Get AutoConnectionIDLogin to bOK
47357>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
47358>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_INTERMEDIATE_FILE
47359>>>            Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
47360>>>            Open hTable
47362>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
47363>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_INTERMEDIATE_FILE
47364>>>            Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
47365>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
47368>>>        End
47368>>>>
47368>>>        If (bOpen = True) Begin
47370>>>            Structure_Start hTable sDriverID
47371>>>                Set_Attribute DF_FIELD_NULL_ALLOWED of hTable iColumn to bNullable
47374>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
47375>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
47377>>>            Set Action_Text of ghoStatusPanel to ""
47378>>>        End
47378>>>>
47378>>>
47378>>>        Move (not(Err)) to bOK
47379>>>        Move bErr to Err
47380>>>
47380>>>        Function_Return bOK
47381>>>    End_Function
47382>>>
47382>>>    // Drop column by its table handle
47382>>>    Function SqlColumnRemove Handle hTable String sColumnName Returns Boolean
47384>>>        String sDriverID sTableName
47384>>>        Boolean bOK
47384>>>
47384>>>        Get psDriverID to sDriverID
47385>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47386>>>        If (bOK = False) Begin
47388>>>            Function_Return False
47389>>>        End
47389>>>>
47389>>>
47389>>>        Get UtilTableHandleToString hTable to sTableName
47390>>>        If (sTableName = "") Begin
47392>>>            Function_Return False
47393>>>        End
47393>>>>
47393>>>
47393>>>        Get SqlColumnRemoveByTableName sTableName sColumnName to bOK
47394>>>
47394>>>        Function_Return (bOK = True)
47395>>>    End_Function
47396>>>
47396>>>    // Drop column by its table name as a string.
47396>>>    Function SqlColumnRemoveByTableName String sTableName String sColumnName Returns Boolean
47398>>>        Integer iDbType iDriver
47398>>>        String sDriverID sStmt sAlterTable sDropColumn
47398>>>        Boolean bExists bOK bRetval bDriverIgnoreErrorState
47398>>>        Handle hTable
47398>>>
47398>>>        Get psDriverID to sDriverID
47399>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47400>>>        If (bOK = False) Begin
47402>>>            Function_Return False
47403>>>        End
47403>>>>
47403>>>
47403>>>        Get DriverIndex sDriverID to iDriver
47404>>>        Get_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
47407>>>        Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to True
47410>>>
47410>>>        Get UtilTableNameToHandle sTableName to hTable
47411>>>        If (hTable <> 0) Begin
47413>>>            Get SQLUtilColumnExists sTableName sColumnName to bExists
47414>>>            If (bExists = False) Begin
47416>>>                Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
47419>>>                Function_Return False
47420>>>            End
47420>>>>
47420>>>        End
47420>>>>
47420>>>
47420>>>        Get piDbType to iDbType
47421>>>        If (iDbType = EN_DbTypeMSSQL) Begin
47423>>>            Get _SqlUtilRemoveTableColumnMSSQL sTableName sColumnName to bOK
47424>>>            Get UtilDeleteCacheFile sTableName to bOK
47425>>>            Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
47428>>>            Function_Return bOK
47429>>>        End
47429>>>>
47429>>>
47429>>>        Move False to Err
47430>>>        Get _SqlProperTableName sTableName    to sTableName
47431>>>        Get _SqlFindKeyWord CI_SQLAlterTable  to sAlterTable
47432>>>        Get _SqlFindKeyWord CI_SQLDropColumn  to sDropColumn
47433>>>
47433>>>        Move (sAlterTable * sTableName * sDropColumn * sColumnName) to sStmt
47434>>>        Send SqlUtilExecuteQuery sStmt sDriverID
47435>>>        Move (not(Err)) to bRetval
47436>>>
47436>>>        // We also need to remove the cache-file since the table has been changed
47436>>>        Get UtilDeleteCacheFile sTableName to bOK
47437>>>        Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
47440>>>
47440>>>        Function_Return bRetval
47441>>>    End_Function
47442>>>
47442>>>    // Rename a field/column by table handle (filelist number)
47442>>>    Function SqlColumnRename Integer hTable String sColumnName String sNewColumnName Returns Boolean
47444>>>        String sDriverID sTableName
47444>>>        Boolean bOK
47444>>>
47444>>>        Get psDriverID to sDriverID
47445>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47446>>>        If (bOK = False) Begin
47448>>>            Function_Return False
47449>>>        End
47449>>>>
47449>>>
47449>>>        Get UtilTableHandleToString hTable to sTableName
47450>>>        Get SqlColumnRenameByTableName sTableName sColumnName sNewColumnName to bOK
47451>>>
47451>>>        Function_Return (Err = False)
47452>>>    End_Function
47453>>>
47453>>>    // Rename a field/column by table name.
47453>>>    Function SqlColumnRenameByTableName String sTableName String sColumnName String sNewColumnName Returns Boolean
47455>>>        Integer iDbType iDataType
47455>>>        String sDriverID sStmt sAlterTable sRenameColumn sVal sColumnKeyWord sOrgTableName sDatabase sDataType
47455>>>        Boolean bOK bRetval
47455>>>        Handle hTable
47455>>>
47455>>>        Move sTableName to sOrgTableName
47456>>>        Get psDriverID to sDriverID
47457>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47458>>>        If (bOK = False) Begin
47460>>>            Function_Return False
47461>>>        End
47461>>>>
47461>>>
47461>>>        Get _SqlFindColumnName sTableName sColumnName to sVal
47462>>>        If (sVal = "") Begin
47464>>>            Function_Return False
47465>>>        End
47465>>>>
47465>>>
47465>>>        Get piDbType to iDbType
47466>>>        Get _SqlFindKeyWord CI_SQLColumn       to sColumnKeyWord
47467>>>        Get _SqlProperTableName sTableName     to sTableName
47468>>>        Get _SqlFindKeyWord CI_SQLAlterTable   to sAlterTable
47469>>>        Get _SqlFindKeyWord CI_SQLRenameColumn to sRenameColumn
47470>>>
47470>>>        Case Begin
47470>>>            Case (iDbType = EN_dbTypeMSSQL)
47472>>>                Move (sRenameColumn * "'" + sTableName + "." + sColumnName + "'," * "'" + sNewColumnName + "'," * "'" + sColumnKeyWord + "'") to sStmt
47473>>>                Case Break
47474>>>            // Alter table "SYS"."Customer" rename column "Comments" to "NewColumnName"
47474>>>            Case (iDbType = EN_dbTypeOracle)
47477>>>                Move (sAlterTable * '"' + sTableName + '"' * sRenameColumn * '"' + sColumnName + '"' * "TO" * '"' + sNewColumnName + '"') to sStmt
47478>>>                Case Break
47479>>>            // ALTER TABLE Schema.TableName RENAME COLUMN "deptnumb" TO "deptnum"
47479>>>            Case (iDbType = EN_dbTypeDB2)
47482>>>                Move (sAlterTable *  sTableName * sRenameColumn * '"' + sColumnName + '"' * "TO" * '"' + sNewColumnName + '"') to sStmt
47483>>>                Case Break
47484>>>            // ALTER TABLE "Customer" RENAME COLUMN "Comments" TO "NewColumnName"
47484>>>            Case (iDbType = EN_dbTypePostgre)
47487>>>                Move sOrgTableName to sTableName
47488>>>                Move (sAlterTable * '"' + sTableName + '"' * sRenameColumn * '"' + sColumnName + '"' * "TO" * '"' + sNewColumnName + '"') to sStmt
47489>>>                Case Break
47490>>>            Case (iDbType = EN_dbTypeMySQL)
47493>>>                // ALTER TABLE orderentry.customer CHANGE Comments NewColumnName text // Note: The last token is the column type!
47493>>>                Move sOrgTableName to sTableName
47494>>>                Get psDatabase to sDatabase
47495>>>                Get UtilTableNameToHandle sTableName to hTable
47496>>>                If (hTable = 0) Begin
47498>>>                    Get UtilTableOpen hTable sTableName DF_SHARE to bOK
47499>>>                    If (bOK = False) Begin
47501>>>                        Function_Return False
47502>>>                    End
47502>>>>
47502>>>                    Get NextFreeFilelistSlot to hTable
47503>>>                End
47503>>>>
47503>>>                Else Begin
47504>>>                    Open hTable
47506>>>                End
47506>>>>
47506>>>                Get SQLColumnType sDriverID hTable sTableName sColumnName to iDataType
47507>>>                Get UtilColumnTypeToString sDriverID iDbType iDataType    to sDataType
47508>>>                Move (sAlterTable * sDatabase + "." + sTableName * sRenameColumn * sColumnName * sNewColumnName * sDataType) to sStmt
47509>>>                Case Break
47510>>>            Case Else
47510>>>                Move (sAlterTable * "'" + sTableName + "'" * sRenameColumn * "'" + sTableName + "." + sColumnName + "'" * "TO" * "'" + sNewColumnName + "'") to sStmt
47511>>>        Case End
47511>>>
47511>>>        Move False to Err
47512>>>        Send SqlUtilExecuteQuery sStmt sDriverID
47513>>>        Move (Err = False) to bRetval
47514>>>        // We also need to remove the cache-file since the table has been changed
47514>>>        Get UtilDeleteCacheFile sTableName to bOK
47515>>>
47515>>>        Function_Return bRetval
47516>>>    End_Function
47517>>>
47517>>>    Function SqlColumnType String sDriverID Handle hTable String sTableName String sColumnName Returns Integer
47519>>>        Handle hoSQLHandler hSQLConnect hStmt
47519>>>        Boolean bMertechDriver
47519>>>        Integer iNumCols iCount iDataType
47519>>>        String sValue
47519>>>
47519>>>        Get IsMertechDriver sDriverID to bMertechDriver
47520>>>        If (bMertechDriver = False) Begin
47522>>>            Get phoSQLManager to hoSQLHandler
47523>>>        End
47523>>>>
47523>>>        Else Begin
47524>>>            Get _MertechSQLManagerHandle to hoSQLHandler
47525>>>        End
47525>>>>
47525>>>
47525>>>        Get SQLFileConnect of hoSQLHandler hTable to hSQLConnect
47526>>>        If (hSQLConnect <> 0) Begin
47528>>>            Get SQLOpen of hSQLConnect to hStmt
47529>>>            If (hStmt <> 0) Begin
47531>>>                Send SQLExecDirect of hStmt ("select * from" * sTableName)
47532>>>
47532>>>                Get SQLStmtAttribute of hStmt SQLSTMTATTRIB_COLUMNCOUNT to iNumCols
47533>>>                For iCount from 1 to iNumCols
47539>>>>
47539>>>                    Get SQLColAttribute of hStmt iCount SQLCOLATTRIB_LABEL to sValue
47540>>>                    If (Lowercase(sValue) = Lowercase(sColumnName)) Begin
47542>>>                        Get SQLColAttribute of hStmt iCount SQLCOLATTRIB_SQLTYPE to iDataType
47543>>>                        Move iNumCols to iCount // We're out of here
47544>>>                    End
47544>>>>
47544>>>                Loop
47545>>>>
47545>>>
47545>>>                Send SQLClose of hStmt
47546>>>            End
47546>>>>
47546>>>            Send SQLDisconnect of hSQLConnect
47547>>>        End
47547>>>>
47547>>>
47547>>>        Function_Return iDataType
47548>>>    End_Function
47549>>>
47549>>>    // * Dummy function for the Studio's Code Explorer *
47549>>>    Function SQL_EXECUTE_FUNCTIONS Returns Boolean
47551>>>        Function_Return False
47552>>>    End_Function
47553>>>
47553>>>    Procedure SqlUtilExecuteQuery String sStmt String sDriverID Boolean bShowProgr
47555>>>        String sMessage // sConnectionString
47555>>>        Handle hoSqlHandler hoSQLConnect hoStmt hoError
47555>>>        Integer i iMsgs iFetchResult iRowType iRows iErr iMessage iLastErr
47555>>>        String[] sMsg aSQLQueryMessages aSQLFetchResults
47558>>>        DateTime dtQueryExecStart dtQueryExecEnd dtFetchStart dtFetchEnd
47558>>>        TimeSpan tsQuery tsFetch
47558>>>        tSqlErrorArray aSqlErrorArray
47558>>>        tSqlErrorArray aSqlErrorArray
47558>>>        Boolean bOK bMertechDriver bShowProgress
47558>>>        tSQLConnection SQLConnection
47558>>>        tSQLConnection SQLConnection
47558>>>
47558>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47559>>>        If (bOK = False) Begin
47561>>>            Procedure_Return
47562>>>        End
47562>>>>
47562>>>
47562>>>        If (num_arguments > 2) Begin
47564>>>            Move bShowProgr to bShowProgress
47565>>>        End
47565>>>>
47565>>>
47565>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
47566>>>
47566>>>        Get IsMertechDriver sDriverID to bMertechDriver
47567>>>        If (bMertechDriver = True) Begin
47569>>>            Get _MertechSQLConnect sDriverID SQLConnection.sServer SQLConnection.sUserID SQLConnection.sPassword to hoSQLConnect
47570>>>        End
47570>>>>
47570>>>        If (bMertechDriver = False) Begin
47572>>>            Get phoSQLManager to hoSqlHandler
47573>>>            Send SqlSetConnect of hoSqlHandler sDriverID SQLConnection.sConnectionString
47574>>>            Get SqlConnect     of hoSqlHandler "" "" to hoSQLConnect
47575>>>        End
47575>>>>
47575>>>
47575>>>        If (hoSQLConnect <> 0) Begin
47577>>>            Get SqlOpen of hoSQLConnect to hoStmt
47578>>>            If (hoStmt <> 0) Begin
47580>>>                // record starting date/time stamp
47580>>>                Move (CurrentDateTime()) to dtQueryExecStart
47581>>>                // turn on error handling if enabled
47581>>>                If (pbHandleQueryErrors(Self)) Begin
47583>>>                    Set pbSqlError to False
47584>>>                    Set paSqlErrorArray to aSqlErrorArray
47585>>>                    Move Error_Object_Id to hoError
47586>>>                    If (ghoDbUpdateHandler <> 0) Begin
47588>>>                        Move ghoDbUpdateHandler to Error_Object_Id
47589>>>                    End
47589>>>>
47589>>>                    Else Begin
47590>>>                        Move Self to Error_Object_Id
47591>>>                    End
47591>>>>
47591>>>                End
47591>>>>
47591>>>
47591>>>                // Before we execute the statement; save it so we can display the faulty statement in the error log.
47591>>>                Set psSQLStatementString to sStmt
47592>>>                Send Cursor_Wait of Cursor_Control
47593>>>                Send SqlExecDirect of hoStmt sStmt
47594>>>                Send Cursor_Ready of Cursor_Control
47595>>>
47595>>>                If (pbHandleQueryErrors(Self)) Begin
47597>>>                    Move hoError to Error_Object_Id
47598>>>                End
47598>>>>
47598>>>
47598>>>                Move 0 to iMsgs
47599>>>                // ToDo: There seems to be some issues with this code and Mertech drivers that makes
47599>>>                // the debugger crash in some cases like an error in the ESQL statement; so we exclude it for now.
47599>>>                If (bMertechDriver = False) Begin
47601>>>                    Move Err to iErr
47602>>>                    Move LastErr to iLastErr
47603>>>                    Get SqlStmtAttribute of hoStmt SQLSTMTATTRIB_NUMMESSAGES   to iMsgs
47604>>>                    Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_ROWCOUNT      to iRows
47605>>>                    Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_ROWCOUNT_TYPE to iRowType
47606>>>                    Send _SqlColumnInfo hoStmt
47607>>>                    Send Ignore_Error of Error_Object_Id 12289
47608>>>                    Set Error_Report_Mode to DUF_ERROR_NO_REPORT
47609>>>                    Repeat
47609>>>>
47609>>>                        Get SqlFetch of hoStmt to iFetchResult
47610>>>                        If (iFetchResult <> 0) Begin
47612>>>                            Get SQLColumnValue of hoStmt 1 to aSQLFetchResults[SizeOfArray(aSQLFetchResults)]
47613>>>                        End
47613>>>>
47613>>>                    Until (iFetchResult = 0)
47615>>>                    Send Trap_Error of Error_Object_Id 12289
47616>>>                    Set Error_Report_Mode to DUF_ERROR_REPORT
47617>>>                    Move iErr to Err
47618>>>                    Move iLastErr to LastErr
47619>>>                    Set paSQLFetchResults to aSQLFetchResults
47620>>>                End
47620>>>>
47620>>>
47620>>>                Set piRows    to iRows
47621>>>                Set piRowType to iRowType
47622>>>                Move (CurrentDateTime()) to dtQueryExecEnd
47623>>>                Move (CurrentDateTime()) to dtFetchStart
47624>>>
47624>>>                If (iMsgs <> 0) Begin
47626>>>                    If (ghoDbUpdateHandler > 0) Begin
47628>>>                        Get paSQLQueryMessages of ghoDbUpdateHandler to aSQLQueryMessages
47629>>>                    End
47629>>>>
47629>>>                    For i from 1 to iMsgs
47635>>>>
47635>>>                        Get SqlGetMessage of hoStmt i to sMessage
47636>>>                        Get RemoveComponentIdentifier of hoStmt sMessage to sMessage
47637>>>                        If (bShowProgress = True) Begin
47639>>>                            If (Active_State(ghoStatusPanel)) Begin
47641>>>                                Send Update_StatusPanel of ghoStatusPanel (Sformat("  SQLGetMessage iMessage %1 returned [%2]",iMessage,sMessage))
47642>>>                            End
47642>>>>
47642>>>                            Else Begin
47643>>>                                Showln (Sformat("  SQLGetMessage iMessage %1 returned [%2]",iMessage,sMessage))
47645>>>                            End
47645>>>>
47645>>>                        End
47645>>>>
47645>>>                        Move sMessage to sMsg[SizeOfArray(sMsg)]
47646>>>                        Move sMessage to aSQLQueryMessages[SizeOfArray(aSQLQueryMessages)]
47647>>>                    Loop
47648>>>>
47648>>>                    If (ghoDbUpdateHandler > 0) Begin
47650>>>                        Set paSQLQueryMessages of ghoDbUpdateHandler to aSQLQueryMessages
47651>>>                    End
47651>>>>
47651>>>                    Set paQueryMessages to sMsg
47652>>>                End
47652>>>>
47652>>>                Else Begin
47653>>>                    If (bShowProgress = True) Begin
47655>>>                        Get paSqlErrorArray to aSqlErrorArray
47656>>>                        If (SizeOfArray(aSqlErrorArray.iSqlErrorArray)) Begin
47658>>>                            Move (SizeOfArray(aSqlErrorArray.iSqlErrorArray)) to iMsgs
47659>>>                            Decrement iMsgs
47660>>>                            For i from 0 to iMsgs
47666>>>>
47666>>>                                Showln "Embedded SQL Statement: " aSqlErrorArray.sSqlStatementArray[i]
47669>>>                                Showln "SQL Error Message     : " aSqlErrorArray.sSqlErrorArray[i]
47672>>>                            Loop
47673>>>>
47673>>>                        End
47673>>>>
47673>>>                    End
47673>>>>
47673>>>                End
47673>>>>
47673>>>                Move (CurrentDateTime()) to dtFetchEnd
47674>>>            End
47674>>>>
47674>>>            Move (dtQueryExecEnd - dtQueryExecStart) to tsQuery
47675>>>            Move (dtFetchStart - dtFetchEnd) to tsFetch
47676>>>            Set ptsQueryExec to tsQuery
47677>>>            Set ptsFetchResults to tsFetch
47678>>>            Send SqlClose of hoStmt
47679>>>        End
47679>>>>
47679>>>
47679>>>        Send SqlDisconnect of hoSQLConnect
47680>>>    End_Procedure
47681>>>
47681>>>    // *** Main message for executing an SQL script that has been compiled into the program as a resource ***
47681>>>    // Use the SQLIncludeScriptFile command to include an SQL script into the program.
47681>>>    // Returns False if no error occured.
47681>>>    Function SqlUtilExecuteResource String sMemFileName String sDriverID Boolean bCreateScriptFile Boolean bShowProgr Returns Boolean
47683>>>        Boolean bOK bShowProgress
47683>>>        tSQLScriptArray SQLScriptArray
47683>>>        tSQLScriptArray SQLScriptArray
47683>>>        DateTime dtTotalQueryStart dtTotalQueryEnd
47683>>>        TimeSpan tsTotalTime
47683>>>
47683>>>        Move (CurrentDateTime()) to dtTotalQueryStart
47684>>>        Get SqlUtilReadResource sMemFileName to SQLScriptArray
47685>>>        If (SQLScriptArray.bError = True) Begin
47687>>>            Function_Return False
47688>>>        End
47688>>>>
47688>>>
47688>>>        If (num_arguments > 3) Begin
47690>>>            Move bShowProgr to bShowProgress
47691>>>        End
47691>>>>
47691>>>
47691>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
47692>>>        Get SqlUtilExecuteEmbeddedScript SQLScriptArray sDriverID bCreateScriptFile sMemFileName bShowProgress to bOK
47693>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
47694>>>
47694>>>        Move (CurrentDateTime()) to dtTotalQueryEnd
47695>>>        Move (dtTotalQueryEnd - dtTotalQueryStart) to tsTotalTime
47696>>>        Set ptsTotalQueryTime to tsTotalTime
47697>>>
47697>>>        Function_Return bOK
47698>>>    End_Function
47699>>>
47699>>>    // Reads a SQL script file that has been compiled into the .exe program as a resource.
47699>>>    // Pass: The memory resource reference and a boolean True if you want to create the file on disk (in the Home folder).
47699>>>    // Returns: A tSQLScriptArray Struct with the Sql script as an uChar Array will be returned along with the a bError boolean.
47699>>>    Function SqlUtilReadResource String sMemFileName Returns tSQLScriptArray
47701>>>        Integer iChannel iArgumentSize iCount
47701>>>        Number nByteCount
47701>>>        String sSQLScript
47701>>>        tSQLScriptArray SqlScriptArray
47701>>>        tSQLScriptArray SqlScriptArray
47701>>>        UChar[] uCharData
47702>>>
47702>>>        Move False to Err
47703>>>        Get Seq_New_Channel to iChannel
47704>>>        If (iChannel = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
47706>>>            Error DFERR_PROGRAM 'No channel available...'
47707>>>>
47707>>>            Move True to SqlScriptArray.bError
47708>>>            Function_Return SqlScriptArray
47709>>>        End
47709>>>>
47709>>>
47709>>>        // First decide the size of the script
47709>>>        Direct_Input channel iChannel ("Resource: " + sMemFileName)
47711>>>        Read_Block channel iChannel uCharData -1 // -1 means that all data should be read.
47713>>>        Close_Input channel iChannel
47715>>>
47715>>>        Move (SizeOfArray(uCharData)) to nByteCount
47716>>>        If (nByteCount  < 1) Begin
47718>>>            Send Seq_Release_Channel iChannel
47719>>>            Move True to SqlScriptArray.bError
47720>>>            Function_Return SqlScriptArray
47721>>>        End
47721>>>>
47721>>>
47721>>>        // If necessary change the string argument_size
47721>>>        // Read the script file from memory line-by-line
47721>>>        Direct_Input channel iChannel ("Resource: " + sMemFileName)
47723>>>            Move 0 to iCount
47724>>>            Repeat
47724>>>>
47724>>>                Readln channel iChannel sSQLScript
47726>>>                Move sSQLScript to SqlScriptArray.sSQLScriptArray[iCount]
47727>>>                Increment iCount
47728>>>            Until (SeqEof = True)
47730>>>        Close_Input channel iChannel
47732>>>        Send Seq_Release_Channel iChannel
47733>>>
47733>>>        // Finally "sanitize" the script by removing all comments.
47733>>>        Get _SqlUtilSanitizeScript SqlScriptArray to SqlScriptArray
47734>>>
47734>>>        Function_Return SqlScriptArray
47735>>>    End_Function
47736>>>
47736>>>    Function SqlUtilExecuteEmbeddedScript tSQLScriptArray SQLScriptArray String sDriverID Boolean bCreateScriptFile String sMemFileName Boolean bShowProgr Returns Boolean
47738>>>        String sSQLVal sStmt sCR sGOKeyWord sNoCountKeyWord sMessage sExportFile
47738>>>        Handle hoSql hoSQLConnect hoStmt hoError
47738>>>        Integer i iMsgs iRows iRowType iCount iChunkCounter iChunkMax iOut iNextSet iMessage iPos
47738>>>        String[] sMsg aSQLQueryMessages
47740>>>        DateTime dtQueryExecStart dtQueryExecEnd
47740>>>        TimeSpan tsQuery
47740>>>        tSqlErrorArray aSqlErrorArray
47740>>>        tSqlErrorArray aSqlErrorArray
47740>>>        tSQLConnection SQLConnection
47740>>>        tSQLConnection SQLConnection
47740>>>        Boolean bMertechDriver bShowProgress
47740>>>
47740>>>        If (num_arguments > 4) Begin
47742>>>            Move bShowProgr to bShowProgress
47743>>>        End
47743>>>>
47743>>>        Get IsMertechDriver sDriverID to bMertechDriver
47744>>>        If (bMertechDriver = False) Begin
47746>>>            Get phoSQLManager to hoSql
47747>>>        End
47747>>>>
47747>>>        Else Begin
47748>>>            Get _MertechSQLManagerHandle to hoSql
47749>>>        End
47749>>>>
47749>>>
47749>>>        Get _SqlFindKeyWord CI_SQLGO to sGOKeyWord
47750>>>        // There seems to be a problem to pass strings when their value gets really big, aka
47750>>>        // above the argument_size level. It isn't clear when these problems starts but sooner
47750>>>        // or later SqlExecDirect stops working correctly with no error messages!
47750>>>        // To guard from this we set a max number of lines (iChunkMax) that can be processed
47750>>>        // at a time. Testing with the Create Chinook Database script; 500 seems like a number that works fine.
47750>>>        // A bonus of this is that it turns out that it is actually faster to run in chunks!
47750>>>        Get piChunkMax to iChunkMax
47751>>>        Move 0 to iChunkCounter
47752>>>        Move "" to sStmt
47753>>>
47753>>>        Get _SqlFindKeyWord CI_SQLSetNoCountOn to sNoCountKeyWord
47754>>>        Move (Character(13) + Character(10)) to sCR
47755>>>
47755>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
47756>>>
47756>>>        If (bMertechDriver = True) Begin
47758>>>            Get _MertechSQLConnect sDriverID SQLConnection.sServer SQLConnection.sUserID SQLConnection.sPassword to hoSQLConnect
47759>>>        End
47759>>>>
47759>>>        If (bMertechDriver = False) Begin
47761>>>            Get phoSQLManager  to hoSQL
47762>>>            If (sDriverID = ODBC_DRV_ID) Begin
47764>>>                If (Uppercase(SQLConnection.sConnectionString) contains CS_SQLIniDSNKeyword) Begin
47766>>>                    Move (Pos(";", SQLConnection.sConnectionString)) to iPos
47767>>>                    If (iPos > 0) Begin
47769>>>                        Move (Left(SQLConnection.sConnectionString, (iPos - 1))) to SQLConnection.sConnectionString
47770>>>                        Move (Trim(SQLConnection.sConnectionString)) to SQLConnection.sConnectionString
47771>>>                    End
47771>>>>
47771>>>                End
47771>>>>
47771>>>            End
47771>>>>
47771>>>            Send SqlSetConnect of hoSQL sDriverID SQLConnection.sConnectionString
47772>>>            Get SqlConnect     of hoSQL "" "" to hoSQLConnect
47773>>>        End
47773>>>>
47773>>>
47773>>>        If (hoSQLConnect <> 0) Begin
47775>>>            Move False to Err
47776>>>            Get SqlOpen of hoSQLConnect to hoStmt
47777>>>            If (hoStmt <> 0) Begin
47779>>>
47779>>>                // If the embedded resource should be written as a script file to disk:
47779>>>                If (bCreateScriptFile = True) Begin
47781>>>                    Get psHome of (phoWorkspace(ghoApplication)) to sExportFile
47782>>>                    Get vFolderFormat sExportFile to sExportFile
47783>>>                    Move (sExportFile + sMemFileName) to sExportFile
47784>>>                    Get Seq_New_Channel to iOut
47785>>>                    If (iOut <> DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
47787>>>                        Direct_Output channel iOut sExportFile
47789>>>                    End
47789>>>>
47789>>>                End
47789>>>>
47789>>>
47789>>>                // Record starting date/time stamp
47789>>>                Move (CurrentDateTime()) to dtQueryExecStart
47790>>>                // Turn on error handling if enabled
47790>>>                If (pbHandleQueryErrors(Self)) Begin
47792>>>                    Set pbSqlError to False
47793>>>                    Set paSqlErrorArray to aSqlErrorArray
47794>>>                    Move Error_Object_Id to hoError
47795>>>                    Move Self to Error_Object_Id
47796>>>                End
47796>>>>
47796>>>
47796>>>                Move (SizeOfArray(SQLScriptArray.sSQLScriptArray)) to iRows
47797>>>                Decrement iRows
47798>>>                If (sDriverID = MSSQLDRV_ID) Begin
47800>>>                    Move (sNoCountKeyWord + sCR) to sStmt
47801>>>                End
47801>>>>
47801>>>
47801>>>                For iCount from 0 to iRows
47807>>>>
47807>>>                    Move (SQLScriptArray.sSQLScriptArray[iCount]) to sSQLVal
47808>>>
47808>>>                    If (Uppercase(sSQLVal) <> sGOKeyWord) Begin
47810>>>                        If (sSQLVal <> "") Begin
47812>>>                            Move (sSQLVal + sCR) to sSQLVal
47813>>>                        End
47813>>>>
47813>>>                        Move (Append(sStmt, (sSQLVal))) to sStmt
47814>>>                    End
47814>>>>
47814>>>
47814>>>                    // - Each time we encounter a "GO" statement we execute it,
47814>>>                    // or if at the very end of the script.
47814>>>                    If (Uppercase(sSQLVal) = sGOKeyWord or iChunkCounter >= iChunkMax or iCount = iRows) Begin
47816>>>
47816>>>                        // - It turns out it can be at least 10 times faster to execute SQL statements in chunks,
47816>>>                        // instead of all in one go.
47816>>>                        Send SqlExecDirect of hoStmt sStmt
47817>>>
47817>>>                        If (bCreateScriptFile = True) Begin
47819>>>                            Write channel iOut sStmt
47821>>>                        End
47821>>>>
47821>>>                        Move "" to sStmt
47822>>>                        Move 0 to iChunkCounter
47823>>>                    End
47823>>>>
47823>>>                    Increment iChunkCounter
47824>>>                Loop
47825>>>>
47825>>>
47825>>>                // ToDo: This sometimes generates a GPF with Mertech drivers;
47825>>>                //       so not used for now.
47825>>>                If (bMertechDriver = False) Begin
47827>>>                    Repeat
47827>>>>
47827>>>                        If (pbHandleQueryErrors(Self)) Begin
47829>>>                            Move hoError to Error_Object_Id
47830>>>                        End
47830>>>>
47830>>>                        Move (CurrentDateTime()) to dtQueryExecEnd
47831>>>
47831>>>                        Send _SqlColumnInfo hoStmt
47832>>>                        Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_ROWCOUNT to iRows
47833>>>                        Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_ROWCOUNT_TYPE to iRowType
47834>>>                        Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_NUMMESSAGES to iMsgs
47835>>>                        Set piRows    to iRows
47836>>>                        Set piRowType to iRowType
47837>>>
47837>>>                        If (iMsgs <> 0) Begin
47839>>>                            If (ghoDbUpdateHandler > 0) Begin
47841>>>                                Get paSQLQueryMessages of ghoDbUpdateHandler to aSQLQueryMessages
47842>>>                            End
47842>>>>
47842>>>                            For i from 1 to iMsgs
47848>>>>
47848>>>                                Get SqlGetMessage of hoStmt i to sMessage
47849>>>                                Get RemoveComponentIdentifier of hoStmt sMessage to sMessage
47850>>>                                If (bShowProgress = True) Begin
47852>>>                                    If (Active_State(ghoStatusPanel)) Begin
47854>>>                                        Send Update_StatusPanel of ghoStatusPanel (Sformat("  SQLGetMessage iMessage %1 returned [%2]", iMessage, sMessage))
47855>>>                                    End
47855>>>>
47855>>>                                    Else Begin
47856>>>                                        Showln (Sformat("  SQLGetMessage iMessage %1 returned [%2]", iMessage, sMessage))
47858>>>                                    End
47858>>>>
47858>>>                                End
47858>>>>
47858>>>                                Move sMessage to sMsg[SizeOfArray(sMsg)]
47859>>>                                Move sMessage to aSQLQueryMessages[SizeOfArray(aSQLQueryMessages)]
47860>>>                            Loop
47861>>>>
47861>>>
47861>>>
47861>>>                            If (ghoDbUpdateHandler > 0) Begin
47863>>>                                Set paSQLQueryMessages of ghoDbUpdateHandler to aSQLQueryMessages
47864>>>                            End
47864>>>>
47864>>>                            Set paQueryMessages to sMsg
47865>>>                        End
47865>>>>
47865>>>
47865>>>                        Get SQLNextResultSet of hoStmt to iNextSet
47866>>>                    Until (iNextSet = 0)
47868>>>                End
47868>>>>
47868>>>                Move (CurrentDateTime()) to dtQueryExecEnd
47869>>>            End
47869>>>>
47869>>>
47869>>>            Move (dtQueryExecEnd - dtQueryExecStart) to tsQuery
47870>>>            Set ptsQueryExec to tsQuery
47871>>>            Send SqlClose of hoStmt
47872>>>
47872>>>            If (bCreateScriptFile = True) Begin
47874>>>                Close_Output channel iOut
47876>>>                Send Seq_Release_Channel iOut
47877>>>            End
47877>>>>
47877>>>        End
47877>>>>
47877>>>        Send SqlDisconnect of hoSQLConnect
47878>>>
47878>>>        Function_Return (hoSQLConnect <> 0 and Err = False)
47879>>>    End_Function
47880>>>
47880>>>    // * Dummy function for the Studio's Code Explorer *
47880>>>    Function SQL_UTILITY_FUNCTIONS Returns Boolean
47882>>>        Function_Return False
47883>>>    End_Function
47884>>>
47884>>>    // Does three things with auxilirary files;
47884>>>    // 1) Deletes the cache file in the first Data folder of the psDataPath property as the table at the SQL end has been changed.
47884>>>    // 2) Adds the sColumnName to the TableName.tag file in the first Data folder of the psDataPath property
47884>>>    // 3) Creates a new TableName.fd file if the DdSrc folder is available (if this is a development environment)
47884>>>    Function SqlUtilAdjustAuxFiles Handle hTable String sTableName String sColumnName Returns Boolean
47886>>>        String sDataPath sDDSrcPath sDriverID
47886>>>        Boolean bOK bExists bMertechDriver
47886>>>        Integer iCount iCh iPos
47886>>>
47886>>>        // If table name equals e.g. "dbo.MyTable" we need to remove the prefix.
47886>>>        If (sTableName contains ".") Begin
47888>>>            Move (Pos(".", sTableName)) to iPos
47889>>>            Move (Mid(sTableName, 999, (iPos +1))) to sTableName
47890>>>        End
47890>>>>
47890>>>
47890>>>        Get psDriverID to sDriverID
47891>>>        Get psDataPathFirstPart to sDataPath
47892>>>        Get vFolderExists sDataPath to bOK
47893>>>        If (bOK = False) Begin
47895>>>            Error DFERR_PROGRAM "Function SqlUtilAdjustAuxFiles; psDataPath not found!"
47896>>>>
47896>>>            Function_Return False
47897>>>        End
47897>>>>
47897>>>
47897>>>        Get IsMertechDriver sDriverID to bMertechDriver
47898>>>        // First delete the cache file:
47898>>>        Get UtilDeleteCacheFile sTableName to bOK
47899>>>
47899>>>        Get Seq_New_Channel to iCh
47900>>>        If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
47902>>>            Function_Return False
47903>>>        End
47903>>>>
47903>>>
47903>>>        Get vFilePathExists (sDataPath + sTableName + ".tag") to bExists
47904>>>        If (bExists = False) Begin
47906>>>            Function_Return False
47907>>>        End
47907>>>>
47907>>>
47907>>>        Get SqlUtilUpdateIntFile hTable to bOK
47908>>>        // Add the new column name to the .tag filen (if it doesn't exist):
47908>>>        Get UtilUpdateTAGFile (sDataPath + sTableName + ".tag") sColumnName to bOK
47909>>>
47909>>>        // If in development environment; output new .fd file:
47909>>>        Get psDdSrcPath of (phoWorkspace(ghoApplication)) to sDDSrcPath
47910>>>        Get CountOfPaths of (phoWorkspace(ghoApplication)) sDDSrcPath to iCount
47911>>>        If (iCount > 1) Begin
47913>>>            Get PathAtIndex of (phoWorkspace(ghoApplication)) sDDSrcPath 1 to sDDSrcPath
47914>>>        End
47914>>>>
47914>>>        Get vFolderExists sDDSrcPath to bExists
47915>>>        If (bExists = True) Begin
47917>>>            Get vFolderFormat sDDSrcPath to sDDSrcPath
47918>>>            Move False to Err
47919>>>            Get AutoConnectionIDLogin to bOK
47920>>>            If (hTable <> 0) Begin
47922>>>                Open hTable
47924>>>            End
47924>>>>
47924>>>            Else Begin
47925>>>                Get UtilTableOpen hTable sTableName DF_SHARE to bOK
47926>>>            End
47926>>>>
47926>>>
47926>>>            Get_Attribute DF_FILE_OPENED of hTable to bOK
47929>>>            If (bOK = True) Begin
47931>>>                Output_Aux_File DF_AUX_FILE_FD for hTable to (sDDSrcPath + sTableName + ".fd")
47933>>>            End
47933>>>>
47933>>>            If (Err = True) Begin
47935>>>                Move False to bOK
47936>>>            End
47936>>>>
47936>>>        End
47936>>>>
47936>>>
47936>>>        Function_Return (bOK = True)
47937>>>    End_Function
47938>>>
47938>>>    Function UtilUpdateTAGFile String sFullTAGFileName String sColumnName Returns Boolean
47940>>>        Integer iChIn iChOut // iCount
47940>>>        Boolean bExists
47940>>>        String sExistingColumn
47940>>>
47940>>>        Move False to bExists
47941>>>        Get Seq_New_Channel to iChIn
47942>>>        Get Seq_New_Channel to iChOut
47943>>>        If (iChIn = DF_SEQ_CHANNEL_NOT_AVAILABLE or iChOut = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
47945>>>            Function_Return True
47946>>>        End
47946>>>>
47946>>>
47946>>>        Move False to Err
47947>>>        // The following line should also use the channel attribute. (Thank you, Hans van de Laar)
47947>>>        Direct_Input channel iChIn ("'" + sFullTAGFileName + "'")
47949>>>        While (not(SeqEof))
47953>>>            Readln channel iChIn sExistingColumn
47955>>>            If (Uppercase(sExistingColumn) = Uppercase(sColumnName)) Begin
47957>>>                Move True to bExists
47958>>>            End
47958>>>>
47958>>>            If (Trim(sExistingColumn) = "") Begin
47960>>>                Move True to SeqEof
47961>>>            End
47961>>>>
47961>>>        Loop
47962>>>>
47962>>>        Close_Input channel iChIn
47964>>>        Send Seq_Release_Channel iChIn
47965>>>
47965>>>        If (bExists = False) Begin
47967>>>            Append_Output channel iChOut sFullTAGFileName
47969>>>            Writeln channel iChOut sColumnName
47972>>>            Close_Output channel iChOut
47974>>>            Send Seq_Release_Channel iChOut
47975>>>        End
47975>>>>
47975>>>
47975>>>        Function_Return (Err = False)
47976>>>    End_Function
47977>>>
47977>>>    // Message for changing .int files to use connection ID's
47977>>>    //
47977>>>    // Changes all ".int" files for the passed sDataPath to use a sConnectionID,
47977>>>    // OR changes an existing connection id to a new id.
47977>>>    // Pass the full path to the data folder and the name of the connection id (string value).
47977>>>    // Pass a True for the bShowResult parameter to show work in progress (showln's).
47977>>>    Procedure SqlUtilChangeIntFilesToConnectionIDs String sDataPath String sConnectionID Boolean bShowResult
47979>>>        String sFileName sDriverID sDriverFile sConnectionString
47979>>>        String[] sFilesData
47980>>>        Boolean bOK bCancel
47980>>>        Integer iSize iCount
47980>>>
47980>>>        Get SqlUtilEnumerateIntFiles sDataPath to sFilesData
47981>>>        Move (SizeOfArray(sFilesData))    to iSize
47982>>>        If (iSize = 0) Begin
47984>>>            If (ghoStatusPanel <> 0) Begin
47986>>>                If (Active_State(ghoStatusPanel)) Begin
47988>>>                    Send Stop_StatusPanel of ghoStatusPanel
47989>>>                End
47989>>>>
47989>>>            End
47989>>>>
47989>>>            Send Info_Box CS_DUF_NoIntFilesFound
47990>>>            Procedure_Return
47991>>>        End
47991>>>>
47991>>>
47991>>>        Move (Trim(sConnectionID)) to sConnectionID
47992>>>        Get vFolderFormat sDataPath to sDataPath
47993>>>        Decrement iSize
47994>>>        For iCount from 0 to iSize
48000>>>>
48000>>>            Move sFilesData[iCount] to sFileName
48001>>>            // This makes sure that we also can change an existing connection id to something new:
48001>>>            Get UtilChangeSourceCodeLine (sDataPath + sFileName) CS_SERVER_NAME (CS_SERVER_NAME * CS_DFCONNID + "=" + sConnectionID) bShowResult to bOK
48002>>>            If (ghoStatusPanel <> 0) Begin
48004>>>                If (Active_State(ghoStatusPanel)) Begin
48006>>>                    Get Check_StatusPanel of ghoStatusPanel to bCancel
48007>>>                    If (bCancel = True) Begin
48009>>>                        Send Deactivate of ghoStatusPanel
48010>>>                        Procedure_Return
48011>>>                    End
48011>>>>
48011>>>                End
48011>>>>
48011>>>            End
48011>>>>
48011>>>        Loop
48012>>>>
48012>>>
48012>>>        Get psDriverID to sDriverID
48013>>>
48013>>>         // Finally also change the driver file e.g. MSSQLDRV.int file in the Data folder in case it has a "DFconnectionID xxxxID,SERVER..."
48013>>>        Move "" to sFileName
48014>>>        If (sDriverID = MSSQLDRV_ID) Begin
48016>>>            Move "MSSQLDrv.int" to sFileName
48017>>>        End
48017>>>>
48017>>>        If (sDriverID = DB2_DRV_ID) Begin
48019>>>            Move "DB2_Drv.int" to sFileName
48020>>>        End
48020>>>>
48020>>>        If (sDriverID = ODBC_DRV_ID) Begin
48022>>>            Move "ODBC_Drv.int" to sFileName
48023>>>        End
48023>>>>
48023>>>        If (sFileName <> "") Begin
48025>>>            Move "" to sDriverFile
48026>>>            Get_File_Path sFileName to sDriverFile
48027>>>            If (sDriverFile <> "") Begin
48029>>>                Get psConnectionString to sConnectionString
48030>>>                Get UtilChangeSourceCodeLine sDriverFile CS_SQLConnectionIDText (CS_SQLConnectionIDText * String(sConnectionID) + "," * String(sConnectionString) * String(",0")) bShowResult to bOK
48031>>>            End
48031>>>>
48031>>>        End
48031>>>>
48031>>>    End_Procedure
48032>>>
48032>>>    // Checks if the database exists in SQL. Returns = True if it does.
48032>>>    Function SqlUtilCheckIfDatabaseExists String sDatabase Returns Boolean
48034>>>        String[] sDatabaseArray
48035>>>        String sVal sServer sDriverID
48035>>>        Integer iCount iSize iPos
48035>>>        Boolean bExists
48035>>>        tSQLConnection SQLConnection
48035>>>        tSQLConnection SQLConnection
48035>>>
48035>>>        Move False to bExists
48036>>>        Get psDriverID to sDriverID
48037>>>        // DB2 doesn't have a "Database" name, so we always return True.
48037>>>        If (sDriverID = DB2_DRV_ID) Begin
48039>>>            Function_Return bExists
48040>>>        End
48040>>>>
48040>>>
48040>>>        Get SqlUtilEnumerateDatabases sDriverID to sDatabaseArray
48041>>>        If (SizeOfArray(sDatabaseArray) = 0) Begin
48043>>>            Function_Return False
48044>>>        End
48044>>>>
48044>>>
48044>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
48045>>>        Move SQLConnection.sServer to sServer
48046>>>
48046>>>        // Special code to handle a FILEDSN that also can contain "/"
48046>>>        If (Uppercase(sServer) contains ("." + CS_SQLIniDSNKeyword)) Begin
48048>>>            Move sDatabaseArray[0] to sVal  // Dummy!
48049>>>        End
48049>>>>
48049>>>        Else If (sServer contains "/") Begin
48052>>>            Move (Pos("/", sServer)) to iPos
48053>>>            Move (Mid(sServer, 999, (iPos +1))) to sDatabase
48054>>>        End
48054>>>>
48054>>>
48054>>>        Move (SizeOfArray(sDatabaseArray)) to iSize
48055>>>        Decrement iSize
48056>>>        For iCount from 0 to iSize
48062>>>>
48062>>>            Move sDatabaseArray[iCount] to sVal
48063>>>            If (Uppercase(sVal) = Uppercase(sDatabase)) Begin
48065>>>                Move True to bExists
48066>>>                If (bExists = True) Begin
48068>>>                    Move iSize to iCount // We're done.
48069>>>                End
48069>>>>
48069>>>            End
48069>>>>
48069>>>        Loop
48070>>>>
48070>>>
48070>>>        Function_Return bExists
48071>>>    End_Function
48072>>>
48072>>>    // Checks if a table exists as an SQL table. Returns = True if it does.
48072>>>    Function SqlUtilCheckIfTableHandleExists Handle hTable String sDriverID Returns Boolean
48074>>>        String sDatabase sSchema sTableName sVal
48074>>>        Boolean bExists
48074>>>        String[] sTablesArray
48075>>>        Integer iSize iCount
48075>>>
48075>>>        Move False to bExists
48076>>>        Get UtilTableHandleToString hTable to sTableName
48077>>>        Get psDatabase to sDatabase
48078>>>        Get psSchema   to sSchema
48079>>>        Get SqlUtilEnumerateTables sDriverID sDatabase sSchema to sTablesArray
48080>>>        Move (SizeOfArray(sTablesArray)) to iSize
48081>>>        Decrement iSize
48082>>>        For iCount from 0 to iSize
48088>>>>
48088>>>            Move sTablesArray[iCount] to sVal
48089>>>            If (Uppercase(sVal) = Uppercase(sTableName)) Begin
48091>>>                Move True to bExists
48092>>>                Move iSize to iCount // We're done!
48093>>>            End
48093>>>>
48093>>>        Loop
48094>>>>
48094>>>
48094>>>        Function_Return bExists
48095>>>    End_Function
48096>>>
48096>>>    // Checks if a table exists as an SQL table. Returns = True if it does.
48096>>>    Function SqlUtilCheckIfTableNameExists String sTableName String sDriverID Returns Boolean
48098>>>        String sDatabase sSchema sVal
48098>>>        Boolean bExists
48098>>>        String[] sTablesArray
48099>>>        Integer iSize iCount
48099>>>
48099>>>        Move False to bExists
48100>>>        Get psDatabase to sDatabase
48101>>>        Get psSchema   to sSchema
48102>>>        Get SqlUtilEnumerateTables sDriverID sDatabase sSchema to sTablesArray
48103>>>        Move (SizeOfArray(sTablesArray)) to iSize
48104>>>        Decrement iSize
48105>>>        For iCount from 0 to iSize
48111>>>>
48111>>>            Move sTablesArray[iCount] to sVal
48112>>>            If (Uppercase(sVal) = Uppercase(sTableName)) Begin
48114>>>                Move True to bExists
48115>>>                Move iSize to iCount // We're done!
48116>>>            End
48116>>>>
48116>>>        Loop
48117>>>>
48117>>>
48117>>>        Function_Return bExists
48118>>>    End_Function
48119>>>
48119>>>    Function SqlUtilCheckIfTableNameSpelling String sDriverID String sDatabase String sTableName String sSchema Returns String
48121>>>        String sVal sTableSpelledCorrectly
48121>>>        Boolean bExists
48121>>>        String[] sTablesArray
48122>>>        Integer iSize iCount
48122>>>
48122>>>        Move False to bExists
48123>>>        Move sTableName to sTableSpelledCorrectly
48124>>>        Get SqlUtilEnumerateTables sDriverID sDatabase sSchema to sTablesArray
48125>>>        Move (SizeOfArray(sTablesArray)) to iSize
48126>>>        Decrement iSize
48127>>>        For iCount from 0 to iSize
48133>>>>
48133>>>            Move sTablesArray[iCount] to sVal
48134>>>            If (Uppercase(sVal) = Uppercase(sTableName)) Begin
48136>>>                Move sVal to sTableSpelledCorrectly
48137>>>                Move iSize to iCount // We're done!
48138>>>            End
48138>>>>
48138>>>        Loop
48139>>>>
48139>>>
48139>>>        Function_Return sTableSpelledCorrectly
48140>>>    End_Function
48141>>>
48141>>>    // ToDo: This index name function needs to be finished...
48141>>>    Function SqlUtilCheckIfIndexNameExists Handle hTable String sIndexName Returns Boolean
48143>>>        String sSchema sTableName sDriverID
48143>>>        Boolean bExists
48143>>>
48143>>>        Get psDriverID to sDriverID
48144>>>        Get psSchema to sSchema
48145>>>        Get UtilTableHandleToString hTable to sTableName
48146>>>
48146>>>        Function_Return bExists
48147>>>    End_Function
48148>>>
48148>>>    // Checks if a column/field name exists in a SQL table definition
48148>>>    // Returns True if it does
48148>>>    // Sample:
48148>>>    //   Get SQLUtilColumnExists "MySQLTable" "MyColumnName" to bExists
48148>>>    Function SqlUtilColumnExists String sTableName String sFieldName Returns Boolean
48150>>>        Integer iNumColumns iColumn
48150>>>        String sColumn sDriverID
48150>>>        String[] sColumnsArray
48151>>>        Boolean bExists bOK
48151>>>
48151>>>        Move False to bExists
48152>>>        Get AutoConnectionIDLogin to bOK
48153>>>        Get psDriverID to sDriverID
48154>>>
48154>>>        Get SqlUtilEnumerateColumns sDriverID sTableName to sColumnsArray
48155>>>        Move (SizeOfArray(sColumnsArray)) to iNumColumns
48156>>>        Decrement iNumColumns
48157>>>        For iColumn from 0 to iNumColumns
48163>>>>
48163>>>            Move sColumnsArray[iColumn] to sColumn
48164>>>            If (Uppercase(sFieldName) = Uppercase(sColumn)) Begin
48166>>>                Move True to bExists
48167>>>                Move iNumColumns to iColumn // We're out of here
48168>>>            End
48168>>>>
48168>>>        Loop
48169>>>>
48169>>>
48169>>>        Function_Return bExists
48170>>>    End_Function
48171>>>
48171>>>    Function SqlUtilConvertColumnTypesToSQL2008 Handle hTable Returns Boolean
48173>>>        Integer iNumColumns iColumn iDFType iNativeType
48173>>>        Boolean bOpened bOK
48173>>>        String sColumnName sNativeTypeName
48173>>>
48173>>>        Get AutoConnectionIDLogin to bOK
48174>>>        Get OpenTableExclusive hTable to bOK
48175>>>        If (bOK = False) Begin
48177>>>            Function_Return False
48178>>>        End
48178>>>>
48178>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
48181>>>        If (bOpened = False) Begin
48183>>>            Error DFERR_PROGRAM ("Function SQLUtilConvertColumnTypesToSQL2008; Could not open table" * String(hTable))
48184>>>>
48184>>>            Function_Return False
48185>>>        End
48185>>>>
48185>>>
48185>>>        Move False to Err
48186>>>
48186>>>        Structure_Start hTable
48187>>>            Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
48190>>>
48190>>>            For iColumn from 1 to iNumColumns
48196>>>>
48196>>>                Get_Attribute DF_FIELD_TYPE             of hTable iColumn to iDfType
48199>>>                Get_Attribute DF_FIELD_NAME             of hTable iColumn to sColumnName
48202>>>                Get_Attribute DF_FIELD_NATIVE_TYPE      of hTable iColumn to iNativeType
48205>>>                Get_Attribute DF_FIELD_NATIVE_TYPE_Name of hTable iColumn to sNativeTypeName
48208>>>
48208>>>                Case Begin
48208>>>                    Case (iDFType = DF_DATE)
48210>>>                        If (iNativeType = SQL_TYPE_TIMESTAMP) Begin
48212>>>                            // Convert datetime to date
48212>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_TYPE_DATE
48215>>>                        End
48215>>>>
48215>>>                        Case Break
48216>>>                    Case (iDFType = DF_DATETIME)
48219>>>                        If (iNativeType = SQL_TYPE_TIMESTAMP) Begin
48221>>>                            // Convert datetime to datetime2
48221>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_TYPE_TIMESTAMP2
48224>>>                        End
48224>>>>
48224>>>                        Case Break
48225>>>                    Case (iDFType = DF_ASCII)
48228>>>                        If (iNativeType = SQL_CHAR) Begin
48230>>>                            // Convert char to varchar
48230>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_VARCHAR
48233>>>                        End
48233>>>>
48233>>>                        Case Break
48234>>>                    Case (iDFType = DF_TEXT)
48237>>>                        If (iNativeType = SQL_LONGVARCHAR) Begin
48239>>>                            // Convert text to varchar(max)
48239>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_VARCHAR
48242>>>                        End
48242>>>>
48242>>>                        Case Break
48243>>>                    Case (iDFType = DF_BINARY)
48246>>>                        If (iNativeType = SQL_LONGVARBINARY) Begin
48248>>>                            // Convert image to varbinary(max)
48248>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_VARBINARY
48251>>>                        End
48251>>>>
48251>>>                        Case Break
48252>>>                Case End
48252>>>            Loop
48253>>>>
48253>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
48254>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
48256>>>
48256>>>        Set Action_Text of ghoStatusPanel to ""
48257>>>        Function_Return (Err = False)
48258>>>    End_Function
48259>>>
48259>>>
48259>>>    // Will create an SQL table with the passed sTableName & sColumnName as Numeric 4.2 to keep
48259>>>    // the DbUpdateVersion database revision in.
48259>>>    // Also pass the file number of the current (embedded?) table number used in development.
48259>>>    // It will first create the SQL Table & column, then create the .int file and change Filelist.cfg
48259>>>    Function SqlUtilCreateDbVersionTable Handle hTable String sColumnName String sDriverID Returns Boolean
48261>>>        Boolean bOK bOpened
48261>>>        String sTableName sDataType sAlterTable sAddColumn sLengthAndDecimals sStmt
48261>>>
48261>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sTableName
48264>>>        Get _TableNameOnly sTableName to sTableName
48265>>>        If (sTableName = "") Begin
48267>>>            Function_Return False
48268>>>        End
48268>>>>
48268>>>
48268>>>        // This just creates the table and a "dummy" column.
48268>>>        Get SqlTableCreate hTable sDriverID to bOK
48269>>>        If (bOK = False) Begin
48271>>>            Function_Return False
48272>>>        End
48272>>>>
48272>>>
48272>>>        Close hTable
48273>>>        Move False to Err
48274>>>
48274>>>        Get _SqlFindKeyWord CI_SQLAlterTable to sAlterTable
48275>>>        Get _SqlFindKeyWord CI_SQLAdd        to sAddColumn
48276>>>        Move "Decimal" to sDataType
48277>>>        Get _SqlFormatLengthAndDecimalAsString 4 2 to sLengthAndDecimals
48278>>>
48278>>>        // Adds the "sColumnName" passed to the function
48278>>>        Move (sAlterTable * sTableName * sAddColumn * sColumnName * sDataType + sLengthAndDecimals) to sStmt
48279>>>        Send SqlUtilExecuteQuery sStmt sDriverID
48280>>>
48280>>>        // Now we can delete the dummy column:
48280>>>        Get SqlColumnRemoveByTableName sTableName "Dummy" to bOK
48281>>>
48281>>>        // Finally, we attach to the newly created table.
48281>>>        If (Err = False) Begin
48283>>>            Get ApiTableAttachToSQL hTable True to bOK
48284>>>        End
48284>>>>
48284>>>        Open hTable
48286>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
48289>>>
48289>>>        Function_Return (Err = False and bOK = True and bOpened = True)
48290>>>    End_Function
48291>>>
48291>>>    // The table must already exist in the filelist for this function to work.
48291>>>    // It creates a rudimentary .int file in the first Data folder of the psDataPath property.
48291>>>    Function SqlUtilCreateIntFile Handle hTable String sDriverID String sConnectionID Boolean bAnsi Boolean bSysFile Returns Boolean
48293>>>        Boolean bOK bExists bUseConnectionID bMertech
48293>>>        String sDataPath sRootName sLogicalName sPhysicalFileName sConnectionString sDatabaseName sSchemaName sANSI_OEM
48293>>>        String[] sIndexArray
48294>>>        Integer iCount iCh iSize
48294>>>
48294>>>        Move (Trim(sConnectionID) <> "") to bUseConnectionID
48295>>>        Get psConnectionString to sConnectionString
48296>>>
48296>>>        Move CS_ANSI_Txt to sANSI_OEM
48297>>>        If (bANSI = False) Begin
48299>>>            Move CS_OEM_Txt to sANSI_OEM
48300>>>        End
48300>>>>
48300>>>
48300>>>        Get psDataPathFirstPart to sDataPath
48301>>>        Get vFolderExists sDataPath to bOK
48302>>>        If (bOK = False) Begin
48304>>>            Error DFERR_PROGRAM "Function SqlUtilCreateIntFile; psDataPath not found!"
48305>>>>
48305>>>            Function_Return False
48306>>>        End
48306>>>>
48306>>>        Get vFolderFormat sDataPath to sDataPath
48307>>>
48307>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
48310>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
48313>>>        Get _TableNameOnly sRootName to sDatabaseName
48314>>>        Move sLogicalName  to sPhysicalFileName
48315>>>        Move (sPhysicalFileName + ".int") to sPhysicalFileName
48316>>>
48316>>>        Get IsMertechDriver sDriverID to bMertech
48317>>>        If (bMertech = True) Begin
48319>>>            // This should not be called here. Instead it is called by the SqlUtilUpdateIntFile!
48319>>>            // Else it will create an error in the error log (although it won't do anything...)
48319>>>            // Get _MertechSqlUtilCreateIntFile hTable sLogicalName sDataPath sPhysicalFileName to bOK
48319>>>            Function_Return (bOK = True)
48320>>>        End
48320>>>>
48320>>>
48320>>>        Get psSchema hTable to sSchemaName
48321>>>        If (sSchemaName = "") Begin
48323>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchemaName
48324>>>        End
48324>>>>
48324>>>
48324>>>        // If the .int file already exists; we rename it to "FileName" + ".bak"
48324>>>        Get vFilePathExists (sDataPath + sPhysicalFileName) to bExists
48325>>>        If (bExists = True) Begin
48327>>>            Get vRenameFile (sDataPath + sPhysicalFileName) (sDataPath + sPhysicalFileName + ".bak") to bOK
48328>>>        End
48328>>>>
48328>>>
48328>>>        Get UtilDeleteCacheFile sRootName to bOK
48329>>>        Get SqlUtilEnumerateIndexes sRootName sDriverID to sIndexArray
48330>>>
48330>>>        Get Seq_Open_Output_Channel (sDataPath + sPhysicalFileName) to iCh
48331>>>            Writeln channel iCh CS_DRIVER_NAME     " " sDriverID
48336>>>            If (bUseConnectionID = True) Begin
48338>>>                Writeln channel iCh CS_SERVER_NAME " " CS_DFCONNID "=" sConnectionID
48345>>>            End
48345>>>>
48345>>>            Else Begin
48346>>>                Writeln channel iCh CS_SERVER_NAME " " CS_SERVER "=" sConnectionString
48353>>>            End
48353>>>>
48353>>>            Writeln channel iCh CS_DATABASE_NAME          " " sDatabaseName
48358>>>            Writeln channel iCh CS_SCHEMA_NAME            " " (Lowercase(sSchemaName))
48363>>>            // There seems to be a new order how these are set from DF19.
48363>>>            If (bSysFile = True) Begin
48365>>>                Writeln channel iCh CS_RECNUM_TABLE       " " "NO"
48370>>>            End
48370>>>>
48370>>>            Writeln channel iCh CS_TABLE_CHARACTER_FORMAT " " sANSI_OEM
48375>>>            Writeln channel iCh CS_USE_DUMMY_ZERO_DATE    " " "YES" // ToDo: We maybe need to paramerize this setting?
48380>>>            If (bSysFile = True) Begin
48382>>>                Writeln channel iCh CS_SYSTEM_FILE        " " "YES"
48387>>>            End
48387>>>>
48387>>>
48387>>>            If (bSysFile = False) Begin
48389>>>                Move (SizeOfArray(sIndexArray)) to iSize
48390>>>                Move (SortArray(sIndexArray)) to sIndexArray
48391>>>                If (iSize > 0) Begin
48393>>>                    Writeln channel iCh (CS_PRIMARY_INDEX * String("0"))
48396>>>                    Writeln channel iCh // Just an empty line
48398>>>                End
48398>>>>
48398>>>                Decrement iSize
48399>>>                For iCount from 0 to iSize
48405>>>>
48405>>>                    Writeln channel iCh (CS_INDEX_NUMBER * String(iCount))
48408>>>                    Writeln channel iCh (CS_INDEX_NAME   * String(sIndexArray[iCount]))
48411>>>                    Writeln channel iCh
48413>>>                Loop
48414>>>>
48414>>>            End
48414>>>>
48414>>>        Send Seq_Close_Channel iCh
48415>>>
48415>>>        // Wait a sec for Windows to finish writing the file:
48415>>>        Sleep 1
48416>>>
48416>>>        Function_Return (bOK = True)
48417>>>    End_Function
48418>>>
48418>>>    // Returns a handle to the SQL server associated with the passed driver ID.
48418>>>    // Pass e.g. the psServer property to determine the current connection server.
48418>>>    // Returns a handle to the database connection, or a zero (0) if it fails.
48418>>>    // This handle can be used to obtain attributes about the server, such as default
48418>>>    // column types.
48418>>>    Function SqlUtilDatabaseHandle String sDriverID String sServer Returns Handle
48420>>>        Handle hDatabase
48420>>>        Integer iDriver iServers iCount
48420>>>        String sValue
48420>>>
48420>>>        If (sServer = "") Begin
48422>>>            Function_Return 0
48423>>>        End
48423>>>>
48423>>>
48423>>>        Get DriverIndex sDriverID to iDriver
48424>>>        If (iDriver = 0) Begin
48426>>>            Function_Return 0
48427>>>        End
48427>>>>
48427>>>
48427>>>        Get_Attribute DF_DRIVER_NUMBER_SERVERS of iDriver to iServers
48430>>>        For iCount from 1 to iServers
48436>>>>
48436>>>            Get_Attribute DF_DRIVER_SERVER_NAME of iDriver iCount to sValue
48439>>>            If (Uppercase(sValue) contains Uppercase(sServer)) Begin
48441>>>                Get_Attribute DF_DATABASE_ID of iDriver iCount to hDatabase
48444>>>            End
48444>>>>
48444>>>        Loop
48445>>>>
48445>>>
48445>>>        Function_Return hDatabase
48446>>>    End_Function
48447>>>
48447>>>//    Function UtilIsFilelistEntryDriverBased Integer hTable String sDriverID Returns Boolean
48447>>>//        String sRootName
48447>>>//        Boolean bOK
48447>>>//
48447>>>//        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
48447>>>//        Move (sRootName contains sDriverID) to bOK
48447>>>//
48447>>>//        Function_Return bOK
48447>>>//    End_Function
48447>>>
48447>>>//    Function UtilFilelistAddDriverInfo Integer hTable Returns Boolean
48447>>>//        String sDriverID sRootName sDisplayName sSchema sVal
48447>>>//        Integer iDbType
48447>>>//        Boolean bOK
48447>>>//
48447>>>//        Get UtilIsFilelistEntryDriverBased to bOK
48447>>>//        If (bOK = True) Begin
48447>>>//            Function_Return False
48447>>>//        End
48447>>>//
48447>>>//        Get psDriverID to sDriverID
48447>>>//        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
48447>>>//        Move (sDriverID + ":" + sRootName)           to sRootName
48447>>>//        Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
48447>>>//
48447>>>//        Get psDriverID to sDriverID
48447>>>//        Get piDbType   to iDbType
48447>>>//        Get psSchema   to sSchema
48447>>>//        If (sSchema = "") Begin
48447>>>//            Get _SqlFindKeyWord CI_SQLDBO to sSchema
48447>>>//        End
48447>>>//
48447>>>//        Move (Uppercase(sDisplayName)) to sVal
48447>>>//        If (not(sVal contains (sSchema + "."))) Begin
48447>>>//            If (iDbType = EN_dbTypeDB2) Begin
48447>>>//                Move (Lowercase(sSchema) + "." + sDisplayName) to sDisplayName
48447>>>//            End
48447>>>//            Else Begin
48447>>>//                Move (sSchema + "." + sDisplayName) to sDisplayName
48447>>>//            End
48447>>>//        End
48447>>>//
48447>>>//        Set_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
48447>>>//        Set_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
48447>>>//
48447>>>//        Function_Return True
48447>>>//    End_Function
48447>>>
48447>>>    // Removes all driver identifications (e.g. "MSSQLDRV;MyTable" or "MyTable.MSSQLDRV"
48447>>>    // from the passed filelist.
48447>>>    // Returns the number of tables affected.
48447>>>    Function SqlUtilFilelistRemoveDriverInfo String sFilelist Returns Integer
48449>>>        String sCurrentFileList sRootName sDisplayName sLogicalName sVal
48449>>>        Integer iRetval
48449>>>        Handle hTable
48449>>>
48449>>>        // We first save the current filelist as the passed filelist name
48449>>>        // may come from another workspace, to restore it when we're ready.
48449>>>        Get_Attribute DF_FILELIST_NAME to sCurrentFileList
48452>>>        Set_Attribute DF_FILELIST_NAME to sFilelist
48455>>>        Move 0 to hTable
48456>>>        Move 0 to iRetval
48457>>>
48457>>>        Repeat
48457>>>>
48457>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
48460>>>            If (hTable <> 0) Begin
48462>>>                Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
48465>>>                Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
48468>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
48471>>>                Move (Uppercase(sRootName)) to sVal
48472>>>                If (sVal contains MSSQLDRV_ID or sVal contains DB2_DRV_ID or sVal contains ODBC_DRV_ID) Begin
48474>>>                    // Prefixes:
48474>>>                    Move (Replace((MSSQLDRV_ID + ":"), sRootName, "")) to sRootName
48475>>>                    Move (Replace((DB2_DRV_ID  + ":"), sRootName, "")) to sRootName
48476>>>                    Move (Replace((ODBC_DRV_ID + ":"), sRootName, "")) to sRootName
48477>>>                    // Suffixes:
48477>>>                    Move (Replace(("." + MSSQLDRV_ID), sRootName, "")) to sRootName
48478>>>                    Move (Replace(("." + DB2_DRV_ID),  sRootName, "")) to sRootName
48479>>>                    Move (Replace(("." + ODBC_DRV_ID), sRootName, "")) to sRootName
48480>>>
48480>>>                    // Change Filelist entry:
48480>>>                    Set_Attribute DF_FILE_ROOT_NAME of hTable          to sRootName
48483>>>
48483>>>                    Move (Lowercase(sDisplayName)) to sVal
48484>>>                    If (sVal contains "dbo.") Begin
48486>>>                        Move (Replace("dbo.", sDisplayName, ""))       to sDisplayName
48487>>>
48487>>>                        // Change Filelist entry:
48487>>>                        Set_Attribute DF_FILE_DISPLAY_NAME of hTable   to sDisplayName
48490>>>                    End
48490>>>>
48490>>>                    Increment iRetval
48491>>>                End
48491>>>>
48491>>>            End
48491>>>>
48491>>>        Until (hTable = 0)
48493>>>
48493>>>        Set_Attribute DF_FILELIST_NAME to sCurrentFileList
48496>>>
48496>>>        Function_Return iRetval
48497>>>    End_Function
48498>>>
48498>>>    // To open all Sql based tables in Filelist.cfg
48498>>>    Procedure SqlUtilOpenAllTables
48500>>>        Handle hTable
48500>>>        String sRoot sDriverID
48500>>>        Boolean bOK
48500>>>
48500>>>        Move 0 to hTable
48501>>>        Move "" to sDriverID
48502>>>        Get AutoConnectionIDLogin to bOK
48503>>>
48503>>>        Repeat
48503>>>>
48503>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
48506>>>            If (hTable > 0) Begin
48508>>>                Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
48511>>>                If (sDriverID = MSSQLDRV_ID or sDriverID = DB2_DRV_ID or sDriverID = ODBC_DRV_ID) Begin
48513>>>                    Get_Attribute DF_FILE_ROOT_NAME of hTable to sRoot
48516>>>                    If (Uppercase(sRoot) contains ".INT" or Uppercase(sRoot) contains MSSQLDRV_ID or Uppercase(sRoot) contains DB2_DRV_ID or Uppercase(sRoot) contains ODBC_DRV_ID) Begin
48518>>>                        Open hTable
48520>>>                    End
48520>>>>
48520>>>                End
48520>>>>
48520>>>            End
48520>>>>
48520>>>
48520>>>        Until (hTable = 0)
48522>>>    End_Procedure
48523>>>
48523>>>//    Function SqlUtilSchemaName Handle hTable Returns String
48523>>>//        String sRetval sDriverID
48523>>>//        String sTableName
48523>>>//        Integer iDbType iIndex
48523>>>//        Boolean bOK
48523>>>//
48523>>>//        Get psDriverID to sDriverID
48523>>>//        Get _SqlCheckCurrentDriver sDriverID to bOK
48523>>>//        If (hTable = 0 or bOK = False) Begin
48523>>>//            Function_Return ""
48523>>>//        End
48523>>>//
48523>>>//        Move False to Err
48523>>>//        Get UtilTableHandleToString hTable to sTableName
48523>>>//        Get piDbType to iDbType
48523>>>//        Get _SqlUtilEnumerateTableIndex sTableName sDriverID to iIndex
48523>>>//        If (iIndex = -1) Begin
48523>>>//            Function_Return ""
48523>>>//        End
48523>>>//
48523>>>//        Function_Return sRetval
48523>>>//    End_Function
48523>>>
48523>>>    // Checks if the passed Table;
48523>>>    // 1) Already has a Filelist entry that points to SQL and
48523>>>    // 2) It has an .int file.
48523>>>    // If both is True it should already be connected to SQL
48523>>>    Function SqlUtilTableIsAttached String sDriverID Handle hTable Returns Boolean
48525>>>        Boolean bExists bRootName
48525>>>        String sRootName sDataPath
48525>>>
48525>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
48528>>>        Move (sRootName contains sDriverID) to bRootName
48529>>>
48529>>>        Get psDataPathFirstPart to sDataPath
48530>>>        Get vFolderExists sDataPath to bExists
48531>>>        If (bExists = False) Begin
48533>>>            // If the path doesn't exist it cannot have an .int file and we're done, although it shouldn't happen.
48533>>>            Function_Return False
48534>>>        End
48534>>>>
48534>>>
48534>>>        Get vFolderFormat sDataPath to sDataPath
48535>>>        Get _TableNameOnly sRootName to sRootName
48536>>>        Get vFilePathExists (sDataPath + sRootName + ".int") to bExists
48537>>>
48537>>>        Function_Return (bRootName = True and bExists = True)
48538>>>    End_Function
48539>>>
48539>>>    Function SqlUtilTableIsViewType String sDriverID Handle hTable Returns Boolean
48541>>>        Boolean bViewTableType bOpen bOK
48541>>>        Integer iTableCount iNumTables
48541>>>        String sTableName sOwner sTableType sEnumTableName sEnumSchemaName
48541>>>        Handle hoCliHandler
48541>>>        tSQLConnection SQLConnection
48541>>>        tSQLConnection SQLConnection
48541>>>
48541>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
48544>>>        If (bOpen = False) Begin
48546>>>            Get AutoConnectionIDLogin to bOK
48547>>>            Open hTable
48549>>>        End
48549>>>>
48549>>>
48549>>>        Get pSQLConnection to SQLConnection
48550>>>        Get phoCLIHandler to hoCliHandler
48551>>>        Set psDriverID of hoCliHandler to sDriverID
48552>>>
48552>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sTableName
48555>>>        Get _TableNameOnly sTableName to sTableName
48556>>>        Get_Attribute DF_FILE_OWNER     of hTable to sOwner
48559>>>        Get EnumerateTables of hoCliHandler SQLConnection.sConnectionString to iNumTables
48560>>>
48560>>>        For iTableCount from 1 to iNumTables
48566>>>>
48566>>>            Get TableName  of hoCliHandler iTableCount to sEnumTableName
48567>>>            Get SchemaName of hoCliHandler iTableCount to sEnumSchemaName
48568>>>            If ((Uppercase(sEnumTableName)  = Uppercase(sTableName)) and (Uppercase(sEnumSchemaName) = Uppercase(sOwner))) Begin
48570>>>                Get TableType of hoCliHandler iTableCount to sTableType
48571>>>                Move iNumTables to iTableCount // We're done.
48572>>>            End
48572>>>>
48572>>>        Loop
48573>>>>
48573>>>
48573>>>        Move (sTableType = "VIEW") to bViewTableType
48574>>>        If (bOpen = False) Begin
48576>>>            Close hTable
48577>>>        End
48577>>>>
48577>>>
48577>>>        Function_Return bViewTableType
48578>>>    End_Function
48579>>>
48579>>>    // *** DbType conversion routines - Converts between string/integer and driver ID values ***
48579>>>    //
48579>>>    // SQL utility function that returns a database type (string) constant
48579>>>    // corresponding to the passed iDbType.
48579>>>    Function SqlUtilDbTypeToString Integer iDbType Returns String
48581>>>        String sRetval
48581>>>        Get SqlUtilDbTypeToString of (phoSQLConnectionIniFile(ghoSQLConnectionHandler)) iDbType to sRetval
48582>>>        Function_Return sRetval
48583>>>    End_Function
48584>>>
48584>>>    // SQL utility function that returns a database type constant (integer)
48584>>>    // corresponding to the passed sDbType string constant.
48584>>>    Function SqlUtilDbTypeToInteger String sDbType Returns Integer
48586>>>        Integer iRetval
48586>>>        Get SqlUtilDbTypeToInteger of (phoSQLConnectionIniFile(ghoSQLConnectionHandler)) sDbType to iRetval
48587>>>        Function_Return iRetval
48588>>>    End_Function
48589>>>
48589>>>    // Pass an integer DbType and function returns the database type integer as a string value.
48589>>>    // Used e.g. when reading a connection ini-file to display the database type in
48589>>>    // the SQL Connection program's grid.
48589>>>    Function SqlUtilDbTypeIntegerToStringConstant Integer iDbType Returns String
48591>>>        String sRetval
48591>>>        Get SqlUtilDbTypeIntegerToStringConstant of (phoSQLConnectionIniFile(ghoSQLConnectionHandler)) iDbType to sRetval
48592>>>        Function_Return sRetval
48593>>>    End_Function
48594>>>
48594>>>    // Pass a driver name as a string and the function will return
48594>>>    // a dbType as an integer. Obviously for the ODBC_DRV this doesn't
48594>>>    // quite work and always returns "MS SQL Server"
48594>>>    Function SqlUtilDbTypeFromDriver String sDriverID Returns Integer
48596>>>        Integer iRetval
48596>>>        Get SqlUtilDbTypeFromDriver of (phoSQLConnectionIniFile(ghoSQLConnectionHandler)) sDriverID to iRetval
48597>>>        Function_Return iRetval
48598>>>    End_Function
48599>>>
48599>>>    // Returns a temp table name that consists of the RootName, an underscore and as much of a GUID
48599>>>    // that "fits" in the max allowed length for table names.
48599>>>    // Max number of characters allowed for table names;
48599>>>    // IBM DB2      = 128
48599>>>    // MS-SQL       = 128
48599>>>    // Oracle       = 128 (Version 12.2 and later. 30 characters for earlier versions)
48599>>>    // MySQL        = 64
48599>>>    // PostgreSQL   = 64
48599>>>    Function SqlUtilGUIDTempTableName String sRootName Returns String
48601>>>        String sGUIDName
48601>>>        Integer iDbType iLength
48601>>>
48601>>>        Get piDbType to iDbType
48602>>>        Move (RandomHexUUID()) to sGUIDName
48603>>>        Move (sRootName + "_" + sGUIDName) to sGUIDName
48604>>>        Move (Length(sGUIDName)) to iLength
48605>>>
48605>>>        Case Begin
48605>>>            Case (iDbType = EN_DbTypeDB2)
48607>>>            If (iLength > 128) Begin
48609>>>                Move (Left(sGUIDName, 128)) to sGUIDName
48610>>>            End
48610>>>>
48610>>>            Case Break
48611>>>
48611>>>            Case (iDbType = EN_DbTypeMSSQL)
48614>>>            If (iLength > 128) Begin
48616>>>                Move (Left(sGUIDName, 128)) to sGUIDName
48617>>>            End
48617>>>>
48617>>>            Case Break
48618>>>
48618>>>            Case (iDbType = EN_DbTypeOracle) // Note: We assume an Oracle version of 12.2 or later.
48621>>>            If (iLength > 128) Begin
48623>>>                Move (Left(sGUIDName, 128)) to sGUIDName
48624>>>            End
48624>>>>
48624>>>            Case Break
48625>>>
48625>>>            Case (iDbType = EN_DbTypeMySQL)
48628>>>            If (iLength > 64) Begin
48630>>>                Move (Left(sGUIDName, 64)) to sGUIDName
48631>>>            End
48631>>>>
48631>>>            Case Break
48632>>>
48632>>>            Case (iDbType = EN_DbTypePostgre)
48635>>>            If (iLength > 64) Begin
48637>>>                Move (Left(sGUIDName, 64)) to sGUIDName
48638>>>            End
48638>>>>
48638>>>        Case End
48638>>>
48638>>>        Function_Return sGUIDName
48639>>>    End_Function
48640>>>
48640>>>    // Reads a resource that has been embedded by the compiler and writes it to disk.
48640>>>    // Pass the memory resource file reference and the filename to be created,
48640>>>    // including full path.
48640>>>    Procedure SqlUtilCreateFileFromMemory String sMemFileName String sFileName
48642>>>        String sText
48642>>>        Integer iCh iSize iArgSize
48642>>>
48642>>>        Move ("Resource:" + sMemFileName) to sMemFileName
48643>>>        Get Seq_Open_Input_Channel sMemFileName to iCh
48644>>>        Get_Channel_Size iCh to iSize
48645>>>        Read_Block channel iCh sText iSize
48647>>>        Send Seq_Close_Channel iCh
48648>>>
48648>>>        Get Seq_Open_Output_Channel sFileName to iCh
48649>>>            Write channel iCh sText
48651>>>        Send Seq_Close_Channel iCh
48652>>>
48652>>>        // Wait for file to be written to disk.
48652>>>        Sleep 2
48653>>>    End_Procedure
48654>>>
48654>>>    Function SqlUtilDefaultNullValue String sDriverID Integer iDbType Integer iDataType Returns String
48656>>>        String sNotNull sRetval sDefaultValue
48656>>>        Boolean bOK
48656>>>
48656>>>        Get IsSQLDriver sDriverID to bOK
48657>>>        If (bOK = False) Begin
48659>>>            Function_Return ""
48660>>>        End
48660>>>>
48660>>>
48660>>>        Get UtilDataTypeDefaultValue sDriverID iDbType iDataType to sDefaultValue
48661>>>        Get _SqlFindKeyWord CI_SQLNotNull to sNotNull
48662>>>
48662>>>        Case Begin
48662>>>            Case (iDbType = EN_dbTypeMSSQL)
48664>>>                Move ("DEFAULT" * String(sDefaultValue) * String(sNotNull)) to sRetval
48665>>>                Case Break
48666>>>            Case (iDbType = EN_dbTypeMySQL)
48669>>>                Move (String(sNotNull) * "DEFAULT" * String(sDefaultValue)) to sRetval
48670>>>                Case Break
48671>>>            Case (iDbType = EN_dbTypePostgre)
48674>>>                Move (String(sNotNull) * "DEFAULT" * String(sDefaultValue)) to sRetval
48675>>>                Case Break
48676>>>            Case (iDbType = EN_dbTypeDB2)
48679>>>                Move (String(sNotNull))                                     to sRetval
48680>>>                Case Break
48681>>>
48681>>>            // Seems like Oracle can't handle setting a new column to 'NOT NULL' if the table exists with data(!)
48681>>>            // ToDo: We need to look deeper into how Oracle handles NULL
48681>>>            Case (iDbType = EN_dbTypeOracle)
48684>>>                Move  ""                                                    to sRetval
48685>>>                Case Break
48686>>>
48686>>>            Case Else
48686>>>                Move  ""                                                    to sRetval
48687>>>        Case End
48687>>>
48687>>>        Function_Return sRetval
48688>>>    End_Function
48689>>>
48689>>>    Function SqlUtilUpdateIntFile Integer hTable Returns Boolean
48691>>>        String sOrgFormat sNewFormat sRootName sDatabaseName sPhysicalFileName sDriverID sDataPath
48691>>>        Boolean bOpened bOK bMertech
48691>>>
48691>>>        // For some reason this .int file update screws up of CodeMast & CodeType .int files
48691>>>        // which makes the program unable to run because they can't be opened.
48691>>>        // ToDo: This needs further investigation but for now we just skip CodeMast & CodeType .int files update...
48691>>>        // Also note that there is another helper function "UtilTableCreateCodeMastCodeTypeIntFiles" to create
48691>>>        // proper .int files for the two tables.
48691>>>        If (Uppercase(sDatabaseName) = "CODETYPE" or Uppercase(sDatabaseName) = "CODEMAST") Begin
48693>>>            Function_Return True
48694>>>        End
48694>>>>
48694>>>
48694>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
48697>>>        Get _TableNameOnly sRootName to sDatabaseName
48698>>>        Move CS_OEM_Txt  to sOrgFormat
48699>>>        Move CS_ANSI_Txt to sNewFormat
48700>>>        Get AutoConnectionIDLogin to bOK
48701>>>
48701>>>        // It seems this can be called to quickly; causing a 13001 error "Cannot open cache file for write"
48701>>>        Sleep 1
48702>>>
48702>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
48705>>>        If (bOpened = False) Begin
48707>>>            Open hTable
48709>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpened
48712>>>        End
48712>>>>
48712>>>        If (bOpened = False) Begin
48714>>>            Function_Return False
48715>>>        End
48715>>>>
48715>>>
48715>>>        Get psDriverID to sDriverID
48716>>>        Get IsMertechDriver sDriverID to bMertech
48717>>>        If (bMertech = True) Begin
48719>>>            Get psDataPathFirstPart to sDataPath
48720>>>            Get vFolderExists sDataPath to bOK
48721>>>            If (bOK = False) Begin
48723>>>                Error DFERR_PROGRAM "Function SqlUtilUpdateIntFile; psDataPath not found!"
48724>>>>
48724>>>                Function_Return False
48725>>>            End
48725>>>>
48725>>>            Get vFolderFormat sDataPath to sDataPath
48726>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
48729>>>            Get _TableNameOnly sRootName to sDatabaseName
48730>>>            Move sDatabaseName to sPhysicalFileName
48731>>>            Move (sPhysicalFileName + ".int") to sPhysicalFileName
48732>>>            Get _MertechSqlUtilCreateIntFile hTable sDatabaseName sDataPath sPhysicalFileName to bOK
48733>>>            Function_Return (bOK = True)
48734>>>        End
48734>>>>
48734>>>
48734>>>        Move False to Err
48735>>>        Get_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sOrgFormat
48738>>>        Move (Uppercase(sOrgFormat)) to sOrgFormat
48739>>>        // Lets swap the OEM/ANSI format, just to make a change in Structure_Start below (and back),
48739>>>        // to "touch" the table so the driver feels there has been a change and updates the .int file.
48739>>>        Move (If(sOrgFormat = CS_OEM_Txt, CS_ANSI_Txt, CS_OEM_Txt)) to sNewFormat
48740>>>
48740>>>        Move False to Err
48741>>>
48741>>>        If (hTable > 0) Begin
48743>>>            Structure_Start hTable
48744>>>                Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sNewFormat
48747>>>                Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sOrgFormat
48750>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
48752>>>        End
48752>>>>
48752>>>        Else Begin
48753>>>            Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sNewFormat
48756>>>            Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sOrgFormat
48759>>>        End
48759>>>>
48759>>>        Function_Return (Err = False)
48760>>>    End_Function
48761>>>
48761>>>    Function SqlProcedureArrayMertech String sStmt String sArgument Returns String[]
48763>>>        String[] sReturnArray
48764>>>        String sValue // sUserID sPassword
48764>>>        Handle hoSQLHandler hoSQLConnect hStmt
48764>>>        Integer iFetchResult iRetval
48764>>>        tSQLConnection SQLConnection
48764>>>        tSQLConnection SQLConnection
48764>>>
48764>>>        Get _MertechSQLManagerHandle to hoSQLHandler
48765>>>        If (hoSQLHandler <> 0) Begin
48767>>>            Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
48768>>>            Get SQLConnect of hoSQLHandler SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sUserID SQLConnection.sPassword to hoSQLConnect
48769>>>            If (hoSQLConnect <> 0) Begin
48771>>>                Get SQLOpen of hoSQLConnect to hStmt
48772>>>                If (hStmt <> 0) Begin
48774>>>                    Send SQLSetProcedureName of hStmt sStmt
48775>>>                    If (sArgument <> "") Begin
48777>>>                        Send SqlSetArgument  of hStmt 1 sArgument
48778>>>                    End
48778>>>>
48778>>>                    Send SQLCall of hStmt
48779>>>
48779>>>                    Get SqlReturnValue       of hStmt to iRetval
48780>>>                    If (iRetval = 0) Begin
48782>>>                        Repeat
48782>>>>
48782>>>                            Get SQLFetch of hStmt to iFetchResult
48783>>>                            If (iFetchResult <> 0) Begin
48785>>>                                Get SQLColumnValue of hStmt 1 to sValue
48786>>>                                Move (Trim(sValue)) to sReturnArray[SizeOfArray(sReturnArray)
48787>>>                            End
48787>>>>
48787>>>                        Until (iFetchResult = 0)
48789>>>                        Send SQLClose of hStmt
48790>>>                    End
48790>>>>
48790>>>                End
48790>>>>
48790>>>                Send SQLDisconnect of hoSQLConnect
48791>>>            End
48791>>>>
48791>>>        End
48791>>>>
48791>>>
48791>>>        Function_Return sReturnArray
48792>>>    End_Function
48793>>>
48793>>>    // * Dummy function for the Studio's Code Explorer *
48793>>>    Function SQL_ENUMERATION_FUNCTIONS Returns Boolean
48795>>>        Function_Return False
48796>>>    End_Function
48797>>>
48797>>>    // Enumerate SQL Servers.
48797>>>    // Pass a driver id. Returns a string array.
48797>>>    // The iDataSourceType (iDatSrcType) parameter is optional and is for the ODBC driver only.
48797>>>    // Note: Returns servers for MSSQLDRV; else data-sources on the machine.
48797>>>    Function SqlUtilEnumerateServers String sDriverID Integer iDatSrcType Returns String[]
48799>>>        String[] sReturnArray
48800>>>        Handle hoSQLHandler
48800>>>        String sServer
48800>>>        Integer iCount iNumItems iDataSourceType
48800>>>
48800>>>        If (num_arguments > 1) Begin
48802>>>            Move iDatSrcType to iDataSourceType
48803>>>        End
48803>>>>
48803>>>
48803>>>        Case Begin
48803>>>            Case (sDriverID = MSSQLDRV_ID)
48805>>>                Get phoMSSQLHandler to hoSQLHandler
48806>>>                Get EnumerateServers of hoSQLHandler to iNumItems
48807>>>                For iCount from 0 to (iNumItems - 1)
48813>>>>
48813>>>                    Get String_Value of hoSQLHandler iCount to sServer
48814>>>                    Move (Trim(sServer)) to sReturnArray[iCount]
48815>>>                Loop
48816>>>>
48816>>>                Case Break
48817>>>
48817>>>            Case (sDriverID = DB2_DRV_ID)
48820>>>                Get phoDB2SQLHandler to hoSQLHandler
48821>>>                Send SeedDataSources of hoSQLHandler
48822>>>                Move 0 to iCount
48823>>>                Repeat
48823>>>>
48823>>>                    Get DataSources of hoSQLHandler to sServer
48824>>>                    If (sServer <> "") Begin
48826>>>                        Move (Replace(",", sServer, "")) to sServer
48827>>>                        Move sServer to sReturnArray[iCount]
48828>>>                    End
48828>>>>
48828>>>                    Increment iCount
48829>>>                Until (sServer = "")
48831>>>                Case Break
48832>>>
48832>>>            Case (sDriverID = ODBC_DRV_ID)
48835>>>                Get phoODBCSQLHandler to hoSQLHandler
48836>>>                Set DataSourceType of hoSQLHandler to iDataSourceType
48837>>>                Move 0 to iCount
48838>>>                Repeat
48838>>>>
48838>>>                    Get DataSources of hoSQLHandler to sServer
48839>>>                    If (sServer <> "") Begin
48841>>>                        Move (Replace(",", sServer, ", ")) to sServer
48842>>>                        Move sServer to sReturnArray[iCount]
48843>>>                    End
48843>>>>
48843>>>                    Increment iCount
48844>>>                Until (sServer = "")
48846>>>                Case Break
48847>>>
48847>>>            Case (sDriverID = SQLFLEX)
48850>>>                Get _MertechEnumerateSQLFlexServers to sReturnArray
48851>>>                Case Break
48852>>>
48852>>>            Case (sDriverID = ORAFLEX)
48855>>>                Get _MertechEnumerateORAFLEXServers to sReturnArray
48856>>>                Case Break
48857>>>
48857>>>            // There appearantly is no way to enumerate servers for this backend.
48857>>>            Case (sDriverID = MDSPgSQL)
48860>>>                Move "localhost" to sReturnArray[0]
48861>>>                Case Break
48862>>>
48862>>>            // There appearantly is no way to enumerate servers for this backend.
48862>>>            Case (sDriverID = MDSMySQL)
48865>>>                Move "localhost" to sReturnArray[0]
48866>>>                Case Break
48867>>>
48867>>>            Case Else
48867>>>                Error DFERR_PROGRAM "Unsupported DriverID passed to SqlUtilEnumerateServers function"
48868>>>>
48868>>>        Case End
48868>>>
48868>>>        Function_Return sReturnArray
48869>>>    End_Function
48870>>>
48870>>>    // Returns all databases as a string array for the passed driver id.
48870>>>    Function SqlUtilEnumerateDatabases String sDriverID Returns String[]
48872>>>        String[] sReturnArray
48873>>>        String sServer sVal
48873>>>        tSQLIntTableInfo[] sReturnStructArray
48873>>>        tSQLIntTableInfo[] sReturnStructArray
48874>>>        tSQLConnection SQLConnection
48874>>>        tSQLConnection SQLConnection
48874>>>        Boolean bOK
48874>>>        Integer iCount iSize
48874>>>
48874>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
48875>>>        If (bOK = False) Begin
48877>>>            Function_Return sReturnArray
48878>>>        End
48878>>>>
48878>>>
48878>>>        Case Begin
48878>>>            Case (sDriverID = MSSQLDRV_ID)
48880>>>                Get _SqlDatabasesArrayMSSQL to sReturnArray
48881>>>                Case Break
48882>>>            Case (sDriverID = DB2_DRV_ID)
48885>>>                Get _SqlDatabasesArrayDB2 to sReturnArray
48886>>>                Case Break
48887>>>
48887>>>            // This is needed to be able to check if a database exists or not.
48887>>>            Case (sDriverID = ODBC_DRV_ID)
48890>>>                Get _SqlDatabasesArrayODBC to sReturnStructArray
48891>>>                If (SizeOfArray(sReturnStructArray)) Begin
48893>>>                    If (SizeOfArray(sReturnStructArray) = 1 and sReturnStructArray[0].sServerName = "") Begin
48895>>>                        // If a FILEDSN: (can only be one database name)
48895>>>                        Move sReturnStructArray[0].sDatabaseName to sReturnArray[0]
48896>>>                    End
48896>>>>
48896>>>                    Else Begin
48897>>>                        // Else the DSN's were read from the registry.
48897>>>                        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
48898>>>                        Move SQLConnection.sServer to sServer
48899>>>                        Move (SizeOfArray(sReturnStructArray)) to iSize
48900>>>                        Decrement iSize
48901>>>                        for iCount from 0 to iSize
48907>>>>
48907>>>                            Move (sReturnStructArray[iCount].sServerName) to sVal
48908>>>                            If (Uppercase(sServer) = Uppercase(sVal)) Begin
48910>>>                                Move sReturnStructArray[iCount].sDatabaseName to sReturnArray[0]
48911>>>                                Move iSize to iCount // We're done.
48912>>>                            End
48912>>>>
48912>>>                        Loop
48913>>>>
48913>>>                    End
48913>>>>
48913>>>                End
48913>>>>
48913>>>                Case Break
48914>>>
48914>>>            Case (sDriverID = SQLFLEX)
48917>>>                Get SqlProcedureArrayMertech "sp_databases" "" to sReturnArray
48918>>>                Case Break
48919>>>
48919>>>            Case (sDriverID = MDSPgSQL)
48922>>>                Get SqlEnumerateEsqlMertech "SELECT datname FROM pg_database" to sReturnArray
48923>>>                Case Break
48924>>>
48924>>>            Case (sDriverID = MDSMySQL)
48927>>>                Get SqlEnumerateEsqlMertech "show databases" to sReturnArray
48928>>>                Case Break
48929>>>
48929>>>            Case (sDriverID = ORAFLEX)
48932>>>                Get SqlEnumerateEsqlMertech "SELECT NAME FROM v$database" to sReturnArray
48933>>>                Case Break
48934>>>
48934>>>            Case Else
48934>>>//                Error DFERR_PROGRAM "Unsupported DriverID passed to SqlUtilEnumerateDatabases function"
48934>>>        Case End
48934>>>
48934>>>        Function_Return sReturnArray
48935>>>    End_Function
48936>>>
48936>>>    // Returns all table spaces as a string array for the passed driver id.
48936>>>    Function SqlUtilEnumerateTableSpaces String sDriverID Returns String[]
48938>>>        String[] sReturnArray
48939>>>        Boolean bOK
48939>>>
48939>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
48940>>>        If (bOK = False) Begin
48942>>>            Function_Return sReturnArray
48943>>>        End
48943>>>>
48943>>>
48943>>>        Case Begin
48943>>>            Case (sDriverID = DB2_DRV_ID)
48945>>>                Get SqlEnumerateEsqlDAW "select tablespace_name from dba_tablespaces" 1 to sReturnArray
48946>>>                Case Break
48947>>>
48947>>>            Case (sDriverID = MDSPgSQL)
48950>>>                Get SqlEnumerateEsqlMertech "SELECT spcname FROM pg_tablespace" 1 to sReturnArray
48951>>>                Case Break
48952>>>
48952>>>            Case (sDriverID = ORAFLEX)
48955>>>                Get SqlEnumerateEsqlMertech "SELECT TABLESPACE_NAME FROM USER_TABLESPACES" 1 to sReturnArray
48956>>>                Case Break
48957>>>
48957>>>            Case Else
48957>>>                Error DFERR_PROGRAM "Unsupported driver passed to SqlUtilEnumerateTableSpaces function."
48958>>>>
48958>>>                Case Break
48959>>>        Case End
48959>>>
48959>>>        Function_Return sReturnArray
48960>>>    End_Function
48961>>>
48961>>>    // Returns all schemas as a string array for the passed driver id.
48961>>>    Function SqlUtilEnumerateSchemas String sDriverID Returns String[]
48963>>>        String[] sReturnArray
48964>>>        Boolean bOK
48964>>>
48964>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
48965>>>        If (bOK = False) Begin
48967>>>            Function_Return sReturnArray
48968>>>        End
48968>>>>
48968>>>
48968>>>        Case Begin
48968>>>            Case (sDriverID = DB2_DRV_ID)
48970>>>                Get SqlEnumerateEsqlDAW "select schemaname from syscat.schemata" 1 to sReturnArray
48971>>>                Case Break
48972>>>
48972>>>            Case (sDriverID = MDSPgSQL)
48975>>>                Get SqlEnumerateEsqlMertech "select schema_name from information_schema.schemata" 1 to sReturnArray
48976>>>                Case Break
48977>>>
48977>>>            Case (sDriverID = ORAFLEX)
48980>>>                Get SqlEnumerateEsqlMertech "SELECT username from dba_users WHERE default_tablespace not in ('SYSTEM','SYSAUX')" 1 to sReturnArray
48981>>>                Case Break
48982>>>
48982>>>            Case Else
48982>>>                Error DFERR_PROGRAM "Unsupported driver passed to SqlUtilEnumerateSchemas function."
48983>>>>
48983>>>                Case Break
48984>>>        Case End
48984>>>
48984>>>        Function_Return sReturnArray
48985>>>    End_Function
48986>>>
48986>>>    // Returns a string array with all tables for the current database.
48986>>>    Function SqlUtilEnumerateTables String sDriverID String sDatabase String sSchema Returns String[]
48988>>>        String[] sReturnArray sArray
48990>>>        String sConnectionString sSelect
48990>>>        Integer iSize iCount iDbType
48990>>>        Boolean bOK
48990>>>
48990>>>        If (sDriverID = DATAFLEX_ID) Begin
48992>>>            Function_Return sArray
48993>>>        End
48993>>>>
48993>>>
48993>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
48994>>>        If (bOK = False) Begin
48996>>>            Function_Return sReturnArray
48997>>>        End
48997>>>>
48997>>>        If (sSchema = "") Begin
48999>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
49000>>>        End
49000>>>>
49000>>>
49000>>>        Get psConnectionString to sConnectionString
49001>>>
49001>>>        // We need to treat DAW's ODBC driver a bit different, as the output depends on
49001>>>        // the dbType.
49001>>>        Get piDbType to iDbType
49002>>>        If (sDriverID = ODBC_DRV_ID) Begin
49004>>>            If (iDbType = EN_DbTypeMySQL) Begin
49006>>>                Move MDSMySQL to sDriverID
49007>>>            End
49007>>>>
49007>>>            If (iDbType = EN_DbTypeMSSQL) Begin
49009>>>                Move MSSQLDRV_ID to sDriverID
49010>>>            End
49010>>>>
49010>>>            If (iDbType = EN_DbTypeDB2) Begin
49012>>>                Move DB2_DRV_ID to sDriverID
49013>>>            End
49013>>>>
49013>>>            If (iDbType = EN_DbTypePostgre) Begin
49015>>>                Move MDSPgSQL to sDriverID
49016>>>            End
49016>>>>
49016>>>        End
49016>>>>
49016>>>
49016>>>        Case Begin
49016>>>            Case (sDriverID = MSSQLDRV_ID)
49018>>>                Get _SqlTableArrayDAW to sReturnArray
49019>>>                Case Break
49020>>>
49020>>>            Case (sDriverID = DB2_DRV_ID)
49023>>>                Get _SqlTableArrayDAW to sReturnArray
49024>>>                Case Break
49025>>>
49025>>>            Case (sDriverID = ODBC_DRV_ID)
49028>>>                Get _SqlTableArrayDAW to sReturnArray
49029>>>                Case Break
49030>>>
49030>>>            Case (sDriverID = SQLFLEX)
49033>>>                Move ("SELECT TABLE_NAME FROM" * sDatabase + ".INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE != 'VIEW'") to sSelect
49034>>>                Get SqlEnumerateEsqlMertech sSelect to sReturnArray
49035>>>                Case Break
49036>>>
49036>>>            Case (sDriverID = MDSMySQL)
49039>>>                Move ("SELECT TABLE_NAME from INFORMATION_SCHEMA.TABLES where TABLE_SCHEMA = '" + sDatabase + "' and TABLE_TYPE = 'BASE TABLE' order by TABLE_NAME") to sSelect
49040>>>                Get SqlEnumerateEsqlMertech sSelect to sReturnArray
49041>>>                Case Break
49042>>>
49042>>>            Case (sDriverID = MDSPgSQL)
49045>>>                Move "select tablename, schemaname from pg_catalog.pg_tables order by tablename"  to sSelect
49046>>>                Get SqlEnumerateEsqlMertech sSelect "" to sReturnArray
49047>>>                Case Break
49048>>>
49048>>>            Case (sDriverID = ORAFLEX)
49051>>>                Move "SELECT table_name from user_tables" to sSelect
49052>>>                Get SqlEnumerateEsqlMertech sSelect to sArray
49053>>>                Move (SizeOfArray(sArray)) to iSize
49054>>>                Decrement iSize
49055>>>                For iCount from 0 to iSize
49061>>>>
49061>>>                    If (not(sArray[iCount] contains "$")) Begin
49063>>>                        Move sArray[iCount] to sReturnArray[SizeOfArray(sReturnArray)]
49064>>>                    End
49064>>>>
49064>>>                Loop
49065>>>>
49065>>>                Case Break
49066>>>
49066>>>            Case Else
49066>>>                Error DFERR_PROGRAM "Unsupported driver passed to SqlUtilEnumerateTables function."
49067>>>>
49067>>>                Case Break
49068>>>        Case End
49068>>>
49068>>>        Function_Return sReturnArray
49069>>>    End_Function
49070>>>
49070>>>    // Returns a string array with all table columns/fields for the passed table handle and driver id.
49070>>>    Function SqlUtilEnumerateColumns String sDriverID String sTableName Returns String[]
49072>>>        String[] sReturnArray
49073>>>        String sConnectionString sSelect sSchema
49073>>>        Boolean bOK
49073>>>        Integer iDbType
49073>>>
49073>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
49074>>>        If (bOK = False) Begin
49076>>>            Error DFERR_PROGRAM ("Unsupported driver. A list of table columns could not be retrieved for:" * sDriverID + ".")
49077>>>>
49077>>>            Function_Return sReturnArray
49078>>>        End
49078>>>>
49078>>>
49078>>>        Get psConnectionString to sConnectionString
49079>>>        Get psSchema to sSchema
49080>>>
49080>>>        // We need to treat DAW's ODBC driver a bit different, as the output depends on
49080>>>        // the dbType.
49080>>>        Get piDbType to iDbType
49081>>>
49081>>>        Case Begin
49081>>>            Case (sDriverID = ODBC_DRV_ID)
49083>>>                If (iDbType = EN_DbTypeMySQL) Begin
49085>>>                    Move ("SHOW COLUMNS FROM" * sTableName) to sSelect
49086>>>                End
49086>>>>
49086>>>                If (iDbType = EN_DbTypePostgre) Begin
49088>>>                    Move ("select column_name, data_type, character_maximum_length from INFORMATION_SCHEMA.COLUMNS where table_name = '" +sTableName + "'") to sSelect
49089>>>                End
49089>>>>
49089>>>                If (iDbType = EN_DbTypeMSSQL) Begin
49091>>>                    Move ("select name from sys.columns where [object_id] = object_id('dbo." + sTableName + "')") to sSelect
49092>>>                End
49092>>>>
49092>>>
49092>>>                Get SqlEnumerateEsqlDAW sSelect 1 to sReturnArray
49093>>>                Case Break
49094>>>
49094>>>            Case (sDriverID = MSSQLDRV_ID)
49097>>>                Move ("select name from sys.columns where [object_id] = object_id('dbo." + sTableName + "')") to sSelect
49098>>>                Get SqlEnumerateEsqlDAW sSelect 1 to sReturnArray
49099>>>                Case Break
49100>>>
49100>>>            Case (sDriverID = DB2_DRV_ID)
49103>>>                Move ("SELECT colname from syscat.columns WHERE tabschema = '" + sSchema + "'" * "AND tabname = '" + sTableName + "'") to sSelect
49104>>>                Get SqlEnumerateEsqlDAW sSelect 1 to sReturnArray
49105>>>                Case Break
49106>>>
49106>>>            Case (sDriverID = SQLFLEX)
49109>>>                Move ("select name from sys.columns where [object_id] = object_id('dbo." + sTableName + "')") to sSelect
49110>>>                Get SqlEnumerateEsqlMertech sSelect 1 to sReturnArray
49111>>>                Case Break
49112>>>
49112>>>            Case (sDriverID = MDSMySQL)
49115>>>                Move ("SHOW COLUMNS FROM" * sTableName) to sSelect
49116>>>                Get SqlEnumerateEsqlMertech sSelect 1 to sReturnArray
49117>>>                Case Break
49118>>>
49118>>>            Case (sDriverID = MDSPgSQL)
49121>>>                Move ("select column_name, data_type, character_maximum_length from INFORMATION_SCHEMA.COLUMNS where table_name = '" +sTableName + "'") to sSelect
49122>>>                Get SqlEnumerateEsqlMertech sSelect 1 to sReturnArray
49123>>>                Case Break
49124>>>
49124>>>            Case (sDriverID = ORAFLEX)
49127>>>                Move ("SELECT column_name from user_tab_cols WHERE table_name = '" + sTableName + "'") to sSelect
49128>>>                Get SqlEnumerateEsqlMertech sSelect 1 to sReturnArray
49129>>>                Case Break
49130>>>
49130>>>            Case Else
49130>>>                Error DFERR_PROGRAM "Unsupported driver passed to SqlUtilEnumerateColumns function."
49131>>>>
49131>>>                Case Break
49132>>>        Case End
49132>>>
49132>>>        Function_Return sReturnArray
49133>>>    End_Function
49134>>>
49134>>>
49134>>>    // Returns a string array with all table indexes for the passed table handle and driver id.
49134>>>    Function SqlUtilEnumerateIndexes String sTableName String sDriverID Returns String[]
49136>>>        String[] sReturnArray sReturnArray2
49138>>>        String sConnectionString sSelect sSchema
49138>>>        Boolean bOK
49138>>>        Integer iCount iSize
49138>>>
49138>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
49139>>>        If (bOK = False) Begin
49141>>>            Error DFERR_PROGRAM ("Unsupported driver. A list of table columns could not be retrieved for:" * sDriverID + ".")
49142>>>>
49142>>>            Function_Return sReturnArray
49143>>>        End
49143>>>>
49143>>>
49143>>>        Get psConnectionString to sConnectionString
49144>>>        Get psSchema to sSchema
49145>>>
49145>>>        Case Begin
49145>>>            Case (sDriverID = MSSQLDRV_ID)
49147>>>                Move ("select * from sys.indexes where object_id = (select object_id from sys.objects where name = '" + sTableName + "')") to sSelect
49148>>>                Get SqlEnumerateEsqlDAW sSelect 2 to sReturnArray
49149>>>                Case Break
49150>>>
49150>>>            Case (sDriverID = DB2_DRV_ID)
49153>>>                Error "Not implemented yet! The select statement has not been finalized."
49154>>>>
49154>>>//                Move () to sSelect
49154>>>//                Get SqlEnumerateEsqlDAW sSelect 2 to sReturnArray
49154>>>                Case Break
49155>>>
49155>>>            Case (sDriverID = SQLFLEX)
49158>>>                Error "Not implemented yet! The select statement has not been finalized."
49159>>>>
49159>>>//                Move () to sSelect
49159>>>//                Get SqlEnumerateEsqlMertech sSelect 2 to sReturnArray
49159>>>                Case Break
49160>>>
49160>>>            Case (sDriverID = MDSMySQL)
49163>>>                Error "Not implemented yet! The select statement has not been finalized."
49164>>>>
49164>>>//                Move () to sSelect
49164>>>//                Get SqlEnumerateEsqlMertech sSelect 2 to sReturnArray
49164>>>                Case Break
49165>>>
49165>>>            Case (sDriverID = MDSPgSQL)
49168>>>                Error "Not implemented yet! The select statement has not been finalized."
49169>>>>
49169>>>//                Move () to sSelect
49169>>>//                Get SqlEnumerateEsqlMertech sSelect 2 to sReturnArray
49169>>>                Case Break
49170>>>
49170>>>            Case (sDriverID = ORAFLEX)
49173>>>                Error "Not implemented yet! The select statement has not been finalized."
49174>>>>
49174>>>//                Move () to sSelect
49174>>>//                Get SqlEnumerateEsqlMertech sSelect to sReturnArray
49174>>>                Case Break
49175>>>
49175>>>            Case Else
49175>>>                Error DFERR_PROGRAM "Unsupported driver passed to SqlUtilEnumerateIndexes function."
49176>>>>
49176>>>                Case Break
49177>>>        Case End
49177>>>
49177>>>        Move (SizeOfArray(sReturnArray)) to iSize
49178>>>        Decrement iSize
49179>>>        For iCount from 0 to iSize
49185>>>>
49185>>>            If (Trim(sReturnArray[iCount]) <> "") Begin
49187>>>                Move sReturnArray[iCount] to sReturnArray2[SizeOfArray(sReturnArray2)]
49188>>>            End
49188>>>>
49188>>>        Loop
49189>>>>
49189>>>
49189>>>        Function_Return sReturnArray2
49190>>>    End_Function
49191>>>
49191>>>    // Returns a string array with all table names the passed table handle has relation ships with.
49191>>>    // The format of the array is "TableName.FieldName"
49191>>>    Function SqlUtilEnumerateRelations String sTableName String sDriverID Returns tSQLRelation[]
49193>>>        String[] sFileNameArray sFieldNameArray
49195>>>        tSQLRelation[] sRelationsArray
49195>>>        tSQLRelation[] sRelationsArray
49196>>>        String sConnectionString sSelect sSchema sFileName sFieldName
49196>>>        Boolean bOK
49196>>>        Integer iCount iSize iLength
49196>>>
49196>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
49197>>>        If (bOK = False) Begin
49199>>>            Error DFERR_PROGRAM ("Unsupported driver. A list of table columns could not be retrieved for:" * sDriverID + ".")
49200>>>>
49200>>>            Function_Return sRelationsArray
49201>>>        End
49201>>>>
49201>>>
49201>>>        Get psConnectionString to sConnectionString
49202>>>        Get psSchema to sSchema
49203>>>
49203>>>        Case Begin
49203>>>            Case (sDriverID = MSSQLDRV_ID)
49205>>>                Move ("SELECT object_name(parent_object_id), object_name(referenced_object_id), name from sys.foreign_keys WHERE parent_object_id = object_id( '" + sTableName + "')") to sSelect
49206>>>                Get SqlEnumerateEsqlDAW sSelect 2 to sFileNameArray
49207>>>                Get SqlEnumerateEsqlDAW sSelect 3 to sFieldNameArray
49208>>>                Case Break
49209>>>
49209>>>            Case (sDriverID = DB2_DRV_ID)
49212>>>                Error "Not implemented yet! The select statement has not been finalized."
49213>>>>
49213>>>//                Move () to sSelect
49213>>>//                Get SqlEnumerateEsqlDAW sSelect 2 to sReturnArray
49213>>>//                Get SqlEnumerateEsqlDAW sSelect 3 to sFieldNameArray
49213>>>                Case Break
49214>>>
49214>>>            Case (sDriverID = SQLFLEX)
49217>>>                Error "Not implemented yet! The select statement has not been finalized."
49218>>>>
49218>>>//                Move () to sSelect
49218>>>//                Get SqlEnumerateEsqlMertech sSelect 2 to sReturnArray
49218>>>//                Get SqlEnumerateEsqlDAW sSelect 3 to sFieldNameArray
49218>>>                Case Break
49219>>>
49219>>>            Case (sDriverID = MDSMySQL)
49222>>>                Error "Not implemented yet! The select statement has not been finalized."
49223>>>>
49223>>>//                Move () to sSelect
49223>>>//                Get SqlEnumerateEsqlMertech sSelect 2 to sReturnArray
49223>>>//                Get SqlEnumerateEsqlDAW sSelect 3 to sFieldNameArray
49223>>>                Case Break
49224>>>
49224>>>            Case (sDriverID = MDSPgSQL)
49227>>>                Error "Not implemented yet! The select statement has not been finalized."
49228>>>>
49228>>>//                Move () to sSelect
49228>>>//                Get SqlEnumerateEsqlMertech sSelect 2 to sReturnArray
49228>>>//                Get SqlEnumerateEsqlDAW sSelect 3 to sFieldNameArray
49228>>>                Case Break
49229>>>
49229>>>            Case (sDriverID = ORAFLEX)
49232>>>                Error "Not implemented yet! The select statement has not been finalized."
49233>>>>
49233>>>//                Move () to sSelect
49233>>>//                Get SqlEnumerateEsqlMertech sSelect to sReturnArray
49233>>>//                Get SqlEnumerateEsqlDAW sSelect 3 to sFieldNameArray
49233>>>                Case Break
49234>>>
49234>>>            Case Else
49234>>>                Error DFERR_PROGRAM "Unsupported driver passed to the SqlUtilEnumerateRelations function."
49235>>>>
49235>>>                Case Break
49236>>>        Case End
49236>>>
49236>>>        Move (Length(sTableName)) to iLength
49237>>>        Move (iLength + 4)        to iLength // The related to field key has the format "FK_TableName + FieldName"
49238>>>        Move (SizeOfArray(sFileNameArray)) to iSize
49239>>>        Decrement iSize
49240>>>        For iCount from 0 to iSize
49246>>>>
49246>>>            If (Trim(sFileNameArray[iCount]) <> "") Begin
49248>>>                Move sFileNameArray[iCount]         to sFileName
49249>>>                Move sFieldNameArray[iCount]        to sFieldName
49250>>>                Move (Mid(sFieldName, 99, iLength)) to sFieldName
49251>>>                Move sFileName  to sRelationsArray[iCount].sFileName
49252>>>                Move sFieldName to sRelationsArray[iCount].sFieldName
49253>>>            End
49253>>>>
49253>>>        Loop
49254>>>>
49254>>>
49254>>>        Function_Return sRelationsArray
49255>>>    End_Function
49256>>>
49256>>>    Function SqlUtilEnumerateLoggedInUsers String sDriverID String sDatabase Returns tSQLLoggedInUser[]
49258>>>        tSQLLoggedInUser[] SQLLoggedInUser
49258>>>        tSQLLoggedInUser[] SQLLoggedInUser
49259>>>        String[] sUsers sPrograms
49261>>>        String sSelect
49261>>>        Integer iSize iCount
49261>>>
49261>>>        Case Begin
49261>>>            Case (sDriverID = MSSQLDRV_ID)
49263>>>                Move ("SELECT RTRIM(SP.nt_username) AS Inlog, RTRIM(SP.program_name) as Programma from master.dbo.sysprocesses SP INNER JOIN master.dbo.sysdatabases SD ON SP.dbid = SD.dbid WHERE (SP.nt_username <> '') and (SP.nt_username <> 'SYSTEM') and (SD.name = '" ;                + sDatabase + "') ORDER by Inlog") to sSelect
49264>>>                Get SqlEnumerateEsqlDAW sSelect 1 to sUsers
49265>>>                Get SqlEnumerateEsqlDAW sSelect 2 to sPrograms
49266>>>                Case Break
49267>>>            Case (sDriverID = SQLFLEX)
49270>>>                Move ("SELECT RTRIM(SP.nt_username) AS Inlog, RTRIM(SP.program_name) as Programma from master.dbo.sysprocesses SP INNER JOIN master.dbo.sysdatabases SD ON SP.dbid = SD.dbid WHERE (SP.nt_username <> '') and (SP.nt_username <> 'SYSTEM') and (SD.name = '" ;                + sDatabase + "') ORDER by Inlog") to sSelect
49271>>>                Get SqlEnumerateEsqlMertech sSelect 1 to sUsers
49272>>>                Get SqlEnumerateEsqlMertech sSelect 2 to sPrograms
49273>>>                Case Break
49274>>>            Case Else
49274>>>                Error DFERR_PROGRAM ("Not implemented yet for this driver (" + sDriverID + ")")
49275>>>>
49275>>>        Case End
49275>>>
49275>>>        Move (SizeOfArray(sUsers)) to iSize
49276>>>        Decrement iSize
49277>>>        For iCount from 0 to iSize
49283>>>>
49283>>>            Move sUsers[iCount]    to SQLLoggedInUser[iCount].sUser
49284>>>            Move sPrograms[iCount] to SQLLoggedInUser[iCount].sProgram
49285>>>        Loop
49286>>>>
49286>>>
49286>>>        Function_Return SQLLoggedInUser
49287>>>    End_Function
49288>>>
49288>>>    // Returns an array with all ".int" files for the passed sDataPath, _except_ for the driver .int files;
49288>>>    // "MSSQLDRV.int", "DB2_DRV.int" & "ODBC_DRV.int".
49288>>>    Function SqlUtilEnumerateIntFiles String sDataPath Returns String[]
49290>>>        String[] sFilesData
49291>>>        Boolean bExists
49291>>>        Integer iCh
49291>>>        String sFileName sExt
49291>>>
49291>>>        Get vFolderExists sDataPath to bExists
49292>>>        If (bExists = True) Begin
49294>>>            Move (Utf8ToAnsi(Trim(sDataPath))) to sDataPath
49295>>>            Move ("dir:" + sDataPath)      to sDataPath
49296>>>            Get Seq_New_Channel to iCh  // get free channel for input
49297>>>            Direct_Input channel iCh sDataPath
49299>>>                Repeat
49299>>>>
49299>>>                    Readln channel iCh sFileName
49301>>>                    Get ParseFileExtension sFileName to sExt
49302>>>                    If (Uppercase(sExt) = "INT") Begin
49304>>>                        If (not(Uppercase(sFileName) contains "MSSQLDRV" and Uppercase(sFileName) contains "DB2_DRV" and Uppercase(sFileName) contains "ODBC_DRV")) Begin
49306>>>                            Move sFileName to sFilesData[SizeOfArray(sFilesData)]
49307>>>                        End
49307>>>>
49307>>>                    End
49307>>>>
49307>>>                Until (SeqEof = True)
49309>>>            Close_Input channel iCh
49311>>>            Send Seq_Release_Channel iCh
49312>>>        End
49312>>>>
49312>>>        Function_Return sFilesData
49313>>>    End_Function
49314>>>
49314>>>    // Only done for MSSQLDRV_ID so far...
49314>>>    Function SqlEnumerateDatabaseCollations String sDriverID Returns String[]
49316>>>        Boolean bMertechDriver
49316>>>        String sSQL sConnectionID sConnectionString sSelect sName sPre
49316>>>        String sDescription sFrom sSys sValue sPrevious
49316>>>        Handle hStmt hoSQLManager hoSQLConnect
49316>>>        Integer iFetchResult iRows iColumn iPos
49316>>>        tSQLConnection SQLConnection
49316>>>        tSQLConnection SQLConnection
49316>>>        String[] asCollations
49317>>>        
49317>>>        If (sDriverID = "") Begin
49319>>>            Error DFERR_PROGRAM "The database driver ID was not passed as a parameter to the 'SqlDatabaseCollationChange' function"
49320>>>>
49320>>>            Function_Return asCollations
49321>>>        End
49321>>>>
49321>>>
49321>>>        // Only done for MSSQLDRV_ID so far...
49321>>>        If (sDriverID <> MSSQLDRV_ID) Begin
49323>>>            Function_Return asCollations
49324>>>        End                 
49324>>>>
49324>>>
49324>>>        Get IsMertechDriver sDriverID to bMertechDriver
49325>>>        If (bMertechDriver = False) Begin
49327>>>            Get phoSQLManager to hoSQLManager
49328>>>        End
49328>>>>
49328>>>        Else Begin
49329>>>            Get _MertechSQLManagerHandle to hoSQLManager
49330>>>        End
49330>>>>
49330>>>
49330>>>        Get psConnectionID     to sConnectionID
49331>>>        Get psConnectionString to sConnectionString
49332>>>        Move 0 to LastErr
49333>>>
49333>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
49334>>>        Get SqlConnect of hoSQLManager sDriverID sConnectionString to hoSQLConnect
49335>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
49336>>>        If (LastErr = CLIERR_LOGIN_UNSUCCESSFUL) Begin
49338>>>            Error DFERR_PROGRAM ("Login failed to the database server. The following connect string was used:\n" + sConnectionString)
49339>>>>
49339>>>            Function_Return asCollations
49340>>>        End
49340>>>>
49340>>>
49340>>>        Get SqlOpen of hoSQLConnect to hStmt
49341>>>
49341>>>        If (hStmt = 0) Begin
49343>>>            Send SqlDisconnect of hoSQLManager
49344>>>            Error DFERR_PROGRAM CS_DUF_ConnectError
49345>>>>
49345>>>            Function_Return asCollations
49346>>>        End
49346>>>>
49346>>>
49346>>>        Get _SqlFindKeyWord CI_SQLSelect      to sSelect
49347>>>        Get _SqlFindKeyWord CI_SQLName        to sName
49348>>>        Get _SqlFindKeyWord CI_SQLDescription to sDescription
49349>>>        Get _SqlFindKeyWord CI_SQLFrom        to sFrom
49350>>>        Get _SqlFindKeyWord CI_SQLSys         to sSys
49351>>>
49351>>>        // MS-SQL Syntax:  
49351>>>        // SELECT name, description
49351>>>        //   from sys.fn_helpcollations();
49351>>>        Move (sSelect  * String(sName) * String(",") * String(sDescription) * String(sFrom) * String(sSys) * String(".fn_helpcollations();")) to sSQL
49352>>>
49352>>>        Move 1 to iColumn
49353>>>        Send SqlExecDirect of hStmt sSQL
49354>>>        Get SqlStmtAttribute of hStmt SqlSTMTATTRIB_ROWCOUNT to iRows
49355>>>        Repeat
49355>>>>
49355>>>            Get SQLFetch of hStmt to iFetchResult
49356>>>            If (iFetchResult <> 0) Begin
49358>>>                Get SQLColumnValue of hStmt iColumn to sValue 
49359>>>                If (sValue <> sPrevious) Begin         
49361>>>                    // We need to skip all collations starting with "SQL" because they
49361>>>                    // are obsolete and for pre-SQL Server 2000.
49361>>>                    Move (Pos("SQL", Uppercase(sValue))) to iPos
49362>>>                    If (iPos <> 1) Begin
49364>>>                        Move (Trim(sValue)) to asCollations[SizeOfArray(asCollations)
49365>>>                    End
49365>>>>
49365>>>                End
49365>>>>
49365>>>                Move sValue to sPrevious
49366>>>            End
49366>>>>
49366>>>        Until (iFetchResult = 0)
49368>>>        Send SQLClose of hStmt
49369>>>        Send SQLDisconnect of hoSQLConnect
49370>>>
49370>>>        Function_Return asCollations
49371>>>    End_Function
49372>>>
49372>>>    // To enumerate SQL database resources with ESQL and return the result as a string array,
49372>>>    // for DAW drivers.
49372>>>    // Returns: A string array.
49372>>>    Function SqlEnumerateEsqlDAW String sStmt Integer iColumn Returns String[]
49374>>>        String[] sReturnArray
49375>>>        String sValue sPrevious
49375>>>        Handle hoSQLHandler hoSQLConnect hstmt
49375>>>        Integer iFetchResult iRows
49375>>>        tSQLConnection SQLConnection
49375>>>        tSQLConnection SQLConnection
49375>>>
49375>>>        Get phoSQLManager to hoSQLHandler
49376>>>
49376>>>        If (hoSQLHandler <> 0) Begin
49378>>>            Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
49379>>>            Get SQLConnect of hoSQLHandler SQLConnection.sDriverID SQLConnection.sConnectionString to hoSQLConnect
49380>>>
49380>>>            If (hoSQLConnect <> 0) Begin
49382>>>                Get SQLOpen of hoSQLConnect to hstmt
49383>>>                If (hstmt <> 0) Begin
49385>>>                    Send SqlExecDirect of hstmt sStmt
49386>>>                    Get SqlStmtAttribute of hstmt SqlSTMTATTRIB_ROWCOUNT to iRows
49387>>>                    Repeat
49387>>>>
49387>>>                        Get SQLFetch of hstmt to iFetchResult
49388>>>                        If (iFetchResult <> 0) Begin
49390>>>                            Get SQLColumnValue of hstmt iColumn to sValue
49391>>>                            If (sValue <> sPrevious) Begin
49393>>>                                Move (Trim(sValue)) to sReturnArray[SizeOfArray(sReturnArray)
49394>>>                            End
49394>>>>
49394>>>                            Move sValue to sPrevious
49395>>>                        End
49395>>>>
49395>>>                    Until (iFetchResult = 0)
49397>>>                    Send SQLClose of hstmt
49398>>>                End
49398>>>>
49398>>>                Send SQLDisconnect of hoSQLConnect
49399>>>            End
49399>>>>
49399>>>        End
49399>>>>
49399>>>
49399>>>        Function_Return sReturnArray
49400>>>    End_Function
49401>>>
49401>>>    // To enumerate SQL database resources with ESQL and return the result as a string array,
49401>>>    // for Mertech drivers.
49401>>>    // Returns: A string array.
49401>>>    Function SqlEnumerateEsqlMertech String sStmt Returns String[]
49403>>>        String[] sReturnArray
49404>>>        String sValue
49404>>>        Handle hoSQLHandler hoSQLConnect hStmt
49404>>>        Integer iFetchResult iRows
49404>>>        tSQLConnection SQLConnection
49404>>>        tSQLConnection SQLConnection
49404>>>
49404>>>        Get _MertechSQLManagerHandle to hoSQLHandler
49405>>>
49405>>>        If (hoSQLHandler <> 0) Begin
49407>>>            Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
49408>>>            Get SQLConnect of hoSQLHandler SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sUserID SQLConnection.sPassword to hoSQLConnect
49409>>>
49409>>>            If (hoSQLConnect <> 0) Begin
49411>>>                Get SQLOpen of hoSQLConnect to hStmt
49412>>>                If (hStmt <> 0) Begin
49414>>>                    Send SqlExecDirect of hStmt sStmt
49415>>>                    Get SqlStmtAttribute of hStmt SqlSTMTATTRIB_ROWCOUNT to iRows
49416>>>                    Repeat
49416>>>>
49416>>>                        Get SQLFetch of hStmt to iFetchResult
49417>>>                        If (iFetchResult <> 0) Begin
49419>>>                            Get SQLColumnValue of hStmt 1 to sValue
49420>>>                            Move (Trim(sValue)) to sReturnArray[SizeOfArray(sReturnArray)
49421>>>                        End
49421>>>>
49421>>>                    Until (iFetchResult = 0)
49423>>>                    Send SQLClose of hStmt
49424>>>                End
49424>>>>
49424>>>                Send SQLDisconnect of hoSQLConnect
49425>>>            End
49425>>>>
49425>>>        End
49425>>>>
49425>>>
49425>>>        Function_Return sReturnArray
49426>>>    End_Function
49427>>>
49427>>>    // * Dummy function for the Studio's Code Explorer *
49427>>>    Function PRIVATE_SQL_SUB_FUNCTIONS Returns Boolean
49429>>>        Function_Return False
49430>>>    End_Function
49431>>>
49431>>>    // Returns the index for the passed sTableName
49431>>>    // Returns >= 0 if successful. It is e.g. needed to get the SchemaName for a table.
49431>>>    Function _SqlUtilEnumerateTableIndex String sTableName String sDriverID Returns Integer
49433>>>        Integer iIndex iSize iCount
49433>>>        String[] sTablesArray
49434>>>        String sDatabase sSchema sVal sConnectionString
49434>>>
49434>>>        Move -1 to iIndex
49435>>>        Get psConnectionString to sConnectionString
49436>>>        Get psDatabase to sDatabase
49437>>>        Get psSchema   to sSchema
49438>>>        Get SqlUtilEnumerateTables sDriverID sDatabase sSchema to sTablesArray
49439>>>        Move (SizeOfArray(sTablesArray)) to iSize
49440>>>        Decrement iSize
49441>>>        For iCount from 0 to iSize
49447>>>>
49447>>>            Move sTablesArray[iCount] to sVal
49448>>>            If (Uppercase(sVal) = Uppercase(sTableName)) Begin
49450>>>                Move iCount to iIndex // We found it!
49451>>>                Move iSize to iCount  // End the loop
49452>>>            End
49452>>>>
49452>>>        Loop
49453>>>>
49453>>>
49453>>>        Function_Return iIndex
49454>>>    End_Function
49455>>>
49455>>>    // Helper function that builds a string like;
49455>>>    // "SELECT name from [Master].[sys].[databases] where name"
49455>>>    Function _SqlSelectFromWhereName Returns String
49457>>>        String sRetval sSelect sName sFrom sMaster sSys sDatabases sWhere sDBO
49457>>>
49457>>>        Get _SqlFindKeyWord CI_SQLSelect       to sSelect
49458>>>        Get _SqlFindKeyWord CI_SQLName         to sName
49459>>>        Get _SqlFindKeyWord CI_SQLDBO          to sDBO
49460>>>        Get _SqlFindKeyWord CI_SQLFrom         to sFrom
49461>>>        Get _SqlFindKeyWord CI_SQLMaster       to sMaster
49462>>>        Get _SqlFindKeyWord CI_SQLSys          to sSys
49463>>>        Get _SqlFindKeyWord CI_SQLDatabases    to sDatabases
49464>>>        Get _SqlFindKeyWord CI_SQLWhere        to sWhere
49465>>>        Move (sSelect * sName * sFrom * "[" + sMaster + "].[" + sDBO + "].[" + sSys + sDatabases + "]" * sWhere * sName) to sRetval
49466>>>        Function_Return sRetval
49467>>>    End_Function
49468>>>
49468>>>    // Helper function to create a SQL statement like;
49468>>>    // "SELECT * FROM SYS.INDEXES WHERE NAME = MyIndexName AND OBJECT_ID = OBJECT_ID([MySchmaName].[MyTableName])"
49468>>>    // Used for checking if an index exists.
49468>>>    Function _SqlQueryIfIndexExists String sSchemaName String sTableName String sIndexName Returns String
49470>>>        String sRetval sSelect sFrom sSysIndexes sWhere sObjectID sAnd sName
49470>>>
49470>>>        Get _SqlFindKeyWord CI_SQLSelect to sSelect
49471>>>        Get _SqlFindKeyWord CI_SQLFrom to sFrom
49472>>>        Get _SqlFindKeyWord CI_SQLSysIndexes to sSysIndexes
49473>>>        Get _SqlFindKeyWord CI_SQLWhere to sWhere
49474>>>        Get _SqlFindKeyWord CI_SQLObjectID to sObjectID
49475>>>        Get _SqlFindKeyWord CI_SQLAND to sAnd
49476>>>        Get _SqlFindKeyWord CI_SQLName to sName
49477>>>
49477>>>        Move (sSelect * String("*") * sFrom * sSysIndexes * sWhere * sName * "=" * sIndexName * sAnd * sObjectID * "=([" + sSchemaName + "].[" + sTableName + "])") to sRetval
49478>>>
49478>>>        Function_Return sRetval
49479>>>    End_Function
49480>>>
49480>>>    // Formats a columns iLenght & iDecimal parameters as SQL expects them in a string.
49480>>>    // E.g. (4,2), where 4 is the iLength and 2 the iDecimals param.
49480>>>    Function _SqlFormatLengthAndDecimalAsString Integer iLength Integer iDecimals Returns String
49482>>>        String sRetval
49482>>>        If (iLength <> 0) Begin
49484>>>            Move ("(" + String(iLength)) to sRetval
49485>>>            If (iDecimals <> 0) Begin
49487>>>                Move (sRetval + "," + String(iDecimals)) to sRetval
49488>>>            End
49488>>>>
49488>>>            Move (sRetval + ")") to sRetval
49489>>>        End
49489>>>>
49489>>>        Function_Return sRetval
49490>>>    End_Function
49491>>>
49491>>>    Procedure _SqlColumnInfo Handle hoStmt
49493>>>        Integer i iCols iItem
49493>>>        tSqlColumnNew[] aQueryColumns
49493>>>        tSqlColumnNew[] aQueryColumns
49494>>>
49494>>>        Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_COLUMNCOUNT to iCols
49495>>>        For i from 1 to iCols
49501>>>>
49501>>>            Move (SizeOfArray(aQueryColumns)) to iItem
49502>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_BASECOLUMNNAME to aQueryColumns[iItem].sBaseColumnName
49503>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_BASETABLENAME  to aQueryColumns[iItem].sBaseTableName
49504>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_LABEL          to aQueryColumns[iItem].sLabel
49505>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_SQLTYPE        to aQueryColumns[iItem].iSqlType
49506>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_DFTYPE         to aQueryColumns[iItem].iDFType
49507>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_SIZE           to aQueryColumns[iItem].iSize
49508>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_PRECISION      to aQueryColumns[iItem].iPrecision
49509>>>        Loop
49510>>>>
49510>>>        Set piColumns to iCols
49511>>>        Set paQueryColumns to aQueryColumns
49512>>>    End_Procedure
49513>>>
49513>>>    // Checks that the passed sDriverID is defined.
49513>>>    // Also checks if the driver has been loaded; else it gets loaded.
49513>>>    Function _SqlCheckCurrentDriver String sDriverID Returns Boolean
49515>>>        Boolean bOK
49515>>>        Integer iDriver
49515>>>
49515>>>        If (sDriverID = DATAFLEX_ID) Begin
49517>>>            Function_Return False
49518>>>        End
49518>>>>
49518>>>
49518>>>        Get IsDAWSQLDriver sDriverID to bOK
49519>>>
49519>>>        If (bOK = False) Begin
49521>>>            Get IsMertechDriver sDriverID to bOK
49522>>>        End
49522>>>>
49522>>>
49522>>>        If (bOK = False) Begin
49524>>>            Error DFERR_PROGRAM "Driver needs to be one of MSSQLDRV, DB2_DRV, ODBC_DRV, SQLFLEX, ORAFLEX, MDSPgSQL or MDSMySQL"
49525>>>>
49525>>>            Function_Return False
49526>>>        End
49526>>>>
49526>>>
49526>>>        Get DriverIndex sDriverID to iDriver
49527>>>        If (iDriver = 0) Begin
49529>>>            Load_Driver sDriverID
49530>>>        End
49530>>>>
49530>>>
49530>>>        Function_Return True
49531>>>    End_Function
49532>>>
49532>>>    // Checks that the length parameter has been passed correctly.
49532>>>    // This is only of concern for certain SQL data types.
49532>>>    Function _SqlCheckLengthParamForDataType Integer iDataType Integer iLen Returns Boolean
49534>>>        Integer iLength
49534>>>        Boolean bOK bCheckTypeLength
49534>>>
49534>>>        If (num_arguments > 1) Begin
49536>>>            Move iLen to iLength
49537>>>        End
49537>>>>
49537>>>        Move (iDataType = SQL_DECIMAL   or iDataType = SQL_NUMERIC or iDataType = SQL_FLOAT   or iDataType = SQL_INTEGER or;              iDataType = SQL_VARBINARY or iDataType = SQL_BINARY  or iDataType = SQL_VARCHAR or iDataType = SQL_CHAR or;              iDataType = SQL_BIGINT    or iDataType = SQL_REAL) to bCheckTypeLength
49538>>>
49538>>>        If (bCheckTypeLength = True) Begin
49540>>>            Move (iLength > 0) to bOK
49541>>>        End
49541>>>>
49541>>>
49541>>>        Function_Return (bOK = True)
49542>>>    End_Function
49543>>>
49543>>>    Function _SqlProperTableName String sTableName Returns String
49545>>>        String sVal sSchema sDriverID
49545>>>        Integer iDbType
49545>>>
49545>>>        If (Trim(sTableName) = "") Begin
49547>>>            Function_Return ""
49548>>>        End
49548>>>>
49548>>>
49548>>>        Get psDriverID to sDriverID
49549>>>        Get piDbType   to iDbType
49550>>>        If (iDbType = EN_dbTypeOracle) Begin
49552>>>            Get psUserID to sSchema
49553>>>            // Not sure about this uppercasing but it seems like Oracle wants that?
49553>>>            Move (Uppercase(sSchema)) to sSchema
49554>>>            Move ('"' + sSchema + '"."' + sTableName + '"') to sTableName
49555>>>            Function_Return sTableName
49556>>>        End
49556>>>>
49556>>>        If (iDbType = EN_DbTypeMySQL) Begin
49558>>>            Get psDatabase to sVal
49559>>>            Move (sVal + "." + sTableName) to sTableName
49560>>>            Function_Return sTableName
49561>>>        End
49561>>>>
49561>>>        If (iDbType = EN_DbTypePostgre) Begin
49563>>>            Move ('"' + sTableName + '"') to sTableName
49564>>>            Function_Return sTableName
49565>>>        End
49565>>>>
49565>>>
49565>>>        Get psSchema to sSchema
49566>>>        If (sSchema = "") Begin
49568>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
49569>>>        End
49569>>>>
49569>>>
49569>>>        Move (Uppercase(sTableName)) to sVal
49570>>>        If (not(sVal contains (sSchema + "."))) Begin
49572>>>            If (iDbType = EN_dbTypeDB2) Begin
49574>>>                Move (Lowercase(sSchema) + "." + sTableName) to sTableName
49575>>>            End
49575>>>>
49575>>>            Else Begin
49576>>>                Move (sSchema + "." + sTableName) to sTableName
49577>>>            End
49577>>>>
49577>>>        End
49577>>>>
49577>>>
49577>>>        Function_Return sTableName
49578>>>    End_Function
49579>>>
49579>>>    // SQL column names can be case-sensitive. This function is used to check that
49579>>>    // the passed sFieldName has the correct spelling.
49579>>>    // Used with Embedded SQL statement calls.
49579>>>    // If the spelling or fieldname doesn't exist, the return value is "" (blank).
49579>>>    Function _SqlFindColumnName String sTableName String sColumnName Returns String
49581>>>        String sRetval sValue sDriverID
49581>>>        String[] sColumnNamesArray
49582>>>        Integer iCount iColumns
49582>>>
49582>>>        Move "" to sRetval
49583>>>        Get psDriverID to sDriverID
49584>>>        Get SqlUtilEnumerateColumns sDriverID sTableName to sColumnNamesArray
49585>>>        Move (SizeOfArray(sColumnNamesArray)) to iColumns
49586>>>        Decrement iColumns
49587>>>
49587>>>        For iCount from 0 to iColumns
49593>>>>
49593>>>            Move sColumnNamesArray[iCount] to sValue
49594>>>            If (Uppercase(sColumnName) = Uppercase(sValue)) Begin
49596>>>                Move sValue to sRetval
49597>>>                Move iColumns to iCount // We're done.
49598>>>            End
49598>>>>
49598>>>        Loop
49599>>>>
49599>>>
49599>>>        Function_Return sRetval
49600>>>    End_Function
49601>>>
49601>>>    Function _SqlDatabasesArrayMSSQL Returns String[]
49603>>>        String[] sReturnArray
49604>>>        Handle hoSQLHandler
49604>>>        Integer iCount iSize iItem
49604>>>        String sServer
49604>>>        tSQLConnection SQLConnection
49604>>>        tSQLConnection SQLConnection
49604>>>
49604>>>        Get phoMSSQLHandler to hoSQLHandler
49605>>>        Send Delete_Data    of hoSQLHandler
49606>>>        Get pSQLConnection  of ghoSQLConnectionHandler to SQLConnection
49607>>>
49607>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
49608>>>        Get EnumerateDatabases of hoSQLHandler SQLConnection.sServer SQLConnection.sUserID SQLConnection.sPassword to iSize
49609>>>        Decrement iSize
49610>>>
49610>>>        For iCount from 0 to iSize
49616>>>>
49616>>>            Get String_Value of hoSQLHandler iCount to sServer
49617>>>            Move (Trim(sServer)) to sReturnArray[iItem]
49618>>>            Increment iItem
49619>>>        Loop
49620>>>>
49620>>>
49620>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
49621>>>
49621>>>        Function_Return sReturnArray
49622>>>    End_Function
49623>>>
49623>>>    Function _SqlTableArrayDAW Returns String[]
49625>>>        String[] sReturnArray
49626>>>        String sTable sTableType sSchema sDefSchema sComment sTableKeyWord sSysKeyWord sConnectionString
49626>>>        Handle hoSQLHandler
49626>>>        Integer iCount iSize iItem iPos
49626>>>        Boolean bOK
49626>>>        tSQLConnection SQLConnection
49626>>>        tSQLConnection SQLConnection
49626>>>
49626>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
49627>>>        If (SQLConnection.sConnectionString = "") Begin
49629>>>            Function_Return sReturnArray
49630>>>        End
49630>>>>
49630>>>
49630>>>        Move SQLConnection.sSchema      to sDefSchema
49631>>>        Move (Uppercase(sDefSchema))    to sDefSchema
49632>>>        Get _SqlFindKeyWord CI_SQLTable to sTableKeyWord
49633>>>        Get _SqlFindKeyWord CI_SQLSys   to sSysKeyWord
49634>>>
49634>>>        Get phoCLIHandler to hoSQLHandler
49635>>>        Set psDriverID    of hoSQLHandler to SQLConnection.sDriverID
49636>>>        Send Delete_Data  of hoSQLHandler
49637>>>
49637>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
49638>>>        Move SQLConnection.sConnectionString to sConnectionString
49639>>>        // 2020-03-14 This was not correct when testing a MS-SQL ODBC driver connection from CMOS.
49639>>>//        If (SQLConnection.sDriverID = ODBC_DRV_ID) Begin
49639>>>//            If (Uppercase(sConnectionString) contains CS_SQLIniDSNKeyword) Begin
49639>>>//                Move (Pos(";", sConnectionString)) to iPos
49639>>>//                If (iPos > 0) Begin
49639>>>//                    Move (Left(sConnectionString, (iPos - 1))) to sConnectionString
49639>>>//                    Move (Trim(sConnectionString)) to sConnectionString
49639>>>//                End
49639>>>//            End
49639>>>//        End
49639>>>
49639>>>        Get EnumerateTables of hoSQLHandler sConnectionString to iSize
49640>>>        Move False to Err
49641>>>        Move 0 to iItem
49642>>>
49642>>>        // Note that the enumeration starts from table no 1. (not zero)
49642>>>        for iCount from 1 to iSize
49648>>>>
49648>>>            Get TableName    of hoSQLHandler iCount to sTable
49649>>>            Get TableType    of hoSQLHandler iCount to sTableType
49650>>>            Get SchemaName   of hoSQLHandler iCount to sSchema
49651>>>            If (sSchema = "") Begin
49653>>>                Get _SqlFindKeyWord CI_SQLDBO to sSchema
49654>>>            End
49654>>>>
49654>>>            Get TableComment of hoSQLHandler iCount to sComment
49655>>>            Move (Trim(sTable)) to sTable
49656>>>            If (SQLConnection.sDriverID = DB2_DRV_ID) Begin
49658>>>                Move (sTable <> "" and Uppercase(sTableType) = sTableKeyWord and Uppercase(sSchema) = sDefSchema) to bOK
49659>>>            End
49659>>>>
49659>>>            Else Begin
49660>>>                Move (sTable <> "" and Uppercase(sTableType) = sTableKeyWord and Uppercase(sSchema) <> sSysKeyWord and Uppercase(sSchema) <> "SYSTOOLS") to bOK
49661>>>            End
49661>>>>
49661>>>            If (bOK = True) Begin
49663>>>                Move sTable to sReturnArray[iItem]
49664>>>                Increment iItem
49665>>>            End
49665>>>>
49665>>>        Loop
49666>>>>
49666>>>
49666>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
49667>>>
49667>>>        Function_Return sReturnArray
49668>>>    End_Function
49669>>>
49669>>>    Function _SqlProcedureArrayDAW String sStmt String sArgument Returns String[]
49671>>>        String[] sReturnArray
49672>>>        String sValue
49672>>>        Handle hoSQLHandler hoSQLConnect hStmt
49672>>>        Integer iRetval iCols iFetchResult
49672>>>        tSQLConnection SQLConnection
49672>>>        tSQLConnection SQLConnection
49672>>>
49672>>>        Get phoSQLManager to hoSQLHandler
49673>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
49674>>>        Get SqlConnect of hoSQLHandler SQLConnection.sDriverID SQLConnection.sConnectionString to hoSQLConnect
49675>>>
49675>>>        If (hoSQLConnect <> 0) Begin
49677>>>            Get SqlOpen of hoSQLConnect to hStmt
49678>>>            If (hStmt <> 0) Begin
49680>>>                Send SqlSetProcedurename of hStmt sStmt
49681>>>                If (sArgument <> "") Begin
49683>>>                    Send SqlSetArgument  of hStmt 1 sArgument
49684>>>                End
49684>>>>
49684>>>
49684>>>                Send SqlCall             of hStmt
49685>>>                Get SqlReturnValue       of hStmt to iRetval
49686>>>                If (iRetval = 0) Begin
49688>>>                    Repeat
49688>>>>
49688>>>                        Get SqlStmtAttribute of hStmt SqlSTMTATTRIB_COLUMNCOUNT to iCols
49689>>>                        If (iCols > 0) Begin
49691>>>                            Repeat
49691>>>>
49691>>>                                Get SqlFetch of hStmt to iFetchResult
49692>>>                                If (iFetchResult <> 0) Begin
49694>>>                                    Get SqlColumnValue of hStmt 1 to sValue
49695>>>                                    Move (Trim(sValue)) to sReturnArray[SizeOfArray(sReturnArray)]
49696>>>                                End
49696>>>>
49696>>>                            Until (iFetchResult = 0)
49698>>>                        End
49698>>>>
49698>>>                        Get SqlNextResultSet of hStmt to iRetval
49699>>>                    Until (iRetval = 0)
49701>>>                    Send SqlClose of hStmt
49702>>>                End
49702>>>>
49702>>>            End
49702>>>>
49702>>>            Send SqlDisconnect of hoSQLConnect
49703>>>        End
49703>>>>
49703>>>        Function_Return sReturnArray
49704>>>    End_Function
49705>>>
49705>>>    Function _SqlDatabasesArrayDB2 Returns String[]
49707>>>        String[] sReturnArray
49708>>>        String sDataSource
49708>>>        Handle hoSQLHandler
49708>>>        Integer iItem
49708>>>
49708>>>        Get phoDB2SQLHandler to hoSQLHandler
49709>>>        Send SeedDataSources of hoSQLHandler
49710>>>
49710>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
49711>>>
49711>>>        Repeat
49711>>>>
49711>>>            Get DataSources of hoSQLHandler to sDataSource
49712>>>            Move (Replaces(",", sDataSource, "")) to sDataSource
49713>>>            Move (Trim(sDataSource)) to sReturnArray[iItem]
49714>>>            Increment iItem
49715>>>        Until (sDataSource = "")
49717>>>
49717>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
49718>>>
49718>>>        Function_Return sReturnArray
49719>>>    End_Function
49720>>>
49720>>>    Function _SqlDatabaseSourcesArrayODBC Returns String[]
49722>>>        String[] sReturnArray
49723>>>        String sDataSource
49723>>>        Handle hoSQLHandler
49723>>>        Integer iItem
49723>>>
49723>>>        Get phoODBCSQLHandler to hoSQLHandler
49724>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
49725>>>
49725>>>        Send SeedDataSources of hoSQLHandler
49726>>>
49726>>>        Repeat
49726>>>>
49726>>>            Get DataSources of hoSQLHandler to sDataSource
49727>>>            If (Trim(sDataSource) <> "" and not(sDataSource contains "*.")) Begin
49729>>>                Move (Trim(sDataSource)) to sReturnArray[iItem]
49730>>>                Increment iItem
49731>>>            End
49731>>>>
49731>>>        Until (sDataSource = "")
49733>>>
49733>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
49734>>>
49734>>>        Function_Return sReturnArray
49735>>>    End_Function
49736>>>
49736>>>    Function _SqlDatabasesArrayODBC Returns tSQLIntTableInfo[]
49738>>>        String[] sDataSources
49739>>>        tSQLConnection SQLConnection
49739>>>        tSQLConnection SQLConnection
49739>>>        tSQLIntTableInfo[] sReturnArray
49739>>>        tSQLIntTableInfo[] sReturnArray
49740>>>        Integer iDataSources iCount iItem
49740>>>        String sConnection sServer sDatabase sKey sSubKey
49740>>>        Handle hoIniFile hoRegistry hoODBCDataSources
49740>>>        Boolean bExists bKeyOpened
49740>>>
49740>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
49741>>>        Move SQLConnection.sConnectionString to sConnection
49742>>>        Move SQLConnection.sServer           to sServer
49743>>>
49743>>>        // FileDSN - read DATABASE name from DSN ini-file
49743>>>        If (Uppercase(sServer) contains ("." + String(CS_SQLIniDSNKeyword))) Begin
49745>>>            Get Create (RefClass(cIniFile)) to hoIniFile
49746>>>            Set psFileName of hoIniFile to sServer
49747>>>            Get ReadString of hoIniFile CS_SQLODBCIniSectionName CS_SQLIniDatabaseKeyword "" to sDatabase
49748>>>            Move sDatabase to sReturnArray[0].sDatabaseName
49749>>>            Send Destroy of hoIniFile
49750>>>        End
49750>>>>
49750>>>
49750>>>        // DSN - read DATABASE name from the registry
49750>>>        Else Begin
49751>>>            Get Create (RefClass(cRegistry)) to hoRegistry
49752>>>
49752>>>            // We start with checking the "System DNS" area in the registry as it is the
49752>>>            // most probably place the info is kept that we're after.
49752>>>            Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
49753>>>            Set pfAccessRights of hoRegistry to Key_Read
49754>>>            Get KeyExists of hoRegistry "SOFTWARE\Wow6432Node" to bExists
49755>>>            If (bExists = True) Begin
49757>>>                Move "SOFTWARE\Wow6432Node\ODBC\ODBC.INI" to sKey
49758>>>            End
49758>>>>
49758>>>            Else Begin
49759>>>                Move "SOFTWARE\ODBC\ODBC.INI" to sKey
49760>>>            End
49760>>>>
49760>>>
49760>>>            Get KeyExists of hoRegistry sKey to bExists
49761>>>            If (bExists) Begin
49763>>>                Get OpenKey of hoRegistry sKey to bKeyOpened
49764>>>                If (bKeyOpened) Begin
49766>>>                    Get Create (RefClass(Array)) to hoODBCDataSources
49767>>>                    Get GetSubkeys of hoRegistry hoODBCDataSources to iDataSources
49768>>>                    If (iDataSources > 0) Begin
49770>>>                        Move (ResizeArray(sDataSources, iDataSources)) to sDataSources
49771>>>                        Decrement iDataSources
49772>>>                        for iCount from 0 to iDataSources
49778>>>>
49778>>>                            Get Value of hoODBCDataSources iCount to sDataSources[iCount]
49779>>>                        Loop
49780>>>>
49780>>>                        Move 0 to iItem
49781>>>                        for iCount from 0 to iDataSources
49787>>>>
49787>>>                            Move sDataSources[iCount] to sSubKey
49788>>>                            Get OpenKey of hoRegistry (sKey + "\" + String(sSubKey)) to bKeyOpened
49789>>>                            If (bKeyOpened = True) Begin
49791>>>                                Get ValueExists of hoRegistry CS_SQLIniDatabaseKeyword to bExists
49792>>>                                If (bExists = True) Begin
49794>>>                                    Move sSubKey to sReturnArray[iItem].sServerName
49795>>>                                    Get ReadString of hoRegistry CS_SQLIniDatabaseKeyword to sReturnArray[iItem].sDatabaseName
49796>>>                                    Increment iItem
49797>>>                                End
49797>>>>
49797>>>                            End
49797>>>>
49797>>>                        Loop
49798>>>>
49798>>>                    End
49798>>>>
49798>>>                    Send CloseKey of hoRegistry
49799>>>                    Send Destroy of hoODBCDataSources
49800>>>                End
49800>>>>
49800>>>            End
49800>>>>
49800>>>
49800>>>            // We then check the "User DNS" area in the registry.
49800>>>            Set phRootKey of hoRegistry to HKEY_CURRENT_USER
49801>>>            Set pfAccessRights of hoRegistry to Key_Read
49802>>>            Move "SOFTWARE\ODBC\ODBC.INI" to sKey
49803>>>            Get KeyExists of hoRegistry sKey to bExists
49804>>>
49804>>>            If (bExists) Begin
49806>>>                Get OpenKey of hoRegistry sKey to bKeyOpened
49807>>>                If (bKeyOpened) Begin
49809>>>                    Get Create (RefClass(Array)) to hoODBCDataSources
49810>>>                    Get GetSubkeys of hoRegistry hoODBCDataSources to iDataSources
49811>>>                    If (iDataSources > 0) Begin
49813>>>                        Move (ResizeArray(sDataSources, iDataSources)) to sDataSources
49814>>>                        Decrement iDataSources
49815>>>                        for iCount from 0 to iDataSources
49821>>>>
49821>>>                            Get Value of hoODBCDataSources iCount to sDataSources[iCount]
49822>>>                        Loop
49823>>>>
49823>>>                        for iCount from 0 to iDataSources
49829>>>>
49829>>>                            Move sDataSources[iCount] to sSubKey
49830>>>                            Get OpenKey of hoRegistry (sKey + "\" + String(sSubKey)) to bKeyOpened
49831>>>                            If (bKeyOpened = True) Begin
49833>>>                                Get ValueExists of hoRegistry CS_SQLIniDatabaseKeyword to bExists
49834>>>                                If (bExists = True) Begin
49836>>>                                    Move sSubKey to sReturnArray[iItem].sServerName
49837>>>                                    Get ReadString of hoRegistry CS_SQLIniDatabaseKeyword to sReturnArray[iItem].sDatabaseName
49838>>>                                    Increment iItem
49839>>>                                End
49839>>>>
49839>>>                            End
49839>>>>
49839>>>                        Loop
49840>>>>
49840>>>                    End
49840>>>>
49840>>>                    Send CloseKey of hoRegistry
49841>>>                    Send Destroy of hoODBCDataSources
49842>>>                End
49842>>>>
49842>>>            End
49842>>>>
49842>>>
49842>>>            Send Destroy of hoRegistry
49843>>>        End
49843>>>>
49843>>>
49843>>>        Function_Return sReturnArray
49844>>>    End_Function
49845>>>
49845>>>    // We might have a split Sql script where the info about which database to use is
49845>>>    // put on top of the Sql script, we then need to save it to be able to retrieve it later and
49845>>>    // insert it for scriplets to come after the first one.
49845>>>    Function _SqlFormatStatement String sStmt Returns String
49847>>>        String sUseDatabase sTmp sUseKeyWord sCreateViewKeyWord sDBOKeyWord sNoCountKeyWord sDriverID
49847>>>        Integer iStart iEnd iDbType
49847>>>        Boolean bOK
49847>>>
49847>>>        Get piDbType to iDbType
49848>>>        Get psDriverID to sDriverID
49849>>>        Get _SqlFindKeyWord CI_SQLUse          to sUseKeyWord
49850>>>        Get _SqlFindKeyWord CI_SQLSetNoCountOn to sNoCountKeyWord
49851>>>        Get _SqlFindKeyWord CI_SQLCreateView   to sCreateViewKeyWord
49852>>>        Get _SqlFindKeyWord CI_SQLDBO          to sDBOKeyWord
49853>>>        Move (Replaces(" ", sStmt, "")) to sTmp
49854>>>        If (Uppercase(sTmp) contains (sUseKeyWord +"[")) Begin
49856>>>            Move (Pos("[", (Uppercase(sTmp)))) to iStart
49857>>>            Move (Pos("]", sTmp)) to iEnd
49858>>>            Move (Mid(sTmp, (iEnd -iStart +1), iStart)) to sUseDatabase
49859>>>            Move (sUseKeyWord * sUseDatabase + " ") to sUseDatabase
49860>>>            Set Private.psUseDatabase to sUseDatabase
49861>>>        End
49861>>>>
49861>>>        Else Begin
49862>>>            Move (Uppercase(sStmt)) to sTmp
49863>>>
49863>>>            // A "Create View" statement _must_ be the very first words in a Sql statement.
49863>>>            If (not(sTmp contains sCreateViewKeyWord)) Begin
49865>>>                Get Private.psUseDatabase to sUseDatabase
49866>>>                Move (Insert(sUseDatabase, sStmt, 1)) to sStmt
49867>>>            End
49867>>>>
49867>>>
49867>>>            // This is a bit special to place here but was done so because it was easier that way.
49867>>>            // We will get an error when trying to create a view if it already exists.
49867>>>            // So to avoid such errors; we first remove it & then recreate it.
49867>>>            Else If (sTmp contains sCreateViewKeyWord) Begin
49870>>>                // Make sure we only have one space between statements/words.
49870>>>                Move (Replaces("  ", sTmp, " ")) to sTmp
49871>>>                Move (Replace(sCreateViewKeyWord, sTmp, "")) to sTmp
49872>>>                Move (Trim(sTmp)) to sTmp
49873>>>                Move (Pos(" ", sTmp)) to iEnd
49874>>>                Move (Left(sTmp, iEnd)) to sTmp
49875>>>                If ((not(sTmp contains ("[" + sDBOKeyWord + "]."))) and (not(sTmp contains (sDBOKeyWord + ".")))) Begin
49877>>>                    Move (sDBOKeyWord + "." + Trim(sTmp)) to sTmp
49878>>>                End
49878>>>>
49878>>>                Move (Trim(sTmp)) to sTmp
49879>>>                // Remove data view as it already exists!
49879>>>                Get SqlViewRemove sDriverID sTmp to bOK
49880>>>            End
49880>>>>
49880>>>        End
49880>>>>
49880>>>
49880>>>        Function_Return sStmt
49881>>>    End_Function
49882>>>
49882>>>    // Returns the proper Sql language key word(s) for the passed SQL key-word constant
49882>>>    Function _SqlFindKeyWord Integer iSQLKeywordConstant Returns String
49884>>>        String sRetval
49884>>>        Integer iDbType iIndex
49884>>>        tSQLKeyWords[] SQLKeywordArray
49884>>>        tSQLKeyWords[] SQLKeywordArray
49885>>>        tSQLKeyWords   SQLKeyWords
49885>>>        tSQLKeyWords   SQLKeyWords
49885>>>
49885>>>        // Sql back-end type. E.g. MS-SQL, MySQL, Oracle, DB2...
49885>>>        Move "" to sRetval
49886>>>        Get piDbType to iDbType
49887>>>        Move iDbType             to SQLKeyWords.iSQLDbType
49888>>>        Move iSQLKeywordConstant to SQLKeyWords.iSQLWord
49889>>>
49889>>>        Get paSQLKeywordArray to SQLKeywordArray
49890>>>        Move (SearchArray(SQLKeyWords, SQLKeywordArray, Self, RefFunc(CompareFindSQLKeyWords))) to iIndex
49891>>>        If (iIndex >= 0) Begin
49893>>>            Move SQLKeywordArray[iIndex].sSQLPhrase to sRetval
49894>>>        End
49894>>>>
49894>>>
49894>>>        Function_Return sRetval
49895>>>    End_Function
49896>>>
49896>>>    // Function will "clean/sanitize" the script by removing all comments and blank lines.
49896>>>    Function _SqlUtilSanitizeScript tSQLScriptArray SqlScriptArray Returns tSQLScriptArray[]
49898>>>        String[] sSQLScriptArray
49899>>>        String sText sLine sTmp sCommentStart sCommentEnd sDashComment
49899>>>        Integer iSize iCount
49899>>>        Boolean bCommentStart bCommentEnd bDashComment
49899>>>
49899>>>        Move False to bCommentStart
49900>>>        Move False to bCommentEnd
49901>>>        Move False to bDashComment
49902>>>        Move "/*"  to sCommentStart   // These are the standard comment start & stop tokens...
49903>>>        Move "*/"  to sCommentEnd
49904>>>        Move "--"  to sDashComment    // ...but a comment can also start with two dashes "--".
49905>>>
49905>>>        Move (SizeOfArray(SqlScriptArray.sSQLScriptArray)) to iSize
49906>>>        Decrement iSize
49907>>>        Move "" to sText
49908>>>
49908>>>        For iCount from 0 to iSize
49914>>>>
49914>>>            Move SqlScriptArray.sSQLScriptArray[iCount] to sLine
49915>>>            Move (Trim(sLine)) to sTmp
49916>>>            If (sTmp <> "") Begin
49918>>>                Move (Left(sTmp, 2) = sDashComment) to bDashComment
49919>>>                If (bCommentStart = False) Begin
49921>>>                    Move (Left(sTmp, 2) = sCommentStart) to bCommentStart
49922>>>                    If (bCommentStart = False) Begin
49924>>>                    End
49924>>>>
49924>>>                End
49924>>>>
49924>>>                Move (sTmp contains sCommentEnd) to bCommentEnd
49925>>>                If (bCommentEnd = True) Begin
49927>>>                    Move False to bCommentStart
49928>>>                End
49928>>>>
49928>>>                If (bDashComment = False and bCommentStart = False and bCommentEnd = False) Begin
49930>>>                    Move sLine to sSQLScriptArray[SizeOfArray(sSQLScriptArray)]
49931>>>                End
49931>>>>
49931>>>            End
49931>>>>
49931>>>        Loop
49932>>>>
49932>>>
49932>>>        // Update the retval struct array:
49932>>>        Move sSQLScriptArray to SqlScriptArray.sSQLScriptArray
49933>>>        Function_Return SqlScriptArray
49934>>>    End_Function
49935>>>
49935>>>
49935>>>    // *** Database API Functions: ***
49935>>>    // Instead of using Sql Scripts (ESQL), we can opt to use the DataFlex Database API's to
49935>>>    // make changes/updates to the database.
49935>>>
49935>>>    // * Dummy function for the Studio's Code Explorer *
49935>>>    Function API_TABLE_FUNCTIONS Returns Boolean
49937>>>        Function_Return False
49938>>>    End_Function
49939>>>
49939>>>    // This might not do what you think - Here's what it does:
49939>>>    // It checks that the passed hTable TableName in filelist.cfg is exactly the same as at the SQL back-end.
49939>>>    // If that is True; it creates an .int file for it and changes Filelist.cfg to point
49939>>>    // to the SQL table.
49939>>>    // Typical usage for this function is when an entry exists in the Filelist for a table and the table
49939>>>    // already exists in SQL.
49939>>>    // This is a bit fiddly as the DF_FILE_PHYSICAL_NAME attribute can only be set inside a
49939>>>    // Structure_Start ... Structure_End operation when creating a NEW table. Thus it cannot be set when
49939>>>    // restructuring an existing table.
49939>>>    Function ApiTableAttachToSql Handle hTable Boolean bUseConnID Returns Boolean
49941>>>        Boolean bExists bOpened bOK bSystemFile bMertechDriver bUseConnectionID bIsAlias
49941>>>        String sDriverID sConnectionID sConnectionString sDisplayName sRootName sLogicalName sPhysicalName sSchema
49941>>>        Handle hToTable
49941>>>
49941>>>        Move True to bUseConnectionID
49942>>>        If (num_arguments > 1) Begin
49944>>>            Move bUseConnID to bUseConnectionID
49945>>>        End
49945>>>>
49945>>>
49945>>>        Get psDriverID to sDriverID
49946>>>        // If the table doesn't exist on the SQL back-end we do nothing.
49946>>>        Get SqlUtilCheckIfTableHandleExists hTable sDriverID to bExists
49947>>>        If (bExists = False) Begin
49949>>>            Function_Return False
49950>>>        End
49950>>>>
49950>>>
49950>>>        Get UtilTableIsAlias hTable to bIsAlias
49951>>>
49951>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
49952>>>        If (bOK = False) Begin
49954>>>            Function_Return False
49955>>>        End
49955>>>>
49955>>>
49955>>>        // Then we need to check that the function hasn't been called before; which in case
49955>>>        // we do nothing
49955>>>        Get SQLUtilTableIsAttached sDriverID hTable to bExists
49956>>>        If (bExists = True) Begin
49958>>>            Function_Return False
49959>>>        End
49959>>>>
49959>>>
49959>>>        Get psConnectionID     to sConnectionID
49960>>>        Get psConnectionString to sConnectionString
49961>>>        If (sConnectionID = "" or sConnectionString = "") Begin
49963>>>            Error DFERR_PROGRAM ("An SQL connection has NOT been setup correctly. Could not attach table:" * String(hTable) * "to SQL")
49964>>>>
49964>>>            Function_Return False
49965>>>        End
49965>>>>
49965>>>
49965>>>        Set Private.phCurrentTable to hTable
49966>>>        Get psSchema to sSchema
49967>>>        If (sSchema = "") Begin
49969>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
49970>>>        End
49970>>>>
49970>>>
49970>>>        Get IsMertechDriver sDriverID to bMertechDriver
49971>>>
49971>>>        // Mertech drivers don't use connection id's, so if the passed bUseConnectionID = True that
49971>>>        // was a programmer's error and we adjust for it here.
49971>>>        If (bMertechDriver = True) Begin
49973>>>            Move False to bUseConnectionID
49974>>>        End
49974>>>>
49974>>>
49974>>>        // If we should use a connection id we need to check it exists;
49974>>>        // else we create it before attempting creating the table
49974>>>        If (bUseConnectionID = True) Begin
49976>>>            Get AutoConnectionIDLogin to bOK
49977>>>            If (bOk = False) Begin
49979>>>                Error DFERR_PROGRAM ("The Connection ID:" * sConnectionID * "could not be created and therefor the table can't be created.")
49980>>>>
49980>>>                Function_Return False
49981>>>            End
49981>>>>
49981>>>        End
49981>>>>
49981>>>
49981>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
49984>>>        Get _TableNameOnly sRootName to sRootName
49985>>>        If (sRootName = "") Begin
49987>>>            Function_Return False
49988>>>        End
49988>>>>
49988>>>        Move (sRootName + ".int")                    to sPhysicalName
49989>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
49992>>>        Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
49995>>>
49995>>>        // The Studio no longer adds the schema to the DISPLAY_NAME, so commented out.
49995>>>        //
49995>>>        // We don't want to change the display name if it starts with an ampersand ("@"),
49995>>>        // because then the table should not be visible to users.
49995>>>//        Move (Pos("@", sDisplayName)) to iPos
49995>>>//        If (iPos <> 1) Begin
49995>>>//            If (sDisplayName contains ".") Begin
49995>>>//                Move (Pos(".", sDisplayName)) to iPos
49995>>>//                Move (Mid(sDisplayName, 200 ,(iPos + 1))) to sDisplayName
49995>>>//                Move (sSchema + "." + sDisplayName)       to sDisplayName
49995>>>//            End
49995>>>//            If (not(Lowercase(sDisplayName) contains Lowercase(sSchema + "."))) Begin
49995>>>//                Move (Lowercase(sSchema) + "." + sDisplayName) to sDisplayName
49995>>>//            End
49995>>>//        End
49995>>>
49995>>>        If (bIsAlias = False) Begin
49997>>>            Get OpenTableExclusive hTable to bOpened
49998>>>            If (bOpened = False) Begin
50000>>>                Error DFERR_PROGRAM ("Function ApiTableAttachToSQL - Could not open table number:" * String(hTable) * sLogicalName)
50001>>>>
50001>>>                Function_Return False
50002>>>            End
50002>>>>
50002>>>        End
50002>>>>
50002>>>
50002>>>        If (ghoProgressBar <> 0) Begin
50004>>>            Send DoAdvance of ghoProgressBar
50005>>>            Set Message_Text of ghoStatusPanel to ""
50006>>>            Set TableName_Text of ghoStatusPanel to ("Attaching to SQL - Table:" * String(sLogicalName) * "Number:" * String(hTable) * "to SQL")
50007>>>        End
50007>>>>
50007>>>        // Note: The hToTable will get changed by the Structure_xxx command...
50007>>>        Move hTable to hToTable
50008>>>        Move False to Err
50009>>>
50009>>>        // We now create a stub .int file and after Structure_end and also change the Filelist.cfg,
50009>>>        // then we do a pseudo .int file change with the "SqlUtilUpdateIntFile" function. After that we have
50009>>>        // a proper and updated .int file.
50009>>>        Get_Attribute DF_FILE_IS_SYSTEM_FILE of hTable to bSystemFile
50012>>>        Get SqlUtilCreateIntFile hTable sDriverID sConnectionID True bSystemFile to bOK
50013>>>
50013>>>        If (bIsAlias = False) Begin
50015>>>            Structure_Start hToTable sDriverID
50016>>>                Set Private.phCurrentTable to hTable
50017>>>                If (bUseConnectionID = True) Begin
50019>>>                    Set_Attribute DF_FILE_LOGIN     of hToTable to (CS_DFCONNID + "=" + sConnectionID)
50022>>>                End
50022>>>>
50022>>>                Else Begin
50023>>>                    Set_Attribute DF_FILE_LOGIN     of hToTable to sConnectionString
50026>>>                End
50026>>>>
50026>>>                Set_Attribute DF_FILE_OWNER         of hToTable to (Lowercase(sSchema))
50029>>>                // For unknown reason the above sometimes triggers an error and it doesn't help to try to trap the error; so we cheat...
50029>>>                Move False to Err
50030>>>                Move 0 to LastErr
50031>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
50032>>>            Structure_End hToTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
50034>>>            Set Action_Text of ghoStatusPanel to ""
50035>>>        End
50035>>>>
50035>>>
50035>>>        Move (not(Err)) to bOK
50036>>>        If (bOK = True) Begin
50038>>>            // The attributes set above will always trigger an error
50038>>>            // We also adjust the Filelist entries
50038>>>            Set_Attribute DF_FILE_ROOT_NAME    of hTable to (sDriverID + ":" + sRootName)
50041>>>            Set_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
50044>>>            Set_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
50047>>>
50047>>>            // This updates the .int file to make it up-to-date with the SQL back-end.
50047>>>            Get SqlUtilUpdateIntFile hTable to bOK
50048>>>        End
50048>>>>
50048>>>
50048>>>        Function_Return (bOK = True)
50049>>>    End_Function
50050>>>
50050>>>    // Sample usage:
50050>>>    //    Get ApiTableChangeAttribute SysInfo.File_Number DF_FILE_IS_SYSTEM_FILE True to bOK
50050>>>    //    Get ApiTableChangeAttribute OrderHea.File_Number DF_FILE_REUSE_DELETED DF_FILE_DELETED_NOREUSE to bOK
50050>>>    Function ApiTableChangeAttribute Handle hTable Integer iAttribute Integer iValue Returns Boolean
50052>>>        Boolean bOK bIsSQLTable
50052>>>
50052>>>        Get AutoConnectionIDLogin to bOK
50053>>>        Move False to Err
50054>>>        Get OpenTableExclusive hTable to bOK
50055>>>        If (bOK = False) Begin
50057>>>            Function_Return False
50058>>>        End
50058>>>>
50058>>>
50058>>>        // ToDo: Add to all table change functions!
50058>>>            Get UtilTableIsSQL hTable to bIsSQLTable
50059>>>            If (bIsSQLTable = True) Begin
50061>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
50064>>>            End
50064>>>>
50064>>>
50064>>>        Set Private.phCurrentTable to hTable
50065>>>        Structure_Start hTable
50066>>>            Set_Attribute iAttribute of hTable to iValue
50069>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
50070>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
50072>>>
50072>>>        Set Action_Text of ghoStatusPanel to ""
50073>>>        Function_Return (Err = False)
50074>>>    End_Function
50075>>>
50075>>>    Function ApiTableMoveFileListEntry String sRootName String sLogicalName String sDisplayName Handle hFromSlot Handle hToSlot String sDriverID Returns Boolean
50077>>>        Boolean bOK
50077>>>        
50077>>>        Get ApiTableChangeFileListSlot sRootName sLogicalName sDisplayName hToSlot sDriverID to bOK
50078>>>        If (bOK = True) Begin
50080>>>            Get ApiTableChangeFileListSlot "" "" "" hFromSlot sDriverID to bOK
50081>>>        End
50081>>>>
50081>>>        
50081>>>        Function_Return (bOK = True)
50082>>>    End_Function
50083>>>    
50083>>>    // To use a filelist slot for the passed FileName, TableName & DisplayName,
50083>>>    // or to change the filelist slot names.
50083>>>    Function ApiTableChangeFileListSlot String sRootName String sLogicalName String sDisplayName Handle hTable String sDriverID Returns Boolean
50085>>>        String sFileListName
50085>>>        
50085>>>        Move False to Err
50086>>>
50086>>>        If (ghoProgressBar <> 0) Begin
50088>>>            Send DoAdvance of ghoProgressBar
50089>>>            Set TableName_Text of ghoStatusPanel to ("Changing Filelist slot for Table:" * String(sLogicalName) * "Number:" * String(hTable))
50090>>>        End
50090>>>>
50090>>>        // If all strings are empty it means that we should remove this entry from filelist.
50090>>>        If (sRootName = "" and sLogicalName = "" and sDisplayName = "") Begin
50092>>>            Set_Attribute DF_FILE_ROOT_NAME     of hTable to ""
50095>>>            Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to ""
50098>>>            Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to ""
50101>>>            Function_Return (Err = False) // And we're done.
50102>>>        End
50102>>>>
50102>>>
50102>>>        If (sDriverID <> DATAFLEX_ID) Begin
50104>>>//            Set_Attribute DF_FILE_ROOT_NAME of hTable to (sDriverID + ":" + sRootName)
50104>>>            Move (sDriverID + ":" + sRootName) to sRootName
50105>>>        End
50105>>>>
50105>>>//        Else Begin
50105>>>//            Set_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
50105>>>//        End
50105>>>//
50105>>>//        Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
50105>>>//        Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
50105>>>
50105>>>        Set_Attribute DF_FILE_ROOT_NAME     of hTable to sRootName
50108>>>        Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
50111>>>        Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
50114>>>        
50114>>>        Function_Return (Err = False)
50115>>>    End_Function
50116>>>
50116>>>    Function ApiTableChangeRecordLength Handle hTable Integer iRecordLength Returns Boolean
50118>>>        Boolean bOK
50118>>>
50118>>>        Get AutoConnectionIDLogin to bOK
50119>>>        Move False to Err
50120>>>        Get OpenTableExclusive hTable to bOK
50121>>>        If (bOK = False) Begin
50123>>>            Function_Return False
50124>>>        End
50124>>>>
50124>>>
50124>>>        Set Private.phCurrentTable to hTable
50125>>>        Structure_Start hTable
50126>>>            Set_Attribute DF_FILE_RECORD_LENGTH of hTable to iRecordLength
50129>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
50130>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
50132>>>
50132>>>        Set Action_Text of ghoStatusPanel to ""
50133>>>        Function_Return (Err = False)
50134>>>    End_Function
50135>>>
50135>>>    Function ApiTableChangeRelation Handle hTable Handle hToTable Integer iFromField Integer iToField Returns Boolean
50137>>>        Boolean bOK bIsSQLTable
50137>>>
50137>>>        Move False to Err
50138>>>        Get AutoConnectionIDLogin to bOK
50139>>>        Open hToTable
50141>>>        Get OpenTableExclusive hTable to bOK
50142>>>        If (bOK = False) Begin
50144>>>            Function_Return False
50145>>>        End
50145>>>>
50145>>>
50145>>>            Get UtilTableIsSQL hTable to bIsSQLTable
50146>>>            If (bIsSQLTable = True) Begin
50148>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
50151>>>            End
50151>>>>
50151>>>
50151>>>        Set Private.phCurrentTable to hTable
50152>>>        Structure_Start hTable
50153>>>            Set_Attribute DF_FIELD_RELATED_FILE  of hTable iFromField to hToTable
50156>>>            Set_Attribute DF_FIELD_RELATED_FIELD of hTable iFromField to iToField
50159>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
50160>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
50162>>>
50162>>>        Set Action_Text of ghoStatusPanel to ""
50163>>>        Function_Return (Err = False)
50164>>>    End_Function
50165>>>
50165>>>    Procedure ApiTableConvertAllAddException Integer hTable
50167>>>        Integer[] aTableConvertExceptions
50168>>>        Get paTableConvertExceptions to aTableConvertExceptions
50169>>>        Move hTable to aTableConvertExceptions[SizeOfArray(aTableConvertExceptions)]
50170>>>        Set paTableConvertExceptions to aTableConvertExceptions
50171>>>    End_Procedure
50172>>>
50172>>>    Procedure ApiTableDateCorrectionAddException Integer hTable
50174>>>        Integer[] aTableDateCorrectionExceptions
50175>>>        Get paTableDateCorrectionExceptions to aTableDateCorrectionExceptions
50176>>>        Move hTable to aTableDateCorrectionExceptions[SizeOfArray(aTableDateCorrectionExceptions)]
50177>>>        Set paTableDateCorrectionExceptions to aTableDateCorrectionExceptions
50178>>>    End_Procedure
50179>>>
50179>>>    Procedure ApiTableConvertALLToSql
50181>>>        Integer[] iTablesArray
50182>>>        Integer iSize iCount
50182>>>        Boolean bUseConnectionID bToANSI bRecnum bCopyData bOK bContinueOnError
50182>>>        String sDriverID
50182>>>
50182>>>        Get psDriverID to sDriverID
50183>>>        Get pbUseConnectionID to bUseConnectionID
50184>>>        Get pbToANSI          to bToANSI
50185>>>        Get pbRecnum          to bRecnum
50186>>>        Get pbCopyData        to bCopyData
50187>>>        If (ghoDbUpdateHandler > 0) Begin
50189>>>            Get pbContinueOnError to bContinueOnError
50190>>>        End
50190>>>>
50190>>>
50190>>>        Get _AllTablesToConvert to iTablesArray
50191>>>        Move (SizeOfArray(iTablesArray)) to iSize
50192>>>        Set pbVisible   of ghoProgressBarOverall to True
50193>>>        Set piPosition  of ghoProgressBarOverall to 0
50194>>>        Set piAdvanceBy of ghoProgressBarOverall to 1
50195>>>        Set piMaximum   of ghoProgressBarOverall to iSize
50196>>>
50196>>>        Decrement iSize
50197>>>        For iCount from 0 to iSize
50203>>>>
50203>>>            Set piPosition of ghoProgressBarOverall to iCount
50204>>>            Get ApiTableConvertToSQL_Ex iTablesArray[iCount] sDriverID bUseConnectionID bToANSI bRecnum bCopyData to bOK
50205>>>            // Probably the right logic here is to just continue trying to convert every table even
50205>>>            // if there was an error converting one table...
50205>>>            //If (bContinueOnError = False and bOK = False) Break
50205>>>        Loop
50206>>>>
50206>>>
50206>>>    End_Procedure
50207>>>
50207>>>    Procedure ApiTableAttachALLToSql
50209>>>        Integer[] iTablesArray
50210>>>        Integer iSize iCount
50210>>>        Boolean bUseConnectionID bToANSI bRecnum bCopyData bOK bContinueOnError
50210>>>        String sDriverID
50210>>>
50210>>>        Get psDriverID to sDriverID
50211>>>        Get pbUseConnectionID to bUseConnectionID
50212>>>        Get pbToANSI          to bToANSI
50213>>>        Get pbRecnum          to bRecnum
50214>>>        Get pbCopyData        to bCopyData
50215>>>        If (ghoDbUpdateHandler > 0) Begin
50217>>>            Get pbContinueOnError to bContinueOnError
50218>>>        End
50218>>>>
50218>>>
50218>>>        Get _AllTablesToConvert to iTablesArray
50219>>>        Move (SizeOfArray(iTablesArray)) to iSize
50220>>>        Decrement iSize
50221>>>        For iCount from 0 to iSize
50227>>>>
50227>>>            Get ApiTableAttachToSQL iTablesArray[iCount] bUseConnectionID to bOK
50228>>>        Loop
50229>>>>
50229>>>
50229>>>    End_Procedure
50230>>>
50230>>>    // Subfunction to the ApiTableUpdate function (et al)
50230>>>    Function _UtilTableCheckChangeFilelistNames tAPITableNameInfo APITableNameInfoFrom Boolean bIsSQLTableTo Returns Boolean
50232>>>        Handle hTable
50232>>>        String sConnectionID
50232>>>        Boolean bTableExists bSameTableNames bANSI bOK
50232>>>
50232>>>        Get ApiTableFilelistNamesCompare True APITableNameInfoFrom to bSameTableNames
50233>>>        If (bSameTableNames = True) Begin
50235>>>            Function_Return True
50236>>>        End
50236>>>>
50236>>>
50236>>>        Move True to bOK
50237>>>        Move APITableNameInfoFrom.iTableNumber  to hTable
50238>>>        Set Private.phCurrentTable              to hTable
50239>>>        Set_Attribute DF_FILE_ROOT_NAME         of hTable to APITableNameInfoFrom.sRootName
50242>>>        Set_Attribute DF_FILE_LOGICAL_NAME      of hTable to APITableNameInfoFrom.sLogicalName
50245>>>        Set_Attribute DF_FILE_DISPLAY_NAME      of hTable to APITableNameInfoFrom.sDisplayName
50248>>>
50248>>>        If (APITableNameInfoFrom.bIsSQL = True) Begin
50250>>>            Get psConnectionID to sConnectionID
50251>>>            Get UtilTableExists hTable to bTableExists
50252>>>            If (bTableExists = True) Begin
50254>>>                Get SqlUtilUpdateIntFile hTable to bOK
50255>>>            End
50255>>>>
50255>>>            Else Begin
50256>>>                Get pbToANSI to bANSI
50257>>>                Get SqlUtilCreateIntFile hTable APITableNameInfoFrom.sDriverID sConnectionID bANSI False to bOK
50258>>>            End
50258>>>>
50258>>>        End
50258>>>>
50258>>>
50258>>>        Function_Return bOK
50259>>>    End_Function
50260>>>
50260>>>    Function ApiTableConvertToSql_Ex Handle hTable String sDriverID Boolean bUseConnectionID Boolean bToAnsi Boolean bRecnum Boolean bCopyData Returns Boolean
50262>>>        Handle hToTable hoLogFile
50262>>>        Boolean bOK bExists bOpened bMertechDriver bDAWDriver bContinueOnError bIsAlias
50262>>>        String sPhysicalName sRootName sLogicalName sDisplayName sConnectionID sConnectionString
50262>>>        String sANSI_OEM sSchema sBaseTableSpace sLongTableSpace sIndexTableSpace sDatabase sGUIDName sWarning
50262>>>        tSQLConnection SQLConnection
50262>>>        tSQLConnection SQLConnection
50262>>>
50262>>>        Get UtilTableExists hTable to bExists
50263>>>        If (bExists = False) Begin
50265>>>            Set Private.phCurrentTable to hTable
50266>>>            Error DFERR_PROGRAM "Table exists in Filelist.cfg but not on disk or SQL back-end.(Or Filelist.cfg contains a driver but the table doesn't exists on the SQL back-end)"
50267>>>>
50267>>>            Function_Return False
50268>>>        End
50268>>>>
50268>>>
50268>>>        Get UtilTableIsAlias hTable to bIsAlias
50269>>>        // If this is an Alias file there is nothing to convert to SQL.
50269>>>        // Instead we change the Filelist.cfg by adding the driver id to the rootname and create an .int file
50269>>>        If (bIsAlias = True) Begin
50271>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
50274>>>            If (sDriverID <> DATAFLEX_ID and not(sRootName contains ":")) Begin
50276>>>                Set_Attribute DF_FILE_ROOT_NAME of hTable to (sDriverID + ":" + sRootName)
50279>>>                Get psConnectionID to sConnectionID
50280>>>                Get SqlUtilCreateIntFile hTable sDriverID sConnectionID True False to bOK
50281>>>            End
50281>>>>
50281>>>            Function_Return True
50282>>>        End
50282>>>>
50282>>>
50282>>>        Set Private.phCurrentTable to hTable
50283>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
50286>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
50289>>>        Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
50292>>>
50292>>>        If (ghoProgressBar <> 0) Begin
50294>>>            Send DoAdvance of ghoProgressBar
50295>>>            Set TableName_Text of ghoStatusPanel to ("Checking Table:" * "Number:" * String(hTable) * String(sLogicalName))
50296>>>            Set Message_Text   of ghoStatusPanel to ""
50297>>>            Set Action_Text    of ghoStatusPanel to ""
50298>>>        End
50298>>>>
50298>>>
50298>>>        // Marco Kuipers suggestion;
50298>>>        // If Filelist.cfg points to an embedded .dat table and the table already exists as
50298>>>        // an SQL table; Instead of creating the table in SQL, attach it to the existing
50298>>>        // SQL table.
50298>>>        Get UtilTableIsSQL hTable to bOK
50299>>>        If (bOK = False) Begin
50301>>>            Get SqlUtilCheckIfTableNameExists sLogicalName sDriverID to bExists
50302>>>            If (bExists = True) Begin
50304>>>//                Get SQLUtilGUIDTempTableName sLogicalName to sGUIDName
50304>>>//                Get SqlTableRename hTable sLogicalName sGUIDName to bOK
50304>>>                Get phoLogFile to hoLogFile
50305>>>                If (hoLogFile <> 0) Begin          
50307>>>                    Move ("WARNING! Function: ApiTableConvertToSQL_Ex. The table" * sLogicalName * "pointed to an embedded table in Filelist.cfg that already existed as an SQL table! The table was NOT converted to SQL but instead ATTACHED to the existing SQL table.") to sWarning
50308>>>//                    Move ("WARNING! Function: ApiTableConvertToSQL_Ex. The table" * sLogicalName * "pointed to an embedded table in Filelist.cfg that already existed as an SQL table! The existing SQL table was renamed to:" * String(sGUIDName) * "and then converted again.") to sWarning
50308>>>                    Send LogError sWarning False
50309>>>                End
50309>>>>
50309>>>                Else Begin
50310>>>                    Error DFERR_PROGRAM sWarning
50311>>>>
50311>>>                End                                                       
50311>>>>
50311>>>                Get ApiTableAttachToSql hTable bUseConnectionID to bOK
50312>>>                Function_Return bOK // We're done (We have attached to an existing SQL table instead of converting it.
50313>>>            End
50313>>>>
50313>>>        End
50313>>>>
50313>>>
50313>>>        // Does the rootname contain a driver?
50313>>>        If (sDriverID <> DATAFLEX_ID and (Uppercase(sRootName) contains sDriverID)) Begin
50315>>>            // Does the table already exist as an SQL table?
50315>>>            Get SqlUtilCheckIfTableHandleExists hTable sDriverID to bExists
50316>>>            // It can happen that the table is missing from Filelist.cfg but still
50316>>>            // exist on the SQL side, in case we want to search for the table by its name.
50316>>>            If (bExists = False) Begin
50318>>>                Get SqlUtilCheckIfTableNameExists sLogicalName sDriverID to bExists
50319>>>            End
50319>>>>
50319>>>            If (bExists = True) Begin
50321>>>                Set TableName_Text of ghoStatusPanel to ""
50322>>>                Function_Return False
50323>>>            End
50323>>>>
50323>>>        End
50323>>>>
50323>>>        Move (If(bToAnsi = True, CS_ANSI_Txt, CS_OEM_Txt)) to sANSI_OEM
50324>>>
50324>>>        Get IsDAWSQLDriver sDriverID to bDAWDriver
50325>>>        // Mertech drivers don't use Connection ID's; so if bUseConnectionID was
50325>>>        // passed as True, we adjust for that here.
50325>>>        Get IsMertechDriver sDriverID to bMertechDriver
50326>>>        If (bMertechDriver = True and bUseConnectionID = True) Begin
50328>>>            Move False to bUseConnectionID
50329>>>        End
50329>>>>
50329>>>
50329>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
50330>>>        Move SQLConnection.sSchema           to sSchema
50331>>>        If (sSchema = "") Begin
50333>>>            Get _SqlFindKeyWord CI_SQLDBO    to sSchema
50334>>>            Move (Lowercase(sSchema))        to sSchema
50335>>>        End
50335>>>>
50335>>>
50335>>>        If (sDriverID = ORAFLEX) Begin
50337>>>            Move SQLConnection.sUserID       to sSchema
50338>>>        End
50338>>>>
50338>>>
50338>>>        Move SQLConnection.sDatabase         to sDatabase
50339>>>        Move SQLConnection.sConnectionID     to sConnectionID
50340>>>        Move SQLConnection.sConnectionString to sConnectionString
50341>>>        If (sConnectionID = "" or sConnectionString = "") Begin
50343>>>            Error DFERR_PROGRAM ("The SQL connection info has NOT been setup. Could not convert table:" * String(hTable) * "to SQL")
50344>>>>
50344>>>            Function_Return False
50345>>>        End
50345>>>>
50345>>>
50345>>>        Get AutoConnectionIDLogin to bOK
50346>>>        Open hTable
50348>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
50351>>>        If (bOpened = False) Begin
50353>>>            Error DFERR_PROGRAM ("Could not open table number:" * String(hTable))
50354>>>>
50354>>>            Function_Return False
50355>>>        End
50355>>>>
50355>>>
50355>>>        If (ghoProgressBar <> 0) Begin
50357>>>            Send DoAdvance of ghoProgressBar
50358>>>            Set TableName_Text of ghoStatusPanel to ("Converting to SQL - Table:" * String(sLogicalName) * "Number:" * String(hTable))
50359>>>        End
50359>>>>
50359>>>
50359>>>        Move 0 to hToTable
50360>>>        Get _TableNameOnly sRootName                 to sRootName
50361>>>        Move (sRootName + ".int")                    to sPhysicalName
50362>>>
50362>>>        Case Begin
50362>>>            Case (sDriverID = MSSQLDRV_ID)
50364>>>                Case Break
50365>>>            Case (sDriverID = ODBC_DRV_ID)
50368>>>                Case Break
50369>>>            Case (sDriverID = DB2_DRV_ID)
50372>>>                Move SQLConnection.sBaseTableSpace  to sBaseTableSpace
50373>>>                Move SQLConnection.sLongTableSpace  to sLongTableSpace
50374>>>                Move SQLConnection.sIndexTableSpace to sIndexTableSpace
50375>>>                Case Break
50376>>>            Case (sDriverID = ORAFLEX)
50379>>>                Move SQLConnection.sBaseTableSpace  to sBaseTableSpace
50380>>>                Move SQLConnection.sIndexTableSpace to sIndexTableSpace
50381>>>                Case Break
50382>>>            Case (sDriverID = MDSMySQL)
50385>>>                Case Break
50386>>>            Case (sDriverID = MDSPgSQL)
50389>>>                Move SQLConnection.sBaseTableSpace  to sBaseTableSpace
50390>>>                Move SQLConnection.sIndexTableSpace to sIndexTableSpace
50391>>>                Case Break
50392>>>            Case (sDriverID = DATAFLEX_ID)
50395>>>                Case Break
50396>>>            Case Else
50396>>>                Error DFERR_PROGRAM "Wrong database driver passed to the 'ApiTableConvertToSQL_Ex' function."
50397>>>>
50397>>>                Case Break
50398>>>        Case End
50398>>>
50398>>>        Move False to Err
50399>>>
50399>>>        If (bMertechDriver = True) Begin
50401>>>            // Note: This function also sets the Err flag.
50401>>>            Get _MertechApiTableConvertToSQL hTable sRootName sDatabase sDriverID sBaseTableSpace sIndexTableSpace bToAnsi bCopyData to bOK
50402>>>        End
50402>>>>
50402>>>
50402>>>        If (bMertechDriver = False) Begin
50404>>>            Structure_Start hToTable sDriverID
50405>>>                Structure_Copy hTable to hToTable
50406>>>                Set_Attribute DF_FILE_PHYSICAL_NAME of hToTable to sPhysicalName
50409>>>
50409>>>                If (sDriverID <> DATAFLEX_ID) Begin
50411>>>                    If (bUseConnectionID = True) Begin
50413>>>                        Set_Attribute DF_FILE_LOGIN of hToTable to (CS_DFCONNID + "=" + sConnectionID)
50416>>>                    End
50416>>>>
50416>>>                    Else Begin
50417>>>                        Set_Attribute DF_FILE_LOGIN of hToTable to sConnectionString
50420>>>                    End
50420>>>>
50420>>>
50420>>>                    Set_Attribute DF_FILE_RECNUM_TABLE of hToTable to bRecnum
50423>>>
50423>>>                    If (sSchema <> "") Begin
50425>>>                        Set_Attribute DF_FILE_OWNER of hToTable to sSchema
50428>>>                    End
50428>>>>
50428>>>
50428>>>                    If (sDriverID = DB2_DRV_ID) Begin
50430>>>                        If (sLongTableSpace <> "") Begin
50432>>>                            Set_Attribute DF_FILE_LONG_TABLESPACE  of hToTable to sLongTableSpace
50435>>>                        End
50435>>>>
50435>>>                        If (sBaseTableSpace <> "") Begin
50437>>>                            Set_Attribute DF_FILE_TABLE_TABLESPACE of hToTable to sBaseTableSpace
50440>>>                        End
50440>>>>
50440>>>                        If (sIndexTableSpace <> "") Begin
50442>>>                            Set_Attribute DF_FILE_INDEX_TABLESPACE of hToTable to sIndexTableSpace
50445>>>                        End
50445>>>>
50445>>>                    End
50445>>>>
50445>>>                End
50445>>>>
50445>>>
50445>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
50446>>>            Structure_End hToTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
50448>>>            Set Action_Text of ghoStatusPanel to ""
50449>>>        End
50449>>>>
50449>>>
50449>>>        Move (not(Err)) to bOK
50450>>>
50450>>>        If (bOK = True and bCopyData = True) Begin
50452>>>            If (bMertechDriver = False) Begin
50454>>>                Get ApiTableCopyData hTable sPhysicalName sRootName sDriverID to bOK
50455>>>            End
50455>>>>
50455>>>            Else Begin
50456>>>                Get _MertechCopyDataToSQL hTable sRootName sDriverID to bOK
50457>>>            End
50457>>>>
50457>>>
50457>>>            If (ghoDbUpdateHandler > 0) Begin
50459>>>                Get pbContinueOnError to bContinueOnError
50460>>>            End
50460>>>>
50460>>>            // If the data copy failed we will keep the newly created SQL table but
50460>>>            // rename it by adding a GUID to the end of the table name
50460>>>            // - or as much as "fit" because different SQL back-ends have
50460>>>            // different rules how long a table name can be.
50460>>>            // The new table will probably contain data but something went
50460>>>            // wrong while converting the data from embedded to SQL.
50460>>>            If (bOK = False and bContinueOnError = False) Begin
50462>>>                Get SQLUtilGUIDTempTableName sLogicalName to sGUIDName
50463>>>                Get SqlTableRename hTable sLogicalName sGUIDName to bOK
50464>>>                Error DFERR_PROGRAM ("Copying of" * sLogicalName * " data failed due to bad data. Either duplicate records and/or bad e.g Date/DateTime data. The SQL table was renamed to:" * String(sGUIDName) * "and its Filelist.cfg entry was NOT changed.")
50465>>>>
50465>>>            End
50465>>>>
50465>>>        End
50465>>>>
50465>>>
50465>>>        // This must be after copying data...
50465>>>        If (Err = False) Begin
50467>>>            Set_Attribute DF_FILE_ROOT_NAME of hTable to (sDriverID + ":" + sRootName)
50470>>>            // It seems the Studio does not do this any more, so commented out.
50470>>>            // We also adjust the display name by prefixing it by the schema name;
50470>>>            //            If (not(Lowercase(sDisplayName) contains Lowercase(sSchema + "."))) Begin
50470>>>            //                // The max length for the display_name is 31 characters...
50470>>>            //                If (Length(sSchema + "." + sDisplayName) < 31) Begin
50470>>>            //                    Set_Attribute DF_FILE_DISPLAY_NAME of hTable to (Lowercase(sSchema) + "." + sDisplayName)
50470>>>            //                End
50470>>>            //            End
50470>>>        End
50470>>>>
50470>>>
50470>>>        Close hTable
50471>>>        Move (not(Err)) to bOK
50472>>>        Function_Return bOK
50473>>>    End_Function
50474>>>
50474>>>    // Calls a driver function directly to copy data from one table to another (table structures needs to be the same).
50474>>>    // It will first drop all indicies, copy the data and then recreate indicies.
50474>>>    // An error log file with the sRootname + ".err" will be created in the Data folder.
50474>>>    Function ApiTableCopyData Integer hFromTable String sPhysicalName String sRootName String sDriverID Returns Boolean
50476>>>        Boolean bOpened bOK
50476>>>        Integer hToTable iIndex iRetval iVoid iOrgFreq
50476>>>        String sErrorFile sEmpty sPath
50476>>>
50476>>>        Get_Attribute DF_FILE_NEXT_EMPTY of 0 to hToTable
50479>>>        Get AutoConnectionIDLogin to bOK
50480>>>        If (sDriverID = DATAFLEX_ID) Begin
50482>>>            Send IncreaseSortBufferSize
50483>>>//            Send SetAllIndexesToBatch hToTable
50483>>>        End
50483>>>>
50483>>>
50483>>>        Move False to Err
50484>>>        Open sPhysicalName as hToTable
50486>>>        Get_Attribute DF_FILE_OPENED of hToTable to bOpened
50489>>>        If (bOpened = False) Begin
50491>>>            Function_Return False
50492>>>        End
50492>>>>
50492>>>
50492>>>        If (ghoStatusPanel <> 0) Begin
50494>>>            Set TableName_Text of ghoStatusPanel to ("Copying Data for Table:" * sRootName * "Number:" * String(hFromTable))
50495>>>            Set piMinimum of ghoProgressBar to 0
50496>>>            Set piMaximum of ghoProgressBar to 100 // 100%
50497>>>        End
50497>>>>
50497>>>
50497>>>        Move "" to sEmpty
50498>>>        Move False to Err
50499>>>        Move True to bOK
50500>>>        Set Private.phCurrentTable to hToTable
50501>>>
50501>>>        // No need to get the record identifier
50501>>>        Set_Attribute DF_FILE_GET_RID_AFTER_CREATE of hToTable to False
50504>>>        Get_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
50507>>>        If (sDriverID <> DATAFLEX_ID) Begin
50509>>>            // Remove all indices to speed up copying of data:
50509>>>            Call_Driver hToTable sDriverID Function CLI_DROPINDICES Callback ghoDbUpdateHandler Passing sEmpty sEmpty iVoid Result iRetval
50514>>>            If (iRetval <> 0) Begin       
50516>>>                Error DFERR_PROGRAM ("Failed dropping indices for table Number:" * String(hToTable) * "Name:" * String(sRootName))
50517>>>>
50517>>>                Close hToTable
50518>>>                Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
50521>>>                Function_Return False
50522>>>            End
50522>>>>
50522>>>        End
50522>>>>
50522>>>
50522>>>        Move (sRootName + ".err") to sErrorFile
50523>>>        Move 0 to iIndex
50524>>>        Move False to Err
50525>>>
50525>>>        If (sDriverID = MSSQLDRV_ID) Begin
50527>>>            Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to 10
50530>>>            Call_Driver hToTable sDriverID Function CLI_BCP CallBack ghoDbUpdateHandler Passing iIndex sEmpty hFromTable Result iRetval
50535>>>            If (iRetval <> 0) Begin
50537>>>                Error DFERR_PROGRAM ("Failed copying data for table Number:" * String(hToTable) * "Name:" * String(sRootName))
50538>>>>
50538>>>                Close hToTable
50539>>>                Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
50542>>>                Function_Return False
50543>>>            End
50543>>>>
50543>>>        End
50543>>>>
50543>>>        Else Begin
50544>>>            Copy_Records hFromTable to hToTable using 0 Callback ghoDbUpdateHandler
50547>>>        End
50547>>>>
50547>>>
50547>>>        If (Err = False) Begin
50549>>>            Get psHome of (phoWorkspace(ghoApplication)) to sPath
50550>>>            Get vDeleteFile (sPath + sErrorFile) to iRetval
50551>>>        End
50551>>>>
50551>>>
50551>>>        If (sDriverID <> DATAFLEX_ID) Begin
50553>>>            // Recreate indices:
50553>>>            Call_Driver hToTable sDriverID Function CLI_CREATEINDICES Callback ghoDbUpdateHandler Passing sEmpty sEmpty iVoid Result iRetval
50558>>>            If (iRetval <> 0) Begin
50560>>>                Error DFERR_PROGRAM ("Failed creating indices for table Number:" * String(hToTable) * "Name:" * String(sRootName))
50561>>>>
50561>>>                Close hToTable
50562>>>                Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
50565>>>                Function_Return False
50566>>>            End
50566>>>>
50566>>>        End
50566>>>>
50566>>>
50566>>>        Close hToTable
50567>>>        Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
50570>>>
50570>>>        If (bOK = True) Begin
50572>>>            Move (not(Err)) to bOK
50573>>>        End
50573>>>>
50573>>>
50573>>>        If (ghoStatusPanel <> 0) Begin
50575>>>            Set TableName_Text of ghoStatusPanel to ""
50576>>>            Set Message_Text   of ghoStatusPanel to ""
50577>>>            Set Action_Text    of ghoStatusPanel to ""
50578>>>        End
50578>>>>
50578>>>
50578>>>        Function_Return (bOK = True)
50579>>>    End_Function
50580>>>
50580>>>    // The bANSI parameter's default value = True, meaning a table in ANSI format will be created.
50580>>>    // i.e. DF_FILE_TABLE_CHARACTER_FORMAT {"OEM"|"ANSI"}
50580>>>    Function ApiTableCreate Handle hTable String sRootName String sDisplayName String sLogicalName Boolean bUseConnectionID Boolean bANSI Boolean bRecnum tAPIColumn[] aColumnIn Returns Boolean
50582>>>        Handle hFile
50582>>>        String sConnectionID sPhysicalFile sANSI_OEM sVal sSchema sOriginalDriverID sDriverID sTableName
50582>>>        Integer iIdentityType iDataType iDbType iCount iSize
50582>>>        Boolean bOk bExists bSqlDriver bMertechDriver bDeleteDummy bExistsInFilelist bSysFile
50582>>>        tSQLConnection SQLConnection
50582>>>        tSQLConnection SQLConnection
50582>>>        tAPIColumn[] aColumns
50582>>>        tAPIColumn[] aColumns
50583>>>        tColumnType ColumnType
50583>>>        tColumnType ColumnType
50583>>>
50583>>>        // First check if the passed filenumber already exists; in case we do nothing
50583>>>        Get UtilTableExists hTable to bOk
50584>>>        If (bOk = True) Begin
50586>>>            Function_Return False
50587>>>        End
50587>>>>
50587>>>
50587>>>        Set Private.phCurrentTable to hTable
50588>>>        Move sLogicalName to sTableName
50589>>>        If (ghoProgressBar <> 0) Begin
50591>>>            Send DoAdvance of ghoProgressBar
50592>>>            Set TableName_Text of ghoStatusPanel to ("Creating Table:" * String(sTableName) * "Number:" * String(hTable) * String(sLogicalName))
50593>>>        End
50593>>>>
50593>>>
50593>>>        Get UtilTableLogicalNameIsInUse sTableName to bExistsInFilelist
50594>>>        Get psDriverID to sDriverID
50595>>>        Get IsSQLDriver sDriverID to bSqlDriver
50596>>>        Get piDbType to iDbType
50597>>>
50597>>>        // If no columns passed in, we need to create a "dummy" column
50597>>>        Move False to bDeleteDummy
50598>>>        If (Num_Arguments = 8) Begin
50600>>>            Move aColumnIn to aColumns
50601>>>        End
50601>>>>
50601>>>        If ((SizeOfArray(aColumns)) = 0) Begin
50603>>>            Get UtilDFDataTypeToSqlTypeMapping sDriverID iDbType DF_BCD to ColumnType
50604>>>            Move ColumnType.iSQLType to iDataType
50605>>>            If (bRecnum = False) Begin
50607>>>                Move C_tAPIColumn_Identity to iIdentityType
50608>>>            End
50608>>>>
50608>>>            Else Begin
50609>>>                Move C_tAPIColumn_None     to iIdentityType
50610>>>            End
50610>>>>
50610>>>            Get _AppendAPIColumn aColumns "temp" iDataType 10 0 iIdentityType to aColumns
50611>>>            Move True to bDeleteDummy
50612>>>        End
50612>>>>
50612>>>
50612>>>        // If columns have been passed as an array we need to check if an identity column
50612>>>        // has been specified (aColumns[iCounter].iOptions = C_tAPIColumn_Identity), and
50612>>>        // if so auto-set the bRecnum to FALSE. This is because else there would be
50612>>>        // two identity columns and SQL doesn't like that and throws an error.
50612>>>        If (bRecnum = True and (SizeOfArray(aColumns)) <> 0) Begin
50614>>>            Move (SizeOfArray(aColumns)) to iSize
50615>>>            Decrement iSize
50616>>>            for iCount from 0 to iSize
50622>>>>
50622>>>                If (aColumns[iCount].iOptions = C_tAPIColumn_Identity) Begin
50624>>>                    Move False to bRecnum
50625>>>                    Move iSize to iCount
50626>>>                End
50626>>>>
50626>>>            Loop
50627>>>>
50627>>>        End
50627>>>>
50627>>>
50627>>>        // If this is a SQL based driver we also check if the table exists
50627>>>        // in the SQL back end; in case we do nothing.
50627>>>        If (bSqlDriver = True) Begin
50629>>>            // Get all connection properties
50629>>>            Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
50630>>>            Move SQLConnection.sSchema to sSchema
50631>>>            If (sSchema = "") Begin
50633>>>                Get _SqlFindKeyWord CI_SQLDBO to sSchema
50634>>>            End
50634>>>>
50634>>>
50634>>>            Get SqlUtilCheckIfTableHandleExists hTable sDriverID to bExists
50635>>>            // It can happen that the table is missing from Filelist.cfg but still
50635>>>            // exist on the SQL side, in case we want to search for the table by its name.
50635>>>            If (bExists = False) Begin
50637>>>                Get SqlUtilCheckIfTableNameExists sTableName sDriverID to bExists
50638>>>            End
50638>>>>
50638>>>            // If the table exists on the SQL back-end but not in Filelist.cfg,
50638>>>            // we will just add it to Filelist.cfg
50638>>>            If (bExists = True) Begin
50640>>>                If (bExistsInFilelist = False) Begin
50642>>>                    If (sDriverID <> DATAFLEX_ID and not(Uppercase(sRootName) contains sDriverID)) Begin
50644>>>                        Move (sDriverID + ":" + sRootName) to sRootName
50645>>>                    End
50645>>>>
50645>>>                    Set_Attribute DF_FILE_ROOT_NAME     of hTable to sRootName
50648>>>                    Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
50651>>>                    Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
50654>>>                    Move False to bSysFile
50655>>>                    Get SqlUtilCreateIntFile hTable sDriverID SQLConnection.sConnectionID bANSI bSysFile to bOK
50656>>>                End
50656>>>>
50656>>>                Function_Return False
50657>>>            End
50657>>>>
50657>>>        End
50657>>>>
50657>>>
50657>>>        Move CS_ANSI_Txt to sANSI_OEM
50658>>>        If (num_arguments > 6) Begin
50660>>>            If (bANSI = False) Begin
50662>>>                Move CS_OEM_Txt to sANSI_OEM
50663>>>            End
50663>>>>
50663>>>        End
50663>>>>
50663>>>
50663>>>        // Mertech drivers don't use connection id's, so if the passed bUseConnectionID = True that
50663>>>        // is a programmer's error and we auto-correct for it here.
50663>>>        // This is also a bit messy. If a Mertech driver is used and we want to create a new table,
50663>>>        // we first need to create it as embedded (DataFlex) and then convert it to SQL (!)
50663>>>        // So we set the driver ID temporarily to "DataFlex" to get the table created as embedded and later
50663>>>        // set it back and use a Mertech function to convert it to SQL.
50663>>>        Get IsMertechDriver sDriverID to bMertechDriver
50664>>>        If (bMertechDriver = True) Begin
50666>>>            If (bUseConnectionID = True) Begin
50668>>>                Move False to bUseConnectionID
50669>>>            End
50669>>>>
50669>>>            Move sDriverID to sOriginalDriverID
50670>>>            Move DATAFLEX_ID to sDriverID
50671>>>        End
50671>>>>
50671>>>
50671>>>        Move False to Err
50672>>>        If (sDriverID = DATAFLEX_ID) Begin
50674>>>            Move sRootName to sPhysicalFile
50675>>>        End
50675>>>>
50675>>>
50675>>>        If (sDriverID <> DATAFLEX_ID) Begin
50677>>>            Move SQLConnection.sConnectionID to sConnectionID
50678>>>
50678>>>            // If DAW driver and we should use a connection id we need to
50678>>>            // check if the connection ID exists; else we create it before attempting creating the table
50678>>>            If (bMertechDriver = False and bUseConnectionID = True) Begin
50680>>>                Get IsConnectionID sConnectionID sDriverID to bExists
50681>>>                If (bExists = False) Begin
50683>>>                    Get AutoSetConnectionID sConnectionID to bOk
50684>>>                    If (bOk = False) Begin
50686>>>                        Error DFERR_PROGRAM ("The Connection ID:" * sConnectionID * "could not be created and therefor the table can't be created.")
50687>>>>
50687>>>                        Function_Return False
50688>>>                    End
50688>>>>
50688>>>                End
50688>>>>
50688>>>            End
50688>>>>
50688>>>
50688>>>            If (sDriverID <> DATAFLEX_ID and (Uppercase(sRootName) contains sDriverID)) Begin
50690>>>                Move (sTableName + ".int") to sPhysicalFile
50691>>>            End
50691>>>>
50691>>>            Else Begin
50692>>>                Move (sRootName + ".int") to sPhysicalFile
50693>>>            End
50693>>>>
50693>>>            Move (Uppercase(sDisplayName)) to sVal
50694>>>//            If (not(sVal contains (sSchema + "."))) Begin
50694>>>//                Move (Lowercase(sSchema) + "." + sTableName) to sDisplayName
50694>>>//            End
50694>>>        End
50694>>>>
50694>>>        Move False to Err
50695>>>        Move 0 to hFile
50696>>>
50696>>>        Structure_Start hFile sDriverID
50697>>>            If (sDriverID <> DATAFLEX_ID) Begin
50699>>>                If (bUseConnectionID = True) Begin
50701>>>                    Set_Attribute DF_FILE_LOGIN                of hFile to (CS_DFCONNID + "=" + sConnectionID)
50704>>>                End
50704>>>>
50704>>>                Else Begin
50705>>>                    Set_Attribute DF_FILE_LOGIN                of hFile to SQLConnection.sConnectionString
50708>>>                End
50708>>>>
50708>>>                Set_Attribute DF_FILE_TABLE_NAME               of hFile to sTableName
50711>>>                Set_Attribute DF_FILE_USE_DUMMY_ZERO_DATE      of hFile to True
50714>>>                Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT   of hFile to sANSI_OEM
50717>>>                Set_Attribute DF_FILE_RECNUM_TABLE             of hFile to bRecnum
50720>>>
50720>>>                If (sSchema <> "") Begin
50722>>>                    Set_Attribute DF_FILE_OWNER                of hFile to sSchema
50725>>>                End
50725>>>>
50725>>>
50725>>>                If (sDriverID = DB2_DRV_ID) Begin
50727>>>                    If (SQLConnection.sLongTableSpace <> "") Begin
50729>>>                        Set_Attribute DF_FILE_LONG_TABLESPACE  of hFile to SQLConnection.sLongTableSpace
50732>>>                    End
50732>>>>
50732>>>                End
50732>>>>
50732>>>                If (sDriverID = DB2_DRV_ID or sDriverID = ORAFLEX or sDriverID = MDSPgSQL) Begin
50734>>>                    If (SQLConnection.sBaseTableSpace <> "") Begin
50736>>>                        Set_Attribute DF_FILE_TABLE_TABLESPACE of hFile to SQLConnection.sBaseTableSpace
50739>>>                    End
50739>>>>
50739>>>                    If (SQLConnection.sIndexTableSpace <> "") Begin
50741>>>                        Set_Attribute DF_FILE_INDEX_TABLESPACE of hFile to SQLConnection.sIndexTableSpace
50744>>>                    End
50744>>>>
50744>>>                End
50744>>>>
50744>>>            End
50744>>>>
50744>>>
50744>>>            Set_Attribute DF_FILE_PHYSICAL_NAME of hFile to sPhysicalFile
50747>>>            Get ApiColumnsAddToTable hFile aColumns True to bOk
50748>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
50749>>>        Structure_End hFile DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
50751>>>        Set Action_Text of ghoStatusPanel to ""
50752>>>
50752>>>        // If Mertech driver we convert the newly created embedded table (DataFlex) to SQL
50752>>>        If (bMertechDriver = True) Begin
50754>>>            Move sOriginalDriverID to sDriverID
50755>>>            If (not(sVal contains (sSchema + "."))) Begin
50757>>>                Move (Lowercase(sSchema) + "." + sTableName) to sDisplayName
50758>>>            End
50758>>>>
50758>>>            // Note: This function also sets the Err flag.
50758>>>            //Get _MertechApiTableConvertToSQL hTable sRootName SQLConnection.sDatabase sDriverID SQLConnection.sBaseTableSpace SQLConnection.sIndexTableSpace False to bOK
50758>>>        End
50758>>>>
50758>>>
50758>>>        Move (not(Err)) to bOK
50759>>>        If (bOk = True) Begin
50761>>>            If (sDriverID <> DATAFLEX_ID and not(Uppercase(sRootName) contains sDriverID)) Begin
50763>>>                Move (sDriverID + ":" + sRootName) to sRootName
50764>>>            End
50764>>>>
50764>>>            Set_Attribute DF_FILE_ROOT_NAME     of hTable to sRootName
50767>>>            Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
50770>>>            Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
50773>>>
50773>>>            // Lastly we remove the temporary column we created above, if all went well.
50773>>>            If (bDeleteDummy) Begin
50775>>>                Get ApiColumnRemove hTable "temp" to bOk
50776>>>            End
50776>>>>
50776>>>        End
50776>>>>
50776>>>
50776>>>        Set TableName_Text of ghoStatusPanel to ""
50777>>>        Close hTable
50778>>>        Function_Return (bOK = True)
50779>>>    End_Function
50780>>>
50780>>>    Function ApiTableCreateAlias String sFileName String sDisplayName String sAliasName Integer iFilelistSlot Returns Boolean
50782>>>        Move False to Err
50783>>>        Set_Attribute DF_FILE_ROOT_NAME     of iFilelistSlot to sFileName
50786>>>        Set_Attribute DF_FILE_DISPLAY_NAME  of iFilelistSlot to sDisplayName
50789>>>        Set_Attribute DF_FILE_LOGICAL_NAME  of iFilelistSlot to sAliasName
50792>>>
50792>>>        Function_Return (Err = False)
50793>>>    End_Function
50794>>>
50794>>>    // ToDo: Needs to be revised
50794>>>    Procedure ApiTableCreateFromDEF String sPath String sFileName String sTableName String sDisplayName Integer iFilelistSlot
50796>>>        Handle hTable
50796>>>        String sDEFName sDataPath
50796>>>        Boolean bExists
50796>>>
50796>>>        // Do nothing if MSSQL Driver.
50796>>>//        Get IsMSSQLDriver to bExists
50796>>>//        If (bExists = True) Begin
50796>>>//            Procedure_Return
50796>>>//        End
50796>>>
50796>>>        Get psDataPathFirstPart to sDataPath
50797>>>        Get vFilePathExists (sDataPath + sFileName + ".dat") to bExists
50798>>>        If (bExists = True) Begin
50800>>>            // We also needs to check if it is an Alias file, in case the sFileName.dat exists, but it may
50800>>>            // still be missing from the filelist and needs to be added.
50800>>>            Get UtilTableNumberIsInUse iFilelistSlot to bExists
50801>>>            If (bExists = True) Begin
50803>>>                Procedure_Return
50804>>>            End
50804>>>>
50804>>>            // Do _not_ use the DEF file if an alias, it will overwrite the base table data.
50804>>>            Else Begin
50805>>>                Set_Attribute DF_FILE_ROOT_NAME    of iFilelistSlot to sFileName
50808>>>                Set_Attribute DF_FILE_LOGICAL_NAME of iFilelistSlot to sTableName
50811>>>                Set_Attribute DF_FILE_DISPLAY_NAME of iFilelistSlot to sDisplayName
50814>>>                Procedure_Return
50815>>>            End
50815>>>>
50815>>>        End
50815>>>>
50815>>>
50815>>>        Move (sPath + sFileName + ".def") to sDEFName
50816>>>        Move 0 to hTable
50817>>>        Move False to Err
50818>>>
50818>>>        Structure_Start hTable DATAFLEX_ID
50819>>>            Load_Def sDEFName Onto hTable
50820>>>            Set_Attribute DF_FILE_PHYSICAL_NAME of hTable to sFileName
50823>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
50824>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
50826>>>        Set Action_Text of ghoStatusPanel to ""
50827>>>
50827>>>        Move iFilelistSlot to hTable
50828>>>        Set_Attribute DF_FILE_ROOT_NAME    of hTable to sFileName
50831>>>        Set_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
50834>>>        Set_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
50837>>>
50837>>>    End_Procedure
50838>>>
50838>>>    Function ApiTableMoveToFileSlot Integer iFromFileSlot Integer iToFileSlot String sDriverID Returns Boolean
50840>>>        Boolean bTmp bErr bOK
50840>>>        String sTableName sDisplayName sFileName
50840>>>
50840>>>        // We preserve the value of the Err flag, by saving its current state and resetting it before end of function.
50840>>>        Move Err to bTmp
50841>>>        Move False to Err
50842>>>
50842>>>        Get AutoConnectionIDLogin to bOK
50843>>>        // First get the info for the current filelist slot:
50843>>>        Open iFromFileSlot
50845>>>        Get_Attribute DF_FILE_OPENED of iFromFileSlot to bOK
50848>>>        If (bOK = True) Begin
50850>>>            Get_Attribute DF_FILE_ROOT_NAME    of iFromFileSlot to sFileName
50853>>>            Get_Attribute DF_FILE_LOGICAL_NAME of iFromFileSlot to sTableName
50856>>>            Get_Attribute DF_FILE_DISPLAY_NAME of iFromFileSlot to sDisplayName
50859>>>
50859>>>            //...then move it.
50859>>>            Set_Attribute DF_FILE_ROOT_NAME    of iToFileSlot to sFileName
50862>>>            Set_Attribute DF_FILE_LOGICAL_NAME of iToFileSlot to sTableName
50865>>>            Set_Attribute DF_FILE_DISPLAY_NAME of iToFileSlot to sDisplayName
50868>>>
50868>>>            //...and finally remove the old filelist values.
50868>>>            Set_Attribute DF_FILE_ROOT_NAME    of iFromFileSlot to ""
50871>>>            Set_Attribute DF_FILE_LOGICAL_NAME of iFromFileSlot to ""
50874>>>            Set_Attribute DF_FILE_DISPLAY_NAME of iFromFileSlot to ""
50877>>>        End
50877>>>>
50877>>>        Close iFromFileSlot
50878>>>
50878>>>        Move Err to bErr
50879>>>        Move bTmp to Err
50880>>>        Function_Return (bErr = False)
50881>>>    End_Function
50882>>>
50882>>>    Function ApiTableRelate Handle hTableFrom Handle hTableTo Integer iColumnFrom Integer iColumnTo Returns Boolean
50884>>>        Handle hTable
50884>>>        Boolean bOK
50884>>>        String sDriverID
50884>>>
50884>>>        Get UtilTableExists hTableFrom to bOK
50885>>>        If (bOK = False) Begin
50887>>>            Set Private.phCurrentTable to hTableFrom
50888>>>            Error DFERR_PROGRAM "Table exists in Filelist.cfg but not on disk or SQL back-end."
50889>>>>
50889>>>            Function_Return False
50890>>>        End
50890>>>>
50890>>>
50890>>>        Get UtilTableExists hTableTo to bOK
50891>>>        If (bOK = False) Begin
50893>>>            Set Private.phCurrentTable to hTableTo
50894>>>            Error DFERR_PROGRAM "Table exists in Filelist.cfg but not on disk or SQL back-end."
50895>>>>
50895>>>            Function_Return False
50896>>>        End
50896>>>>
50896>>>
50896>>>        Get AutoConnectionIDLogin to bOK
50897>>>        Get UtilTableOpen hTableFrom "" DF_EXCLUSIVE to bOK
50898>>>        If (bOK = False) Begin
50900>>>            Function_Return False
50901>>>        End
50901>>>>
50901>>>
50901>>>        Move False to Err
50902>>>        Open hTableTo
50904>>>
50904>>>        Move hTableFrom to hTable
50905>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
50908>>>        Set Private.phCurrentTable to hTable
50909>>>
50909>>>        Structure_Start hTable sDriverID
50910>>>            Set_Attribute DF_FIELD_RELATED_FILE of hTable iColumnFrom to hTableTo
50913>>>            If (iColumnTo <> 0) Begin
50915>>>                Set_Attribute DF_FIELD_RELATED_FIELD of hTable iColumnFrom to iColumnTo
50918>>>            End
50918>>>>
50918>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
50919>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
50921>>>        Set Action_Text of ghoStatusPanel to ""
50922>>>
50922>>>        If (hTableTo > 0) Begin
50924>>>            Close hTableTo
50925>>>        End
50925>>>>
50925>>>
50925>>>        Function_Return (Err = False)
50926>>>    End_Function
50927>>>
50927>>>    // Removes the passed table name completely from disk, filelist (& Sql Server if an Sql-driver)
50927>>>    Function ApiTableRemove Handle hTable Returns Boolean
50929>>>        String sTableName sDriverID
50929>>>        Boolean bOk
50929>>>        String sDataPath
50929>>>
50929>>>        Get AutoConnectionIDLogin to bOK
50930>>>        Move False to Err
50931>>>        Get psDriverID to sDriverID
50932>>>        Get UtilTableHandleToString hTable sDriverID to sTableName
50933>>>        If (sTableName = "") Begin
50935>>>            Function_Return False
50936>>>        End
50936>>>>
50936>>>
50936>>>        Set Private.phCurrentTable to hTable
50937>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_DELETE_FILE
50938>>>        Delete_db sTableName
50939>>>        Send Trap_Error of Error_Object_Id DFERR_CANT_DELETE_FILE
50940>>>
50940>>>        If (sDriverID <> DATAFLEX_ID) Begin
50942>>>//            Get SqlTableRemoveByTableName sTableName to bOk  // We don't have to do this because the database is already removed by 'delete_db' above
50942>>>            Get psDataPathFirstPart to sDataPath
50943>>>            Get vDeleteFile (sDataPath + sTableName + ".int") to bOk
50944>>>        End
50944>>>>
50944>>>        // Also remove table from filelist.cfg in case the physical file didn't exist.
50944>>>        If (hTable <> 0) Begin
50946>>>            Set_Attribute DF_FILE_ROOT_NAME     of hTable to ""
50949>>>            Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to ""
50952>>>            Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to ""
50955>>>        End
50955>>>>
50955>>>
50955>>>        Close hTable
50956>>>        Function_Return (hTable <> 0)
50957>>>    End_Function
50958>>>
50958>>>    Function ApiTableRemoveRelation Handle hTableFrom Integer iColumn Returns Boolean
50960>>>        Handle hTable
50960>>>        Boolean bOK
50960>>>
50960>>>        Get AutoConnectionIDLogin to bOK
50961>>>        Move False to Err
50962>>>        Open hTableFrom Mode DF_EXCLUSIVE
50964>>>        Move hTableFrom to hTable
50965>>>
50965>>>        Structure_Start hTable
50966>>>            Set_Attribute DF_FIELD_RELATED_FILE of hTable iColumn to 0
50969>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
50970>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
50972>>>        Set Action_Text of ghoStatusPanel to ""
50973>>>
50973>>>        Close hTableFrom
50974>>>        Function_Return (Err = False)
50975>>>    End_Function
50976>>>
50976>>>    Function ApiTableRename Handle hTable String sRootName String sDisplayName String sLogicalName Returns Boolean
50978>>>        String sPhysicalName sRootNameTo sLogicalNameTo sDataPath sDriverID sSchema sPhysicalNameTo
50978>>>        Boolean bOK bExists bOpened
50978>>>        tAPITableNameInfo APITableNameInfo
50978>>>        tAPITableNameInfo APITableNameInfo
50978>>>
50978>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
50981>>>        If (bOpened = False) Begin
50983>>>            Get OpenTableExclusive hTable to bOpened
50984>>>            If (bOpened = False) Begin
50986>>>                Send UserError DFERR_PROGRAM ("Could not open table number:" * String(hTable) * "Table could not be updated.")
50987>>>                Function_Return False
50988>>>            End
50988>>>>
50988>>>        End
50988>>>>
50988>>>
50988>>>        Set Private.phCurrentTable to hTable
50989>>>        Move hTable         to APITableNameInfo.iTableNumber
50990>>>        Move sRootName      to APITableNameInfo.sRootName
50991>>>        Move sLogicalName   to APITableNameInfo.sLogicalName
50992>>>        Move sDisplayName   to APITableNameInfo.sDisplayName
50993>>>        Get ApiTableFilelistNamesCompare True APITableNameInfo to bExists
50994>>>        If (bExists = True) Begin
50996>>>            Function_Return True
50997>>>        End
50997>>>>
50997>>>
50997>>>        Set Private.phCurrentTable to hTable
50998>>>        Move False to Err
50999>>>        Get psDataPathFirstPart to sDataPath
51000>>>        Get_Attribute DF_FILE_PHYSICAL_NAME of hTable to sPhysicalName
51003>>>        Get_Attribute DF_FILE_ROOT_NAME     of hTable to sRootNameTo
51006>>>        Get_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalNameTo
51009>>>
51009>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
51012>>>        Close hTable
51013>>>        If (sDriverID = DATAFLEX_ID) Begin
51015>>>            Get vFilePathExists (sDataPath + sRootNameTo + ".dat") to bExists
51016>>>            If (bExists = True) Begin
51018>>>                If (Uppercase(sRootName) <> Uppercase(sRootNameTo)) Begin
51020>>>                    Copy_db (sDataPath + sRootNameTo) to (sDataPath + sRootName)
51023>>>                    // We need a short break here before attempting to delete the physical old files or Windows
51023>>>                    // might report "File in use..." and the deletion will fail.
51023>>>                    Sleep 2
51024>>>                    Get vDeleteFile (sDataPath + sRootNameTo + ".*") to bOK
51025>>>                End
51025>>>>
51025>>>            End
51025>>>>
51025>>>        End
51025>>>>
51025>>>
51025>>>        If (sDriverID <> DATAFLEX_ID) Begin
51027>>>            If (not(sPhysicalName contains ".")) Begin
51029>>>                Move (sPhysicalName + String(".int")) to sPhysicalName
51030>>>            End
51030>>>>
51030>>>
51030>>>            // Change the table name in the .int file to the new table new:
51030>>>            Get UtilChangeSourceCodeLine (sDataPath + sPhysicalName) (CS_DATABASE_NAME * String(sLogicalNameTo)) (CS_DATABASE_NAME * String(sLogicalName)) False to bOK
51031>>>            If (bOK = False) Begin
51033>>>                Function_Return False
51034>>>            End
51034>>>>
51034>>>
51034>>>            // Change table name at the SQL side:
51034>>>            Get psSchema to sSchema
51035>>>            Get SqlTableRename hTable sLogicalNameTo sLogicalName to bOK
51036>>>
51036>>>            Get _TableNameOnly sRootName to sPhysicalNameTo
51037>>>            // Remove cache file and Rename the physical file names:
51037>>>            Get vDeleteFile (sDataPath + sPhysicalNameTo + ".cch")                                  to bOK
51038>>>            Get vRenameFile (sDataPath + sPhysicalName)            (sDataPath + sRootName + ".int") to bOK
51039>>>            Get vRenameFile (sDataPath + sPhysicalNameTo + ".tag") (sDataPath + sRootName + ".tag") to bOK
51040>>>            Move (sDriverID + ":" + sRootName) to sRootName
51041>>>
51041>>>            // The Studio no longer adds the schema to the DISPLAY_NAME, so commented out.
51041>>>//            If (not(sDisplayName contains ".")) Begin
51041>>>//                Move (sSchema + "." + sDisplayName) to sDisplayName
51041>>>//            End
51041>>>        End
51041>>>>
51041>>>
51041>>>        Set_Attribute DF_FILE_ROOT_NAME     of hTable to sRootName
51044>>>        Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
51047>>>        Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
51050>>>
51050>>>        Function_Return (Err = False)
51051>>>    End_Function
51052>>>
51052>>>    Function ApiTableRenameAlias Integer hTable String sDisplayName String sLogicalName Returns Boolean
51054>>>        Move False to Err
51055>>>        Set Private.phCurrentTable to hTable
51056>>>        Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
51059>>>        Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
51062>>>
51062>>>        Function_Return (Err = False)
51063>>>    End_Function
51064>>>
51064>>>    // Compares the RootName, LogicalName & DisplayName and returns True if they are equal.
51064>>>    // Note that it first removes any driver prefixes in the rootname.
51064>>>    Function ApiTableFilelistNamesCompare Boolean bCompareFilelistUppercase tAPITableNameInfo APITableInfo Returns Boolean
51066>>>        String sRootNameFrom sRootNameTo sDisplayNameTo sLogicalNameTo
51066>>>        Handle hTable
51066>>>        Boolean bIsSame
51066>>>
51066>>>        Move APITableInfo.iTableNumber      to hTable
51067>>>        Get _TableNameOnly APITableInfo.sRootName     to sRootNameFrom
51068>>>        Get_Attribute DF_FILE_ROOT_NAME     of hTable to sRootNameTo
51071>>>        Get _TableNoPrefix sRootNameTo                to sRootNameTo
51072>>>        Get_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalNameTo
51075>>>        Get_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayNameTo
51078>>>        Get _TableNoPrefix sDisplayNameTo             to sDisplayNameTo
51079>>>
51079>>>        If (bCompareFilelistUppercase = True) Begin
51081>>>            Move (Uppercase(sRootNameFrom) = Uppercase(sRootNameTo) and Uppercase(APITableInfo.sLogicalName) = Uppercase(sLogicalNameTo) and ;                  Uppercase(APITableInfo.sDisplayName) = Uppercase(sDisplayNameTo)) to bIsSame
51082>>>        End
51082>>>>
51082>>>        Else Begin
51083>>>            Move (sRootNameFrom = sRootNameTo and APITableInfo.sLogicalName = sLogicalNameTo and APITableInfo.sDisplayName = sDisplayNameTo) to bIsSame
51084>>>        End
51084>>>>
51084>>>
51084>>>        Function_Return bIsSame
51085>>>    End_Function
51086>>>
51086>>>    // Note: This table update function does _not_ convert an embedded table to SQL. Use function ApiTableConvertToSQL first for that.
51086>>>    Function ApiTableUpdate tAPITableNameInfo APITableNameInfoFrom tAPIColumn[] aColumnsFrom tAPIIndex[] aIndexesFrom tAPIRelation[] aRelationsFrom Returns Boolean
51088>>>        Handle hTable
51088>>>        String sTableName
51088>>>        String sDriverIDFrom sDriverIDTo
51088>>>        Integer iDbType
51088>>>        Boolean bOk bMertechDriver bOpened bApiTableUpdateAuto
51088>>>        Boolean bUseConnectionID bToANSI bRecnum bCopyData bCompareDate_DateTime bCompareIndexAscending bCompareIndexUppercase bTableExists
51088>>>        Boolean bIsSame bFilelistError bIsAliasFrom bIsSQLTableFrom bIsSQLTableTo
51088>>>        tSQLConnection SQLConnection
51088>>>        tSQLConnection SQLConnection
51088>>>        tAPITable      APITableFrom APITableTo
51088>>>        tAPITable      APITableFrom APITableTo
51088>>>        tColumnType    ColumnType
51088>>>        tColumnType    ColumnType
51088>>>        tAPIColumnCompare[]   aAPIColumnCompare
51088>>>        tAPIColumnCompare[]   aAPIColumnCompare
51089>>>        tAPIIndexCompare[]    aAPIIndexCompare
51089>>>        tAPIIndexCompare[]    aAPIIndexCompare
51090>>>        tAPIRelationCompare[] aAPIRelationCompare
51090>>>        tAPIRelationCompare[] aAPIRelationCompare
51091>>>
51091>>>        // We don't allow changes to the framework's DbVersion table.
51091>>>        If (Lowercase(sTableName) = "dbversion") Begin
51093>>>            Function_Return False
51094>>>        End
51094>>>>
51094>>>
51094>>>        Move APITableNameInfoFrom.sDriverID     to sDriverIDFrom
51095>>>        Get piDbType                            to iDbType
51096>>>        Get pbRecnum                            to bRecnum
51097>>>        Get pbToANSI                            to bToANSI
51098>>>        Get pbCopyData                          to bCopyData
51099>>>        Get pbApiTableUpdateAuto                to bApiTableUpdateAuto
51100>>>        Get pbCompareDate_DateTime              to bCompareDate_DateTime
51101>>>        Get pbCompareIndexAscending             to bCompareIndexAscending
51102>>>        Get pbCompareIndexUppercase             to bCompareIndexUppercase
51103>>>        Get IsMertechDriver sDriverIDFrom       to bMertechDriver
51104>>>        Get pbUseConnectionID                   to bUseConnectionID
51105>>>        If (bMertechDriver = True and bUseConnectionID = True) Begin
51107>>>            Move False                          to bUseConnectionID
51108>>>        End
51108>>>>
51108>>>
51108>>>        Move APITableNameInfoFrom.iTableNumber  to hTable
51109>>>        Set Private.phCurrentTable              to hTable
51110>>>        Get UtilTableExists  hTable             to bTableExists
51111>>>
51111>>>        If (ghoProgressBar <> 0) Begin
51113>>>            Send DoAdvance of ghoProgressBar
51114>>>            Set TableName_Text of ghoStatusPanel to ("Checking Table:" * "Number:" * String(hTable) * String(APITableNameInfoFrom.sLogicalName))
51115>>>            Set Message_Text   of ghoStatusPanel to ""
51116>>>            Set Action_Text    of ghoStatusPanel to ""
51117>>>        End
51117>>>>
51117>>>
51117>>>        Move APITableNameInfoFrom.bIsAlias      to bIsAliasFrom
51118>>>        Move APITableNameInfoFrom.bIsSQL        to bIsSQLTableFrom
51119>>>        Get UtilTableIsSQL hTable               to bIsSQLTableTo
51120>>>        Get UtilDriverFromTableNumber hTable    to sDriverIDTo
51121>>>        Move True                               to APITableFrom.bFromTable
51122>>>        Move hTable                             to APITableFrom.hTable
51123>>>        Move APITableNameInfoFrom               to APITableFrom.ApiTableInfo
51124>>>        Move aColumnsFrom                       to APITableFrom.aApiColumns
51125>>>        Move aIndexesFrom                       to APITableFrom.aApiIndexes
51126>>>        Move aRelationsFrom                     to APITableFrom.aApiRelations
51127>>>
51127>>>        If (bIsSQLTableFrom = True and bIsSQLTableTo = False) Begin
51129>>>            Get SqlUtilCheckIfTableHandleExists hTable sDriverIDFrom to bOk
51130>>>            If (bOk = True) Begin
51132>>>                Get ApiTableAttachToSql hTable True to bOk
51133>>>                Function_Return bOk
51134>>>            End 
51134>>>>
51134>>>        End
51134>>>>
51134>>>
51134>>>        If (bTableExists = True) Begin
51136>>>            If (bIsSQLTableTo = True) Begin
51138>>>                Get UtilDeleteCacheFile APITableFrom.ApiTableInfo.sLogicalName to bOk
51139>>>            End
51139>>>>
51139>>>
51139>>>            Get OpenTableExclusive hTable to bOpened
51140>>>            If (bOpened = False) Begin
51142>>>                Send UserError DFERR_PROGRAM ("Could not open table number:" * String(hTable) * "Table could not be updated.")
51143>>>                Function_Return False
51144>>>            End
51144>>>>
51144>>>            Get UtilTableStructFill hTable False                                                        to APITableTo
51145>>>            Get UtilColumnCombineFromAndToArrays   APITableFrom.aApiColumns   APITableTo.aApiColumns    to aAPIColumnCompare
51146>>>            Get UtilIndexCombineFromAndToArrays    APITableFrom.aApiIndexes   APITableTo.aApiIndexes    to aAPIIndexCompare
51147>>>            Get UtilRelationCombineFromAndToArrays APITableFrom.aApiRelations APITableTo.aApiRelations  to aAPIRelationCompare
51148>>>        End
51148>>>>
51148>>>
51148>>>        Move False to Err
51149>>>        Case Begin
51149>>>            // Alias table:
51149>>>            Case (bIsAliasFrom = True)
51151>>>                Get _UtilTableCheckChangeFilelistNames APITableNameInfoFrom to bOk
51152>>>                Case Break
51153>>>
51153>>>            // New Table:
51153>>>            Case (bTableExists = False)
51156>>>                Get ApiTableCreate      hTable APITableNameInfoFrom.sRootName APITableNameInfoFrom.sDisplayName APITableNameInfoFrom.sLogicalName bUseConnectionID bToANSI bRecnum aColumnsFrom to bOk
51157>>>                //LR 20191112 Begin: Make file a system file if bIsSystemFile = True
51157>>>                If (APITableNameInfoFrom.bIsSystemFile) Begin
51159>>>                    Get ApiTableChangeAttribute of ghoDbUpdateFunctionLibrary hTable DF_FILE_IS_SYSTEM_FILE True to bOK
51160>>>                End                                                                 
51160>>>>
51160>>>                Get UtilIndexesUpdate   hTable bIsSQLTableFrom bIsSQLTableTo APITableFrom.aApiIndexes APITableTo.aApiIndexes bCompareIndexUppercase bCompareIndexAscending  to bOk
51161>>>                Get UtilRelationsUpdate hTable APITableFrom.aApiRelations APITableTo.aApiRelations to bOk
51162>>>                Case Break
51163>>>
51163>>>            // Update table:
51163>>>            Case (bTableExists = True)
51166>>>                Get UtilTableCompare APITableFrom APITableTo False (&bFilelistError) to bIsSame
51167>>>                If (bIsSame = True) Begin
51169>>>                    Case Break
51170>>>                End
51170>>>>
51170>>>                If (bFilelistError = True) Begin
51172>>>                    Get ApiTableRename hTable APITableNameInfoFrom.sRootName APITableNameInfoFrom.sDisplayName APITableNameInfoFrom.sLogicalName to bOk
51173>>>                    If (bOk = False) Begin
51175>>>                        Case Break
51176>>>                    End
51176>>>>
51176>>>                End
51176>>>>
51176>>>
51176>>>                If (ghoProgressBar <> 0) Begin
51178>>>                    Send DoAdvance of ghoProgressBar
51179>>>                    Set TableName_Text of ghoStatusPanel to ("Updating Table:" * "Number:" * String(hTable) * String(APITableNameInfoFrom.sLogicalName))
51180>>>                End
51180>>>>
51180>>>
51180>>>                // Columns:
51180>>>                Move True to bOk
51181>>>                Get UtilColumnsCompare sDriverIDFrom sDriverIDTo bIsSQLTableFrom bIsSQLTableTo aAPIColumnCompare bCompareDate_DateTime to bIsSame
51182>>>                If (bIsSame = False) Begin
51184>>>                    Get ApiColumnsUpdate sDriverIDFrom hTable bIsSQLTableFrom APITableFrom.aApiColumns APITableTo.aApiColumns bCompareDate_DateTime to bOk
51185>>>                End
51185>>>>
51185>>>                If (bOk = False) Begin
51187>>>                    Case Break
51188>>>                End
51188>>>>
51188>>>
51188>>>                // Indexes:
51188>>>                Get UtilIndexesCompare bIsSQLTableFrom bIsSQLTableTo aAPIIndexCompare bCompareIndexUppercase bCompareIndexAscending to bIsSame
51189>>>                If (bIsSame = False) Begin
51191>>>                    Get UtilIndexesUpdate hTable bIsSQLTableFrom bIsSQLTableTo APITableFrom.aApiIndexes APITableTo.aApiIndexes bCompareIndexUppercase bCompareIndexAscending  to bOk
51192>>>                End
51192>>>>
51192>>>
51192>>>                // Relations:
51192>>>                Get UtilRelationsCompare hTable aAPIRelationCompare to bIsSame
51193>>>                If (bIsSame = False) Begin
51195>>>                    Get UtilRelationsUpdate hTable APITableFrom.aApiRelations APITableTo.aApiRelations to bOk
51196>>>                    If (bOk = False) Begin
51198>>>                        Case Break
51199>>>                    End
51199>>>>
51199>>>                End
51199>>>>
51199>>>
51199>>>                Case Break
51200>>>
51200>>>            Case Else
51200>>>                Error DFERR_PROGRAM "Unknown Case structure exit in Function ApiTableUpdate"
51201>>>>
51201>>>                Move False to bOk
51202>>>        Case End
51202>>>        
51202>>>        // Note: If the from table was SQL; we should either connect to an existing SQL to table,
51202>>>        // or convert an embedded table to SQL
51202>>>        If (bIsSQLTableFrom = True and bIsSQLTableTo = False) Begin
51204>>>            Get SqlUtilCheckIfTableHandleExists hTable sDriverIDFrom to bOk
51205>>>            If (bOk = False) Begin
51207>>>                Get ApiTableConvertToSql_Ex hTable sDriverIDFrom bUseConnectionID bToANSI bRecnum bCopyData to bOK
51208>>>            End
51208>>>>
51208>>>        End
51208>>>>
51208>>>        Else If (bIsSQLTableFrom = False and bIsSQLTableTo = True) Begin
51211>>>            Get SqlTableConvertToEmbedded hTable True to bOk
51212>>>        End
51212>>>>
51212>>>        
51212>>>        // Filelist Names:
51212>>>        Get _UtilTableCheckChangeFilelistNames APITableNameInfoFrom to bOk
51213>>>        Close hTable
51214>>>        Set TableName_Text of ghoStatusPanel to ""
51215>>>
51215>>>        Function_Return (bOK = True)
51216>>>    End_Function
51217>>>
51217>>>    // * Dummy function for the Studio's Code Explorer *
51217>>>    Function API_COLUMN_FUNCTIONS Returns Boolean
51219>>>        Function_Return False
51220>>>    End_Function
51221>>>
51221>>>    // Adds a column name to the passed table number.
51221>>>    Function ApiColumnAdd Handle hTable String sFieldName Integer iType Integer iLength Integer iPrec Boolean bInitVal String sColVal Returns Boolean
51223>>>        Integer iColumn iCount iFile iPrecision iLastErr
51223>>>        Boolean bExists bOK bInitializeValue bRetval bMertechDriver
51223>>>        String sDataPath sDdSrcPath sTableName sColumnValue sDriverID
51223>>>
51223>>>        Get UtilColumnExists hTable sFieldName to bExists
51224>>>        If (bExists = True) Begin
51226>>>            Function_Return False
51227>>>        End
51227>>>>
51227>>>
51227>>>        Move False to Err
51228>>>        If (num_arguments > 4) Begin
51230>>>            Move iPrec to iPrecision
51231>>>        End
51231>>>>
51231>>>        If (num_arguments > 6) Begin
51233>>>            Move bInitVal to bInitializeValue
51234>>>            Move sColVal  to sColumnValue
51235>>>        End
51235>>>>
51235>>>        If (iType < -1490) Begin
51237>>>            Move (iType + 1500) to iType
51238>>>        End
51238>>>>
51238>>>
51238>>>        Move hTable to iFile
51239>>>        Get psDriverID to sDriverID
51240>>>        Get IsMertechDriver sDriverID to bMertechDriver
51241>>>        Get AutoConnectionIDLogin to bOK
51242>>>        Move False to Err
51243>>>        Move LastErr to iLastErr
51244>>>        Open iFile Mode DF_EXCLUSIVE
51246>>>        Set Private.phCurrentTable to hTable
51247>>>        Structure_Start iFile sDriverID
51248>>>            Move 0 to iColumn
51249>>>            Set Private.piCurrentField to iColumn
51250>>>            Create_Field hTable At iColumn
51251>>>            Set_Attribute DF_FIELD_NAME      of iFile iColumn to sFieldName
51254>>>            If (bMertechDriver = True) Begin
51256>>>                Set Error_Report_Mode to DUF_ERROR_NO_REPORT
51257>>>                Send Ignore_Error of Error_Object_Id DFERR_BAD_ATTRIBUTE_VALUE
51258>>>            End
51258>>>>
51258>>>            Set_Attribute DF_FIELD_TYPE      of iFile iColumn to iType
51261>>>            If (bMertechDriver = True) Begin
51263>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
51264>>>                Send Trap_Error of Error_Object_Id DFERR_BAD_ATTRIBUTE_VALUE
51265>>>                Move False to Err
51266>>>                Move iLastErr to LastErr
51267>>>            End
51267>>>>
51267>>>            Set_Attribute DF_FIELD_LENGTH    of iFile iColumn to (iLength + iPrecision)
51270>>>            Set_Attribute DF_FIELD_PRECISION of iFile iColumn to iPrecision
51273>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
51274>>>        Structure_End iFile DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
51276>>>
51276>>>        Set Action_Text of ghoStatusPanel to ""
51277>>>
51277>>>        // If in development environment; create .fd file:
51277>>>        Open hTable
51279>>>        Get psDdSrcPath  of (phoWorkspace(ghoApplication)) to sDDSrcPath
51280>>>        Get CountOfPaths of (phoWorkspace(ghoApplication)) sDDSrcPath to iCount
51281>>>        If (iCount > 1) Begin
51283>>>            Get PathAtIndex of (phoWorkspace(ghoApplication)) sDDSrcPath 1 to sDDSrcPath
51284>>>        End
51284>>>>
51284>>>        Get vFolderExists sDDSrcPath to bExists
51285>>>        If (bExists = True) Begin
51287>>>            Get vFolderFormat sDDSrcPath to sDDSrcPath
51288>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sTableName
51291>>>            Get _TableNameOnly sTableName to sTableName
51292>>>            Output_Aux_File DF_AUX_FILE_FD for hTable to (sDDSrcPath + sTableName + ".fd")
51294>>>        End
51294>>>>
51294>>>        If (sDriverID = DATAFLEX_ID) Begin  // We only want a tag if DataFlex embedded db
51296>>>            Get psDataPath  of (phoWorkspace(ghoApplication)) to sDataPath
51297>>>            Get CountOfPaths of (phoWorkspace(ghoApplication)) sDataPath to iCount
51298>>>            If (iCount > 1) Begin
51300>>>                Get PathAtIndex of (phoWorkspace(ghoApplication)) sDataPath 1 to sDataPath
51301>>>            End
51301>>>>
51301>>>            Get vFolderFormat sDataPath to sDataPath
51302>>>            // Add the new column name to the .tag filen (if it doesn't exist):
51302>>>            // The following line should not be necexxary for the DataFlex driver. (Thank you, Hans van de Laar)
51302>>>            //Get UtilUpdateTAGFile (sDataPath + sTableName + ".tag") sFieldName to bOK
51302>>>        End
51302>>>>
51302>>>        // Check for a default value
51302>>>        If (bInitializeValue = True and sColumnValue <> "" and Err = False) Begin
51304>>>            Get ApiColumnUpdateValue hTable sFieldName sColumnValue to bRetval
51305>>>        End
51305>>>>
51305>>>        Close hTable
51306>>>
51306>>>        Function_Return (Err = False)
51307>>>    End_Function
51308>>>
51308>>>    // Adds a column name to the passed table number.
51308>>>    Function ApiColumnInsert String sDriverIDFrom Handle hTable Integer iColumn String sFieldName Integer iType Integer iLength Integer iPrec Boolean bIsSQLType Returns Boolean
51310>>>        Integer iCount iFile iPrecision iNumberOfFields iDbType
51310>>>        Boolean bExists bOK bIsDateType bIsSQLTypeTo
51310>>>        String sDdSrcPath sTableName
51310>>>
51310>>>        Get UtilColumnExists hTable sFieldName to bExists
51311>>>        Move False to Err
51312>>>        If (bExists = True) Begin
51314>>>            Function_Return False
51315>>>        End
51315>>>>
51315>>>        If (num_arguments > 4) Begin
51317>>>            Move iPrec to iPrecision
51318>>>        End
51318>>>>
51318>>>        If (iType < -1490) Begin
51320>>>            Move (iType + 1500) to iType
51321>>>        End
51321>>>>
51321>>>
51321>>>        Get AutoConnectionIDLogin to bOK
51322>>>        Move False to Err
51323>>>        Get UtilTableIsSql hTable to bIsSQLTypeTo
51324>>>        // If one of the two tables are SQL and the other Embedded we need to "translate"
51324>>>        // data types between Embedded and SQL, else we can't compare the data types. 
51324>>>        Get piDbType to iDbType
51325>>>        If (bIsSQLTypeTo = False) Begin
51327>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iType iLength to iType
51328>>>            If (iType = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
51330>>>                Move DF_DATE to iType
51331>>>            End
51331>>>>
51331>>>        End
51331>>>>
51331>>>
51331>>>        // Structure_start will change the value of hTable...
51331>>>        Move hTable to iFile
51332>>>        Get OpenTableExclusive iFile to bOK
51333>>>        If (bOK = False) Begin
51335>>>            Function_Return False
51336>>>        End
51336>>>>
51336>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iFile to iNumberOfFields
51339>>>
51339>>>        // If the passed column number is higher than the current number of fields
51339>>>        // in the table, this means we should _not_ insert a field but rather add
51339>>>        // a new field to the end:
51339>>>        If (iColumn > iNumberOfFields) Begin
51341>>>            Move 0 to iColumn
51342>>>        End
51342>>>>
51342>>>
51342>>>        Set Private.phCurrentTable to hTable
51343>>>        Set Private.piCurrentField to iColumn
51344>>>
51344>>>        Structure_Start iFile
51345>>>            Create_Field iFile At iColumn
51346>>>            Set_Attribute DF_FIELD_NAME            of iFile iColumn to sFieldName
51349>>>            If (bIsSQLTypeTo = False) Begin
51351>>>                Set_Attribute DF_FIELD_TYPE        of iFile iColumn to iType
51354>>>            End
51354>>>>
51354>>>            Else Begin
51355>>>                Set_Attribute DF_FIELD_NATIVE_TYPE of iFile iColumn to iType
51358>>>            End
51358>>>>
51358>>>            Get UtilColumnIsDateType iType bIsSQLTypeTo to bIsDateType
51359>>>            If (bIsDateType = False) Begin
51361>>>                Set_Attribute DF_FIELD_LENGTH       of iFile iColumn to (iLength + iPrecision)
51364>>>                Set_Attribute DF_FIELD_PRECISION    of iFile iColumn to iPrecision
51367>>>            End
51367>>>>
51367>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
51368>>>        Structure_End iFile DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
51370>>>
51370>>>        Set Action_Text of ghoStatusPanel to ""
51371>>>        // If in development environment; create .fd file:
51371>>>        Open hTable
51373>>>        Get psDdSrcPath of (phoWorkspace(ghoApplication)) to sDDSrcPath
51374>>>        Get CountOfPaths of (phoWorkspace(ghoApplication)) sDDSrcPath to iCount
51375>>>        If (iCount > 1) Begin
51377>>>            Get PathAtIndex of (phoWorkspace(ghoApplication)) sDDSrcPath 1 to sDDSrcPath
51378>>>        End
51378>>>>
51378>>>        Get vFolderExists sDDSrcPath to bExists
51379>>>        If (bExists = True) Begin
51381>>>            Get vFolderFormat sDDSrcPath to sDDSrcPath
51382>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sTableName
51385>>>            Get _TableNameOnly sTableName to sTableName
51386>>>            Output_Aux_File DF_AUX_FILE_FD for hTable to (sDDSrcPath + sTableName + ".fd")
51388>>>        End
51388>>>>
51388>>>
51388>>>        // Check for a default value
51388>>>        Close hTable
51389>>>
51389>>>        Function_Return (Err = False)
51390>>>    End_Function
51391>>>
51391>>>//    Function ApiColumnAddMultiple Handle hTable tAPIColumn[] aColumns Returns Boolean
51391>>>//        Integer iColumn iCount iFile
51391>>>//        Boolean bExists bOK
51391>>>//        String sDdSrcPath sTableName
51391>>>//
51391>>>//        Get AutoConnectionIDLogin to bOK
51391>>>//        Move False to Err
51391>>>//
51391>>>//        // Structure_start will change the value of hTable...
51391>>>//        Move hTable to iFile
51391>>>//        Open iFile Mode DF_EXCLUSIVE
51391>>>//
51391>>>//        Structure_Start iFile
51391>>>//            Send ApiColumnsAddToTable iFile aColumns False
51391>>>//        Structure_End iFile DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
51391>>>//
51391>>>//        // If in development environment; create .fd file:
51391>>>//        Open hTable
51391>>>//        Get psDdSrcPath of (phoWorkspace(ghoApplication)) to sDDSrcPath
51391>>>//        Get CountOfPaths of (phoWorkspace(ghoApplication)) sDDSrcPath to iCount
51391>>>//        If (iCount > 1) Begin
51391>>>//            Get PathAtIndex of (phoWorkspace(ghoApplication)) sDDSrcPath 1 to sDDSrcPath
51391>>>//        End
51391>>>//        Get vFolderExists sDDSrcPath to bExists
51391>>>//        If (bExists = True) Begin
51391>>>//            Get vFolderFormat sDDSrcPath to sDDSrcPath
51391>>>//            Get_Attribute DF_FILE_ROOT_NAME of hTable to sTableName
51391>>>//            Get _TableNameOnly sTableName to sTableName
51391>>>//            Output_Aux_File DF_AUX_FILE_FD for hTable to (sDDSrcPath + sTableName + ".fd")
51391>>>//        End
51391>>>//        Close hTable
51391>>>//
51391>>>//        Function_Return (Err = False)
51391>>>//    End_Function
51391>>>
51391>>>    // To update all records for a table column with a fixed value.
51391>>>    Function ApiColumnUpdateValue Handle hTable String sFieldName String sColumnValue Returns Boolean
51393>>>        Integer iRecs iCurrErr iField iRecord
51393>>>        Boolean bRetval bOpen
51393>>>
51393>>>        Move 0 to iRecs
51394>>>        Move False to bRetval
51395>>>        Move Err to iCurrErr
51396>>>        Move False to Err
51397>>>
51397>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
51400>>>        If (bOpen = False) Begin
51402>>>            Open hTable
51404>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
51407>>>            If (bOpen = False) Begin
51409>>>                Function_Return bRetval
51410>>>            End
51410>>>>
51410>>>        End
51410>>>>
51410>>>
51410>>>        Field_Map hTable sFieldName to iField
51412>>>        If (iField <> 0) Begin
51414>>>            Set Private.phCurrentTable to hTable
51415>>>            Set Private.piCurrentField to iField
51416>>>            Clear hTable
51417>>>            Repeat
51417>>>>
51417>>>                Vfind hTable 0 GT
51419>>>                If (Found) Begin
51421>>>                    If (ghoStatusPanel <> 0) Begin
51423>>>                        Get_Field_Value hTable 0 to iRecord
51426>>>                        Send Update_StatusPanel of ghoStatusPanel (CS_DUF_UpdateVersion * String(iRecord))
51427>>>                    End
51427>>>>
51427>>>                    Reread hTable
51431>>>                        Set_Field_Value hTable iField to sColumnValue
51434>>>                        SaveRecord hTable
51435>>>                    Unlock
51436>>>>
51436>>>                End
51436>>>>
51436>>>           Until (not(Found))
51438>>>        End
51438>>>>
51438>>>
51438>>>        Move (Err = False) to bRetval
51439>>>        Move iCurrErr to Err
51440>>>
51440>>>        Function_Return bRetval
51441>>>    End_Function
51442>>>
51442>>>    // Note: This can only be used from within a Structure_Start/End construct.
51442>>>    Function ApiColumnsAddToTable Handle hTable tAPIColumn[] aColumns Boolean bCreating Returns Boolean
51444>>>        Integer iCount iSize iColumn iType iDataFlexType iIndex iDbType
51444>>>        Boolean bFieldExists bNativeType bIsSQLDriver bIsDAWSqlDriver bIsSqlTable bRecnumTable bIsOpen bIsDateType
51444>>>        String sFieldName sDriverID sTableName sDefaultValue
51444>>>
51444>>>//        Set Private.phCurrentTable to hTable
51444>>>        Get psDriverID to sDriverID
51445>>>        Get piDbType to iDbType
51446>>>        Get UtilTableHandleToString hTable to sTableName
51447>>>        Get IsSQLDriver    sDriverID to bIsSQLDriver
51448>>>        Get IsDAWSQLDriver sDriverID to bIsDAWSqlDriver
51449>>>        Get UtilTableIsSQL hTable to bIsSqlTable
51450>>>        If (bIsSqlTable = False and bCreating = True and bIsSQLDriver = True) Begin
51452>>>            Move True to bIsSqlTable
51453>>>        End
51453>>>>
51453>>>        Move False to bIsOpen
51454>>>        If (hTable > 0) Begin
51456>>>            Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
51459>>>        End
51459>>>>
51459>>>        If (bIsOpen = True) Begin
51461>>>            Get_Attribute DF_FILE_RECNUM_TABLE of hTable to bRecnumTable
51464>>>        End
51464>>>>
51464>>>        Else Begin
51465>>>            Get pbRecnum to bRecnumTable
51466>>>        End
51466>>>>
51466>>>
51466>>>        Move False to Err
51467>>>        Move (SizeOfArray(aColumns)) to iSize
51468>>>        Decrement iSize
51469>>>        for iCount from 0 to iSize
51475>>>>
51475>>>            Move aColumns[iCount].sFieldName to sFieldName
51476>>>            If (hTable > 0) Begin
51478>>>                Set Error_Report_Mode to DUF_ERROR_NO_REPORT
51479>>>                Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
51480>>>                Get_Attribute DF_FIELD_NAME of hTable iColumn to sFieldName
51483>>>                Move (Trim(sFieldName) <> "") to bFieldExists
51484>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
51485>>>                Send Trap_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
51486>>>            End
51486>>>>
51486>>>            Else Begin
51487>>>                Move False to bFieldExists
51488>>>            End
51488>>>>
51488>>>
51488>>>            If (bFieldExists = False) Begin
51490>>>                Move 0 to iColumn
51491>>>                Create_Field hTable At iColumn
51492>>>            End
51492>>>>
51492>>>            Else Begin
51493>>>                Move iCount to iColumn
51494>>>            End
51494>>>>
51494>>>
51494>>>            Set Private.piCurrentField to iColumn
51495>>>
51495>>>            Move                                        iColumn to aColumns[iCount].iFieldNumber
51496>>>            Set_Attribute DF_FIELD_NAME       of hTable iColumn to aColumns[iCount].sFieldName
51499>>>
51499>>>            Move aColumns[iCount].iType to iType
51500>>>            Move (not(iType < -1490)) to bNativeType
51501>>>            If (iType < -1490) Begin
51503>>>                Move (iType + 1500) to iType
51504>>>            End
51504>>>>
51504>>>
51504>>>            If (bIsSqlTable = True) Begin
51506>>>                If (aColumns[iCount].bIsSQLType = True) Begin
51508>>>                    Get UtilSQLColumnTypeToDataFlexType sDriverID iDbType iType aColumns[iCount].iLength to iDataFlexType
51509>>>                    Set_Attribute DF_FIELD_TYPE          of hTable iColumn to iDataFlexType
51512>>>                    Set_Attribute DF_FIELD_NATIVE_TYPE   of hTable iColumn to iType
51515>>>                    Set_Attribute DF_FIELD_NULL_ALLOWED  of hTable iColumn to aColumns[iCount].bAllowNULL
51518>>>
51518>>>                    Move aColumns[iCount].sDefaultValue                    to sDefaultValue
51519>>>                    If (iDataFlexType = DF_BCD and Left(String(sDefaultValue), 1) <> "[") Begin
51521>>>                        Move ("[" + String(sDefaultValue) + "]") to sDefaultValue
51522>>>                    End
51522>>>>
51522>>>                    Set_Attribute DF_FIELD_DEFAULT_VALUE of hTable iColumn to sDefaultValue
51525>>>
51525>>>                End
51525>>>>
51525>>>                Else Begin
51526>>>                    Set_Attribute DF_FIELD_TYPE        of hTable iColumn to iType
51529>>>                End
51529>>>>
51529>>>            End
51529>>>>
51529>>>            Else Begin
51530>>>                If (bCreating = False) Begin
51532>>>                    Get UtilSQLColumnTypeToDataFlexType sDriverID iDbType iType aColumns[iCount].iLength to iType
51533>>>                    If (iType = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
51535>>>                        Move DF_DATE to iType
51536>>>                    End
51536>>>>
51536>>>                End
51536>>>>
51536>>>                Set_Attribute DF_FIELD_TYPE of hTable iColumn to iType
51539>>>            End
51539>>>>
51539>>>
51539>>>            Get UtilColumnIsDateType iType bIsSqlTable to bIsDateType
51540>>>            If (bIsDateType = False) Begin
51542>>>                Set_Attribute DF_FIELD_LENGTH     of hTable iColumn to aColumns[iCount].iLength
51545>>>                Set_Attribute DF_FIELD_PRECISION  of hTable iColumn to aColumns[iCount].iPrecision
51548>>>            End
51548>>>>
51548>>>
51548>>>            If (aColumns[iCount].iOptions iand C_tAPIColumn_Identity) Begin
51550>>>                Move 0 to iIndex
51551>>>                Create_Index hTable at iIndex
51552>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to 1
51555>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD   of hTable iIndex 1 to iColumn
51558>>>                Set_Attribute DF_FILE_PRIMARY_INDEX    of hTable iIndex to 1
51561>>>
51561>>>                // If we have an identity table - we must create a primary_key table.
51561>>>                If (bIsSqlTable = True) Begin
51563>>>                End
51563>>>>
51563>>>            End
51563>>>>
51563>>>        Loop
51564>>>>
51564>>>
51564>>>        Function_Return (Err = False)
51565>>>    End_Function
51566>>>
51566>>>    // Changes a field type, length and precision for the passed table number and field name
51566>>>    Function ApiColumnChange Handle hTable String sFieldNameFrom Integer iTypeFrom Integer iLengthFrom Integer iPrec Returns Boolean
51568>>>        Integer iColumn iPrecFrom iTypeTo iLengthTo iPrecTo
51568>>>        Boolean bOK bIsSqlTable
51568>>>        String sFieldNameTo
51568>>>
51568>>>        If (num_arguments > 4) Begin
51570>>>            Move iPrec to iPrecFrom
51571>>>        End
51571>>>>
51571>>>        If (iTypeFrom < -1490) Begin
51573>>>            Move (iTypeFrom + 1500) to iTypeFrom
51574>>>        End
51574>>>>
51574>>>
51574>>>        Get AutoConnectionIDLogin to bOK
51575>>>        Move False to Err
51576>>>        Get OpenTableExclusive hTable to bOK
51577>>>        If (bOK = False) Begin
51579>>>            Function_Return False
51580>>>        End
51580>>>>
51580>>>
51580>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
51581>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
51582>>>        Field_Map hTable sFieldNameFrom to iColumn
51584>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
51585>>>        Send Trap_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
51586>>>        If (Err = True) Begin
51588>>>            Function_Return False
51589>>>        End
51589>>>>
51589>>>
51589>>>        Get_Attribute DF_FIELD_NAME                  of hTable iColumn to sFieldNameTo
51592>>>        Get UtilTableIsSQL hTable to bIsSqlTable
51593>>>        If (bIsSqlTable = False) Begin
51595>>>            Get_Attribute DF_FIELD_TYPE              of hTable iColumn to iTypeTo
51598>>>        End
51598>>>>
51598>>>        Else Begin
51599>>>            Get_Attribute DF_FIELD_NATIVE_TYPE       of hTable iColumn to iTypeTo
51602>>>        End
51602>>>>
51602>>>        // Let the driver decide the other values;
51602>>>        Get_Attribute DF_FIELD_LENGTH                of hTable iColumn to iLengthTo
51605>>>        Get_Attribute DF_FIELD_PRECISION             of hTable iColumn to iPrecTo
51608>>>
51608>>>        If (sFieldNameFrom = sFieldNameTo and iTypeFrom = iTypeTo and iLengthFrom = iLengthTo and iPrecFrom = iPrecTo) Begin
51610>>>            Function_Return False
51611>>>        End
51611>>>>
51611>>>
51611>>>        Set Private.phCurrentTable to hTable
51612>>>        Set Private.piCurrentField to iColumn
51613>>>
51613>>>        Structure_Start hTable
51614>>>            Set_Attribute DF_FIELD_NAME              of hTable iColumn to sFieldNameFrom
51617>>>//            If (bIsSqlTable = False) Begin
51617>>>                Set_Attribute DF_FIELD_TYPE          of hTable iColumn to iTypeFrom
51620>>>//            End
51620>>>//            Else Begin
51620>>>//                Set_Attribute DF_FIELD_TYPE          of hTable iColumn to iTypeFrom
51620>>>//                Set_Attribute DF_FIELD_NATIVE_TYPE   of hTable iColumn to iTypeFrom
51620>>>//            End
51620>>>            Set_Attribute DF_FIELD_LENGTH            of hTable iColumn to (iLengthFrom + iPrecFrom)
51623>>>            Set_Attribute DF_FIELD_PRECISION         of hTable iColumn to iPrecFrom
51626>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
51627>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
51629>>>
51629>>>        Set Action_Text of ghoStatusPanel to ""
51630>>>        Function_Return (Err = False)
51631>>>    End_Function
51632>>>
51632>>>    // Changes a field type, length and precision for the passed table number and field name
51632>>>    Function ApiColumnChangeByColumnNumber String sDriverIDFrom Handle hTable Boolean bIsSQLTableFrom Boolean bIsSQLTableTo String sFieldNameFrom Integer iColumn Integer iTypeFrom Integer iLengthFrom Integer iPrec Integer iOpt Returns Boolean
51634>>>        Integer iPrecFrom iTypeTo iLengthTo iPrecTo iDbType iOptionFrom iOptionTo iDataFlexType iIndex
51634>>>        Boolean bOK bCompareDate_DateTime bSkip bRecnumTable bIsSameDataType
51634>>>        String sFieldNameTo sDriverIDTo
51634>>>        tColumnType ColumnType
51634>>>        tColumnType ColumnType
51634>>>
51634>>>        Get pbCompareDate_DateTime to bCompareDate_DateTime
51635>>>        Get piDbType to iDbType
51636>>>        If (num_arguments > 4) Begin
51638>>>            Move iPrec to iPrecFrom
51639>>>            Move iOpt  to iOptionFrom
51640>>>        End
51640>>>>
51640>>>        If (iTypeFrom < -1490) Begin
51642>>>            Move (iTypeFrom + 1500) to iTypeFrom
51643>>>        End
51643>>>>
51643>>>
51643>>>        Get AutoConnectionIDLogin to bOK
51644>>>        Move False to Err
51645>>>        Close hTable
51646>>>        Get OpenTableExclusive hTable to bOK
51647>>>        If (bOK = False) Begin
51649>>>            Function_Return False
51650>>>        End
51650>>>>
51650>>>
51650>>>        Get_Attribute DF_FILE_DRIVER                of hTable         to sDriverIDTo
51653>>>        Get_Attribute DF_FILE_RECNUM_TABLE          of hTable         to bRecnumTable
51656>>>        Get UtilSQLColumnTypeToDataFlexType sDriverIDTo iDbType iTypeTo iLengthTo to iDataFlexType
51657>>>        If (iDataFlexType = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
51659>>>            Move DF_DATE to iDataFlexType
51660>>>        End
51660>>>>
51660>>>        Get_Attribute DF_FIELD_NAME                 of hTable iColumn to sFieldNameTo
51663>>>
51663>>>        If (bIsSQLTableTo = True) Begin
51665>>>            Get_Attribute DF_FIELD_NATIVE_TYPE      of hTable iColumn to iTypeTo
51668>>>        End
51668>>>>
51668>>>        Else Begin
51669>>>            Get_Attribute DF_FIELD_TYPE             of hTable iColumn to iTypeTo
51672>>>        End
51672>>>>
51672>>>
51672>>>        Get_Attribute DF_FIELD_LENGTH               of hTable iColumn to iLengthTo
51675>>>        Get_Attribute DF_FIELD_PRECISION            of hTable iColumn to iPrecTo
51678>>>            Get_Attribute DF_FIELD_IS_IDENTITY      of hTable iColumn to iOptionTo
51681>>>
51681>>>        // If one of the two tables are SQL and the other Embedded we need to "translate"
51681>>>        // data types between Embedded and SQL, else we can't compare the data types.
51681>>>        If (bIsSQLTableFrom = True and bIsSQLTableTo = False) Begin
51683>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iTypeFrom iLengthFrom to iTypeTo
51684>>>            If (iTypeTo = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
51686>>>                Move DF_DATE to iTypeTo  
51687>>>            End
51687>>>>
51687>>>        End
51687>>>>
51687>>>        Else If (bIsSQLTableFrom = False and bIsSQLTableTo = True) Begin
51690>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDTo   iDbType iTypeTo   iLengthTo   to iTypeFrom
51691>>>        End
51691>>>>
51691>>>        Move (iTypeFrom = iTypeTo) to bIsSameDataType
51692>>>
51692>>>        If (bCompareDate_DateTime = False) Begin
51694>>>            Move ((iTypeFrom = SQL_TYPE_DATE or iTypeFrom = SQL_TYPE_TIME or iTypeFrom = SQL_TYPE_TIMESTAMP) and (iTypeTo = SQL_TYPE_DATE or iTypeTo = SQL_TYPE_TIME or iTypeTo = SQL_TYPE_TIMESTAMP)) to bSkip
51695>>>            If (bSkip = True) Begin
51697>>>                If (sFieldNameFrom = sFieldNameTo and iLengthFrom = iLengthTo and iPrecFrom = iPrecTo and iOptionFrom = iOptionTo) Begin
51699>>>                    Function_Return True
51700>>>                End
51700>>>>
51700>>>            End
51700>>>>
51700>>>        End
51700>>>>
51700>>>        Else If (sFieldNameFrom = sFieldNameTo and iTypeFrom = iTypeTo and iLengthFrom = iLengthTo and iPrecFrom = iPrecTo and iOptionFrom = iOptionTo) Begin
51703>>>            Function_Return True
51704>>>        End
51704>>>>
51704>>>
51704>>>        Set Private.phCurrentTable to hTable
51705>>>        Set Private.piCurrentField to iColumn
51706>>>
51706>>>        Structure_Start hTable
51707>>>            If (sFieldNameFrom <> sFieldNameTo) Begin
51709>>>                Set_Attribute DF_FIELD_NAME             of hTable iColumn to sFieldNameFrom
51712>>>            End
51712>>>>
51712>>>
51712>>>            If (bIsSameDataType = False) Begin
51714>>>                Set_Attribute DF_FIELD_TYPE             of hTable iColumn to iDataFlexType
51717>>>                If (bIsSQLTableTo = True) Begin
51719>>>                    Set_Attribute DF_FIELD_NATIVE_TYPE  of hTable iColumn to iTypeFrom
51722>>>                End
51722>>>>
51722>>>            End
51722>>>>
51722>>>
51722>>>            If (iLengthFrom <> iLengthTo) Begin
51724>>>                Set_Attribute DF_FIELD_LENGTH           of hTable iColumn to iLengthFrom
51727>>>            End
51727>>>>
51727>>>            If (iPrecFrom <> iPrecTo) Begin
51729>>>                Set_Attribute DF_FIELD_PRECISION        of hTable iColumn to iPrecFrom
51732>>>            End
51732>>>>
51732>>>
51732>>>            If (bIsSQLTableTo = True and iOptionFrom =  C_tAPIColumn_Identity and iOptionTo <> C_tAPIColumn_Identity) Begin
51734>>>                // Can't set a recnum table to "DF_FIELD_IS_IDENTITY"
51734>>>                If (bRecnumTable = True) Begin
51736>>>                    Set_Attribute DF_FILE_RECNUM_TABLE  of hTable to False
51739>>>                End
51739>>>>
51739>>>
51739>>>                // We might need to create an index here.
51739>>>                // To be able to set the DF_FIELD_IS_IDENTITY the index must already exist, but it might not at this stage.
51739>>>                // This should probably fix that problem and if an adjustment is needed, it will get done with the normal
51739>>>                // index update checking logic.
51739>>>                Get_Attribute DF_FIELD_INDEX               of hTable iColumn to iIndex
51742>>>                If (iIndex = 0 and Uppercase(sFieldNameTo) <> "RECNUM") Begin
51744>>>                    Create_Index hTable At iIndex
51745>>>                    Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex   to 1
51748>>>                End
51748>>>>
51748>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD       of hTable iIndex 1 to iColumn
51751>>>                Set_Attribute DF_FILE_PRIMARY_INDEX        of hTable          to iIndex
51754>>>                    Set_Attribute DF_FIELD_IS_IDENTITY     of hTable iColumn  to True
51757>>>                If (bIsSQLTableTo = True) Begin
51759>>>                    Set_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable iIndex   to True
51762>>>                End
51762>>>>
51762>>>            End
51762>>>>
51762>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
51763>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
51765>>>
51765>>>        Set Action_Text of ghoStatusPanel to ""
51766>>>        Function_Return (Err = False)
51767>>>    End_Function
51768>>>
51768>>>    Function ApiColumnChangeMainIndex Handle hTable Integer iIndex Integer iColumn Returns Boolean
51770>>>        Boolean bOK
51770>>>
51770>>>        Get AutoConnectionIDLogin to bOK
51771>>>        Move False to Err
51772>>>        Get OpenTableExclusive hTable to bOK
51773>>>        If (bOK = False) Begin
51775>>>            Function_Return False
51776>>>        End
51776>>>>
51776>>>
51776>>>        Structure_Start hTable
51777>>>            Set_Attribute DF_FIELD_INDEX of hTable iColumn to iIndex
51780>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
51781>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
51783>>>
51783>>>        Set Action_Text of ghoStatusPanel to ""
51784>>>        Function_Return (Err = False)
51785>>>    End_Function
51786>>>
51786>>>    // To move an existing field to another position in a table.
51786>>>    Function ApiColumnMove Handle hTable Integer iOld Integer iNew Boolean bIsSQLType Integer iLength Integer iPrecision Returns Boolean
51788>>>        String sColumn sDriverID
51788>>>        Integer iType
51788>>>        Boolean bOK bIsDate
51788>>>
51788>>>        Close hTable
51789>>>        Get AutoConnectionIDLogin to bOK
51790>>>        Get OpenTableExclusive hTable to bOK
51791>>>        If (bOK = False) Begin
51793>>>            Function_Return False
51794>>>        End
51794>>>>
51794>>>
51794>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
51797>>>        If (sDriverID = DFBTRDRV_ID) Begin
51799>>>            Error DFERR_PROGRAM "Function 'ColumnMove' is not supported for the Pervasive database."
51800>>>>
51800>>>            Function_Return False
51801>>>        End
51801>>>>
51801>>>
51801>>>        Get_Attribute DF_FIELD_NAME of hTable iOld to sColumn
51804>>>        Get_Attribute DF_FIELD_TYPE of hTable iOld to iType
51807>>>        Get UtilColumnIsDateType iType bIsSQLType  to bIsDate
51808>>>
51808>>>        Set Private.phCurrentTable to hTable
51809>>>        Set Private.piCurrentField to iOld
51810>>>
51810>>>//        If (bIsDate = False) Begin
51810>>>//            Get_Attribute DF_FIELD_LENGTH    of hTable iOld to iLength
51810>>>//            Get_Attribute DF_FIELD_PRECISION of hTable iOld to iPrecision
51810>>>//        End
51810>>>//        Else Begin
51810>>>//            Move 6 to iLength
51810>>>//            Move 0 to iPrecision
51810>>>//        End
51810>>>
51810>>>        Move False to Err
51811>>>
51811>>>        Structure_Start hTable
51812>>>            Delete_Field hTable iOld
51813>>>            Create_Field hTable At iNew
51814>>>            Set_Attribute DF_FIELD_OLD_NUMBER of hTable iNew to iOld
51817>>>
51817>>>            Set_Attribute DF_FIELD_NAME of hTable iNew to sColumn
51820>>>            If (bIsSQLType = False) Begin
51822>>>                Set_Attribute DF_FIELD_TYPE of hTable iNew to iType
51825>>>            End
51825>>>>
51825>>>            Else Begin
51826>>>                Set_Attribute DF_FIELD_TYPE of hTable iNew to iType
51829>>>//                Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iNew to iSQLType
51829>>>            End
51829>>>>
51829>>>
51829>>>            If (bIsDate = False) Begin
51831>>>                Set_Attribute DF_FIELD_LENGTH    of hTable iNew to iLength
51834>>>                Set_Attribute DF_FIELD_PRECISION of hTable iNew to iPrecision
51837>>>            End
51837>>>>
51837>>>
51837>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
51838>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
51840>>>
51840>>>        Set Action_Text of ghoStatusPanel to ""
51841>>>        Function_Return (Err = False)
51842>>>    End_Function
51843>>>
51843>>>    // Deletes a column name for the passed table number (and column number).
51843>>>    Function ApiColumnRemove Handle hTable String sFieldName Returns Boolean
51845>>>        Integer iColumn
51845>>>        Boolean bOK
51845>>>
51845>>>        Get AutoConnectionIDLogin to bOK
51846>>>        Move False to Err
51847>>>        Close hTable
51848>>>        Get OpenTableExclusive hTable to bOK
51849>>>        If (bOK = False) Begin
51851>>>            Function_Return False
51852>>>        End
51852>>>>
51852>>>
51852>>>        If (not(Err)) Begin
51854>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
51855>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
51856>>>            Field_Map hTable sFieldName to iColumn
51858>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
51859>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
51860>>>            If (iColumn = 0) Begin
51862>>>                Move 0 to LastErr
51863>>>                Function_Return False
51864>>>            End
51864>>>>
51864>>>            Move False to Err
51865>>>
51865>>>            Set Private.phCurrentTable to hTable
51866>>>            Set Private.piCurrentField to iColumn
51867>>>
51867>>>            Structure_Start hTable
51868>>>                Delete_Field hTable iColumn
51869>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
51870>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
51872>>>            Set Action_Text of ghoStatusPanel to ""
51873>>>        End
51873>>>>
51873>>>        Else Begin
51874>>>            Error DFERR_PROGRAM ("The table number:" * String(hTable) * "could not be opened exclusiv. This indicates the table is in use!")
51875>>>>
51875>>>        End
51875>>>>
51875>>>
51875>>>        Function_Return (Err = False)
51876>>>    End_Function
51877>>>
51877>>>    // Renames a field for the passed table number & old field name & new field name
51877>>>    // Returns True if no errors occured.
51877>>>    // Sample usage:
51877>>>    //   Get ColumnRename Quote.File_Number "ID#" "ID" to bOK
51877>>>    Function ApiColumnRename Integer hTable String sOldFieldName String sNewFieldName Returns Boolean
51879>>>        Integer iField
51879>>>        Boolean bOK bExists bIsOpen
51879>>>
51879>>>        Get UtilColumnExists hTable sNewFieldName to bExists
51880>>>        If (bExists = True) Begin
51882>>>            Function_Return False
51883>>>        End
51883>>>>
51883>>>
51883>>>        // Note: The Field_Map command does _not_ work if the table has been
51883>>>        //       opened exclusively, so we first open it in normal mode.
51883>>>        Close hTable
51884>>>        Open hTable
51886>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
51889>>>        If (bIsOpen = False) Begin
51891>>>            Function_Return False
51892>>>        End
51892>>>>
51892>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
51893>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
51894>>>        Field_Map hTable sOldFieldName to iField
51896>>>        Send Trap_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
51897>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
51898>>>
51898>>>        Get AutoConnectionIDLogin to bOK
51899>>>        Get OpenTableExclusive hTable to bOK
51900>>>        If (bOK = False) Begin
51902>>>            Function_Return False
51903>>>        End
51903>>>>
51903>>>
51903>>>        Move False to Err
51904>>>        Send Ignore_Error of Error_Object_Id DFERR_DUPLICATE_FIELDNAME
51905>>>        Set Private.phCurrentTable to hTable
51906>>>        Set Private.piCurrentField to iField
51907>>>
51907>>>        If (iField > 0) Begin
51909>>>            Structure_Start hTable
51910>>>                Set_Attribute DF_FIELD_NAME of hTable iField to sNewFieldName
51913>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
51914>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
51916>>>        End
51916>>>>
51916>>>        Else Begin
51917>>>            Move 0 to LastErr
51918>>>            Move False to Err
51919>>>        End
51919>>>>
51919>>>
51919>>>        Set Action_Text of ghoStatusPanel to ""
51920>>>        Send Trap_Error of Error_Object_Id DFERR_DUPLICATE_FIELDNAME
51921>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
51922>>>
51922>>>        Function_Return (Err = False)
51923>>>    End_Function
51924>>>
51924>>>    Function UtilColumnsCheckForInserts Handle hTable tAPIColumnCompare[] aAPIColumnCompare Returns tAPIColumnCompare[]
51926>>>        tAPIColumnCompare[] aAPIColumnsToInsert
51926>>>        tAPIColumnCompare[] aAPIColumnsToInsert
51927>>>        Integer iSize iCount iItem iFieldTo iNumberOfFieldsTo iColumnNumber
51927>>>        Boolean bRenameField
51927>>>
51927>>>        Open hTable
51929>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
51930>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
51931>>>        Move (SizeOfArray(aAPIColumnCompare)) to iSize
51932>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumberOfFieldsTo
51935>>>        Move (iSize max iNumberOfFieldsTo) to iSize
51936>>>        Decrement iSize
51937>>>        for iCount from 0 to iSize
51943>>>>
51943>>>            If (Uppercase(aAPIColumnCompare[iCount].sFieldNameFrom) <> Uppercase(aAPIColumnCompare[iCount].sFieldNameTo)) Begin
51945>>>                Set Error_Report_Mode to DUF_ERROR_NO_REPORT
51946>>>                Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
51947>>>
51947>>>                Field_Map hTable aAPIColumnCompare[iCount].sFieldNameFrom to iFieldTo
51949>>>                If (aAPIColumnCompare[iCount].bExistsFrom = True and iFieldTo = 0) Begin
51951>>>                    Get UtilColumnExistsWithOtherNumber aAPIColumnCompare iCount to iColumnNumber
51952>>>                    Get UtilColumnShouldBeRenamed aAPIColumnCompare[iCount]      to bRenameField
51953>>>                    If (iColumnNumber = -1 and bRenameField = False) Begin
51955>>>                        Move aAPIColumnCompare[iCount].iFieldNumber     to aAPIColumnsToInsert[iItem].iFieldNumber
51956>>>                        Move aAPIColumnCompare[iCount].sFieldNameFrom   to aAPIColumnsToInsert[iItem].sFieldNameFrom
51957>>>                        Move aAPIColumnCompare[iCount].iTypeFrom        to aAPIColumnsToInsert[iItem].iTypeFrom
51958>>>                        Move aAPIColumnCompare[iCount].sTypeFrom        to aAPIColumnsToInsert[iItem].sTypeFrom
51959>>>                        Move aAPIColumnCompare[iCount].iLengthFrom      to aAPIColumnsToInsert[iItem].iLengthFrom
51960>>>                        Move aAPIColumnCompare[iCount].iPrecisionFrom   to aAPIColumnsToInsert[iItem].iPrecisionFrom
51961>>>                        Move aAPIColumnCompare[iCount].bIsSQLTypeFrom   to aAPIColumnsToInsert[iItem].bIsSQLTypeFrom
51962>>>                        Move aAPIColumnCompare[iCount].bIsSQLTypeTo     to aAPIColumnsToInsert[iItem].bIsSQLTypeTo
51963>>>                        Move True                                       to aAPIColumnsToInsert[iItem].bExistsFrom
51964>>>                        Move False                                      to aAPIColumnsToInsert[iItem].bExistsTo
51965>>>                        Increment iItem
51966>>>                    End
51966>>>>
51966>>>                End
51966>>>>
51966>>>            End
51966>>>>
51966>>>        Loop
51967>>>>
51967>>>
51967>>>        Move False to Err
51968>>>        Move 0 to LastErr
51969>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
51970>>>        Send Trap_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
51971>>>        Function_Return aAPIColumnsToInsert
51972>>>    End_Function
51973>>>
51973>>>    Function UtilColumnsInsert String sDriverIDFrom Handle hTable tAPIColumnCompare[] aAPIColumnsToInsert Returns Boolean
51975>>>        Integer iSize iCount
51975>>>        Boolean bOK
51975>>>        tAPIColumn[] aColumnsTo
51975>>>        tAPIColumn[] aColumnsTo
51976>>>        tAPIColumnCompare[] aAPIColumnCompare
51976>>>        tAPIColumnCompare[] aAPIColumnCompare
51977>>>
51977>>>        Move (SizeOfArray(aAPIColumnsToInsert)) to iSize
51978>>>        If (iSize = 0) Begin
51980>>>            Function_Return True
51981>>>        End
51981>>>>
51981>>>
51981>>>        Move False to Err
51982>>>        Decrement iSize
51983>>>        for iCount from 0 to iSize
51989>>>>
51989>>>            Get ApiColumnInsert sDriverIDFrom hTable aAPIColumnsToInsert[iCount].iFieldNumber aAPIColumnsToInsert[iCount].sFieldNameFrom aAPIColumnsToInsert[iCount].iTypeFrom aAPIColumnsToInsert[iCount].iLengthFrom aAPIColumnsToInsert[iCount].iPrecisionFrom aAPIColumnsToInsert[iCount].bIsSQLTypeFrom to bOK
51990>>>        Loop
51991>>>>
51991>>>
51991>>>        Function_Return bOK
51992>>>    End_Function
51993>>>
51993>>>    // Returns a struct array with fields that has the same names but different field numbers.
51993>>>    Function UtilColumnsCheckForMoves Handle hTable tAPIColumnCompare[] aAPIColumnCompare Returns tAPIColumnCompare[]
51995>>>        tAPIColumnCompare[] aAPIColumnsToMove
51995>>>        tAPIColumnCompare[] aAPIColumnsToMove
51996>>>        Integer iSize iCount iItem iShouldMove
51996>>>
51996>>>        Move 0 to iItem
51997>>>        Move (SizeOfArray(aAPIColumnCompare)) to iSize
51998>>>        Decrement iSize
51999>>>        for iCount from 0 to iSize
52005>>>>
52005>>>            If (Uppercase(aAPIColumnCompare[iCount].sFieldNameFrom) <> Uppercase(aAPIColumnCompare[iCount].sFieldNameTo)) Begin
52007>>>                Get UtilColumnExistsWithOtherNumber aAPIColumnCompare iCount to iShouldMove
52008>>>                If (iShouldMove <> -1) Begin
52010>>>                    Move aAPIColumnCompare[iCount] to aAPIColumnsToMove[iItem]
52011>>>                    Move iShouldMove               to aAPIColumnsToMove[iItem].iFieldNumberTo
52012>>>                    Move aAPIColumnCompare[iShouldMove - 1].sFieldNameTo to aAPIColumnsToMove[iItem].sFieldNameTo
52013>>>                    Increment iItem
52014>>>                End
52014>>>>
52014>>>            End
52014>>>>
52014>>>        Loop
52015>>>>
52015>>>
52015>>>        Move False to Err
52016>>>        Move 0 to LastErr
52017>>>        Function_Return aAPIColumnsToMove
52018>>>    End_Function
52019>>>
52019>>>    Function UtilColumnsMove Handle hTable tAPIColumn[] aColumnsFrom tAPIColumn[] aColumnsTo tAPIColumnCompare[] aAPIColumnsToMove Returns Boolean
52021>>>        Integer iSize iCount
52021>>>        Boolean bOK
52021>>>        tAPIColumnCompare[] aAPIColumnCompare
52021>>>        tAPIColumnCompare[] aAPIColumnCompare
52022>>>
52022>>>        Move (SizeOfArray(aAPIColumnsToMove)) to iSize
52023>>>        If (iSize = 0) Begin
52025>>>            Function_Return True
52026>>>        End
52026>>>>
52026>>>
52026>>>        Move False to Err
52027>>>        Decrement iSize
52028>>>        for iCount from 0 to iSize
52034>>>>
52034>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
52035>>>            Send Ignore_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
52036>>>            If (aAPIColumnsToMove[iCount].bExistsFrom = True and aAPIColumnsToMove[iCount].bExistsTo = True) Begin
52038>>>                Get ApiColumnMove hTable aAPIColumnsToMove[iCount].iFieldNumberTo aAPIColumnsToMove[iCount].iFieldNumber aAPIColumnsToMove[iCount].bIsSQLTypeFrom aAPIColumnsToMove[iCount].iLengthFrom aAPIColumnsToMove[iCount].iPrecisionFrom to bOK
52039>>>                Get UtilColumnsStructFill hTable to aColumnsTo
52040>>>                Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
52041>>>                Get UtilColumnsCheckForMoves hTable aAPIColumnCompare to aAPIColumnsToMove
52042>>>                If (SizeOfArray(aAPIColumnsToMove)) Begin
52044>>>                    Move (SizeOfArray(aAPIColumnsToMove)) to iSize
52045>>>                    Decrement iSize
52046>>>                    Move 0 to iCount
52047>>>                End
52047>>>>
52047>>>            End
52047>>>>
52047>>>        Loop
52048>>>>
52048>>>
52048>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
52049>>>        Send Trap_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
52050>>>        If (LastErr = DFERR_ARRAY_INDEX_OUT_OF_BOUNDS) Begin
52052>>>            Move 0 to LastErr
52053>>>        End
52053>>>>
52053>>>        Function_Return bOK
52054>>>    End_Function
52055>>>
52055>>>    // Checks if the "FROM" and "TO" database field is the same _except_ for the field name.
52055>>>    // We then assume this field should be renamed.
52055>>>//    Function UtilColumCheckRename Handle hTable tAPIColumnCompare aAPIColumnCompare Returns Boolean
52055>>>//        Boolean bDifferentFieldNames bShouldBeRenamed
52055>>>//
52055>>>//        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
52055>>>//        Move (Uppercase(aAPIColumnCompare.sFieldNameFrom) <> Uppercase(aAPIColumnCompare.sFieldNameTo)) to bDifferentFieldNames
52055>>>//
52055>>>//        If (bDifferentFieldNames = True) Begin
52055>>>//            Move (aAPIColumnCompare.iFieldNumber = aAPIColumnCompare.iFieldNumberTo) to bShouldBeRenamed
52055>>>//            If (bShouldBeRenamed = False) Begin
52055>>>//                Set Error_Report_Mode to DUF_ERROR_REPORT
52055>>>//                Function_Return False
52055>>>//            End
52055>>>//
52055>>>//            Move (aAPIColumnCompare.iTypeFrom = aAPIColumnCompare.iTypeTo) to bShouldBeRenamed
52055>>>//            If (bShouldBeRenamed = False) Begin
52055>>>//                Set Error_Report_Mode to DUF_ERROR_REPORT
52055>>>//                Function_Return False
52055>>>//            End
52055>>>//
52055>>>//            Move (aAPIColumnCompare.iLengthFrom = aAPIColumnCompare.iLengthTo) to bShouldBeRenamed
52055>>>//            If (bShouldBeRenamed = False) Begin
52055>>>//                Set Error_Report_Mode to DUF_ERROR_REPORT
52055>>>//                Function_Return False
52055>>>//            End
52055>>>//
52055>>>//            Move (aAPIColumnCompare.iPrecisionFrom = aAPIColumnCompare.iPrecisionTo) to bShouldBeRenamed
52055>>>//            If (bShouldBeRenamed = False) Begin
52055>>>//                Set Error_Report_Mode to DUF_ERROR_REPORT
52055>>>//                Function_Return False
52055>>>//            End
52055>>>//        End
52055>>>//
52055>>>//        Set Error_Report_Mode to DUF_ERROR_REPORT
52055>>>//        Function_Return True
52055>>>//    End_Function
52055>>>
52055>>>    // Takes a tAPIColumnCompare struct as parameter and returns True if;
52055>>>    // - Field Numbers, Data Types, Lengths and Precisions are all equal.
52055>>>    // - The "FROM" field name is <> "TO" field name
52055>>>//    // - The "FROM" field name also exists in the "TO" table; or the "TO" is part
52055>>>//    //   of the "FROM" field name. E.g. "FROM" = LATEST_REPL_COST_DATE, "TO" = Latest_Repl_Cos would results in a TRUE.
52055>>>    Function UtilColumnShouldBeRenamed tAPIColumnCompare aAPIColumnCompare Returns Boolean
52057>>>        Boolean bShouldRename
52057>>>        String sFieldNameFrom sFieldNameTo
52057>>>
52057>>>        Move (Uppercase(aAPIColumnCompare.sFieldNameFrom)) to sFieldNameFrom
52058>>>        Move (Uppercase(aAPIColumnCompare.sFieldNameTo))   to sFieldNameTo
52059>>>        If (sFieldNameFrom = sFieldNameTo) Begin
52061>>>            Function_Return False
52062>>>        End
52062>>>>
52062>>>
52062>>>        Move (aAPIColumnCompare.bExistsFrom    = aAPIColumnCompare.bExistsTo      and ;              aAPIColumnCompare.iFieldNumber   = aAPIColumnCompare.iFieldNumberTo and ;              aAPIColumnCompare.iTypeFrom      = aAPIColumnCompare.iTypeTo        and ;              aAPIColumnCompare.iLengthFrom    = aAPIColumnCompare.iLengthTo      and ;              aAPIColumnCompare.iPrecisionFrom = aAPIColumnCompare.iPrecisionTo   and ;              aAPIColumnCompare.iOptionsFrom   = aAPIColumnCompare.iOptionsTo) to bShouldRename
52063>>>//        If (bShouldRename = False) Begin
52063>>>//            Function_Return False
52063>>>//        End
52063>>>//
52063>>>//        If (sFieldNameFrom contains sFieldNameTo) Begin
52063>>>//            Function_Return True
52063>>>//        End
52063>>>
52063>>>        Function_Return bShouldRename
52064>>>    End_Function
52065>>>
52065>>>    // Returns -1 if the passed iColumn number doesn't exist with the same name in the aAPIColumnCompare struct array.
52065>>>    // Else it returns the column/field number of the field that exists in another position.
52065>>>    Function UtilColumnExistsWithOtherNumber tAPIColumnCompare[] aAPIColumnCompare Integer iColumn Returns Integer
52067>>>        Integer iCount iSize iRetval
52067>>>        String sFieldNameFrom
52067>>>
52067>>>        Move -1 to iRetval
52068>>>        If (aAPIColumnCompare[iColumn].bExistsFrom = False or aAPIColumnCompare[iColumn].bExistsTo = False) Begin
52070>>>            Function_Return iRetval
52071>>>        End
52071>>>>
52071>>>
52071>>>        Move (Uppercase(aAPIColumnCompare[iColumn].sFieldNameFrom)) to sFieldNameFrom
52072>>>        Move (SizeOfArray(aAPIColumnCompare)) to iSize
52073>>>        Decrement iSize
52074>>>        for iCount from 0 to iSize
52080>>>>
52080>>>            // We're only interested in fields other than the passed field/column number:
52080>>>            If (iCount <> iColumn) Begin
52082>>>                If (Uppercase(aAPIColumnCompare[iCount].sFieldNameTo) = sFieldNameFrom) Begin
52084>>>                    Move (iCount + 1) to iRetval
52085>>>                End
52085>>>>
52085>>>            End
52085>>>>
52085>>>        Loop
52086>>>>
52086>>>
52086>>>        Move 0 to LastErr
52087>>>        Function_Return iRetval
52088>>>    End_Function
52089>>>
52089>>>    Function UtilColumnsCheckForRenames Handle hTable tAPIColumnCompare[] aAPIColumnCompare Returns tAPIColumnCompare[]
52091>>>        tAPIColumnCompare[] aAPIColumnsToRename
52091>>>        tAPIColumnCompare[] aAPIColumnsToRename
52092>>>        Integer iSize iCount iItem iFieldTo iShouldMove
52092>>>        Boolean bRenameField
52092>>>
52092>>>        Open hTable
52094>>>        Move 0 to iItem
52095>>>        Move (SizeOfArray(aAPIColumnCompare)) to iSize
52096>>>        Decrement iSize
52097>>>        for iCount from 0 to iSize
52103>>>>
52103>>>            If (Uppercase(aAPIColumnCompare[iCount].sFieldNameFrom) <> Uppercase(aAPIColumnCompare[iCount].sFieldNameTo)) Begin
52105>>>                // Check if the field exists in another position (other field number)
52105>>>                Get UtilColumnExistsWithOtherNumber aAPIColumnCompare iCount to iShouldMove
52106>>>                Get UtilColumnShouldBeRenamed aAPIColumnCompare[iCount] to bRenameField
52107>>>                If (aAPIColumnCompare[iCount].bExistsFrom = True and iShouldMove = -1 and bRenameField = True) Begin
52109>>>                    Move aAPIColumnCompare[iCount].iFieldNumber     to aAPIColumnsToRename[iItem].iFieldNumber
52110>>>                    Move iFieldTo                                   to aAPIColumnsToRename[iItem].iFieldNumberTo
52111>>>                    Move aAPIColumnCompare[iCount].sFieldNameFrom   to aAPIColumnsToRename[iItem].sFieldNameFrom
52112>>>                    Move aAPIColumnCompare[iCount].sFieldNameTo     to aAPIColumnsToRename[iItem].sFieldNameTo
52113>>>                    Increment iItem
52114>>>                End
52114>>>>
52114>>>            End
52114>>>>
52114>>>        Loop
52115>>>>
52115>>>
52115>>>        Move False to Err
52116>>>        Move 0 to LastErr
52117>>>        Function_Return aAPIColumnsToRename
52118>>>    End_Function
52119>>>
52119>>>    Function UtilColumnsRename Handle hTable tAPIColumnCompare[] aAPIColumnsToRename Returns Boolean
52121>>>        Integer iSize iCount
52121>>>        Boolean bOK
52121>>>        tAPIColumn[] aColumnsTo
52121>>>        tAPIColumn[] aColumnsTo
52122>>>        tAPIColumnCompare[] aAPIColumnCompare
52122>>>        tAPIColumnCompare[] aAPIColumnCompare
52123>>>
52123>>>        Move (SizeOfArray(aAPIColumnsToRename)) to iSize
52124>>>        If (iSize = 0) Begin
52126>>>            Function_Return True
52127>>>        End
52127>>>>
52127>>>
52127>>>        Move False to Err
52128>>>        Decrement iSize
52129>>>        For iCount from 0 to iSize
52135>>>>
52135>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
52136>>>            Get ApiColumnRename hTable aAPIColumnsToRename[iCount].sFieldNameTo aAPIColumnsToRename[iCount].sFieldNameFrom to bOK
52137>>>        Loop
52138>>>>
52138>>>
52138>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
52139>>>        Function_Return bOK
52140>>>    End_Function
52141>>>
52141>>>    Function UtilColumnIsDateType Integer iType Boolean bIsSQLTableTo Returns Boolean
52143>>>        Boolean bDateType
52143>>>
52143>>>        If (bIsSQLTableTo = True) Begin
52145>>>            Move (iType = SQL_TYPE_DATE or iType = SQL_TYPE_TIMESTAMP or iType = SQL_TYPE_TIMESTAMP2) to bDateType
52146>>>        End
52146>>>>
52146>>>        Else Begin
52147>>>            Move (iType = DF_DATE or iType = DF_DATETIME) to bDateType
52148>>>        End
52148>>>>
52148>>>
52148>>>        Function_Return bDateType
52149>>>    End_Function
52150>>>
52150>>>    Function ApiColumnsUpdate String sDriverIDFrom Handle hTable Boolean bIsSQLTableFrom tAPIColumn[] aColumnsFrom tAPIColumn[] aColumnsTo Boolean bCompareDate_DateTime Returns Boolean
52152>>>        Integer iCount iColumns iColumn iTypeFrom iTypeTo iDataFlexType iIndex iLengthFrom iLengthTo iPrecisionFrom iPrecisionTo iOptionFrom iOptionTo iDbType
52152>>>        Integer iCount2 iColumn2
52152>>>        Handle hFile
52152>>>        Boolean bFieldExistsFrom bFieldExistsTo bIsSQLDriver bIsSame bOK bSkip
52152>>>        Boolean bRecnum bIsSQLTableTo bRecnumTable bIsOpen bSkipTypeChange bIsDateType
52152>>>        String sFieldNameFrom sFieldNameTo sDriverIDTo sDefaultValue
52152>>>        tAPIColumnCompare[] aAPIColumnCompare aApiInsertColumns aAPIMoveColumns aAPIRenameColumns aAPIRemoveColumns
52152>>>        tAPIColumnCompare[] aAPIColumnCompare aApiInsertColumns aAPIMoveColumns aAPIRenameColumns aAPIRemoveColumns
52157>>>        tColumnType ColumnType
52157>>>        tColumnType ColumnType
52157>>>
52157>>>        Move False to Err
52158>>>        Close hTable
52159>>>        Get OpenTableExclusive hTable to bIsOpen
52160>>>        If (bIsOpen = False) Begin
52162>>>            Error DFERR_PROGRAM ("Function 'ApiColumnsUpdate'. Can't open table number:" * String(hTable))
52163>>>>
52163>>>            Function_Return False
52164>>>        End 
52164>>>>
52164>>>        
52164>>>        Get piDbType to iDbType
52165>>>        Get_Attribute DF_FILE_RECNUM_TABLE of hTable to bRecnumTable
52168>>>        Move bIsSQLTableFrom to bIsSQLDriver
52169>>>        Get UtilTableIsSQL hTable to bIsSQLTableTo
52170>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverIDTo
52173>>>
52173>>>        Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
52174>>>
52174>>>        // Before we start to change the table we need to do three things;
52174>>>        // 1) Insert any new fields
52174>>>        Get UtilColumnsCheckForInserts hTable aAPIColumnCompare to aApiInsertColumns
52175>>>        If (SizeOfArray(aApiInsertColumns)) Begin
52177>>>            Get UtilColumnsInsert sDriverIDFrom hTable aApiInsertColumns to bOK
52178>>>            If (bOK = False) Begin
52180>>>                Function_Return False
52181>>>            End
52181>>>>
52181>>>            // Update info with changes made.
52181>>>            Get UtilColumnsStructFill hTable to aColumnsTo
52182>>>            Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
52183>>>        End
52183>>>>
52183>>>
52183>>>        // 2) Move fields with same names
52183>>>        Get UtilColumnsCheckForMoves hTable aAPIColumnCompare to aAPIMoveColumns
52184>>>        If (SizeOfArray(aAPIMoveColumns)) Begin
52186>>>            Get UtilColumnsMove hTable aColumnsFrom aColumnsTo aAPIMoveColumns to bOK
52187>>>            If (bOK = False) Begin
52189>>>                Function_Return False
52190>>>            End
52190>>>>
52190>>>            Get UtilColumnsStructFill hTable to aColumnsTo
52191>>>            Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
52192>>>        End
52192>>>>
52192>>>        
52192>>>        // 3) Rename fields
52192>>>        Get UtilColumnsCheckForRenames hTable aAPIColumnCompare to aAPIRenameColumns
52193>>>        If (SizeOfArray(aAPIRenameColumns)) Begin
52195>>>            Get UtilColumnsRename hTable aAPIRenameColumns to bOK
52196>>>            If (bOK = False) Begin
52198>>>                Function_Return False
52199>>>            End
52199>>>>
52199>>>            Get UtilColumnsStructFill hTable to aColumnsTo
52200>>>            Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
52201>>>        End
52201>>>>
52201>>>
52201>>>        // 4) Remove fields if more fields currently exists compared to the new table definition.
52201>>>//        Get utilColumnsCheckForRemoves hTable aAPIColumnCompare to aAPIRemoveColumns
52201>>>//        If (SizeOfArray(aAPIRemoveColumns)) Begin
52201>>>//            Get UtilColumnsRemove hTable aAPIRemoveColumns to bOK
52201>>>//            If (bOK = False) Begin
52201>>>//                Function_Return False
52201>>>//            End
52201>>>//            Get UtilColumnsStructFill hTable to aColumnsTo
52201>>>//            Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
52201>>>//        End
52201>>>
52201>>>        // If any of the fields were changed by "Insert", "Rename" or "Move", we need to compare the fields again:
52201>>>        If (SizeOfArray(aApiInsertColumns) or SizeOfArray(aAPIRenameColumns) or SizeOfArray(aAPIMoveColumns)) Begin
52203>>>            Get UtilColumnsCompare sDriverIDFrom sDriverIDTo bIsSQLTableFrom bIsSQLTableTo aAPIColumnCompare bCompareDate_DateTime to bIsSame
52204>>>            If (bIsSame = True) Begin
52206>>>                Function_Return True
52207>>>            End
52207>>>>
52207>>>        End
52207>>>>
52207>>>
52207>>>        // We can now continue to make standard field changes:
52207>>>        Get OpenTableExclusive hTable to bIsOpen
52208>>>        Set Private.phCurrentTable to hTable
52209>>>        Move hTable to hFile
52210>>>        Structure_Start hFile sDriverIDTo
52211>>>
52211>>>            Move (SizeOfArray(aAPIColumnCompare)) to iColumns
52212>>>            Decrement iColumns
52213>>>            for iCount from 0 to iColumns
52219>>>>
52219>>>                Send DoAdvance of ghoProgressBar
52220>>>
52220>>>                Move aAPIColumnCompare[iCount].iFieldNumber to iColumn
52221>>>                Set Private.piCurrentField                  to iColumn
52222>>>                Get UtilColumnCompare sDriverIDFrom sDriverIDTo bIsSQLTableFrom aAPIColumnCompare[iCount].bIsSQLTypeTo aAPIColumnCompare[iCount] bCompareDate_DateTime to bIsSame
52223>>>                If (bIsSame = False) Begin
52225>>>
52225>>>                    Move aAPIColumnCompare[iCount].bExistsFrom          to bFieldExistsFrom
52226>>>                    If (bFieldExistsFrom = True) Begin
52228>>>                        Move aAPIColumnCompare[iCount].bExistsTo        to bFieldExistsTo
52229>>>                        Move aAPIColumnCompare[iCount].sFieldNameFrom   to sFieldNameFrom
52230>>>                        Move aAPIColumnCompare[iCount].iLengthFrom      to iLengthFrom
52231>>>                        Move aAPIColumnCompare[iCount].iPrecisionFrom   to iPrecisionFrom
52232>>>                        Move aAPIColumnCompare[iCount].iOptionsFrom     to iOptionFrom
52233>>>
52233>>>                        Move aAPIColumnCompare[iCount].iTypeFrom        to iTypeFrom
52234>>>                        Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iTypeFrom iLengthFrom to iDataFlexType
52235>>>                        If (iTypeFrom < -1490) Begin
52237>>>                            Move (iTypeFrom + 1500)                     to iTypeFrom
52238>>>                        End
52238>>>>
52238>>>
52238>>>                        // If one of the two tables are SQL and the other Embedded we need to "translate"
52238>>>                        // data types between Embedded and SQL, else we can't compare the data types.
52238>>>                        If (bIsSQLTableFrom = True and bIsSQLTableTo = False) Begin
52240>>>                            Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iTypeFrom iLengthFrom to iTypeFrom
52241>>>                            If (iTypeFrom = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
52243>>>                                Move DF_DATE to iTypeFrom
52244>>>                            End
52244>>>>
52244>>>                        End
52244>>>>
52244>>>                        Else If (bIsSQLTableFrom = False and bIsSQLTableTo = True) Begin
52247>>>                            Get UtilSqlColumnTypeToDataFlexType sDriverIDTo   iDbType iTypeTo   iLengthTo   to iTypeTo
52248>>>                        End
52248>>>>
52248>>>
52248>>>                        Move aAPIColumnCompare[iCount].sFieldNameTo to sFieldNameTo
52249>>>                        Move aAPIColumnCompare[iCount].iLengthTo    to iLengthTo
52250>>>                        Move aAPIColumnCompare[iCount].iPrecisionTo to iPrecisionTo
52251>>>                        Move aAPIColumnCompare[iCount].iOptionsTo   to iOptionTo
52252>>>                        Move aAPIColumnCompare[iCount].iTypeTo      to iTypeTo
52253>>>
52253>>>                        Move False to bSkipTypeChange
52254>>>                        If (bCompareDate_DateTime = False) Begin
52256>>>                            Move ((iTypeFrom = SQL_TYPE_DATE or iTypeFrom = SQL_TYPE_TIME or iTypeFrom = SQL_TYPE_TIMESTAMP) and (iTypeTo = SQL_TYPE_DATE or iTypeTo = SQL_TYPE_TIME or iTypeTo = SQL_TYPE_TIMESTAMP)) to bSkipTypeChange
52257>>>                        End
52257>>>>
52257>>>
52257>>>                        If (bFieldExistsTo = False) Begin
52259>>>                            Move 0 to iColumn
52260>>>                            Create_Field hFile At iColumn
52261>>>                            Set Private.piCurrentField to iColumn
52262>>>                        End
52262>>>>
52262>>>
52262>>>                        If (sFieldNameFrom <> sFieldNameTo) Begin
52264>>>                            Set_Attribute DF_FIELD_NAME of hFile iColumn to sFieldNameFrom
52267>>>                        End
52267>>>>
52267>>>
52267>>>                        If (bIsSQLTableFrom = True and bIsSQLTableTo = True and aAPIColumnCompare[iCount].iOptionsFrom <> C_tAPIColumn_Identity) Begin
52269>>>                            Set_Attribute DF_FIELD_NULL_ALLOWED  of hFile iColumn to aAPIColumnCompare[iCount].bAllowNULLFrom
52272>>>                            Move aAPIColumnCompare[iCount].sDefaultValueFrom to sDefaultValue
52273>>>                            If (iDataFlexType = DF_BCD and Left(String(sDefaultValue), 1) <> "[") Begin
52275>>>                                Move ("[" + String(sDefaultValue) + "]") to sDefaultValue
52276>>>                            End
52276>>>>
52276>>>                            Set_Attribute DF_FIELD_DEFAULT_VALUE of hFile iColumn to sDefaultValue
52279>>>                        End
52279>>>>
52279>>>
52279>>>                        If (bSkipTypeChange = False) Begin
52281>>>                            If (iTypeFrom <> iTypeTo) Begin
52283>>>                                If (bIsSQLTableTo = True) Begin
52285>>>                                    Set_Attribute DF_FIELD_NATIVE_TYPE of hFile iColumn to iTypeFrom
52288>>>                                End
52288>>>>
52288>>>                                Else Begin                                                   
52289>>>                                    If (iDataFlexType = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
52291>>>                                        Move DF_DATE to iDataFlexType  // Date
52292>>>                                    End
52292>>>>
52292>>>                                    Set_Attribute DF_FIELD_TYPE of hFile iColumn to iDataFlexType
52295>>>                                End
52295>>>>
52295>>>                            End
52295>>>>
52295>>>                        End
52295>>>>
52295>>>
52295>>>                        Get UtilColumnIsDateType iTypeFrom bIsSQLTableTo to bIsDateType
52296>>>                        // We can't set the length or precision for Date type columns (they are fixed).
52296>>>                        If (bIsDateType = False) Begin
52298>>>                            If (iLengthFrom <> iLengthTo) Begin
52300>>>                                Set_Attribute DF_FIELD_LENGTH of hFile iColumn to iLengthFrom
52303>>>                            End
52303>>>>
52303>>>                            If (iPrecisionFrom <> iPrecisionTo) Begin
52305>>>                                Set_Attribute DF_FIELD_PRECISION of hFile iColumn to iPrecisionFrom
52308>>>                            End
52308>>>>
52308>>>                        End
52308>>>>
52308>>>
52308>>>                        If (bIsSQLTableTo = True and iOptionFrom =  C_tAPIColumn_Identity and iOptionTo <> C_tAPIColumn_Identity) Begin
52310>>>                            // Can't set a recnum table to "DF_FIELD_IS_IDENTITY"
52310>>>                            If (bRecnumTable = True) Begin
52312>>>                                Set_Attribute DF_FILE_RECNUM_TABLE of hTable to False
52315>>>                            End
52315>>>>
52315>>>
52315>>>                            // We might need to create an index here.
52315>>>                            // To be able to set the DF_FIELD_IS_IDENTITY the index must already exist, but it might not at this stage.
52315>>>                            // This should probably fix that problem and if an adjustment is needed, it will get done with the normal
52315>>>                            // index update checking logic.
52315>>>                            Get_Attribute DF_FIELD_INDEX           of hFile iColumn to iIndex
52318>>>                            If (iIndex = 0 and Uppercase(sFieldNameTo) <> "RECNUM") Begin
52320>>>                                Create_Index hFile at iIndex
52321>>>                                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hFile iIndex to 1
52324>>>                            End
52324>>>>
52324>>>
52324>>>                            Set_Attribute DF_INDEX_SEGMENT_FIELD   of hFile iIndex 1 to iColumn
52327>>>                            Set_Attribute DF_FILE_PRIMARY_INDEX    of hFile          to iIndex
52330>>>                                // Note: The order of these two are crucial!
52330>>>                                Set_Attribute DF_INDEX_SQL_PRIMARY_KEY of hFile iIndex to True
52333>>>                                Set_Attribute DF_FIELD_IS_IDENTITY of hFile iColumn    to True
52336>>>                        End
52336>>>>
52336>>>                    End
52336>>>>
52336>>>                    Else Begin
52337>>>                        Delete_Field hFile iColumn
52338>>>                        Move (RemoveFromArray(aColumnsTo, iCount)) to aColumnsTo
52339>>>                        Move (SizeOfArray(aColumnsTo)) to iCount2
52340>>>                        Decrement iCount2
52341>>>                        // We need to adjust FieldNumbers in the array with one, as we just deleted a field,
52341>>>                        // starting with the array number we just deleted the field for.
52341>>>                        for iColumn2 from iCount to iCount2
52347>>>>
52347>>>                            Move (aColumnsTo[iColumn2].iFieldNumber - 1) to aColumnsTo[iColumn2].iFieldNumber
52348>>>                        Loop
52349>>>>
52349>>>                        Decrement iCount
52350>>>                        Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
52351>>>                        Move (SizeOfArray(aAPIColumnCompare)) to iColumns
52352>>>                        If (SizeOfArray(aColumnsFrom) = SizeOfArray(aColumnsTo)) Begin
52354>>>                            Move iColumns to iCount 
52355>>>                        End
52355>>>>
52355>>>                    End
52355>>>>
52355>>>                End
52355>>>>
52355>>>            Loop
52356>>>>
52356>>>
52356>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
52357>>>        Structure_End hFile DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
52359>>>
52359>>>        Set Action_Text of ghoStatusPanel to ""
52360>>>        Function_Return (Err = False)
52361>>>    End_Function
52362>>>
52362>>>    // * Dummy function for the Studio's Code Explorer *
52362>>>    Function API_INDEX_FUNCTIONS Returns Boolean
52364>>>        Function_Return False
52365>>>    End_Function
52366>>>
52366>>>    // Get ApiIndexCreate Customers.File_Number 1 2 0 1 -1 -1 -1 -1 -1 -1 -1 -1 to bOK
52366>>>    // Note: the "-1" can be left out as this function is overloaded to make it easier to call.
52366>>>    // Note: This doesn't set Descending attributes - Use function IndexChangeDirection to do that.
52366>>>    Function ApiIndexCreate Handle hTable Integer iIndex Integer iSegments Integer iSgmnt1 Integer iSgmnt2 Integer iSgmnt3 Integer iSgmnt4 Integer iSgmnt5 Integer iSgmnt6 Integer iSgmnt7 Integer iSgmnt8 Integer iSgmnt9 Integer iSgmnt10 Returns Boolean
52368>>>        Integer iTableNo iSegment1 iSegment2 iSegment3 iSegment4 iSegment5 iSegment6 iSegment7 iSegment8 iSegment9 iSegment10  iIndexSegments
52368>>>        String sDriverID
52368>>>        Boolean bOK bExists bIsMertechDriver bIsSQLTable
52368>>>
52368>>>        Get AutoConnectionIDLogin to bOK
52369>>>        Get OpenTableExclusive hTable to bOK
52370>>>        If (bOK = False) Begin
52372>>>            Function_Return False
52373>>>        End
52373>>>>
52373>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
52376>>>
52376>>>            Get UtilTableIsSQL hTable to bIsSQLTable
52377>>>            If (bIsSQLTable = True) Begin
52379>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
52382>>>            End
52382>>>>
52382>>>
52382>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iIndexSegments
52385>>>            Move (iIndexSegments > 0) to bExists
52386>>>        If (bExists = True) Begin
52388>>>            Function_Return True
52389>>>        End
52389>>>>
52389>>>
52389>>>        Move -1 to iSegment1
52390>>>        Move -1 to iSegment2
52391>>>        Move -1 to iSegment3
52392>>>        Move -1 to iSegment4
52393>>>        Move -1 to iSegment5
52394>>>        Move -1 to iSegment6
52395>>>        Move -1 to iSegment7
52396>>>        Move -1 to iSegment8
52397>>>        Move -1 to iSegment9
52398>>>        Move -1 to iSegment10
52399>>>
52399>>>        If (num_arguments > 3) Begin
52401>>>            Move iSgmnt1 to iSegment1
52402>>>        End
52402>>>>
52402>>>        If (num_arguments > 4) Begin
52404>>>            Move iSgmnt2 to iSegment2
52405>>>        End
52405>>>>
52405>>>        If (num_arguments > 5) Begin
52407>>>            Move iSgmnt3 to iSegment3
52408>>>        End
52408>>>>
52408>>>        If (num_arguments > 6) Begin
52410>>>            Move iSgmnt4 to iSegment4
52411>>>        End
52411>>>>
52411>>>        If (num_arguments > 7) Begin
52413>>>            Move iSgmnt5 to iSegment5
52414>>>        End
52414>>>>
52414>>>        If (num_arguments > 8) Begin
52416>>>            Move iSgmnt6 to iSegment6
52417>>>        End
52417>>>>
52417>>>        If (num_arguments > 9) Begin
52419>>>            Move iSgmnt7 to iSegment7
52420>>>        End
52420>>>>
52420>>>        If (num_arguments > 10) Begin
52422>>>            Move iSgmnt8 to iSegment8
52423>>>        End
52423>>>>
52423>>>        If (num_arguments > 11) Begin
52425>>>            Move iSgmnt9 to iSegment9
52426>>>        End
52426>>>>
52426>>>        If (num_arguments > 12) Begin
52428>>>            Move iSgmnt10 to iSegment10
52429>>>        End
52429>>>>
52429>>>
52429>>>        Move False to Err
52430>>>        Move hTable to iTableNo
52431>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
52432>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_PARAMETER
52433>>>        Send Ignore_Error of Error_Object_Id DFERR_NON_FATAL_RESTRUCTURE_ERROR
52434>>>
52434>>>        // We start by deleting the index, if it exists.
52434>>>        If (bExists = True) Begin
52436>>>            Structure_Start hTable sDriverID
52437>>>                Delete_Index iTableNo iIndex
52438>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
52439>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
52441>>>        End
52441>>>>
52441>>>
52441>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
52442>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_PARAMETER
52443>>>        Send Trap_Error of Error_Object_Id DFERR_NON_FATAL_RESTRUCTURE_ERROR
52444>>>        Set Action_Text of ghoStatusPanel to ""
52445>>>        Move False to Err
52446>>>        Move 0 to LastErr
52447>>>
52447>>>        // Need to re-open if index deleted.
52447>>>        Move iTableNo to hTable
52448>>>        Get OpenTableExclusive hTable to bOK
52449>>>        If (bOK = False) Begin
52451>>>            Function_Return False
52452>>>        End
52452>>>>
52452>>>
52452>>>        Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
52453>>>        Structure_Start hTable sDriverID
52454>>>            Create_Index hTable At iIndex
52455>>>            Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iSegments
52458>>>
52458>>>            If (iSgmnt1 <> -1) Begin
52460>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 1 to iSegment1
52463>>>            End
52463>>>>
52463>>>            If (iSegment2 <> -1) Begin
52465>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 2 to iSegment2
52468>>>            End
52468>>>>
52468>>>            If (iSegment3 <> -1) Begin
52470>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 3 to iSegment3
52473>>>            End
52473>>>>
52473>>>            If (iSegment4 <> -1) Begin
52475>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 4 to iSegment4
52478>>>            End
52478>>>>
52478>>>            If (iSegment5 <> -1) Begin
52480>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 5 to iSegment5
52483>>>            End
52483>>>>
52483>>>            If (iSegment6 <> -1) Begin
52485>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 6 to iSegment6
52488>>>            End
52488>>>>
52488>>>            If (iSegment7 <> -1) Begin
52490>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 7 to iSegment7
52493>>>            End
52493>>>>
52493>>>            If (iSegment8 <> -1) Begin
52495>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 8 to iSegment8
52498>>>            End
52498>>>>
52498>>>            If (iSegment9 <> -1) Begin
52500>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 9 to iSegment9
52503>>>            End
52503>>>>
52503>>>            If (iSegment10 <> -1) Begin
52505>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 10 to iSegment10
52508>>>            End
52508>>>>
52508>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
52509>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
52511>>>
52511>>>        Set Action_Text of ghoStatusPanel to ""
52512>>>        Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
52513>>>
52513>>>        Function_Return (Err = False)
52514>>>    End_Function
52515>>>
52515>>>    // Example:
52515>>>    // Get ApiIndexCreateEx hTable 1 (StrSplitToArray("1,5,6,7,8,2,3,4,10,9,11", ",")) to bOk
52515>>>    // Note: The StrSplitToArray function was introduced with DataFlex 18.2
52515>>>    Function ApiIndexCreateEx Handle hTable Integer iIndex Integer[] iSgmnts Returns Boolean
52517>>>        Integer iTableNo iNumSgmnt iNumSgmnts
52517>>>        String sDriverID
52517>>>        Boolean bOK bIsSQLTable
52517>>>
52517>>>        Get AutoConnectionIDLogin to bOK
52518>>>
52518>>>        Move False to Err
52519>>>        Move hTable to iTableNo
52520>>>        Get OpenTableExclusive hTable to bOK
52521>>>        If (bOK = False) Begin
52523>>>            Function_Return False
52524>>>        End
52524>>>>
52524>>>
52524>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
52527>>>            Get UtilTableIsSQL hTable to bIsSQLTable
52528>>>            If (bIsSQLTable = True) Begin
52530>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
52533>>>            End
52533>>>>
52533>>>
52533>>>        // We start by deleting the index
52533>>>        Structure_Start hTable sDriverID
52534>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
52535>>>            Send Ignore_Error of Error_Object_Id DFERR_BAD_PARAMETER
52536>>>            Delete_Index iTableNo iIndex
52537>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
52538>>>            Send Trap_Error of Error_Object_Id DFERR_BAD_PARAMETER
52539>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE
52541>>>
52541>>>        Move False to Err
52542>>>        Move iTableNo to hTable
52543>>>        Get OpenTableExclusive hTable to bOK
52544>>>        If (bOK = False) Begin
52546>>>            Function_Return False
52547>>>        End
52547>>>>
52547>>>
52547>>>        Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
52548>>>        Structure_Start hTable sDriverID
52549>>>            Move (SizeOfArray(iSgmnts)) to iNumSgmnts
52550>>>
52550>>>            Create_Index hTable at iIndex
52551>>>            Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSgmnts
52554>>>
52554>>>            for iNumSgmnt from 0 to (iNumSgmnts - 1)
52560>>>>
52560>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex (iNumSgmnt + 1) to iSgmnts[iNumSgmnt]
52563>>>            Loop
52564>>>>
52564>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE
52566>>>
52566>>>        Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
52567>>>
52567>>>        Function_Return (Err = False)
52568>>>    End_Function
52569>>>
52569>>>    Function APIIndexCreateByFieldNames Handle hTable tAPIIndex APIIndex tAPIIndex[] APIIndexTo tAPIIndexSegment[] aIndexSegments Returns Boolean
52571>>>        Integer iCount iSegmentsFrom iFieldFrom iSegmentsTo iSQLIndexType iTableNo
52571>>>        String sDriverID sSQLIndexName
52571>>>        Boolean bOK bIsSQLTable bIsOpen bIsSQLPrimaryKey bIsSQLClustered bIsSQLTemporaryIndex bExists
52571>>>
52571>>>        Move (SizeOfArray(aIndexSegments)) to iSegmentsFrom
52572>>>        If (iSegmentsFrom = 0) Begin
52574>>>            Function_Return False
52575>>>        End
52575>>>>
52575>>>
52575>>>        Get AutoConnectionIDLogin to bOK
52576>>>        Move False to Err
52577>>>        Get OpenTableExclusive hTable to bIsOpen
52578>>>        If (bIsOpen = False) Begin
52580>>>            Function_Return False
52581>>>        End
52581>>>>
52581>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
52584>>>        Get UtilTableIsSql hTable to bIsSQLTable
52585>>>            If (bIsSQLTable = True) Begin
52587>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
52590>>>            End
52590>>>>
52590>>>
52590>>>        Move 0     to iSegmentsTo
52591>>>        Move 0     to iSQLIndexType
52592>>>        Move ""    to sSQLIndexName
52593>>>        Move False to bIsSQLTemporaryIndex
52594>>>        Move False to bIsSQLPrimaryKey
52595>>>        Move False to bIsSQLClustered
52596>>>
52596>>>            Get UtilIndexTempRenameSQLName hTable APIIndex.sSQLIndexName sDriverID          to bOK
52597>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable APIIndex.iIndexNumber              to iSegmentsTo
52600>>>        Move (iSegmentsTo > 0) to bExists
52601>>>        If (bExists = True) Begin
52603>>>            If (bIsSQLTable = True and iSegmentsTo > 0) Begin
52605>>>                Get_Attribute DF_INDEX_NAME of hTable APIIndex.iIndexNumber                 to sSQLIndexName
52608>>>                    Get_Attribute DF_INDEX_SQL_TYPE of hTable APIIndex.iIndexNumber         to iSQLIndexType
52611>>>                    Move (iSQLIndexType = DF_INDEX_TEMPORARY)                               to bIsSQLTemporaryIndex
52612>>>                    Get_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable APIIndex.iIndexNumber  to bIsSQLPrimaryKey
52615>>>                    Get_Attribute DF_INDEX_CLUSTERED       of hTable APIIndex.iIndexNumber  to bIsSQLClustered
52618>>>            End
52618>>>>
52618>>>        End
52618>>>>
52618>>>
52618>>>        Move hTable to iTableNo
52619>>>        Move False to Err
52620>>>        Move 0 to LastErr
52621>>>
52621>>>        // Note: If the SQL index type = DF_INDEX_TEMPORARY, we _must_ set the DF_INDEX_SQL_TYPE
52621>>>        //       _outside_ the Structure_Start/End construct.
52621>>>//        Move False to bIsSQLTemporaryIndex
52621>>>//        #IF (!@ > 170)
52621>>>//            If (bIsSQLTemporaryIndex = True and APIIndex.iIndexNumber <= iLastIndex) Begin
52621>>>//                If (APIIndex.iSQLIndexType <> iSQLIndexType) Begin
52621>>>//                    Set_Attribute DF_INDEX_SQL_TYPE of hTable APIIndex.iIndexNumber to APIIndex.iSQLIndexType // (DF_INDEX_SQL_TYPE = DF_INDEX_SERVER, DF_INDEX_CLIENT, DF_INDEX_SERVER_ONLY or DF_INDEX_TEMPORARY)
52621>>>//                End
52621>>>//            End
52621>>>//        #ENDIF
52621>>>
52621>>>        Structure_Start hTable sDriverID
52622>>>            If (bExists = True) Begin
52624>>>                Delete_Index iTableNo APIIndex.iIndexNumber
52625>>>            End
52625>>>>
52625>>>
52625>>>            Create_Index hTable At APIIndex.iIndexNumber
52626>>>
52626>>>            If (bIsSQLTable = True) Begin // (DF_INDEX_SQL_TYPE = DF_INDEX_SERVER, DF_INDEX_CLIENT, DF_INDEX_SERVER_ONLY or DF_INDEX_TEMPORARY)
52628>>>                Set_Attribute DF_INDEX_SQL_TYPE        of hTable APIIndex.iIndexNumber to APIIndex.iSQLIndexType
52631>>>                Set_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable APIIndex.iIndexNumber to APIIndex.bIsSQLPrimaryKey
52634>>>                Set_Attribute DF_INDEX_CLUSTERED       of hTable APIIndex.iIndexNumber to APIIndex.bIsSQLClustered
52637>>>                Set_Attribute DF_INDEX_NAME            of hTable APIIndex.iIndexNumber to APIIndex.sSQLIndexName
52640>>>            End
52640>>>>
52640>>>
52640>>>                    Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable APIIndex.iIndexNumber to iSegmentsFrom
52643>>>
52643>>>            for iCount from 0 to (iSegmentsFrom -1)
52649>>>>
52649>>>                Move aIndexSegments[iCount].iFieldNumber to iFieldFrom
52650>>>                If (iFieldFrom <> -1 ) Begin
52652>>>                        Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable APIIndex.iIndexNumber (iCount +1) to iFieldFrom
52655>>>                        Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable APIIndex.iIndexNumber (iCount +1) to aIndexSegments[iCount].bAscending
52658>>>                        Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable APIIndex.iIndexNumber (iCount +1) to aIndexSegments[iCount].bUppercase
52661>>>                End
52661>>>>
52661>>>            Loop
52662>>>>
52662>>>
52662>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
52663>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
52665>>>
52665>>>        Set Action_Text of ghoStatusPanel to ""
52666>>>
52666>>>        Function_Return (Err = False)
52667>>>    End_Function
52668>>>
52668>>>    // If an SQL index is to be renamed we need to check that the name doesn't exist already, but
52668>>>    // with another index number. If we find one we temporarily renames it by adding "TMP" to the SQL name.
52668>>>    Function UtilIndexTempRenameSQLName Handle hTable String sSQLIndexName String sDriverID Returns Boolean
52670>>>        Integer iLastIndex iCount iTableNo iSegments
52670>>>        String sSQLIndexNameCompare sTmpIndexName
52670>>>        Boolean bIsOpen bExists bIsSQLDriver bIsMertechDriver
52670>>>
52670>>>        // The Mertech drivers DF_INDEX_NAME property is read_only,
52670>>>        // so we can then not rename the index.
52670>>>        Get IsMertechDriver sDriverID to bIsMertechDriver
52671>>>        If (bIsMertechDriver = True) Begin
52673>>>            Function_Return False
52674>>>        End    
52674>>>>
52674>>>        Get IsSQLDriver sDriverID to bIsSQLDriver
52675>>>        
52675>>>        If (bIsSQLDriver = False) Begin
52677>>>            Function_Return False
52678>>>        End
52678>>>>
52678>>>
52678>>>        Move False to Err
52679>>>        Move hTable to iTableNo
52680>>>        Get_Attribute DF_FILE_LAST_INDEX_NUMBER of hTable to iLastIndex
52683>>>        for iCount from 0 to iLastIndex
52689>>>>
52689>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iCount to iSegments
52692>>>            Move (iSegments > 0) to bExists
52693>>>            If (bExists = True) Begin
52695>>>                Get_Attribute DF_INDEX_NAME of hTable iCount to sSQLIndexNameCompare
52698>>>                If (Lowercase(sSQLIndexName) = Lowercase(sSQLIndexNameCompare)) Begin
52700>>>                    Move (sSQLIndexNameCompare + String("_TMP")) to sTmpIndexName
52701>>>                    Structure_Start iTableNo sDriverID
52702>>>                        Set_Attribute DF_INDEX_NAME of iTableNo iCount to sTmpIndexName
52705>>>                    Structure_End iTableNo DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
52707>>>                    Open hTable
52709>>>                End
52709>>>>
52709>>>            End
52709>>>>
52709>>>        Loop
52710>>>>
52710>>>
52710>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
52713>>>        If (bIsOpen = False) Begin
52715>>>            Get OpenTableExclusive hTable to bIsOpen
52716>>>        End
52716>>>>
52716>>>        If (bIsOpen = False) Begin
52718>>>            Function_Return False
52719>>>        End
52719>>>>
52719>>>
52719>>>        Function_Return (Err = False)
52720>>>    End_Function
52721>>>
52721>>>    // Checks if an SQL Index name for the "FROM" database already exists in the TO database,
52721>>>    // but with another Index number. We can then not rename the SQL index name for the TO database table.
52721>>>    Function UtilIndexSQLIndexNameExists Handle hTable Integer iIndexNumberFrom String sSQLIndexNameFrom tAPIIndex[] APIIndexTo Returns Integer
52723>>>        Integer iSize iCount
52723>>>        Integer iRetVal
52723>>>
52723>>>        Move 0 to iRetVal
52724>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndexNumberFrom to iRetVal
52727>>>        If (iRetVal = 0) Begin
52729>>>            Function_Return 0
52730>>>        End
52730>>>>
52730>>>        Move (SizeOfArray(APIIndexTo)) to iSize
52731>>>        Decrement iSize
52732>>>        for iCount from 0 to iSize
52738>>>>
52738>>>            If (Uppercase(sSQLIndexNameFrom) = Uppercase(APIIndexTo[iCount].sSQLIndexName)) Begin
52740>>>                If (iIndexNumberFrom <> APIIndexTo[iCount].iIndexNumber) Begin
52742>>>                    Move APIIndexTo[iCount].iIndexNumber to iRetVal
52743>>>                End
52743>>>>
52743>>>            End
52743>>>>
52743>>>        Loop
52744>>>>
52744>>>
52744>>>        Function_Return iRetVal
52745>>>    End_Function
52746>>>
52746>>>    Function ApiIndexDeleteSegment Handle hTable Integer iIndex Integer iSegment Returns Boolean
52748>>>        Integer iNumSegments iCurSegment iSegmentCase iSegmentDirection iSegmentColumn
52748>>>        Boolean bIsSQLTable
52748>>>        
52748>>>            Get UtilTableIsSQL hTable to bIsSQLTable
52749>>>            If (bIsSQLTable = True) Begin
52751>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
52754>>>            End
52754>>>>
52754>>>
52754>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
52757>>>        If (iSegment = iNumSegments) Begin
52759>>>//            Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
52759>>>        End
52759>>>>
52759>>>
52759>>>        Else If (iSegment > 0 and iSegment < iNumSegments) Begin
52762>>>            for iCurSegment from iSegment to (iNumSegments - 1)
52768>>>>
52768>>>                //*** Move index segment attributes
52768>>>                Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment + 1) to iSegmentCase
52771>>>                Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment + 1) to iSegmentDirection
52774>>>                Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment + 1) to iSegmentColumn
52777>>>
52777>>>                Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment to iSegmentCase
52780>>>                Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment to iSegmentDirection
52783>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment to iSegmentColumn
52786>>>            Loop
52787>>>>
52787>>>
52787>>>            Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
52790>>>        End
52790>>>>
52790>>>
52790>>>        Function_Return (Err = False)
52791>>>    End_Function
52792>>>
52792>>>    Function APIIndexRemoveAllIndexes Handle hTable tAPIIndex[] APIIndex Returns Boolean
52794>>>        Integer iCount iSize iIndex
52794>>>        String sDriverID
52794>>>        Boolean bOK bIsSQLTable bIsOpen
52794>>>
52794>>>        Move (SizeOfArray(APIIndex)) to iSize
52795>>>        If (iSize = 0) Begin
52797>>>            Function_Return True
52798>>>        End
52798>>>>
52798>>>
52798>>>        Get AutoConnectionIDLogin to bOK
52799>>>        Move False to Err
52800>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
52803>>>        If (bIsOpen = False) Begin
52805>>>            Get OpenTableExclusive hTable to bIsOpen
52806>>>            If (bIsOpen = False) Begin
52808>>>                Function_Return False
52809>>>            End
52809>>>>
52809>>>        End
52809>>>>
52809>>>
52809>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
52812>>>        Get UtilTableIsSql hTable to bIsSQLTable
52813>>>            If (bIsSQLTable = True) Begin
52815>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
52818>>>            End
52818>>>>
52818>>>
52818>>>        Move False to Err
52819>>>        Move 0 to LastErr
52820>>>        Decrement iSize
52821>>>
52821>>>        Structure_Start hTable sDriverID
52822>>>            for iCount from 0 to iSize
52828>>>>
52828>>>//                Move False to bIsSQLPrimaryKey
52828>>>//                #IF (!@ > 180)   // DF 18.1 and up
52828>>>//                    Set Error_Report_Mode to DUF_ERROR_NO_REPORT
52828>>>//                    Get_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable APIIndex[iCount].iIndexNumber to bIsSQLPrimaryKey
52828>>>//                    Set Error_Report_Mode to DUF_ERROR_REPORT
52828>>>//                #ENDIF
52828>>>                // We can't delete if this is a primary key index:
52828>>>//                If (bIsSQLPrimaryKey = False) Begin
52828>>>                    Move APIIndex[iCount].iIndexNumber to iIndex
52829>>>                    Delete_Index hTable iIndex
52830>>>//                    Set Error_Report_Mode to DUF_ERROR_REPORT
52830>>>//                End
52830>>>            Loop
52831>>>>
52831>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
52832>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
52834>>>//        Move False to Err
52834>>>        Move 0 to LastErr
52835>>>
52835>>>        Set Action_Text of ghoStatusPanel to ""
52836>>>        Function_Return (Err = False)
52837>>>    End_Function
52838>>>
52838>>>    Function ApiIndexChangeDirection Handle hTable Integer iIndex Integer iSegment Integer iDirection Returns Boolean
52840>>>        Boolean bOK
52840>>>
52840>>>        Get AutoConnectionIDLogin to bOK
52841>>>        Move False to Err
52842>>>        Get OpenTableExclusive hTable to bOK
52843>>>        If (bOK = False) Begin
52845>>>            Function_Return False
52846>>>        End
52846>>>>
52846>>>        Structure_Start hTable
52847>>>            Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iSegment to iDirection
52850>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
52851>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
52853>>>
52853>>>        Set Action_Text of ghoStatusPanel to ""
52854>>>        Function_Return (Err = False)
52855>>>    End_Function
52856>>>
52856>>>    Function ApiIndexChangeUppercase Handle hTable Integer iIndex Integer iSegment Boolean bUppercase Returns Boolean
52858>>>        Integer iCase
52858>>>        Boolean bOK
52858>>>
52858>>>        If (bUppercase = True) Begin
52860>>>            Move DF_CASE_IGNORED to iCase
52861>>>        End
52861>>>>
52861>>>        Else Begin
52862>>>            Move DF_CASE_USED to iCase
52863>>>        End
52863>>>>
52863>>>
52863>>>        Get AutoConnectionIDLogin to bOK
52864>>>        Move False to Err
52865>>>        Get OpenTableExclusive hTable to bOK
52866>>>        If (bOK = False) Begin
52868>>>            Function_Return False
52869>>>        End
52869>>>>
52869>>>        Structure_Start hTable
52870>>>            Set_Attribute DF_INDEX_SEGMENT_CASE of hTable iIndex iSegment to iCase
52873>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
52874>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
52876>>>
52876>>>        Set Action_Text of ghoStatusPanel to ""
52877>>>        Function_Return (Err = False)
52878>>>    End_Function
52879>>>
52879>>>    // To delete an index
52879>>>    Function ApiIndexRemove Handle hTable Integer iIndex Returns Boolean
52881>>>        Integer iTableNo iNumSegments
52881>>>        String sDriverID
52881>>>        Boolean bOK bIsSQLTable
52881>>>
52881>>>        Get AutoConnectionIDLogin to bOK
52882>>>        Move False to Err
52883>>>        Move hTable to iTableNo
52884>>>        Get OpenTableExclusive hTable to bOK
52885>>>        If (bOK = False) Begin
52887>>>            Function_Return False
52888>>>        End
52888>>>>
52888>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
52891>>>            Get UtilTableIsSQL hTable to bIsSQLTable
52892>>>            If (bIsSQLTable = True) Begin
52894>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
52897>>>            End
52897>>>>
52897>>>
52897>>>        // Check to see if the index exists or not...
52897>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
52900>>>        If (iNumSegments = 0) Begin
52902>>>            Function_Return True // Then nothing to do.
52903>>>        End
52903>>>>
52903>>>
52903>>>        Structure_Start hTable sDriverID
52904>>>            Send Ignore_Error of Error_Object_Id DFERR_BAD_PARAMETER
52905>>>            Delete_Index iTableNo iIndex
52906>>>            Send Trap_Error of Error_Object_Id DFERR_BAD_PARAMETER
52907>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
52908>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
52910>>>
52910>>>        Set Action_Text of ghoStatusPanel to ""
52911>>>        Function_Return (Err = False)
52912>>>    End_Function
52913>>>
52913>>>    // Delete an Index Segment
52913>>>    Function ApiIndexRemoveSegment Handle hTable Integer iIndex Integer iSegment Returns Boolean
52915>>>        Boolean bOK bSQLDriver bIndexTemporary bIsSQLTable
52915>>>        Integer iNumSegments iCurSegment iSegmentCase iSegmentDirection iSegmentColumn
52915>>>        Integer iIndexType
52915>>>        String sDriverID
52915>>>
52915>>>        Get AutoConnectionIDLogin to bOK
52916>>>        Move False to Err
52917>>>
52917>>>        Get OpenTableExclusive hTable to bOK
52918>>>        If (bOK = False) Begin
52920>>>            Function_Return False
52921>>>        End
52921>>>>
52921>>>
52921>>>            Get UtilTableIsSQL hTable to bIsSQLTable
52922>>>            If (bIsSQLTable = True) Begin
52924>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
52927>>>            End
52927>>>>
52927>>>
52927>>>        // Check to see if the index exists or not...
52927>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
52930>>>        If (iNumSegments = 0) Begin
52932>>>            Function_Return False
52933>>>        End
52933>>>>
52933>>>
52933>>>        Move False to bIndexTemporary
52934>>>        Get psDriverID to sDriverID
52935>>>        Get IsSQLDriver sDriverID to bSQLDriver
52936>>>        If (bSQLDriver) Begin
52938>>>           Get_Attribute DF_INDEX_TYPE of hTable iIndex to iIndexType
52941>>>                Get_Attribute DF_INDEX_TYPE to iIndexType
52944>>>                Move True to bIndexTemporary
52945>>>        End
52945>>>>
52945>>>
52945>>>        // If SQL and Temporary Index must not use Structure_Start/Structure_End
52945>>>        If (bSQLDriver = True and bIndexTemporary = True) Begin
52947>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
52950>>>            If (iSegment = iNumSegments) Begin
52952>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
52955>>>            End
52955>>>>
52955>>>            Else If (iSegment > 0 and iSegment < iNumSegments) Begin
52958>>>                For iCurSegment from iSegment to (iNumSegments - 1)
52964>>>>
52964>>>                    //*** Move index segment attributes
52964>>>                    Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment + 1) to iSegmentCase
52967>>>                    Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment + 1) to iSegmentDirection
52970>>>                    Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment + 1) to iSegmentColumn
52973>>>                    Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment       to iSegmentCase
52976>>>                    Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment       to iSegmentDirection
52979>>>                    Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment       to iSegmentColumn
52982>>>                Loop
52983>>>>
52983>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
52986>>>            End
52986>>>>
52986>>>        End
52986>>>>
52986>>>
52986>>>        Else Begin
52987>>>           Structure_Start hTable
52988>>>               Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
52991>>>               If (iSegment = iNumSegments) Begin
52993>>>                   Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
52996>>>               End
52996>>>>
52996>>>               Else If (iSegment > 0 and iSegment < iNumSegments) Begin
52999>>>                   for iCurSegment from iSegment to (iNumSegments - 1)
53005>>>>
53005>>>                       //*** Move index segment attributes
53005>>>                       Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment + 1) to iSegmentCase
53008>>>                       Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment + 1) to iSegmentDirection
53011>>>                       Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment + 1) to iSegmentColumn
53014>>>                       Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment       to iSegmentCase
53017>>>                       Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment       to iSegmentDirection
53020>>>                       Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment       to iSegmentColumn
53023>>>                   Loop
53024>>>>
53024>>>                   Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
53027>>>               End
53027>>>>
53027>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
53028>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
53030>>>            Set Action_Text of ghoStatusPanel to ""
53031>>>        End
53031>>>>
53031>>>
53031>>>        Function_Return (Err = False)
53032>>>    End_Function
53033>>>
53033>>>    // Add/Insert an Index Segment
53033>>>    Function ApiIndexInsertSegment Handle hTable Integer iIndex Integer iSegment Integer iSegmentColumn Integer iSegmentCase Integer iSegmentDirection Returns Boolean
53035>>>        Boolean bOK bSQLDriver bIndexTemporary bIsSQLTable
53035>>>        Integer iNumSegments iCurSegment iCurSegmentColumn iCurSegmentCase iCurSegmentDirection
53035>>>        Integer iIndexType
53035>>>        String sDriverId
53035>>>
53035>>>        Get AutoConnectionIDLogin to bOK
53036>>>        Move False to Err
53037>>>
53037>>>        Get OpenTableExclusive hTable to bOK
53038>>>        If (bOK = False) Begin
53040>>>            Function_Return False
53041>>>        End
53041>>>>
53041>>>
53041>>>            Get UtilTableIsSQL hTable to bIsSQLTable
53042>>>            If (bIsSQLTable = True) Begin
53044>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
53047>>>            End
53047>>>>
53047>>>
53047>>>        Move False to bIndexTemporary
53048>>>        // Check to see if the index exists or not...
53048>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
53051>>>        If (iNumSegments = 0) Begin
53053>>>            Function_Return False
53054>>>        End
53054>>>>
53054>>>
53054>>>        Get psDriverID to sDriverID
53055>>>        Get IsSQLDriver sDriverID to bSQLDriver
53056>>>        If (bSQLDriver) Begin
53058>>>           Get_Attribute DF_INDEX_TYPE of hTable iIndex to iIndexType
53061>>>                Get_Attribute DF_INDEX_TYPE to iIndexType
53064>>>                Move True to bIndexTemporary
53065>>>        End
53065>>>>
53065>>>
53065>>>        // If SQL and Temporary Index must not use Structure_Start/Structure_End
53065>>>        If (bSQLDriver = True and bIndexTemporary = True) Begin
53067>>>           Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
53070>>>
53070>>>           If (iSegment > iNumSegments) Begin
53072>>>               Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments + 1)
53075>>>               Move (iNumSegments + 1) to iCurSegment
53076>>>           End
53076>>>>
53076>>>           Else If (iSegment > 0 and iSegment <= iNumSegments) Begin
53079>>>               Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments + 1)
53082>>>               Move iNumSegments to iCurSegment
53083>>>
53083>>>               While (iCurSegment > iSegment)
53087>>>                   //*** Move index segment attributes
53087>>>                   Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment - 1) to iCurSegmentCase
53090>>>                   Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment - 1) to iCurSegmentDirection
53093>>>                   Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment - 1) to iSegmentColumn
53096>>>                   Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment       to iCurSegmentCase
53099>>>                   Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment       to iCurSegmentDirection
53102>>>                   Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment       to iCurSegmentColumn
53105>>>                   Decrement iCurSegment
53106>>>               Loop
53107>>>>
53107>>>
53107>>>               //*** Now set new segment attributes
53107>>>               Set_Attribute DF_INDEX_SEGMENT_CASE          of hTable iIndex iCurSegment       to iSegmentCase
53110>>>               Set_Attribute DF_INDEX_SEGMENT_DIRECTION     of hTable iIndex iCurSegment       to iSegmentDirection
53113>>>               Set_Attribute DF_INDEX_SEGMENT_FIELD         of hTable iIndex iCurSegment       to iSegment
53116>>>           End
53116>>>>
53116>>>        End
53116>>>>
53116>>>
53116>>>        Else Begin
53117>>>        Structure_Start hTable
53118>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
53121>>>
53121>>>            If (iSegment > iNumSegments) Begin
53123>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments + 1)
53126>>>                Move (iNumSegments + 1) to iCurSegment
53127>>>            End
53127>>>>
53127>>>            Else If (iSegment > 0 and iSegment <= iNumSegments) Begin
53130>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments + 1)
53133>>>                Move iNumSegments to iCurSegment
53134>>>
53134>>>                While (iCurSegment > iSegment)
53138>>>                    //*** Move index segment attributes
53138>>>                    Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment - 1) to iSegmentCase
53141>>>                    Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment - 1) to iSegmentDirection
53144>>>                    Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment - 1) to iSegmentColumn
53147>>>                    Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment       to iSegmentCase
53150>>>                    Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment       to iSegmentDirection
53153>>>                    Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment       to iSegmentColumn
53156>>>                    Decrement iCurSegment
53157>>>                Loop
53158>>>>
53158>>>
53158>>>                //*** Now set new segment attributes
53158>>>                Set_Attribute DF_INDEX_SEGMENT_CASE          of hTable iIndex iCurSegment       to iSegmentCase
53161>>>                Set_Attribute DF_INDEX_SEGMENT_DIRECTION     of hTable iIndex iCurSegment       to iSegmentDirection
53164>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD         of hTable iIndex iCurSegment       to iSegment
53167>>>            End
53167>>>>
53167>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
53168>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
53170>>>            Set Action_Text of ghoStatusPanel to ""
53171>>>        End
53171>>>>
53171>>>
53171>>>        Function_Return (Err = False)
53172>>>    End_Function
53173>>>
53173>>>    // * Dummy function for the Studio's Code Explorer *
53173>>>    Function TABLE_UTILITY_FUNCTIONS Returns Boolean
53175>>>        Function_Return False
53176>>>    End_Function  
53177>>>    
53177>>>    // Preparation message before an SQL onversion. It will check and wash all embedded data tables and prepare them
53177>>>    // for an SQL conversion.
53177>>>    Function UtilPrepareDataFolderForSQLConversion Boolean bMoveMiscFilesToBackup Boolean bFixALLBogusFilelistEntries Boolean bConvertTo30Format Boolean bRepairAndReindex Boolean bFixBogusDates Returns Boolean
53179>>>        Boolean bConvertTo30FormatbOK bRepairAndReindexOK bFixBogusDatesOK bMoveMiscFilesToBackupOK
53179>>>        
53179>>>        Move True to bConvertTo30FormatbOK
53180>>>        Move True to bRepairAndReindexOK
53181>>>        Move True to bFixBogusDatesOK
53182>>>        Move True to bMoveMiscFilesToBackupOK
53183>>>        
53183>>>        If (bMoveMiscFilesToBackup = True) Begin   
53185>>>            Set Message_Text of ghoStatusPanel to "Moving misc. files to backup..."
53186>>>            Get UtilMoveMiscFilesToBackupFolder to bMoveMiscFilesToBackupOK
53187>>>        End                                                                                
53187>>>>
53187>>>        If (bFixALLBogusFilelistEntries = True) Begin
53189>>>            Set Message_Text of ghoStatusPanel to "Fixing bogus Filelist.cfg entries..."
53190>>>            Get UtilTableFixALLBogusFilelistEntries to bFixALLBogusFilelistEntries
53191>>>        End
53191>>>>
53191>>>        If (bConvertTo30Format = True) Begin
53193>>>            Set Message_Text of ghoStatusPanel to "Converting .dat files from 2.3->..."
53194>>>            Get UtilTableConvertALLTablesFrom23Format to bConvertTo30FormatbOK
53195>>>        End                                                 
53195>>>>
53195>>>        If (bRepairAndReindex = True) Begin
53197>>>            Set Message_Text of ghoStatusPanel to "Repairing and reindexing..."
53198>>>            Get UtilTableRepairAndReindexALL to bRepairAndReindexOK
53199>>>        End  
53199>>>>
53199>>>        If (bFixBogusDates = True) Begin
53201>>>            Set Message_Text of ghoStatusPanel to "Fixing bogus date values..."
53202>>>            Get UtilTablesFixAllDateBogusValues True False to bFixBogusDatesOK
53203>>>        End                                    
53203>>>>
53203>>>        
53203>>>        Function_Return (bConvertTo30FormatbOK = True and bFixALLBogusFilelistEntries = True and bRepairAndReindexOK = True and bFixBogusDatesOK = True and bMoveMiscFilesToBackupOK = True)
53204>>>    End_Function
53205>>>
53205>>>    Function UtilTableConvertALLTablesFrom23Format Returns Boolean
53207>>>        Boolean bOK bFlexErrs bTemp
53207>>>        Handle hTable
53207>>>        String sTableName
53207>>>        Integer iCount iSize
53207>>>        
53207>>>        Move True to bOK
53208>>>        Move 0 to hTable    
53209>>>
53209>>>        Get UtilFilelistNoOfTables to iSize
53210>>>        Set pbVisible    of ghoProgressBarOverall to True
53211>>>        Set piPosition   of ghoProgressBarOverall to 0
53212>>>        Set piMaximum    of ghoProgressBarOverall to iSize
53213>>>        Set piAdvanceBy  of ghoProgressBarOverall to 1
53214>>>
53214>>>        Repeat
53214>>>>
53214>>>            Set Action_Text of ghoStatusPanel to "Checking if table is in 2.3 format..."
53215>>>            Set piPosition of ghoProgressBarOverall to iCount  
53216>>>            Increment iCount
53217>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
53220>>>            If (hTable > 0) Begin
53222>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
53225>>>                Move (Uppercase(sTableName) = "FLEXERRS")  to bFlexErrs
53226>>>                If (bFlexErrs = False) Begin
53228>>>                    Get UtilTableConvertFrom23Format hTable to bTemp
53229>>>                    If (bTemp = False) Begin
53231>>>                        Move False to bOK
53232>>>                    End
53232>>>>
53232>>>                End
53232>>>>
53232>>>            End
53232>>>>
53232>>>        Until (hTable = 0)
53234>>>        
53234>>>        Set Action_Text of ghoStatusPanel to ""
53235>>>        Function_Return bOK
53236>>>    End_Function
53237>>>    
53237>>>    // Converts an embedded table from 2.3 -> 3.0.
53237>>>    // Returns: FALSE only if the table can't be opened or the conversion fails.
53237>>>    // It will return a TRUE if successful or the table is an SQL table.
53237>>>    Function UtilTableConvertFrom23Format Handle hTable Returns Boolean
53239>>>        Boolean bOK bIsEmbedded bIsAlias
53239>>>        String sRevision
53239>>>        
53239>>>        Get AutoConnectionIDLogin to bOK
53240>>>        If (bOK = False) Begin
53242>>>            Function_Return True
53243>>>        End
53243>>>>
53243>>>        Get OpenTableExclusive hTable to bOK
53244>>>        If (bOK = False) Begin
53246>>>            Function_Return True
53247>>>        End
53247>>>>
53247>>>        Get UtilTableIsEmbedded hTable to bIsEmbedded
53248>>>        If (bIsEmbedded = False) Begin
53250>>>            Function_Return True
53251>>>        End                             
53251>>>>
53251>>>        Get UtilTableIsAlias hTable to bIsAlias
53252>>>        If (bIsAlias = True) Begin
53254>>>            Function_Return True
53255>>>        End                     
53255>>>>
53255>>>        
53255>>>        Move False to Err
53256>>>        Get_Attribute DF_FILE_REVISION of hTable to sRevision
53259>>>        If (sRevision contains "2.3") Begin
53261>>>            Move False to Err
53262>>>            Set Private.phCurrentTable to hTable
53263>>>            Structure_Start hTable    
53264>>>                Set_Attribute DF_FILE_INTEGRITY_CHECK of hTable to True
53267>>>                Set Action_Text of ghoStatusPanel to "Restructures table to 3.0/4.0"
53268>>>            Structure_End hTable DF_STRUCTEND_OPT_FORCE "." ghoDbUpdateHandler
53270>>>            Set Action_Text of ghoStatusPanel to ""
53271>>>        End
53271>>>>
53271>>>        
53271>>>        Function_Return (Err = False)
53272>>>    End_Function
53273>>>
53273>>>    Function UtilTableFixALLBogusFilelistEntries Returns Boolean
53275>>>        Boolean bIgnore bExists bOK bResponse
53275>>>        Handle hTable   
53275>>>        String sTableName
53275>>>        
53275>>>        Move False to Err 
53276>>>        Move True to bOK
53277>>>        Move 0 to hTable
53278>>>        Repeat
53278>>>>
53278>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
53281>>>            If (hTable > 0) Begin
53283>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
53286>>>                Move (Uppercase(sTableName) = "FLEXERRS" or Uppercase(sTableName) = "CODETYPE" or Uppercase(sTableName) = "CODEMAST")  to bIgnore
53287>>>                If (bIgnore = False) Begin
53289>>>                    Get UtilTableExists hTable to bExists
53290>>>                    If (bExists = False) Begin
53292>>>                        Get ApiTableChangeFileListSlot "" "" "" hTable DATAFLEX_ID to bResponse
53293>>>                        If (bResponse = False) Begin
53295>>>                            Move False to bOK
53296>>>                        End
53296>>>>
53296>>>                        
53296>>>                    End
53296>>>>
53296>>>                End
53296>>>>
53296>>>            End
53296>>>>
53296>>>        Until (hTable = 0)                     
53298>>>        
53298>>>        Set Action_Text of ghoStatusPanel to "" 
53299>>>        Function_Return bOK
53300>>>    End_Function
53301>>>    
53301>>>    // Replaces all date values with CS_DUFLowestAllowedDateValue for all tables in Filelist.cfg,
53301>>>    // _except_ those tables that has been excluded with the "ApiTableDateCorrectionAddException" message.
53301>>>    // If the passed bAllowZeroDates = True, date columns that are = 0 will not be changed.
53301>>>    // This is for prepairing embedded tables (*.dat) before an SQL conversion.
53301>>>    //
53301>>>    // The root of the problem is the following:
53301>>>    // The data type Date in SQL has a range of accepted values from 01-01-0001 through 12-31-9999
53301>>>    // while the data type DateTime has a range of accepted values from 01-01-1753 through 12-31-9999
53301>>>    // So if you happen to have a Date from before 1753, or an empty / NULL value - this will be outside
53301>>>    // the range that DateTime can handle and if you then try to change a Date column to a DateTime,
53301>>>    // an SQL error will be thrown;
53301>>>    // "The conversion of a date data type to a datetime data type resulted in an out-of-range value".
53301>>>    Function UtilTablesFixAllDateBogusValues Boolean bFixZeroDates Boolean bResetIndexesToOnLine Returns Boolean
53303>>>        Boolean bOK bIsAlias bIsSQL
53303>>>        Integer iCount iSize iDateSize
53303>>>        Handle hTable
53303>>>        String sLogicalName
53303>>>        Integer[] aTablesToCheck aDateFields
53305>>>
53305>>>        Get _AllTablesDateCorrections to aTablesToCheck
53306>>>        Move (SizeOfArray(aTablesToCheck)) to iSize
53307>>>        Set pbVisible    of ghoProgressBarOverall to True
53308>>>        Set piPosition   of ghoProgressBarOverall to 0
53309>>>        Set piMaximum    of ghoProgressBarOverall to iSize
53310>>>        Set piAdvanceBy  of ghoProgressBarOverall to 1
53311>>>
53311>>>        Move True to bOK
53312>>>        Decrement iSize
53313>>>        for iCount from 0 to iSize
53319>>>>
53319>>>            Move aTablesToCheck[iCount] to hTable
53320>>>            Set piPosition of ghoProgressBarOverall to iCount
53321>>>            Get UtilTableIsAlias hTable to bIsAlias
53322>>>            Get UtilTableIsSql   hTable to bIsSQL
53323>>>
53323>>>            Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
53326>>>            Set TableName_Text of ghoStatusPanel to ("Processing Table Number:" * String(hTable) * "Name:" * String(sLogicalName))
53327>>>            Set Message_Text of ghoStatusPanel to "Fixing bogus date values..."
53328>>>
53328>>>            If (bIsAlias = False and bIsSQL = False) Begin
53330>>>                Get UtilCheckForDateFields hTable to aDateFields
53331>>>                Move (SizeOfArray(aDateFields)) to iDateSize
53332>>>                If (iDateSize > 0) Begin
53334>>>                    Get UtilTableCorrectBogusDateValues hTable aDateFields bFixZeroDates bResetIndexesToOnLine to bOK
53335>>>                    Close hTable
53336>>>                End
53336>>>>
53336>>>            End
53336>>>>
53336>>>        Loop
53337>>>>
53337>>>
53337>>>        Close DF_ALL
53338>>>        Function_Return bOK
53339>>>    End_Function
53340>>>
53340>>>    // Returns all fields of type Date or DateTime in an integer array with the field numbers.
53340>>>    Function UtilCheckForDateFields Handle hTable Returns Integer[]
53342>>>        Integer[] aDateFields aDateFieldsEmpty
53344>>>        Integer iSize iCount iType
53344>>>        Boolean bOpen bOK
53344>>>        
53344>>>        Get UtilTableExists hTable to bOK
53345>>>        If (bOK = False) Begin
53347>>>            Set Private.phCurrentTable to hTable
53348>>>            Error DFERR_PROGRAM "Table exists in Filelist.cfg but not on disk or SQL back-end."
53349>>>>
53349>>>            Function_Return aDateFieldsEmpty
53350>>>        End
53350>>>>
53350>>>        Set Private.phCurrentTable to hTable
53351>>>        Set Private.piCurrentField to 0
53352>>>
53352>>>//        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
53352>>>        Open hTable
53354>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
53357>>>//        Set Error_Report_Mode to DUF_ERROR_REPORT
53357>>>        If (bOpen = False) Begin
53359>>>//            Error DFERR_PROGRAM ("Table could not be opened." * String(hTable))
53359>>>            Function_Return aDateFieldsEmpty
53360>>>        End
53360>>>>
53360>>>
53360>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iSize
53363>>>        For iCount from 1 to iSize
53369>>>>
53369>>>            Get_Attribute DF_FIELD_TYPE of hTable iCount to iType
53372>>>            If (iType = DF_DATE or iType = DF_DATETIME) Begin
53374>>>                Move iCount to aDateFields[SizeOfArray(aDateFields)]
53375>>>            End
53375>>>>
53375>>>        Loop
53376>>>>
53376>>>
53376>>>        Function_Return aDateFields
53377>>>    End_Function
53378>>>
53378>>>    // Loops through all records for the passed hTable, and checks that all Date values
53378>>>    // for the passed aDateFields array are OK. Else the Data value is set to CS_DUFLowestAllowedDateValue
53378>>>    // and the record is saved
53378>>>    // If the passed bAllowZeroDates = True, date columns that are = 0 will not be changed.
53378>>>    // Note: It first sets all indexes to BATCH and reset them at the end.
53378>>>    Function UtilTableCorrectBogusDateValues Handle hTable Integer[] aDateFields Boolean bFixZeroDates Boolean bResetIndexesToOnLine Returns Boolean
53380>>>        Integer iSize iCount iField iRecord iTotalRecords iDateFormat iDriverIndex
53380>>>        String sDriverID sDateMin
53380>>>        Boolean bCancel bFound bOK bChange bOpened bSaveChanges 
53380>>>        Date dDate dDateMin
53380>>>        Integer[] iaChangeField
53381>>>
53381>>>        Get UtilTableExists hTable to bOK
53382>>>        // I believe we should just skip files not found and not report an error.
53382>>>        // This is because a filelist may have entries but no files/tables on disk, but
53382>>>        // this may be adjusted by other calls to DUF in a later update package. 
53382>>>        // Especially considering that this call is probably done at the very
53382>>>        // beginning of a DUF update.
53382>>>        If (bOK = False) Begin
53384>>>//            Set Private.phCurrentTable to hTable
53384>>>//            Error DFERR_PROGRAM "Table exists in Filelist.cfg but not on disk or SQL back-end."
53384>>>//            Function_Return False
53384>>>            Function_Return True
53385>>>        End
53385>>>>
53385>>>
53385>>>        // The CS_DUFLowestAllowedDateValue is defined as "01/01/1753", so we first set the
53385>>>        // date format to "USA" = "MM/DD/YYYY"
53385>>>        Get_Attribute DF_DATE_FORMAT to iDateFormat
53388>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_USA
53391>>>
53391>>>//        Send SetAllIndexesToBatch hTable True
53391>>>        Open hTable
53393>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
53396>>>        If (bOpened = False) Begin
53398>>>            Function_Return False
53399>>>        End
53399>>>>
53399>>>        
53399>>>        Set Private.phCurrentTable to hTable
53400>>>        Move 0 to iRecord
53401>>>        Move (SizeOfArray(aDateFields)) to iSize
53402>>>        Decrement iSize
53403>>>
53403>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
53406>>>        Get DriverIndex sDriverID to iDriverIndex
53407>>>        If (iDriverIndex <> 0) Begin
53409>>>            Get_Attribute DF_DRIVER_DUMMY_ZERO_DATE_VALUE of iDriverIndex to sDateMin
53412>>>            If (sDateMin = "") Begin
53414>>>                Move CS_DUFLowestAllowedDateValue to dDateMin
53415>>>            End
53415>>>>
53415>>>            Else Begin
53416>>>                If (IsDate(sDateMin)) Begin
53418>>>                    Move sDateMin to dDateMin
53419>>>                End
53419>>>>
53419>>>                Else Begin
53420>>>                    Move CS_DUFLowestAllowedDateValue to dDateMin
53421>>>                End
53421>>>>
53421>>>            End
53421>>>>
53421>>>        End
53421>>>>
53421>>>        Else Begin
53422>>>            Move CS_DUFLowestAllowedDateValue to dDateMin
53423>>>        End
53423>>>>
53423>>>
53423>>>        Get_Attribute DF_FILE_RECORDS_USED of hTable to iTotalRecords
53426>>>        Set piPosition   of ghoProgressBar to 0
53427>>>        Set piAdvanceBy  of ghoProgressBar to 100
53428>>>        Set piMaximum    of ghoProgressBar to iTotalRecords
53429>>>        Move False to Err
53430>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
53431>>>
53431>>>        Clear hTable
53432>>>        Repeat
53432>>>>
53432>>>            Vfind hTable 0 GT
53434>>>            Move Found to bFound
53435>>>            If (bFound = True) Begin
53437>>>                Move False to bSaveChanges
53438>>>                Move (ResizeArray(iaChangeField, 0)) to iaChangeField
53439>>>                Move (SizeOfArray(aDateFields)) to iSize
53440>>>                Decrement iSize
53441>>>                For iCount from 0 to iSize
53447>>>>
53447>>>                    Move aDateFields[iCount] to iField
53448>>>                    Get_Field_Value hTable iField to dDate
53451>>>                    If (bFixZeroDates = True) Begin
53453>>>                        Move (dDate = 0 or dDate < dDateMin) to bChange
53454>>>                    End
53454>>>>
53454>>>                    Else Begin
53455>>>                        Move (dDate <> 0 and dDate < dDateMin) to bChange
53456>>>                    End
53456>>>>
53456>>>                    If (bChange = True) Begin
53458>>>                        Move iField to iaChangeField[SizeOfArray(iaChangeField)]
53459>>>                    End
53459>>>>
53459>>>                Loop
53460>>>>
53460>>>
53460>>>                // Only change Date fields that needs to be changed.
53460>>>                If (SizeOfArray(iaChangeField)) Begin
53462>>>                    Reread hTable
53466>>>                        Move (SizeOfArray(iaChangeField)) to iSize
53467>>>                        Decrement iSize
53468>>>                        For iCount from 0 to iSize
53474>>>>
53474>>>                            Move iaChangeField[iCount] to iField
53475>>>                            Set Private.piCurrentField to iField
53476>>>                            Set_Field_Value hTable iField to dDateMin
53479>>>                        Loop
53480>>>>
53480>>>                        Move False to Err
53481>>>                        SaveRecord hTable
53482>>>                    Unlock
53483>>>>
53483>>>                End
53483>>>>
53483>>>
53483>>>                Increment iRecord
53484>>>                // Increment the StatusPanel counter and check the
53484>>>                // cancel status every 100 records rather than every
53484>>>                // record, it's way faster.
53484>>>                If (Mod(iRecord, 100) = 0) Begin
53486>>>                    Send DoAdvance of ghoProgressBar
53487>>>                    Set Action_Text of ghoStatusPanel to ("Record:" * String(iRecord))
53488>>>                    Get Check_StatusPanel of ghoStatusPanel to bCancel
53489>>>                End
53489>>>>
53489>>>            End
53489>>>>
53489>>>        Until (bFound = False)
53491>>>
53491>>>        Set_Attribute DF_DATE_FORMAT to iDateFormat
53494>>>        If (bResetIndexesToOnLine = True) Begin
53496>>>            Send SetAllIndexesToBatch hTable False
53497>>>        End
53497>>>>
53497>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
53498>>>
53498>>>        Function_Return (Err = False)
53499>>>    End_Function
53500>>>
53500>>>    // Compares the RootName, LogicalName & DisplayName and returns True if they are equal.
53500>>>    // Note that it first removes any driver prefixes in the rootname.
53500>>>    Function UtilTableInfoCompare Boolean bCompareFilelistUppercase tAPITableNameInfoCompare APITableInfoCompare Returns Boolean
53502>>>        Boolean bIsSame
53502>>>        String sRootNameFrom sRootNameTo sLogicalNameFrom sLogicalNameTo sDisplayNameFrom sDisplayNameTo
53502>>>
53502>>>        Get _TableNoPrefix APITableInfoCompare.sRootNameFrom    to sRootNameFrom
53503>>>        Get _TableNoPrefix APITableInfoCompare.sRootNameTo      to sRootNameTo
53504>>>        Move APITableInfoCompare.sLogicalNameFrom               to sLogicalNameFrom
53505>>>        Move APITableInfoCompare.sLogicalNameTo                 to sLogicalNameTo
53506>>>        Get _TableNoPrefix APITableInfoCompare.sDisplayNameFrom to sDisplayNameFrom
53507>>>        Get _TableNoPrefix APITableInfoCompare.sDisplayNameTo   to sDisplayNameTo
53508>>>
53508>>>        If (bCompareFilelistUppercase = True) Begin
53510>>>            Move (Uppercase(sRootNameFrom) = Uppercase(sRootNameTo) and Uppercase(sLogicalNameFrom) = Uppercase(sLogicalNameTo)) to bIsSame
53511>>>        End
53511>>>>
53511>>>        Else Begin
53512>>>            Move (sRootNameFrom = sRootNameTo and sLogicalNameFrom = sLogicalNameTo and sDisplayNameFrom = sDisplayNameTo) to bIsSame
53513>>>        End
53513>>>>
53513>>>        If (bIsSame = False) Begin
53515>>>            Function_Return False
53516>>>        End
53516>>>>
53516>>>
53516>>>        Move (APITableInfoCompare.bIsAliasFrom = APITableInfoCompare.bIsAliasTo) to bIsSame
53517>>>        If (bIsSame = False) Begin
53519>>>            Function_Return False
53520>>>        End
53520>>>>
53520>>>
53520>>>        Move (APITableInfoCompare.bIsSQLFrom = APITableInfoCompare.bIsSQLTo) to bIsSame
53521>>>        If (bIsSame = False) Begin
53523>>>            Function_Return False
53524>>>        End
53524>>>>
53524>>>
53524>>>        Move (APITableInfoCompare.bIsSystemFileFrom = APITableInfoCompare.bIsSystemFileTo) to bIsSame
53525>>>        If (bIsSame = False) Begin
53527>>>            Function_Return False
53528>>>        End
53528>>>>
53528>>>
53528>>>        Function_Return bIsSame
53529>>>    End_Function
53530>>>
53530>>>    Function UtilTableCompare tAPITable APITableFrom tAPITable APITableTo Boolean bCodeGenerateMode Boolean ByRef bFilelistError Returns Boolean
53532>>>        Handle hTableFrom hTableTo
53532>>>        Boolean bIsSame bIsSQLFrom bIsSQLTo
53532>>>        Boolean bCompareDate_DateTime bCompareIndexAscending bCompareIndexUppercase
53532>>>        String sRootName sDriverIDFrom sDriverIDTo
53532>>>        tAPIColumnCompare[]   aAPIColumnCompare
53532>>>        tAPIColumnCompare[]   aAPIColumnCompare
53533>>>        tAPIIndexCompare[]    aAPIIndexCompare
53533>>>        tAPIIndexCompare[]    aAPIIndexCompare
53534>>>        tAPIRelationCompare[] aAPIRelationCompare
53534>>>        tAPIRelationCompare[] aAPIRelationCompare
53535>>>
53535>>>        Move (IsSameStruct(APITableFrom, APITableTo)) to bIsSame
53536>>>        If (bIsSame = True) Begin
53538>>>            Function_Return True
53539>>>        End
53539>>>>
53539>>>
53539>>>        Move False to bFilelistError
53540>>>        Move True to bIsSame
53541>>>        Get pbCompareDate_DateTime  to bCompareDate_DateTime
53542>>>        Get pbCompareIndexAscending to bCompareIndexAscending
53543>>>        Get pbCompareIndexUppercase to bCompareIndexUppercase
53544>>>        Move APITableFrom.ApiTableInfo.iTableNumber to hTableFrom
53545>>>        Move APITableTo.ApiTableInfo.iTableNumber   to hTableTo
53546>>>
53546>>>        Move APITableFrom.ApiTableInfo.sRootName to sRootName
53547>>>        Get _TableNameOnly sRootName             to sRootName
53548>>>        Move sRootName to APITableTo.ApiTableInfo.sRootName
53549>>>
53549>>>        // First we need to check that the logical table names are the same (so the order of tables in the Filelist.cfg is the same).
53549>>>        // bCodeGenerateMode = True = Code Generation mode.
53549>>>        If (bCodeGenerateMode = True) Begin
53551>>>            // If table doesn't exist in the TO database we want to create 'ApiTableUpdate' code for it.
53551>>>            If (Trim(Uppercase(APITableTo.ApiTableInfo.sLogicalName)) = "") Begin
53553>>>                Function_Return False
53554>>>            End
53554>>>>
53554>>>            Move (Trim(Uppercase(APITableFrom.ApiTableInfo.sLogicalName)) = Trim(Uppercase(APITableTo.ApiTableInfo.sLogicalName))) to bIsSame
53555>>>            If (bIsSame = False) Begin
53557>>>                Send UserError ("Yikes! There is a serious problem with the Filelist.cfg slot number:" * String(hTableFrom) + ".\nThe FROM table logical name is:" * String(APITableFrom.ApiTableInfo.sLogicalName) * "\nwhile the TO table logical name is:" * String(APITableTo.ApiTableInfo.sLogicalName) * ".\nThis needs to be fixed before you can generate code for this table number.")
53558>>>                Move True to bFilelistError
53559>>>                Function_Return False
53560>>>            End
53560>>>>
53560>>>        End
53560>>>>
53560>>>
53560>>>        If (bCodeGenerateMode = False) Begin
53562>>>            // Then we want to create this table
53562>>>            If (Trim(Uppercase(APITableTo.ApiTableInfo.sLogicalName)) = "") Begin
53564>>>                Function_Return False
53565>>>            End
53565>>>>
53565>>>
53565>>>            Move (Trim(Uppercase(APITableFrom.ApiTableInfo.sLogicalName)) = Trim(Uppercase(APITableTo.ApiTableInfo.sLogicalName))) to bIsSame
53566>>>            If (bIsSame = False) Begin
53568>>>                Error DFERR_PROGRAM ("'UtilTableCompare function' problem in Filelist.cfg! Table No:" * String(hTableFrom) + ".\nThe FROM table logical name is:" * String(APITableFrom.ApiTableInfo.sLogicalName) * "\nwhile the TO table logical name is:" * String(APITableTo.ApiTableInfo.sLogicalName) * "No changes was made for this entry.")
53569>>>>
53569>>>                Move True to bFilelistError
53570>>>                Function_Return False
53571>>>            End
53571>>>>
53571>>>        End
53571>>>>
53571>>>
53571>>>        // Check columns:
53571>>>        Move APITableFrom.ApiTableInfo.iTableNumber to hTableFrom
53572>>>        Move APITableFrom.ApiTableInfo.bIsSQL       to bIsSQLFrom
53573>>>        Move APITableFrom.ApiTableInfo.sDriverID    to sDriverIDFrom
53574>>>        Move APITableTo.ApiTableInfo.iTableNumber   to hTableTo
53575>>>        Move APITableTo.ApiTableInfo.bIsSQL         to bIsSQLTo
53576>>>        Move APITableTo.ApiTableInfo.sDriverID      to sDriverIDTo
53577>>>        Get UtilColumnsStructFill hTableTo          to APITableTo.aApiColumns
53578>>>        Get UtilColumnCombineFromAndToArrays APITableFrom.aApiColumns APITableTo.aApiColumns to aAPIColumnCompare
53579>>>        Get UtilColumnsCompare sDriverIDFrom sDriverIDTo bIsSQLFrom bIsSQLTo aAPIColumnCompare bCompareDate_DateTime to bIsSame
53580>>>        If (bIsSame = False) Begin
53582>>>            Function_Return False
53583>>>        End
53583>>>>
53583>>>
53583>>>        // ...then check indexes:
53583>>>        Get UtilIndexesStructFill hTableFrom to APITableTo.aApiIndexes
53584>>>        Get UtilIndexCombineFromAndToArrays APITableFrom.aApiIndexes APITableTo.aApiIndexes to aAPIIndexCompare
53585>>>        Get UtilIndexesCompare bIsSQLFrom bIsSQLTo aAPIIndexCompare bCompareIndexUppercase bCompareIndexAscending to bIsSame
53586>>>        If (bIsSame = False) Begin
53588>>>            Function_Return False
53589>>>        End
53589>>>>
53589>>>
53589>>>        // ...and finally relationships:
53589>>>        Get UtilRelationsStructFill hTableFrom to APITableTo.aApiRelations
53590>>>        Get UtilRelationCombineFromAndToArrays APITableFrom.aApiRelations APITableTo.aApiRelations to aAPIRelationCompare
53591>>>        Move (IsSameArray(APITableFrom.aApiRelations, APITableTo.aApiRelations)) to bIsSame
53592>>>        Get UtilRelationsCompare hTableFrom aAPIRelationCompare to bIsSame
53593>>>
53593>>>        Function_Return (bIsSame = True)
53594>>>    End_Function
53595>>>
53595>>>    // Similar to UtilTableCompare, but takes a tAPITableCompare struct array and a tAPITableBooleans struct as params.
53595>>>    Function UtilTableCompare_Ex tAPITableCompare APITableCompare tAPITableBooleans CompareTableBooleans Boolean bCodeGenerateMode Boolean ByRef bFilelistError Returns Boolean
53597>>>        Handle hTable
53597>>>        Boolean bIsSame bIsSQLFrom bIsSQLTo
53597>>>        String sRootName sDriverIDFrom sDriverIDTo
53597>>>
53597>>>        If (APITableCompare.APITableNameInfoCompare.bExistsFrom = False and APITableCompare.APITableNameInfoCompare.bExistsTo = False) Begin
53599>>>            Move True to bFilelistError
53600>>>            Function_Return False
53601>>>        End
53601>>>>
53601>>>
53601>>>        Move APITableCompare.hTable to hTable
53602>>>        Move True  to bIsSame
53603>>>        Move False to bFilelistError
53604>>>
53604>>>        If (APITableCompare.bExistsFrom = True) Begin
53606>>>            Move APITableCompare.APITableNameInfoCompare.sRootNameFrom to sRootName
53607>>>        End
53607>>>>
53607>>>        Else Begin
53608>>>            Move APITableCompare.APITableNameInfoCompare.sRootNameTo   to sRootName
53609>>>        End
53609>>>>
53609>>>        Get _TableNameOnly sRootName                                   to sRootName
53610>>>
53610>>>        Move APITableCompare.APITableNameInfoCompare.sDriverIDFrom     to sDriverIDFrom
53611>>>        Move APITableCompare.APITableNameInfoCompare.sDriverIDTo       to sDriverIDTo
53612>>>        Move APITableCompare.APITableNameInfoCompare.bIsSQLFrom        to bIsSQLFrom
53613>>>        Move APITableCompare.APITableNameInfoCompare.bIsSQLTo          to bIsSQLTo
53614>>>
53614>>>        // First we need to check that the logical table names are the same (so the order of tables in the Filelist.cfg are the same).
53614>>>        // bCodeGenerateMode = True = Code Generation mode.
53614>>>        If (bCodeGenerateMode = True) Begin
53616>>>            // If table doesn't exist in the TO database we want to create 'ApiTableUpdate' code for it.
53616>>>            If (APITableCompare.bExistsTo = False) Begin
53618>>>                Function_Return False
53619>>>            End
53619>>>>
53619>>>            Move (Uppercase(APITableCompare.APITableNameInfoCompare.sLogicalNameFrom) = Uppercase(APITableCompare.APITableNameInfoCompare.sLogicalNameTo)) to bIsSame
53620>>>            If (bIsSame = False) Begin
53622>>>                Send UserError ("Yikes! There is a problem with the Filelist.cfg slot number:" * String(hTable) + ;                    ".\nThe FROM table logical name is:" * String(APITableCompare.APITableNameInfoCompare.sLogicalNameFrom) * "\nwhile the TO table logical name is:" * ;                    String(APITableCompare.APITableNameInfoCompare.sLogicalNameTo) * ".\nThis needs to be fixed before you can generate code for this table number.")
53623>>>                Move True to bFilelistError
53624>>>                Function_Return False
53625>>>            End
53625>>>>
53625>>>        End
53625>>>>
53625>>>
53625>>>        If (bCodeGenerateMode = False) Begin
53627>>>            If (APITableCompare.bExistsTo = False) Begin
53629>>>                // Then we might want to create this table
53629>>>                Function_Return False
53630>>>            End
53630>>>>
53630>>>
53630>>>            Move (APITableCompare.APITableNameInfoCompare.bIsAliasFrom = APITableCompare.APITableNameInfoCompare.bIsAliasTo) to bIsSame
53631>>>            If (bIsSame = False) Begin
53633>>>                Function_Return False
53634>>>            End
53634>>>>
53634>>>
53634>>>            Move (APITableCompare.APITableNameInfoCompare.bIsSQLFrom = APITableCompare.APITableNameInfoCompare.bIsSQLTo) to bIsSame
53635>>>            If (bIsSame = False) Begin
53637>>>                Function_Return False
53638>>>            End
53638>>>>
53638>>>
53638>>>            Move (APITableCompare.APITableNameInfoCompare.bIsSystemFileFrom = APITableCompare.APITableNameInfoCompare.bIsSystemFileTo) to bIsSame
53639>>>            If (bIsSame = False) Begin
53641>>>                Function_Return False
53642>>>            End
53642>>>>
53642>>>
53642>>>            // Check table names et al.
53642>>>            Get UtilTableInfoCompare CompareTableBooleans.bCompareFilelistUppercase APITableCompare.APITableNameInfoCompare to bIsSame
53643>>>            If (bIsSame = False) Begin
53645>>>                Function_Return False
53646>>>            End
53646>>>>
53646>>>        End
53646>>>>
53646>>>
53646>>>        // Check Columns:
53646>>>        Get UtilColumnsCompare sDriverIDFrom sDriverIDTo bIsSQLFrom bIsSQLTo APITableCompare.aAPIColumnsCompare CompareTableBooleans.bCompareDate_DateTime to bIsSame
53647>>>        If (bIsSame = False) Begin
53649>>>            Function_Return False
53650>>>        End
53650>>>>
53650>>>
53650>>>        // ...then check Indexes:
53650>>>        Get UtilIndexesCompare bIsSQLFrom bIsSQLTo APITableCompare.aAPIIndexesCompare CompareTableBooleans.bCompareIndexUppercase CompareTableBooleans.bCompareIndexAscending to bIsSame
53651>>>        If (bIsSame = False) Begin
53653>>>            Function_Return False
53654>>>        End
53654>>>>
53654>>>
53654>>>        // ...and finally Relationships:
53654>>>        Get UtilRelationsCompare hTable APITableCompare.aAPIRelationsCompare to bIsSame
53655>>>
53655>>>        Function_Return (bIsSame = True)
53656>>>    End_Function
53657>>>
53657>>>    // To fill a complete Table array structure (tAPITable[]) with data.
53657>>>    // The data + filelist.cfg path, login et al must have been setup properly first.
53657>>>    // Pass a True as first parameter if the ghoStatusPanel is active and progress info should be shown.
53657>>>    // Pass a second True if this is a comparison and the text should either reflect "FROM" or "TO" database.
53657>>>    Function UtilTablesStructArrayFill Boolean bStatusPanel Boolean bCompareUtil Boolean bFromTables Returns tAPITable[]
53659>>>        tAPITableNameInfo ApiTableNameInfo
53659>>>        tAPITableNameInfo ApiTableNameInfo
53659>>>        tAPITable[]     aApiTables aApiTablesEmpty
53659>>>        tAPITable[]     aApiTables aApiTablesEmpty
53661>>>        tAPIColumn[]    aApiColumns
53661>>>        tAPIColumn[]    aApiColumns
53662>>>        tAPIIndex[]     aApiIndexes
53662>>>        tAPIIndex[]     aApiIndexes
53663>>>        tAPIRelation[]  aApiRelations
53663>>>        tAPIRelation[]  aApiRelations
53664>>>        Handle hTable
53664>>>        Integer iCount
53664>>>        Boolean bUserCancel bOK
53664>>>        String sLogicalName sMessageText
53664>>>
53664>>>        Get AutoConnectionIDLogin to bOK
53665>>>        Move 0 to hTable
53666>>>        If (bFromTables = True) Begin
53668>>>            Move "Reading 'FROM' Table Structure:" to sMessageText
53669>>>            If (bCompareUtil = True) Begin
53671>>>                Move (sMessageText * "(1 of 3)") to sMessageText
53672>>>            End
53672>>>>
53672>>>        End
53672>>>>
53672>>>        Else Begin
53673>>>            Move "Reading 'TO' Table Structure:" to sMessageText
53674>>>            If (bCompareUtil = True) Begin
53676>>>                Move (sMessageText * "(2 of 3)") to sMessageText
53677>>>            End
53677>>>>
53677>>>        End
53677>>>>
53677>>>        Set Message_Text of ghoStatusPanel to sMessageText
53678>>>
53678>>>        Get UtilFilelistNoOfTables to iCount
53679>>>        Set piMaximum of ghoProgressBar to iCount
53680>>>        Move 0 to iCount
53681>>>
53681>>>        Repeat
53681>>>>
53681>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
53684>>>            If (hTable > 0 and hTable <> 50) Begin
53686>>>
53686>>>                Open hTable
53688>>>                // ToDo: Needs to be revised
53688>>>                // For some reason tables may be reported as "unopened", while in
53688>>>                // fact the open was successful (!)
53688>>>//                Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
53688>>>//                If (bIsOpen = False) Begin
53688>>>//                    Move True to aApiTablesEmpty[0].bError
53688>>>//                    Move hTable to aApiTablesEmpty[0].ApiTableInfo.iTableNumber
53688>>>//                    Function_Return aApiTablesEmpty
53688>>>//                End
53688>>>
53688>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
53691>>>                Set piPosition of ghoProgressBar to iCount
53692>>>                Send DoAdvance of ghoProgressBarOverall
53693>>>                Set Action_Text of ghoStatusPanel to ("Number:" * String(hTable) * String(sLogicalName))
53694>>>
53694>>>                Get UtilTableStructFill hTable bFromTables to aApiTables[iCount]
53695>>>//                Close hTable DF_PERMANENT
53695>>>                Increment iCount
53696>>>            End
53696>>>>
53696>>>
53696>>>            If (bStatusPanel = True) Begin
53698>>>                Get Check_StatusPanel of ghoStatusPanel to bUserCancel
53699>>>                If (bUserCancel = True) Begin
53701>>>                    Move True to aApiTablesEmpty[0].bCancel
53702>>>                    Function_Return aApiTablesEmpty
53703>>>                End
53703>>>>
53703>>>            End
53703>>>>
53703>>>
53703>>>        Until (hTable = 0)
53705>>>
53705>>>        Function_Return aApiTables
53706>>>    End_Function
53707>>>
53707>>>    // Returns a 'single' table APITable struct.
53707>>>    Function UtilTableStructFill Handle hTable Boolean bFromTables Returns tAPITable
53709>>>        tAPITableNameInfo ApiTableNameInfo
53709>>>        tAPITableNameInfo ApiTableNameInfo
53709>>>        tAPITable         ApiTable ApiTableEmpty
53709>>>        tAPITable         ApiTable ApiTableEmpty
53709>>>        tAPIColumn[]     aApiColumns
53709>>>        tAPIColumn[]     aApiColumns
53710>>>        tAPIIndex[]      aApiIndexes
53710>>>        tAPIIndex[]      aApiIndexes
53711>>>        tAPIRelation[]   aApiRelations
53711>>>        tAPIRelation[]   aApiRelations
53712>>>        Boolean bIsOpen
53712>>>
53712>>>        Open hTable
53714>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
53717>>>        If (bIsOpen = False) Begin
53719>>>            Move True to ApiTableEmpty.bError
53720>>>            Move hTable to ApiTableEmpty.ApiTableInfo.iTableNumber
53721>>>            Function_Return ApiTableEmpty
53722>>>        End
53722>>>>
53722>>>
53722>>>        // Fill Table Name Info
53722>>>        Get UtilTableNameInfoStructFill hTable to ApiTableNameInfo
53723>>>
53723>>>        // Fill columns
53723>>>        Get UtilColumnsStructFill hTable to aApiColumns
53724>>>        If (SizeOfArray(aApiColumns)) Begin
53726>>>            If (aApiColumns[0].bCancel = True) Begin
53728>>>                Move True to ApiTableEmpty.bError
53729>>>                Move hTable to ApiTableEmpty.ApiTableInfo.iTableNumber
53730>>>                Function_Return ApiTableEmpty
53731>>>            End
53731>>>>
53731>>>        End
53731>>>>
53731>>>
53731>>>        // Fill indexes
53731>>>        Get UtilIndexesStructFill hTable to aApiIndexes
53732>>>        If (SizeOfArray(aApiIndexes)) Begin
53734>>>            If (aApiIndexes[0].bCancel = True) Begin
53736>>>                Move True to ApiTableEmpty.bError
53737>>>                Move hTable to ApiTableEmpty.ApiTableInfo.iTableNumber
53738>>>                Function_Return ApiTableEmpty
53739>>>            End
53739>>>>
53739>>>        End
53739>>>>
53739>>>
53739>>>        // Fill relationships
53739>>>        Get UtilRelationsStructFill hTable to aApiRelations
53740>>>        If (SizeOfArray(aApiRelations)) Begin
53742>>>            If (aApiRelations[0].bCancel = True) Begin
53744>>>                Move True to ApiTableEmpty.bError
53745>>>                Move hTable to ApiTableEmpty.ApiTableInfo.iTableNumber
53746>>>                Function_Return ApiTableEmpty
53747>>>            End
53747>>>>
53747>>>        End
53747>>>>
53747>>>
53747>>>        Move hTable             to ApiTable.hTable
53748>>>        Move bFromTables        to ApiTable.bFromTable
53749>>>        Move (not(bFromTables)) to ApiTable.bToTable
53750>>>
53750>>>        Move ApiTableNameInfo   to ApiTable.ApiTableInfo
53751>>>        Move aApiColumns        to ApiTable.aApiColumns
53752>>>        Move aApiIndexes        to ApiTable.aApiIndexes
53753>>>        Move aApiRelations      to ApiTable.aApiRelations
53754>>>
53754>>>        Function_Return ApiTable
53755>>>    End_Function
53756>>>
53756>>>    Function UtilTableNameInfoStructFill Handle hTable Returns tAPITableNameInfo
53758>>>        tAPITableNameInfo APITableNameInfo APITableNameInfoEmpty
53758>>>        tAPITableNameInfo APITableNameInfo APITableNameInfoEmpty
53758>>>        Boolean bIsOpen
53758>>>
53758>>>        Open hTable
53760>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
53763>>>        If (bIsOpen = False) Begin
53765>>>            Move True   to APITableNameInfoEmpty.bError
53766>>>            Move hTable to APITableNameInfoEmpty.iTableNumber
53767>>>            Function_Return APITableNameInfoEmpty
53768>>>        End
53768>>>>
53768>>>
53768>>>        Move hTable                                  to APITableNameInfo.iTableNumber
53769>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to APITableNameInfo.sRootName
53772>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to APITableNameInfo.sLogicalName
53775>>>        Get_Attribute DF_FILE_DISPLAY_NAME of hTable to APITableNameInfo.sDisplayName
53778>>>        Get_Attribute DF_FILE_DRIVER       of hTable to APITableNameInfo.sDriverID
53781>>>
53781>>>        Get UtilTableIsAlias                  hTable to APITableNameInfo.bIsAlias
53782>>>        Get UtilTableIsSQL                    hTable to APITableNameInfo.bIsSQL
53783>>>
53783>>>        Function_Return APITableNameInfo
53784>>>    End_Function
53785>>>
53785>>>    Function UtilFindTableArrayItem tAPITable[] ByRef aTableStructure String sLogicalTableName Returns Integer
53787>>>        Integer iSize iCount iItem
53787>>>        tAPITableNameInfo ApiTableNameInfo
53787>>>        tAPITableNameInfo ApiTableNameInfo
53787>>>
53787>>>        Move -1 to iItem
53788>>>        Move (SizeOfArray(aTableStructure)) to iSize
53789>>>        Decrement iSize
53790>>>        for iCount from 0 to iSize
53796>>>>
53796>>>            Move aTableStructure[iCount].ApiTableInfo to ApiTableNameInfo
53797>>>            If (Uppercase(ApiTableNameInfo.sLogicalName) = Uppercase(sLogicalTableName)) Begin
53799>>>                Move iCount to iItem
53800>>>                Move iSize  to iCount // We're done.
53801>>>            End
53801>>>>
53801>>>        Loop
53802>>>>
53802>>>
53802>>>        Function_Return iItem
53803>>>    End_Function
53804>>>
53804>>>    Function UtilTableArrayCompare tAPITable APITableFrom tAPITable APITableTo Returns Integer
53806>>>        If (APITableFrom.hTable  > APITableTo.hTable) ;            Function_Return (GT)
53809>>>        If (APITableFrom.hTable  < APITableTo.hTable) ;            Function_Return (LT)
53812>>>
53812>>>        If (APITableFrom.bFromTable = True)  ;            Function_Return (LT)
53815>>>        If (APITableFrom.bFromTable = False) ;            Function_Return (GT)
53818>>>
53818>>>        Function_Return (EQ)
53819>>>    End_Function
53820>>>
53820>>>    Function UtilTableCombineFromAndToArrays tAPITable[] aAPITableFrom tAPITable[] aAPITableTo Returns tAPITableCompare[]
53822>>>        Integer iCount iSize iSizeFrom iSizeTo iItemFrom iItemTo iItem
53822>>>        Handle hTable
53822>>>        tAPITable[] aAPITableFromAndTo
53822>>>        tAPITable[] aAPITableFromAndTo
53823>>>        tAPITable   APITableFrom APITableTo APITableEmpty
53823>>>        tAPITable   APITableFrom APITableTo APITableEmpty
53823>>>        tAPITableNameInfoCompare APITableNameInfoCompare
53823>>>        tAPITableNameInfoCompare APITableNameInfoCompare
53823>>>        tAPITableCompare[]    aAPITableCompare // This is the result set for this function
53823>>>        tAPITableCompare[]    aAPITableCompare // This is the result set for this function
53824>>>        tAPIColumnCompare[]   aAPIColumnCompare
53824>>>        tAPIColumnCompare[]   aAPIColumnCompare
53825>>>        tAPIIndexCompare[]    aAPIIndexCompare
53825>>>        tAPIIndexCompare[]    aAPIIndexCompare
53826>>>        tAPIRelationCompare[] aAPIRelationCompare
53826>>>        tAPIRelationCompare[] aAPIRelationCompare
53827>>>        tAPITableNameInfo ApiTableInfoEmpty ApiTableInfoFrom ApiTableInfoTo
53827>>>        tAPITableNameInfo ApiTableInfoEmpty ApiTableInfoFrom ApiTableInfoTo
53827>>>        tAPIColumn[]   aApiColumnsEmpty aApiColumnsFrom aApiColumnsTo
53827>>>        tAPIColumn[]   aApiColumnsEmpty aApiColumnsFrom aApiColumnsTo
53830>>>        tAPIIndex[]    aApiIndexEmpty aApiIndexFrom aApiIndexTo
53830>>>        tAPIIndex[]    aApiIndexEmpty aApiIndexFrom aApiIndexTo
53833>>>        tAPIRelation[] aApiRelationEmpty aApiRelationFrom aApiRelationTo
53833>>>        tAPIRelation[] aApiRelationEmpty aApiRelationFrom aApiRelationTo
53836>>>
53836>>>        Move (SizeOfArray(aAPITableFrom)) to iSizeFrom
53837>>>        Move (SizeOfArray(aAPITableTo))   to iSizeTo
53838>>>        If (iSizeFrom = 0 and iSizeTo = 0) Begin
53840>>>            Function_Return aAPITableCompare
53841>>>        End
53841>>>>
53841>>>
53841>>>        Move (AppendArray(aAPITableFrom, aAPITableTo)) to aAPITableFromAndTo
53842>>>        Move (SortArray(aAPITableFromAndTo, Self, RefFunc(UtilTableArrayCompare))) to aAPITableFromAndTo
53843>>>
53843>>>        Move 0 to iItem
53844>>>        Move (SizeOfArray(aAPITableFromAndTo)) to iSize
53845>>>        Decrement iSize
53846>>>        for iCount from 0 to iSize
53852>>>>
53852>>>
53852>>>            Move iCount to iItemFrom
53853>>>            Move iCount to iItemTo
53854>>>            Move APITableEmpty to APITableFrom
53855>>>            Move APITableEmpty to APITableTo
53856>>>
53856>>>            If (aAPITableFromAndTo[iCount].bFromTable = True) Begin
53858>>>                Move aAPITableFromAndTo[iCount]     to APITableFrom
53859>>>            End
53859>>>>
53859>>>            If (aAPITableFromAndTo[iCount].bToTable = True) Begin
53861>>>                Move aAPITableFromAndTo[iCount]     to APITableTo
53862>>>            End
53862>>>>
53862>>>            If (aAPITableFromAndTo[iCount].hTable = aAPITableFromAndTo[iCount + 1].hTable) Begin
53864>>>                Move aAPITableFromAndTo[iCount]     to APITableFrom
53865>>>                Move (iCount + 1) to iItemTo
53866>>>                Move aAPITableFromAndTo[iItemTo]    to APITableTo
53867>>>            End
53867>>>>
53867>>>            If (APITableFrom.hTable > APITableTo.hTable) Begin
53869>>>                Get FindTableNumber aAPITableTo APITableFrom.hTable to iItemTo
53870>>>                If (iItemTo <> -1) Begin
53872>>>                    Move aAPITableTo[iItemTo] to APITableTo
53873>>>                End
53873>>>>
53873>>>                Else Begin
53874>>>                    Move APITableEmpty to APITableTo
53875>>>                End
53875>>>>
53875>>>            End
53875>>>>
53875>>>
53875>>>            Move APITableFrom.ApiTableInfo  to ApiTableInfoFrom
53876>>>            Move APITableFrom.aApiColumns   to aApiColumnsFrom
53877>>>            Move APITableFrom.aApiIndexes   to aApiIndexFrom
53878>>>            Move APITableFrom.aApiRelations to aApiRelationFrom
53879>>>
53879>>>            Move APITableTo.ApiTableInfo    to ApiTableInfoTo
53880>>>            Move APITableTo.aApiColumns     to aApiColumnsTo
53881>>>            Move APITableTo.aApiIndexes     to aApiIndexTo
53882>>>            Move APITableTo.aApiRelations   to aApiRelationTo
53883>>>
53883>>>            Move aAPITableFromAndTo[iCount].hTable to hTable
53884>>>
53884>>>            If (hTable > 0) Begin
53886>>>
53886>>>                // Table info:
53886>>>                Get UtilTableINFOCombineFromAndToArrays ApiTableInfoFrom ApiTableInfoTo to APITableNameInfoCompare
53887>>>                Move APITableNameInfoCompare.iTableNumber                               to aAPITableCompare[iItem].hTable
53888>>>                Move APITableNameInfoCompare.bExistsFrom                                to aAPITableCompare[iItem].bExistsFrom
53889>>>                Move APITableNameInfoCompare.bExistsTo                                  to aAPITableCompare[iItem].bExistsTo
53890>>>                Move APITableNameInfoCompare                                            to aAPITableCompare[iItem].APITableNameInfoCompare
53891>>>
53891>>>                // Column info:
53891>>>                Get UtilColumnCombineFromAndToArrays aApiColumnsFrom aApiColumnsTo      to aAPIColumnCompare
53892>>>                Move aAPIColumnCompare                                                  to aAPITableCompare[iItem].aAPIColumnsCompare
53893>>>
53893>>>                // Index info:
53893>>>                Get UtilIndexCombineFromAndToArrays aApiIndexFrom aApiIndexTo           to aAPIIndexCompare
53894>>>                Move aAPIIndexCompare                                                   to aAPITableCompare[iItem].aAPIIndexesCompare
53895>>>
53895>>>                // Relation info:
53895>>>                Get UtilRelationCombineFromAndToArrays aApiRelationFrom aApiRelationTo  to aAPIRelationCompare
53896>>>                Move aAPIRelationCompare                                                to aAPITableCompare[iItem].aAPIRelationsCompare
53897>>>
53897>>>                Move False                                                              to aAPITableCompare[iItem].bShouldChange
53898>>>                Move False                                                              to aAPITableCompare[iItem].bCancel
53899>>>                Move False                                                              to aAPITableCompare[iItem].bError
53900>>>                If (iItemTo > iItemFrom) Begin
53902>>>                    Increment iCount
53903>>>                End
53903>>>>
53903>>>                Increment iItem
53904>>>            End
53904>>>>
53904>>>
53904>>>        Loop
53905>>>>
53905>>>
53905>>>        Function_Return aAPITableCompare
53906>>>    End_Function
53907>>>
53907>>>    Function FindTableNumber tAPITable[] ByRef aTableStructure Handle hTable Returns Integer
53909>>>        Integer iSize iCount iItem
53909>>>        tAPITableNameInfo ApiTableNameInfo
53909>>>        tAPITableNameInfo ApiTableNameInfo
53909>>>
53909>>>        Move -1 to iItem
53910>>>        Move (SizeOfArray(aTableStructure)) to iSize
53911>>>        Decrement iSize
53912>>>        For iCount from 0 to iSize
53918>>>>
53918>>>            Move aTableStructure[iCount].ApiTableInfo to ApiTableNameInfo
53919>>>            If (ApiTableNameInfo.iTableNumber = hTable) Begin
53921>>>                Move iCount to iItem
53922>>>                Move iSize  to iCount // We're done.
53923>>>            End
53923>>>>
53923>>>        Loop
53924>>>>
53924>>>
53924>>>        Function_Return iItem
53925>>>    End_Function
53926>>>
53926>>>    Function UtilTableInfoCombineFromAndToArrays tAPITableNameInfo APITableNameInfoFrom tAPITableNameInfo APITableNameInfoTo Returns tAPITableNameInfoCompare
53928>>>        tAPITableNameInfoCompare APITableNameInfoCompare
53928>>>        tAPITableNameInfoCompare APITableNameInfoCompare
53928>>>
53928>>>        If (APITableNameInfoFrom.iTableNumber = 0 and APITableNameInfoTo.iTableNumber = 0) Begin
53930>>>            Function_Return APITableNameInfoCompare
53931>>>        End
53931>>>>
53931>>>
53931>>>        // FROM database info:
53931>>>        If (APITableNameInfoFrom.iTableNumber > 0) Begin
53933>>>            Move APITableNameInfoFrom.iTableNumber  to APITableNameInfoCompare.iTableNumber
53934>>>            Move APITableNameInfoFrom.sRootName     to APITableNameInfoCompare.sRootNameFrom
53935>>>            Move APITableNameInfoFrom.sLogicalName  to APITableNameInfoCompare.sLogicalNameFrom
53936>>>            Move APITableNameInfoFrom.sDisplayName  to APITableNameInfoCompare.sDisplayNameFrom
53937>>>            Move APITableNameInfoFrom.sDriverID     to APITableNameInfoCompare.sDriverIDFrom
53938>>>            Move APITableNameInfoFrom.bIsAlias      to APITableNameInfoCompare.bIsAliasFrom
53939>>>            Move APITableNameInfoFrom.bIsSQL        to APITableNameInfoCompare.bIsSQLFrom
53940>>>            Move True                               to APITableNameInfoCompare.bExistsFrom
53941>>>        End
53941>>>>
53941>>>
53941>>>        // TO database info:
53941>>>        If (APITableNameInfoTo.iTableNumber > 0) Begin
53943>>>            Move APITableNameInfoTo.iTableNumber    to APITableNameInfoCompare.iTableNumber
53944>>>            Move APITableNameInfoTo.sRootName       to APITableNameInfoCompare.sRootNameTo
53945>>>            Move APITableNameInfoTo.sLogicalName    to APITableNameInfoCompare.sLogicalNameTo
53946>>>            Move APITableNameInfoTo.sDisplayName    to APITableNameInfoCompare.sDisplayNameTo
53947>>>            Move APITableNameInfoTo.sDriverID       to APITableNameInfoCompare.sDriverIDTo
53948>>>            Move APITableNameInfoTo.bIsAlias        to APITableNameInfoCompare.bIsAliasTo
53949>>>            Move APITableNameInfoTo.bIsSQL          to APITableNameInfoCompare.bIsSQLTo
53950>>>            Move True                               to APITableNameInfoCompare.bExistsTo
53951>>>        End
53951>>>>
53951>>>
53951>>>        Function_Return APITableNameInfoCompare
53952>>>    End_Function
53953>>>
53953>>>    // Note:
53953>>>    // The DF_FILE_TABLE_NAME attribute holds the name of the table at the back end. Depending on the back end, table
53953>>>    // names may be case sensitive, contain spaces or other special characters. This attribute is used to determine a table's
53953>>>    // back end name when using Embedded SQL. Since Embedded SQL works on the back end directly, the back end's name must be used.
53953>>>    // In most cases the back end name will be the same as the table name used in DataFlex.
53953>>>    // To do the opposite; To get the file handle from a table name string use the UtilTableNameToHandle function.
53953>>>    Function UtilTableHandleToString Handle hTable Returns String
53955>>>        String sTableName
53955>>>        Boolean bOpen bExists bOK
53955>>>
53955>>>        Get UtilTableNumberIsInUse hTable to bExists
53956>>>        If (bExists = False) Begin
53958>>>            Function_Return ""
53959>>>        End
53959>>>>
53959>>>
53959>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
53960>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
53963>>>        If (bOpen = False) Begin
53965>>>            Get AutoConnectionIDLogin to bOK
53966>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
53967>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_INTERMEDIATE_FILE
53968>>>            Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
53969>>>            Open hTable
53971>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
53972>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_INTERMEDIATE_FILE
53973>>>            Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
53974>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
53977>>>        End
53977>>>>
53977>>>        If (bOpen = True) Begin
53979>>>            Send Ignore_Error of Error_Object_Id DFERR_UNSUPPORTED_ATTRIBUTE
53980>>>            Get_Attribute DF_FILE_TABLE_NAME of hTable to sTableName
53983>>>            // If blank it is an embedded table:
53983>>>            If (sTableName = "") Begin
53985>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
53988>>>                Move 0 to LastErr
53989>>>                Move False to Err
53990>>>            End
53990>>>>
53990>>>            Send Trap_Error of Error_Object_Id DFERR_UNSUPPORTED_ATTRIBUTE
53991>>>        End
53991>>>>
53991>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
53992>>>        Move 0 to LastErr
53993>>>
53993>>>        Function_Return sTableName
53994>>>    End_Function
53995>>>
53995>>>    // Returns the filenumber for the passed Table name from Filelist.cfg.
53995>>>    // Returns 0 if unsuccessful.
53995>>>    // To do the opposite; To get the string value from a table handle string use the UtilTableHandleToString function.
53995>>>    Function UtilTableNameToHandle String sTableName Returns Integer
53997>>>        String sValue sPrefixTableName sDriverID
53997>>>        Handle hTable hRetval
53997>>>
53997>>>        Get psDriverID to sDriverID
53998>>>        If (sDriverID <> DATAFLEX_ID and not(sTableName contains ":")) Begin
54000>>>            Move (sDriverID + ":" + sTableName) to sPrefixTableName
54001>>>        End
54001>>>>
54001>>>        Move 0 to hTable
54002>>>        Move 0 to hRetval
54003>>>        Repeat
54003>>>>
54003>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
54006>>>            If (hTable <> 0) Begin
54008>>>                Get_Attribute DF_FILE_ROOT_NAME of hTable to sValue
54011>>>                If (Uppercase(sValue) = Uppercase(sTableName) or Uppercase(sValue) = Uppercase(sPrefixTableName)) Begin
54013>>>                    Move hTable to hRetval
54014>>>                    Move 0 to hTable
54015>>>                End
54015>>>>
54015>>>            End
54015>>>>
54015>>>        Until (hTable = 0)
54017>>>
54017>>>        Function_Return hRetval
54018>>>    End_Function
54019>>>
54019>>>    // Use function to move all *.dat, *.k?? & *.hdr files to a "Data\Backup" folder
54019>>>    // _after_ all tables have successfully been converted to SQL (.int files)
54019>>>    Function UtilMoveAllEmbeddedToBackupFolder Returns Boolean
54021>>>        Boolean bOK bExists
54021>>>        String sDataPath sBackupFolder
54021>>>
54021>>>        Close DF_ALL DF_PERMANENT
54022>>>        Send DoAdvance of ghoProgressBar
54023>>>
54023>>>        Set Message_Text of ghoStatusPanel to "Moving Embedded (*.dat) files to Backup folder."
54024>>>        Move CS_DUFBackupDataFolder to sBackupFolder
54025>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
54026>>>        Get vFolderFormat sDataPath to sDataPath
54027>>>
54027>>>        Get vFilePathExists (sDataPath + sBackupFolder) to bExists
54028>>>        If (bExists = False) Begin
54030>>>            Get vCreateDirectory (sDataPath + sBackupFolder) to bOK
54031>>>            Get vFilePathExists (sDataPath + sBackupFolder) to bExists
54032>>>            If (bExists = False) Begin
54034>>>                Error DFERR_PROGRAM ("Could not create the the backup data folder to move all *.dat and *.k?? files to. You need to move them somewhere manually.")
54035>>>>
54035>>>                Function_Return False
54036>>>            End
54036>>>>
54036>>>        End
54036>>>>
54036>>>
54036>>>        Get vMoveFile (sDataPath + "*.dat") (sDataPath + sBackupFolder) to bOK
54037>>>        Get vMoveFile (sDataPath + "*.hdr") (sDataPath + sBackupFolder) to bOK
54038>>>        Get vMoveFile (sDataPath + "*.k??") (sDataPath + sBackupFolder) to bOK
54039>>>        Get vMoveFile (sDataPath + "*.vld") (sDataPath + sBackupFolder) to bOK
54040>>>        // We need to wait for Windows before we can copy files back
54040>>>        Sleep 2  
54041>>>        
54041>>>        //...except for these files that needs to be copied back to the Data folder:
54041>>>        Get vCopyFile (sBackupFolder + "\CodeMast.*")  sDataPath to bOK 
54042>>>        Get vCopyFile (sBackupFolder + "\CodeType.*")  sDataPath to bOK                                 
54043>>>        Get vCopyFile (sBackupFolder + "\Flexerrs.*")  sDataPath to bOK                                 
54044>>>        Get vCopyFile (sBackupFolder + "\DFErr001.*")  sDataPath to bOK                                 
54045>>>        Get vCopyFile (sBackupFolder + "\DFErr002.*")  sDataPath to bOK                                 
54046>>>        Get vCopyFile (sBackupFolder + "\DFErr003.*")  sDataPath to bOK                                 
54047>>>//            Get vCopyFile (sBackupFolder + "\DbVersion.*") sDataPath to bOK  
54047>>>        
54047>>>
54047>>>        Set Message_Text of ghoStatusPanel to ""
54048>>>        Function_Return True
54049>>>    End_Function
54050>>>    
54050>>>    Function UtilTableRepairAndReindexALL Returns Boolean
54052>>>        Boolean bOK bRetval
54052>>>        Handle hTable
54052>>>        Integer iSize iCount
54052>>>        
54052>>>        Move True to bOK
54053>>>        Get UtilFilelistNoOfTables to iSize
54054>>>        Set pbVisible    of ghoProgressBarOverall to True
54055>>>        Set piPosition   of ghoProgressBarOverall to 0
54056>>>        Set piMaximum    of ghoProgressBarOverall to iSize
54057>>>        Set piAdvanceBy  of ghoProgressBarOverall to 1
54058>>>
54058>>>        Repeat
54058>>>>
54058>>>            Set piPosition of ghoProgressBarOverall to iCount
54059>>>            Increment iCount
54060>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
54063>>>            If (hTable <> 0 and hTable <> 50) Begin // 50 = Flexerrs.
54065>>>                Get UtilTableRepairAndReindex hTable to bRetval
54066>>>                If (bRetval = False) Begin
54068>>>                    Move False to bOK
54069>>>                End
54069>>>>
54069>>>            End
54069>>>>
54069>>>        Until (hTable = 0)
54071>>>                
54071>>>        Function_Return bOK
54072>>>    End_Function           
54073>>>    
54073>>>    // Checks if an Embedded (DataFlex) data-file needs to be repaired.
54073>>>    // After the header has been repaired - also makes a re-index.  
54073>>>    // Returns TRUE if successful OR the table was an an ALIAS or SQL table in case we do nothing.
54073>>>    Function UtilTableRepairAndReindex Handle hTable Returns Boolean
54075>>>        Boolean bOK bIsAlias bIsEmbedded bIsOpen bBadExists
54075>>>        Integer iRetval
54075>>>        String sRootName sFileName sDataPath
54075>>>        
54075>>>        Move False to Err
54076>>>        Move 0 to LastErr 
54077>>>        Move True to bOK
54078>>>        
54078>>>        Get UtilTableIsEmbedded hTable to bIsEmbedded
54079>>>        If (bIsEmbedded = False or hTable = 50) Begin // 50 = Flexerrs
54081>>>            Function_Return True
54082>>>        End
54082>>>>
54082>>>        Get UtilTableIsAlias hTable to bIsAlias 
54083>>>        If (bIsAlias = True) Begin
54085>>>            Function_Return True
54086>>>        End
54086>>>>
54086>>>        
54086>>>        // Check for bad file and remove if exists
54086>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
54089>>>        Set private.phCurrentTable to hTable  
54090>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT  
54091>>>        
54091>>>        // This is important! Else it can happen that the table can't be opened,
54091>>>        // with a "4077 - File in use" error.
54091>>>        Close DF_ALL DF_PERMANENT    
54092>>>        Open hTable
54094>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
54097>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
54098>>>        If (bIsOpen = False) Begin
54100>>>            Error DFERR_PROGRAM ("Could not open table to be repaired and reindexed:" * String(sRootName))
54101>>>>
54101>>>            Function_Return False        
54102>>>        End
54102>>>>
54102>>>
54102>>>        Get vFilePathExists (sRootName + ".BAD")  to bBadExists
54103>>>        If (bBadExists = True) Begin
54105>>>            Get_File_Path (sRootName + ".BAD") to sFileName
54106>>>            Get vDeleteFile sFileName to iRetval
54107>>>        End
54107>>>>
54107>>>        
54107>>>        Set TableName_Text of ghoStatusPanel to ("Repairing and reindex Table Name:" * sRootName * "Number:" * String(hTable))
54108>>>        
54108>>>        Move False to Err
54109>>>        // **** Repair and reindex the table. ****
54109>>>        Get UtilTableRepairEmbedded hTable sRootName to bOK
54110>>>
54110>>>        // Check for bad file: if it exists, something went wrong
54110>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
54111>>>        Get vFolderFormat sDataPath to sDataPath
54112>>>        Get vFilePathExists (sDataPath + sRootName + ".BAD") to bBadExists
54113>>>        If (bBadExists = True) Begin
54115>>>            Error DFERR_PROGRAM ("Error while sorting data. .BAD file created:"  * String(sRootName) + ".BAD")
54116>>>>
54116>>>            Move False to bOK
54117>>>        End
54117>>>>
54117>>>        Close hTable
54118>>>
54118>>>        Function_Return bOK
54119>>>    End_Function
54120>>>
54120>>>    // Repair and reindex the named DataFlex data-table.
54120>>>    // No checks are done if the passed table name is an embedded or SQL,
54120>>>    // so use with care (make sure you only pass embedded table names).
54120>>>    Function UtilTableRepairEmbedded Handle hTable String sTableName Returns Boolean
54122>>>        String sMode
54122>>>        Integer iVoid
54122>>>
54122>>>        Set Message_Text of ghoStatusPanel to "Repair/Reindex in progress..."
54123>>>        Move "0" to sMode   // 0=Reindex after repair!    
54124>>>        Close hTable        // The table needs to be closed, else error 4177 "Table in use".
54125>>>        Call_Driver 0 DATAFLEX_ID Function FLEX_REPAIR_FILE Callback ghoDbUpdateHandler Passing sTableName sMode 0 Result iVoid 
54130>>>        Set Message_Text of ghoStatusPanel to ""
54131>>>        Function_Return (iVoid = 0)
54132>>>    End_Function
54133>>>
54133>>>    // Returns _two_ arrays.
54133>>>    // Returns all files that are Master files in array ByRef iaFileIsMaster
54133>>>    // Also returns all files that are Alias files in a second array.
54133>>>    // IMPORTANT: All master & alias files _must_ have been included into
54133>>>    //            the DoSetAllMasterAndAlias message.
54133>>>    Function UtilTableAllMasterAndAliasFiles Integer[] ByRef iaFileIsMaster Returns Integer[]
54135>>>        Integer[] iaFileIsAlias
54136>>>        Integer hTable iFileAlias iSize
54136>>>        Boolean bOpen
54136>>>
54136>>>        Move 0 to hTable
54137>>>        Repeat
54137>>>>
54137>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
54140>>>            If (hTable <> 0) Begin
54142>>>                Open hTable
54144>>>                Get_Attribute DF_FILE_OPENED of hTable to bOpen
54147>>>                If (bOpen = True) Begin
54149>>>                    Get_Attribute DF_FILE_ALIAS of hTable to iFileAlias
54152>>>                    If (iFileAlias = DF_FILE_IS_MASTER) Begin
54154>>>                        Move (SizeOfArray(iaFileIsMaster)) to iSize
54155>>>                        Move hTable to iaFileIsMaster[iSize]
54156>>>                    End
54156>>>>
54156>>>                    Else If (iFileAlias = DF_FILE_IS_ALIAS) Begin
54159>>>                        Move (SizeOfArray(iaFileIsAlias)) to iSize
54160>>>                        Move hTable to iaFileIsAlias[iSize]
54161>>>                    End
54161>>>>
54161>>>                End
54161>>>>
54161>>>            End
54161>>>>
54161>>>        Until (hTable = 0)
54163>>>
54163>>>        Function_Return iaFileIsAlias
54164>>>    End_Function  
54165>>>    
54165>>>    // Is a repair of the data-header necessary? (Embedded tables only)
54165>>>    Function UtilTableRepairIsNeeded Handle hTable String sTableName Returns Integer
54167>>>        String sMode
54167>>>        Integer iRepairNeeded bIsOpen
54167>>>
54167>>>        Move "0" to sMode
54168>>>        Set private.phCurrentTable to hTable 
54169>>>        Close hTable
54170>>>        Open hTable
54172>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
54175>>>        Call_Driver hTable DATAFLEX_ID Function FLEX_GET_REPAIRS_NEEDED Callback 0 Passing sTableName sMode 0 Result iRepairNeeded
54180>>>
54180>>>        Function_Return iRepairNeeded
54181>>>    End_Function
54182>>>
54182>>>
54182>>>    // Helper function
54182>>>    // Takes two params:
54182>>>    //   1. An array with all master table numbers  (Function UtilTableAllMasterAndAliasFiles)
54182>>>    //   2. An array with all alias table numbers   (Function UtilTableAllMasterAndAliasFiles)
54182>>>    // Returns:
54182>>>    //  DF_FILE_ALIAS_DEFAULT if no master or alias
54182>>>    //  DF_FILE_IS_MASTER if master
54182>>>    //  DF_FILE_IS_ALIAS if alias
54182>>>    Function UtilTableIsMasterAlias Handle hTable Integer[] iaFileIsMaster Integer[] iaFileIsAlias Returns Integer
54184>>>        Integer i iSize
54184>>>
54184>>>        Move (SizeOfArray(iaFileIsMaster)) to iSize
54185>>>        Decrement iSize
54186>>>        for i from 0 to iSize
54192>>>>
54192>>>            If (hTable = iaFileIsMaster[i]) Begin
54194>>>                Function_Return DF_FILE_IS_MASTER
54195>>>            End
54195>>>>
54195>>>        Loop
54196>>>>
54196>>>
54196>>>        Move (SizeOfArray(iaFileIsAlias)) to iSize
54197>>>        Decrement iSize
54198>>>        for i from 0 to iSize
54204>>>>
54204>>>            If (hTable = iaFileIsAlias[i]) Begin
54206>>>                Function_Return DF_FILE_IS_ALIAS
54207>>>            End
54207>>>>
54207>>>        Loop
54208>>>>
54208>>>
54208>>>        Function_Return DF_FILE_ALIAS_DEFAULT
54209>>>    End_Function
54210>>>
54210>>>    // Determine the available indexes of a table.
54210>>>    //
54210>>>    // Arguments:
54210>>>    //   Handle hTable - The number of the table
54210>>>    //
54210>>>    // Returns:
54210>>>    //   String - A string to be used with the sort command
54210>>>    //   to re-index all indexes of a table.
54210>>>    Function UtilTableIndexString Handle hTable Returns String
54212>>>        String  sSortString
54212>>>        Integer iLastIndex iNumSegments iCount
54212>>>
54212>>>        Move "" to sSortString
54213>>>        Get_Attribute DF_FILE_LAST_INDEX_NUMBER of hTable to iLastIndex
54216>>>
54216>>>        for iCount from 1 to iLastIndex
54222>>>>
54222>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iCount to iNumSegments
54225>>>            If iNumSegments Begin
54227>>>                If (Length(sSortString)) ;                    Move (Append(sSortString, " ")) to sSortString
54230>>>                Move (Append(sSortString, iCount)) to sSortString
54231>>>            End
54231>>>>
54231>>>        Loop
54232>>>>
54232>>>
54232>>>        Function_Return sSortString
54233>>>    End_Function
54234>>>
54234>>>    
54234>>>    // * Dummy function for the Studio's Code Explorer *
54234>>>    Function API_COLUMN_UTILITY_FUNCTIONS Returns Boolean
54236>>>        Function_Return False
54237>>>    End_Function
54238>>>
54238>>>    // Compare multiple columns. (For 'FROM' & 'TO' tables)
54238>>>    Function UtilColumnsCompare String sDriverIDFrom String sDriverIDTo Boolean bIsSQLFrom Boolean bIsSQLTo tAPIColumnCompare[] aAPIColumnCompare Boolean bCompareDate_DataTime Returns Boolean
54240>>>        Boolean bIsSame
54240>>>        Integer iCount iColumns iColumn
54240>>>
54240>>>        Move True to bIsSame
54241>>>        Move (SizeOfArray(aAPIColumnCompare)) to iColumns
54242>>>        Set piMaximum of ghoProgressBar  to iColumns
54243>>>        Decrement iColumns
54244>>>
54244>>>        for iCount from 0 to iColumns
54250>>>>
54250>>>            Set piPosition of ghoProgressBar to iCount
54251>>>            Get UtilColumnCompare sDriverIDFrom sDriverIDTo bIsSQLFrom bIsSQLTo aAPIColumnCompare[iCount] bCompareDate_DataTime to bIsSame
54252>>>            If (bIsSame = False) Begin
54254>>>                Function_Return False
54255>>>            End
54255>>>>
54255>>>        Loop
54256>>>>
54256>>>
54256>>>        Function_Return (bIsSame = True)
54257>>>    End_Function
54258>>>
54258>>>    // Compares a single column (For 'FROM' & 'TO' tables)
54258>>>    Function UtilColumnCompare String sDriverIDFrom String sDriverIDTo Boolean bIsSQLFrom Boolean bIsSQLTo tAPIColumnCompare APIColumnCompare Boolean bCompareDate_DataTime Returns Boolean
54260>>>        Integer iFromType iToType iDbType
54260>>>        tColumnType ColumnType
54260>>>        tColumnType ColumnType
54260>>>        Boolean bIsDateTypeFrom bIsDateTypeTo
54260>>>
54260>>>        If (APIColumnCompare.bCancelFrom = True or APIColumnCompare.bCancelTo = True) Begin
54262>>>            Function_Return False
54263>>>        End
54263>>>>
54263>>>        If (APIColumnCompare.bExistsFrom = False or APIColumnCompare.bExistsTo = False) Begin
54265>>>            Function_Return False
54266>>>        End
54266>>>>
54266>>>        If (Uppercase(APIColumnCompare.sFieldNameFrom) <> Uppercase(APIColumnCompare.sFieldNameTo)) Begin
54268>>>            Function_Return False
54269>>>        End                                                                
54269>>>>
54269>>>
54269>>>        If (bIsSQLFrom = True and bIsSQLTo = True) Begin
54271>>>            If (APIColumnCompare.bAllowNULLFrom <> APIColumnCompare.bAllowNULLTo) Begin
54273>>>                Function_Return False
54274>>>            End
54274>>>>
54274>>>            If (APIColumnCompare.sDefaultValueFrom <> APIColumnCompare.sDefaultValueTo) Begin
54276>>>                If ((APIColumnCompare.sDefaultValueFrom = ""   and APIColumnCompare.sDefaultValueTo = "''") or ;                    (APIColumnCompare.sDefaultValueFrom = "''" and APIColumnCompare.sDefaultValueTo = "")) Begin
54278>>>                    End
54278>>>>
54278>>>                Else Begin
54279>>>                    Function_Return False
54280>>>                End
54280>>>>
54280>>>            End
54280>>>>
54280>>>        End
54280>>>>
54280>>>
54280>>>        Get piDbType                       to iDbType
54281>>>        Move APIColumnCompare.iTypeFrom    to iFromType
54282>>>        Move APIColumnCompare.iTypeTo      to iToType
54283>>>
54283>>>        // If one of the two tables are SQL and the other Embedded we need to "translate"
54283>>>        // data types between Embedded and SQL.
54283>>>        If (bIsSQLFrom = True and bIsSQLTo = False) Begin
54285>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iFromType APIColumnCompare.iLengthFrom to iFromType
54286>>>        End
54286>>>>
54286>>>        If (bIsSQLFrom = False and bIsSQLTo = True) Begin
54288>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDTo iDbType iToType APIColumnCompare.iLengthTo to iToType
54289>>>        End
54289>>>>
54289>>>
54289>>>        Get UtilColumnIsDateType iFromType bIsSQLFrom to bIsDateTypeFrom
54290>>>        Get UtilColumnIsDateType iToType   bIsSQLTo   to bIsDateTypeTo
54291>>>
54291>>>        // Make Date and DateTime comparison?
54291>>>        If (bCompareDate_DataTime = True) Begin
54293>>>            If (iFromType <> iToType) Begin
54295>>>                Function_Return False
54296>>>            End
54296>>>>
54296>>>        End
54296>>>>
54296>>>
54296>>>        // This is when not checking for Date/DateTime differences but all other other field types...
54296>>>        If (bCompareDate_DataTime = False and bIsDateTypeFrom = False) Begin
54298>>>            If (iFromType <> iToType) Begin
54300>>>                Function_Return False
54301>>>            End
54301>>>>
54301>>>        End
54301>>>>
54301>>>
54301>>>        // Only if the field is not a Date type (any of them) we compare length & precision.
54301>>>        If (bIsDateTypeFrom = False) Begin
54303>>>            If (APIColumnCompare.iLengthFrom <> APIColumnCompare.iLengthTo) Begin
54305>>>                Function_Return False
54306>>>            End
54306>>>>
54306>>>            If (APIColumnCompare.iPrecisionFrom <> APIColumnCompare.iPrecisionTo) Begin
54308>>>                Function_Return False
54309>>>            End
54309>>>>
54309>>>        End
54309>>>>
54309>>>
54309>>>        If (APIColumnCompare.iOptionsFrom <> APIColumnCompare.iOptionsTo) Begin
54311>>>            Function_Return False
54312>>>        End
54312>>>>
54312>>>
54312>>>        Function_Return True
54313>>>    End_Function
54314>>>
54314>>>    Function UtilColumnsStructFill Handle hTable Returns tAPIColumn[]
54316>>>        Integer iNumColumns iColumn iCount iOptions iDbType iType iCheckFieldNumber
54316>>>        Boolean bIdentityKey bDawSqlDriver bSqlDriver bIsOpen bExists bIsSqlTable bUserCancel
54316>>>        tAPIColumn[] APIColumns APIColumnsEmpty
54316>>>        tAPIColumn[] APIColumns APIColumnsEmpty
54318>>>        String sDriverID sRootName sLogicalName
54318>>>
54318>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
54319>>>        Get piDbType to iDbType
54320>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
54323>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
54326>>>
54326>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
54329>>>        If (bIsOpen = False) Begin
54331>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
54332>>>            Open hTable
54334>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
54335>>>            Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
54338>>>            If (bIsOpen = False) Begin
54340>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
54341>>>                Move True to APIColumnsEmpty[0].bError
54342>>>                Function_Return APIColumnsEmpty
54343>>>            End
54343>>>>
54343>>>        End
54343>>>>
54343>>>
54343>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
54346>>>        Get IsSQLDriver    sDriverID to bSqlDriver
54347>>>        Get IsDAWSQLDriver sDriverID to bDawSqlDriver
54348>>>
54348>>>        Get UtilTableIsSQLByRootName sRootName to bIsSqlTable
54349>>>        If (bIsSqlTable = True) Begin
54351>>>            Get UtilTableExists hTable to bExists
54352>>>            If (bExists = False) Begin
54354>>>                Move True to APIColumnsEmpty[0].bError
54355>>>                Function_Return APIColumnsEmpty
54356>>>            End
54356>>>>
54356>>>        End
54356>>>>
54356>>>
54356>>>        Move 0 to iCount
54357>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
54360>>>        Set piMaximum of ghoProgressBar to iNumColumns
54361>>>
54361>>>        for iColumn from 1 to iNumColumns
54367>>>>
54367>>>            Move 0 to iOptions
54368>>>            Move False to bIdentityKey
54369>>>            Move False to Err
54370>>>            Move 0     to LastErr
54371>>>            Move bIsSqlTable to APIColumns[iCount].bIsSQLType
54372>>>            Set piPosition of ghoProgressBar to iColumn
54373>>>            If (bDawSqlDriver = True) Begin
54375>>>                Send Ignore_Error of Error_Object_Id DFERR_UNSUPPORTED_ATTRIBUTE
54376>>>                If (bIsSqlTable = True) Begin
54378>>>                    Get_Attribute DF_FIELD_NATIVE_TYPE      of hTable iColumn to iType
54381>>>                    Move iType                                                to APIColumns[iCount].iType
54382>>>                    Get_Attribute DF_FIELD_NATIVE_TYPE_NAME of hTable iColumn to APIColumns[iCount].sType
54385>>>                    Get_Attribute DF_FIELD_NULL_ALLOWED     of hTable iColumn to APIColumns[iCount].bAllowNULL
54388>>>                    Get_Attribute DF_FIELD_DEFAULT_VALUE    of hTable iColumn to APIColumns[iCount].sDefaultValue
54391>>>                End
54391>>>>
54391>>>                Else Begin
54392>>>                    Get_Attribute DF_FIELD_TYPE             of hTable iColumn to APIColumns[iCount].iType
54395>>>                    Get UtilColumnTypeToString sDriverID iDbType APIColumns[iCount].iType to APIColumns[iCount].sType
54396>>>                End
54396>>>>
54396>>>
54396>>>                // If the array value is out of bounce it means that this column doesn't exist on the backend.
54396>>>                Get_Attribute DF_Field_Number of hTable iColumn to iCheckFieldNumber
54399>>>                Move (iCheckFieldNumber >= 0) to bExists
54400>>>                If (bExists = False) Begin
54402>>>                    Move 0 to APIColumns[iCount].iType
54403>>>                End
54403>>>>
54403>>>                If (bExists = True) Begin
54405>>>                    Get_Attribute DF_FIELD_IS_IDENTITY of hTable iColumn to bIdentityKey
54408>>>                End
54408>>>>
54408>>>                Send Trap_Error of Error_Object_Id DFERR_UNSUPPORTED_ATTRIBUTE
54409>>>                If (bIdentityKey = True) Begin
54411>>>                    Move C_tAPIColumn_Identity to APIColumns[iCount].iOptions
54412>>>                End
54412>>>>
54412>>>            End
54412>>>>
54412>>>            Else Begin
54413>>>                Move False to Err
54414>>>                Move 0     to LastErr
54415>>>                If (bIsSqlTable = True) Begin
54417>>>                    Get_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to APIColumns[iCount].iType
54420>>>                End
54420>>>>
54420>>>                Else Begin
54421>>>                    Get_Attribute DF_FIELD_TYPE        of hTable iColumn to APIColumns[iCount].iType
54424>>>                    Get UtilColumnTypeToString sDriverID iDbType APIColumns[iCount].iType to APIColumns[iCount].sType
54425>>>                End
54425>>>>
54425>>>                // If the array value is out of bounce it means that this column doesn't exist on the backend.
54425>>>                Move (LastErr <> DFERR_ARRAY_INDEX_OUT_OF_BOUNDS) to bExists
54426>>>                If (bExists = False) Begin
54428>>>                    Move 0 to APIColumns[iCount].iType
54429>>>                End
54429>>>>
54429>>>            End
54429>>>>
54429>>>
54429>>>            If (bExists = True) Begin
54431>>>                Move iColumn to APIColumns[iCount].iFieldNumber
54432>>>                Get_Attribute DF_FIELD_NAME        of hTable iColumn to APIColumns[iCount].sFieldName
54435>>>                // ToDo: Can't use native_size as it can get way to big and causes "out of memory" problems.
54435>>>//                If (bIsSqlTable = True) Begin
54435>>>//                    Get_Attribute DF_FIELD_NATIVE_SIZE of hTable iColumn to APIColumns[iCount].iLength
54435>>>//                    Get_Attribute DF_FIELD_PRECISION   of hTable iColumn to APIColumns[iCount].iPrecision
54435>>>//                End
54435>>>                Get_Attribute DF_FIELD_LENGTH      of hTable iColumn to APIColumns[iCount].iLength
54438>>>                Get_Attribute DF_FIELD_PRECISION   of hTable iColumn to APIColumns[iCount].iPrecision
54441>>>
54441>>>                // If the length was zero we might have an Overlap(!) field.
54441>>>                // We then need check the DF_FIELD_TYPE if it really is and reset data for this array item.
54441>>>                If (APIColumns[iCount].iLength = 0) Begin
54443>>>                    Get_Attribute DF_FIELD_TYPE    of hTable iColumn to iType
54446>>>                    If (iType = DF_OVERLAP) Begin
54448>>>                        Move 0 to APIColumns[iCount].iFieldNumber
54449>>>                        Move 0 to APIColumns[iCount].iLength
54450>>>                        Move 0 to APIColumns[iCount].iOptions
54451>>>                        Move 0 to APIColumns[iCount].iPrecision
54452>>>                        Move DF_OVERLAP to APIColumns[iCount].iType
54453>>>                        Move "" to APIColumns[iCount].sFieldName
54454>>>                        Decrement iCount
54455>>>                    End
54455>>>>
54455>>>                End
54455>>>>
54455>>>            End
54455>>>>
54455>>>            Get Check_StatusPanel of ghoStatusPanel to bUserCancel
54456>>>            If (bUserCancel = True) Begin
54458>>>                Move True to APIColumnsEmpty[0].bCancel
54459>>>                Function_Return APIColumnsEmpty
54460>>>            End
54460>>>>
54460>>>            Increment iCount
54461>>>        Loop
54462>>>>
54462>>>
54462>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
54463>>>        Function_Return APIColumns
54464>>>    End_Function
54465>>>
54465>>>    // This will return a struct array with the combined data for the passed FROM and TO index arrays.
54465>>>    // The combined data will be sorted on the first struct member: iIndexNumber
54465>>>    // This is needed because index numbers can start at any number. The range for a particular table might also
54465>>>    // have "holes" in the series of index numbers.
54465>>>    Function UtilColumnCombineFromAndToArrays tAPIColumn[] APIColumnFrom tAPIColumn[] APIColumnTo Returns tAPIIndexCompare[]
54467>>>        tAPIColumnCompare[] aAPIColumnCompare
54467>>>        tAPIColumnCompare[] aAPIColumnCompare
54468>>>        tAPIColumnCompare   APIColumnCompare
54468>>>        tAPIColumnCompare   APIColumnCompare
54468>>>        Integer iSizeFrom iSizeTo iSize iCount iItem
54468>>>
54468>>>        Move (SizeOfArray(APIColumnFrom)) to iSizeFrom
54469>>>        Decrement iSizeFrom
54470>>>        for iCount from 0 to iSizeFrom
54476>>>>
54476>>>            Move APIColumnFrom[iCount].iFieldNumber     to aAPIColumnCompare[iCount].iFieldNumber
54477>>>            Move APIColumnFrom[iCount].sFieldName       to aAPIColumnCompare[iCount].sFieldNameFrom
54478>>>            Move APIColumnFrom[iCount].iType            to aAPIColumnCompare[iCount].iTypeFrom
54479>>>            Move APIColumnFrom[iCount].sType            to aAPIColumnCompare[iCount].sTypeFrom
54480>>>            Move APIColumnFrom[iCount].iLength          to aAPIColumnCompare[iCount].iLengthFrom
54481>>>            Move APIColumnFrom[iCount].iPrecision       to aAPIColumnCompare[iCount].iPrecisionFrom
54482>>>            Move APIColumnFrom[iCount].iOptions         to aAPIColumnCompare[iCount].iOptionsFrom
54483>>>            Move APIColumnFrom[iCount].bIsSQLType       to aAPIColumnCompare[iCount].bIsSQLTypeFrom
54484>>>            Move APIColumnFrom[iCount].bAllowNULL       to aAPIColumnCompare[iCount].bAllowNULLFrom
54485>>>            Move APIColumnFrom[iCount].sDefaultValue    to aAPIColumnCompare[iCount].sDefaultValueFrom
54486>>>            Move APIColumnFrom[iCount].bShouldChange    to aAPIColumnCompare[iCount].bShouldChangeFrom
54487>>>            Move APIColumnFrom[iCount].bCancel          to aAPIColumnCompare[iCount].bCancelFrom
54488>>>            Move APIColumnFrom[iCount].bError           to aAPIColumnCompare[iCount].bErrorFrom
54489>>>            Move True                                   to aAPIColumnCompare[iCount].bExistsFrom
54490>>>        Loop
54491>>>>
54491>>>
54491>>>        Move (SizeOfArray(APIColumnTo)) to iSizeTo
54492>>>        Decrement iSizeTo
54493>>>        for iCount from 0 to iSizeTo
54499>>>>
54499>>>            Move APIColumnTo[iCount].iFieldNumber       to APIColumnCompare.iFieldNumber
54500>>>            // Search if the field number already exists in the array; else add it.
54500>>>            Move (SearchArray(APIColumnCompare, aAPIColumnCompare)) to iItem
54501>>>            If (iItem = -1) Begin
54503>>>                Move (SizeOfArray(aAPIColumnCompare))   to iItem
54504>>>            End
54504>>>>
54504>>>
54504>>>            Move APIColumnCompare.iFieldNumber          to aAPIColumnCompare[iItem].iFieldNumber
54505>>>            Move APIColumnTo[iCount].iFieldNumber       to aAPIColumnCompare[iItem].iFieldNumberTo
54506>>>            Move APIColumnTo[iCount].sFieldName         to aAPIColumnCompare[iItem].sFieldNameTo
54507>>>            Move APIColumnTo[iCount].iType              to aAPIColumnCompare[iItem].iTypeTo
54508>>>            Move APIColumnTo[iCount].sType              to aAPIColumnCompare[iItem].sTypeTo
54509>>>            Move APIColumnTo[iCount].iLength            to aAPIColumnCompare[iItem].iLengthTo
54510>>>            Move APIColumnTo[iCount].iPrecision         to aAPIColumnCompare[iItem].iPrecisionTo
54511>>>            Move APIColumnTo[iCount].iOptions           to aAPIColumnCompare[iItem].iOptionsTo
54512>>>            Move APIColumnTo[iCount].bIsSQLType         to aAPIColumnCompare[iItem].bIsSQLTypeTo
54513>>>            Move APIColumnTo[iCount].bAllowNULL         to aAPIColumnCompare[iItem].bAllowNULLTo
54514>>>            Move APIColumnTo[iCount].sDefaultValue      to aAPIColumnCompare[iItem].sDefaultValueTo
54515>>>            Move APIColumnTo[iCount].bShouldChange      to aAPIColumnCompare[iItem].bShouldChangeTo
54516>>>            Move APIColumnTo[iCount].bCancel            to aAPIColumnCompare[iItem].bCancelTo
54517>>>            Move APIColumnTo[iCount].bError             to aAPIColumnCompare[iItem].bErrorTo
54518>>>            Move True                                   to aAPIColumnCompare[iItem].bExistsTo
54519>>>        Loop
54520>>>>
54520>>>
54520>>>        Move (SortArray(aAPIColumnCompare)) to aAPIColumnCompare
54521>>>
54521>>>        Function_Return aAPIColumnCompare
54522>>>    End_Function
54523>>>
54523>>>    // Checks if a field name exists in a table definition
54523>>>    // Returns True if it does
54523>>>    // Sample:
54523>>>    //   Get UtilColumnExists MyTable.File_Number "MyColumnName" to iExists
54523>>>    Function UtilColumnExists Handle hTable String sFieldName Returns Boolean
54525>>>        Integer iNumColumns iColumn
54525>>>        String sColumn
54525>>>        Boolean bExists bOK bOpen
54525>>>
54525>>>        Get AutoConnectionIDLogin to bOK
54526>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
54527>>>        Open hTable
54529>>>        Send Trap_Error   of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
54530>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
54533>>>        If (bOpen = False) Begin
54535>>>            Function_Return False
54536>>>        End
54536>>>>
54536>>>
54536>>>        Move False to bExists
54537>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
54540>>>        for iColumn from 1 to iNumColumns
54546>>>>
54546>>>            Get_Attribute DF_FIELD_NAME of hTable iColumn to sColumn
54549>>>            If (Uppercase(sFieldName) = Uppercase(sColumn)) Begin
54551>>>                Move iNumColumns to iColumn
54552>>>                Move True to bExists
54553>>>            End
54553>>>>
54553>>>        Loop
54554>>>>
54554>>>        Close hTable
54555>>>
54555>>>        Function_Return bExists
54556>>>    End_Function
54557>>>
54557>>>    // Returns the field/column number for the passed FieldName as an integer.
54557>>>    Function UtilColumnNameToColumnNumber Handle hTable String sFieldName Returns Integer
54559>>>        Integer iNumColumns iColumn iRetval
54559>>>        String sColumn
54559>>>        Boolean bOK bOpen
54559>>>
54559>>>        Get AutoConnectionIDLogin to bOK
54560>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
54561>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
54562>>>        Open hTable
54564>>>        Send Trap_Error   of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
54565>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
54568>>>        If (bOpen = False) Begin
54570>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
54571>>>            Function_Return False
54572>>>        End
54572>>>>
54572>>>
54572>>>        Move 0 to iColumn
54573>>>        Move 0 to iRetval
54574>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
54577>>>        for iColumn from 1 to iNumColumns
54583>>>>
54583>>>            Get_Attribute DF_FIELD_NAME of hTable iColumn to sColumn
54586>>>            If (Uppercase(sFieldName) = Uppercase(sColumn)) Begin
54588>>>                Move iColumn to iRetval
54589>>>                Move iNumColumns to iColumn
54590>>>            End
54590>>>>
54590>>>        Loop
54591>>>>
54591>>>        Close hTable
54592>>>
54592>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
54593>>>        Function_Return iRetval
54594>>>    End_Function
54595>>>
54595>>>    // To convert between a data type string name and its integer constant declaration. E.g."VarChar" -> SQL_VarChar
54595>>>    // The reciprocal function is UtilColumnTypeToInteger.
54595>>>    Function UtilColumnTypeToInteger String sDriverID Integer iDbType String sDataType Returns Integer
54597>>>        tColumnType RetvalType
54597>>>        tColumnType RetvalType
54597>>>
54597>>>        Get _UtilColumnType sDriverID iDbType 0 sDataType False to RetvalType
54598>>>        Function_Return RetvalType.iSQLType
54599>>>    End_Function
54600>>>
54600>>>    // To convert between an integer data type constant and its string value. E.g. SQL_VarChar -> "VarChar".
54600>>>    // The reciprocal function is UtilColumnTypeToString.
54600>>>    Function UtilColumnTypeToString String sDriverID Integer iDbType Integer iDataType Returns String
54602>>>        tColumnType RetvalType
54602>>>        tColumnType RetvalType
54602>>>
54602>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
54603>>>        Function_Return RetvalType.sSQLType
54604>>>    End_Function
54605>>>
54605>>>    Function UtilColumnTypePrecision String sDriverID Integer iDbType Integer iDataType Returns String
54607>>>        tColumnType RetvalType
54607>>>        tColumnType RetvalType
54607>>>
54607>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
54608>>>        Function_Return RetvalType.sPrecision
54609>>>    End_Function
54610>>>
54610>>>    Function UtilColumnTypeFixed String sDriverID Integer iDbType Integer iDataType Returns Boolean
54612>>>        tColumnType RetvalType
54612>>>        tColumnType RetvalType
54612>>>
54612>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
54613>>>        // Nils 2019-02-15. This return value seems to have been wrong. The function should return False
54613>>>        // if the column type length is _not_ fixed.
54613>>>        Function_Return (RetvalType.bCanEditSize = False)
54614>>>    End_Function
54615>>>
54615>>>    Function UtilColumnTypePrecisionSize String sDriverID Integer iDbType Integer iDataType Returns Integer
54617>>>        tColumnType RetvalType
54617>>>        tColumnType RetvalType
54617>>>        String sValue
54617>>>        Integer iRetval iPos
54617>>>
54617>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
54618>>>        Move RetvalType.sPrecision to sValue
54619>>>        Move (Pos(".", sValue)) to iPos
54620>>>        If (iPos <> 0) Begin
54622>>>            Move (Left(sValue, (iPos -1))) to iRetval
54623>>>        End
54623>>>>
54623>>>        Else Begin
54624>>>            Move sValue to iRetval
54625>>>        End
54625>>>>
54625>>>        Function_Return iRetval
54626>>>    End_Function
54627>>>
54627>>>    Function UtilColumnTypePrecisionDec String sDriverID Integer iDbType Integer iDataType Returns Integer
54629>>>        tColumnType RetvalType
54629>>>        tColumnType RetvalType
54629>>>        String sValue
54629>>>        Integer iRetval iPos
54629>>>
54629>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
54630>>>        Move RetvalType.sPrecision to sValue
54631>>>        Move (Pos(".", sValue)) to iPos
54632>>>        If (iPos = 0) Begin
54634>>>            Function_Return 0
54635>>>        End
54635>>>>
54635>>>        Move (Mid(sValue, 99, (iPos + 1))) to iRetval
54636>>>
54636>>>        Function_Return iRetval
54637>>>    End_Function
54638>>>
54638>>>    // * Dummy function for the Studio's Code Explorer *
54638>>>    Function API_INDEX_UTILITY_FUNCTIONS Returns Boolean
54640>>>        Function_Return False
54641>>>    End_Function
54642>>>
54642>>>    // Compares multiple indexes for a 'FROM' and a 'TO' table.
54642>>>    Function UtilIndexesCompare Boolean bIsSQLTableFrom Boolean bIsSQLTableTo tAPIIndexCompare[] aAPIIndexCompare Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Boolean
54644>>>        Boolean bIsSame
54644>>>        Integer iCount iSize
54644>>>
54644>>>        Move True to bIsSame
54645>>>        Move (SizeOfArray(aAPIIndexCompare)) to iSize
54646>>>        Decrement iSize
54647>>>        For iCount from 0 to iSize
54653>>>>
54653>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
54654>>>            Send Ignore_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
54655>>>            Get UtilIndexCompare bIsSQLTableFrom bIsSQLTableTo aAPIIndexCompare[iCount] bCompareIndexUppercase bCompareIndexAscending to bIsSame
54656>>>            Send Trap_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
54657>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
54658>>>            If (bIsSame = False) Begin
54660>>>                Function_Return False
54661>>>            End
54661>>>>
54661>>>        Loop
54662>>>>
54662>>>
54662>>>        Function_Return bIsSame
54663>>>    End_Function
54664>>>
54664>>>    // Compares a single index for a 'FROM' and a 'TO' table.
54664>>>    Function UtilIndexCompare Boolean bIsSQLTableFrom Boolean bIsSQLTableTo tAPIIndexCompare APIIndexCompare Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Boolean
54666>>>        Boolean bIsSame
54666>>>        Integer iSegment
54666>>>
54666>>>        Move (APIIndexCompare.bExistsFrom = APIIndexCompare.bExistsTo) to bIsSame
54667>>>        If (bIsSame = False) Begin
54669>>>            Function_Return False
54670>>>        End
54670>>>>
54670>>>        Move (APIIndexCompare.iPrimaryIndexFrom = APIIndexCompare.iPrimaryIndexTo) to bIsSame
54671>>>        If (bIsSame = False) Begin
54673>>>            Function_Return False
54674>>>        End
54674>>>>
54674>>>
54674>>>        If (bIsSqlTableFrom = True and bIsSqlTableTo = True) Begin
54676>>>            // * We should probably not compare SQL index names?
54676>>>            // Move (Uppercase(aIndexFrom.sSQLIndexName) = Uppercase(aIndexTo.sSQLIndexName)) to bIsSame
54676>>>            // If (bIsSame = False) Begin   DF_INDEX_SERVER_ONLY
54676>>>            //     Function_Return False
54676>>>            // End
54676>>>            Move (APIIndexCompare.bIsSQLPrimaryKeyFrom = APIIndexCompare.bIsSQLPrimaryKeyTo) to bIsSame
54677>>>            If (bIsSame = False) Begin
54679>>>                Function_Return False
54680>>>            End
54680>>>>
54680>>>            Move (APIIndexCompare.bIsSQLClusteredFrom = APIIndexCompare.bIsSQLClusteredTo) to bIsSame
54681>>>            If (bIsSame = False) Begin
54683>>>                Function_Return False
54684>>>            End
54684>>>>
54684>>>            Move (APIIndexCompare.iSQLIndexTypeFrom = APIIndexCompare.iSQLIndexTypeTo) to bIsSame
54685>>>            If (bIsSame = False) Begin
54687>>>                Function_Return False
54688>>>            End
54688>>>>
54688>>>            Move (Uppercase(APIIndexCompare.sSQLIndexNameFrom) = Uppercase(APIIndexCompare.sSQLIndexNameTo)) to bIsSame
54689>>>            If (bIsSame = False) Begin
54691>>>                Function_Return False
54692>>>            End
54692>>>>
54692>>>        End
54692>>>>
54692>>>
54692>>>        Get UtilIndexSegmentsCompare APIIndexCompare.IndexSegmentArrayFrom APIIndexCompare.IndexSegmentArrayTo bCompareIndexUppercase bCompareIndexAscending to iSegment
54693>>>        Move (iSegment = -1) to bIsSame
54694>>>
54694>>>        Function_Return (bIsSame = True)
54695>>>    End_Function
54696>>>
54696>>>    // Compares each segment for the passed index.
54696>>>    // Returns -1 if same; else returns the index segment that differs.
54696>>>    Function UtilIndexSegmentsCompare tAPIIndexSegment[] aIndexSegmentFrom tAPIIndexSegment[] aIndexSegmentTo Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Integer
54698>>>        Integer iNumSegmentsFrom iNumSegmentsTo iNumSegments iSegment
54698>>>        Boolean bIsSame
54698>>>
54698>>>        Send Ignore_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
54699>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
54700>>>        Move (SizeOfArray(aIndexSegmentFrom))      to iNumSegmentsFrom
54701>>>        Move (SizeOfArray(aIndexSegmentTo))        to iNumSegmentsTo
54702>>>        Move (iNumSegmentsFrom max iNumSegmentsTo) to iNumSegments
54703>>>
54703>>>        Decrement iNumSegments
54704>>>        for iSegment from 0 to iNumSegments
54710>>>>
54710>>>            Move False to bIsSame
54711>>>            If (iSegment < iNumSegmentsFrom and iSegment < iNumSegmentsTo) Begin
54713>>>                Get UtilIndexSegmentCompare aIndexSegmentFrom[iSegment] aIndexSegmentTo[iSegment] bCompareIndexUppercase bCompareIndexAscending to bIsSame
54714>>>            End
54714>>>>
54714>>>            If (bIsSame = False) Begin
54716>>>                Send Trap_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
54717>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
54718>>>                Function_Return iSegment
54719>>>            End
54719>>>>
54719>>>        Loop
54720>>>>
54720>>>
54720>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
54721>>>        Function_Return -1 // This means bIsSame = True
54722>>>    End_Function
54723>>>
54723>>>    Function UtilIndexSegmentCompare tAPIIndexSegment aIndexSegmentFrom tAPIIndexSegment aIndexSegmentTo Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Integer
54725>>>        Boolean bIsSame
54725>>>
54725>>>        Move (aIndexSegmentFrom.iFieldNumber = aIndexSegmentTo.iFieldNumber) to bIsSame
54726>>>        If (bIsSame = False) Begin
54728>>>            Function_Return False
54729>>>        End
54729>>>>
54729>>>        If (bCompareIndexUppercase = True) Begin
54731>>>            Move (aIndexSegmentFrom.bUppercase = aIndexSegmentTo.bUppercase) to bIsSame
54732>>>            If (bIsSame = False) Begin
54734>>>                Function_Return False
54735>>>            End
54735>>>>
54735>>>        End
54735>>>>
54735>>>        If (bCompareIndexAscending = True) Begin
54737>>>            Move (aIndexSegmentFrom.bAscending = aIndexSegmentTo.bAscending) to bIsSame
54738>>>            If (bIsSame = False) Begin
54740>>>                Function_Return False
54741>>>            End
54741>>>>
54741>>>        End
54741>>>>
54741>>>
54741>>>        Function_Return True
54742>>>    End_Function
54743>>>
54743>>>    Function UtilIndexesUpdate Handle hTable Boolean bIsSQLTableFrom Boolean bIsSQLTableTo tAPIIndex[] aIndexesFrom tAPIIndex[] aIndexesTo Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Boolean
54745>>>        Boolean bIsSame bOK
54745>>>        Integer iSize iSizeTo iCount
54745>>>        tAPIIndexCompare[] aAPIIndexCompare
54745>>>        tAPIIndexCompare[] aAPIIndexCompare
54746>>>
54746>>>        Move (SizeOfArray(aIndexesFrom)) to iSize
54747>>>        If (iSize = 0) Begin
54749>>>            Function_Return True
54750>>>        End
54750>>>>
54750>>>        Move (SizeOfArray(aIndexesTo)) to iSizeTo
54751>>>        Get UtilTableIsSql hTable to bIsSQLTableTo
54752>>>        Get UtilIndexCombineFromAndToArrays aIndexesFrom aIndexesTo to aAPIIndexCompare
54753>>>
54753>>>        for iCount from 0 to (iSize - 1)
54759>>>>
54759>>>            Get UtilIndexCompare bIsSQLTableFrom bIsSQLTableTo aAPIIndexCompare[iCount] bCompareIndexUppercase bCompareIndexAscending to bIsSame
54760>>>            If (bIsSame = False) Begin
54762>>>                Get APIIndexCreateByFieldNames hTable aIndexesFrom[iCount] aIndexesTo aIndexesFrom[iCount].IndexSegmentArray to bOK
54763>>>            End
54763>>>>
54763>>>        Loop
54764>>>>
54764>>>
54764>>>        // We probably should delete other indexes if they exists.
54764>>>        for iCount from (iSize +1) to iSizeTo
54770>>>>
54770>>>            Get ApiIndexRemove hTable iCount to bOK
54771>>>        Loop
54772>>>>
54772>>>
54772>>>        Function_Return bOK
54773>>>    End_Function
54774>>>
54774>>>//    Function UtilIsSameColumnDefinitions Handle hTable tAPIColumn[] aColumns Returns Boolean
54774>>>//        Boolean bEqual bIdentityKey bSqlDriver bDawSqlDriver bIsOpen
54774>>>//        Integer iCount iColumn iSize iOptions iLength iPrecision iType
54774>>>//        String sFieldName sDriverID
54774>>>//
54774>>>//        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
54774>>>//        If (bIsOpen = False) Begin
54774>>>//            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
54774>>>//            Open hTable
54774>>>//            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
54774>>>//            Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
54774>>>//            If (bIsOpen = False) Begin
54774>>>//                Function_Return False
54774>>>//            End
54774>>>//        End
54774>>>//
54774>>>//        Move True to bEqual
54774>>>//        Get psDriverID to sDriverID
54774>>>//        Get IsSQLDriver    sDriverID to bSqlDriver
54774>>>//        Get IsDAWSQLDriver sDriverID to bDawSqlDriver
54774>>>//        Move (SizeOfArray(aColumns)) to iSize
54774>>>//        Decrement iSize
54774>>>//
54774>>>//        For iCount from 0 to iSize
54774>>>//            Move 0 to iOptions
54774>>>//            Move False to bIdentityKey
54774>>>//            Move aColumns[iCount].sFieldName to sFieldName
54774>>>//
54774>>>//            // We need to use the column name - not the column integer as
54774>>>//            // the order does not need to be the same, and the logic should still work.
54774>>>//            Get UtilColumnNameToColumnNumber hTable sFieldName to iColumn
54774>>>//            If (iColumn > 0) Begin
54774>>>//                If (bDawSqlDriver = True) Begin
54774>>>//                    Send Ignore_Error of Error_Object_Id DFERR_UNSUPPORTED_ATTRIBUTE
54774>>>//                    Get_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to iType
54774>>>//                    If (iType <> aColumns[iCount].iSQLType) Begin
54774>>>//                        Move False to bEqual
54774>>>//                    End
54774>>>//                    Get_Attribute DF_FIELD_IS_IDENTITY of hTable iColumn to bIdentityKey
54774>>>//                    If (bIdentityKey = True) Begin
54774>>>//                        Move C_tAPIColumn_Identity to iOptions
54774>>>//                    End
54774>>>//                    If (iOptions <> aColumns[iCount].iOptions) Begin
54774>>>//                        Move False to bEqual
54774>>>//                    End
54774>>>//                    Send Trap_Error of Error_Object_Id DFERR_UNSUPPORTED_ATTRIBUTE
54774>>>//                End
54774>>>//                Else Begin
54774>>>//                    Get_Attribute DF_FIELD_TYPE     of hTable iColumn to iType
54774>>>//                    If (iType <> aColumns[iCount].iSQLType) Begin
54774>>>//                        Move False to bEqual
54774>>>//                    End
54774>>>//                End
54774>>>//                Get_Attribute DF_FIELD_LENGTH       of hTable iColumn to iLength
54774>>>//                If (iLength <> aColumns[iCount].iLength) Begin
54774>>>//                    Move False to bEqual
54774>>>//                End
54774>>>//                Get_Attribute DF_FIELD_PRECISION    of hTable iColumn to iPrecision
54774>>>//                If (iPrecision <> aColumns[iCount].iPrecision) Begin
54774>>>//                    Move False to bEqual
54774>>>//                End
54774>>>//                If (bEqual = False) Begin
54774>>>//                    Function_Return False
54774>>>//                End
54774>>>//            End
54774>>>//
54774>>>//            Else Begin
54774>>>//                Function_Return False
54774>>>//            End
54774>>>//        Loop
54774>>>//
54774>>>//        Function_Return bEqual
54774>>>//    End_Function
54774>>>
54774>>>    Function UtilIndexesStructFill Handle hTable Returns tAPIIndex[]
54776>>>        tAPIIndex[] APIIndexes
54776>>>        tAPIIndex[] APIIndexes
54777>>>        Integer iCount iIndex iIndexes iSegment iSegmentCount iNumSegments iColumn
54777>>>        String sDriverID
54777>>>        Boolean bDAWSQLDriver bIsOpen bIsSQLTable
54777>>>
54777>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
54778>>>        Get psDriverID to sDriverID
54779>>>        Get IsDAWSQLDriver sDriverID to bDAWSQLDriver
54780>>>        Get UtilTableIsSQL hTable to bIsSQLTable
54781>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
54784>>>        If (bIsOpen = False) Begin
54786>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
54787>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
54788>>>            Open hTable
54790>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
54791>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
54792>>>            Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
54795>>>            If (bIsOpen = False) Begin
54797>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
54798>>>                Move True to APIIndexes[0].bError
54799>>>                Function_Return APIIndexes
54800>>>            End
54800>>>>
54800>>>        End
54800>>>>
54800>>>
54800>>>        Move 0 to iCount
54801>>>        Get_Attribute DF_FILE_LAST_INDEX_NUMBER of hTable to iIndexes
54804>>>        for iIndex from 1 to iIndexes
54810>>>>
54810>>>            // This is a test that the index exists as there might be "holes" aka the index
54810>>>            // numbers doesn't not need to be consequitive:
54810>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
54813>>>            If (iNumSegments > 0) Begin
54815>>>
54815>>>                Move iIndex                                                     to APIIndexes[iCount].iIndexNumber
54816>>>                Get_Attribute DF_FILE_PRIMARY_INDEX of hTable                   to APIIndexes[iCount].iPrimaryIndex
54819>>>                If (bIsSQLTable = True) Begin
54821>>>                    Get_Attribute DF_INDEX_NAME         of hTable iIndex        to APIIndexes[iCount].sSQLIndexName
54824>>>                        Get_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable iIndex to APIIndexes[iCount].bIsSQLPrimaryKey
54827>>>                        Get_Attribute DF_INDEX_CLUSTERED of hTable iIndex       to APIIndexes[iCount].bIsSQLClustered
54830>>>                        Get_Attribute DF_INDEX_SQL_TYPE of hTable iIndex        to APIIndexes[iCount].iSQLIndexType // (DF_INDEX_SQL_TYPE = DF_INDEX_SERVER, DF_INDEX_CLIENT, DF_INDEX_SERVER_ONLY or DF_INDEX_TEMPORARY)
54833>>>                End
54833>>>>
54833>>>
54833>>>                Move 0 to iSegmentCount
54834>>>                Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
54837>>>                For iSegment from 1 to iNumSegments
54843>>>>
54843>>>                    Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iSegment to iColumn
54846>>>                    Move iColumn                                                       to APIIndexes[iCount].IndexSegmentArray[iSegmentCount].iFieldNumber
54847>>>                    Get_Attribute DF_FIELD_NAME              of hTable iColumn         to APIIndexes[iCount].IndexSegmentArray[iSegmentCount].sFieldName
54850>>>                    Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iSegment to APIIndexes[iCount].IndexSegmentArray[iSegmentCount].bUppercase
54853>>>                    Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iSegment to APIIndexes[iCount].IndexSegmentArray[iSegmentCount].bAscending
54856>>>                    Increment iSegmentCount
54857>>>                Loop
54858>>>>
54858>>>                Increment iCount
54859>>>            End
54859>>>>
54859>>>        Loop
54860>>>>
54860>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
54861>>>
54861>>>        Function_Return APIIndexes
54862>>>    End_Function
54863>>>
54863>>>    // This will return a struct array with the combined data for the passed FROM and TO index arrays.
54863>>>    // The combined data will be sorted on the first struct member: iIndexNumber
54863>>>    // This is needed because index numbers can start at any number. The range for a particular table might also
54863>>>    // have "holes" in the series of index numbers.
54863>>>    Function UtilIndexCombineFromAndToArrays tAPIIndex[] APIIndexFrom tAPIIndex[] APIIndexTo Returns tAPIIndexCompare[]
54865>>>        tAPIIndexCompare[] aAPIIndexCompare
54865>>>        tAPIIndexCompare[] aAPIIndexCompare
54866>>>        tAPIIndexCompare   APIIndexCompare
54866>>>        tAPIIndexCompare   APIIndexCompare
54866>>>        Integer iSizeFrom iSizeTo iSize iCount iItem
54866>>>
54866>>>        Move (SizeOfArray(APIIndexFrom)) to iSizeFrom
54867>>>        Move (SizeOfArray(APIIndexTo)) to iSizeTo
54868>>>        If (iSizeFrom = 0 and iSizeTo = 0) Begin
54870>>>            Function_Return aAPIIndexCompare
54871>>>        End
54871>>>>
54871>>>
54871>>>        Decrement iSizeFrom
54872>>>        for iCount from 0 to iSizeFrom
54878>>>>
54878>>>            Move APIIndexFrom[iCount].iIndexNumber      to aAPIIndexCompare[iCount].iIndexNumber
54879>>>            Move APIIndexFrom[iCount].iPrimaryIndex     to aAPIIndexCompare[iCount].iPrimaryIndexFrom
54880>>>            Move APIIndexFrom[iCount].sSQLIndexName     to aAPIIndexCompare[iCount].sSQLIndexNameFrom
54881>>>            Move APIIndexFrom[iCount].iSQLIndexType     to aAPIIndexCompare[iCount].iSQLIndexTypeFrom
54882>>>            Move APIIndexFrom[iCount].bIsSQLClustered   to aAPIIndexCompare[iCount].bIsSQLClusteredFrom
54883>>>            Move APIIndexFrom[iCount].bIsSQLPrimaryKey  to aAPIIndexCompare[iCount].bIsSQLPrimaryKeyFrom
54884>>>            Move APIIndexFrom[iCount].IndexSegmentArray to aAPIIndexCompare[iCount].IndexSegmentArrayFrom
54885>>>            Move APIIndexFrom[iCount].bShouldChange     to aAPIIndexCompare[iCount].bShouldChangeFrom
54886>>>            Move APIIndexFrom[iCount].bCancel           to aAPIIndexCompare[iCount].bCancelFrom
54887>>>            Move APIIndexFrom[iCount].bError            to aAPIIndexCompare[iCount].bErrorFrom
54888>>>            Move True                                   to aAPIIndexCompare[iCount].bExistsFrom
54889>>>        Loop
54890>>>>
54890>>>
54890>>>        Decrement iSizeTo
54891>>>        for iCount from 0 to iSizeTo
54897>>>>
54897>>>            Move APIIndexTo[iCount].iIndexNumber        to APIIndexCompare.iIndexNumber
54898>>>            // Search if the Index number already exists in the array; else add it.
54898>>>            Move (SearchArray(APIIndexCompare, aAPIIndexCompare)) to iItem
54899>>>            If (iItem = -1) Begin
54901>>>                Move (SizeOfArray(aAPIIndexCompare))    to iItem
54902>>>            End
54902>>>>
54902>>>
54902>>>            Move APIIndexCompare.iIndexNumber           to aAPIIndexCompare[iItem].iIndexNumber
54903>>>            Move APIIndexTo[iCount].iPrimaryIndex       to aAPIIndexCompare[iItem].iPrimaryIndexTo
54904>>>            Move APIIndexTo[iCount].sSQLIndexName       to aAPIIndexCompare[iItem].sSQLIndexNameTo
54905>>>            Move APIIndexTo[iCount].iSQLIndexType       to aAPIIndexCompare[iItem].iSQLIndexTypeTo
54906>>>            Move APIIndexTo[iCount].bIsSQLClustered     to aAPIIndexCompare[iItem].bIsSQLClusteredTo
54907>>>            Move APIIndexTo[iCount].bIsSQLPrimaryKey    to aAPIIndexCompare[iItem].bIsSQLPrimaryKeyTo
54908>>>            Move APIIndexTo[iCount].IndexSegmentArray   to aAPIIndexCompare[iItem].IndexSegmentArrayTo
54909>>>            Move APIIndexTo[iCount].bShouldChange       to aAPIIndexCompare[iItem].bShouldChangeTo
54910>>>            Move APIIndexTo[iCount].bCancel             to aAPIIndexCompare[iItem].bCancelTo
54911>>>            Move APIIndexTo[iCount].bError              to aAPIIndexCompare[iItem].bErrorTo
54912>>>            Move True                                   to aAPIIndexCompare[iItem].bExistsTo
54913>>>        Loop
54914>>>>
54914>>>
54914>>>        Move (SortArray(aAPIIndexCompare)) to aAPIIndexCompare
54915>>>
54915>>>        Function_Return aAPIIndexCompare
54916>>>    End_Function
54917>>>
54917>>>    // This is the same as the UtilIndexCompare function but it takes tAPIIndex structs as params.
54917>>>    Function UtilIndexTypeNumberCompare Handle hTable tAPIIndex aIndexFrom tAPIIndex aIndexTo Returns Boolean
54919>>>        Boolean bIsSame bDAWSQLDriver bIsSqlTable
54919>>>        String sDriverID
54919>>>
54919>>>        Get psDriverID to sDriverID
54920>>>        Get IsDAWSQLDriver sDriverID to bDAWSQLDriver
54921>>>        Get IsSQLDriver sDriverID to bIsSqlTable
54922>>>        If (bIsSqlTable = True) Begin
54924>>>            Get UtilTableIsSQL hTable to bIsSqlTable
54925>>>        End
54925>>>>
54925>>>
54925>>>        Move (aIndexFrom.iIndexNumber = aIndexTo.iIndexNumber) to bIsSame
54926>>>        If (bIsSame = False) Begin
54928>>>            Function_Return False
54929>>>        End
54929>>>>
54929>>>
54929>>>        If (bDAWSQLDriver = True and bIsSqlTable = True) Begin
54931>>>            // Don't think we should do this. Or should we?
54931>>>            // Move (aIndexesFrom[iCount].sSQLIndexName = aIndexesTo[iCount].sSQLIndexName) to bIsSame
54931>>>
54931>>>            Move (aIndexFrom.iSQLIndexType = aIndexTo.iSQLIndexType) to bIsSame
54932>>>            If (bIsSame = False) Begin
54934>>>                Function_Return False
54935>>>            End
54935>>>>
54935>>>            Move (aIndexFrom.iPrimaryIndex = aIndexTo.iPrimaryIndex) to bIsSame
54936>>>            If (bIsSame = False) Begin
54938>>>                Function_Return False
54939>>>            End
54939>>>>
54939>>>            Move (aIndexFrom.bIsSQLPrimaryKey = aIndexTo.bIsSQLPrimaryKey) to bIsSame
54940>>>            If (bIsSame = False) Begin
54942>>>                Function_Return False
54943>>>            End
54943>>>>
54943>>>            Move (aIndexFrom.bIsSQLClustered = aIndexTo.bIsSQLClustered) to bIsSame
54944>>>            If (bIsSame = False) Begin
54946>>>                Function_Return False
54947>>>            End
54947>>>>
54947>>>        End
54947>>>>
54947>>>
54947>>>        Function_Return bIsSame
54948>>>    End_Function
54949>>>
54949>>>    // DF_INDEX_SQL_TYPE values
54949>>>    // Pass one of the DF_INDEX_XXX integer constants and the function
54949>>>    // returns a string with the name.
54949>>>    Function UtilIndexTypeToString Integer iIndexType Returns String
54951>>>        String sRetval
54951>>>        Case Begin
54951>>>            Case (iIndexType = DF_INDEX_CLIENT)
54953>>>                Move "DF_INDEX_CLIENT" to sRetval
54954>>>                Case Break
54955>>>            Case (iIndexType = DF_INDEX_SERVER)
54958>>>                Move "DF_INDEX_SERVER" to sRetval
54959>>>                Case Break
54960>>>            Case (iIndexType = DF_INDEX_SERVER_ONLY)
54963>>>                Move "DF_INDEX_SERVER_ONLY" to sRetval
54964>>>                Case Break
54965>>>            Case (iIndexType = DF_INDEX_TEMPORARY)
54968>>>                Move "DF_INDEX_TEMPORARY" to sRetval
54969>>>                Case Break
54970>>>            Case Else
54970>>>                Move "UNKNOWN INDEX TYPE" to sRetval
54971>>>        Case End
54971>>>        Function_Return sRetval
54972>>>    End_Function
54973>>>
54973>>>    // * Dummy function for the Studio's Code Explorer *
54973>>>    Function API_RELATION_UTILITY_FUNCTIONS Returns Boolean
54975>>>        Function_Return False
54976>>>    End_Function
54977>>>
54977>>>    // Compares multiple relationships for a 'FROM' and a 'TO' databases
54977>>>    Function UtilRelationsCompare Handle hTable tAPIRelationCompare[] aAPIRelationCompare Returns Boolean
54979>>>        Boolean bIsSame
54979>>>        Integer iSize iCount
54979>>>
54979>>>        Move True to bIsSame
54980>>>        Move (SizeOfArray(aAPIRelationCompare)) to iSize
54981>>>        Decrement iSize
54982>>>        For iCount from 0 to iSize
54988>>>>
54988>>>            Get UtilRelationCompare hTable aAPIRelationCompare[iCount] to bIsSame
54989>>>            If (bIsSame = False) Begin
54991>>>                Function_Return False
54992>>>            End
54992>>>>
54992>>>        Loop
54993>>>>
54993>>>
54993>>>        Function_Return bIsSame
54994>>>    End_Function
54995>>>
54995>>>    // Compares a single relationship for a 'FROM' and a 'TO' table
54995>>>    Function UtilRelationCompare Handle hTable tAPIRelationCompare APIRelationCompare Returns Boolean
54997>>>        Boolean bIsSame
54997>>>
54997>>>        Move True to bIsSame
54998>>>        If (APIRelationCompare.bExistsFrom <> APIRelationCompare.bExistsTo) Begin
55000>>>            Function_Return False
55001>>>        End
55001>>>>
55001>>>        If (APIRelationCompare.hTableFrom = 0 or APIRelationCompare.hTableTo = 0) Begin
55003>>>            Function_Return False
55004>>>        End
55004>>>>
55004>>>
55004>>>        // We could also compare field names, but I don't think that is necessary...
55004>>>
55004>>>        Function_Return bIsSame
55005>>>    End_Function
55006>>>
55006>>>    // This message is different from ApiTableCreate in that it will not do a function_return if the table
55006>>>    // already exists.
55006>>>    Function UtilRelationsUpdate Handle hTable tAPIRelation[] aRelationsFrom tAPIRelation[] aRelationsTo Returns Boolean
55008>>>        Boolean bOK
55008>>>        Integer iSizeTo iSize iCount iColumn
55008>>>        String sDriverID
55008>>>
55008>>>        Move True to bOK
55009>>>        Move (SizeOfArray(aRelationsTo))   to iSizeTo
55010>>>        If (iSizeTo > 0) Begin
55012>>>            Get AutoConnectionIDLogin to bOK
55013>>>            Move False to Err
55014>>>            Open hTable Mode DF_EXCLUSIVE
55016>>>            Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
55019>>>            Decrement iSizeTo
55020>>>
55020>>>            // We should probably not make any comparison between "FROM" and "TO" database; instead just create all "FROM" relations
55020>>>            // for the "TO" database. But start by deleting all current "TO" relations:
55020>>>            Structure_Start hTable sDriverID
55021>>>                for iCount from 0 to iSizeTo
55027>>>>
55027>>>                    Move aRelationsTo[iCount].iColumnFrom to iColumn
55028>>>                    Set_Attribute DF_FIELD_RELATED_FILE  of hTable iColumn to 0
55031>>>                    Set_Attribute DF_FIELD_RELATED_FIELD of hTable iColumn to 0
55034>>>                Loop
55035>>>>
55035>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
55036>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55038>>>            Set Action_Text of ghoStatusPanel to ""
55039>>>        End
55039>>>>
55039>>>
55039>>>        Move (SizeOfArray(aRelationsFrom)) to iSize
55040>>>        Decrement iSize
55041>>>        for iCount from 0 to iSize
55047>>>>
55047>>>            Get ApiTableRelate aRelationsFrom[iCount].hTableFrom aRelationsFrom[iCount].hTableTo aRelationsFrom[iCount].iColumnFrom aRelationsFrom[iCount].iColumnTo aRelationsTo to bOK
55048>>>        Loop
55049>>>>
55049>>>
55049>>>        Function_Return bOK
55050>>>    End_Function
55051>>>
55051>>>    Function UtilRelationsStructFill Handle hTable Returns tAPIRelation[]
55053>>>        tAPIRelation[] APIRelations
55053>>>        tAPIRelation[] APIRelations
55054>>>        Integer iColumn iColumnTo iNumColumns iCount
55054>>>        Handle hParent
55054>>>        Boolean bIsOpen
55054>>>
55054>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55055>>>        Move 0 to iCount
55056>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
55059>>>        If (bIsOpen = False) Begin
55061>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
55062>>>            Open hTable
55064>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
55065>>>            Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
55068>>>            If (bIsOpen = False) Begin
55070>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
55071>>>                Move True to APIRelations[0].bError
55072>>>                Function_Return APIRelations
55073>>>            End
55073>>>>
55073>>>        End
55073>>>>
55073>>>
55073>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
55076>>>        For iColumn from 1 to iNumColumns
55082>>>>
55082>>>            Get_Attribute DF_FIELD_RELATED_FILE of hTable iColumn to hParent
55085>>>            If (hParent <> 0) Begin
55087>>>                Open hParent
55089>>>                Move hTable                                             to APIRelations[iCount].hTableFrom
55090>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable            to APIRelations[iCount].sLogicalNameFrom
55093>>>                Move iColumn                                            to APIRelations[iCount].iColumnFrom
55094>>>                Get_Attribute DF_FIELD_NAME of hTable iColumn           to APIRelations[iCount].sFieldNameFrom
55097>>>
55097>>>                Move hParent                                            to APIRelations[iCount].hTableTo
55098>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hParent           to APIRelations[iCount].sLogicalNameTo
55101>>>                Get_Attribute DF_FIELD_RELATED_FIELD of hTable iColumn  to iColumnTo
55104>>>                Move iColumnTo                                          to APIRelations[iCount].iColumnTo
55105>>>                Get_Attribute DF_FIELD_NAME of hParent iColumnTo        to APIRelations[iCount].sFieldNameTo
55108>>>                Move False                                              to APIRelations[iCount].bShouldChange
55109>>>                Move False                                              to APIRelations[iCount].bCancel
55110>>>                Move False                                              to APIRelations[iCount].bError
55111>>>                Close hParent
55112>>>                Increment iCount
55113>>>            End
55113>>>>
55113>>>        Loop
55114>>>>
55114>>>
55114>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
55115>>>        Function_Return APIRelations
55116>>>    End_Function
55117>>>
55117>>>    Function UtilRelationArrayCompare tAPIRelation RelationCurrent tAPIRelation RelationNew Returns Integer
55119>>>        If (RelationCurrent.hTableFrom  = RelationNew.hTableFrom and ;            RelationCurrent.iColumnFrom = RelationNew.iColumnFrom and ;            RelationCurrent.hTableTo    = RelationNew.hTableTo and ;            RelationCurrent.iColumnTo   = RelationNew.iColumnTo) Begin
55121>>>            Function_Return (EQ)
55122>>>        End
55122>>>>
55122>>>
55122>>>        Function_Return (GT)
55123>>>    End_Function
55124>>>
55124>>>    Function SearchRelationCompare tAPIRelationCompare RelationCompareCurrent tAPIRelationCompare RelationCompareNew Returns Integer
55126>>>        If (RelationCompareCurrent.hTableFrom  = RelationCompareNew.hTableFrom and ;            RelationCompareCurrent.iColumnFrom = RelationCompareNew.iColumnFrom and ;            RelationCompareCurrent.hTableTo    = RelationCompareNew.hTableTo and ;            RelationCompareCurrent.iColumnTo   = RelationCompareNew.iColumnTo) ;            Function_Return (EQ)
55129>>>
55129>>>        Function_Return (GT)
55130>>>    End_Function
55131>>>
55131>>>    // This will return a struct array with the combined data for the passed FROM and TO index arrays.
55131>>>    // The combined data will be sorted on the first 4 struct members: hTableFrom, iColumnFrom, hTableTo and iColumnTo
55131>>>    Function UtilRelationCombineFromAndToArrays tAPIRelation[] aAPIRelationFrom tAPIRelation[] aAPIRelationTo Returns tAPIIndexCompare[]
55133>>>        tAPIRelation[] aAPIRelationFromAndTo
55133>>>        tAPIRelation[] aAPIRelationFromAndTo
55134>>>        tAPIRelationCompare[] aAPIRelationCompare
55134>>>        tAPIRelationCompare[] aAPIRelationCompare
55135>>>        tAPIRelationCompare   APIRelationCompare
55135>>>        tAPIRelationCompare   APIRelationCompare
55135>>>        Integer iSizeFrom iSizeTo iSize iCount iItem
55135>>>
55135>>>        Move (SizeOfArray(aAPIRelationFrom)) to iSizeFrom
55136>>>        Move (SizeOfArray(aAPIRelationTo))   to iSizeTo
55137>>>        If (iSizeFrom = 0 and iSizeTo = 0) Begin
55139>>>            Function_Return aAPIRelationCompare
55140>>>        End
55140>>>>
55140>>>
55140>>>        Move (AppendArray(aAPIRelationFrom, aAPIRelationTo)) to aAPIRelationFromAndTo
55141>>>        Move (SortArray(aAPIRelationFromAndTo, Self, RefFunc(UtilRelationArrayCompare))) to aAPIRelationFromAndTo
55142>>>
55142>>>        Decrement iSizeFrom
55143>>>        for iCount from 0 to iSizeFrom
55149>>>>
55149>>>            Move aAPIRelationFrom[iCount].hTableFrom        to aAPIRelationCompare[iCount].hTableFrom
55150>>>            Move aAPIRelationFrom[iCount].iColumnFrom       to aAPIRelationCompare[iCount].iColumnFrom
55151>>>            Move aAPIRelationFrom[iCount].hTableTo          to aAPIRelationCompare[iCount].hTableTo
55152>>>            Move aAPIRelationFrom[iCount].iColumnTo         to aAPIRelationCompare[iCount].iColumnTo
55153>>>            Move aAPIRelationFrom[iCount].sLogicalNameFrom  to aAPIRelationCompare[iCount].sLogicalNameFrom_From
55154>>>            Move aAPIRelationFrom[iCount].sLogicalNameTo    to aAPIRelationCompare[iCount].sLogicalNameTo_From
55155>>>            Move aAPIRelationFrom[iCount].sFieldNameFrom    to aAPIRelationCompare[iCount].sFieldNameFrom_From
55156>>>            Move aAPIRelationFrom[iCount].sFieldNameTo      to aAPIRelationCompare[iCount].sFieldNameTo_From
55157>>>            Move aAPIRelationFrom[iCount].bShouldChange     to aAPIRelationCompare[iCount].bShouldChange_From
55158>>>            Move aAPIRelationFrom[iCount].bCancel           to aAPIRelationCompare[iCount].bCancel_From
55159>>>            Move aAPIRelationFrom[iCount].bError            to aAPIRelationCompare[iCount].bError_From
55160>>>            Move True                                       to aAPIRelationCompare[iCount].bExistsFrom
55161>>>        Loop
55162>>>>
55162>>>
55162>>>        Decrement iSizeTo
55163>>>        for iCount from 0 to iSizeTo
55169>>>>
55169>>>            Move aAPIRelationTo[iCount].hTableFrom          to APIRelationCompare.hTableFrom
55170>>>            Move aAPIRelationTo[iCount].iColumnFrom         to APIRelationCompare.iColumnFrom
55171>>>            Move aAPIRelationTo[iCount].hTableTo            to APIRelationCompare.hTableTo
55172>>>            Move aAPIRelationTo[iCount].iColumnTo           to APIRelationCompare.iColumnTo
55173>>>
55173>>>            // Search if the relation already exists in the array; else add it.
55173>>>            Move (SearchArray(APIRelationCompare, aAPIRelationCompare, Self, RefFunc(SearchRelationCompare))) to iItem
55174>>>            If (iItem = -1) Begin
55176>>>                Move (SizeOfArray(aAPIRelationCompare))     to iItem
55177>>>            End
55177>>>>
55177>>>
55177>>>            Move APIRelationCompare.hTableFrom              to aAPIRelationCompare[iItem].hTableFrom
55178>>>            Move APIRelationCompare.iColumnFrom             to aAPIRelationCompare[iItem].iColumnFrom
55179>>>            Move APIRelationCompare.hTableTo                to aAPIRelationCompare[iItem].hTableTo
55180>>>            Move APIRelationCompare.iColumnTo               to aAPIRelationCompare[iItem].iColumnTo
55181>>>            Move aAPIRelationTo[iCount].sLogicalNameFrom    to aAPIRelationCompare[iItem].sLogicalNameFrom_To
55182>>>            Move aAPIRelationTo[iCount].sLogicalNameTo      to aAPIRelationCompare[iItem].sLogicalNameTo_To
55183>>>            Move aAPIRelationTo[iCount].sFieldNameFrom      to aAPIRelationCompare[iItem].sFieldNameFrom_To
55184>>>            Move aAPIRelationTo[iCount].sFieldNameTo        to aAPIRelationCompare[iItem].sFieldNameTo_To
55185>>>            Move aAPIRelationTo[iCount].bShouldChange       to aAPIRelationCompare[iItem].bShouldChange_To
55186>>>            Move aAPIRelationTo[iCount].bCancel             to aAPIRelationCompare[iItem].bCancel_To
55187>>>            Move aAPIRelationTo[iCount].bError              to aAPIRelationCompare[iItem].bError_To
55188>>>            Move True                                       to aAPIRelationCompare[iItem].bExistsTo
55189>>>        Loop
55190>>>>
55190>>>
55190>>>        Move (SortArray(aAPIRelationCompare, Self, RefFunc(SearchRelationCompare))) to aAPIRelationCompare
55191>>>
55191>>>        Function_Return aAPIRelationCompare
55192>>>    End_Function
55193>>>
55193>>>    // * Dummy function for the Studio's Code Explorer *
55193>>>    Function CODEMAST_UTILITY_FUNCTIONS Returns Boolean
55195>>>        Function_Return False
55196>>>    End_Function
55197>>>
55197>>>    // To add a value to the CodeMast & CodeType tables. Pass; a) bCodeType if it is CodeType that should be updated.
55197>>>    // Else it is CodeMast. b) sTypeValue; either to be added If bCodeType = True, or it will be used to find the correct
55197>>>    // CodeType record. c) sValue1 and d) sValue2 is the CodeType Description & Comment, or CodeMast Type and Code values.
55197>>>    Function UtilCodeMasterAddValue Boolean bCodeType String sTypeValue String sValue2 String sValue3 Returns Boolean
55199>>>        Boolean bFound
55199>>>
55199>>>        Move False to Err
55200>>>        Open CodeMast
55202>>>        Open CodeType
55204>>>
55204>>>        If (bCodeType = True) Begin
55206>>>            Set Private.phCurrentTable to CODETYPE.File_Number
55207>>>            Clear CodeType
55208>>>            Move sTypeValue to CODETYPE.Type
55209>>>            Find eq CODETYPE by 1
55210>>>>
55210>>>            Move Found to bFound
55211>>>            If (bFound = True) Begin
55213>>>                Reread CodeType
55217>>>            End
55217>>>>
55217>>>            Else Begin
55218>>>                Clear CodeType
55219>>>            End
55219>>>>
55219>>>
55219>>>            Move sTypeValue to CODETYPE.Type
55220>>>            Move sValue2    to CODETYPE.Description
55221>>>            Move sValue3    to CODETYPE.Comment
55222>>>            SaveRecord CODETYPE
55223>>>
55223>>>            If (bFound = True) Begin
55225>>>                Unlock
55226>>>>
55226>>>            End
55226>>>>
55226>>>        End
55226>>>>
55226>>>
55226>>>        If (bCodeType = False) Begin
55228>>>            Set Private.phCurrentTable to CODEMAST.File_Number
55229>>>            Clear CODEMAST
55230>>>            Move sTypeValue to CODEMAST.Type
55231>>>            Move sValue2    to CODEMAST.Code
55232>>>            Find eq CODEMAST by 1
55233>>>>
55233>>>            Move Found to bFound
55234>>>            If (bFound = True) Begin
55236>>>                Reread CODEMAST
55240>>>            End
55240>>>>
55240>>>            Else Begin
55241>>>                Clear CODEMAST
55242>>>            End
55242>>>>
55242>>>
55242>>>            Move sTypeValue to CODEMAST.Type
55243>>>            Move sValue2    to CODEMAST.Code
55244>>>            Move sValue3    to CODEMAST.Description
55245>>>            SaveRecord CODEMAST
55246>>>
55246>>>            If (bFound = True) Begin
55248>>>                Unlock
55249>>>>
55249>>>            End
55249>>>>
55249>>>        End
55249>>>>
55249>>>
55249>>>        Close CodeMast
55250>>>        Close CodeType
55251>>>
55251>>>        Function_Return (Err = False)
55252>>>    End_Function
55253>>>
55253>>>    // Changes values in CodeType & CodeMast - From type value To type value. It first changes the type value in
55253>>>    // CodeType and then spins through all CodeMast records to change all related records.
55253>>>    Function UtilCodeMasterChangeValue String sFromValue String sToValue Returns Boolean
55255>>>        Boolean bFound
55255>>>
55255>>>        Move False to Err
55256>>>        Open CodeMast
55258>>>        Open CodeType
55260>>>
55260>>>        Clear CodeType
55261>>>        Move sFromValue to CODETYPE.Type
55262>>>        Find eq CODETYPE.Type
55263>>>>
55263>>>        If (Found = True) Begin
55265>>>            Reread CODETYPE
55269>>>                Move sToValue to CODETYPE.Type
55270>>>                SaveRecord CODETYPE
55271>>>            Unlock
55272>>>>
55272>>>        End
55272>>>>
55272>>>
55272>>>        Clear CODEMAST
55273>>>        Find gt CODEMAST by Recnum
55274>>>>
55274>>>        While (Found = True)
55278>>>            Move (Trim(Uppercase(CODEMAST.Type) = Trim(Uppercase(sFromValue)))) to bFound
55279>>>            If (bFound = True) Begin
55281>>>                Reread CODEMAST
55285>>>                    Move sToValue to CODEMAST.Type
55286>>>                    SaveRecord CODEMAST
55287>>>                Unlock
55288>>>>
55288>>>            End
55288>>>>
55288>>>            Find gt CODEMAST by Recnum
55289>>>>
55289>>>        Loop
55290>>>>
55290>>>
55290>>>        Close CodeMast
55291>>>        Close CodeType
55292>>>
55292>>>        Function_Return (Err = False)
55293>>>    End_Function
55294>>>
55294>>>    // Removes a value from CodeMast. Pass the sTypeValue and the sValue2 to remove.
55294>>>    Function UtilCodeMasterRemoveValue String sTypeValue String sValue2 Returns Boolean
55296>>>        Boolean bFound
55296>>>
55296>>>        Move False to Err
55297>>>        Open CodeMast
55299>>>
55299>>>        Clear CODEMAST
55300>>>        Move sTypeValue to CODEMAST.Type
55301>>>        Move sValue2    to CODEMAST.Code
55302>>>        Find eq CODEMAST.Code
55303>>>>
55303>>>        Move Found to bFound
55304>>>        If (bFound = True) Begin
55306>>>            Delete CODEMAST
55307>>>        End
55307>>>>
55307>>>
55307>>>        Close CodeMast
55308>>>
55308>>>        Function_Return (Err = False)
55309>>>    End_Function
55310>>>
55310>>>    Function UtilTableCreateCodeMastCodeTypeIntFiles String sDataPath Returns Boolean
55312>>>        Boolean bRecnum bToAnsi
55312>>>        Integer iCh
55312>>>        String sFileName sDriverID sConnectionID sSchemaName sANSI_OEM
55312>>>
55312>>>        If (Trim(sDataPath) = "") Begin
55314>>>            Function_Return False
55315>>>        End
55315>>>>
55315>>>
55315>>>        Move False to Err
55316>>>        Get psDriverID     to sDriverID
55317>>>        Get psConnectionID to sConnectionID
55318>>>        Get psSchema       to sSchemaName
55319>>>        Get True           to bRecnum
55320>>>        Get pbToANSI       to bToAnsi
55321>>>        Move CS_ANSI_Txt to sANSI_OEM
55322>>>        If (bToAnsi = False) Begin
55324>>>            Move CS_OEM_Txt to sANSI_OEM
55325>>>        End
55325>>>>
55325>>>
55325>>>        Get vFolderFormat sDataPath to sDataPath
55326>>>        Move "CodeMast.int"         to sFileName
55327>>>        Get Seq_Open_Output_Channel (sDataPath + sFileName) to iCh
55328>>>            Writeln channel iCh ("DRIVER_NAME" * sDriverID)
55331>>>            Writeln channel iCh ("SERVER_NAME DFCONNID=" + sConnectionID)
55334>>>            Writeln channel iCh ("DATABASE_NAME CODEMAST")
55337>>>            Writeln channel iCh ("SCHEMA_NAME" * sSchemaName)
55340>>>            Writeln channel iCh ("")
55343>>>            Writeln channel iCh ("RECNUM_TABLE YES")
55346>>>            Writeln channel iCh ("PRIMARY_INDEX 0")
55349>>>            Writeln channel iCh ("TABLE_CHARACTER_FORMAT" * sANSI_OEM)
55352>>>            Writeln channel iCh ("USE_DUMMY_ZERO_DATE YES")
55355>>>            Writeln channel iCh ("")
55358>>>            Writeln channel iCh ("INDEX_NUMBER 1")
55361>>>            Writeln channel iCh ("INDEX_NAME CODEMAST001_PK")
55364>>>            Writeln channel iCh ("")
55367>>>        Send Seq_Close_Channel iCh
55368>>>
55368>>>        Get vFolderFormat sDataPath to sDataPath
55369>>>        Move "CodeType.int"         to sFileName
55370>>>        Get Seq_Open_Output_Channel (sDataPath + sFileName) to iCh
55371>>>            Writeln channel iCh ("DRIVER_NAME" * sDriverID)
55374>>>            Writeln channel iCh ("SERVER_NAME DFCONNID=" + sConnectionID)
55377>>>            Writeln channel iCh ("DATABASE_NAME CODETYPE")
55380>>>            Writeln channel iCh ("SCHEMA_NAME" * sSchemaName)
55383>>>            Writeln channel iCh ("")
55386>>>            Writeln channel iCh ("RECNUM_TABLE YES")
55389>>>            Writeln channel iCh ("PRIMARY_INDEX 0")
55392>>>            Writeln channel iCh ("TABLE_CHARACTER_FORMAT" * sANSI_OEM)
55395>>>            Writeln channel iCh ("USE_DUMMY_ZERO_DATE YES")
55398>>>            Writeln channel iCh ("")
55401>>>            Writeln channel iCh ("INDEX_NUMBER 0")
55404>>>            Writeln channel iCh ("INDEX_NAME CODETYPE000")
55407>>>            Writeln channel iCh ("")
55410>>>            Writeln channel iCh ("INDEX_NUMBER 1")
55413>>>            Writeln channel iCh ("INDEX_NAME CODETYPE001_PK")
55416>>>            Writeln channel iCh ("")
55419>>>        Send Seq_Close_Channel iCh
55420>>>
55420>>>        Function_Return (Err = False)
55421>>>    End_Function
55422>>>
55422>>>    // * Dummy function for the Studio's Code Explorer *
55422>>>    Function OTHER_UTILITY_FUNCTIONS Returns Boolean
55424>>>        Function_Return False
55425>>>    End_Function
55426>>>
55426>>>    // Use function to move *.fd, termlist.*, collate.*, dfcollate.* files to a "Data\Backup" folder,
55426>>>    // and to remove all *.cch files (DAW SQL driver cache files. They will get recreated when needed.)
55426>>>    Function UtilMoveMiscFilesToBackupFolder Returns Boolean
55428>>>        Boolean bOK bExists
55428>>>        String sDataPath sBackupFolder
55428>>>
55428>>>        Set Message_Text of ghoStatusPanel to "Moving misc. files to Backup folder."
55429>>>        Move CS_DUFBackupDataFolder to sBackupFolder
55430>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
55431>>>        Get vFolderFormat sDataPath to sDataPath
55432>>>
55432>>>        Get vFilePathExists (sDataPath + sBackupFolder) to bExists
55433>>>        If (bExists = False) Begin
55435>>>            Get vCreateDirectory (sDataPath + sBackupFolder) to bOK
55436>>>            Get vFilePathExists (sDataPath + sBackupFolder) to bExists
55437>>>            If (bExists = False) Begin
55439>>>                Error DFERR_PROGRAM ("Could not create the the backup data folder to move all misc. files to. You need to move them somewhere manually.")
55440>>>>
55440>>>                Function_Return False
55441>>>            End
55441>>>>
55441>>>            Get vMoveFile (sDataPath + "*.fd")         (sDataPath + sBackupFolder) to bOK  
55442>>>            Get vMoveFile (sDataPath + "*.bad")        (sDataPath + sBackupFolder) to bOK  
55443>>>            Get vMoveFile (sDataPath + "*.err")        (sDataPath + sBackupFolder) to bOK  
55444>>>            Get vMoveFile (sDataPath + "*.bak")        (sDataPath + sBackupFolder) to bOK
55445>>>            Get vMoveFile (sDataPath + "*.def")        (sDataPath + sBackupFolder) to bOK
55446>>>            Get vMoveFile (sDataPath + "*.fil")        (sDataPath + sBackupFolder) to bOK
55447>>>            Get vMoveFile (sDataPath + "*.hlp")        (sDataPath + sBackupFolder) to bOK
55448>>>            Get vMoveFile (sDataPath + "*.old")        (sDataPath + sBackupFolder) to bOK           
55449>>>            Get vMoveFile (sDataPath + "*.prn")        (sDataPath + sBackupFolder) to bOK           
55450>>>            Get vMoveFile (sDataPath + "*.sts")        (sDataPath + sBackupFolder) to bOK           
55451>>>            Get vMoveFile (sDataPath + "*.td")         (sDataPath + sBackupFolder) to bOK           
55452>>>            Get vMoveFile (sDataPath + "*.log")        (sDataPath + sBackupFolder) to bOK           
55453>>>            Get vMoveFile (sDataPath + "*.bat")        (sDataPath + sBackupFolder) to bOK           
55454>>>            Get vMoveFile (sDataPath + "*.cmd")        (sDataPath + sBackupFolder) to bOK           
55455>>>            Get vMoveFile (sDataPath + "*.zip")        (sDataPath + sBackupFolder) to bOK           
55456>>>            Get vMoveFile (sDataPath + "*.abs")        (sDataPath + sBackupFolder) to bOK           
55457>>>            Get vMoveFile (sDataPath + "termlist.*")   (sDataPath + sBackupFolder) to bOK
55458>>>            Get vMoveFile (sDataPath + "*.dfr")        (sDataPath + sBackupFolder) to bOK
55459>>>            Get vMoveFile (sDataPath + "vsutil.cfg")   (sDataPath + sBackupFolder) to bOK
55460>>>            Get vMoveFile (sDataPath + "collate.*")    (sDataPath + sBackupFolder) to bOK
55461>>>            Get vMoveFile (sDataPath + "df_collate.*") (sDataPath + sBackupFolder) to bOK
55462>>>            Get vDeleteFile (sDataPath + "*.cch")                                  to bOK
55463>>>        End
55463>>>>
55463>>>
55463>>>        Set Message_Text of ghoStatusPanel to ""
55464>>>        Function_Return True
55465>>>    End_Function
55466>>>    
55466>>>    // Check if the file exists in the Data folder,
55466>>>    // else creates it from memory as it has been compiled into the program as a resource:
55466>>>    Function UtilCheckCreateIfFileExists String sFileName String sResourceName Boolean bDataFile Returns Boolean
55468>>>        String sPath
55468>>>        Boolean bExists
55468>>>
55468>>>        Get psDataPathFirstPart to sPath
55469>>>        Move (sPath + sFileName) to sFileName
55470>>>        Get vFilePathExists sFileName to bExists
55471>>>
55471>>>        If (bExists = False) Begin
55473>>>            // Read from memory & create file on disk.
55473>>>            Send SqlUtilCreateFileFromMemory sResourceName sFileName
55474>>>            Get vFilePathExists sFileName to bExists
55475>>>        End
55475>>>>
55475>>>        Function_Return bExists
55476>>>    End_Function
55477>>>
55477>>>    Function UtilSqlColumnTypeToDataFlexType String sDriverID Integer iDbType Integer iDataType Integer iLength Returns Integer
55479>>>        tColumnType RetvalType
55479>>>        tColumnType RetvalType
55479>>>        Integer iRetval
55479>>>
55479>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
55480>>>        Move RetvalType.iDataFlexType to iRetval
55481>>>        If (RetvalType.iDataFlexType = DF_TEXT) Begin
55483>>>            If (iLength <= 255) Begin
55485>>>                Move DF_ASCII to iRetval
55486>>>            End
55486>>>>
55486>>>        End
55486>>>>
55486>>>        Function_Return iRetval
55487>>>    End_Function
55488>>>
55488>>>    Function UtilDataFlexDataTypeToString Integer iDataType Returns String
55490>>>        String sRetval
55490>>>
55490>>>        Case Begin
55490>>>            Case (iDataType = DF_ASCII)
55492>>>                Move "DF_ASCII" to sRetval
55493>>>                Case Break
55494>>>            Case (iDataType = DF_BCD)
55497>>>                Move "DF_BCD" to sRetval
55498>>>                Case Break
55499>>>            Case (iDataType = DF_BINARY)
55502>>>                Move "DF_BINARY" to sRetval
55503>>>                Case Break
55504>>>            Case (iDataType = DF_DATE)
55507>>>                Move "DF_DATE" to sRetval
55508>>>                Case Break
55509>>>            Case (iDataType = DF_DATETIME)
55512>>>                Move "DF_DATETIME" to sRetval
55513>>>                Case Break
55514>>>            Case (iDataType = DF_TEXT)
55517>>>                Move "DF_TEXT" to sRetval
55518>>>                Case Break
55519>>>            Case Else
55519>>>                Move "" to sRetval
55520>>>        Case End
55520>>>
55520>>>        Function_Return sRetval
55521>>>    End_Function
55522>>>
55522>>>    // The default value used for a datatype as specified in the driver int file.
55522>>>    Function UtilDataTypeDefaultValue String sDriverID Integer iDbType Integer iDataType Returns String
55524>>>        String sRetval sServer
55524>>>        tColumnType RetvalType
55524>>>        tColumnType RetvalType
55524>>>        Integer iDriver iDataFlexType
55524>>>        Handle hDatabase
55524>>>
55524>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
55525>>>        Move RetvalType.iDataFlexType to iDataFlexType
55526>>>        Get DriverIndex sDriverID to iDriver
55527>>>        Get psServer to sServer
55528>>>        Get SqlUtilDatabaseHandle sDriverID sServer to hDatabase
55529>>>        If (hDatabase = 0) Begin
55531>>>            Function_Return ""
55532>>>        End
55532>>>>
55532>>>
55532>>>        Case Begin
55532>>>            Case (iDataFlexType = DF_ASCII)
55534>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_ASCII     of iDriver hDatabase to sRetval
55537>>>                Case Break
55538>>>            Case (iDataFlexType = DF_BCD)
55541>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_NUMERIC   of iDriver hDatabase to sRetval
55544>>>                Case Break
55545>>>            Case (iDataFlexType = DF_BINARY)
55548>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_BINARY    of iDriver hDatabase to sRetval
55551>>>                Case Break
55552>>>            Case (iDataFlexType = DF_DATE)
55555>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_DATE      of iDriver hDatabase to sRetval
55558>>>                Case Break
55559>>>            Case (iDataFlexType = DF_DATETIME)
55562>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_DATETIME  of iDriver hDatabase to sRetval
55565>>>                Case Break
55566>>>            Case (iDataFlexType = DF_TEXT)
55569>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_TEXT      of iDriver hDatabase to sRetval
55572>>>                Case Break
55573>>>            Case Else
55573>>>                Move "" to sRetval
55574>>>        Case End
55574>>>
55574>>>        Function_Return sRetval
55575>>>    End_Function
55576>>>
55576>>>    Procedure Set Df_Database_Default_Default_Date_DUF String sDateValue
55578>>>        String sDriverID sServer
55578>>>        tColumnType RetvalType
55578>>>        tColumnType RetvalType
55578>>>        Integer iDbType iDriver
55578>>>        Handle hDatabase
55578>>>
55578>>>        Get psDriverID to sDriverID
55579>>>        Get piDbType   to iDbType
55580>>>        Get DriverIndex sDriverID to iDriver
55581>>>        Get psServer to sServer
55582>>>        Get SqlUtilDatabaseHandle sDriverID sServer to hDatabase
55583>>>        If (hDatabase = 0) Begin
55585>>>            Error DFERR_PROGRAM "Could not change the Default Date Value. Could not get a handle to the database. (Check that at least one connection is 'Enabled')"
55586>>>>
55586>>>            Procedure_Return
55587>>>        End
55587>>>>
55587>>>
55587>>>        Set_Attribute DF_DATABASE_DEFAULT_DEFAULT_DATE of iDriver hDatabase to sDateValue
55590>>>
55590>>>    End_Procedure
55591>>>
55591>>>    Procedure Set Df_Database_Default_Default_Datetime_DUF String sDateValue
55593>>>        String sDriverID sServer
55593>>>        tColumnType RetvalType
55593>>>        tColumnType RetvalType
55593>>>        Integer iDbType iDriver
55593>>>        Handle hDatabase
55593>>>
55593>>>        Get psDriverID to sDriverID
55594>>>        Get piDbType   to iDbType
55595>>>        Get DriverIndex sDriverID to iDriver
55596>>>        Get psServer to sServer
55597>>>        Get SqlUtilDatabaseHandle sDriverID sServer to hDatabase
55598>>>        If (hDatabase = 0) Begin
55600>>>            Error DFERR_PROGRAM "Could not change the Default DateTime Value. Could not get a handle to the database."
55601>>>>
55601>>>            Procedure_Return
55602>>>        End
55602>>>>
55602>>>
55602>>>        Set_Attribute DF_DATABASE_DEFAULT_DEFAULT_DATETIME of iDriver hDatabase to sDateValue
55605>>>
55605>>>    End_Procedure
55606>>>
55606>>>    // Returns a struct array with the default column types for the SQL back-end and how they
55606>>>    // are mapped to the standard DataFlex data types.
55606>>>    // The DataFlex data types are: "ASCII", "BINARY", "DATE", "DATETIME", "NUMERIC" and "TEXT".
55606>>>    Function UtilDefaultSqlTypeMappings String sDriverID Integer iDbType Returns tColumnType[]
55608>>>        tColumnType[] ColumnTypeArray EmptyArray
55608>>>        tColumnType[] ColumnTypeArray EmptyArray
55610>>>        String sDataType
55610>>>        Integer iDataType iDriverID iCount
55610>>>        Boolean bSQLDriver
55610>>>
55610>>>        Move 0 to iCount
55611>>>        Get DriverIndex sDriverID to iDriverID
55612>>>        Get IsSQLDriver sDriverID to bSQLDriver
55613>>>        If (bSQLDriver = False) Begin
55615>>>            Function_Return EmptyArray
55616>>>        End
55616>>>>
55616>>>
55616>>>        // DF_ASCII
55616>>>        If (sDriverID = ODBC_DRV_ID) Begin
55618>>>            Get_Attribute DF_DRIVER_MAP_DFASCII_TO_ODBCTYPE of iDriverID to sDataType
55621>>>        End
55621>>>>
55621>>>        Else Begin
55622>>>            Get_Attribute DF_DRIVER_MAP_DFASCII_TO_SQLTYPE  of iDriverID to sDataType
55625>>>        End
55625>>>>
55625>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
55626>>>        Move DF_ASCII    to ColumnTypeArray[iCount].iDataFlexType
55627>>>        Move "ASCII"     to ColumnTypeArray[iCount].sDataFlexType
55628>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
55629>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
55630>>>        Increment iCount
55631>>>
55631>>>        // DF_BINARY
55631>>>        If (sDriverID = ODBC_DRV_ID) Begin
55633>>>            Get_Attribute DF_DRIVER_MAP_DFBINARY_TO_ODBCTYPE of iDriverID to sDataType
55636>>>        End
55636>>>>
55636>>>        Else Begin
55637>>>            Get_Attribute DF_DRIVER_MAP_DFBINARY_TO_SQLTYPE  of iDriverID to sDataType
55640>>>        End
55640>>>>
55640>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
55641>>>        Move DF_BINARY   to ColumnTypeArray[iCount].iDataFlexType
55642>>>        Move "Binary"    to ColumnTypeArray[iCount].sDataFlexType
55643>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
55644>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
55645>>>        Increment iCount
55646>>>
55646>>>        // DF_DATE
55646>>>        If (sDriverID = ODBC_DRV_ID) Begin
55648>>>            Get_Attribute DF_DRIVER_MAP_DFDATE_TO_ODBCTYPE of iDriverID to sDataType
55651>>>        End
55651>>>>
55651>>>        Else Begin
55652>>>            Get_Attribute DF_DRIVER_MAP_DFDATE_TO_SQLTYPE  of iDriverID to sDataType
55655>>>        End
55655>>>>
55655>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
55656>>>        Move DF_DATE     to ColumnTypeArray[iCount].iDataFlexType
55657>>>        Move "Date"      to ColumnTypeArray[iCount].sDataFlexType
55658>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
55659>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
55660>>>        Increment iCount
55661>>>
55661>>>        // DF_DATETIME
55661>>>        If (sDriverID = ODBC_DRV_ID) Begin
55663>>>            Get_Attribute DF_DRIVER_MAP_DFDATETIME_TO_ODBCTYPE of iDriverID to sDataType
55666>>>        End
55666>>>>
55666>>>        Else Begin
55667>>>            Get_Attribute DF_DRIVER_MAP_DFDATETIME_TO_SQLTYPE  of iDriverID to sDataType
55670>>>        End
55670>>>>
55670>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
55671>>>        Move DF_DATETIME to ColumnTypeArray[iCount].iDataFlexType
55672>>>        Move "DateTime"  to ColumnTypeArray[iCount].sDataFlexType
55673>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
55674>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
55675>>>        Increment iCount
55676>>>
55676>>>        // DF_NUMERIC
55676>>>        // *** Why is there no DF_DRIVER_MAP available for BCD/Numeric??? ***
55676>>>        // DF_BCD can in SQL be either of "SmallInt", "Int", or "Numeric", but
55676>>>        // we make them here all "Numeric"...
55676>>>        Case Begin
55676>>>            Case (sDriverID = MSSQLDRV_ID)
55678>>>                Move SQL_NUMERIC to iDataType
55679>>>                Move "numeric"   to sDataType
55680>>>                Case Break
55681>>>            Case (sDriverID = DB2_DRV_ID)
55684>>>                Move SQL_NUMERIC to iDataType
55685>>>                Move "NUMERIC"   to sDataType
55686>>>                Case Break
55687>>>            Case (sDriverID = SQLFLEX)
55690>>>                Move eSQLServer_NUMERIC to iDataType
55691>>>                Move "numeric"   to sDataType
55692>>>                Case Break
55693>>>            Case (sDriverID = MDSMySQL)
55696>>>                Move eMySQL_DECIMAL to iDataType
55697>>>                Move "decimal"   to sDataType
55698>>>                Case Break
55699>>>            Case (sDriverID = ORAFLEX)
55702>>>                Move eOracle_NUMBER to iDataType
55703>>>                Move "NUMBER"   to sDataType
55704>>>                Case Break
55705>>>            Case (sDriverID = MDSPgSQL)
55708>>>                Move ePgSQL_FLOAT4 to iDataType
55709>>>                Move "decimal"   to sDataType
55710>>>                Case Break
55711>>>            Case Else
55711>>>                Move DF_BCD      to iDataType
55712>>>                Move "Numeric"   to sDataType
55713>>>        Case End
55713>>>        Move DF_BCD      to ColumnTypeArray[iCount].iDataFlexType
55714>>>        Move "Numeric"   to ColumnTypeArray[iCount].sDataFlexType
55715>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
55716>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
55717>>>        Increment iCount
55718>>>
55718>>>        // DF_TEXT
55718>>>        If (sDriverID = ODBC_DRV_ID) Begin
55720>>>            Get_Attribute DF_DRIVER_MAP_DFTEXT_TO_ODBCTYPE of iDriverID to sDataType
55723>>>        End
55723>>>>
55723>>>        Else Begin
55724>>>            Get_Attribute DF_DRIVER_MAP_DFTEXT_TO_SQLTYPE  of iDriverID to sDataType
55727>>>        End
55727>>>>
55727>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
55728>>>        Move DF_TEXT     to ColumnTypeArray[iCount].iDataFlexType
55729>>>        Move "Text"      to ColumnTypeArray[iCount].sDataFlexType
55730>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
55731>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
55732>>>
55732>>>        Function_Return ColumnTypeArray
55733>>>    End_Function
55734>>>
55734>>>    Function UtilDFDataTypeToSqlTypeMapping String sDriverID Integer iDbType Integer iType Returns tColumnType
55736>>>        tColumnType[] ColumnTypeArray
55736>>>        tColumnType[] ColumnTypeArray
55737>>>        tColumnType   ColumnType
55737>>>        tColumnType   ColumnType
55737>>>        Integer iCount iSize
55737>>>
55737>>>        Get UtilDefaultSqlTypeMappings sDriverID iDbType iType to ColumnTypeArray
55738>>>        Move (SizeOfArray(ColumnTypeArray)) to iSize
55739>>>        Decrement iSize
55740>>>
55740>>>        for iCount from 0 to iSize
55746>>>>
55746>>>            If (iType = ColumnTypeArray[iCount].iDataFlexType) Begin
55748>>>                Move ColumnTypeArray[iCount].bCanEditSize   to ColumnType.bCanEditSize
55749>>>                Move ColumnTypeArray[iCount].iDataFlexType  to ColumnType.iDataFlexType
55750>>>                Move ColumnTypeArray[iCount].iSQLType       to ColumnType.iSQLType
55751>>>                Move ColumnTypeArray[iCount].sDataFlexType  to ColumnType.sDataFlexType
55752>>>                Move ColumnTypeArray[iCount].sPrecision     to ColumnType.sPrecision
55753>>>                Move ColumnTypeArray[iCount].sSQLType       to ColumnType.sSQLType
55754>>>                Move iSize to iCount
55755>>>            End
55755>>>>
55755>>>        Loop
55756>>>>
55756>>>
55756>>>        Function_Return ColumnType
55757>>>    End_Function
55758>>>
55758>>>    // Returns a struct with the default column types for the SQL back-end and how they
55758>>>    // are mapped to a DUF data type.
55758>>>    Function UtilDUFDataTypeToSqlTypeMapping String sDriverID Integer iDbType Integer iType Returns tColumnType
55760>>>        tColumnType ColumnType
55760>>>        tColumnType ColumnType
55760>>>        String sDataType
55760>>>        Integer iDriverID iCount
55760>>>
55760>>>        Move 0 to iCount
55761>>>        Get DriverIndex sDriverID to iDriverID
55762>>>
55762>>>        Case Begin
55762>>>            // DF_ASCII
55762>>>            Case (iType = DF_ASCII_DUF)
55764>>>                If (sDriverID = ODBC_DRV_ID) Begin
55766>>>                    Get_Attribute DF_DRIVER_MAP_DFASCII_TO_ODBCTYPE of iDriverID to sDataType
55769>>>                End
55769>>>>
55769>>>                Else Begin
55770>>>                    Get_Attribute DF_DRIVER_MAP_DFASCII_TO_SQLTYPE  of iDriverID to sDataType
55773>>>                End
55773>>>>
55773>>>                Move DF_ASCII    to ColumnType.iDataFlexType
55774>>>                Move "ASCII"     to ColumnType.sDataFlexType
55775>>>                Move sDataType   to ColumnType.sSQLType
55776>>>                Move DF_ASCII    to ColumnType.iSQLType
55777>>>                Move False       to ColumnType.bCanEditSize
55778>>>                Case Break
55779>>>
55779>>>            // DF_BINARY
55779>>>            Case (iType = DF_BINARY_DUF)
55782>>>                If (sDriverID = ODBC_DRV_ID) Begin
55784>>>                    Get_Attribute DF_DRIVER_MAP_DFBINARY_TO_ODBCTYPE of iDriverID to sDataType
55787>>>                End
55787>>>>
55787>>>                Else Begin
55788>>>                    Get_Attribute DF_DRIVER_MAP_DFBINARY_TO_SQLTYPE  of iDriverID to sDataType
55791>>>                End
55791>>>>
55791>>>                Move DF_BINARY   to ColumnType.iDataFlexType
55792>>>                Move "Binary"    to ColumnType.sDataFlexType
55793>>>                Move sDataType   to ColumnType.sSQLType
55794>>>                Move DF_BINARY   to ColumnType.iSQLType
55795>>>                Move False       to ColumnType.bCanEditSize
55796>>>                Case Break
55797>>>
55797>>>            // DF_DATE
55797>>>            Case (iType = DF_DATE_DUF)
55800>>>                If (sDriverID = ODBC_DRV_ID) Begin
55802>>>                    Get_Attribute DF_DRIVER_MAP_DFDATE_TO_ODBCTYPE of iDriverID to sDataType
55805>>>                End
55805>>>>
55805>>>                Else Begin
55806>>>                    Get_Attribute DF_DRIVER_MAP_DFDATE_TO_SQLTYPE  of iDriverID to sDataType
55809>>>                End
55809>>>>
55809>>>                Move DF_DATE     to ColumnType.iDataFlexType
55810>>>                Move "Date"      to ColumnType.sDataFlexType
55811>>>                Move sDataType   to ColumnType.sSQLType
55812>>>                Move DF_DATE     to ColumnType.iSQLType
55813>>>                Move True        to ColumnType.bCanEditSize
55814>>>                Case Break
55815>>>
55815>>>            // DF_DATETIME
55815>>>            Case (iType = DF_DATETIME_DUF)
55818>>>                If (sDriverID = ODBC_DRV_ID) Begin
55820>>>                    Get_Attribute DF_DRIVER_MAP_DFDATETIME_TO_ODBCTYPE of iDriverID to sDataType
55823>>>                End
55823>>>>
55823>>>                Else Begin
55824>>>                    Get_Attribute DF_DRIVER_MAP_DFDATETIME_TO_SQLTYPE  of iDriverID to sDataType
55827>>>                End
55827>>>>
55827>>>                Move DF_DATETIME to ColumnType.iDataFlexType
55828>>>                Move "DateTime"  to ColumnType.sDataFlexType
55829>>>                Move sDataType   to ColumnType.sSQLType
55830>>>                Move DF_DATETIME to ColumnType.iSQLType
55831>>>                Move True        to ColumnType.bCanEditSize
55832>>>                Case Break
55833>>>
55833>>>            // DF_NUMERIC
55833>>>            // *** Why is there no DF_DRIVER_MAP available for BCD/Numeric??? ***
55833>>>            // DF_BCD can in SQL be either of "SmallInt", "Int", or "Numeric", but
55833>>>            // we make them here all "Numeric"...
55833>>>            // If (sDriverID = ODBC_DRV_ID) Begin
55833>>>            //     Get_Attribute DF_DRIVER_MAP_DFDATE_TO_ODBCTYPE of iDriverID to sDataType
55833>>>            // End
55833>>>            // Else Begin
55833>>>            //     Get_Attribute DF_DRIVER_MAP_DFDATE_TO_SQLTYPE  of iDriverID to sDataType
55833>>>            // End
55833>>>            // ToDo: How should we find the best "Numeric" data type here?
55833>>>            Case (iType = DF_BCD_DUF)
55836>>>                Move DF_BCD      to ColumnType.iDataFlexType
55837>>>                Move "Numeric"   to ColumnType.sDataFlexType
55838>>>                Move "Numeric"   to ColumnType.sSQLType
55839>>>                Move SQL_NUMERIC to ColumnType.iSQLType
55840>>>                Move False       to ColumnType.bCanEditSize
55841>>>                Case Break
55842>>>
55842>>>            // DF_TEXT
55842>>>            Case (iType = DF_TEXT_DUF)
55845>>>                If (sDriverID = ODBC_DRV_ID) Begin
55847>>>                    Get_Attribute DF_DRIVER_MAP_DFTEXT_TO_ODBCTYPE of iDriverID to sDataType
55850>>>                End
55850>>>>
55850>>>                Else Begin
55851>>>                    Get_Attribute DF_DRIVER_MAP_DFTEXT_TO_SQLTYPE  of iDriverID to sDataType
55854>>>                End
55854>>>>
55854>>>                Move DF_TEXT     to ColumnType.iDataFlexType
55855>>>                Move "Text"      to ColumnType.sDataFlexType
55856>>>                Move sDataType   to ColumnType.sSQLType
55857>>>                Move DF_TEXT     to ColumnType.iSQLType
55858>>>                Move False       to ColumnType.bCanEditSize
55859>>>                Case Break
55860>>>
55860>>>            Case Else
55860>>>                Move -1999       to ColumnType.iDataFlexType
55861>>>                Move "Undefined" to ColumnType.sDataFlexType
55862>>>                Move "Undefined" to ColumnType.sSQLType
55863>>>                Move -1999       to ColumnType.iSQLType
55864>>>                Move True        to ColumnType.bCanEditSize
55865>>>
55865>>>        Case End
55865>>>
55865>>>        Function_Return ColumnType
55866>>>    End_Function
55867>>>
55867>>>    Function UtilDeleteCacheFile String sTableName Returns Boolean
55869>>>        String sDataPath sDriverID
55869>>>        Boolean bMertechDriver bOK
55869>>>        Integer iPos
55869>>>
55869>>>        If (sTableName contains ".") Begin
55871>>>            Move (Pos(".", sTableName)) to iPos
55872>>>            Move (Mid(sTableName, 999, (iPos +1))) to sTableName
55873>>>        End
55873>>>>
55873>>>
55873>>>        Get psDriverID to sDriverID
55874>>>        Get psDataPathFirstPart to sDataPath
55875>>>        Get IsMertechDriver sDriverID to bMertechDriver
55876>>>        // First delete the cache file:
55876>>>        If (bMertechDriver = False) Begin
55878>>>            Get vDeleteFile (sDataPath + sTableName + ".cch") to bOK
55879>>>        End
55879>>>>
55879>>>        Else Begin
55880>>>            Get _MertechDeleteTDFile sTableName to bOK
55881>>>        End
55881>>>>
55881>>>
55881>>>        Function_Return bOK
55882>>>    End_Function
55883>>>
55883>>>    // Changes source code files.
55883>>>    // Pass a file name with full path and a value to search for, together with the value
55883>>>    // to change to. Can e.g. be used for changing all .int files from using a fixed server name,
55883>>>    // to use a Connection ID.
55883>>>    // Sample: Get UtilChangeSourceCodeLine "C:\DataFlex 18.2 Examples\Order Entry\Data\Order.int" "SERVER_NAME SERVER=(local)\SQLEXPRESS1" "SERVER_NAME DFCONNID=ChinookDb"
55883>>>    // Pass "True" for the bShowResult if you want to see the result while it works. Showln will then be used for output
55883>>>    // Returns True if no errors occured.
55883>>>    Function UtilChangeSourceCodeLine String sFileName String sChangeFrom String sChangeTo Boolean bShowResult Returns Boolean
55885>>>        Integer iCh iRow iItems iCount
55885>>>        String sValue sRow
55885>>>        String[] sFileArray
55886>>>        Boolean bExists bIsActive
55886>>>
55886>>>        Move False to Err
55887>>>        Move 0 to iRow
55888>>>
55888>>>        If (ghoStatusPanel <> 0) Begin
55890>>>            Get Active_state of ghoStatusPanel to bIsActive
55891>>>        End
55891>>>>
55891>>>
55891>>>        Get vFilePathExists sFileName to bExists
55892>>>        If (bExists = False) Begin
55894>>>            If (bShowResult = True) Begin
55896>>>                If (bIsActive = True) Begin
55898>>>                    Send Update_StatusPanel of ghoStatusPanel ("File does not exist:" * String(sFileName))
55899>>>                End
55899>>>>
55899>>>                Else Begin
55900>>>                    Showln "File does not exist: " sFileName
55903>>>                End
55903>>>>
55903>>>            End
55903>>>>
55903>>>            Function_Return False
55904>>>        End
55904>>>>
55904>>>
55904>>>        Get Seq_Open_Input_Channel sFileName to iCh
55905>>>        If (iCh < 1) Begin
55907>>>            Function_Return False
55908>>>        End
55908>>>>
55908>>>
55908>>>        If (bShowResult = True) Begin
55910>>>            If (ghoStatusPanel <> 0) Begin
55912>>>                Get Active_state of ghoStatusPanel to bIsActive
55913>>>                If (bIsActive = True) Begin
55915>>>                    Set Message_Text of ghoStatusPanel to sFileName
55916>>>                    Send Update_StatusPanel of ghoStatusPanel ("sChangeFrom =" * String(sChangeFrom) * "sChangeTo =" * String(sChangeTo))
55917>>>                    Send DoAdvance of ghoProgressBar
55918>>>                End
55918>>>>
55918>>>            End
55918>>>>
55918>>>            Else Begin
55919>>>                Showln ""
55921>>>                Showln "sFileName = " sFileName
55924>>>                Showln "sChangeFrom = " sChangeFrom " sChangeTo = " sChangeTo
55929>>>            End
55929>>>>
55929>>>        End
55929>>>>
55929>>>
55929>>>        While (not(SeqEof))
55933>>>            Readln channel iCh sRow
55935>>>            If (Uppercase(sRow) contains Uppercase(sChangeFrom)) Begin
55937>>>//                If (bShowResult = True) Begin
55937>>>//                    If (bIsActive = True) Begin
55937>>>//                        Send Update_StatusPanel of ghoStatusPanel ("Changed from:" * String(sRow) * "to:" * String(sChangeTo))
55937>>>//                    End
55937>>>//                    Else Begin
55937>>>//                        Showln "Changed from: " sRow " to: " sChangeTo
55937>>>//                    End
55937>>>//                End
55937>>>                // Change the whole line to the new connection id:
55937>>>                Move sChangeTo to sRow
55938>>>                // Move (Replaces(sChangeFrom, sRow, sChangeTo)) to sValue
55938>>>            End
55938>>>>
55938>>>            Move sRow to sFileArray[iRow]
55939>>>            Increment iRow
55940>>>        Loop
55941>>>>
55941>>>        Send Seq_Close_Channel iCh
55942>>>
55942>>>        Sleep 1 // Wait for Windows to close the file
55943>>>
55943>>>        Get Seq_Open_Output_Channel sFileName to iCh
55944>>>        If (iCh < 1) Begin
55946>>>            Function_Return False
55947>>>        End
55947>>>>
55947>>>        Move (SizeOfArray(sFileArray)) to iItems
55948>>>        Decrement iItems
55949>>>
55949>>>        For iCount from 0 to iItems
55955>>>>
55955>>>            Move sFileArray[iCount] to sValue
55956>>>            Writeln channel iCh sValue
55959>>>        Loop
55960>>>>
55960>>>        Send Seq_Close_Channel iCh
55961>>>
55961>>>        Function_Return (Err = False)
55962>>>    End_Function
55963>>>
55963>>>    Function AutoSetConnectionID String sConnectionID Returns Boolean
55965>>>        Integer iRetval
55965>>>        Move 1 to iRetval
55966>>>        If (ghoSQLConnectionHandler <> 0) Begin
55968>>>            Set psConnectionID of ghoSQLConnectionHandler to sConnectionID
55969>>>            Get AutoSetConnectionID of ghoSQLConnectionHandler to iRetval
55970>>>        End
55970>>>>
55970>>>        Function_Return (iRetval = 0)
55971>>>    End_Function
55972>>>
55972>>>    // *** DEPRECIATED ***
55972>>>    // Use the AutoSetConnectionID function instead.
55972>>>    // This might be needed by API-methods when a connection id is to be used and
55972>>>    // the connection ID hasn't been established with the driver's CLI interface.
55972>>>    // NOTE: Only applicable for DAW drivers, as Mertech drivers doesn't use connection ID's.
55972>>>//    Function UtilCreateConnectionID String sConnectionID Returns Boolean
55972>>>//        String sConnectionString sDriverID
55972>>>//        Boolean bOK bSilent bDawDriver
55972>>>//        Handle hoCLI
55972>>>//
55972>>>//        Move False to bOK
55972>>>//        Get psDriverID to sDriverID
55972>>>//        Get IsDAWSQLDriver sDriverID to bDawDriver
55972>>>//        If (bDawDriver = False) Begin
55972>>>//            Error DFERR_PROGRAM "The UtilCreateConnectionID function is only available for DAW drivers. (Not Mertech)."
55972>>>//            Function_Return False
55972>>>//        End
55972>>>//
55972>>>//        Get psConnectionString to sConnectionString
55972>>>//        Get pbSilentLogin      to bSilent
55972>>>//
55972>>>//        Get phoCLIHandler to hoCLI
55972>>>//        If (hoCLI <> 0) Begin
55972>>>//            Set psDriverID of hoCLI to sDriverID
55972>>>//            Get CreateConnectionID of hoCLI sConnectionID sConnectionString bSilent to bOK
55972>>>//        End
55972>>>//
55972>>>//        Function_Return (bOK = False)
55972>>>//    End_Function
55972>>>
55972>>>    // This message creates an error log in the "Home" folder named "SQLErrorLog.txt",
55972>>>    // and opens it in "notepad.exe".
55972>>>    // Note: This is _not_ used by the cDbUpdateHandler & cDbUpdateVersion classes!
55972>>>    //       Instead the cDbUpdateLogFile's WriteErrorLog & ShowErrorLog are used.
55972>>>    Procedure UtilShowErrorList
55974>>>        tSqlErrorArray aSqlErrorArray
55974>>>        tSqlErrorArray aSqlErrorArray
55974>>>        Integer iRows iCount iCh iErrorNum
55974>>>        String sPath sFileName sErrorTxt sStatement
55974>>>
55974>>>        Get psHome of (phoWorkspace(ghoApplication)) to sPath
55975>>>        Get vFolderFormat sPath to sPath
55976>>>        Move "SQLErrorLog.txt"  to sFileName
55977>>>        Get Seq_Open_Output_Channel (sPath + sFileName) to iCh
55978>>>            Get paSqlErrorArray to aSqlErrorArray
55979>>>            Move (SizeOfArray(aSqlErrorArray.sSqlErrorArray)) to iRows
55980>>>            If (iRows > 0) Begin
55982>>>                Decrement iRows
55983>>>                for iCount from 0 to iRows
55989>>>>
55989>>>                    Move aSqlErrorArray.sSqlErrorArray[iCount]      to sErrorTxt
55990>>>                    Move aSqlErrorArray.sSqlStatementArray[iCount]  to sStatement
55991>>>                    Move aSqlErrorArray.iSqlErrorArray[iCount]      to iErrorNum
55992>>>                    Writeln channel iCh "Error No: " iErrorNum " Error Text: " sErrorTxt
55998>>>                    Writeln channel iCh "SQL Statement: " sStatement
56002>>>                Loop
56003>>>>
56003>>>            End
56003>>>>
56003>>>        Send Seq_Close_Channel iCh
56004>>>
56004>>>        If (iRows > 0) Begin
56006>>>            Runprogram Shell Background (sPath + sFileName)
56007>>>        End
56007>>>>
56007>>>    End_Procedure
56008>>>
56008>>>    // For this to be returning a True value, the table number needs to be in the Filelist.cfg,
56008>>>    // and the table needs to exist as an SQL table.
56008>>>    Function UtilTableIsSql Handle hTable Returns Boolean
56010>>>        String sRootName sDriverID
56010>>>        Boolean bIsSQL
56010>>>
56010>>>        Move False to bIsSQL
56011>>>        If (hTable > 0) Begin
56013>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
56016>>>            Get UtilTableIsSqlByRootName sRootName to bIsSQL
56017>>>            If (bIsSQL = True) Begin
56019>>>                Get psDriverID to sDriverID
56020>>>                Get _TableNameOnly sRootName to sRootName
56021>>>                Get SqlUtilCheckIfTableNameExists sRootName sDriverID to bIsSQL
56022>>>            End
56022>>>>
56022>>>        End
56022>>>>
56022>>>
56022>>>        Function_Return bIsSQL
56023>>>    End_Function
56024>>>
56024>>>    Function UtilTableIsSqlByRootName String sRootName Returns Boolean
56026>>>        Boolean bIsSQL
56026>>>        Move (sRootName contains ":") to bIsSQL
56027>>>        Function_Return bIsSQL
56028>>>    End_Function
56029>>>
56029>>>    // Checks that the passed hTable number both exists in Filelist.cfg and
56029>>>    // that the embedded .dat file exists on disk.
56029>>>    Function UtilTableIsEmbedded Handle hTable Returns Boolean
56031>>>        Boolean bExists bIsEmbedded
56031>>>        String sDataPath sRootName
56031>>>
56031>>>        Get UtilTableNumberIsInUse hTable to bExists
56032>>>        If (bExists = False) Begin
56034>>>            Function_Return False
56035>>>        End
56035>>>>
56035>>>
56035>>>        Move False to bIsEmbedded
56036>>>        If (hTable > 0) Begin
56038>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
56041>>>            Move (not(sRootName contains ":")) to bIsEmbedded
56042>>>        End
56042>>>>
56042>>>        If (bIsEmbedded = True) Begin
56044>>>            Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
56045>>>            Get vFolderFormat sDataPath to sDataPath
56046>>>            Get vFilePathExists (sDataPath + sRootName + ".dat") to bIsEmbedded
56047>>>        End
56047>>>>
56047>>>
56047>>>        Function_Return bIsEmbedded
56048>>>    End_Function
56049>>>
56049>>>
56049>>>    // Returns True if the passed hTable (filelist slot number) is an Alias table.
56049>>>    // An Alias file/table is a filelist number that share the same Physical filename
56049>>>    // but the Logical name is different.
56049>>>    // Note: If the table cannot be opened; the table is not considered to be an Alias.
56049>>>    Function UtilTableIsAlias Handle hTable Returns Boolean
56051>>>        String sRootName sRootNameCompare sLogicalName sLogicalNameCompare
56051>>>        Handle hInTable hMasterTable 
56051>>>        Boolean bIsAlias
56051>>>        
56051>>>        Move hTable to hInTable
56052>>>        Move False to bIsAlias
56053>>>        Move 0 to hMasterTable
56054>>>        
56054>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
56057>>>        // Remove any prefix with a driver name.
56057>>>        Get _TableNameOnly sRootName to sRootName     
56058>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
56061>>>        Get _TableNameOnly sLogicalName to sLogicalName     
56062>>>        
56062>>>        // If the table has the same root and logical name it can't be an alias,
56062>>>        // so we can safely return a "False".
56062>>>        If (Uppercase(sRootName) = Uppercase(sLogicalName)) Begin
56064>>>            Function_Return False
56065>>>        End
56065>>>>
56065>>>        
56065>>>        // Now we need to find a master table with the same root name (sRootName above),
56065>>>        // as the passed hTable root name.
56065>>>        // A master table always has the same root and logical name.
56065>>>        Move 0 to hTable
56066>>>        Repeat
56066>>>>
56066>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
56069>>>            If (hTable > 0 and hTable <> 50) Begin
56071>>>                Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootNameCompare
56074>>>                Get _TableNameOnly sRootNameCompare to sRootNameCompare
56075>>>                // If we found another table with the same root and logical name
56075>>>                // we have found a master table.
56075>>>                If (Uppercase(sRootName) = Uppercase(sRootNameCompare)) Begin
56077>>>                    Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalNameCompare
56080>>>                    Get _TableNameOnly sLogicalNameCompare to sLogicalNameCompare     
56081>>>                    If (Uppercase(sRootNameCompare) = Uppercase(sLogicalNameCompare)) Begin
56083>>>                        Move hTable to hMasterTable   
56084>>>                        Move 0 to hTable // To end the loop.
56085>>>                    End
56085>>>>
56085>>>                End
56085>>>>
56085>>>            End
56085>>>>
56085>>>        Until (hTable = 0)
56087>>>        
56087>>>        If (hMasterTable <> 0 and hMasterTable <> hInTable) Begin
56089>>>            Move True to bIsAlias
56090>>>        End
56090>>>>
56090>>>        
56090>>>        Function_Return bIsAlias
56091>>>    End_Function
56092>>>
56092>>>    // To Open a table with any driver.
56092>>>    // Note: If the driver is <> DATAFLEX_ID  - login credentials are used; it is then assumed
56092>>>    //       that the proper login properties has been setup properly with the cSQLConnections object.
56092>>>    //
56092>>>    // If the open command fails the Err flag will be reset to false, at the end of the function!
56092>>>    // The found flag is still used to indicate if the open was successful or not. The function
56092>>>    // returns a True if successful (table could be opened).
56092>>>    //
56092>>>    // Using the "Open As" syntax with drivers means that we don't need to rely on .int file settings.
56092>>>    // This is good because with DFConnectionID's those credentials doesn't need to be available in
56092>>>    // the .int file (and probably aren't). As long as the login properties of this object have been
56092>>>    // set properly we can open the table.
56092>>>    //
56092>>>    // DAW Driver Syntax:
56092>>>    //  <CKId>:<Schema>#<Table>@<ConnectString>|<Filename>.int
56092>>>    //  Now the @<ConnectString> can be followed by a pipe character '|' followed by the name of the INT file.
56092>>>    //  Doing so, the driver will apply the information from the .INT file to the passed direct Open String.
56092>>>    //  Note that when an INT file has been passed, it will skip the keyword DRIVER_NAME, SERVER_NAME,
56092>>>    //  DATABASE_NAME and SCHEMA_NAME from the INT file because those are supposed to be supplied in the String already.
56092>>>    //  Open mode; iMode = DF_SHARE or DF_EXCLUSIVE.
56092>>>    //
56092>>>    // DAW Driver Sample:
56092>>>    //   Open "MSSQLDRV:dbo#MyFile@SERVER=(local)\SQLEXPRESS;Trusted_Connection=yes;DATABASE=OrderEntry|options|intfile=MyFile.int"
56092>>>    //
56092>>>    // Mertech Driver Samples:
56092>>>    //   SQLFlex:   Open "sql_drv:\\<serverName>\<database>*<owner>*<tableName>=<numberFieds>" as table
56092>>>    //   MySQLFlex: Open "mdsmysql:\\<serverName>\<database>*<tableName>=<numberFieds>" as table
56092>>>    //   PgFlex:    Open "mdspgsql:\\<serverName>\<database>*<schema>*<tableName>=<numberFieds>" as table
56092>>>    //   ORAFlex:   Open "ora_drv:\\<serverName>\<owner>*<tableName>=<numberFieds>" as table
56092>>>    Function UtilTableOpen Integer hTable String sTableName Integer iMode Returns Boolean
56094>>>        String sTableNameOrg
56094>>>        Boolean bOpen bOK
56094>>>        tSQLConnection SQLConnection
56094>>>        tSQLConnection SQLConnection
56094>>>        
56094>>>        Move False to bOpen
56095>>>        Move sTableName to sTableNameOrg
56096>>>        If (hTable > 0) Begin
56098>>>            Send Ignore_Error of Error_Object_Id 20529
56099>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
56100>>>            Send Ignore_Error of Error_Object_Id CLIERR_CONNECTIONIDNOTFOUND
56101>>>            Send Ignore_Error of Error_Object_Id 10
56102>>>            Open hTable Mode iMode
56104>>>            Send Trap_Error of Error_Object_Id 20529
56105>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
56106>>>            Send Trap_Error of Error_Object_Id CLIERR_CONNECTIONIDNOTFOUND
56107>>>            Send Trap_Error of Error_Object_Id 10
56108>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
56111>>>            If (bOpen = True) Begin
56113>>>                Function_Return True
56114>>>            End
56114>>>>
56114>>>        End
56114>>>>
56114>>>
56114>>>        Get UtilTableOpenAsIntFile hTable sTableName iMode to bOK 
56115>>>        If (hTable > 0) Begin
56117>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
56120>>>        End
56120>>>>
56120>>>
56120>>>        Function_Return bOpen
56121>>>    End_Function
56122>>>
56122>>>    Function UtilTableOpenAsIntFile Integer hTable String sTableName Integer iMode Returns Boolean
56124>>>        String sDriverID sConnection sSchema sExt sTableNameShort sTableNameOrg
56124>>>        Boolean bOpen bMertechDriver bOK
56124>>>        tSQLConnection SQLConnection
56124>>>        tSQLConnection SQLConnection
56124>>>
56124>>>        If (hTable < 1) Begin
56126>>>            Function_Return False
56127>>>        End
56127>>>>
56127>>>
56127>>>        Move sTableName to sTableNameOrg
56128>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
56129>>>        Move SQLConnection.sDriverID to sDriverID
56130>>>        Get IsMertechDriver sDriverID to bMertechDriver
56131>>>        Move SQLConnection.sConnectionString to sConnection
56132>>>        Move SQLConnection.sSchema to sSchema
56133>>>        If (sSchema = "") Begin
56135>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
56136>>>        End
56136>>>>
56136>>>
56136>>>        // We need to remove the ".int" part of the table name because
56136>>>        // the table name after the "#" in the connection syntax below wants the
56136>>>        // "bare" table name without any extension.
56136>>>        If (sDriverID <> DATAFLEX_ID) Begin
56138>>>            If (Lowercase(sTableName) contains ".int") Begin
56140>>>                Get ParseFileExtension sTableName to sExt
56141>>>                Move (Replace(("." + sExt), sTableName, "")) to sTableNameShort
56142>>>            End
56142>>>>
56142>>>            Else Begin
56143>>>                Move sTableName to sTableNameShort
56144>>>                Move (Append(sTableName, ".int")) to sTableName
56145>>>            End
56145>>>>
56145>>>            If (bMertechDriver = False) Begin
56147>>>                Move (sDriverID + ":" + sSchema + "#" + sTableNameShort + "@" + sConnection + "|options|intfile=" + sTableName) to sConnection
56148>>>                Move sConnection to sTableName
56149>>>            End
56149>>>>
56149>>>        End
56149>>>>
56149>>>
56149>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
56150>>>        Send Ignore_Error of Error_Info_Object DFERR_FILE_ACCESS_VIOLATION
56151>>>        If (hTable = 0) Begin
56153>>>            Get NextFreeFilelistSlot to hTable
56154>>>        End
56154>>>>
56154>>>
56154>>>        Case Begin
56154>>>            Case (sDriverID = MSSQLDRV_ID)
56156>>>                // If not df_exclusive mode, we use the "Open As" syntax.
56156>>>                If (iMode <> DF_EXCLUSIVE) Begin
56158>>>                    Close hTable
56159>>>                    Open sTableName as hTable
56161>>>                End
56161>>>>
56161>>>                Else Begin
56162>>>                    Get OpenTableExclusive hTable to bOK
56163>>>                    If (bOK = False) Begin
56165>>>                        Function_Return False
56166>>>                    End
56166>>>>
56166>>>                End
56166>>>>
56166>>>                Case Break
56167>>>
56167>>>            Case (sDriverID = DB2_DRV_ID)
56170>>>                // If not df_exclusive mode, we use the "Open As" syntax.
56170>>>                If (iMode <> DF_EXCLUSIVE) Begin
56172>>>                    Close hTable
56173>>>                    Open sTableName as hTable
56175>>>                End
56175>>>>
56175>>>                Else Begin
56176>>>                    Get OpenTableExclusive hTable to bOK
56177>>>                    If (bOK = False) Begin
56179>>>                        Function_Return False
56180>>>                    End
56180>>>>
56180>>>                End
56180>>>>
56180>>>                Case Break
56181>>>
56181>>>            Case (sDriverID = ODBC_DRV_ID)
56184>>>                // If not df_exclusive mode, we use the "Open As" syntax.
56184>>>                If (iMode = DF_SHARE) Begin
56186>>>                    Close hTable
56187>>>                    Open sTableName as hTable
56189>>>                End
56189>>>>
56189>>>                Else Begin
56190>>>                    Get OpenTableExclusive hTable to bOK
56191>>>                    If (bOK = False) Begin
56193>>>                        Function_Return False
56194>>>                    End
56194>>>>
56194>>>                End
56194>>>>
56194>>>                Case Break
56195>>>
56195>>>            Case (sDriverID = SQLFLEX)
56198>>>                // ToDo: What is the <owner>? Same as Schema?
56198>>>                // SQLFlex:   Open "sql_drv:\\<serverName>\<database>*<owner>*<tableName>=<numberFieds>" as table
56198>>>                Move (SQLFLEX + ":\\" + SQLConnection.sServer + "\" + SQLConnection.sDatabase + SQLConnection.sSchema + "*" + sTableNameOrg) to sTableName
56199>>>                // If not df_exclusive mode, we use the "Open As" syntax.
56199>>>                If (iMode <> DF_EXCLUSIVE) Begin
56201>>>                    Close hTable
56202>>>                    Open sTableName as hTable
56204>>>                End
56204>>>>
56204>>>                Else Begin
56205>>>                    Get OpenTableExclusive hTable to bOK
56206>>>                    If (bOK = False) Begin
56208>>>                        Function_Return False
56209>>>                    End
56209>>>>
56209>>>                End
56209>>>>
56209>>>                Case Break
56210>>>
56210>>>            Case (sDriverID = MDSMySQL)
56213>>>                // MySQLFlex: Open "mdsmysql:\\<serverName>\<database>*<tableName>=<numberFieds>" as table
56213>>>                Move (MDSMySQL + ":\\" + SQLConnection.sServer + "\" + SQLConnection.sDatabase + "*" + sTableNameOrg) to sTableName
56214>>>                // If not df_exclusive mode, we use the "Open As" syntax.
56214>>>                If (iMode <> DF_EXCLUSIVE) Begin
56216>>>                    Close hTable
56217>>>                    Open sTableName as hTable
56219>>>                End
56219>>>>
56219>>>                Else Begin
56220>>>                    Get OpenTableExclusive hTable to bOK
56221>>>                    If (bOK = False) Begin
56223>>>                        Function_Return False
56224>>>                    End
56224>>>>
56224>>>                End
56224>>>>
56224>>>                Case Break
56225>>>
56225>>>            Case (sDriverID = MDSPgSQL)
56228>>>                // PgFlex: Open "mdspgsql:\\<serverName>\<database>*<schema>*<tableName>=<numberFieds>" as table
56228>>>                Move (MDSPgSQL + ":\\" + SQLConnection.sServer + "\" + SQLConnection.sDatabase + "*" + SQLConnection.sSchema + "*" + sTableNameOrg) to sTableName
56229>>>                // If not df_exclusive mode, we use the "Open As" syntax.
56229>>>                If (iMode <> DF_EXCLUSIVE) Begin
56231>>>                    Close hTable
56232>>>                    Open sTableName as hTable
56234>>>                End
56234>>>>
56234>>>                Else Begin
56235>>>                    Get OpenTableExclusive hTable to bOK
56236>>>                    If (bOK = False) Begin
56238>>>                        Function_Return False
56239>>>                    End
56239>>>>
56239>>>                End
56239>>>>
56239>>>                Case Break
56240>>>
56240>>>            Case (sDriverID = ORAFLEX)
56243>>>                // ToDo: What is the <owner>? Same as Schema?
56243>>>                // ORAFlex: Open "ora_drv:\\<serverName>\<owner>*<tableName>=<numberFieds>" as table
56243>>>                Move (ORAFLEX + ":\\" + SQLConnection.sServer + "\" + SQLConnection.sSchema + "*" + sTableName) to sTableName
56244>>>                // If not df_exclusive mode, we use the "Open As" syntax.
56244>>>                If (iMode <> DF_EXCLUSIVE) Begin
56246>>>                    Close hTable
56247>>>                    Open sTableName as hTable
56249>>>                End
56249>>>>
56249>>>                Else Begin
56250>>>                    Get OpenTableExclusive hTable to bOK
56251>>>                    If (bOK = False) Begin
56253>>>                        Function_Return False
56254>>>                    End
56254>>>>
56254>>>                End
56254>>>>
56254>>>                Case Break
56255>>>
56255>>>            Case (sDriverID = DATAFLEX_ID)
56258>>>                If (sTableName <> "" and iMode <> DF_EXCLUSIVE) Begin
56260>>>                    Close hTable
56261>>>                    Open sTableName as hTable
56263>>>                End
56263>>>>
56263>>>                Else If (iMode = DF_EXCLUSIVE) Begin
56266>>>                    Get OpenTableExclusive hTable to bOK
56267>>>                    If (bOK = False) Begin
56269>>>                        Function_Return False
56270>>>                    End
56270>>>>
56270>>>                End
56270>>>>
56270>>>                Else Begin
56271>>>                    Open hTable
56273>>>                End
56273>>>>
56273>>>                Case Break
56274>>>
56274>>>            Case Else
56274>>>                Error DFERR_PROGRAM ("Invalid driver:" * sDriverID)
56275>>>>
56275>>>        Case End
56275>>>
56275>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
56276>>>        Send Trap_Error of Error_Info_Object DFERR_FILE_ACCESS_VIOLATION
56277>>>        If (LastErr = CLIERR_LOGIN_UNSUCCESSFUL) Begin
56279>>>            Move False to Found
56280>>>        End
56280>>>>
56280>>>        // If open failed, the Err is set to true,
56280>>>        // but we don't want that because it could end our loop.
56280>>>        Move False to Err
56281>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
56284>>>
56284>>>        Function_Return bOpen
56285>>>    End_Function
56286>>>
56286>>>    // Checks that the passed hTable number both exists in Filelist.cfg and
56286>>>    // that the embedded .dat file exists on disk _or_ that the SQL table exists
56286>>>    // if it is an SQL table
56286>>>    Function UtilTableExists Handle hTable Returns Boolean
56288>>>        Boolean bExists bIsSQLTable
56288>>>        String sDataPath sRootName
56288>>>
56288>>>        Get UtilTableNumberIsInUse hTable to bExists
56289>>>        If (bExists = False) Begin
56291>>>            Function_Return False
56292>>>        End
56292>>>>
56292>>>
56292>>>        Move False to bIsSQLTable
56293>>>        If (hTable > 0) Begin
56295>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
56298>>>            Move (sRootName contains ":") to bIsSQLTable
56299>>>        End
56299>>>>
56299>>>        If (bIsSQLTable = True) Begin
56301>>>            Get UtilTableIsSQL hTable to bExists
56302>>>            Function_Return bExists
56303>>>        End
56303>>>>
56303>>>        Else Begin
56304>>>            Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
56305>>>            Get vFolderFormat sDataPath to sDataPath
56306>>>            Get vFilePathExists (sDataPath + sRootName + ".dat") to bExists
56307>>>        End
56307>>>>
56307>>>
56307>>>        Function_Return bExists
56308>>>    End_Function
56309>>>
56309>>>    // Pass a table handle
56309>>>    // Returns True if the table exists in filelist.cfg.
56309>>>    Function UtilTableNumberIsInUse Handle hCheckTable Returns Boolean
56311>>>        Handle hTable
56311>>>        Boolean bFound
56311>>>
56311>>>        Move False to bFound
56312>>>        Move 0 to hTable
56313>>>        Repeat
56313>>>>
56313>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
56316>>>            If (hTable > 0) Begin
56318>>>                If (hTable = hCheckTable) Begin
56320>>>                    Move True to bFound
56321>>>                End
56321>>>>
56321>>>            End
56321>>>>
56321>>>            If (bFound = True) ;                Break
56324>>>        Until (hTable = 0)
56326>>>
56326>>>        Function_Return (bFound = True)
56327>>>    End_Function
56328>>>
56328>>>    // Pass a table's logical name
56328>>>    // Returns True if the table exists in filelist.cfg.
56328>>>    Function UtilTableLogicalNameIsInUse String sCheckTable Returns Boolean
56330>>>        Handle hTable
56330>>>        Boolean bFound
56330>>>        String sCompareTable
56330>>>
56330>>>        Move False to bFound
56331>>>        Move 0 to hTable
56332>>>        Repeat
56332>>>>
56332>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
56335>>>            If (hTable > 0) Begin
56337>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sCompareTable
56340>>>                If (Uppercase(sCompareTable) = Uppercase(sCheckTable)) Begin
56342>>>                    Move True to bFound
56343>>>                End
56343>>>>
56343>>>            End
56343>>>>
56343>>>            If (bFound = True) ;                Break
56346>>>        Until (hTable = 0)
56348>>>
56348>>>        Function_Return (bFound = True)
56349>>>    End_Function
56350>>>
56350>>>    // Function will report the default driver "DATAFLEX" if table can't be opened
56350>>>    Function UtilDriverFromTableNumber Handle hTable Returns String
56352>>>        Boolean bOK bExists
56352>>>        String sDriverID
56352>>>
56352>>>        Get UtilTableExists hTable to bExists
56353>>>        If (bExists = False) Begin
56355>>>            Function_Return DATAFLEX_ID
56356>>>        End
56356>>>>
56356>>>        Get OpenTableExclusive hTable to bOK
56357>>>        If (bOK = False) Begin
56359>>>            Function_Return DATAFLEX_ID
56360>>>        End
56360>>>>
56360>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
56363>>>        Function_Return sDriverID
56364>>>    End_Function
56365>>>
56365>>>    // Number of tables in Filelist.cfg. Returns integger
56365>>>    Function UtilFilelistNoOfTables Returns Integer
56367>>>        Handle hTable
56367>>>        Integer iRetval
56367>>>
56367>>>        Move 0 to hTable
56368>>>        Move 0 to iRetval
56369>>>
56369>>>        Repeat
56369>>>>
56369>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
56372>>>            If (hTable > 0) Begin
56374>>>                Increment iRetval
56375>>>            End
56375>>>>
56375>>>        Until (hTable = 0)
56377>>>
56377>>>        Function_Return iRetval
56378>>>    End_Function
56379>>>
56379>>>    // Checks if any of the tables in Filelist.cfg is an SQL driver and returns the first Driver ID.
56379>>>    Function UtilIsAnyFilelistEntrySQLtable Returns String
56381>>>        Handle hTable
56381>>>        String sRoot sDriverID
56381>>>        Boolean bIsSQLTable
56381>>>        Integer iPos
56381>>>
56381>>>        Move 0 to hTable
56382>>>        Move "" to sDriverID
56383>>>        Move False to bIsSQLTable
56384>>>
56384>>>        Repeat
56384>>>>
56384>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
56387>>>            If (hTable > 0) Begin
56389>>>                Get_Attribute DF_FILE_ROOT_NAME of hTable to sRoot
56392>>>                If (sRoot contains ":") Begin
56394>>>                    Move (Pos(":", sRoot)) to iPos
56395>>>                    Move (Left(sRoot, (iPos -1))) to sDriverID
56396>>>                End
56396>>>>
56396>>>                Get IsSQLDriver sDriverID to bIsSQLTable
56397>>>            End
56397>>>>
56397>>>
56397>>>        Until (hTable = 0 or bIsSQLTable = True)
56399>>>
56399>>>        Function_Return sDriverID
56400>>>    End_Function
56401>>>
56401>>>    Function UtilIsAllFilelistEntriesDataFlexTables Returns Boolean
56403>>>        String sRootName
56403>>>        Boolean bIsSQL
56403>>>        Handle hTable
56403>>>
56403>>>        Move False to bIsSQL
56404>>>        Move 0 to hTable
56405>>>        Repeat
56405>>>>
56405>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
56408>>>            If (hTable > 0) Begin
56410>>>                Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
56413>>>                Get UtilTableIsSqlByRootName sRootName to bIsSQL
56414>>>                If (bIsSQL = True) Begin
56416>>>                    Move 0 to hTable
56417>>>                End
56417>>>>
56417>>>            End
56417>>>>
56417>>>        Until (hTable = 0)
56419>>>
56419>>>        Function_Return (bIsSQL = False)
56420>>>    End_Function
56421>>>
56421>>>    // * Dummy function for the Studio's Code Explorer *
56421>>>    Function UTIL_ENUMERATION_FUNCTIONS Returns Boolean
56423>>>        Function_Return False
56424>>>    End_Function
56425>>>
56425>>>    Function UtilEnumerateOverlapFields Integer hTable Integer iField Returns String[]
56427>>>        String  sRetval
56427>>>        String[] sOverlapFieldsArray
56428>>>        Integer iType iColumn iColumns
56428>>>        Boolean bOpen bOverlap
56428>>>
56428>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
56431>>>        If (bOpen = False) Begin
56433>>>            Open hTable
56435>>>        End
56435>>>>
56435>>>
56435>>>        Move "" to sRetval
56436>>>
56436>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iColumns
56439>>>
56439>>>        for iColumn from 0 to iColumns
56445>>>>
56445>>>            Get_Attribute DF_FIELD_TYPE of hTable iColumn to iType
56448>>>            If (iField <> iColumn and iType <> DF_OVERLAP) Begin
56450>>>                Get_Attribute DF_FIELD_OVERLAP of hTable iField iColumn to bOverlap
56453>>>                If (bOverlap) Begin
56455>>>                    If (sRetval <> "") Begin
56457>>>                        Append sRetval ","
56458>>>                    End
56458>>>>
56458>>>                    Append sRetval iColumn
56459>>>                End
56459>>>>
56459>>>            End
56459>>>>
56459>>>        Loop
56460>>>>
56460>>>
56460>>>        If (bOpen = False) Begin
56462>>>            Close hTable
56463>>>        End
56463>>>>
56463>>>
56463>>>        Get StrSplitToArray sRetval "," to sOverlapFieldsArray
56464>>>
56464>>>        Function_Return sOverlapFieldsArray
56465>>>    End_Function
56466>>>
56466>>>    // Returns a struct array with all data types for the passed driver & dbtype.
56466>>>    Function UtilEnumerateColumnTypes String sDriverID Integer iDbType Returns tColumnType[]
56468>>>        tColumnType[] ColumnType
56468>>>        tColumnType[] ColumnType
56469>>>
56469>>>        // We need to treat DAW's ODBC driver a bit different, as the output depends on
56469>>>        // the dbType.
56469>>>        If (sDriverID = ODBC_DRV_ID) Begin
56471>>>            If (iDbType = EN_DbTypeMySQL) Begin
56473>>>                Move MDSMySQL to sDriverID
56474>>>            End
56474>>>>
56474>>>            If (iDbType = EN_DbTypeMSSQL) Begin
56476>>>                Move MSSQLDRV_ID to sDriverID
56477>>>            End
56477>>>>
56477>>>            If (iDbType = EN_DbTypeDB2) Begin
56479>>>                Move DB2_DRV_ID to sDriverID
56480>>>            End
56480>>>>
56480>>>            If (iDbType = EN_DbTypePostgre) Begin
56482>>>                Move MDSPgSQL to sDriverID
56483>>>            End
56483>>>>
56483>>>        End
56483>>>>
56483>>>
56483>>>        Case Begin
56483>>>            Case (iDbType = EN_dbTypeDataFlex)
56485>>>                Get _UtilEnumerateDataFlexTypes to ColumnType
56486>>>                Case Break
56487>>>
56487>>>            Case (iDbType = EN_DbTypeDB2)
56490>>>                Get _UtilEnumerateDB2Types to ColumnType
56491>>>                Case Break
56492>>>
56492>>>            Case (iDbType = EN_DbTypeMSSQL)
56495>>>                Get _UtilEnumerateMSSQLTypes sDriverID to ColumnType
56496>>>                Case Break
56497>>>
56497>>>            Case (sDriverID = MDSMySQL)
56500>>>                Get _UtilEnumerateMySQLTypes to ColumnType
56501>>>                Case Break
56502>>>
56502>>>            Case (sDriverID = ORAFLEX)
56505>>>                Get _UtilEnumerateOracleTypes to ColumnType
56506>>>                Case Break
56507>>>
56507>>>            Case (sDriverID = MDSPgSQL)
56510>>>                Get _UtilEnumeratePostgreSQLTypes to ColumnType
56511>>>                Case Break
56512>>>        Case End
56512>>>
56512>>>        Function_Return ColumnType
56513>>>    End_Function
56514>>>
56514>>>    Function UtilEnumerateODBCDrivers Returns String
56516>>>        Handle hoRegistry hoODBCDriverNames
56516>>>        Boolean bExists bKeyOpened
56516>>>        String sKey
56516>>>        String[] sDrivers
56517>>>        Integer iDriverNames iDriverName
56517>>>
56517>>>        Get Create (RefClass (cRegistry)) to hoRegistry
56518>>>        Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
56519>>>        Set pfAccessRights of hoRegistry to Key_Read
56520>>>        Move "SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers" to sKey
56521>>>        Get KeyExists of hoRegistry sKey to bExists
56522>>>        If (bExists) Begin
56524>>>            Get OpenKey of hoRegistry sKey to bKeyOpened
56525>>>            If (bKeyOpened) Begin
56527>>>                Get Create (RefClass (Array)) to hoODBCDriverNames
56528>>>                Get GetValues of hoRegistry hoODBCDriverNames to iDriverNames
56529>>>                If (iDriverNames > 0) Begin
56531>>>                    Move (ResizeArray (sDrivers, iDriverNames)) to sDrivers
56532>>>                    Decrement iDriverNames
56533>>>                    for iDriverName from 0 to iDriverNames
56539>>>>
56539>>>                        Get Value of hoODBCDriverNames iDriverName to sDrivers[iDriverName]
56540>>>                    Loop
56541>>>>
56541>>>                End
56541>>>>
56541>>>                Send CloseKey of hoRegistry
56542>>>            End
56542>>>>
56542>>>        End
56542>>>>
56542>>>        Send Destroy of hoRegistry
56543>>>
56543>>>        Function_Return sDrivers
56544>>>    End_Function
56545>>>
56545>>>    // DataFlex Embedded Database Data Types:
56545>>>    // Helper function for UtilEnumerateColumnTypes
56545>>>    Function _UtilEnumerateDataFlexTypes Returns tColumnType[]
56547>>>        tColumnType[] ColumnType
56547>>>        tColumnType[] ColumnType
56548>>>        Integer i
56548>>>
56548>>>        Move DF_ASCII           to ColumnType[i].iSQLType
56549>>>        Move "ASCII"            to ColumnType[i].sSQLType
56550>>>        Move DF_ASCII           to ColumnType[i].iDataFlexType
56551>>>        Move "ASCII"            to ColumnType[i].sDataFlexType
56552>>>        Move "254"              to ColumnType[i].sPrecision
56553>>>        Increment i
56554>>>
56554>>>        Move DF_BCD             to ColumnType[i].iSQLType
56555>>>        Move "Numeric"          to ColumnType[i].sSQLType
56556>>>        Move DF_BCD             to ColumnType[i].iDataFlexType
56557>>>        Move "Numeric"          to ColumnType[i].sDataFlexType
56558>>>        Move "14.8"             to ColumnType[i].sPrecision
56559>>>        Increment i
56560>>>
56560>>>        Move DF_DATE            to ColumnType[i].iSQLType
56561>>>        Move "Date"             to ColumnType[i].sSQLType
56562>>>        Move DF_DATE            to ColumnType[i].iDataFlexType
56563>>>        Move "Date"             to ColumnType[i].sDataFlexType
56564>>>        Move "6.0"              to ColumnType[i].sPrecision
56565>>>        Move True               to ColumnType[i].bCanEditSize
56566>>>        Increment i
56567>>>
56567>>>        Move DF_TEXT            to ColumnType[i].iSQLType
56568>>>        Move "Text"             to ColumnType[i].sSQLType
56569>>>        Move DF_TEXT            to ColumnType[i].iDataFlexType
56570>>>        Move "Text"             to ColumnType[i].sDataFlexType
56571>>>        Move "16384"            to ColumnType[i].sPrecision
56572>>>        Increment i
56573>>>
56573>>>        Move DF_BINARY          to ColumnType[i].iSQLType
56574>>>        Move "Binary"           to ColumnType[i].sSQLType
56575>>>        Move DF_BINARY          to ColumnType[i].iDataFlexType
56576>>>        Move "Binary"           to ColumnType[i].sDataFlexType
56577>>>        Move "16384"            to ColumnType[i].sPrecision
56578>>>        Increment i
56579>>>
56579>>>        Move DF_DATETIME        to ColumnType[i].iSQLType
56580>>>        Move "DateTime"         to ColumnType[i].sSQLType
56581>>>        Move DF_DATETIME        to ColumnType[i].iDataFlexType
56582>>>        Move "DateTime"         to ColumnType[i].sDataFlexType
56583>>>        Move "23"               to ColumnType[i].sPrecision
56584>>>        Move True               to ColumnType[i].bCanEditSize
56585>>>        Increment i
56586>>>
56586>>>        Move DF_OVERLAP         to ColumnType[i].iSQLType
56587>>>        Move "Overlap"          to ColumnType[i].sSQLType
56588>>>        Move DF_OVERLAP         to ColumnType[i].iDataFlexType
56589>>>        Move "Overlap"          to ColumnType[i].sDataFlexType
56590>>>        Move "0.0"              to ColumnType[i].sPrecision
56591>>>
56591>>>        Function_Return ColumnType
56592>>>    End_Function
56593>>>
56593>>>    Function _UtilEnumerateDB2Types Returns tColumnType[]
56595>>>        tColumnType[] aColumnType
56595>>>        tColumnType[] aColumnType
56596>>>        Integer i
56596>>>
Including file: DB2_DRV_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\DB2_DRV_DriverDef.inc)
56596>>>>// Generated By The Database Update Framework
56596>>>>// Driver XML File: C:\Program Files (x86)\DataFlex 19.1\bin\MSSQLDRV_DriverDef.xml
56596>>>>// Driver COLUMN DATA TYPES
56596>>>>//
56596>>>>// Created: 2019-07-18 18:57:13.935
56596>>>>
56596>>>>            Move "bigint"                                to aColumnType[i].sSQLType
56597>>>>            Move -5                                      to aColumnType[i].iSQLType
56598>>>>            Move True                                    to aColumnType[i].bCanEditSize
56599>>>>            Move True                                    to aColumnType[i].bNativeDataType
56600>>>>            Move 14                                      to aColumnType[i].iDefaultSize
56601>>>>            Move 1                                       to aColumnType[i].iMinSize
56602>>>>            Move 14                                      to aColumnType[i].nMaxSize
56603>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
56604>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
56605>>>>            Move 14                                      to aColumnType[i].sPrecision
56606>>>>            Increment i
56607>>>>
56607>>>>            Move "binary"                                to aColumnType[i].sSQLType
56608>>>>            Move -2                                      to aColumnType[i].iSQLType
56609>>>>            Move True                                    to aColumnType[i].bCanEditSize
56610>>>>            Move True                                    to aColumnType[i].bNativeDataType
56611>>>>            Move -1                                      to aColumnType[i].iDefaultSize
56612>>>>            Move 1                                       to aColumnType[i].iMinSize
56613>>>>            Move 8000                                    to aColumnType[i].nMaxSize
56614>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56615>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56616>>>>            Move 8000                                    to aColumnType[i].sPrecision
56617>>>>            Increment i
56618>>>>
56618>>>>            Move "bit"                                   to aColumnType[i].sSQLType
56619>>>>            Move -7                                      to aColumnType[i].iSQLType
56620>>>>            Move False                                   to aColumnType[i].bCanEditSize
56621>>>>            Move True                                    to aColumnType[i].bNativeDataType
56622>>>>            Move 0                                       to aColumnType[i].iDefaultSize
56623>>>>            Move 0                                       to aColumnType[i].iMinSize
56624>>>>            Move 0                                       to aColumnType[i].nMaxSize
56625>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56626>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56627>>>>            Move 1                                       to aColumnType[i].sPrecision
56628>>>>            Increment i
56629>>>>
56629>>>>            Move "char"                                  to aColumnType[i].sSQLType
56630>>>>            Move 1                                       to aColumnType[i].iSQLType
56631>>>>            Move True                                    to aColumnType[i].bCanEditSize
56632>>>>            Move True                                    to aColumnType[i].bNativeDataType
56633>>>>            Move -1                                      to aColumnType[i].iDefaultSize
56634>>>>            Move 1                                       to aColumnType[i].iMinSize
56635>>>>            Move 8000                                    to aColumnType[i].nMaxSize
56636>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56637>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56638>>>>            Move 8000                                    to aColumnType[i].sPrecision
56639>>>>            Increment i
56640>>>>
56640>>>>            Move "date"                                  to aColumnType[i].sSQLType
56641>>>>            Move 91                                      to aColumnType[i].iSQLType
56642>>>>            Move False                                   to aColumnType[i].bCanEditSize
56643>>>>            Move True                                    to aColumnType[i].bNativeDataType
56644>>>>            Move 0                                       to aColumnType[i].iDefaultSize
56645>>>>            Move 0                                       to aColumnType[i].iMinSize
56646>>>>            Move 0                                       to aColumnType[i].nMaxSize
56647>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56648>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56649>>>>            Move 1                                       to aColumnType[i].sPrecision
56650>>>>            Increment i
56651>>>>
56651>>>>            Move "datetime"                              to aColumnType[i].sSQLType
56652>>>>            Move 93                                      to aColumnType[i].iSQLType
56653>>>>            Move False                                   to aColumnType[i].bCanEditSize
56654>>>>            Move True                                    to aColumnType[i].bNativeDataType
56655>>>>            Move -1                                      to aColumnType[i].iDefaultSize
56656>>>>            Move -1                                      to aColumnType[i].iMinSize
56657>>>>            Move -1                                      to aColumnType[i].nMaxSize
56658>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56659>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56660>>>>            Move 23                                      to aColumnType[i].sPrecision
56661>>>>            Increment i
56662>>>>
56662>>>>            Move "datetime2"                             to aColumnType[i].sSQLType
56663>>>>            Move -200                                    to aColumnType[i].iSQLType
56664>>>>            Move True                                    to aColumnType[i].bCanEditSize
56665>>>>            Move True                                    to aColumnType[i].bNativeDataType
56666>>>>            Move 23                                      to aColumnType[i].iDefaultSize
56667>>>>            Move 23                                      to aColumnType[i].iMinSize
56668>>>>            Move 23                                      to aColumnType[i].nMaxSize
56669>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56670>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56671>>>>            Move 23                                      to aColumnType[i].sPrecision
56672>>>>            Increment i
56673>>>>
56673>>>>            Move "datetimeoffset"                        to aColumnType[i].sSQLType
56674>>>>            Move -155                                    to aColumnType[i].iSQLType
56675>>>>            Move True                                    to aColumnType[i].bCanEditSize
56676>>>>            Move True                                    to aColumnType[i].bNativeDataType
56677>>>>            Move 34                                      to aColumnType[i].iDefaultSize
56678>>>>            Move 34                                      to aColumnType[i].iMinSize
56679>>>>            Move 34                                      to aColumnType[i].nMaxSize
56680>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56681>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56682>>>>            Move 34                                      to aColumnType[i].sPrecision
56683>>>>            Increment i
56684>>>>
56684>>>>            Move "decimal"                               to aColumnType[i].sSQLType
56685>>>>            Move 3                                       to aColumnType[i].iSQLType
56686>>>>            Move True                                    to aColumnType[i].bCanEditSize
56687>>>>            Move True                                    to aColumnType[i].bNativeDataType
56688>>>>            Move -1                                      to aColumnType[i].iDefaultSize
56689>>>>            Move 1                                       to aColumnType[i].iMinSize
56690>>>>            Move 14                                      to aColumnType[i].nMaxSize
56691>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
56692>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
56693>>>>            Move 14                                      to aColumnType[i].sPrecision
56694>>>>            Increment i
56695>>>>
56695>>>>            Move "float"                                 to aColumnType[i].sSQLType
56696>>>>            Move 6                                       to aColumnType[i].iSQLType
56697>>>>            Move True                                    to aColumnType[i].bCanEditSize
56698>>>>            Move True                                    to aColumnType[i].bNativeDataType
56699>>>>            Move 14                                      to aColumnType[i].iDefaultSize
56700>>>>            Move 1                                       to aColumnType[i].iMinSize
56701>>>>            Move 14                                      to aColumnType[i].nMaxSize
56702>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
56703>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
56704>>>>            Move 14                                      to aColumnType[i].sPrecision
56705>>>>            Increment i
56706>>>>
56706>>>>            Move "image"                                 to aColumnType[i].sSQLType
56707>>>>            Move -4                                      to aColumnType[i].iSQLType
56708>>>>            Move True                                    to aColumnType[i].bCanEditSize
56709>>>>            Move True                                    to aColumnType[i].bNativeDataType
56710>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
56711>>>>            Move 1                                       to aColumnType[i].iMinSize
56712>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
56713>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56714>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56715>>>>            Move 2000000000                              to aColumnType[i].sPrecision
56716>>>>            Increment i
56717>>>>
56717>>>>            Move "int"                                   to aColumnType[i].sSQLType
56718>>>>            Move 4                                       to aColumnType[i].iSQLType
56719>>>>            Move True                                    to aColumnType[i].bCanEditSize
56720>>>>            Move True                                    to aColumnType[i].bNativeDataType
56721>>>>            Move 10                                      to aColumnType[i].iDefaultSize
56722>>>>            Move 1                                       to aColumnType[i].iMinSize
56723>>>>            Move 10                                      to aColumnType[i].nMaxSize
56724>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
56725>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
56726>>>>            Move 10                                      to aColumnType[i].sPrecision
56727>>>>            Increment i
56728>>>>
56728>>>>            Move "money"                                 to aColumnType[i].sSQLType
56729>>>>            Move -204                                    to aColumnType[i].iSQLType
56730>>>>            Move False                                   to aColumnType[i].bCanEditSize
56731>>>>            Move True                                    to aColumnType[i].bNativeDataType
56732>>>>            Move 0                                       to aColumnType[i].iDefaultSize
56733>>>>            Move 0                                       to aColumnType[i].iMinSize
56734>>>>            Move 0                                       to aColumnType[i].nMaxSize
56735>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56736>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56737>>>>            Move 1                                       to aColumnType[i].sPrecision
56738>>>>            Increment i
56739>>>>
56739>>>>            Move "nchar"                                 to aColumnType[i].sSQLType
56740>>>>            Move -8                                      to aColumnType[i].iSQLType
56741>>>>            Move True                                    to aColumnType[i].bCanEditSize
56742>>>>            Move True                                    to aColumnType[i].bNativeDataType
56743>>>>            Move -1                                      to aColumnType[i].iDefaultSize
56744>>>>            Move 1                                       to aColumnType[i].iMinSize
56745>>>>            Move 4000                                    to aColumnType[i].nMaxSize
56746>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56747>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56748>>>>            Move 4000                                    to aColumnType[i].sPrecision
56749>>>>            Increment i
56750>>>>
56750>>>>            Move "ntext"                                 to aColumnType[i].sSQLType
56751>>>>            Move -10                                     to aColumnType[i].iSQLType
56752>>>>            Move True                                    to aColumnType[i].bCanEditSize
56753>>>>            Move True                                    to aColumnType[i].bNativeDataType
56754>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
56755>>>>            Move 1                                       to aColumnType[i].iMinSize
56756>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
56757>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56758>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56759>>>>            Move 2000000000                              to aColumnType[i].sPrecision
56760>>>>            Increment i
56761>>>>
56761>>>>            Move "numeric"                               to aColumnType[i].sSQLType
56762>>>>            Move 2                                       to aColumnType[i].iSQLType
56763>>>>            Move True                                    to aColumnType[i].bCanEditSize
56764>>>>            Move True                                    to aColumnType[i].bNativeDataType
56765>>>>            Move -1                                      to aColumnType[i].iDefaultSize
56766>>>>            Move 1                                       to aColumnType[i].iMinSize
56767>>>>            Move 14                                      to aColumnType[i].nMaxSize
56768>>>>            Move "DF_DATE"                               to aColumnType[i].sDataFlexType
56769>>>>            Move DF_DATE                                 to aColumnType[i].iDataFlexType
56770>>>>            Move 6                                       to aColumnType[i].sPrecision
56771>>>>            Increment i
56772>>>>
56772>>>>            Move "nvarchar"                              to aColumnType[i].sSQLType
56773>>>>            Move -9                                      to aColumnType[i].iSQLType
56774>>>>            Move True                                    to aColumnType[i].bCanEditSize
56775>>>>            Move True                                    to aColumnType[i].bNativeDataType
56776>>>>            Move -1                                      to aColumnType[i].iDefaultSize
56777>>>>            Move 1                                       to aColumnType[i].iMinSize
56778>>>>            Move 4000                                    to aColumnType[i].nMaxSize
56779>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56780>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56781>>>>            Move 4000                                    to aColumnType[i].sPrecision
56782>>>>            Increment i
56783>>>>
56783>>>>            Move "nvarchar(max)"                         to aColumnType[i].sSQLType
56784>>>>            Move -202                                    to aColumnType[i].iSQLType
56785>>>>            Move True                                    to aColumnType[i].bCanEditSize
56786>>>>            Move True                                    to aColumnType[i].bNativeDataType
56787>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
56788>>>>            Move 1                                       to aColumnType[i].iMinSize
56789>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
56790>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56791>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56792>>>>            Move 2000000000                              to aColumnType[i].sPrecision
56793>>>>            Increment i
56794>>>>
56794>>>>            Move "real"                                  to aColumnType[i].sSQLType
56795>>>>            Move 7                                       to aColumnType[i].iSQLType
56796>>>>            Move True                                    to aColumnType[i].bCanEditSize
56797>>>>            Move True                                    to aColumnType[i].bNativeDataType
56798>>>>            Move 14                                      to aColumnType[i].iDefaultSize
56799>>>>            Move 1                                       to aColumnType[i].iMinSize
56800>>>>            Move 14                                      to aColumnType[i].nMaxSize
56801>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
56802>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
56803>>>>            Move 14                                      to aColumnType[i].sPrecision
56804>>>>            Increment i
56805>>>>
56805>>>>            Move "smalldatetime"                         to aColumnType[i].sSQLType
56806>>>>            Move -206                                    to aColumnType[i].iSQLType
56807>>>>            Move False                                   to aColumnType[i].bCanEditSize
56808>>>>            Move True                                    to aColumnType[i].bNativeDataType
56809>>>>            Move 0                                       to aColumnType[i].iDefaultSize
56810>>>>            Move 0                                       to aColumnType[i].iMinSize
56811>>>>            Move 0                                       to aColumnType[i].nMaxSize
56812>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56813>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56814>>>>            Move 1                                       to aColumnType[i].sPrecision
56815>>>>            Increment i
56816>>>>
56816>>>>            Move "smallint"                              to aColumnType[i].sSQLType
56817>>>>            Move 5                                       to aColumnType[i].iSQLType
56818>>>>            Move True                                    to aColumnType[i].bCanEditSize
56819>>>>            Move True                                    to aColumnType[i].bNativeDataType
56820>>>>            Move 5                                       to aColumnType[i].iDefaultSize
56821>>>>            Move 1                                       to aColumnType[i].iMinSize
56822>>>>            Move 5                                       to aColumnType[i].nMaxSize
56823>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
56824>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
56825>>>>            Move 5                                       to aColumnType[i].sPrecision
56826>>>>            Increment i
56827>>>>
56827>>>>            Move "smallmoney"                            to aColumnType[i].sSQLType
56828>>>>            Move -205                                    to aColumnType[i].iSQLType
56829>>>>            Move False                                   to aColumnType[i].bCanEditSize
56830>>>>            Move True                                    to aColumnType[i].bNativeDataType
56831>>>>            Move 0                                       to aColumnType[i].iDefaultSize
56832>>>>            Move 0                                       to aColumnType[i].iMinSize
56833>>>>            Move 0                                       to aColumnType[i].nMaxSize
56834>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56835>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56836>>>>            Move 1                                       to aColumnType[i].sPrecision
56837>>>>            Increment i
56838>>>>
56838>>>>            Move "text"                                  to aColumnType[i].sSQLType
56839>>>>            Move -1                                      to aColumnType[i].iSQLType
56840>>>>            Move True                                    to aColumnType[i].bCanEditSize
56841>>>>            Move True                                    to aColumnType[i].bNativeDataType
56842>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
56843>>>>            Move 1                                       to aColumnType[i].iMinSize
56844>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
56845>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56846>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56847>>>>            Move 2000000000                              to aColumnType[i].sPrecision
56848>>>>            Increment i
56849>>>>
56849>>>>            Move "time"                                  to aColumnType[i].sSQLType
56850>>>>            Move -154                                    to aColumnType[i].iSQLType
56851>>>>            Move True                                    to aColumnType[i].bCanEditSize
56852>>>>            Move True                                    to aColumnType[i].bNativeDataType
56853>>>>            Move 10                                      to aColumnType[i].iDefaultSize
56854>>>>            Move 10                                      to aColumnType[i].iMinSize
56855>>>>            Move 19                                      to aColumnType[i].nMaxSize
56856>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56857>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56858>>>>            Move 19                                      to aColumnType[i].sPrecision
56859>>>>            Increment i
56860>>>>
56860>>>>            Move "tinyint"                               to aColumnType[i].sSQLType
56861>>>>            Move -6                                      to aColumnType[i].iSQLType
56862>>>>            Move True                                    to aColumnType[i].bCanEditSize
56863>>>>            Move True                                    to aColumnType[i].bNativeDataType
56864>>>>            Move 3                                       to aColumnType[i].iDefaultSize
56865>>>>            Move 1                                       to aColumnType[i].iMinSize
56866>>>>            Move 3                                       to aColumnType[i].nMaxSize
56867>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56868>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56869>>>>            Move 3                                       to aColumnType[i].sPrecision
56870>>>>            Increment i
56871>>>>
56871>>>>            Move "uniqueidentifier"                      to aColumnType[i].sSQLType
56872>>>>            Move -11                                     to aColumnType[i].iSQLType
56873>>>>            Move False                                   to aColumnType[i].bCanEditSize
56874>>>>            Move True                                    to aColumnType[i].bNativeDataType
56875>>>>            Move 0                                       to aColumnType[i].iDefaultSize
56876>>>>            Move 0                                       to aColumnType[i].iMinSize
56877>>>>            Move 0                                       to aColumnType[i].nMaxSize
56878>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56879>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56880>>>>            Move 1                                       to aColumnType[i].sPrecision
56881>>>>            Increment i
56882>>>>
56882>>>>            Move "varbinary"                             to aColumnType[i].sSQLType
56883>>>>            Move -3                                      to aColumnType[i].iSQLType
56884>>>>            Move True                                    to aColumnType[i].bCanEditSize
56885>>>>            Move True                                    to aColumnType[i].bNativeDataType
56886>>>>            Move 8000                                    to aColumnType[i].iDefaultSize
56887>>>>            Move 1                                       to aColumnType[i].iMinSize
56888>>>>            Move 8000                                    to aColumnType[i].nMaxSize
56889>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56890>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56891>>>>            Move 8000                                    to aColumnType[i].sPrecision
56892>>>>            Increment i
56893>>>>
56893>>>>            Move "varbinary(max)"                        to aColumnType[i].sSQLType
56894>>>>            Move -203                                    to aColumnType[i].iSQLType
56895>>>>            Move True                                    to aColumnType[i].bCanEditSize
56896>>>>            Move True                                    to aColumnType[i].bNativeDataType
56897>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
56898>>>>            Move 1                                       to aColumnType[i].iMinSize
56899>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
56900>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56901>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56902>>>>            Move 2000000000                              to aColumnType[i].sPrecision
56903>>>>            Increment i
56904>>>>
56904>>>>            Move "varchar"                               to aColumnType[i].sSQLType
56905>>>>            Move 12                                      to aColumnType[i].iSQLType
56906>>>>            Move True                                    to aColumnType[i].bCanEditSize
56907>>>>            Move True                                    to aColumnType[i].bNativeDataType
56908>>>>            Move -1                                      to aColumnType[i].iDefaultSize
56909>>>>            Move 1                                       to aColumnType[i].iMinSize
56910>>>>            Move 8000                                    to aColumnType[i].nMaxSize
56911>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56912>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56913>>>>            Move 8000                                    to aColumnType[i].sPrecision
56914>>>>            Increment i
56915>>>>
56915>>>>            Move "varchar(max)"                          to aColumnType[i].sSQLType
56916>>>>            Move -201                                    to aColumnType[i].iSQLType
56917>>>>            Move True                                    to aColumnType[i].bCanEditSize
56918>>>>            Move True                                    to aColumnType[i].bNativeDataType
56919>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
56920>>>>            Move 1                                       to aColumnType[i].iMinSize
56921>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
56922>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56923>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56924>>>>            Move 2000000000                              to aColumnType[i].sPrecision
56925>>>>            Increment i
56926>>>>
56926>>>>            Move "xml"                                   to aColumnType[i].sSQLType
56927>>>>            Move -152                                    to aColumnType[i].iSQLType
56928>>>>            Move True                                    to aColumnType[i].bCanEditSize
56929>>>>            Move True                                    to aColumnType[i].bNativeDataType
56930>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
56931>>>>            Move 1                                       to aColumnType[i].iMinSize
56932>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
56933>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56934>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56935>>>>            Move 2000000000                              to aColumnType[i].sPrecision
56936>>>>            Increment i
56937>>>>
56937>>>>
56937>>>//        Move SQL_DBCLOB         to ColumnType[i].iSQLType
56937>>>//        Move "DBCLOB"           to ColumnType[i].sSQLType
56937>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
56937>>>//        Move "Text"             to ColumnType[i].sDataFlexType
56937>>>//        Move "16384"            to ColumnType[i].sPrecision
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_BIGINT         to ColumnType[i].iSQLType
56937>>>//        Move "BIGINT"           to ColumnType[i].sSQLType
56937>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
56937>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
56937>>>//        Move "14.0"             to ColumnType[i].sPrecision
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_BLOB           to ColumnType[i].iSQLType
56937>>>//        Move "BLOB"             to ColumnType[i].sSQLType
56937>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
56937>>>//        Move "BINARY"           to ColumnType[i].sDataFlexType
56937>>>//        Move "16384"            to ColumnType[i].sPrecision
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_CHAR           to ColumnType[i].iSQLType
56937>>>//        Move "CHAR"             to ColumnType[i].sSQLType
56937>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
56937>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
56937>>>//        Move "254"              to ColumnType[i].sPrecision
56937>>>//        Increment i
56937>>>//
56937>>>//        // ToDo: We need to change the sType when using this!
56937>>>//        Move SQL_CHARBIT            to ColumnType[i].iSQLType
56937>>>//        Move "CHAR FOR BIT DATA"    to ColumnType[i].sSQLType
56937>>>//        Move DF_BINARY              to ColumnType[i].iDataFlexType
56937>>>//        Move "Binary"               to ColumnType[i].sDataFlexType
56937>>>//        Move "254"                  to ColumnType[i].sPrecision
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_DATE           to ColumnType[i].iSQLType
56937>>>//        Move "DATE"             to ColumnType[i].sSQLType
56937>>>//        Move DF_DATE            to ColumnType[i].iDataFlexType
56937>>>//        Move "Date"             to ColumnType[i].sDataFlexType
56937>>>//        Move "6.0"              to ColumnType[i].sPrecision
56937>>>//        Move True               to ColumnType[i].bCanEditSize
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_CLOB           to ColumnType[i].iSQLType
56937>>>//        Move "CLOB"             to ColumnType[i].sSQLType
56937>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
56937>>>//        Move "Text"             to ColumnType[i].sDataFlexType
56937>>>//        Move "16384"            to ColumnType[i].sPrecision
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_DECIMAL        to ColumnType[i].iSQLType
56937>>>//        Move "DECIMAL"          to ColumnType[i].sSQLType
56937>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
56937>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
56937>>>//        Move "14.8"             to ColumnType[i].sPrecision
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_DOUBLE         to ColumnType[i].iSQLType
56937>>>//        Move "DOUBLE"           to ColumnType[i].sSQLType
56937>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
56937>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
56937>>>//        Move "14.8"             to ColumnType[i].sPrecision
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_FLOAT          to ColumnType[i].iSQLType
56937>>>//        Move "FLOAT"            to ColumnType[i].sSQLType
56937>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
56937>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
56937>>>//        Move "14.8"             to ColumnType[i].sPrecision
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_GRAPHIC        to ColumnType[i].iSQLType
56937>>>//        Move "GRAPHIC"          to ColumnType[i].sSQLType
56937>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
56937>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
56937>>>//        Move "255"              to ColumnType[i].sPrecision
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_INTEGER        to ColumnType[i].iSQLType
56937>>>//        Move "INTEGER"          to ColumnType[i].sSQLType
56937>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
56937>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
56937>>>//        Move "9.0"              to ColumnType[i].sPrecision
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_LONGVARCHAR    to ColumnType[i].iSQLType
56937>>>//        Move "LONG VARCHAR"     to ColumnType[i].sSQLType
56937>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
56937>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
56937>>>//        Move "32000"            to ColumnType[i].sPrecision
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_LONGVARCHARBIT to ColumnType[i].iSQLType
56937>>>//        Move "LONG VARCHAR BIT" to ColumnType[i].sSQLType
56937>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
56937>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
56937>>>//        Move "32000"            to ColumnType[i].sPrecision
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_LONGVARGRAPHIC to ColumnType[i].iSQLType
56937>>>//        Move "LONG VARGRAPHIC"  to ColumnType[i].sSQLType
56937>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
56937>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
56937>>>//        Move "32000"            to ColumnType[i].sPrecision
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_NUMERIC        to ColumnType[i].iSQLType
56937>>>//        Move "NUMERIC"          to ColumnType[i].sSQLType
56937>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
56937>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
56937>>>//        Move "14.8"             to ColumnType[i].sPrecision
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_REAL           to ColumnType[i].iSQLType
56937>>>//        Move "REAL"             to ColumnType[i].sSQLType
56937>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
56937>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
56937>>>//        Move "14.8"             to ColumnType[i].sPrecision
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_SMALLINT       to ColumnType[i].iSQLType
56937>>>//        Move "SMALLINT"         to ColumnType[i].sSQLType
56937>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
56937>>>//        Move "NUMERIC"          to ColumnType[i].sDataFlexType
56937>>>//        Move "5.0"              to ColumnType[i].sPrecision
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_TIME           to ColumnType[i].iSQLType
56937>>>//        Move "TIME"             to ColumnType[i].sSQLType
56937>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
56937>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
56937>>>//        Move "19.0"             to ColumnType[i].sPrecision
56937>>>//        Move True               to ColumnType[i].bCanEditSize
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_TIMESTAMP      to ColumnType[i].iSQLType
56937>>>//        Move "TIMESTAMP"        to ColumnType[i].sSQLType
56937>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
56937>>>//        Move "DATETIME"         to ColumnType[i].sDataFlexType
56937>>>//        Move "23.6"             to ColumnType[i].sPrecision
56937>>>//        Move True               to ColumnType[i].bCanEditSize
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_VARCHAR        to ColumnType[i].iSQLType
56937>>>//        Move "VARCHAR"          to ColumnType[i].sSQLType
56937>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
56937>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
56937>>>//        Move "16384"            to ColumnType[i].sPrecision
56937>>>//        Increment i
56937>>>//
56937>>>//        // ToDo: We need to change the sType when using this!
56937>>>//        Move SQL_VARCHARBIT         to ColumnType[i].iSQLType
56937>>>//        Move "VARCHAR FOR BIT DATA" to ColumnType[i].sSQLType
56937>>>//        Move DF_TEXT                to ColumnType[i].iDataFlexType
56937>>>//        Move "TEXT"                 to ColumnType[i].sDataFlexType
56937>>>//        Move "16384"                to ColumnType[i].sPrecision
56937>>>//        Increment i
56937>>>//
56937>>>//        Move SQL_VARGRAPHIC     to ColumnType[i].iSQLType
56937>>>//        Move "VARGRAPHIC"       to ColumnType[i].sSQLType
56937>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
56937>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
56937>>>//        Move "16384"            to ColumnType[i].sPrecision
56937>>>//
56937>>>//        Move SQL_XML            to ColumnType[i].iSQLType
56937>>>//        Move "XML"              to ColumnType[i].sSQLType
56937>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
56937>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
56937>>>//        Move "16384"            to ColumnType[i].sPrecision
56937>>>
56937>>>        Function_Return aColumnType
56938>>>    End_Function
56939>>>
56939>>>    // Microsoft SQL Server Database Data Types:
56939>>>    // Helper function for UtilEnumerateColumnTypes
56939>>>    Function _UtilEnumerateMSSQLTypes String sDriverID Returns tColumnType[]
56941>>>        tColumnType[] aColumnType
56941>>>        tColumnType[] aColumnType
56942>>>        Integer i
56942>>>
56942>>>        If (sDriverID = MSSQLDRV_ID) Begin
Including file: MSSQLDRV_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\MSSQLDRV_DriverDef.inc)
56944>>>>// Generated By The Database Update Framework
56944>>>>// Driver XML File: C:\Program Files\DataFlex 20.0\Lib\MSSQLDRV_DriverDef.xml
56944>>>>// Driver COLUMN DATA TYPES
56944>>>>//
56944>>>>// Created: 2019-11-15 21:57:51.001
56944>>>>
56944>>>>            Move "bigint"                                to aColumnType[i].sSQLType
56945>>>>            Move -5                                      to aColumnType[i].iSQLType
56946>>>>            Move True                                    to aColumnType[i].bCanEditSize
56947>>>>            Move True                                    to aColumnType[i].bNativeDataType
56948>>>>            Move 14                                      to aColumnType[i].iDefaultSize
56949>>>>            Move 1                                       to aColumnType[i].iMinSize
56950>>>>            Move 14                                      to aColumnType[i].nMaxSize
56951>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
56952>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
56953>>>>            Move 14                                      to aColumnType[i].sPrecision
56954>>>>            Increment i
56955>>>>
56955>>>>            Move "binary"                                to aColumnType[i].sSQLType
56956>>>>            Move -2                                      to aColumnType[i].iSQLType
56957>>>>            Move True                                    to aColumnType[i].bCanEditSize
56958>>>>            Move True                                    to aColumnType[i].bNativeDataType
56959>>>>            Move -1                                      to aColumnType[i].iDefaultSize
56960>>>>            Move 1                                       to aColumnType[i].iMinSize
56961>>>>            Move 8000                                    to aColumnType[i].nMaxSize
56962>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
56963>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
56964>>>>            Move 8000                                    to aColumnType[i].sPrecision
56965>>>>            Increment i
56966>>>>
56966>>>>            Move "bit"                                   to aColumnType[i].sSQLType
56967>>>>            Move -7                                      to aColumnType[i].iSQLType
56968>>>>            Move False                                   to aColumnType[i].bCanEditSize
56969>>>>            Move True                                    to aColumnType[i].bNativeDataType
56970>>>>            Move 0                                       to aColumnType[i].iDefaultSize
56971>>>>            Move 0                                       to aColumnType[i].iMinSize
56972>>>>            Move 0                                       to aColumnType[i].nMaxSize
56973>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56974>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56975>>>>            Move 1                                       to aColumnType[i].sPrecision
56976>>>>            Increment i
56977>>>>
56977>>>>            Move "char"                                  to aColumnType[i].sSQLType
56978>>>>            Move 1                                       to aColumnType[i].iSQLType
56979>>>>            Move True                                    to aColumnType[i].bCanEditSize
56980>>>>            Move True                                    to aColumnType[i].bNativeDataType
56981>>>>            Move -1                                      to aColumnType[i].iDefaultSize
56982>>>>            Move 1                                       to aColumnType[i].iMinSize
56983>>>>            Move 8000                                    to aColumnType[i].nMaxSize
56984>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
56985>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
56986>>>>            Move 8000                                    to aColumnType[i].sPrecision
56987>>>>            Increment i
56988>>>>
56988>>>>            Move "date"                                  to aColumnType[i].sSQLType
56989>>>>            Move 91                                      to aColumnType[i].iSQLType
56990>>>>            Move False                                   to aColumnType[i].bCanEditSize
56991>>>>            Move True                                    to aColumnType[i].bNativeDataType
56992>>>>            Move 0                                       to aColumnType[i].iDefaultSize
56993>>>>            Move 0                                       to aColumnType[i].iMinSize
56994>>>>            Move 0                                       to aColumnType[i].nMaxSize
56995>>>>            Move "DF_DATE"                               to aColumnType[i].sDataFlexType
56996>>>>            Move DF_DATE                                 to aColumnType[i].iDataFlexType
56997>>>>            Move 6                                       to aColumnType[i].sPrecision
56998>>>>            Increment i
56999>>>>
56999>>>>            Move "datetime"                              to aColumnType[i].sSQLType
57000>>>>            Move 93                                      to aColumnType[i].iSQLType
57001>>>>            Move False                                   to aColumnType[i].bCanEditSize
57002>>>>            Move True                                    to aColumnType[i].bNativeDataType
57003>>>>            Move -1                                      to aColumnType[i].iDefaultSize
57004>>>>            Move -1                                      to aColumnType[i].iMinSize
57005>>>>            Move -1                                      to aColumnType[i].nMaxSize
57006>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
57007>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
57008>>>>            Move 23                                      to aColumnType[i].sPrecision
57009>>>>            Increment i
57010>>>>
57010>>>>            Move "datetime2"                             to aColumnType[i].sSQLType
57011>>>>            Move -200                                    to aColumnType[i].iSQLType
57012>>>>            Move True                                    to aColumnType[i].bCanEditSize
57013>>>>            Move True                                    to aColumnType[i].bNativeDataType
57014>>>>            Move 23                                      to aColumnType[i].iDefaultSize
57015>>>>            Move 23                                      to aColumnType[i].iMinSize
57016>>>>            Move 23                                      to aColumnType[i].nMaxSize
57017>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
57018>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
57019>>>>            Move 23                                      to aColumnType[i].sPrecision
57020>>>>            Increment i
57021>>>>
57021>>>>            Move "datetimeoffset"                        to aColumnType[i].sSQLType
57022>>>>            Move -155                                    to aColumnType[i].iSQLType
57023>>>>            Move True                                    to aColumnType[i].bCanEditSize
57024>>>>            Move True                                    to aColumnType[i].bNativeDataType
57025>>>>            Move 34                                      to aColumnType[i].iDefaultSize
57026>>>>            Move 34                                      to aColumnType[i].iMinSize
57027>>>>            Move 34                                      to aColumnType[i].nMaxSize
57028>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
57029>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
57030>>>>            Move 34                                      to aColumnType[i].sPrecision
57031>>>>            Increment i
57032>>>>
57032>>>>            Move "decimal"                               to aColumnType[i].sSQLType
57033>>>>            Move 3                                       to aColumnType[i].iSQLType
57034>>>>            Move True                                    to aColumnType[i].bCanEditSize
57035>>>>            Move True                                    to aColumnType[i].bNativeDataType
57036>>>>            Move -1                                      to aColumnType[i].iDefaultSize
57037>>>>            Move 1                                       to aColumnType[i].iMinSize
57038>>>>            Move 14                                      to aColumnType[i].nMaxSize
57039>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57040>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57041>>>>            Move 14                                      to aColumnType[i].sPrecision
57042>>>>            Increment i
57043>>>>
57043>>>>            Move "float"                                 to aColumnType[i].sSQLType
57044>>>>            Move 6                                       to aColumnType[i].iSQLType
57045>>>>            Move True                                    to aColumnType[i].bCanEditSize
57046>>>>            Move True                                    to aColumnType[i].bNativeDataType
57047>>>>            Move 14                                      to aColumnType[i].iDefaultSize
57048>>>>            Move 1                                       to aColumnType[i].iMinSize
57049>>>>            Move 14                                      to aColumnType[i].nMaxSize
57050>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57051>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57052>>>>            Move 14                                      to aColumnType[i].sPrecision
57053>>>>            Increment i
57054>>>>
57054>>>>            Move "image"                                 to aColumnType[i].sSQLType
57055>>>>            Move -4                                      to aColumnType[i].iSQLType
57056>>>>            Move True                                    to aColumnType[i].bCanEditSize
57057>>>>            Move True                                    to aColumnType[i].bNativeDataType
57058>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
57059>>>>            Move 1                                       to aColumnType[i].iMinSize
57060>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
57061>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
57062>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
57063>>>>            Move 2000000000                              to aColumnType[i].sPrecision
57064>>>>            Increment i
57065>>>>
57065>>>>            Move "int"                                   to aColumnType[i].sSQLType
57066>>>>            Move 4                                       to aColumnType[i].iSQLType
57067>>>>            Move True                                    to aColumnType[i].bCanEditSize
57068>>>>            Move True                                    to aColumnType[i].bNativeDataType
57069>>>>            Move 10                                      to aColumnType[i].iDefaultSize
57070>>>>            Move 1                                       to aColumnType[i].iMinSize
57071>>>>            Move 10                                      to aColumnType[i].nMaxSize
57072>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57073>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57074>>>>            Move 10                                      to aColumnType[i].sPrecision
57075>>>>            Increment i
57076>>>>
57076>>>>            Move "money"                                 to aColumnType[i].sSQLType
57077>>>>            Move -204                                    to aColumnType[i].iSQLType
57078>>>>            Move False                                   to aColumnType[i].bCanEditSize
57079>>>>            Move True                                    to aColumnType[i].bNativeDataType
57080>>>>            Move 0                                       to aColumnType[i].iDefaultSize
57081>>>>            Move 0                                       to aColumnType[i].iMinSize
57082>>>>            Move 0                                       to aColumnType[i].nMaxSize
57083>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57084>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57085>>>>            Move 1                                       to aColumnType[i].sPrecision
57086>>>>            Increment i
57087>>>>
57087>>>>            Move "nchar"                                 to aColumnType[i].sSQLType
57088>>>>            Move -8                                      to aColumnType[i].iSQLType
57089>>>>            Move True                                    to aColumnType[i].bCanEditSize
57090>>>>            Move True                                    to aColumnType[i].bNativeDataType
57091>>>>            Move -1                                      to aColumnType[i].iDefaultSize
57092>>>>            Move 1                                       to aColumnType[i].iMinSize
57093>>>>            Move 4000                                    to aColumnType[i].nMaxSize
57094>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57095>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57096>>>>            Move 4000                                    to aColumnType[i].sPrecision
57097>>>>            Increment i
57098>>>>
57098>>>>            Move "ntext"                                 to aColumnType[i].sSQLType
57099>>>>            Move -10                                     to aColumnType[i].iSQLType
57100>>>>            Move True                                    to aColumnType[i].bCanEditSize
57101>>>>            Move True                                    to aColumnType[i].bNativeDataType
57102>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
57103>>>>            Move 1                                       to aColumnType[i].iMinSize
57104>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
57105>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
57106>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
57107>>>>            Move 2000000000                              to aColumnType[i].sPrecision
57108>>>>            Increment i
57109>>>>
57109>>>>            Move "numeric"                               to aColumnType[i].sSQLType
57110>>>>            Move 2                                       to aColumnType[i].iSQLType
57111>>>>            Move True                                    to aColumnType[i].bCanEditSize
57112>>>>            Move True                                    to aColumnType[i].bNativeDataType
57113>>>>            Move -1                                      to aColumnType[i].iDefaultSize
57114>>>>            Move 1                                       to aColumnType[i].iMinSize
57115>>>>            Move 14                                      to aColumnType[i].nMaxSize
57116>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57117>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57118>>>>            Move 14                                      to aColumnType[i].sPrecision
57119>>>>            Increment i
57120>>>>
57120>>>>            Move "nvarchar"                              to aColumnType[i].sSQLType
57121>>>>            Move -9                                      to aColumnType[i].iSQLType
57122>>>>            Move True                                    to aColumnType[i].bCanEditSize
57123>>>>            Move True                                    to aColumnType[i].bNativeDataType
57124>>>>            Move -1                                      to aColumnType[i].iDefaultSize
57125>>>>            Move 1                                       to aColumnType[i].iMinSize
57126>>>>            Move 4000                                    to aColumnType[i].nMaxSize
57127>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57128>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57129>>>>            Move 4000                                    to aColumnType[i].sPrecision
57130>>>>            Increment i
57131>>>>
57131>>>>            Move "nvarchar(max)"                         to aColumnType[i].sSQLType
57132>>>>            Move -202                                    to aColumnType[i].iSQLType
57133>>>>            Move True                                    to aColumnType[i].bCanEditSize
57134>>>>            Move True                                    to aColumnType[i].bNativeDataType
57135>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
57136>>>>            Move 1                                       to aColumnType[i].iMinSize
57137>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
57138>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57139>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57140>>>>            Move 2000000000                              to aColumnType[i].sPrecision
57141>>>>            Increment i
57142>>>>
57142>>>>            Move "real"                                  to aColumnType[i].sSQLType
57143>>>>            Move 7                                       to aColumnType[i].iSQLType
57144>>>>            Move True                                    to aColumnType[i].bCanEditSize
57145>>>>            Move True                                    to aColumnType[i].bNativeDataType
57146>>>>            Move 14                                      to aColumnType[i].iDefaultSize
57147>>>>            Move 1                                       to aColumnType[i].iMinSize
57148>>>>            Move 14                                      to aColumnType[i].nMaxSize
57149>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57150>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57151>>>>            Move 14                                      to aColumnType[i].sPrecision
57152>>>>            Increment i
57153>>>>
57153>>>>            Move "smalldatetime"                         to aColumnType[i].sSQLType
57154>>>>            Move -206                                    to aColumnType[i].iSQLType
57155>>>>            Move False                                   to aColumnType[i].bCanEditSize
57156>>>>            Move True                                    to aColumnType[i].bNativeDataType
57157>>>>            Move 0                                       to aColumnType[i].iDefaultSize
57158>>>>            Move 0                                       to aColumnType[i].iMinSize
57159>>>>            Move 0                                       to aColumnType[i].nMaxSize
57160>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
57161>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
57162>>>>            Move 1                                       to aColumnType[i].sPrecision
57163>>>>            Increment i
57164>>>>
57164>>>>            Move "smallint"                              to aColumnType[i].sSQLType
57165>>>>            Move 5                                       to aColumnType[i].iSQLType
57166>>>>            Move True                                    to aColumnType[i].bCanEditSize
57167>>>>            Move True                                    to aColumnType[i].bNativeDataType
57168>>>>            Move 5                                       to aColumnType[i].iDefaultSize
57169>>>>            Move 1                                       to aColumnType[i].iMinSize
57170>>>>            Move 5                                       to aColumnType[i].nMaxSize
57171>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57172>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57173>>>>            Move 5                                       to aColumnType[i].sPrecision
57174>>>>            Increment i
57175>>>>
57175>>>>            Move "smallmoney"                            to aColumnType[i].sSQLType
57176>>>>            Move -205                                    to aColumnType[i].iSQLType
57177>>>>            Move False                                   to aColumnType[i].bCanEditSize
57178>>>>            Move True                                    to aColumnType[i].bNativeDataType
57179>>>>            Move 0                                       to aColumnType[i].iDefaultSize
57180>>>>            Move 0                                       to aColumnType[i].iMinSize
57181>>>>            Move 0                                       to aColumnType[i].nMaxSize
57182>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57183>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57184>>>>            Move 1                                       to aColumnType[i].sPrecision
57185>>>>            Increment i
57186>>>>
57186>>>>            Move "text"                                  to aColumnType[i].sSQLType
57187>>>>            Move -1                                      to aColumnType[i].iSQLType
57188>>>>            Move True                                    to aColumnType[i].bCanEditSize
57189>>>>            Move True                                    to aColumnType[i].bNativeDataType
57190>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
57191>>>>            Move 1                                       to aColumnType[i].iMinSize
57192>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
57193>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
57194>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
57195>>>>            Move 2000000000                              to aColumnType[i].sPrecision
57196>>>>            Increment i
57197>>>>
57197>>>>            Move "time"                                  to aColumnType[i].sSQLType
57198>>>>            Move -154                                    to aColumnType[i].iSQLType
57199>>>>            Move True                                    to aColumnType[i].bCanEditSize
57200>>>>            Move True                                    to aColumnType[i].bNativeDataType
57201>>>>            Move 10                                      to aColumnType[i].iDefaultSize
57202>>>>            Move 10                                      to aColumnType[i].iMinSize
57203>>>>            Move 19                                      to aColumnType[i].nMaxSize
57204>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57205>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57206>>>>            Move 19                                      to aColumnType[i].sPrecision
57207>>>>            Increment i
57208>>>>
57208>>>>            Move "tinyint"                               to aColumnType[i].sSQLType
57209>>>>            Move -6                                      to aColumnType[i].iSQLType
57210>>>>            Move True                                    to aColumnType[i].bCanEditSize
57211>>>>            Move True                                    to aColumnType[i].bNativeDataType
57212>>>>            Move 3                                       to aColumnType[i].iDefaultSize
57213>>>>            Move 1                                       to aColumnType[i].iMinSize
57214>>>>            Move 3                                       to aColumnType[i].nMaxSize
57215>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57216>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57217>>>>            Move 3                                       to aColumnType[i].sPrecision
57218>>>>            Increment i
57219>>>>
57219>>>>            Move "uniqueidentifier"                      to aColumnType[i].sSQLType
57220>>>>            Move -11                                     to aColumnType[i].iSQLType
57221>>>>            Move False                                   to aColumnType[i].bCanEditSize
57222>>>>            Move True                                    to aColumnType[i].bNativeDataType
57223>>>>            Move 0                                       to aColumnType[i].iDefaultSize
57224>>>>            Move 0                                       to aColumnType[i].iMinSize
57225>>>>            Move 0                                       to aColumnType[i].nMaxSize
57226>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57227>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57228>>>>            Move 1                                       to aColumnType[i].sPrecision
57229>>>>            Increment i
57230>>>>
57230>>>>            Move "varbinary"                             to aColumnType[i].sSQLType
57231>>>>            Move -3                                      to aColumnType[i].iSQLType
57232>>>>            Move True                                    to aColumnType[i].bCanEditSize
57233>>>>            Move True                                    to aColumnType[i].bNativeDataType
57234>>>>            Move 8000                                    to aColumnType[i].iDefaultSize
57235>>>>            Move 1                                       to aColumnType[i].iMinSize
57236>>>>            Move 8000                                    to aColumnType[i].nMaxSize
57237>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
57238>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
57239>>>>            Move 8000                                    to aColumnType[i].sPrecision
57240>>>>            Increment i
57241>>>>
57241>>>>            Move "varbinary(max)"                        to aColumnType[i].sSQLType
57242>>>>            Move -203                                    to aColumnType[i].iSQLType
57243>>>>            Move True                                    to aColumnType[i].bCanEditSize
57244>>>>            Move True                                    to aColumnType[i].bNativeDataType
57245>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
57246>>>>            Move 1                                       to aColumnType[i].iMinSize
57247>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
57248>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57249>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57250>>>>            Move 2000000000                              to aColumnType[i].sPrecision
57251>>>>            Increment i
57252>>>>
57252>>>>            Move "varchar"                               to aColumnType[i].sSQLType
57253>>>>            Move 12                                      to aColumnType[i].iSQLType
57254>>>>            Move True                                    to aColumnType[i].bCanEditSize
57255>>>>            Move True                                    to aColumnType[i].bNativeDataType
57256>>>>            Move -1                                      to aColumnType[i].iDefaultSize
57257>>>>            Move 1                                       to aColumnType[i].iMinSize
57258>>>>            Move 8000                                    to aColumnType[i].nMaxSize
57259>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57260>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57261>>>>            Move 8000                                    to aColumnType[i].sPrecision
57262>>>>            Increment i
57263>>>>
57263>>>>            Move "varchar(max)"                          to aColumnType[i].sSQLType
57264>>>>            Move -201                                    to aColumnType[i].iSQLType
57265>>>>            Move True                                    to aColumnType[i].bCanEditSize
57266>>>>            Move True                                    to aColumnType[i].bNativeDataType
57267>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
57268>>>>            Move 1                                       to aColumnType[i].iMinSize
57269>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
57270>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
57271>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
57272>>>>            Move 2000000000                              to aColumnType[i].sPrecision
57273>>>>            Increment i
57274>>>>
57274>>>>            Move "xml"                                   to aColumnType[i].sSQLType
57275>>>>            Move -152                                    to aColumnType[i].iSQLType
57276>>>>            Move True                                    to aColumnType[i].bCanEditSize
57277>>>>            Move True                                    to aColumnType[i].bNativeDataType
57278>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
57279>>>>            Move 1                                       to aColumnType[i].iMinSize
57280>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
57281>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
57282>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
57283>>>>            Move 2000000000                              to aColumnType[i].sPrecision
57284>>>>            Increment i
57285>>>>
57285>>>>
57285>>>
57285>>>//            Move SQL_BIGINT         to ColumnType[i].iSQLType
57285>>>//            Move "bigint"           to ColumnType[i].sSQLType
57285>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
57285>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
57285>>>//            Move "14.0"             to ColumnType[i].sPrecision
57285>>>//            Move True               to ColumnType[i].bCanEditSize
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_BINARY         to ColumnType[i].iSQLType
57285>>>//            Move "binary"           to ColumnType[i].sSQLType
57285>>>//            Move DF_BINARY          to ColumnType[i].iDataFlexType
57285>>>//            Move "Binary"           to ColumnType[i].sDataFlexType
57285>>>//            Move "8000"             to ColumnType[i].sPrecision
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_BIT            to ColumnType[i].iSQLType
57285>>>//            Move "bit"              to ColumnType[i].sSQLType
57285>>>//            Move DF_ASCII           to ColumnType[i].iDataFlexType
57285>>>//            Move "ASCII"            to ColumnType[i].sDataFlexType
57285>>>//            Move "1.0"              to ColumnType[i].sPrecision // In SQL allows "1, 0, or NULL"
57285>>>//            Move True               to ColumnType[i].bCanEditSize
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_CHAR           to ColumnType[i].iSQLType
57285>>>//            Move "char"             to ColumnType[i].sSQLType
57285>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
57285>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
57285>>>//            Move "8000"             to ColumnType[i].sPrecision
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_DATE           to ColumnType[i].iSQLType
57285>>>//            Move "date"             to ColumnType[i].sSQLType
57285>>>//            Move DF_DATE            to ColumnType[i].iDataFlexType
57285>>>//            Move "Date"             to ColumnType[i].sDataFlexType
57285>>>//            Move "6.0"              to ColumnType[i].sPrecision
57285>>>//            Move True               to ColumnType[i].bCanEditSize
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_DATETIME       to ColumnType[i].iSQLType
57285>>>//            Move "datetime"         to ColumnType[i].sSQLType
57285>>>//            Move DF_DATETIME        to ColumnType[i].iDataFlexType
57285>>>//            Move "DateTime"         to ColumnType[i].sDataFlexType
57285>>>//            Move "23.3"             to ColumnType[i].sPrecision
57285>>>//            Move True               to ColumnType[i].bCanEditSize
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_TYPE_TIMESTAMP2 to ColumnType[i].iSQLType
57285>>>//            Move "datetime2"         to ColumnType[i].sSQLType
57285>>>//            Move DF_DATETIME         to ColumnType[i].iDataFlexType
57285>>>//            Move "DateTime"          to ColumnType[i].sDataFlexType
57285>>>//            Move "23.6"              to ColumnType[i].sPrecision
57285>>>//            Move True                to ColumnType[i].bCanEditSize
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_SS_TIMESTAMPOFFSET to ColumnType[i].iSQLType
57285>>>//            Move "datetimeoffset"       to ColumnType[i].sSQLType
57285>>>//            Move DF_DATETIME            to ColumnType[i].iDataFlexType
57285>>>//            Move "DateTime"             to ColumnType[i].sDataFlexType
57285>>>//            Move "34.0"                 to ColumnType[i].sPrecision
57285>>>//            Move True                   to ColumnType[i].bCanEditSize
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_DECIMAL        to ColumnType[i].iSQLType
57285>>>//            Move "decimal"          to ColumnType[i].sSQLType
57285>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
57285>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
57285>>>//            Move "14.8"             to ColumnType[i].sPrecision
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_FLOAT          to ColumnType[i].iSQLType
57285>>>//            Move "float"            to ColumnType[i].sSQLType
57285>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
57285>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
57285>>>//            Move "14.8"             to ColumnType[i].sPrecision
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_INTEGER        to ColumnType[i].iSQLType
57285>>>//            Move "int"              to ColumnType[i].sSQLType
57285>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
57285>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
57285>>>//            Move "8.0"              to ColumnType[i].sPrecision
57285>>>//            Move True               to ColumnType[i].bCanEditSize
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_TYPE_MONEY     to ColumnType[i].iSQLType
57285>>>//            Move "money"            to ColumnType[i].sSQLType
57285>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
57285>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
57285>>>//            Move "15.4"             to ColumnType[i].sPrecision // Studio 18.0 (!)
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_WCHAR          to ColumnType[i].iSQLType
57285>>>//            Move "nchar"            to ColumnType[i].sSQLType
57285>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
57285>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
57285>>>//            Move "4000"             to ColumnType[i].sPrecision
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_WLONGVARCHAR   to ColumnType[i].iSQLType
57285>>>//            Move "ntext"            to ColumnType[i].sSQLType
57285>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
57285>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
57285>>>//            Move "16384"            to ColumnType[i].sPrecision
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_NUMERIC        to ColumnType[i].iSQLType
57285>>>//            Move "numeric"          to ColumnType[i].sSQLType
57285>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
57285>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
57285>>>//            Move "14.8"             to ColumnType[i].sPrecision
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_WVARCHAR       to ColumnType[i].iSQLType
57285>>>//            Move "nvarchar"         to ColumnType[i].sSQLType
57285>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
57285>>>//            Move "Text"             to ColumnType[i].sDataFlexType
57285>>>//            Move "4000"             to ColumnType[i].sPrecision
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_VARCHARMAX     to ColumnType[i].iSQLType
57285>>>//            Move "nvarchar(max)"    to ColumnType[i].sSQLType
57285>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
57285>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
57285>>>//            Move "16384"            to ColumnType[i].sPrecision
57285>>>//            Move True               to ColumnType[i].bCanEditSize
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_REAL           to ColumnType[i].iSQLType
57285>>>//            Move "real"             to ColumnType[i].sSQLType
57285>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
57285>>>//            Move "NUMERIC"          to ColumnType[i].sDataFlexType
57285>>>//            Move "14.8"             to ColumnType[i].sPrecision
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_TYPE_SMALLDATETIME to ColumnType[i].iSQLType
57285>>>//            Move "smalldatetime"        to ColumnType[i].sSQLType
57285>>>//            Move DF_DATETIME            to ColumnType[i].iDataFlexType
57285>>>//            Move "DATETIME"             to ColumnType[i].sDataFlexType
57285>>>//            Move "23.0"                 to ColumnType[i].sPrecision
57285>>>//            Move True                   to ColumnType[i].bCanEditSize
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_SMALLINT       to ColumnType[i].iSQLType
57285>>>//            Move "smallint"         to ColumnType[i].sSQLType
57285>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
57285>>>//            Move "NUMERIC"          to ColumnType[i].sDataFlexType
57285>>>//            Move "4.0"              to ColumnType[i].sPrecision
57285>>>//            Move True               to ColumnType[i].bCanEditSize
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_TYPE_SMALLMONEY to ColumnType[i].iSQLType
57285>>>//            Move "smallmoney"        to ColumnType[i].sSQLType
57285>>>//            Move DF_BCD              to ColumnType[i].iDataFlexType
57285>>>//            Move "NUMERIC"           to ColumnType[i].sDataFlexType
57285>>>//            Move "10.0"              to ColumnType[i].sPrecision
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_TEXT           to ColumnType[i].iSQLType
57285>>>//            Move "text"             to ColumnType[i].sSQLType
57285>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
57285>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
57285>>>//            Move "8000"             to ColumnType[i].sPrecision
57285>>>//            Move True               to ColumnType[i].bCanEditSize
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_TIME           to ColumnType[i].iSQLType
57285>>>//            Move "time"             to ColumnType[i].sSQLType
57285>>>//            Move DF_ASCII           to ColumnType[i].iDataFlexType
57285>>>//            Move "ASCII"            to ColumnType[i].sDataFlexType
57285>>>//            Move "19.0"             to ColumnType[i].sPrecision
57285>>>//            Move True               to ColumnType[i].bCanEditSize
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_TINYINT        to ColumnType[i].iSQLType
57285>>>//            Move "tinyint"          to ColumnType[i].sSQLType
57285>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
57285>>>//            Move "NUMERIC"          to ColumnType[i].sDataFlexType
57285>>>//            Move "2.0"              to ColumnType[i].sPrecision
57285>>>//            Move True               to ColumnType[i].bCanEditSize
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_GUID           to ColumnType[i].iSQLType
57285>>>//            Move "uniqueidentifier" to ColumnType[i].sSQLType
57285>>>//            Move DF_ASCII           to ColumnType[i].iDataFlexType
57285>>>//            Move "ASCII"            to ColumnType[i].sDataFlexType
57285>>>//            Move "36"               to ColumnType[i].sPrecision
57285>>>//            Move True               to ColumnType[i].bCanEditSize
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_VARBINARY      to ColumnType[i].iSQLType
57285>>>//            Move "varbinary"        to ColumnType[i].sSQLType
57285>>>//            Move DF_BINARY          to ColumnType[i].iDataFlexType
57285>>>//            Move "BINARY"           to ColumnType[i].sDataFlexType
57285>>>//            Move "16384"            to ColumnType[i].sPrecision
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_LONGVARBINARY  to ColumnType[i].iSQLType
57285>>>//            Move "varbinary(max)"   to ColumnType[i].sSQLType
57285>>>//            Move DF_BINARY          to ColumnType[i].iDataFlexType
57285>>>//            Move "BINARY"           to ColumnType[i].sDataFlexType
57285>>>//            Move "16384"            to ColumnType[i].sPrecision
57285>>>//            Move True               to ColumnType[i].bCanEditSize
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_VARCHAR        to ColumnType[i].iSQLType
57285>>>//            Move "varchar"          to ColumnType[i].sSQLType
57285>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType // ToDo: Under 255 = ASCII type! How to deal with this?
57285>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
57285>>>//            Move "8000"             to ColumnType[i].sPrecision
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_LONGVARCHAR    to ColumnType[i].iSQLType
57285>>>//            Move "varchar(max)"     to ColumnType[i].sSQLType
57285>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
57285>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
57285>>>//            Move "16384"            to ColumnType[i].sPrecision
57285>>>//            Move True               to ColumnType[i].bCanEditSize
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_SS_XML         to ColumnType[i].iSQLType
57285>>>//            Move "xml"              to ColumnType[i].sSQLType
57285>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
57285>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
57285>>>//            Move "16384"            to ColumnType[i].sPrecision
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_TYPE_DATE      to ColumnType[i].iSQLType
57285>>>//            Move "DATE"             to ColumnType[i].sSQLType
57285>>>//            Move DF_DATE            to ColumnType[i].iDataFlexType
57285>>>//            Move "date"             to ColumnType[i].sDataFlexType
57285>>>//            Move "6.0"              to ColumnType[i].sPrecision
57285>>>//            Move True               to ColumnType[i].bCanEditSize
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_TYPE_TIME      to ColumnType[i].iSQLType
57285>>>//            Move "time"             to ColumnType[i].sSQLType
57285>>>//            Move DF_ASCII           to ColumnType[i].iDataFlexType
57285>>>//            Move "ASCII"            to ColumnType[i].sDataFlexType
57285>>>//            Move "8.7"              to ColumnType[i].sPrecision
57285>>>//            Move True               to ColumnType[i].bCanEditSize
57285>>>//            Increment i
57285>>>//
57285>>>//            Move SQL_TYPE_TIMESTAMP to ColumnType[i].iSQLType
57285>>>//            Move "datetime"         to ColumnType[i].sSQLType
57285>>>//            Move DF_DATETIME        to ColumnType[i].iDataFlexType
57285>>>//            Move "DateTime"         to ColumnType[i].sDataFlexType
57285>>>//            Move "23.6"             to ColumnType[i].sPrecision
57285>>>//            Move True               to ColumnType[i].bCanEditSize
57285>>>//            Increment i
57285>>>
57285>>>        End
57285>>>>
57285>>>
57285>>>        // Mertech SQLFlex driver
57285>>>        If (sDriverID = SQLFLEX) Begin
57287>>>
Including file: sql_drv_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\sql_drv_DriverDef.inc)
57287>>>>// Generated By The Database Update Framework
57287>>>>// Driver XML File: C:\Program Files (x86)\DataFlex 19.0\Bin\sql_drv_DriverDef.xml
57287>>>>// Driver COLUMN DATA TYPES
57287>>>>//
57287>>>>// Created: 2018-03-14 23:47:46.885
57287>>>>
57287>>>>            Move "bigint"                                to aColumnType[i].sSQLType
57288>>>>            Move -5                                      to aColumnType[i].iSQLType
57289>>>>            Move True                                    to aColumnType[i].bCanEditSize
57290>>>>            Move True                                    to aColumnType[i].bNativeDataType
57291>>>>            Move 14                                      to aColumnType[i].iDefaultSize
57292>>>>            Move 1                                       to aColumnType[i].iMinSize
57293>>>>            Move 14                                      to aColumnType[i].nMaxSize
57294>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57295>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57296>>>>            Move 14                                      to aColumnType[i].sPrecision
57297>>>>            Increment i
57298>>>>
57298>>>>            Move "binary"                                to aColumnType[i].sSQLType
57299>>>>            Move -2                                      to aColumnType[i].iSQLType
57300>>>>            Move True                                    to aColumnType[i].bCanEditSize
57301>>>>            Move True                                    to aColumnType[i].bNativeDataType
57302>>>>            Move -1                                      to aColumnType[i].iDefaultSize
57303>>>>            Move 1                                       to aColumnType[i].iMinSize
57304>>>>            Move 8000                                    to aColumnType[i].nMaxSize
57305>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
57306>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
57307>>>>            Move 8000                                    to aColumnType[i].sPrecision
57308>>>>            Increment i
57309>>>>
57309>>>>            Move "bit"                                   to aColumnType[i].sSQLType
57310>>>>            Move -7                                      to aColumnType[i].iSQLType
57311>>>>            Move False                                   to aColumnType[i].bCanEditSize
57312>>>>            Move True                                    to aColumnType[i].bNativeDataType
57313>>>>            Move 1                                       to aColumnType[i].iDefaultSize
57314>>>>            Move -1                                      to aColumnType[i].iMinSize
57315>>>>            Move -1                                      to aColumnType[i].nMaxSize
57316>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57317>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57318>>>>            Move -1                                      to aColumnType[i].sPrecision
57319>>>>            Increment i
57320>>>>
57320>>>>            Move "char"                                  to aColumnType[i].sSQLType
57321>>>>            Move 1                                       to aColumnType[i].iSQLType
57322>>>>            Move True                                    to aColumnType[i].bCanEditSize
57323>>>>            Move True                                    to aColumnType[i].bNativeDataType
57324>>>>            Move -1                                      to aColumnType[i].iDefaultSize
57325>>>>            Move 1                                       to aColumnType[i].iMinSize
57326>>>>            Move 8000                                    to aColumnType[i].nMaxSize
57327>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57328>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57329>>>>            Move 8000                                    to aColumnType[i].sPrecision
57330>>>>            Increment i
57331>>>>
57331>>>>            Move "date"                                  to aColumnType[i].sSQLType
57332>>>>            Move 40                                      to aColumnType[i].iSQLType
57333>>>>            Move False                                   to aColumnType[i].bCanEditSize
57334>>>>            Move True                                    to aColumnType[i].bNativeDataType
57335>>>>            Move 12                                      to aColumnType[i].iDefaultSize
57336>>>>            Move -1                                      to aColumnType[i].iMinSize
57337>>>>            Move -1                                      to aColumnType[i].nMaxSize
57338>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57339>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57340>>>>            Move -1                                      to aColumnType[i].sPrecision
57341>>>>            Increment i
57342>>>>
57342>>>>            Move "datetime"                              to aColumnType[i].sSQLType
57343>>>>            Move 11                                      to aColumnType[i].iSQLType
57344>>>>            Move True                                    to aColumnType[i].bCanEditSize
57345>>>>            Move True                                    to aColumnType[i].bNativeDataType
57346>>>>            Move 6                                       to aColumnType[i].iDefaultSize
57347>>>>            Move 6                                       to aColumnType[i].iMinSize
57348>>>>            Move 23                                      to aColumnType[i].nMaxSize
57349>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57350>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57351>>>>            Move 23                                      to aColumnType[i].sPrecision
57352>>>>            Increment i
57353>>>>
57353>>>>            Move "datetime2"                             to aColumnType[i].sSQLType
57354>>>>            Move 42                                      to aColumnType[i].iSQLType
57355>>>>            Move True                                    to aColumnType[i].bCanEditSize
57356>>>>            Move True                                    to aColumnType[i].bNativeDataType
57357>>>>            Move 6                                       to aColumnType[i].iDefaultSize
57358>>>>            Move 6                                       to aColumnType[i].iMinSize
57359>>>>            Move 23                                      to aColumnType[i].nMaxSize
57360>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57361>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57362>>>>            Move 23                                      to aColumnType[i].sPrecision
57363>>>>            Increment i
57364>>>>
57364>>>>            Move "datetimeoffset"                        to aColumnType[i].sSQLType
57365>>>>            Move 43                                      to aColumnType[i].iSQLType
57366>>>>            Move True                                    to aColumnType[i].bCanEditSize
57367>>>>            Move True                                    to aColumnType[i].bNativeDataType
57368>>>>            Move 12                                      to aColumnType[i].iDefaultSize
57369>>>>            Move 12                                      to aColumnType[i].iMinSize
57370>>>>            Move 23                                      to aColumnType[i].nMaxSize
57371>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57372>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57373>>>>            Move 23                                      to aColumnType[i].sPrecision
57374>>>>            Increment i
57375>>>>
57375>>>>            Move "decimal"                               to aColumnType[i].sSQLType
57376>>>>            Move 3                                       to aColumnType[i].iSQLType
57377>>>>            Move True                                    to aColumnType[i].bCanEditSize
57378>>>>            Move True                                    to aColumnType[i].bNativeDataType
57379>>>>            Move 14                                      to aColumnType[i].iDefaultSize
57380>>>>            Move 1                                       to aColumnType[i].iMinSize
57381>>>>            Move 14                                      to aColumnType[i].nMaxSize
57382>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57383>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57384>>>>            Move 14                                      to aColumnType[i].sPrecision
57385>>>>            Increment i
57386>>>>
57386>>>>            Move "float"                                 to aColumnType[i].sSQLType
57387>>>>            Move 6                                       to aColumnType[i].iSQLType
57388>>>>            Move True                                    to aColumnType[i].bCanEditSize
57389>>>>            Move True                                    to aColumnType[i].bNativeDataType
57390>>>>            Move 14                                      to aColumnType[i].iDefaultSize
57391>>>>            Move 1                                       to aColumnType[i].iMinSize
57392>>>>            Move 14                                      to aColumnType[i].nMaxSize
57393>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57394>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57395>>>>            Move 14                                      to aColumnType[i].sPrecision
57396>>>>            Increment i
57397>>>>
57397>>>>            Move "geography"                             to aColumnType[i].sSQLType
57398>>>>            Move 130                                     to aColumnType[i].iSQLType
57399>>>>            Move False                                   to aColumnType[i].bCanEditSize
57400>>>>            Move True                                    to aColumnType[i].bNativeDataType
57401>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
57402>>>>            Move -1                                      to aColumnType[i].iMinSize
57403>>>>            Move -1                                      to aColumnType[i].nMaxSize
57404>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57405>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57406>>>>            Move -1                                      to aColumnType[i].sPrecision
57407>>>>            Increment i
57408>>>>
57408>>>>            Move "geometry"                              to aColumnType[i].sSQLType
57409>>>>            Move 129                                     to aColumnType[i].iSQLType
57410>>>>            Move False                                   to aColumnType[i].bCanEditSize
57411>>>>            Move True                                    to aColumnType[i].bNativeDataType
57412>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
57413>>>>            Move -1                                      to aColumnType[i].iMinSize
57414>>>>            Move -1                                      to aColumnType[i].nMaxSize
57415>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57416>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57417>>>>            Move -1                                      to aColumnType[i].sPrecision
57418>>>>            Increment i
57419>>>>
57419>>>>            Move "hierarchyid"                           to aColumnType[i].sSQLType
57420>>>>            Move 128                                     to aColumnType[i].iSQLType
57421>>>>            Move False                                   to aColumnType[i].bCanEditSize
57422>>>>            Move True                                    to aColumnType[i].bNativeDataType
57423>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
57424>>>>            Move -1                                      to aColumnType[i].iMinSize
57425>>>>            Move -1                                      to aColumnType[i].nMaxSize
57426>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57427>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57428>>>>            Move -1                                      to aColumnType[i].sPrecision
57429>>>>            Increment i
57430>>>>
57430>>>>            Move "image"                                 to aColumnType[i].sSQLType
57431>>>>            Move -4                                      to aColumnType[i].iSQLType
57432>>>>            Move True                                    to aColumnType[i].bCanEditSize
57433>>>>            Move True                                    to aColumnType[i].bNativeDataType
57434>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
57435>>>>            Move 1                                       to aColumnType[i].iMinSize
57436>>>>            Move 16384                                   to aColumnType[i].nMaxSize
57437>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
57438>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
57439>>>>            Move 16384                                   to aColumnType[i].sPrecision
57440>>>>            Increment i
57441>>>>
57441>>>>            Move "int"                                   to aColumnType[i].sSQLType
57442>>>>            Move 4                                       to aColumnType[i].iSQLType
57443>>>>            Move True                                    to aColumnType[i].bCanEditSize
57444>>>>            Move True                                    to aColumnType[i].bNativeDataType
57445>>>>            Move 11                                      to aColumnType[i].iDefaultSize
57446>>>>            Move 1                                       to aColumnType[i].iMinSize
57447>>>>            Move 11                                      to aColumnType[i].nMaxSize
57448>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57449>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57450>>>>            Move 11                                      to aColumnType[i].sPrecision
57451>>>>            Increment i
57452>>>>
57452>>>>            Move "nchar"                                 to aColumnType[i].sSQLType
57453>>>>            Move -8                                      to aColumnType[i].iSQLType
57454>>>>            Move True                                    to aColumnType[i].bCanEditSize
57455>>>>            Move True                                    to aColumnType[i].bNativeDataType
57456>>>>            Move -1                                      to aColumnType[i].iDefaultSize
57457>>>>            Move 1                                       to aColumnType[i].iMinSize
57458>>>>            Move 4000                                    to aColumnType[i].nMaxSize
57459>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57460>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57461>>>>            Move 4000                                    to aColumnType[i].sPrecision
57462>>>>            Increment i
57463>>>>
57463>>>>            Move "ntext"                                 to aColumnType[i].sSQLType
57464>>>>            Move -10                                     to aColumnType[i].iSQLType
57465>>>>            Move True                                    to aColumnType[i].bCanEditSize
57466>>>>            Move True                                    to aColumnType[i].bNativeDataType
57467>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
57468>>>>            Move 1                                       to aColumnType[i].iMinSize
57469>>>>            Move 16384                                   to aColumnType[i].nMaxSize
57470>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
57471>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
57472>>>>            Move 16384                                   to aColumnType[i].sPrecision
57473>>>>            Increment i
57474>>>>
57474>>>>            Move "numeric"                               to aColumnType[i].sSQLType
57475>>>>            Move 2                                       to aColumnType[i].iSQLType
57476>>>>            Move True                                    to aColumnType[i].bCanEditSize
57477>>>>            Move True                                    to aColumnType[i].bNativeDataType
57478>>>>            Move 14                                      to aColumnType[i].iDefaultSize
57479>>>>            Move 1                                       to aColumnType[i].iMinSize
57480>>>>            Move 14                                      to aColumnType[i].nMaxSize
57481>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57482>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57483>>>>            Move 14                                      to aColumnType[i].sPrecision
57484>>>>            Increment i
57485>>>>
57485>>>>            Move "nvarchar"                              to aColumnType[i].sSQLType
57486>>>>            Move -9                                      to aColumnType[i].iSQLType
57487>>>>            Move True                                    to aColumnType[i].bCanEditSize
57488>>>>            Move True                                    to aColumnType[i].bNativeDataType
57489>>>>            Move 1                                       to aColumnType[i].iDefaultSize
57490>>>>            Move 1                                       to aColumnType[i].iMinSize
57491>>>>            Move 4000                                    to aColumnType[i].nMaxSize
57492>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57493>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57494>>>>            Move 4000                                    to aColumnType[i].sPrecision
57495>>>>            Increment i
57496>>>>
57496>>>>            Move "nvarchar(max)"                         to aColumnType[i].sSQLType
57497>>>>            Move -100                                    to aColumnType[i].iSQLType
57498>>>>            Move True                                    to aColumnType[i].bCanEditSize
57499>>>>            Move True                                    to aColumnType[i].bNativeDataType
57500>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
57501>>>>            Move 1                                       to aColumnType[i].iMinSize
57502>>>>            Move 16384                                   to aColumnType[i].nMaxSize
57503>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57504>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57505>>>>            Move 16384                                   to aColumnType[i].sPrecision
57506>>>>            Increment i
57507>>>>
57507>>>>            Move "real"                                  to aColumnType[i].sSQLType
57508>>>>            Move 7                                       to aColumnType[i].iSQLType
57509>>>>            Move True                                    to aColumnType[i].bCanEditSize
57510>>>>            Move True                                    to aColumnType[i].bNativeDataType
57511>>>>            Move 14                                      to aColumnType[i].iDefaultSize
57512>>>>            Move 1                                       to aColumnType[i].iMinSize
57513>>>>            Move 14                                      to aColumnType[i].nMaxSize
57514>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57515>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57516>>>>            Move 14                                      to aColumnType[i].sPrecision
57517>>>>            Increment i
57518>>>>
57518>>>>            Move "smalldatetime"                         to aColumnType[i].sSQLType
57519>>>>            Move 58                                      to aColumnType[i].iSQLType
57520>>>>            Move True                                    to aColumnType[i].bCanEditSize
57521>>>>            Move True                                    to aColumnType[i].bNativeDataType
57522>>>>            Move 12                                      to aColumnType[i].iDefaultSize
57523>>>>            Move 12                                      to aColumnType[i].iMinSize
57524>>>>            Move 23                                      to aColumnType[i].nMaxSize
57525>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57526>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57527>>>>            Move 23                                      to aColumnType[i].sPrecision
57528>>>>            Increment i
57529>>>>
57529>>>>            Move "smallint"                              to aColumnType[i].sSQLType
57530>>>>            Move 5                                       to aColumnType[i].iSQLType
57531>>>>            Move True                                    to aColumnType[i].bCanEditSize
57532>>>>            Move True                                    to aColumnType[i].bNativeDataType
57533>>>>            Move 6                                       to aColumnType[i].iDefaultSize
57534>>>>            Move -1                                      to aColumnType[i].iMinSize
57535>>>>            Move 6                                       to aColumnType[i].nMaxSize
57536>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57537>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57538>>>>            Move 6                                       to aColumnType[i].sPrecision
57539>>>>            Increment i
57540>>>>
57540>>>>            Move "sql_variant"                           to aColumnType[i].sSQLType
57541>>>>            Move -150                                    to aColumnType[i].iSQLType
57542>>>>            Move False                                   to aColumnType[i].bCanEditSize
57543>>>>            Move True                                    to aColumnType[i].bNativeDataType
57544>>>>            Move 8016                                    to aColumnType[i].iDefaultSize
57545>>>>            Move -1                                      to aColumnType[i].iMinSize
57546>>>>            Move -1                                      to aColumnType[i].nMaxSize
57547>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57548>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57549>>>>            Move -1                                      to aColumnType[i].sPrecision
57550>>>>            Increment i
57551>>>>
57551>>>>            Move "text"                                  to aColumnType[i].sSQLType
57552>>>>            Move -1                                      to aColumnType[i].iSQLType
57553>>>>            Move True                                    to aColumnType[i].bCanEditSize
57554>>>>            Move True                                    to aColumnType[i].bNativeDataType
57555>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
57556>>>>            Move 1                                       to aColumnType[i].iMinSize
57557>>>>            Move 16384                                   to aColumnType[i].nMaxSize
57558>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
57559>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
57560>>>>            Move 16384                                   to aColumnType[i].sPrecision
57561>>>>            Increment i
57562>>>>
57562>>>>            Move "time"                                  to aColumnType[i].sSQLType
57563>>>>            Move 41                                      to aColumnType[i].iSQLType
57564>>>>            Move True                                    to aColumnType[i].bCanEditSize
57565>>>>            Move True                                    to aColumnType[i].bNativeDataType
57566>>>>            Move 8                                       to aColumnType[i].iDefaultSize
57567>>>>            Move 8                                       to aColumnType[i].iMinSize
57568>>>>            Move 16                                      to aColumnType[i].nMaxSize
57569>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57570>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57571>>>>            Move 16                                      to aColumnType[i].sPrecision
57572>>>>            Increment i
57573>>>>
57573>>>>            Move "timestamp"                             to aColumnType[i].sSQLType
57574>>>>            Move 93                                      to aColumnType[i].iSQLType
57575>>>>            Move False                                   to aColumnType[i].bCanEditSize
57576>>>>            Move True                                    to aColumnType[i].bNativeDataType
57577>>>>            Move 8                                       to aColumnType[i].iDefaultSize
57578>>>>            Move -1                                      to aColumnType[i].iMinSize
57579>>>>            Move -1                                      to aColumnType[i].nMaxSize
57580>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
57581>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
57582>>>>            Move -1                                      to aColumnType[i].sPrecision
57583>>>>            Increment i
57584>>>>
57584>>>>            Move "tinyint"                               to aColumnType[i].sSQLType
57585>>>>            Move -6                                      to aColumnType[i].iSQLType
57586>>>>            Move True                                    to aColumnType[i].bCanEditSize
57587>>>>            Move True                                    to aColumnType[i].bNativeDataType
57588>>>>            Move 3                                       to aColumnType[i].iDefaultSize
57589>>>>            Move -1                                      to aColumnType[i].iMinSize
57590>>>>            Move 3                                       to aColumnType[i].nMaxSize
57591>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57592>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57593>>>>            Move 3                                       to aColumnType[i].sPrecision
57594>>>>            Increment i
57595>>>>
57595>>>>            Move "uniqueidentifier"                      to aColumnType[i].sSQLType
57596>>>>            Move -11                                     to aColumnType[i].iSQLType
57597>>>>            Move False                                   to aColumnType[i].bCanEditSize
57598>>>>            Move True                                    to aColumnType[i].bNativeDataType
57599>>>>            Move 38                                      to aColumnType[i].iDefaultSize
57600>>>>            Move -1                                      to aColumnType[i].iMinSize
57601>>>>            Move -1                                      to aColumnType[i].nMaxSize
57602>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57603>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57604>>>>            Move -1                                      to aColumnType[i].sPrecision
57605>>>>            Increment i
57606>>>>
57606>>>>            Move "varbinary"                             to aColumnType[i].sSQLType
57607>>>>            Move -3                                      to aColumnType[i].iSQLType
57608>>>>            Move True                                    to aColumnType[i].bCanEditSize
57609>>>>            Move True                                    to aColumnType[i].bNativeDataType
57610>>>>            Move 8000                                    to aColumnType[i].iDefaultSize
57611>>>>            Move 1                                       to aColumnType[i].iMinSize
57612>>>>            Move 8000                                    to aColumnType[i].nMaxSize
57613>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
57614>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
57615>>>>            Move 8000                                    to aColumnType[i].sPrecision
57616>>>>            Increment i
57617>>>>
57617>>>>            Move "varbinary(max)"                        to aColumnType[i].sSQLType
57618>>>>            Move -98                                     to aColumnType[i].iSQLType
57619>>>>            Move True                                    to aColumnType[i].bCanEditSize
57620>>>>            Move True                                    to aColumnType[i].bNativeDataType
57621>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
57622>>>>            Move 1                                       to aColumnType[i].iMinSize
57623>>>>            Move 16384                                   to aColumnType[i].nMaxSize
57624>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57625>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57626>>>>            Move 16384                                   to aColumnType[i].sPrecision
57627>>>>            Increment i
57628>>>>
57628>>>>            Move "varchar"                               to aColumnType[i].sSQLType
57629>>>>            Move 12                                      to aColumnType[i].iSQLType
57630>>>>            Move True                                    to aColumnType[i].bCanEditSize
57631>>>>            Move True                                    to aColumnType[i].bNativeDataType
57632>>>>            Move 1                                       to aColumnType[i].iDefaultSize
57633>>>>            Move 1                                       to aColumnType[i].iMinSize
57634>>>>            Move 8000                                    to aColumnType[i].nMaxSize
57635>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57636>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57637>>>>            Move 8000                                    to aColumnType[i].sPrecision
57638>>>>            Increment i
57639>>>>
57639>>>>            Move "varchar(max)"                          to aColumnType[i].sSQLType
57640>>>>            Move -99                                     to aColumnType[i].iSQLType
57641>>>>            Move True                                    to aColumnType[i].bCanEditSize
57642>>>>            Move True                                    to aColumnType[i].bNativeDataType
57643>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
57644>>>>            Move 1                                       to aColumnType[i].iMinSize
57645>>>>            Move 16384                                   to aColumnType[i].nMaxSize
57646>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57647>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57648>>>>            Move 16384                                   to aColumnType[i].sPrecision
57649>>>>            Increment i
57650>>>>
57650>>>>            Move "xml"                                   to aColumnType[i].sSQLType
57651>>>>            Move -370                                    to aColumnType[i].iSQLType
57652>>>>            Move True                                    to aColumnType[i].bCanEditSize
57653>>>>            Move True                                    to aColumnType[i].bNativeDataType
57654>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
57655>>>>            Move 1                                       to aColumnType[i].iMinSize
57656>>>>            Move 16384                                   to aColumnType[i].nMaxSize
57657>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57658>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57659>>>>            Move 16384                                   to aColumnType[i].sPrecision
57660>>>>            Increment i
57661>>>>
57661>>>>
57661>>>
57661>>>//            Move eSQLServer_BIGINT  to ColumnType[i].iSQLType
57661>>>//            Move "BigInt"           to ColumnType[i].sSQLType
57661>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
57661>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
57661>>>//            Move "14.0"             to ColumnType[i].sPrecision
57661>>>//            Move True               to ColumnType[i].bCanEditSize
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_BINARY  to ColumnType[i].iSQLType
57661>>>//            Move "Binary"           to ColumnType[i].sSQLType
57661>>>//            Move DF_BINARY          to ColumnType[i].iDataFlexType
57661>>>//            Move "Binary"           to ColumnType[i].sDataFlexType
57661>>>//            Move "8000"             to ColumnType[i].sPrecision
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_BIT     to ColumnType[i].iSQLType
57661>>>//            Move "Bit"              to ColumnType[i].sSQLType
57661>>>//            Move DF_ASCII           to ColumnType[i].iDataFlexType
57661>>>//            Move "ASCII"            to ColumnType[i].sDataFlexType
57661>>>//            Move "1.0"              to ColumnType[i].sPrecision
57661>>>//            Move True               to ColumnType[i].bCanEditSize // In SQL allows 1, 0, or "NULL"
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_CHAR    to ColumnType[i].iSQLType
57661>>>//            Move "Char"             to ColumnType[i].sSQLType
57661>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
57661>>>//            Move "Text"             to ColumnType[i].sDataFlexType
57661>>>//            Move "8000"             to ColumnType[i].sPrecision
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_DATE    to ColumnType[i].iSQLType
57661>>>//            Move "Date"             to ColumnType[i].sSQLType
57661>>>//            Move DF_DATE            to ColumnType[i].iDataFlexType
57661>>>//            Move "Date"             to ColumnType[i].sDataFlexType
57661>>>//            Move "6.0"              to ColumnType[i].sPrecision
57661>>>//            Move True               to ColumnType[i].bCanEditSize
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_DATETIME    to ColumnType[i].iSQLType
57661>>>//            Move "DateTime"             to ColumnType[i].sSQLType
57661>>>//            Move DF_DATETIME            to ColumnType[i].iDataFlexType
57661>>>//            Move "DateTime"             to ColumnType[i].sDataFlexType
57661>>>//            Move "23.3"                 to ColumnType[i].sPrecision
57661>>>//            Move True                   to ColumnType[i].bCanEditSize
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_DATETIME2   to ColumnType[i].iSQLType
57661>>>//            Move "DateTime2"            to ColumnType[i].sSQLType
57661>>>//            Move DF_DATETIME            to ColumnType[i].iDataFlexType
57661>>>//            Move "DateTime"             to ColumnType[i].sDataFlexType
57661>>>//            Move "23.6"                 to ColumnType[i].sPrecision
57661>>>//            Move True                   to ColumnType[i].bCanEditSize
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_DATETIMEOFFSET  to ColumnType[i].iSQLType
57661>>>//            Move "DateTimeOffest"           to ColumnType[i].sSQLType
57661>>>//            Move DF_DATETIME                to ColumnType[i].iDataFlexType
57661>>>//            Move "DateTime"                 to ColumnType[i].sDataFlexType
57661>>>//            Move "23.0"                     to ColumnType[i].sPrecision
57661>>>//            Move True                       to ColumnType[i].bCanEditSize
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_DECIMAL to ColumnType[i].iSQLType
57661>>>//            Move "Decimal"          to ColumnType[i].sSQLType
57661>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
57661>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
57661>>>//            Move "14.8"             to ColumnType[i].sPrecision
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_DOUBLE  to ColumnType[i].iSQLType
57661>>>//            Move "Double"           to ColumnType[i].sSQLType
57661>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
57661>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
57661>>>//            Move "14.8"             to ColumnType[i].sPrecision
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_FLOAT   to ColumnType[i].iSQLType
57661>>>//            Move "Float"            to ColumnType[i].sSQLType
57661>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
57661>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
57661>>>//            Move "14.8"             to ColumnType[i].sPrecision
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_INT     to ColumnType[i].iSQLType
57661>>>//            Move "Int"              to ColumnType[i].sSQLType
57661>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
57661>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
57661>>>//            Move "11.0"             to ColumnType[i].sPrecision
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_NCHAR   to ColumnType[i].iSQLType
57661>>>//            Move "Nchar"            to ColumnType[i].sSQLType
57661>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
57661>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
57661>>>//            Move "4000"             to ColumnType[i].sPrecision
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_NTEXT   to ColumnType[i].iSQLType
57661>>>//            Move "Ntext"            to ColumnType[i].sSQLType
57661>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
57661>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
57661>>>//            Move "16384"            to ColumnType[i].sPrecision
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_NUMERIC to ColumnType[i].iSQLType
57661>>>//            Move "Numeric"          to ColumnType[i].sSQLType
57661>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
57661>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
57661>>>//            Move "14.8"             to ColumnType[i].sPrecision
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_NVARCHAR    to ColumnType[i].iSQLType
57661>>>//            Move "NvarChar"             to ColumnType[i].sSQLType
57661>>>//            Move DF_TEXT                to ColumnType[i].iDataFlexType
57661>>>//            Move "Text"                 to ColumnType[i].sDataFlexType
57661>>>//            Move "4000"                 to ColumnType[i].sPrecision
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_NVARCHARMAX to ColumnType[i].iSQLType
57661>>>//            Move "NvarCharMax"          to ColumnType[i].sSQLType
57661>>>//            Move DF_TEXT                to ColumnType[i].iDataFlexType
57661>>>//            Move "Text"                 to ColumnType[i].sDataFlexType
57661>>>//            Move "16384"                to ColumnType[i].sPrecision
57661>>>//            Move True                   to ColumnType[i].bCanEditSize
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_REAL    to ColumnType[i].iSQLType
57661>>>//            Move "Real"             to ColumnType[i].sSQLType
57661>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
57661>>>//            Move "NUMERIC"          to ColumnType[i].sDataFlexType
57661>>>//            Move "14.8"             to ColumnType[i].sPrecision
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_SMALLDATETIME   to ColumnType[i].iSQLType
57661>>>//            Move "SmallDateTime"            to ColumnType[i].sSQLType
57661>>>//            Move DF_DATETIME                to ColumnType[i].iDataFlexType
57661>>>//            Move "DATETIME"                 to ColumnType[i].sDataFlexType
57661>>>//            Move "23.0"                     to ColumnType[i].sPrecision
57661>>>//            Move True                       to ColumnType[i].bCanEditSize
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_SMALLINT    to ColumnType[i].iSQLType
57661>>>//            Move "SmallInt"             to ColumnType[i].sSQLType
57661>>>//            Move DF_BCD                 to ColumnType[i].iDataFlexType
57661>>>//            Move "NUMERIC"              to ColumnType[i].sDataFlexType
57661>>>//            Move "6.0"                  to ColumnType[i].sPrecision
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_TEXT    to ColumnType[i].iSQLType
57661>>>//            Move "Text"             to ColumnType[i].sSQLType
57661>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
57661>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
57661>>>//            Move "8000"             to ColumnType[i].sPrecision
57661>>>//            Move True               to ColumnType[i].bCanEditSize
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_TIME    to ColumnType[i].iSQLType
57661>>>//            Move "Time"             to ColumnType[i].sSQLType
57661>>>//            Move DF_ASCII           to ColumnType[i].iDataFlexType
57661>>>//            Move "Date"             to ColumnType[i].sDataFlexType
57661>>>//            Move "16.0"             to ColumnType[i].sPrecision
57661>>>//            Move True               to ColumnType[i].bCanEditSize
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_TIMESTAMP   to ColumnType[i].iSQLType
57661>>>//            Move "TimeStamp"            to ColumnType[i].sSQLType
57661>>>//            Move DF_ASCII               to ColumnType[i].iDataFlexType
57661>>>//            Move "DateTime"             to ColumnType[i].sDataFlexType
57661>>>//            Move "8.0"                  to ColumnType[i].sPrecision
57661>>>//            Move True                   to ColumnType[i].bCanEditSize
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_TINYINT to ColumnType[i].iSQLType
57661>>>//            Move "TinyInt"          to ColumnType[i].sSQLType
57661>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
57661>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
57661>>>//            Move "3.0"              to ColumnType[i].sPrecision
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_GUID    to ColumnType[i].iSQLType
57661>>>//            Move "UniqueIdentifier" to ColumnType[i].sSQLType
57661>>>//            Move DF_ASCII           to ColumnType[i].iDataFlexType
57661>>>//            Move "ASCII"            to ColumnType[i].sDataFlexType
57661>>>//            Move "38"               to ColumnType[i].sPrecision
57661>>>//            Move True               to ColumnType[i].bCanEditSize
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_VARBINARY   to ColumnType[i].iSQLType
57661>>>//            Move "VarBinary"            to ColumnType[i].sSQLType
57661>>>//            Move DF_BINARY              to ColumnType[i].iDataFlexType
57661>>>//            Move "BINARY"               to ColumnType[i].sDataFlexType
57661>>>//            Move "8000"                 to ColumnType[i].sPrecision
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_VARBINARYMAX to ColumnType[i].iSQLType
57661>>>//            Move "VarBinary(Max)"        to ColumnType[i].sSQLType
57661>>>//            Move DF_BINARY               to ColumnType[i].iDataFlexType
57661>>>//            Move "BINARY"                to ColumnType[i].sDataFlexType
57661>>>//            Move "16384"                 to ColumnType[i].sPrecision
57661>>>//            Move True                    to ColumnType[i].bCanEditSize
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_VARCHAR to ColumnType[i].iSQLType
57661>>>//            Move "VarChar"          to ColumnType[i].sSQLType
57661>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType // ToDo: Under 255 = ASCII type! How to deal with this?
57661>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
57661>>>//            Move "8000"             to ColumnType[i].sPrecision
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_VARCHARMAX  to ColumnType[i].iSQLType
57661>>>//            Move "VarChar(Max)"         to ColumnType[i].sSQLType
57661>>>//            Move DF_TEXT                to ColumnType[i].iDataFlexType
57661>>>//            Move "TEXT"                 to ColumnType[i].sDataFlexType
57661>>>//            Move "16384"                to ColumnType[i].sPrecision
57661>>>//            Move True                   to ColumnType[i].bCanEditSize
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_SQLVARIANT  to ColumnType[i].iSQLType
57661>>>//            Move "SQL_Variant"          to ColumnType[i].sSQLType
57661>>>//            Move DF_BINARY              to ColumnType[i].iDataFlexType
57661>>>//            Move "Binary"               to ColumnType[i].sDataFlexType
57661>>>//            Move "8016"                 to ColumnType[i].sPrecision
57661>>>//            Move True                   to ColumnType[i].bCanEditSize
57661>>>//            Increment i
57661>>>//
57661>>>//            Move eSQLServer_XML     to ColumnType[i].iSQLType
57661>>>//            Move "XML"              to ColumnType[i].sSQLType
57661>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
57661>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
57661>>>//            Move "16384"            to ColumnType[i].sPrecision
57661>>>        End
57661>>>>
57661>>>
57661>>>        Function_Return aColumnType
57662>>>    End_Function
57663>>>
57663>>>    // MySQL Data Types
57663>>>    Function _UtilEnumerateMySQLTypes Returns tColumnType[]
57665>>>        tColumnType[] aColumnType
57665>>>        tColumnType[] aColumnType
57666>>>        Integer i
57666>>>
Including file: mdsmysql_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\mdsmysql_DriverDef.inc)
57666>>>>// Generated By The Database Update Framework
57666>>>>// Driver XML File: C:\Program Files (x86)\DataFlex 19.0\Bin\mdsmysql_DriverDef.xml
57666>>>>// Driver COLUMN DATA TYPES
57666>>>>//
57666>>>>// Created: 2018-03-14 23:46:49.593
57666>>>>
57666>>>>            Move "bigint"                                to aColumnType[i].sSQLType
57667>>>>            Move 8                                       to aColumnType[i].iSQLType
57668>>>>            Move True                                    to aColumnType[i].bCanEditSize
57669>>>>            Move True                                    to aColumnType[i].bNativeDataType
57670>>>>            Move 14                                      to aColumnType[i].iDefaultSize
57671>>>>            Move 1                                       to aColumnType[i].iMinSize
57672>>>>            Move 14                                      to aColumnType[i].nMaxSize
57673>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57674>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57675>>>>            Move 14                                      to aColumnType[i].sPrecision
57676>>>>            Increment i
57677>>>>
57677>>>>            Move "bit"                                   to aColumnType[i].sSQLType
57678>>>>            Move 16                                      to aColumnType[i].iSQLType
57679>>>>            Move True                                    to aColumnType[i].bCanEditSize
57680>>>>            Move True                                    to aColumnType[i].bNativeDataType
57681>>>>            Move -1                                      to aColumnType[i].iDefaultSize
57682>>>>            Move -1                                      to aColumnType[i].iMinSize
57683>>>>            Move 64                                      to aColumnType[i].nMaxSize
57684>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57685>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57686>>>>            Move 64                                      to aColumnType[i].sPrecision
57687>>>>            Increment i
57688>>>>
57688>>>>            Move "blob"                                  to aColumnType[i].sSQLType
57689>>>>            Move 252                                     to aColumnType[i].iSQLType
57690>>>>            Move True                                    to aColumnType[i].bCanEditSize
57691>>>>            Move True                                    to aColumnType[i].bNativeDataType
57692>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
57693>>>>            Move 1                                       to aColumnType[i].iMinSize
57694>>>>            Move 16384                                   to aColumnType[i].nMaxSize
57695>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
57696>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
57697>>>>            Move 16384                                   to aColumnType[i].sPrecision
57698>>>>            Increment i
57699>>>>
57699>>>>            Move "char"                                  to aColumnType[i].sSQLType
57700>>>>            Move 254                                     to aColumnType[i].iSQLType
57701>>>>            Move True                                    to aColumnType[i].bCanEditSize
57702>>>>            Move True                                    to aColumnType[i].bNativeDataType
57703>>>>            Move 1                                       to aColumnType[i].iDefaultSize
57704>>>>            Move 1                                       to aColumnType[i].iMinSize
57705>>>>            Move 255                                     to aColumnType[i].nMaxSize
57706>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57707>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57708>>>>            Move 255                                     to aColumnType[i].sPrecision
57709>>>>            Increment i
57710>>>>
57710>>>>            Move "date"                                  to aColumnType[i].sSQLType
57711>>>>            Move 10                                      to aColumnType[i].iSQLType
57712>>>>            Move False                                   to aColumnType[i].bCanEditSize
57713>>>>            Move True                                    to aColumnType[i].bNativeDataType
57714>>>>            Move 6                                       to aColumnType[i].iDefaultSize
57715>>>>            Move -1                                      to aColumnType[i].iMinSize
57716>>>>            Move -1                                      to aColumnType[i].nMaxSize
57717>>>>            Move "DF_DATE"                               to aColumnType[i].sDataFlexType
57718>>>>            Move DF_DATE                                 to aColumnType[i].iDataFlexType
57719>>>>            Move 6                                       to aColumnType[i].sPrecision
57720>>>>            Increment i
57721>>>>
57721>>>>            Move "datetime"                              to aColumnType[i].sSQLType
57722>>>>            Move 12                                      to aColumnType[i].iSQLType
57723>>>>            Move True                                    to aColumnType[i].bCanEditSize
57724>>>>            Move True                                    to aColumnType[i].bNativeDataType
57725>>>>            Move 23                                      to aColumnType[i].iDefaultSize
57726>>>>            Move 6                                       to aColumnType[i].iMinSize
57727>>>>            Move 23                                      to aColumnType[i].nMaxSize
57728>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
57729>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
57730>>>>            Move 23                                      to aColumnType[i].sPrecision
57731>>>>            Increment i
57732>>>>
57732>>>>            Move "decimal"                               to aColumnType[i].sSQLType
57733>>>>            Move 246                                     to aColumnType[i].iSQLType
57734>>>>            Move True                                    to aColumnType[i].bCanEditSize
57735>>>>            Move True                                    to aColumnType[i].bNativeDataType
57736>>>>            Move 14                                      to aColumnType[i].iDefaultSize
57737>>>>            Move -1                                      to aColumnType[i].iMinSize
57738>>>>            Move 14                                      to aColumnType[i].nMaxSize
57739>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57740>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57741>>>>            Move 14                                      to aColumnType[i].sPrecision
57742>>>>            Increment i
57743>>>>
57743>>>>            Move "decimal-MySQL4"                        to aColumnType[i].sSQLType
57744>>>>            Move 0                                       to aColumnType[i].iSQLType
57745>>>>            Move True                                    to aColumnType[i].bCanEditSize
57746>>>>            Move True                                    to aColumnType[i].bNativeDataType
57747>>>>            Move 14                                      to aColumnType[i].iDefaultSize
57748>>>>            Move -1                                      to aColumnType[i].iMinSize
57749>>>>            Move 14                                      to aColumnType[i].nMaxSize
57750>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57751>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57752>>>>            Move 14                                      to aColumnType[i].sPrecision
57753>>>>            Increment i
57754>>>>
57754>>>>            Move "double"                                to aColumnType[i].sSQLType
57755>>>>            Move 5                                       to aColumnType[i].iSQLType
57756>>>>            Move True                                    to aColumnType[i].bCanEditSize
57757>>>>            Move True                                    to aColumnType[i].bNativeDataType
57758>>>>            Move 14                                      to aColumnType[i].iDefaultSize
57759>>>>            Move -1                                      to aColumnType[i].iMinSize
57760>>>>            Move 14                                      to aColumnType[i].nMaxSize
57761>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57762>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57763>>>>            Move 14                                      to aColumnType[i].sPrecision
57764>>>>            Increment i
57765>>>>
57765>>>>            Move "enum"                                  to aColumnType[i].sSQLType
57766>>>>            Move 247                                     to aColumnType[i].iSQLType
57767>>>>            Move True                                    to aColumnType[i].bCanEditSize
57768>>>>            Move True                                    to aColumnType[i].bNativeDataType
57769>>>>            Move -1                                      to aColumnType[i].iDefaultSize
57770>>>>            Move -1                                      to aColumnType[i].iMinSize
57771>>>>            Move 255                                     to aColumnType[i].nMaxSize
57772>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57773>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57774>>>>            Move 255                                     to aColumnType[i].sPrecision
57775>>>>            Increment i
57776>>>>
57776>>>>            Move "float"                                 to aColumnType[i].sSQLType
57777>>>>            Move 4                                       to aColumnType[i].iSQLType
57778>>>>            Move True                                    to aColumnType[i].bCanEditSize
57779>>>>            Move True                                    to aColumnType[i].bNativeDataType
57780>>>>            Move 4                                       to aColumnType[i].iDefaultSize
57781>>>>            Move -1                                      to aColumnType[i].iMinSize
57782>>>>            Move 14                                      to aColumnType[i].nMaxSize
57783>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57784>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57785>>>>            Move 14                                      to aColumnType[i].sPrecision
57786>>>>            Increment i
57787>>>>
57787>>>>            Move "int"                                   to aColumnType[i].sSQLType
57788>>>>            Move 3                                       to aColumnType[i].iSQLType
57789>>>>            Move True                                    to aColumnType[i].bCanEditSize
57790>>>>            Move True                                    to aColumnType[i].bNativeDataType
57791>>>>            Move 10                                      to aColumnType[i].iDefaultSize
57792>>>>            Move -1                                      to aColumnType[i].iMinSize
57793>>>>            Move 11                                      to aColumnType[i].nMaxSize
57794>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57795>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57796>>>>            Move 11                                      to aColumnType[i].sPrecision
57797>>>>            Increment i
57798>>>>
57798>>>>            Move "longblob"                              to aColumnType[i].sSQLType
57799>>>>            Move 251                                     to aColumnType[i].iSQLType
57800>>>>            Move True                                    to aColumnType[i].bCanEditSize
57801>>>>            Move True                                    to aColumnType[i].bNativeDataType
57802>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
57803>>>>            Move 1                                       to aColumnType[i].iMinSize
57804>>>>            Move 16384                                   to aColumnType[i].nMaxSize
57805>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
57806>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
57807>>>>            Move 16384                                   to aColumnType[i].sPrecision
57808>>>>            Increment i
57809>>>>
57809>>>>            Move "longtext"                              to aColumnType[i].sSQLType
57810>>>>            Move -251                                    to aColumnType[i].iSQLType
57811>>>>            Move True                                    to aColumnType[i].bCanEditSize
57812>>>>            Move True                                    to aColumnType[i].bNativeDataType
57813>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
57814>>>>            Move 1                                       to aColumnType[i].iMinSize
57815>>>>            Move 16384                                   to aColumnType[i].nMaxSize
57816>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
57817>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
57818>>>>            Move 16384                                   to aColumnType[i].sPrecision
57819>>>>            Increment i
57820>>>>
57820>>>>            Move "mediumblob"                            to aColumnType[i].sSQLType
57821>>>>            Move 250                                     to aColumnType[i].iSQLType
57822>>>>            Move True                                    to aColumnType[i].bCanEditSize
57823>>>>            Move True                                    to aColumnType[i].bNativeDataType
57824>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
57825>>>>            Move 1                                       to aColumnType[i].iMinSize
57826>>>>            Move 16384                                   to aColumnType[i].nMaxSize
57827>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
57828>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
57829>>>>            Move 16384                                   to aColumnType[i].sPrecision
57830>>>>            Increment i
57831>>>>
57831>>>>            Move "mediumint"                             to aColumnType[i].sSQLType
57832>>>>            Move 9                                       to aColumnType[i].iSQLType
57833>>>>            Move True                                    to aColumnType[i].bCanEditSize
57834>>>>            Move True                                    to aColumnType[i].bNativeDataType
57835>>>>            Move 8                                       to aColumnType[i].iDefaultSize
57836>>>>            Move 1                                       to aColumnType[i].iMinSize
57837>>>>            Move 9                                       to aColumnType[i].nMaxSize
57838>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57839>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57840>>>>            Move 9                                       to aColumnType[i].sPrecision
57841>>>>            Increment i
57842>>>>
57842>>>>            Move "mediumtext"                            to aColumnType[i].sSQLType
57843>>>>            Move -250                                    to aColumnType[i].iSQLType
57844>>>>            Move True                                    to aColumnType[i].bCanEditSize
57845>>>>            Move True                                    to aColumnType[i].bNativeDataType
57846>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
57847>>>>            Move 1                                       to aColumnType[i].iMinSize
57848>>>>            Move 16384                                   to aColumnType[i].nMaxSize
57849>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
57850>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
57851>>>>            Move 16384                                   to aColumnType[i].sPrecision
57852>>>>            Increment i
57853>>>>
57853>>>>            Move "set"                                   to aColumnType[i].sSQLType
57854>>>>            Move 248                                     to aColumnType[i].iSQLType
57855>>>>            Move True                                    to aColumnType[i].bCanEditSize
57856>>>>            Move True                                    to aColumnType[i].bNativeDataType
57857>>>>            Move -1                                      to aColumnType[i].iDefaultSize
57858>>>>            Move -1                                      to aColumnType[i].iMinSize
57859>>>>            Move 255                                     to aColumnType[i].nMaxSize
57860>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57861>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57862>>>>            Move 255                                     to aColumnType[i].sPrecision
57863>>>>            Increment i
57864>>>>
57864>>>>            Move "smallint"                              to aColumnType[i].sSQLType
57865>>>>            Move 2                                       to aColumnType[i].iSQLType
57866>>>>            Move True                                    to aColumnType[i].bCanEditSize
57867>>>>            Move True                                    to aColumnType[i].bNativeDataType
57868>>>>            Move 5                                       to aColumnType[i].iDefaultSize
57869>>>>            Move 1                                       to aColumnType[i].iMinSize
57870>>>>            Move 6                                       to aColumnType[i].nMaxSize
57871>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57872>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57873>>>>            Move 6                                       to aColumnType[i].sPrecision
57874>>>>            Increment i
57875>>>>
57875>>>>            Move "text"                                  to aColumnType[i].sSQLType
57876>>>>            Move -252                                    to aColumnType[i].iSQLType
57877>>>>            Move True                                    to aColumnType[i].bCanEditSize
57878>>>>            Move True                                    to aColumnType[i].bNativeDataType
57879>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
57880>>>>            Move 1                                       to aColumnType[i].iMinSize
57881>>>>            Move 16384                                   to aColumnType[i].nMaxSize
57882>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
57883>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
57884>>>>            Move 16384                                   to aColumnType[i].sPrecision
57885>>>>            Increment i
57886>>>>
57886>>>>            Move "time"                                  to aColumnType[i].sSQLType
57887>>>>            Move 11                                      to aColumnType[i].iSQLType
57888>>>>            Move False                                   to aColumnType[i].bCanEditSize
57889>>>>            Move True                                    to aColumnType[i].bNativeDataType
57890>>>>            Move 10                                      to aColumnType[i].iDefaultSize
57891>>>>            Move -1                                      to aColumnType[i].iMinSize
57892>>>>            Move -1                                      to aColumnType[i].nMaxSize
57893>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57894>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57895>>>>            Move -1                                      to aColumnType[i].sPrecision
57896>>>>            Increment i
57897>>>>
57897>>>>            Move "timestamp"                             to aColumnType[i].sSQLType
57898>>>>            Move 7                                       to aColumnType[i].iSQLType
57899>>>>            Move True                                    to aColumnType[i].bCanEditSize
57900>>>>            Move True                                    to aColumnType[i].bNativeDataType
57901>>>>            Move 6                                       to aColumnType[i].iDefaultSize
57902>>>>            Move 6                                       to aColumnType[i].iMinSize
57903>>>>            Move 23                                      to aColumnType[i].nMaxSize
57904>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
57905>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
57906>>>>            Move 23                                      to aColumnType[i].sPrecision
57907>>>>            Increment i
57908>>>>
57908>>>>            Move "tinyblob"                              to aColumnType[i].sSQLType
57909>>>>            Move 249                                     to aColumnType[i].iSQLType
57910>>>>            Move True                                    to aColumnType[i].bCanEditSize
57911>>>>            Move True                                    to aColumnType[i].bNativeDataType
57912>>>>            Move 255                                     to aColumnType[i].iDefaultSize
57913>>>>            Move 1                                       to aColumnType[i].iMinSize
57914>>>>            Move 255                                     to aColumnType[i].nMaxSize
57915>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
57916>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
57917>>>>            Move 255                                     to aColumnType[i].sPrecision
57918>>>>            Increment i
57919>>>>
57919>>>>            Move "tinyint"                               to aColumnType[i].sSQLType
57920>>>>            Move 1                                       to aColumnType[i].iSQLType
57921>>>>            Move True                                    to aColumnType[i].bCanEditSize
57922>>>>            Move True                                    to aColumnType[i].bNativeDataType
57923>>>>            Move 4                                       to aColumnType[i].iDefaultSize
57924>>>>            Move 1                                       to aColumnType[i].iMinSize
57925>>>>            Move 4                                       to aColumnType[i].nMaxSize
57926>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57927>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57928>>>>            Move 4                                       to aColumnType[i].sPrecision
57929>>>>            Increment i
57930>>>>
57930>>>>            Move "tinytext"                              to aColumnType[i].sSQLType
57931>>>>            Move -249                                    to aColumnType[i].iSQLType
57932>>>>            Move True                                    to aColumnType[i].bCanEditSize
57933>>>>            Move True                                    to aColumnType[i].bNativeDataType
57934>>>>            Move 255                                     to aColumnType[i].iDefaultSize
57935>>>>            Move 1                                       to aColumnType[i].iMinSize
57936>>>>            Move 255                                     to aColumnType[i].nMaxSize
57937>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57938>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57939>>>>            Move 255                                     to aColumnType[i].sPrecision
57940>>>>            Increment i
57941>>>>
57941>>>>            Move "varchar"                               to aColumnType[i].sSQLType
57942>>>>            Move 253                                     to aColumnType[i].iSQLType
57943>>>>            Move True                                    to aColumnType[i].bCanEditSize
57944>>>>            Move True                                    to aColumnType[i].bNativeDataType
57945>>>>            Move -1                                      to aColumnType[i].iDefaultSize
57946>>>>            Move -1                                      to aColumnType[i].iMinSize
57947>>>>            Move 16384                                   to aColumnType[i].nMaxSize
57948>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57949>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57950>>>>            Move 16384                                   to aColumnType[i].sPrecision
57951>>>>            Increment i
57952>>>>
57952>>>>            Move "year"                                  to aColumnType[i].sSQLType
57953>>>>            Move 13                                      to aColumnType[i].iSQLType
57954>>>>            Move False                                   to aColumnType[i].bCanEditSize
57955>>>>            Move True                                    to aColumnType[i].bNativeDataType
57956>>>>            Move 4                                       to aColumnType[i].iDefaultSize
57957>>>>            Move -1                                      to aColumnType[i].iMinSize
57958>>>>            Move -1                                      to aColumnType[i].nMaxSize
57959>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
57960>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
57961>>>>            Move -1                                      to aColumnType[i].sPrecision
57962>>>>            Increment i
57963>>>>
57963>>>>
57963>>>
57963>>>//        Move eMySQL_LONGLONG    to ColumnType[i].iSQLType
57963>>>//        Move "bigint"           to ColumnType[i].sSQLType
57963>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
57963>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
57963>>>//        Move "14.0"             to ColumnType[i].sPrecision
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_BIT         to ColumnType[i].iSQLType
57963>>>//        Move "bit"              to ColumnType[i].sSQLType
57963>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
57963>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
57963>>>//        Move "4.0"              to ColumnType[i].sPrecision // In SQL allows "1, 0, or NULL"
57963>>>//        Move True               to ColumnType[i].bCanEditSize
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_BLOB        to ColumnType[i].iSQLType
57963>>>//        Move "blob"             to ColumnType[i].sSQLType
57963>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
57963>>>//        Move "BINARY"           to ColumnType[i].sDataFlexType
57963>>>//        Move "16384"            to ColumnType[i].sPrecision
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_STRING      to ColumnType[i].iSQLType
57963>>>//        Move "char"             to ColumnType[i].sSQLType
57963>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
57963>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
57963>>>//        Move "254"              to ColumnType[i].sPrecision
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_DATE        to ColumnType[i].iSQLType
57963>>>//        Move "date"             to ColumnType[i].sSQLType
57963>>>//        Move DF_DATE            to ColumnType[i].iDataFlexType
57963>>>//        Move "Date"             to ColumnType[i].sDataFlexType
57963>>>//        Move "6.0"              to ColumnType[i].sPrecision
57963>>>//        Move True               to ColumnType[i].bCanEditSize
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_DATETIME    to ColumnType[i].iSQLType
57963>>>//        Move "datetime"         to ColumnType[i].sSQLType
57963>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
57963>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
57963>>>//        Move "23.0"             to ColumnType[i].sPrecision
57963>>>//        Move True               to ColumnType[i].bCanEditSize
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_DECIMAL     to ColumnType[i].iSQLType
57963>>>//        Move "decimal"          to ColumnType[i].sSQLType
57963>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
57963>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
57963>>>//        Move "14.8"             to ColumnType[i].sPrecision
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_DOUBLE      to ColumnType[i].iSQLType
57963>>>//        Move "double"           to ColumnType[i].sSQLType
57963>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
57963>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
57963>>>//        Move "14.8"             to ColumnType[i].sPrecision
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_ENUM        to ColumnType[i].iSQLType
57963>>>//        Move "enum"             to ColumnType[i].sSQLType
57963>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
57963>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
57963>>>//        Move "254"              to ColumnType[i].sPrecision
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_FLOAT       to ColumnType[i].iSQLType
57963>>>//        Move "float"            to ColumnType[i].sSQLType
57963>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
57963>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
57963>>>//        Move "14.8"             to ColumnType[i].sPrecision
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_INT24       to ColumnType[i].iSQLType
57963>>>//        Move "int"              to ColumnType[i].sSQLType
57963>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
57963>>>//        Move "NUMERIC"          to ColumnType[i].sDataFlexType
57963>>>//        Move "11.0"             to ColumnType[i].sPrecision
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_LONG_BLOB   to ColumnType[i].iSQLType
57963>>>//        Move "longblob"         to ColumnType[i].sSQLType
57963>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
57963>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
57963>>>//        Move "16384"            to ColumnType[i].sPrecision
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_LONG_TEXT   to ColumnType[i].iSQLType
57963>>>//        Move "longtext"         to ColumnType[i].sSQLType
57963>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
57963>>>//        Move "Text"             to ColumnType[i].sDataFlexType
57963>>>//        Move "16384"            to ColumnType[i].sPrecision
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_MEDIUM_BLOB to ColumnType[i].iSQLType
57963>>>//        Move "mediumblob"       to ColumnType[i].sSQLType
57963>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
57963>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
57963>>>//        Move "16384"            to ColumnType[i].sPrecision
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_INT24       to ColumnType[i].iSQLType
57963>>>//        Move "mediumint"        to ColumnType[i].sSQLType
57963>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
57963>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
57963>>>//        Move "9.0"              to ColumnType[i].sPrecision
57963>>>//
57963>>>//        Move eMySQL_MEDIUM_TEXT to ColumnType[i].iSQLType
57963>>>//        Move "mediumtext"       to ColumnType[i].sSQLType
57963>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
57963>>>//        Move "Text"             to ColumnType[i].sDataFlexType
57963>>>//        Move "16384"            to ColumnType[i].sPrecision
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_SET         to ColumnType[i].iSQLType
57963>>>//        Move "set"              to ColumnType[i].sSQLType
57963>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
57963>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
57963>>>//        Move "254"              to ColumnType[i].sPrecision
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_SHORT       to ColumnType[i].iSQLType
57963>>>//        Move "smallint"         to ColumnType[i].sSQLType
57963>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
57963>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
57963>>>//        Move "6.0"              to ColumnType[i].sPrecision
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_TEXT        to ColumnType[i].iSQLType
57963>>>//        Move "text"             to ColumnType[i].sSQLType
57963>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
57963>>>//        Move "Text"             to ColumnType[i].sDataFlexType
57963>>>//        Move "16384"            to ColumnType[i].sPrecision
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_TIME        to ColumnType[i].iSQLType
57963>>>//        Move "time"             to ColumnType[i].sSQLType
57963>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
57963>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
57963>>>//        Move "10.0"             to ColumnType[i].sPrecision
57963>>>//        Move True               to ColumnType[i].bCanEditSize
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_TIMESTAMP   to ColumnType[i].iSQLType
57963>>>//        Move "timestamp"        to ColumnType[i].sSQLType
57963>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
57963>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
57963>>>//        Move "23.0"             to ColumnType[i].sPrecision
57963>>>//        Move True               to ColumnType[i].bCanEditSize
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_TINY_BLOB   to ColumnType[i].iSQLType
57963>>>//        Move "tinyblob"         to ColumnType[i].sSQLType
57963>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
57963>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
57963>>>//        Move "254"              to ColumnType[i].sPrecision
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_TINY        to ColumnType[i].iSQLType
57963>>>//        Move "tinyint"          to ColumnType[i].sSQLType
57963>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
57963>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
57963>>>//        Move "4.0"              to ColumnType[i].sPrecision
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_TINY_TEXT   to ColumnType[i].iSQLType
57963>>>//        Move "tinytext"         to ColumnType[i].sSQLType
57963>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
57963>>>//        Move "Text"             to ColumnType[i].sDataFlexType
57963>>>//        Move "254"              to ColumnType[i].sPrecision
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_VAR_STRING  to ColumnType[i].iSQLType
57963>>>//        Move "varchar"          to ColumnType[i].sSQLType
57963>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
57963>>>//        Move "Text"             to ColumnType[i].sDataFlexType
57963>>>//        Move "16384"            to ColumnType[i].sPrecision
57963>>>//        Increment i
57963>>>//
57963>>>//        Move eMySQL_YEAR        to ColumnType[i].iSQLType
57963>>>//        Move "year"             to ColumnType[i].sSQLType
57963>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
57963>>>//        Move "NUMERIC"          to ColumnType[i].sDataFlexType
57963>>>//        Move "4.0"              to ColumnType[i].sPrecision
57963>>>//        Move True               to ColumnType[i].bCanEditSize
57963>>>//        Increment i
57963>>>
57963>>>        Function_Return aColumnType
57964>>>    End_Function
57965>>>
57965>>>    // Oracle Data Types
57965>>>    Function _UtilEnumerateOracleTypes Returns tColumnType[]
57967>>>        tColumnType[] aColumnType
57967>>>        tColumnType[] aColumnType
57968>>>        Integer i
57968>>>
Including file: ora_drv_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ora_drv_DriverDef.inc)
57968>>>>// Generated By The Database Update Framework
57968>>>>// Driver XML File: C:\Program Files (x86)\DataFlex 19.0\Bin\ora_drv_DriverDef.xml
57968>>>>// Driver COLUMN DATA TYPES
57968>>>>//
57968>>>>// Created: 2018-03-14 23:47:34.82
57968>>>>
57968>>>>            Move "blob"                                  to aColumnType[i].sSQLType
57969>>>>            Move 113                                     to aColumnType[i].iSQLType
57970>>>>            Move True                                    to aColumnType[i].bCanEditSize
57971>>>>            Move True                                    to aColumnType[i].bNativeDataType
57972>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
57973>>>>            Move 1                                       to aColumnType[i].iMinSize
57974>>>>            Move 16384                                   to aColumnType[i].nMaxSize
57975>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
57976>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
57977>>>>            Move 16384                                   to aColumnType[i].sPrecision
57978>>>>            Increment i
57979>>>>
57979>>>>            Move "char"                                  to aColumnType[i].sSQLType
57980>>>>            Move 96                                      to aColumnType[i].iSQLType
57981>>>>            Move True                                    to aColumnType[i].bCanEditSize
57982>>>>            Move True                                    to aColumnType[i].bNativeDataType
57983>>>>            Move 1                                       to aColumnType[i].iDefaultSize
57984>>>>            Move 1                                       to aColumnType[i].iMinSize
57985>>>>            Move 2000                                    to aColumnType[i].nMaxSize
57986>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
57987>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
57988>>>>            Move 2000                                    to aColumnType[i].sPrecision
57989>>>>            Increment i
57990>>>>
57990>>>>            Move "clob"                                  to aColumnType[i].sSQLType
57991>>>>            Move 112                                     to aColumnType[i].iSQLType
57992>>>>            Move True                                    to aColumnType[i].bCanEditSize
57993>>>>            Move True                                    to aColumnType[i].bNativeDataType
57994>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
57995>>>>            Move 1                                       to aColumnType[i].iMinSize
57996>>>>            Move 16384                                   to aColumnType[i].nMaxSize
57997>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
57998>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
57999>>>>            Move 16384                                   to aColumnType[i].sPrecision
58000>>>>            Increment i
58001>>>>
58001>>>>            Move "date"                                  to aColumnType[i].sSQLType
58002>>>>            Move 12                                      to aColumnType[i].iSQLType
58003>>>>            Move True                                    to aColumnType[i].bCanEditSize
58004>>>>            Move True                                    to aColumnType[i].bNativeDataType
58005>>>>            Move 6                                       to aColumnType[i].iDefaultSize
58006>>>>            Move 6                                       to aColumnType[i].iMinSize
58007>>>>            Move 23                                      to aColumnType[i].nMaxSize
58008>>>>            Move "DF_DATE"                               to aColumnType[i].sDataFlexType
58009>>>>            Move DF_DATE                                 to aColumnType[i].iDataFlexType
58010>>>>            Move 6                                       to aColumnType[i].sPrecision
58011>>>>            Increment i
58012>>>>
58012>>>>            Move "float"                                 to aColumnType[i].sSQLType
58013>>>>            Move 4                                       to aColumnType[i].iSQLType
58014>>>>            Move True                                    to aColumnType[i].bCanEditSize
58015>>>>            Move True                                    to aColumnType[i].bNativeDataType
58016>>>>            Move 1                                       to aColumnType[i].iDefaultSize
58017>>>>            Move 1                                       to aColumnType[i].iMinSize
58018>>>>            Move 14                                      to aColumnType[i].nMaxSize
58019>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
58020>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
58021>>>>            Move 14                                      to aColumnType[i].sPrecision
58022>>>>            Increment i
58023>>>>
58023>>>>            Move "int"                                   to aColumnType[i].sSQLType
58024>>>>            Move 3                                       to aColumnType[i].iSQLType
58025>>>>            Move True                                    to aColumnType[i].bCanEditSize
58026>>>>            Move True                                    to aColumnType[i].bNativeDataType
58027>>>>            Move 14                                      to aColumnType[i].iDefaultSize
58028>>>>            Move 1                                       to aColumnType[i].iMinSize
58029>>>>            Move 14                                      to aColumnType[i].nMaxSize
58030>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
58031>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
58032>>>>            Move 14                                      to aColumnType[i].sPrecision
58033>>>>            Increment i
58034>>>>
58034>>>>            Move "intervalds"                            to aColumnType[i].sSQLType
58035>>>>            Move 190                                     to aColumnType[i].iSQLType
58036>>>>            Move False                                   to aColumnType[i].bCanEditSize
58037>>>>            Move True                                    to aColumnType[i].bNativeDataType
58038>>>>            Move 23                                      to aColumnType[i].iDefaultSize
58039>>>>            Move -1                                      to aColumnType[i].iMinSize
58040>>>>            Move -1                                      to aColumnType[i].nMaxSize
58041>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
58042>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
58043>>>>            Move -1                                      to aColumnType[i].sPrecision
58044>>>>            Increment i
58045>>>>
58045>>>>            Move "intervalym"                            to aColumnType[i].sSQLType
58046>>>>            Move 189                                     to aColumnType[i].iSQLType
58047>>>>            Move False                                   to aColumnType[i].bCanEditSize
58048>>>>            Move True                                    to aColumnType[i].bNativeDataType
58049>>>>            Move 23                                      to aColumnType[i].iDefaultSize
58050>>>>            Move -1                                      to aColumnType[i].iMinSize
58051>>>>            Move -1                                      to aColumnType[i].nMaxSize
58052>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
58053>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
58054>>>>            Move -1                                      to aColumnType[i].sPrecision
58055>>>>            Increment i
58056>>>>
58056>>>>            Move "long"                                  to aColumnType[i].sSQLType
58057>>>>            Move 8                                       to aColumnType[i].iSQLType
58058>>>>            Move True                                    to aColumnType[i].bCanEditSize
58059>>>>            Move True                                    to aColumnType[i].bNativeDataType
58060>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
58061>>>>            Move 1                                       to aColumnType[i].iMinSize
58062>>>>            Move 16384                                   to aColumnType[i].nMaxSize
58063>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
58064>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
58065>>>>            Move 16384                                   to aColumnType[i].sPrecision
58066>>>>            Increment i
58067>>>>
58067>>>>            Move "longraw"                               to aColumnType[i].sSQLType
58068>>>>            Move 24                                      to aColumnType[i].iSQLType
58069>>>>            Move True                                    to aColumnType[i].bCanEditSize
58070>>>>            Move True                                    to aColumnType[i].bNativeDataType
58071>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
58072>>>>            Move 1                                       to aColumnType[i].iMinSize
58073>>>>            Move 16384                                   to aColumnType[i].nMaxSize
58074>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
58075>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
58076>>>>            Move 16384                                   to aColumnType[i].sPrecision
58077>>>>            Increment i
58078>>>>
58078>>>>            Move "nchar"                                 to aColumnType[i].sSQLType
58079>>>>            Move 286                                     to aColumnType[i].iSQLType
58080>>>>            Move True                                    to aColumnType[i].bCanEditSize
58081>>>>            Move True                                    to aColumnType[i].bNativeDataType
58082>>>>            Move 1                                       to aColumnType[i].iDefaultSize
58083>>>>            Move 1                                       to aColumnType[i].iMinSize
58084>>>>            Move 2000                                    to aColumnType[i].nMaxSize
58085>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
58086>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
58087>>>>            Move 2000                                    to aColumnType[i].sPrecision
58088>>>>            Increment i
58089>>>>
58089>>>>            Move "nclob"                                 to aColumnType[i].sSQLType
58090>>>>            Move 288                                     to aColumnType[i].iSQLType
58091>>>>            Move True                                    to aColumnType[i].bCanEditSize
58092>>>>            Move True                                    to aColumnType[i].bNativeDataType
58093>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
58094>>>>            Move 1                                       to aColumnType[i].iMinSize
58095>>>>            Move 16384                                   to aColumnType[i].nMaxSize
58096>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
58097>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
58098>>>>            Move 16384                                   to aColumnType[i].sPrecision
58099>>>>            Increment i
58100>>>>
58100>>>>            Move "number"                                to aColumnType[i].sSQLType
58101>>>>            Move 2                                       to aColumnType[i].iSQLType
58102>>>>            Move True                                    to aColumnType[i].bCanEditSize
58103>>>>            Move True                                    to aColumnType[i].bNativeDataType
58104>>>>            Move 1                                       to aColumnType[i].iDefaultSize
58105>>>>            Move 1                                       to aColumnType[i].iMinSize
58106>>>>            Move 14                                      to aColumnType[i].nMaxSize
58107>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
58108>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
58109>>>>            Move 14                                      to aColumnType[i].sPrecision
58110>>>>            Increment i
58111>>>>
58111>>>>            Move "nvarchar2"                             to aColumnType[i].sSQLType
58112>>>>            Move 287                                     to aColumnType[i].iSQLType
58113>>>>            Move True                                    to aColumnType[i].bCanEditSize
58114>>>>            Move True                                    to aColumnType[i].bNativeDataType
58115>>>>            Move 1                                       to aColumnType[i].iDefaultSize
58116>>>>            Move 1                                       to aColumnType[i].iMinSize
58117>>>>            Move 4000                                    to aColumnType[i].nMaxSize
58118>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
58119>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
58120>>>>            Move 4000                                    to aColumnType[i].sPrecision
58121>>>>            Increment i
58122>>>>
58122>>>>            Move "raw"                                   to aColumnType[i].sSQLType
58123>>>>            Move 23                                      to aColumnType[i].iSQLType
58124>>>>            Move True                                    to aColumnType[i].bCanEditSize
58125>>>>            Move True                                    to aColumnType[i].bNativeDataType
58126>>>>            Move 1                                       to aColumnType[i].iDefaultSize
58127>>>>            Move 1                                       to aColumnType[i].iMinSize
58128>>>>            Move 2000                                    to aColumnType[i].nMaxSize
58129>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
58130>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
58131>>>>            Move 2000                                    to aColumnType[i].sPrecision
58132>>>>            Increment i
58133>>>>
58133>>>>            Move "timestamp"                             to aColumnType[i].sSQLType
58134>>>>            Move 187                                     to aColumnType[i].iSQLType
58135>>>>            Move False                                   to aColumnType[i].bCanEditSize
58136>>>>            Move True                                    to aColumnType[i].bNativeDataType
58137>>>>            Move 23                                      to aColumnType[i].iDefaultSize
58138>>>>            Move -1                                      to aColumnType[i].iMinSize
58139>>>>            Move -1                                      to aColumnType[i].nMaxSize
58140>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
58141>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
58142>>>>            Move -1                                      to aColumnType[i].sPrecision
58143>>>>            Increment i
58144>>>>
58144>>>>            Move "timestampltz"                          to aColumnType[i].sSQLType
58145>>>>            Move 232                                     to aColumnType[i].iSQLType
58146>>>>            Move False                                   to aColumnType[i].bCanEditSize
58147>>>>            Move True                                    to aColumnType[i].bNativeDataType
58148>>>>            Move 23                                      to aColumnType[i].iDefaultSize
58149>>>>            Move -1                                      to aColumnType[i].iMinSize
58150>>>>            Move -1                                      to aColumnType[i].nMaxSize
58151>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
58152>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
58153>>>>            Move -1                                      to aColumnType[i].sPrecision
58154>>>>            Increment i
58155>>>>
58155>>>>            Move "timestamptz"                           to aColumnType[i].sSQLType
58156>>>>            Move 188                                     to aColumnType[i].iSQLType
58157>>>>            Move False                                   to aColumnType[i].bCanEditSize
58158>>>>            Move True                                    to aColumnType[i].bNativeDataType
58159>>>>            Move 23                                      to aColumnType[i].iDefaultSize
58160>>>>            Move -1                                      to aColumnType[i].iMinSize
58161>>>>            Move -1                                      to aColumnType[i].nMaxSize
58162>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
58163>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
58164>>>>            Move -1                                      to aColumnType[i].sPrecision
58165>>>>            Increment i
58166>>>>
58166>>>>            Move "varchar2"                              to aColumnType[i].sSQLType
58167>>>>            Move 1                                       to aColumnType[i].iSQLType
58168>>>>            Move True                                    to aColumnType[i].bCanEditSize
58169>>>>            Move True                                    to aColumnType[i].bNativeDataType
58170>>>>            Move 1                                       to aColumnType[i].iDefaultSize
58171>>>>            Move 1                                       to aColumnType[i].iMinSize
58172>>>>            Move 4000                                    to aColumnType[i].nMaxSize
58173>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
58174>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
58175>>>>            Move 4000                                    to aColumnType[i].sPrecision
58176>>>>            Increment i
58177>>>>
58177>>>>
58177>>>
58177>>>//        Move eOracle_BLOB       to ColumnType[i].iSQLType
58177>>>//        Move "BLOB"             to ColumnType[i].sSQLType
58177>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
58177>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
58177>>>//        Move "16384"            to ColumnType[i].sPrecision
58177>>>//        Increment i
58177>>>//
58177>>>//        Move eOracle_CHAR       to ColumnType[i].iSQLType
58177>>>//        Move "CHAR"             to ColumnType[i].sSQLType
58177>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
58177>>>//        Move "Text"             to ColumnType[i].sDataFlexType
58177>>>//        Move "2000"             to ColumnType[i].sPrecision
58177>>>//        Increment i
58177>>>//
58177>>>//        Move eOracle_CLOB       to ColumnType[i].iSQLType
58177>>>//        Move "CLOB"             to ColumnType[i].sSQLType
58177>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
58177>>>//        Move "Text"             to ColumnType[i].sDataFlexType
58177>>>//        Move "16384"            to ColumnType[i].sPrecision
58177>>>//        Increment i
58177>>>//
58177>>>//        Move eOracle_DATE       to ColumnType[i].iSQLType
58177>>>//        Move "DATE"             to ColumnType[i].sSQLType
58177>>>//        Move DF_Date            to ColumnType[i].iDataFlexType
58177>>>//        Move "Date"             to ColumnType[i].sDataFlexType
58177>>>//        Move "6.0"              to ColumnType[i].sPrecision
58177>>>//        Move True               to ColumnType[i].bCanEditSize
58177>>>//        Increment i
58177>>>//
58177>>>//        Move eOracle_FLOAT      to ColumnType[i].iSQLType
58177>>>//        Move "FLOAT"            to ColumnType[i].sSQLType
58177>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
58177>>>//        Move "Number"           to ColumnType[i].sDataFlexType
58177>>>//        Move "14.8"             to ColumnType[i].sPrecision
58177>>>//        Increment i
58177>>>//
58177>>>//        Move eOracle_INT        to ColumnType[i].iSQLType
58177>>>//        Move "INT"              to ColumnType[i].sSQLType
58177>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
58177>>>//        Move "Number"           to ColumnType[i].sDataFlexType
58177>>>//        Move "14.0"             to ColumnType[i].sPrecision
58177>>>//        Increment i
58177>>>//
58177>>>//        Move eOracle_INTERVALDS to ColumnType[i].iSQLType
58177>>>//        Move "INTERVALDAYTOSEC" to ColumnType[i].sSQLType
58177>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
58177>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
58177>>>//        Move "23.0"             to ColumnType[i].sPrecision
58177>>>//        Move True               to ColumnType[i].bCanEditSize
58177>>>//        Increment i
58177>>>//
58177>>>//        Move eOracle_INTERVALYM  to ColumnType[i].iSQLType
58177>>>//        Move "INTERVALYEARTOMON" to ColumnType[i].sSQLType
58177>>>//        Move DF_DATETIME         to ColumnType[i].iDataFlexType
58177>>>//        Move "DateTime"          to ColumnType[i].sDataFlexType
58177>>>//        Move "23.0"              to ColumnType[i].sPrecision
58177>>>//        Move True                to ColumnType[i].bCanEditSize
58177>>>//        Increment i
58177>>>//
58177>>>//        Move eOracle_RAW        to ColumnType[i].iSQLType
58177>>>//        Move "LONG"             to ColumnType[i].sSQLType
58177>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
58177>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
58177>>>//        Move "16384"            to ColumnType[i].sPrecision
58177>>>//        Increment i
58177>>>//
58177>>>//        Move eOracle_LONGRAW    to ColumnType[i].iSQLType
58177>>>//        Move "LONG RAW"         to ColumnType[i].sSQLType
58177>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
58177>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
58177>>>//        Move "16384"            to ColumnType[i].sPrecision
58177>>>//        Increment i
58177>>>//
58177>>>//        Move eOracle_NCHAR      to ColumnType[i].iSQLType
58177>>>//        Move "NCHAR"            to ColumnType[i].sSQLType
58177>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
58177>>>//        Move "Text"             to ColumnType[i].sDataFlexType
58177>>>//        Move "2000"             to ColumnType[i].sPrecision
58177>>>//        Increment i
58177>>>//
58177>>>//        Move eOracle_NCLOB      to ColumnType[i].iSQLType
58177>>>//        Move "NCLOB"            to ColumnType[i].sSQLType
58177>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
58177>>>//        Move "Text"             to ColumnType[i].sDataFlexType
58177>>>//        Move "16384"            to ColumnType[i].sPrecision
58177>>>//        Increment i
58177>>>//
58177>>>//        Move eOracle_NUMBER     to ColumnType[i].iSQLType
58177>>>//        Move "NUMBER"           to ColumnType[i].sSQLType
58177>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
58177>>>//        Move "Number"           to ColumnType[i].sDataFlexType
58177>>>//        Move "14.8"             to ColumnType[i].sPrecision
58177>>>//        Increment i
58177>>>//
58177>>>//        Move eOracle_NVARCHAR2  to ColumnType[i].iSQLType
58177>>>//        Move "NVARCHAR2"        to ColumnType[i].sSQLType
58177>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
58177>>>//        Move "Text"             to ColumnType[i].sDataFlexType
58177>>>//        Move "4000"             to ColumnType[i].sPrecision
58177>>>//        Increment i
58177>>>//
58177>>>//        Move eOracle_RAW        to ColumnType[i].iSQLType
58177>>>//        Move "RAW"              to ColumnType[i].sSQLType
58177>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
58177>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
58177>>>//        Move "2000"             to ColumnType[i].sPrecision
58177>>>//        Increment i
58177>>>//
58177>>>//        Move eOracle_ROWID      to ColumnType[i].iSQLType
58177>>>//        Move "ROWID"            to ColumnType[i].sSQLType
58177>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
58177>>>//        Move "Text"             to ColumnType[i].sDataFlexType
58177>>>//        Move "16384"            to ColumnType[i].sPrecision
58177>>>//        Increment i
58177>>>//
58177>>>//        Move eOracle_TIMESTAMP  to ColumnType[i].iSQLType
58177>>>//        Move "TimeStamp"        to ColumnType[i].sSQLType
58177>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
58177>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
58177>>>//        Move "11.0"             to ColumnType[i].sPrecision
58177>>>//        Move True               to ColumnType[i].bCanEditSize
58177>>>//        Increment i
58177>>>//
58177>>>//        Move eOracle_TIMESTAMPLTZ   to ColumnType[i].iSQLType
58177>>>//        Move "TIMESTAMPLOCALTZ"     to ColumnType[i].sSQLType
58177>>>//        Move DF_DATETIME            to ColumnType[i].iDataFlexType
58177>>>//        Move "DateTime"             to ColumnType[i].sDataFlexType
58177>>>//        Move "13.0"                 to ColumnType[i].sPrecision
58177>>>//        Move True                   to ColumnType[i].bCanEditSize
58177>>>//        Increment i
58177>>>//
58177>>>//        Move eOracle_TIMESTAMPTZ    to ColumnType[i].iSQLType
58177>>>//        Move "TIMEZONETIMEZONE"     to ColumnType[i].sSQLType
58177>>>//        Move DF_DATETIME            to ColumnType[i].iDataFlexType
58177>>>//        Move "DateTime"             to ColumnType[i].sDataFlexType
58177>>>//        Move "11.0"                 to ColumnType[i].sPrecision
58177>>>//        Move True                   to ColumnType[i].bCanEditSize
58177>>>//        Increment i
58177>>>//
58177>>>//        Move eOracle_VARCHAR2   to ColumnType[i].iSQLType
58177>>>//        Move "VARCHAR"          to ColumnType[i].sSQLType
58177>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
58177>>>//        Move "Text"             to ColumnType[i].sDataFlexType
58177>>>//        Move "16384"            to ColumnType[i].sPrecision
58177>>>
58177>>>        Function_Return aColumnType
58178>>>    End_Function
58179>>>
58179>>>    // PostgreSQL Data Types
58179>>>    Function _UtilEnumeratePostgreSQLTypes Returns tColumnType[]
58181>>>        tColumnType[] aColumnType
58181>>>        tColumnType[] aColumnType
58182>>>        Integer i
58182>>>
Including file: mdspgsql_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\mdspgsql_DriverDef.inc)
58182>>>>// Generated By The Database Update Framework
58182>>>>// Driver XML File: C:\Program Files (x86)\DataFlex 19.0\Bin\mdspgsql_DriverDef.xml
58182>>>>// Driver COLUMN DATA TYPES
58182>>>>//
58182>>>>// Created: 2018-03-14 23:47:02.984
58182>>>>
58182>>>>            Move "bigint"                                to aColumnType[i].sSQLType
58183>>>>            Move 20                                      to aColumnType[i].iSQLType
58184>>>>            Move True                                    to aColumnType[i].bCanEditSize
58185>>>>            Move True                                    to aColumnType[i].bNativeDataType
58186>>>>            Move 14                                      to aColumnType[i].iDefaultSize
58187>>>>            Move 1                                       to aColumnType[i].iMinSize
58188>>>>            Move 14                                      to aColumnType[i].nMaxSize
58189>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
58190>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
58191>>>>            Move 14                                      to aColumnType[i].sPrecision
58192>>>>            Increment i
58193>>>>
58193>>>>            Move "bit"                                   to aColumnType[i].sSQLType
58194>>>>            Move 1560                                    to aColumnType[i].iSQLType
58195>>>>            Move True                                    to aColumnType[i].bCanEditSize
58196>>>>            Move True                                    to aColumnType[i].bNativeDataType
58197>>>>            Move 1                                       to aColumnType[i].iDefaultSize
58198>>>>            Move 1                                       to aColumnType[i].iMinSize
58199>>>>            Move 16384                                   to aColumnType[i].nMaxSize
58200>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
58201>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
58202>>>>            Move 16384                                   to aColumnType[i].sPrecision
58203>>>>            Increment i
58204>>>>
58204>>>>            Move "boolean"                               to aColumnType[i].sSQLType
58205>>>>            Move 16                                      to aColumnType[i].iSQLType
58206>>>>            Move False                                   to aColumnType[i].bCanEditSize
58207>>>>            Move True                                    to aColumnType[i].bNativeDataType
58208>>>>            Move 1                                       to aColumnType[i].iDefaultSize
58209>>>>            Move -1                                      to aColumnType[i].iMinSize
58210>>>>            Move -1                                      to aColumnType[i].nMaxSize
58211>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
58212>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
58213>>>>            Move -1                                      to aColumnType[i].sPrecision
58214>>>>            Increment i
58215>>>>
58215>>>>            Move "bytea"                                 to aColumnType[i].sSQLType
58216>>>>            Move 17                                      to aColumnType[i].iSQLType
58217>>>>            Move True                                    to aColumnType[i].bCanEditSize
58218>>>>            Move True                                    to aColumnType[i].bNativeDataType
58219>>>>            Move 1                                       to aColumnType[i].iDefaultSize
58220>>>>            Move 1                                       to aColumnType[i].iMinSize
58221>>>>            Move 16384                                   to aColumnType[i].nMaxSize
58222>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
58223>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
58224>>>>            Move 16384                                   to aColumnType[i].sPrecision
58225>>>>            Increment i
58226>>>>
58226>>>>            Move "char"                                  to aColumnType[i].sSQLType
58227>>>>            Move 18                                      to aColumnType[i].iSQLType
58228>>>>            Move True                                    to aColumnType[i].bCanEditSize
58229>>>>            Move True                                    to aColumnType[i].bNativeDataType
58230>>>>            Move 1                                       to aColumnType[i].iDefaultSize
58231>>>>            Move 1                                       to aColumnType[i].iMinSize
58232>>>>            Move 16384                                   to aColumnType[i].nMaxSize
58233>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
58234>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
58235>>>>            Move 16384                                   to aColumnType[i].sPrecision
58236>>>>            Increment i
58237>>>>
58237>>>>            Move "citext"                                to aColumnType[i].sSQLType
58238>>>>            Move -25                                     to aColumnType[i].iSQLType
58239>>>>            Move True                                    to aColumnType[i].bCanEditSize
58240>>>>            Move True                                    to aColumnType[i].bNativeDataType
58241>>>>            Move 1                                       to aColumnType[i].iDefaultSize
58242>>>>            Move 1                                       to aColumnType[i].iMinSize
58243>>>>            Move 16384                                   to aColumnType[i].nMaxSize
58244>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
58245>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
58246>>>>            Move 16384                                   to aColumnType[i].sPrecision
58247>>>>            Increment i
58248>>>>
58248>>>>            Move "date"                                  to aColumnType[i].sSQLType
58249>>>>            Move 1082                                    to aColumnType[i].iSQLType
58250>>>>            Move False                                   to aColumnType[i].bCanEditSize
58251>>>>            Move True                                    to aColumnType[i].bNativeDataType
58252>>>>            Move 6                                       to aColumnType[i].iDefaultSize
58253>>>>            Move -1                                      to aColumnType[i].iMinSize
58254>>>>            Move -1                                      to aColumnType[i].nMaxSize
58255>>>>            Move "DF_DATE"                               to aColumnType[i].sDataFlexType
58256>>>>            Move DF_DATE                                 to aColumnType[i].iDataFlexType
58257>>>>            Move 6                                       to aColumnType[i].sPrecision
58258>>>>            Increment i
58259>>>>
58259>>>>            Move "double"                                to aColumnType[i].sSQLType
58260>>>>            Move 701                                     to aColumnType[i].iSQLType
58261>>>>            Move True                                    to aColumnType[i].bCanEditSize
58262>>>>            Move True                                    to aColumnType[i].bNativeDataType
58263>>>>            Move 14                                      to aColumnType[i].iDefaultSize
58264>>>>            Move 1                                       to aColumnType[i].iMinSize
58265>>>>            Move 14                                      to aColumnType[i].nMaxSize
58266>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
58267>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
58268>>>>            Move 14                                      to aColumnType[i].sPrecision
58269>>>>            Increment i
58270>>>>
58270>>>>            Move "integer"                               to aColumnType[i].sSQLType
58271>>>>            Move 23                                      to aColumnType[i].iSQLType
58272>>>>            Move True                                    to aColumnType[i].bCanEditSize
58273>>>>            Move True                                    to aColumnType[i].bNativeDataType
58274>>>>            Move 11                                      to aColumnType[i].iDefaultSize
58275>>>>            Move 1                                       to aColumnType[i].iMinSize
58276>>>>            Move 11                                      to aColumnType[i].nMaxSize
58277>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
58278>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
58279>>>>            Move 11                                      to aColumnType[i].sPrecision
58280>>>>            Increment i
58281>>>>
58281>>>>            Move "money"                                 to aColumnType[i].sSQLType
58282>>>>            Move 790                                     to aColumnType[i].iSQLType
58283>>>>            Move True                                    to aColumnType[i].bCanEditSize
58284>>>>            Move True                                    to aColumnType[i].bNativeDataType
58285>>>>            Move 30                                      to aColumnType[i].iDefaultSize
58286>>>>            Move 1                                       to aColumnType[i].iMinSize
58287>>>>            Move 30                                      to aColumnType[i].nMaxSize
58288>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
58289>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
58290>>>>            Move 30                                      to aColumnType[i].sPrecision
58291>>>>            Increment i
58292>>>>
58292>>>>            Move "numeric"                               to aColumnType[i].sSQLType
58293>>>>            Move 1700                                    to aColumnType[i].iSQLType
58294>>>>            Move True                                    to aColumnType[i].bCanEditSize
58295>>>>            Move True                                    to aColumnType[i].bNativeDataType
58296>>>>            Move 14                                      to aColumnType[i].iDefaultSize
58297>>>>            Move 1                                       to aColumnType[i].iMinSize
58298>>>>            Move 14                                      to aColumnType[i].nMaxSize
58299>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
58300>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
58301>>>>            Move 14                                      to aColumnType[i].sPrecision
58302>>>>            Increment i
58303>>>>
58303>>>>            Move "oid"                                   to aColumnType[i].sSQLType
58304>>>>            Move 26                                      to aColumnType[i].iSQLType
58305>>>>            Move False                                   to aColumnType[i].bCanEditSize
58306>>>>            Move True                                    to aColumnType[i].bNativeDataType
58307>>>>            Move 20                                      to aColumnType[i].iDefaultSize
58308>>>>            Move -1                                      to aColumnType[i].iMinSize
58309>>>>            Move -1                                      to aColumnType[i].nMaxSize
58310>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
58311>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
58312>>>>            Move -1                                      to aColumnType[i].sPrecision
58313>>>>            Increment i
58314>>>>
58314>>>>            Move "real"                                  to aColumnType[i].sSQLType
58315>>>>            Move 700                                     to aColumnType[i].iSQLType
58316>>>>            Move True                                    to aColumnType[i].bCanEditSize
58317>>>>            Move True                                    to aColumnType[i].bNativeDataType
58318>>>>            Move 6                                       to aColumnType[i].iDefaultSize
58319>>>>            Move 1                                       to aColumnType[i].iMinSize
58320>>>>            Move 6                                       to aColumnType[i].nMaxSize
58321>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
58322>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
58323>>>>            Move 6                                       to aColumnType[i].sPrecision
58324>>>>            Increment i
58325>>>>
58325>>>>            Move "regproc"                               to aColumnType[i].sSQLType
58326>>>>            Move 24                                      to aColumnType[i].iSQLType
58327>>>>            Move False                                   to aColumnType[i].bCanEditSize
58328>>>>            Move True                                    to aColumnType[i].bNativeDataType
58329>>>>            Move 64                                      to aColumnType[i].iDefaultSize
58330>>>>            Move -1                                      to aColumnType[i].iMinSize
58331>>>>            Move -1                                      to aColumnType[i].nMaxSize
58332>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
58333>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
58334>>>>            Move -1                                      to aColumnType[i].sPrecision
58335>>>>            Increment i
58336>>>>
58336>>>>            Move "smallint"                              to aColumnType[i].sSQLType
58337>>>>            Move 21                                      to aColumnType[i].iSQLType
58338>>>>            Move True                                    to aColumnType[i].bCanEditSize
58339>>>>            Move True                                    to aColumnType[i].bNativeDataType
58340>>>>            Move 6                                       to aColumnType[i].iDefaultSize
58341>>>>            Move 1                                       to aColumnType[i].iMinSize
58342>>>>            Move 6                                       to aColumnType[i].nMaxSize
58343>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
58344>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
58345>>>>            Move 6                                       to aColumnType[i].sPrecision
58346>>>>            Increment i
58347>>>>
58347>>>>            Move "text"                                  to aColumnType[i].sSQLType
58348>>>>            Move 25                                      to aColumnType[i].iSQLType
58349>>>>            Move True                                    to aColumnType[i].bCanEditSize
58350>>>>            Move True                                    to aColumnType[i].bNativeDataType
58351>>>>            Move 1                                       to aColumnType[i].iDefaultSize
58352>>>>            Move 1                                       to aColumnType[i].iMinSize
58353>>>>            Move 16384                                   to aColumnType[i].nMaxSize
58354>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
58355>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
58356>>>>            Move 16384                                   to aColumnType[i].sPrecision
58357>>>>            Increment i
58358>>>>
58358>>>>            Move "time"                                  to aColumnType[i].sSQLType
58359>>>>            Move 1083                                    to aColumnType[i].iSQLType
58360>>>>            Move True                                    to aColumnType[i].bCanEditSize
58361>>>>            Move True                                    to aColumnType[i].bNativeDataType
58362>>>>            Move 8                                       to aColumnType[i].iDefaultSize
58363>>>>            Move 8                                       to aColumnType[i].iMinSize
58364>>>>            Move 15                                      to aColumnType[i].nMaxSize
58365>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
58366>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
58367>>>>            Move 15                                      to aColumnType[i].sPrecision
58368>>>>            Increment i
58369>>>>
58369>>>>            Move "timestamp"                             to aColumnType[i].sSQLType
58370>>>>            Move 1114                                    to aColumnType[i].iSQLType
58371>>>>            Move False                                   to aColumnType[i].bCanEditSize
58372>>>>            Move True                                    to aColumnType[i].bNativeDataType
58373>>>>            Move 23                                      to aColumnType[i].iDefaultSize
58374>>>>            Move -1                                      to aColumnType[i].iMinSize
58375>>>>            Move -1                                      to aColumnType[i].nMaxSize
58376>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
58377>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
58378>>>>            Move -1                                      to aColumnType[i].sPrecision
58379>>>>            Increment i
58380>>>>
58380>>>>            Move "timestamptz"                           to aColumnType[i].sSQLType
58381>>>>            Move 1184                                    to aColumnType[i].iSQLType
58382>>>>            Move False                                   to aColumnType[i].bCanEditSize
58383>>>>            Move True                                    to aColumnType[i].bNativeDataType
58384>>>>            Move 23                                      to aColumnType[i].iDefaultSize
58385>>>>            Move -1                                      to aColumnType[i].iMinSize
58386>>>>            Move -1                                      to aColumnType[i].nMaxSize
58387>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
58388>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
58389>>>>            Move -1                                      to aColumnType[i].sPrecision
58390>>>>            Increment i
58391>>>>
58391>>>>            Move "uuid"                                  to aColumnType[i].sSQLType
58392>>>>            Move 2950                                    to aColumnType[i].iSQLType
58393>>>>            Move False                                   to aColumnType[i].bCanEditSize
58394>>>>            Move True                                    to aColumnType[i].bNativeDataType
58395>>>>            Move 40                                      to aColumnType[i].iDefaultSize
58396>>>>            Move -1                                      to aColumnType[i].iMinSize
58397>>>>            Move -1                                      to aColumnType[i].nMaxSize
58398>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
58399>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
58400>>>>            Move -1                                      to aColumnType[i].sPrecision
58401>>>>            Increment i
58402>>>>
58402>>>>            Move "varbit"                                to aColumnType[i].sSQLType
58403>>>>            Move 1562                                    to aColumnType[i].iSQLType
58404>>>>            Move True                                    to aColumnType[i].bCanEditSize
58405>>>>            Move True                                    to aColumnType[i].bNativeDataType
58406>>>>            Move 1                                       to aColumnType[i].iDefaultSize
58407>>>>            Move 1                                       to aColumnType[i].iMinSize
58408>>>>            Move 16384                                   to aColumnType[i].nMaxSize
58409>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
58410>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
58411>>>>            Move 16384                                   to aColumnType[i].sPrecision
58412>>>>            Increment i
58413>>>>
58413>>>>            Move "varchar"                               to aColumnType[i].sSQLType
58414>>>>            Move 1043                                    to aColumnType[i].iSQLType
58415>>>>            Move True                                    to aColumnType[i].bCanEditSize
58416>>>>            Move True                                    to aColumnType[i].bNativeDataType
58417>>>>            Move 1                                       to aColumnType[i].iDefaultSize
58418>>>>            Move 1                                       to aColumnType[i].iMinSize
58419>>>>            Move 16384                                   to aColumnType[i].nMaxSize
58420>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
58421>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
58422>>>>            Move 16384                                   to aColumnType[i].sPrecision
58423>>>>            Increment i
58424>>>>
58424>>>>
58424>>>
58424>>>//        Move ePgSQL_INT8        to ColumnType[i].iSQLType
58424>>>//        Move "bigint"           to ColumnType[i].sSQLType
58424>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
58424>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
58424>>>//        Move "14.0"             to ColumnType[i].sPrecision
58424>>>//        Move True               to ColumnType[i].bCanEditSize
58424>>>//        Increment i
58424>>>//
58424>>>//        Move ePgSQL_BIT         to ColumnType[i].iSQLType
58424>>>//        Move "bit"              to ColumnType[i].sSQLType
58424>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
58424>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
58424>>>//        Move "16384"            to ColumnType[i].sPrecision
58424>>>//        Increment i
58424>>>//
58424>>>//        Move ePgSQL_BOOL        to ColumnType[i].iSQLType
58424>>>//        Move "boolean"          to ColumnType[i].sSQLType
58424>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
58424>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
58424>>>//        Move "1"                to ColumnType[i].sPrecision
58424>>>//        Increment i
58424>>>//
58424>>>//        Move ePgSQL_BYTEA       to ColumnType[i].iSQLType
58424>>>//        Move "bytea"            to ColumnType[i].sSQLType
58424>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
58424>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
58424>>>//        Move "16384"            to ColumnType[i].sPrecision
58424>>>//        Increment i
58424>>>//
58424>>>//        Move ePgSQL_CHAR        to ColumnType[i].iSQLType
58424>>>//        Move "char"             to ColumnType[i].sSQLType
58424>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
58424>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
58424>>>//        Move "2000"             to ColumnType[i].sPrecision
58424>>>//        Increment i
58424>>>//
58424>>>//        Move ePgSQL_CITEXT      to ColumnType[i].iSQLType
58424>>>//        Move "citext"           to ColumnType[i].sSQLType
58424>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
58424>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
58424>>>//        Move "254"              to ColumnType[i].sPrecision
58424>>>//        Increment i
58424>>>//
58424>>>//        Move ePgSQL_DATE        to ColumnType[i].iSQLType
58424>>>//        Move "date"             to ColumnType[i].sSQLType
58424>>>//        Move DF_DATE            to ColumnType[i].iDataFlexType
58424>>>//        Move "Date"             to ColumnType[i].sDataFlexType
58424>>>//        Move "6.0"              to ColumnType[i].sPrecision
58424>>>//        Move True               to ColumnType[i].bCanEditSize
58424>>>//        Increment i
58424>>>//
58424>>>//        Move ePgSQL_FLOAT4      to ColumnType[i].iSQLType
58424>>>//        Move "decimal"          to ColumnType[i].sSQLType
58424>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
58424>>>//        Move "Decimal"          to ColumnType[i].sDataFlexType
58424>>>//        Move "14.8"             to ColumnType[i].sPrecision
58424>>>//        Increment i
58424>>>//
58424>>>//        Move ePgSQL_FLOAT8      to ColumnType[i].iSQLType
58424>>>//        Move "double"           to ColumnType[i].sSQLType
58424>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
58424>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
58424>>>//        Move "22"               to ColumnType[i].sPrecision
58424>>>//        Increment i
58424>>>//
58424>>>//        Move ePgSQL_INT4        to ColumnType[i].iSQLType
58424>>>//        Move "integer"          to ColumnType[i].sSQLType
58424>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
58424>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
58424>>>//        Move "8.0"              to ColumnType[i].sPrecision
58424>>>//        Increment i
58424>>>//
58424>>>//        Move ePgSQL_MONEY       to ColumnType[i].iSQLType
58424>>>//        Move "money"            to ColumnType[i].sSQLType
58424>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
58424>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
58424>>>//        Move "8.0"              to ColumnType[i].sPrecision
58424>>>//        Increment i
58424>>>//
58424>>>//        Move ePgSQL_OID         to ColumnType[i].iSQLType
58424>>>//        Move "oid"              to ColumnType[i].sSQLType
58424>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
58424>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
58424>>>//        Move "16384"            to ColumnType[i].sPrecision
58424>>>//        Increment i
58424>>>//
58424>>>//        Move ePgSQL_FLOAT4      to ColumnType[i].iSQLType
58424>>>//        Move "real"             to ColumnType[i].sSQLType
58424>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
58424>>>//        Move "Real"             to ColumnType[i].sDataFlexType
58424>>>//        Move "6.6"              to ColumnType[i].sPrecision
58424>>>//        Increment i
58424>>>//
58424>>>//        Move ePgSQL_REGPROC     to ColumnType[i].iSQLType
58424>>>//        Move "regproc"          to ColumnType[i].sSQLType
58424>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
58424>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
58424>>>//        Move "64"               to ColumnType[i].sPrecision
58424>>>//        Increment i
58424>>>//
58424>>>//        Move ePgSQL_INT2        to ColumnType[i].iSQLType
58424>>>//        Move "smallint"         to ColumnType[i].sSQLType
58424>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
58424>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
58424>>>//        Move "6.0"              to ColumnType[i].sPrecision
58424>>>//        Increment i
58424>>>//
58424>>>//        Move ePgSQL_TEXT        to ColumnType[i].iSQLType
58424>>>//        Move "text"             to ColumnType[i].sSQLType
58424>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
58424>>>//        Move "Text"             to ColumnType[i].sDataFlexType
58424>>>//        Move "16384"            to ColumnType[i].sPrecision
58424>>>//        Increment i
58424>>>//
58424>>>//        Move ePgSQL_TIME        to ColumnType[i].iSQLType
58424>>>//        Move "time"             to ColumnType[i].sSQLType
58424>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
58424>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
58424>>>//        Move "15.0"             to ColumnType[i].sPrecision
58424>>>//        Increment i
58424>>>//
58424>>>//        Move ePgSQL_TIMESTAMP   to ColumnType[i].iSQLType
58424>>>//        Move "timestamp"        to ColumnType[i].sSQLType
58424>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
58424>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
58424>>>//        Move "23.0"             to ColumnType[i].sPrecision
58424>>>//        Move True               to ColumnType[i].bCanEditSize
58424>>>//        Increment i
58424>>>//
58424>>>//        Move ePgSQL_UUID        to ColumnType[i].iSQLType
58424>>>//        Move "uuid"             to ColumnType[i].sSQLType
58424>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
58424>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
58424>>>//        Move "40"               to ColumnType[i].sPrecision
58424>>>//        Move True               to ColumnType[i].bCanEditSize
58424>>>//        Increment i
58424>>>//
58424>>>//        Move ePgSQL_VARCHAR     to ColumnType[i].iSQLType
58424>>>//        Move "varchar"          to ColumnType[i].sSQLType
58424>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
58424>>>//        Move "DF_TEXT"          to ColumnType[i].sDataFlexType
58424>>>//        Move "16384"            to ColumnType[i].sPrecision
58424>>>//        Increment i
58424>>>
58424>>>        Function_Return aColumnType
58425>>>    End_Function
58426>>>
58426>>>    // Internal usage. Use the UtilColumnTypeXXX functions instead.
58426>>>    Function _UtilColumnType String sDriverID Integer iDbType Integer iType String sType Boolean bIntegerInputType Returns tColumnType
58428>>>        Integer iValue iSize iCount iStart
58428>>>        tColumnType[] ColumnTypeArray
58428>>>        tColumnType[] ColumnTypeArray
58429>>>        tColumnType RetvalType
58429>>>        tColumnType RetvalType
58429>>>        String sValue
58429>>>        Boolean bFrameworkDataFlexType
58429>>>
58429>>>        Move "Undefined" to RetvalType.sSQLType
58430>>>        Move -1999       to RetvalType.iSQLType
58431>>>
58431>>>        Move 0 to iStart
58432>>>        Move (Uppercase(sType)) to sType
58433>>>        Move (iType <= -1490) to bFrameworkDataFlexType
58434>>>        If (bFrameworkDataFlexType = True) Begin
58436>>>            Get UtilDUFDataTypeToSqlTypeMapping sDriverID iDbType iType to RetvalType
58437>>>            Function_Return RetvalType
58438>>>        End
58438>>>>
58438>>>
58438>>>        Get UtilEnumerateColumnTypes sDriverID iDbType to ColumnTypeArray
58439>>>
58439>>>        Move (SizeOfArray(ColumnTypeArray)) to iSize
58440>>>        Decrement iSize
58441>>>
58441>>>        for iCount from iStart to iSize
58447>>>>
58447>>>            Move ColumnTypeArray[iCount].iSQLType to iValue
58448>>>            Move ColumnTypeArray[iCount].sSQLType to sValue
58449>>>            If (bIntegerInputType = True) Begin
58451>>>                If (iValue = iType) Begin
58453>>>                    Move ColumnTypeArray[iCount].sSQLType       to RetvalType.sSQLType
58454>>>                    Move iType                                  to RetvalType.iSQLType
58455>>>                    Move ColumnTypeArray[iCount].sDataFlexType  to RetvalType.sDataFlexType
58456>>>                    Move ColumnTypeArray[iCount].iDataFlexType  to RetvalType.iDataFlexType
58457>>>                    Move ColumnTypeArray[iCount].sPrecision     to RetvalType.sPrecision
58458>>>                    Move ColumnTypeArray[iCount].bCanEditSize   to RetvalType.bCanEditSize
58459>>>                    Move iSize to iCount // We're done!
58460>>>                End
58460>>>>
58460>>>            End
58460>>>>
58460>>>            Else Begin
58461>>>                Move (Uppercase(sValue)) to sValue
58462>>>                If (sValue = sType) Begin
58464>>>                    Move sType                                  to RetvalType.sSQLType
58465>>>                    Move ColumnTypeArray[iCount].iSQLType       to RetvalType.iSQLType
58466>>>                    Move ColumnTypeArray[iCount].sDataFlexType  to RetvalType.sDataFlexType
58467>>>                    Move ColumnTypeArray[iCount].iDataFlexType  to RetvalType.iDataFlexType
58468>>>                    Move ColumnTypeArray[iCount].sPrecision     to RetvalType.sPrecision
58469>>>                    Move ColumnTypeArray[iCount].bCanEditSize   to RetvalType.bCanEditSize
58470>>>                    Move iSize to iCount // We're done!
58471>>>                End
58471>>>>
58471>>>            End
58471>>>>
58471>>>        Loop
58472>>>>
58472>>>
58472>>>        // If no match was found it was probably because it was a DataFlex standard type that was passed.
58472>>>        // In which case we search for a match in DataFlex standard types:
58472>>>        If (RetvalType.sSQLType = "Undefined") Begin
58474>>>            Get _UtilEnumerateDataFlexTypes to ColumnTypeArray
58475>>>            Move (SizeOfArray(ColumnTypeArray)) to iSize
58476>>>            Decrement iSize
58477>>>
58477>>>            for iCount from iStart to iSize
58483>>>>
58483>>>                Move ColumnTypeArray[iCount].iSQLType to iValue
58484>>>                Move ColumnTypeArray[iCount].sSQLType to sValue
58485>>>                If (iValue = iType) Begin
58487>>>                    Move ColumnTypeArray[iCount].sSQLType       to RetvalType.sSQLType
58488>>>                    Move iType                                  to RetvalType.iSQLType
58489>>>                    Move ColumnTypeArray[iCount].sDataFlexType  to RetvalType.sDataFlexType
58490>>>                    Move ColumnTypeArray[iCount].iDataFlexType  to RetvalType.iDataFlexType
58491>>>                    Move ColumnTypeArray[iCount].sPrecision     to RetvalType.sPrecision
58492>>>                    Move ColumnTypeArray[iCount].bCanEditSize   to RetvalType.bCanEditSize
58493>>>                    Move iSize to iCount // We're done!
58494>>>                End
58494>>>>
58494>>>            Loop
58495>>>>
58495>>>        End
58495>>>>
58495>>>
58495>>>        Function_Return RetvalType
58496>>>    End_Function
58497>>>
58497>>>    Function _AllTablesToConvert Returns Integer[]
58499>>>        Integer[] aTableConvertExceptions iTablesArray
58501>>>        Handle hTable
58501>>>        Integer iIndex
58501>>>        String sTableName
58501>>>        Boolean bFlexErrs
58501>>>
58501>>>        // a) Get the exception table array the developer has specified
58501>>>        Get paTableConvertExceptions to aTableConvertExceptions
58502>>>
58502>>>        // b) Add CodeMast, CodeType & DbVersion to exceptions
58502>>>        Repeat
58502>>>>
58502>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
58505>>>            If (hTable <> 0) Begin
58507>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
58510>>>                Move (Uppercase(sTableName) = "FLEXERRS")  to bFlexErrs
58511>>>                If (bFlexErrs = False) Begin
58513>>>                    If (Uppercase(sTableName) = "CODEMAST" or Uppercase(sTableName) = "CODETYPE" or Uppercase(sTableName) = "DBVERSION") Begin
58515>>>                        Move (SearchArray(hTable, aTableConvertExceptions)) to iIndex
58516>>>                        If (iIndex = -1) Begin
58518>>>                            Move hTable to aTableConvertExceptions[SizeOfArray(aTableConvertExceptions)]
58519>>>                        End
58519>>>>
58519>>>                    End
58519>>>>
58519>>>                End
58519>>>>
58519>>>            End
58519>>>>
58519>>>        Until (hTable = 0)
58521>>>
58521>>>        Move 0 to hTable
58522>>>
58522>>>        // c) Spin through filelist.cfg and add all tables except those from the exception array, to the return array.
58522>>>        Repeat
58522>>>>
58522>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
58525>>>            If (hTable > 0) Begin
58527>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
58530>>>                Move (Uppercase(sTableName) = "FLEXERRS")  to bFlexErrs
58531>>>                If (bFlexErrs = False) Begin
58533>>>                    Move (SearchArray(hTable, aTableConvertExceptions)) to iIndex
58534>>>                    If (iIndex = -1) Begin
58536>>>                        Move hTable to iTablesArray[SizeOfArray(iTablesArray)]
58537>>>                    End
58537>>>>
58537>>>                End
58537>>>>
58537>>>            End
58537>>>>
58537>>>        Until (hTable = 0)
58539>>>
58539>>>        Function_Return iTablesArray
58540>>>    End_Function
58541>>>
58541>>>    Function _AllTablesDateCorrections Returns Integer[]
58543>>>        Integer[] aTableDateCorrectionExceptions iTablesArray
58545>>>        Handle hTable
58545>>>        Integer iIndex
58545>>>        String sTableName
58545>>>        Boolean bFlexErrs
58545>>>
58545>>>        Get paTableDateCorrectionExceptions to aTableDateCorrectionExceptions
58546>>>        Move 0 to hTable
58547>>>
58547>>>        // Spin through filelist.cfg and add all tables except those from the exception array, to the return array.
58547>>>        Repeat
58547>>>>
58547>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
58550>>>            If (hTable > 0) Begin
58552>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
58555>>>                Move (Uppercase(sTableName) = "FLEXERRS")  to bFlexErrs
58556>>>                If (bFlexErrs = False) Begin
58558>>>                    Move (SearchArray(hTable, aTableDateCorrectionExceptions)) to iIndex
58559>>>                    If (iIndex = -1) Begin
58561>>>                        Move hTable to iTablesArray[SizeOfArray(iTablesArray)]
58562>>>                    End
58562>>>>
58562>>>                End
58562>>>>
58562>>>            End
58562>>>>
58562>>>        Until (hTable = 0)
58564>>>
58564>>>        Function_Return iTablesArray
58565>>>    End_Function
58566>>>
58566>>>    Function _AppendAPIColumn tAPIColumn[] aCurrent String sFieldName Integer iType Integer iLength Integer iPrecision Integer iOptions Returns tAPIColumn[]
58568>>>        tAPIColumn NewAPIColumn
58568>>>        tAPIColumn NewAPIColumn
58568>>>
58568>>>        Move sFieldName to NewAPIColumn.sFieldName
58569>>>        Move iType      to NewAPIColumn.iType
58570>>>        Move iLength    to NewAPIColumn.iLength
58571>>>        Move iPrecision to NewAPIColumn.iPrecision
58572>>>        Move iOptions   to NewAPIColumn.iOptions
58573>>>
58573>>>        Move NewAPIColumn to aCurrent[SizeOfArray(aCurrent)]
58574>>>
58574>>>        Function_Return aCurrent
58575>>>    End_Function
58576>>>
58576>>>    Function _UtilIndexAppendSegmentFieldNames tAPIIndexSegment[] APIIndexSegment Returns String
58578>>>        String sRetval sFieldName
58578>>>        Integer iCount iSize
58578>>>
58578>>>        Move (SizeOfArray(APIIndexSegment)) to iSize
58579>>>        Decrement iSize
58580>>>        for iCount from 0 to iSize
58586>>>>
58586>>>            Move APIIndexSegment[iCount].sFieldName to sFieldName
58587>>>            Move (sRetval * (String(sFieldName))) to sRetval
58588>>>        Loop
58589>>>>
58589>>>        Move (Trim(sRetval)) to sRetval
58590>>>
58590>>>        Function_Return sRetval
58591>>>    End_Function
58592>>>
58592>>>    // *** Miscellaneous other functions ***
58592>>>    // Some of which can be used by both "Sqlxxx" and "Apixxx" functions.
58592>>>    //
58592>>>
58592>>>    // Callback functionality used when e.g. calling driver functions directly.
58592>>>    Function Callback String sCallback_Text Integer iCallback_Type Returns Integer
58594>>>        Integer iPerc
58594>>>        Number nReady nTotal
58594>>>
58594>>>        Send DoAdvance of ghoProgressBar
58595>>>
58595>>>        If (sCallback_Text contains "Copy records") Begin
58597>>>            Move CS_DUF_CopyingData to sCallback_Text
58598>>>        End
58598>>>>
58598>>>        If (sCallback_Text contains "Dropping index" or sCallback_Text contains "Temporary delete of all indices of table") Begin
58600>>>            Move (Replace("Dropping index", sCallback_Text, CS_DUF_DeletingIndex)) to sCallback_Text
58601>>>            Move (Replace("Temporary delete of all indices of table", sCallback_Text, CS_DUF_DeletingIndex)) to sCallback_Text
58602>>>        End
58602>>>>
58602>>>        If (sCallback_Text contains "Creating index") Begin
58604>>>            Move (Replace("Creating index", sCallback_Text, CS_DUF_CreatingIndex)) to sCallback_Text
58605>>>        End
58605>>>>
58605>>>
58605>>>        Case Begin
58605>>>            Case (iCallback_Type = DF_Message_Text)
58607>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
58608>>>                Set Action_Text  of ghoStatusPanel to ""
58609>>>                Case Break
58610>>>            Case (iCallback_Type = DF_Message_Heading_1)
58613>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
58614>>>                Set Action_Text  of ghoStatusPanel to ""
58615>>>                Case Break
58616>>>            Case (iCallback_Type = DF_Message_Heading_2)
58619>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
58620>>>                Set Action_Text  of ghoStatusPanel to ""
58621>>>                Case Break
58622>>>            Case (iCallback_Type = DF_Message_Heading_3)
58625>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
58626>>>                Set Action_Text  of ghoStatusPanel to ""
58627>>>                Case Break
58628>>>            Case (iCallback_Type = DF_Message_Heading_4)
58631>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
58632>>>                Set Action_Text  of ghoStatusPanel to ""
58633>>>                Case Break
58634>>>            Case (iCallback_Type = DF_Message_Heading_5)
58637>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
58638>>>                Set Action_Text  of ghoStatusPanel to ""
58639>>>                Case Break
58640>>>            Case (iCallback_Type = DF_Message_Warning)
58643>>>                Send None
58644>>>                Case Break
58645>>>            Case (iCallback_Type = DF_Message_Progress_Title)
58648>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
58649>>>                Set Action_Text  of ghoStatusPanel to ""
58650>>>                Case Break
58651>>>            Case (iCallback_Type = DF_Message_Progress_Value)
58654>>>                //*** Interpret numbers
58654>>>                Move (Left(sCallback_Text, (Pos(",", sCallback_Text) - 1)))                       to nReady
58655>>>                Move (Right(sCallback_Text, (Length(sCallback_Text) - Pos(",", sCallback_Text)))) to nTotal
58656>>>                Move ((nReady / nTotal) * 100)                                                    to iPerc
58657>>>                Set Action_Text of ghoStatusPanel to (String(iPerc) * String("% Done (Total Number of Records:") * String(nTotal) + ")")
58658>>>                Case Break
58659>>>            Case Else
58659>>>                Set Message_Text to ""
58660>>>                Set Action_Text  to ""
58661>>>        Case End
58661>>>
58661>>>        Send ProcessEvents of ghoStatusPanel
58662>>>        Function_Return False
58663>>>    End_Function
58664>>>
58664>>>    Procedure IncreaseSortBufferSize
58666>>>        String sNull
58666>>>        Integer iSortBufferSize
58666>>>        Boolean bBufferSet
58666>>>
58666>>>        Move "" to sNull
58667>>>        Move (1024 * 128) to iSortBufferSize
58668>>>        Call_Driver 0 DATAFLEX_ID Function FLEX_SET_MAX_SORT_BUFFER Callback ghoDbUpdateHandler Passing sNull sNull iSortBufferSize Result bBufferSet
58673>>>
58673>>>    End_Procedure
58674>>>
58674>>>    Procedure SetAllIndexesToBatch Handle hTable Boolean bSetToBatch
58676>>>        Integer iLastIndex iIndex iNumSegments
58676>>>        Boolean bOK
58676>>>        String sDriverID
58676>>>
58676>>>        If (hTable > 0) Begin
58678>>>            Get UtilDriverFromTableNumber hTable to sDriverID
58679>>>            Close hTable
58680>>>            Get OpenTableExclusive hTable to bOK
58681>>>            If (bOK = False) Begin
58683>>>                Procedure_Return
58684>>>            End
58684>>>>
58684>>>            Get_Attribute DF_FILE_LAST_INDEX_NUMBER of hTable to iLastIndex
58687>>>            Structure_Start hTable sDriverID
58688>>>                for iIndex from 1 to iLastIndex
58694>>>>
58694>>>                    Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
58697>>>                    If (iNumSegments > 0) Begin
58699>>>                        If (bSetToBatch = True) Begin
58701>>>                            Set_Attribute DF_INDEX_TYPE of hTable iIndex to DF_INDEX_TYPE_BATCH
58704>>>                        End
58704>>>>
58704>>>                        Else Begin
58705>>>                            Set_Attribute DF_INDEX_TYPE of hTable iIndex to DF_INDEX_TYPE_ONLINE
58708>>>                        End
58708>>>>
58708>>>                    End
58708>>>>
58708>>>                Loop
58709>>>>
58709>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
58711>>>        End
58711>>>>
58711>>>    End_Procedure
58712>>>
58712>>>    Function NextFreeFilelistSlot Returns Handle
58714>>>        Handle hTable
58714>>>
58714>>>        Move 0 to hTable
58715>>>        Get_Attribute DF_FILE_NEXT_EMPTY of hTable to hTable
58718>>>
58718>>>        Function_Return hTable
58719>>>    End_Function
58720>>>
58720>>>    // For debugging purposes. To print Sql statements as they are build...
58720>>>    Procedure DebugPrint String sStmt String sFileName
58722>>>        Integer iCh
58722>>>        Get Seq_Append_Output_Channel sFileName to iCh
58723>>>            Write channel iCh sStmt
58725>>>        Send Seq_Close_Channel iCh
58726>>>    End_Procedure
58727>>>
58727>>>    // Returns the integer number for the passed Driver ID that is
58727>>>    // needed by some database API calls.
58727>>>    Function DriverIndex String sDriverID Returns Integer
58729>>>        String  sCurrentDriver
58729>>>        Integer iNumberOfDrivers iDriver iCount
58729>>>
58729>>>        Move 0 to iDriver
58730>>>
58730>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
58733>>>        for iCount from 1 to iNumberOfDrivers
58739>>>>
58739>>>
58739>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
58742>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriverID) ) Begin
58744>>>                Move iCount to iDriver
58745>>>            End
58745>>>>
58745>>>        Loop
58746>>>>
58746>>>
58746>>>        // In case it was not found, it wasn't loaded so we do that now.
58746>>>        If (iDriver = 0) Begin
58748>>>            Move False to Err
58749>>>            Load_Driver sDriverID
58750>>>            If (Err = False) Begin
58752>>>                Get_Attribute DF_NUMBER_DRIVERS to iDriver
58755>>>            End
58755>>>>
58755>>>        End
58755>>>>
58755>>>
58755>>>        Function_Return iDriver
58756>>>    End_Function
58757>>>
58757>>>    
58757>>>    Function MinMSSQLDRV_And_ClientVersion String sMSSQLDRVVersion Integer iClientVersion Boolean bShowErrorDialog Boolean bExitProgram Returns String
58759>>>        String sDriverID sVersion sClient sClientLowest sRetval
58759>>>        Integer iNumberOfDrivers iDriver iClient
58759>>>        Handle hoCLIHandler hoMSSQLHandler   
58759>>>        Boolean bOK
58759>>>        
58759>>>        Move "" to sRetval
58760>>>        Get Create (RefClass(cCLIHandler)) to hoCLIHandler
58761>>>        Get Create (RefClass(cMSSQLHandler)) to hoMSSQLHandler
58762>>>        Load_Driver MSSQLDRV_ID
58763>>>
58763>>>        // Loop through all loaded drivers.
58763>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
58766>>>        For iDriver from 1 to iNumberOfDrivers
58772>>>>
58772>>>            Get_Attribute DF_DRIVER_NAME of iDriver to sDriverID
58775>>>            If (sDriverID = MSSQLDRV_ID) Begin
58777>>>                Set psDriverID of hoCLIHandler to sDriverID
58778>>>                Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClient   
58781>>>                Get SqlServerClientVersionName of hoMSSQLHandler iClientVersion to sClientLowest 
58782>>>                Get SqlServerClientVersionName of hoMSSQLHandler iClient to sClient 
58783>>>                Get CKRevision of hoCLIHandler to sVersion
58784>>>                Move (SFormat (String(C_$DatabaseDriver), (sDriverID * "-" * (String(C_$Version) + ": " + String(sVersion))))) to sRetval
58785>>>                If (sClient <> "" and sRetval <> "") Begin
58787>>>                    Move (String(sRetval) + "\n" + String(C_$SQL_Client_Text) + "\n" + Trim(sClient)) to sRetval
58788>>>                End                                
58788>>>>
58788>>>                Else Begin
58789>>>                    Move (String(C_$SQL_Client_Text) + "\n" + Trim(sClient) * "(" + String(iClient) + ")") to sRetval
58790>>>                End
58790>>>>
58790>>>            End
58790>>>>
58790>>>        Loop
58791>>>>
58791>>>        Send Destroy of hoCLIHandler  
58792>>>        Send Destroy of hoMSSQLHandler  
58793>>>        If (bShowErrorDialog = True) Begin
58795>>>            Get IsFirstStringGreaterThanSecond sVersion sMSSQLDRVVersion to bOK
58796>>>            If (bOK = False or (iClient < iClientVersion)) Begin
58798>>>                Move (MSSQLDRV_ID + ".dll" * String(C_$SQL_Driver_Version_Min_Text) *  String(sMSSQLDRVVersion) + String("\n") + String(C_$SQL_Client_Version_Min_Text) + "\n" + String(sClientLowest) + String("\n\n") + String(C_$SQL_Versions_Are_Text) + String("\n") + String(sRetval)) to sRetval
58799>>>                If (bExitProgram = True) Begin
58801>>>                    Move (String(sRetval) + String("\n\n") + String(C_$PleaseAdjustTxt) * String(C_$ProgramWillExit_Text)) to sRetval
58802>>>                End
58802>>>>
58802>>>                Send Stop_Box sRetval  
58803>>>                If (bExitProgram = True) Begin
58805>>>                    Send Exit_Application
58806>>>                End
58806>>>>
58806>>>            End
58806>>>>
58806>>>        End
58806>>>>
58806>>>        
58806>>>        Function_Return sRetval
58807>>>    End_Function  
58808>>>    
58808>>>    // Returns True if first "." separated string is greater than the second.
58808>>>    // It checks from left to right, one part of the string at a time.
58808>>>    // E.g. if sVersion="20.1.31.10 and sSQLVersion="6.3.0.13" the function would return TRUE.
58808>>>    Function IsFirstStringGreaterThanSecond String sVersion String sSQLVersion Returns Boolean
58810>>>        String[] asVersion asSQLVersion          
58812>>>        Integer iSize iCount iVersion iSQLVersion
58812>>>        
58812>>>        Move (StrSplitToArray(sVersion, "."))    to asVersion
58813>>>        Move (StrSplitToArray(sSQLVersion, ".")) to asSQLVersion
58814>>>        Move (SizeOfArray(asVersion)) to iSize
58815>>>        Decrement iSize
58816>>>        for iCount from 0 to iSize
58822>>>>
58822>>>            Move asVersion[iCount]    to iVersion
58823>>>            Move asSQLVersion[iCount] to iSQLVersion
58824>>>            CompilerWarnings Off
58824>>>            If (iVersion > iSQLVersion) Break
58827>>>            CompilerWarnings On
58827>>>        Loop
58828>>>>
58828>>>        
58828>>>        Function_Return (iVersion > iSQLVersion)
58829>>>    End_Function
58830>>>
58830>>>    // Returns TRUE if table is opened exclusive, otherwise FALSE
58830>>>    // Note: If run from the Studio, CodeMast & CodeType _is_ open by the Studio,
58830>>>    //       so in that case we "cheat" and report those tables were opened OK.
58830>>>    Function OpenTableExclusive Handle hTable Returns Boolean
58832>>>        Integer iMode
58832>>>        Boolean bOpened
58832>>>        String sTableName
58832>>>
58832>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
58833>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
58836>>>        If (bOpened) Begin
58838>>>            If (IsDebuggerPresent()) Begin
58840>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
58843>>>                If (Uppercase(sTableName) = "CODEMAST" or Uppercase(sTableName) = "CODETYPE") Begin
58845>>>                    Set Error_Report_Mode to DUF_ERROR_REPORT
58846>>>                    Function_Return True
58847>>>                End
58847>>>>
58847>>>            End
58847>>>>
58847>>>            Get_Attribute DF_FILE_OPEN_MODE of hTable to iMode
58850>>>            If (iMode=DF_EXCLUSIVE) Begin
58852>>>                    Set Error_Report_Mode to DUF_ERROR_REPORT
58853>>>                Function_Return True
58854>>>            End
58854>>>>
58854>>>            Close hTable
58855>>>        End
58855>>>>
58855>>>        Else Begin
58856>>>            Open hTable
58858>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpened
58861>>>            If (bOpened and IsDebuggerPresent()) Begin
58863>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
58866>>>                If (Uppercase(sTableName) = "CODEMAST" or Uppercase(sTableName) = "CODETYPE") Begin
58868>>>                    Set Error_Report_Mode to DUF_ERROR_REPORT
58869>>>                    Function_Return True
58870>>>                End
58870>>>>
58870>>>            End
58870>>>>
58870>>>
58870>>>        End
58870>>>>
58870>>>
58870>>>        Close hTable
58871>>>        Open hTable Mode DF_EXCLUSIVE
58873>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
58876>>>
58876>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
58877>>>        Function_Return bOpened
58878>>>    End_Function
58879>>>
58879>>>    Function AutoConnectionIDLogin Returns Boolean
58881>>>        String sConnectionID sConnectionString sDriverID
58881>>>        Boolean bExists bOK bSQLDriver bMertech
58881>>>        Handle hoCLI hoDriver
58881>>>        Integer iRetval
58881>>>        tSQLConnection SQLConnection
58881>>>        tSQLConnection SQLConnection
58881>>>
58881>>>        Get psDriverID to sDriverID
58882>>>        Get IsSQLDriver sDriverID to bSQLDriver
58883>>>        If (bSQLDriver = False) Begin
58885>>>            Function_Return True
58886>>>        End
58886>>>>
58886>>>
58886>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
58887>>>        Move SQLConnection.sDriverID                  to sDriverID
58888>>>        Move SQLConnection.sConnectionString          to sConnectionString
58889>>>        Get IsMertechDriver sDriverID to bMertech
58890>>>        If (bMertech = True) Begin
58892>>>            Get _MertechSQLManagerHandle to hoCLI
58893>>>            Get Create (RefClass(cDbUpdateDatabaseDriver)) to hoDriver
58894>>>            Set psDriverID of hoDriver to SQLConnection.sDriverID
58895>>>            Get DbLogin  of hoDriver sConnectionString SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to bOK
58896>>>            Send Destroy of hoDriver
58897>>>            Function_Return bOK
58898>>>        End
58898>>>>
58898>>>
58898>>>        Move SQLConnection.sConnectionID to sConnectionID
58899>>>
58899>>>        Get IsConnectionID sConnectionID sDriverID to bExists
58900>>>        If (bExists = False) Begin
58902>>>            // We always start by deleting the current connection - if any - because the
58902>>>            // login details my have changed.
58902>>>            Get phoCLIHandler to hoCLI
58903>>>            Set psDriverID    of hoCLI to sDriverID
58904>>>            Get DeleteConnectionID of hoCLI sConnectionID -1 to iRetval
58905>>>            Get AutoSetConnectionID sConnectionID to bOk
58906>>>            If (bOk = False) Begin
58908>>>                Error DFERR_PROGRAM ("The Connection ID:" * sConnectionID * "could not be created and therefor the table can't be changed.")
58909>>>>
58909>>>                Function_Return False
58910>>>            End
58910>>>>
58910>>>            Move bOK to bExists
58911>>>        End
58911>>>>
58911>>>
58911>>>        Get Create (RefClass(cDbUpdateDatabaseDriver)) to hoDriver
58912>>>        Set psDriverID of hoDriver to SQLConnection.sDriverID
58913>>>        Get DbLogin of hoDriver sConnectionString SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to bOK
58914>>>        Send Destroy of hoDriver
58915>>>
58915>>>        Function_Return (bExists = True)
58916>>>    End_Function
58917>>>
58917>>>    // Scans to see if all tables can be opened exclusivly. I.e. that nobody else is running the application.
58917>>>    // Returns: False if nobody else is running
58917>>>    //          True if at least one table is open by another process (e.g. another user is running the application)
58917>>>    // N.B! Only works for Embedded DataFlex Tables! It will _not_ work for Sql tables because; these
58917>>>    //      tables are not locked as DataFlex tables are.
58917>>>    Function IsDatabaseInUse Returns Boolean
58919>>>        Handle  hTable
58919>>>        String  sRootName
58919>>>        Boolean bOpen bErr bAlias bOK bIsSQLTable bFlexErrs bExists
58919>>>        Integer iCount iTables
58919>>>
58919>>>        Move 0 to iTables
58920>>>        Set Action_Text of ghoStatusPanel to "Database in use check..."
58921>>>        Get AutoConnectionIDLogin to bOK
58922>>>        Get UtilFilelistNoOfTables to iTables
58923>>>        Set piPosition   of ghoProgressBar to 0
58924>>>        Set piAdvanceBy  of ghoProgressBar to 1
58925>>>        Set piMaximum    of ghoProgressBar to iTables
58926>>>        Move 0 to hTable
58927>>>        Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
58930>>>        Move False to bErr
58931>>>        Send Ignore_Error of Error_Object_Id DFERR_FILE_ACCESS_VIOLATION
58932>>>
58932>>>        Repeat
58932>>>>
58932>>>            Set piPosition of ghoProgressBar to iCount
58933>>>            Increment iCount
58934>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
58937>>>            Move (Uppercase(sRootName) = "FLEXERRS")  to bFlexErrs
58938>>>
58938>>>            // This test is only applicable for DataFlex embedded tables; so skip test if driver based table.
58938>>>            Get UtilTableIsSQLByRootName sRootName to bIsSQLTable
58939>>>            Move False to bOpen
58940>>>            Get UtilTableExists hTable to bExists
58941>>>            // Don't bother about CodeType (253, CodeMast (254) or) FlexErrs (Normally table 50)
58941>>>            If (bIsSQLTable = False and bExists = True and hTable <> 0 and hTable <> 253 and hTable <> 254 and bFlexErrs = False) Begin
58943>>>                Set Error_Report_Mode to DUF_ERROR_NO_REPORT
58944>>>                Open hTable
58946>>>                Get_Attribute DF_FILE_OPENED of hTable to bOpen
58949>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
58950>>>                If (bOpen = True) Begin
58952>>>                    // We cannot open an Alias file exclusive as it will generate an error (4177 - "File in use")
58952>>>                    Get UtilTableIsAlias hTable to bAlias
58953>>>                    If (bAlias = False) Begin
58955>>>                        Close hTable
58956>>>                        Get OpenTableExclusive hTable to bOpen
58957>>>                        If (bOpen = False) Begin
58959>>>                            Move True to bErr
58960>>>                        End
58960>>>>
58960>>>                    End
58960>>>>
58960>>>                End
58960>>>>
58960>>>                Close hTable
58961>>>            End
58961>>>>
58961>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
58964>>>            If (bErr = True ) ;                Break
58967>>>        Until (not(hTable))
58969>>>
58969>>>        Set Action_Text of ghoStatusPanel to ""
58970>>>        Send Trap_Error of Error_Object_Id DFERR_FILE_ACCESS_VIOLATION
58971>>>        Move False to Err
58972>>>
58972>>>        Function_Return bErr
58973>>>    End_Function
58974>>>
58974>>>    // Checks if the passed connection id exists in the CLI interface.
58974>>>    // This might be needed by API-methods when a connection id is to be used and
58974>>>    // the connection id hasn't been established with the driver's CLI interface.
58974>>>    // NOTE: Only applicable for DAW drivers.
58974>>>    Function IsConnectionID String sConnectionID String sDriverID Returns Boolean
58976>>>        String sID sConnString
58976>>>        Integer iDriver iNumConn iCount
58976>>>        Handle hoCLI
58976>>>        Boolean bOK
58976>>>
58976>>>        Get IsDAWSQLDriver sDriverID to bOK
58977>>>        If (bOK = False) Begin
58979>>>            Error DFERR_PROGRAM "Connection ID's can only be used with DAW drivers (not Mertech)."
58980>>>>
58980>>>            Function_Return False
58981>>>        End
58981>>>>
58981>>>
58981>>>        Move False to bOK
58982>>>        Get phoCLIHandler to hoCLI
58983>>>        If (hoCLI <> 0) Begin
58985>>>            Set psDriverID of hoCLI to sDriverID
58986>>>            Get DriverIndex of hoCLI sDriverID to iDriver
58987>>>
58987>>>            // If driver not loaded; load it.
58987>>>            If (iDriver = 0) Begin
58989>>>                Load_Driver sDriverID
58990>>>                Get DriverIndex sDriverID to iDriver
58991>>>            End
58991>>>>
58991>>>            If (iDriver <> 0) Begin
58993>>>                Get_Attribute DF_DRIVER_NUMBER_CONNECTION_IDS of iDriver to iNumConn
58996>>>                Decrement iNumConn
58997>>>                for iCount from 0 to iNumConn
59003>>>>
59003>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID_STRING of iDriver iCount to sConnString
59006>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID of iDriver iCount to sID
59009>>>                    If (sID = sConnectionID) Begin
59011>>>                        Move True to bOK
59012>>>                    End
59012>>>>
59012>>>                Loop
59013>>>>
59013>>>            End
59013>>>>
59013>>>        End
59013>>>>
59013>>>
59013>>>        Function_Return bOK
59014>>>    End_Function
59015>>>
59015>>>    Function IsDAWSQLDriver String sDriverID Returns Boolean
59017>>>        Boolean bOK
59017>>>        Move (sDriverID = MSSQLDRV_ID or sDriverID = DB2_DRV_ID or sDriverID = ODBC_DRV_ID or sDriverID = DFBTRDRV_ID) to bOK
59018>>>        Function_Return bOK
59019>>>    End_Function
59020>>>
59020>>>    Function IsMertechDriver String sDriverID Returns Boolean
59022>>>        Boolean bOK
59022>>>        Move False to bOK
59023>>>        Move (sDriverID = SQLFLEX or sDriverID = ORAFLEX or sDriverID = MDSPgSQL or sDriverID = MDSMySQL) to bOK
59024>>>        Function_Return bOK
59025>>>    End_Function
59026>>>
59026>>>    Function IsMSSQLDriver Returns Boolean
59028>>>        Integer iDriverIndex
59028>>>
59028>>>        Get DriverIndex MSSQLDRV_ID to iDriverIndex
59029>>>
59029>>>        Function_Return (iDriverIndex <> 0)
59030>>>    End_Function
59031>>>
59031>>>    // Similar to _SqlCheckCurrentDriver but generates no error and it doesn't
59031>>>    // attempt to load the driver.
59031>>>    // Returns true if the passed driver is SQL based.
59031>>>    Function IsSQLDriver String sDriverID Returns Boolean
59033>>>        Boolean bOK
59033>>>
59033>>>        Get IsDAWSQLDriver sDriverID to bOK
59034>>>
59034>>>        If (bOK = False) Begin
59036>>>            Get IsMertechDriver sDriverID to bOK
59037>>>        End
59037>>>>
59037>>>
59037>>>        Function_Return bOK
59038>>>    End_Function
59039>>>
59039>>>    // *** Error Handler ***
59039>>>    //
59039>>>    // Note: If the cDbUpdateHandler & cDbUpdateVersion classes are used this error handler is _not_
59039>>>    //       used. Instead the Error_Report in the cDbUpdateHandler i used.
59039>>>    Procedure Error_Report Integer iErrorNumber Integer iErrorLine String sErrorText
59041>>>        Integer iSize iErrorMode
59041>>>        tSqlErrorArray aSqlErrorArray
59041>>>        tSqlErrorArray aSqlErrorArray
59041>>>
59041>>>        If (pbProcessingError(Self)) Begin
59043>>>            Procedure_Return
59044>>>        End
59044>>>>
59044>>>
59044>>>        Get Error_Report_Mode to iErrorMode
59045>>>        If (iErrorMode = DUF_ERROR_NO_REPORT) Begin
59047>>>            Procedure_Return
59048>>>        End
59048>>>>
59048>>>
59048>>>        Set pbProcessingError to True
59049>>>        Set pbSqlError to True
59050>>>        Get paSqlErrorArray      to aSqlErrorArray
59051>>>        Move (SizeOfArray(aSqlErrorArray.sSqlErrorArray)) to iSize
59052>>>        Move sErrorText          to aSqlErrorArray.sSqlErrorArray[iSize]
59053>>>        Get psSQLStatementString to aSqlErrorArray.sSqlStatementArray[iSize]
59054>>>        Move iErrorNumber        to aSqlErrorArray.iSqlErrorArray[iSize]
59055>>>        Set paSqlErrorArray      to aSqlErrorArray
59056>>>        Set pbProcessingError to False
59057>>>    End_Procedure
59058>>>
59058>>>    // *** Miscellanous Helper Functions ***
59058>>>    //
59058>>>    // Helper function. Takes a DF_FILE_XXXX_NAME value as parameter and
59058>>>    // returns the table name only; stripped of any path or filename extension.
59058>>>    Function _TableNameOnly String sName Returns String
59060>>>        String sPath sExt
59060>>>
59060>>>        Get ParseFolderName sName to sPath
59061>>>        If (sPath <> "") Begin
59063>>>            Move (Replace(sPath, sName, "")) to sName
59064>>>        End
59064>>>>
59064>>>        Get ParseFileExtension sName to sExt
59065>>>        If (sExt <> "") Begin
59067>>>            Move (Replace(("." + sExt), sName, "")) to sName
59068>>>        End
59068>>>>
59068>>>
59068>>>        Function_Return sName
59069>>>    End_Function
59070>>>
59070>>>    // Removes any prefix to a table name.
59070>>>    // Example mssqldrv:mytable returns mytable
59070>>>    //         dbo.mytable returns mytable
59070>>>    Function _TableNoPrefix String sName Returns String
59072>>>        Integer iPos
59072>>>
59072>>>        Move (Pos(":", sName)) to iPos
59073>>>        If (iPos <> 0) Begin
59075>>>            Move (Mid(sName, 999, (iPos + 1))) to sName
59076>>>        End
59076>>>>
59076>>>        Move (Pos(".", sName)) to iPos
59077>>>        If (iPos <> 0) Begin
59079>>>            Move (Mid(sName, 999, (iPos + 1))) to sName
59080>>>        End
59080>>>>
59080>>>
59080>>>        Function_Return sName
59081>>>    End_Function
59082>>>
59082>>>    // Returns the first datapath found in the psDataPath property.
59082>>>    // The returned path always ends with a "\"
59082>>>    Function psDataPathFirstPart Returns String
59084>>>        String sDataPath
59084>>>        Integer iCount
59084>>>
59084>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
59085>>>        Get CountOfPaths of (phoWorkspace(ghoApplication)) sDataPath to iCount
59086>>>        If (iCount > 1) Begin
59088>>>            Get PathAtIndex of (phoWorkspace(ghoApplication)) sDataPath 1 to sDataPath
59089>>>        End
59089>>>>
59089>>>        If (sDataPath <> "") Begin
59091>>>            Get vFolderFormat sDataPath to sDataPath
59092>>>        End
59092>>>>
59092>>>
59092>>>        Function_Return sDataPath
59093>>>    End_Function
59094>>>
59094>>>    Function psLogTextFileWithPath Returns String
59096>>>        String sFileName
59096>>>        Handle hoLogFile
59096>>>        Get phoLogFile to hoLogFile
59097>>>        Get psLogTextFileWithPath of hoLogFile to sFileName
59098>>>        Function_Return sFileName
59099>>>    End_Function
59100>>>
59100>>>    // *** Property Messages ***
59100>>>    //
59100>>>    // These "properties" are settings for the cSQLConnectionHandler class, but have been
59100>>>    // "duplicated" here so connection properties can be relayed to the ghoSQLConnectionHandler object
59100>>>    //
59100>>>
59100>>>    Function pSQLConnection Returns tSQLConnection
59102>>>        tSQLConnection SQLConnection
59102>>>        tSQLConnection SQLConnection
59102>>>        If (ghoSQLConnectionHandler = 0) Begin
59104>>>            // Note: No point in translating as the programmer will see this immediately after compiling the program...
59104>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59105>>>>
59105>>>            Function_Return
59106>>>        End
59106>>>>
59106>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
59107>>>        Function_Return SQLConnection
59108>>>    End_Function
59109>>>
59109>>>    // * Dummy function for the Studio's Code Explorer *
59109>>>    Function OTHER_CLASS_PROPERTIES Returns Boolean
59111>>>        Function_Return False
59112>>>    End_Function
59113>>>
59113>>>    Procedure Set psServer String sValue
59115>>>        If (ghoSQLConnectionHandler = 0) Begin
59117>>>            // Note: No point in translating as the programmer will see this immediately after compiling the program...
59117>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59118>>>>
59118>>>            Procedure_Return
59119>>>        End
59119>>>>
59119>>>        Set psServer of ghoSQLConnectionHandler to sValue
59120>>>    End_Procedure
59121>>>
59121>>>    Function psServer Returns String
59123>>>        String sValue
59123>>>        If (ghoSQLConnectionHandler = 0) Begin
59125>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59126>>>>
59126>>>            Function_Return
59127>>>        End
59127>>>>
59127>>>        Get psServer of ghoSQLConnectionHandler to sValue
59128>>>        Function_Return sValue
59129>>>    End_Function
59130>>>
59130>>>    Procedure Set psDatabase String sValue
59132>>>        If (ghoSQLConnectionHandler = 0) Begin
59134>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59135>>>>
59135>>>            Procedure_Return
59136>>>        End
59136>>>>
59136>>>        Set psDatabase of ghoSQLConnectionHandler to sValue
59137>>>    End_Procedure
59138>>>
59138>>>    Function psDatabase Returns String
59140>>>        String sValue
59140>>>        If (ghoSQLConnectionHandler = 0) Begin
59142>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59143>>>>
59143>>>            Function_Return
59144>>>        End
59144>>>>
59144>>>        Get psDatabase of ghoSQLConnectionHandler to sValue
59145>>>        Function_Return sValue
59146>>>    End_Function
59147>>>
59147>>>    Procedure Set psUserID String sValue
59149>>>        If (ghoSQLConnectionHandler = 0) Begin
59151>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59152>>>>
59152>>>            Procedure_Return
59153>>>        End
59153>>>>
59153>>>        Set psUserID of ghoSQLConnectionHandler to sValue
59154>>>    End_Procedure
59155>>>
59155>>>    Function psUserID Returns String
59157>>>        String sValue
59157>>>        If (ghoSQLConnectionHandler = 0) Begin
59159>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59160>>>>
59160>>>            Function_Return
59161>>>        End
59161>>>>
59161>>>        Get psUserID of ghoSQLConnectionHandler to sValue
59162>>>        Function_Return sValue
59163>>>    End_Function
59164>>>
59164>>>    Procedure Set psPassword String sValue
59166>>>        If (ghoSQLConnectionHandler = 0) Begin
59168>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59169>>>>
59169>>>            Procedure_Return
59170>>>        End
59170>>>>
59170>>>        Set psPassword of ghoSQLConnectionHandler to sValue
59171>>>    End_Procedure
59172>>>
59172>>>    Function psPassword Returns String
59174>>>        String sValue
59174>>>        If (ghoSQLConnectionHandler = 0) Begin
59176>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59177>>>>
59177>>>            Function_Return
59178>>>        End
59178>>>>
59178>>>        Get psPassword of ghoSQLConnectionHandler to sValue
59179>>>        Function_Return sValue
59180>>>    End_Function
59181>>>
59181>>>    Procedure Set pbTrusted Boolean bValue
59183>>>        If (ghoSQLConnectionHandler = 0) Begin
59185>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59186>>>>
59186>>>            Procedure_Return
59187>>>        End
59187>>>>
59187>>>        Set pbTrusted of ghoSQLConnectionHandler to bValue
59188>>>    End_Procedure
59189>>>
59189>>>    Function pbTrusted Returns Boolean
59191>>>        Boolean bValue
59191>>>        If (ghoSQLConnectionHandler = 0) Begin
59193>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59194>>>>
59194>>>            Function_Return
59195>>>        End
59195>>>>
59195>>>        Get pbTrusted of ghoSQLConnectionHandler to bValue
59196>>>        Function_Return bValue
59197>>>    End_Function
59198>>>
59198>>>    Procedure Set pbSilentLogin Boolean bValue
59200>>>        If (ghoSQLConnectionHandler = 0) Begin
59202>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59203>>>>
59203>>>            Procedure_Return
59204>>>        End
59204>>>>
59204>>>        Set pbSilentLogin of ghoSQLConnectionHandler to bValue
59205>>>    End_Procedure
59206>>>
59206>>>    Function pbSilentLogin Returns Boolean
59208>>>        Boolean bValue
59208>>>        If (ghoSQLConnectionHandler = 0) Begin
59210>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59211>>>>
59211>>>            Function_Return
59212>>>        End
59212>>>>
59212>>>        Get pbSilentLogin of ghoSQLConnectionHandler to bValue
59213>>>        Function_Return bValue
59214>>>    End_Function
59215>>>
59215>>>    Procedure Set psConnectionID String sValue
59217>>>        If (ghoSQLConnectionHandler = 0) Begin
59219>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59220>>>>
59220>>>            Procedure_Return
59221>>>        End
59221>>>>
59221>>>        Set psConnectionID of ghoSQLConnectionHandler to sValue
59222>>>    End_Procedure
59223>>>
59223>>>    Function psConnectionID Returns String
59225>>>        String sValue
59225>>>        If (ghoSQLConnectionHandler = 0) Begin
59227>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59228>>>>
59228>>>            Function_Return
59229>>>        End
59229>>>>
59229>>>        Get psConnectionID of ghoSQLConnectionHandler to sValue
59230>>>        Function_Return sValue
59231>>>    End_Function
59232>>>
59232>>>    Procedure Set psConnectionString String sValue
59234>>>        If (ghoSQLConnectionHandler = 0) Begin
59236>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59237>>>>
59237>>>            Procedure_Return
59238>>>        End
59238>>>>
59238>>>        Set psConnectionString of ghoSQLConnectionHandler to sValue
59239>>>    End_Procedure
59240>>>
59240>>>    Function psConnectionString Returns String
59242>>>        String sValue
59242>>>        If (ghoSQLConnectionHandler = 0) Begin
59244>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59245>>>>
59245>>>            Function_Return
59246>>>        End
59246>>>>
59246>>>        Get psConnectionString of ghoSQLConnectionHandler to sValue
59247>>>        Function_Return sValue
59248>>>    End_Function
59249>>>
59249>>>    // The normal connection string looks something like this;
59249>>>    // SERVER=.\SQLEXPRESS; DATABASE=OrderEntry; TRUSTED_CONNECTION=Yes; ,0
59249>>>    // ...and the full connection string looks like this;
59249>>>    // DFConnectionId OrderEntry, SERVER=.\SQLEXPRESS; DATABASE=OrderEntry; TRUSTED_CONNECTION=Yes; ,0
59249>>>    Function psFullConnectionString Returns String
59251>>>        String sConnectionID sConnectionString
59251>>>        If (ghoSQLConnectionHandler = 0) Begin
59253>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59254>>>>
59254>>>            Function_Return
59255>>>        End
59255>>>>
59255>>>        Get psConnectionID     of ghoSQLConnectionHandler to sConnectionID
59256>>>        Move (Trim(sConnectionID)) to sConnectionID
59257>>>        Get psConnectionString of ghoSQLConnectionHandler to sConnectionString
59258>>>        Function_Return (CS_SQLConnectionIDText * sConnectionID + "," * String(sConnectionString))
59259>>>    End_Function
59260>>>
59260>>>    Function piConnectionOptions Returns Integer
59262>>>        Integer iValue
59262>>>        If (ghoSQLConnectionHandler = 0) Begin
59264>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59265>>>>
59265>>>            Function_Return
59266>>>        End
59266>>>>
59266>>>        Get piConnectionOptions of ghoSQLConnectionHandler to iValue
59267>>>        Function_Return iValue
59268>>>    End_Function
59269>>>
59269>>>    Procedure Set psSchema String sValue
59271>>>        tSQLConnection SQLConnection
59271>>>        tSQLConnection SQLConnection
59271>>>        If (ghoSQLConnectionHandler = 0) Begin
59273>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59274>>>>
59274>>>            Procedure_Return
59275>>>        End
59275>>>>
59275>>>        Set psSchema of ghoSQLConnectionHandler to sValue
59276>>>    End_Procedure
59277>>>
59277>>>    Function psSchema Returns String
59279>>>        String sRetval
59279>>>        If (ghoSQLConnectionHandler = 0) Begin
59281>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59282>>>>
59282>>>            Function_Return
59283>>>        End
59283>>>>
59283>>>        Get psSchema of ghoSQLConnectionHandler to sRetval
59284>>>        Function_Return sRetval
59285>>>    End_Function
59286>>>
59286>>>    Procedure Set psBaseTableSpace String sValue
59288>>>        If (ghoSQLConnectionHandler = 0) Begin
59290>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59291>>>>
59291>>>            Procedure_Return
59292>>>        End
59292>>>>
59292>>>        Set psBaseTableSpace of ghoSQLConnectionHandler to sValue
59293>>>    End_Procedure
59294>>>
59294>>>    Function psBaseTableSpace Returns String
59296>>>        String sRetval
59296>>>        If (ghoSQLConnectionHandler = 0) Begin
59298>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59299>>>>
59299>>>            Function_Return
59300>>>        End
59300>>>>
59300>>>        Get psBaseTableSpace of ghoSQLConnectionHandler to sRetval
59301>>>        Function_Return sRetval
59302>>>    End_Function
59303>>>
59303>>>    Procedure Set psLongTableSpace String sValue
59305>>>        If (ghoSQLConnectionHandler = 0) Begin
59307>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59308>>>>
59308>>>            Procedure_Return
59309>>>        End
59309>>>>
59309>>>        Set psLongTableSpace of ghoSQLConnectionHandler to sValue
59310>>>    End_Procedure
59311>>>
59311>>>    Function psLongTableSpace Returns String
59313>>>        String sRetval
59313>>>        If (ghoSQLConnectionHandler = 0) Begin
59315>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59316>>>>
59316>>>            Function_Return
59317>>>        End
59317>>>>
59317>>>        Get psLongTableSpace of ghoSQLConnectionHandler to sRetval
59318>>>        Function_Return sRetval
59319>>>    End_Function
59320>>>
59320>>>    Procedure Set psIndexTableSpace String sValue
59322>>>        If (ghoSQLConnectionHandler = 0) Begin
59324>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59325>>>>
59325>>>            Procedure_Return
59326>>>        End
59326>>>>
59326>>>        Set psIndexTableSpace of ghoSQLConnectionHandler to sValue
59327>>>    End_Procedure
59328>>>
59328>>>    Function psIndexTableSpace Returns String
59330>>>        String sRetval
59330>>>        If (ghoSQLConnectionHandler = 0) Begin
59332>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59333>>>>
59333>>>            Function_Return
59334>>>        End
59334>>>>
59334>>>        Get psIndexTableSpace of ghoSQLConnectionHandler to sRetval
59335>>>        Function_Return sRetval
59336>>>    End_Function
59337>>>
59337>>>    Procedure Set pbUseConnectionID Boolean bState
59339>>>        If (ghoSQLConnectionHandler = 0) Begin
59341>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59342>>>>
59342>>>            Procedure_Return
59343>>>        End
59343>>>>
59343>>>        Set pbUseConnectionID of ghoSQLConnectionHandler to bState
59344>>>    End_Procedure
59345>>>
59345>>>    Function pbUseConnectionID Returns Boolean
59347>>>        Boolean bState
59347>>>        If (ghoSQLConnectionHandler = 0) Begin
59349>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59350>>>>
59350>>>            Function_Return
59351>>>        End
59351>>>>
59351>>>        Get pbUseConnectionID of ghoSQLConnectionHandler to bState
59352>>>        Function_Return bState
59353>>>    End_Function
59354>>>
59354>>>    Procedure Set pbToANSI Boolean bState
59356>>>        If (ghoSQLConnectionHandler = 0) Begin
59358>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59359>>>>
59359>>>            Procedure_Return
59360>>>        End
59360>>>>
59360>>>        Set pbToANSI of ghoSQLConnectionHandler to bState
59361>>>    End_Procedure
59362>>>
59362>>>    Function pbToANSI Returns Boolean
59364>>>        Boolean bState
59364>>>        If (ghoSQLConnectionHandler = 0) Begin
59366>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59367>>>>
59367>>>            Function_Return
59368>>>        End
59368>>>>
59368>>>        Get pbToANSI of ghoSQLConnectionHandler to bState
59369>>>        Function_Return bState
59370>>>    End_Function
59371>>>
59371>>>    Procedure Set pbRecnum Boolean bState
59373>>>        If (ghoSQLConnectionHandler = 0) Begin
59375>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59376>>>>
59376>>>            Procedure_Return
59377>>>        End
59377>>>>
59377>>>        Set pbRecnum of ghoSQLConnectionHandler to bState
59378>>>    End_Procedure
59379>>>
59379>>>    Function pbRecnum Returns Boolean
59381>>>        Boolean bState
59381>>>        If (ghoSQLConnectionHandler = 0) Begin
59383>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59384>>>>
59384>>>            Function_Return
59385>>>        End
59385>>>>
59385>>>        Get pbRecnum of ghoSQLConnectionHandler to bState
59386>>>        Function_Return bState
59387>>>    End_Function
59388>>>
59388>>>    Procedure Set pbCopyData Boolean bState
59390>>>        If (ghoSQLConnectionHandler = 0) Begin
59392>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59393>>>>
59393>>>            Procedure_Return
59394>>>        End
59394>>>>
59394>>>        Set pbCopyData of ghoSQLConnectionHandler to bState
59395>>>    End_Procedure
59396>>>
59396>>>    Function pbCopyData Returns Boolean
59398>>>        Boolean bState
59398>>>        If (ghoSQLConnectionHandler = 0) Begin
59400>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59401>>>>
59401>>>            Function_Return
59402>>>        End
59402>>>>
59402>>>        Get pbCopyData of ghoSQLConnectionHandler to bState
59403>>>        Function_Return bState
59404>>>    End_Function
59405>>>
59405>>>    Procedure Set pbApiTableUpdateAuto Boolean bState
59407>>>        If (ghoSQLConnectionHandler = 0) Begin
59409>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59410>>>>
59410>>>            Procedure_Return
59411>>>        End
59411>>>>
59411>>>        Set pbApiTableUpdateAuto of ghoSQLConnectionHandler to bState
59412>>>    End_Procedure
59413>>>
59413>>>    Function pbApiTableUpdateAuto Returns Boolean
59415>>>        Boolean bState
59415>>>        If (ghoSQLConnectionHandler = 0) Begin
59417>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59418>>>>
59418>>>            Function_Return
59419>>>        End
59419>>>>
59419>>>        Get pbApiTableUpdateAuto of ghoSQLConnectionHandler to bState
59420>>>        Function_Return bState
59421>>>    End_Function
59422>>>
59422>>>    Procedure Set pbCompareDate_DateTime Boolean bState
59424>>>        If (ghoSQLConnectionHandler = 0) Begin
59426>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59427>>>>
59427>>>            Procedure_Return
59428>>>        End
59428>>>>
59428>>>        Set pbCompareDate_DateTime of ghoSQLConnectionHandler to bState
59429>>>    End_Procedure
59430>>>
59430>>>    Function pbCompareDate_DateTime Returns Boolean
59432>>>        Boolean bState
59432>>>        If (ghoSQLConnectionHandler = 0) Begin
59434>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59435>>>>
59435>>>            Function_Return
59436>>>        End
59436>>>>
59436>>>        Get pbCompareDate_DateTime of ghoSQLConnectionHandler to bState
59437>>>        Function_Return bState
59438>>>    End_Function
59439>>>
59439>>>    Procedure Set pbCompareIndexAscending Boolean bState
59441>>>        If (ghoSQLConnectionHandler = 0) Begin
59443>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59444>>>>
59444>>>            Procedure_Return
59445>>>        End
59445>>>>
59445>>>        Set pbCompareIndexAscending of ghoSQLConnectionHandler to bState
59446>>>    End_Procedure
59447>>>
59447>>>    Function pbCompareIndexAscending Returns Boolean
59449>>>        Boolean bState
59449>>>        If (ghoSQLConnectionHandler = 0) Begin
59451>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59452>>>>
59452>>>            Function_Return
59453>>>        End
59453>>>>
59453>>>        Get pbCompareIndexAscending of ghoSQLConnectionHandler to bState
59454>>>        Function_Return bState
59455>>>    End_Function
59456>>>
59456>>>    Procedure Set pbCompareIndexUppercase Boolean bState
59458>>>        If (ghoSQLConnectionHandler = 0) Begin
59460>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59461>>>>
59461>>>            Procedure_Return
59462>>>        End
59462>>>>
59462>>>        Set pbCompareIndexUppercase of ghoSQLConnectionHandler to bState
59463>>>    End_Procedure
59464>>>
59464>>>    Function pbCompareIndexUppercase Returns Boolean
59466>>>        Boolean bState
59466>>>        If (ghoSQLConnectionHandler = 0) Begin
59468>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
59469>>>>
59469>>>            Function_Return
59470>>>        End
59470>>>>
59470>>>        Get pbCompareIndexUppercase of ghoSQLConnectionHandler to bState
59471>>>        Function_Return bState
59472>>>    End_Function
59473>>>
59473>>>    Procedure Set psDriverDefaultValueASCII String sValue
59475>>>        If (ghoSQLConnectionHandler = 0) Begin
59477>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59478>>>>
59478>>>            Procedure_Return
59479>>>        End
59479>>>>
59479>>>        Set psDriverDefaultValueASCII of ghoSQLConnectionHandler to sValue
59480>>>    End_Procedure
59481>>>
59481>>>    Function psDriverDefaultValueASCII Returns String
59483>>>        String sRetval
59483>>>        If (ghoSQLConnectionHandler = 0) Begin
59485>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59486>>>>
59486>>>            Function_Return
59487>>>        End
59487>>>>
59487>>>        Get psDriverDefaultValueASCII of ghoSQLConnectionHandler to sRetval
59488>>>        Function_Return sRetval
59489>>>    End_Function
59490>>>
59490>>>    Procedure Set psDriverDefaultValueBinary String sValue
59492>>>        If (ghoSQLConnectionHandler = 0) Begin
59494>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59495>>>>
59495>>>            Procedure_Return
59496>>>        End
59496>>>>
59496>>>        Set psDriverDefaultValueBinary of ghoSQLConnectionHandler to sValue
59497>>>    End_Procedure
59498>>>
59498>>>    Function psDriverDefaultValueBinary Returns String
59500>>>        String sRetval
59500>>>        If (ghoSQLConnectionHandler = 0) Begin
59502>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59503>>>>
59503>>>            Function_Return
59504>>>        End
59504>>>>
59504>>>        Get psDriverDefaultValueBinary of ghoSQLConnectionHandler to sRetval
59505>>>        Function_Return sRetval
59506>>>    End_Function
59507>>>
59507>>>    Procedure Set psDriverDefaultValueDate String sValue
59509>>>        If (ghoSQLConnectionHandler = 0) Begin
59511>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59512>>>>
59512>>>            Procedure_Return
59513>>>        End
59513>>>>
59513>>>        Set psDriverDefaultValueDate of ghoSQLConnectionHandler to sValue
59514>>>    End_Procedure
59515>>>
59515>>>    Function psDriverDefaultValueDate Returns String
59517>>>        String sRetval
59517>>>        If (ghoSQLConnectionHandler = 0) Begin
59519>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59520>>>>
59520>>>            Function_Return
59521>>>        End
59521>>>>
59521>>>        Get psDriverDefaultValueDate of ghoSQLConnectionHandler to sRetval
59522>>>        Function_Return sRetval
59523>>>    End_Function
59524>>>
59524>>>    Procedure Set psDriverDefaultValueDateTime String sValue
59526>>>        If (ghoSQLConnectionHandler = 0) Begin
59528>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59529>>>>
59529>>>            Procedure_Return
59530>>>        End
59530>>>>
59530>>>        Set psDriverDefaultValueDateTime of ghoSQLConnectionHandler to sValue
59531>>>    End_Procedure
59532>>>
59532>>>    Function psDriverDefaultValueDateTime Returns String
59534>>>        String sRetval
59534>>>        If (ghoSQLConnectionHandler = 0) Begin
59536>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59537>>>>
59537>>>            Function_Return
59538>>>        End
59538>>>>
59538>>>        Get psDriverDefaultValueDateTime of ghoSQLConnectionHandler to sRetval
59539>>>        Function_Return sRetval
59540>>>    End_Function
59541>>>
59541>>>    Procedure Set psDriverDefaultValueNumeric String sValue
59543>>>        If (ghoSQLConnectionHandler = 0) Begin
59545>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59546>>>>
59546>>>            Procedure_Return
59547>>>        End
59547>>>>
59547>>>        Set psDriverDefaultValueNumeric of ghoSQLConnectionHandler to sValue
59548>>>    End_Procedure
59549>>>
59549>>>    Function psDriverDefaultValueNumeric Returns String
59551>>>        String sRetval
59551>>>        If (ghoSQLConnectionHandler = 0) Begin
59553>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59554>>>>
59554>>>            Function_Return
59555>>>        End
59555>>>>
59555>>>        Get psDriverDefaultValueNumeric of ghoSQLConnectionHandler to sRetval
59556>>>        Function_Return sRetval
59557>>>    End_Function
59558>>>
59558>>>    Procedure Set psDriverDefaultValueText String sValue
59560>>>        If (ghoSQLConnectionHandler = 0) Begin
59562>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59563>>>>
59563>>>            Procedure_Return
59564>>>        End
59564>>>>
59564>>>        Set psDriverDefaultValueText of ghoSQLConnectionHandler to sValue
59565>>>    End_Procedure
59566>>>
59566>>>    Function psDriverDefaultValueText Returns String
59568>>>        String sRetval
59568>>>        If (ghoSQLConnectionHandler = 0) Begin
59570>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59571>>>>
59571>>>            Function_Return
59572>>>        End
59572>>>>
59572>>>        Get psDriverDefaultValueText of ghoSQLConnectionHandler to sRetval
59573>>>        Function_Return sRetval
59574>>>    End_Function
59575>>>
59575>>>    Procedure Set pbDriverDefaultNullableASCII Boolean bState
59577>>>        If (ghoSQLConnectionHandler = 0) Begin
59579>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59580>>>>
59580>>>            Procedure_Return
59581>>>        End
59581>>>>
59581>>>        Set pbDriverDefaultNullableASCII of ghoSQLConnectionHandler to bState
59582>>>    End_Procedure
59583>>>
59583>>>    Function pbDriverDefaultNullableASCII Returns Boolean
59585>>>        Boolean bState
59585>>>        If (ghoSQLConnectionHandler = 0) Begin
59587>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59588>>>>
59588>>>            Function_Return
59589>>>        End
59589>>>>
59589>>>        Get pbDriverDefaultNullableASCII of ghoSQLConnectionHandler to bState
59590>>>        Function_Return bState
59591>>>    End_Function
59592>>>
59592>>>    Procedure Set pbDriverDefaultNullableBinary Boolean bState
59594>>>        If (ghoSQLConnectionHandler = 0) Begin
59596>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59597>>>>
59597>>>            Procedure_Return
59598>>>        End
59598>>>>
59598>>>        Set pbDriverDefaultNullableBinary of ghoSQLConnectionHandler to bState
59599>>>    End_Procedure
59600>>>
59600>>>    Function pbDriverDefaultNullableBinary Returns Boolean
59602>>>        Boolean bState
59602>>>        If (ghoSQLConnectionHandler = 0) Begin
59604>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59605>>>>
59605>>>            Function_Return
59606>>>        End
59606>>>>
59606>>>        Get pbDriverDefaultNullableBinary of ghoSQLConnectionHandler to bState
59607>>>        Function_Return bState
59608>>>    End_Function
59609>>>
59609>>>    Procedure Set pbDriverDefaultNullableDate Boolean bState
59611>>>        If (ghoSQLConnectionHandler = 0) Begin
59613>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59614>>>>
59614>>>            Procedure_Return
59615>>>        End
59615>>>>
59615>>>        Set pbDriverDefaultNullableDate of ghoSQLConnectionHandler to bState
59616>>>    End_Procedure
59617>>>
59617>>>    Function pbDriverDefaultNullableDate Returns Boolean
59619>>>        Boolean bState
59619>>>        If (ghoSQLConnectionHandler = 0) Begin
59621>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59622>>>>
59622>>>            Function_Return
59623>>>        End
59623>>>>
59623>>>        Get pbDriverDefaultNullableDate of ghoSQLConnectionHandler to bState
59624>>>        Function_Return bState
59625>>>    End_Function
59626>>>
59626>>>    Procedure Set pbDriverDefaultNullableDateTime Boolean bState
59628>>>        If (ghoSQLConnectionHandler = 0) Begin
59630>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59631>>>>
59631>>>            Procedure_Return
59632>>>        End
59632>>>>
59632>>>        Set pbDriverDefaultNullableDateTime of ghoSQLConnectionHandler to bState
59633>>>    End_Procedure
59634>>>
59634>>>    Function pbDriverDefaultNullableDateTime Returns Boolean
59636>>>        Boolean bState
59636>>>        If (ghoSQLConnectionHandler = 0) Begin
59638>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59639>>>>
59639>>>            Function_Return
59640>>>        End
59640>>>>
59640>>>        Get pbDriverDefaultNullableDateTime of ghoSQLConnectionHandler to bState
59641>>>        Function_Return bState
59642>>>    End_Function
59643>>>
59643>>>    Procedure Set pbDriverDefaultNullableNumeric Boolean bState
59645>>>        If (ghoSQLConnectionHandler = 0) Begin
59647>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59648>>>>
59648>>>            Procedure_Return
59649>>>        End
59649>>>>
59649>>>        Set pbDriverDefaultNullableNumeric of ghoSQLConnectionHandler to bState
59650>>>    End_Procedure
59651>>>
59651>>>    Function pbDriverDefaultNullableNumeric Returns Boolean
59653>>>        Boolean bState
59653>>>        If (ghoSQLConnectionHandler = 0) Begin
59655>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59656>>>>
59656>>>            Function_Return
59657>>>        End
59657>>>>
59657>>>        Get pbDriverDefaultNullableNumeric of ghoSQLConnectionHandler to bState
59658>>>        Function_Return bState
59659>>>    End_Function
59660>>>
59660>>>    Procedure Set pbDriverDefaultNullableText Boolean bState
59662>>>        If (ghoSQLConnectionHandler = 0) Begin
59664>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59665>>>>
59665>>>            Procedure_Return
59666>>>        End
59666>>>>
59666>>>        Set pbDriverDefaultNullableText of ghoSQLConnectionHandler to bState
59667>>>    End_Procedure
59668>>>
59668>>>    Function pbDriverDefaultNullableText Returns Boolean
59670>>>        Boolean bState
59670>>>        If (ghoSQLConnectionHandler = 0) Begin
59672>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
59673>>>>
59673>>>            Function_Return
59674>>>        End
59674>>>>
59674>>>        Get pbDriverDefaultNullableText of ghoSQLConnectionHandler to bState
59675>>>        Function_Return bState
59676>>>    End_Function
59677>>>
59677>>>    // Note: If the psDriverID + other connection properties are to be changed,
59677>>>    //       the psDriverID *must* be the first property that gets changed!
59677>>>    //       Otherwise errors might be raised by the driver when e.g. the format
59677>>>    //       for a connection string has the wrong format for that driver.
59677>>>    Procedure Set psDriverID String sValue
59679>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
59680>>>        Delegate Set psDriverID to sValue
59682>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
59683>>>        Set psDriverID of ghoSQLConnectionHandler to sValue
59684>>>    End_Procedure
59685>>>
59685>>>    Function psDriverID Returns String
59687>>>        String sDriverID
59687>>>
59687>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
59688>>>        // This should get it from the parent object (when using the cDbUpdateHandler class)
59688>>>        Delegate Get psDriverID to sDriverID
59690>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
59691>>>        Move False to Err
59692>>>
59692>>>        // ...and in case it didn't use property of this class. Then the library is
59692>>>        // probably used as "utilites" from a special made program and
59692>>>        // the ghoSQLConnectionHandler must have been setup
59692>>>        If (sDriverID = "") Begin
59694>>>            Get psDriverID of ghoSQLConnectionHandler to sDriverID
59695>>>        End
59695>>>>
59695>>>        Function_Return sDriverID
59696>>>    End_Function
59697>>>
59697>>>    Procedure Set piDbType Integer iValue
59699>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
59700>>>        Delegate Set piDbType to iValue
59702>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
59703>>>        Set piDbType of ghoSQLConnectionHandler to iValue
59704>>>    End_Procedure
59705>>>
59705>>>    Function piDbType Returns Integer
59707>>>        Integer iRetval
59707>>>        Get piDbType of ghoSQLConnectionHandler to iRetval
59708>>>        Function_Return iRetval
59709>>>    End_Function
59710>>>
59710>>>    Function phoLogFile Returns Handle
59712>>>        Handle hoLogFile   
59712>>>        Boolean bErr
59712>>>        
59712>>>        Move Err to bErr
59713>>>        Move 0 to hoLogFile
59714>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT  
59715>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
59716>>>        Delegate Get phoLogFile to hoLogFile
59718>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
59719>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
59720>>>        Move bErr to Err
59721>>>        
59721>>>        Function_Return hoLogFile
59722>>>    End_Function
59723>>>
59723>>>    Function pnCurrentVersionUpdate Returns Number
59725>>>        Number nCurrentVersionUpdate
59725>>>
59725>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
59726>>>        Delegate Get pnCurrentVersionUpdate to nCurrentVersionUpdate
59728>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
59729>>>
59729>>>        Function_Return nCurrentVersionUpdate
59730>>>    End_Function
59731>>>
59731>>>    Procedure LogError String sText Boolean bError
59733>>>        Handle hoLogFile
59733>>>        Number nCurrentVersionUpdate
59733>>>
59733>>>        Get phoLogFile to hoLogFile
59734>>>        If (hoLogFile = 0) Begin
59736>>>            Procedure_Return
59737>>>        End
59737>>>>
59737>>>        Get pnCurrentVersionUpdate to nCurrentVersionUpdate
59738>>>
59738>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
59739>>>        Send LogError of hoLogFile nCurrentVersionUpdate 0 sText 0 bError
59740>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
59741>>>    End_Procedure
59742>>>
59742>>>    Function pbContinueOnError Returns Boolean
59744>>>        Boolean bContinueOnError
59744>>>        If (ghoDbUpdateHandler > 0) Begin
59746>>>            Get pbContinueOnError of ghoDbUpdateHandler to bContinueOnError
59747>>>        End
59747>>>>
59747>>>        Function_Return bContinueOnError
59748>>>    End_Function
59749>>>
59749>>>    // Latin1_General_CI_AS = General Insensitive collation
59749>>>    // Latin1_General_CS_AS = General Case Sensitive collation, AS= Accent Sensitive.
59749>>>    // For MS-SQL See: https://docs.microsoft.com/en-us/sql/t-sql/statements/windows-collation-name-transact-sql?view=sql-server-2017
59749>>>    // Good read about which collation to select:
59749>>>    // https://social.msdn.microsoft.com/Forums/sqlserver/en-US/bfdc32d3-3d36-4d63-8d87-6ee972fd8130/on-sqllatin1generalcp1cias-sql-server-2008-default-collation?forum=transactsql
59749>>>    Procedure Set psCollation String sCollation
59751>>>        Set private.psCollation to sCollation
59752>>>        If (ghoDbUpdateHandler > 0) Begin
59754>>>            Set psCollation of ghoDbUpdateHandler to sCollation
59755>>>        End
59755>>>>
59755>>>    End_Procedure
59756>>>
59756>>>    Function psCollation Returns String
59758>>>        String sCollation
59758>>>        If (ghoDbUpdateHandler > 0) Begin
59760>>>            Get psCollation of ghoDbUpdateHandler to sCollation
59761>>>        End   
59761>>>>
59761>>>        Else Begin
59762>>>            Get private.psCollation to sCollation
59763>>>        End
59763>>>>
59763>>>        Function_Return sCollation
59764>>>    End_Function
59765>>>
59765>>>
59765>>>    Function StrToFieldNumber Integer iFile String sField Returns Integer
59767>>>        Integer iMax iPos
59767>>>        String sName
59767>>>
59767>>>        Move (Lowercase(sField)) to sField
59768>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iFile to iMax
59771>>>        for iPos from 0 to iMax
59777>>>>
59777>>>            Get_Attribute DF_FIELD_NAME of iFile iPos to sName
59780>>>            Move (Lowercase(sName)) to sName
59781>>>            If (sName = sField) Begin
59783>>>                Function_Return iPos
59784>>>            End
59784>>>>
59784>>>        Loop
59785>>>>
59785>>>        Function_Return -1
59786>>>    End_Function
59787>>>
59787>>>
59787>>>    // * Dummy function for the Studio's Code Explorer *
59787>>>    Function PRIVATE_SUB_FUNCTIONS Returns Boolean
59789>>>        Function_Return False
59790>>>    End_Function
59791>>>
59791>>>    // *** Helper functions with compiled sql script code ***
59791>>>    //
59791>>>    // When dropping columns on some SQL back-ends they doesn't reclaim the space taken up by the columns dropped.
59791>>>    // For data types that are stored inline in the rows (int for example) it may even take up space on
59791>>>    // the new rows added after the alter statement. to get around this you need to create a clustered
59791>>>    // index on the table _or_ rebuild the clustered Index if it already has one. Rebuilding the index
59791>>>    // can be done with a REBUILD command after modifying the table. But be warned this can be slow on very big tables.
59791>>>    //   ALTER TABLE MyTable
59791>>>    //       REBUILD
59791>>>    Function _SqlUtilRemoveTableColumnMSSQL String sTableName String sColumnName Returns Boolean
59793>>>        Boolean bOK
59793>>>
59793>>>        If (Trim(sTableName) = "" or Trim(sColumnName) = "") Begin
59795>>>            Function_Return False
59796>>>        End
59796>>>>
59796>>>
59796>>>        SQLIncludeScriptFile ..\Scripts\DropConstraintAndColumnNameMSSQL.sql as DropConstraintAndColumnNameMSSQL.sql
59796>>>        Get _SqlUtilRemoveTableColumnByScript "DropConstraintAndColumnNameMSSQL.sql" sTableName sColumnName to bOK
59797>>>
59797>>>        Function_Return (bOK = True)
59798>>>    End_Function
59799>>>
59799>>>    // When dropping columns SQL Sever does not reclaim the space taken up by the columns dropped.
59799>>>    // For data types that are stored inline in the rows (int for example) it may even take up space on
59799>>>    // the new rows added after the alter statement. To get around this you need to create a clustered
59799>>>    // index on the table or rebuild the clustered Index if it already has one. Rebuilding the index
59799>>>    // can be done with a REBUILD command after modifying the table. But be warned this can be slow on very big tables.
59799>>>    //   ALTER TABLE MyTable
59799>>>    //       REBUILD
59799>>>    Function _SqlUtilRemoveTableColumnByScript String sMemScriptFile String sTableName String sColumnName Returns Boolean
59801>>>        tSQLScriptArray SQLScriptArray
59801>>>        tSQLScriptArray SQLScriptArray
59801>>>        String sDriverID
59801>>>        Boolean bOK
59801>>>        Integer iSize iCount
59801>>>
59801>>>        If (Trim(sTableName) = "" or Trim(sColumnName) = "") Begin
59803>>>            Function_Return False
59804>>>        End
59804>>>>
59804>>>
59804>>>        Get psDriverID to sDriverID
59805>>>        Get SqlUtilReadResource sMemScriptFile to SQLScriptArray
59806>>>        If (SQLScriptArray.bError = True) Begin
59808>>>            Function_Return False
59809>>>        End
59809>>>>
59809>>>
59809>>>        Move (SizeOfArray(SQLScriptArray.sSQLScriptArray)) to iSize
59810>>>        Decrement iSize
59811>>>
59811>>>        for iCount from 0 to iSize
59817>>>>
59817>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "TABLE_NAME_XXX") Begin
59819>>>                Move (Replaces("TABLE_NAME_XXX",  SQLScriptArray.sSQLScriptArray[iCount], String(sTableName))) to SQLScriptArray.sSQLScriptArray[iCount]
59820>>>            End
59820>>>>
59820>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "COLUMN_NAME_XXX") Begin
59822>>>                Move (Replaces("COLUMN_NAME_XXX", SQLScriptArray.sSQLScriptArray[iCount], String(sColumnName))) to SQLScriptArray.sSQLScriptArray[iCount]
59823>>>            End
59823>>>>
59823>>>        Loop
59824>>>>
59824>>>
59824>>>        Get SqlUtilExecuteEmbeddedScript SQLScriptArray sDriverID False "" to bOK
59825>>>
59825>>>        Function_Return (bOK = True)
59826>>>    End_Function
59827>>>
59827>>>    Function _SqlUtilCreatePostGreSQLDatabaseByScript String sMemScriptFile String sDatabaseName Returns Boolean
59829>>>        tSQLScriptArray SQLScriptArray
59829>>>        tSQLScriptArray SQLScriptArray
59829>>>        String sDriverID sCollation
59829>>>        Boolean bOK
59829>>>        Integer iSize iCount
59829>>>
59829>>>        If (Trim(sDatabaseName) = "") Begin
59831>>>            Function_Return False
59832>>>        End
59832>>>>
59832>>>
59832>>>        Get psDriverID  to sDriverID
59833>>>        Get psCollation to sCollation
59834>>>        Get SqlUtilReadResource sMemScriptFile to SQLScriptArray
59835>>>        If (SQLScriptArray.bError = True) Begin
59837>>>            Function_Return False
59838>>>        End
59838>>>>
59838>>>
59838>>>        Move (SizeOfArray(SQLScriptArray.sSQLScriptArray)) to iSize
59839>>>        Decrement iSize
59840>>>
59840>>>        for iCount from 0 to iSize
59846>>>>
59846>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "DATABASE_NAME_XXX") Begin
59848>>>                Move (Replaces("DATABASE_NAME_XXX",  SQLScriptArray.sSQLScriptArray[iCount], String(sDatabaseName))) to SQLScriptArray.sSQLScriptArray[iCount]
59849>>>            End
59849>>>>
59849>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "COLLATION_NAME_XXX") Begin
59851>>>                Move (Replaces("COLLATION_NAME_XXX", SQLScriptArray.sSQLScriptArray[iCount], String(sCollation))) to SQLScriptArray.sSQLScriptArray[iCount]
59852>>>            End
59852>>>>
59852>>>        Loop
59853>>>>
59853>>>
59853>>>        Get SqlUtilExecuteEmbeddedScript SQLScriptArray sDriverID False "" to bOK
59854>>>
59854>>>        Function_Return (bOK = True)
59855>>>    End_Function
59856>>>
59856>>>    Function _SqlUtilCreateMySQLDatabaseByScript String sMemScriptFile String sDatabaseName Returns Boolean
59858>>>        tSQLScriptArray SQLScriptArray
59858>>>        tSQLScriptArray SQLScriptArray
59858>>>        String sDriverID sCollation
59858>>>        Boolean bOK
59858>>>        Integer iSize iCount
59858>>>
59858>>>        If (Trim(sDatabaseName) = "") Begin
59860>>>            Function_Return False
59861>>>        End
59861>>>>
59861>>>
59861>>>        Get psDriverID  to sDriverID
59862>>>        Get psCollation to sCollation
59863>>>        Get SqlUtilReadResource sMemScriptFile to SQLScriptArray
59864>>>        If (SQLScriptArray.bError = True) Begin
59866>>>            Function_Return False
59867>>>        End
59867>>>>
59867>>>
59867>>>        Move (SizeOfArray(SQLScriptArray.sSQLScriptArray)) to iSize
59868>>>        Decrement iSize
59869>>>
59869>>>        for iCount from 0 to iSize
59875>>>>
59875>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "DATABASE_NAME_XXX") Begin
59877>>>                Move (Replaces("DATABASE_NAME_XXX",  SQLScriptArray.sSQLScriptArray[iCount], String(sDatabaseName))) to SQLScriptArray.sSQLScriptArray[iCount]
59878>>>            End
59878>>>>
59878>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "COLLATION_NAME_XXX") Begin
59880>>>                Move (Replaces("COLLATION_NAME_XXX", SQLScriptArray.sSQLScriptArray[iCount], String(sCollation))) to SQLScriptArray.sSQLScriptArray[iCount]
59881>>>            End
59881>>>>
59881>>>        Loop
59882>>>>
59882>>>        // ToDo: THIS FAILS BUT THE SQL SCRIPT WORKS IN MYSQL!
59882>>>        Get SqlUtilExecuteEmbeddedScript SQLScriptArray sDriverID False "" to bOK
59883>>>
59883>>>        Function_Return (bOK = True)
59884>>>    End_Function
59885>>>
59885>>>    // *** Helper functions for Mertech Drivers ***
59885>>>    // Created to not clutter up the standard function code with lots of #IFDEF's
59885>>>    // and commands that the Studio editor knows nothing about.
59885>>>    Function _MertechDeleteTDFile String sTableName Returns Boolean
59887>>>        Integer iRetval
59887>>>        String sPath
59887>>>
59887>>>        If (sPath = "" or sTableName = "") Begin
59889>>>            Function_Return True
59890>>>        End
59890>>>>
59890>>>
59890>>>        Get vFolderFormat sPath to sPath
59891>>>        Get vDeleteFile (sPath + String(sTableName) + ".td") to iRetval
59892>>>        Function_Return (iRetval = 0)
59893>>>    End_Function
59894>>>
59894>>>    Function _MertechSqlUtilCreateIntFile Handle hTable String sTableName String sDataPath String sPhysicalFileName Returns Boolean
59896>>>        Boolean bOpen bOK
59896>>>        Move False to Err
59897>>>        Function_Return (Err = False)
59898>>>    End_Function
59899>>>
59899>>>    Function _MertechEnumerateSQLFlexServers Returns String[]
59901>>>        Integer iNumItems iCount
59901>>>        String[] sReturnArray
59902>>>        String sServer
59902>>>
59902>>>
59902>>>        Function_Return sReturnArray
59903>>>    End_Function
59904>>>
59904>>>    Function _MertechEnumerateORAFLEXServers Returns String[]
59906>>>        String[] sReturnArray
59907>>>        String sServer
59907>>>
59907>>>
59907>>>        Function_Return sReturnArray
59908>>>    End_Function
59909>>>
59909>>>    Function _MertechSQLConnect String sDriverID String sServer String sUserID String sPassword Returns Handle
59911>>>        Handle hoSQLHandler hoSQLConnect
59911>>>
59911>>>        Move 0 to hoSQLConnect
59912>>>
59912>>>        Function_Return hoSQLConnect
59913>>>    End_Function
59914>>>
59914>>>    // Returns the handle of the Mertech SQL handler.
59914>>>    // It also ensures that the correct Server & Database attributes are set both for
59914>>>    // embedded SQL calls and "normal" database commands like e.g. "Open".
59914>>>    Function _MertechSQLManagerHandle Returns Handle
59916>>>        Handle hoSQLHandler
59916>>>        String sDriverID sServer sDatabase
59916>>>
59916>>>        Move 0 to hoSQLHandler
59917>>>        Get psDriverID to sDriverID
59918>>>        Get psServer   to sServer
59919>>>        Get psDatabase to sDatabase
59920>>>
59920>>>        Function_Return hoSQLHandler
59921>>>    End_Function
59922>>>
59922>>>    // For Mertech drivers we cannot use Structure_Start/End. Instead we must use
59922>>>    // macro-commands <sigh!>
59922>>>    // Note: The function sets the Err flag.
59922>>>    Function _MertechApiTableConvertToSQL Handle hTable String sRootName String sDatabase String sDriverID String sBaseTableSpace String sIndexTableSpace Boolean bToAnsi Boolean bCopyData Returns Boolean
59924>>>
59924>>>        Move False to Err
59925>>>
59925>>>        Function_Return (Err = False)
59926>>>    End_Function
59927>>>
59927>>>    Function _MertechCopyDataToSQL Handle hTable String sRootName String sDriverID Returns Boolean
59929>>>        Move False to Err
59930>>>        Function_Return (Err = False)
59931>>>    End_Function
59932>>>
59932>>>End_Class
59933>Use cRDCHeaderGroup.pkg
Including file: cRDCHeaderGroup.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\RDCToolsLib\AppSrc\cRDCHeaderGroup.pkg)
59933>>>//****************************************************************************
59933>>>// $Module type: Package
59933>>>// $Module name: cRDCHeaderGroup.pkg
59933>>>//
59933>>>// $Author     : Nils Svedmyr, RDC Tools International.
59933>>>// Copyright (c) 2017 RDC Tools International
59933>>>// E-mail      : support@rdctools.com
59933>>>// Web-site    : http://www.rdctools.com
59933>>>//
59933>>>// Created     : 2017-01-05 @ 19:04 (Military date format - Year-Month-Day)
59933>>>//
59933>>>// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
59933>>>// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
59933>>>// This is free software; you can redistribute it and/or modify it under the terms of the
59933>>>// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
59933>>>// in the help folder for more details.
59933>>>//
59933>>>//****************************************************************************
59933>>>Use Windows.pkg
59933>>>Use cCommandLinkButton.pkg
Including file: cCommandLinkButton.pkg    (C:\Program Files\DataFlex 20.1\Pkg\cCommandLinkButton.pkg)
59933>>>>>// This requires version 6 of common controls (vista or windows server 2008). If used with
59933>>>>>// older versions you will just get a regular great big button.
59933>>>>>
59933>>>>>Use Windows.pkg
59933>>>>>Use CharTranslate.pkg
59933>>>>>
59933>>>>>Class cCommandLinkButton is a Button
59934>>>>>    
59934>>>>>    Procedure Construct_Object
59936>>>>>        Forward Send Construct_Object
59938>>>>>        Property String psPrivateNote
59939>>>>>    End_Procedure
59940>>>>>    
59940>>>>>    Procedure Set psNote String sNote
59942>>>>>        Boolean bSupported
59942>>>>>        Set psPrivateNote to sNote
59943>>>>>        Get IsExControlSupported to bSupported
59944>>>>>        If bSupported Begin
59946>>>>>            Send SetWinNote
59947>>>>>        End
59947>>>>>>
59947>>>>>    End_Procedure
59948>>>>>    
59948>>>>>    Procedure SetWinNote
59950>>>>>        WString wNote
59950>>>>>        Handle hWnd
59950>>>>>        Integer i
59950>>>>>        Pointer pVar
59950>>>>>        Get Form_Window_Handle 0 to hWnd
59951>>>>>        If hWnd Begin
59953>>>>>            Get psNote to wNote
59954>>>>>            Move (SendMessage(hwnd, BCM_SETNOTE, 0, AddressOf(wNote))) to i
59955>>>>>        End
59955>>>>>>
59955>>>>>    End_Procedure
59956>>>>>    
59956>>>>>    
59956>>>>>    Function psNote Returns String
59958>>>>>        Function_Return (psPrivateNote(Self))
59959>>>>>    End_Function
59960>>>>>    
59960>>>>>    
59960>>>>>    Procedure Page Integer iState
59962>>>>>        Integer i hWnd
59962>>>>>        Boolean bSupported
59962>>>>>        Get IsExControlSupported to bSupported
59963>>>>>        If (iState=1 and bSupported) Begin
59965>>>>>            Get form_style i to i
59966>>>>>            Set Form_Style 0 to (i ior (BS_COMMANDLINK + BS_FLAT))
59967>>>>>            Forward Send Page iState
59969>>>>>            Send SetWinNote
59970>>>>>        End
59970>>>>>>
59970>>>>>        Else Begin
59971>>>>>            Forward Send Page iState
59973>>>>>        End
59973>>>>>>
59973>>>>>    End_Procedure
59974>>>>>    
59974>>>>>End_Class
59975>>>
59975>>>Define clGreenGrey      for (RGB(64, 84, 93))
59975>>>Define clGreenGreyLight for (RGB(7, 117, 104))
59975>>>
59975>>>Class cRDCHeaderGroupImage is a cCommandLinkButton
59976>>>    Procedure Construct_Object
59978>>>        Forward Send Construct_Object
59980>>>
59980>>>        Set Size to 18 19
59981>>>        Set Focus_Mode to NonFocusable
59982>>>        Set peImageAlign to Button_ImageList_Align_Top
59983>>>        Set pbAutoResizeIcons to True
59984>>>    End_Procedure
59985>>>
59985>>>    Procedure OnClick
59987>>>        Broadcast Send Prompt of (Parent(Self))
59989>>>    End_Procedure
59990>>>
59990>>>    Procedure Set Bitmap String sBitmapName
59992>>>        Forward Set psImage to sBitmapName
59994>>>    End_Procedure
59995>>>
59995>>>    Procedure End_Construct_Object
59997>>>        Set pbShield to False
59998>>>        Forward Send End_Construct_Object
60000>>>    End_Procedure
60001>>>
60001>>>End_Class
60002>>>
60002>>>// Intermediate class - don't use.
60002>>>Class _cRDCHeaderGroup is a Container3d
60003>>>
60003>>>    Procedure Construct_Object
60005>>>        Forward Send Construct_Object
60007>>>
60007>>>        Property String private.psImage
60008>>>        Property String private.psLabel
60009>>>
60009>>>    End_Procedure
60010>>>
60010>>>    Procedure Set psImage String sImage
60012>>>        Set private.psImage to sImage
60013>>>    End_Procedure
60014>>>
60014>>>    Function psImage Returns String
60016>>>        Function_Return (private.psImage(Self))
60017>>>    End_Function
60018>>>
60018>>>    Procedure Set psLabel String sLabel
60020>>>        Set private.psLabel to sLabel
60021>>>    End_Procedure
60022>>>
60022>>>    Function psLabel Returns String
60024>>>        Function_Return (private.psLabel(Self))
60025>>>    End_Function
60026>>>
60026>>>    // Don't display but allow to use old "Label" syntax to set the value of the oInfo_tb object (header text)
60026>>>    Procedure Set Label String sLabel
60028>>>        Set psLabel to sLabel
60029>>>    End_Procedure
60030>>>
60030>>>    Function Label Returns String
60032>>>        Function_Return (private.psLabel(Self))
60033>>>    End_Function
60034>>>
60034>>>End_Class
60035>>>
60035>>>Register_Procedure NavigatePrevious
60035>>>Register_Procedure NavigateNext
60035>>>
60035>>>Class cRDCHeaderGroup is a _cRDCHeaderGroup
60036>>>
60036>>>    Procedure Construct_Object
60038>>>        Forward Send Construct_Object
60040>>>
60040>>>        Set peAnchors to anTopLeftRight
60041>>>        Set pbAcceptDropFiles to True
60042>>>        Set Border_Style to Border_Normal
60043>>>
60043>>>        Property Integer private.piColorOrg
60044>>>        Property Boolean private.pbIsHeaderGroup True // Don't touch!
60045>>>        Property String private.psToolTip ""
60046>>>
60046>>>        Property Integer piImageColOffset 4
60047>>>        Property Integer piImageRowOffset 0
60048>>>        Property String psNote ""
60049>>>        Property Boolean pbLargeImageSize True
60050>>>        Property Integer private.piLargeImageSize 24
60051>>>        Property Integer private.piSmallImageSize 16
60052>>>        Property Boolean pbUseHotspotColor False
60053>>>        Property Integer piHeaderHotspotColor clAqua
60054>>>        Property String private.psLabel ""
60055>>>        Property Integer piLabelColor clGreenGrey
60056>>>        Property Boolean pbLabelFontItalics False
60057>>>        Property Integer piLabelLargeFontHeight 12
60058>>>        Property Integer piLabelSmallFontHeight 10
60059>>>        Property Boolean pbUseLargeFontHeight False
60060>>>
60060>>>        Property Integer piLabelFontPointWeight fw_Bold
60061>>>        Property Integer piLabelColOffset 28
60062>>>        Property Integer piLabelRowOffset 4
60063>>>        Property Boolean pbCreateTooltipItem True
60064>>>
60064>>>        Set pbAcceptDropFiles to True
60065>>>
60065>>>        Send Define_ToolTip_Support_Mixin
60066>>>
60066>>>        // For the Studio to render the header image
60066>>>        Set Bitmap to "Default32x32.bmp"
60067>>>        // This doesn't work... I wonder if there's a way to "trick" the Studio
60067>>>        // to render some text in the header when in design mode?
60067>>>        Set Label to "HEADER TEXT"
60068>>>
60068>>>        On_Key kLeftArrow  Send NavigatePrevious
60069>>>        On_Key kUpArrow    Send NavigatePrevious
60070>>>        On_Key kRightArrow Send NavigateNext
60071>>>        On_Key kDownArrow  Send NavigateNext
60072>>>        On_Key kSwitch     Send Switch_Next_Area
60073>>>    End_Procedure
60074>>>
60074>>>    Import_Class_Protocol ToolTip_Support_Mixin
60075>>>
60075>>>    Procedure Set psImage String sImage
60077>>>        Set Bitmap to ""
60078>>>        Forward Set psImage to sImage
60080>>>    End_Procedure
60081>>>
60081>>>    Function psImage Returns String
60083>>>        Function_Return (psImage(Self))
60084>>>    End_Function
60085>>>
60085>>>    Procedure Set Label String sLabel
60087>>>        Forward Set psLabel to sLabel
60089>>>    End_Procedure
60090>>>
60090>>>    Procedure Set psToolTip String sToolTip
60092>>>        Set private.psToolTip to sToolTip
60093>>>    End_Procedure
60094>>>
60094>>>    Function psToolTip Returns String
60096>>>        Function_Return (private.psToolTip(Self))
60097>>>    End_Function
60098>>>
60098>>>    Procedure End_Construct_Object
60100>>>        String sNote sLabel
60100>>>        Boolean bUseLargeFontHeight bLargeImageSize bCreateTooltipItem
60100>>>        Integer iFontHeight iImageSize iLabelRowOffset iLabelColOffset iSize iTextOffset
60100>>>
60100>>>        Forward Send End_Construct_Object
60102>>>
60102>>>        Get piLabelColOffset to iLabelColOffset
60103>>>        Get pbUseLargeFontHeight to bUseLargeFontHeight
60104>>>        If (bUseLargeFontHeight = True) Begin
60106>>>            Get piLabelLargeFontHeight to iFontHeight
60107>>>            Move 8 to iLabelRowOffset
60108>>>        End
60108>>>>
60108>>>        Else Begin
60109>>>            Get piLabelSmallFontHeight to iFontHeight
60110>>>            Move 6 to iLabelRowOffset
60111>>>        End
60111>>>>
60111>>>
60111>>>        Get pbLargeImageSize to bLargeImageSize
60112>>>        If (bLargeImageSize = True) Begin
60114>>>            Get private.piLargeImageSize to iImageSize
60115>>>        End
60115>>>>
60115>>>        Else Begin
60116>>>            Get private.piSmallImageSize to iImageSize
60117>>>            Move (iLabelColOffset - 6) to iLabelColOffset
60118>>>        End
60118>>>>
60118>>>
60118>>>        Object oHeaderGroupImage is a cRDCHeaderGroupImage
60120>>>            Set piImageSize to iImageSize
60121>>>            Set Location to (piImageRowOffset(Self)) (piImageColOffset(Self))
60122>>>            Set psImage to (private.psImage(Self))
60123>>>            Set peImageAlign to Button_ImageList_Align_Center
60124>>>            Set psToolTip to (private.psToolTip(Self))
60125>>>        End_Object
60126>>>
60126>>>        Object oHeaderGroupInfo_tb is a TextBox
60128>>>            Set Size to 12 100
60129>>>            Set Location to (piLabelRowOffset(Self)) iLabelColOffset
60130>>>            Set FontWeight to (piLabelFontPointWeight(Self))
60131>>>            Set FontItalics to (pbLabelFontItalics(Self))
60132>>>            Set FontPointHeight to iFontHeight
60133>>>            Set Label to (private.psLabel(Self))
60134>>>            Set TextColor to (piLabelColor(Self))
60135>>>            Set psToolTip to (private.psToolTip(Self))
60136>>>            Get Size to iSize
60137>>>        End_Object
60138>>>
60138>>>        // ToDo: The positioning logic for placing the info image to the right of the header text is flawed.
60138>>>        // How can it be improved?
60138>>>        Get pbCreateTooltipItem to bCreateTooltipItem
60139>>>        If (bCreateTooltipItem = True and private.psToolTip(Self) <> "") Begin
60141>>>            Get private.psLabel to sLabel
60142>>>            Get Text_Extent sLabel to iTextOffset
60143>>>            Move (Low(iTextOffset) -0)  to iTextOffset
60144>>>            Object oHeaderGroupTooltip_tb is a TextBox
60146>>>                Set Size to 10 10
60147>>>                If (bUseLargeFontHeight = True) Begin
60149>>>//                    Set Location to (piLabelRowOffset(Self)) iTextOffset //(Low(iSize) + (iTextOffset))
60149>>>                    Set Location to (piLabelRowOffset(Self)) (Low(iSize) + (iLabelColOffset * 2) + 10)
60150>>>                End
60150>>>>
60150>>>                Else Begin
60151>>>//                    Set Location to (piLabelRowOffset(Self)) iTextOffset
60151>>>                    Set Location to (piLabelRowOffset(Self)) (Low(iSize) + iLabelColOffset + 25)
60152>>>                End
60152>>>>
60152>>>                Set psToolTip to (private.psToolTip(Self))
60153>>>                Set Bitmap to "ActionAbout.bmp"
60154>>>            End_Object
60155>>>        End
60155>>>>
60155>>>
60155>>>        Get psNote to sNote
60156>>>        If (Trim(sNote) <> "") Begin
60158>>>            Object oHeaderGroupNote_tb is a TextBox
60160>>>                Set Size to 12 100
60161>>>                Set Location to (Hi(iSize) + iLabelRowOffset) (iLabelColOffset + 8)
60162>>>                Set Label to ("-" * String(sNote))
60163>>>                Set TextColor to (piLabelColor(Self))
60164>>>                Set FontPointHeight to 9
60165>>>                Set psToolTip to (private.psToolTip(Self))
60166>>>            End_Object
60167>>>        End
60167>>>>
60167>>>
60167>>>    End_Procedure
60168>>>
60168>>>    Function Popup_State Returns Boolean
60170>>>        Boolean bIsPopup
60170>>>        Get Popup_State of (Parent(Self)) to bIsPopup
60171>>>        Function_Return bIsPopup
60172>>>    End_Function
60173>>>
60173>>>    Procedure OnEnterArea Handle hoFrom
60175>>>        Integer iColor
60175>>>        Forward Send OnEnterArea hoFrom
60177>>>        // Not ideal, but works most of the time.
60177>>>        //       When navigating to i.e a popup we don't want
60177>>>        //       the coloring to appear. Else there will be 2
60177>>>        //       cRDCHeaderGroup's with the highlight color...
60177>>>        // Is there a better way?
60177>>>        If (hoFrom <> Desktop and hoFrom < Parent(Self)) Begin
60179>>>            Procedure_Return
60180>>>        End
60180>>>>
60180>>>        If (pbUseHotspotColor(Self) = True) Begin
60182>>>            Get Color to iColor
60183>>>            Set private.piColorOrg to iColor
60184>>>            Get piHeaderHotspotColor to iColor
60185>>>            Set Color to iColor
60186>>>            Broadcast Recursive Set Color to iColor
60188>>>        End
60188>>>>
60188>>>    End_Procedure
60189>>>
60189>>>    Procedure OnExitArea Handle hoFrom
60191>>>        Integer iColor
60191>>>        Forward Send OnExitArea hoFrom
60193>>>        If (pbUseHotspotColor(Self) = True) Begin
60195>>>            Get private.piColorOrg to iColor
60196>>>            Set Color to iColor
60197>>>            Broadcast Recursive Set Color to iColor
60199>>>        End
60199>>>>
60199>>>    End_Procedure
60200>>>
60200>>>    // Public access message to change the group header text color at runtime.
60200>>>    Procedure Set Label_Color Integer iColor
60202>>>        Set TextColor of (oHeaderGroupInfo_tb(Self)) to iColor
60203>>>    End_Procedure
60204>>>
60204>>>    Procedure NavigatePrevious
60206>>>        Integer iMulti ivoid iLastErr
60206>>>        Handle hWnd
60206>>>        Boolean bErr
60206>>>
60206>>>        Move Err to bErr
60207>>>        Move LastErr to iLastErr
60208>>>
60208>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
60209>>>        Get Select_Mode of (Focus(Self)) to iMulti
60210>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
60211>>>        If (Err) Begin
60213>>>            Move bErr to Err
60214>>>            Move iLastErr to LastErr
60215>>>            Procedure_Return
60216>>>        End
60216>>>>
60216>>>
60216>>>        Move bErr to Err
60217>>>        Move iLastErr to LastErr
60218>>>        If (iMulti = Multi_Select) Begin
60220>>>            Send Previous
60221>>>        End
60221>>>>
60221>>>        Else Begin
60222>>>            Get Form_Window_Handle of (Focus(Self)) to hWnd
60223>>>            Move (Sendmessage(hWnd, WM_KEYDOWN, Ascii(VK_LEFT), 0)) to iVoid
60224>>>        End
60224>>>>
60224>>>    End_Procedure
60225>>>
60225>>>    Procedure NavigateNext
60227>>>        Integer iMulti iVoid iLastErr
60227>>>        Handle hWnd
60227>>>        Boolean bErr
60227>>>
60227>>>        Move Err to bErr
60228>>>        Move LastErr to iLastErr
60229>>>
60229>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
60230>>>        Get Select_Mode of (Focus(Self)) to iMulti
60231>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
60232>>>        If (Err) Begin
60234>>>            Move bErr to Err
60235>>>            Move iLastErr to LastErr
60236>>>            Procedure_Return
60237>>>        End
60237>>>>
60237>>>
60237>>>        Move bErr to Err
60238>>>        Move iLastErr to LastErr
60239>>>        If (iMulti = Multi_Select) Begin
60241>>>            Send Next
60242>>>        End
60242>>>>
60242>>>        Else Begin
60243>>>            Get Form_Window_Handle of (Focus(Self)) to hWnd
60244>>>            Move (Sendmessage(hWnd, WM_KEYDOWN, Ascii(VK_LEFT), 0)) to iVoid
60245>>>        End
60245>>>>
60245>>>
60245>>>    End_Procedure
60246>>>
60246>>>    Procedure Enable_Window Integer iState
60248>>>        Handle hWnd
60248>>>        Get Window_Handle to hWnd
60249>>>        If hWnd Begin
60251>>>            Move (EnableWindow(hWnd, iState)) to hWnd
60252>>>        End
60252>>>>
60252>>>    End_Procedure
60253>>>
60253>>>    Procedure Page_Object Integer iState
60255>>>        Handle hWnd
60255>>>        Get Window_Handle to hWnd
60256>>>        Forward Send Page_Object iState
60258>>>        If (hWnd = 0 and iState) Begin
60260>>>            Send Shadow_Display
60261>>>        End
60261>>>>
60261>>>    End_Procedure
60262>>>
60262>>>    Procedure Shadow_Display
60264>>>        Send Enable_Window (not(Object_Shadow_State(Self)))
60265>>>    End_Procedure
60266>>>
60266>>>    Function Explicit_Shadow_State Returns Boolean
60268>>>        Function_Return (Private.Explicit_Shadow_State(Self))
60269>>>    End_Function
60270>>>
60270>>>    // For some reason we need to augment this event to allow
60270>>>    // files to be dropped on a cRDCHeaderGroup object; else nothing will
60270>>>    // happen.
60270>>>    Procedure OnFileDropped String sFilename Boolean bLast
60272>>>        Delegate Send OnFileDropped sFilename bLast
60274>>>    End_Procedure
60275>>>
60275>>>End_Class
60276>>>
60276>>>// We don't want the broadcast of setting color to set the background
60276>>>// color for forms that are within a cRDCHeaderGroup object.
60276>>>// If the Form is not within a cRDCHeaderGroup the Form class should
60276>>>// behave as it always has. But if you don't like this; just comment
60276>>>// it out.
60276>>>//Procedure Set Color for Form Integer eColor
60276>>>//    Boolean bIsHeaderGroup bErr bEnabled_State
60276>>>//    Integer iLastErr
60276>>>//
60276>>>//    Move Err to bErr
60276>>>//    Move LastErr to iLastErr
60276>>>//
60276>>>//    Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
60276>>>//    Delegate Get private.pbIsHeaderGroup to bIsHeaderGroup
60276>>>//    Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
60276>>>//    Move bErr to Err
60276>>>//    Move iLastErr to LastErr
60276>>>//    If (bIsHeaderGroup = False) Begin
60276>>>//        Forward Set Color to eColor
60276>>>//    End
60276>>>//End_Procedure
60276>Use cSQLComboForm.pkg
Including file: cSQLComboForm.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cSQLComboForm.pkg)
60276>>>Use Windows.pkg
60276>>>Use cRDCComboForm.pkg
Including file: cRDCComboForm.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\RDCToolsLib\AppSrc\cRDCComboForm.pkg)
60276>>>>>//****************************************************************************
60276>>>>>// $Module type: Package
60276>>>>>// $Module name: cRDCComboform.pkg
60276>>>>>//
60276>>>>>// $Author     : Nils Svedmyr, RDC Tools International.
60276>>>>>// Copyright (c) 2014 RDC Tools International
60276>>>>>// E-mail      : support@rdctools.com
60276>>>>>// Web-site    : http://www.rdctools.com
60276>>>>>//
60276>>>>>// Created     : 2014-03-17 @ 12:35 (Military date format - Year-Month-Day)
60276>>>>>//
60276>>>>>// Portions by : Raveen Sundram, Excellent Software Ltd
60276>>>>>//               The auto-size combo width logic was developed by Raveen.
60276>>>>>//
60276>>>>>// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
60276>>>>>// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
60276>>>>>// This is free software; you can redistribute it and/or modify it under the terms of the
60276>>>>>// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
60276>>>>>// in the help folder for more details.
60276>>>>>//
60276>>>>>//****************************************************************************
60276>>>>>Use Windows.pkg
60276>>>>>
60276>>>>>// Used by the "Page" message below to show
60276>>>>>// a focus rectangle around ComboForm and Checkbox objects.
60276>>>>>Define WM_CHANGEUISTATE For |CI$0127
60276>>>>>Define WM_UPDATEUISTATE For |CI$0128
60276>>>>>Define WM_QUERYUISTATE  For |CI$0129
60276>>>>>Define UIS_SET          For 1
60276>>>>>Define UIS_CLEAR        For 2
60276>>>>>Define UIS_INITIALIZE   For 3
60276>>>>>Define UISF_HIDEFOCUS   For |CI$1
60276>>>>>Define UISF_HIDEACCEL   For |CI$2
60276>>>>>Define UISF_ACTIVE      For |CI$4
60276>>>>>
60276>>>>>Class cComboFormIdleHandler is a cIdleHandler
60277>>>>>    Procedure Construct_Object
60279>>>>>        Forward Send Construct_Object
60281>>>>>
60281>>>>>    End_Procedure
60282>>>>>
60282>>>>>    Procedure OnIdle
60284>>>>>        Delegate Send DoUpdate
60286>>>>>    End_Procedure
60287>>>>>
60287>>>>>End_Class
60288>>>>>
60288>>>>>Class cRDCComboForm is a ComboForm
60289>>>>>    Procedure Construct_Object
60291>>>>>        Forward Send Construct_Object
60293>>>>>
60293>>>>>        Property Boolean pbAutoListWidth True
60294>>>>>
60294>>>>>        Property Boolean pbAutoShadowLabelObject True
60295>>>>>
60295>>>>>        Property Boolean pbAutoEnable False
60296>>>>>        Set Label_Col_Offset to 2
60297>>>>>        Property Boolean pbEnabled True
60298>>>>>        Set Label_Justification_Mode to JMode_Right
60299>>>>>        Property Handle phoIdleHandler (Create(Self, RefClass(cComboFormIdleHandler)))
60300>>>>>
60300>>>>>    End_Procedure
60301>>>>>
60301>>>>>    Procedure End_Construct_Object
60303>>>>>        Boolean bAutoShadowLabelObject
60303>>>>>        String sTooltip sStatus_Help
60303>>>>>
60303>>>>>        Get pbAutoShadowLabelObject to bAutoShadowLabelObject
60304>>>>>        If (bAutoShadowLabelObject = True) Begin
60306>>>>>            Set Private.Label_Shadow_Display_Mode to TBSHADOW_ON_LOCAL
60307>>>>>        End
60307>>>>>>
60307>>>>>
60307>>>>>        Forward Send End_Construct_Object
60309>>>>>
60309>>>>>        Get psToolTip   to sTooltip
60310>>>>>        Get Status_Help to sStatus_Help
60311>>>>>        If (sTooltip = "" and sStatus_Help <> "") Begin
60313>>>>>            Set psToolTip to sStatus_Help
60314>>>>>        End
60314>>>>>>
60314>>>>>        Else If (sTooltip <> "" and sStatus_Help = "") Begin
60317>>>>>            Set Status_Help to sTooltip
60318>>>>>        End
60318>>>>>>
60318>>>>>        Set pbEnabled of (phoIdleHandler(Self)) to (pbAutoEnable(Self))
60319>>>>>
60319>>>>>    End_Procedure
60320>>>>>
60320>>>>>    Procedure DoUpdate
60322>>>>>        If (pbAutoEnable(Self) = False) Begin
60324>>>>>            Procedure_Return
60325>>>>>        End
60325>>>>>>
60325>>>>>        Set Enabled_State to (IsEnabled(Self))
60326>>>>>    End_Procedure
60327>>>>>
60327>>>>>    Function IsEnabled Returns Boolean
60329>>>>>        Boolean bEnabled
60329>>>>>        Get pbEnabled to bEnabled
60330>>>>>        Function_Return bEnabled
60331>>>>>    End_Function
60332>>>>>
60332>>>>>    // Enable the idle handler timer when the object is activated
60332>>>>>    Procedure Activating
60334>>>>>        Forward Send Activating
60336>>>>>        Set pbEnabled of (phoIdleHandler(Self)) to True
60337>>>>>    End_Procedure
60338>>>>>
60338>>>>>    // Disable the idle handler when the object is deactivated
60338>>>>>    Procedure Deactivating
60340>>>>>        Set pbEnabled of (phoIdleHandler(Self)) to False
60341>>>>>        Forward Send Deactivating
60343>>>>>    End_Procedure
60344>>>>>
60344>>>>>    // To "un-select" the text in the comboform on startup
60344>>>>>    Procedure DoApplyAnchors Integer Arg1 Integer Arg2
60346>>>>>        Integer iStart iEnd
60346>>>>>
60346>>>>>        If (Focus(Desktop)=Self) Begin
60348>>>>>            Get SelStart to iStart
60349>>>>>            Get SelEnd   to iEnd
60350>>>>>        End
60350>>>>>>
60350>>>>>        Forward Send DoApplyAnchors Arg1 Arg2
60352>>>>>        Send SetSel iStart iEnd
60353>>>>>    End_Procedure
60354>>>>>
60354>>>>>    // Message that will drop down the list without the user clicking it,
60354>>>>>    // so you can send "DropDownList" to the combo to show the list.
60354>>>>>    Procedure DropDownList
60356>>>>>        Send Windows_Message CB_SHOWDROPDOWN 1 0
60357>>>>>    End_Procedure
60358>>>>>
60358>>>>>    Procedure SizeComboWidth
60360>>>>>        Integer iCount iItem iTextExt iRows iWd iNewWd iVertAdj
60360>>>>>        String sVal
60360>>>>>
60360>>>>>        // Initialise Width
60360>>>>>        Set ListWidth to 0
60361>>>>>        Send DoSetListWidth
60362>>>>>
60362>>>>>        Get ListRowCount     to iRows
60363>>>>>        Get Combo_Item_Count to iCount
60364>>>>>
60364>>>>>        // Vertical scroll-bar adjustment is needed
60364>>>>>        Move (iRows > 0 and iCount > iRows) to iVertAdj
60365>>>>>        If (iVertAdj) Begin
60367>>>>>            Move (GetSystemMetrics(SM_CXVSCROLL)+GetSystemMetrics(SM_CXEDGE)) to iVertAdj
60368>>>>>        End
60368>>>>>>
60368>>>>>        Else Begin
60369>>>>>            Move (GetSystemMetrics(SM_CXEDGE)) to iVertAdj
60370>>>>>        End
60370>>>>>>
60370>>>>>
60370>>>>>        // Calculate New Width
60370>>>>>        Decrement iCount
60371>>>>>        For iItem from 0 to iCount
60377>>>>>>
60377>>>>>            Get Combo_Value iItem to sVal
60378>>>>>            If (sVal <> "") Begin
60380>>>>>                Get Text_Extent sVal to iTextExt
60381>>>>>                Move (Low(iTextExt) + iVertAdj) to iWd
60382>>>>>                If (iWd > iNewWd) Begin
60384>>>>>                    Move (iWd + GetSystemMetrics(SM_CXFIXEDFRAME) + GetSystemMetrics(SM_CXEDGE)) to iNewWd
60385>>>>>                End
60385>>>>>>
60385>>>>>            End
60385>>>>>>
60385>>>>>        Loop
60386>>>>>>
60386>>>>>
60386>>>>>        // Set New Width
60386>>>>>        Set ListWidth to iNewWd
60387>>>>>        Send DoSetListWidth
60388>>>>>    End_Procedure
60389>>>>>
60389>>>>>    Procedure Combo_Add_Item String sValue
60391>>>>>        Forward Send Combo_Add_Item sValue
60393>>>>>        If (pbAutoListWidth(Self)) Begin
60395>>>>>            Send SizeComboWidth
60396>>>>>        End
60396>>>>>>
60396>>>>>    End_Procedure
60397>>>>>
60397>>>>>    Procedure Combo_Fill_List
60399>>>>>        Forward Send Combo_Fill_List
60401>>>>>        If (pbAutoListWidth(Self)) Begin
60403>>>>>            Send SizeComboWidth
60404>>>>>        End
60404>>>>>>
60404>>>>>    End_Procedure
60405>>>>>
60405>>>>>    // Fix for a bug when using manifest files & running Vista and above.
60405>>>>>    // The bug being that the focus rectangle doesn't show.
60405>>>>>    Procedure Page Integer iPageObject
60407>>>>>        Handle hWnd
60407>>>>>        Integer iRet iState
60407>>>>>
60407>>>>>        Forward Send Page iPageObject
60409>>>>>
60409>>>>>        If (iPageObject) Begin
60411>>>>>            Get Window_Handle to hWnd
60412>>>>>            If (hWnd) Begin
60414>>>>>                Move (SendMessage(hWnd, WM_QUERYUISTATE, 0, 0)) to iRet
60415>>>>>                If (iRet iand UISF_HIDEFOCUS) Begin
60417>>>>>                    Move (UIS_CLEAR + (UISF_HIDEFOCUS * 65536)) to iState
60418>>>>>                    Move (SendMessage(hWnd, WM_UPDATEUISTATE, iState, 0)) to iRet
60419>>>>>                End
60419>>>>>>
60419>>>>>            End
60419>>>>>>
60419>>>>>        End
60419>>>>>>
60419>>>>>
60419>>>>>        // To "un-select" the text in the comboform
60419>>>>>        If (iPageObject = 1 and Focus(Desktop) <> Self) Begin
60421>>>>>            Send SetSel 0 0
60422>>>>>        End
60422>>>>>>
60422>>>>>    End_Procedure
60423>>>>>
60423>>>>>End_Class
60424>>>
60424>>>// Used by the "Page" message below to show
60424>>>// a rectangle around ComboForm and Checkbox objects.
60424>>>//#IFNDEF WM_CHANGEUISTATE
60424>>>//    Define WM_CHANGEUISTATE for |CI$0127
60424>>>//    Define WM_UPDATEUISTATE for |CI$0128
60424>>>//    Define WM_QUERYUISTATE  for |CI$0129
60424>>>//    Define UIS_SET          for 1
60424>>>//    Define UIS_CLEAR        for 2
60424>>>//    Define UIS_INITIALIZE   for 3
60424>>>//    Define UISF_HIDEFOCUS   for |CI$1
60424>>>//    Define UISF_HIDEACCEL   for |CI$2
60424>>>//    Define UISF_ACTIVE      for |CI$4
60424>>>//#ENDIF
60424>>>
60424>>>Class cSQLComboForm is a cRDCComboForm
60425>>>    Procedure Construct_Object
60427>>>        Forward Send Construct_Object
60429>>>
60429>>>        // This will shadow the label if the form itself has its Enabled_State=False
60429>>>//        Property Boolean pbAutoShadowLabelObject True
60429>>>
60429>>>        // The piItem should be set to the object's corresponding tSQLConnection member (One based)
60429>>>        Property Integer piItem
60430>>>
60430>>>//        Set Label_Col_Offset to 2
60430>>>//        Set Label_Justification_Mode to JMode_Right
60430>>>    End_Procedure
60431>>>
60431>>>    Procedure End_Construct_Object
60433>>>//        Boolean bAutoShadowLabelObject
60433>>>//        Get pbAutoShadowLabelObject to bAutoShadowLabelObject
60433>>>//        If (bAutoShadowLabelObject = True) Begin
60433>>>//            Set Private.Label_Shadow_Display_Mode to TBSHADOW_ON_LOCAL
60433>>>//        End
60433>>>        Forward Send End_Construct_Object
60435>>>    End_Procedure
60436>>>
60436>>>    Procedure DbTypeUpdate Integer iDbType String sDriverID
60438>>>    End_Procedure
60439>>>
60439>>>    Procedure ReadConnectionData String[] sConnectionData
60441>>>        Integer iItem
60441>>>        Get piItem to iItem
60442>>>        Set Value to sConnectionData[iItem]
60443>>>    End_Procedure
60444>>>
60444>>>    Procedure WriteConnectionData String[] ByRef sConnectionData
60446>>>        String sValue
60446>>>        Integer iItem
60446>>>        Get piItem to iItem
60447>>>        Get Value to sValue
60448>>>        Move sValue to sConnectionData[iItem]
60449>>>    End_Procedure
60450>>>
60450>>>//    Procedure Set psToolTip String sToolTip
60450>>>//        String sStatusHelp
60450>>>//
60450>>>//        Get Status_Help to sStatusHelp
60450>>>//        If (sStatusHelp = "") Begin
60450>>>//            Set Status_Help to sToolTip
60450>>>//        End
60450>>>//
60450>>>//        Forward Set psToolTip to sToolTip
60450>>>//    End_Procedure
60450>>>//
60450>>>//    // Fix for a bug when using manifest files & running Vista and above.
60450>>>//    // The bug being that the focus rectangle doesn't show.
60450>>>//    Procedure Page Integer iPageObject
60450>>>//        Handle hWnd
60450>>>//        Integer iRet iState
60450>>>//
60450>>>//        Forward Send Page iPageObject
60450>>>//
60450>>>//        If (iPageObject) Begin
60450>>>//            Get Window_Handle to hWnd
60450>>>//            If (hWnd) Begin
60450>>>//                Move (SendMessage(hWnd, WM_QUERYUISTATE, 0, 0)) to iRet
60450>>>//                If (iRet iand UISF_HIDEFOCUS) Begin
60450>>>//                    Move (UIS_CLEAR + (UISF_HIDEFOCUS * 65536)) to iState
60450>>>//                    Move (SendMessage(hWnd, WM_UPDATEUISTATE, iState, 0)) to iRet
60450>>>//                End
60450>>>//            End
60450>>>//        End
60450>>>//    End_Procedure
60450>>>
60450>>>End_Class
60451>Use ChilkatXML-9.5.0-win32.pkg
Including file: ChilkatXML-9.5.0-win32.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ChilkatXML-9.5.0-win32.pkg)
60451>>>Use FlexCom20.pkg
60451>>>
60451>>>// CLSID: {2077C1B5-FBD0-40DF-B7AA-E07CBA589CB0}
60451>>>// IChilkatXml Interface v9.5.0
60451>>>Class cComIChilkatXml is a Mixin
60452>>>
60452>>>    Function ComGetImplAddrStr Returns String
60454>>>        Handle hDispatchDriver
60454>>>        String retVal
60454>>>        Get phDispatchDriver to hDispatchDriver
60455>>>        Get InvokeComMethod of hDispatchDriver 99 OLE_VT_BSTR to retVal
60456>>>        Function_Return retVal
60457>>>    End_Function
60458>>>
60458>>>    Function ComLastErrorHtml Returns String
60460>>>        Handle hDispatchDriver
60460>>>        String retVal
60460>>>        Get phDispatchDriver to hDispatchDriver
60461>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BSTR to retVal
60462>>>        Function_Return retVal
60463>>>    End_Function
60464>>>
60464>>>    Function ComLastErrorText Returns String
60466>>>        Handle hDispatchDriver
60466>>>        String retVal
60466>>>        Get phDispatchDriver to hDispatchDriver
60467>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BSTR to retVal
60468>>>        Function_Return retVal
60469>>>    End_Function
60470>>>
60470>>>    Function ComLastErrorXml Returns String
60472>>>        Handle hDispatchDriver
60472>>>        String retVal
60472>>>        Get phDispatchDriver to hDispatchDriver
60473>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BSTR to retVal
60474>>>        Function_Return retVal
60475>>>    End_Function
60476>>>
60476>>>    Function ComVersion Returns String
60478>>>        Handle hDispatchDriver
60478>>>        String retVal
60478>>>        Get phDispatchDriver to hDispatchDriver
60479>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_BSTR to retVal
60480>>>        Function_Return retVal
60481>>>    End_Function
60482>>>
60482>>>    Function ComDebugLogFilePath Returns String
60484>>>        Handle hDispatchDriver
60484>>>        String retVal
60484>>>        Get phDispatchDriver to hDispatchDriver
60485>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_BSTR to retVal
60486>>>        Function_Return retVal
60487>>>    End_Function
60488>>>
60488>>>    Procedure Set ComDebugLogFilePath String value
60490>>>        Handle hDispatchDriver
60490>>>        Get phDispatchDriver to hDispatchDriver
60491>>>        Send PrepareParams to hDispatchDriver 1
60492>>>        Set ComProperty of hDispatchDriver 5 OLE_VT_BSTR to value
60493>>>    End_Procedure
60494>>>
60494>>>    Function ComVerboseLogging Returns Integer
60496>>>        Handle hDispatchDriver
60496>>>        Integer retVal
60496>>>        Get phDispatchDriver to hDispatchDriver
60497>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_I4 to retVal
60498>>>        Function_Return retVal
60499>>>    End_Function
60500>>>
60500>>>    Procedure Set ComVerboseLogging Integer value
60502>>>        Handle hDispatchDriver
60502>>>        Get phDispatchDriver to hDispatchDriver
60503>>>        Send PrepareParams to hDispatchDriver 1
60504>>>        Set ComProperty of hDispatchDriver 6 OLE_VT_I4 to value
60505>>>    End_Procedure
60506>>>
60506>>>    Function ComLastMethodSuccess Returns Integer
60508>>>        Handle hDispatchDriver
60508>>>        Integer retVal
60508>>>        Get phDispatchDriver to hDispatchDriver
60509>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_I4 to retVal
60510>>>        Function_Return retVal
60511>>>    End_Function
60512>>>
60512>>>    Procedure Set ComLastMethodSuccess Integer value
60514>>>        Handle hDispatchDriver
60514>>>        Get phDispatchDriver to hDispatchDriver
60515>>>        Send PrepareParams to hDispatchDriver 1
60516>>>        Set ComProperty of hDispatchDriver 9 OLE_VT_I4 to value
60517>>>    End_Procedure
60518>>>
60518>>>    Function ComLastStringResult Returns String
60520>>>        Handle hDispatchDriver
60520>>>        String retVal
60520>>>        Get phDispatchDriver to hDispatchDriver
60521>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_BSTR to retVal
60522>>>        Function_Return retVal
60523>>>    End_Function
60524>>>
60524>>>    Function ComLastBinaryResult Returns Variant
60526>>>        Handle hDispatchDriver
60526>>>        Variant retVal
60526>>>        Get phDispatchDriver to hDispatchDriver
60527>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_VARIANT to retVal
60528>>>        Function_Return retVal
60529>>>    End_Function
60530>>>
60530>>>    Function ComLastStringResultLen Returns Integer
60532>>>        Handle hDispatchDriver
60532>>>        Integer retVal
60532>>>        Get phDispatchDriver to hDispatchDriver
60533>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_I4 to retVal
60534>>>        Function_Return retVal
60535>>>    End_Function
60536>>>
60536>>>    Function ComCdata Returns Integer
60538>>>        Handle hDispatchDriver
60538>>>        Integer retVal
60538>>>        Get phDispatchDriver to hDispatchDriver
60539>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_I4 to retVal
60540>>>        Function_Return retVal
60541>>>    End_Function
60542>>>
60542>>>    Procedure Set ComCdata Integer value
60544>>>        Handle hDispatchDriver
60544>>>        Get phDispatchDriver to hDispatchDriver
60545>>>        Send PrepareParams to hDispatchDriver 1
60546>>>        Set ComProperty of hDispatchDriver 100 OLE_VT_I4 to value
60547>>>    End_Procedure
60548>>>
60548>>>    Function ComContent Returns String
60550>>>        Handle hDispatchDriver
60550>>>        String retVal
60550>>>        Get phDispatchDriver to hDispatchDriver
60551>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_BSTR to retVal
60552>>>        Function_Return retVal
60553>>>    End_Function
60554>>>
60554>>>    Procedure Set ComContent String value
60556>>>        Handle hDispatchDriver
60556>>>        Get phDispatchDriver to hDispatchDriver
60557>>>        Send PrepareParams to hDispatchDriver 1
60558>>>        Set ComProperty of hDispatchDriver 101 OLE_VT_BSTR to value
60559>>>    End_Procedure
60560>>>
60560>>>    Function ComContentInt Returns Integer
60562>>>        Handle hDispatchDriver
60562>>>        Integer retVal
60562>>>        Get phDispatchDriver to hDispatchDriver
60563>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_I4 to retVal
60564>>>        Function_Return retVal
60565>>>    End_Function
60566>>>
60566>>>    Procedure Set ComContentInt Integer value
60568>>>        Handle hDispatchDriver
60568>>>        Get phDispatchDriver to hDispatchDriver
60569>>>        Send PrepareParams to hDispatchDriver 1
60570>>>        Set ComProperty of hDispatchDriver 102 OLE_VT_I4 to value
60571>>>    End_Procedure
60572>>>
60572>>>    Function ComDocType Returns String
60574>>>        Handle hDispatchDriver
60574>>>        String retVal
60574>>>        Get phDispatchDriver to hDispatchDriver
60575>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_BSTR to retVal
60576>>>        Function_Return retVal
60577>>>    End_Function
60578>>>
60578>>>    Procedure Set ComDocType String value
60580>>>        Handle hDispatchDriver
60580>>>        Get phDispatchDriver to hDispatchDriver
60581>>>        Send PrepareParams to hDispatchDriver 1
60582>>>        Set ComProperty of hDispatchDriver 103 OLE_VT_BSTR to value
60583>>>    End_Procedure
60584>>>
60584>>>    Function ComEmitXmlDecl Returns Integer
60586>>>        Handle hDispatchDriver
60586>>>        Integer retVal
60586>>>        Get phDispatchDriver to hDispatchDriver
60587>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_I4 to retVal
60588>>>        Function_Return retVal
60589>>>    End_Function
60590>>>
60590>>>    Procedure Set ComEmitXmlDecl Integer value
60592>>>        Handle hDispatchDriver
60592>>>        Get phDispatchDriver to hDispatchDriver
60593>>>        Send PrepareParams to hDispatchDriver 1
60594>>>        Set ComProperty of hDispatchDriver 104 OLE_VT_I4 to value
60595>>>    End_Procedure
60596>>>
60596>>>    Function ComEncoding Returns String
60598>>>        Handle hDispatchDriver
60598>>>        String retVal
60598>>>        Get phDispatchDriver to hDispatchDriver
60599>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_BSTR to retVal
60600>>>        Function_Return retVal
60601>>>    End_Function
60602>>>
60602>>>    Procedure Set ComEncoding String value
60604>>>        Handle hDispatchDriver
60604>>>        Get phDispatchDriver to hDispatchDriver
60605>>>        Send PrepareParams to hDispatchDriver 1
60606>>>        Set ComProperty of hDispatchDriver 105 OLE_VT_BSTR to value
60607>>>    End_Procedure
60608>>>
60608>>>    Function ComNumAttributes Returns Integer
60610>>>        Handle hDispatchDriver
60610>>>        Integer retVal
60610>>>        Get phDispatchDriver to hDispatchDriver
60611>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_I4 to retVal
60612>>>        Function_Return retVal
60613>>>    End_Function
60614>>>
60614>>>    Function ComNumChildren Returns Integer
60616>>>        Handle hDispatchDriver
60616>>>        Integer retVal
60616>>>        Get phDispatchDriver to hDispatchDriver
60617>>>        Get InvokeComMethod of hDispatchDriver 107 OLE_VT_I4 to retVal
60618>>>        Function_Return retVal
60619>>>    End_Function
60620>>>
60620>>>    Function ComSortCaseInsensitive Returns Integer
60622>>>        Handle hDispatchDriver
60622>>>        Integer retVal
60622>>>        Get phDispatchDriver to hDispatchDriver
60623>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_I4 to retVal
60624>>>        Function_Return retVal
60625>>>    End_Function
60626>>>
60626>>>    Procedure Set ComSortCaseInsensitive Integer value
60628>>>        Handle hDispatchDriver
60628>>>        Get phDispatchDriver to hDispatchDriver
60629>>>        Send PrepareParams to hDispatchDriver 1
60630>>>        Set ComProperty of hDispatchDriver 108 OLE_VT_I4 to value
60631>>>    End_Procedure
60632>>>
60632>>>    Function ComStandalone Returns Integer
60634>>>        Handle hDispatchDriver
60634>>>        Integer retVal
60634>>>        Get phDispatchDriver to hDispatchDriver
60635>>>        Get InvokeComMethod of hDispatchDriver 109 OLE_VT_I4 to retVal
60636>>>        Function_Return retVal
60637>>>    End_Function
60638>>>
60638>>>    Procedure Set ComStandalone Integer value
60640>>>        Handle hDispatchDriver
60640>>>        Get phDispatchDriver to hDispatchDriver
60641>>>        Send PrepareParams to hDispatchDriver 1
60642>>>        Set ComProperty of hDispatchDriver 109 OLE_VT_I4 to value
60643>>>    End_Procedure
60644>>>
60644>>>    Function ComTag Returns String
60646>>>        Handle hDispatchDriver
60646>>>        String retVal
60646>>>        Get phDispatchDriver to hDispatchDriver
60647>>>        Get InvokeComMethod of hDispatchDriver 110 OLE_VT_BSTR to retVal
60648>>>        Function_Return retVal
60649>>>    End_Function
60650>>>
60650>>>    Procedure Set ComTag String value
60652>>>        Handle hDispatchDriver
60652>>>        Get phDispatchDriver to hDispatchDriver
60653>>>        Send PrepareParams to hDispatchDriver 1
60654>>>        Set ComProperty of hDispatchDriver 110 OLE_VT_BSTR to value
60655>>>    End_Procedure
60656>>>
60656>>>    Function ComTreeId Returns Integer
60658>>>        Handle hDispatchDriver
60658>>>        Integer retVal
60658>>>        Get phDispatchDriver to hDispatchDriver
60659>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_I4 to retVal
60660>>>        Function_Return retVal
60661>>>    End_Function
60662>>>
60662>>>    Function ComAccumulateTagContent String llTag String llskipTags Returns String
60664>>>        Handle hDispatchDriver
60664>>>        String retVal
60664>>>        Get phDispatchDriver to hDispatchDriver
60665>>>        Send PrepareParams to hDispatchDriver 2
60666>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60667>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llskipTags
60668>>>        Get InvokeComMethod of hDispatchDriver 112 OLE_VT_BSTR to retVal
60669>>>        Function_Return retVal
60670>>>    End_Function
60671>>>
60671>>>    Function ComAddAttribute String llname String llvalue Returns Integer
60673>>>        Handle hDispatchDriver
60673>>>        Integer retVal
60673>>>        Get phDispatchDriver to hDispatchDriver
60674>>>        Send PrepareParams to hDispatchDriver 2
60675>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60676>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
60677>>>        Get InvokeComMethod of hDispatchDriver 113 OLE_VT_I4 to retVal
60678>>>        Function_Return retVal
60679>>>    End_Function
60680>>>
60680>>>    Function ComAddAttributeInt String llname Integer llvalue Returns Integer
60682>>>        Handle hDispatchDriver
60682>>>        Integer retVal
60682>>>        Get phDispatchDriver to hDispatchDriver
60683>>>        Send PrepareParams to hDispatchDriver 2
60684>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60685>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
60686>>>        Get InvokeComMethod of hDispatchDriver 114 OLE_VT_I4 to retVal
60687>>>        Function_Return retVal
60688>>>    End_Function
60689>>>
60689>>>    Function ComAddChildTree Variant lltree Returns Integer
60691>>>        Handle hDispatchDriver
60691>>>        Integer retVal
60691>>>        Get phDispatchDriver to hDispatchDriver
60692>>>        Send PrepareParams to hDispatchDriver 1
60693>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH lltree
60694>>>        Get InvokeComMethod of hDispatchDriver 115 OLE_VT_I4 to retVal
60695>>>        Function_Return retVal
60696>>>    End_Function
60697>>>
60697>>>    Procedure ComAddOrUpdateAttribute String llname String llvalue
60699>>>        Handle hDispatchDriver
60699>>>        Get phDispatchDriver to hDispatchDriver
60700>>>        Send PrepareParams to hDispatchDriver 2
60701>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60702>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
60703>>>        Send InvokeComMethod to hDispatchDriver 116 OLE_VT_VOID
60704>>>    End_Procedure
60705>>>
60705>>>    Procedure ComAddOrUpdateAttributeI String llname Integer llvalue
60707>>>        Handle hDispatchDriver
60707>>>        Get phDispatchDriver to hDispatchDriver
60708>>>        Send PrepareParams to hDispatchDriver 2
60709>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60710>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
60711>>>        Send InvokeComMethod to hDispatchDriver 117 OLE_VT_VOID
60712>>>    End_Procedure
60713>>>
60713>>>    Procedure ComAddStyleSheet String llstyleSheet
60715>>>        Handle hDispatchDriver
60715>>>        Get phDispatchDriver to hDispatchDriver
60716>>>        Send PrepareParams to hDispatchDriver 1
60717>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstyleSheet
60718>>>        Send InvokeComMethod to hDispatchDriver 118 OLE_VT_VOID
60719>>>    End_Procedure
60720>>>
60720>>>    Procedure ComAddToAttribute String llname Integer llamount
60722>>>        Handle hDispatchDriver
60722>>>        Get phDispatchDriver to hDispatchDriver
60723>>>        Send PrepareParams to hDispatchDriver 2
60724>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60725>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llamount
60726>>>        Send InvokeComMethod to hDispatchDriver 119 OLE_VT_VOID
60727>>>    End_Procedure
60728>>>
60728>>>    Procedure ComAddToChildContent String llTag Integer llamount
60730>>>        Handle hDispatchDriver
60730>>>        Get phDispatchDriver to hDispatchDriver
60731>>>        Send PrepareParams to hDispatchDriver 2
60732>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60733>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llamount
60734>>>        Send InvokeComMethod to hDispatchDriver 120 OLE_VT_VOID
60735>>>    End_Procedure
60736>>>
60736>>>    Procedure ComAddToContent Integer llamount
60738>>>        Handle hDispatchDriver
60738>>>        Get phDispatchDriver to hDispatchDriver
60739>>>        Send PrepareParams to hDispatchDriver 1
60740>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llamount
60741>>>        Send InvokeComMethod to hDispatchDriver 121 OLE_VT_VOID
60742>>>    End_Procedure
60743>>>
60743>>>    Function ComAppendToContent String llstr Returns Integer
60745>>>        Handle hDispatchDriver
60745>>>        Integer retVal
60745>>>        Get phDispatchDriver to hDispatchDriver
60746>>>        Send PrepareParams to hDispatchDriver 1
60747>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstr
60748>>>        Get InvokeComMethod of hDispatchDriver 122 OLE_VT_I4 to retVal
60749>>>        Function_Return retVal
60750>>>    End_Function
60751>>>
60751>>>    Function ComBEncodeContent String llcharset Variant llinData Returns Integer
60753>>>        Handle hDispatchDriver
60753>>>        Integer retVal
60753>>>        Get phDispatchDriver to hDispatchDriver
60754>>>        Send PrepareParams to hDispatchDriver 2
60755>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcharset
60756>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llinData
60757>>>        Get InvokeComMethod of hDispatchDriver 123 OLE_VT_I4 to retVal
60758>>>        Function_Return retVal
60759>>>    End_Function
60760>>>
60760>>>    Function ComChildContentMatches String lltagPath String llpattern Integer llcaseSensitive Returns Integer
60762>>>        Handle hDispatchDriver
60762>>>        Integer retVal
60762>>>        Get phDispatchDriver to hDispatchDriver
60763>>>        Send PrepareParams to hDispatchDriver 3
60764>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60765>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpattern
60766>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcaseSensitive
60767>>>        Get InvokeComMethod of hDispatchDriver 124 OLE_VT_I4 to retVal
60768>>>        Function_Return retVal
60769>>>    End_Function
60770>>>
60770>>>    Function ComChilkatPath String llpathCmd Returns String
60772>>>        Handle hDispatchDriver
60772>>>        String retVal
60772>>>        Get phDispatchDriver to hDispatchDriver
60773>>>        Send PrepareParams to hDispatchDriver 1
60774>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpathCmd
60775>>>        Get InvokeComMethod of hDispatchDriver 125 OLE_VT_BSTR to retVal
60776>>>        Function_Return retVal
60777>>>    End_Function
60778>>>
60778>>>    Procedure ComClear
60780>>>        Handle hDispatchDriver
60780>>>        Get phDispatchDriver to hDispatchDriver
60781>>>        Send InvokeComMethod to hDispatchDriver 126 OLE_VT_VOID
60782>>>    End_Procedure
60783>>>
60783>>>    Function ComContentMatches String llpattern Integer llcaseSensitive Returns Integer
60785>>>        Handle hDispatchDriver
60785>>>        Integer retVal
60785>>>        Get phDispatchDriver to hDispatchDriver
60786>>>        Send PrepareParams to hDispatchDriver 2
60787>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpattern
60788>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcaseSensitive
60789>>>        Get InvokeComMethod of hDispatchDriver 127 OLE_VT_I4 to retVal
60790>>>        Function_Return retVal
60791>>>    End_Function
60792>>>
60792>>>    Procedure ComCopy Variant llnode
60794>>>        Handle hDispatchDriver
60794>>>        Get phDispatchDriver to hDispatchDriver
60795>>>        Send PrepareParams to hDispatchDriver 1
60796>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llnode
60797>>>        Send InvokeComMethod to hDispatchDriver 128 OLE_VT_VOID
60798>>>    End_Procedure
60799>>>
60799>>>    Procedure ComCopyRef Variant llcopyFromNode
60801>>>        Handle hDispatchDriver
60801>>>        Get phDispatchDriver to hDispatchDriver
60802>>>        Send PrepareParams to hDispatchDriver 1
60803>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llcopyFromNode
60804>>>        Send InvokeComMethod to hDispatchDriver 129 OLE_VT_VOID
60805>>>    End_Procedure
60806>>>
60806>>>    Function ComDecodeContent Returns Variant
60808>>>        Handle hDispatchDriver
60808>>>        Variant retVal
60808>>>        Get phDispatchDriver to hDispatchDriver
60809>>>        Get InvokeComMethod of hDispatchDriver 130 OLE_VT_VARIANT to retVal
60810>>>        Function_Return retVal
60811>>>    End_Function
60812>>>
60812>>>    Function ComDecodeEntities String llstr Returns String
60814>>>        Handle hDispatchDriver
60814>>>        String retVal
60814>>>        Get phDispatchDriver to hDispatchDriver
60815>>>        Send PrepareParams to hDispatchDriver 1
60816>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstr
60817>>>        Get InvokeComMethod of hDispatchDriver 131 OLE_VT_BSTR to retVal
60818>>>        Function_Return retVal
60819>>>    End_Function
60820>>>
60820>>>    Function ComDecryptContent String llpassword Returns Integer
60822>>>        Handle hDispatchDriver
60822>>>        Integer retVal
60822>>>        Get phDispatchDriver to hDispatchDriver
60823>>>        Send PrepareParams to hDispatchDriver 1
60824>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
60825>>>        Get InvokeComMethod of hDispatchDriver 132 OLE_VT_I4 to retVal
60826>>>        Function_Return retVal
60827>>>    End_Function
60828>>>
60828>>>    Function ComEncryptContent String llpassword Returns Integer
60830>>>        Handle hDispatchDriver
60830>>>        Integer retVal
60830>>>        Get phDispatchDriver to hDispatchDriver
60831>>>        Send PrepareParams to hDispatchDriver 1
60832>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
60833>>>        Get InvokeComMethod of hDispatchDriver 133 OLE_VT_I4 to retVal
60834>>>        Function_Return retVal
60835>>>    End_Function
60836>>>
60836>>>    Function ComExtractChildByIndex Integer llindex Returns Variant
60838>>>        Handle hDispatchDriver
60838>>>        Variant retVal
60838>>>        Get phDispatchDriver to hDispatchDriver
60839>>>        Send PrepareParams to hDispatchDriver 1
60840>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60841>>>        Get InvokeComMethod of hDispatchDriver 134 OLE_VT_DISPATCH to retVal
60842>>>        Function_Return retVal
60843>>>    End_Function
60844>>>
60844>>>    Function ComExtractChildByName String lltagPath String llattrName String llattrValue Returns Variant
60846>>>        Handle hDispatchDriver
60846>>>        Variant retVal
60846>>>        Get phDispatchDriver to hDispatchDriver
60847>>>        Send PrepareParams to hDispatchDriver 3
60848>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60849>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
60850>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrValue
60851>>>        Get InvokeComMethod of hDispatchDriver 135 OLE_VT_DISPATCH to retVal
60852>>>        Function_Return retVal
60853>>>    End_Function
60854>>>
60854>>>    Function ComFindChild String lltagPath Returns Variant
60856>>>        Handle hDispatchDriver
60856>>>        Variant retVal
60856>>>        Get phDispatchDriver to hDispatchDriver
60857>>>        Send PrepareParams to hDispatchDriver 1
60858>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60859>>>        Get InvokeComMethod of hDispatchDriver 136 OLE_VT_DISPATCH to retVal
60860>>>        Function_Return retVal
60861>>>    End_Function
60862>>>
60862>>>    Function ComFindChild2 String lltagPath Returns Integer
60864>>>        Handle hDispatchDriver
60864>>>        Integer retVal
60864>>>        Get phDispatchDriver to hDispatchDriver
60865>>>        Send PrepareParams to hDispatchDriver 1
60866>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60867>>>        Get InvokeComMethod of hDispatchDriver 137 OLE_VT_I4 to retVal
60868>>>        Function_Return retVal
60869>>>    End_Function
60870>>>
60870>>>    Function ComFindNextRecord String lltagPath String llcontentPattern Returns Variant
60872>>>        Handle hDispatchDriver
60872>>>        Variant retVal
60872>>>        Get phDispatchDriver to hDispatchDriver
60873>>>        Send PrepareParams to hDispatchDriver 2
60874>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60875>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
60876>>>        Get InvokeComMethod of hDispatchDriver 138 OLE_VT_DISPATCH to retVal
60877>>>        Function_Return retVal
60878>>>    End_Function
60879>>>
60879>>>    Function ComFindOrAddNewChild String lltagPath Returns Variant
60881>>>        Handle hDispatchDriver
60881>>>        Variant retVal
60881>>>        Get phDispatchDriver to hDispatchDriver
60882>>>        Send PrepareParams to hDispatchDriver 1
60883>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60884>>>        Get InvokeComMethod of hDispatchDriver 139 OLE_VT_DISPATCH to retVal
60885>>>        Function_Return retVal
60886>>>    End_Function
60887>>>
60887>>>    Function ComFirstChild Returns Variant
60889>>>        Handle hDispatchDriver
60889>>>        Variant retVal
60889>>>        Get phDispatchDriver to hDispatchDriver
60890>>>        Get InvokeComMethod of hDispatchDriver 140 OLE_VT_DISPATCH to retVal
60891>>>        Function_Return retVal
60892>>>    End_Function
60893>>>
60893>>>    Function ComFirstChild2 Returns Integer
60895>>>        Handle hDispatchDriver
60895>>>        Integer retVal
60895>>>        Get phDispatchDriver to hDispatchDriver
60896>>>        Get InvokeComMethod of hDispatchDriver 141 OLE_VT_I4 to retVal
60897>>>        Function_Return retVal
60898>>>    End_Function
60899>>>
60899>>>    Function ComGetAttrValue String llname Returns String
60901>>>        Handle hDispatchDriver
60901>>>        String retVal
60901>>>        Get phDispatchDriver to hDispatchDriver
60902>>>        Send PrepareParams to hDispatchDriver 1
60903>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60904>>>        Get InvokeComMethod of hDispatchDriver 142 OLE_VT_BSTR to retVal
60905>>>        Function_Return retVal
60906>>>    End_Function
60907>>>
60907>>>    Function ComGetAttrValueInt String llname Returns Integer
60909>>>        Handle hDispatchDriver
60909>>>        Integer retVal
60909>>>        Get phDispatchDriver to hDispatchDriver
60910>>>        Send PrepareParams to hDispatchDriver 1
60911>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60912>>>        Get InvokeComMethod of hDispatchDriver 143 OLE_VT_I4 to retVal
60913>>>        Function_Return retVal
60914>>>    End_Function
60915>>>
60915>>>    Function ComGetAttributeName Integer llindex Returns String
60917>>>        Handle hDispatchDriver
60917>>>        String retVal
60917>>>        Get phDispatchDriver to hDispatchDriver
60918>>>        Send PrepareParams to hDispatchDriver 1
60919>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60920>>>        Get InvokeComMethod of hDispatchDriver 144 OLE_VT_BSTR to retVal
60921>>>        Function_Return retVal
60922>>>    End_Function
60923>>>
60923>>>    Function ComGetAttributeValue Integer llindex Returns String
60925>>>        Handle hDispatchDriver
60925>>>        String retVal
60925>>>        Get phDispatchDriver to hDispatchDriver
60926>>>        Send PrepareParams to hDispatchDriver 1
60927>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60928>>>        Get InvokeComMethod of hDispatchDriver 145 OLE_VT_BSTR to retVal
60929>>>        Function_Return retVal
60930>>>    End_Function
60931>>>
60931>>>    Function ComGetAttributeValueInt Integer llindex Returns Integer
60933>>>        Handle hDispatchDriver
60933>>>        Integer retVal
60933>>>        Get phDispatchDriver to hDispatchDriver
60934>>>        Send PrepareParams to hDispatchDriver 1
60935>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60936>>>        Get InvokeComMethod of hDispatchDriver 146 OLE_VT_I4 to retVal
60937>>>        Function_Return retVal
60938>>>    End_Function
60939>>>
60939>>>    Function ComGetBinaryContent Integer llunzipFlag Integer lldecryptFlag String llpassword Returns Variant
60941>>>        Handle hDispatchDriver
60941>>>        Variant retVal
60941>>>        Get phDispatchDriver to hDispatchDriver
60942>>>        Send PrepareParams to hDispatchDriver 3
60943>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llunzipFlag
60944>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldecryptFlag
60945>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
60946>>>        Get InvokeComMethod of hDispatchDriver 147 OLE_VT_VARIANT to retVal
60947>>>        Function_Return retVal
60948>>>    End_Function
60949>>>
60949>>>    Function ComGetChild Integer llindex Returns Variant
60951>>>        Handle hDispatchDriver
60951>>>        Variant retVal
60951>>>        Get phDispatchDriver to hDispatchDriver
60952>>>        Send PrepareParams to hDispatchDriver 1
60953>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60954>>>        Get InvokeComMethod of hDispatchDriver 148 OLE_VT_DISPATCH to retVal
60955>>>        Function_Return retVal
60956>>>    End_Function
60957>>>
60957>>>    Function ComGetChild2 Integer llindex Returns Integer
60959>>>        Handle hDispatchDriver
60959>>>        Integer retVal
60959>>>        Get phDispatchDriver to hDispatchDriver
60960>>>        Send PrepareParams to hDispatchDriver 1
60961>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60962>>>        Get InvokeComMethod of hDispatchDriver 149 OLE_VT_I4 to retVal
60963>>>        Function_Return retVal
60964>>>    End_Function
60965>>>
60965>>>    Function ComGetChildBoolValue String lltagPath Returns Integer
60967>>>        Handle hDispatchDriver
60967>>>        Integer retVal
60967>>>        Get phDispatchDriver to hDispatchDriver
60968>>>        Send PrepareParams to hDispatchDriver 1
60969>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60970>>>        Get InvokeComMethod of hDispatchDriver 150 OLE_VT_I4 to retVal
60971>>>        Function_Return retVal
60972>>>    End_Function
60973>>>
60973>>>    Function ComGetChildContent String lltagPath Returns String
60975>>>        Handle hDispatchDriver
60975>>>        String retVal
60975>>>        Get phDispatchDriver to hDispatchDriver
60976>>>        Send PrepareParams to hDispatchDriver 1
60977>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60978>>>        Get InvokeComMethod of hDispatchDriver 151 OLE_VT_BSTR to retVal
60979>>>        Function_Return retVal
60980>>>    End_Function
60981>>>
60981>>>    Function ComGetChildContentByIndex Integer llindex Returns String
60983>>>        Handle hDispatchDriver
60983>>>        String retVal
60983>>>        Get phDispatchDriver to hDispatchDriver
60984>>>        Send PrepareParams to hDispatchDriver 1
60985>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60986>>>        Get InvokeComMethod of hDispatchDriver 152 OLE_VT_BSTR to retVal
60987>>>        Function_Return retVal
60988>>>    End_Function
60989>>>
60989>>>    Function ComGetChildExact String llTag String llContent Returns Variant
60991>>>        Handle hDispatchDriver
60991>>>        Variant retVal
60991>>>        Get phDispatchDriver to hDispatchDriver
60992>>>        Send PrepareParams to hDispatchDriver 2
60993>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60994>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
60995>>>        Get InvokeComMethod of hDispatchDriver 153 OLE_VT_DISPATCH to retVal
60996>>>        Function_Return retVal
60997>>>    End_Function
60998>>>
60998>>>    Function ComGetChildIntValue String lltagPath Returns Integer
61000>>>        Handle hDispatchDriver
61000>>>        Integer retVal
61000>>>        Get phDispatchDriver to hDispatchDriver
61001>>>        Send PrepareParams to hDispatchDriver 1
61002>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61003>>>        Get InvokeComMethod of hDispatchDriver 154 OLE_VT_I4 to retVal
61004>>>        Function_Return retVal
61005>>>    End_Function
61006>>>
61006>>>    Function ComGetChildTag Integer llindex Returns String
61008>>>        Handle hDispatchDriver
61008>>>        String retVal
61008>>>        Get phDispatchDriver to hDispatchDriver
61009>>>        Send PrepareParams to hDispatchDriver 1
61010>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
61011>>>        Get InvokeComMethod of hDispatchDriver 155 OLE_VT_BSTR to retVal
61012>>>        Function_Return retVal
61013>>>    End_Function
61014>>>
61014>>>    Function ComGetChildTagByIndex Integer llindex Returns String
61016>>>        Handle hDispatchDriver
61016>>>        String retVal
61016>>>        Get phDispatchDriver to hDispatchDriver
61017>>>        Send PrepareParams to hDispatchDriver 1
61018>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
61019>>>        Get InvokeComMethod of hDispatchDriver 156 OLE_VT_BSTR to retVal
61020>>>        Function_Return retVal
61021>>>    End_Function
61022>>>
61022>>>    Function ComGetChildWithAttr String lltagPath String llattrName String llattrValue Returns Variant
61024>>>        Handle hDispatchDriver
61024>>>        Variant retVal
61024>>>        Get phDispatchDriver to hDispatchDriver
61025>>>        Send PrepareParams to hDispatchDriver 3
61026>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61027>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
61028>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrValue
61029>>>        Get InvokeComMethod of hDispatchDriver 157 OLE_VT_DISPATCH to retVal
61030>>>        Function_Return retVal
61031>>>    End_Function
61032>>>
61032>>>    Function ComGetChildWithContent String llContent Returns Variant
61034>>>        Handle hDispatchDriver
61034>>>        Variant retVal
61034>>>        Get phDispatchDriver to hDispatchDriver
61035>>>        Send PrepareParams to hDispatchDriver 1
61036>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
61037>>>        Get InvokeComMethod of hDispatchDriver 158 OLE_VT_DISPATCH to retVal
61038>>>        Function_Return retVal
61039>>>    End_Function
61040>>>
61040>>>    Function ComGetChildWithTag String lltagPath Returns Variant
61042>>>        Handle hDispatchDriver
61042>>>        Variant retVal
61042>>>        Get phDispatchDriver to hDispatchDriver
61043>>>        Send PrepareParams to hDispatchDriver 1
61044>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61045>>>        Get InvokeComMethod of hDispatchDriver 159 OLE_VT_DISPATCH to retVal
61046>>>        Function_Return retVal
61047>>>    End_Function
61048>>>
61048>>>    Function ComGetNthChildWithTag String llTag Integer lln Returns Variant
61050>>>        Handle hDispatchDriver
61050>>>        Variant retVal
61050>>>        Get phDispatchDriver to hDispatchDriver
61051>>>        Send PrepareParams to hDispatchDriver 2
61052>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61053>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lln
61054>>>        Get InvokeComMethod of hDispatchDriver 160 OLE_VT_DISPATCH to retVal
61055>>>        Function_Return retVal
61056>>>    End_Function
61057>>>
61057>>>    Function ComGetNthChildWithTag2 String llTag Integer lln Returns Integer
61059>>>        Handle hDispatchDriver
61059>>>        Integer retVal
61059>>>        Get phDispatchDriver to hDispatchDriver
61060>>>        Send PrepareParams to hDispatchDriver 2
61061>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61062>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lln
61063>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
61064>>>        Function_Return retVal
61065>>>    End_Function
61066>>>
61066>>>    Function ComGetParent Returns Variant
61068>>>        Handle hDispatchDriver
61068>>>        Variant retVal
61068>>>        Get phDispatchDriver to hDispatchDriver
61069>>>        Get InvokeComMethod of hDispatchDriver 162 OLE_VT_DISPATCH to retVal
61070>>>        Function_Return retVal
61071>>>    End_Function
61072>>>
61072>>>    Function ComGetParent2 Returns Integer
61074>>>        Handle hDispatchDriver
61074>>>        Integer retVal
61074>>>        Get phDispatchDriver to hDispatchDriver
61075>>>        Get InvokeComMethod of hDispatchDriver 163 OLE_VT_I4 to retVal
61076>>>        Function_Return retVal
61077>>>    End_Function
61078>>>
61078>>>    Function ComGetRoot Returns Variant
61080>>>        Handle hDispatchDriver
61080>>>        Variant retVal
61080>>>        Get phDispatchDriver to hDispatchDriver
61081>>>        Get InvokeComMethod of hDispatchDriver 164 OLE_VT_DISPATCH to retVal
61082>>>        Function_Return retVal
61083>>>    End_Function
61084>>>
61084>>>    Procedure ComGetRoot2
61086>>>        Handle hDispatchDriver
61086>>>        Get phDispatchDriver to hDispatchDriver
61087>>>        Send InvokeComMethod to hDispatchDriver 165 OLE_VT_VOID
61088>>>    End_Procedure
61089>>>
61089>>>    Function ComGetSelf Returns Variant
61091>>>        Handle hDispatchDriver
61091>>>        Variant retVal
61091>>>        Get phDispatchDriver to hDispatchDriver
61092>>>        Get InvokeComMethod of hDispatchDriver 166 OLE_VT_DISPATCH to retVal
61093>>>        Function_Return retVal
61094>>>    End_Function
61095>>>
61095>>>    Function ComGetXml Returns String
61097>>>        Handle hDispatchDriver
61097>>>        String retVal
61097>>>        Get phDispatchDriver to hDispatchDriver
61098>>>        Get InvokeComMethod of hDispatchDriver 167 OLE_VT_BSTR to retVal
61099>>>        Function_Return retVal
61100>>>    End_Function
61101>>>
61101>>>    Function ComHasAttrWithValue String llname String llvalue Returns Integer
61103>>>        Handle hDispatchDriver
61103>>>        Integer retVal
61103>>>        Get phDispatchDriver to hDispatchDriver
61104>>>        Send PrepareParams to hDispatchDriver 2
61105>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
61106>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
61107>>>        Get InvokeComMethod of hDispatchDriver 168 OLE_VT_I4 to retVal
61108>>>        Function_Return retVal
61109>>>    End_Function
61110>>>
61110>>>    Function ComHasAttribute String llname Returns Integer
61112>>>        Handle hDispatchDriver
61112>>>        Integer retVal
61112>>>        Get phDispatchDriver to hDispatchDriver
61113>>>        Send PrepareParams to hDispatchDriver 1
61114>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
61115>>>        Get InvokeComMethod of hDispatchDriver 169 OLE_VT_I4 to retVal
61116>>>        Function_Return retVal
61117>>>    End_Function
61118>>>
61118>>>    Function ComHasChildWithContent String llContent Returns Integer
61120>>>        Handle hDispatchDriver
61120>>>        Integer retVal
61120>>>        Get phDispatchDriver to hDispatchDriver
61121>>>        Send PrepareParams to hDispatchDriver 1
61122>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
61123>>>        Get InvokeComMethod of hDispatchDriver 170 OLE_VT_I4 to retVal
61124>>>        Function_Return retVal
61125>>>    End_Function
61126>>>
61126>>>    Function ComHasChildWithTag String lltagPath Returns Integer
61128>>>        Handle hDispatchDriver
61128>>>        Integer retVal
61128>>>        Get phDispatchDriver to hDispatchDriver
61129>>>        Send PrepareParams to hDispatchDriver 1
61130>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61131>>>        Get InvokeComMethod of hDispatchDriver 171 OLE_VT_I4 to retVal
61132>>>        Function_Return retVal
61133>>>    End_Function
61134>>>
61134>>>    Function ComHasChildWithTagAndContent String lltagPath String llContent Returns Integer
61136>>>        Handle hDispatchDriver
61136>>>        Integer retVal
61136>>>        Get phDispatchDriver to hDispatchDriver
61137>>>        Send PrepareParams to hDispatchDriver 2
61138>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61139>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
61140>>>        Get InvokeComMethod of hDispatchDriver 172 OLE_VT_I4 to retVal
61141>>>        Function_Return retVal
61142>>>    End_Function
61143>>>
61143>>>    Procedure ComInsertChildTreeAfter Integer llindex Variant lltree
61145>>>        Handle hDispatchDriver
61145>>>        Get phDispatchDriver to hDispatchDriver
61146>>>        Send PrepareParams to hDispatchDriver 2
61147>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
61148>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH lltree
61149>>>        Send InvokeComMethod to hDispatchDriver 173 OLE_VT_VOID
61150>>>    End_Procedure
61151>>>
61151>>>    Procedure ComInsertChildTreeBefore Integer llindex Variant lltree
61153>>>        Handle hDispatchDriver
61153>>>        Get phDispatchDriver to hDispatchDriver
61154>>>        Send PrepareParams to hDispatchDriver 2
61155>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
61156>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH lltree
61157>>>        Send InvokeComMethod to hDispatchDriver 174 OLE_VT_VOID
61158>>>    End_Procedure
61159>>>
61159>>>    Function ComLastChild Returns Variant
61161>>>        Handle hDispatchDriver
61161>>>        Variant retVal
61161>>>        Get phDispatchDriver to hDispatchDriver
61162>>>        Get InvokeComMethod of hDispatchDriver 175 OLE_VT_DISPATCH to retVal
61163>>>        Function_Return retVal
61164>>>    End_Function
61165>>>
61165>>>    Function ComLastChild2 Returns Integer
61167>>>        Handle hDispatchDriver
61167>>>        Integer retVal
61167>>>        Get phDispatchDriver to hDispatchDriver
61168>>>        Get InvokeComMethod of hDispatchDriver 176 OLE_VT_I4 to retVal
61169>>>        Function_Return retVal
61170>>>    End_Function
61171>>>
61171>>>    Function ComLoadXml String llxmlData Returns Integer
61173>>>        Handle hDispatchDriver
61173>>>        Integer retVal
61173>>>        Get phDispatchDriver to hDispatchDriver
61174>>>        Send PrepareParams to hDispatchDriver 1
61175>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llxmlData
61176>>>        Get InvokeComMethod of hDispatchDriver 177 OLE_VT_I4 to retVal
61177>>>        Function_Return retVal
61178>>>    End_Function
61179>>>
61179>>>    Function ComLoadXml2 String llxmlData Integer llautoTrim Returns Integer
61181>>>        Handle hDispatchDriver
61181>>>        Integer retVal
61181>>>        Get phDispatchDriver to hDispatchDriver
61182>>>        Send PrepareParams to hDispatchDriver 2
61183>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llxmlData
61184>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoTrim
61185>>>        Get InvokeComMethod of hDispatchDriver 178 OLE_VT_I4 to retVal
61186>>>        Function_Return retVal
61187>>>    End_Function
61188>>>
61188>>>    Function ComLoadXmlFile String llfilename Returns Integer
61190>>>        Handle hDispatchDriver
61190>>>        Integer retVal
61190>>>        Get phDispatchDriver to hDispatchDriver
61191>>>        Send PrepareParams to hDispatchDriver 1
61192>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
61193>>>        Get InvokeComMethod of hDispatchDriver 179 OLE_VT_I4 to retVal
61194>>>        Function_Return retVal
61195>>>    End_Function
61196>>>
61196>>>    Function ComLoadXmlFile2 String llfilename Integer llautoTrim Returns Integer
61198>>>        Handle hDispatchDriver
61198>>>        Integer retVal
61198>>>        Get phDispatchDriver to hDispatchDriver
61199>>>        Send PrepareParams to hDispatchDriver 2
61200>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
61201>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoTrim
61202>>>        Get InvokeComMethod of hDispatchDriver 180 OLE_VT_I4 to retVal
61203>>>        Function_Return retVal
61204>>>    End_Function
61205>>>
61205>>>    Function ComNewChild String lltagPath String llContent Returns Variant
61207>>>        Handle hDispatchDriver
61207>>>        Variant retVal
61207>>>        Get phDispatchDriver to hDispatchDriver
61208>>>        Send PrepareParams to hDispatchDriver 2
61209>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61210>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
61211>>>        Get InvokeComMethod of hDispatchDriver 181 OLE_VT_DISPATCH to retVal
61212>>>        Function_Return retVal
61213>>>    End_Function
61214>>>
61214>>>    Procedure ComNewChild2 String lltagPath String llContent
61216>>>        Handle hDispatchDriver
61216>>>        Get phDispatchDriver to hDispatchDriver
61217>>>        Send PrepareParams to hDispatchDriver 2
61218>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61219>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
61220>>>        Send InvokeComMethod to hDispatchDriver 182 OLE_VT_VOID
61221>>>    End_Procedure
61222>>>
61222>>>    Function ComNewChildAfter Integer llindex String llTag String llContent Returns Variant
61224>>>        Handle hDispatchDriver
61224>>>        Variant retVal
61224>>>        Get phDispatchDriver to hDispatchDriver
61225>>>        Send PrepareParams to hDispatchDriver 3
61226>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
61227>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61228>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
61229>>>        Get InvokeComMethod of hDispatchDriver 183 OLE_VT_DISPATCH to retVal
61230>>>        Function_Return retVal
61231>>>    End_Function
61232>>>
61232>>>    Function ComNewChildBefore Integer llindex String llTag String llContent Returns Variant
61234>>>        Handle hDispatchDriver
61234>>>        Variant retVal
61234>>>        Get phDispatchDriver to hDispatchDriver
61235>>>        Send PrepareParams to hDispatchDriver 3
61236>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
61237>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61238>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
61239>>>        Get InvokeComMethod of hDispatchDriver 184 OLE_VT_DISPATCH to retVal
61240>>>        Function_Return retVal
61241>>>    End_Function
61242>>>
61242>>>    Procedure ComNewChildInt2 String lltagPath Integer llvalue
61244>>>        Handle hDispatchDriver
61244>>>        Get phDispatchDriver to hDispatchDriver
61245>>>        Send PrepareParams to hDispatchDriver 2
61246>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61247>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
61248>>>        Send InvokeComMethod to hDispatchDriver 185 OLE_VT_VOID
61249>>>    End_Procedure
61250>>>
61250>>>    Function ComNextSibling Returns Variant
61252>>>        Handle hDispatchDriver
61252>>>        Variant retVal
61252>>>        Get phDispatchDriver to hDispatchDriver
61253>>>        Get InvokeComMethod of hDispatchDriver 186 OLE_VT_DISPATCH to retVal
61254>>>        Function_Return retVal
61255>>>    End_Function
61256>>>
61256>>>    Function ComNextSibling2 Returns Integer
61258>>>        Handle hDispatchDriver
61258>>>        Integer retVal
61258>>>        Get phDispatchDriver to hDispatchDriver
61259>>>        Get InvokeComMethod of hDispatchDriver 187 OLE_VT_I4 to retVal
61260>>>        Function_Return retVal
61261>>>    End_Function
61262>>>
61262>>>    Function ComNumChildrenHavingTag String llTag Returns Integer
61264>>>        Handle hDispatchDriver
61264>>>        Integer retVal
61264>>>        Get phDispatchDriver to hDispatchDriver
61265>>>        Send PrepareParams to hDispatchDriver 1
61266>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61267>>>        Get InvokeComMethod of hDispatchDriver 188 OLE_VT_I4 to retVal
61268>>>        Function_Return retVal
61269>>>    End_Function
61270>>>
61270>>>    Function ComPreviousSibling Returns Variant
61272>>>        Handle hDispatchDriver
61272>>>        Variant retVal
61272>>>        Get phDispatchDriver to hDispatchDriver
61273>>>        Get InvokeComMethod of hDispatchDriver 189 OLE_VT_DISPATCH to retVal
61274>>>        Function_Return retVal
61275>>>    End_Function
61276>>>
61276>>>    Function ComPreviousSibling2 Returns Integer
61278>>>        Handle hDispatchDriver
61278>>>        Integer retVal
61278>>>        Get phDispatchDriver to hDispatchDriver
61279>>>        Get InvokeComMethod of hDispatchDriver 190 OLE_VT_I4 to retVal
61280>>>        Function_Return retVal
61281>>>    End_Function
61282>>>
61282>>>    Function ComQEncodeContent String llcharset Variant llinData Returns Integer
61284>>>        Handle hDispatchDriver
61284>>>        Integer retVal
61284>>>        Get phDispatchDriver to hDispatchDriver
61285>>>        Send PrepareParams to hDispatchDriver 2
61286>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcharset
61287>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llinData
61288>>>        Get InvokeComMethod of hDispatchDriver 191 OLE_VT_I4 to retVal
61289>>>        Function_Return retVal
61290>>>    End_Function
61291>>>
61291>>>    Function ComRemoveAllAttributes Returns Integer
61293>>>        Handle hDispatchDriver
61293>>>        Integer retVal
61293>>>        Get phDispatchDriver to hDispatchDriver
61294>>>        Get InvokeComMethod of hDispatchDriver 192 OLE_VT_I4 to retVal
61295>>>        Function_Return retVal
61296>>>    End_Function
61297>>>
61297>>>    Procedure ComRemoveAllChildren
61299>>>        Handle hDispatchDriver
61299>>>        Get phDispatchDriver to hDispatchDriver
61300>>>        Send InvokeComMethod to hDispatchDriver 193 OLE_VT_VOID
61301>>>    End_Procedure
61302>>>
61302>>>    Function ComRemoveAttribute String llname Returns Integer
61304>>>        Handle hDispatchDriver
61304>>>        Integer retVal
61304>>>        Get phDispatchDriver to hDispatchDriver
61305>>>        Send PrepareParams to hDispatchDriver 1
61306>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
61307>>>        Get InvokeComMethod of hDispatchDriver 194 OLE_VT_I4 to retVal
61308>>>        Function_Return retVal
61309>>>    End_Function
61310>>>
61310>>>    Procedure ComRemoveChild String lltagPath
61312>>>        Handle hDispatchDriver
61312>>>        Get phDispatchDriver to hDispatchDriver
61313>>>        Send PrepareParams to hDispatchDriver 1
61314>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61315>>>        Send InvokeComMethod to hDispatchDriver 195 OLE_VT_VOID
61316>>>    End_Procedure
61317>>>
61317>>>    Procedure ComRemoveChildByIndex Integer llindex
61319>>>        Handle hDispatchDriver
61319>>>        Get phDispatchDriver to hDispatchDriver
61320>>>        Send PrepareParams to hDispatchDriver 1
61321>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
61322>>>        Send InvokeComMethod to hDispatchDriver 196 OLE_VT_VOID
61323>>>    End_Procedure
61324>>>
61324>>>    Procedure ComRemoveChildWithContent String llContent
61326>>>        Handle hDispatchDriver
61326>>>        Get phDispatchDriver to hDispatchDriver
61327>>>        Send PrepareParams to hDispatchDriver 1
61328>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
61329>>>        Send InvokeComMethod to hDispatchDriver 197 OLE_VT_VOID
61330>>>    End_Procedure
61331>>>
61331>>>    Procedure ComRemoveFromTree
61333>>>        Handle hDispatchDriver
61333>>>        Get phDispatchDriver to hDispatchDriver
61334>>>        Send InvokeComMethod to hDispatchDriver 198 OLE_VT_VOID
61335>>>    End_Procedure
61336>>>
61336>>>    Function ComSaveBinaryContent String llfilename Integer llunzipFlag Integer lldecryptFlag String llpassword Returns Integer
61338>>>        Handle hDispatchDriver
61338>>>        Integer retVal
61338>>>        Get phDispatchDriver to hDispatchDriver
61339>>>        Send PrepareParams to hDispatchDriver 4
61340>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
61341>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llunzipFlag
61342>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldecryptFlag
61343>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
61344>>>        Get InvokeComMethod of hDispatchDriver 199 OLE_VT_I4 to retVal
61345>>>        Function_Return retVal
61346>>>    End_Function
61347>>>
61347>>>    Function ComSaveXml String llfilename Returns Integer
61349>>>        Handle hDispatchDriver
61349>>>        Integer retVal
61349>>>        Get phDispatchDriver to hDispatchDriver
61350>>>        Send PrepareParams to hDispatchDriver 1
61351>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
61352>>>        Get InvokeComMethod of hDispatchDriver 200 OLE_VT_I4 to retVal
61353>>>        Function_Return retVal
61354>>>    End_Function
61355>>>
61355>>>    Function ComSearchAllForContent Variant llafterPtr String llcontentPattern Returns Variant
61357>>>        Handle hDispatchDriver
61357>>>        Variant retVal
61357>>>        Get phDispatchDriver to hDispatchDriver
61358>>>        Send PrepareParams to hDispatchDriver 2
61359>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61360>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
61361>>>        Get InvokeComMethod of hDispatchDriver 201 OLE_VT_DISPATCH to retVal
61362>>>        Function_Return retVal
61363>>>    End_Function
61364>>>
61364>>>    Function ComSearchAllForContent2 Variant llafterPtr String llcontentPattern Returns Integer
61366>>>        Handle hDispatchDriver
61366>>>        Integer retVal
61366>>>        Get phDispatchDriver to hDispatchDriver
61367>>>        Send PrepareParams to hDispatchDriver 2
61368>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61369>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
61370>>>        Get InvokeComMethod of hDispatchDriver 202 OLE_VT_I4 to retVal
61371>>>        Function_Return retVal
61372>>>    End_Function
61373>>>
61373>>>    Function ComSearchForAttribute Variant llafterPtr String llTag String llattr String llvaluePattern Returns Variant
61375>>>        Handle hDispatchDriver
61375>>>        Variant retVal
61375>>>        Get phDispatchDriver to hDispatchDriver
61376>>>        Send PrepareParams to hDispatchDriver 4
61377>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61378>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61379>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattr
61380>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvaluePattern
61381>>>        Get InvokeComMethod of hDispatchDriver 203 OLE_VT_DISPATCH to retVal
61382>>>        Function_Return retVal
61383>>>    End_Function
61384>>>
61384>>>    Function ComSearchForAttribute2 Variant llafterPtr String llTag String llattr String llvaluePattern Returns Integer
61386>>>        Handle hDispatchDriver
61386>>>        Integer retVal
61386>>>        Get phDispatchDriver to hDispatchDriver
61387>>>        Send PrepareParams to hDispatchDriver 4
61388>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61389>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61390>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattr
61391>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvaluePattern
61392>>>        Get InvokeComMethod of hDispatchDriver 204 OLE_VT_I4 to retVal
61393>>>        Function_Return retVal
61394>>>    End_Function
61395>>>
61395>>>    Function ComSearchForContent Variant llafterPtr String llTag String llcontentPattern Returns Variant
61397>>>        Handle hDispatchDriver
61397>>>        Variant retVal
61397>>>        Get phDispatchDriver to hDispatchDriver
61398>>>        Send PrepareParams to hDispatchDriver 3
61399>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61400>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61401>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
61402>>>        Get InvokeComMethod of hDispatchDriver 205 OLE_VT_DISPATCH to retVal
61403>>>        Function_Return retVal
61404>>>    End_Function
61405>>>
61405>>>    Function ComSearchForContent2 Variant llafterPtr String llTag String llcontentPattern Returns Integer
61407>>>        Handle hDispatchDriver
61407>>>        Integer retVal
61407>>>        Get phDispatchDriver to hDispatchDriver
61408>>>        Send PrepareParams to hDispatchDriver 3
61409>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61410>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61411>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
61412>>>        Get InvokeComMethod of hDispatchDriver 206 OLE_VT_I4 to retVal
61413>>>        Function_Return retVal
61414>>>    End_Function
61415>>>
61415>>>    Function ComSearchForTag Variant llafterPtr String llTag Returns Variant
61417>>>        Handle hDispatchDriver
61417>>>        Variant retVal
61417>>>        Get phDispatchDriver to hDispatchDriver
61418>>>        Send PrepareParams to hDispatchDriver 2
61419>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61420>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61421>>>        Get InvokeComMethod of hDispatchDriver 207 OLE_VT_DISPATCH to retVal
61422>>>        Function_Return retVal
61423>>>    End_Function
61424>>>
61424>>>    Function ComSearchForTag2 Variant llafterPtr String llTag Returns Integer
61426>>>        Handle hDispatchDriver
61426>>>        Integer retVal
61426>>>        Get phDispatchDriver to hDispatchDriver
61427>>>        Send PrepareParams to hDispatchDriver 2
61428>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
61429>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61430>>>        Get InvokeComMethod of hDispatchDriver 208 OLE_VT_I4 to retVal
61431>>>        Function_Return retVal
61432>>>    End_Function
61433>>>
61433>>>    Function ComSetBinaryContent Variant llinData Integer llzipFlag Integer llencryptFlag String llpassword Returns Integer
61435>>>        Handle hDispatchDriver
61435>>>        Integer retVal
61435>>>        Get phDispatchDriver to hDispatchDriver
61436>>>        Send PrepareParams to hDispatchDriver 4
61437>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llinData
61438>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llzipFlag
61439>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llencryptFlag
61440>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
61441>>>        Get InvokeComMethod of hDispatchDriver 209 OLE_VT_I4 to retVal
61442>>>        Function_Return retVal
61443>>>    End_Function
61444>>>
61444>>>    Function ComSetBinaryContentFromFile String llfilename Integer llzipFlag Integer llencryptFlag String llpassword Returns Integer
61446>>>        Handle hDispatchDriver
61446>>>        Integer retVal
61446>>>        Get phDispatchDriver to hDispatchDriver
61447>>>        Send PrepareParams to hDispatchDriver 4
61448>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
61449>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llzipFlag
61450>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llencryptFlag
61451>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
61452>>>        Get InvokeComMethod of hDispatchDriver 210 OLE_VT_I4 to retVal
61453>>>        Function_Return retVal
61454>>>    End_Function
61455>>>
61455>>>    Procedure ComSortByAttribute String llattrName Integer llascending
61457>>>        Handle hDispatchDriver
61457>>>        Get phDispatchDriver to hDispatchDriver
61458>>>        Send PrepareParams to hDispatchDriver 2
61459>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
61460>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61461>>>        Send InvokeComMethod to hDispatchDriver 211 OLE_VT_VOID
61462>>>    End_Procedure
61463>>>
61463>>>    Procedure ComSortByAttributeInt String llattrName Integer llascending
61465>>>        Handle hDispatchDriver
61465>>>        Get phDispatchDriver to hDispatchDriver
61466>>>        Send PrepareParams to hDispatchDriver 2
61467>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
61468>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61469>>>        Send InvokeComMethod to hDispatchDriver 212 OLE_VT_VOID
61470>>>    End_Procedure
61471>>>
61471>>>    Procedure ComSortByContent Integer llascending
61473>>>        Handle hDispatchDriver
61473>>>        Get phDispatchDriver to hDispatchDriver
61474>>>        Send PrepareParams to hDispatchDriver 1
61475>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61476>>>        Send InvokeComMethod to hDispatchDriver 213 OLE_VT_VOID
61477>>>    End_Procedure
61478>>>
61478>>>    Procedure ComSortByTag Integer llascending
61480>>>        Handle hDispatchDriver
61480>>>        Get phDispatchDriver to hDispatchDriver
61481>>>        Send PrepareParams to hDispatchDriver 1
61482>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61483>>>        Send InvokeComMethod to hDispatchDriver 214 OLE_VT_VOID
61484>>>    End_Procedure
61485>>>
61485>>>    Procedure ComSortRecordsByAttribute String llsortTag String llattrName Integer llascending
61487>>>        Handle hDispatchDriver
61487>>>        Get phDispatchDriver to hDispatchDriver
61488>>>        Send PrepareParams to hDispatchDriver 3
61489>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsortTag
61490>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
61491>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61492>>>        Send InvokeComMethod to hDispatchDriver 215 OLE_VT_VOID
61493>>>    End_Procedure
61494>>>
61494>>>    Procedure ComSortRecordsByContent String llsortTag Integer llascending
61496>>>        Handle hDispatchDriver
61496>>>        Get phDispatchDriver to hDispatchDriver
61497>>>        Send PrepareParams to hDispatchDriver 2
61498>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsortTag
61499>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61500>>>        Send InvokeComMethod to hDispatchDriver 216 OLE_VT_VOID
61501>>>    End_Procedure
61502>>>
61502>>>    Procedure ComSortRecordsByContentInt String llsortTag Integer llascending
61504>>>        Handle hDispatchDriver
61504>>>        Get phDispatchDriver to hDispatchDriver
61505>>>        Send PrepareParams to hDispatchDriver 2
61506>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsortTag
61507>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
61508>>>        Send InvokeComMethod to hDispatchDriver 217 OLE_VT_VOID
61509>>>    End_Procedure
61510>>>
61510>>>    Function ComSwapNode Variant llnode Returns Integer
61512>>>        Handle hDispatchDriver
61512>>>        Integer retVal
61512>>>        Get phDispatchDriver to hDispatchDriver
61513>>>        Send PrepareParams to hDispatchDriver 1
61514>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llnode
61515>>>        Get InvokeComMethod of hDispatchDriver 218 OLE_VT_I4 to retVal
61516>>>        Function_Return retVal
61517>>>    End_Function
61518>>>
61518>>>    Function ComSwapTree Variant lltree Returns Integer
61520>>>        Handle hDispatchDriver
61520>>>        Integer retVal
61520>>>        Get phDispatchDriver to hDispatchDriver
61521>>>        Send PrepareParams to hDispatchDriver 1
61522>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH lltree
61523>>>        Get InvokeComMethod of hDispatchDriver 219 OLE_VT_I4 to retVal
61524>>>        Function_Return retVal
61525>>>    End_Function
61526>>>
61526>>>    Function ComTagContent String lltagName Returns String
61528>>>        Handle hDispatchDriver
61528>>>        String retVal
61528>>>        Get phDispatchDriver to hDispatchDriver
61529>>>        Send PrepareParams to hDispatchDriver 1
61530>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagName
61531>>>        Get InvokeComMethod of hDispatchDriver 220 OLE_VT_BSTR to retVal
61532>>>        Function_Return retVal
61533>>>    End_Function
61534>>>
61534>>>    Function ComTagEquals String llTag Returns Integer
61536>>>        Handle hDispatchDriver
61536>>>        Integer retVal
61536>>>        Get phDispatchDriver to hDispatchDriver
61537>>>        Send PrepareParams to hDispatchDriver 1
61538>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
61539>>>        Get InvokeComMethod of hDispatchDriver 221 OLE_VT_I4 to retVal
61540>>>        Function_Return retVal
61541>>>    End_Function
61542>>>
61542>>>    Function ComUnzipContent Returns Integer
61544>>>        Handle hDispatchDriver
61544>>>        Integer retVal
61544>>>        Get phDispatchDriver to hDispatchDriver
61545>>>        Get InvokeComMethod of hDispatchDriver 222 OLE_VT_I4 to retVal
61546>>>        Function_Return retVal
61547>>>    End_Function
61548>>>
61548>>>    Function ComUnzipTree Returns Integer
61550>>>        Handle hDispatchDriver
61550>>>        Integer retVal
61550>>>        Get phDispatchDriver to hDispatchDriver
61551>>>        Get InvokeComMethod of hDispatchDriver 223 OLE_VT_I4 to retVal
61552>>>        Function_Return retVal
61553>>>    End_Function
61554>>>
61554>>>    Function ComUpdateAttribute String llattrName String llattrValue Returns Integer
61556>>>        Handle hDispatchDriver
61556>>>        Integer retVal
61556>>>        Get phDispatchDriver to hDispatchDriver
61557>>>        Send PrepareParams to hDispatchDriver 2
61558>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
61559>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrValue
61560>>>        Get InvokeComMethod of hDispatchDriver 224 OLE_VT_I4 to retVal
61561>>>        Function_Return retVal
61562>>>    End_Function
61563>>>
61563>>>    Function ComUpdateAttributeInt String llattrName Integer llvalue Returns Integer
61565>>>        Handle hDispatchDriver
61565>>>        Integer retVal
61565>>>        Get phDispatchDriver to hDispatchDriver
61566>>>        Send PrepareParams to hDispatchDriver 2
61567>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
61568>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
61569>>>        Get InvokeComMethod of hDispatchDriver 225 OLE_VT_I4 to retVal
61570>>>        Function_Return retVal
61571>>>    End_Function
61572>>>
61572>>>    Procedure ComUpdateChildContent String lltagPath String llvalue
61574>>>        Handle hDispatchDriver
61574>>>        Get phDispatchDriver to hDispatchDriver
61575>>>        Send PrepareParams to hDispatchDriver 2
61576>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61577>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
61578>>>        Send InvokeComMethod to hDispatchDriver 226 OLE_VT_VOID
61579>>>    End_Procedure
61580>>>
61580>>>    Procedure ComUpdateChildContentInt String lltagPath Integer llvalue
61582>>>        Handle hDispatchDriver
61582>>>        Get phDispatchDriver to hDispatchDriver
61583>>>        Send PrepareParams to hDispatchDriver 2
61584>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61585>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
61586>>>        Send InvokeComMethod to hDispatchDriver 227 OLE_VT_VOID
61587>>>    End_Procedure
61588>>>
61588>>>    Function ComZipContent Returns Integer
61590>>>        Handle hDispatchDriver
61590>>>        Integer retVal
61590>>>        Get phDispatchDriver to hDispatchDriver
61591>>>        Get InvokeComMethod of hDispatchDriver 228 OLE_VT_I4 to retVal
61592>>>        Function_Return retVal
61593>>>    End_Function
61594>>>
61594>>>    Function ComZipTree Returns Integer
61596>>>        Handle hDispatchDriver
61596>>>        Integer retVal
61596>>>        Get phDispatchDriver to hDispatchDriver
61597>>>        Get InvokeComMethod of hDispatchDriver 229 OLE_VT_I4 to retVal
61598>>>        Function_Return retVal
61599>>>    End_Function
61600>>>
61600>>>    Function ComEmitBom Returns Integer
61602>>>        Handle hDispatchDriver
61602>>>        Integer retVal
61602>>>        Get phDispatchDriver to hDispatchDriver
61603>>>        Get InvokeComMethod of hDispatchDriver 237 OLE_VT_I4 to retVal
61604>>>        Function_Return retVal
61605>>>    End_Function
61606>>>
61606>>>    Procedure Set ComEmitBom Integer value
61608>>>        Handle hDispatchDriver
61608>>>        Get phDispatchDriver to hDispatchDriver
61609>>>        Send PrepareParams to hDispatchDriver 1
61610>>>        Set ComProperty of hDispatchDriver 237 OLE_VT_I4 to value
61611>>>    End_Procedure
61612>>>
61612>>>    Function ComLoadSb Variant llsb Integer llautoTrim Returns Integer
61614>>>        Handle hDispatchDriver
61614>>>        Integer retVal
61614>>>        Get phDispatchDriver to hDispatchDriver
61615>>>        Send PrepareParams to hDispatchDriver 2
61616>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llsb
61617>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoTrim
61618>>>        Get InvokeComMethod of hDispatchDriver 238 OLE_VT_I4 to retVal
61619>>>        Function_Return retVal
61620>>>    End_Function
61621>>>
61621>>>    Function ComGetXmlSb Variant llsb Returns Integer
61623>>>        Handle hDispatchDriver
61623>>>        Integer retVal
61623>>>        Get phDispatchDriver to hDispatchDriver
61624>>>        Send PrepareParams to hDispatchDriver 1
61625>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llsb
61626>>>        Get InvokeComMethod of hDispatchDriver 239 OLE_VT_I4 to retVal
61627>>>        Function_Return retVal
61628>>>    End_Function
61629>>>
61629>>>    Function ComI Returns Integer
61631>>>        Handle hDispatchDriver
61631>>>        Integer retVal
61631>>>        Get phDispatchDriver to hDispatchDriver
61632>>>        Get InvokeComMethod of hDispatchDriver 240 OLE_VT_I4 to retVal
61633>>>        Function_Return retVal
61634>>>    End_Function
61635>>>
61635>>>    Procedure Set ComI Integer value
61637>>>        Handle hDispatchDriver
61637>>>        Get phDispatchDriver to hDispatchDriver
61638>>>        Send PrepareParams to hDispatchDriver 1
61639>>>        Set ComProperty of hDispatchDriver 240 OLE_VT_I4 to value
61640>>>    End_Procedure
61641>>>
61641>>>    Function ComJ Returns Integer
61643>>>        Handle hDispatchDriver
61643>>>        Integer retVal
61643>>>        Get phDispatchDriver to hDispatchDriver
61644>>>        Get InvokeComMethod of hDispatchDriver 241 OLE_VT_I4 to retVal
61645>>>        Function_Return retVal
61646>>>    End_Function
61647>>>
61647>>>    Procedure Set ComJ Integer value
61649>>>        Handle hDispatchDriver
61649>>>        Get phDispatchDriver to hDispatchDriver
61650>>>        Send PrepareParams to hDispatchDriver 1
61651>>>        Set ComProperty of hDispatchDriver 241 OLE_VT_I4 to value
61652>>>    End_Procedure
61653>>>
61653>>>    Function ComK Returns Integer
61655>>>        Handle hDispatchDriver
61655>>>        Integer retVal
61655>>>        Get phDispatchDriver to hDispatchDriver
61656>>>        Get InvokeComMethod of hDispatchDriver 242 OLE_VT_I4 to retVal
61657>>>        Function_Return retVal
61658>>>    End_Function
61659>>>
61659>>>    Procedure Set ComK Integer value
61661>>>        Handle hDispatchDriver
61661>>>        Get phDispatchDriver to hDispatchDriver
61662>>>        Send PrepareParams to hDispatchDriver 1
61663>>>        Set ComProperty of hDispatchDriver 242 OLE_VT_I4 to value
61664>>>    End_Procedure
61665>>>
61665>>>    Function ComNumChildrenAt String lltagPath Returns Integer
61667>>>        Handle hDispatchDriver
61667>>>        Integer retVal
61667>>>        Get phDispatchDriver to hDispatchDriver
61668>>>        Send PrepareParams to hDispatchDriver 1
61669>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61670>>>        Get InvokeComMethod of hDispatchDriver 243 OLE_VT_I4 to retVal
61671>>>        Function_Return retVal
61672>>>    End_Function
61673>>>
61673>>>    Function ComUpdateAt String lltagPath Integer llautoCreate String llvalue Returns Integer
61675>>>        Handle hDispatchDriver
61675>>>        Integer retVal
61675>>>        Get phDispatchDriver to hDispatchDriver
61676>>>        Send PrepareParams to hDispatchDriver 3
61677>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61678>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoCreate
61679>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
61680>>>        Get InvokeComMethod of hDispatchDriver 244 OLE_VT_I4 to retVal
61681>>>        Function_Return retVal
61682>>>    End_Function
61683>>>
61683>>>    Function ComUpdateAttrAt String lltagPath Integer llautoCreate String llattrName String llattrValue Returns Integer
61685>>>        Handle hDispatchDriver
61685>>>        Integer retVal
61685>>>        Get phDispatchDriver to hDispatchDriver
61686>>>        Send PrepareParams to hDispatchDriver 4
61687>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
61688>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoCreate
61689>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
61690>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrValue
61691>>>        Get InvokeComMethod of hDispatchDriver 245 OLE_VT_I4 to retVal
61692>>>        Function_Return retVal
61693>>>    End_Function
61694>>>
61694>>>    Function ComEmitCompact Returns Integer
61696>>>        Handle hDispatchDriver
61696>>>        Integer retVal
61696>>>        Get phDispatchDriver to hDispatchDriver
61697>>>        Get InvokeComMethod of hDispatchDriver 246 OLE_VT_I4 to retVal
61698>>>        Function_Return retVal
61699>>>    End_Function
61700>>>
61700>>>    Procedure Set ComEmitCompact Integer value
61702>>>        Handle hDispatchDriver
61702>>>        Get phDispatchDriver to hDispatchDriver
61703>>>        Send PrepareParams to hDispatchDriver 1
61704>>>        Set ComProperty of hDispatchDriver 246 OLE_VT_I4 to value
61705>>>    End_Procedure
61706>>>End_Class
61707>>>
61707>>>// CoClass
61707>>>// ProgID: Chilkat_9_5_0.Xml.1
61707>>>// CLSID: {501B9600-382D-454D-AA0A-3BC22A87C485}
61707>>>// ChilkatXml Class 9.5.0
61707>>>Class cComChilkatXml is a cComActiveXControl
61708>>>    Import_Class_Protocol cComIChilkatXml
61709>>>
61709>>>    Procedure Construct_Object
61711>>>        Forward Send Construct_Object
61713>>>        Set psProgID to "{501B9600-382D-454D-AA0A-3BC22A87C485}"
61714>>>        Set peAutoCreate to acAutoCreate
61715>>>    End_Procedure
61716>>>End_Class
61717>
61717>Object oApplication is a cApplication
61719>    Set psCompany to "RDC Tools International"
61720>    Set psProduct to "Driver Info Import"
61721>    Set psProgram to "Read DF Driver Def XML file"
61722>    Set psVersion to "20.1"
61723>End_Object
61724>
61724>Object oMainPanel is a BasicPanel
61726>    Set Location to 59 173
61727>    Set Size to 180 394
61728>    Set piMinSize to 180 394
61729>    Set Border_Style to Border_Thick
61730>    Set Locate_Mode to Center_On_Screen
61731>    Set Label to "Read DF Driver Def XML file - Internal Usage Only!"
61732>    Set Maximize_Icon to False
61733>    Set peNeighborhood to nhPublic
61734>    
61734>    // Struct array to keep driver XML file Data Types read by the ReadXMLDriverData message.
61734>    // Then used by the WriteXMLDriverTypeData message to write them to file.
61734>    Property tColumnType[] paColumnType
61736>
61736>    Object oCommandBarSystem is a cCJCommandBarSystem
61738>        Set pbAutoResizeIcons to True
61739>        Move Self to ghoCommandBars
61740>    End_Object                  
61741>    
61741>    Object oDbUpdateFunctionLibrary is a cDbUpdateFunctionLibrary
61743>    End_Object
61744>
61744>    Object oReadXMLFile_grp is a cRDCHeaderGroup
61746>        Set Size to 67 360
61747>        Set Location to 11 17
61748>        Set peAnchors to anTopLeftRight
61749>        Set psLabel to "Read Driver Def XML file" 
61750>        Set psImage to "ActionOpen1.ico"
61751>
61751>        Object oFileNameDialog is a OpenDialog
61753>            Set Dialog_Caption to "Select a Driver XML-file"
61754>            Set Filter_String to "XML Files (.xml)|*.xml|All files (*.*)|*.*"
61755>        End_Object
61756>
61756>        Object oDriverXMLFileName_fm is a Form
61758>            Set Size to 13 298
61759>            Set Location to 20 43
61760>//            Set Label to "XML Driver Filename to Read:"
61760>            Set Label_Justification_Mode to JMode_Top
61761>            Set Label_Col_Offset to 0
61762>            Set Prompt_Button_Mode to PB_PromptOn
61763>            Set peAnchors to anTopLeftRight
61764>            Set Label_Row_Offset to 1
61765>
61765>            Procedure Prompt
61768>                Boolean bOk
61768>                String sPath sDrive sFileName
61768>
61768>                Get Value to sFileName
61769>                Move (Trim (sFileName)) to sFileName
61770>                If (sFileName <> "") Begin
61772>                    Move (Left(sFileName, 2))     to sDrive
61773>                    Get ParseFolderName sFileName to sPath
61774>//                    Get Parse_Drive sFileName to sDrive
61774>//                    Get Parse_Path  sFileName to sPath
61774>                End
61774>                If (sPath <> "") Begin
61776>                    Set Initial_Folder of oFileNameDialog to (sDrive - sPath)
61777>                End
61777>
61777>                Get Show_Dialog of oFileNameDialog to bOk
61778>                If (bOk) Begin
61780>                    Get File_Name of oFileNameDialog to sFileName
61781>                    Set Value to sFileName
61782>                End
61782>            End_Procedure 
61783>            
61783>            Procedure OnChange
61786>                String sValue
61786>                
61786>                Get Value to sValue
61787>                If (sValue <> "") Begin
61789>                    Set psOutputFileName of oOutputFilename_fm to sValue
61790>                    
61790>                End
61790>            End_Procedure
61791>
61791>            Procedure OnStartUp
61794>                String sBinPath sXMLFileName
61794>
61794>                Get DFBinPath of ghoApplication to sBinPath
61795>                Move "\MSSQLDRV_DriverDef.xml" to sXMLFileName
61796>                Set Value to (sBinPath + sXMLFileName) 
61797>                
61797>                Set Value of oDriverID_cf to "MSSQLDRV_ID"
61798>                Set Value of oDbType_cf   to "EN_dbTypeMSSQL"
61799>
61799>            End_Procedure
61800>
61800>        End_Object
61801>
61801>        Object oDbType_cf is a cSQLComboForm
61803>            Set Size to 11 100
61804>            Set Location to 45 43
61805>            Set Label_Col_Offset to 0
61806>            Set Label to "DbType:"
61807>            Set Label_Justification_Mode to JMode_Top
61808>            Set Label_Row_Offset to 1
61809>            Set Label to "Database Type"
61810>            Set Entry_State to False
61811>            Set Combo_Sort_State to False
61812>            Set piItem to 3
61813>
61813>            Procedure Combo_Fill_List
61816>                Send Combo_Add_Item CS_dbTypeMSSQL
61817>                Send Combo_Add_Item CS_dbTypeMySQL
61818>                Send Combo_Add_Item CS_dbTypeOracle
61819>                Send Combo_Add_Item CS_dbTypeDB2
61820>                Send Combo_Add_Item CS_dbTypePostgre
61821>            End_Procedure
61822>
61822>            Procedure OnChange
61825>                Integer iDbType
61825>    
61825>                Get SelectedDbType to iDbType
61826>                Send Refill_Comboform of oDriverID_cf iDbType
61827>            End_Procedure
61828>    
61828>            Function SelectedDbType Returns Integer
61831>                Integer iRetval
61831>                String sDbType
61831>    
61831>                Get Value to sDbType
61832>                Get SqlUtilDbTypeToInteger of ghoDbUpdateFunctionLibrary sDbType to iRetval
61833>    
61833>                Function_Return iRetval
61834>            End_Function
61835>
61835>        End_Object
61836>
61836>        Object oDriverID_cf is a cSQLComboForm
61838>            Set Size to 11 100
61839>            Set Location to 45 150
61840>            Set Label_Justification_Mode to JMode_Top
61841>            Set Label_Col_Offset to 0
61842>            Set Label_Row_Offset to 1
61843>            Set Label to "Driver ID:"
61844>            Set Entry_State to False
61845>            Set Combo_Sort_State to False
61846>            Set piItem to 4
61847>
61847>            Procedure Refill_Comboform Integer iDbType
61850>                String sValue
61850>                Send Combo_Delete_Data
61851>                Case Begin
61851>                    Case (iDbType = EN_dbTypeMSSQL)
61853>                        Send Combo_Add_Item MSSQLDRV_ID
61854>                        Send Combo_Add_Item SQLFLEX
61855>                        Move MSSQLDRV_ID to sValue
61856>                        Case Break
61857>                    Case (iDbType = EN_dbTypeMySQL)
61860>                        Send Combo_Add_Item ODBC_DRV_ID
61861>                        Send Combo_Add_Item MDSMySQL
61862>                        Move MDSMySQL to sValue
61863>                        Case Break
61864>                    Case (iDbType = EN_dbTypeOracle)
61867>                        Send Combo_Add_Item ODBC_DRV_ID
61868>                        Send Combo_Add_Item ORAFLEX
61869>                        Move ORAFLEX to sValue
61870>                        Case Break
61871>                    Case (iDbType = EN_dbTypeDB2)
61874>                        Send Combo_Add_Item DB2_DRV_ID
61875>                        Move DB2_DRV_ID to sValue
61876>                        Case Break
61877>                    Case (iDbType = EN_dbTypePostgre)
61880>                        Send Combo_Add_Item ODBC_DRV_ID
61881>                        Send Combo_Add_Item MDSPgSQL
61882>                        Move MDSPgSQL to sValue
61883>                        Case Break
61884>                    Case Else
61884>                        Send Combo_Add_Item DATAFLEX_ID
61885>                        Move DATAFLEX_ID to sValue
61886>                Case End
61886>                Set Value to sValue
61887>            End_Procedure
61888>
61888>            Procedure OnChange
61891>                String sDriverID
61891>                Integer iDbType iPos
61891>
61891>                Get Value to sDriverID
61892>                Move (Pos("-", sDriverID)) to iPos
61893>                Move (Left(sDriverID, (iPos - 2))) to sDriverID
61894>                If (sDriverID = "") Begin
61896>                    Move MSSQLDRV_ID to sDriverID
61897>                End
61897>                Get SelectedDbType of oDbType_cf to iDbType
61898>            End_Procedure 
61899>            
61899>        End_Object
61900>
61900>        Object oOpenInEditor_btn is a Button
61902>            Set Size to 12 77
61903>            Set Location to 45 265
61904>            Set Label to "View in Editor"
61905>            Set peAnchors to anBottomRight
61906>
61906>            Procedure OnClick
61909>                String sFileName             
61909>                Boolean bExists
61909>                
61909>                Get Value of oDriverXMLFileName_fm to sFileName
61910>                Get vFilePathExists sFileName to bExists
61911>                If (bExists = False) Begin
61913>                    Send Info_Box "File doesn't exist"
61914>                    Procedure_Return
61915>                End
61915>                Runprogram Shell Background sFileName
61916>            End_Procedure
61917>
61917>        End_Object
61918>         
61918>    End_Object
61919>
61919>    Object oWriteResult_grp is a cRDCHeaderGroup
61921>        Set Size to 67 360
61922>        Set Location to 87 17
61923>        Set peAnchors to anTopLeftRight
61924>        Set psLabel to "Write Driver Data Types to Package Name:"
61925>        Set psImage to "ActionPrint1.ico"
61926>        
61926>        Object oOutputFilename_fm is a Form
61928>            Set Size to 13 298
61929>            Set Location to 20 43
61930>//            Set Label to "Output Package File Name:"
61930>            Set Label_Justification_Mode to JMode_Top
61931>            Set Label_Col_Offset to 0
61932>            Set Prompt_Button_Mode to PB_PromptOn
61933>            Set peAnchors to anTopLeftRight
61934>            Set Label_Row_Offset to 1
61935>
61935>            Procedure Prompt
61938>                String sFileName sPath sFileMask sRetval
61938>
61938>                Get Value to sFileName
61939>                Get ParseFolderName sFileName to sPath
61940>                Move "Include files (*.inc)|*.inc|Package files (*.pkg)|*.pkg" to sFileMask
61941>                Get vSelect_File sFileMask "Please enter a file name" sPath to sRetval
61942>                If (sRetval <> "") Begin
61944>                    Set Value to sRetval
61945>                End
61945>            End_Procedure
61946>
61946>            Procedure Set psOutputFileName String sXMLFileName
61949>                String sOutPutFileName sPath sExt
61949>                
61949>                Get psAppSrcPath of (phoWorkspace(ghoApplication)) to sPath
61950>                Get ParseFileName sXMLFileName to sOutPutFileName
61951>                Get ParseFileExtension sOutPutFileName to sExt
61952>                // We default to set the extension to an include file (.inc):
61952>                Move (Replace(sExt, sOutPutFileName, "inc")) to sOutPutFileName
61953>                Set Value to (sPath + "\" + sOutPutFileName)
61954>
61954>            End_Procedure
61955>
61955>        End_Object
61956>
61956>        Object oOpenInEditor_btn is a Button
61958>            Set Size to 12 77
61959>            Set Location to 45 265
61960>            Set Label to "View in Editor"
61961>            Set peAnchors to anBottomRight
61962>
61962>            Procedure OnClick
61965>                String sFileName             
61965>                Boolean bExists
61965>                
61965>                Get Value of oOutputFilename_fm to sFileName
61966>                Get vFilePathExists sFileName to bExists
61967>                If (bExists = False) Begin
61969>                    Send Info_Box "File doesn't exist"
61970>                    Procedure_Return
61971>                End
61971>                Runprogram Shell Background sFileName
61972>            End_Procedure
61973>        End_Object
61974>
61974>    End_Object
61975>
61975>    Object oReadButton is a Button
61977>        Set Size to 14 50
61978>        Set Location to 160 222
61979>        Set Label to "Read"
61980>        Set peAnchors to anBottomRight
61981>        Set Default_State to True
61982>
61982>        Procedure OnClick
61985>            String sFileName
61985>            Boolean bExists
61985>            
61985>            Get Value of oDriverXMLFileName_fm to sFileName
61986>            Get vFilePathExists sFileName to bExists
61987>            If (bExists = False) Begin
61989>                Procedure_Return
61990>            End
61990>
61990>            Send ReadXMLDriverData sFileName
61991>        End_Procedure
61992>
61992>    End_Object
61993>
61993>    Object oWriteButton is a Button
61995>        Set Size to 14 50
61996>        Set Location to 160 275
61997>        Set Label to "Write"
61998>        Set peAnchors to anBottomRight
61999>
61999>        Procedure OnClick
62002>            tColumnType[] aColumnType
62002>            tColumnType[] aColumnType
62003>            String sFileName sDriverXMLFile 
62003>            Boolean bExists          
62003>            
62003>            Get paColumnType to aColumnType
62004>            If (SizeOfArray(aColumnType) = 0) Begin
62006>                Send Info_Box "You need to read an XML driver file successfully first."
62007>                Procedure_Return
62008>            End
62008>            
62008>            Get Value of oDriverXMLFileName_fm to sDriverXMLFile
62009>            Get Value of oOutputFilename_fm to sFileName
62010>            If (sFileName = "") Begin
62012>                Send Info_Box "You need to specify an output file name first."
62013>                Procedure_Return
62014>            End
62014>            
62014>            Send WriteXMLDriverTypeData sFileName sDriverXMLFile aColumnType
62015>        End_Procedure
62016>
62016>    End_Object
62017>
62017>    Object oCloseButton is a Button
62019>        Set Size to 14 50
62020>        Set Location to 160 328
62021>        Set Label to "Exit"
62022>        Set peAnchors to anBottomRight
62023>
62023>        Procedure OnClick
62026>            Send Exit_Application
62027>        End_Procedure
62028>    End_Object
62029>
62029>    Procedure ReadXMLDriverData String sFileName
62032>        DateTime dtExecStart dtExecEnd
62032>        TimeSpan tsTotalTime
62032>        Handle hoXML hoRoot hoList hoBeginAfter hoName hoNextSibling
62032>        Integer iItems i iCount
62032>        Boolean bOK bExists
62032>        String  sNamespace sValue sError
62032>        Variant vRoot vChild vList vBeginAfter vName vNextSibling
62032>        tColumnType[] aColumnType
62032>        tColumnType[] aColumnType
62033>
62033>        Move (CurrentDateTime()) to dtExecStart
62034>        Set paColumnType to aColumnType
62035>
62035>        Get Create (RefClass(cComChilkatXml)) to hoXML
62036>        If (not(IsComObjectCreated(hoXml))) Begin
62038>            Send CreateComObject of hoXml
62039>        End
62039>
62039>        Get ComLoadXmlFile of hoXml sFileName to bOK
62040>        If (bOK <> True) Begin
62042>            Get ComLastErrorText of hoXML to sError
62043>            Send Info_Box ("Sorry, couldn't load the XML file. Error:\n" + sError)
62044>            Procedure_Return
62045>        End
62045>
62045>        Get ComGetSelf of hoXML to vBeginAfter
62046>        If (IsComObject(vBeginAfter)) Begin
62048>            Get Create (RefClass(cComChilkatXml)) to hoBeginAfter
62049>            Set pvComObject of hoBeginAfter to vBeginAfter
62050>        End
62050>
62050>        Get ComSearchForContent of hoXML vBeginAfter "name" "df_field_native_type" to vName
62051>        If (IsComObject(vName)) Begin
62053>            Get Create (RefClass(cComChilkatXml)) to hoName
62054>            Set pvComObject of hoName to vName
62055>        End
62055>        If (IsNullComObject(vName)) Begin
62057>            Send Info_Box 'The tag "df_field_native_type" not found. It is needed to enumerate data types.'
62058>            Procedure_Return
62059>        End
62059>        
62059>        // Get the parent object, from where we can continue searching:
62059>        Get ComGetParent of hoName to vRoot
62060>        If (IsComObject(vRoot)) Begin
62062>            Get Create (RefClass(cComChilkatXml)) to hoRoot
62063>            Set pvComObject of hoRoot to vRoot
62064>        End
62064>        
62064>        // Set baseline at parent level:
62064>        Get ComGetSelf of hoRoot to vBeginAfter
62065>        If (IsComObject(vBeginAfter)) Begin
62067>            Get Create (RefClass(cComChilkatXml)) to hoBeginAfter
62068>            Set pvComObject of hoBeginAfter to vBeginAfter
62069>        End
62069>
62069>        //  Navigate to the enumValues node:
62069>        Get ComSearchForTag of hoRoot vBeginAfter "enumValues" to vList
62070>        If (IsComObject(vList)) Begin
62072>            Get Create (RefClass(cComChilkatXml)) to hoList
62073>            Set pvComObject of hoList to vList
62074>        End
62074>        
62074>        // Set baseline at enum values start object:
62074>        Get ComGetSelf of hoList to vBeginAfter
62075>        If (IsComObject(vBeginAfter)) Begin
62077>            Get Create (RefClass(cComChilkatXml)) to hoBeginAfter
62078>            Set pvComObject of hoBeginAfter to vBeginAfter
62079>        End
62079>        
62079>        // Find the first "enumValue" enumeration:
62079>        Get ComNumChildren of hoList to iItems
62080>        Get ComSearchForTag2 of hoList vBeginAfter "enumValue" to bExists
62081>        If (bExists = False) Begin
62083>            Send Info_Box 'No "enumValue" found (!). Nothing to enumerate.'
62084>            Procedure_Return
62085>        End
62085>
62085>        Decrement iItems
62086>        For iCount from 0 to iItems
62092>            Send CollectDriverAttributes hoList
62093>
62093>            Get ComNextSibling of hoList to vNextSibling
62094>            If (IsComObject(vNextSibling)) Begin
62096>                Get Create (RefClass(cComChilkatXml)) to hoNextSibling
62097>                Set pvComObject of hoNextSibling to vNextSibling
62098>            End
62098>            Send Destroy of hoList
62099>            Move hoNextSibling to hoList
62100>        Loop
62101>
62101>        Send Destroy of hoRoot
62102>        Send Destroy of hoXML
62103>
62103>        Move (CurrentDateTime()) to dtExecEnd
62104>        Move (dtExecEnd - dtExecStart) to tsTotalTime
62105>        Send Info_Box ("Ready! Total Time:" * String(tsTotalTime))
62106>    End_Procedure
62107>
62107>    Procedure CollectDriverAttributes Handle hoDriverAttribute
62110>        tColumnType ColumnType
62110>        tColumnType ColumnType
62110>        tColumnType[] aColumnType
62110>        tColumnType[] aColumnType
62111>        Handle hoChild
62111>        Variant vChild
62111>
62111>        // If the value was a cDataSection it will be properly translated back
62111>        // to normal text for us.
62111>        Move True                                                   to ColumnType.bNativeDataType
62112>        Get ComGetChildContent of hoDriverAttribute "name"          to ColumnType.sSQLType
62113>        Get ComGetChildContent of hoDriverAttribute "id"            to ColumnType.iSQLType
62114>
62114>        Get ComGetChildWithTag of hoDriverAttribute "nativeTypeData" to vChild
62115>        If (IsComObject(vChild)) Begin
62117>            Get Create (RefClass(cComChilkatXml)) to hoChild
62118>            Set pvComObject of hoChild to vChild
62119>            Get ComGetChildContent of hoChild       "canEditSize"   to ColumnType.bCanEditSize
62120>            
62120>            // Some data types does not have a iDefaultSize, Min or Max size.
62120>            // Then denote "not defined" by a "-1":
62120>            Get ComGetChildContent of hoChild       "defaultSize"   to ColumnType.iDefaultSize
62121>            If (ColumnType.iDefaultSize = 0) Begin
62123>                Move    -1                                          to ColumnType.iDefaultSize
62124>            End
62124>            Get ComGetChildContent of hoChild       "minSize"       to ColumnType.iMinSize
62125>            If (ColumnType.iMinSize = 0) Begin
62127>                Move        -1                                      to ColumnType.iMinSize
62128>            End
62128>            Get ComGetChildContent of hoChild       "maxSize"       to ColumnType.nMaxSize
62129>            If (ColumnType.nMaxSize = 0) Begin
62131>                Move        -1                                      to ColumnType.nMaxSize
62132>            End
62132>            Send Destroy           of hoChild
62133>        End
62133>
62133>        Get paColumnType to aColumnType
62134>        Move ColumnType to aColumnType[SizeOfArray(aColumnType)]
62135>        // paColumnType is a Panel array struct property
62135>        Set paColumnType to aColumnType
62136>    End_Procedure  
62137>    
62137>    Function MakeStringLength String sValue Integer iReportColumnPos Returns String
62140>        Move (Pad(sValue, (Length(sValue) + (iReportColumnPos - Length(sValue))))) to sValue
62141>
62141>        Function_Return sValue
62142>    End_Function
62143>
62143>    Procedure WriteXMLDriverTypeData String sFileName String sDriverXMLFile tColumnType[] aColumnType
62146>        Integer iSize iCount iCh iDbType iDataFlexType
62146>        String sSpace sDriverID sDataFlexType sValue
62146>        DateTime dtExecStart dtExecEnd
62146>        
62146>        Get Seq_Open_Output_Channel sFileName to iCh
62147>        If (iCh = DF_SEQ_CHANNEL_ERROR) Begin
62149>            Send Info_Box "Could not get a free output channel number."
62150>            Procedure_Return
62151>        End                 
62151>        
62151>        Move (CurrentDateTime()) to dtExecStart
62152>        Get SelectedDbType of oDbType_cf   to iDbType
62153>        Get Value          of oDriverID_cf to sDriverID
62154>        Writeln channel iCh "/" "/ Generated By The Database Update Framework"
62158>        Writeln channel iCh "/" "/ Driver XML File: " sDriverXMLFile
62163>        Writeln channel iCh "/" "/ Driver COLUMN DATA TYPES"
62167>        Writeln channel iCh "/" "/"
62171>        Writeln channel iCh "/" "/ Created: " (String(dtExecStart))
62176>        Writeln channel iCh
62178>        Move "            " to sSpace
62179>        
62179>        Move (SizeOfArray(aColumnType)) to iSize
62180>        Decrement iSize
62181>        For iCount from 0 to iSize                    
62187>            Get UtilSqlColumnTypeToDataFlexType of ghoDbUpdateFunctionLibrary sDriverID iDbType aColumnType[iCount].iSQLType aColumnType[iCount].iDefaultSize to iDataFlexType 
62188>            Get UtilDataFlexDataTypeToString    of ghoDbUpdateFunctionLibrary iDataFlexType to sDataFlexType
62189>            
62189>            If (Lowercase(aColumnType[iCount].sSQLType) <> "unknown type") Begin
62191>                // sSQLType:
62191>                Move ('Move "' + String(aColumnType[iCount].sSQLType) + '"') to sValue
62192>                Get MakeStringLength sValue 45 to sValue
62193>                Writeln channel iCh sSpace sValue 'to aColumnType[i].sSQLType'                                     
62198>                // iSQLType:
62198>                Move ('Move' * String(aColumnType[iCount].iSQLType)) to sValue
62199>                Get MakeStringLength sValue 45 to sValue
62200>                Writeln channel iCh sSpace sValue 'to aColumnType[i].iSQLType'
62205>                // bCanEditSize:
62205>                Move ('Move' * (If(aColumnType[iCount].bCanEditSize = True, 'True', 'False'))) to sValue
62206>                Get MakeStringLength sValue 45 to sValue
62207>                Writeln channel iCh sSpace sValue 'to aColumnType[i].bCanEditSize'
62212>                // bNativeDataType:
62212>                Move ('Move' * (If(aColumnType[iCount].bNativeDataType = True, 'True', 'False'))) to sValue
62213>                Get MakeStringLength sValue 45 to sValue
62214>                Writeln channel iCh sSpace sValue 'to aColumnType[i].bNativeDataType' 
62219>                // iDefaultSize:
62219>                Move ('Move' * String(aColumnType[iCount].iDefaultSize)) to sValue 
62220>                Get MakeStringLength sValue 45 to sValue
62221>                Writeln channel iCh sSpace sValue 'to aColumnType[i].iDefaultSize'
62226>                // iMinSize:
62226>                Move ('Move' * String(aColumnType[iCount].iMinSize)) to sValue 
62227>                Get MakeStringLength sValue 45 to sValue
62228>                Writeln channel iCh sSpace sValue 'to aColumnType[i].iMinSize'
62233>                // iMaxSize:
62233>                Move ('Move' * String(aColumnType[iCount].nMaxSize)) to sValue 
62234>                Get MakeStringLength sValue 45 to sValue
62235>                Writeln channel iCh sSpace sValue 'to aColumnType[i].nMaxSize'
62240>                // sDataFlexType:
62240>                Move ('Move "' + String(sDataFlexType) + '"') to sValue    
62241>                Get MakeStringLength sValue 45 to sValue
62242>                Writeln channel iCh sSpace sValue 'to aColumnType[i].sDataFlexType'
62247>                // iDataFlexType:
62247>                Move ('Move' * String(sDataFlexType)) to sValue    
62248>                Get MakeStringLength sValue 45 to sValue
62249>                Writeln channel iCh sSpace sValue 'to aColumnType[i].iDataFlexType'
62254>                // sPrecision:
62254>                // ToDo: Should this be .DefaultSize or .nMaxSize? ...Or removed !
62254>                // Maybe change the struct?
62254>                If (iDataFlexType = DF_DATE) Begin
62256>                    Move  6 to aColumnType[iCount].nMaxSize
62257>                End
62257>                If (Lowercase(aColumnType[iCount].sSQLType) = "datetime" or Lowercase(aColumnType[iCount].sSQLType) = "datetime2") Begin
62259>                    Move 23 to aColumnType[iCount].nMaxSize
62260>                End                                           
62260>                If (aColumnType[iCount].nMaxSize = 0) Begin
62262>                    Move  1 to aColumnType[iCount].nMaxSize
62263>                End
62263>                Move ('Move' * String(aColumnType[iCount].nMaxSize)) to sValue 
62264>                Get MakeStringLength sValue 45 to sValue
62265>                Writeln channel iCh sSpace sValue 'to aColumnType[i].sPrecision'
62270>
62270>                Writeln channel iCh sSpace 'Increment i'
62274>                Writeln channel iCh
62276>            End
62276>        Loop
62277>
62277>        Send Seq_Close_Channel iCh
62278>        Send Info_Box "Ready!"    
62279>    End_Procedure
62280>    
62280>    Send OnStartUp of oDriverXMLFileName_fm
62281>    
62281>    On_Key Key_Ctrl+Key_R Send KeyAction of oReadButton
62282>    On_Key Key_Ctrl+Key_W Send KeyAction of oWriteButton
62283>End_Object
62284>
62284>Start_UI oMainPanel
62286>
Including Resources...
Summary
Memory Available: 2147483646
Total Warnings : 0
Total Errors   : 0
Total Symbols  : 34836
Total Resources: 6
Total Commands : 62285
Total Windows  : 0
Total Pages    : 0
Static Data    : 532353
Message area   : 380967
Total Blocks   : 23196
