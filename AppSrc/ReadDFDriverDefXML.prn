Compiling Program: C:\Projects\DF20\DbUpdateFramework\AppSrc\ReadDFDriverDefXML.src
Memory Available: 2147483646
1>    CompilerLevelWarning All On
1>Use cApplication.pkg
Including file: cApplication.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cApplication.pkg)
1>>>Use Windows.pkg
Using pre-compiled package WINDOWS.PKG
Including file: windows.pkd    (C:\Program Files\DataFlex 23.0\Pkg\windows.pkd)
8251>>>
8251>>>Use LanguageText.pkg
8251>>>Use WinUser.pkg
8251>>>Use WinShell.pkg
8251>>>Use cWorkspace.pkg
Including file: cWorkspace.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cWorkspace.pkg)
8251>>>>>Use VdfBase.pkg
8251>>>>>Use tWinStructs.pkg
8251>>>>>Use LanguageText.pkg
8251>>>>>Use WinShell.pkg // Shell API functions
8251>>>>>Use seq_chnl.pkg
Including file: seq_chnl.pkg    (C:\Program Files\DataFlex 23.0\Pkg\seq_chnl.pkg)
8251>>>>>>>Use LanguageText.pkg
8251>>>>>>>Use VDFBase.pkg
Including file: errornum.inc    (C:\Program Files\DataFlex 23.0\Pkg\errornum.inc)
8251>>>>>>>>
8251>>>>>>>>//
8251>>>>>>>>// these will get defined in fmac
8251>>>>>>>>//
8251>>>>>>>>// already defined
8251>>>>>>>>//    #REPLACE DFERR_COMP_BAD_IMAGE_NAME                 |CI4293
8251>>>>>>>>//    #REPLACE DFERR_COMP_CONSTANT_EXPECTED              |CI4299
8251>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_RETURN_TYPE            |CI4310
8251>>>>>>>>//    #REPLACE DFERR_COMP_IMAGE_NOT_FOUND                |CI4311
8251>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_DATATYPE               |CI4315
8251>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_TYPE                   |CI4317
8251>>>>>>>>//    #REPLACE DFERR_COMP_MISSING_ARGUMENT               |CI4320
8251>>>>>>>>//    #REPLACE DFERR_COMP_MISSING_END_OBJECT             |CI4323
8251>>>>>>>>//    #REPLACE DFERR_COMP_UNDEFINED_SYMBOL_IN_ARGUMENT   |CI4328
8251>>>>>>>>//    #REPLACE DFERR_COMP_SYMBOL_ALREADY_DEFINED         |CI4332
8251>>>>>>>>//    #REPLACE DFERR_COMP_TOO_MANY_MESSAGES              |CI4339
8251>>>>>>>>//    #REPLACE DFERR_COMP_UNRESOVLED_CONTROL_BLOCK       |CI4348
8251>>>>>>>>// new compiler errors used by fmac
8251>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_OBJECT_DEFINTION       |CI4388 // object name used is not valid
8251>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_PROPERTY_DEFINTION     |CI4389 // property name cannot be used
8251>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_METHOD_DEFINTION       |CI4390 // method name cannot be used
8251>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_CODE_PLACEMENT         |CI4391 // Location of code, nesting, is wrong
8251>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_METHOD_SYNTAX          |CI4392 // syntax is incorrect for method definition
8251>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_MESSAGE_SYNTAX         |CI4393 // sysntax is incorrect for sending message
8251>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_OBJECT_REFERENCE       |CI4394 // object named in message is invalid
8251>>>>>>>>//    #REPLACE DFERR_COMP_OBSOLETE_UNSUPPORTED_FEATURE   |CI4395 // Obsolete - was 101 (Moveused by fmac)
8251>>>>>>>>//    #REPLACE DFERR_COMP_INVALID_ARGUMENT               |CI4396 // Agument in line is incorrect
8251>>>>>>>>//    #REPLACE DFERR_COMP_ILLEGAL_EXTERNAL_FUNCTION_DEFINITION |CI4397 // name cannot be used
8251>>>>>>>>//    #REPLACE DFERR_COMP_MISSING_DEBUG_INFORMATION      |CI4500 // debug information is not provided
8251>>>>>>>>//    #REPLACE DFERR_COMP_INCOMPATIBLE_DEBUG_INFORMATION |CI4501 // debug inforamtion is is not correct
8251>>>>>>>>//    #REPLACE DFERR_COMP_RECURSIVE_STRUCT_DECLARATION   |CI4513 // recursive struct definition
8251>>>>>>>>//    #REPLACE DFERR_COMP_AMBIGUOUS_SYNTAX               |CI4514 // either Left of "'[' is not array, use '(' if indicator" or "Left of '.' is not of type struct or table"
8251>>>>>>>>
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_STRING_CMD       |CI4531 // pertaining to string commands
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_TYPE_CMD         |CI4532 // pertaining to type/end_type commands
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_CMD              |CI4533 // pertaining to a more generic obsolete command 
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_GLOBAL_FUNCTION  |CI4534 // Global function is obsolete
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_TECHNIQUE        |CI4535 // Using some older technique
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_PACKAGE          |CI4536 // Package is obsolete, remove it if you can
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_CLASS            |CI4537 // Class is obsolete, remove it if you can
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_INDICATOR_USE    |CI4538 // Using indicators anywhere
8251>>>>>>>>//    
8251>>>>>>>>//    #Replace DFERR_COMP_ILLEGAL_CONVERSION                            |CI4539 // Datatype conversion is illegal, would cause runtime-error
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_OBSOLETE_OBJECT_FUNCTION  |CI4540 // Global function is obsolete
8251>>>>>>>>//    #Replace DFERR_INVALID_LOCALE_CODE                    |CI4541 // Error thown by Set_Attribute DF_LOCALE_CODE on invalid value
8251>>>>>>>>//    #Replace DFERR_STRING_COMPARISON_ERROR                |CI4542 // Error during string comparison (ICU returned an error)
8251>>>>>>>>//    #Replace DFERR_COMP_WARNING_REDEFINING_RETURN_TYPE    |CI4543 // Warning when redefining a function with a different return type
8251>>>>>>>>//    #Replace DFERR_COMP_AMBIGUOUS_FUNCTION_EXPRESSION     |CI4544 // Error when using ambiguous function in expression
8251>>>>>>>>    
8251>>>>>>>>
8251>>>>>>>>
8251>>>>>>>
8251>>>>>>>Define DF_SEQ_CHANNEL_NOT_AVAILABLE for -2
8251>>>>>>>Define DF_SEQ_CHANNEL_ERROR         for -1
8251>>>>>>>Define DF_SEQ_CHANNEL_MIN           for 0
8251>>>>>>>Define DF_SEQ_CHANNEL_MAX           for 9
8251>>>>>>>Define DF_SEQ_START_CHANNEL         for 2 // leave 0 and 1 til last
8251>>>>>>>// so that programs that use direct_input/output
8251>>>>>>>// w/o specifying a channel will work.
8251>>>>>>>Enum_List
8251>>>>>>>    Define DF_SEQ_CHANNEL_MODE_CLOSED
8251>>>>>>>    Define DF_SEQ_CHANNEL_MODE_OPEN
8251>>>>>>>    Define DF_SEQ_CHANNEL_MODE_OUTPUT
8251>>>>>>>    Define DF_SEQ_CHANNEL_MODE_INPUT
8251>>>>>>>End_Enum_List
8251>>>>>>>
8251>>>>>>>Enum_List
8251>>>>>>>    Define DF_SEQ_CHANNEL_ERROR_MODE_NONE
8251>>>>>>>    Define DF_SEQ_CHANNEL_ERROR_MODE_ALL
8251>>>>>>>End_Enum_List
8251>>>>>>>
8251>>>>>>>Global_Variable Integer Seq$Channel$Error$Mode
8251>>>>>>>
8251>>>>>>>Procedure Set Seq_Channel_Error_Mode Global Integer iMode
8253>>>>>>>    Move iMode to Seq$Channel$Error$Mode
8254>>>>>>>End_Procedure
8255>>>>>>>
8255>>>>>>>Function Seq_Channel_Error_Mode Global Returns Integer
8257>>>>>>>    Function_Return Seq$Channel$Error$Mode
8258>>>>>>>End_Function
8259>>>>>>>
8259>>>>>>>Global_Variable Integer[DF_SEQ_CHANNEL_MAX] giSeqChannelList
8259>>>>>>>// initialize array
8259>>>>>>>For WindowIndex from 0 to (DF_SEQ_CHANNEL_MAX-1)
8265>>>>>>>>
8265>>>>>>>    Move 0 to giSeqChannelList[WindowIndex]
8266>>>>>>>Loop
8267>>>>>>>>
8267>>>>>>>
8267>>>>>>>Set Seq_Channel_Error_Mode to DF_SEQ_CHANNEL_ERROR_MODE_ALL
8268>>>>>>>
8268>>>>>>>Function Seq_Channel_Mode Global Integer iChannel Returns Integer
8270>>>>>>>    Function_Return giSeqChannelList[iChannel]
8271>>>>>>>End_Function
8272>>>>>>>
8272>>>>>>>Procedure Set Seq_Channel_Mode Global Integer iChannel Integer iMode
8274>>>>>>>    Move iMode to giSeqChannelList[iChannel]
8275>>>>>>>End_Procedure
8276>>>>>>>
8276>>>>>>>Function Seq_New_Channel Global Returns Integer
8278>>>>>>>    Integer iObject iChannel
8278>>>>>>>    
8278>>>>>>>    Move DF_SEQ_START_CHANNEL to iChannel
8279>>>>>>>    
8279>>>>>>>    While (iChannel < DF_SEQ_CHANNEL_MAX)
8283>>>>>>>        If (Seq_Channel_Mode(iChannel) = DF_SEQ_CHANNEL_MODE_CLOSED) Begin
8285>>>>>>>            Set Seq_Channel_Mode iChannel to DF_SEQ_CHANNEL_MODE_OPEN
8286>>>>>>>            Function_Return iChannel
8287>>>>>>>        End
8287>>>>>>>>
8287>>>>>>>        
8287>>>>>>>        Increment iChannel
8288>>>>>>>    Loop
8289>>>>>>>>
8289>>>>>>>    
8289>>>>>>>    // wrap back to beginning
8289>>>>>>>    Move 0 to iChannel
8290>>>>>>>    
8290>>>>>>>    While (iChannel < DF_SEQ_START_CHANNEL)
8294>>>>>>>        If (Seq_Channel_Mode(iChannel) = DF_SEQ_CHANNEL_MODE_CLOSED) Begin
8296>>>>>>>            Set Seq_Channel_Mode iChannel to DF_SEQ_CHANNEL_MODE_OPEN
8297>>>>>>>            Function_Return iChannel
8298>>>>>>>        End
8298>>>>>>>>
8298>>>>>>>        
8298>>>>>>>        Increment iChannel
8299>>>>>>>    Loop
8300>>>>>>>>
8300>>>>>>>    
8300>>>>>>>    Function_Return DF_SEQ_CHANNEL_NOT_AVAILABLE
8301>>>>>>>End_Function
8302>>>>>>>
8302>>>>>>>Procedure Seq_Release_Channel Global Integer iChannel
8304>>>>>>>    If ((iChannel >= DF_SEQ_CHANNEL_MIN) and (iChannel <= DF_SEQ_CHANNEL_MAX)) Begin
8306>>>>>>>        Set Seq_Channel_Mode iChannel to DF_SEQ_CHANNEL_MODE_CLOSED
8307>>>>>>>    End
8307>>>>>>>>
8307>>>>>>>End_Procedure
8308>>>>>>>
8308>>>>>>>Function Seq_Open_Input_Channel Global String sChannel Returns Integer
8310>>>>>>>    Integer iChannel
8310>>>>>>>    
8310>>>>>>>    Move (Seq_New_Channel()) to iChannel
8311>>>>>>>    
8311>>>>>>>    If (iChannel <= DF_SEQ_CHANNEL_ERROR) Begin
8313>>>>>>>        If (Seq_Channel_Error_Mode() = DF_SEQ_CHANNEL_ERROR_MODE_ALL) Begin
8315>>>>>>>            Error DFERR_CANT_OPEN_INPUT_FILE (sChannel + ":" *C_$NoOpenChannels)
8316>>>>>>>>
8316>>>>>>>        End
8316>>>>>>>>
8316>>>>>>>        Function_Return iChannel
8317>>>>>>>    End
8317>>>>>>>>
8317>>>>>>>    
8317>>>>>>>    Move False to Err
8318>>>>>>>    Direct_Input channel iChannel sChannel
8320>>>>>>>    
8320>>>>>>>    If (Err) Begin
8322>>>>>>>        Send Seq_Release_Channel iChannel
8323>>>>>>>        Function_Return DF_SEQ_CHANNEL_ERROR
8324>>>>>>>    End
8324>>>>>>>>
8324>>>>>>>    
8324>>>>>>>    Set Seq_Channel_Mode iChannel to DF_SEQ_CHANNEL_MODE_INPUT
8325>>>>>>>    
8325>>>>>>>    Function_Return iChannel
8326>>>>>>>End_Function
8327>>>>>>>
8327>>>>>>>Function Seq_Open_Output_Channel Global String sChannel Returns Integer
8329>>>>>>>    Integer iChannel
8329>>>>>>>    
8329>>>>>>>    Move (Seq_New_Channel()) to iChannel
8330>>>>>>>    
8330>>>>>>>    If (iChannel <= DF_SEQ_CHANNEL_ERROR) Begin
8332>>>>>>>        If (Seq_Channel_Error_Mode() = DF_SEQ_CHANNEL_ERROR_MODE_ALL) Begin
8334>>>>>>>            Error DFERR_CANT_OPEN_OUTPUT_FILE (sChannel + ":" *C_$ChannelNotAvailable)
8335>>>>>>>>
8335>>>>>>>            Move DF_SEQ_CHANNEL_ERROR to iChannel
8336>>>>>>>        End
8336>>>>>>>>
8336>>>>>>>        
8336>>>>>>>        Function_Return iChannel
8337>>>>>>>    End
8337>>>>>>>>
8337>>>>>>>    
8337>>>>>>>    Move False to Err
8338>>>>>>>    Direct_Output channel iChannel sChannel
8340>>>>>>>    
8340>>>>>>>    If (Err) Begin
8342>>>>>>>        Send Seq_Release_Channel iChannel
8343>>>>>>>        Function_Return DF_SEQ_CHANNEL_ERROR
8344>>>>>>>    End
8344>>>>>>>>
8344>>>>>>>    
8344>>>>>>>    Set Seq_Channel_Mode iChannel to DF_SEQ_CHANNEL_MODE_OUTPUT
8345>>>>>>>    
8345>>>>>>>    Function_Return iChannel
8346>>>>>>>End_Function
8347>>>>>>>
8347>>>>>>>Function Seq_Append_Output_Channel Global String sChannel Returns Integer
8349>>>>>>>    Integer iChannel
8349>>>>>>>    
8349>>>>>>>    Move (Seq_New_Channel()) to iChannel
8350>>>>>>>    
8350>>>>>>>    If (iChannel <= DF_SEQ_CHANNEL_ERROR) Begin
8352>>>>>>>        If (Seq_Channel_Error_Mode() = DF_SEQ_CHANNEL_ERROR_MODE_ALL) Begin
8354>>>>>>>            Error DFERR_CANT_OPEN_OUTPUT_FILE (sChannel + ":" *C_$ChannelNotAvailable)
8355>>>>>>>>
8355>>>>>>>            Move DF_SEQ_CHANNEL_ERROR to iChannel
8356>>>>>>>        End
8356>>>>>>>>
8356>>>>>>>        
8356>>>>>>>        Function_Return iChannel
8357>>>>>>>    End
8357>>>>>>>>
8357>>>>>>>    
8357>>>>>>>    Move False to Err
8358>>>>>>>    Append_Output channel iChannel sChannel
8360>>>>>>>    
8360>>>>>>>    If (Err) Begin
8362>>>>>>>        Send Seq_Release_Channel iChannel
8363>>>>>>>        Function_Return DF_SEQ_CHANNEL_ERROR
8364>>>>>>>    End
8364>>>>>>>>
8364>>>>>>>    
8364>>>>>>>    Set Seq_Channel_Mode iChannel to DF_SEQ_CHANNEL_MODE_OUTPUT
8365>>>>>>>    
8365>>>>>>>    Function_Return iChannel
8366>>>>>>>End_Function
8367>>>>>>>
8367>>>>>>>Procedure Seq_Close_Channel Global Integer iChannel
8369>>>>>>>    Integer iMode
8369>>>>>>>    
8369>>>>>>>    If ((iChannel >= DF_SEQ_CHANNEL_MIN) and (iChannel <= DF_SEQ_CHANNEL_MAX)) Begin
8371>>>>>>>        Move (Seq_Channel_Mode(iChannel)) to iMode
8372>>>>>>>        
8372>>>>>>>        If (iMode = DF_SEQ_CHANNEL_MODE_OUTPUT) Begin
8374>>>>>>>            Close_Output channel iChannel
8376>>>>>>>        End
8376>>>>>>>>
8376>>>>>>>        Else If (iMode = DF_SEQ_CHANNEL_MODE_INPUT) Begin
8379>>>>>>>            Close_Input channel iChannel
8381>>>>>>>        End
8381>>>>>>>>
8381>>>>>>>        // If channel not open, release it! No (fatal) Error.
8381>>>>>>>        Send Seq_Release_Channel iChannel
8382>>>>>>>    End
8382>>>>>>>>
8382>>>>>>>End_Procedure
8383>>>>>Use GlobalFunctionsProcedures.pkg
8383>>>>>
8383>>>>>Register_Function IsRegistered String sWorkspace Returns Boolean
8383>>>>>Register_Function VdfSystemDfPath   Returns String
8383>>>>>Register_Function VdfSystemMakePath Returns String
8383>>>>>
8383>>>>>Enum_List
8383>>>>>    Define wsWorkspaceOpened       // WS opened ok
8383>>>>>    Define wsWorkspaceNotFound     // the named WS was not found in the global list
8383>>>>>    Define wsWorkspaceFileNotFound // the WS file was not found
8383>>>>>    Define wsDataPathEmpty         // the DataPath entry was empty
8383>>>>>    Define wsFileListEmpty         // The FileList entry was empty
8383>>>>>    Define wsFileListNotExist      // The FileList.cfg file could not be found
8383>>>>>End_Enum_List
8383>>>>>
8383>>>>>
8383>>>>>Define INVALID_HANDLE_VALUE for -1
8383>>>>>Define MAX_PATH for 260   // Symbol for maximum length of a path
8383>>>>>
8383>>>>>
8383>>>>>// Wide version
8383>>>>>External_Function winFindFirstFileW "FindFirstFileW" Kernel32.dll ;    WString wFileSpec ;    Pointer lpsWin32FindData ;    Returns Handle
8384>>>>>
8384>>>>>// Wrapper Function winFindFirstFile
8384>>>>>Function winFindFirstFile Global ;    String  sFileSpec ;    Pointer lpsWin32FindData ;    Returns Handle
8386>>>>>    
8386>>>>>    Handle  hResult
8386>>>>>    Integer iVoid iFilenameSize iAltFilenameSize
8386>>>>>    Integer iSizeOfStructWithoutStrings
8386>>>>>    String  sFileName sAlternateFileName
8386>>>>>    WString wFileName wAlternateFileName
8386>>>>>    Pointer pWFD
8386>>>>>    tWin32FindDataW tWFD
8386>>>>>    tWin32FindDataW tWFD
8386>>>>>    
8386>>>>>    // lpsWin32FindData is a pointer to a WIN32_FIND_DATAW struct, which contains pointers to UTF-8 strings.
8386>>>>>    // These string must be converted to UTF-16 and afterwards back to UTF-8.
8386>>>>>
8386>>>>>    Move (SizeOfType(tWin32FindData) - MAX_PATH - MAX_ALTPATH) to iSizeOfStructWithoutStrings
8387>>>>>    Move (AddressOf(tWFD)) to pWFD
8388>>>>>    
8388>>>>>    // Call the function
8388>>>>>    Move (winFindFirstFileW (sFileSpec, pWFD)) to hResult
8389>>>>>
8389>>>>>    // Copy the struct contents back to the incoming one.
8389>>>>>    Move (CopyMemory(lpsWin32FindData, pWFD, iSizeOfStructWithoutStrings)) to iVoid
8390>>>>>    
8390>>>>>    // But do the strings separately and convert them to UTF8
8390>>>>>    Move (PointerToWString(pWFD + iSizeOfStructWithoutStrings)) to sFileName
8391>>>>>    Move (PointerToWString(pWFD + iSizeOfStructWithoutStrings + (MAX_PATH*2))) to sAlternateFileName
8392>>>>>    
8392>>>>>    // Extend string with 0 to the maximum number of characters
8392>>>>>    If (SizeOfString(sFileName)<MAX_PATH) ;        Append sFileName (Repeat(Character(0), MAX_PATH - SizeOfString(sFileName)))
8395>>>>>    If (SizeOfString(sAlternateFileName)<MAX_ALTPATH) ;        Append sAlternateFileName (Repeat(Character(0), MAX_ALTPATH - SizeOfString(sAlternateFileName)))
8398>>>>>        
8398>>>>>    Move (MemCopy(lpsWin32FindData + iSizeOfStructWithoutStrings, AddressOf(sFileName), MAX_PATH)) to iVoid
8399>>>>>    Move (MemCopy(lpsWin32FindData + iSizeOfStructWithoutStrings + MAX_PATH, AddressOf(sAlternateFileName), MAX_ALTPATH)) to iVoid
8400>>>>>    
8400>>>>>    Function_Return hResult
8401>>>>>End_Function
8402>>>>>
8402>>>>>// When used directly, be sure to use WString types (UTF16).
8402>>>>>External_Function winFindNextFileW "FindNextFileW" Kernel32.dll ;    Handle  hFindFile ;    Pointer lpsWin32FindData ;    Returns Integer
8403>>>>>
8403>>>>>// Wrapper Function winFindNextFile
8403>>>>>Function winFindNextFile Global ;    Handle  hFindFile ;    Pointer lpsWin32FindData ;    Returns Integer
8405>>>>>    
8405>>>>>    Integer iResult iVoid iFilenameSize iAltFilenameSize
8405>>>>>    Integer iSizeOfStructWithoutStrings
8405>>>>>    String  sFileName sAlternateFileName
8405>>>>>    WString wFileName wAlternateFileName
8405>>>>>    Pointer pWFD
8405>>>>>    tWin32FindDataW tWFD
8405>>>>>    tWin32FindDataW tWFD
8405>>>>>
8405>>>>>    // lpsWin32FindData is a pointer to a WIN32_FIND_DATAW struct, which contains pointers to UTF-8 strings.
8405>>>>>    // These string must be converted to UTF-16 and afterwards back to UTF-8.
8405>>>>>
8405>>>>>    // Copy the struct to a local struct that can be modified to UTF-16.
8405>>>>>    Move (SizeOfType(tWin32FindData) - MAX_PATH - MAX_ALTPATH) to iSizeOfStructWithoutStrings
8406>>>>>    Move (AddressOf(tWFD)) to pWFD
8407>>>>>    Move (MemCopy(pWFD, lpsWin32FindData, iSizeOfStructWithoutStrings)) to iVoid
8408>>>>>    // But do the strings separately and convert them to wide strings (UTF16).
8408>>>>>    Move (PointerToString(lpsWin32FindData + iSizeOfStructWithoutStrings)) to wFileName
8409>>>>>    Move (PointerToString(lpsWin32FindData + iSizeOfStructWithoutStrings + MAX_PATH)) to wAlternateFileName
8410>>>>>    Move (MemCopy(pWFD + iSizeOfStructWithoutStrings, AddressOf(wFileName), SizeOfString(wFileName)*2)) to iVoid
8411>>>>>    Move (MemCopy(pWFD + iSizeOfStructWithoutStrings + (MAX_PATH*2), AddressOf(wAlternateFileName), SizeOfString(wAlternateFileName)*2)) to iVoid
8412>>>>>    
8412>>>>>    // Call the function
8412>>>>>    Move (winFindNextFileW (hFindFile, pWFD)) to iResult  
8413>>>>>
8413>>>>>    // Copy the struct contents back to the incoming one.
8413>>>>>    Move (CopyMemory(lpsWin32FindData, pWFD, iSizeOfStructWithoutStrings)) to iVoid
8414>>>>>    
8414>>>>>    // But do the strings separately and convert them to UTF8
8414>>>>>    Move (PointerToWString(pWFD + iSizeOfStructWithoutStrings)) to sFileName
8415>>>>>    Move (PointerToWString(pWFD + iSizeOfStructWithoutStrings + (MAX_PATH*2))) to sAlternateFileName
8416>>>>>    
8416>>>>>    // Extend string with 0 to the maximum number of characters
8416>>>>>    If (SizeOfString(sFileName)<MAX_PATH) ;        Append sFileName (Repeat(Character(0), MAX_PATH - SizeOfString(sFileName)))
8419>>>>>    If (SizeOfString(sAlternateFileName)<MAX_ALTPATH) ;        Append sAlternateFileName (Repeat(Character(0), MAX_ALTPATH - SizeOfString(sAlternateFileName)))
8422>>>>>        
8422>>>>>    Move (MemCopy(lpsWin32FindData + iSizeOfStructWithoutStrings, AddressOf(sFileName), MAX_PATH)) to iVoid
8423>>>>>    Move (MemCopy(lpsWin32FindData + iSizeOfStructWithoutStrings + MAX_PATH, AddressOf(sAlternateFileName), MAX_ALTPATH)) to iVoid
8424>>>>>    
8424>>>>>    Function_Return iResult
8425>>>>>End_Function
8426>>>>>
8426>>>>>
8426>>>>>External_Function winFindClose "FindClose" Kernel32.dll ;    Handle hOpenFile Returns Integer
8427>>>>>
8427>>>>>Function DoesFileExist Global String sFilename Returns Boolean
8429>>>>>    tWin32FindDataW Win32FindData
8429>>>>>    tWin32FindDataW Win32FindData
8429>>>>>    String sMask
8429>>>>>    Integer iVoid
8429>>>>>    Handle hFileFind
8429>>>>>    
8429>>>>>    Move (winFindFirstFileW(sFilename, AddressOf(Win32FindData))) to hFileFind
8430>>>>>    If (hFileFind <> INVALID_HANDLE_VALUE) Begin
8432>>>>>        Move (winFindClose(hFileFind)) to iVoid
8433>>>>>    End
8433>>>>>>
8433>>>>>    
8433>>>>>    Function_Return (hFileFind <> INVALID_HANDLE_VALUE)
8434>>>>>End_Function
8435>>>>>
8435>>>>>
8435>>>>>Use cIniFile.pkg
Including file: cIniFile.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cIniFile.pkg)
8435>>>>>>>Use Dll.pkg
8435>>>>>>>Use errornum.inc
8435>>>>>>>Use LanguageText.pkg
8435>>>>>>>Use GlobalFunctionsProcedures.pkg
8435>>>>>>>Use seq_chnl.pkg
8435>>>>>>>Use CharTranslate.pkg
8435>>>>>>>Use cCharTranslate.pkg
Including file: cCharTranslate.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCharTranslate.pkg)
8435>>>>>>>>>Use Variant.pkg
Including file: Variant.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Variant.pkg)
8435>>>>>>>>>>>Use ui
8435>>>>>>>>>>>Use errornum.inc
8435>>>>>>>>>>>
8435>>>>>>>>>>>// OLE VARENUM usage keys (from wtypes.h)
8435>>>>>>>>>>>
8435>>>>>>>>>>>
8435>>>>>>>>>>>External_Function SysAllocString "SysAllocString" oleaut32.dll Pointer pStr Returns Pointer
8436>>>>>>>>>>>External_Function SysStringLen "SysStringLen" oleaut32.dll Pointer vStr Returns Integer
8437>>>>>>>>>>>
8437>>>>>>>>>>>//  Returns the variant type
8437>>>>>>>>>>>Function VariantType Global Variant vVal Returns Integer
8439>>>>>>>>>>>    Function_Return (DeRefW(AddressOf(vVal),0))
8440>>>>>>>>>>>End_Function
8441>>>>>>>>>>>
8441>>>>>>>>>>>
8441>>>>>>>>>>>// Returns the character length of the variant string. 
8441>>>>>>>>>>>Function VariantStringLength Global Variant bStr Returns Integer
8443>>>>>>>>>>>    Integer iLen iType
8443>>>>>>>>>>>
8443>>>>>>>>>>>    Move (VariantType(bStr)) to iType
8444>>>>>>>>>>>    If (iType=OLE_VT_Empty) Begin
8446>>>>>>>>>>>        Function_Return 0
8447>>>>>>>>>>>    End
8447>>>>>>>>>>>>
8447>>>>>>>>>>>    If (iType<>OLE_VT_Bstr) Begin
8449>>>>>>>>>>>        Error DFERR_BAD_TYPE_EXPRESSION "In variable is not a variant bstr"
8450>>>>>>>>>>>>
8450>>>>>>>>>>>        Function_Return 0
8451>>>>>>>>>>>    End
8451>>>>>>>>>>>>
8451>>>>>>>>>>>    Move (SysStringLen(DeRefPtr(AddressOf(bStr),8))) to iLen
8452>>>>>>>>>>>    Function_Return iLen
8453>>>>>>>>>>>End_Function
8454>>>>>>>>>>>
8454>>>>>>>>>>>
8454>>>>>>>>>>>// returns true if char string in the buffer can fit into a string.
8454>>>>>>>>>>>// Changed this to always return True, because the Max_Argument_Size limitation has been removed.
8454>>>>>>>>>>>Function ValidStringBufferLength Global Pointer pData Returns Boolean
8456>>>>>>>>>>>    Function_Return True
8457>>>>>>>>>>>End_Function
8458>>>>>>>>>>>
8458>>>>>>>>>>>
8458>>>>>>>>>Use CharTranslate.pkg
8458>>>>>>>>>Use GlobalFunctionsProcedures.pkg
8458>>>>>>>>>
8458>>>>>>>>>// special for UTF16, which is really not a code page at all
8458>>>>>>>>>Define CP_UTF16 for -1
8458>>>>>>>>>
8458>>>>>>>>>Class cCharTranslate is a cObject
8459>>>>>>>>>    
8459>>>>>>>>>    
8459>>>>>>>>>    // UTF16 functions that allow you to move between a char (UTF8, ANS, OEM) and a UTF16 buffer
8459>>>>>>>>>    
8459>>>>>>>>>    // converts from buffer of encoded eCharType to a new UTF16 buffer
8459>>>>>>>>>    // note: Utf16FromBuffer with eCharType of CP_OEM can replace OEMToUTF16Buffer
8459>>>>>>>>>    Function Utf16FromBuffer  Pointer pMultiCharBuffer Integer eCharType Integer ByRef iLen Returns Pointer
8461>>>>>>>>>        Pointer pWideBuf
8461>>>>>>>>>        Integer iWideBufLen iStrLen
8461>>>>>>>>>        Move 0 to pWideBuf
8462>>>>>>>>>        Move 0 to iLen
8463>>>>>>>>>        If (pMultiCharBuffer) Begin
8465>>>>>>>>>            Move (CStringSize(pMultiCharBuffer)) to iStrLen
8466>>>>>>>>>            If (iStrLen) Begin
8468>>>>>>>>>                Move (MultiToWideBuffer(eCharType,pMultiCharBuffer, iStrLen, AddressOf(pWideBuf))) to iLen
8469>>>>>>>>>                If (iLen=0) Begin
8471>>>>>>>>>                    Function_Return 0
8472>>>>>>>>>                End
8472>>>>>>>>>>
8472>>>>>>>>>            End
8472>>>>>>>>>>
8472>>>>>>>>>        End
8472>>>>>>>>>>
8472>>>>>>>>>        Function_Return pWideBuf
8473>>>>>>>>>    End_Function
8474>>>>>>>>>    
8474>>>>>>>>>    Function Utf16FromStr String sValue Integer eCharType Integer ByRef iLen Returns Pointer
8476>>>>>>>>>        Pointer pValue
8476>>>>>>>>>        Get Utf16FromBuffer (AddressOf(sValue)) eCharType (&iLen) to pValue
8477>>>>>>>>>        Function_Return pValue
8478>>>>>>>>>    End_Function
8479>>>>>>>>>    
8479>>>>>>>>>    // converts from utf16 buffer to a new buffer of encoded eCharType
8479>>>>>>>>>    // note: Utf16ToBuffer with eCharType of CP_OEM can replace UTFtoOEMBuffer
8479>>>>>>>>>    Function Utf16ToBuffer Pointer pWideBuf Integer eCharType Integer iLen Returns Pointer
8481>>>>>>>>>        Pointer pRetBuf
8481>>>>>>>>>        Integer iRetBufLen
8481>>>>>>>>>        Move 0 to pRetBuf
8482>>>>>>>>>        If (pWideBuf and iLen) Begin
8484>>>>>>>>>            Move (WideToMultiBuffer(eCharType,pWideBuf,iLen,AddressOf(pRetBuf))) to iRetBufLen
8485>>>>>>>>>            If (iRetBufLen=0) Begin
8487>>>>>>>>>                Function_Return 0
8488>>>>>>>>>            End
8488>>>>>>>>>>
8488>>>>>>>>>        End
8488>>>>>>>>>>
8488>>>>>>>>>        Function_Return pRetBuf
8489>>>>>>>>>    End_Function
8490>>>>>>>>>    
8490>>>>>>>>>    Function Utf16ToStr Pointer pWideBuf Integer eCharType Integer iLen Returns String
8492>>>>>>>>>        String sValue
8492>>>>>>>>>        Pointer pValue
8492>>>>>>>>>        Boolean bOk
8492>>>>>>>>>        Get Utf16ToBuffer pWideBuf eCharType iLen to pValue
8493>>>>>>>>>        If (not(ValidStringBufferLength(pValue))) Begin
8495>>>>>>>>>            Error DFERR_PROGRAM "Buffer exceeds maximum string size"
8496>>>>>>>>>>
8496>>>>>>>>>        End
8496>>>>>>>>>>
8496>>>>>>>>>        Move (PointerToString(pValue)) to sValue
8497>>>>>>>>>        Move (Free(pValue)) to bOk
8498>>>>>>>>>        Function_Return sValue
8499>>>>>>>>>    End_Function
8500>>>>>>>>>    
8500>>>>>>>>>    
8500>>>>>>>>>    // UTF8 functions that allow you to move between a UTF8 buffer and other single char OEM/ASNI
8500>>>>>>>>>    
8500>>>>>>>>>    Function Utf8FromBuffer Pointer pMultiCharBuffer Integer eCharType Returns Pointer
8502>>>>>>>>>        Pointer pWideBuf
8502>>>>>>>>>        Pointer pUtf8Buf
8502>>>>>>>>>        Integer iLen iMultiBufLen
8502>>>>>>>>>        Boolean bOk
8502>>>>>>>>>        Get Utf16FromBuffer pMultiCharBuffer eCharType (&iLen) to pWideBuf
8503>>>>>>>>>        If (iLen=0) Begin
8505>>>>>>>>>            Function_Return 0
8506>>>>>>>>>        End
8506>>>>>>>>>>
8506>>>>>>>>>        Move 0 to pUtf8Buf
8507>>>>>>>>>        Move (WideToMultiBuffer(CP_UTF8,pWideBuf,iLen,AddressOf(pUtf8Buf))) to iMultiBufLen
8508>>>>>>>>>        Move (Free(pWideBuf)) to bOk
8509>>>>>>>>>        Function_Return pUtf8Buf
8510>>>>>>>>>    End_Function
8511>>>>>>>>>    
8511>>>>>>>>>    Function Utf8FromStr String sValue Integer eCharType Returns Pointer
8513>>>>>>>>>        Pointer pValue
8513>>>>>>>>>        Get Utf8FromBuffer (AddressOf(sValue)) eCharType to pValue
8514>>>>>>>>>        Function_Return pValue
8515>>>>>>>>>    End_Function
8516>>>>>>>>>    
8516>>>>>>>>>    Function Utf8ToBuffer Pointer pMultiCharBuffer Integer eCharType Returns Pointer
8518>>>>>>>>>        Pointer pRetBuf pWideBuf
8518>>>>>>>>>        Integer iWideBufLen
8518>>>>>>>>>        Integer iRetBufLen
8518>>>>>>>>>        Boolean bOk
8518>>>>>>>>>        Get Utf16FromBuffer pMultiCharBuffer CP_UTF8 (&iWideBufLen) to pWideBuf
8519>>>>>>>>>        If (iWideBufLen=0) Begin
8521>>>>>>>>>            Function_Return 0
8522>>>>>>>>>        End
8522>>>>>>>>>>
8522>>>>>>>>>        Move 0 to pRetBuf
8523>>>>>>>>>        Move (WideToMultiBuffer(eCharType,pWideBuf,iWideBufLen,AddressOf(pRetBuf))) to iRetBufLen
8524>>>>>>>>>        Move (Free(pWideBuf)) to bOk
8525>>>>>>>>>        Function_Return pRetBuf
8526>>>>>>>>>    End_Function
8527>>>>>>>>>    
8527>>>>>>>>>    Function Utf8ToStr Pointer pWideBuf Integer eCharType Returns String
8529>>>>>>>>>        String sValue
8529>>>>>>>>>        Pointer pValue
8529>>>>>>>>>        Boolean bOk
8529>>>>>>>>>        Get Utf8ToBuffer pWideBuf eCharType to pValue
8530>>>>>>>>>        If (not(ValidStringBufferLength(pValue))) Begin
8532>>>>>>>>>            Error DFERR_PROGRAM "Buffer exceeds maximum string size"
8533>>>>>>>>>>
8533>>>>>>>>>        End
8533>>>>>>>>>>
8533>>>>>>>>>        Move (PointerToString(pValue)) to sValue
8534>>>>>>>>>        Move (Free(pValue)) to bOk
8535>>>>>>>>>        Function_Return sValue
8536>>>>>>>>>    End_Function
8537>>>>>>>>>    
8537>>>>>>>>>    // Variant functions that allow you to move between a variant string (wide char) and other
8537>>>>>>>>>    // buffer and string types. Normally a Move vVar to sVar does a OEM/Unicode translation. These
8537>>>>>>>>>    // allow you translate to other formats (UTF8, OEM and ANSI)
8537>>>>>>>>>    
8537>>>>>>>>>    // Create data buffer from variant string. data buffer is encoded by eCharType
8537>>>>>>>>>    Function VariantStrToBuffer Variant vValue Integer eCharType Returns Pointer
8539>>>>>>>>>        Pointer pBSTR pRetStr
8539>>>>>>>>>        Integer iLen iBufLen
8539>>>>>>>>>        Boolean bOk
8539>>>>>>>>>        Move 0 to pRetStr
8540>>>>>>>>>        Move (VariantStringLength( vValue)) to iLen
8541>>>>>>>>>        If (iLen) Begin
8543>>>>>>>>>            Move (DeRefPtr(AddressOf(vValue),8)) to pBSTR
8544>>>>>>>>>            Move (WideToMultiBuffer(eCharType,pBSTR,iLen,AddressOf(pRetStr))) to iBufLen
8545>>>>>>>>>        End
8545>>>>>>>>>>
8545>>>>>>>>>        Function_Return pRetStr
8546>>>>>>>>>    End_Function
8547>>>>>>>>>    
8547>>>>>>>>>    // Create string from variant string. data buffer is encoded by eCharType
8547>>>>>>>>>    
8547>>>>>>>>>    Function VariantStrToStr Variant vValue Integer eCharType Returns String
8549>>>>>>>>>        String sValue
8549>>>>>>>>>        Pointer pValue
8549>>>>>>>>>        Boolean bOk
8549>>>>>>>>>        Get VariantStrToBuffer vValue eCharType to pValue
8550>>>>>>>>>        If (not(ValidStringBufferLength(pValue))) Begin
8552>>>>>>>>>            Error DFERR_PROGRAM "Buffer exceeds maximum string size"
8553>>>>>>>>>>
8553>>>>>>>>>        End
8553>>>>>>>>>>
8553>>>>>>>>>        Move (PointerToString(pValue)) to sValue
8554>>>>>>>>>        Move (Free(pValue)) to bOk
8555>>>>>>>>>        Function_Return sValue
8556>>>>>>>>>    End_Function
8557>>>>>>>>>    
8557>>>>>>>>>    // Create variant string from data buffer. data buffer is encoded by eCharType
8557>>>>>>>>>    
8557>>>>>>>>>    Function VariantStrFromBuffer Pointer pSource Integer eCodeType Returns Variant
8559>>>>>>>>>        Variant vValue
8559>>>>>>>>>        Pointer pvValue
8559>>>>>>>>>        Boolean bOk
8559>>>>>>>>>        Pointer pWStr
8559>>>>>>>>>        Move "" to vValue
8560>>>>>>>>>        If (pSource) Begin
8562>>>>>>>>>            //Initialize pWstr variable so it has the correct type and AddressOf will return a proper pointer
8562>>>>>>>>>            Move 0 to pWStr
8563>>>>>>>>>            //Convert the Ansi string to Unicode
8563>>>>>>>>>            Move (MultiToWideBuffer( eCodeType, pSource, CStringSize(pSource), AddressOf(pWStr))) to bOk
8564>>>>>>>>>            //Initialize vValue variable so it has the correct type and AddressOf will return a proper pointer
8564>>>>>>>>>            Move 0 to vValue
8565>>>>>>>>>            Move (AddressOf(vValue)) to pvValue
8566>>>>>>>>>            //Change the Variant type to VT_BSTR
8566>>>>>>>>>            Move (StoreDw(pvValue,0,OLE_VT_Bstr)) to bOk
8567>>>>>>>>>            //Allocate a proper COM BSTR, assign the Unicode string, and store the BSTR in the Variant variable
8567>>>>>>>>>            Move (StorePtr(pvValue,8,SysAllocString(pWStr))) to bOk
8568>>>>>>>>>            //Now clear up the Unicode string, the Variant owns a BSTR copy of the string
8568>>>>>>>>>            Move (Free(pWStr)) to bOk
8569>>>>>>>>>        End
8569>>>>>>>>>>
8569>>>>>>>>>        Function_Return vValue
8570>>>>>>>>>    End_Function
8571>>>>>>>>>    
8571>>>>>>>>>    // Create variant string from data string. data string is encoded by eCharType
8571>>>>>>>>>    
8571>>>>>>>>>    Function VariantStrFromStr String sValue Integer eCodeType Returns Variant
8573>>>>>>>>>        Variant vValue
8573>>>>>>>>>        Get VariantStrFromBuffer (AddressOf(sValue)) eCodeType to vValue
8574>>>>>>>>>        Function_Return vValue
8575>>>>>>>>>    End_Function
8576>>>>>>>>>    
8576>>>>>>>>>    // Create buffer of utf16 data from variant.
8576>>>>>>>>>    // Returns newly created memory address and length (by reference)
8576>>>>>>>>>    Function VariantStrToUTF16 Variant vValue Integer ByRef iLen Returns Pointer
8578>>>>>>>>>        Pointer pBSTR pRetStr
8578>>>>>>>>>        Boolean bOk
8578>>>>>>>>>        Move 0 to pRetStr
8579>>>>>>>>>        Move (VariantStringLength( vValue)) to iLen
8580>>>>>>>>>        If (iLen) Begin
8582>>>>>>>>>            Move (DeRefPtr(AddressOf(vValue),8)) to pBSTR
8583>>>>>>>>>            Move (Alloc(iLen+1 * 2)) to pRetStr
8584>>>>>>>>>            Move (MemCopy(pRetStr,pBSTR,(iLen+1 * 2))) to bOk
8585>>>>>>>>>        End
8585>>>>>>>>>>
8585>>>>>>>>>        Function_Return pRetStr
8586>>>>>>>>>    End_Function
8587>>>>>>>>>    
8587>>>>>>>>>    // Create variant from buffer of utf16 data
8587>>>>>>>>>    Function VariantStrFromUTF16 Pointer pSource Returns Variant
8589>>>>>>>>>        Variant vValue
8589>>>>>>>>>        Pointer pvValue
8589>>>>>>>>>        Boolean bOk
8589>>>>>>>>>        Move "" to vValue
8590>>>>>>>>>        If (pSource) Begin
8592>>>>>>>>>            //Initialize pWstr variable so it has the correct type and AddressOf will return a proper pointer
8592>>>>>>>>>            //Initialize vValue variable so it has the correct type and AddressOf will return a proper pointer
8592>>>>>>>>>            Move 0 to vValue
8593>>>>>>>>>            Move (AddressOf(vValue)) to pvValue
8594>>>>>>>>>            //Change the Variant type to VT_BSTR
8594>>>>>>>>>            Move (StoreDw(pvValue,0,OLE_VT_Bstr)) to bOk
8595>>>>>>>>>            //Allocate a proper COM BSTR, assign the Unicode string, and store the BSTR in the Variant variable
8595>>>>>>>>>            Move (StorePtr(pvValue,8,SysAllocString(pSource))) to bOk
8596>>>>>>>>>        End
8596>>>>>>>>>>
8596>>>>>>>>>        Function_Return vValue
8597>>>>>>>>>    End_Function
8598>>>>>>>>>    
8598>>>>>>>>>    // Create Uchar array from variant string.
8598>>>>>>>>>    // Data buffer is encoded by eCharType
8598>>>>>>>>>    Function VariantStrToUCharArray Variant vValue Integer eCharType Returns UChar[]
8600>>>>>>>>>        Pointer pBSTR pRetStr
8600>>>>>>>>>        Integer iLen iBufLen
8600>>>>>>>>>        Boolean bOk
8600>>>>>>>>>        UChar[] UC1
8601>>>>>>>>>        Move 0 to pRetStr
8602>>>>>>>>>        Move (VariantStringLength( vValue)) to iLen
8603>>>>>>>>>        If (iLen) Begin
8605>>>>>>>>>            Move (DeRefPtr(AddressOf(vValue),8)) to pBSTR
8606>>>>>>>>>            If (eCharType=CP_UTF16) Begin
8608>>>>>>>>>                Move (iLen*2) to iBufLen
8609>>>>>>>>>                Move (ResizeArray(UC1,iBufLen)) to UC1
8610>>>>>>>>>                Move (MemCopy(AddressOf(UC1),pBSTR,iBufLen)) to bOk
8611>>>>>>>>>            End
8611>>>>>>>>>>
8611>>>>>>>>>            Else Begin
8612>>>>>>>>>                Move (WideToMultiBuffer(eCharType,pBSTR,iLen,AddressOf(pRetStr))) to iBufLen
8613>>>>>>>>>                Move (ResizeArray(UC1,iBufLen)) to UC1
8614>>>>>>>>>                Move (MemCopy(AddressOf(UC1),pRetStr,iBufLen)) to bOk
8615>>>>>>>>>                Move (Free(pRetStr)) to bOk
8616>>>>>>>>>            End
8616>>>>>>>>>>
8616>>>>>>>>>        End
8616>>>>>>>>>>
8616>>>>>>>>>        Function_Return UC1
8617>>>>>>>>>    End_Function
8618>>>>>>>>>    
8618>>>>>>>>>    // Create variant string from UChar array. data is encoded by eCharType
8618>>>>>>>>>    Function VariantStrFromUCharArray UChar[] ucSource Integer eCodeType Returns Variant
8620>>>>>>>>>        Variant vValue
8620>>>>>>>>>        Pointer pvValue
8620>>>>>>>>>        Boolean bOk
8620>>>>>>>>>        Pointer pWStr
8620>>>>>>>>>        Move "" to vValue
8621>>>>>>>>>        
8621>>>>>>>>>        //Initialize pWstr variable so it has the correct type and AddressOf will return a proper pointer
8621>>>>>>>>>        Move 0 to pWStr
8622>>>>>>>>>        //Convert the Ansi string to Unicode
8622>>>>>>>>>        If (eCodeType=CP_UTF16) Begin
8624>>>>>>>>>            Move 0 to ucSource[SizeOfArray(ucSource)]
8625>>>>>>>>>            Move 0 to ucSource[SizeOfArray(ucSource)]
8626>>>>>>>>>            Move (AddressOf(ucSource)) to pWStr
8627>>>>>>>>>        End
8627>>>>>>>>>>
8627>>>>>>>>>        Else Begin
8628>>>>>>>>>            Move (MultiToWideBuffer( eCodeType, AddressOf(ucSource), SizeOfArray(ucSource), AddressOf(pWStr))) to bOk
8629>>>>>>>>>        End
8629>>>>>>>>>>
8629>>>>>>>>>        //Initialize vValue variable so it has the correct type and AddressOf will return a proper pointer
8629>>>>>>>>>        Move 0 to vValue
8630>>>>>>>>>        Move (AddressOf(vValue)) to pvValue
8631>>>>>>>>>        //Change the Variant type to VT_BSTR
8631>>>>>>>>>        Move (StoreDw(pvValue,0,OLE_VT_Bstr)) to bOk
8632>>>>>>>>>        //Allocate a proper COM BSTR, assign the Unicode string, and store the BSTR in the Variant variable
8632>>>>>>>>>        Move (StorePtr(pvValue,8,SysAllocString(pWStr))) to bOk
8633>>>>>>>>>        //Now clear up the Unicode string, the Variant owns a BSTR copy of the string
8633>>>>>>>>>        If (eCodeType<>CP_UTF16) Begin
8635>>>>>>>>>            Move (Free(pWStr)) to bOk
8636>>>>>>>>>        End
8636>>>>>>>>>>
8636>>>>>>>>>        Function_Return vValue
8637>>>>>>>>>    End_Function
8638>>>>>>>>>    
8638>>>>>>>>>    
8638>>>>>>>>>    // UChar array conversions. Converts a passed uchar array with from-encoding to
8638>>>>>>>>>    // a new UChar array with to-encoding
8638>>>>>>>>>    
8638>>>>>>>>>    Function ConvertUCharArray UChar[] UCharData Integer iFromCP Integer iToCP Returns UChar[]
8640>>>>>>>>>        Pointer pFromBuf pToBuf
8640>>>>>>>>>        Integer iBytes iChars
8640>>>>>>>>>        Boolean bOk
8640>>>>>>>>>        
8640>>>>>>>>>        Move (SizeOfArray(UCharData)) to iBytes
8641>>>>>>>>>        If (iFromCP=iToCP or iBytes=0) Begin
8643>>>>>>>>>            Function_Return UCharData
8644>>>>>>>>>        End
8644>>>>>>>>>>
8644>>>>>>>>>        
8644>>>>>>>>>        If (iFromCP<>CP_UTF16) Begin
8646>>>>>>>>>            Move 0 to UCharData[iBytes] // extend to make sure we have 0 at end
8647>>>>>>>>>            Get Utf16FromBuffer (AddressOf(UCharData)) iFromCP (&iChars) to pFromBuf
8648>>>>>>>>>        End
8648>>>>>>>>>>
8648>>>>>>>>>        Else Begin
8649>>>>>>>>>            Move (iBytes/2) to iChars // if from is utf16
8650>>>>>>>>>        End
8650>>>>>>>>>>
8650>>>>>>>>>        
8650>>>>>>>>>        If (iToCP<>CP_UTF16) Begin
8652>>>>>>>>>            If (iFromCP=CP_UTF16) Begin
8654>>>>>>>>>                Get Utf16ToBuffer (AddressOf(UCharData)) iToCP iChars to pToBuf
8655>>>>>>>>>            End
8655>>>>>>>>>>
8655>>>>>>>>>            Else Begin
8656>>>>>>>>>                Get Utf16ToBuffer pFromBuf iToCP iChars to pToBuf
8657>>>>>>>>>                Move (Free(pFromBuf)) to bOk
8658>>>>>>>>>            End
8658>>>>>>>>>>
8658>>>>>>>>>            Move (CStringSize(pToBuf)) to iBytes
8659>>>>>>>>>        End
8659>>>>>>>>>>
8659>>>>>>>>>        Else Begin
8660>>>>>>>>>            Move (iChars*2) to iBytes
8661>>>>>>>>>            Move pFromBuf to pToBuf
8662>>>>>>>>>        End
8662>>>>>>>>>>
8662>>>>>>>>>        Move (ResizeArray(UCharData,iBytes)) to UCharData
8663>>>>>>>>>        Move (MemCopy(AddressOf(UCharData),pToBuf,iBytes)) to bOk
8664>>>>>>>>>        Move (Free(pToBuf)) to bOk
8665>>>>>>>>>        Function_Return UCharData
8666>>>>>>>>>    End_Function
8667>>>>>>>>>    
8667>>>>>>>>>    // Base64 Encoding functions that allow you to encode to and decode from strings and
8667>>>>>>>>>    // Variant strings. Binary data is always buffer
8667>>>>>>>>>    
8667>>>>>>>>>    Function Base64EncodeToStr Pointer pBinaryData Integer iBinaryLen Returns String
8669>>>>>>>>>        Pointer pBase64
8669>>>>>>>>>        String sResult
8669>>>>>>>>>        Integer iVoid
8669>>>>>>>>>        Move (Base64Encode(pBinaryData, iBinaryLen)) to pBase64
8670>>>>>>>>>        Move (PointerToString(pBase64)) to sResult
8671>>>>>>>>>        Move (Free(pBase64)) to iVoid
8672>>>>>>>>>        Function_Return sResult
8673>>>>>>>>>    End_Function
8674>>>>>>>>>    
8674>>>>>>>>>    Function Base64DecodeFromStr String sBase64 Integer ByRef iBinaryLen Returns Pointer
8676>>>>>>>>>        Pointer pBinaryData
8676>>>>>>>>>        String sBinary
8676>>>>>>>>>        Integer iVoid
8676>>>>>>>>>        Move (Base64Decode(AddressOf(sBase64), &iBinaryLen)) to pBinaryData
8677>>>>>>>>>        Function_Return pBinaryData
8678>>>>>>>>>    End_Function
8679>>>>>>>>>    
8679>>>>>>>>>    Function Base64EncodeToVariantStr Pointer pBinaryData Integer iBinaryLen Returns Variant
8681>>>>>>>>>        Pointer pBase64
8681>>>>>>>>>        Variant vVar
8681>>>>>>>>>        Integer iBase64Len iVoid
8681>>>>>>>>>        If (pBinaryData and iBinaryLen) Begin
8683>>>>>>>>>            Move (Base64Encode(pBinaryData,iBinaryLen)) to pBase64
8684>>>>>>>>>            Get  VariantStrFromBuffer pBase64 CP_ACP to vVar
8685>>>>>>>>>            Move (Free(pBase64)) to iVoid
8686>>>>>>>>>        End
8686>>>>>>>>>>
8686>>>>>>>>>        Function_Return vVar
8687>>>>>>>>>    End_Function
8688>>>>>>>>>    
8688>>>>>>>>>    Function Base64DecodeFromVariantStr Variant vBase64Str Integer ByRef iBinaryLen Returns Pointer
8690>>>>>>>>>        Pointer pBase64 pBinaryData
8690>>>>>>>>>        Integer iVoid
8690>>>>>>>>>        Move 0 to iBinaryLen
8691>>>>>>>>>        Get VariantStrToBuffer vBase64Str CP_ACP to pBase64
8692>>>>>>>>>        If (pBase64) Begin
8694>>>>>>>>>            Move (Base64Decode(pBase64,&iBinaryLen)) to pBinaryData
8695>>>>>>>>>            Move (Free(pBase64)) to iVoid
8696>>>>>>>>>        End
8696>>>>>>>>>>
8696>>>>>>>>>        Function_Return pBinaryData
8697>>>>>>>>>    End_Function
8698>>>>>>>>>    
8698>>>>>>>>>    // base 64 Encode from Uchar array to a Uchar array
8698>>>>>>>>>    Function Base64EncodeUCharArray UChar[] UCharData Returns UChar[]
8700>>>>>>>>>        Pointer pBase64
8700>>>>>>>>>        Integer iLen
8700>>>>>>>>>        Boolean bOk
8700>>>>>>>>>        
8700>>>>>>>>>        Move (SizeOfArray(UCharData)) to iLen
8701>>>>>>>>>        If (iLen) Begin
8703>>>>>>>>>            Move (Base64Encode(AddressOf(UCharData), iLen)) to pBase64
8704>>>>>>>>>            Move (CStringSize(pBase64)) to iLen
8705>>>>>>>>>            Move (ResizeArray(UCharData,iLen)) to UCharData
8706>>>>>>>>>            Move (MemCopy(AddressOf(UCharData),pBase64,iLen)) to bOk
8707>>>>>>>>>            Move (Free(pBase64)) to bOk
8708>>>>>>>>>        End
8708>>>>>>>>>>
8708>>>>>>>>>        Function_Return UCharData
8709>>>>>>>>>    End_Function
8710>>>>>>>>>    
8710>>>>>>>>>    // base 64 Decode from Uchar array to a Uchar array
8710>>>>>>>>>    Function Base64DecodeUCharArray UChar[] UCharData Returns UChar[]
8712>>>>>>>>>        Pointer pData
8712>>>>>>>>>        Integer iLen
8712>>>>>>>>>        Boolean bOk
8712>>>>>>>>>        
8712>>>>>>>>>        Move (SizeOfArray(UCharData)) to iLen
8713>>>>>>>>>        If (iLen) Begin
8715>>>>>>>>>            Move 0 to UCharData[iLen]
8716>>>>>>>>>            Move (Base64Decode(AddressOf(UCharData),&iLen)) to pData
8717>>>>>>>>>            Move (ResizeArray(UCharData,iLen)) to UCharData
8718>>>>>>>>>            Move (MemCopy(AddressOf(UCharData),pData,iLen)) to bOk
8719>>>>>>>>>            Move (Free(pData)) to bOk
8720>>>>>>>>>        End
8720>>>>>>>>>>
8720>>>>>>>>>        Function_Return UCharData
8721>>>>>>>>>    End_Function
8722>>>>>>>>>    
8722>>>>>>>>>End_Class
8723>>>>>>>>>
8723>>>>>>>>>
8723>>>>>>>
8723>>>>>>>// it is important that psFileName is defined. If blank, the registry may be accessed. We will check all WritePrivateProfileString
8723>>>>>>>// and GetPrivateProfileString to make sure that a file is defined.
8723>>>>>>>
8723>>>>>>>
8723>>>>>>>External_Function WritePrivateProfileStringW "WritePrivateProfileStringW" Kernel32.dll ;    WString sSection ;    WString sKeyName ;    WString sValue ;    WString sFileName ;    Returns Integer
8724>>>>>>>
8724>>>>>>>
8724>>>>>>>// When called directly, be sure to use WString types.
8724>>>>>>>External_Function GetPrivateProfileStringW "GetPrivateProfileStringW" Kernel32.dll ;    Pointer lpSection ;    Pointer lpKeyName ;    Pointer lpDefault ;    Pointer lpsValue ;    Integer nSize ;    WString lpFileName ;    Returns Integer
8725>>>>>>>
8725>>>>>>>External_Function WritePrivateProfileStringA "WritePrivateProfileStringA" Kernel32.dll ;    String sSection ;    String sKeyName ;    String sValue ;    String sFileName ;    Returns Integer
8726>>>>>>>    
8726>>>>>>>// When called directly, be sure to use String types.
8726>>>>>>>External_Function GetPrivateProfileStringA "GetPrivateProfileStringA" Kernel32.dll ;    Pointer lpSection ;    Pointer lpKeyName ;    Pointer lpDefault ;    Pointer lpsValue ;    Integer nSize ;    String lpFileName ;    Returns Integer
8727>>>>>>>    
8727>>>>>>>// Wrapper redirecting direct access to the wide for backwards compatibility (parameters will be auto converted)
8727>>>>>>>Define WritePrivateProfileString for WritePrivateProfileStringW
8727>>>>>>>    
8727>>>>>>>
8727>>>>>>>// Wrapper Function GetPrivateProfileString for backwards compatibility
8727>>>>>>>Function GetPrivateProfileString Global ;    Pointer pSection ;    Pointer pKeyName ;    Pointer pDefault ;    Pointer lpsValue ;    Integer nSize ;    String  sFileName ;    Returns Integer
8729>>>>>>>    
8729>>>>>>>    Integer iResult
8729>>>>>>>    UWide   uwSection uwKeyName uwDefault uwValue uwFileName
8729>>>>>>>    UWide   uwSection uwKeyName uwDefault uwValue uwFileName
8729>>>>>>>
8729>>>>>>>    Send StringToWide pSection (&uwSection)
8730>>>>>>>    Send StringToWide pKeyName (&uwKeyName)
8731>>>>>>>    Send StringToWide pDefault (&uwDefault)    
8732>>>>>>>    Send StringToWide (AddressOf(sFileName)) (&uwFileName)
8733>>>>>>>                           
8733>>>>>>>    Send WideSetBuffer lpsValue (AddressOf(nSize)) (&uwValue) 
8734>>>>>>>       
8734>>>>>>>    Move (GetPrivateProfileStringW (uwSection.lpUText, uwKeyName.lpUText, uwDefault.lpUText, uwValue.lpUText, nSize, uwFileName.lpUText)) to iResult
8735>>>>>>>        
8735>>>>>>>    Send WideToStringSized (&uwValue) lpsValue iResult      // iResult is number of characters
8736>>>>>>>    
8736>>>>>>>    Function_Return iResult
8737>>>>>>>End_Function
8738>>>>>>> 
8738>>>>>>>
8738>>>>>>>Class cIniFile is a cObject
8739>>>>>>>    Procedure Construct_Object
8741>>>>>>>        Forward Send Construct_Object
8743>>>>>>>        
8743>>>>>>>        
8743>>>>>>>        // Set to false to use the narrow windows API's to access the ini files. This allows UTF-8 data to be written
8743>>>>>>>        // and read (except if the file is stored as UTF-16) but has the downside of not supporting unicode file paths.
8743>>>>>>>        Property Boolean pbWideAPI True
8744>>>>>>>        
8744>>>>>>>        // Set to true to save the ini file as UTF-16LE (with a BOM). This allows unicode data to be saved properly
8744>>>>>>>        // using the wide API's. Note that pbWideAPI should be true to use this property. Existing ini files will be
8744>>>>>>>        // converted on first write (WriteString).
8744>>>>>>>        Property Boolean pbStoreAsUTF16 False
8745>>>>>>>        
8745>>>>>>>        Property String psPrivate_FileName ""
8746>>>>>>>        Property Boolean pbPrivate_FirstWrite True
8747>>>>>>>    End_Procedure
8748>>>>>>>    
8748>>>>>>>    Procedure Set psFileName String sVal
8750>>>>>>>        Set pbPrivate_FirstWrite to True
8751>>>>>>>        Set psPrivate_FileName to sVal
8752>>>>>>>    End_Procedure
8753>>>>>>>    
8753>>>>>>>    Function psFileName Returns String
8755>>>>>>>        Function_Return (psPrivate_FileName(Self))
8756>>>>>>>    End_Function
8757>>>>>>>    
8757>>>>>>>    Procedure InitFile
8759>>>>>>>        Boolean bExists bHasBom
8759>>>>>>>        Integer iChnl
8759>>>>>>>        UChar[] ucData
8760>>>>>>>        Handle hoTranslate
8760>>>>>>>        
8760>>>>>>>        If (pbPrivate_FirstWrite(Self) and pbStoreAsUTF16(Self) and pbWideAPI(Self)) Begin
8762>>>>>>>            File_Exist (psPrivate_FileName(Self)) bExists
8763>>>>>>>            If (not(bExists)) Begin
8765>>>>>>>                //  Create the file with a UTF-16 BOM so
8765>>>>>>>                Move (Seq_New_Channel()) to iChnl
8766>>>>>>>                Direct_Output channel iChnl ("binary:" + psPrivate_FileName(Self))
8768>>>>>>>                Write channel iChnl C_BOM_UTF16LE
8770>>>>>>>                Close_Output channel iChnl
8772>>>>>>>                Send Seq_Release_Channel iChnl
8773>>>>>>>            End
8773>>>>>>>>
8773>>>>>>>            Else Begin
8774>>>>>>>                //  Check for BOM
8774>>>>>>>                Move (Seq_New_Channel()) to iChnl
8775>>>>>>>                Direct_Input channel iChnl ("binary:" + psPrivate_FileName(Self))
8777>>>>>>>                Read_Block channel iChnl ucData 2
8779>>>>>>>                
8779>>>>>>>                Move (SizeOfArray(ucData) >= 2 and ucData[0] = C_BOM_UTF16LEc1 and ucData[1] = C_BOM_UTF16LEc2) to bHasBom
8780>>>>>>>                
8780>>>>>>>                //  If no BOM we'll have to read the entire file to convert it
8780>>>>>>>                If (not(bHasBom)) Begin
8782>>>>>>>                    Set_Channel_Position iChnl to 0
8783>>>>>>>>
8783>>>>>>>                    Read_Block ucData -1
8784>>>>>>>                End
8784>>>>>>>>
8784>>>>>>>
8784>>>>>>>                Close_Input channel iChnl
8786>>>>>>>                
8786>>>>>>>                If (not(bHasBom)) Begin
8788>>>>>>>                    //  Convert thedata
8788>>>>>>>                    Get Create (RefClass(cCharTranslate)) to hoTranslate
8789>>>>>>>                    Get ConvertUCharArray of hoTranslate ucData CP_OEMCP CP_UTF16 to ucData
8790>>>>>>>                    
8790>>>>>>>                    //  Write out the UTF 16 file with BOM
8790>>>>>>>                    Direct_Output channel iChnl ("binary:" + psPrivate_FileName(Self))
8792>>>>>>>                    Write channel iChnl C_BOM_UTF16LE
8794>>>>>>>                    
8794>>>>>>>                    Write channel iChnl ucData
8796>>>>>>>                    
8796>>>>>>>                    Close_Output channel iChnl
8798>>>>>>>                    
8798>>>>>>>                    Send Destroy of hoTranslate
8799>>>>>>>                End
8799>>>>>>>>
8799>>>>>>>                
8799>>>>>>>                Send Seq_Release_Channel iChnl
8800>>>>>>>            End
8800>>>>>>>>
8800>>>>>>>            
8800>>>>>>>            Set pbPrivate_FirstWrite to False
8801>>>>>>>        End
8801>>>>>>>>
8801>>>>>>>    End_Procedure
8802>>>>>>>    
8802>>>>>>>    Procedure WriteString String sSection String sKey String sValue
8804>>>>>>>        Boolean bSuccess
8804>>>>>>>        String sFileName
8804>>>>>>>        
8804>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8806>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8807>>>>>>>>
8807>>>>>>>            Procedure_Return
8808>>>>>>>        End
8808>>>>>>>>
8808>>>>>>>        
8808>>>>>>>        Send InitFile
8809>>>>>>>        
8809>>>>>>>        // All parameters are Strings and are converted to WString upon invoking the external function.
8809>>>>>>>        If (pbWideAPI(Self)) Begin
8811>>>>>>>            Move (WritePrivateProfileStringW(sSection, sKey, sValue, psPrivate_FileName(Self))) to bSuccess
8812>>>>>>>        End
8812>>>>>>>>
8812>>>>>>>        Else Begin
8813>>>>>>>            Move (Utf8ToAnsi(psPrivate_FileName(Self))) to sFileName
8814>>>>>>>            Move (WritePrivateProfileStringA(sSection, sKey, sValue, sFilename)) to bSuccess 
8815>>>>>>>        End
8815>>>>>>>>
8815>>>>>>>        If (bSuccess = False) ;            Error DFERR_INI_FILE C_$CannotWriteToTheIniFile
8818>>>>>>>    End_Procedure
8819>>>>>>>    
8819>>>>>>>    
8819>>>>>>>    Function ReadString String sSection String sKey String sDefault Returns String
8821>>>>>>>        Integer iNumChars iSizeValue
8821>>>>>>>        WString wValue wFileName wSection wKey wDefault
8821>>>>>>>        String sFileName sValue
8821>>>>>>>        
8821>>>>>>>        Move 2047 to iSizeValue
8822>>>>>>>        Move (Repeat(" ", iSizeValue)) to sValue
8823>>>>>>>        
8823>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8825>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8826>>>>>>>>
8826>>>>>>>            Function_Return ''
8827>>>>>>>        End
8827>>>>>>>>
8827>>>>>>>        
8827>>>>>>>        If (pbWideAPI(Self)) Begin
8829>>>>>>>            Move sSection to wSection
8830>>>>>>>            Move sKey to wKey
8831>>>>>>>            Move sDefault to wDefault
8832>>>>>>>            Move sValue to wValue
8833>>>>>>>            Move (GetPrivateProfileStringW(AddressOf(wSection), AddressOf(wKey), AddressOf(wDefault), AddressOf(wValue), iSizeValue, psPrivate_FileName(Self))) to iNumChars
8834>>>>>>>            Move wValue to sValue
8835>>>>>>>        End
8835>>>>>>>>
8835>>>>>>>        Else Begin
8836>>>>>>>            Move (Utf8ToAnsi(psPrivate_FileName(Self))) to sFileName
8837>>>>>>>            Move (GetPrivateProfileStringA(AddressOf(sSection), AddressOf(sKey), AddressOf(sDefault), AddressOf(sValue), iSizeValue, sFileName)) to iNumChars
8838>>>>>>>        End
8838>>>>>>>>
8838>>>>>>>        
8838>>>>>>>        Function_Return  (CString(sValue))
8839>>>>>>>    End_Function
8840>>>>>>>    
8840>>>>>>>    Function SectionExists String sSection Returns Boolean
8842>>>>>>>        // A section exists only if it has at least one Key. A section with no keys is said not to exist
8842>>>>>>>        Handle hoKeys
8842>>>>>>>        Integer icKey iKey
8842>>>>>>>        
8842>>>>>>>        Get Create U_ARRAY to hoKeys
8843>>>>>>>        Send ReadSection sSection hoKeys
8844>>>>>>>        Get Item_Count of hoKeys to icKey
8845>>>>>>>        Send Destroy of hoKeys
8846>>>>>>>        
8846>>>>>>>        Function_Return (icKey >0)
8847>>>>>>>    End_Function
8848>>>>>>>    
8848>>>>>>>    Procedure ReadSection WString wSection Handle hoArray
8850>>>>>>>        Integer iNumChars iSizeValue iPos
8850>>>>>>>        Pointer lpsKeys
8850>>>>>>>        WString wKeys wKey
8850>>>>>>>        
8850>>>>>>>        Move 16384 to iSizeValue
8851>>>>>>>        Move (Repeat(character(0),  iSizeValue)) to wKeys
8852>>>>>>>        
8852>>>>>>>        Move (AddressOf(wKeys)) to lpsKeys
8853>>>>>>>        
8853>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8855>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8856>>>>>>>>
8856>>>>>>>            Procedure_Return
8857>>>>>>>        End
8857>>>>>>>>
8857>>>>>>>        // The last parameter is a String and is converted to WString upon invoking the external function.
8857>>>>>>>        Move (GetPrivateProfileStringW(AddressOf(wSection), 0, 0, lpsKeys, Length(wKeys), psPrivate_FileName(Self))) to iNumChars
8858>>>>>>>        If (iNumChars >0) Begin
8860>>>>>>>            Repeat
8860>>>>>>>>
8860>>>>>>>                Move (Pos(Character(0),wKeys)) to iPos
8861>>>>>>>                If (iPos >1) Begin
8863>>>>>>>                    Move (Left(wKeys,iPos -1))  to wKey
8864>>>>>>>                    Move (Right(wKeys,Length(wKeys) - iPos)) to wKeys
8865>>>>>>>                    Set Value of hoArray (Item_Count(hoArray)) to wKey
8866>>>>>>>                End
8866>>>>>>>>
8866>>>>>>>            Until (iPos <=1)
8868>>>>>>>        End
8868>>>>>>>>
8868>>>>>>>    End_Procedure
8869>>>>>>>    
8869>>>>>>>    Procedure ReadSections Handle hoArray
8871>>>>>>>        Integer iNumChars iSizeValue iPos
8871>>>>>>>        Pointer lpwSections
8871>>>>>>>        WString wSections
8871>>>>>>>        String sSection
8871>>>>>>>        
8871>>>>>>>        Move 16384 to iSizeValue
8872>>>>>>>        
8872>>>>>>>        Move (Repeat(character(0),  iSizeValue)) to wSections
8873>>>>>>>        Move (AddressOf(wSections)) to lpwSections
8874>>>>>>>        
8874>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8876>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8877>>>>>>>>
8877>>>>>>>            Procedure_Return
8878>>>>>>>        End
8878>>>>>>>>
8878>>>>>>>        // The last parameter is a String and is converted to WString upon invoking the external function.
8878>>>>>>>        Move (GetPrivateProfileStringW(0, 0, 0, lpwSections, Length(wSections), psPrivate_FileName(Self))) to iNumChars
8879>>>>>>>        If (iNumChars >0) Begin
8881>>>>>>>            Repeat
8881>>>>>>>>
8881>>>>>>>                Move (Pos(Character(0),wSections)) to iPos
8882>>>>>>>                If (iPos >1) Begin
8884>>>>>>>                    Move (Left(wSections,iPos -1)) to sSection
8885>>>>>>>                    Move (Right(wSections, Length(wSections) - iPos)) to wSections
8886>>>>>>>                    Set Value of hoArray (Item_Count(hoArray)) to sSection
8887>>>>>>>                End
8887>>>>>>>>
8887>>>>>>>            Until (iPos <=1)
8889>>>>>>>        End
8889>>>>>>>>
8889>>>>>>>        
8889>>>>>>>    End_Procedure
8890>>>>>>>    
8890>>>>>>>    Procedure DeleteSection String sSection
8892>>>>>>>        
8892>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8894>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8895>>>>>>>>
8895>>>>>>>            Procedure_Return
8896>>>>>>>        End
8896>>>>>>>>
8896>>>>>>>        If (WritePrivateProfileString(sSection, "", "", psPrivate_FileName(Self)) = 0) ;            Error DFERR_INI_FILE C_$CanNotDeleteSection
8899>>>>>>>    End_Procedure
8900>>>>>>>    
8900>>>>>>>    Procedure DeleteKey String sSection String sKey
8902>>>>>>>        Integer iVoid
8902>>>>>>>        If (trim(psPrivate_FileName(Self))="") Begin
8904>>>>>>>            Error DFERR_INI_FILE "Ini file name not defined"
8905>>>>>>>>
8905>>>>>>>            Procedure_Return
8906>>>>>>>        End
8906>>>>>>>>
8906>>>>>>>        Move (WritePrivateProfileString(sSection, sKey, "", psPrivate_FileName(Self))) to iVoid
8907>>>>>>>    End_Procedure
8908>>>>>>>    
8908>>>>>>>    Function KeyExists String sSection String sKey Returns Boolean
8910>>>>>>>        Handle hoKeys
8910>>>>>>>        Integer iKey
8910>>>>>>>        Boolean bExists
8910>>>>>>>        
8910>>>>>>>        Move (False) to bExists
8911>>>>>>>        
8911>>>>>>>        Move (Uppercase(sKey)) to sKey
8912>>>>>>>        
8912>>>>>>>        Get Create U_ARRAY to hoKeys
8913>>>>>>>        
8913>>>>>>>        Send ReadSection sSection hoKeys
8914>>>>>>>        For iKey from 0 to (Item_Count(hoKeys) -1)
8920>>>>>>>>
8920>>>>>>>            If (sKey = Uppercase(Value(hoKeys, iKey))) Begin
8922>>>>>>>                Move (True) to bExists
8923>>>>>>>            End
8923>>>>>>>>
8923>>>>>>>        Loop
8924>>>>>>>>
8924>>>>>>>        
8924>>>>>>>        Send Destroy of hoKeys
8925>>>>>>>        
8925>>>>>>>        Function_Return bExists
8926>>>>>>>    End_Function
8927>>>>>>>    
8927>>>>>>>End_Class
8928>>>>>
8928>>>>>Class cWorkspace is a cObject
8929>>>>>    
8929>>>>>    Procedure Construct_Object
8931>>>>>        Forward Send Construct_Object
8933>>>>>        
8933>>>>>        
8933>>>>>        Property String psAppSrcPath
8934>>>>>        Property String psBitmapPath
8935>>>>>        Property String psDataPath
8936>>>>>        Property String psDdSrcPath
8937>>>>>        Property String psDescription
8938>>>>>        Property String psFileList
8939>>>>>        Property String psHelpPath
8940>>>>>        Property String psHome
8941>>>>>        Property String psIdeSrcPath
8942>>>>>        Property String psProgramPath
8943>>>>>        Property String psAppHtmlPath
8944>>>>>        Property String psWorkspaceName
8945>>>>>        Property String psWorkspaceWSFile
8946>>>>>        Property String psConnectionIni
8947>>>>>        
8947>>>>>        Property String psSystemDfPath // took from the Registry!
8948>>>>>        Property String psSystemMakePath // took from the Registry!
8949>>>>>        Property String psDfPath        // Calculated
8950>>>>>        
8950>>>>>        Property Boolean pbWorkspaceOpened False // used internally to tell if we are switching workspaces
8951>>>>>        
8951>>>>>    End_Procedure
8952>>>>>    
8952>>>>>    Function FullPathNames String sShortPathNames Returns String
8954>>>>>        String sFileName
8954>>>>>        String sFullPathNames 
8954>>>>>        WString sFullPathName sShortPathName
8954>>>>>        Pointer lpsFilePart
8954>>>>>        Integer icChar // the number of characters returned
8954>>>>>        Integer iPos
8954>>>>>        
8954>>>>>        Move (Pos(";", sShortPathNames)) to iPos
8955>>>>>        While (length(sShortPathNames) >0)
8959>>>>>            If (iPos =0) Begin
8961>>>>>                Move sShortPathNames to sShortPathName
8962>>>>>                Move "" to sShortPathNames
8963>>>>>            End
8963>>>>>>
8963>>>>>            Else Begin // multiple paths
8964>>>>>                Move (Left(sShortPathNames, iPos -1)) to sShortPathName
8965>>>>>                Move (Right(sShortPathNames, length(sShortPathNames) -iPos)) to sShortPathNames // remove this path from the paths
8966>>>>>            End
8966>>>>>>
8966>>>>>            Move (Repeat(character(0), 4096)) to sFullPathName
8967>>>>>            Move -1 to lpsFilePart
8968>>>>>            Move (GetFullPathNameW(sShortPathName, 4096, AddressOf(sFullPathName), AddressOf(lpsFilePart))) to icChar
8969>>>>>            Append sFullPathNames (CString(sFullPathName))
8970>>>>>            If (sShortPathNames <>"") ;                Append sFullPathNames ";"
8973>>>>>            Move (Pos(";", sShortPathNames)) to iPos
8974>>>>>        Loop
8975>>>>>>
8975>>>>>        
8975>>>>>        Function_Return sFullPathNames
8976>>>>>    End_Function
8977>>>>>    
8977>>>>>    Function GetApplicationPath Returns String
8979>>>>>        // Returns the path of the Application (no trailing "\")
8979>>>>>        WString wApplicationFileName 
8979>>>>>        Boolean bRemoved
8979>>>>>        Integer iNumChars
8979>>>>>        String sFilename sPath
8979>>>>>        
8979>>>>>        Move (Repeat(Character(0), 1024)) to wApplicationFileName
8980>>>>>        Move (GetModuleFileNameW(0, AddressOf(wApplicationFileName), 1024)) to iNumChars
8981>>>>>        Move (CString(wApplicationFileName)) to wApplicationFileName
8982>>>>>        
8982>>>>>        Move (PathRemoveFileSpecW(AddressOf(wApplicationFileName))) to bRemoved
8983>>>>>        Move (CString(wApplicationFileName)) to sPath
8984>>>>>        
8984>>>>>        If (Right(sPath, 1) ="\") ;            Move (Left(sPath, Length(sPath) -1)) to sPath
8987>>>>>        Function_Return sPath
8988>>>>>    End_Function
8989>>>>>    
8989>>>>>    Procedure DoClearPaths
8991>>>>>        // Call this prior to changing from one WorkspAce to another
8991>>>>>        // if you don't, OpenWorkspaceFile will ignore the new paths.
8991>>>>>        Set psHome           to ""
8992>>>>>        Set psAppSrcPath     to ""
8993>>>>>        Set psBitmapPath     to ""
8994>>>>>        Set psDataPath       to ""
8995>>>>>        Set psDdSrcPath      to ""
8996>>>>>        Set psDescription    to ""
8997>>>>>        Set psFileList       to ""
8998>>>>>        Set psHelpPath       to ""
8999>>>>>        Set psIdeSrcPath     to ""
9000>>>>>        Set psAppHtmlPath    to ""
9001>>>>>        Set psProgramPath    to ""
9002>>>>>        Set psWorkspaceName  to ""
9003>>>>>        Set psSystemDfPath   to ""
9004>>>>>        Set psSystemMakePath to ""
9005>>>>>        Set psWorkspaceWSFile to ""
9006>>>>>        Set psConnectionIni to ""
9007>>>>>    End_Procedure
9008>>>>>    
9008>>>>>    Function OpenWorkspaceFile String sWorkspaceFile Returns Integer
9010>>>>>        WString wApplicationStartPath
9010>>>>>        String sWsName // name of Workspace is inferred from the Workspacefile name
9010>>>>>        Boolean bRemoved
9010>>>>>        Handle hoIniFile
9010>>>>>        Boolean bSuccess // call succeeded?
9010>>>>>        String sOldDirectory
9010>>>>>        String sSystemDfPath sSystemMakePath
9010>>>>>        Boolean bExist // does the WS file exist?
9010>>>>>        Boolean bChangingWorkspace
9010>>>>>        
9010>>>>>        String sHome sAppSrcPath sBitmapPath sDataPath sDdSrcPath sDescription sAppHtmlPath
9010>>>>>        String sFileList sHelpPath sIdeSrcPath sProgramPath sWorkspaceName sConnectionIni
9010>>>>>        
9010>>>>>        Set psWorkspaceWSFile to ""
9011>>>>>        If (sWorkspaceFile ="") ;            Function_Return wsWorkspaceFileNotFound
9014>>>>>        
9014>>>>>        // Append extension if not supplied...
9014>>>>>        If (Uppercase(Right(Trim(sWorkspaceFile),3)) <> ".WS") Begin
9016>>>>>            Move (sWorkspaceFile-".ws") to sWorkspaceFile
9017>>>>>        End
9017>>>>>>
9017>>>>>        
9017>>>>>        Get pbWorkspaceOpened to bChangingWorkspace // if we had an existing workspace. We are changing
9018>>>>>        
9018>>>>>        If (IsFilenameQualified(sWorkspaceFile) = False) Begin
9020>>>>>            // Set the properties to the paths of the Workspace
9020>>>>>            // Find the WS file (with program)...
9020>>>>>            Get GetApplicationPath to wApplicationStartPath
9021>>>>>            
9021>>>>>            Move sWorkspaceFile to sWsName
9022>>>>>            Move (wApplicationStartPath +"\" +sWorkspaceFile) to sWorkspaceFile
9023>>>>>        End
9023>>>>>>
9023>>>>>        Else Begin
9024>>>>>            Move (ExtractFileName(sWorkspaceFile)) to sWsName
9025>>>>>            
9025>>>>>            Move sWorkspaceFile to wApplicationStartPath
9026>>>>>            Move (PathRemoveFileSpecW(AddressOf(wApplicationStartPath))) to bRemoved
9027>>>>>        End
9027>>>>>>
9027>>>>>        
9027>>>>>        // Ensure that the file can be found...
9027>>>>>        //File_Exist (ToAnsi(sWorkspaceFile)) bExist        // [JVH] 8.3.8.0 Convert filename to Ansi
9027>>>>>        // [JVH] Turn off support for
9027>>>>>        // Ansi extended characters in workspace until we can
9027>>>>>        // resolve all open issues
9027>>>>>        Set psWorkspaceWSFile to sWorkspaceFile
9028>>>>>        File_Exist sWorkspaceFile bExist
9029>>>>>        If (bExist = False) ;            Function_Return wsWorkspaceFileNotFound
9032>>>>>        
9032>>>>>        Get psHome           to sHome
9033>>>>>        Get psAppSrcPath     to sAppSrcPath
9034>>>>>        Get psAppHtmlPath    to sAppHtmlPath
9035>>>>>        Get psBitmapPath     to sBitmapPath
9036>>>>>        Get psDataPath       to sDataPath
9037>>>>>        Get psDdSrcPath      to sDdSrcPath
9038>>>>>        Get psDescription    to sDescription
9039>>>>>        Get psFileList       to sFileList
9040>>>>>        Get psHelpPath       to sHelpPath
9041>>>>>        Get psIdeSrcPath     to sIdeSrcPath
9042>>>>>        Get psProgramPath    to sProgramPath
9043>>>>>        Get psSystemDfPath   to sSystemDfPath
9044>>>>>        Get psSystemMakePath to sSystemMakePath
9045>>>>>        Get psWorkspaceName  to sWorkspaceName
9046>>>>>        Get psConnectionIni to sConnectionIni
9047>>>>>        
9047>>>>>        Get_Current_Directory to sOldDirectory
9048>>>>>        // Note- this conversion is temporarily rolled back
9048>>>>>        //Move (SetCurrentDirectory(ToAnsi(CString(wApplicationStartPath)))) To bSuccess    // [JVH] 8.3.8.0 Convert AppStartPath to ANSI
9048>>>>>        Move (SetCurrentDirectory(CString(wApplicationStartPath))) to bSuccess
9049>>>>>        
9049>>>>>        Get Create U_cIniFile to hoIniFile
9050>>>>>        Set pbWideAPI of hoIniFile to False
9051>>>>>        Set psFilename of hoIniFile to sWorkspaceFile
9052>>>>>        
9052>>>>>        If (sHome ="") ;            Get ReadString of hoIniFile "Workspace" "Home" ""          to sHome
9055>>>>>        If (sAppSrcPath ="") ;            Get ReadString of hoIniFile "Workspace" "AppSrcPath" ""    to sAppSrcPath
9058>>>>>        If (sAppHtmlPath ="") ;            Get ReadString of hoIniFile "Workspace" "AppHtmlPath" ""   to sAppHtmlPath
9061>>>>>        If (sBitmapPath ="") ;            Get ReadString of hoIniFile "Workspace" "BitmapPath" ""    to sBitmapPath
9064>>>>>        If (sDataPath ="") ;            Get ReadString of hoIniFile "Workspace" "DataPath" ""      to sDataPath
9067>>>>>        If (sDdSrcPath ="") ;            Get ReadString of hoIniFile "Workspace" "DdSrcPath" ""     to sDdSrcPath
9070>>>>>        If (sDescription ="") ;            Get ReadString of hoIniFile "Workspace" "Description" ""   to sDescription
9073>>>>>        If (sFileList ="") ;            Get ReadString of hoIniFile "Workspace" "FileList" ""      to sFileList
9076>>>>>        If (sHelpPath ="") ;            Get ReadString of hoIniFile "Workspace" "HelpPath" ""      to sHelpPath
9079>>>>>        If (sIdeSrcPath ="") ;            Get ReadString of hoIniFile "Workspace" "IdeSrcPath" ""    to sIdeSrcPath
9082>>>>>        If (sProgramPath ="") ;            Get ReadString of hoIniFile "Workspace" "ProgramPath" ""   to sProgramPath
9085>>>>>        If (sWorkspaceName ="") ;            Move (Left(sWsName, Length(sWsName) -3))                   to sWorkspaceName
9088>>>>>        If (sConnectionIni ="") ;            Get ReadString of hoIniFile "Workspace" "ConnectionIni" ""   to sConnectionIni
9091>>>>>        
9091>>>>>        If (sSystemDfPath ="") ;            Set psSystemDfPath   to (VdfSystemDfPath(Self))
9094>>>>>        If (sSystemMakePath ="") ;            Set psSystemMakePath to (VdfSystemMakePath(Self))
9097>>>>>        
9097>>>>>        Set psHome          to (FullPathNames(Self, sHome))
9098>>>>>        
9098>>>>>        // Set CWD to Home...
9098>>>>>        Move (SetCurrentDirectory(sHome)) to bSuccess
9099>>>>>        Set psAppSrcPath    to (FullPathNames(Self, sAppSrcPath))
9100>>>>>        Set psAppHtmlPath   to (FullPathNames(Self, sAppHtmlPath))
9101>>>>>        Set psBitmapPath    to (FullPathNames(Self, sBitmapPath))
9102>>>>>        Set psDataPath      to (FullPathNames(Self, sDataPath))
9103>>>>>        Set psDdSrcPath     to (FullPathNames(Self, sDdSrcPath))
9104>>>>>        Set psFileList      to (FullPathNames(Self, sFileList))
9105>>>>>        Set psHelpPath      to (FullPathNames(Self, sHelpPath))
9106>>>>>        Set psIdeSrcPath    to (FullPathNames(Self, sIdeSrcPath))
9107>>>>>        Set psProgramPath   to (FullPathNames(Self, sProgramPath))
9108>>>>>        Set psConnectionIni to (FullPathNames(Self, sConnectionIni))
9109>>>>>        
9109>>>>>        Set psWorkspaceName to sWorkspaceName
9110>>>>>        Set psDescription   to sDescription
9111>>>>>        
9111>>>>>        Send Destroy of hoIniFile // destroy dynaically created inifile object
9112>>>>>        
9112>>>>>        // Restore CWD...
9112>>>>>        Move (SetCurrentDirectory(sOldDirectory)) to sOldDirectory
9113>>>>>        
9113>>>>>        // Check for error conditions:
9113>>>>>        // DataPath and FileList must be defined; the FileList entry must point to a valid FileList.cfg
9113>>>>>        If (psDataPath(Self) = "") ;            Function_Return wsDataPathEmpty
9116>>>>>        If (psFileList(Self) = "") ;            Function_Return wsFileListEmpty
9119>>>>>        
9119>>>>>        Move (DoesFileExist(psFileList(Self))) to bExist
9120>>>>>        If (bExist = False) ;            Function_Return wsFileListNotExist
9123>>>>>        
9123>>>>>        If bChangingWorkspace ;            Close DF_ALL // if there is a WS open, we must close all the files
9126>>>>>        
9126>>>>>        Send DoAssignPaths // set psDfPath
9127>>>>>        Send DoSetPaths    // Set the application's Attributes of Filelist_Name and Open_Path
9128>>>>>        Set pbWorkspaceOpened to True
9129>>>>>        
9129>>>>>        Function_Return wsWorkspaceOpened
9130>>>>>    End_Function
9131>>>>>    
9131>>>>>    Function OpenWorkspace String sWorkspace Returns Integer
9133>>>>>        // Look in the Workspaces.ini file for the name, then open it by path
9133>>>>>        
9133>>>>>        Handle hoSections hoIniFile
9133>>>>>        Integer iWorkspace eOpened
9133>>>>>        String sWorkspaceName sPath
9133>>>>>        String sVdfRootDir
9133>>>>>        
9133>>>>>        Get Create U_Array    to hoSections
9134>>>>>        Get Create U_cIniFile to hoIniFile
9135>>>>>        
9135>>>>>        Get_Profile_String "Defaults" "VdfRootDir" to sVdfRootDir
9138>>>>>        If (Right(sVdfRootDir,1) <>"\") ;            Move (sVdfRootDir +"\") to sVdfRootDir
9141>>>>>        
9141>>>>>        Set psFilename of hoIniFile to (sVdfRootDir +"bin\Workspaces.ini")
9142>>>>>        
9142>>>>>        Send ReadSections of hoIniFile hoSections
9143>>>>>        
9143>>>>>        For iWorkspace from 0 to (Item_Count(hoSections) -1)
9149>>>>>>
9149>>>>>            Get Value of hoSections iWorkspace to sWorkspaceName
9150>>>>>            If (Uppercase(sWorkspaceName) = Uppercase(sWorkspace)) Begin
9152>>>>>                Get ReadString of hoIniFile sWorkspace "Path" "" to sPath
9153>>>>>                If (Right(sPath,1) <>"\") ;                    Move (sPath +"\") to sPath
9156>>>>>                
9156>>>>>                Get OpenWorkspaceFile (sPath + sWorkspace) to eOpened
9157>>>>>                Send Destroy of hoSections
9158>>>>>                Send Destroy of hoIniFile
9159>>>>>                Function_Return eOpened
9160>>>>>            End
9160>>>>>>
9160>>>>>        Loop
9161>>>>>>
9161>>>>>        
9161>>>>>        Send Destroy of hoSections
9162>>>>>        Send Destroy of hoIniFile
9163>>>>>        Function_Return wsWorkspaceNotFound
9164>>>>>    End_Function
9165>>>>>    
9165>>>>>    Function IsRegistered String sWorkspace Returns Boolean
9167>>>>>        Boolean bRegistered
9167>>>>>        Handle hoIniFile
9167>>>>>        String sVdfRootDir
9167>>>>>        
9167>>>>>        Get Create U_cIniFile to hoIniFile
9168>>>>>        
9168>>>>>        Get_Profile_String "Defaults" "VdfRootDir" to sVdfRootDir
9171>>>>>        If (Right(sVdfRootDir,1) <>"\") ;            Move (sVdfRootDir +"\") to sVdfRootDir
9174>>>>>        Set psFilename of hoIniFile to (sVdfRootDir +"bin\Workspaces.ini")
9175>>>>>        Move (SectionExists(hoIniFile, sWorkspace)) to bRegistered
9176>>>>>        
9176>>>>>        Send Destroy of hoIniFile
9177>>>>>        
9177>>>>>        Function_Return bRegistered
9178>>>>>    End_Function
9179>>>>>    
9179>>>>>    Function VdfSystemDfPath Returns String
9181>>>>>        String sSystemDfPath
9181>>>>>        Get_Profile_String "Workspaces" "SystemDfPath" to sSystemDfPath
9184>>>>>        
9184>>>>>        Function_Return sSystemDfPath
9185>>>>>    End_Function
9186>>>>>    
9186>>>>>    Function VdfSystemMakePath Returns String
9188>>>>>        String sSystemMakePath
9188>>>>>        Get_Profile_String "Workspaces" "SystemMakePath" to sSystemMakePath
9191>>>>>        
9191>>>>>        Function_Return sSystemMakePath
9192>>>>>    End_Function
9193>>>>>    
9193>>>>>    Procedure DoAssignPaths
9195>>>>>        String sDataPath sBitmapPath sHelpPath sProgramPath sSystemDfPath
9195>>>>>        
9195>>>>>        Get psDataPath     to sDataPath
9196>>>>>        Get psBitmapPath   to sBitmapPath
9197>>>>>        Get psHelpPath     to sHelpPath
9198>>>>>        Get psProgramPath  to sProgramPath
9199>>>>>        Get psSystemDfPath to sSystemDfPath
9200>>>>>        
9200>>>>>        Set psDfPath to (sDataPath +';' + sBitmapPath +';' + sHelpPath +';' + sProgramPath +';' + sSystemDfPath)
9201>>>>>        
9201>>>>>    End_Procedure
9202>>>>>    
9202>>>>>    Procedure DoSetPaths
9204>>>>>        // [JVH] must convert paths to Ansi before setting these values
9204>>>>>        // Note- this conversion is temporarily rolled back
9204>>>>>        //Set_Attribute DF_FILELIST_NAME To (ToAnsi(psFileList(self)))
9204>>>>>        //Set_Attribute DF_OPEN_PATH     To (ToAnsi(psDfPath(self)))
9204>>>>>        Set_Attribute DF_FILELIST_NAME to (psFileList(Self))
9207>>>>>        Set_Attribute DF_OPEN_PATH     to (psDfPath(Self))
9210>>>>>    End_Procedure
9211>>>>>    
9211>>>>>    Procedure EnumerateWorkspaceData Handle hoCallBack Handle hmGeneric
9213>>>>>        String sPath
9213>>>>>        
9213>>>>>        If (psWorkspaceName(Self)="") ;            Send hmGeneric to hoCallBack C_$WorkspaceNotUsed
9216>>>>>        Else Begin
9217>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$WorkspaceDesc, psDescription(Self)))
9218>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$WorkspaceName, psWorkspaceName(Self)))
9219>>>>>            Send hmGeneric to hoCallBack ""
9220>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$Filelist, psFileList(Self)))
9221>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$DataPath, psDataPath(Self)))
9222>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$ProgramPath, psProgramPath(Self)))
9223>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$HelpPath, psHelpPath(Self)))
9224>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$BitmapsPath, psBitmapPath(Self)))
9225>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$SystemPaths, psSystemDfPath(Self)))
9226>>>>>            Send hmGeneric to hoCallBack (SFormat(C_$FullDFPath, psDfPath(Self)))
9227>>>>>        End
9227>>>>>>
9227>>>>>    End_Procedure
9228>>>>>    
9228>>>>>    Function OpenWorkspaceErrorMessage Integer eErrorCode Returns String
9230>>>>>        // Decodes the enumerated integer returned by OpenWorkspace and
9230>>>>>        // returns a corresponding message string.
9230>>>>>        String sError
9230>>>>>        
9230>>>>>        Case Begin
9230>>>>>            Case (eErrorCode = wsWorkspaceOpened)
9232>>>>>                Move C_$NoErrors to sError
9233>>>>>                Case Break
9234>>>>>            Case (eErrorCode = wsWorkspaceNotFound)
9237>>>>>                Move C_$NoWsName to sError
9238>>>>>                Case Break
9239>>>>>            Case (eErrorCode = wsWorkspaceFileNotFound)
9242>>>>>                Move C_$NoWsFileFound to sError
9243>>>>>                Case Break
9244>>>>>            Case (eErrorCode = wsDataPathEmpty)
9247>>>>>                Move C_$NoWsDataPath to sError
9248>>>>>                Case Break
9249>>>>>            Case (eErrorCode = wsFileListEmpty)
9252>>>>>                Move C_$NoWsFileList to sError
9253>>>>>                Case Break
9254>>>>>            Case (eErrorCode = wsFileListNotExist)
9257>>>>>                Move C_$NoFileListCfg to sError
9258>>>>>                Case Break
9259>>>>>            Case Else
9259>>>>>                Move C_$UnknownError to sError
9260>>>>>                Case Break
9261>>>>>        Case End
9261>>>>>        
9261>>>>>        Function_Return (sError-".")
9262>>>>>    End_Function
9263>>>>>    
9263>>>>>    Function GetWorkspaceFileName String sWorkspace Returns String
9265>>>>>        // Returns the name of the physical Workspace file for the passed Workspace name.
9265>>>>>        String sVdfRootDir
9265>>>>>        Handle hoIniFile
9265>>>>>        String sPath
9265>>>>>        String sFileName
9265>>>>>        String sWorkspacePath
9265>>>>>        
9265>>>>>        Move "" to sFileName
9266>>>>>        
9266>>>>>        Get_Profile_String "Defaults" "VdfRootDir" to sVdfRootDir
9269>>>>>        If (Right(sVdfRootDir,1) <>"\") ;            Move (sVdfRootDir +"\") to sVdfRootDir
9272>>>>>        
9272>>>>>        Get Create U_cIniFile to hoIniFile
9273>>>>>        Set psFilename of hoIniFile to (sVdfRootDir +"bin\Workspaces.ini")
9274>>>>>        Get ReadString of hoIniFile sWorkspace "Path" "" to sWorkspacePath
9275>>>>>        If (sWorkspacePath <>"") Begin
9277>>>>>            If (Right(sWorkspacePath,1) <>"\") ;                Move (sWorkspacePath +"\") to sWorkspacePath
9280>>>>>            Move (sWorkspacePath +sWorkspace +".ws") to sFileName
9281>>>>>        End
9281>>>>>>
9281>>>>>        Send Destroy of hoIniFile
9282>>>>>        
9282>>>>>        Function_Return sFileName
9283>>>>>    End_Function
9284>>>>>    
9284>>>>>    Function CountOfPaths String sPaths Returns Integer
9286>>>>>        // Returns the number of paths defined in a string of paths
9286>>>>>        Integer iChar icChar icPath
9286>>>>>        
9286>>>>>        If (sPaths ="") ;            Function_Return 0
9289>>>>>        
9289>>>>>        Move (Length(sPaths) -1) to icChar
9290>>>>>        For iChar from 1 to icChar
9296>>>>>>
9296>>>>>            If (Mid(sPaths, 1, iChar) =";") ;                Increment icPath
9299>>>>>        Loop
9300>>>>>>
9300>>>>>        
9300>>>>>        Function_Return (icPath +1)
9301>>>>>    End_Function
9302>>>>>    
9302>>>>>    Function PathAtIndex String sPaths Integer iIndex Returns String
9304>>>>>        // Returns the path at the 1-based index of passed paths.
9304>>>>>        // If the path contains a trailing "\", it will be removed
9304>>>>>        Integer iChar icPath iPath iPos
9304>>>>>        String sPath
9304>>>>>        
9304>>>>>        Move (sPaths +";") to sPaths
9305>>>>>        For iPath from 1 to iIndex
9311>>>>>>
9311>>>>>            Move (Pos(";", sPaths)) to iPos
9312>>>>>            If iPos Begin
9314>>>>>                Move (Left(sPaths, iPos -1)) to sPath
9315>>>>>                If (Right(sPath,1) = '\') ;                    Move (Left(sPath, Length(sPath) -1)) to sPath
9318>>>>>                Move (Right(sPaths, Length(sPaths) -iPos)) to sPaths
9319>>>>>            End
9319>>>>>>
9319>>>>>            Else ;                Function_Return "" // index past number of paths
9321>>>>>        Loop
9322>>>>>>
9322>>>>>        
9322>>>>>        Function_Return sPath
9323>>>>>    End_Function
9324>>>>>    
9324>>>>>End_Class
9325>>>Use cCommandLine.pkg
Including file: cCommandLine.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCommandLine.pkg)
9325>>>>>Use VDFBase.pkg
9325>>>>>
9325>>>>>Class cCommandLine is a cObject
9326>>>>>    
9326>>>>>    Procedure Construct_Object
9328>>>>>        Forward Send Construct_Object
9330>>>>>        
9330>>>>>        Property Handle phoArgs // private object-handle of internal array of arguments
9331>>>>>    End_Procedure
9332>>>>>    
9332>>>>>    Procedure Private_DoCreateArgsArray
9334>>>>>        // creates the array for holding the arguments. Created upon demand only!
9334>>>>>        Integer icArg
9334>>>>>        String sArg
9334>>>>>        
9334>>>>>        Object oArgs is an Array
9336>>>>>            Delegate Set phoArgs to Self
9338>>>>>            Repeat
9338>>>>>>
9338>>>>>                CmdLine sArg
9339>>>>>>
9339>>>>>                If (sArg <> "") Begin
9341>>>>>                    Increment icArg
9342>>>>>                    Set Value  (icArg -1) to sArg
9343>>>>>                End
9343>>>>>>
9343>>>>>            Until (sArg = "")
9345>>>>>        End_Object
9346>>>>>    End_Procedure
9347>>>>>    
9347>>>>>    Function CountOfArgs Returns Integer
9349>>>>>        //Returns the number of arguments passed
9349>>>>>        If (phoArgs(Self) =0) ;            Send Private_DoCreateArgsArray
9352>>>>>        Function_Return (Item_Count(phoArgs(Self)))
9353>>>>>    End_Function
9354>>>>>    
9354>>>>>    Function Argument Integer iIndex Returns String
9356>>>>>        //Returns the one-based argument string
9356>>>>>        If (phoArgs(Self) =0) ;            Send Private_DoCreateArgsArray
9359>>>>>        Function_Return (Value(phoArgs(Self), iIndex -1))
9360>>>>>    End_Function
9361>>>>>    
9361>>>>>End_Class
9362>>>>>
9362>>>Use cRegistry.pkg
Including file: cRegistry.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cRegistry.pkg)
9362>>>>>Use Dll.pkg
9362>>>>>Use RegistryAPI.pkg
9362>>>>>Use tWinStructs.pkg
9362>>>>>
9362>>>>>Enum_List // Registry Data types
9362>>>>>    Define rdString
9362>>>>>    Define rdDword
9362>>>>>    Define rdBinary
9362>>>>>    Define rdUnknown
9362>>>>>End_Enum_List
9362>>>>>
9362>>>>>
9362>>>>>Class cRegistry is a cObject
9363>>>>>    Procedure Construct_Object
9365>>>>>        Forward Send Construct_Object
9367>>>>>        
9367>>>>>        Property Handle phRootKey HKEY_CURRENT_USER
9368>>>>>        Property UInteger pfAccessRights  KEY_ALL_ACCESS // what access level should be used to open a Key?
9369>>>>>        Property Handle phCurrentKey
9370>>>>>        Property Boolean pbLazyWrite True
9371>>>>>    End_Procedure
9372>>>>>    
9372>>>>>    Function CountOfSubkeys Returns Integer
9374>>>>>        Integer dwCountOfSubkeys
9374>>>>>        Integer iError
9374>>>>>        String sError
9374>>>>>        
9374>>>>>        Move 0 to dwCountOfSubkeys
9375>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, AddressOf(dwCountOfSubkeys), 0, 0, 0, 0, 0, 0, 0)) to iError
9376>>>>>        If iError Begin
9378>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9379>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9380>>>>>>
9380>>>>>        End
9380>>>>>>
9380>>>>>        Function_Return dwCountOfSubkeys
9381>>>>>    End_Function
9382>>>>>    
9382>>>>>    Function CountOfValues Returns Integer
9384>>>>>        Integer dwCountOfValues
9384>>>>>        Integer iError
9384>>>>>        String sError
9384>>>>>        
9384>>>>>        Move 0 to dwCountOfValues
9385>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, 0, 0, 0, AddressOf(dwCountOfValues), 0, 0, 0, 0)) to iError
9386>>>>>        If iError Begin
9388>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9389>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9390>>>>>>
9390>>>>>        End
9390>>>>>>
9390>>>>>        
9390>>>>>        Function_Return dwCountOfValues
9391>>>>>    End_Function
9392>>>>>    
9392>>>>>    Function LongestSubkeyLength Returns Integer
9394>>>>>        Integer dwLongestSubkeyLength
9394>>>>>        Integer iError
9394>>>>>        String sError
9394>>>>>        
9394>>>>>        Move 0 to dwLongestSubkeyLength
9395>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, 0, AddressOf(dwLongestSubkeyLength), 0, 0, 0, 0, 0, 0)) to iError
9396>>>>>        If iError Begin
9398>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9399>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9400>>>>>>
9400>>>>>        End
9400>>>>>>
9400>>>>>        
9400>>>>>        Function_Return dwLongestSubkeyLength
9401>>>>>    End_Function
9402>>>>>    
9402>>>>>    Function LongestValueLength Returns Integer
9404>>>>>        Integer dwLongestValueLength
9404>>>>>        Integer iError
9404>>>>>        String sError
9404>>>>>        
9404>>>>>        Move 0 to dwLongestValueLength
9405>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, 0, 0, 0, 0, AddressOf(dwLongestValueLength), 0, 0, 0)) to iError
9406>>>>>        If iError Begin
9408>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9409>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9410>>>>>>
9410>>>>>        End
9410>>>>>>
9410>>>>>        
9410>>>>>        Function_Return dwLongestValueLength
9411>>>>>    End_Function
9412>>>>>    
9412>>>>>    Function LongestDataLength Returns Integer
9414>>>>>        Integer dwLongestDataLength
9414>>>>>        Integer iError
9414>>>>>        String sError
9414>>>>>        
9414>>>>>        Move 0 to dwLongestDataLength
9415>>>>>        Move (RegQueryInfoKeyW(phCurrentKey(Self), 0, 0, 0, 0, 0, 0, 0, 0, AddressOf(dwLongestDataLength), 0, 0)) to iError
9416>>>>>        If iError Begin
9418>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9419>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9420>>>>>>
9420>>>>>        End
9420>>>>>>
9420>>>>>        
9420>>>>>        Function_Return dwLongestDataLength
9421>>>>>    End_Function
9422>>>>>    
9422>>>>>    Function ValueType String sValueName Returns Integer
9424>>>>>        Integer dwType
9424>>>>>        Integer iError eType
9424>>>>>        String sError
9424>>>>>        
9424>>>>>        Move 0 to dwType
9425>>>>>        Move (RegQueryValueExW(phCurrentKey(Self), sValueName, 0, AddressOf(dwType), 0, 0)) to iError
9426>>>>>        If iError Begin
9428>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9429>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9430>>>>>>
9430>>>>>        End
9430>>>>>>
9430>>>>>        
9430>>>>>        If (dwType = REG_SZ) ;            Move rdString to eType
9433>>>>>        Else If (dwType = REG_DWORD)  ;            Move rdDword to eType
9437>>>>>        Else If (dwType = REG_BINARY) ;            Move rdBinary to eType
9441>>>>>        Else ;            Move rdUnknown to eType
9443>>>>>        
9443>>>>>        Function_Return eType
9444>>>>>    End_Function
9445>>>>>    
9445>>>>>    Function ValueLength String sValueName Returns Integer
9447>>>>>        Integer dwSize
9447>>>>>        Integer iError
9447>>>>>        String sError
9447>>>>>        
9447>>>>>        Move 0 to dwSize
9448>>>>>        Move (RegQueryValueExW(phCurrentKey(Self), sValueName, 0, 0, 0, AddressOf(dwSize))) to iError
9449>>>>>        If iError Begin
9451>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9452>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9453>>>>>>
9453>>>>>        End
9453>>>>>>
9453>>>>>        
9453>>>>>        Function_Return dwSize
9454>>>>>    End_Function
9455>>>>>    
9455>>>>>    Function CreateKey String sKeyName Returns Integer // return=error code
9457>>>>>        // Calling CreateKey for an existing Key, merely opens it without error.
9457>>>>>        Handle hKey hKeyOpened
9457>>>>>        Integer iError
9457>>>>>        String sError
9457>>>>>        
9457>>>>>        Move 0 to hKeyOpened // initialize it so we can get its address
9458>>>>>        
9458>>>>>        Get phRootKey to hKey
9459>>>>>        
9459>>>>>        Move (RegCreateKeyEx(hKey, sKeyName, 0, 0, REG_OPTION_NON_VOLATILE, pfAccessRights(Self), 0, AddressOf(hKeyOpened), 0)) to iError
9460>>>>>        If (iError =0) ;            Set phCurrentKey to hKeyOpened
9463>>>>>        Else Begin
9464>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9465>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9466>>>>>>
9466>>>>>        End
9466>>>>>>
9466>>>>>        Function_Return iError
9467>>>>>    End_Function
9468>>>>>    
9468>>>>>    Procedure CloseKey
9470>>>>>        Integer iError
9470>>>>>        Handle hKey
9470>>>>>        
9470>>>>>        Get phCurrentKey to hKey
9471>>>>>        
9471>>>>>        If (hKey <>0) Begin
9473>>>>>            If (pbLazyWrite(Self)) ;                Move (RegCloseKey(hKey)) to iError
9476>>>>>            Else ;                Move (RegFlushKey(hKey)) to iError
9478>>>>>            
9478>>>>>            Set phCurrentKey to 0
9479>>>>>        End
9479>>>>>>
9479>>>>>    End_Procedure
9480>>>>>    
9480>>>>>    Function OpenKey String sKeyName Returns Boolean
9482>>>>>        Handle hKey hKeyOpened
9482>>>>>        Integer iError
9482>>>>>        
9482>>>>>        Move 0 to hKeyOpened // initialize it so we can get its address
9483>>>>>        
9483>>>>>        Get phRootKey to hKey
9484>>>>>        Move (RegOpenKeyEx(hKey, sKeyName, 0, pfAccessRights(Self), AddressOf(hKeyOpened))) to iError
9485>>>>>        If (iError =0) ;            Set phCurrentKey to hKeyOpened
9488>>>>>        
9488>>>>>        Function_Return (iError=0)
9489>>>>>    End_Function
9490>>>>>    
9490>>>>>    Procedure WriteInteger WString sValue Integer iValueData
9492>>>>>        Handle hKey
9492>>>>>        Integer iError
9492>>>>>        Integer iData
9492>>>>>        String sError
9492>>>>>        
9492>>>>>        Move iValueData to iData
9493>>>>>        Get phCurrentKey to hKey
9494>>>>>        Move (RegSetValueExW(hKey, sValue, 0, REG_DWORD, AddressOf(iData), SizeOfType(Integer))) to iError
9495>>>>>        If iError Begin
9497>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9498>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9499>>>>>>
9499>>>>>        End
9499>>>>>>
9499>>>>>    End_Procedure
9500>>>>>    
9500>>>>>    // WriteDword is obsolete. Please use WriteInteger or WriteUInt, depending on whether you use a signed or unsigned value.
9500>>>>>    Procedure WriteDword String sValue Integer iValueData
9502>>>>>        Send WriteInteger of Self sValue iValueData
9503>>>>>    End_Procedure
9504>>>>>    
9504>>>>>    Procedure WriteUInt WString sValue UInteger uValueData
9506>>>>>        Handle hKey
9506>>>>>        Integer iError
9506>>>>>        UInteger uData
9506>>>>>        String sError
9506>>>>>        
9506>>>>>        Move uValueData to uData
9507>>>>>        Get phCurrentKey to hKey
9508>>>>>        Move (RegSetValueExW(hKey, sValue, 0, REG_DWORD, AddressOf(uData), SizeOfType(UInteger))) to iError
9509>>>>>        If iError Begin
9511>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9512>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9513>>>>>>
9513>>>>>        End
9513>>>>>>
9513>>>>>    End_Procedure
9514>>>>>
9514>>>>>    Procedure WriteString WString sValue WString wValueData
9516>>>>>        Handle hKey
9516>>>>>        Integer iError cbData
9516>>>>>        String sError
9516>>>>>        
9516>>>>>        If (wValueData = "") Begin
9518>>>>>            Move (Character(0)) to wValueData
9519>>>>>            Move 1 to cbData
9520>>>>>        End
9520>>>>>>
9520>>>>>        Else Begin
9521>>>>>            Move ((SizeOfWString(wValueData) +1)*2) to cbData
9522>>>>>        End
9522>>>>>>
9522>>>>>        Get phCurrentKey to hKey
9523>>>>>        Move (RegSetValueExW(hKey, sValue, 0, REG_SZ, AddressOf(wValueData), cbData)) to iError
9524>>>>>        If iError Begin
9526>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9527>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9528>>>>>>
9528>>>>>        End
9528>>>>>>
9528>>>>>    End_Procedure
9529>>>>>    
9529>>>>>    Procedure WriteBinary WString sValue Pointer pValueData Integer iDataLength
9531>>>>>        Handle hKey
9531>>>>>        Integer iError
9531>>>>>        String sError
9531>>>>>        
9531>>>>>        Get phCurrentKey to hKey
9532>>>>>        Move (RegSetValueExw(hKey, sValue, 0, REG_BINARY, pValueData, iDataLength)) to iError
9533>>>>>        If iError Begin
9535>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9536>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9537>>>>>>
9537>>>>>        End
9537>>>>>>
9537>>>>>    End_Procedure
9538>>>>>    
9538>>>>>    Function ReadInteger WString sValueName Returns Integer
9540>>>>>        Handle hKey
9540>>>>>        Integer iError
9540>>>>>        Integer iValueData iValueDataLength
9540>>>>>        String sError
9540>>>>>        
9540>>>>>        Move 0           to iValueData
9541>>>>>        Move (SizeOfType(Integer)) to iValueDataLength
9542>>>>>        
9542>>>>>        Get phCurrentKey to hKey
9543>>>>>        Move (RegQueryValueExW(hKey, sValueName, 0, 0, AddressOf(iValueData), AddressOf(iValueDataLength))) to iError
9544>>>>>        If iError Begin
9546>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9547>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9548>>>>>>
9548>>>>>        End
9548>>>>>>
9548>>>>>        
9548>>>>>        Function_Return iValueData
9549>>>>>    End_Function
9550>>>>>    
9550>>>>>    // ReadDword is obsolete. Please use ReadInteger or ReadUInt, depending on whether you expect a signed or unsigned value.
9550>>>>>    Function ReadDword String sValueName Returns Integer
9552>>>>>        Function_Return (ReadInteger(Self, sValueName))
9553>>>>>    End_Function
9554>>>>>
9554>>>>>    Function ReadUInt WString sValueName Returns UInteger
9556>>>>>        Handle hKey
9556>>>>>        Integer iError
9556>>>>>        UInteger uValueData uValueDataLength
9556>>>>>        String sError
9556>>>>>        
9556>>>>>        Move 0           to uValueData
9557>>>>>        Move (SizeOfType(UInteger)) to uValueDataLength
9558>>>>>        
9558>>>>>        Get phCurrentKey to hKey
9559>>>>>        Move (RegQueryValueExW(hKey, sValueName, 0, 0, AddressOf(uValueData), AddressOf(uValueDataLength))) to iError
9560>>>>>        If iError Begin
9562>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9563>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9564>>>>>>
9564>>>>>        End
9564>>>>>>
9564>>>>>        
9564>>>>>        Function_Return uValueData
9565>>>>>    End_Function
9566>>>>>    
9566>>>>>    Function ReadString String sValueName Returns String
9568>>>>>        Handle hKey
9568>>>>>        Integer iError
9568>>>>>        WString wValueData
9568>>>>>        DWord dwValueDataLength dwType
9568>>>>>        Pointer lpsValueData
9568>>>>>        String sError
9568>>>>>        
9568>>>>>        Move (Repeat(character(0), ValueLength(Self, sValueName))) to wValueData
9569>>>>>        Move (AddressOf(wValueData)) to lpsValueData
9570>>>>>        
9570>>>>>        Move (SizeOfWString(wValueData)) to dwValueDataLength
9571>>>>>        
9571>>>>>        Move REG_SZ to dwType
9572>>>>>        
9572>>>>>        Get phCurrentKey to hKey
9573>>>>>        Move (RegQueryValueExW(hKey, sValueName, 0, (AddressOf(dwType)), lpsValueData, AddressOf(dwValueDataLength))) to iError
9574>>>>>        If iError Begin
9576>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9577>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9578>>>>>>
9578>>>>>        End
9578>>>>>>
9578>>>>>        
9578>>>>>        Function_Return (CString(wValueData))
9579>>>>>    End_Function
9580>>>>>    
9580>>>>>    Function ReadBinary String sValueName Pointer pValueData Integer iDataLength Returns Boolean
9582>>>>>        Handle hKey
9582>>>>>        Integer iError
9582>>>>>        String sError
9582>>>>>        
9582>>>>>        Get phCurrentKey to hKey
9583>>>>>        Move (RegQueryValueExW(hKey, sValueName, 0, 0, pValueData, AddressOf(iDataLength))) to iError
9584>>>>>        If iError Begin
9586>>>>>            Move (FormatWinError(iError)) to sError // raise an error if the Query failed
9587>>>>>            Error DFERR_REGISTRY sError // Generic Windows Error
9588>>>>>>
9588>>>>>        End
9588>>>>>>
9588>>>>>        
9588>>>>>        Function_Return (iDataLength >0)
9589>>>>>    End_Function
9590>>>>>    
9590>>>>>    
9590>>>>>    // Private....
9590>>>>>    Function GetBaseKey Returns Handle
9592>>>>>        Handle hBaseKey
9592>>>>>        If (phCurrentKey(Self) = 0) ;            Get phRootKey to hBaseKey
9595>>>>>        Else ;            Get phCurrentKey to hBaseKey
9597>>>>>        
9597>>>>>        Function_Return hBaseKey
9598>>>>>    End_Function
9599>>>>>    
9599>>>>>    Function GetKey String sKeyName Returns Handle
9601>>>>>        Handle hKeyOpened
9601>>>>>        Integer iError
9601>>>>>        
9601>>>>>        Move 0 to hKeyOpened // initialize so we can get its address
9602>>>>>        
9602>>>>>        Move (RegOpenKeyEx(GetBaseKey(Self), sKeyName, 0, pfAccessRights(Self), AddressOf(hKeyOpened))) to iError
9603>>>>>        
9603>>>>>        If (iError =0) ;            Function_Return hKeyOpened
9606>>>>>        Else ;            Function_Return 0
9608>>>>>    End_Function
9609>>>>>    
9609>>>>>    // Public
9609>>>>>    Function KeyExists String sKeyName Returns Boolean
9611>>>>>        Handle hKey
9611>>>>>        Integer iVoid
9611>>>>>        
9611>>>>>        If (Trim(sKeyName) = "") ;            Function_Return False
9614>>>>>        
9614>>>>>        Get GetKey sKeyName to hKey
9615>>>>>        If hKey ;            Move (RegCloseKey(hKey)) to iVoid
9618>>>>>        Function_Return (hKey <>0)
9619>>>>>    End_Function
9620>>>>>    
9620>>>>>    Function ValueExists String sValueName Returns Boolean
9622>>>>>        // Determines whether a Value exists for the currently-opened Key.
9622>>>>>        Integer iError
9622>>>>>        DWord dwDataType
9622>>>>>        Move 0 to dwDataType // must initialize the variable to get its address
9623>>>>>        
9623>>>>>        Move (RegQueryValueExW(phCurrentKey(Self), sValueName, 0, AddressOf(dwDataType), 0, 0)) to iError
9624>>>>>        
9624>>>>>        Function_Return (iError=0)
9625>>>>>    End_Function
9626>>>>>    
9626>>>>>    Function DeleteKey String sKeyName Returns Boolean // Deleted successfully?
9628>>>>>        
9628>>>>>            If (Trim(sKeyName) = "") ;            Function_Return False
9631>>>>>        
9631>>>>>        Function_Return (ShDeleteKey(phRootKey(Self), sKeyName) =0)
9632>>>>>    End_Function
9633>>>>>    
9633>>>>>    Function DeleteValue String sValueName Returns Boolean // Deleted successfully?
9635>>>>>        Function_Return (RegDeleteValue(phCurrentKey(Self), sValueName) =0)
9636>>>>>    End_Function
9637>>>>>    
9637>>>>>    Function Subkeys Returns String[]
9639>>>>>        Integer iError
9639>>>>>        Integer icValue iLongestSubkey
9639>>>>>        Handle hKey
9639>>>>>        DWord dwSubkeyNameLength
9639>>>>>        String sSubkeyName sFileTime
9639>>>>>        Pointer lpsSubkeyName
9639>>>>>        String[] aResult
9640>>>>>        tWinFileTime fileTime
9640>>>>>        tWinFileTime fileTime
9640>>>>>
9640>>>>>        Get LongestSubkeyLength to iLongestSubkey
9641>>>>>        Move (Repeat(character(0), iLongestSubkey +1)) to sSubkeyName
9642>>>>>        Move (AddressOf(sSubkeyName)) to lpsSubkeyName
9643>>>>>
9643>>>>>        Get phCurrentKey to hKey
9644>>>>>        Repeat
9644>>>>>>
9644>>>>>            Move (iLongestSubkey +1) to dwSubkeyNameLength
9645>>>>>
9645>>>>>            Move (RegEnumKeyEx(hKey, icValue, lpsSubkeyName, AddressOf(dwSubkeyNameLength), 0, 0, 0, AddressOf(fileTime))) to iError
9646>>>>>            If (iError =0) Begin
9648>>>>>                Move (CString(sSubkeyName)) to aResult[icValue]
9649>>>>>                Increment icValue
9650>>>>>            End
9650>>>>>>
9650>>>>>        Until (iError)
9652>>>>>        Function_Return aResult
9653>>>>>    End_Function
9654>>>>>    
9654>>>>>    Function GetSubkeys Handle hoArray Returns Integer // count of Values
9656>>>>>        Integer iError
9656>>>>>        Integer icValue iLongestSubkey
9656>>>>>        Handle hKey
9656>>>>>        DWord dwSubkeyNameLength
9656>>>>>        WString wSubkeyName
9656>>>>>        tWinFileTime FileTime
9656>>>>>        tWinFileTime FileTime
9656>>>>>        
9656>>>>>        Get LongestSubkeyLength to iLongestSubkey
9657>>>>>        Move (Repeat(character(0), iLongestSubkey +1)) to wSubkeyName
9658>>>>>        
9658>>>>>        Get phCurrentKey to hKey
9659>>>>>        Repeat
9659>>>>>>
9659>>>>>            Move (iLongestSubkey +1) to dwSubkeyNameLength
9660>>>>>            
9660>>>>>            Move (RegEnumKeyExW(hKey, icValue, AddressOf(wSubkeyName), AddressOf(dwSubkeyNameLength), 0, 0, 0, AddressOf(FileTime))) to iError
9661>>>>>            If (iError =0) Begin
9663>>>>>                Increment icValue
9664>>>>>                Set Value of hoArray (Item_Count(hoArray)) to (CString(wSubkeyName))
9665>>>>>            End
9665>>>>>>
9665>>>>>        Until (iError)
9667>>>>>        Function_Return icValue
9668>>>>>        
9668>>>>>    End_Function
9669>>>>>    
9669>>>>>    Function GetValues Handle hoArray Returns Integer // count of Values
9671>>>>>        Integer iError
9671>>>>>        Integer icValue iLongestValue
9671>>>>>        Handle hKey
9671>>>>>        DWord dwValueNameLength
9671>>>>>        WString wValueName 
9671>>>>>        String sValueNameSize
9671>>>>>        Pointer lpsValueName
9671>>>>>        
9671>>>>>        Get LongestValueLength to iLongestValue
9672>>>>>        Move (Repeat(character(0), iLongestValue +1)) to wValueName
9673>>>>>        Move (AddressOf(wValueName)) to lpsValueName
9674>>>>>        
9674>>>>>        Get phCurrentKey to hKey
9675>>>>>        Repeat
9675>>>>>>
9675>>>>>            Move (iLongestValue +1) to dwValueNameLength
9676>>>>>            Move (RegEnumValueW(hKey, icValue, lpsValueName, AddressOf(dwValueNameLength), 0, 0, 0, 0)) to iError
9677>>>>>            If (iError =0) Begin
9679>>>>>                Increment icValue
9680>>>>>                Set Value of hoArray (Item_Count(hoArray)) to (CString(wValueName))
9681>>>>>            End
9681>>>>>>
9681>>>>>        Until (iError)
9683>>>>>        Function_Return icValue
9684>>>>>        
9684>>>>>    End_Function
9685>>>>>    
9685>>>>>End_Class
9686>>>Use cVersionInfo.pkg
Including file: cVersionInfo.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cVersionInfo.pkg)
9686>>>>>Use VdfBase.pkg
9686>>>>>Use DLL.pkg
9686>>>>>Use tWinStructs.pkg
9686>>>>>Use WinKern.pkg
9686>>>>>
9686>>>>>Define VS_FF_DEBUG         for |CI$00000001
9686>>>>>Define VS_FF_PRERELEASE    for |CI$00000002
9686>>>>>Define VS_FF_PATCHED       for |CI$00000004
9686>>>>>Define VS_FF_PRIVATEBUILD  for |CI$00000008
9686>>>>>Define VS_FF_INFOINFERRED  for |CI$00000010
9686>>>>>Define VS_FF_SPECIALBUILD  for |CI$00000020
9686>>>>>
9686>>>>>// Note: String pointer lpFilename must refer to WString type.
9686>>>>>External_Function GetFileVersionInfoSizeW "GetFileVersionInfoSizeW" version.dll ;    Pointer lpFilename ;    Pointer lpdwHandle ;    Returns DWord
9687>>>>>    
9687>>>>>// Wrapper Function GetFileVersionInfoSize (when using strings)
9687>>>>>Function GetFileVersionInfoSize Global ;    Pointer aFilename ;    Pointer lpdwHandle ;    Returns DWord
9689>>>>>    
9689>>>>>    DWord  dwResult
9689>>>>>    UWide  uwFileName
9689>>>>>    UWide  uwFileName
9689>>>>>
9689>>>>>    Send StringToWide aFilename (&uwFileName)
9690>>>>>    
9690>>>>>    Move (GetFileVersionInfoSizeW (uwFileName.lpUText, lpdwHandle)) to dwResult        
9691>>>>>    Function_Return dwResult
9692>>>>>End_Function
9693>>>>>
9693>>>>>// Note: String pointers should be referring to WString items.
9693>>>>>External_Function GetFileVersionInfoW "GetFileVersionInfoW" version.dll ;    Pointer lpFilename ;    DWord   dwHandle ;    DWord   dwLen ;    Pointer lpData ;    Returns Integer
9694>>>>>    
9694>>>>>// Wrapper Function GetFileVersionInfo (when using strings)
9694>>>>>Function GetFileVersionInfo Global ;    Pointer aFilename ;    DWord   dwHandle ;    DWord   dwLen ;    Pointer pData ;    Returns Integer
9696>>>>>    
9696>>>>>    Integer iResult
9696>>>>>    UWide   uwFileName
9696>>>>>    UWide   uwFileName
9696>>>>>
9696>>>>>    Send StringToWide aFilename (&uwFileName)
9697>>>>>    
9697>>>>>    Move (GetFileVersionInfoW (uwFileName.lpUText, dwHandle, dwLen, pData)) to iResult
9698>>>>>    Function_Return iResult
9699>>>>>End_Function    
9700>>>>>
9700>>>>>// Note: String pointers should be referring to WString items.
9700>>>>>External_Function VerQueryValueW "VerQueryValueW" version.dll ;    Pointer pBlock ;    Pointer pSubBlock ;    Pointer paBuffer ;    Pointer puLen ;    Returns Integer
9701>>>>>
9701>>>>>// Wrapper Function VerQueryValue (when using strings)
9701>>>>>Function VerQueryValue Global ;    Pointer pBlock ;    Pointer pSubBlock ;    Pointer paBuffer ;    Pointer puLen ;    Returns Integer
9703>>>>>    
9703>>>>>    Integer iResult
9703>>>>>    UWide   uwSubBlock
9703>>>>>    UWide   uwSubBlock
9703>>>>>    
9703>>>>>    Send StringToWide pSubBlock (&uwSubBlock)
9704>>>>>    
9704>>>>>    Move (VerQueryValueW (pBlock, uwSubBlock.lpUText, paBuffer, puLen)) to iResult        
9705>>>>>    
9705>>>>>    Function_Return iResult
9706>>>>>End_Function
9707>>>>>
9707>>>>>
9707>>>>>Class cVersionInfo is a cObject
9708>>>>>    Procedure Construct_Object
9710>>>>>        Forward Send Construct_Object
9712>>>>>        
9712>>>>>        
9712>>>>>        Property Integer piVersionMajor
9713>>>>>        Property Integer piVersionMinor
9714>>>>>        Property Integer piVersionRelease
9715>>>>>        Property Integer piVersionBuild
9716>>>>>        
9716>>>>>        Property Boolean pbIncluded
9717>>>>>        Property Boolean pbSpecialBuild
9718>>>>>        Property Boolean pbPrivateBuild
9719>>>>>        
9719>>>>>    End_Procedure
9720>>>>>    
9720>>>>>    Procedure DoCreate WString sFileName
9722>>>>>        DWord dwHandle
9722>>>>>        Integer iInfoSize iVerSize iSuccess iVersion iVoid iFlags
9722>>>>>        WString sData
9722>>>>>        tWinVs_FixedFileInfo VsFixedFileInfo
9722>>>>>        tWinVs_FixedFileInfo VsFixedFileInfo
9722>>>>>        WString sSubBlock
9722>>>>>        Pointer pVsFixedFileInfo
9722>>>>>        
9722>>>>>        Move 0 to pVsFixedFileInfo
9723>>>>>        Move 0 to dwHandle
9724>>>>>        Move 0 to iVerSize
9725>>>>>        
9725>>>>>        Move (GetFileVersionInfoSizeW(AddressOf(sFilename), AddressOf(dwHandle))) to iInfoSize
9726>>>>>        Set pbIncluded to (iInfoSize <>0)
9727>>>>>        
9727>>>>>        If (pbIncluded(Self)) Begin
9729>>>>>            Move (Repeat(Character(0), iInfoSize)) to sData
9730>>>>>            Move (GetFileVersionInfoW(AddressOf(sFilename), 0, iInfoSize, AddressOf(sData))) to iSuccess
9731>>>>>            
9731>>>>>            If (iSuccess <>0) Begin
9733>>>>>                Move "\" to sSubBlock
9734>>>>>                If (VerQueryValueW(AddressOf(sData), AddressOf(sSubBlock), AddressOf(pVsFixedFileInfo), AddressOf(iVerSize))) Begin
9736>>>>>                    Move (memcopy(AddressOf(VsFixedFileInfo), pVsFixedFileInfo, iVerSize)) to iVoid // copy the structure
9737>>>>>                    
9737>>>>>                    Move VsFixedFileInfo.dwFileVersionMS to iVersion
9738>>>>>                    Set piVersionMajor to (Hi(iVersion))
9739>>>>>                    Set piVersionMinor to (Low(iVersion))
9740>>>>>                    
9740>>>>>                    Move VsFixedFileInfo.dwFileVersionLS to iVersion
9741>>>>>                    Set piVersionRelease to (Hi(iVersion))
9742>>>>>                    Set piVersionBuild   to (Low(iVersion))
9743>>>>>                    
9743>>>>>                    Move VsFixedFileInfo.dwFileFlags to iFlags
9744>>>>>                    Set pbSpecialBuild    to (iFlags iand VS_FF_SPECIALBUILD)
9745>>>>>                    Set pbPrivateBuild    to (iFlags iand VS_FF_PRIVATEBUILD)
9746>>>>>                End
9746>>>>>>
9746>>>>>            End
9746>>>>>>
9746>>>>>            
9746>>>>>        End
9746>>>>>>
9746>>>>>    End_Procedure
9747>>>>>    
9747>>>>>End_Class
9748>>>Use GlobalFunctionsProcedures.pkg
9748>>>Use tWinStructs.pkg
9748>>>Use HelpSystemConstants.pkg // constants used by help system (not used by web)
9748>>>
9748>>>Register_Function phoWorkspace Returns Handle
9748>>>Register_Function phoCommandLine Returns Handle
9748>>>Register_Function pbEnterKeyAsTabKey Returns Boolean
9748>>>Register_Function GetApplicationName Returns String
9748>>>Register_Function GetApplicationFileName Returns String
9748>>>
9748>>>Register_Function Statusbar_State Returns Integer
9748>>>Register_Function Toolbar_State Returns Integer
9748>>>Register_Procedure Set Statusbar_State
9748>>>Register_Procedure Set Toolbar_State
9748>>>
9748>>>
9748>>>Class cApplication is a cObject
9749>>>    Procedure Construct_Object
9751>>>        Forward Send Construct_Object
9753>>>        
9753>>>        Move Self to ghoApplication
9754>>>        
9754>>>        Property Handle phoVersionInfo
9755>>>        Property Handle phoWorkspace
9756>>>        Property Handle phoCommandLine
9757>>>        Property Handle phoMainPanel       // main panel will set this for us.
9758>>>        Property String psHelpFile         // type of file is determined by peHelpType
9759>>>        Property Integer peHelpType htWinHelp // htNoHelp htHtmlHelp htWinHelp
9760>>>        
9760>>>        Property String psCompany "Data Access Worldwide"
9761>>>        Property String psProduct "DataFlex Applications"
9762>>>        Property String psVersion C_DFVersion
9763>>>        Property String psProgram (Module_Name(desktop))
9764>>>        
9764>>>        // set to '' to stop the auto open workspace behavior
9764>>>        Property String psAutoOpenWorkspace 'Config.ws'
9765>>>        
9765>>>        
9765>>>        Property Boolean pbPreserveEnvironment True
9766>>>        
9766>>>        Object oCommandLine is a cCommandLine
9768>>>            Delegate Set phoCommandLine to Self
9770>>>        End_Object
9771>>>        
9771>>>        Object oWorkspace is a cWorkspace
9773>>>            Delegate Set phoWorkspace to Self
9775>>>        End_Object
9776>>>        
9776>>>        Object oVersionInfo is a cVersionInfo
9778>>>            Delegate Set phoVersionInfo to Self
9780>>>            Send DoCreate (GetApplicationFileName(parent(Self)))
9781>>>        End_Object
9782>>>        
9782>>>        Set pbUseWindowsFont to True
9783>>>        
9783>>>    End_Procedure
9784>>>    
9784>>>    Procedure Destroy_Object
9786>>>        If (ghoApplication=Self) Begin
9788>>>            Move 0 to ghoApplication
9789>>>        End
9789>>>>
9789>>>        Forward Send Destroy_Object
9791>>>    End_Procedure
9792>>>    
9792>>>    // Determines if the Enter key should act like the Tab key (and send msg_Next)
9792>>>    // The use of a global variable, gbKEnterNext, makes this an application-wide property
9792>>>    Procedure Set pbEnterKeyAsTabKey Boolean bNext
9794>>>        Move bNext to gbKEnterNext
9795>>>    End_Procedure
9796>>>    
9796>>>    Function pbEnterKeyAsTabKey Returns Boolean
9798>>>        Function_Return gbKEnterNext
9799>>>    End_Function
9800>>>    
9800>>>    Procedure DoLoadEnvironment Handle hoContainer Boolean bProgram
9802>>>// not used with webapp
9802>>>        Handle hoRegistry hoCommandBars
9802>>>        Handle hMonitor
9802>>>        Integer iError cxy
9802>>>        tWinWindowPlacement WindowPlacement
9802>>>        tWinWindowPlacement WindowPlacement
9802>>>        String sKey
9802>>>        Boolean bSuccess
9802>>>        String sObjectName
9802>>>        
9802>>>        If (pbPreserveEnvironment(Self)) Begin
9804>>>            Get Create U_cRegistry to hoRegistry
9805>>>            Set pfAccessRights of hoRegistry to KEY_READ
9806>>>            
9806>>>            Get RegistryKeyString to sKey
9807>>>            
9807>>>            If (bProgram = False) Begin
9809>>>                Move (sKey +"\WINDOWS") to sKey
9810>>>                Get Object_Label of hoContainer to sObjectName  // just get the local name
9811>>>                Move (sKey +"\" +sObjectName) to sKey
9812>>>            End
9812>>>>
9812>>>            Else ;                Move (sKey + "\Preferences") to sKey
9814>>>            
9814>>>            Get OpenKey of hoRegistry sKey to bSuccess
9815>>>            
9815>>>            If bSuccess Begin
9817>>>                If (ValueExists(hoRegistry, 'Placement')) Begin
9819>>>                    Get ReadBinary of hoRegistry "Placement" (AddressOf(WindowPlacement)) (SizeOfType(tWinWindowPlacement)) to bSuccess
9820>>>                    If bSuccess Begin
9822>>>                        // Do not restore size if the window is not resizable
9822>>>                        If (Border_Style(hoContainer) <> BORDER_THICK) Begin
9824>>>                            // restore always works with outer size
9824>>>                            Get GuiWindowSize     of hoContainer to cxy
9825>>>                            Move (WindowPlacement.NormalPosition.left + Low(cxy)) to WindowPlacement.NormalPosition.right
9826>>>                            Move (WindowPlacement.NormalPosition.top + Hi(cxy)) to WindowPlacement.NormalPosition.bottom
9827>>>                        End
9827>>>>
9827>>>                        
9827>>>                        // Test that the main window's placement location will appear on some connected monitor. If none
9827>>>                        // of the main window is visible then set the location to 0,0 and adjust the size....
9827>>>                        If (bProgram) Begin
9829>>>                            // Test the top left point
9829>>>                            Move (MonitorFromPoint(WindowPlacement.NormalPosition.left, WindowPlacement.NormalPosition.top, MONITOR_DEFAULTONNULL)) to hMonitor
9830>>>                            
9830>>>                            If (hMonitor = 0) Begin
9832>>>                                // test the bottom right point
9832>>>                                Move (MonitorFromPoint(WindowPlacement.NormalPosition.right, WindowPlacement.NormalPosition.bottom, MONITOR_DEFAULTONNULL)) to hMonitor
9833>>>                            End
9833>>>>
9833>>>                            
9833>>>                            // hMonitor = 0 means that the window location is not in any current monitor (probably the monitor layout has changed)
9833>>>                            // or that the window begins and ends outside all monitors (even though it may span across some monitor). We will adjust!
9833>>>                            If (hMonitor = 0) Begin
9835>>>                                Send ResetWindowPos (&WindowPlacement.NormalPosition)
9836>>>                            End
9836>>>>
9836>>>                        End
9836>>>>
9836>>>                        
9836>>>                        // Set the placement
9836>>>                        Move (SetWindowPlacement(Window_Handle(hoContainer), AddressOf(WindowPlacement))) to bSuccess
9837>>>                    End
9837>>>>
9837>>>                End
9837>>>>
9837>>>                If bProgram Begin
9839>>>                    Get phoCommandBars of hoContainer to hoCommandBars
9840>>>                    If not hoCommandBars Begin
9842>>>                        If (ValueExists(hoRegistry, 'IsStatusBarVisible')) ;                            Set Statusbar_State of hoContainer to (ReadDword(hoRegistry, 'IsStatusBarVisible'))
9845>>>                        If (ValueExists(hoRegistry, 'IsToolBarVisible'))   ;                            Set Toolbar_State   of hoContainer to (ReadDword(hoRegistry, 'IsToolBarVisible'))
9848>>>                    End
9848>>>>
9848>>>                End
9848>>>>
9848>>>                
9848>>>                Send CloseKey of hoRegistry
9849>>>            End
9849>>>>
9849>>>            
9849>>>            Send Destroy of hoRegistry
9850>>>        End
9850>>>>
9850>>>    End_Procedure
9851>>>    
9851>>>    Procedure DoSaveEnvironment Handle hoContainer Boolean bProgram
9853>>>// not used with webapp
9853>>>        Handle hoRegistry
9853>>>        Integer iError
9853>>>        tWinWindowPlacement WindowPlacement
9853>>>        tWinWindowPlacement WindowPlacement
9853>>>        String sKey
9853>>>        Boolean bSuccess
9853>>>        Integer eShowCmd
9853>>>        String sObjectName
9853>>>        
9853>>>        If (pbPreserveEnvironment(Self)) Begin
9855>>>            Get Create U_cRegistry to hoRegistry
9856>>>            Get RegistryKeyString to sKey
9857>>>            
9857>>>            If (bProgram = False) Begin
9859>>>                Move (sKey +"\WINDOWS") to sKey
9860>>>                Get Object_Label of hoContainer to sObjectName  // just get the local name
9861>>>                Move (sKey +"\" +sObjectName) to sKey
9862>>>            End
9862>>>>
9862>>>            Else ;                Move (sKey +"\Preferences") to sKey
9864>>>            
9864>>>            Get CreateKey of hoRegistry sKey to iError
9865>>>            If (iError = 0) Begin
9867>>>                Move (SizeOfType(tWinWindowPlacement)) to WindowPlacement.length
9868>>>                Move (GetWindowPlacement(Window_Handle(hoContainer), AddressOf(WindowPlacement))) to bSuccess
9869>>>                If bSuccess Begin
9871>>>                    // if minimized, assume restored, as we don't want to restart minimized!
9871>>>                    If (WindowPlacement.showCmd = SW_SHOWMINIMIZED) Begin
9873>>>                        Move SW_SHOWNORMAL to WindowPlacement.showCmd
9874>>>                    End
9874>>>>
9874>>>                    Send WriteBinary of hoRegistry "Placement" (AddressOf(WindowPlacement)) WindowPlacement.length
9875>>>                End
9875>>>>
9875>>>                
9875>>>                If bProgram Begin
9877>>>                    Send WriteInteger of hoRegistry 'IsStatusBarVisible' (Statusbar_State(hoContainer))
9878>>>                    Send WriteInteger of hoRegistry 'IsToolBarVisible'   (Toolbar_State(hoContainer))
9879>>>                End
9879>>>>
9879>>>                
9879>>>                
9879>>>                Send CloseKey of hoRegistry
9880>>>            End
9880>>>>
9880>>>            
9880>>>            Send Destroy of hoRegistry
9881>>>        End
9881>>>>
9881>>>    End_Procedure
9882>>>    
9882>>>    
9882>>>    Procedure ResetWindowPos tWinRect ByRef WindowPos
9884>>>        Integer ixySize ixSize iySize
9884>>>        Integer ixOffset iyOffset
9884>>>        
9884>>>        // first calculate the offset needed to move onto the main monitor at 0,0
9884>>>        Move (0 - WindowPos.left) to ixOffset
9885>>>        Move (0 - WindowPos.top) to iyOffset
9886>>>        
9886>>>        Move 0 to WindowPos.left
9887>>>        Move 0 to WindowPos.top
9888>>>        
9888>>>        Move (WindowPos.right + ixOffset) to WindowPos.right
9889>>>        Move (WindowPos.bottom + iyOffset) to WindowPos.bottom
9890>>>        
9890>>>        // also make sure that the size of the window is <= the size of the main monitor
9890>>>        Move (GUIScreen_Size(1)) to ixySize    // parameter of 1 means return "available" screen size
9891>>>        Move (low(ixySize))      to ixSize
9892>>>        Move (hi(ixySize))       to iySize
9893>>>        
9893>>>        Move (ixSize min WindowPos.right) to WindowPos.right
9894>>>        Move (iySize min WindowPos.bottom) to WindowPos.bottom
9895>>>    End_Procedure
9896>>>    
9896>>>    
9896>>>    Function RegistryKeyString Returns String
9898>>>        String sCompany sProduct sVersion sProgram
9898>>>        
9898>>>        Get psCompany to sCompany
9899>>>        Get psProduct to sProduct
9900>>>        Get psVersion to sVersion
9901>>>        Get psProgram to sProgram
9902>>>        
9902>>>        If (sCompany = "") ;            Move "Data Access Worldwide" to sCompany
9905>>>        If (sProduct = "") ;            Move "DataFlex Applications" to sProduct
9908>>>        If (sVersion = "") ;            Move C_DFVersion             to sVersion
9911>>>        If (sProgram ="") ;            Move (Module_Name(desktop))   to sProgram
9914>>>        
9914>>>        Function_Return ("SOFTWARE\" +sCompany +"\" +sProduct +"\" +sVersion +"\" +sProgram)
9915>>>    End_Function
9916>>>    
9916>>>    Procedure WriteString String sSubKey String sValueName String sValueData
9918>>>        String sKey
9918>>>        Handle hoRegistry
9918>>>        Integer iError
9918>>>        
9918>>>        Get Create U_cRegistry to hoRegistry
9919>>>        Get RegistryKeyString to sKey
9920>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9923>>>        Get CreateKey of hoRegistry sKey to iError
9924>>>        If (iError = 0) Begin
9926>>>            Send WriteString of hoRegistry sValueName sValueData
9927>>>            Send CloseKey of hoRegistry
9928>>>        End
9928>>>>
9928>>>        
9928>>>        Send Destroy of hoRegistry
9929>>>    End_Procedure
9930>>>    
9930>>>    Procedure WriteInteger String sSubKey String sValueName Integer iValueData
9932>>>        String sKey
9932>>>        Handle hoRegistry
9932>>>        Integer iError
9932>>>        
9932>>>        Get Create U_cRegistry to hoRegistry
9933>>>        Get RegistryKeyString to sKey
9934>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9937>>>        Get CreateKey of hoRegistry sKey to iError
9938>>>        If (iError = 0) Begin
9940>>>            Send WriteInteger of hoRegistry sValueName iValueData
9941>>>            Send CloseKey of hoRegistry
9942>>>        End
9942>>>>
9942>>>        
9942>>>        Send Destroy of hoRegistry
9943>>>    End_Procedure
9944>>>    
9944>>>    // WriteDword is obsolete. Please use WriteInteger or WriteUInt, depending on whether you use a signed or unsigned value.
9944>>>    Procedure WriteDword String sSubKey String sValueName Integer iValueData
9946>>>        Send WriteInteger of Self sSubKey sValueName iValueData 
9947>>>    End_Procedure
9948>>>    
9948>>>    Procedure WriteUInteger String sSubKey String sValueName UInteger uValueData
9950>>>        String sKey
9950>>>        Handle hoRegistry
9950>>>        Integer iError
9950>>>        
9950>>>        Get Create U_cRegistry to hoRegistry
9951>>>        Get RegistryKeyString to sKey
9952>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9955>>>        Get CreateKey of hoRegistry sKey to iError
9956>>>        If (iError = 0) Begin
9958>>>            Send WriteUInt of hoRegistry sValueName uValueData
9959>>>            Send CloseKey of hoRegistry
9960>>>        End
9960>>>>
9960>>>        
9960>>>        Send Destroy of hoRegistry
9961>>>    End_Procedure
9962>>>
9962>>>    Procedure WriteBinary String sSubKey String sValueName Pointer pValueData Integer iDataLength
9964>>>        String sKey
9964>>>        Handle hoRegistry
9964>>>        Integer iError
9964>>>        
9964>>>        Get Create U_cRegistry to hoRegistry
9965>>>        Get RegistryKeyString to sKey
9966>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9969>>>        Get CreateKey of hoRegistry sKey to iError
9970>>>        If (iError = 0) Begin
9972>>>            Send WriteBinary of hoRegistry sValueName pValueData iDataLength
9973>>>            Send CloseKey of hoRegistry
9974>>>        End
9974>>>>
9974>>>        
9974>>>        Send Destroy of hoRegistry
9975>>>    End_Procedure
9976>>>    
9976>>>    // returns true if both sub-key and value exists.
9976>>>    Function ValueExists String sSubKey String sValueName Returns Boolean
9978>>>        String sKey
9978>>>        Handle hoRegistry
9978>>>        Boolean bOK
9978>>>        Get Create U_cRegistry to hoRegistry
9979>>>        Get RegistryKeyString to sKey
9980>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9983>>>        Get OpenKey of hoRegistry sKey to bOk
9984>>>        If (bOK) Begin
9986>>>            Move (ValueExists(hoRegistry, sValueName)) to bOk
9987>>>            Send CloseKey of hoRegistry
9988>>>        End
9988>>>>
9988>>>        Send Destroy of hoRegistry
9989>>>        Function_Return bOk
9990>>>    End_Function
9991>>>    
9991>>>    Function ReadString String sSubKey String sValueName String sDefault Returns String
9993>>>        String sKey sData
9993>>>        Handle hoRegistry
9993>>>        Boolean bOK
9993>>>        
9993>>>        Move sDefault to sData
9994>>>        Get Create U_cRegistry to hoRegistry
9995>>>        Get RegistryKeyString to sKey
9996>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
9999>>>        Get OpenKey of hoRegistry sKey to bOk
10000>>>        If (bOK) Begin
10002>>>            If (ValueExists(hoRegistry, sValueName)) ;                Get ReadString of hoRegistry sValueName to sData
10005>>>            Send CloseKey of hoRegistry
10006>>>        End
10006>>>>
10006>>>        
10006>>>        Send Destroy of hoRegistry
10007>>>        Function_Return sData
10008>>>    End_Function
10009>>>    
10009>>>    Function ReadInteger String sSubKey String sValueName Integer iDefault Returns Integer
10011>>>        String sKey
10011>>>        Integer iData
10011>>>        Handle hoRegistry
10011>>>        Boolean bOK
10011>>>        
10011>>>        Move iDefault to iData
10012>>>        Get Create U_cRegistry to hoRegistry
10013>>>        Get RegistryKeyString to sKey
10014>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
10017>>>        Get OpenKey of hoRegistry sKey to bOk
10018>>>        If bOK Begin
10020>>>            If (ValueExists(hoRegistry, sValueName)) ;                Get ReadInteger of hoRegistry sValueName to iData
10023>>>            Send CloseKey of hoRegistry
10024>>>        End
10024>>>>
10024>>>        
10024>>>        Send Destroy of hoRegistry
10025>>>        Function_Return iData
10026>>>    End_Function
10027>>>
10027>>>    // ReadDword is obsolete. Please use ReadInteger or ReadUInt, depending on whether you expect a signed or unsigned value.
10027>>>    Function ReadDword String sSubKey String sValueName Integer iDefault Returns Integer
10029>>>        Function_Return (ReadInteger(Self, sSubKey, sValueName, iDefault))
10030>>>    End_Function
10031>>>    
10031>>>    Function ReadUInt String sSubKey String sValueName UInteger uDefault Returns UInteger
10033>>>        String sKey
10033>>>        UInteger uData
10033>>>        Handle hoRegistry
10033>>>        Boolean bOK
10033>>>        
10033>>>        Move uDefault to uData
10034>>>        Get Create U_cRegistry to hoRegistry
10035>>>        Get RegistryKeyString to sKey
10036>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
10039>>>        Get OpenKey of hoRegistry sKey to bOk
10040>>>        If bOK Begin
10042>>>            If (ValueExists(hoRegistry, sValueName)) ;                Get ReadUInt of hoRegistry sValueName to uData
10045>>>            Send CloseKey of hoRegistry
10046>>>        End
10046>>>>
10046>>>        
10046>>>        Send Destroy of hoRegistry
10047>>>        Function_Return uData
10048>>>    End_Function
10049>>>    
10049>>>    Function ReadBinary String sSubKey String sValueName Pointer pValueData Integer iDataLength Returns Boolean
10051>>>        String sKey
10051>>>        Handle hoRegistry
10051>>>        Boolean bOK bSuccess
10051>>>        
10051>>>        Get Create U_cRegistry to hoRegistry
10052>>>        Get RegistryKeyString to sKey
10053>>>        If (sSubKey <>"") ;            Move (sKey +'\' +sSubKey) to sKey
10056>>>        Get OpenKey of hoRegistry sKey to bOk
10057>>>        If bOK Begin
10059>>>            Get ReadBinary of hoRegistry sValueName pValueData iDataLength to bSuccess
10060>>>            Send CloseKey of hoRegistry
10061>>>        End
10061>>>>
10061>>>        
10061>>>        Send Destroy of hoRegistry
10062>>>        Function_Return bSuccess
10063>>>    End_Function
10064>>>    
10064>>>    Procedure DoOpenWorkspace String sWorkspace
10066>>>        // Tries to open in this order:
10066>>>        // 1) if absolute path, use that; otherwise
10066>>>        // 2) try to open in the path of the EXE; otherwise
10066>>>        // 3) load it via the Registered list
10066>>>        
10066>>>        Integer eOpened
10066>>>        String sError sWSFile
10066>>>        Handle hoWorkspace
10066>>>        Boolean bChangingWorkspace
10066>>>        
10066>>>        // As soon as an open is attempted, the application's object psAutoOpenWorkspace property
10066>>>        // is cleared. This way any attempt to manually open a workspace during its construction,
10066>>>        // which includes OnCreate, will stop the object from attempting to automatically open the
10066>>>        // workspace. This was added to make psAutoOpenWorkspace compatible with older applications.
10066>>>        // Typically these application will open a workspace in OnCreate. If this happens we assume
10066>>>        // that there should be no automatic opening of a worskpace.
10066>>>        Set psAutoOpenWorkspace to ""
10067>>>        
10067>>>        Get phoWorkspace to hoWorkspace
10068>>>        
10068>>>        Get pbWorkspaceOpened of hoWorkspace to bChangingWorkspace
10069>>>        If (bChangingWorkspace and ghoConnection) Begin
10071>>>            Send AutoDisconnect
10072>>>        End
10072>>>>
10072>>>        
10072>>>        Get OpenWorkspaceFile of hoWorkspace sWorkspace to eOpened
10073>>>        If (eOpened = wsWorkspaceFileNotFound) Begin
10075>>>            If (IsRegistered(hoWorkspace, sWorkspace) =True) Begin
10077>>>                Get OpenWorkspace of hoWorkspace sWorkspace to eOpened
10078>>>            End
10078>>>>
10078>>>        End
10078>>>>
10078>>>        If (eOpened <> wsWorkspaceOpened) Begin
10080>>>            Get OpenWorkspaceErrorMessage of hoWorkspace eOpened to sError
10081>>>            Get psWorkspaceWSFile of hoWorkspace to sWSFile
10082>>>            Error DFERR_CAPPLICATION (SFormat(C_$TheProgramCannotRun, sWorkspace) + ":\n\n" + If(sWSFile<>"",sWSfile+"\n\n","") +sError)
10083>>>>
10083>>>            Abort
10084>>>>
10084>>>        End
10084>>>>
10084>>>        Else Begin
10085>>>            Send AutoConnect
10086>>>            Send OnWorkspaceOpened
10087>>>        End
10087>>>>
10087>>>    End_Procedure
10088>>>    
10088>>>    Procedure AutoConnect
10090>>>        If (ghoConnection) Begin
10092>>>            Send AutoConnect of ghoConnection
10093>>>        End
10093>>>>
10093>>>    End_Procedure
10094>>>    
10094>>>    Procedure AutoDisconnect
10096>>>        If (ghoConnection) Begin
10098>>>            Send AutoDisconnect of ghoConnection
10099>>>        End
10099>>>>
10099>>>    End_Procedure
10100>>>    
10100>>>    // send after a workspace is successfully opened and connected
10100>>>    Procedure OnWorkspaceOpened
10102>>>    End_Procedure
10103>>>    
10103>>>    Procedure OnCreate
10105>>>        // Event called when the Application object is ready to be used
10105>>>        // to open a Workspace, etc.
10105>>>    End_Procedure
10106>>>    
10106>>>    Procedure End_Construct_Object
10108>>>        String sName
10108>>>        Forward Send End_Construct_Object
10110>>>        Send OnCreate
10111>>>        // note that psAutoOpenWorkspace will get cleared of OnCreate attempts to open a workspace
10111>>>        Get psAutoOpenWorkspace to sName
10112>>>        If (sName<>"") Begin
10114>>>            Send DoOpenWorkspace sName
10115>>>        End
10115>>>>
10115>>>    End_Procedure
10116>>>    
10116>>>    Function GetApplicationFileName Returns String
10118>>>        // Returns the filename from Windows
10118>>>        Integer iNumChars
10118>>>        WString wFilename
10118>>>                
10118>>>        Move (Repeat(Character(0), 1024)) to wFilename
10119>>>        Move (GetModuleFileNameW(0, AddressOf(wFilename), 1024)) to iNumChars
10120>>>        
10120>>>        Function_Return (CString(wFilename))
10121>>>    End_Function
10122>>>    
10122>>>    Function GetApplicationPath Returns String
10124>>>        // Returns the path of the Application (no trailing "\")
10124>>>        WString wApplicationFileName 
10124>>>        String sPath
10124>>>        Boolean bRemoved
10124>>>        
10124>>>        Get GetApplicationFileName  to wApplicationFileName
10125>>>        Move (PathRemoveFileSpecW(AddressOf(wApplicationFileName))) to bRemoved
10126>>>        Move (CString(wApplicationFileName)) to sPath
10127>>>        
10127>>>        If (Right(sPath, 1) ="\") ;            Move (Left(sPath, Length(sPath) -1)) to sPath
10130>>>        Function_Return sPath
10131>>>    End_Function
10132>>>    
10132>>>    Function GetApplicationName Returns String
10134>>>        // Returns the name of the Application (without its Path or Extension)
10134>>>        String sApplicationFileName 
10134>>>        WString wApplicationName
10134>>>        Boolean bRemoved
10134>>>        Integer iVoid
10134>>>        
10134>>>        Get GetApplicationFileName to sApplicationFileName
10135>>>        Move (ExtractFileName(sApplicationFileName)) to wApplicationName
10136>>>        Move (PathRemoveExtensionW(AddressOf(wApplicationName))) to iVoid
10137>>>        Function_Return (CString(wApplicationName))
10138>>>    End_Function
10139>>>    
10139>>>    Function DFRootPath Returns String
10141>>>        String sRoot
10141>>>        Get_Profile_String "Defaults" "VDFRootDir" to sRoot
10144>>>        // Ensure it does not contain a trailing "\"
10144>>>        If (Right(sRoot,1) = "\") Begin
10146>>>            Move (Left(sRoot, Length(sRoot)-1)) to sRoot
10147>>>        End
10147>>>>
10147>>>        Function_Return sRoot
10148>>>    End_Function
10149>>>    
10149>>>    Function DFBinPath Returns String
10151>>>        String sRoot
10151>>>        Get DFRootPath to sRoot
10152>>>        If (sRoot<>"") Begin
10154>>>            Move (sRoot+"\bin") to sRoot
10155>>>        End
10155>>>>
10155>>>        Else Begin
10156>>>            // if the root from the registry (vdfrootdir) is empty, we will assume that the
10156>>>            // bin path must be the same as the application path.
10156>>>            Get GetApplicationPath to sRoot
10157>>>        End
10157>>>>
10157>>>        Function_Return sRoot
10158>>>    End_Function
10159>>>    
10159>>>    // this just directs to the desktop property. If you are using an application object you are
10159>>>    // encouraged to set this here.
10159>>>    Procedure Set pbUseWindowsFont Boolean bUseWindowsFont
10161>>>        Set pbUseWindowsFont of Desktop to bUseWindowsFont
10162>>>    End_Procedure
10163>>>    
10163>>>    Function pbUseWindowsFont Returns Boolean
10165>>>        Boolean bUseWindowsFont
10165>>>        Get pbUseWindowsFont of Desktop to bUseWindowsFont
10166>>>        Function_Return bUseWindowsFont
10167>>>    End_Function
10168>>>    
10168>>>    // this just directs to the desktop property. If you are using an application object you are
10168>>>    // encouraged to set this here.
10168>>>    Procedure Set pbLegacyDialogRatio Boolean bLegacy
10170>>>        Set pbLegacyDialogRatio of Desktop to bLegacy
10171>>>    End_Procedure
10172>>>    
10172>>>    Function pbLegacyDialogRatio Returns Boolean
10174>>>        Boolean bLegacy
10174>>>        Get pbLegacyDialogRatio of Desktop to bLegacy
10175>>>        Function_Return bLegacy
10176>>>    End_Function
10177>>>End_Class
10178>>>
10178>>>
10178>Use Dferror.pkg                 // Error handling class and object
Including file: Dferror.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Dferror.pkg)
10178>>>Use cWindowsErrorHandler.pkg
Including file: cWindowsErrorHandler.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cWindowsErrorHandler.pkg)
10178>>>>>Use cBaseErrorHandler.pkg
Including file: cBaseErrorHandler.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cBaseErrorHandler.pkg)
10178>>>>>>>Use errornum.inc
10178>>>>>>>Use cTrappedErrors.pkg
Including file: cTrappedErrors.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cTrappedErrors.pkg)
10178>>>>>>>>>Define MAX_ERROR_NUMBER for 32766
10178>>>>>>>>>
10178>>>>>>>>>// This array stores the set of trapped errors as toggled ranges starting
10178>>>>>>>>>// with the errors that are trapped. The array should always contain 0 and
10178>>>>>>>>>// MAX_ERROR_NUMBER + 1, which are the limits. If an array contained the
10178>>>>>>>>>// following items...
10178>>>>>>>>>//
10178>>>>>>>>>// { 0, 5, 10, MAX_ERROR_NUMBER + 1 }.
10178>>>>>>>>>//
10178>>>>>>>>>// This would mean that errors 1 - 4 are trapped, 5 - 9 are ignored, and
10178>>>>>>>>>// 10 through the rest are trapped.
10178>>>>>>>>>//
10178>>>>>>>>>Class cTrappedErrors is an array
10179>>>>>>>>>    Procedure Construct_Object
10181>>>>>>>>>        Forward Send Construct_Object
10183>>>>>>>>>        
10183>>>>>>>>>        Send initArray
10184>>>>>>>>>    End_Procedure
10185>>>>>>>>>    
10185>>>>>>>>>    // Find largest error LE targetError. Assumes array is sorted.
10185>>>>>>>>>    Function findErrorLE Integer targetError Returns Integer
10187>>>>>>>>>        
10187>>>>>>>>>        Integer lowIndex hiIndex midIndex currError
10187>>>>>>>>>        
10187>>>>>>>>>        // If error is outside of boudary conditions, use
10187>>>>>>>>>        // value of closest valid error# instead.
10187>>>>>>>>>        If (targetError <= 0);            Move 1 to targetError
10190>>>>>>>>>        Else If (targetError >= MAX_ERROR_NUMBER) ;            Move ( MAX_ERROR_NUMBER - 1 ) to targetError
10194>>>>>>>>>        
10194>>>>>>>>>        Move 0 to lowIndex
10195>>>>>>>>>        Move ( item_count( Self ) - 1 ) to hiIndex
10196>>>>>>>>>        
10196>>>>>>>>>        // midIndex will contain the closest error LE to target upon exit.
10196>>>>>>>>>        Repeat
10196>>>>>>>>>>
10196>>>>>>>>>            
10196>>>>>>>>>            Move ( ( lowIndex + hiIndex ) / 2 ) to midIndex
10197>>>>>>>>>            Move ( integer_value( Self, midIndex ) )  to currError
10198>>>>>>>>>            
10198>>>>>>>>>            // midIndex is targetIndex if a match occurs
10198>>>>>>>>>            If (currError = targetError) ;                Function_Return midIndex
10201>>>>>>>>>            
10201>>>>>>>>>            // We are either on it or just below it.
10201>>>>>>>>>            If ( lowIndex = midIndex ) Begin
10203>>>>>>>>>                
10203>>>>>>>>>                If ( integer_value( Self, hiIndex ) le targetError ) ;                    Move hiIndex to midIndex
10206>>>>>>>>>                
10206>>>>>>>>>                Function_Return midIndex
10207>>>>>>>>>                
10207>>>>>>>>>            End
10207>>>>>>>>>>
10207>>>>>>>>>            
10207>>>>>>>>>            // No match, so move the boundaries.
10207>>>>>>>>>            If (currError > targetError) ;                Move ( midIndex - 1 ) to hiIndex
10210>>>>>>>>>            Else ;                Move midIndex to lowIndex
10212>>>>>>>>>            
10212>>>>>>>>>        Until lowIndex gt hiIndex
10214>>>>>>>>>        
10214>>>>>>>>>        Function_Return midIndex
10215>>>>>>>>>        
10215>>>>>>>>>    End_Function
10216>>>>>>>>>    
10216>>>>>>>>>    // Boundaries of the table are assumed to hold error limits.
10216>>>>>>>>>    Procedure initArray
10218>>>>>>>>>        Send delete_data
10219>>>>>>>>>        Set array_value  0 to 0
10220>>>>>>>>>        Set array_value  1 to ( MAX_ERROR_NUMBER + 1 )
10221>>>>>>>>>    End_Procedure
10222>>>>>>>>>    
10222>>>>>>>>>    // Return 1 if Error is trapped, 0 otherwise.
10222>>>>>>>>>    Function IsTrapped Integer Error# Returns Integer
10224>>>>>>>>>        Function_Return ( not ( mod( findErrorLE( Self, Error# ), 2 ) ) )
10225>>>>>>>>>    End_Function
10226>>>>>>>>>    
10226>>>>>>>>>    // Add the error as long as it doesn't violate boundary conditions.
10226>>>>>>>>>    // This routine leaves the array unsorted.
10226>>>>>>>>>    Procedure addError Integer Error#
10228>>>>>>>>>        If ( ( Error# lt MAX_ERROR_NUMBER ) and ( Error# gt 0 ) ) ;            Set array_value  ( item_count( Self ) ) to ( Integer( Error# ) )
10231>>>>>>>>>    End_Procedure
10232>>>>>>>>>    
10232>>>>>>>>>    // Set error to flagged state.
10232>>>>>>>>>    Procedure handleError Integer Error# Integer trapFlag
10234>>>>>>>>>        
10234>>>>>>>>>        Integer prevErrIndex prevErrFlag prevErrValue nextErrValue
10234>>>>>>>>>        
10234>>>>>>>>>        If ( ( Error# gt MAX_ERROR_NUMBER ) or ( Error# lt 0 ) ) Begin
10236>>>>>>>>>            Error DFERR_ERROR_NUMBER_OUT_OF_RANGE
10237>>>>>>>>>>
10237>>>>>>>>>            Procedure_Return
10238>>>>>>>>>        End
10238>>>>>>>>>>
10238>>>>>>>>>        
10238>>>>>>>>>        Get findErrorLE Error# to prevErrIndex
10239>>>>>>>>>        Get isTrapped   Error# to prevErrFlag
10240>>>>>>>>>        
10240>>>>>>>>>        // if eq, Error already handled in some range.
10240>>>>>>>>>        If (PrevErrFlag <> trapFlag) Begin
10242>>>>>>>>>            
10242>>>>>>>>>            // This is kind of complicated. If we are adding an error,
10242>>>>>>>>>            // we have to account for the error already being in the
10242>>>>>>>>>            // array as well as rejoining ranges that have been previously
10242>>>>>>>>>            // split and splitting ranges when adding a new flag.
10242>>>>>>>>>            
10242>>>>>>>>>            Get integer_value  ( prevErrIndex + 1 ) to nextErrValue
10243>>>>>>>>>            Get integer_value  prevErrIndex         to prevErrValue
10244>>>>>>>>>            
10244>>>>>>>>>            // Do this first so prevErrIndex stays valid.
10244>>>>>>>>>            If (nextErrValue = ( Error# + 1 )) ;                Send delete_item ( prevErrIndex + 1 )
10247>>>>>>>>>            Else ;                Send addError ( Error# + 1 )
10249>>>>>>>>>            
10249>>>>>>>>>            If ( prevErrValue < Error# ) ;                Send addError Error#
10252>>>>>>>>>            Else ;                Send delete_item prevErrIndex
10254>>>>>>>>>        End
10254>>>>>>>>>>
10254>>>>>>>>>        Send sort_items UPWARD_DIRECTION
10255>>>>>>>>>        
10255>>>>>>>>>    End_Procedure
10256>>>>>>>>>    
10256>>>>>>>>>    // Flag error as trappable
10256>>>>>>>>>    Procedure Trap_Error Integer Error#
10258>>>>>>>>>        Send handleError Error# 1
10259>>>>>>>>>    End_Procedure
10260>>>>>>>>>    
10260>>>>>>>>>    // Flag error as non-trappable
10260>>>>>>>>>    Procedure Ignore_Error Integer Error#
10262>>>>>>>>>        Send handleError Error# 0
10263>>>>>>>>>    End_Procedure
10264>>>>>>>>>    
10264>>>>>>>>>    // Flag all errors as trappable
10264>>>>>>>>>    Procedure Trap_All
10266>>>>>>>>>        Send initArray
10267>>>>>>>>>    End_Procedure
10268>>>>>>>>>    
10268>>>>>>>>>    // Flag all errors as non-trappable
10268>>>>>>>>>    Procedure Ignore_All
10270>>>>>>>>>        Send delete_data
10271>>>>>>>>>        Set array_value 0 to 0
10272>>>>>>>>>        Set array_value 1 to 1
10273>>>>>>>>>        Set array_value 2 to ( MAX_ERROR_NUMBER + 1 )
10274>>>>>>>>>    End_Procedure
10275>>>>>>>>>End_Class
10276>>>>>>>>>
10276>>>>>>>Use LanguageText.pkg
10276>>>>>>>Use VdfBase.pkg
10276>>>>>>>
10276>>>>>>>// used by error handler and UserError to pull a caption out of the error string
10276>>>>>>>Define C_ErrorCaption for "*CAPTION*="
10276>>>>>>>
10276>>>>>>>Class cBaseErrorHandler is a cObject
10277>>>>>>>    Procedure Construct_Object
10279>>>>>>>        Forward Send Construct_Object
10281>>>>>>>        
10281>>>>>>>        Set delegation_mode to no_delegate_or_error
10282>>>>>>>        
10282>>>>>>>        // This is the caption that appears for unhandled errors dialog box
10282>>>>>>>        Property String psUnhandledErrorCaption C_$UnhandledProgramError
10283>>>>>>>        
10283>>>>>>>        // This is the caption that appears for standard user errors
10283>>>>>>>        Property String psUserErrorCaption C_$Error
10284>>>>>>>        
10284>>>>>>>        // If set false, this makes the error handler work the old way which
10284>>>>>>>        // does not use the new unhandled dialog. Only exists for compatibility reasons
10284>>>>>>>        Property Boolean pbUnhandledErrorSupport       True
10285>>>>>>>        
10285>>>>>>>        Property Boolean pbErrorProcessingState False  // Flag which is sent when error is being processed. This stops error recursion.
10286>>>>>>>        
10286>>>>>>>        Property Integer piCurrentErrorNumber     0
10287>>>>>>>        Property Integer piCurrentErrorLine        0
10288>>>>>>>        
10288>>>>>>>        Property Integer[] paUserErrors       // Collection of sorted error numbers considered to be user errors. (note, this array must remain sorted!)
10289>>>>>>>        
10289>>>>>>>        
10289>>>>>>>        Object oTrappedErrors is a cTrappedErrors
10291>>>>>>>        End_Object
10292>>>>>>>        
10292>>>>>>>        Send DefineStandardUserErrors
10293>>>>>>>        
10293>>>>>>>        Move Self to Error_Object_Id
10294>>>>>>>        Move Self to ghoErrorHandler
10295>>>>>>>    End_Procedure
10296>>>>>>>    
10296>>>>>>>    Procedure DefineStandardUserErrors
10298>>>>>>>        Integer[] aUserErrors
10299>>>>>>>        
10299>>>>>>>        // define the standard user error numbers....
10299>>>>>>>        Move 0                                     to aUserErrors[0]
10300>>>>>>>        Move DFERR_NUMBER_TOO_LARGE                to aUserErrors[1]
10301>>>>>>>        Move DFERR_WINDOW_RANGE                    to aUserErrors[2]
10302>>>>>>>        Move DFERR_ENTRY_REQUIRED                  to aUserErrors[3]
10303>>>>>>>        Move DFERR_ENTER_A_NUMBER                  to aUserErrors[4]
10304>>>>>>>        Move DFERR_BAD_ENTRY                       to aUserErrors[5]
10305>>>>>>>        Move DFERR_ENTER_VALID_DATE                to aUserErrors[6]
10306>>>>>>>        Move DFERR_NUMERIC_RANGE                   to aUserErrors[7]
10307>>>>>>>        Move DFERR_DUPLICATE_REC                   to aUserErrors[8]
10308>>>>>>>        Move DFERR_TEXT_FIELD_TOO_LONG             to aUserErrors[9]
10309>>>>>>>        Move DFERR_FIND_PRIOR_BEG_OF_FILE          to aUserErrors[10]
10310>>>>>>>        Move DFERR_FIND_PAST_END_OF_FILE           to aUserErrors[11]
10311>>>>>>>        Move DFERR_NO_REC_TO_DELETE                to aUserErrors[12]
10312>>>>>>>        Move DFERR_FIELD_NOT_INDEXED               to aUserErrors[13]
10313>>>>>>>        Move DFERR_REC_NUMBER_RANGE                to aUserErrors[14]
10314>>>>>>>        Move DFERR_ENTER_VALID_REC_ID              to aUserErrors[15]
10315>>>>>>>        Move DFERR_OPERATOR_ERROR                  to aUserErrors[16]
10316>>>>>>>        Move DFERR_CANT_CHANGE_KEY_FIELD           to aUserErrors[17]
10317>>>>>>>        Move DFERR_NO_DELETE_RELATED_RECORDS_EXIST to aUserErrors[18]
10318>>>>>>>        Move DFERR_OPERATION_NOT_ALLOWED           to aUserErrors[19]
10319>>>>>>>        Move DFERR_OPERATOR                        to aUserErrors[20]
10320>>>>>>>        Move DFERR_XML_HTTP                        to aUserErrors[21]
10321>>>>>>>        Move DFERR_CLIENT_SOAP_TRANSFER            to aUserErrors[22]
10322>>>>>>>        Move DFERR_CLIENT_SOAP_FAULT               to aUserErrors[23]
10323>>>>>>>        Move DFERR_TEXT_TOO_LARGE_FOR_FIELD        to aUserErrors[24]
10324>>>>>>>        Move DFERR_WINPRINT                        to aUserErrors[25]
10325>>>>>>>        Move DFERR_CRYSTAL_REPORT                  to aUserErrors[26]
10326>>>>>>>        Move DFERR_MAPI                            to aUserErrors[27]
10327>>>>>>>        Move DFERR_FILE_ACCESS_VIOLATION           to aUserErrors[28]
10328>>>>>>>        Move DFERR_DATAFLEX_REPORTS                to aUserErrors[29]
10329>>>>>>>        Move DFERR_CANT_REFIND_RECORD              to aUserErrors[30]
10330>>>>>>>        // WebApp Errors
10330>>>>>>>        Move DFERR_WEBAPP_ACCESS_DENIED            to aUserErrors[31]
10331>>>>>>>        // This is defined as DD_DEFAULT_ERROR_NUMBER in DataDict.pkg and is the default Field_error number of DDs.
10331>>>>>>>        Move 999                                   to aUserErrors[32]
10332>>>>>>>        // This is session timeout (we keep the old number 950 for backwards comatibility reasons)
10332>>>>>>>        Move DFERR_WEBAPP_SESSION_TIMEOUT          to aUserErrors[33]
10333>>>>>>>        // This is session timeout (we keep the old number 951 for backwards comatibility reasons)
10333>>>>>>>        Move DFERR_WEBAPP_BAD_SESSION_KEY          to aUserErrors[34]
10334>>>>>>>        Move DFERR_WEBAPP_INVALID_URL              to aUserErrors[35]
10335>>>>>>>        Move DFERR_WEBAPP_INVALID_URL_REC          to aUserErrors[36]
10336>>>>>>>        Move (SortArray(aUserErrors)) to aUserErrors
10337>>>>>>>        Set paUserErrors to aUserErrors
10338>>>>>>>    End_Procedure
10339>>>>>>>    
10339>>>>>>>    Procedure HandleError Integer iErrNum Integer iErrLine String sErrText
10341>>>>>>>        //  Stub method implemented by subclass
10341>>>>>>>    End_Procedure
10342>>>>>>>    
10342>>>>>>>    // Called by the runtime when an error occurs. Initiates the main error handling. Skips errors
10342>>>>>>>    // that are ignored and makes sure to prevent recursion by checking the error processing state.
10342>>>>>>>    Procedure Error_Report Integer iErrNum Integer iErrLine String sErrText
10344>>>>>>>        If (pbErrorProcessingState(Self)) ;            Procedure_Return
10347>>>>>>>            
10347>>>>>>>        If (not(IsTrapped(Self, iErrNum))) ;            Procedure_Return
10350>>>>>>>        
10350>>>>>>>        Set pbErrorProcessingState to True
10351>>>>>>>        Set piCurrentErrorNumber to iErrNum
10352>>>>>>>        Set piCurrentErrorLine to iErrLine
10353>>>>>>>        
10353>>>>>>>        Send HandleError iErrNum iErrLine sErrText
10354>>>>>>>        
10354>>>>>>>        Set piCurrentErrorNumber to 0
10355>>>>>>>        Set piCurrentErrorLine to 0
10356>>>>>>>        Move 0 to ghoErrorSource
10357>>>>>>>        Set pbErrorProcessingState to False
10358>>>>>>>    End_Procedure
10359>>>>>>>    
10359>>>>>>>    
10359>>>>>>>
10359>>>>>>>    
10359>>>>>>>    // Returns true if this is a user error (i.e. "find past end of file")
10359>>>>>>>    Function IsUserError Integer iError Returns Boolean
10361>>>>>>>        Integer[] aUserErrors
10362>>>>>>>        Get paUserErrors to aUserErrors
10363>>>>>>>        Function_Return (BinarySearchArray(iError, aUserErrors) <> -1)
10364>>>>>>>    End_Function
10365>>>>>>>    
10365>>>>>>>        // returns true if this is an unhandled error (i.e., not a user error
10365>>>>>>>    Function IsUnhandledError Integer iError Returns Boolean
10367>>>>>>>        Integer[] UserErrors
10368>>>>>>>        Get paUserErrors to UserErrors
10369>>>>>>>        Function_Return (SearchArray(iError,UserErrors)=-1)
10370>>>>>>>    End_Function
10371>>>>>>>    
10371>>>>>>>    Procedure AddUserError Integer iError
10373>>>>>>>        // adds a user error to the collection of defined 'user errors'
10373>>>>>>>        Integer[] aUserErrors
10374>>>>>>>        Get paUserErrors to aUserErrors
10375>>>>>>>        
10375>>>>>>>        If (BinarySearchArray(iError, aUserErrors) = -1) Begin
10377>>>>>>>            Move (InsertInArray(aUserErrors, BinarySearchInsertPos(), iError)) to aUserErrors         // Keep the array sorted. Makes searching fast, adding slower.
10378>>>>>>>            Set paUserErrors to aUserErrors
10379>>>>>>>        End
10379>>>>>>>>
10379>>>>>>>    End_Procedure
10380>>>>>>>    
10380>>>>>>>    Procedure RemoveUserError Integer iError
10382>>>>>>>        // Removes the passed error number from the set of user errors.
10382>>>>>>>        Integer iIndex
10382>>>>>>>        Integer[] aUserErrors
10383>>>>>>>        
10383>>>>>>>        Get paUserErrors to aUserErrors
10384>>>>>>>        Move (BinarySearchArray(iError, aUserErrors)) to iIndex
10385>>>>>>>        
10385>>>>>>>        If (iIndex <> -1) Begin
10387>>>>>>>            Move (RemoveFromArray(aUserErrors, iIndex)) to aUserErrors
10388>>>>>>>            Set paUserErrors to aUserErrors
10389>>>>>>>        End
10389>>>>>>>>
10389>>>>>>>    End_Procedure
10390>>>>>>>    
10390>>>>>>>    Procedure RemoveAllUserErrors
10392>>>>>>>        // Clears set of User Errors
10392>>>>>>>        Set paUserErrors to (ResizeArray(paUserErrors(Self), 0))
10393>>>>>>>    End_Procedure
10394>>>>>>>    
10394>>>>>>>    // return true if an error number is critical
10394>>>>>>>    Function IsCritical Integer iError Returns Boolean
10396>>>>>>>        Function_Return (".3.10.18.19.20.21.22.43.70.72.74.75.78.80.97.";            contains ("."+String(iError)+"."))
10397>>>>>>>    End_Function
10398>>>>>>>    
10398>>>>>>>    Procedure TrapError Integer iError
10400>>>>>>>        Send Trap_Error of oTrappedErrors iError
10401>>>>>>>    End_Procedure
10402>>>>>>>    
10402>>>>>>>    Procedure IgnoreError Integer iError
10404>>>>>>>        Send Ignore_Error of oTrappedErrors iError
10405>>>>>>>    End_Procedure
10406>>>>>>>    
10406>>>>>>>    Procedure IgnoreAllErrors
10408>>>>>>>        Send Ignore_All of oTrappedErrors
10409>>>>>>>    End_Procedure
10410>>>>>>>    
10410>>>>>>>    Procedure TrapAllErrors
10412>>>>>>>        Send Trap_All of oTrappedErrors
10413>>>>>>>    End_Procedure
10414>>>>>>>    
10414>>>>>>>    Function IsTrapped Integer iError  Returns Boolean
10416>>>>>>>        Function_Return (IsTrapped(oTrappedErrors,iError))
10417>>>>>>>    End_Function
10418>>>>>>>    
10418>>>>>>>    
10418>>>>>>>
10418>>>>>>>    
10418>>>>>>>    // Used to fetch the default error description.
10418>>>>>>>    //
10418>>>>>>>    // iError   - Error number
10418>>>>>>>    // sMessage - Additional error message
10418>>>>>>>    // Returns  - Complete error message
10418>>>>>>>    Function ErrorDescription Integer iError String sMessage Returns String
10420>>>>>>>        String sDescription
10420>>>>>>>        Boolean bAvailable
10420>>>>>>>        
10420>>>>>>>        //  Fetch system error text
10420>>>>>>>        Get Error_Text of Desktop iError to sDescription
10421>>>>>>>        Get Error_Text_Available of Desktop iError to bAvailable
10422>>>>>>>        
10422>>>>>>>        //  Trim both messages
10422>>>>>>>        Move (Trim(sDescription)) to sDescription
10423>>>>>>>        Move (Trim(sMessage)) to sMessage
10424>>>>>>>        
10424>>>>>>>        //  Append message if needed
10424>>>>>>>        If (sMessage <> "") Begin
10426>>>>>>>            If (sDescription <> "" and bAvailable) Begin
10428>>>>>>>                Move (sDescription + " " + sMessage) to sDescription
10429>>>>>>>            End
10429>>>>>>>>
10429>>>>>>>            Else Begin
10430>>>>>>>                Move sMessage to sDescription
10431>>>>>>>            End
10431>>>>>>>>
10431>>>>>>>        End
10431>>>>>>>>
10431>>>>>>>        
10431>>>>>>>        Function_Return sDescription
10432>>>>>>>    End_Function
10433>>>>>>>    
10433>>>>>>>    // Legacy names here for backwards compatibility
10433>>>>>>>    Function Error_Description Integer iError String sMessage Returns String
10435>>>>>>>        Function_Return (ErrorDescription(Self, iError, sMessage))
10436>>>>>>>    End_Function
10437>>>>>>>    
10437>>>>>>>    
10437>>>>>>>    Function Error_processing_state Returns Boolean
10439>>>>>>>        Function_Return (pbErrorProcessingState(Self))
10440>>>>>>>    End_Function
10441>>>>>>>    
10441>>>>>>>    Function Current_Error_Number Returns Integer
10443>>>>>>>        Function_Return (piCurrentErrorNumber(Self))
10444>>>>>>>    End_Function
10445>>>>>>>    
10445>>>>>>>    Procedure Set Current_Error_Number Integer iErr
10447>>>>>>>        Set piCurrentErrorNumber to iErr
10448>>>>>>>    End_Procedure
10449>>>>>>>    
10449>>>>>>>    Function Error_Line_Number Returns Integer
10451>>>>>>>        Function_Return (piCurrentErrorLine(Self))
10452>>>>>>>    End_Function
10453>>>>>>>    
10453>>>>>>>    Procedure Set Error_Line_Number Integer iLine
10455>>>>>>>        Set piCurrentErrorLine to iLine
10456>>>>>>>    End_Procedure
10457>>>>>>>    
10457>>>>>>>    Procedure Trap_Error Integer iError
10459>>>>>>>        Send TrapError iError
10460>>>>>>>    End_Procedure
10461>>>>>>>    
10461>>>>>>>    Procedure Ignore_Error Integer iError
10463>>>>>>>        Send IgnoreError iError
10464>>>>>>>    End_Procedure
10465>>>>>>>    
10465>>>>>>>    Procedure Trap_All
10467>>>>>>>        Send TrapAllErrors
10468>>>>>>>    End_Procedure
10469>>>>>>>    
10469>>>>>>>    Procedure Ignore_All
10471>>>>>>>        Send IgnoreAllErrors
10472>>>>>>>    End_Procedure
10473>>>>>>>    
10473>>>>>>>    Function Is_Critical Integer iError Returns Boolean
10475>>>>>>>        Function_Return (IsCritical(Self, iError))
10476>>>>>>>    End_Function
10477>>>>>>>End_Class
10478>>>>>>>
10478>>>>>>>Procedure UserError Global String sMessage String sCaption
10480>>>>>>>    String sCapt
10480>>>>>>>    If (Error_Object_Id=0) Begin
10482>>>>>>>        Error DFERR_PROGRAM "No Error Handler"
10483>>>>>>>>
10483>>>>>>>        Procedure_Return
10484>>>>>>>    End
10484>>>>>>>>
10484>>>>>>>    
10484>>>>>>>    // Accept not passing a caption in which case the error handler's
10484>>>>>>>    // default caption. It had been the intention to require a caption ("" if none)
10484>>>>>>>    // but having no caption kind of worked where the caption would be "0". Since it
10484>>>>>>>    // kind of worked, I don't want to remove this which might generate runtime errors.
10484>>>>>>>    If (num_arguments>1) Begin
10486>>>>>>>        Move sCaption to sCapt
10487>>>>>>>    End
10487>>>>>>>>
10487>>>>>>>    
10487>>>>>>>    Error DFERR_OPERATOR (sMessage + If(sCapt<>"",C_ErrorCaption + sCapt,""))
10488>>>>>>>>
10488>>>>>>>End_Procedure
10489>>>>>Use Windows.pkg
10489>>>>>Use msgbox.pkg
10489>>>>>Use GlobalFunctionsProcedures.pkg
10489>>>>>
10489>>>>>Class cWindowsErrorHandler is a cBaseErrorHandler
10490>>>>>    Procedure Construct_Object
10492>>>>>        Forward Send Construct_Object
10494>>>>>        
10494>>>>>        
10494>>>>>        
10494>>>>>        // shows error numbers with user errors. Only set this true if your
10494>>>>>        // application has meaningful numbers that helps the end user. Note that
10494>>>>>        // unhandled errors always show numbers.
10494>>>>>        // this is ignored if pbUnhandledErrorSupport is false
10494>>>>>        Property Boolean pbShowErrorNumber        False
10495>>>>>        
10495>>>>>        //  This allows us to skip find errors (GT & LT) and to only
10495>>>>>        //  ring a bell when these occur.
10495>>>>>        //
10495>>>>>        Property Boolean pbBellOnFindErrorState True
10496>>>>>        
10496>>>>>        Property Integer pbVerboseState         True
10497>>>>>
10497>>>>>    End_Procedure
10498>>>>>    
10498>>>>>
10498>>>>>    
10498>>>>>    Procedure UnhandledErrorDisplay Integer iErrorLine String sMessage
10500>>>>>        String sCaption sCRLF
10500>>>>>        Move (Character(13)+Character(10)) to sCRLF
10501>>>>>        Get psUnhandledErrorCaption to sCaption
10502>>>>>        Move (Replaces("\n",sMessage,sCRLF)) to sMessage
10503>>>>>        Move (Replaces("\"+sCRLF, sMessage, "\n")) to sMessage
10504>>>>>        ErrorDisplay iErrorLine sMessage sCaption C_$OK C_$Copy
10505>>>>>    End_Procedure
10506>>>>>    
10506>>>>>    // Handle error event, displaying error info to user.
10506>>>>>    Procedure HandleError Integer iErrNum Integer iErrLine String sErrText
10508>>>>>        Integer iReply iIcon
10508>>>>>        String  sDescription sMess
10508>>>>>        String  sSource sCaption
10508>>>>>        Integer iSrcPos iSrc iTxtLen
10508>>>>>        Boolean bIsUnhandled bUnhandledSupport bCritical bVerbose
10508>>>>>        
10508>>>>>        
10508>>>>>        // if this is false, this will work old-style -- all errors go through message box
10508>>>>>        Get pbUnhandledErrorSupport to bUnhandledSupport
10509>>>>>        
10509>>>>>        Get IsCritical iErrNum to bCritical
10510>>>>>        Get IsUnhandledError iErrNum to bIsUnhandled
10511>>>>>        
10511>>>>>        
10511>>>>>        //
10511>>>>>        //   Changes made so find errors don't report - just beep
10511>>>>>        //
10511>>>>>        If ( pbBellOnFindErrorState(Self) and ;             (iErrNum=DFERR_FIND_PRIOR_BEG_OF_FILE or iErrNum=DFERR_FIND_PAST_END_OF_FILE)) Begin
10513>>>>>            Send Bell
10514>>>>>        End
10514>>>>>>
10514>>>>>        Else Begin
10515>>>>>            
10515>>>>>            // See if source information is provided (Source = module.function). If so remove
10515>>>>>            // as detail. Must find last instance of this in string
10515>>>>>            Move (pos(C_ErrorContextSourceText,sErrText)) to iSrc
10516>>>>>            If (iSrc > 0) Begin
10518>>>>>                Move (iSrc-1) to iSrcPos
10519>>>>>                Move (length(C_ErrorContextSourceText)) to  iTxtLen
10520>>>>>                Move sErrText to sSource
10521>>>>>                Repeat // this makes sure we find last instance of this
10521>>>>>>
10521>>>>>                    Move (Remove(sSource, 1, iSrc-1 + iTxtLen )) to sSource // right part of string
10522>>>>>                    Move (Pos(C_ErrorContextSourceText,sSource)) to iSrc           // see if it was the last
10523>>>>>                    If (iSrc > 0) ;                                               // if not, track length                        Move (iSrcPos + iTxtLen + iSrc-1) to iSrcPos
10526>>>>>                Until (iSrc=0)
10528>>>>>                Move (Trim(Left(sErrText,iSrcPos))) to sErrText
10529>>>>>                If (Right(sErrText,1) = ',') ;                    Move (Left(sErrText,Length(sErrText) - 1)) to sErrText
10532>>>>>            End
10532>>>>>>
10532>>>>>            
10532>>>>>            // the caption normally used for handled user errors
10532>>>>>            Get psUserErrorCaption to sCaption
10533>>>>>            // if an operator error this may be a Procedure UserError situation where the
10533>>>>>            // caption is passed in the error text. If so, get the caption
10533>>>>>            If (iErrNum=DFERR_OPERATOR) Begin
10535>>>>>                Move (pos(C_ErrorCaption,sErrText)) to iSrc
10536>>>>>                If iSrc Begin
10538>>>>>                    Move (Length(C_ErrorCaption)) to  iTxtLen
10539>>>>>                    Move (Remove(sErrText, 1, iSrc-1 + iTxtLen )) to sCaption
10540>>>>>                    Move (Left(sErrText,iSrc-1)) to sErrText
10541>>>>>                End
10541>>>>>>
10541>>>>>            End
10541>>>>>>
10541>>>>>            
10541>>>>>            Get ErrorDescription iErrNum sErrText to sDescription
10542>>>>>            
10542>>>>>            // if the error source is identified we can get extended error
10542>>>>>            // text for our error message
10542>>>>>            If (ghoErrorSource > 0) Begin
10544>>>>>                Get extended_error_Message of ghoErrorSource to sMess
10545>>>>>                If (sMess <> '') ;                    Move (sDescription + "\n\n" + sMess ) to sDescription
10548>>>>>            End
10548>>>>>>
10548>>>>>            
10548>>>>>            If (bUnhandledSupport) Begin
10550>>>>>                // as of 14.1, this is the preferred way to do errors
10550>>>>>                If (bCritical or bIsUnhandled) Begin
10552>>>>>                    Move ( sDescription + "\n\n" + C_$Error + ":" * String(iErrNum) ) to sDescription
10553>>>>>                    If (sSource <> "") Begin
10555>>>>>                        Move (sDescription + "\n" + C_$ErrorSource +" =" * sSource) to sDescription
10556>>>>>                    End
10556>>>>>>
10556>>>>>                End
10556>>>>>>
10556>>>>>                Else If (pbShowErrorNumber(Self)) Begin
10559>>>>>                    // if a user error, we provide a way to see error numbers.
10559>>>>>                    Move ( sDescription + "\n\n" + C_$Error + ":" * String(iErrNum) ) to sDescription
10560>>>>>                End
10560>>>>>>
10560>>>>>            End
10560>>>>>>
10560>>>>>            Else Begin
10561>>>>>                // we get here if we want it to work the old (less good) way. This is provided
10561>>>>>                // only for backwards compatibility. All errors go through the message box
10561>>>>>                Get Verbose_State to bVerbose
10562>>>>>                If (bVerbose)  Begin
10564>>>>>                    Move ( sDescription + "\n\n" + SFormat(C_$TechnicalDetails, iErrNum, iErrLine) ) to sDescription
10565>>>>>                    If (sSource<>"") Begin
10567>>>>>                        Move (sDescription + "\n" + C_$ErrorSource +" =" * sSource) to sDescription
10568>>>>>                    End
10568>>>>>>
10568>>>>>                End
10568>>>>>>
10568>>>>>            End
10568>>>>>>
10568>>>>>            
10568>>>>>            If ( (bCritical or bIsUnhandled) and bUnhandledSupport) Begin
10570>>>>>                Send UnhandledErrorDisplay iErrLine sDescription
10571>>>>>            End
10571>>>>>>
10571>>>>>            Else Begin
10572>>>>>                Move (If(bCritical,MB_IconHand,MB_IconExclamation)) to iIcon
10573>>>>>                Move (Message_Box(sDescription, sCaption, MB_Ok, iIcon)) to iReply
10574>>>>>            End
10574>>>>>>
10574>>>>>            
10574>>>>>            // abort on critical errors
10574>>>>>            If bCritical ;                Abort
10577>>>>>            
10577>>>>>        End
10577>>>>>>
10577>>>>>        
10577>>>>>    End_Procedure
10578>>>>>    
10578>>>>>    
10578>>>>>    
10578>>>>>    Function Help_Context Integer Context_Type Returns String
10580>>>>>        Function_Return (Current_Error_Number(Self))
10581>>>>>    End_Function
10582>>>>>    
10582>>>>>    
10582>>>>>    
10582>>>>>    // The following functions are rarely or never used.
10582>>>>>    
10582>>>>>    // The functions below are used to construct a general help
10582>>>>>    // name for errors that are generated by the system.  If processing
10582>>>>>    // comes here, then there was no module specific help found.  These
10582>>>>>    // functions will provide a more general help name that appears in
10582>>>>>    // the form of SYSTEM..ERROR:#.  All global errors should be
10582>>>>>    // places in the help file under this application and module name.
10582>>>>>    
10582>>>>>    // Returns "ERROR:errornum" to supply error help.
10582>>>>>    Function Help_Name Returns String
10584>>>>>        Function_Return (Append("ERROR:",lastErr))
10585>>>>>    End_Function
10586>>>>>    
10586>>>>>    Function Application_Name Returns String
10588>>>>>        Function_Return 'SYSTEM'
10589>>>>>    End_Function
10590>>>>>    
10590>>>>>    Function Module_Name Returns String
10592>>>>>        Function_Return ''
10593>>>>>    End_Function
10594>>>>>    
10594>>>>>    
10594>>>>>    // Legacy names here for backwards compatibility
10594>>>>>    Function Verbose_State Returns Boolean
10596>>>>>        Function_Return (pbVerboseState(Self))
10597>>>>>    End_Function
10598>>>>>    
10598>>>>>    Procedure Set Verbose_State Boolean bVal
10600>>>>>        Set pbVerboseState to bVal
10601>>>>>    End_Procedure
10602>>>>>    
10602>>>>>    Procedure Set Bell_on_Find_Error_State Boolean bVal
10604>>>>>        Set pbBellOnFindErrorState to bVal
10605>>>>>    End_Procedure
10606>>>>>    
10606>>>>>    Function Bell_on_Find_Error_State Returns Boolean
10608>>>>>        Function_Return (pbBellOnFindErrorState(Self))
10609>>>>>    End_Function
10610>>>>>End_Class
10611>>>
10611>>>// Legacy classnames
10611>>>Class ErrorSystem is a cWindowsErrorHandler
10612>>>End_Class
10613>>>
10613>>>Class Trapped_Errors_Array is a cTrappedErrors
10614>>>End_Class
10615>>>
10615>>>// Replace to make legacy code run that uses old names work
10615>>>
10615>>>Object oErrorHandler is a cWindowsErrorHandler
10617>>>End_Object
10618>>>
10618>Use seq_chnl.pkg                // Sequential channel management
10618>Use Statpnl.pkg                 // StatusPanel class
Including file: Statpnl.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Statpnl.pkg)
10618>>>// creates the standard status_panel object.
10618>>>//
10618>>>// This is the default Status Panel object used by any of the DataFlex classes that
10618>>>// invoke the standard status panel. The standard has always been that the package name
10618>>>// is StatPnl.pkg and the name of the object is Status_Panel. As of 12.0, there are major
10618>>>// changes in the way the status panel operates The Sentinel based external status panel used in
10618>>>// prior revisions has been replace with status panel that is part of the application.
10618>>>// This should work much better and faster than the old sentinel based solution.
10618>>>// While the way this operates has changed, the interface has not and therefore this should work
10618>>>// with most applications.
10618>>>//
10618>>>// As of 12.0, we have added a global handle that contains the object ID of this status panel.
10618>>>// This variable ghoStatusPanel can be used in place of the object name Status_Panel. This provides
10618>>>// a cleaner more robust interface.
10618>>>//
10618>>>//
10618>>>// Compatibility Note:
10618>>>//
10618>>>// When used in the standard way, this change will require no changes. A developer will only need to
10618>>>// change their code if they've modified the sentinel program, which was a difficult thing to do.
10618>>>//
10618>>>// If for some reason you application will not work using this as a replacement for the old status
10618>>>// panel, you've probably done something special with the old status-panel. If you don't want to
10618>>>// figure out how to use the new one and you want to continue using the old one you are going to need
10618>>>// to add some code to include the old status panel in your application. Add the following to your project (your src).
10618>>>//
10618>>>// Use StatPnl.pkg    // Make sure you load the new status panel object first. this is not optional!
10618>>>// Use OldStatPnl.pkg // load the old status panel. Status_Panel is now this old object
10618>>>//
10618>>>// If you do this, you will lose access to the new status-panel via Status_Panel. However, you
10618>>>// can still access the new object via the ghoStatusPanel handle.
10618>>>//
10618>>>//
10618>>>// Creating your own Status Panel objects
10618>>>//
10618>>>// If a developer wishes to create a custom panel, they should use this package as their template.
10618>>>// This panel can be visually modeled and changed any way you wish. Just save your new custom panel
10618>>>// with a different file and object name and direct your status panel request to the new object.
10618>>>//
10618>>>// If the new panel changes the interface and updates objects that are not currently defined, you
10618>>>// want to make sure you send the message ProcessEvents after you've updated the object. This allows
10618>>>// the object to paint when inside of a tight loop. For example, if you wanted to add a progress
10618>>>// bar (cProgressBar) you would want to Send ProcessEvents after you update the progress bar.
10618>>>// e.g.
10618>>>//       Procedure UpdateStatusBar
10618>>>//           Send DoAdvance of oProgressBar
10618>>>//           Send ProcessEvents
10618>>>//       End_Procedure
10618>>>//
10618>>>// Of course, if you use the standard interfaces in status bar and your forward send these
10618>>>// messages this will be done for you.
10618>>>//
10618>>>// the standard Interface for status panels are:
10618>>>//
10618>>>// Send Initialize_StatusPanel - initializes values for caption, title & message
10618>>>// Send Start_StatusPanel      - start the status panel
10618>>>// Send Stop_StatusPanel       - stop the status panel
10618>>>// Send Update_StatusPanel     - update the status panel's action area
10618>>>// Get  Check_StatusPanel      - check for cancel (if cancel or pbCancel is set, close the panel)
10618>>>//
10618>>>// Get/Set Caption_Text - updates the caption bar
10618>>>// Get/Set Title_Text   - updates the title area
10618>>>// Get/Set Message_Text - updates the Message area
10618>>>// Get/Set Action_Text  - updates the action area
10618>>>// Get/Set Button_Text  - updates the button area
10618>>>//
10618>>>// Get/Set Allow_cancel_state - determines if panel can be canceled
10618>>>// Send EnableCancelButton - code you should provide to enable/disable cancel button
10618>>>//
10618>>>// ghoStatusPanel - global handle that points to the standard status panel.
10618>>>
10618>>>Use cProcessStatusPanel.pkg
Including file: cProcessStatusPanel.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cProcessStatusPanel.pkg)
10618>>>>>// cProcessStatusPanel.pkg
10618>>>>>//
10618>>>>>// Class used to create StatusPanels.
10618>>>>>//
10618>>>>>// This class does not provide any of the inner objects that make up a status panel. Instead an
10618>>>>>// interface is provided that is used to update the various areas of status panel. At this level,
10618>>>>>// those areas (title area, message area, action area, button area) are logical. You create the
10618>>>>>// physical objects at the object level and then bind these objects to the interface.
10618>>>>>// Take a look at StatPnl.pkg to see how this is used.
10618>>>>>//
10618>>>>>// the standard Interface for status panels are:
10618>>>>>//
10618>>>>>// Send Initialize_StatusPanel - initializes values for caption, title & message
10618>>>>>// Send Start_StatusPanel      - start the status panel
10618>>>>>// Send Stop_StatusPanel       - stop the status panel
10618>>>>>// Send Update_StatusPanel     - update the status panel's action area
10618>>>>>// Get  Check_StatusPanel      - check for cancel (if cancel or pbCancel is set, close the panel)
10618>>>>>//
10618>>>>>// Get/Set Caption_Text - updates the caption bar
10618>>>>>// Get/Set Title_Text   - updates the title area
10618>>>>>// Get/Set Message_Text - updates the Message area
10618>>>>>// Get/Set Action_Text  - updates the action area
10618>>>>>// Get/Set Button_Text  - updates the button area
10618>>>>>//
10618>>>>>// Get/Set Allow_cancel_state - determines if panel can be canceled
10618>>>>>// Send EnableCancelButton - code must be provided in the cancel button object to enable/disable cancel button
10618>>>>>//
10618>>>>>
10618>>>>>Use cStatusPanel.pkg
Including file: cStatusPanel.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cStatusPanel.pkg)
10618>>>>>>>// This is an abstract class that can be used to create status panels. The interface at this level
10618>>>>>>>// is very simple. You can start, stop, request a cancel and allow the object to paint.
10618>>>>>>>//
10618>>>>>>>// Look at cProcessStatusPanel.pkg to see how this is used.
10618>>>>>>>
10618>>>>>>>Use Windows.pkg
10618>>>>>>>
10618>>>>>>>
10618>>>>>>>
10618>>>>>>>
10618>>>>>>>Class cStatusPanel is a FloatingPanel
10619>>>>>>>    
10619>>>>>>>    Procedure Construct_Object
10621>>>>>>>        Forward Send Construct_object
10623>>>>>>>        
10623>>>>>>>        Property Boolean pbCancel False
10624>>>>>>>        
10624>>>>>>>        Set Extended_Window_Style to WS_EX_DLGMODALFRAME True // kills sysmenu as long as there is no icon
10625>>>>>>>        Set Icon to '' // this must be cleared so there will be no icon
10626>>>>>>>        Set locate_mode to CENTER_ON_PANEL
10627>>>>>>>        Set Border_Style  to Border_Dialog
10628>>>>>>>        // should be scoped so it will not try to change the focus if there is no focusable button inside
10628>>>>>>>        Set Scope_State to True
10629>>>>>>>        
10629>>>>>>>        On_Key KEXIT_APPLICATION Send Close_Panel
10630>>>>>>>    End_Procedure
10631>>>>>>>    
10631>>>>>>>    // this is private and required. Never send this.
10631>>>>>>>    Procedure Deactivate_Group
10633>>>>>>>        If (Active_State(Self)) Begin
10635>>>>>>>            Send SuspendGUI of Desktop False
10636>>>>>>>        End
10636>>>>>>>>
10636>>>>>>>        Forward Send Deactivate_Group
10638>>>>>>>    End_Procedure
10639>>>>>>>    
10639>>>>>>>    // Send this message to stop the panel
10639>>>>>>>    Procedure Deactivate
10641>>>>>>>        If (Active_State(Self)) Begin
10643>>>>>>>            Send SuspendGUI of Desktop False
10644>>>>>>>        End
10644>>>>>>>>
10644>>>>>>>        Forward Send Deactivate
10646>>>>>>>    End_Procedure
10647>>>>>>>    
10647>>>>>>>    // Send this message to start the panel
10647>>>>>>>    Procedure Activate
10649>>>>>>>        If not (Active_State(Self)) Begin
10651>>>>>>>            Set pbCancel to False
10652>>>>>>>            Send SuspendGUI of Desktop True
10653>>>>>>>        End
10653>>>>>>>>
10653>>>>>>>        Forward Send Activate
10655>>>>>>>    End_Procedure
10656>>>>>>>    
10656>>>>>>>    // This allows the panel to paint when used in a tight loop, which is what status panels are
10656>>>>>>>    // used for. Any time you update the panel or wish to check for a cancel, you should call this.
10656>>>>>>>    Procedure ProcessEvents
10658>>>>>>>        If (Active_State(Self)) Begin
10660>>>>>>>            Send PumpMsgQueue of Desktop
10661>>>>>>>        End
10661>>>>>>>>
10661>>>>>>>    End_Procedure
10662>>>>>>>    
10662>>>>>>>    // note close panel does not actually close the panel. It just sets pbCancel to True, informing the
10662>>>>>>>    // process using this that it wants to close. It is then up the process close the panel.
10662>>>>>>>    Procedure Close_Panel
10664>>>>>>>        Set pbCancel to True
10665>>>>>>>    End_Procedure
10666>>>>>>>    
10666>>>>>>>End_Class
10667>>>>>
10667>>>>>
10667>>>>>
10667>>>>>Class cProcessStatusPanel is a cStatusPanel
10668>>>>>    
10668>>>>>    Procedure Construct_Object
10670>>>>>        Forward Send Construct_object
10672>>>>>        // determines if panel can be canceled
10672>>>>>        Property Boolean Allow_Cancel_State True
10673>>>>>    End_Procedure
10674>>>>>    
10674>>>>>    // Any of the properties that change the text of a status panel must also send
10674>>>>>    // ProcessEvents which allows the panel to process painting messages. The ProcessEvents
10674>>>>>    // is essential when using status panels within a tight loop
10674>>>>>    
10674>>>>>    Procedure Set Caption_text String sText
10676>>>>>        Set Label to sText
10677>>>>>        Send ProcessEvents
10678>>>>>    End_Procedure
10679>>>>>    
10679>>>>>    Function Caption_Text Returns String
10681>>>>>        Function_Return (Label(Self))
10682>>>>>    End_Function
10683>>>>>    
10683>>>>>    Procedure Set Message_Text String sText
10685>>>>>        Send ProcessEvents
10686>>>>>    End_Procedure
10687>>>>>    
10687>>>>>    Function Message_Text Returns String
10689>>>>>    End_Function
10690>>>>>    
10690>>>>>    Procedure Set Action_Text String sText
10692>>>>>        Send ProcessEvents
10693>>>>>    End_Procedure
10694>>>>>    
10694>>>>>    Function Action_Text Returns String
10696>>>>>    End_Function
10697>>>>>    
10697>>>>>    Procedure Set Button_Text String sText
10699>>>>>        Send ProcessEvents
10700>>>>>    End_Procedure
10701>>>>>    
10701>>>>>    Function Button_Text Returns String
10703>>>>>    End_Function
10704>>>>>    
10704>>>>>    Procedure Set Title_Text String sText
10706>>>>>        Send ProcessEvents
10707>>>>>    End_Procedure
10708>>>>>    
10708>>>>>    Function Title_Text Returns String
10710>>>>>    End_Function
10711>>>>>    
10711>>>>>    // initializes values for caption, title & message
10711>>>>>    Procedure Initialize_StatusPanel String sCaption String sTitle String sMessage
10713>>>>>        Set Caption_text to sCaption
10714>>>>>        Set Title_Text   to sTitle
10715>>>>>        Set Message_Text to sMessage
10716>>>>>    End_Procedure
10717>>>>>    
10717>>>>>    // update the status panel's action area
10717>>>>>    Procedure Update_StatusPanel String sAction
10719>>>>>        Set Action_Text to sAction
10720>>>>>    End_Procedure
10721>>>>>    
10721>>>>>    // stop the status panel
10721>>>>>    Procedure Close_Panel
10723>>>>>        If (Allow_cancel_state(Self)) Begin
10725>>>>>            Forward Send Close_Panel
10727>>>>>        End
10727>>>>>>
10727>>>>>    End_Procedure
10728>>>>>    
10728>>>>>    // Code must be provided in the cancel button object to enable/disable cancel button
10728>>>>>    Procedure EnableCancelButton Boolean bEnable
10730>>>>>    End_Procedure
10731>>>>>    
10731>>>>>    // check for cancel (if cancel or pbCancel is set, close the panel)
10731>>>>>    Function Check_StatusPanel Returns Integer
10733>>>>>        Boolean bCancel
10733>>>>>        If (Active_state(Self)) Begin
10735>>>>>            Send ProcessEvents
10736>>>>>            Get pbCancel to bCancel
10737>>>>>            If bCancel Begin
10739>>>>>                Send Stop_StatusPanel // the old status panel removed this when canceled.
10740>>>>>            End
10740>>>>>>
10740>>>>>        End
10740>>>>>>
10740>>>>>        Function_Return (If(bCancel, MSG_CANCEL, 0)) // the old check status panel returns msg_cancel
10741>>>>>    End_Function
10742>>>>>    
10742>>>>>    // start the status panel
10742>>>>>    Procedure Start_StatusPanel
10744>>>>>        If not (Active_state(Self)) Begin
10746>>>>>            Send EnableCancelButton (Allow_cancel_state(Self))
10747>>>>>            Send Activate
10748>>>>>        End
10748>>>>>>
10748>>>>>    End_Procedure
10749>>>>>    
10749>>>>>    // stop the status panel
10749>>>>>    Procedure Stop_StatusPanel
10751>>>>>        If (Active_state(Self)) Begin
10753>>>>>            Send Deactivate
10754>>>>>        End
10754>>>>>>
10754>>>>>    End_Procedure
10755>>>>>    
10755>>>>>End_Class
10756>>>
10756>>>
10756>>>Global_Variable Handle ghoStatusPanel // will contain the ID of the global StatusPanel object
10756>>>
10756>>>
10756>>>Object Status_Panel is a cProcessStatusPanel
10758>>>    
10758>>>    Move Self to ghoStatusPanel // this can be used throughout your applicaton to access this object
10759>>>    
10759>>>    Set Size to 80 166
10760>>>    
10760>>>    Object oTitleTxt is a TextBox
10762>>>        Set location to 10 10
10763>>>        Set Auto_Size_State to False
10764>>>        Set size to 20 150
10765>>>        Set Justification_Mode to JMode_Center
10766>>>    End_Object
10767>>>    
10767>>>    Object oMessageTxt is a TextBox
10769>>>        Set location to 25 10
10770>>>        Set Auto_Size_State to False
10771>>>        Set size to 20 150
10772>>>    End_Object
10773>>>    
10773>>>    Object oActionTxt is a TextBox
10775>>>        Set location to 45 10
10776>>>    End_Object
10777>>>    
10777>>>    Object oStopButton is a Button
10779>>>        Set Location to 60 58
10780>>>        Set Label to C_$Cancel
10781>>>        
10781>>>        Procedure OnClick
10784>>>            Send Close_panel
10785>>>        End_Procedure
10786>>>        
10786>>>    End_Object
10787>>>    
10787>>>    // These messages bind the standard cProcessStatusPanel interface to the actual
10787>>>    // objects defined within this instance of the status panel.
10787>>>    
10787>>>    // note: all of the messages that change text should be forwarded
10787>>>    // as the forwarded messages allows the panel to paint when in a tight loop
10787>>>    
10787>>>    Procedure Set Message_Text String sText
10790>>>        Set Label of oMessageTxt to sText
10791>>>        Forward Set Message_Text to sText
10793>>>    End_Procedure
10794>>>    
10794>>>    Function Message_Text Returns String
10797>>>        Function_Return (Label(oMessageTxt))
10798>>>    End_Function
10799>>>    
10799>>>    Procedure Set Action_Text String sText
10802>>>        Set Label of oActionTxt to sText
10803>>>        Forward Set Action_Text to sText
10805>>>    End_Procedure
10806>>>    
10806>>>    Function Action_Text Returns String
10809>>>        Function_Return (Label(oActionTxt))
10810>>>    End_Function
10811>>>    
10811>>>    Procedure Set Button_Text String sText
10814>>>        Set Label of oStopButton to sText
10815>>>        Forward Set Button_Text to sText
10817>>>    End_Procedure
10818>>>    
10818>>>    Function Button_Text Returns String
10821>>>        Function_Return (Label(oStopButton))
10822>>>    End_Function
10823>>>    
10823>>>    Procedure Set Title_Text String sText
10826>>>        Set Label of oTitleTxt to sText
10827>>>        Forward Set Title_Text to sText
10829>>>    End_Procedure
10830>>>    
10830>>>    Function Title_Text Returns String
10833>>>        Function_Return (Label(oTitleTxt))
10834>>>    End_Function
10835>>>    
10835>>>    // gets called when status panel is activated passing whether a button
10835>>>    // should appear
10835>>>    Procedure EnableCancelButton Boolean bEnable
10838>>>        Set Enabled_State of oStopButton to bEnable
10839>>>    End_Procedure
10840>>>    
10840>>>End_Object
10841>>>
10841>Use File_dlg.pkg                // SaveAsDialog & OpenDialog class
Including file: File_dlg.pkg    (C:\Program Files\DataFlex 23.0\Pkg\File_dlg.pkg)
10841>>>Use Windows.pkg
10841>>>Use GlobalFunctionsProcedures.pkg
10841>>>
10841>>>
10841>>>// Unicode support, wide version of GetOpenFileName - Gets called directly from Show_Dialog.
10841>>>External_Function GetOpenFileNameW "GetOpenFileNameW" Comdlg32.DLL Pointer OpenStruct Returns Integer
10842>>>
10842>>>// Unicode support, wide version of GetSaveFileName
10842>>>External_Function GetSaveFileNameW "GetSaveFileNameW" Comdlg32.DLL Pointer OpenStruct Returns Integer
10843>>>
10843>>>Struct TOpenFileName
10843>>>    DWord    lStructSize          // length, in bytes, of the structure.
10843>>>    Handle   hwndOwner            // Handle to the window that owns the dialog box.
10843>>>    Handle   hInstance            // handle to a memory object containing a dialog box template.
10843>>>    Pointer  lpstrFilter          // pointer to a buffer containing pairs of null-terminated filter strings.
10843>>>    Pointer  lpstrCustomFilter    // Pointer to a static buffer that contains a pair of null-terminated filter strings for preserving the filter pattern chosen by the user.
10843>>>    DWord    nMaxCustFilter       // size, in chars, of the buffer identified by lpstrCustomFilter.
10843>>>    DWord    nFilterIndex         // index of the currently selected filter
10843>>>    Pointer  lpstrFile            // Pointer to a buffer that contains the file name(s)
10843>>>    DWord    nMaxFile             // Size, in CHARs, of the buffer pointed to by lpstrFile.
10843>>>    Pointer  lpstrFileTitle       // Pointer to a buffer that receives the file name and extension
10843>>>    DWord    nMaxFileTitle        // size, in CHARs, of the buffer pointed to by lpstrFileTitle
10843>>>    Pointer  lpstrInitialDir      // Pointer to a NULL terminated string that can specify the initial directory.
10843>>>    Pointer  lpstrTitle           // Pointer to a string to be placed in the title bar of the dialog box.
10843>>>    DWord    ofnFlags             // set of bit flags you can use to initialize the dialog box.
10843>>>    Short    nFileOffset          // Specifies the zero-based offset, in TCHARs, from the beginning of the path to the file name in the string pointed to by lpstrFile.
10843>>>    Short    nFileExtension       // Specifies the zero-based offset, in TCHARs, from the beginning of the path to the file name extension in the string pointed to by lpstrFile.
10843>>>    Pointer  lpstrDefExt          // Pointer to a buffer that contains the default extension.
10843>>>    Longptr  lCustData            // Specifies application-defined data that the system passes to the hook procedure identified by the lpfnHook member.
10843>>>    Pointer  lpfnHook             // Pointer to a hook procedure.
10843>>>    Pointer  lpTemplateName       // Pointer to a null-terminated string that names a dialog template resource in the module identified by the hInstance member.
10843>>>    Pointer  lpvReserved          // Reserved
10843>>>    DWord    dwReserved           // Reserved
10843>>>    DWord    FlagsEx              // A set of bit flags you can use to initialize the dialog box.
10843>>>End_Struct
10843>>>
10843>>>Define OFN_READONLY               for |CI$000001
10843>>>Define OFN_OVERWRITEPROMPT        for |CI$000002
10843>>>Define OFN_HIDEREADONLY           for |CI$000004
10843>>>Define OFN_NOCHANGEDIR            for |CI$000008
10843>>>Define OFN_NOVALIDATE             for |CI$000100
10843>>>Define OFN_ALLOWMULTISELECT       for |CI$000200
10843>>>Define OFN_EXTENSIONDIFFERENT     for |CI$000400
10843>>>Define OFN_PATHMUSTEXIST          for |CI$000800
10843>>>Define OFN_FILEMUSTEXIST          for |CI$001000
10843>>>Define OFN_CREATEPROMPT           for |CI$002000
10843>>>Define OFN_SHAREAWARE             for |CI$004000
10843>>>Define OFN_NOREADONLYRETURN       for |CI$008000
10843>>>Define OFN_NOTESTFILECREATE       for |CI$010000
10843>>>Define OFN_EXPLORER               for |CI$080000     // new look commdlg
10843>>>
10843>>>Class AbstractFileDialog is a cObject
10844>>>    
10844>>>    Procedure Construct_Object
10846>>>        Forward Send Construct_Object
10848>>>        
10848>>>        Property String  Filter_String
10849>>>        Property String  Initial_Folder
10850>>>        Property String  File_Name
10851>>>        Property String  File_Title
10852>>>        Property String  Dialog_Caption
10853>>>        Property Integer Filter_Index          1
10854>>>        Property Integer HideReadOnly_State    False
10855>>>        Property Integer TickReadOnly_State    False
10856>>>        Property Integer AllowReadOnly_State   True
10857>>>        Property Integer FileMustExist_State   True
10858>>>        Property Integer PathMustExist_State   True
10859>>>        Property Integer CreatePrompt_State    True
10860>>>        Property Integer ShowFileTitle_State   False
10861>>>        Property Integer OverwritePrompt_State False
10862>>>        Property Integer NoChangeDir_State     False
10863>>>        
10863>>>        Property Boolean Private_MultiSelect_State False
10864>>>        
10864>>>        Property String[] Private_Selected_Files
10865>>>        
10865>>>        Property Integer PrivateExternal_msg
10866>>>        
10866>>>        //Set Focus_Mode To No_Activate
10866>>>    End_Procedure
10867>>>    
10867>>>    Function OwnerHandle Returns Handle
10869>>>        Handle hWnd
10869>>>        Handle hoObj
10869>>>        Get Focus of desktop to hoObj // start with the focus
10870>>>        Move (gOwnerWindowHandle(hoObj)) to hWnd // global function finds the right handle for us
10871>>>        Function_Return hWnd
10872>>>    End_Function
10873>>>    
10873>>>    
10873>>>    Function Show_Dialog Returns Integer // bool
10875>>>        Handle hWnd
10875>>>        Integer bOK iFilter iFlags bHideRO bTickRO bFileExist bPathExist iMsg
10875>>>        Integer icInitDir bCreatePrompt bOverwritePrompt bAllowReadOnly
10875>>>        Integer iPos iCount
10875>>>        Integer bNoChangeDir
10875>>>        Pointer lpsFileTitle lpsFileName lpsFilter lpsInitDir
10875>>>        Pointer lpsTitle lpsDefExt
10875>>>        WString sFileName sFileTitle sFilter sInitDir sTitle sDefExt
10875>>>        Pointer lpOpenFileData
10875>>>        Boolean bMultiSelect
10875>>>        String[] sFiles
10876>>>        TOpenFileName OpenFileData
10876>>>        TOpenFileName OpenFileData
10876>>>        
10876>>>        //Delegate Get Container_Handle To hWnd
10876>>>        Get OwnerHandle to hWnd
10877>>>        
10877>>>        If (ShowFileTitle_State(Self)) Begin
10879>>>            Get File_Title to sFileName
10880>>>        End
10880>>>>
10880>>>        
10880>>>        Get private_MultiSelect_State to bMultiSelect
10881>>>        
10881>>>        Get Initial_Folder        to sInitDir
10882>>>        Get Dialog_Caption        to sTitle
10883>>>        Get Filter_String         to sFilter
10884>>>        Get HideReadOnly_State    to bHideRO
10885>>>        Get TickReadOnly_State    to bTickRO
10886>>>        Get FileMustExist_State   to bFileExist
10887>>>        Get PathMustExist_State   to bPathExist
10888>>>        Get CreatePrompt_State    to bCreatePrompt
10889>>>        Get OverwritePrompt_State to bOverwritePrompt
10890>>>        Get AllowReadOnly_State   to bAllowReadOnly
10891>>>        Get NoChangeDir_State     to bNoChangeDir
10892>>>        Get Filter_Index          to iFilter
10893>>>        
10893>>>        Move (sFilter + Character(0) + Character(0)) to sFilter
10894>>>        Move (Replaces('|', sFilter, Character(0))) to sFilter
10895>>>        
10895>>>        Append sInitDir   (character(0))
10896>>>        Append sFileTitle (Repeat(character(0),32000))
10897>>>        Append sFileName  (Repeat(character(0),32000))
10898>>>        Append sTitle     (Repeat(character(0),255))
10899>>>        Append sDefExt    (character(0))
10900>>>        
10900>>>        Move (AddressOf(sInitDir))   to lpsInitDir
10901>>>        Move (AddressOf(sFileName))  to lpsFileName
10902>>>        Move (AddressOf(sFileTitle)) to lpsFileTitle
10903>>>        Move (AddressOf(sTitle))     to lpsTitle
10904>>>        Move (AddressOf(sDefExt))    to lpsDefExt
10905>>>        Move (AddressOf(sFilter))    to lpsFilter
10906>>>        
10906>>>        
10906>>>        If (bMultiSelect) Begin
10908>>>            Move (OFN_EXPLORER + OFN_ALLOWMULTISELECT) to iFlags  // Multi-select!
10909>>>        End
10909>>>>
10909>>>        
10909>>>        If bFileExist ;            Move (iFlags + OFN_FILEMUSTEXIST)    to iFlags
10912>>>        If bPathExist ;            Move (iFlags + OFN_PATHMUSTEXIST)    to iFlags
10915>>>        If bHideRO ;            Move (iFlags + OFN_HIDEREADONLY)     to iFlags
10918>>>        If bTickRO ;            Move (iFlags + OFN_READONLY)         to iFlags
10921>>>        If bCreatePrompt ;            Move (iFlags + OFN_CREATEPROMPT)     to iFlags
10924>>>        If bOverwritePrompt ;            Move (iFlags + OFN_OVERWRITEPROMPT)  to iFlags
10927>>>        If not bAllowReadOnly ;            Move (iFlags + OFN_NOREADONLYRETURN) to iFlags
10930>>>        If bNoChangeDir ;            Move (iFlags + OFN_NOCHANGEDIR)      to iFlags
10933>>>        
10933>>>        Move (SizeOfType(TOpenFileName)) to OpenFileData.lStructSize
10934>>>        Move hWnd         to OpenFileData.hWndOwner
10935>>>        Move iFilter      to OpenFileData.nFilterIndex
10936>>>        Move lpsFileName  to OpenFileData.lpstrFile
10937>>>        
10937>>>        If (sInitDir <> '') Begin
10939>>>            Move lpsInitDir    to OpenFileData.lpstrInitialDir
10940>>>        End
10940>>>>
10940>>>        
10940>>>        If (sTitle <> '') Begin
10942>>>            Move lpsTitle      to OpenFileData.lpstrTitle
10943>>>        End
10943>>>>
10943>>>        
10943>>>        Move 32000             to OpenFileData.nMaxFileTitle
10944>>>        Move 32000             to OpenFileData.nMaxFile
10945>>>        Move lpsFileTitle      to OpenFileData.lpstrFileTitle
10946>>>        Move iFlags            to OpenFileData.ofnFlags
10947>>>        Move lpsFilter         to OpenFileData.lpstrFilter
10948>>>        Move lpsDefExt         to OpenFileData.lpstrDefExt
10949>>>        
10949>>>        Move (AddressOf(OpenFileData)) to lpOpenFileData
10950>>>        
10950>>>        Get PrivateExternal_msg to iMsg
10951>>>        If (iMsg = Get_GetOpenFileNameW) ;            Move (GetOpenFileNameW (lpOpenFileData)) to bOK
10954>>>        If (iMsg = Get_GetSaveFileNameW) ;            Move (GetSaveFileNameW (lpOpenFileData)) to bOK
10957>>>        
10957>>>        If bOK Begin
10959>>>            Move OpenFileData.ofnFlags     to iFlags
10960>>>            Move OpenFileData.nFilterIndex to iFilter
10961>>>            Move OpenFileData.nFileOffset  to icInitDir
10962>>>            
10962>>>            Move (CString(Left(sFileName, icInitDir))) to sInitDir    // Trim trailing null
10963>>>            Set Initial_Folder     to sInitDir
10964>>>            
10964>>>            Set TickReadOnly_State to (iFlags iand OFN_READONLY)
10965>>>            Set Filter_Index       to iFilter
10966>>>
10966>>>            Set File_Name          to (CString( sFileName ))
10967>>>            Set File_Title         to (CString( sFileTitle ))
10968>>>            
10968>>>            If (bMultiSelect) Begin
10970>>>                // If this is a multi-files dialog then parse out the array of selected files....
10970>>>                If (Right(sInitDir, 1) = "\") ;                    Move (Left(sInitDir, Length(sInitDir)-1)) to sInitDir     // Trim trailing :\". This is only there if 1 file was selected!
10973>>>                
10973>>>                // Get the null delimited string of file names into the sFiles array....
10973>>>                Move 0 to iCount
10974>>>                Move (Right(sFileName, Length(sFileName) - icInitDir)) to sFileName    // Strip the path info (we already have it)
10975>>>                
10975>>>                Repeat
10975>>>>
10975>>>                    // Get the next filename....
10975>>>                    Move (Pos(Character(0), sFileName)) to iPos   // Filenames are null delimeted
10976>>>                    
10976>>>                    If (iPos > 1) Begin
10978>>>                        Move (sInitDir + "\" + CString(Left(sFileName, iPos))) to sFiles[iCount]
10979>>>                        Move (Right(sFileName, Length(sFileName) - iPos)) to sFileName
10980>>>                        Increment iCount
10981>>>                    End
10981>>>>
10981>>>                Until (iPos <= 1)
10983>>>            End
10983>>>>
10983>>>            Else Begin
10984>>>                Move (CString(sFileName)) to sFiles[0]
10985>>>            End
10985>>>>
10985>>>            
10985>>>            Set private_Selected_Files to sFiles
10986>>>        End
10986>>>>
10986>>>        Function_Return (bOK)
10987>>>    End_Function
10988>>>End_Class
10989>>>
10989>>>Class OpenDialog is an AbstractFileDialog
10990>>>    Procedure Construct_Object
10992>>>        Forward Send Construct_Object
10994>>>        Set PrivateExternal_msg to get_GetOpenFileNameW
10995>>>    End_Procedure
10996>>>    
10996>>>    Procedure Set MultiSelect_State Boolean bState
10998>>>        Set private_MultiSelect_State to bState
10999>>>    End_Procedure
11000>>>    
11000>>>    Function MultiSelect_State Returns Boolean
11002>>>        Boolean bState
11002>>>        Get private_MultiSelect_State to bState
11003>>>        Function_Return bState
11004>>>    End_Function
11005>>>    
11005>>>    Function Selected_Files Returns String[]
11007>>>        String[] sFiles
11008>>>        Get private_Selected_Files to sFiles
11009>>>        Function_Return sFiles
11010>>>    End_Function
11011>>>End_Class
11012>>>
11012>>>Class SaveAsDialog is an AbstractFileDialog
11013>>>    Procedure Construct_Object
11015>>>        Forward Send Construct_Object
11017>>>        Set FileMustExist_State   to False
11018>>>        Set CreatePrompt_State    to False
11019>>>        Set ShowFileTitle_State   to True
11020>>>        Set OverwritePrompt_State to True
11021>>>        Set HideReadOnly_State    to True
11022>>>        Set PrivateExternal_msg to get_GetSaveFileNameW
11023>>>    End_Procedure
11024>>>End_Class
11025>>>
11025>Use Flexml.pkg
Including file: Flexml.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Flexml.pkg)
11025>>>Use VdfBase.pkg
11025>>>Use LanguageText.pkg
11025>>>Use GlobalFunctionsProcedures.pkg
11025>>>
11025>>>
11025>>>// Used to designate that a handle is a handle to an Xml Dom object. This
11025>>>// is used/required by server web-services but could be used elsewhere .
11025>>>
11025>>>
11025>>>// Types of Nodes
11025>>>
11025>>>
11025>>>// classes and methods defined in fmac
11025>>>
11025>>>
11025>>>Register_Function transformNode Handle infcXSLNode Returns String
11025>>>
11025>>>
11025>>>
11025>>>
11025>>>
11025>>>
11025>>>
11025>>>
11025>>>
11025>>>// XML function & procedure registration
11025>>>
11025>>>Register_Procedure Set XmlInterface Handle iHandle
11025>>>Register_Function XmlInterface Returns Handle
11025>>>
11025>>>// NODE Properties
11025>>>Register_Function phAttributes Returns Handle
11025>>>Register_Function psBaseName Returns String
11025>>>Register_Function phChildNodes Returns Handle
11025>>>Register_Function phDefinition Returns Handle
11025>>>Register_Function phFirstChild Returns Handle
11025>>>Register_Function phLastChild Returns Handle
11025>>>Register_Function phNextSibling Returns Handle
11025>>>Register_Function psNameSpaceURI Returns String
11025>>>Register_Function psNodeName Returns String
11025>>>Register_Function piNodeType Returns Integer
11025>>>Register_Function psNodeTypeString Returns String
11025>>>Register_Function phOwnerDocument Returns Handle
11025>>>Register_Function phParentNode Returns Handle
11025>>>Register_Function pbParsed Returns Integer
11025>>>Register_Function psPrefix Returns String
11025>>>Register_Function phPreviousSibling Returns Handle
11025>>>Register_Function pbSpecified Returns Integer
11025>>>Register_Function psText Returns String
11025>>>Register_Procedure Set psText String sText
11025>>>Register_Function psXML Returns String
11025>>>
11025>>>// Node Read write properties
11025>>>
11025>>>Register_Procedure Set psDataType String sTypeName
11025>>>Register_Function psDataType Returns String
11025>>>Register_Procedure Set pvNodeTypedValue Integer iType Integer iAddress
11025>>>Register_Function pvNodeTypedValue Integer iType Returns Integer  // address of data
11025>>>Register_Procedure Set psNodeValue String sValue
11025>>>Register_Function psNodeValue Returns String
11025>>>
11025>>>// Node Methods
11025>>>
11025>>>Register_Function AppendChild Handle iChildInfc Returns Handle
11025>>>Register_Function CloneInfcNode Handle bRecurse Returns Handle
11025>>>Register_Function HasChildNodes Returns Integer
11025>>>Register_Function InsertBefore Handle infcNodeToInsert Handle iWhere Returns Handle
11025>>>Register_Function RemoveChild Handle iChildToRemove Returns Handle
11025>>>Register_Function ReplaceChild Handle iNewChild Handle iChildToReplace Returns Handle
11025>>>Register_Function SelectNodes String selectstring Returns Handle
11025>>>Register_Function SelectSingleNode String selectstring Returns Handle
11025>>>
11025>>>// Node Collections
11025>>>// READONLY PROPERTIES
11025>>>
11025>>>Register_Function phItem Integer iItem Returns Handle
11025>>>Register_Function phElementItem Integer iItem Returns Handle
11025>>>
11025>>>Register_Function piLength Returns Integer
11025>>>
11025>>>Register_Function NamedItem String sName Returns Handle
11025>>>Register_Function QualifiedItem String sBaseName String sNameSpace Returns Handle
11025>>>Register_Function RemoveNamedItem String sName Returns Handle
11025>>>Register_Function RemoveQualifiedItem String sBaseName String sNameSpace Returns Handle
11025>>>Register_Function SetNamedItem Handle iInterface Returns Handle
11025>>>
11025>>>// XML DOM Document
11025>>>// Read only properties
11025>>>
11025>>>Register_Function phDocType Returns Handle
11025>>>Register_Function phImplementation Returns Handle
11025>>>Register_Function phParseError Returns Handle
11025>>>Register_Function piReadyState Returns Integer
11025>>>Register_Function psURL Returns String
11025>>>
11025>>>// Read Write Properties
11025>>>
11025>>>Register_Procedure Set pbAsync Integer bValue
11025>>>Register_Function pbAsync Returns Integer
11025>>>Register_Procedure Set phDocumentElement Handle iElement
11025>>>Register_Function phDocumentElement Returns Handle
11025>>>Register_Procedure Set pbPreserveWhiteSpace Integer bValue
11025>>>Register_Function pbPreserveWhiteSpace Returns Integer
11025>>>Register_Procedure Set pbResolveExternals Integer bValue
11025>>>Register_Function pbResolveExternals Returns Integer
11025>>>Register_Procedure Set pbValidateOnParse Integer bValue
11025>>>Register_Function pbValidateOnParse Returns Integer
11025>>>
11025>>>// Events
11025>>>
11025>>>// Methods
11025>>>
11025>>>Register_Function Abort Returns Integer
11025>>>Register_Function ElementsByTagName String sTagName Returns Handle
11025>>>Register_Function LoadDocument String sURLName Returns Integer
11025>>>Register_Function LoadXML String sXMLText Returns Integer
11025>>>Register_Function NodeFromID String sNodeName Returns Handle
11025>>>Register_Function SaveDocument String sURLName Returns Integer
11025>>>
11025>>>// Parse Error
11025>>>// Read Only Properties
11025>>>
11025>>>Register_Function piErrorCode Returns Integer
11025>>>Register_Function piFilePos Returns Integer
11025>>>Register_Function piLine Returns Integer
11025>>>Register_Function piLinePos Returns Integer
11025>>>Register_Function psReason Returns String
11025>>>Register_Function psSrcText Returns String
11025>>>Register_Function psURL Returns String
11025>>>
11025>>>// DOM Implementation
11025>>>// Method
11025>>>
11025>>>Register_Function HasFeature String sSystem String sFeature Returns Integer
11025>>>
11025>>>// Methods
11025>>>
11025>>>Register_Function substringData Integer iOffset Integer iCount Returns String
11025>>>Register_Function appendData String sData Returns Handle
11025>>>Register_Function insertData Integer iOffset String sData Returns Handle
11025>>>Register_Function deleteData Integer iOffset Integer iCount Returns Handle
11025>>>Register_Function replaceData Integer iOffset Integer iCount String sData Returns Handle
11025>>>
11025>>>// Attributes
11025>>>
11025>>>Register_Function psName Returns String
11025>>>
11025>>>// Elements
11025>>>// Read Only properties
11025>>>
11025>>>Register_Function psTagName Returns String
11025>>>
11025>>>// Methods
11025>>>
11025>>>Register_Procedure Set attributeValue String sName String sValue
11025>>>Register_Function attributeValue String sName Returns String
11025>>>Register_Function removeAttribute String sName Returns Handle
11025>>>Register_Function attributeNode String sName Returns Handle
11025>>>Register_Procedure Set attributeNode Handle iNode Returns Handle
11025>>>Register_Function removeAttributeNode Handle iNode Returns Handle
11025>>>
11025>>>// DOM Text
11025>>>// Methods
11025>>>
11025>>>Register_Function splitText Integer iOffset Returns Integer
11025>>>
11025>>>// DOM Processing Instruction
11025>>>// Read Only Properties
11025>>>Register_Function psTarget Returns String
11025>>>
11025>>>// DOM Document Type
11025>>>
11025>>>Register_Function phEntities Returns Handle
11025>>>Register_Function phNotations Returns Handle
11025>>>
11025>>>// DOM Notations
11025>>>
11025>>>Register_Function psPublicID Returns String
11025>>>Register_Function psSystemID Returns String
11025>>>Register_Function psNotationName Returns String
11025>>>
11025>>>// create nodes
11025>>>
11025>>>Register_Function createAttribute String sName Returns Handle
11025>>>Register_Function createCDataSection String sValue Returns Handle
11025>>>Register_Function createComment String sValue Returns Handle
11025>>>Register_Function createDocumentFragment Returns Handle
11025>>>Register_Function createElement String sTagName Returns Handle
11025>>>Register_Function createEntityReference String sEntityName Returns Handle
11025>>>Register_Function createNode Integer iNodeType String sName String sNameSpace Returns Handle
11025>>>Register_Function createProcessingInstruction String sTarget String sData Returns Handle
11025>>>Register_Function createTextNode String sData Returns Handle
11025>>>
11025>>>Register_Function ChangeNodeType Integer iTypeOfNode Integer bSetInterface Returns Handle
11025>>>
11025>>>
11025>>>//          Part 1:  Base Document Logic Specialized For Templates
11025>>>
11025>>>//
11025>>>//  XML Collections
11025>>>//
11025>>>//  Collection mixin has common functions to both node lists and named node maps
11025>>>//
11025>>>
11025>>>// This provides functions required of all XMLDOM objects.
11025>>>//
11025>>>Class cXMLDOMMixin is a Mixin
11026>>>    
11026>>>    // Create an XML object of passed class Id and bind passed interface. returns
11026>>>    // the object handle. All dynamic XML object can be created using this syntax
11026>>>    
11026>>>    Function CreateXMLObject Integer iClassId Handle hinfXMLInterface Returns Handle
11028>>>        Handle hoId hoDocument
11028>>>        // We will always create objects at the DOMDocument level.
11028>>>        Get DocumentObject to hoDocument
11029>>>        If (hoDocument=0) Begin  // this should never happen.
11031>>>            Error DFERR_XML_INTERNAL_ERROR C_$XmlFailedNoDocObject
11032>>>>
11032>>>            Function_Return 0
11033>>>        End
11033>>>>
11033>>>        If hinfXMLInterface Begin
11035>>>            Get Create of hoDocument iClassId to hoID
11036>>>            Set XMLInterface of hoID to hinfXMLInterface
11037>>>        End
11037>>>>
11037>>>        Function_Return hoID
11038>>>    End_Function
11039>>>    
11039>>>    // create an XML Node object based on the interface type.
11039>>>    // this will convert the interface to the proper type and will create
11039>>>    // an appropriate DF object.
11039>>>    // This requires that a DocumentObject exists
11039>>>    
11039>>>    Function CreateXMLNode Handle hinfc Returns Handle
11041>>>        Integer iType iClassId
11041>>>        Handle  hoDocument hoNode
11041>>>        // Get the node type of the infc handle w/o creating a DF object
11041>>>        Move (invokexml(DF_IXMLDOMNODE, GET_piNodeType, hinfc, 0, 0, 0, 0)) to iType
11042>>>        Move (invokexml(DF_IXMLDOMNODE, GET_ChangeNodeType, hinfc, iType, 1, 0, 0)) to hInfc
11043>>>        If (hinfc=0) Begin
11045>>>            // this should not happen and we would need to know about this.
11045>>>            Error DFERR_XML_INTERNAL_ERROR (C_$XmlFailedNoDocObject + String(iType))
11046>>>>
11046>>>            Function_Return 0
11047>>>        End
11047>>>>
11047>>>        Get DocumentObject to hoDocument
11048>>>        // you can augment your class IDs in a single place.
11048>>>        Get NodeClassId of hoDocument iType to iClassId
11049>>>        Get CreateXMLObject of hoDocument iClassId hinfc to hoNode
11050>>>        
11050>>>        Function_Return hoNode
11051>>>    End_Function
11052>>>    
11052>>>    
11052>>>    // Change object's class. This let's you change the class id of an object
11052>>>    // on an object by object basis. This would let you create nodes (e.g. elements)
11052>>>    // that have a custom interface for each node type. Normally, this would be sent
11052>>>    // after a node has been created using one of the default classes
11052>>>    Function ChangeNodeClass Handle hoNode Integer iClassID Returns Handle
11054>>>        Integer iType
11054>>>        Handle  hinfcNew
11054>>>        Get piNodeType of hoNode to iType
11055>>>        Get ChangeNodeType of hoNode iType False to hInfcNew
11056>>>        Send Destroy to hoNode // destroy object and old infc handle.
11057>>>        Get CreateXMLObject iClassId hinfcNew to hoNode
11058>>>        Function_Return hoNode
11059>>>    End_Function
11060>>>    
11060>>>End_Class
11061>>>
11061>>>
11061>>>Class cXMLDOMCollectionMixin is a Mixin
11062>>>    
11062>>>    Import_Class_Protocol cXMLDOMMixin
11063>>>    
11063>>>    //  Returns number of items in the collection
11063>>>    //
11063>>>    Function NodeListLength Returns Integer
11065>>>        Integer iLength
11065>>>        Get piLength to iLength
11066>>>        Function_Return iLength
11067>>>    End_Function
11068>>>    
11068>>>    // Returns an XML node object for pass item
11068>>>    //
11068>>>    Function CollectionNode Integer I Returns Handle
11070>>>        Handle hoNewNode
11070>>>        Handle infcItem
11070>>>        Get phItem i to infcItem
11071>>>        If (infcItem) ;            Get CreateXMLNode infcItem to hoNewNode
11074>>>        Function_Return hoNewNode
11075>>>    End_Function
11076>>>    
11076>>>    
11076>>>End_Class
11077>>>
11077>>>// Simple declarations of collections.
11077>>>
11077>>>Class cXMLDOMNodeList is a BaseXmlDomNodeList
11078>>>    Import_Class_Protocol cXMLDOMCollectionMixin
11079>>>End_Class
11080>>>
11080>>>Class cXMLDOMNamedNodeMap is a BaseXmlDomNamedNodeMap
11081>>>    
11081>>>    Import_Class_Protocol cXMLDOMCollectionMixin
11082>>>    
11082>>>    // returns a node attribute that matches passed name, zero if none
11082>>>    Function NamedNode String sName Returns Handle
11084>>>        Handle hoNewNode
11084>>>        Handle infcItem
11084>>>        Get NamedItem sName to infcItem
11085>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
11088>>>        Function_Return hoNewNode
11089>>>    End_Function
11090>>>    
11090>>>    // Adds or changes a node attribute
11090>>>    // This should return the passed object Id which is now bound to the attribute. If an error, returns 0
11090>>>    Function SetNamedNode Handle hoNode Returns Handle
11092>>>        Handle hinfcNode hinfcItem
11092>>>        Get XMLInterface of hoNode to hinfcNode // node of passed attribute
11093>>>        Get SetNamedItem hinfcNode to hinfcItem
11094>>>        If hinfcItem ;            Set XMLInterface of hoNode to hinfcItem
11097>>>        Else ;            Move 0 to hoNode // zero indicates error
11099>>>        Function_Return hoNode
11100>>>    End_Function
11101>>>    
11101>>>    // removes named attribute, Returns handle of removed node or zero if not found.
11101>>>    // Note that returned object must be disposed of or moved somewhere else.
11101>>>    Function RemoveNamedNode String sName Returns Handle
11103>>>        Handle hoNewNode
11103>>>        Handle infcItem
11103>>>        Get RemoveNamedItem sName to infcItem
11104>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
11107>>>        Function_Return hoNewNode
11108>>>    End_Function
11109>>>    
11109>>>    Function QualifiedNode String sNameSpace String sBaseName Returns Handle
11111>>>        Handle hoNewNode
11111>>>        Handle infcItem
11111>>>        Get QualifiedItem  sBaseName sNameSpace  to infcItem
11112>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
11115>>>        Function_Return hoNewNode
11116>>>    End_Function
11117>>>    
11117>>>    Function RemoveQualifiedNode String sNameSpace String sBaseName Returns Handle
11119>>>        Handle hoNewNode
11119>>>        Handle infcItem
11119>>>        Get RemoveQualifiedItem sBaseName sNameSpace to infcItem
11120>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
11123>>>        Function_Return hoNewNode
11124>>>    End_Function
11125>>>    
11125>>>End_Class
11126>>>
11126>>>
11126>>>
11126>>>// Mixin for nodes.
11126>>>//
11126>>>//  First the declaration of functions that have no object references.
11126>>>//
11126>>>
11126>>>
11126>>>Class cXMLDOMNodeMixin is a Mixin
11127>>>    
11127>>>    Import_Class_Protocol cXMLDOMMixin
11128>>>    
11128>>>    //  Append Node to the end of list. Returns passed Object handle if Ok, 0 if error
11128>>>    
11128>>>    Function AppendNode Handle hoNode Returns Handle
11130>>>        Handle hinfcNode
11130>>>        Handle infcReturned
11130>>>        // Get COM Interface to call Append child.
11130>>>        Get XMLInterface of hoNode to hinfcNode
11131>>>        If (hinfcNode=0) ;            Function_Return 0
11134>>>        Get AppendChild hinfcNode to infcReturned
11135>>>        // Interface returned is stored in DataFlex object.
11135>>>        If (infcReturned=0) ;            Function_Return 0
11138>>>        Set XMLInterface of hoNode to infcReturned
11139>>>        Function_Return hoNode
11140>>>    End_Function
11141>>>    
11141>>>    //  Insert NewNode before Node. Returns passed newnode Object handle if Ok, 0 if error
11141>>>    
11141>>>    Function InsertBeforeNode Handle hoNewNode Handle hoNode Returns Handle
11143>>>        Handle hinfcNewNode hinfcNode hoRefNode infcReturned
11143>>>        Integer iType
11143>>>        // DOM says if no refnode argument passed or it is 0, append to end
11143>>>        If (Num_Arguments=1) ;            Move 0 to hoRefNode
11146>>>        Else ;            Move hoNode to hoRefNode
11148>>>        Get XMLInterface of hoNewNode to hinfcNewNode
11149>>>        If (hinfcNewNode=0) ;            Function_Return 0
11152>>>        If hoRefNode Begin
11154>>>            Get XMLInterface of hoRefNode to hinfcNode
11155>>>            If (hinfcNode=0) ;                Function_Return 0
11158>>>        End
11158>>>>
11158>>>        Get InsertBefore hinfcNewNode hinfcNode to infcReturned
11159>>>        If (infcReturned=0) ;            Function_Return 0
11162>>>        // Interface returned is stored in DataFlex object.
11162>>>        Set XMLInterface of hoNewNode to infcReturned
11163>>>        Function_Return hoNewNode
11164>>>    End_Function
11165>>>    
11165>>>    //  Remove Node. Returns object Id of removed node, zero if error
11165>>>    //  Important: The node is not destroyed! This lets you move it elsewhere if you want
11165>>>    
11165>>>    Function RemoveNode Handle hoNode Returns Handle
11167>>>        Handle hInfcNode
11167>>>        Get XMLInterface of hoNode to hInfcNode
11168>>>        If (hinfcNode=0) ;            Function_Return 0
11171>>>        Get RemoveChild hInfcNode to hinfcNode
11172>>>        If (hinfcNode=0) ;            Function_Return 0
11175>>>        Set XMLInterface of hoNode to hinfcNode
11176>>>        Function_Return hoNode
11177>>>    End_Function
11178>>>    
11178>>>    //  Replace Node. Returns object Id of replaced node, zero if error
11178>>>    //  Important: The replaced node is not destroyed! This lets you move it elsewhere if you want
11178>>>    
11178>>>    Function ReplaceNode Handle hoNewNode Handle hoNodeToReplace Returns Handle
11180>>>        Handle hInfcNewNode hinfcNodetoReplace hinfcNode
11180>>>        Get XMLInterface of hoNewNode       to hInfcNewNode
11181>>>        Get XMLInterface of hoNodetoReplace to hInfcNodetoreplace
11182>>>        If (hinfcNewNode=0 or hInfcNodeToReplace=0) ;            Function_Return 0
11185>>>        Get ReplaceChild hInfcNewNode hinfcNodeToReplace to hinfcNode
11186>>>        If (hinfcNode=0) ;            Function_Return 0
11189>>>        Set XMLInterface of hoNodetoReplace to hinfcNode
11190>>>        Function_Return hoNodetoReplace
11191>>>    End_Function
11192>>>    
11192>>>    // Remove the named node. Returns handle to removed node. You must destroy
11192>>>    // or move this removed object as needed
11192>>>    
11192>>>    Function RemoveNamedNode String sQueryString Returns Handle
11194>>>        Handle hoNode
11194>>>        Handle hInfcTemplate hinfcNode
11194>>>        Integer iRet
11194>>>        Get SelectSingleNode sQueryString to hinfcTemplate
11195>>>        If (hinfcTemplate) Begin
11197>>>            // Remove child returns an interface to the disassociated node.
11197>>>            // It should be disposed by setting it to an object and then calling destroy
11197>>>            Get RemoveChild hInfcTemplate to hInfcNode
11198>>>            // Even if hInfcTemplate and hInfcNode are the same their reference count will be incremented.
11198>>>            // Therefore we must destroy one the interfaces which will decrement the reference count thus
11198>>>            // avoding a memory leak
11198>>>            Move (invokexml(DF_IXMLDOMNODE, DESTROY_XML_INTERFACE, hInfcTemplate, 0, 0, 0, 0)) to iRet
11199>>>            If hInfcNode ;                Get CreateXMLNode hinfcNode to hoNode
11202>>>        End
11202>>>>
11202>>>        Function_Return hoNode
11203>>>    End_Function
11204>>>    
11204>>>    // This function creates a clone of the passed Node. if bRecurse all child nodes are also
11204>>>    // cloned. The object Id of the new clone object is returned.
11204>>>    // The interface of the object returned can be used in AppendChild to add
11204>>>    // the node to the XML Document.
11204>>>    
11204>>>    Function CloneNode Integer bRecurse Returns Handle
11206>>>        Handle hoNewNode
11206>>>        Handle hinfcNewNode
11206>>>        Get CloneInfcNode (If(bRecurse,-1,0)) to hinfcNewNode
11207>>>        If hinfcNewNode ;            Get CreateXMLNode hinfcNewNode to hoNewNode
11210>>>        Function_Return hoNewNode
11211>>>    End_Function
11212>>>    
11212>>>    //  Create a collection of all nodes. returns handle of a cXMLDomNodeList
11212>>>    
11212>>>    Function ChildNodes Returns Handle
11214>>>        Handle infcNodeList
11214>>>        Handle hoNodeList
11214>>>        Get phChildNodes to infcNodeList
11215>>>        If (infcNodeList) ;            Get CreateXMLObject U_cXMLDOMNodeList infcNodeList to hoNodeList
11218>>>        Function_Return hoNodeList
11219>>>    End_Function
11220>>>    
11220>>>    //  Create a collection of all attributes. returns handle of a cXMLDomNodeMapList
11220>>>    
11220>>>    Function AttributeNodes Returns Handle
11222>>>        Handle hoCollectionId   // Object to hold collection
11222>>>        Handle hinfcAttributes  // XML Interface for collection
11222>>>        Get phAttributes to hinfcAttributes
11223>>>        If (hinfcAttributes) ;            Get CreateXMLObject U_cXMLDOMNamedNodeMap hinfcAttributes to hoCollectionId
11226>>>        Function_Return hoCollectionId
11227>>>    End_Function
11228>>>    
11228>>>    //  Create a collection of all attributes for the temporary attribute node object.
11228>>>    //  Using this saves a small amount of time creating and destroying this object but
11228>>>    //  it must be used with care. This binding is temporary!
11228>>>    Function TempAttributeNodes Returns Handle
11230>>>        Handle hoCollectionId hoDocument
11230>>>        Handle hinfcAttributes  // XML Interface for collection
11230>>>        Get phAttributes to hinfcAttributes
11231>>>        If (hinfcAttributes) Begin
11233>>>            Get DocumentObject to hoDocument
11234>>>            Get phoTempDomNodeMap of hoDocument to hoCollectionId
11235>>>            Set XMLInterface of hoCollectionId to hinfcAttributes
11236>>>        End
11236>>>>
11236>>>        Function_Return hoCollectionId
11237>>>    End_Function
11238>>>    
11238>>>    
11238>>>    // Returns a collection of just elements
11238>>>    
11238>>>    Function ElementNodes String sQueryString Returns Handle
11240>>>        Handle hoNodeList
11240>>>        Handle hinfcNodeList
11240>>>        Get ElementsByTagName sQueryString to hinfcNodeList
11241>>>        If (hinfcNodeList <> 0) ;            Get CreateXMLObject U_cXMLDOMNodeList hinfcNodeList to hoNodeList
11244>>>        Function_Return hoNodeList
11245>>>    End_Function
11246>>>    
11246>>>    
11246>>>    
11246>>>    // Return object handle for query.
11246>>>    
11246>>>    Function FindNode String sQueryString Returns Handle
11248>>>        Handle hoNode
11248>>>        Handle hinfcNode
11248>>>        Get SelectSingleNode sQueryString to hinfcNode
11249>>>        If (hinfcNode <> 0) ;            Get CreateXMLNode hInfcNode to hoNode
11252>>>        Function_Return hoNode
11253>>>    End_Function
11254>>>    
11254>>>    // Return object handle for a collection node.
11254>>>    
11254>>>    
11254>>>    Function FindNodeList String sQueryString Returns Handle
11256>>>        Handle hoNodeList
11256>>>        Handle hinfcNodeList
11256>>>        Get SelectNodes sQueryString to hinfcNodeList
11257>>>        If (hinfcNodeList <> 0) ;            Get CreateXMLObject U_cXMLDOMNodeList hinfcNodeList to hoNodeList
11260>>>        Function_Return hoNodeList
11261>>>    End_Function
11262>>>    
11262>>>    // The CreatexxxxxNode messages creates an node object for the type specified. Both
11262>>>    // the interface and the object or of the correct type (i.e. element, comment)
11262>>>    // These all return an object handle which can be used to place the object via
11262>>>    // appendNode or InsertBeforeNode
11262>>>    
11262>>>    // This function creates a child element, returning a dataflex object.
11262>>>    // The interface of the object returned can be used in AppendChild to add
11262>>>    // the element to the XML Document.
11262>>>    
11262>>>    Function CreateElementNode String sTagName String sValue Returns Handle
11264>>>        Handle hoNewElement
11264>>>        Handle hoDocumentObject
11264>>>        Handle infcNewElement
11264>>>        Integer iClassId
11264>>>        // The DataFlex objects are created inside the nodes (elements).
11264>>>        // Create an element in the document and assign its interface to the new DF object.
11264>>>        Get DocumentObject to hoDocumentObject
11265>>>        Get createElement of hoDocumentObject sTagName to infcNewElement
11266>>>        If infcNewElement Begin // if there was an error, no infc handle would be returned
11268>>>            Get NodeClassId of hoDocumentObject NODE_ELEMENT to iClassId
11269>>>            Get CreateXMLObject iClassId infcNewElement to hoNewElement
11270>>>            If hoNewElement ; // very unlikely this will be zero                Set psText of hoNewElement to sValue
11273>>>        End
11273>>>>
11273>>>        Function_Return hoNewElement
11274>>>    End_Function
11275>>>    
11275>>>    // This function creates an attribute in a document. Attributes are _NOT_ children of an element.
11275>>>    // A DataFlex object is returned. An attribute can be added to an xml document using
11275>>>    // get AddAttributeNode.
11275>>>    
11275>>>    Function CreateAttributeNode String sName String sValue Returns Handle
11277>>>        Handle hoNewAttribute
11277>>>        Handle hoDocumentObject
11277>>>        Handle infcNewAttribute
11277>>>        Integer iClassId
11277>>>        Get DocumentObject to hoDocumentObject
11278>>>        // Create an Attribute in the document and assign its interface to the new DF object.
11278>>>        Get createAttribute of hoDocumentObject sName to infcNewAttribute
11279>>>        If infcNewAttribute Begin // if there was an error, no infc handle would be returned
11281>>>            Get NodeClassId of hoDocumentObject NODE_ATTRIBUTE to iClassId
11282>>>            Get CreateXMLObject iClassId infcNewAttribute to hoNewAttribute
11283>>>            // Set the value of the attribute.
11283>>>            If hoNewAttribute ; // very unlikely this will be 0                Set psText of hoNewAttribute to sValue
11286>>>        End
11286>>>>
11286>>>        Function_Return hoNewAttribute
11287>>>    End_Function
11288>>>    
11288>>>    // This function creates a child comment, returning a dataflex object.
11288>>>    // The interface of the object returned can be used in AppendChild to add
11288>>>    // the comment to the XML Document.
11288>>>    
11288>>>    Function CreateChildComment String sValue Returns Handle
11290>>>        Handle hoNewComment
11290>>>        Handle hoDocumentObject
11290>>>        Handle infcNewComment
11290>>>        Integer iClassID
11290>>>        Get DocumentObject to hoDocumentObject
11291>>>        // Create an Comment in the document and assign its interface to the new DF object.
11291>>>        Get createComment of hoDocumentObject sValue to infcNewComment
11292>>>        If infcNewComment Begin // if there was an error, no infc handle would be returned
11294>>>            Get NodeClassId of hoDocumentObject NODE_COMMENT to iClassId
11295>>>            Get CreateXMLObject iClassId infcNewComment to hoNewComment
11296>>>            If hoNewComment ; // very unlikely this will be 0                Set psText of hoNewComment to sValue
11299>>>        End
11299>>>>
11299>>>        Function_Return hoNewComment
11300>>>    End_Function
11301>>>    
11301>>>    // This function creates a child processing instruction, returning a dataflex object.
11301>>>    // The interface of the object returned can be used in AppendChild to add
11301>>>    // the processing instruction to the XML Document.
11301>>>    
11301>>>    Function CreateChildProcessingInstruction String sTarget String sValue Returns Handle
11303>>>        Handle hoNewProcessingInstruction
11303>>>        Handle hoDocumentObject
11303>>>        Handle infcNewProcessingInstruction
11303>>>        Integer iClassID
11303>>>        Get DocumentObject to hoDocumentObject
11304>>>        // Create an ProcessingInstruction in the document and assign its interface to the new DF object.
11304>>>        Get createProcessingInstruction of hoDocumentObject sTarget sValue to infcNewProcessingInstruction
11305>>>        If infcNewProcessingInstruction  Begin // if there was an error, no infc handle would be returned
11307>>>            Get NodeClassId of hoDocumentObject NODE_PROCESSING_INSTRUCTION to iClassId
11308>>>            Get CreateXMLObject iClassID infcNewProcessingInstruction to hoNewProcessingInstruction
11309>>>        End
11309>>>>
11309>>>        Function_Return hoNewProcessingInstruction
11310>>>    End_Function
11311>>>    
11311>>>    // This function creates a child text node, returning a dataflex object.
11311>>>    // The interface of the object returned can be used in AppendChild to add
11311>>>    // the text node to the XML Document.
11311>>>    
11311>>>    Function CreateChildTextNode String sValue Returns Handle
11313>>>        Handle hoNewTextNode
11313>>>        Handle hoDocumentObject
11313>>>        Handle infcNewTextNode
11313>>>        Integer iClassID
11313>>>        Get DocumentObject to hoDocumentObject
11314>>>        // Create an TextNode in the document and assign its interface to the new DF object.
11314>>>        Get createTextNode of hoDocumentObject sValue to infcNewTextNode
11315>>>        If infcNewTextNode Begin // if there was an error, no infc handle would be returned
11317>>>            Get NodeClassId of hoDocumentObject NODE_TEXT to iClassId
11318>>>            Get CreateXMLObject iClassId infcNewTextNode to hoNewTextNode
11319>>>        End
11319>>>>
11319>>>        Function_Return hoNewTextNode
11320>>>    End_Function
11321>>>    
11321>>>    // This function creates a cdata text node, returning a dataflex object.
11321>>>    // The interface of the object returned can be used in AppendChild to add
11321>>>    // the cdata node to the XML Document.
11321>>>    
11321>>>    Function CreateCDATASectionNode String sValue Returns Handle
11323>>>        Handle hoNewNode
11323>>>        Handle hoDocumentObject
11323>>>        Handle infcNewNode
11323>>>        Integer iClassId
11323>>>        // The DataFlex objects are created inside the nodes (elements).
11323>>>        // Create an element in the document and assign its interface to the new DF object.
11323>>>        Get DocumentObject to hoDocumentObject
11324>>>        Get createCDATASection of hoDocumentObject sValue to infcNewNode
11325>>>        If infcNewNode Begin
11327>>>            Get NodeClassId of hoDocumentObject NODE_CDATA_SECTION to iClassId
11328>>>            Get CreateXMLObject iClassId infcNewNode to hoNewNode
11329>>>        End
11329>>>>
11329>>>        Function_Return hoNewNode
11330>>>    End_Function
11331>>>    
11331>>>    // Create a document fragment.  Document fragments can be used to house nodes temporarily. When
11331>>>    // You append or insert a document fragment (appendNode InsertBeforeNode) child nodes are appended
11331>>>    // to the destination object and not the fragment node itself. This is useful!
11331>>>    
11331>>>    Function CreateDocumentFragmentNode Returns Handle
11333>>>        Handle hoNew
11333>>>        Handle hoDocumentObject
11333>>>        Handle infcNew
11333>>>        Integer iClassID
11333>>>        Get DocumentObject to hoDocumentObject
11334>>>        // Create an Comment in the document and assign its interface to the new DF object.
11334>>>        Get createDocumentFragment of hoDocumentObject to infcNew
11335>>>        If infcNew Begin // if there was an error, no infc handle would be returned
11337>>>            Get NodeClassId of hoDocumentObject NODE_DOCUMENT_FRAGMENT to iClassId
11338>>>            Get CreateXMLObject iClassId infcNew to hoNew
11339>>>        End
11339>>>>
11339>>>        Function_Return hoNew
11340>>>    End_Function
11341>>>    
11341>>>    //  Create a Node of any passed Type (e.g. Node_element). Normally you don't need this as there are
11341>>>    //  specific messages to do this for each node type. Node that this lets you pass namespaces as a separate
11341>>>    //  parameter. With all of the other messages (e.g. createElementNode) you pass namespaces as prefixed to
11341>>>    // the tagname (e.g. Get CreateElementNode "MyNameSpace:MyTag" "MyValue" to hoEle)
11341>>>    
11341>>>    Function CreateChildNode Integer iNodeType String sTagName String sNameSpace Returns Handle
11343>>>        Handle hoNewNode hoDocumentObject
11343>>>        Handle infcNewNode
11343>>>        Integer iClassid iType
11343>>>        Get DocumentObject to hoDocumentObject
11344>>>        Get NodeClassId iNodeType to iClassId
11345>>>        If (iClassId<>0) Begin
11347>>>            // Create a node in the document and assign its interface to the new DF object.
11347>>>            Get createNode of hoDocumentObject iNodeType sTagName sNameSpace to infcNewNode
11348>>>            // this is required to force the interface type to be correct.
11348>>>            Move (invokexml(DF_IXMLDOMNODE, GET_piNodeType, infcNewNode, 0, 0, 0, 0)) to iType
11349>>>            Move (invokexml(DF_IXMLDOMNODE, GET_ChangeNodeType, infcNewNode, iType, 1, 0, 0)) to infcNewNode
11350>>>            
11350>>>            If infcNewNode ;                Get CreateXMLObject iClassId infcNewNode to hoNewNode
11353>>>        End
11353>>>>
11353>>>        Function_Return hoNewNode
11354>>>    End_Function
11355>>>    
11355>>>    
11355>>>    
11355>>>    // The Addxxxxx messages create a new node and appends it to the list. When used as a function,
11355>>>    // the object handle is returned and must be disposed of later by the programmer.
11355>>>    // When used as a procedure, the object is destroyed--it just does it and is done.
11355>>>    
11355>>>    Function AddElement String sTagName String sValue Returns Handle
11357>>>        Handle hoNewElement
11357>>>        Get CreateElementNode sTagName sValue to hoNewElement
11358>>>        If hoNewElement ;            Get AppendNode hoNewElement to hoNewElement
11361>>>        Function_Return hoNewElement
11362>>>    End_Function
11363>>>    
11363>>>    Procedure AddElement String sTagName String sValue
11365>>>        Handle hoNewElement
11365>>>        Get AddElement sTagName sValue to hoNewElement
11366>>>        If hoNewElement ;            Send Destroy to hoNewElement
11369>>>        Else ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddElement"))
11371>>>    End_Procedure
11372>>>    
11372>>>    // this returns the object, This is often needed
11372>>>    Function CreateElementNodeNS String sNameSpace String sTagName String sValue Returns Handle
11374>>>        Handle hoNewElement
11374>>>        Get CreateChildNode NODE_ELEMENT sTagName sNameSpace to hoNewElement
11375>>>        If (hoNewElement and sValue<>"") ;            Set psText of hoNewElement to sValue
11378>>>        Function_Return hoNewElement
11379>>>    End_Function
11380>>>    
11380>>>    
11380>>>    // this returns the object, This is often needed
11380>>>    Function AddElementNS String sNameSpace String sTagName String sValue Returns Handle
11382>>>        Handle hoNewElement
11382>>>        Get CreateElementNodeNS sNameSpace sTagName sValue to hoNewElement
11383>>>        If hoNewElement Begin
11385>>>            Get AppendNode hoNewElement to hoNewElement
11386>>>        End
11386>>>>
11386>>>        Function_Return hoNewElement
11387>>>    End_Function
11388>>>    
11388>>>    Procedure AddElementNS String sNameSpace String sTagName String sValue
11390>>>        Handle hoNewElement
11390>>>        Get AddElementNS sNameSpace sTagName sValue to hoNewElement
11391>>>        If hoNewElement ;            Send Destroy to hoNewElement
11394>>>        Else ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddElementNS"))
11396>>>    End_Procedure
11397>>>    
11397>>>    Function AddAttributeNode Handle hoNode Returns Handle
11399>>>        Handle hInfc
11399>>>        Get Set_AttributeNode (XmlInterface(hoNode)) to hInfc
11400>>>        If hInfc ; // if ret value we have a replacement            Set XmlInterface of hoNode to hInfc
11403>>>        Function_Return hoNode
11404>>>    End_Function
11405>>>    
11405>>>    Function AttributeValueNode String sName Returns Handle
11407>>>        Handle hInfc
11407>>>        Handle hoNode
11407>>>        Get AttributeNode sName to hInfc
11408>>>        If hInfc ; // if ret value we have a replacement            Get CreateXMLNode hInfc to hoNode
11411>>>        Function_Return hoNode
11412>>>    End_Function
11413>>>    
11413>>>    Function AttributeValueNodeNS String sNameSpace String sBaseName Returns Handle
11415>>>        Handle hoAttrs hoAttr
11415>>>        String sValue
11415>>>        Get TempAttributeNodes to hoAttrs
11416>>>        If hoAttrs Begin
11418>>>            Get QualifiedNode of hoAttrs sNamespace sBaseName to hoAttr
11419>>>            Set XMLInterface of hoAttrs to 0
11420>>>        End
11420>>>>
11420>>>        Function_Return hoAttr
11421>>>    End_Function
11422>>>    
11422>>>    
11422>>>    Function CreateAttributeNodeNS String sNameSpace String sName String sValue Returns Handle
11424>>>        Handle hoNewAttribute
11424>>>        Get CreateChildNode NODE_ATTRIBUTE sName sNameSpace to hoNewAttribute
11425>>>        If hoNewAttribute ;            Set psText of hoNewAttribute to sValue
11428>>>        Function_Return hoNewAttribute
11429>>>    End_Function
11430>>>    
11430>>>    Procedure AddAttributeNS String sNameSpace String sName String sValue
11432>>>        Handle hoNode
11432>>>        Get CreateAttributeNodeNS sNameSpace sName sValue to hoNode
11433>>>        If hoNode Begin
11435>>>            Get AddAttributeNode hoNode to hoNode
11436>>>            If hoNode ;                Send Destroy of hoNode
11439>>>        End
11439>>>>
11439>>>        Else ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddAttributeNS"))
11441>>>    End_Procedure
11442>>>    
11442>>>    
11442>>>    // This function encapsulates creation and addition of attributes to a node.
11442>>>    // should only work with element class
11442>>>    Procedure AddAttribute String sName String sValue
11444>>>        Set AttributeValue sName to sValue
11445>>>    End_Procedure
11446>>>    
11446>>>    // This function encapsulates creation and addition of comments to a node.
11446>>>    // The return value is a Boolean that is currently unused.
11446>>>    
11446>>>    Procedure AddChildComment String sValue
11448>>>        Handle hoNewNode
11448>>>        Get createChildComment sValue to hoNewNode
11449>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddChildComment"))
11452>>>        Else Begin
11453>>>            Get AppendNode hoNewNode to hoNewNode
11454>>>            Send Destroy to hoNewNode
11455>>>        End
11455>>>>
11455>>>    End_Procedure
11456>>>    
11456>>>    // This function encapsulates creation and addition of processing instructions to a node.
11456>>>    // The return value is a Boolean that is currently unused.
11456>>>    
11456>>>    Procedure AddChildProcessingInstruction String sTarget String sValue
11458>>>        Handle hoNewNode
11458>>>        Get createChildProcessingInstruction sTarget sValue to hoNewNode
11459>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddChildProcessingInstruction"))
11462>>>        Else Begin
11463>>>            Get AppendNode hoNewNode to hoNewNode
11464>>>            Send Destroy to hoNewNode
11465>>>        End
11465>>>>
11465>>>    End_Procedure
11466>>>    
11466>>>    
11466>>>    // This function encapsulates creation and addition of text nodes to a node.
11466>>>    // The return value is a Boolean that is currently unused.
11466>>>    
11466>>>    Procedure AddChildTextNode String sValue
11468>>>        Handle hoNewNode
11468>>>        Get createChildTextNode sValue to hoNewNode
11469>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddChildTextNode"))
11472>>>        Else Begin
11473>>>            Get AppendNode hoNewNode to hoNewNode
11474>>>            Send Destroy to hoNewNode
11475>>>        End
11475>>>>
11475>>>    End_Procedure
11476>>>    
11476>>>    // This procedure encapsulates creation and addition of cdata text nodes to a node.
11476>>>    Procedure AddCDataSection String sValue
11478>>>        Handle hoNewNode
11478>>>        Get CreateCDATASectionNode sValue to hoNewNode
11479>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddCDataSection"))
11482>>>        Else Begin
11483>>>            Get AppendNode hoNewNode to hoNewNode
11484>>>            Send Destroy to hoNewNode
11485>>>        End
11485>>>>
11485>>>    End_Procedure
11486>>>    
11486>>>    
11486>>>    Function AddChildNode Integer iNodeType String sTagName String sNameSpace Returns Handle
11488>>>        Handle hoNewNode
11488>>>        Handle hoDocumentObject
11488>>>        Get DocumentObject to hoDocumentObject
11489>>>        Get createChildNode of hoDocumentObject iNodeType sTagName sNamespace to hoNewNode
11490>>>        If hoNewNode ;            Get AppendNode hoNewNode to hoNewNode
11493>>>        Function_Return hoNewNode
11494>>>    End_Function
11495>>>    
11495>>>    // don't use the runtime/msxml version of this. Instead just return the
11495>>>    // first text from the first child node. This is much faster
11495>>>    Function psText Returns String
11497>>>        Handle hText
11497>>>        String sValue
11497>>>        Get phFirstChild to hText
11498>>>        Get InfcNodeValue hText to sValue
11499>>>        Function_Return sValue
11500>>>    End_Function
11501>>>    
11501>>>    // Use this to call the internal Text property. This returns all text for all child
11501>>>    // node. You rarely would want to do this. The is uses the msxml psText which can
11501>>>    // get slow with very large files. If for some reason you need all of the child node's
11501>>>    // text and the file is large, you might want to consider doing this process manually.
11501>>>    Function AllChildNodesText Returns String
11503>>>        String sValue
11503>>>        Forward Get psText to sValue
11505>>>        Function_Return sValue
11506>>>    End_Function
11507>>>    
11507>>>    // return the interface NodeValue without having to create a
11507>>>    // new object. This also disposes the hInfc interface
11507>>>    Function InfcNodeValue Handle hInfc Returns String
11509>>>        Handle hoDocument hoTempNode
11509>>>        String sValue
11509>>>        If (hinfc) Begin
11511>>>            Get DocumentObject to hoDocument
11512>>>            Get phoTempDomNode of hoDocument to hoTempNode
11513>>>            Set XMLInterface of hoTempNode to hInfc
11514>>>            Get psNodeValue of hoTempNode to sValue
11515>>>            // This disposes of hInfc which was passed in. After
11515>>>            // calling this you can no longer use it (which is good).
11515>>>            Set XMLInterface of hoTempNode to 0
11516>>>        End
11516>>>>
11516>>>        Function_Return sValue
11517>>>    End_Function
11518>>>    
11518>>>    // ChildNodeValue is used to get the "value" of an element. This is useful when the element
11518>>>    // only has a single value (similar to an attribute).
11518>>>    
11518>>>    Function ChildNodeValue String sTagName Returns String
11520>>>        Handle hoTempNode hoDocument
11520>>>        Handle hinfcTempNode
11520>>>        String sRetVal
11520>>>        Get SelectSingleNode sTagName to hinfcTempNode
11521>>>        If (hinfcTempNode <> 0) Begin
11523>>>            Get DocumentObject to hoDocument
11524>>>            Get phoTempDomNode of hoDocument to hoTempNode
11525>>>            Set XMLInterface of hoTempNode to hinfcTempNode
11526>>>            Get phFirstChild of hoTempNode to hinfcTempNode
11527>>>            Set XMLInterface of hoTempNode to 0
11528>>>            If hinfcTempNode Begin
11530>>>                Get InfcNodeValue hinfcTempNode to sRetVal
11531>>>            End
11531>>>>
11531>>>        End
11531>>>>
11531>>>        Function_Return sRetVal
11532>>>    End_Function
11533>>>    
11533>>>    // This simple function allows a parent to change the text of one of its elements.
11533>>>    // This actually occurs quite a bit, because (as stated above) lowest level
11533>>>    // elements are frequently used as properties.
11533>>>    //
11533>>>    Procedure SetChildNodeValue String sTagName String sValue
11535>>>        Handle hoTempNode
11535>>>        Handle hinfcTempNode
11535>>>        // Search for the node that matches.
11535>>>        Get SelectSingleNode sTagName to hinfcTempNode
11536>>>        // If no match is found, add a new element with the tag.
11536>>>        If (hinfcTempNode = 0) ;            Send AddElement sTagName sValue
11539>>>        Else Begin
11540>>>            Get CreateXMLObject U_BaseXMLDOMNode hinfcTempNode to hoTempNode
11541>>>            If hoTempNode Begin
11543>>>                // Set the text of the element.
11543>>>                Set psText of hoTempNode to sValue
11544>>>                Send Destroy to hoTempNode
11545>>>            End
11545>>>>
11545>>>            Else ;                Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_SetChildNodeValue"))
11547>>>        End
11547>>>>
11547>>>    End_Procedure
11548>>>    
11548>>>    // These messages are used to allow you to travese through a nodes.
11548>>>    
11548>>>    Function FirstChild Returns Handle
11550>>>        Handle hoChild
11550>>>        Handle hinfcChild
11550>>>        Get phFirstChild  to hinfcChild
11551>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
11554>>>        Function_Return hoChild
11555>>>    End_Function
11556>>>    
11556>>>    Function NextSibling Returns Handle
11558>>>        Handle hoChild
11558>>>        Handle hinfcChild
11558>>>        Get phNextSibling  to hinfcChild
11559>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
11562>>>        Function_Return hoChild
11563>>>    End_Function
11564>>>    
11564>>>    Function PreviousSibling Returns Handle
11566>>>        Handle hoChild
11566>>>        Handle hinfcChild
11566>>>        Get phPreviousSibling  to hinfcChild
11567>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
11570>>>        Function_Return hoChild
11571>>>    End_Function
11572>>>    
11572>>>    Function LastChild Returns Handle
11574>>>        Handle hoChild
11574>>>        Handle hinfcChild
11574>>>        Get phLastChild  to hinfcChild
11575>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
11578>>>        Function_Return hoChild
11579>>>    End_Function
11580>>>    
11580>>>    // return an object that is the parent of the current node
11580>>>    Function ParentNode Returns Handle
11582>>>        Handle hoId
11582>>>        Handle hinfcXMLInterface
11582>>>        Get phParentNode to hinfcXMLInterface
11583>>>        If (hinfcXMLInterface) ;            Get CreateXmlNode hinfcXMLInterface to hoID
11586>>>        Function_Return hoID
11587>>>    End_Function
11588>>>    
11588>>>    // Same as NextSibling except it uses or destroys the current node
11588>>>    //
11588>>>    // optimized version does not destroy/create object unless it needs to.
11588>>>    // if the next node is the same node type we will resuse this object
11588>>>    // else this object is destroyed
11588>>>    Function NextNode Returns Handle
11590>>>        Handle hoNode hoDocument
11590>>>        Handle hInfc
11590>>>        Get phNextSibling to hInfc
11591>>>        If hInfc Begin
11593>>>            Get DocumentObject to hoDocument
11594>>>            Move Self to hoNode
11595>>>            Send BindXMLInfc of hoDocument hInfc (&hoNode)
11596>>>        End
11596>>>>
11596>>>        Else Begin
11597>>>            Send Destroy
11598>>>            Move 0 to hoNode
11599>>>        End
11599>>>>
11599>>>        Function_Return hoNode
11600>>>    End_Function
11601>>>    
11601>>>    
11601>>>    // Enumerate through all nodes.
11601>>>    
11601>>>    Procedure EnumerateNodes Integer iMsg Handle hoReceiver String sVal1 String sVal2
11603>>>        Integer i iLen
11603>>>        Handle hoNode
11603>>>        Handle hoNodeCollection
11603>>>        Get ChildNodes to hoNodeCollection
11604>>>        If (hoNodeCollection <> 0) Begin
11606>>>            Get NodeListLength of hoNodeCollection to iLen
11607>>>            Decrement iLen
11608>>>            For i from 0 to iLen
11614>>>>
11614>>>                // For each record, process its fields.
11614>>>                Get CollectionNode of hoNodeCollection i to hoNode
11615>>>                Send iMsg of hoReceiver hoNode sVal1 sVal2
11616>>>                Send Destroy of hoNode
11617>>>            Loop
11618>>>>
11618>>>            Send Destroy of hoNodeCollection
11619>>>        End
11619>>>>
11619>>>    End_Procedure
11620>>>    
11620>>>    // Enumerate through all elements.
11620>>>    
11620>>>    Procedure EnumerateElements Integer iMsg Handle hoReceiver String sVal1 String sVal2
11622>>>        Integer i iLen
11622>>>        Handle hoNode
11622>>>        Handle hoNodeCollection
11622>>>        Get ChildNodes to hoNodeCollection
11623>>>        If (hoNodeCollection <> 0) Begin
11625>>>            Get NodeListLength of hoNodeCollection to iLen
11626>>>            Decrement iLen
11627>>>            For i from 0 to iLen
11633>>>>
11633>>>                // For each record, process its fields.
11633>>>                Get CollectionNode of hoNodeCollection i to hoNode
11634>>>                If (piNodeType(hoNode)=NODE_ELEMENT) ;                    Send iMsg of hoReceiver hoNode sVal1 sVal2
11637>>>                Send Destroy of hoNode
11638>>>            Loop
11639>>>>
11639>>>            Send Destroy of hoNodeCollection
11640>>>        End
11640>>>>
11640>>>    End_Procedure
11641>>>    
11641>>>    
11641>>>    // enumerate through all attributes. There is no recurse here because attributes will not
11641>>>    // contain attributes.
11641>>>    
11641>>>    Procedure EnumerateAttributes Integer iMsg Handle hoReceiver String sSomeValue
11643>>>        Integer i iLen
11643>>>        Handle hoNode
11643>>>        Handle hoNodeMapCollection
11643>>>        // we don't use tempattributenodes because we don't know what the enum message will do.
11643>>>        Get AttributeNodes to hoNodeMapCollection
11644>>>        If (hoNodeMapCollection <> 0) Begin
11646>>>            Get NodeListLength of hoNodeMapCollection to iLen
11647>>>            Decrement iLen
11648>>>            For i from 0 to iLen
11654>>>>
11654>>>                // For each record, process its fields.
11654>>>                Get CollectionNode of hoNodeMapCollection i to hoNode
11655>>>                Send iMsg of hoReceiver hoNode sSomeValue
11656>>>                Send Destroy of hoNode
11657>>>            Loop
11658>>>>
11658>>>            Send Destroy of hoNodeMapCollection
11659>>>        End
11659>>>>
11659>>>    End_Procedure
11660>>>    
11660>>>    
11660>>>    Function XSLTransformation Handle hoXSLDocument Returns String
11662>>>        Handle infcXSLStartAt
11662>>>        String sBuffer
11662>>>        // Transformation is of current object using passed XSLDocument.
11662>>>        Get XMLInterface of hoXSLDocument to infcXSLStartAt
11663>>>        Get TransformNode infcXSLStartAt to sBuffer
11664>>>        Function_Return sBuffer
11665>>>    End_Function
11666>>>    
11666>>>    // This allows for transformations not limited to the size of the string buffer
11666>>>    //
11666>>>    // Note that it is up to the programmer to dispose of the memory allocated at pBuffer
11666>>>    // by using the free(pBuffer) function
11666>>>    //
11666>>>    Function XSLTransformationToAddress Handle hoXSLDocument Returns Pointer
11668>>>        Handle infcXSLStartAt
11668>>>        Pointer pBuffer
11668>>>        // Transformation is of current object using passed XSLDocument.
11668>>>        Get XMLInterface of hoXSLDocument to infcXSLStartAt
11669>>>        Get TransformNodeToAddress infcXSLStartAt to pBuffer
11670>>>        Function_Return pBuffer
11671>>>    End_Function
11672>>>    
11672>>>    
11672>>>    // extract base name from string. e.g.: ns:name --> name
11672>>>    //
11672>>>    Function BaseNameFromQName String sName Returns String
11674>>>        Integer iPos
11674>>>        Move (Pos(":",sName)) to iPos
11675>>>        If iPos Begin
11677>>>            Move (remove(sName,1,iPos)) to sName
11678>>>        End
11678>>>>
11678>>>        Function_Return sName
11679>>>    End_Function
11680>>>    
11680>>>    // extract prefix name from string. e.g.: ns:name --> ns
11680>>>    //
11680>>>    Function PrefixNameFromQName String sName Returns String
11682>>>        String sPreFix
11682>>>        Integer iPos
11682>>>        Move (Pos(":",sName)) to iPos
11683>>>        If iPos Begin
11685>>>            Move (Left(sName,iPos-1)) to sPreFix
11686>>>        End
11686>>>>
11686>>>        Function_Return sPreFix
11687>>>    End_Function
11688>>>    
11688>>>    
11688>>>    // Returns true if node is element and namespace and base name match
11688>>>    //
11688>>>    Function IsElementNS String sNamespaceURI String sBaseName Returns Boolean
11690>>>        Function_Return (piNodeType(Self)=NODE_ELEMENT and ;            psNameSpaceURI(Self)=sNamespaceURI and ;            psBaseName(Self)=sBaseName )
11691>>>    End_Function
11692>>>    
11692>>>    // Returns node of first occurence of child node matching namespace and base name
11692>>>    //
11692>>>    Function ChildElementNS String sNameSpaceURI String sBaseName Returns Handle
11694>>>        Handle hoNode
11694>>>        Get FirstChild to hoNode
11695>>>        While (hoNode and not(IsElementNS(hoNode, sNameSpaceURI, sBaseName)))
11699>>>            Get NextNode of hoNode to hoNode
11700>>>        Loop
11701>>>>
11701>>>        Function_Return hoNode
11702>>>    End_Function
11703>>>    
11703>>>    Function NextElementNS String sNameSpaceURI String sBaseName Returns Handle
11705>>>        Handle hoNode
11705>>>        // NextNode may return the same object or it may destroy the object and
11705>>>        // return nothing or a different object
11705>>>        Get NextNode to hoNode
11706>>>        While (hoNode and not(IsElementNS(hoNode, sNameSpaceURI, sBaseName)))
11710>>>            // use of hoNode is required. This can be different than self
11710>>>            Get NextNode of hoNode to hoNode
11711>>>        Loop
11712>>>>
11712>>>        
11712>>>        Function_Return hoNode
11713>>>    End_Function
11714>>>    
11714>>>    
11714>>>    // Returns value (string) first occurence of child node matching namespace and base name
11714>>>    //
11714>>>    Function ChildElementValueNS String sNameSpaceURI String sBaseName Returns String
11716>>>        Handle hoNext
11716>>>        String sText
11716>>>        Get ChildElementNS sNameSpaceURI sBaseName to hoNext
11717>>>        If hoNext Begin
11719>>>            Get psText of hoNext to sText
11720>>>            Send destroy of hoNext
11721>>>        End
11721>>>>
11721>>>        Function_Return sText
11722>>>    End_Function
11723>>>    
11723>>>    Procedure SetChildElementValueNS String sNameSpaceURI String sBaseName String sValue
11725>>>        Handle hoNode
11725>>>        Handle hinfcTempNode
11725>>>        Get ChildElementNS sNameSpaceURI sBaseName to hoNode
11726>>>        If (hoNode=0) Begin
11728>>>            Send AddElementNS sNameSpaceURI sBaseName sValue
11729>>>        End
11729>>>>
11729>>>        Else Begin
11730>>>            Set psText of hoNode to sValue
11731>>>            Send destroy of hoNode
11732>>>        End
11732>>>>
11732>>>    End_Procedure
11733>>>    
11733>>>    // pass a prefix and try to finds its NameSpaceURI. Start at current node and work up to parent.
11733>>>    // This can be useful when a qualified name is found in an attribute value
11733>>>    //
11733>>>    Function PrefixToNamespaceURI String sPrefix Returns String
11735>>>        Handle hoNode
11735>>>        Integer i iNodes
11735>>>        Handle hoNodes hoParentNode hoAttNode
11735>>>        Boolean bDone bParent
11735>>>        String sAttPrefix sName sNameSpace
11735>>>        
11735>>>        Move Self to hoNode
11736>>>        While not bDone
11740>>>            Get TempAttributeNodes of hoNode to hoNodes
11741>>>            If (hoNodes <> 0) Begin
11743>>>                Get NodeListLength of hoNodes to iNodes
11744>>>                For i from 0 to (iNodes-1)
11750>>>>
11750>>>                    // For each record, process its fields.
11750>>>                    Get CollectionNode of hoNodes i to hoAttNode
11751>>>                    Get psPrefix of hoAttNode to sAttPrefix
11752>>>                    Get psBaseName of hoAttNode to sName
11753>>>                    // with legacy msxml, xmlns="foo" returns psPrefix="xmlns" and pbBaseName=""
11753>>>                    // with newer msxml, xmlns="foo" returns psPrefix="" and pbBaseName="xmlns"
11753>>>                    // We handle both cases here.
11753>>>                    
11753>>>                    If ( (sAttPrefix="xmlns" and sName=sPrefix) or ; // if a normal xmlns:xx="foo" match (sPrefix="xx") or a legacy xmlns="foo" match (sPrefix="")                        (sPrefix="" and sAttPrefix="" and sName="xmlns") ) Begin // special test for newer msxml xmlns="foo" match (sPrefix="")
11755>>>                        
11755>>>                        Get Value of hoAttNode to sNameSpace
11756>>>                        Move True to bDone
11757>>>                        Move (iNodes-1) to i
11758>>>                        
11758>>>                    End
11758>>>>
11758>>>                    
11758>>>                    Send Destroy of hoAttNode
11759>>>                Loop
11760>>>>
11760>>>                Set XMLInterface of hoNodes to 0
11761>>>            End
11761>>>>
11761>>>            
11761>>>            Get ParentNode of hoNode to hoParentNode
11762>>>            If bParent ;                Send destroy of hoNode
11765>>>            If not bDone Begin
11767>>>                If not hoParentNode ;                    Move True to bDone
11770>>>                Else Begin
11771>>>                    Move True to bParent
11772>>>                    Move hoParentNode to hoNode
11773>>>                End
11773>>>>
11773>>>            End
11773>>>>
11773>>>        Loop
11774>>>>
11774>>>        Function_Return sNameSpace
11775>>>    End_Function
11776>>>    
11776>>>    
11776>>>    
11776>>>End_Class
11777>>>
11777>>>// Set up basic inheritance for specialized forms of XML classes.
11777>>>// This needs to be done so we can make objects of these types.
11777>>>
11777>>>Class cXMLDOMElement is a BaseXmlDomElement
11778>>>    Import_Class_Protocol cXMLDOMNodeMixin
11779>>>    
11779>>>    // Should use AddAttributeValue...does same thing
11779>>>    Procedure SetAttributeValue String sName String sValue
11781>>>        Send AddAttribute sName sValue
11782>>>    End_Procedure
11783>>>    
11783>>>    // Note: Get_AttributeValue already there
11783>>>    
11783>>>    Procedure RemoveAttribute String sName
11785>>>        Integer iVal
11785>>>        Get RemoveAttribute sName to iVal
11786>>>    End_Procedure
11787>>>    
11787>>>    Function AttributeValueNS String sNameSpace String sBaseName Returns String
11789>>>        String sValue
11789>>>        Handle hinfcItem
11789>>>        Handle hoDoc hoTempAttributeNodes hoNode
11789>>>        Integer hinfcAttributes
11789>>>        
11789>>>        Get TempAttributeNodes to hoTempAttributeNodes
11790>>>        Get QualifiedItem of hoTempAttributeNodes sBaseName sNameSpace  to hinfcItem
11791>>>        Set XMLInterface of hoTempAttributeNodes to 0
11792>>>        If hinfcItem Begin
11794>>>            Get DocumentObject to hoDoc
11795>>>            Get phoTempDomNode of hoDoc to hoNode
11796>>>            Set XMLInterface of hoNode to hinfcItem
11797>>>            Get psNodeValue of hoNode to sValue
11798>>>            Set XMLInterface of hoNode to 0
11799>>>        End
11799>>>>
11799>>>        Function_Return sValue
11800>>>    End_Function
11801>>>    
11801>>>    Procedure RemoveAttributeNS String sNameSpace String sBaseName
11803>>>        Handle hoAttrs hoAttr
11803>>>        String sValue
11803>>>        Get TempAttributeNodes to hoAttrs
11804>>>        If hoAttrs Begin
11806>>>            Get RemoveQualifiedNode of hoAttrs sNamespace sBaseName to hoAttr
11807>>>            Set XMLInterface of hoAttrs to 0
11808>>>            If hoAttr ;                Send destroy of hoAttr
11811>>>        End
11811>>>>
11811>>>    End_Procedure
11812>>>    
11812>>>End_Class
11813>>>
11813>>>Class cXMLDOMNode is a BaseXmlDomNode
11814>>>    Import_Class_Protocol cXMLDOMNodeMixin
11815>>>End_Class
11816>>>
11816>>>Class cXMLDOMAttribute is a BaseXmlDomAttribute
11817>>>    Import_Class_Protocol cXMLDOMNodeMixin
11818>>>End_Class
11819>>>
11819>>>Class cXMLDOMComment is a BaseXmlDomComment
11820>>>    Import_Class_Protocol cXMLDOMNodeMixin
11821>>>End_Class
11822>>>
11822>>>Class cXMLDOMProcessingInstruction is a BaseXmlDomProcessingInstruction
11823>>>    Import_Class_Protocol cXMLDOMNodeMixin
11824>>>End_Class
11825>>>
11825>>>Class cXMLDOMTextNode is a BaseXmlDomTextNode
11826>>>    Import_Class_Protocol cXMLDOMNodeMixin
11827>>>End_Class
11828>>>
11828>>>Class cXMLDOMCDATASection is a BaseXmlDomCDATASection
11829>>>    Import_Class_Protocol cXMLDOMNodeMixin
11830>>>End_Class
11831>>>
11831>>>Class cXMLDOMDocumentType is a BaseXmlDomDocumentType
11832>>>    Import_Class_Protocol cXMLDOMNodeMixin
11833>>>    
11833>>>End_Class
11834>>>
11834>>>Class cXMLDOMNotation is a BaseXmlDomNotation
11835>>>    Import_Class_Protocol cXMLDOMNodeMixin
11836>>>End_Class
11837>>>
11837>>>Class cXMLDOMEntity is a BaseXmlDomEntity
11838>>>    Import_Class_Protocol cXMLDOMNodeMixin
11839>>>End_Class
11840>>>
11840>>>Class cXMLDOMEntityReference is a BaseXmlDomEntityReference
11841>>>    Import_Class_Protocol cXMLDOMNodeMixin
11842>>>End_Class
11843>>>
11843>>>Class cXMLDOMDocumentFragment is a BaseXmlDomDocumentFragment
11844>>>    Import_Class_Protocol cXMLDOMNodeMixin
11845>>>End_Class
11846>>>
11846>>>
11846>>>Class cXMLDOMParseError is a BaseXMLDomParseError
11847>>>    // returns an error sub-object as a sibling of this error object
11847>>>    Function ErrorItemNode Integer iItem Returns Handle
11849>>>        Handle hoParseErrorNode hoParent
11849>>>        Handle hParseErrorIntf
11849>>>        Get ErrorItem iItem to hParseErrorIntf
11850>>>        If (hParseErrorIntf) Begin
11852>>>            // add to parent in case developer destroys the current object
11852>>>            Get Parent to hoParent
11853>>>            Get Create of hoParent U_cXMLDOMParseError to hoParseErrorNode
11854>>>            Set XmlInterface of hoParseErrorNode to hParseErrorIntf
11855>>>        End
11855>>>>
11855>>>        Function_Return hoParseErrorNode
11856>>>    End_Function
11857>>>End_Class
11858>>>
11858>>>// Base document class with Base functions.
11858>>>
11858>>>Class cXMLDOMDocument is an BaseXmlDomDocument
11859>>>    
11859>>>    Import_Class_Protocol cXMLDOMNodeMixin
11860>>>    
11860>>>    Procedure Construct_Object
11862>>>        Handle hInfc
11862>>>        Forward Send Construct_Object
11864>>>        Property String psDocumentName ""
11865>>>        Property Integer phPrivateDocumentElement 0
11866>>>        Property Handle phoTempDomNode (Create(Self,U_cXMLDomNode))
11867>>>        Property Handle phoTempDomNodeMap (Create(Self,U_cXMLDOMNamedNodeMap))
11868>>>        
11868>>>        // added in 15.1. If no COM pointer, msxml6 is most likely not installed. This will
11868>>>        // raise an unhandled error, which could be augmented to do something else.
11868>>>        Get XmlInterface to hInfc
11869>>>        If (hInfc=0) Begin
11871>>>            Send ErrorCreatingXMLObject
11872>>>        End
11872>>>>
11872>>>        
11872>>>        // as of 18.0 pbAsync now defaults to False. In most cases, this is what you want
11872>>>        Set pbAsync to False
11873>>>    End_Procedure
11874>>>    
11874>>>    // returns the classId for the passed NodeType. This is a good augmentation point. All nodes
11874>>>    // within an xml document come here to get a class. So, if you want to augment and return a
11874>>>    // different class, just check the node type and return whatever -- else forward
11874>>>    
11874>>>    Function NodeClassId Integer iType Returns Integer
11876>>>        Integer iClassId
11876>>>        Case Begin
11876>>>            Case (iType=NODE_ELEMENT) ;                Move U_cXMLDOMElement      to iClassId
11879>>>            Case (iType=NODE_ATTRIBUTE) ;                Move U_cXMLDOMAttribute    to iClassId
11883>>>            Case (iType=NODE_TEXT) ;                Move U_cXMLDOMTextNode     to iClassId
11887>>>            Case (iType=NODE_CDATA_SECTION) ;                Move U_cXMLDOMCDATASection to iClassId
11891>>>            Case (iType=NODE_ENTITY_REFERENCE) ;                Move U_cXMLDOMEntityReference to iClassId
11895>>>            Case (iType=NODE_ENTITY) ;                Move U_cXMLDOMEntity       to iClassId
11899>>>            Case (iType=NODE_PROCESSING_INSTRUCTION) ;                Move U_cXMLDOMProcessingInstruction to iClassId
11903>>>            Case (iType=NODE_COMMENT) ;                Move U_cXMLDOMComment      to iClassId
11907>>>            Case (iType=NODE_DOCUMENT) ;                Move U_cXMLDOMDocument     to iClassId
11911>>>            Case (iType=NODE_DOCUMENT_TYPE) ;                Move U_cXMLDOMDocumentType to iClassId
11915>>>            Case (iType=NODE_DOCUMENT_FRAGMENT) ;                Move U_cXMLDOMDocumentFragment to iClassId
11919>>>            Case (iType=NODE_NOTATION) ;                Move U_cXMLDOMNotation     to iClassId
11923>>>            Case (iType=0) ;                Move 0                     to iClassId // this is an error!!
11927>>>            Case Else ;                Move U_cXMLDOMNode         to iClassId
11929>>>        Case End
11929>>>        Function_Return iClassId
11930>>>    End_Function
11931>>>    
11931>>>    // Load an XML Document. The name of the document is stored in a property
11931>>>    // that must be set for this function to work correctly.
11931>>>    
11931>>>    Function LoadXMLDocument Returns Integer
11933>>>        String sDocumentName
11933>>>        Integer bRetVal
11933>>>        Get psDocumentName to sDocumentName
11934>>>        Get LoadDocument sDocumentName to bRetVal
11935>>>        If (bRetVal = 0);            Function_Return True
11938>>>        Else;            Function_Return False
11940>>>    End_Function
11941>>>    
11941>>>    Function SaveXMLDocument Returns Integer
11943>>>        String sDocumentName
11943>>>        Integer bRetVal
11943>>>        Get psDocumentName to sDocumentName
11944>>>        Get SaveDocument sDocumentName to bRetVal
11945>>>        Function_Return bRetVal
11946>>>    End_Function
11947>>>    
11947>>>    // Load an XML from a string. This aguments the C message to ret 1 if Ok and 0 if error.
11947>>>    //
11947>>>    Function LoadXML String sXML Returns Integer
11949>>>        Integer bRetVal
11949>>>        // for some reason the parser will not work properly with embedded double quotes.
11949>>>        // Change all " to ' in document.
11949>>>        //Move (replaces('"',sXML,"'")) to sXML  // removed this. Bad Idea.
11949>>>        Forward Get LoadXml sXML to bRetVal
11951>>>        If (bRetVal = 0) ;            Function_Return True
11954>>>        Else;            Function_Return False
11956>>>    End_Function
11957>>>    
11957>>>    // Load an XML string from an address. This aguments the C message to ret 1 if Ok and 0 if error.
11957>>>    //
11957>>>    Function LoadXMLFromAddress Pointer pXML Returns Integer
11959>>>        Integer bRetVal
11959>>>        Forward Get LoadXmlFromAddress pXML to bRetVal
11961>>>        If (bRetVal = 0) ;            Function_Return True
11964>>>        Else;            Function_Return False
11966>>>    End_Function
11967>>>    
11967>>>    
11967>>>    // Allow Nodes and Node node lists to get the parent document.
11967>>>    
11967>>>    Function DocumentObject Returns Handle
11969>>>        Function_Return Self
11970>>>    End_Function
11971>>>    
11971>>>    // Access to the root node allows for searches and iterations.
11971>>>    // The root node is a cNode.
11971>>>    
11971>>>    Function DocumentElement Returns Handle
11973>>>        Handle hNewNode       // Object ID of Root Node
11973>>>        Handle infcNode   // XML Element Interface
11973>>>        Get phDocumentElement to infcNode
11974>>>        If infcNode Begin
11976>>>            Get CreateXMLObject U_cXMLDOMElement infcNode to hNewNode
11977>>>            Set phPrivateDocumentElement to hNewNode // we no longer use this at all
11978>>>        End
11978>>>>
11978>>>        Function_Return hNewNode
11979>>>    End_Function
11980>>>    
11980>>>    //  CreateRootNode is used to set up the first element in a document.
11980>>>    //  It should only be used when creating new files.
11980>>>    
11980>>>    Function CreateDocumentElement String sTagName Returns Handle
11982>>>        Handle hNewNode       // Object ID of Root Node
11982>>>        Handle infcNode   // XML Element Interface
11982>>>        // Call XML to create an element in the document.
11982>>>        Get CreateElement sTagName to infcNode
11983>>>        // Tie the element interface to the DataFlex object.
11983>>>        If infcNode ;            Get CreateXMLObject U_cXMLDOMElement infcNode to hNewNode
11986>>>        // Call XML to set the root element of the document.
11986>>>        Set phDocumentElement to infcNode
11987>>>        Set phPrivateDocumentElement to hNewNode
11988>>>        Function_Return hNewNode
11989>>>    End_Function
11990>>>    
11990>>>    Function CreateDocumentElementNS String sNamespace String sTagName Returns Handle
11992>>>        Handle hNewNode       // Object ID of Root Node
11992>>>        Handle infcNode iType  // XML Element Interface
11992>>>        Get CreateElementNodeNS sNameSpace sTagName "" to hNewNode
11993>>>        Get XmlInterface of hNewNode to infcNode
11994>>>        Set phDocumentElement to infcNode
11995>>>        Set phPrivateDocumentElement to hNewNode
11996>>>        Function_Return hNewNode
11997>>>    End_Function
11998>>>    
11998>>>    
11998>>>    
11998>>>    // return the DocType as a document-type object. Returns 0 if no dtd
11998>>>    // Access to information from the doc type object is limited. Use get psXML
11998>>>    Function DocTypeNode Returns Handle
12000>>>        Handle hinfcDocType hoDocType
12000>>>        Get phDocType to hinfcDocType
12001>>>        If hinfcDocType ;            Get CreateXMLObject U_cXMLDOMDocumentType hinfcDocType to hoDocType
12004>>>        Function_Return hoDocType
12005>>>    End_Function
12006>>>    
12006>>>    Function phXMLErrorObject Returns Handle
12008>>>        Handle hoParseErrorObject
12008>>>        Handle hInfcParseError
12008>>>        Get phParseError to hInfcParseError
12009>>>        If hInfcParseError ;            Get CreateXMLObject U_cXMLDOMParseError hinfcParseError to hoParseErrorObject
12012>>>        Function_Return hoParseErrorObject
12013>>>    End_Function
12014>>>    
12014>>>    //  The following procedure is meant to be overridden by one provided by the developer.
12014>>>    
12014>>>    Procedure BasicParseErrorReport
12016>>>        String sProblem
12016>>>        String sLinePosition
12016>>>        String sDescr
12016>>>        String sReason
12016>>>        String sSource
12016>>>        Handle hoParseErrorObject
12016>>>        Get phXMLErrorObject to hoParseErrorObject
12017>>>        If hoParseErrorObject Begin
12019>>>            Move (SFormat(C_$CannotLoad, psDocumentName(Self)) + "."+character(13)+character(10)) to sProblem
12020>>>            Move (SFormat(C_$ParsingError, piLine(hoParseErrorObject), piLinePos(hoParseErrorObject))) to sLinePosition
12021>>>            Move (sLinePosition +character(13)+character(10)) to sLinePosition
12022>>>            
12022>>>            Move (C_$Reason + ":" * (psReason(hoParseErrorObject))  +character(13)+character(10)) to sReason
12023>>>            Move (C_$Source + ":" * (psSrcText(hoParseErrorObject))) to sSource
12024>>>            Move (sProblem + sLinePosition + sReason + sSource) to sDescr
12025>>>            Error DFERR_XML_INTERNAL_ERROR sDescr
12026>>>>
12026>>>            Send Destroy of hoParseErrorObject
12027>>>        End
12027>>>>
12027>>>        Else ;            Error DFERR_XML_INTERNAL_ERROR C_$NotCreatedParseObject
12029>>>    End_Procedure
12030>>>    
12030>>>    // bind an xml interface node to the passed XML object. If the
12030>>>    // object type is of the wrong type, we will destroy it and recreate it
12030>>>    // which is why hoNode is passed byRef.
12030>>>    // to use this you'd have to use the lower level private messages to get the
12030>>>    // xml interface handles and then bind them to an object. Just like in COM you could
12030>>>    // bind these to the same object, which might save some parsing time. This is made private
12030>>>    // because the time savings would probably be small and would not justify the extra
12030>>>    // complexity.
12030>>>    // It is a programming error to pass this a zero handle.
12030>>>    Procedure BindXMLInfc Handle hInfc Handle ByRef hoNode
12032>>>        Integer iType iClassId iType2
12032>>>        Get piNodeType of hoNode to iType2 // type of the DF XML object
12033>>>        
12033>>>        // Get the node type of the infc handle w/o creating a DF object
12033>>>        Move (invokexml(DF_IXMLDOMNODE, GET_piNodeType, hinfc, 0, 0, 0, 0)) to iType
12034>>>        Move (invokexml(DF_IXMLDOMNODE, GET_ChangeNodeType, hinfc, iType, 1, 0, 0)) to hInfc
12035>>>        If (hinfc=0) Begin
12037>>>            // this should not happen and we would need to know about this.
12037>>>            Error DFERR_XML_INTERNAL_ERROR (C_$XmlFailedNoDocObject + String(iType))
12038>>>>
12038>>>            Procedure_Return 0
12039>>>        End
12039>>>>
12039>>>        // if the type is the same we can reuse the current object and binding it to the interface pointer
12039>>>        If (iType=iType2) Begin
12041>>>            // resuse Self and return
12041>>>            Set XMLInterface of hoNode to hInfc
12042>>>        End
12042>>>>
12042>>>        // if diffrent type, destroy the existing object and recreate it
12042>>>        Else Begin
12043>>>            Send Destroy of hoNode
12044>>>            Get NodeClassId iType to iClassId
12045>>>            Get CreateXMLObject iClassId hInfc to hoNode
12046>>>        End
12046>>>>
12046>>>    End_Procedure
12047>>>    
12047>>>    Function ValidateDocument Returns Handle
12049>>>        Handle hParseErrorIntf hoParseError
12049>>>        Forward Get ValidateDocument to hParseErrorIntf
12051>>>        If hParseErrorIntf Begin
12053>>>            Get CreateXMLObject U_cXMLDOMParseError hParseErrorIntf to hoParseError
12054>>>        End
12054>>>>
12054>>>        Function_Return hoParseError
12055>>>    End_Function
12056>>>    
12056>>>    Function AddExternalSchemaDocument String sSchema Handle hoSchema Returns Boolean
12058>>>        Handle hInfc
12058>>>        Boolean bOk
12058>>>        Get XmlInterface of hoSchema to hInfc
12059>>>        Forward Get AddExternalSchemaDocument sSchema hInfc to bOk
12061>>>        Function_Return (not(bOk))
12062>>>    End_Function
12063>>>    
12063>>>    Function AddExternalSchemaFile String sSchema String sFile Returns Boolean
12065>>>        Boolean bOk
12065>>>        Forward Get AddExternalSchemaFile sSchema sFile to bOk
12067>>>        Function_Return (not(bOk))
12068>>>    End_Function
12069>>>    
12069>>>    Procedure Set psSelectionNamespaces String sNamespaces
12071>>>        Set psDomSecondLevelProperty "SelectionNamespaces" to sNamespaces
12072>>>    End_Procedure
12073>>>    
12073>>>    Function psSelectionNamespaces Returns String
12075>>>        String  sNamespaces
12075>>>        Get psDomSecondLevelProperty "SelectionNamespaces" to sNamespaces
12076>>>        Function_Return sNamespaces
12077>>>    End_Function
12078>>>    
12078>>>    Procedure Set pbMultipleErrorMessages Boolean bMultipleErrors
12080>>>        Set pbDomSecondLevelProperty "MultipleErrorMessages" to bMultipleErrors
12081>>>    End_Procedure
12082>>>    
12082>>>    Function pbMultipleErrorMessages Returns Boolean
12084>>>        Boolean bMultipleErrors
12084>>>        Get pbDomSecondLevelProperty "MultipleErrorMessages" to bMultipleErrors
12085>>>        Function_Return bMultipleErrors
12086>>>    End_Function
12087>>>    
12087>>>    Procedure ErrorCreatingXMLObject
12089>>>        Error DFERR_XML_INTERNAL_ERROR "Could not create XML COM object. MSXML6 may not be properly installed and registered."
12090>>>>
12090>>>    End_Procedure
12091>>>    
12091>>>    // returns the last parse error. If 0, you know everything parsed. This can be
12091>>>    // used along wit pbReadyState to load XML documents in async mode.
12091>>>    Function LastParseError Returns Integer
12093>>>        Integer iErr
12093>>>        Handle hoParseErrorReport
12093>>>        Get phXMLErrorObject to hoParseErrorReport
12094>>>        Get piErrorCode of hoParseErrorReport to iErr
12095>>>        Send Destroy of hoParseErrorReport
12096>>>        Function_Return iErr
12097>>>    End_Function
12098>>>    
12098>>>    
12098>>>End_Class
12099>Use cli.pkg
Including file: cli.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cli.pkg)
12099>>>//                                                              
12099>>>//   CLI specific functionality. There are several connectivity kits     
12099>>>//   based on  SQL/92 CLI. Those are:                                    
12099>>>//    - ODBC_DRV  The Data Access CK for ODBC                            
12099>>>//    - DB2_DRV   The Data Access CK for DB2                             
12099>>>//    - MSSQLDRV  The Data Access CK for Microsoft SQL Server            
12099>>>//                                                                       
12099>>>//   This package defines the common functionality for all CLI based     
12099>>>//   drivers.                                                            
12099>>>
12099>>>Define DF_FILE_TABLE_CHARACTER_FORMAT   for 601
12099>>>Define DF_FILE_MAX_ROWS_FETCHED         for 602
12099>>>Define DF_FILE_PRIMARY_INDEX_TRIGGER    for 604      // Replaced by DF_FILE_GENERATE_RECORD_ID_METHOD !
12099>>>Define DF_FILE_TRANSLATE_OEM_TO_ANSI    for 606      // Deprecated !!! Only defined for decent error reporting
12099>>>Define DF_FILE_REFIND_AFTER_SAVE        for 608
12099>>>Define DF_FILE_TABLE_NAME               for 609
12099>>>Define DF_FILE_GET_RID_AFTER_CREATE     for 610
12099>>>Define DF_FILE_SQL_FILTER               for 611
12099>>>Define DF_FILE_USE_DUMMY_ZERO_DATE      for 612
12099>>>Define DF_FILE_GENERATE_RECORD_ID_METHOD for 614
12099>>>Define DF_FILE_DUMMY_UPDATE_COLUMN      for 616
12099>>>Define DF_FILE_FETCH_ALL_COLUMNS        for 620
12099>>>Define DF_FILE_DATABASE_ID              for 622
12099>>>Define DF_FILE_SQL_FILTER_ACTIVE        for 624
12099>>>Define DF_FILE_NUMBER_SQL_RELATIONS     for 626
12099>>>Define DF_FILE_BLOCK_SIZE               for 628
12099>>>Define DF_FILE_JIT_BINDING              for 630
12099>>>Define DF_FILE_FINDCACHE_HITS           for 632
12099>>>Define DF_FILE_FINDCACHE_TIMEOUTS       for 634
12099>>>Define DF_FILE_SQL_FILTER_EQ            for 636
12099>>>Define DF_FILE_RESTRUCTURE_INT_ONLY     for 638
12099>>>Define DF_FILE_ALLOWED_STRUCTURE_CHANGES for 640
12099>>>
12099>>>Define DF_FIELD_STORE_TIME              for 702
12099>>>Define DF_FIELD_TIME                    for 703
12099>>>Define DF_FIELD_IS_NULL                 for 704
12099>>>Define DF_FIELD_NULL_ALLOWED            for 706
12099>>>Define DF_FIELD_DEFAULT_VALUE           for 707
12099>>>Define DF_FIELD_FETCH_STATE             for 708
12099>>>Define DF_FIELD_READ_ONLY               for 710
12099>>>Define DF_FIELD_NATIVE_TYPE_NAME        for 711
12099>>>Define DF_FIELD_NATIVE_TYPE             for 712
12099>>>Define DF_FIELD_NO_OEM_ANSI_TRANSLATE   for 714
12099>>>Define DF_SQL_RELATION_COLUMN           for 716
12099>>>Define DF_SQL_RELATION_RELATED_SCHEMA   for 717
12099>>>Define DF_FIELD_NATIVE_SIZE             for 718
12099>>>Define DF_SQL_RELATION_RELATED_TABLE    for 719
12099>>>Define DF_SQL_RELATION_RELATED_COLUMN   for 721
12099>>>Define DF_FIELD_IS_IDENTITY             for 722
12099>>>Define DF_FIELD_SQL_COLUMN_NAME         for 723
12099>>>
12099>>>Define DF_INDEX_NAME                    for 801
12099>>>Define DF_INDEX_UNIQUE                  for 802
12099>>>Define DF_INDEX_ON_BACKEND              for 804
12099>>>
12099>>>Define DF_INDEX_CLUSTERED               for 806
12099>>>Define DF_INDEX_SQL_PRIMARY_KEY         for 808
12099>>>Define DF_INDEX_SQL_TYPE                for 810
12099>>>Define DF_INDEX_NUMBER                  for 812
12099>>>
12099>>>Define DF_DATABASE_LOCK_STATE                    for 1001
12099>>>Define DF_DATABASE_ID                            for 1002
12099>>>Define DF_DATABASE_MYSQLTABLETYPE                for 1003
12099>>>Define DF_DATABASE_NUMBER_TYPES                  for 1004
12099>>>Define DF_DATABASE_TYPE_NAME                     for 1005
12099>>>Define DF_DATABASE_TYPE_ID                       for 1006
12099>>>Define DF_DATABASE_TYPE_CREATE_PARAMS            for 1007
12099>>>Define DF_DATABASE_TYPE_AUTOINC                  for 1008
12099>>>Define DF_DATABASE_DEFAULT_DEFAULT_ASCII         for 1009
12099>>>Define DF_DATABASE_TYPE_UNSIGNED                 for 1010
12099>>>Define DF_DATABASE_DEFAULT_DEFAULT_NUMERIC       for 1011
12099>>>Define DF_DATABASE_TYPE_MAXSIZE                  for 1012
12099>>>Define DF_DATABASE_DEFAULT_DEFAULT_DATE          for 1013
12099>>>Define DF_DATABASE_DEFAULT_NULLABLE_ASCII        for 1014
12099>>>Define DF_DATABASE_DEFAULT_DEFAULT_TEXT          for 1015
12099>>>Define DF_DATABASE_DEFAULT_NULLABLE_NUMERIC      for 1016
12099>>>Define DF_DATABASE_DEFAULT_DEFAULT_BINARY        for 1017
12099>>>Define DF_DATABASE_DEFAULT_NULLABLE_DATE         for 1018
12099>>>Define DF_DATABASE_DUMMY_ZERO_DATE_VALUE         for 1019
12099>>>Define DF_DATABASE_DEFAULT_NULLABLE_TEXT         for 1020
12099>>>Define DF_DATABASE_DUPREC_STATE                  for 1021
12099>>>Define DF_DATABASE_DEFAULT_NULLABLE_BINARY       for 1022
12099>>>Define DF_DATABASE_MAX_ACTIVE_STATEMENTS         for 1024
12099>>>Define DF_DATABASE_DRIVER_DECIMAL_SEPARATOR      for 1026
12099>>>Define DF_DATABASE_DRIVER_THOUSANDS_SEPARATOR    for 1028
12099>>>
12099>>>Define DF_DATABASE_DRIVER_DATE_FORMAT            for 1030
12099>>>Define DF_DATABASE_DRIVER_DATE_SEPARATOR         for 1032
12099>>>Define DF_DATABASE_IGNORE_UCASE_SUPPORT          for 1034
12099>>>Define DF_DATABASE_INDEX_CREATE                  for 1036
12099>>>Define DF_DATABASE_INDEX_DROP                    for 1038
12099>>>Define DF_DATABASE_INDEX_ASC                     for 1040
12099>>>Define DF_DATABASE_INDEX_DESC                    for 1042
12099>>>Define DF_DATABASE_COLUMN_CREATE_DEFAULTCLAUSE   for 1044
12099>>>Define DF_DATABASE_DUPREC_ERRORNUMBER            for 1046
12099>>>Define DF_DATABASE_USE_IDENTITY_TYPE             for 1048
12099>>>Define DF_DATABASE_NUMBER_NATIVE_LOCKERRORS      for 1050
12099>>>Define DF_DATABASE_NATIVE_LOCKERROR              for 1052
12099>>>Define DF_DATABASE_DEFAULT_MAX_ROWS              for 1054
12099>>>Define DF_DATABASE_IGNORE_WARNINGS               for 1056
12099>>>Define DF_DATABASE_USE_DF_LOCKERROR              for 1058
12099>>>Define DF_DATABASE_FIND_CACHE_TIMEOUT            for 1060
12099>>>Define DF_DATABASE_JIT_TRESHOLD                  for 1062
12099>>>Define DF_DATABASE_TRUNCATE_BINARY_ZEROES        for 1064
12099>>>Define DF_DATABASE_DEFAULT_DEFAULT_DATETIME      for 1065
12099>>>Define DF_DATABASE_DEFAULT_NULLABLE_DATETIME     for 1066
12099>>>Define DF_DATABASE_MAP_DFDATE_TO_ODBCTYPE         for 1068
12099>>>Define DF_DATABASE_MAP_DFDATETIME_TO_ODBCTYPE     for 1070
12099>>>Define DF_DATABASE_MAP_DFASCII_TO_ODBCTYPE        for 1072
12099>>>Define DF_DATABASE_MAP_DFTEXT_TO_ODBCTYPE         for 1074
12099>>>Define DF_DATABASE_MAP_DFBINARY_TO_ODBCTYPE       for 1076
12099>>>Define DF_DATABASE_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA for 1078
12099>>>
12099>>>Define DF_DATABASE_MAP_DFDATE_TO_SQLTYPE         for 1069
12099>>>Define DF_DATABASE_MAP_DFDATETIME_TO_SQLTYPE     for 1071
12099>>>Define DF_DATABASE_MAP_DFASCII_TO_SQLTYPE        for 1073
12099>>>Define DF_DATABASE_MAP_DFTEXT_TO_SQLTYPE         for 1075
12099>>>Define DF_DATABASE_MAP_DFBINARY_TO_SQLTYPE       for 1077
12099>>>Define DF_DATABASE_DEFAULT_DATABASE              for 1079
12099>>>Define DF_DATABASE_TRIM_VARCHAR_VALUES           for 1084
12099>>>Define DF_DATABASE_IDENTIFIER_QUOTE              for 1085
12099>>>Define DF_DATABASE_ODBC_DRIVER_NAME              for 1087
12099>>>
12099>>>Define DF_DRIVER_DEFAULT_DEFAULT_ASCII           for 1101
12099>>>Define DF_DRIVER_DEFAULT_NULLABLE_ASCII          for 1102
12099>>>Define DF_DRIVER_DEFAULT_DEFAULT_NUMERIC         for 1103
12099>>>Define DF_DRIVER_DEFAULT_NULLABLE_NUMERIC        for 1104
12099>>>Define DF_DRIVER_DEFAULT_DEFAULT_DATE            for 1105
12099>>>Define DF_DRIVER_DEFAULT_NULLABLE_DATE           for 1106
12099>>>Define DF_DRIVER_DEFAULT_DEFAULT_TEXT            for 1107
12099>>>Define DF_DRIVER_DEFAULT_NULLABLE_TEXT           for 1108
12099>>>Define DF_DRIVER_DEFAULT_DEFAULT_BINARY          for 1109
12099>>>Define DF_DRIVER_DEFAULT_NULLABLE_BINARY         for 1110
12099>>>Define DF_DRIVER_DUMMY_ZERO_DATE_VALUE           for 1111
12099>>>Define DF_DRIVER_MAX_ACTIVE_STATEMENTS           for 1112
12099>>>Define DF_DRIVER_CACHE_PATH                      for 1113
12099>>>Define DF_DRIVER_DRIVER_DECIMAL_SEPARATOR        for 1114
12099>>>Define DF_DRIVER_DEFAULT_TABLE_CHARACTER_FORMAT  for 1115
12099>>>Define DF_DRIVER_DRIVER_THOUSANDS_SEPARATOR      for 1116
12099>>>Define DF_DRIVER_APPLICATION_CHARACTER_FORMAT    for 1117
12099>>>Define DF_DRIVER_DRIVER_DATE_FORMAT              for 1118
12099>>>Define DF_DRIVER_LAST_ERROR_TEXT                 for 1119
12099>>>Define DF_DRIVER_DRIVER_DATE_SEPARATOR           for 1120
12099>>>Define DF_DRIVER_CONNECTION_ID                   for 1121
12099>>>Define DF_DRIVER_IGNORE_UCASE_SUPPORT            for 1122
12099>>>Define DF_DRIVER_CONNECTION_ID_STRING            for 1123
12099>>>Define DF_DRIVER_IGNORE_WARNINGS                 for 1124
12099>>>Define DF_DRIVER_USE_DF_LOCKERROR                for 1126
12099>>>Define DF_DRIVER_FIND_CACHE_TIMEOUT              for 1128
12099>>>Define DF_DRIVER_JIT_TRESHOLD                    for 1130
12099>>>Define DF_DRIVER_TRUNCATE_BINARY_ZEROES          for 1132
12099>>>Define DF_DRIVER_ERROR_DEBUG_MODE                for 1134
12099>>>Define DF_DRIVER_USE_CACHE                       for 1136
12099>>>Define DF_DRIVER_REPORT_CACHE_ERRORS             for 1138
12099>>>Define DF_DRIVER_USE_CACHE_EXPIRATION            for 1140
12099>>>Define DF_DRIVER_DEFAULT_USE_DUMMY_ZERO_DATE     for 1142
12099>>>Define DF_DRIVER_DEFAULT_RECORD_IDENTITY_HIDING  for 1144
12099>>>Define DF_DRIVER_REPORT_ACTIVE_COLUMN_ERRORS     for 1146
12099>>>Define DF_DRIVER_SILENT_LOGIN                    for 1148
12099>>>Define DF_DRIVER_DEFAULT_MAP_TO_RECNUM           for 1150
12099>>>Define DF_DRIVER_CONNECTION_ID_OPTIONS           for 1152
12099>>>Define DF_DRIVER_NUMBER_CONNECTION_IDS           for 1154
12099>>>Define DF_DRIVER_DEFAULT_DEFAULT_DATETIME        for 1155
12099>>>Define DF_DRIVER_DEFAULT_NULLABLE_DATETIME       for 1156
12099>>>Define DF_DRIVER_MATCH_CLIENT_SERVER_VERSION     for 1158
12099>>>Define DF_DRIVER_SQLSERVER_CLIENT_VERSION        for 1160
12099>>>Define DF_DRIVER_MAP_DFDATE_TO_ODBCTYPE          for 1168
12099>>>Define DF_DRIVER_MAP_DFDATETIME_TO_ODBCTYPE      for 1170
12099>>>Define DF_DRIVER_MAP_DFASCII_TO_ODBCTYPE         for 1172
12099>>>Define DF_DRIVER_MAP_DFTEXT_TO_ODBCTYPE          for 1174
12099>>>Define DF_DRIVER_MAP_DFBINARY_TO_ODBCTYPE        for 1176
12099>>>Define DF_DRIVER_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA for 1178
12099>>>Define DF_DRIVER_LOGIN_ON_OPEN                   for 1180
12099>>>Define DF_DRIVER_MINIMUM_CLIENT_VERSION          for 1182
12099>>>Define DF_DRIVER_TRIM_VARCHAR_VALUES             for 1184
12099>>>Define DF_DRIVER_SQLSERVER_CLIENT_DRIVER_NAME    for 1187 
12099>>>
12099>>>Define DF_DRIVER_MAP_DFDATE_TO_SQLTYPE           for 1169
12099>>>Define DF_DRIVER_MAP_DFDATETIME_TO_SQLTYPE       for 1171
12099>>>Define DF_DRIVER_MAP_DFASCII_TO_SQLTYPE          for 1173
12099>>>Define DF_DRIVER_MAP_DFTEXT_TO_SQLTYPE           for 1175
12099>>>Define DF_DRIVER_MAP_DFBINARY_TO_SQLTYPE         for 1177
12099>>>
12099>>>
12099>>>// Replacement for logical column number that indicates all columns
12099>>>Define DF_ALL_COLUMNS for -1
12099>>>
12099>>>// Possible DF_FILE_GENERATE_RECORD_ID_METHOD values
12099>>>Define RIM_NONE            for 0
12099>>>Define RIM_IDENTITY_COLUMN for 1
12099>>>Define RIM_DISPENSER_TABLE for 2
12099>>>Define RIM_EXTERNAL        for 3
12099>>>
12099>>>// Possible DF_FIELD_READ_ONLY values
12099>>>Define RO_NO            for 0
12099>>>Define RO_IGNORECHANGE  for 1
12099>>>Define RO_ACCEPTCHANGE  for 2
12099>>>Define RO_ERRORONCHANGE for 3
12099>>>
12099>>>
12099>>>// Possible DF_DRIVER_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA values
12099>>>Define MAP_DF_TO_SQL_TYPE_UNKNOWN    for 0
12099>>>Define MAP_DF_TO_SQL_TYPE_SQL2000    for 3
12099>>>Define MAP_DF_TO_SQL_TYPE_SQL2005    for 4
12099>>>Define MAP_DF_TO_SQL_TYPE_SQL2008    for 5
12099>>>Define MAP_DF_TO_SQL_TYPE_SQL2012    for 6
12099>>>Define MAP_DF_TO_SQL_TYPE_DB2_LEGACY  for 7
12099>>>Define MAP_DF_TO_SQL_TYPE_DB2_10      for 8
12099>>>Define MAP_DF_TO_SQL_TYPE_ODBC_SCHEMA for 9
12099>>>Define MAP_DF_TO_SQL_TYPE_UNICODE     for 11
12099>>>
12099>>>
12099>>>// Possible DF_DRIVER_SQLSERVER_CLIENT_VERSION values are defined in Mssqldrv.pkg
12099>>>
12099>>>// Possible SQL Column type values
12099>>>//      SQL Server specific types defined in mssqldrv.pkg
12099>>>//      DB2 specific typesm defined in db2_drv.pkg
12099>>>
12099>>>Define SQL_UNKNOWN_TYPE   for    0
12099>>>Define SQL_CHAR           for    1
12099>>>Define SQL_NUMERIC        for    2
12099>>>Define SQL_DECIMAL        for    3
12099>>>Define SQL_INTEGER        for    4
12099>>>Define SQL_SMALLINT       for    5
12099>>>Define SQL_FLOAT          for    6
12099>>>Define SQL_REAL           for    7
12099>>>Define SQL_DOUBLE         for    8
12099>>>Define SQL_DATETIME       for    9
12099>>>Define SQL_VARCHAR        for   12
12099>>>Define SQL_TYPE_DATE      for   91
12099>>>Define SQL_TYPE_TIME      for   92
12099>>>Define SQL_TYPE_TIMESTAMP for   93
12099>>>
12099>>>Define SQL_DATE           for    9
12099>>>Define SQL_INTERVAL       for   10
12099>>>Define SQL_TIME           for   10
12099>>>Define SQL_TIMESTAMP      for   11
12099>>>Define SQL_LONGVARCHAR    for  (-1)
12099>>>Define SQL_BINARY         for  (-2)
12099>>>Define SQL_VARBINARY      for  (-3)
12099>>>Define SQL_LONGVARBINARY  for  (-4)
12099>>>Define SQL_BIGINT         for  (-5)
12099>>>Define SQL_TINYINT        for  (-6)
12099>>>Define SQL_BIT            for  (-7)
12099>>>Define SQL_WCHAR          for  (-8)
12099>>>Define SQL_WVARCHAR       for  (-9)
12099>>>Define SQL_WLONGVARCHAR   for (-10)
12099>>>Define SQL_GUID           for (-11)
12099>>>
12099>>>// Possible DF_INDEX_SQL_TYPE values
12099>>>Define DF_INDEX_CLIENT      for  1
12099>>>Define DF_INDEX_SERVER      for  2
12099>>>Define DF_INDEX_SERVER_ONLY for  3
12099>>>Define DF_INDEX_TEMPORARY   for  4
12099>>>
12099>>>// Possible DF_FILE_ALLOWED_STRUCTURE_CHANGES values
12099>>>Define ALL_TABLE_CHANGES_ALLOWED            for  0
12099>>>Define ONLY_TABLE_INT_FILE_CHANGES_ALLOWED  for  1
12099>>>Define NO_TABLE_CHANGES_ALLOWED             for  2
12099>>>
12099>>>// Driver level attributes
12099>>>Define DRVR_TOKEN_BASE                       for 1000
12099>>>Define DRVR_ATTRIBUTE_START                  for (DRVR_TOKEN_BASE + 19)
12099>>>Define DRVR_DEFAULT_NULLABLE_ASCII           for (DRVR_ATTRIBUTE_START)
12099>>>Define DRVR_DEFAULT_NULLABLE_NUMERIC         for (DRVR_ATTRIBUTE_START +  1)
12099>>>Define DRVR_DEFAULT_NULLABLE_DATE            for (DRVR_ATTRIBUTE_START +  2)
12099>>>Define DRVR_DEFAULT_NULLABLE_TEXT            for (DRVR_ATTRIBUTE_START +  3)
12099>>>Define DRVR_DEFAULT_NULLABLE_BINARY          for (DRVR_ATTRIBUTE_START +  4)
12099>>>Define DRVR_DEFAULT_DEFAULT_ASCII            for (DRVR_ATTRIBUTE_START +  5)
12099>>>Define DRVR_DEFAULT_DEFAULT_NUMERIC          for (DRVR_ATTRIBUTE_START +  6)
12099>>>Define DRVR_DEFAULT_DEFAULT_DATE             for (DRVR_ATTRIBUTE_START +  7)
12099>>>Define DRVR_DEFAULT_DEFAULT_TEXT             for (DRVR_ATTRIBUTE_START +  8)
12099>>>Define DRVR_DEFAULT_DEFAULT_BINARY           for (DRVR_ATTRIBUTE_START +  9)
12099>>>Define DRVR_MAX_ACTIVE_STATEMENTS            for (DRVR_ATTRIBUTE_START + 10)
12099>>>Define DRVR_ERROR_DEBUG_MODE                 for (DRVR_ATTRIBUTE_START + 11)
12099>>>Define DRVR_DRIVER_DECIMAL_SEPARATOR         for (DRVR_ATTRIBUTE_START + 12)
12099>>>Define DRVR_DRIVER_THOUSANDS_SEPARATOR       for (DRVR_ATTRIBUTE_START + 13)
12099>>>Define DRVR_DRIVER_DATE_FORMAT               for (DRVR_ATTRIBUTE_START + 14)
12099>>>Define DRVR_DRIVER_DATE_SEPARATOR            for (DRVR_ATTRIBUTE_START + 15)
12099>>>Define DRVR_USE_CACHE                        for (DRVR_ATTRIBUTE_START + 16)
12099>>>Define DRVR_REPORT_CACHE_ERRORS              for (DRVR_ATTRIBUTE_START + 17)
12099>>>Define DRVR_CACHE_PATH                       for (DRVR_ATTRIBUTE_START + 18)
12099>>>Define DRVR_USE_CACHE_EXPIRATION             for (DRVR_ATTRIBUTE_START + 19)
12099>>>Define DRVR_DEFAULT_TABLE_CHARACTER_FORMAT   for (DRVR_ATTRIBUTE_START + 20)
12099>>>Define DRVR_APPLICATION_CHARACTER_FORMAT     for (DRVR_ATTRIBUTE_START + 21)
12099>>>Define DRVR_DUMMY_ZERO_DATE_VALUE            for (DRVR_ATTRIBUTE_START + 22)
12099>>>Define DRVR_DEFAULT_USE_DUMMY_ZERO_DATE      for (DRVR_ATTRIBUTE_START + 23)
12099>>>Define DRVR_IGNORE_UCASE_SUPPORT             for (DRVR_ATTRIBUTE_START + 24)
12099>>>Define DRVR_LASTERRORTEXTLENGTH              for (DRVR_ATTRIBUTE_START + 25)
12099>>>Define DRVR_LASTERRORTEXT                    for (DRVR_ATTRIBUTE_START + 26)
12099>>>Define DRVR_DEFAULTRECORDIDHIDING            for (DRVR_ATTRIBUTE_START + 35)
12099>>>Define DRVR_REPORTACTIVECOLUMNERRORS         for (DRVR_ATTRIBUTE_START + 36)
12099>>>
12099>>>
12099>>>// Error Number constants
12099>>>Define CLIERR_GENERAL_ERROR                       for 12289
12099>>>Define CLIERR_CANT_INITIALIZE                     for 12290
12099>>>Define CLIERR_CANT_DEINITIALIZE                   for 12291
12099>>>Define CLIERR_BAD_OR_NO_PRIMARY_INDEX_SPECIFIED   for 12292
12099>>>Define CLIERR_LOGIN_UNSUCCESSFUL                  for 12293
12099>>>Define CLIERR_LOGOUT_UNSUCCESSFUL                 for 12294
12099>>>Define CLIERR_TABLE_NOT_IN_CONNECTION             for 12295
12099>>>Define CLIERR_NULL_VALUE_NOT_ALLOWED              for 12296
12099>>>Define CLIERR_SEGMENT_NUMBER_RANGE                for 12297
12099>>>Define CLIERR_INDEX_NUMBER_RANGE                  for 12298
12099>>>Define CLIERR_LOGIN_ATTRIBUTE_MUST_BE_SET         for 12299
12099>>>Define CLIERR_PHYSICAL_NAME_MUST_BE_SET           for 12300
12099>>>Define CLIERR_INVALID_REGISTRATION_FILE           for 12301
12099>>>Define CLIERR_LICENSE_EXPIRED                     for 12302
12099>>>Define CLIERR_DEADLOCK_OR_TIMEOUT                 for 12303
12099>>>Define CLIERR_SQL_ERROR                           for 12304
12099>>>Define CLIERR_SQLINVALID_CLI_STMT_HANDLE          for 12305
12099>>>Define CLIERR_SQLINVALID_CLI_CONN_HANDLE          for 12306
12099>>>Define CLIERR_SQLINVALID_DRIVER_ID                for 12307
12099>>>Define CLIERR_SQLINVALID_BIND_FILE                for 12308
12099>>>Define CLIERR_SQLINVALID_COLUMN                   for 12309
12099>>>Define CLIERR_SQLINVALID_ATTRIBUTE                for 12310
12099>>>Define CLIERR_SQLINVALID_BUFFER                   for 12311
12099>>>Define CLIERR_INVALID_CONFIGURATION_KEYWORD       for 12312
12099>>>Define CLIERR_NOUNIQUEINDEX                       for 12313
12099>>>Define CLIERR_UCSEGMENT_NOT_SUPPORTED             for 12314
12099>>>Define CLIERR_FIELDREADONLY                       for 12315
12099>>>Define CLIERR_DBPROPERROR                         for 12316
12099>>>Define CLIERR_CANTSETRECNUMINACTIVE               for 12317
12099>>>Define CLIERR_CANTCHANGEINACTIVECOLUMN            for 12318
12099>>>Define CLIERR_FIELDISINACTIVE                     for 12319
12099>>>Define CLIERR_NOT_INSTALLED                       for 12320
12099>>>Define CLIERR_CANT_FIND_TERMLIST                  for 12321
12099>>>Define CLIERR_CANT_READ_TERMLIST                  for 12322
12099>>>Define CLIERR_MAX_USERS_EXCEEDED                  for 12323
12099>>>Define CLIERR_USER_COUNT_FILE_ERROR               for 12324
12099>>>Define CLIERR_CANT_INIT_USER_COUNT                for 12325
12099>>>Define CLIERR_USER_COUNT_FILE_NOT_FOUND           for 12326
12099>>>Define CLIERR_USER_COUNT_FILE_CANT_READ           for 12327
12099>>>Define CLIERR_USER_COUNT_FILE_CANT_DECRYPT        for 12328
12099>>>Define CLIERR_USER_COUNT_FILE_BAD_VERSION         for 12329
12099>>>Define CLIERR_CANTCREATE_RECNUMISZERO             for 12330
12099>>>Define CLIERR_CANTGETCOLUMNINFO                   for 12331
12099>>>Define CLIERR_INVALIDDATABASEHANDLE               for 12332
12099>>>Define CLIERR_TYPENUMBEROUTOFRANGE                for 12333
12099>>>Define CLIERR_LOCKERRORNUMBEROUTOFRANGE           for 12334
12099>>>Define CLIERR_CONNECTIONIDOUTOFRANGE              for 12335
12099>>>Define CLIERR_CONNECTIONIDNOTFOUND                for 12336
12099>>>Define CLIERR_RELATIONOUTOFRANGE                  for 12337
12099>>>Define CLIERR_NOTANEXPRESSEDITION                 for 12338
12099>>>Define CLIERR_INVALID_CONFIGURATION_VALUE         for 12339
12099>>>Define CLIERR_NOCLIENTSERVERVERSIONMATCH          for 12340
12099>>>Define CLIERR_CONNECTIONIDALREADYEXISTS           for 12341
12099>>>Define CLIERR_INVALIDCONNECTSTRINGOPENOPTION      for 12342
12099>>>Define CLIERR_DATABASECONNECTIONLOST              for 12343
12099>>>Define CLIERR_STRUCTURECHANGENOTALLOWED           for 12344
12099>>>Define CLIERR_MINIMUMCLIENTVERSIONNOTFOUND        for 12345
12099>>>
12099>>>
12099>>>// Call driver Function identifiers
12099>>>Define CLI_CONSTRAINT             for 10000
12099>>>Define CLI_SETDRIVERATTRIBUTE     for 10001
12099>>>Define CLI_GETDRIVERATTRIBUTE     for 10002
12099>>>Define CLI_BROWSECONNECT          for 10003
12099>>>Define CLI_DATASOURCES            for 10004
12099>>>Define CLI_CKREVISION             for 10005
12099>>>Define CLI_INITDATASOURCES        for 10006
12099>>>Define CLI_ENUMERATE_TABLES       for 10007
12099>>>Define CLI_TABLENAME              for 10008
12099>>>Define CLI_TABLESCHEMA            for 10009
12099>>>Define CLI_TABLETYPE              for 10010
12099>>>Define CLI_TABLECOMMENT           for 10011
12099>>>Define CLI_ENUMERATE_COLUMNS      for 10012
12099>>>Define CLI_COLUMNNAME             for 10013
12099>>>Define CLI_DUMPSTATUS             for 10014
12099>>>Define CLI_READCONFIGURATION      for 10015
12099>>>Define CLI_GETDBATTRIBUTE0        for 10016
12099>>>Define CLI_GETDBATTRIBUTE         for 10017
12099>>>Define CLI_GETREGNAME             for 10018
12099>>>Define CLI_GETSERIALNUM           for 10019
12099>>>Define CLI_GETMAXUSERS            for 10020
12099>>>Define CLI_BCP                    for 10021
12099>>>Define CLI_DROPINDICES            for 10022
12099>>>Define CLI_CREATEINDICES          for 10023
12099>>>Define CLI_REDIRECTCONNECTION     for 10024
12099>>>Define CLI_CREATECONNECTIONID     for 10025
12099>>>Define CLI_DELETECONNECTIONID     for 10026
12099>>>
12099>>>
12099>>>// Init data source types
12099>>>Define SQL_FETCH_ALL     for  2
12099>>>Define SQL_FETCH_USER    for 31
12099>>>Define SQL_FETCH_SYSTEM  for 32
12099>>>
12099>>>
12099>>>// Dummy strings used in the commands
12099>>>String  CLI$StrDummy 255
12099>>>Integer CLI$IntDummy
12099>>>
12099>>>
12099>>>//   Setup a constraint for a file.                                    
12099>>>
12099>>>
12099>>>
12099>>>// Set or get an attribute at driver level. These attributes, when set,
12099>>>// will be set for the remainder of the session or until set again. To 
12099>>>// permanently set driver level attributes change the driver           
12099>>>// configuration file.                                                 
12099>>>
12099>>>
12099>>>
12099>>>
12099>>>
12099>>>
12099>>>
12099>>>// An instance of this class can be used as a broker object to
12099>>>// call several CLI releated methods.                         
12099>>>
12099>>>//Class cCLIHandler is a cObject
12099>>>Class cCLIHandler is an Array
12100>>>    
12100>>>    Procedure Construct_Object 
12102>>>        Forward Send Construct_object 
12104>>>        
12104>>>        Property String  psDriverID        ""
12105>>>    End_Procedure
12106>>>    
12106>>>    
12106>>>    
12106>>>    // The revsion of a CLI Connectivity Kit
12106>>>    Function CKRevision Returns String
12108>>>        String  sDriverID
12108>>>        String  sRevision
12108>>>        String  sVoid
12108>>>        Integer iRetval
12108>>>        
12108>>>        Get psDriverID to sDriverID
12109>>>        If (sDRiverID <> "") Begin
12111>>>            Move (Repeat(" ", 255)) to sRevision
12112>>>            Call_Driver 0 sDRiverID Function CLI_CKREVISION Callback 0 Passing sRevision sVoid 0 Result iRetval
12117>>>        End
12117>>>>
12117>>>        
12117>>>        Function_Return sRevision
12118>>>    End_Function
12119>>>    
12119>>>    
12119>>>    
12119>>>    // Extarct the Nth part of a a.b.c.d revsion string.
12119>>>    // Returns : The part version number or -1 if there is no such part number.
12119>>>    //
12119>>>    Function ExtractPartFromRevision Integer iPartNum String sRevision Returns Integer
12121>>>        Integer iPartRev
12121>>>        Integer iCurrentPart
12121>>>        Integer iSeparatorPos
12121>>>        
12121>>>        If (iPartNum > 4) ;            Function_Return -1
12124>>>        
12124>>>        Move 0 to iCurrentPart
12125>>>        Repeat
12125>>>>
12125>>>            Move (Pos(".", sRevision)) to iSeparatorPos
12126>>>            If (iSeparatorPos > 0) Begin
12128>>>                Move (Left(sRevision, iSeparatorPos - 1)) to iPartRev
12129>>>                Move (Right(sRevision, Length(sRevision) - iSeparatorPos)) to sRevision
12130>>>                Increment iCurrentPart
12131>>>            End
12131>>>>
12131>>>            Else If (sRevision <> "") Begin
12134>>>                Move sRevision to iPartRev
12135>>>                Move "" to sRevision
12136>>>                Increment iCurrentPart
12137>>>            End
12137>>>>
12137>>>            Else ;                Move -1 to iPartRev
12139>>>        Until (iCurrentPart >= iPartNum or iPartRev = -1)
12141>>>        
12141>>>        Function_Return iPartRev
12142>>>    End_Function
12143>>>    
12143>>>    
12143>>>    
12143>>>    // Returns the major revision of the CK
12143>>>    //
12143>>>    Function CKMajorRevision Returns Integer
12145>>>        Function_Return (ExtractPartFromRevision (Self, 1, CKRevision(Self)))
12146>>>    End_Function
12147>>>    
12147>>>    
12147>>>    
12147>>>    // Returns the minor revision of the CK
12147>>>    //
12147>>>    Function CKMinorRevision Returns Integer
12149>>>        Function_Return (ExtractPartFromRevision (Self, 2, CKRevision(Self)))
12150>>>    End_Function
12151>>>    
12151>>>    
12151>>>    
12151>>>    // Returns the release revision of the CK
12151>>>    //
12151>>>    Function CKReleaseRevision Returns Integer
12153>>>        Function_Return (ExtractPartFromRevision (Self, 3, CKRevision(Self)))
12154>>>    End_Function
12155>>>    
12155>>>    
12155>>>    
12155>>>    // Returns the major revision of the CK
12155>>>    //
12155>>>    Function CKBuildRevision Returns Integer
12157>>>        Function_Return (ExtractPartFromRevision (Self, 4, CKRevision(Self)))
12158>>>    End_Function
12159>>>    
12159>>>    
12159>>>    
12159>>>    // Determines if the CK conforms to a passed minimal revsion.
12159>>>    //
12159>>>    Function IsMinimalRevision Integer iMajor Integer iMinor Integer iRelease Integer iBuild Returns Integer
12161>>>        If (iMajor < CKMajorRevision(Self)) ;            Function_Return (True)
12164>>>        Else If (iMajor = CKMajorRevision(Self)) Begin
12167>>>            If (iMinor < CKMinorRevision(Self)) ;                Function_Return (True)
12170>>>            Else If (iMinor = CKMinorRevision(Self)) Begin
12173>>>                If (iRelease < CKReleaseRevision(Self)) ;                    Function_Return (True)
12176>>>                Else If (iRelease = CKReleaseRevision(Self) and iBuild <= CKBuildRevision(Self)) ;                    Function_Return (True)
12180>>>            End
12180>>>>
12180>>>        End
12180>>>>
12180>>>        
12180>>>        Function_Return (False)
12181>>>    End_Function
12182>>>    
12182>>>    
12182>>>    
12182>>>    // Returns the Connectiivty Kit registration name.
12182>>>    //
12182>>>    Function RegistrationName Returns String
12184>>>        String  sRegistration
12184>>>        String  sDRiverId
12184>>>        String  sVoid
12184>>>        Integer iRetval
12184>>>        
12184>>>        Get psDriverID to sDriverID
12185>>>        If (sDRiverID <> "") Begin
12187>>>            Move (Repeat(" ", 255)) to sRegistration
12188>>>            Call_Driver 0 sDRiverID Function CLI_GETREGNAME Callback 0 Passing sRegistration sVoid 0 Result iRetval
12193>>>        End
12193>>>>
12193>>>        
12193>>>        Function_Return sRegistration
12194>>>    End_Function
12195>>>    
12195>>>    // Returns the Connectiivty Kit serial number.
12195>>>    //
12195>>>    Function SerialNumber Returns Integer
12197>>>        String  sDRiverId
12197>>>        String  sVoid
12197>>>        Integer iRetval
12197>>>        
12197>>>        Get psDriverID to sDriverID
12198>>>        If (sDRiverID <> "") Begin
12200>>>            Call_Driver 0 sDRiverID Function CLI_GETSERIALNUM Callback 0 Passing sVoid sVoid 0 Result iRetval
12205>>>        End
12205>>>>
12205>>>        
12205>>>        Function_Return iRetval
12206>>>    End_Function
12207>>>    
12207>>>    
12207>>>    // Returns the Connectiivty Kit maximum number of users.
12207>>>    //
12207>>>    Function MaxUsers Returns Integer
12209>>>        String  sDRiverId
12209>>>        String  sVoid
12209>>>        Integer iRetval
12209>>>        
12209>>>        Get psDriverID to sDriverID
12210>>>        If (sDRiverID <> "") Begin
12212>>>            Call_Driver 0 sDRiverID Function CLI_GETMAXUSERS Callback 0 Passing sVoid sVoid 0 Result iRetval
12217>>>        End
12217>>>>
12217>>>        
12217>>>        Function_Return iRetval
12218>>>    End_Function
12219>>>    
12219>>>    
12219>>>    
12219>>>    // Dump the current status of the drver in the passed disk file.
12219>>>    //
12219>>>    Procedure DumpStatus String sFileName
12221>>>        String  sVoid
12221>>>        String  sDriverID
12221>>>        Integer iVoid
12221>>>        
12221>>>        Get psDriverID to sDriverID
12222>>>        If (sDriverID <> "") ;            Call_Driver 0 sDriverID Function CLI_DUMPSTATUS Callback 0 Passing sFileName sVoid iVoid Result iVoid
12229>>>    End_Procedure
12230>>>    
12230>>>    
12230>>>    
12230>>>    // Reset all driver level configurable attributes to the
12230>>>    // default value and then reread the configuration.
12230>>>    //
12230>>>    Procedure ReadConfiguration
12232>>>        String  sVoid
12232>>>        String  sDriverID
12232>>>        Integer iVoid
12232>>>        
12232>>>        Get psDriverID to sDriverID
12233>>>        If (sDriverID <> "") ;            Call_Driver 0 sDriverID Function CLI_READCONFIGURATION Callback 0 Passing sVoid sVoid iVoid Result iVoid
12240>>>    End_Procedure
12241>>>    
12241>>>    
12241>>>    
12241>>>    // Convert a text to the corresponding
12241>>>    // Generate_Record_ID_Method attribute value
12241>>>    //
12241>>>    Function TextToRIMValue String sText Returns Integer
12243>>>        If (sText = "None") ;            Function_Return RIM_NONE
12246>>>        Else If (sText = "Identity Column") ;            Function_Return RIM_IDENTITY_COLUMN
12250>>>        Else If (sText = "Dispenser Table") ;            Function_Return RIM_DISPENSER_TABLE
12254>>>        Else If (sText = "External") ;            Function_Return RIM_EXTERNAL
12258>>>    End_Function
12259>>>    
12259>>>    
12259>>>    
12259>>>    // Convert a Generate_Record_ID_Method attribute value to the
12259>>>    // corresponding text.
12259>>>    //
12259>>>    Function RIMValueToText Integer iAttrValue Returns String
12261>>>        If (iAttrValue = RIM_NONE) ;            Function_Return "None"
12264>>>        Else If (iAttrValue = RIM_IDENTITY_COLUMN) ;            Function_Return "Identity Column"
12268>>>        Else If (iAttrValue = RIM_DISPENSER_TABLE) ;            Function_Return "Dispenser Table"
12272>>>        Else If (iAttrValue = RIM_EXTERNAL) ;            Function_Return "External"
12276>>>    End_Function
12277>>>    
12277>>>    
12277>>>    
12277>>>    // Convert a text to the corresponding
12277>>>    // Generate_Record_ID_Method attribute value
12277>>>    //
12277>>>    Function TextToROValue String sText Returns Integer
12279>>>        If (sText = "No") ;            Function_Return RO_NO
12282>>>        Else If (sText = "Ignore Change") ;            Function_Return RO_IGNORECHANGE
12286>>>        Else If (sText = "Accept Change") ;            Function_Return RO_ACCEPTCHANGE
12290>>>        Else If (sText = "Error On Change") ;            Function_Return RO_ERRORONCHANGE
12294>>>    End_Function
12295>>>    
12295>>>    
12295>>>    
12295>>>    // Convert a Generate_Record_ID_Method attribute value to the
12295>>>    // corresponding text.
12295>>>    //
12295>>>    Function ROValueToText Integer iAttrValue Returns String
12297>>>        If (iAttrValue = RO_NO) ;            Function_Return "No"
12300>>>        Else If (iAttrValue = RO_IGNORECHANGE) ;            Function_Return "Ignore Change"
12304>>>        Else If (iAttrValue = RO_ACCEPTCHANGE) ;            Function_Return "Accept Change"
12308>>>        Else If (iAttrValue = RO_ERRORONCHANGE) ;            Function_Return "Error On Change"
12312>>>    End_Function
12313>>>    
12313>>>    
12313>>>    
12313>>>    // Return the text f the last error geneated by the driver.
12313>>>    //
12313>>>    Function LastDriverError Returns String
12315>>>        String  sDriverID
12315>>>        String  sLastError
12315>>>        String  sLastErrorLength
12315>>>        Integer iLastErrorLength
12315>>>        Integer iVoid
12315>>>        
12315>>>        // Initialize
12315>>>        Move "" to sLastError
12316>>>        
12316>>>        Get psDriverID to sDriverID
12317>>>        If (sDriverID <> "") Begin
12319>>>            // Get the text of the last error
12319>>>            Move (Repeat(Character(" "), 14)) to sLastErrorlength
12320>>>            Call_Driver 0 sDriverID Function CLI_GETDRIVERATTRIBUTE Callback 0 Passing sLastErrorLength iVoid DRVR_LASTERRORTEXTLENGTH Result iVoid
12325>>>            Move (Left(sLastErrorLength, Pos(Character(0), sLastErrorLength) - 1)) to iLastErrorLength
12326>>>            
12326>>>            If (iLastErrorLength > 0) Begin
12328>>>                Move (Repeat(Character(" "), iLastErrorLength + 1)) to sLastError
12329>>>                Call_Driver 0 sDriverID Function CLI_GETDRIVERATTRIBUTE Callback 0 Passing sLastError iVoid DRVR_LASTERRORTEXT Result iVoid
12334>>>                Move (Left(sLastError, Pos(Character(0), sLastError) - 1)) to sLastError
12335>>>            End
12335>>>>
12335>>>        End
12335>>>>
12335>>>        
12335>>>        Function_Return sLastError
12336>>>    End_Function
12337>>>    
12337>>>    
12337>>>    
12337>>>    // Enumerate the tables in a database
12337>>>    //
12337>>>    Function EnumerateTables String sLogin Returns Integer
12339>>>        String  sDriver
12339>>>        String  sVoid
12339>>>        Integer iNumTables
12339>>>        Integer iVoid
12339>>>        
12339>>>        Get psDriverID to sDriver
12340>>>        If (sDriver <> "") ;            Call_Driver 0 sDriver Function CLI_ENUMERATE_TABLES Callback 0 Passing sLogin sVoid iVoid Result iNumTables
12347>>>        
12347>>>        Function_Return iNumTables
12348>>>    End_Function
12349>>>    
12349>>>    
12349>>>    
12349>>>    // Returns the name of the table enumerated at the given position
12349>>>    //
12349>>>    Function TableName Integer iIndex Returns String
12351>>>        String  sDriver
12351>>>        String  sTableName
12351>>>        String  sVoid
12351>>>        Integer iVoid
12351>>>        
12351>>>        Get psDriverID to sDriver
12352>>>        If (sDriver <> "") Begin
12354>>>            Move (Repeat(" ", 255)) to sTableName
12355>>>            Call_Driver 0 sDriver Function CLI_TABLENAME Callback 0 Passing sTableName sVoid iIndex Result iVoid
12360>>>        End
12360>>>>
12360>>>        
12360>>>        Function_Return sTableName
12361>>>    End_Function
12362>>>    
12362>>>    
12362>>>    
12362>>>    // Returns the name of the schema of the table enumerated at the given position
12362>>>    //
12362>>>    Function SchemaName Integer iIndex Returns String
12364>>>        String  sDriver
12364>>>        String  sSchemaName
12364>>>        String  sVoid
12364>>>        Integer iVoid
12364>>>        
12364>>>        Get psDriverID to sDriver
12365>>>        If (sDriver <> "") Begin
12367>>>            Move (Repeat(" ", 255)) to sSchemaName
12368>>>            Call_Driver 0 sDriver Function CLI_TABLESCHEMA Callback 0 Passing sSchemaName sVoid iIndex Result iVoid
12373>>>        End
12373>>>>
12373>>>        
12373>>>        Function_Return sSchemaName
12374>>>    End_Function
12375>>>    
12375>>>    // Returns the type of the table enumerated at the given position.
12375>>>    // Types can be "TABLE", "VIEW", "SYSTEM TABLE", "GLOBAL TEMPORARY",
12375>>>    // "LOCAL TEMPORARY", "ALIAS", "SYNONYM"
12375>>>    Function TableType Integer iIndex Returns String
12377>>>        String  sDriver
12377>>>        String  sTableType
12377>>>        String  sVoid
12377>>>        Integer iVoid
12377>>>        
12377>>>        Get psDriverID to sDriver
12378>>>        If (sDriver <> "") Begin
12380>>>            Move (Repeat(" ", 25)) to sTableType
12381>>>            Call_Driver 0 sDriver Function CLI_TABLETYPE Callback 0 Passing sTableType sVoid iIndex Result iVoid
12386>>>        End
12386>>>>
12386>>>        
12386>>>        Function_Return sTableType
12387>>>    End_Function
12388>>>    
12388>>>    
12388>>>    // Returns the comment of the table enumerated at the given position
12388>>>    //
12388>>>    Function TableComment Integer iIndex Returns String
12390>>>        String  sDriver
12390>>>        String  sTableComment
12390>>>        String  sVoid
12390>>>        Integer iVoid
12390>>>        
12390>>>        Get psDriverID to sDriver
12391>>>        If (sDriver <> "") Begin
12393>>>            Move (Repeat(" ", 1024)) to sTableComment
12394>>>            Call_Driver 0 sDriver Function CLI_TABLECOMMENT Callback 0 Passing sTableComment sVoid iIndex Result iVoid
12399>>>        End
12399>>>>
12399>>>        
12399>>>        Function_Return sTableComment
12400>>>    End_Function
12401>>>    
12401>>>    // Enumerate the columns in a table
12401>>>    //
12401>>>    Function EnumerateColumns String sLogin String sTableName Returns Integer
12403>>>        String  sDriver
12403>>>        Integer iNumColumns
12403>>>        Integer iVoid
12403>>>        
12403>>>        Get psDriverID to sDriver
12404>>>        If (sDriver <> "") ;            Call_Driver 0 sDriver Function CLI_ENUMERATE_COLUMNS Callback 0 Passing sLogin sTablename iVoid Result iNumColumns
12411>>>        
12411>>>        Function_Return iNumColumns
12412>>>    End_Function
12413>>>    
12413>>>    
12413>>>    
12413>>>    // Returns the name of the column enumerated at the given position
12413>>>    //
12413>>>    Function ColumnName Integer iIndex Returns String
12415>>>        String  sDriver
12415>>>        String  sColumnName
12415>>>        String  sVoid
12415>>>        Integer iVoid
12415>>>        
12415>>>        Get psDriverID to sDriver
12416>>>        If (sDriver <> "") Begin
12418>>>            Move (Repeat(" ", 255)) to sColumnName
12419>>>            Call_Driver 0 sDriver Function CLI_COLUMNNAME Callback 0 Passing sColumnName sVoid iIndex Result iVoid
12424>>>        End
12424>>>>
12424>>>        
12424>>>        Function_Return sColumnName
12425>>>    End_Function
12426>>>    
12426>>>    // Convert a DataFlex date to a SQL date using the dummy zero date value.
12426>>>    //
12426>>>    Function CLIDFDateToSQLDate String sDriver Date dDFDate Returns String
12428>>>        
12428>>>        Integer iDriverIndex
12428>>>        
12428>>>        String sSQLDate
12428>>>        Integer iOrgDateFmt
12428>>>        Integer iOrgDateSep
12428>>>        
12428>>>        // Change date format to military, SQL dates are military dates
12428>>>        Get_Attribute DF_DATE_FORMAT to iOrgDateFmt
12431>>>        Get_Attribute DF_DATE_SEPARATOR to iOrgDateSep
12434>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_MILITARY
12437>>>        Set_Attribute DF_DATE_SEPARATOR to (Ascii('-'))
12440>>>        
12440>>>        If (Integer(dDFDate = 0)) Begin
12442>>>            // Return the dummy zero date
12442>>>            Get DriverIndex sDriver to iDriverIndex
12443>>>            If (iDriverIndex <> 0) Begin
12445>>>                Get_Attribute DF_DRIVER_DUMMY_ZERO_DATE_VALUE of iDriverIndex to sSQLDate
12448>>>            End
12448>>>>
12448>>>            Else Begin
12449>>>                Move '0001-01-01' to sSQLDate
12450>>>            End
12450>>>>
12450>>>        End
12450>>>>
12450>>>        Else Begin
12451>>>            Move dDFDate to sSQLDate
12452>>>        End
12452>>>>
12452>>>        
12452>>>        // Change date format back to original
12452>>>        Set_Attribute DF_DATE_FORMAT to iOrgDateFmt
12455>>>        Set_Attribute DF_DATE_SEPARATOR to iOrgDateSep
12458>>>        
12458>>>        Function_Return sSQLDate
12459>>>    End_Function
12460>>>    
12460>>>    
12460>>>    
12460>>>    // Convert a SQL date to a DataFlex date using the dummy zero date value.
12460>>>    Function CLISQLDateToDFDate String sDriver String sSQLDate Returns Date
12462>>>        
12462>>>        Integer iDriverIndex
12462>>>        
12462>>>        Date dDFDate
12462>>>        String sDummyDateValue
12462>>>        Integer iOrgDateFmt
12462>>>        Integer iOrgDateSep
12462>>>        
12462>>>        // Change date format to military, SQL dates are military dates
12462>>>        Get_Attribute DF_DATE_FORMAT to iOrgDateFmt
12465>>>        Get_Attribute DF_DATE_SEPARATOR to iOrgDateSep
12468>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_MILITARY
12471>>>        Set_Attribute DF_DATE_SEPARATOR to (Ascii('-'))
12474>>>        
12474>>>        // We only need to convert if the date is the dummy zero date value
12474>>>        Get DriverIndex sDriver to iDriverIndex
12475>>>        If (iDriverIndex <> 0) Begin
12477>>>            Get_Attribute DF_DRIVER_DUMMY_ZERO_DATE_VALUE of iDriverIndex to sDummyDateValue
12480>>>        End
12480>>>>
12480>>>        Else Begin
12481>>>            Move '0001-01-01' to sDummyDateValue
12482>>>        End
12482>>>>
12482>>>        If (sDummyDateValue = sSQLDate) ;            Move 0 to dDFDate
12485>>>        Else ;            Move sSQLDate to dDFDate
12487>>>        
12487>>>        // Change date format back to original
12487>>>        Set_Attribute DF_DATE_FORMAT to iOrgDateFmt
12490>>>        Set_Attribute DF_DATE_SEPARATOR to iOrgDateSep
12493>>>        
12493>>>        Function_Return dDFDate
12494>>>    End_Function
12495>>>    
12495>>>    Function DriverIndex String sDriver Returns Integer
12497>>>        
12497>>>        String  sCurrentDriver
12497>>>        Integer iNumberOfDrivers iDriver iCount
12497>>>        
12497>>>        Move 0 to iDriver
12498>>>        
12498>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
12501>>>        For iCount from 1 to iNumberOfDrivers
12507>>>>
12507>>>            
12507>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
12510>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriver) ) Begin
12512>>>                Move iCount to iDriver
12513>>>            End
12513>>>>
12513>>>        Loop
12514>>>>
12514>>>        
12514>>>        Function_Return iDriver
12515>>>        
12515>>>    End_Function
12516>>>    
12516>>>    
12516>>>    // Redirect an exisitng connection. The existing connection
12516>>>    // will point to another database but all tables will stay
12516>>>    // open!
12516>>>    Function RedirectConnection String sOldConnection String sNewConnection Returns Integer
12518>>>        String  sDriver
12518>>>        String  sVoid
12518>>>        Integer iResult
12518>>>        Integer iVoid
12518>>>        
12518>>>        Get psDriverID to sDriver
12519>>>        If (sDriver <> "") Begin
12521>>>            Call_Driver 0 sDriver Function CLI_REDIRECTCONNECTION Callback 0 Passing sOldConnection sNewConnection iVoid Result iResult
12526>>>        End
12526>>>>
12526>>>        Function_Return iResult
12527>>>    End_Function
12528>>>    
12528>>>    // Redirect a connection of a connection ID
12528>>>    // sConnectionId must contain a valid ConnectionId ("DFCONNID=MyID")
12528>>>    // sConnectString must contain a valid connectstring ("SERVER=MyServer;DATABASE=MyDatabase;UID=MyName;PWD=MyPassword")
12528>>>    //
12528>>>    // RedirectIDConnectString will redirect from the old connection (Server/Database the connectionId currently points to)
12528>>>    // to the new connection (Server/Database specified in sConnectString)
12528>>>    // All opened tables will be moved from old connection to new connection. (Tables must have identical structure in both connections)
12528>>>    //
12528>>>    // If bKeepLoggedIn = false, the new connection will be logged in, the old connection will be logged out
12528>>>    // If bKeepLoggedIn = true, connections will remain open and re-used on next redirectIdConnection
12528>>>    //
12528>>>    // Returns:
12528>>>    //     0 when the redirection was successful.
12528>>>    //     1 if the connection ID does not exist or can not be found.
12528>>>    //     2 login into the new connection failed.
12528>>>    //
12528>>>    Function RedirectIdConnectString String sConnectionId String sConnectString Boolean bKeepLoggedIn Returns Integer
12530>>>        String  sDriver
12530>>>        String  sVoid
12530>>>        Integer iResult
12530>>>        
12530>>>        Integer iOption
12530>>>        
12530>>>        // iOption
12530>>>        // 0 = RedirectConnection
12530>>>        // 1 = RedirectIdConnectString
12530>>>        // 2 = RedirectIdConnectStringKeepLoggedIn
12530>>>        If (bKeepLoggedIn) Begin
12532>>>            Move 2 to iOption
12533>>>        End
12533>>>>
12533>>>        Else Begin
12534>>>            Move 1 to iOption
12535>>>        End
12535>>>>
12535>>>        
12535>>>        Get psDriverID to sDriver
12536>>>        If (sDriver <> "") Begin
12538>>>            Call_Driver 0 sDriver Function CLI_REDIRECTCONNECTION Callback 0 Passing sConnectionId sConnectString iOption Result iResult
12543>>>        End
12543>>>>
12543>>>        Function_Return iResult
12544>>>    End_Function
12545>>>    
12545>>>    
12545>>>    // Create a DataFlex side connection id that can be used later on.
12545>>>    //
12545>>>    Function CreateConnectionID String sID String sConnStr Integer iOpt Returns Integer
12547>>>        String  sDriver
12547>>>        Integer iResult
12547>>>        Integer iOptions
12547>>>        
12547>>>        Get psDriverID to sDriver
12548>>>        If (Num_Arguments = 2) ;            Move 0 to iOptions
12551>>>        Else ;            Move iOpt to iOptions
12553>>>        If (sDriver <> "") Begin
12555>>>            Call_Driver 0 sDriver Function CLI_CREATECONNECTIONID Callback 0 Passing sID sConnStr iOptions Result iResult
12560>>>        End
12560>>>>
12560>>>        Function_Return iResult
12561>>>    End_Function
12562>>>    
12562>>>    
12562>>>    
12562>>>    // Delete a DataFlex side connection id.
12562>>>    //
12562>>>    Function DeleteConnectionID String sID Integer iIndex Returns Integer
12564>>>        String  sDriver
12564>>>        Integer iResult
12564>>>        String sVoid
12564>>>        
12564>>>        Get psDriverID to sDriver
12565>>>        If (sDriver <> "") Begin
12567>>>            Call_Driver 0 sDriver Function CLI_DELETECONNECTIONID Callback 0 Passing sID sVoid iIndex Result iResult
12572>>>        End
12572>>>>
12572>>>        Function_Return iResult
12573>>>    End_Function
12574>>>    
12574>>>End_Class
12575>Use vWin32fh.pkg
Including file: vwin32fh.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\vwin32fh20\vwin32fh.pkg)
12575>>>// This code is part of VDF GUIdance
12575>>>// Visit us @ http://www.vdf-guidance.com
12575>>>// e-Mail us @ info@vdf-guidance.com
12575>>>// VDF GUIdance is a mutual project of
12575>>>// Frank Vandervelpen - Vandervelpen Systems and
12575>>>// Wil van Antwerpen  - Antwise Solutions
12575>>>// All software source code should be used <<AS IS>> without any warranty.
12575>>>//
12575>>>//
12575>>>// *** Windows 32bit file handling wrapper class ***
12575>>>//
12575>>>
12575>>>
12575>>>Use File_Dlg.pkg      // Contains OpenDialog class definition
12575>>>Use cvFileDialogs.pkg
Including file: cvFileDialogs.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\vwin32fh20\cvFileDialogs.pkg)
12575>>>>>//***************************************************************************
12575>>>>>//*
12575>>>>>//* Class:        cvSaveAsDialog
12575>>>>>//* Package Name: cvFileDialogs.pkg
12575>>>>>//*
12575>>>>>//***************************************************************************
12575>>>>>
12575>>>>>Use File_dlg.pkg
12575>>>>>
12575>>>>>// *WvA: 13-01-1999 Created
12575>>>>>// The Class cSelectFile_Dialog is created to support the function Select_File
12575>>>>>// This function opens the Windows standard file open dialog and returns the selected
12575>>>>>// file_name.
12575>>>>>Class cvSelectFile_Dialog is an OpenDialog
12576>>>>>
12576>>>>>    Procedure Construct_Object Integer iImage_Id
12578>>>>>        Forward Send Construct_Object iImage_Id
12580>>>>>        Set HideReadOnly_State to True
12581>>>>>    End_Procedure
12582>>>>>
12582>>>>>    Function SelectedFileName Returns String
12584>>>>>        String sFileName
12584>>>>>        Move "" to sFileName
12585>>>>>        If (Show_Dialog(Self)) Begin
12587>>>>>            Move (RTrim(File_Name(Self))) to sFileName
12588>>>>>        End
12588>>>>>>
12588>>>>>        Function_Return sFileName
12589>>>>>    End_Function
12590>>>>>End_Class
12591>>>>>
12591>>>>>// *WvA: 13-01-1999 Created
12591>>>>>// This function opens the Windows standard file open dialog and returns the selected
12591>>>>>// file_name. Returns '' if the user didn't make a selection.
12591>>>>>// **WvA: 17-10-2003 Cleaned up and added code to destroy the dynamically created
12591>>>>>//                   file-open dialog
12591>>>>>Function vSelect_File Global String sSupportedFileTypes String sCaptionText String sInitialFolder Returns String
12593>>>>>    String sSelectedFile
12593>>>>>    Integer hoOpenFileDialog
12593>>>>>
12593>>>>>    Object oOpenFileDialog is a cvSelectFile_Dialog
12595>>>>>
12595>>>>>        Set Dialog_Caption    to sCaptionText
12596>>>>>        Set Filter_String     to sSupportedFileTypes
12597>>>>>        Set Initial_Folder    to sInitialFolder
12598>>>>>
12598>>>>>        Move Self       to hoOpenFileDialog
12599>>>>>    End_Object
12600>>>>>
12600>>>>>    Get SelectedFileName of hoOpenFileDialog to sSelectedFile
12601>>>>>    Send Destroy_Object to hoOpenFileDialog
12602>>>>>    Function_Return sSelectedFile
12603>>>>>End_Function
12604>>>>>
12604>>>>>Class cvSaveAsDialog is a SaveAsDialog
12605>>>>>
12605>>>>>    Procedure Construct_Object
12607>>>>>        Forward Send Construct_Object
12609>>>>>        Set HideReadOnly_State to True
12610>>>>>    End_Procedure
12611>>>>>
12611>>>>>    Function SelectedFileName Returns String
12613>>>>>        String sFileName
12613>>>>>        Move "" to sFileName
12614>>>>>        If (Show_Dialog(Self)) Begin
12616>>>>>            Move (RTrim(File_Name(Self))) to sFileName
12617>>>>>        End
12617>>>>>>
12617>>>>>        Function_Return sFileName
12618>>>>>    End_Function
12619>>>>>
12619>>>>>End_Class
12620>>>>>
12620>>>>>// Added optional default filename as suggested by Nils
12620>>>>>Function vSelectSaveFile Global String sSupportedFileTypes String sCaptionText String sInitialFolder String sDefaultFileName Returns String
12622>>>>>    String sSelectedFile
12622>>>>>    Integer hoDialog
12622>>>>>
12622>>>>>    Move "" to sSelectedFile
12623>>>>>    Get Create (RefClass(cvSaveAsDialog)) to hoDialog
12624>>>>>    If (hoDialog) Begin
12626>>>>>    //Set NoChangeDir_State Of hoDialog To True
12626>>>>>        Set Dialog_Caption    of hoDialog to sCaptionText
12627>>>>>        Set Filter_String     of hoDialog to sSupportedFileTypes
12628>>>>>        Set Initial_Folder    of hoDialog to sInitialFolder
12629>>>>>        If (Num_Arguments = 4) Begin
12631>>>>>            Set File_Title        of hoDialog to sDefaultFileName
12632>>>>>        End
12632>>>>>>
12632>>>>>        Get SelectedFileName  of hoDialog to sSelectedFile
12633>>>>>        Send Destroy of hoDialog
12634>>>>>    End
12634>>>>>>
12634>>>>>    Function_Return sSelectedFile
12635>>>>>End_Function
12636>>>Use Seq_chnl.pkg
12636>>>
12636>>>Use windows.pkg
12636>>>Use Dll.pkg
12636>>>
12636>>>Use vWin32fhW.pkg     // WinAPI Unicode version
Including file: vwin32fhW.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\vwin32fh20\vwin32fhW.pkg)
12636>>>>>// This code is part of VDF GUIdance
12636>>>>>// Visit us @ http://www.vdf-guidance.com
12636>>>>>// e-Mail us @ info@vdf-guidance.com
12636>>>>>// VDF GUIdance is a mutual project of
12636>>>>>// Frank Vandervelpen - Vandervelpen Systems and
12636>>>>>// Wil van Antwerpen  - Antwise Solutions
12636>>>>>// All software source code should be used <<AS IS>> without any warranty.
12636>>>>>//
12636>>>>>//
12636>>>>>// *** Windows 32bit file handling wrapper class ***
12636>>>>>// Unicode variant
12636>>>>>
12636>>>>>Use vWin32fhW.h       // Header file with WinAPI Unicode declarations
Including file: vwin32fhW.h    (C:\Projects\DF20\DbUpdateFramework\Libraries\vwin32fh20\vwin32fhW.h)
12636>>>>>>>//TH-Header
12636>>>>>>>//*****************************************************************************************
12636>>>>>>>// Copyright (c)  2004 KURANT Project
12636>>>>>>>// All rights reserved.
12636>>>>>>>//
12636>>>>>>>// $FileName    : G:\Projects\vWin32fh\vWin32fh.h
12636>>>>>>>// $ProjectName : Windows 32 bits file handling
12636>>>>>>>// $Authors     : Wil van Antwerpen
12636>>>>>>>// $Created     : 19.02.2004  19:25
12636>>>>>>>// $Type        : BSD (as in do with it whatever you like)
12636>>>>>>>//
12636>>>>>>>// Contents:
12636>>>>>>>//  This file contains the Windows API external function call definitions and
12636>>>>>>>//  constants as they are used in the vWin32fh package.
12636>>>>>>>//*****************************************************************************************
12636>>>>>>>//TH-RevisionStart
12636>>>>>>>//TH-RevisionEnd
12636>>>>>>>
12636>>>>>>>Define CS_DDE_ERR_FILE_NOT_FOUND  For "The specified file was not found.\n"
12636>>>>>>>Define CS_DDE_ERR_PATH_NOT_FOUND  For "The specified path was not found.\n"
12636>>>>>>>Define CS_DDE_ERR_BAD_FORMAT      For "The .EXE file is invalid.\n"
12636>>>>>>>Define CS_DDE_ERR_ACCESSDENIED    For "The operating system denied access to the specified file.\n"
12636>>>>>>>Define CS_DDE_ERR_ASSOCINCOMPLETE For "The filename association is incomplete or invalid.\n"
12636>>>>>>>Define CS_DDE_ERR_DDEBUSY         For "The DDE transaction could not be completed because other DDE\ntransactions were being processed.\n"
12636>>>>>>>Define CS_DDE_ERR_DDEFAIL         For "The DDE transaction failed.\n"
12636>>>>>>>Define CS_DDE_ERR_DDETIMEOUT      For "The DDE transaction could not be completed,\nbecause the request timed out.\n"
12636>>>>>>>Define CS_DDE_ERR_DLLNOTFOUND     For "The specified dynamic-link library was not found.\n"
12636>>>>>>>Define CS_DDE_ERR_NOASSOC         For "There is no application associated with the given filename extension.\n"
12636>>>>>>>Define CS_DDE_ERR_OOM             For "There is not enough free memory available to complete the operation.\n"
12636>>>>>>>Define CS_DDE_ERR_PNF             For "The specified path was not found.\n"
12636>>>>>>>Define CS_DDE_ERR_SHARE           For "A sharing violation occurred.\n"
12636>>>>>>>Define CS_DDE_ERR_UNKNOWN_LINE1   For "Unknown DDE-error occurred.\nErrornumber"
12636>>>>>>>Define CS_DDE_ERR_UNKNOWN_LINE2   For ".\n"
12636>>>>>>>Define CS_DDE_ERR_HANDL_PAKTC     For "\nPress a key to continue...\n\n"
12636>>>>>>>Define CS_DDE_ERR_HANDL_CAPTION   For "a DDE-error occurred"
12636>>>>>>>
12636>>>>>>>
12636>>>>>>>Define vMax_Path     For |CI260
12636>>>>>>>Define vMinChar      For |CI$80
12636>>>>>>>Define vMaxChar      For |CI$7F
12636>>>>>>>Define vMinShort     For |CI$8000
12636>>>>>>>Define vMaxShort     For |CI$7FFF
12636>>>>>>>Define vMinLong      For |CI$80000000
12636>>>>>>>Define vMaxLong      For |CI$7FFFFFFF
12636>>>>>>>Define vMaxByte      For |CI$FF
12636>>>>>>>Define vMaxWord      For |CI$FFFF
12636>>>>>>>Define vMaxDword     For |CI$FFFFFFFF
12636>>>>>>>
12636>>>>>>>
12636>>>>>>>
12636>>>>>>>// For FindFirstFile
12636>>>>>>>Define vINVALID_HANDLE_VALUE   For |CI-1
12636>>>>>>>Define vINVALID_FILE_SIZE      For |CI$FFFFFFFF
12636>>>>>>>Define vERROR_NO_MORE_FILES    For |CI18
12636>>>>>>>
12636>>>>>>>// The defines below can be used to find out what kind of error has occurred if
12636>>>>>>>// the API-call ShellExecute is used.
12636>>>>>>>Define vERROR_FILE_NOT_FOUND   For |CI0002
12636>>>>>>>Define vERROR_PATH_NOT_FOUND   For |CI0003
12636>>>>>>>Define vERROR_BAD_FORMAT       For |CI0011
12636>>>>>>>Define vSE_ERR_ACCESSDENIED    For |CI0005
12636>>>>>>>Define vSE_ERR_ASSOCINCOMPLETE For |CI0027
12636>>>>>>>Define vSE_ERR_DDEBUSY         For |CI0030
12636>>>>>>>Define vSE_ERR_DDEFAIL         For |CI0029
12636>>>>>>>Define vSE_ERR_DDETIMEOUT      For |CI0028
12636>>>>>>>Define vSE_ERR_DLLNOTFOUND     For |CI0032
12636>>>>>>>Define vSE_ERR_FNF             For |CI0002
12636>>>>>>>Define vSE_ERR_NOASSOC         For |CI0031
12636>>>>>>>Define vSE_ERR_OOM             For |CI0008
12636>>>>>>>Define vSE_ERR_PNF             For |CI0003
12636>>>>>>>Define vSE_ERR_SHARE           For |CI0026
12636>>>>>>>
12636>>>>>>>
12636>>>>>>>// C-Structure
12636>>>>>>>//typedef struct _browseinfo {
12636>>>>>>>//    HWND hwndOwner;
12636>>>>>>>//    LPCITEMIDLIST pidlRoot;
12636>>>>>>>//    LPSTR pszDisplayName;
12636>>>>>>>//    LPCSTR lpszTitle;
12636>>>>>>>//    UINT ulFlags;
12636>>>>>>>//    BFFCALLBACK lpfn;
12636>>>>>>>//    LPARAM lParam;
12636>>>>>>>//    int iImage;
12636>>>>>>>//} BROWSEINFO, *PBROWSEINFO, *LPBROWSEINFO;
12636>>>>>>>
12636>>>>>>>//declare C structure struct_browseinfo
12636>>>>>>>//as documented in MSDN under Windows Shell API
12636>>>>>>>Struct tvBrowseInfo
12636>>>>>>>  Handle    hWndOwner
12636>>>>>>>  Pointer   pIDLRoot
12636>>>>>>>  Pointer   pszDisplayName
12636>>>>>>>  Pointer   lpszTitle
12636>>>>>>>  DWord     ulFlags
12636>>>>>>>  Pointer   lpfnCallback
12636>>>>>>>  LongPtr   lParam
12636>>>>>>>  DWord     iImage
12636>>>>>>>End_Struct // tvBrowseInfo
12636>>>>>>>
12636>>>>>>>// Browsing for directory.
12636>>>>>>>Define vBIF_RETURNONLYFSDIRS   For |CI$0001  // For finding a folder to start document searching
12636>>>>>>>Define vBIF_DONTGOBELOWDOMAIN  For |CI$0002  // For starting the Find Computer
12636>>>>>>>Define vBIF_STATUSTEXT         For |CI$0004  // Includes a status area in the dialog box.
12636>>>>>>>                                            // The callback function can set the status text by
12636>>>>>>>                                            // sending messages to the dialog box.
12636>>>>>>>Define vBIF_RETURNFSANCESTORS  For |CI$0008  // Only returns file system ancestors.
12636>>>>>>>
12636>>>>>>>Define vBIF_BROWSEFORCOMPUTER  For |CI$1000  // Browsing for Computers.
12636>>>>>>>Define vBIF_BROWSEFORPRINTER   For |CI$2000  // Browsing for Printers
12636>>>>>>>
12636>>>>>>>// message from browser
12636>>>>>>>//Define BFFM_INITIALIZED        1
12636>>>>>>>//Define BFFM_SELCHANGED         2
12636>>>>>>>
12636>>>>>>>// messages to browser
12636>>>>>>>//Define BFFM_SETSTATUSTEXT      (WM_USER + 100)
12636>>>>>>>//Define BFFM_ENABLEOK           (WM_USER + 101)
12636>>>>>>>//Define BFFM_SETSELECTION       (WM_USER + 102)
12636>>>>>>>
12636>>>>>>>
12636>>>>>>>External_function vWin32_SHBrowseForFolder "SHBrowseForFolderW" shell32.dll ;  Pointer lpsBrowseInfo Returns dWord
12637>>>>>>>
12637>>>>>>>External_function vWin32_SHGetPathFromIDList "SHGetPathFromIDListW" shell32.dll ;  Pointer pidList Pointer lpBuffer Returns dWord
12638>>>>>>>
12638>>>>>>>External_function vWin32_CoTaskMemFree "CoTaskMemFree" ole32.dll Pointer pV Returns Integer
12639>>>>>>>
12639>>>>>>>
12639>>>>>>>
12639>>>>>>>
12639>>>>>>>Struct tvSecurity_attributes
12639>>>>>>>  DWord   nLength
12639>>>>>>>  Pointer lpDescriptor
12639>>>>>>>  Integer bInheritHandle
12639>>>>>>>End_Struct // tvSecurity_attributes
12639>>>>>>>
12639>>>>>>>//nLength:
12639>>>>>>>// Specifies the size, in bytes, of this structure. Set this value to the size of the
12639>>>>>>>// SECURITY_ATTRIBUTES structure.
12639>>>>>>>// Windows NT: Some functions that use the SECURITY_ATTRIBUTES structure do not verify the
12639>>>>>>>// value of the nLength member. However, an application should still set it properly.
12639>>>>>>>// That ensures current, future, and cross-platform compatibility.
12639>>>>>>>//
12639>>>>>>>//lpSecurityDescriptor:
12639>>>>>>>// Points to a security descriptor for the object that controls the sharing of it.
12639>>>>>>>// If NULL is specified for this member, the object may be assigned the default security
12639>>>>>>>// descriptor of the calling process.
12639>>>>>>>//
12639>>>>>>>//bInheritHandle:
12639>>>>>>>// Specifies whether the returned handle is inherited when a new process is created.
12639>>>>>>>// If this member is TRUE, the new process inherits the handle.
12639>>>>>>>
12639>>>>>>>
12639>>>>>>>// BOOL CreateDirectory(
12639>>>>>>>//    LPCTSTR lpPathName,
12639>>>>>>>//    LPSECURITY_ATTRIBUTES lpSecurityAttributes  // pointer to a security descriptor
12639>>>>>>>//   );
12639>>>>>>>//
12639>>>>>>>// lpPathName
12639>>>>>>>//  Points to a null-terminated string that specifies the path of the directory
12639>>>>>>>//  to be created.
12639>>>>>>>//  There is a default string size limit for paths of MAX_PATH characters.
12639>>>>>>>//  This limit is related to how the CreateDirectory function parses paths.
12639>>>>>>>// lpSecurityAttributes
12639>>>>>>>//  Pointer to a SECURITY_ATTRIBUTES structure als called a security descriptor that
12639>>>>>>>//  determines whether the returned handle can be inherited by child processes.
12639>>>>>>>//  If lpSecurityAttributes is NULL, the handle cannot be inherited.
12639>>>>>>>// Returns:
12639>>>>>>>//  If the function succeeds, the return value is nonzero.
12639>>>>>>>//  If the function fails, the return value is zero. To get extended error information, call GetLastError.
12639>>>>>>>External_function vWin32_CreateDirectory "CreateDirectoryW" kernel32.dll ;  WString sPathName Pointer lpSecurity_Attributes Returns Integer
12640>>>>>>>
12640>>>>>>>
12640>>>>>>>// lpPathName
12640>>>>>>>//  Points to a null-terminated string that specifies the path of the directory
12640>>>>>>>//  to be removed.
12640>>>>>>>//  There is a default string size limit for paths of MAX_PATH characters.
12640>>>>>>>// Returns:
12640>>>>>>>//  If the function succeeds, the return value is nonzero.
12640>>>>>>>//  If the function fails, the return value is zero. To get extended error information, call GetLastError.
12640>>>>>>>External_function vWin32_RemoveDirectory "RemoveDirectoryW" kernel32.dll ;  WString sPathName Returns Integer
12641>>>>>>>
12641>>>>>>>
12641>>>>>>>
12641>>>>>>>// The ShellExecute function opens or prints a specified file. The file can be an
12641>>>>>>>// executable file or a document file.
12641>>>>>>>//
12641>>>>>>>// Operation can be one of the following:
12641>>>>>>>//    "OPEN"  The function opens the file specified by lpFile.
12641>>>>>>>//            The file can be an executable file or a document file.
12641>>>>>>>//            The file can be a folder to open.
12641>>>>>>>//    "PRINT" The function prints the file specified by lpFile.
12641>>>>>>>//            The file should be a document file. If the file is an executable file,
12641>>>>>>>//            the function opens the file, as if "open" had been specified.
12641>>>>>>>//  "EXPLORE" The function explores the folder specified by lpFile.
12641>>>>>>>//
12641>>>>>>>// Return Values:
12641>>>>>>>//
12641>>>>>>>// If the function succeeds, the return value is the instance handle of the application that
12641>>>>>>>// was run, or the handle of a dynamic data exchange (DDE) server application.
12641>>>>>>>// If the function fails, the return value is an error value that is less than or equal to 32.
12641>>>>>>>//
12641>>>>>>>// The following table lists these error values:
12641>>>>>>>// Public Const ERROR_FILE_NOT_FOUND = 2&
12641>>>>>>>// Public Const ERROR_PATH_NOT_FOUND = 3&
12641>>>>>>>// Public Const ERROR_BAD_FORMAT = 11&
12641>>>>>>>// Public Const SE_ERR_ACCESSDENIED = 5
12641>>>>>>>// Public Const SE_ERR_ASSOCINCOMPLETE = 27
12641>>>>>>>// Public Const SE_ERR_DDEBUSY = 30
12641>>>>>>>// Public Const SE_ERR_DDEFAIL = 29
12641>>>>>>>// Public Const SE_ERR_DDETIMEOUT = 28
12641>>>>>>>// Public Const SE_ERR_DLLNOTFOUND = 32
12641>>>>>>>// Public Const SE_ERR_FNF = 2
12641>>>>>>>// Public Const SE_ERR_NOASSOC = 31
12641>>>>>>>// Public Const SE_ERR_OOM = 8
12641>>>>>>>// Public Const SE_ERR_PNF = 3
12641>>>>>>>// Public Const SE_ERR_SHARE = 26
12641>>>>>>>
12641>>>>>>>
12641>>>>>>>
12641>>>>>>>// Code to open the program that is associated with the selected file.
12641>>>>>>>//
12641>>>>>>>// External function call used in Procedure DoStartDocument
12641>>>>>>>External_function vWin32_ShellExecute "ShellExecuteW" shell32.dll ;  Handle  hWnd ;  WString wsOperation ;  WString wsFile ;  WString wsParameters ;  WString wsDirectory ;  Dword   iShowCmd Returns Handle
12642>>>>>>>
12642>>>>>>>
12642>>>>>>>
12642>>>>>>>
12642>>>>>>>Define vFO_MOVE                For |CI$0001
12642>>>>>>>Define vFO_COPY                For |CI$0002
12642>>>>>>>Define vFO_DELETE              For |CI$0003
12642>>>>>>>Define vFO_RENAME              For |CI$0004
12642>>>>>>>
12642>>>>>>>Define vFOF_MULTIDESTFILES     For |CI$0001
12642>>>>>>>Define vFOF_CONFIRMMOUSE       For |CI$0002
12642>>>>>>>Define vFOF_SILENT             For |CI$0004  // don't create progress/report
12642>>>>>>>Define vFOF_RENAMEONCOLLISION  For |CI$0008
12642>>>>>>>Define vFOF_NOCONFIRMATION     For |CI$0010  // Don't prompt the user.
12642>>>>>>>Define vFOF_WANTMAPPINGHANDLE  For |CI$0020  // Fill in SHFILEOPSTRUCT.hNameMappings
12642>>>>>>>                                          // Must be freed using SHFreeNameMappings
12642>>>>>>>Define vFOF_ALLOWUNDO          For |CI$0040
12642>>>>>>>Define vFOF_FILESONLY          For |CI$0080  // on *.*, do only files
12642>>>>>>>Define vFOF_SIMPLEPROGRESS     For |CI$0100  // means don't show names of files
12642>>>>>>>Define vFOF_NOCONFIRMMKDIR     For |CI$0200  // don't confirm making any needed dirs
12642>>>>>>>
12642>>>>>>>Struct tvShFileOpStruct
12642>>>>>>>  Handle   hWnd
12642>>>>>>>  UInteger wFunc
12642>>>>>>>  Pointer  pFrom
12642>>>>>>>  Pointer  pTo
12642>>>>>>>  Short    fFlags
12642>>>>>>>  Integer  fAnyOperationsAborted
12642>>>>>>>  Pointer  hNameMappings
12642>>>>>>>  Pointer  lpszProgressTitle      // only used if FOF_SIMPLEPROGRESS
12642>>>>>>>End_Struct // tvShFileOpStruct
12642>>>>>>>
12642>>>>>>>// hwnd
12642>>>>>>>//   Handle of the dialog box to use to display information about the status of the operation.
12642>>>>>>>
12642>>>>>>>// wFunc
12642>>>>>>>//   Operation to perform. This member can be one of the following values:
12642>>>>>>>//     FO_COPY     Copies the files specified by pFrom to the location specified by pTo.
12642>>>>>>>//     FO_DELETE   Deletes the files specified by pFrom (pTo is ignored).
12642>>>>>>>//     FO_MOVE     Moves the files specified by pFrom to the location specified by pTo.
12642>>>>>>>//     FO_RENAME   Renames the files specified by pFrom.
12642>>>>>>>
12642>>>>>>>// pFrom
12642>>>>>>>//   Pointer to a buffer that specifies one or more source file names. Multiple names must
12642>>>>>>>//   be null-separated. The list of names must be double null-terminated.
12642>>>>>>>
12642>>>>>>>// pTo
12642>>>>>>>//   Pointer to a buffer that contains the name of the destination file or directory. The
12642>>>>>>>//   buffer can contain mutiple destination file names if the fFlags member specifies
12642>>>>>>>//   FOF_MULTIDESTFILES. Multiple names must be null-separated. The list of names must be
12642>>>>>>>//   double null-terminated.
12642>>>>>>>
12642>>>>>>>// fAnyOperationsAborted
12642>>>>>>>//   Value that receives TRUE if the user aborted any file operations before they
12642>>>>>>>//   were completed or FALSE otherwise.
12642>>>>>>>
12642>>>>>>>
12642>>>>>>>// Performs a copy, move, rename, or delete operation on a file system object.
12642>>>>>>>// This can be a file or a folder.
12642>>>>>>>// With thanks to Andrew S Kaplan
12642>>>>>>>External_function vWin32_SHFileOperation "SHFileOperationW" Shell32.dll ;        Pointer lpFileOp Returns Integer
12643>>>>>>>
12643>>>>>>>
12643>>>>>>>// Thanks To Oliver Nelson for posting this code on the newsgroups
12643>>>>>>>External_function vWin32_GetWindowsDirectory "GetWindowsDirectoryW" kernel32.dll ;                           Pointer lpBuffer Integer nSize Returns Integer
12644>>>>>>>
12644>>>>>>>
12644>>>>>>>
12644>>>>>>>// Courtesy Of Vincent Oorsprong
12644>>>>>>>//External_Function vWin32_GetTempFileName "GetTempFileNameA" Kernel32.Dll ;
12644>>>>>>>//   Pointer lpPathName ;
12644>>>>>>>//   Pointer lpPrefixString ;
12644>>>>>>>//   Integer uUnique ;
12644>>>>>>>//   Pointer lpTempFileName ;
12644>>>>>>>//   Returns Integer
12644>>>>>>>// **WvA: 28-04-2005 Changed string parameter type into pointers
12644>>>>>>>External_function vWin32_GetTempFileName "GetTempFileNameW" kernel32.dll WString sPath ;        WString sPrefix Integer iUnique Pointer lpTempFileName Returns Integer
12645>>>>>>>
12645>>>>>>>External_function vWin32_GetTempPath "GetTempPathW" Kernel32.Dll ;   Dword nBufferLength ;   Pointer lpBuffer ;   Returns Integer
12646>>>>>>>
12646>>>>>>>External_function vWin32_DeleteFile "DeleteFileW" Kernel32.Dll ;   WString sFileName ;   Returns Integer
12647>>>>>>>
12647>>>>>>>// from:
12647>>>>>>>// http://msdn.microsoft.com/library/default.asp?url=/library/en-us/shellcc/platform/shell/reference/enums/csidl.asp
12647>>>>>>>//
12647>>>>>>>Define vCSIDL_FLAG_CREATE       For |CI$8000 // IE5+, use this to create a special folder
12647>>>>>>>Define vCSIDL_ADMIN_TOOLS       For |CI$0030 // IE5+, The file system directory that is used to store administrative tools for an individual user
12647>>>>>>>Define vCSIDL_ALT_STARTUP       For |CI$001D // The file system directory that corresponds to the user's nonlocalized Startup program group
12647>>>>>>>Define vCSIDL_APPDATA           For |CI$001A // Version 4.71. The file system directory that serves as a common repository for application-specific data. A typical path is C:\Documents and Settings\<username>\Application Data
12647>>>>>>>Define vCSIDL_BITBUCKET         For |CI$000A // The virtual folder containing the objects in the user's Recycle Bin
12647>>>>>>>Define vCSIDL_CDBURN_AREA       For |CI$003B // IE6+ The file system directory acting as a staging area for files waiting to be written to CD. A typical path is C:\Documents and Settings\<username>\Local Settings\Application Data\Microsoft\CD Burning
12647>>>>>>>Define vCSIDL_COMMON_ADMINTOOLS For |CI$002F // IE5+ The file system directory containing administrative tools for all users of the computer
12647>>>>>>>Define vCSIDL_COMMON_ALTSTARTUP For |CI$001E // The file system directory that corresponds to the nonlocalized Startup program group for all users
12647>>>>>>>Define vCSIDL_COMMON_APPDATA    For |CI$0023 // IE5+ The file system directory containing application data for all users. A typical path is C:\Documents and Settings\All Users\Application Data
12647>>>>>>>Define vCSIDL_COMMON_DESKTOPDIRECTORY for |CI$0019 // WinNT+ Only, The file system directory that contains files and folders that appear on the desktop for all users. A typical path is C:\Documents and Settings\All Users\Desktop
12647>>>>>>>Define vCSIDL_COMMON_DOCUMENTS  For |CI$002E // IE5+ The file system directory that contains documents that are common to all users. A typical paths is C:\Documents and Settings\All Users\Documents
12647>>>>>>>Define vCSIDL_COMMON_FAVORITES  For |CI$001F // The file system directory that serves as a common repository for favorite items common to all users
12647>>>>>>>Define vCSIDL_COMMON_MUSIC      For |CI$0035 // IE6+ The file system directory that serves as a repository for music files common to all users. A typical path is C:\Documents and Settings\All Users\Documents\My Music
12647>>>>>>>Define vCSIDL_COMMON_PICTURES   For |CI$0036 // The file system directory that serves as a repository for image files common to all users. A typical path is C:\Documents and Settings\All Users\Documents\My Pictures
12647>>>>>>>Define vCSIDL_COMMON_PROGRAMS   For |CI$0017 // WinNT+ The file system directory that contains the directories for the common program groups that appear on the Start menu for all users. A typical path is C:\Documents and Settings\All Users\Start Menu\Programs
12647>>>>>>>Define vCSIDL_COMMON_STARTMENU  For |CI$0016 // WinNT+ The file system directory that contains the programs and folders that appear on the Start menu for all users. A typical path is C:\Documents and Settings\All Users\Start Menu
12647>>>>>>>Define vCSIDL_COMMON_STARTUP    For |CI$0018 // WinNT+ The file system directory that contains the programs that appear in the Startup folder for all users. A typical path is C:\Documents and Settings\All Users\Start Menu\Programs\Startup
12647>>>>>>>Define vCSIDL_COMMON_TEMPLATES  For |CI$002D // WinNT+ The file system directory that contains the templates that are available to all users. A typical path is C:\Documents and Settings\All Users\Templates
12647>>>>>>>Define vCSIDL_COMMON_VIDEO      For |CI$0037 // IE6+ The file system directory that serves as a repository for video files common to all users. A typical path is C:\Documents and Settings\All Users\Documents\My Videos
12647>>>>>>>Define vCSIDL_COMPUTERSNEARME   For |CI$003D // The folder representing other machines in your workgroup
12647>>>>>>>Define vCSIDL_CONNECTIONS       For |CI$0031 // The virtual folder representing Network Connections, containing network and dial-up connections
12647>>>>>>>Define vCSIDL_CONTROLS          For |CI$0003 // The virtual folder containing icons for the Control Panel applications
12647>>>>>>>Define vCSIDL_COOKIES           For |CI$0021 // The file system directory that serves as a common repository for Internet cookies. A typical path is C:\Documents and Settings\username\Cookies
12647>>>>>>>Define vCSIDL_DESKTOP           For |CI$0000 // The virtual folder representing the Windows desktop, the root of the namespace
12647>>>>>>>Define vCSIDL_DESKTOPDIRECTORY  For |CI$0010 // The file system directory used to physically store file objects on the desktop (not to be confused with the desktop folder itself). A typical path is C:\Documents and Settings\username\Desktop
12647>>>>>>>Define vCSIDL_DRIVES            For |CI$0011 // The virtual folder representing My Computer, containing everything on the local computer: storage devices, printers, and Control Panel. The folder may also contain mapped network drives
12647>>>>>>>Define vCSIDL_FAVORITES         For |CI$0006 // The file system directory that serves as a common repository for the user's favorite items. A typical path is C:\Documents and Settings\username\Favorites
12647>>>>>>>Define vCSIDL_FONTS             For |CI$0014 // A virtual folder containing fonts. A typical path is C:\Windows\Fonts
12647>>>>>>>Define vCSIDL_HISTORY           For |CI$0022 // The file system directory that serves as a common repository for Internet history items
12647>>>>>>>Define vCSIDL_INTERNET          For |CI$0001 // A virtual folder representing the Internet
12647>>>>>>>Define vCSIDL_INTERNET_CACHE    For |CI$0020 // Comctl4.72+, The file system directory that serves as a common repository for temporary Internet files. A typical path is C:\Documents and Settings\username\Local Settings\Temporary Internet Files
12647>>>>>>>Define vCSIDL_LOCAL_APPDATA     For |CI$001C // IE5+ The file system directory that serves as a data repository for local (nonroaming) applications. A typical path is C:\Documents and Settings\username\Local Settings\Application Data
12647>>>>>>>Define vCSIDL_MYDOCUMENTS       For |CI$000C // IE6+ The virtual folder representing the My Documents desktop item
12647>>>>>>>Define vCSIDL_MYMUSIC           For |CI$000D // The file system directory that serves as a common repository for music files. A typical path is C:\Documents and Settings\User\My Documents\My Music
12647>>>>>>>Define vCSIDL_MYPICTURES        For |CI$0027 // IE5+ The file system directory that serves as a common repository for image files. A typical path is C:\Documents and Settings\username\My Documents\My Pictures
12647>>>>>>>Define vCSIDL_MYVIDEO           For |CI$000E // IE6+ The file system directory that serves as a common repository for video files. A typical path is C:\Documents and Settings\username\My Documents\My Videos
12647>>>>>>>Define vCSIDL_NETHOOD           For |CI$0013 // A file system directory containing the link objects that may exist in the My Network Places virtual folder. It is not the same as CSIDL_NETWORK, which represents the network namespace root. A typical path is C:\Documents and Settings\username\NetHood
12647>>>>>>>Define vCSIDL_NETWORK           For |CI$0012 // A virtual folder representing Network Neighborhood, the root of the network namespace hierarchy
12647>>>>>>>Define vCSIDL_PERSONAL          For |CI$0005 // (Documents folder) IE6 The virtual folder representing the My Documents desktop item.
12647>>>>>>>                                             // This is equivalent to CSIDL_MYDOCUMENTS. Previous to Version 6.0. The file system directory used to physically store a user's common repository of documents. A typical path is C:\Documents and Settings\username\My Documents
12647>>>>>>>Define vCSIDL_PHOTOALBUMS       For |CI$0045 // Vista+ The virtual folder used to store photo albums, typically username\My Pictures\Photo Albums
12647>>>>>>>Define vCSIDL_PLAYLISTS         For |CI$003F // Vista+ The virtual folder used to store play albums, typically username\My Music\Playlists
12647>>>>>>>Define vCSIDL_PRINTERS          For |CI$0004 // The virtual folder containing installed printers
12647>>>>>>>Define vCSIDL_PRINTHOOD         For |CI$001B // The file system directory that contains the link objects that can exist in the Printers virtual folder. A typical path is C:\Documents and Settings\username\PrintHood
12647>>>>>>>Define vCSIDL_PROFILE           For |CI$0028 // IE5+ The user's profile folder. A typical path is C:\Documents and Settings\username
12647>>>>>>>Define vCSIDL_PROGRAM_FILES     For |CI$0026 // IE5+ The Program Files folder. A typical path is C:\Program Files
12647>>>>>>>Define vCSIDL_PROGRAM_FILESx86  for |CI$002A // The Program Files folder for x86 programs. A typical path is C:\Program Files (x86)
12647>>>>>>>Define vCSIDL_PROGRAM_FILES_COMMON For |CI$002B // IE5+, WinNT+ A folder for components that are shared across applications. A typical path is C:\Program Files\Common
12647>>>>>>>Define vCSIDL_PROGRAMS          For |CI$0002 // The file system directory that contains the user's program groups (which are themselves file system directories). A typical path is C:\Documents and Settings\username\Start Menu\Programs
12647>>>>>>>Define vCSIDL_RECENT            For |CI$0008 // The file system directory that contains shortcuts to the user's most recently used documents. A typical path is C:\Documents and Settings\username\My Recent Documents
12647>>>>>>>Define vCSIDL_RESOURCES         For |CI$0038 // undocumented
12647>>>>>>>Define vCSIDL_SAMPLE_MUSIC      For |CI$0040 // Vista+, The file system directory that contains sample music. A typical path is C:\Documents and Settings\username\My Documents\My Music\Sample Music
12647>>>>>>>Define vCSIDL_SAMPLE_PLAYLISTS  For |CI$0041 // Vista+, The file system directory that contains sample playlists. A typical path is C:\Documents and Settings\username\My Documents\My Music\Sample Playlists
12647>>>>>>>Define vCSIDL_SAMPLE_PICTURES   For |CI$0042 // Vista+, The file system directory that contains sample pictures. A typical path is C:\Documents and Settings\username\My Documents\My Pictures\Sample Pictures
12647>>>>>>>Define vCSIDL_SAMPLE_VIDEOS     For |CI$0043 // Vista+, The file system directory that contains sample videos. A typical path is C:\Documents and Settings\username\My Documents\My Videos\Sample Videos
12647>>>>>>>Define vCSIDL_SENDTO            For |CI$0009 // The file system directory that contains Send To menu items. A typical path is C:\Documents and Settings\username\SendTo
12647>>>>>>>Define vCSIDL_STARTMENU         For |CI$000B // The file system directory containing Start menu items. A typical path is C:\Documents and Settings\username\Start Menu
12647>>>>>>>Define vCSIDL_STARTUP           For |CI$0007 // The file system directory that corresponds to the user's Startup program group. The system starts these programs whenever any user logs onto Windows NT or starts Windows 95. A typical path is C:\Documents and Settings\username\Start Menu\Programs\Startup
12647>>>>>>>Define vCSIDL_SYSTEM            For |CI$0025 // The Windows System folder. A typical path is C:\Windows\System32
12647>>>>>>>Define vCSIDL_SYSTEMX86         For |CI$0029 //
12647>>>>>>>Define vCSIDL_TEMPLATES         For |CI$0015 // The file system directory that serves as a common repository for document templates. A typical path is C:\Documents and Settings\username\Templates
12647>>>>>>>Define vCSIDL_WINDOWS           For |CI$0024 // The Windows directory or SYSROOT. This corresponds to the %windir% or %SYSTEMROOT% environment variables. A typical path is C:\Windows
12647>>>>>>>
12647>>>>>>>
12647>>>>>>>//HRESULT SHGetFolderPath(
12647>>>>>>>//    HWND hwndOwner,
12647>>>>>>>//    int nFolder,
12647>>>>>>>//    HANDLE hToken,
12647>>>>>>>//    DWORD dwFlags,
12647>>>>>>>//    LPTSTR pszPath
12647>>>>>>>//);
12647>>>>>>>// This function is a superset of SHGetSpecialFolderPath, included with earlier versions of
12647>>>>>>>// the shell. It is implemented in a redistributable DLL, SHFolder.dll, that also simulates
12647>>>>>>>// many of the new shell folders on older platforms such as Windows 95, Windows 98, and
12647>>>>>>>// Windows NT 4.0. This DLL always calls the current platform's version of this function.
12647>>>>>>>// If that fails, it will try to simulate the appropriate behavior.
12647>>>>>>>//
12647>>>>>>>External_function vWin32_SHGetFolderPath "SHGetFolderPathW" SHFolder.Dll ;   Pointer hWnd ;   Integer nFolder ;   Pointer hToken ;   DWord   dwFlags ;   Pointer lpszPath ;   Returns Integer
12648>>>>>>>
12648>>>>>>>
12648>>>>>>>
12648>>>>>>>Struct tvWin32FindData
12648>>>>>>> Dword            dwFileAttributes
12648>>>>>>> Dword            ftCreationLowDateTime
12648>>>>>>> Dword            ftCreationHighDateTime
12648>>>>>>> dword            ftLastAccessLowDateTime
12648>>>>>>> Dword            ftLastAccessHighDateTime
12648>>>>>>> Dword            ftLastWriteLowDateTime
12648>>>>>>> Dword            ftLastWriteHighDateTime
12648>>>>>>> Dword            nFileSizeHigh
12648>>>>>>> Dword            nFileSizeLow
12648>>>>>>> Dword            dwReserved0
12648>>>>>>> Dword            dwReserved1
12648>>>>>>> Short[vMax_Path] cFileName
12648>>>>>>> Short[14]        cAlternateFileName
12648>>>>>>>End_Struct
12648>>>>>>>
12648>>>>>>>// Courtesy Of Vincent Oorsprong
12648>>>>>>>// lpFileName      : address of name of file to search for
12648>>>>>>>// lpFindFileData  : address of returned information
12648>>>>>>>External_function vWin32_FindFirstFile "FindFirstFileW"  Kernel32.dll WString sFileName ;          Pointer lpFindFileData Returns Handle
12649>>>>>>>
12649>>>>>>>// Courtesy Of Vincent Oorsprong
12649>>>>>>>// hFindFile       : handle of search
12649>>>>>>>// lpFindFileData  : address of structure for data on found file
12649>>>>>>>External_function vWin32_FindNextFile "FindNextFileW" Kernel32.dll Handle hFindFile ;          Pointer lpFindFileData Returns Integer
12650>>>>>>>
12650>>>>>>>
12650>>>>>>>// Courtesy Of Vincent Oorsprong
12650>>>>>>>//  hFindFile      : file search handle
12650>>>>>>>External_function vWin32_FindClose "FindClose" Kernel32.dll Handle hFindFile Returns Integer
12651>>>>>>>
12651>>>>>>>
12651>>>>>>>
12651>>>>>>>Struct tvFileTime
12651>>>>>>>  DWord dwLowDateTime
12651>>>>>>>  DWord dwHighDateTime
12651>>>>>>>End_Struct
12651>>>>>>>
12651>>>>>>>
12651>>>>>>>Struct tvSystemTime
12651>>>>>>>  UShort wYear
12651>>>>>>>  UShort wMonth
12651>>>>>>>  UShort wDayOfWeek
12651>>>>>>>  UShort wDay
12651>>>>>>>  UShort wHour
12651>>>>>>>  UShort wMinute
12651>>>>>>>  UShort wSecond
12651>>>>>>>  UShort wMilliSeconds
12651>>>>>>>End_Struct
12651>>>>>>>
12651>>>>>>>
12651>>>>>>>// Courtesy Of Vincent Oorsprong
12651>>>>>>>//  lpFileTime     : pointer to file time to convert
12651>>>>>>>//  lpSystemTime   : pointer to structure to receive system time
12651>>>>>>>External_function vWin32_FileTimeToSystemTime "FileTimeToSystemTime" Kernel32.Dll ;          Pointer lpFileTime Pointer lpsystemTime Returns Integer
12652>>>>>>>
12652>>>>>>>// Courtesy Of Vincent Oorsprong
12652>>>>>>>// This function formats the time in a picture-string passed
12652>>>>>>>//
12652>>>>>>>// Picture      Meaning
12652>>>>>>>//    h         Hours with no leading zero for single-digit hours; 12-hour clock
12652>>>>>>>//    hh        Hours with leading zero for single-digit hours; 12-hour clock
12652>>>>>>>//    H         Hours with no leading zero for single-digit hours; 24-hour clock
12652>>>>>>>//    HH        Hours with leading zero for single-digit hours; 24-hour clock
12652>>>>>>>//    m         Minutes with no leading zero for single-digit minutes
12652>>>>>>>//    mm        Minutes with leading zero for single-digit minutes
12652>>>>>>>//    s         Seconds with no leading zero for single-digit seconds
12652>>>>>>>//    ss        Seconds with leading zero for single-digit seconds
12652>>>>>>>//    t         One character time marker string, such as A or P
12652>>>>>>>//    tt        Multicharacter time marker string, such as AM or PM
12652>>>>>>>//
12652>>>>>>>// For example, to get the time string  "11:29:40 PM"
12652>>>>>>>//    use the following picture string: "hh" : "mm" : "ss tt"
12652>>>>>>>
12652>>>>>>>External_function vWin32_GetTimeFormat "GetTimeFormatW" Kernel32.Dll ;  Dword LCID Dword dwFlags Pointer lpsSystemTime Pointer lpFormat Pointer lpTimeStr ;  Integer cchTime Returns Integer
12653>>>>>>>
12653>>>>>>>
12653>>>>>>>// Courtesy Of Vincent Oorsprong
12653>>>>>>>// This function formats the date in a picture-string passed
12653>>>>>>>//
12653>>>>>>>// Picture      Meaning
12653>>>>>>>//    d         Day of month as digits with no leading zero for single-digit days.
12653>>>>>>>//    dd        Day of month as digits with leading zero for single-digit days.
12653>>>>>>>//    ddd       Day of week as a three-letter abbreviation. The function uses the
12653>>>>>>>//              LOCALE_SABBREVOAYMAME value associated with the specified locale.
12653>>>>>>>//    dddd      Day of week as its full name. The function uses the LOCALE_SDAYNAME
12653>>>>>>>//              value associated with the specified locale.
12653>>>>>>>//    M         Month as digits with no leading zero for single-digit months.
12653>>>>>>>//    MM        Month as digits with leading zero for single-digit months.
12653>>>>>>>//    MMM       Month as a three-letter abbreviation. The function uses the
12653>>>>>>>//              LOCALE_SABBREVMONTHNAME value associated with the specified locale.
12653>>>>>>>//    MMMM      Month as its full name. The function uses the LOCALE_SMONTHNAME value
12653>>>>>>>//              associated with the specified locale.
12653>>>>>>>//    y         Year as last two digits, but with no leading zero for years less than 10.
12653>>>>>>>//    yy        Year as last two digits, but with leading zero for years less than 10.
12653>>>>>>>//    yyyy      Year represented hy full four digits.
12653>>>>>>>//    gg        Period/era string. The function uses the CAL_SERASTRING value associated
12653>>>>>>>//              with the specified locale. This element is ignored if the date to be formatted
12653>>>>>>>//              does not have an associated era or period string.
12653>>>>>>>// For example, to get the date string  "Wed, Aug 31 94"
12653>>>>>>>// use the following picture string:    "ddd","MMM dd yy"
12653>>>>>>>
12653>>>>>>>External_function vWin32_GetDateFormat "GetDateFormatW" Kernel32.Dll ;  Dword LCID Dword dwFlags Pointer lpsSystemTime Pointer lpFormat Pointer lpDateStr ;  Integer cchDate Returns Integer
12654>>>>>>>
12654>>>>>>>Define LOCALE_NOUSEROVERRIDE    For |CI$80000000  //  do not use user overrides
12654>>>>>>>Define TIME_NOMIHUTESORSECONDS  For |CI$00000001  //  do not use minutes or seconds
12654>>>>>>>Define TIME_NOSECONDS           For |CI$00000002  //  do not use seconds
12654>>>>>>>Define TIME_NOTIMEMARKER        For |CI$00000004  //  do not use time marker
12654>>>>>>>Define TIME_FORCE24HOURFORMAT   For |CI$00000008  //  always use 24 hour format
12654>>>>>>>
12654>>>>>>>//  Date Flags for GetDateFormatW.
12654>>>>>>>//
12654>>>>>>>Define DATE_SHORTDATE           For |CI$00000001  //  use short date picture
12654>>>>>>>Define DATE_LONGDATE            For |CI$00000002  //  use long date picture
12654>>>>>>>Define DATE_USE_ALT_CALENDAR    For |CI$00000004  //  use alternate calendar (if any)
12654>>>>>>>
12654>>>>>>>
12654>>>>>>>External_function vWin32_SetLastError "SetLastError" Kernel32.Dll Dword dwLastError Returns Integer
12655>>>>>>>
12655>>>>>>>
12655>>>>>>>// **WvA: 20-02-2004
12655>>>>>>>// While i was testing the format capabilities i stumbled over a very
12655>>>>>>>// weird problem where it looks like that the integer value gets somehow translated
12655>>>>>>>// incorrectly into an unsigned integer.
12655>>>>>>>// I don't have the time to dive into this.. so added a workaround (and removed it again)
12655>>>>>>>// It does smell a bit fishy though
12655>>>>>>>// Tested it with the same results on both VDF7 and VDF9.1
12655>>>>>>>
12655>>>>>>>Define SHFMT_ID_DEFAULT        For |CI$0000FFFF // The default format ID
12655>>>>>>>Define SHFMT_OPT_DEFAULT       For |CI$00000000 // The default "Quick Format" option.
12655>>>>>>>Define SHFMT_OPT_FULL          For |CI$00000001 // Deselects the "Quick Format" option, providing a full format instead. This is useful when an unformatted disk is detected.
12655>>>>>>>Define SHFMT_OPT_SYSONLY       For |CI$00000002 // Selects the "Create an MS-DOS startup disk" option, creating a system boot disk.
12655>>>>>>>
12655>>>>>>>// Possible errors that can be returned by the shellformat function
12655>>>>>>>Define SHFMT_ERROR             For (|CI$FFFFFFFF+1) // An error occurred during the last format or no drive parameter passed. This does not indicate that the disk is unformatable.
12655>>>>>>>Define SHFMT_CANCEL            For (|CI$FFFFFFFE+1) // The last format was canceled.
12655>>>>>>>Define SHFMT_NOFORMAT          For (|CI$FFFFFFFD+1) // The drive cannot be formatted.
12655>>>>>>>
12655>>>>>>>
12655>>>>>>> // Courtesy Of Steve Walter,
12655>>>>>>> // USA Software, Inc
12655>>>>>>> // Format a disk
12655>>>>>>> // Called By:  Move (vWin32_ShFormatDrive(hWnd,0,$FFFF,1)) To dwReturn
12655>>>>>>>External_function vWin32_ShFormatDrive "SHFormatDrive" shell32.dll Handle hWnd ;         Integer iDrive Integer iFormatID Integer iOptions Returns DWORD
12656>>>>>>>
12656>>>>>>>// Michael Mullan.  I Wanted to create all the folders in one statement...
12656>>>>>>>
12656>>>>>>>// SHCreateDirectoryEx
12656>>>>>>>
12656>>>>>>>//    Note  This function is available through Microsoft Windows XP Service Pack 2 (SP2) and Windows Server 2003.
12656>>>>>>>//    It might be altered or unavailable in subsequent versions of Windows.
12656>>>>>>>//
12656>>>>>>>//    This function creates a file system folder whose fully qualified path is given by pszPath. If one or more
12656>>>>>>>//    of the intermediate folders do not exist, they are created as well. SHCreateDirectoryEx also verifies that
12656>>>>>>>//    the files are visible. If they are not visible, expect one of the following:
12656>>>>>>>//
12656>>>>>>>//        * If hwnd is set to a valid window handle, a message box is displayed warning the user that he or she
12656>>>>>>>//        might not be able to access the files. If the user chooses not to proceed, the function returns
12656>>>>>>>//        ERROR_CANCELLED.
12656>>>>>>>//        * If hwnd is set to NULL, no user interface is displayed and the function returns ERROR_CANCELLED.
12656>>>>>>>
12656>>>>>>>//        Returns ERROR_SUCCESS if successful. If the operation fails, other error codes can be returned,
12656>>>>>>>//        including those listed here. For values not specifically listed, see System Error Codes.
12656>>>>>>>//      161  ERROR_BAD_PATHNAME                The pszPath parameter was set to a relative path.
12656>>>>>>>//      206  ERROR_FILENAME_EXCED_RANGE     The path pointed to by pszPath is too long.
12656>>>>>>>//      3    ERROR_PATH_NOT_FOUND            The system cannot find the path pointed to by pszPath. The path may contain an invalid entry.
12656>>>>>>>//      80   ERROR_FILE_EXISTS                The directory exists.
12656>>>>>>>//      183  ERROR_ALREADY_EXISTS            The directory exists.
12656>>>>>>>//      1223 ERROR_CANCELLED                The user canceled the operation.
12656>>>>>>>
12656>>>>>>>//        int SHCreateDirectoryEx(
12656>>>>>>>//            HWND hwnd,
12656>>>>>>>//            LPCTSTR pszPath,
12656>>>>>>>//            const SECURITY_ATTRIBUTES *psa
12656>>>>>>>//        );
12656>>>>>>>
12656>>>>>>>External_function vWin32_SHCreateDirectoryEx "SHCreateDirectoryExW" shell32.dll Handle hWnd;                  WString wPath  Pointer lpSecurity_Attributes Returns Integer
12657>>>>>>>
12657>>>>>>> External_Function vWin32_PathIsDirectory "PathIsDirectoryW" SHLWAPI.DLL WString wPath Returns Integer
12658>>>>>
12658>>>>>
12658>>>>>
12658>>>>>// Does the directory exist? - No = false, Yes = True
12658>>>>>// This also works with UNC path encoding and wildcards
12658>>>>>Function vFolderExists Global String sFolderName Returns Boolean
12660>>>>>    Boolean bFolderExists
12660>>>>>    Boolean bStop
12660>>>>>    String  sFolder sTmp
12660>>>>>    Integer iCh
12660>>>>>
12660>>>>>    If (sFolderName = "") Begin
12662>>>>>        Function_Return False
12663>>>>>    End
12663>>>>>>
12663>>>>>
12663>>>>>    Move True  to bFolderExists
12664>>>>>    Move False to bStop
12665>>>>>    Move "dir:" to sFolder
12666>>>>>    Append sFolder sFolderName
12667>>>>>    Get Seq_New_Channel to iCh  // get free channel for input
12668>>>>>    If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
12670>>>>>        Error DFERR_PROGRAM "No I/O channel available for process (vFolderExists)"
12671>>>>>>
12671>>>>>        Function_Return False
12672>>>>>    End
12672>>>>>>
12672>>>>>    Direct_Input channel iCh sFolder
12674>>>>>    Repeat
12674>>>>>>
12674>>>>>        Readln channel iCh sTmp
12676>>>>>        Move (SeqEof) to bStop
12677>>>>>        If (Trim(sTmp)="") Begin
12679>>>>>            Move False to bFolderExists
12680>>>>>        End
12680>>>>>>
12680>>>>>        Else Begin
12681>>>>>            Move True to bFolderExists
12682>>>>>            Move True to bStop
12683>>>>>        End
12683>>>>>>
12683>>>>>    Until (bStop)
12685>>>>>    Close_Input channel iCh
12687>>>>>    Send Seq_Release_Channel iCh
12688>>>>>    Function_Return bFolderExists
12689>>>>>End_Function
12690>>>>>
12690>>>>>// returns folder name if a folder was selected, otherwise returns ""
12690>>>>>Function vSHBrowseForFolder Global String sDialogTitle Returns String
12692>>>>>    String  sPath
12692>>>>>    WString sFolder sTitle
12692>>>>>    Pointer lpItemIdList
12692>>>>>    Integer iFolderSelected iRetval
12692>>>>>    tvBrowseInfo BrowseInfo
12692>>>>>    tvBrowseInfo BrowseInfo
12692>>>>>
12692>>>>>    Move "" to sPath
12693>>>>>    If (sDialogTitle<>"") Begin
12695>>>>>        Move sDialogTitle to sTitle
12696>>>>>        // Torben Lund suggested converting the string with toansi. Doing it like that
12696>>>>>        // disables showing some commonly used ascii characters like ascii 137 (ë)
12696>>>>>        // These chars are correctly shown if no toansi is used.
12696>>>>>        // I can imagine that he wanted to path to be ANSI, but as long as it isa just
12696>>>>>        // selected it will always be valid.
12696>>>>>        Move (AddressOf(sTitle)) to BrowseInfo.lpszTitle
12697>>>>>    End
12697>>>>>>
12697>>>>>
12697>>>>>    Move vBIF_RETURNONLYFSDIRS to BrowseInfo.ulFlags
12698>>>>>
12698>>>>>    // Torben Lund added line below. Move handle of focus object to structure before
12698>>>>>    // calling function. Otherwise, the folderdialog will be started as a seperate task.
12698>>>>>    Move (window_handle(focus(desktop))) to BrowseInfo.hWndOwner
12699>>>>>
12699>>>>>    // null 128 chars into var (make space)
12699>>>>>    Move (Repeat(Character(0), vMAX_PATH)) to sFolder
12700>>>>>
12700>>>>>    // select folder
12700>>>>>    Move (vWin32_SHBrowseForFolder(AddressOf(BrowseInfo))) to lpItemIdList
12701>>>>>    // get selected folder name
12701>>>>>    Move (vWin32_SHGetPathFromIDList(lpItemIdList, AddressOf(sFolder))) to iFolderSelected
12702>>>>>
12702>>>>>    // release memory resources that are used by the ItemIdList
12702>>>>>    Move (vWin32_CoTaskMemFree(lpItemIdList)) to iRetval
12703>>>>>
12703>>>>>    If (iFolderSelected<>0) Begin
12705>>>>>        Move (CString(sFolder)) to sPath
12706>>>>>    End
12706>>>>>>
12706>>>>>    Function_Return  sPath
12707>>>>>End_Function
12708>>>>>
12708>>>>>// returns 0 if the folder is created.
12708>>>>>//         1 if the API-call returned an error.
12708>>>>>Function vCreateDirectory Global String sNewFolder Returns Integer
12710>>>>>    Integer  iRetval bFolderCreated
12710>>>>>    WString  sFolder
12710>>>>>    tvSecurity_attributes SA
12710>>>>>    tvSecurity_attributes SA
12710>>>>>
12710>>>>>    Move False to bFolderCreated
12711>>>>>    If (sNewFolder <> "") Begin
12713>>>>>        Move (SizeOfType(tvSecurity_attributes)) to SA.nLength
12714>>>>>        Move  0                                  to SA.lpDescriptor
12715>>>>>        Move  1                                  to SA.bInheritHandle
12716>>>>>        Move (sNewFolder+Character(0)) to sFolder
12717>>>>>        Move (vWin32_CreateDirectory(sFolder, AddressOf(SA))) to bFolderCreated
12718>>>>>    End
12718>>>>>>
12718>>>>>
12718>>>>>    If (bFolderCreated=false) Begin
12720>>>>>        Move 1 to iRetVal
12721>>>>>    End
12721>>>>>>
12721>>>>>    Function_Return iRetVal
12722>>>>>End_Function
12723>>>>>
12723>>>>>// **WvA: 03-02-2002 Function created.
12723>>>>>// With this function one can remove a directory.
12723>>>>>// returns 0 if the folder is removed.
12723>>>>>//         1 if the API-call returned an error (Use GetLastError API to get the details)
12723>>>>>//         2 if the folder did not exist
12723>>>>>//         3 if the sFolder parameter passed is equal to ""
12723>>>>>Function vRemoveDirectory Global String sFolder Returns Integer
12725>>>>>    Boolean bRemoved
12725>>>>>    WString sPath
12725>>>>>    Integer iRetval
12725>>>>>
12725>>>>>    Move 0     to iRetVal
12726>>>>>    Move False to bRemoved
12727>>>>>    Move (Trim(sFolder)) to sFolder
12728>>>>>    If (sFolder="") Begin
12730>>>>>        Move 3 to iRetVal
12731>>>>>    End
12731>>>>>>
12731>>>>>    If (vFolderExists(sFolder)=False) Begin
12733>>>>>        Move 2 to iRetVal
12734>>>>>    End
12734>>>>>>
12734>>>>>    If (iRetVal=0) Begin
12736>>>>>        // null MAX_PATH chars into var (make space)
12736>>>>>        Move (Repeat(Character(0), vMAX_PATH)) to sPath
12737>>>>>        //
12737>>>>>        Move (Insert(sFolder,sPath,1)) to sPath
12738>>>>>        Move (vWin32_RemoveDirectory(sPath)) to bRemoved
12739>>>>>    End
12739>>>>>>
12739>>>>>
12739>>>>>    If (iRetVal=0 And bRemoved=False) Begin
12741>>>>>        Move 1 to iRetVal
12742>>>>>    End
12742>>>>>>
12742>>>>>    Function_Return iRetVal
12743>>>>>End_Function
12744>>>>>
12744>>>>>// This will perform an operation on a file (e.g. open) with the application
12744>>>>>// registered in the Windows Registry to open that type of file (via its extension)
12744>>>>>// sOperation would be "OPEN" (it could also be "PRINT" etc).
12744>>>>>Procedure vShellExecute Global String sOperation String sDocument String sParameters String sPath
12746>>>>>    Handle  hInstance hWnd
12746>>>>>    // remove any leading/trailing spaces in the string
12746>>>>>    Move (Trim(sDocument)) to sDocument
12747>>>>>    Move (Trim(sPath))     to sPath
12748>>>>>    // Make the strings readable for windows API, by converting them to null-terminated
12748>>>>>    Append sOperation   (Character(0))
12749>>>>>    Append sDocument    (Character(0))
12750>>>>>    Append sParameters  (Character(0))
12751>>>>>    Append sPath        (Character(0))
12752>>>>>
12752>>>>>    Get Window_Handle to hWnd
12753>>>>>    Move (vWin32_ShellExecute (hWnd, sOperation, sDocument, sParameters, sPath, 1)) to hInstance
12754>>>>>    If (hInstance <= 32) Begin
12756>>>>>        Send vDDE_Error_Handler hInstance
12757>>>>>    End
12757>>>>>>
12757>>>>>End_Procedure
12758>>>>>
12758>>>>>Class cShellFileOperations is a Array
12759>>>>>
12759>>>>>    Procedure Construct_Object
12761>>>>>        Forward Send Construct_Object
12763>>>>>        Property Integer piDeleteFlags        0
12764>>>>>        Property Integer piCopyFlags          0
12765>>>>>        Property Integer piMoveFlags          0
12766>>>>>        Property Integer piRenameFlags        0
12767>>>>>
12767>>>>>        Set piDeleteFlags to (vFOF_SILENT Ior vFOF_NOCONFIRMATION)
12768>>>>>        Set piCopyFlags   to (vFOF_SILENT iOr vFOF_NOCONFIRMMKDIR Ior vFOF_NOCONFIRMATION)
12769>>>>>        Set piMoveFlags   to (vFOF_SILENT iOr vFOF_NOCONFIRMMKDIR iOr vFOF_NOCONFIRMATION)
12770>>>>>        Set piRenameFlags to (vFOF_SILENT Ior vFOF_NOCONFIRMATION)
12771>>>>>    End_Procedure
12772>>>>>
12772>>>>>    // This function uses the shell API to perform a file operation on the
12772>>>>>    // files supplied.
12772>>>>>    //
12772>>>>>    Function FileOperation String sSource String sDestination Integer eOperation Integer iFlags Returns Integer
12774>>>>>        Integer  iRetVal
12774>>>>>        Integer  iUserAbort
12774>>>>>        WString  wsSource wsDestination
12774>>>>>        tvShFileOpStruct FOS
12774>>>>>        tvShFileOpStruct FOS
12774>>>>>
12774>>>>>        Move (sSource+Character(0)+Character(0))      to wsSource
12775>>>>>        Move (sDestination+Character(0)+Character(0)) to wsDestination
12776>>>>>
12776>>>>>        If (eOperation <> vFO_DELETE) Begin
12778>>>>>            Move (AddressOf(wsDestination)) to FOS.pTo
12779>>>>>        End
12779>>>>>>
12779>>>>>
12779>>>>>        Move eOperation            to FOS.wFunc
12780>>>>>        Move (AddressOf(wsSource)) to FOS.pFrom
12781>>>>>        Move iFlags                to FOS.fFlags
12782>>>>>
12782>>>>>        Move (vWin32_SHFileOperation(AddressOf(FOS))) to iRetVal
12783>>>>>        Move FOS.fAnyOperationsAborted to iUserAbort
12784>>>>>        If (iUserAbort <> 0) Begin
12786>>>>>            Move 80 to iRetVal  // file Operation Aborted by USER
12787>>>>>        End
12787>>>>>>
12787>>>>>        Function_Return (iRetVal)
12788>>>>>    End_Function
12789>>>>>
12789>>>>>    Function sfoDeleteFile String sFileName Returns Integer
12791>>>>>        Integer  iRetVal
12791>>>>>        Integer  iFlags
12791>>>>>
12791>>>>>        Get piDeleteFlags to iFlags
12792>>>>>        Get FileOperation sFileName "" vFO_DELETE iFlags to iRetVal
12793>>>>>        Function_Return iRetVal
12794>>>>>    End_Function
12795>>>>>
12795>>>>>    Function sfoCopyFile String sSource String sDestination Returns Integer
12797>>>>>        Integer  iRetVal
12797>>>>>        Integer  iFlags
12797>>>>>
12797>>>>>        Get piCopyFlags to iFlags
12798>>>>>        Get FileOperation sSource sDestination vFO_COPY iFlags to iRetVal
12799>>>>>        Function_Return iRetVal
12800>>>>>    End_Function
12801>>>>>
12801>>>>>    Function sfoMoveFile String sSource String sDestination Returns Integer
12803>>>>>        Integer  iRetVal
12803>>>>>        Integer  iFlags
12803>>>>>
12803>>>>>        Get piMoveFlags to iFlags
12804>>>>>        Get FileOperation sSource sDestination vFO_MOVE iFlags to iRetVal
12805>>>>>        Function_Return iRetVal
12806>>>>>    End_Function
12807>>>>>
12807>>>>>    // Rename a file or folder
12807>>>>>    // Returns a nonzero value if the operation failed.
12807>>>>>    Function sfoRenameFile String sSource String sDestination Returns Integer
12809>>>>>        Integer  iRetVal
12809>>>>>        Integer  iFlags
12809>>>>>
12809>>>>>        Get piRenameFlags to iFlags
12810>>>>>        Get FileOperation sSource sDestination vFO_RENAME iFlags to iRetVal
12811>>>>>        Function_Return iRetVal
12812>>>>>    End_Function
12813>>>>>
12813>>>>>
12813>>>>>    //Example:
12813>>>>>    // Get sfoFormatDisk 'A' 0 To dReturnVal    // Formats drive A in QuickFormat
12813>>>>>    //                                          mode.
12813>>>>>
12813>>>>>End_Class
12814>>>>>
12814>>>>>Object oShellFileOperations is a cShellFileOperations
12816>>>>>End_Object
12817>>>>>
12817>>>>>// Restore to the old way of working with the shell file operations.
12817>>>>>// or.. to put lay man terms, allow any of the operations vDeleteFile
12817>>>>>// vCopyFile/vMoveFile/vRenameFile to have an UNDO
12817>>>>>Procedure vWin32fhCompatibilityMode
12819>>>>>    Integer hoSFO
12819>>>>>    Integer iFlags
12819>>>>>
12819>>>>>    Move (vFOF_SILENT Ior vFOF_NOCONFIRMATION Ior vFOF_ALLOWUNDO) to iFlags
12820>>>>>    Move (oShellFileOperations(Self)) to hoSFO
12821>>>>>
12821>>>>>    Set piDeleteFlags of hoSFO to iFlags
12822>>>>>    Set piCopyFlags   of hoSFO to iFlags
12823>>>>>    Set piMoveFlags   of hoSFO to iFlags
12824>>>>>    Set piRenameFlags of hoSFO to iFlags
12825>>>>>End_Procedure
12826>>>>>
12826>>>>>// Delete a file or folder
12826>>>>>// Returns a nonzero value if the operation failed.
12826>>>>>Function vDeleteFile Global String sFileName Returns Integer
12828>>>>>    Integer  iRetVal
12828>>>>>
12828>>>>>    Get sfoDeleteFile of (oShellFileOperations(Self)) sFileName to iRetVal
12829>>>>>    Function_Return iRetVal
12830>>>>>End_Function
12831>>>>>
12831>>>>>// Copy a file or folder
12831>>>>>// Returns a nonzero value if the operation failed.
12831>>>>>Function vCopyFile Global String sSource String sDestination Returns Integer
12833>>>>>    Integer  iRetVal
12833>>>>>
12833>>>>>    Get sfoCopyFile of (oShellFileOperations(Self)) sSource sDestination to iRetVal
12834>>>>>    Function_Return iRetVal
12835>>>>>End_Function
12836>>>>>
12836>>>>>// Move a file or folder
12836>>>>>// Returns a nonzero value if the operation failed.
12836>>>>>Function vMoveFile Global String sSource String sDestination Returns Integer
12838>>>>>    Integer  iRetVal
12838>>>>>
12838>>>>>    Get sfoMoveFile of (oShellFileOperations(Self)) sSource sDestination to iRetVal
12839>>>>>    Function_Return iRetVal
12840>>>>>End_Function
12841>>>>>
12841>>>>>// Rename a file or folder
12841>>>>>// Returns a nonzero value if the operation failed.
12841>>>>>Function vRenameFile Global String sSource String sDestination Returns Integer
12843>>>>>    Integer  iRetVal
12843>>>>>
12843>>>>>    Get sfoRenameFile of (oShellFileOperations(Self)) sSource sDestination to iRetVal
12844>>>>>    Function_Return iRetVal
12845>>>>>End_Function
12846>>>>>
12846>>>>>Function vGetWindowsDirectory Returns String
12848>>>>>    WString wDirectory
12848>>>>>    Integer iRetVal
12848>>>>>
12848>>>>>    Move (ZeroString(vMAX_PATH)) to wDirectory
12849>>>>>    Move (vWin32_GetWindowsDirectory(AddressOf(wDirectory), vMAX_PATH)) to iRetVal
12850>>>>>    If (iRetVal > vMAX_PATH) Begin
12852>>>>>        Move (ZeroString(iRetval)) to wDirectory
12853>>>>>        Move (vWin32_GetWindowsDirectory(AddressOf(wDirectory), iRetVal)) to iRetVal
12854>>>>>    End
12854>>>>>>
12854>>>>>    Function_Return (CString(wDirectory))
12855>>>>>End_Function
12856>>>>>
12856>>>>>Function vGetTempPath Returns String
12858>>>>>    Integer iRetVal
12858>>>>>    WString wTempPath
12858>>>>>
12858>>>>>    Move (ZeroString(vMAX_PATH)) to wTempPath
12859>>>>>    Move (vWin32_GetTempPath(vMAX_PATH, AddressOf(wTempPath))) to iRetVal
12860>>>>>    If (iRetVal > vMAX_PATH) Begin
12862>>>>>        Move (ZeroString(iRetval)) to wTempPath
12863>>>>>        Move (vWin32_GetTempPath(iRetVal, AddressOf(wTempPath))) to iRetVal
12864>>>>>    End
12864>>>>>>
12864>>>>>    Function_Return (CString(wTempPath))
12865>>>>>End_Function
12866>>>>>
12866>>>>>// Courtesy of Marco Kuipers
12866>>>>>Function vMakeTempFile Returns String
12868>>>>>    Integer iRetval
12868>>>>>    String  sTempPath
12868>>>>>    String  sTempFileName
12868>>>>>    String  sPrefixString
12868>>>>>    WString wsTempFileName
12868>>>>>
12868>>>>>    Get vGetTempPath to sTempPath
12869>>>>>    If (sTempPath = "") Begin
12871>>>>>        Get vGetWindowsDirectory to sTempPath  // first fallback
12872>>>>>        If (sTempPath<>"") Begin
12874>>>>>            Move (sTempPath+"\Temp\") to sTempPath
12875>>>>>        End
12875>>>>>>
12875>>>>>    End
12875>>>>>>
12875>>>>>
12875>>>>>    If (sTempPath = "") Begin
12877>>>>>        // second fallback we really do not want to get here as to be fair using current folder as temp
12877>>>>>        // makes little sense. Leaving this in as it was old behavior.
12877>>>>>        Get_Current_Directory to sTempPath
12878>>>>>    End
12878>>>>>>
12878>>>>>
12878>>>>>    Move (Trim(sTempPath)+Character(0)) to sTempPath
12879>>>>>    If (Length(sTempPath)>(vMax_Path-14)) Begin
12881>>>>>        Error DFERR_PROGRAM ("Temporary path"+sTempPath+"is too long, cannot create temporary files.")
12882>>>>>>
12882>>>>>    End
12882>>>>>>
12882>>>>>
12882>>>>>    Move (ZeroString(vMax_Path)) to wsTempFileName
12883>>>>>    Move ("tmp"+Character(0))    to sPrefixString
12884>>>>>    Move (vWin32_GetTempFileName (sTempPath, sPrefixString, 0, AddressOf(wsTempFileName))) to iRetval
12885>>>>>    If (iRetval = 0) Begin  // The api call returns 0 if an error occurs
12887>>>>>    //Get ShowLastError to iRetval
12887>>>>>        Move "" to sTempFileName
12888>>>>>    End
12888>>>>>>
12888>>>>>    Move (Cstring(wsTempFileName)) to sTempFileName
12889>>>>>    Function_Return sTempFileName
12890>>>>>End_Function
12891>>>>>
12891>>>>>// This function creates a uniquely named temporary file in folder sPath
12891>>>>>// The file created will have a prefix based on the first 3 characters in sPrefix
12891>>>>>// Note that you will have to cleanup the tempfile yourself as the function
12891>>>>>// does not take care of that.
12891>>>>>Function vCreateTempFileInPath String sPath String sPrefix Returns String
12893>>>>>    Integer iRetVal
12893>>>>>    String  sTempFileName
12893>>>>>    WString wTempFileName
12893>>>>>
12893>>>>>    Move (sPath+Character(0))   to sPath
12894>>>>>    Move (sPrefix+Character(0)) to sPrefix
12895>>>>>    Move (Pad("", vMAX_PATH))   to wTempFileName
12896>>>>>
12896>>>>>    Move (vWin32_GetTempFileName(sPath, sPrefix, 0, AddressOf(wTempFileName))) to iRetVal
12897>>>>>    Move (Trim(Cstring(wTempFileName))) to sTempFileName
12898>>>>>    Function_Return sTempFileName
12899>>>>>End_Function
12900>>>>>
12900>>>>>//
12900>>>>>// Get a specific shell folder for example to get the desktop folder
12900>>>>>// simply call this function and pass it vCSIDL_DESKTOP
12900>>>>>//
12900>>>>>Function vSHGetFolderPath Integer eFolder Returns String
12902>>>>>    Integer iVoid
12902>>>>>    Handle  hWnd
12902>>>>>    String  sFolder
12902>>>>>    WString wFolder
12902>>>>>
12902>>>>>    Move (Window_Handle(focus(desktop))) to hWnd
12903>>>>>    Move (Repeat(Character(0), vMAX_PATH)) to wFolder
12904>>>>>    Move (vWin32_SHGetFolderPath(hWnd,eFolder, 0, 0,AddressOf(wFolder))) To iVoid
12905>>>>>    Move (CString(wFolder)) to sFolder
12906>>>>>    Function_Return sFolder
12907>>>>>End_Function
12908>>>>>
12908>>>>>// Courtesy Of Vincent Oorsprong
12908>>>>>Function vConvertFileDateTime Global DWord dwLowDateTime DWord dwHighDateTime Returns String
12910>>>>>    String  sFileDateTime
12910>>>>>    WString wFormattedTime wFormattedDate
12910>>>>>    Integer iSuccess iLenCcTime iDataLength iLenCcDate
12910>>>>>    tvFileTime   FileTime
12910>>>>>    tvFileTime   FileTime
12910>>>>>    tvSystemTime SystemTime
12910>>>>>    tvSystemTime SystemTime
12910>>>>>
12910>>>>>    Move "" to sFileDateTime
12911>>>>>    Move dwLowDateTime  to FileTime.dwLowDateTime
12912>>>>>    Move dwHighDateTime to FileTime.dwHighDateTime
12913>>>>>
12913>>>>>    Move 0 to SystemTime.wYear
12914>>>>>
12914>>>>>    Move (vWin32_FileTimeToSystemTime (AddressOf(FileTime), AddressOf(SystemTime))) to iSuccess
12915>>>>>    If (iSuccess = 1) Begin
12917>>>>>        Move (ZeroString(255))               to wFormattedTime
12918>>>>>        Move (SizeOfWString(wFormattedTime)) to iLenCcTime
12919>>>>>        Move (vWin32_GetTimeFormat (LOCALE_USER_DEFAULT, 0, AddressOf(SystemTime), 0, AddressOf(wFormattedTime), iLenCcTime)) to iDataLength
12920>>>>>        Move (ZeroString(255))               to wFormattedDate
12921>>>>>        Move (SizeOfWString(wFormattedDate)) to iLenCcDate
12922>>>>>        Move (vWin32_GetDateFormat (LOCALE_USER_DEFAULT, 0, AddressOf(SystemTime), 0, AddressOf(wFormattedDate), iLenCcDate)) to iDataLength
12923>>>>>        Move (Cstring (wFormattedDate)  * Cstring (wFormattedTime)) to sFileDateTime
12924>>>>>    End
12924>>>>>>
12924>>>>>    Function_Return sFileDateTime
12925>>>>>End_Function
12926>>>>>
12926>>>>>// **WvA:
12926>>>>>// A windows replacement for the standard function FileExists.
12926>>>>>// This version will also return (true) for a file when it is open by an application.
12926>>>>>// Note that you can apply normal windows mask-signs in the filename such as * and ?
12926>>>>>// Example: Get vFilePathExists "C:\config.sy?"
12926>>>>>// This will return true if you have a file matching these conditions. (aka config.sys)
12926>>>>>Function vFilePathExists Global String sFilePathMask Returns Integer
12928>>>>>    String  sDirSep
12928>>>>>    Handle  hFindFile
12928>>>>>    Integer iVoid
12928>>>>>    tvWin32FindData FindData
12928>>>>>    tvWin32FindData FindData
12928>>>>>
12928>>>>>    Move vINVALID_HANDLE_VALUE to hFindFile
12929>>>>>    Move (Trim(sFilePathMask)) to sFilePathMask
12930>>>>>
12930>>>>>    If (Length(sFilePathMask)>0) Begin
12932>>>>>        // 2014-09-29 NGS Remove any trailing dir separators, as they make the function fail.
12932>>>>>        Move (sysconf(SYSCONF_DIR_SEPARATOR)) to sDirSep
12933>>>>>        While (Right(sFilePathMask, 1) = sDirSep)
12937>>>>>            Move (Left(sFilePathMask, Length(sFilePathMask) -1)) to sFilePathMask
12938>>>>>        Loop
12939>>>>>>
12939>>>>>
12939>>>>>        Move 0 to FindData.dwReserved0        // initialize the variable so we can get an address from it.
12940>>>>>        Move (vWin32_FindFirstFile (sFilePathMask, AddressOf(FindData))) to hFindFile
12941>>>>>        Move (vWin32_FindClose (hFindFile)) to iVoid
12942>>>>>    End
12942>>>>>>
12942>>>>>    Function_Return (hFindFile <> vINVALID_HANDLE_VALUE)
12943>>>>>End_Function
12944>>>>>
12944>>>>>
12944>>>>>//
12944>>>>>// Returns the amount of files in the folder (if it exists)
12944>>>>>// Returns -1 if folder doesn't exist.
12944>>>>>// The files "." and ".." are not counted.
12944>>>>>//
12944>>>>>Function vFolderFileCount Global String sFolderName Returns Integer
12946>>>>>    Boolean bFound
12946>>>>>    Handle  hFindFile
12946>>>>>    Integer iCount  iVoid
12946>>>>>    Integer iSuccess
12946>>>>>    String  sFileName
12946>>>>>    tvWin32FindData FindData
12946>>>>>    tvWin32FindData FindData
12946>>>>>
12946>>>>>    Move -1 to iCount
12947>>>>>    Get vFolderFormat sFolderName to sFolderName
12948>>>>>    Move (sFolderName+"*") to sFolderName // match any filename in the folder
12949>>>>>    Move 0 to FindData.dwReserved0        // initialize the variable so we can get an address from it.
12950>>>>>    Move (vWin32_FindFirstFile (sFolderName, AddressOf(FindData))) to hFindFile
12951>>>>>    Move (hFindFile<>vINVALID_HANDLE_VALUE) to bFound
12952>>>>>    If (bFound) Begin
12954>>>>>        Move 0 to iCount
12955>>>>>    End
12955>>>>>>
12955>>>>>    While (bFound)
12959>>>>>        Increment iCount
12960>>>>>        Move (PointerToWString(AddressOf(FindData.cFileName))) to sFileName
12961>>>>>        If (sFileName="." or sFileName="..") Begin
12963>>>>>            Decrement iCount
12964>>>>>        End
12964>>>>>>
12964>>>>>        Move (vWin32_FindNextFile(hFindFile, AddressOf(FindData))) to iSuccess
12965>>>>>        Move (iSuccess<>0) to bFound
12966>>>>>    Loop
12967>>>>>>
12967>>>>>    Move (vWin32_FindClose (hFindFile)) to iVoid
12968>>>>>    Function_Return iCount
12969>>>>>End_Function
12970>>>>>
12970>>>>>// Create the folder, including intermediate directories.
12970>>>>>// Don't panic if the folder already exists.
12970>>>>>// Michael Mullan June 2009.
12970>>>>>Function vshCreateDirectoryEX Global String sNewFolder Returns Integer
12972>>>>>    String  sFolder
12972>>>>>    Integer iRetval iFolderCreated
12972>>>>>    tvSecurity_attributes SA
12972>>>>>    tvSecurity_attributes SA
12972>>>>>
12972>>>>>    Move 0 to iFolderCreated
12973>>>>>
12973>>>>>    // null MAX_PATH chars into var (make space)
12973>>>>>    Move (Repeat(Character(0), vMAX_PATH)) to sFolder
12974>>>>>    If (sNewFolder <> "") Begin
12976>>>>>
12976>>>>>        Move (SizeOfType(tvSecurity_attributes)) to SA.nLength
12977>>>>>        Move  0  to SA.lpDescriptor
12978>>>>>        Move  1  to SA.bInheritHandle
12979>>>>>
12979>>>>>        //
12979>>>>>        Move (sNewFolder+"") to sFolder
12980>>>>>        Move (vWin32_SHCreateDirectoryEx(0,sFolder, AddressOf(SA))) to iFolderCreated
12981>>>>>    End
12981>>>>>>
12981>>>>>
12981>>>>>    If (iFolderCreated <> 0) Begin
12983>>>>>        Move 1 to iRetVal
12984>>>>>        Case Begin
12984>>>>>            Case (iFolderCreated = 161)
12986>>>>>                Error DFERR_OPERATOR ("Path " + sNewFolder + " is Not Valid (ERROR_BAD_PATHNAME)")
12987>>>>>>
12987>>>>>                Case Break
12988>>>>>            Case (iFolderCreated = 206)
12991>>>>>                Error DFERR_OPERATOR ("Path " + sNewFolder + " is Not Valid (ERROR_FILENAME_EXCED_RANGE)")
12992>>>>>>
12992>>>>>                Case Break
12993>>>>>            Case (iFolderCreated = 3)
12996>>>>>                Error DFERR_OPERATOR ("Path " + sNewFolder + " is Not Valid (ERROR_PATH_NOT_FOUND)")
12997>>>>>>
12997>>>>>                Case Break
12998>>>>>            Case (iFolderCreated = 80)
13001>>>>>                Move 0 to iRetval // "ERROR_FILE_EXISTS"     not really an error
13002>>>>>                Case Break
13003>>>>>            Case (iFolderCreated = 183)
13006>>>>>                Move 0 to iRetval //  "ERROR_ALREADY_EXISTS"     not really an error
13007>>>>>                Case Break
13008>>>>>            Case (iFolderCreated = 1223)
13011>>>>>                Error DFERR_OPERATOR ("Path " + sNewFolder + " is Not Valid (ERROR_CANCELLED)")
13012>>>>>>
13012>>>>>                Case Break
13013>>>>>            Case Else
13013>>>>>                Error DFERR_OPERATOR ("Folder Creation Error # " + String(ifoldercreated) + "\n" + sNewFolder + "(FILE_CREATION_ERROR)")
13014>>>>>>
13014>>>>>        Case End
13014>>>>>    End
13014>>>>>>
13014>>>>>    Function_Return iRetVal
13015>>>>>End_Function
13016>>>>>
13016>>>>>Function vWin32_APIFileSize Global String sFileName Returns Integer
13018>>>>>    DWord   dwFileSizeHigh dwFileSizeLow
13018>>>>>    Integer iFileSize iVoid
13018>>>>>    Handle  hFindFile
13018>>>>>    tvWin32FindData FindData
13018>>>>>    tvWin32FindData FindData
13018>>>>>
13018>>>>>    Move (sFileName+"") to sFileName
13019>>>>>    Move 0 to FindData.dwReserved0        // initialize the variable so we can get an address from it.
13020>>>>>    Move (vWin32_FindFirstFile (sFileName, AddressOf(FindData))) to hFindFile
13021>>>>>    If (hFindFile<>vINVALID_HANDLE_VALUE) Begin
13023>>>>>        Move FindData.nFileSizeHigh to dwFileSizeHigh
13024>>>>>        Move FindData.nFileSizeLow  to dwFileSizeLow
13025>>>>>    End
13025>>>>>>
13025>>>>>    Move (vWin32_FindClose(hFindFile)) to iVoid
13026>>>>>    Move ((dwFileSizeHigh * vMaxDword) + dwFileSizeLow) to iFileSize
13027>>>>>
13027>>>>>    Function_Return iFileSize
13028>>>>>End_Function
13029>>>>>
13029>>>>>//
13029>>>>>// Based on code in Peter Crook's Browse folder workspace
13029>>>>>// http://support.dataaccess.com/Forums/showthread.php?54383-Browse-for-Folder-package&p=282249#post282249
13029>>>>>//
13029>>>>>//=============================================================================
13029>>>>>// Verifies that a path is a valid directory.
13029>>>>>//
13029>>>>>// Returns TRUE if the path is a valid directory, or FALSE otherwise.
13029>>>>>//
13029>>>>>// Parameters:
13029>>>>>//      sPath - Address of the path to verify.
13029>>>>>//=============================================================================
13029>>>>>Function vPathIsDirectory Global String sPath Returns Boolean
13031>>>>>    Integer iResult
13031>>>>>    Boolean bRetVal
13031>>>>>
13031>>>>>    Move false to bRetVal
13032>>>>>    Move (sPath - Character (0)) to sPath
13033>>>>>    Move (vWin32_PathIsDirectory (sPath)) to iResult
13034>>>>>    If (iResult<>0) Begin
13036>>>>>        Move True to bRetVal
13037>>>>>    End
13037>>>>>>
13037>>>>>
13037>>>>>    Function_Return bRetVal
13038>>>>>End_Function
13039>>>>>
13039>>>
13039>>>//
13039>>>// Gets the string from the right of the last sStopChar in sFrom
13039>>>// If sStopChar has no occurences in the string an empty string is
13039>>>// returned.
13039>>>Function StringFromRightOfChar Global String sFrom String sStopChar Returns String
13041>>>    String  sRetVal
13041>>>    String  sChar
13041>>>    Integer iLength
13041>>>    Integer iPos
13041>>>    Boolean bStopChar
13041>>>    Move "" to sRetval
13042>>>    Move (Length(sFrom)) to iLength
13043>>>    If ((iLength>0) And (Pos(sStopChar,sFrom) <> 0)) Begin
13045>>>        Move iLength   to iPos
13046>>>        Move (False)   to bStopChar
13047>>>        While Not bStopChar
13051>>>            Move (Mid(sFrom,1,iPos)) to sChar
13052>>>            Decrement iPos
13053>>>            If ((sChar=sStopChar) Or (iPos<1)) Begin
13055>>>                Move (True) to bStopChar
13056>>>            End
13056>>>>
13056>>>            Else Begin
13057>>>                Move (sChar+sRetVal) to sRetVal
13058>>>            End
13058>>>>
13058>>>        Loop
13059>>>>
13059>>>    End
13059>>>>
13059>>>    Function_Return sRetVal
13060>>>End_Function
13061>>>
13061>>>// Pre:  sFileName contains the complete path of the file.
13061>>>// Post: returns the complete path of the file.
13061>>>// This function is inspired on function SEQ_ExtractPathFromFileName of Sture Andersen.
13061>>>Function ParseFolderName Global String sFileName Returns String
13063>>>    String sFile
13063>>>    String sFolderName
13063>>>    String sDirSep // this is "\" for windows, or "/" for unix
13063>>>
13063>>>    Move "" to sFolderName
13064>>>    Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
13065>>>    If sDirSep In sFileName Begin
13067>>>        Move (StringFromRightOfChar(sFileName,sDirSep)) to sFile
13068>>>        Move (Left(sFileName,Length(sFileName)-Length(sFile))) to sFolderName
13069>>>    End
13069>>>>
13069>>>    Else If ":" In sFileName Begin
13072>>>        Move (StringFromRightOfChar(sFileName,":")) to sFile
13073>>>        Move (Replace(sFile,sFileName,"")) to sFolderName
13074>>>    End
13074>>>>
13074>>>    Function_Return sFolderName
13075>>>End_Function
13076>>>
13076>>>// Pre:  sFileName contains the complete path of the file.
13076>>>// post: The returned filename has it's path removed, but will have a extension
13076>>>Function ParseFileName Global String sFileName Returns String
13078>>>    String sFolderName
13078>>>    String sDirSep // this is "\" for windows, or "/" for unix
13078>>>
13078>>>    Move (sysconf(SYSCONF_DIR_SEPARATOR)) to sDirSep
13079>>>    Get ParseFolderName sFileName to sFolderName
13080>>>    If (sFolderName <> "") Begin
13082>>>        Move (Replace(sFolderName,sFileName,"")) to sFileName
13083>>>    End
13083>>>>
13083>>>    Move (Replace(sDirSep,sFileName,"")) to sFileName
13084>>>    Function_Return sFilename
13085>>>End_Function
13086>>>
13086>>>// Pre:  sFileName may contain the complete path of the file.
13086>>>//       or contain multiple dots in the filename, so temp.gif.bak will
13086>>>//       return "bak" as the extension and not "gif"
13086>>>// Post: returns the extension only, this extension can be a valid unixlike extension
13086>>>//       such as "html" or "java"
13086>>>Function ParseFileExtension Global String sFileName Returns String
13088>>>    String  sFileExtension
13088>>>    Get ParseFileName sFileName to sFileName // takes care of corner case with path containing a ".". eg. c:\frank.cheng\hello
13089>>>    Get StringFromRightOfChar sFileName "." to sFileExtension
13090>>>    Function_Return sFileExtension
13091>>>End_Function
13092>>>
13092>>>Define CS_DDE_ERR_UNKNOWN_LINE2   For ".\n"
13092>>>
13092>>>Function DDE_Error_To_String Integer iErrorID Returns String
13094>>>    String sMessage
13094>>>    Case Begin
13094>>>        Case (iErrorID = vERROR_FILE_NOT_FOUND)
13096>>>            Move CS_DDE_ERR_FILE_NOT_FOUND to sMessage
13097>>>            Case Break
13098>>>        Case (iErrorID = vERROR_PATH_NOT_FOUND)
13101>>>            Move CS_DDE_ERR_PATH_NOT_FOUND to sMessage
13102>>>            Case Break
13103>>>        Case (iErrorID = vERROR_BAD_FORMAT)
13106>>>            Move CS_DDE_ERR_BAD_FORMAT to sMessage
13107>>>            Case Break
13108>>>        Case (iErrorID = vSE_ERR_ACCESSDENIED)
13111>>>            Move CS_DDE_ERR_ACCESSDENIED to sMessage
13112>>>            Case Break
13113>>>        Case (iErrorID = vSE_ERR_ASSOCINCOMPLETE)
13116>>>            Move CS_DDE_ERR_ASSOCINCOMPLETE to sMessage
13117>>>            Case Break
13118>>>        Case (iErrorID = vSE_ERR_DDEBUSY)
13121>>>            Move CS_DDE_ERR_DDEBUSY to sMessage
13122>>>            Case Break
13123>>>        Case (iErrorID = vSE_ERR_DDEFAIL)
13126>>>            Move CS_DDE_ERR_DDEFAIL to sMessage
13127>>>            Case Break
13128>>>        Case (iErrorID = vSE_ERR_DDETIMEOUT)
13131>>>            Move CS_DDE_ERR_DDETIMEOUT to sMessage
13132>>>            Case Break
13133>>>        Case (iErrorID = vSE_ERR_DLLNOTFOUND)
13136>>>            Move CS_DDE_ERR_DLLNOTFOUND to sMessage
13137>>>            Case Break
13138>>>        Case (iErrorID = vSE_ERR_NOASSOC)
13141>>>            Move CS_DDE_ERR_NOASSOC to sMessage
13142>>>            Case Break
13143>>>        Case ((iErrorID = vSE_ERR_OOM) Or (iErrorID = 0))
13146>>>            Move CS_DDE_ERR_OOM to sMessage
13147>>>            Case Break
13148>>>        Case (iErrorID = vSE_ERR_PNF)
13151>>>            Move CS_DDE_ERR_PNF to sMessage
13152>>>            Case Break
13153>>>        Case (iErrorID = vSE_ERR_SHARE)
13156>>>            Move CS_DDE_ERR_SHARE to sMessage
13157>>>            Case Break
13158>>>        Case Else
13158>>>            Move CS_DDE_ERR_UNKNOWN_LINE1 to sMessage
13159>>>            Move (sMessage*Trim(iErrorID)*CS_DDE_ERR_UNKNOWN_LINE2) to sMessage
13160>>>            Case Break
13161>>>    Case End
13161>>>    Function_Return sMessage
13162>>>End_Function
13163>>>
13163>>>Procedure vDDE_Error_Handler Integer iErrorID
13165>>>    String sMessage
13165>>>    Get DDE_Error_To_String iErrorID to sMessage
13166>>>    Append sMessage CS_DDE_ERR_HANDL_PAKTC //  "Press a key to continue..."
13167>>>    Send Stop_Box sMessage CS_DDE_ERR_HANDL_CAPTION
13168>>>End_Procedure
13169>>>
13169>>>
13169>>>// This function informs the user that he entered a yet unknown folder and
13169>>>// asks if he/she wants to create the folder (Yes/No)
13169>>>// Choice: "Yes" - this creates the folder
13169>>>//                 if successful, the function returns false
13169>>>//                 else it will be true.
13169>>>// Choice: "No"  - returns TRUE, This allows the programmer to take action
13169>>>//                 For example: to stop a save
13169>>>// Precondition: A foldername must be entered. We do not check for empty paths
13169>>>// This function returns a non-zero value if the folder isn't created afterwards
13169>>>Function vVerifyNewFolder Global String sFolderName Returns Integer
13171>>>    Integer bIsNotValid
13171>>>    Integer iUsers_Choice
13171>>>    String  sMessage
13171>>>
13171>>>    If (vFolderExists(sFolderName) Eq 0) Begin
13173>>>        Move "The folder '" to sMessage
13174>>>        Append sMessage sFolderName
13175>>>        Append sMessage "' does not yet exist,\n"
13176>>>        Append sMessage "Do you want to create it now?"
13177>>>        Get YesNo_Box sMessage "Confirm" MB_DefButton1 to iUsers_Choice
13178>>>        Case Begin
13178>>>            Case (iUsers_Choice = MBR_Yes)
13180>>>                Move (vCreateDirectory(sFolderName)) to bIsNotValid
13181>>>                If bIsNotValid Begin
13183>>>                    Move "An error occurred while trying to create folder '" to sMessage
13184>>>                    Append sMessage sFolderName "'.\n\n"
13186>>>                    Send Info_Box sMessage "Info"
13187>>>                End
13187>>>>
13187>>>                Case Break
13188>>>            Case (iUsers_Choice = MBR_No)
13191>>>                Move dfTrue to bIsNotValid // Cancel the save
13192>>>                Case Break
13193>>>        Case End
13193>>>    End
13193>>>>
13193>>>    Function_Return bIsNotValid
13194>>>End_Function
13195>>>
13195>>>// **WvA
13195>>>// Formats a foldername by first trimming it and after that by sticking a
13195>>>// directory separator (/\) to the end if it doesn't have one there already.
13195>>>// The folder may contain a drive letter or UNC encoding.
13195>>>Function vFolderFormat Global String sFolderName Returns String
13197>>>    String sDirSep
13197>>>    Move (sysconf(SYSCONF_DIR_SEPARATOR)) to sDirSep  // normally \ (backslash)
13198>>>    Move (Trim(sFolderName)) to sFolderName
13199>>>    If (Right(sFolderName,1)<>sDirSep) Begin
13201>>>        Move (sFolderName+sDirSep) to sFolderName
13202>>>    End
13202>>>>
13202>>>    Function_Return sFolderName
13203>>>End_Function
13204>>>
13204>>>//
13204>>>// Gets the parent path of the currently supplied path
13204>>>// Returns "" when we are at the root folder.
13204>>>//
13204>>>Function vParentPath Global String sPath Returns String
13206>>>    String sStrip sDirSep
13206>>>
13206>>>    Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
13207>>>    Move (Trim(sPath)) to sPath
13208>>>    If (Right(sPath,1) = sDirSep) Begin
13210>>>        Move (Left(sPath,Length(sPath)-1)) to sPath
13211>>>    End
13211>>>>
13211>>>    If (Pos(sDirSep, sPath)) Begin
13213>>>        Move (StringFromRightOfChar(sPath, sDirSep)) to sStrip
13214>>>        Move (Left(sPath,Length(sPath)-Length(sStrip))) to sPath
13215>>>    End
13215>>>>
13215>>>    Else Begin
13216>>>        Move "" to sPath
13217>>>    End
13217>>>>
13217>>>    Function_Return sPath
13218>>>End_Function
13219>Use oEditContextMenu.pkg
Including file: oEditContextMenu.pkg    (C:\Program Files\DataFlex 23.0\Pkg\oEditContextMenu.pkg)
13219>>>Use cCJStandardMenuItemClasses.pkg
Including file: cCJStandardMenuItemClasses.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCJStandardMenuItemClasses.pkg)
13219>>>>>Use Dfpanel.pkg
Including file: Dfpanel.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Dfpanel.pkg)
13219>>>>>>>Use Windows.pkg
13219>>>>>>>Use dfcolor.pkg
13219>>>>>>>
13219>>>>>>>//  Used when help object makes a request to the object requesting help.
13219>>>>>>>Use HelpSystemConstants.pkg
13219>>>>>>>
13219>>>>>>>Enumeration_List
13219>>>>>>>    Define amTop
13219>>>>>>>    Define amBottom
13219>>>>>>>    Define amLeft
13219>>>>>>>    Define amRight
13219>>>>>>>End_Enumeration_List
13219>>>>>>>
13219>>>>>>>Use DFAStBar.pkg  // df application status bar
Including file: Dfastbar.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Dfastbar.pkg)
13219>>>>>>>>>Register_Procedure Add_Border_Object
13219>>>>>>>>>Register_Procedure Remove_Border_Object
13219>>>>>>>>>
13219>>>>>>>>>Use DFStatBr.pkg
Including file: Dfstatbr.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Dfstatbr.pkg)
13219>>>>>>>>>>>Use windows.pkg
13219>>>>>>>>>>>Use CommCtrl.pkg
13219>>>>>>>>>>>Use WinGDI.pkg
13219>>>>>>>>>>>
13219>>>>>>>>>>>
13219>>>>>>>>>>>
13219>>>>>>>>>>>
13219>>>>>>>>>>>
13219>>>>>>>>>>>
13219>>>>>>>>>>>Class BasicStatusBar is a dfBaseList
13220>>>>>>>>>>>    Procedure Construct_Object
13222>>>>>>>>>>>        Forward Send Construct_Object
13224>>>>>>>>>>>        Property Integer Private.Simple_State False
13225>>>>>>>>>>>        
13225>>>>>>>>>>>        Property String  Private.Simple_Value ''
13226>>>>>>>>>>>        
13226>>>>>>>>>>>        Property Integer Tooltips_State False // this does nothing
13227>>>>>>>>>>>        Set Scroll_Bar_Visible_State to False
13228>>>>>>>>>>>        Set Border_Style             to Border_None
13229>>>>>>>>>>>        Set External_class_Name "cObsoleteBasicStatusBar" to "msctls_statusbar32"
13230>>>>>>>>>>>        Set Color to clDefault
13231>>>>>>>>>>>    End_Procedure
13232>>>>>>>>>>>    
13232>>>>>>>>>>>    Procedure End_Construct_Object
13234>>>>>>>>>>>        //If (Tooltips_State(self)) Set Window_Style To SBT_TOOLTIPS True
13234>>>>>>>>>>>        Forward Send End_Construct_Object
13236>>>>>>>>>>>    End_Procedure
13237>>>>>>>>>>>    
13237>>>>>>>>>>>    Procedure Set Simple_State Integer bState
13239>>>>>>>>>>>        Handle hWnd
13239>>>>>>>>>>>        Set Private.Simple_state to bState
13240>>>>>>>>>>>        Get Window_Handle to hWnd
13241>>>>>>>>>>>        If hWnd ;            Send Windows_Message SB_SIMPLE bState 0
13244>>>>>>>>>>>    End_Procedure
13245>>>>>>>>>>>    
13245>>>>>>>>>>>    Function Simple_State Returns Integer
13247>>>>>>>>>>>        Function_Return (Private.Simple_state(Self))
13248>>>>>>>>>>>    End_Function
13249>>>>>>>>>>>    
13249>>>>>>>>>>>    Procedure Set Simple_Value String sValue
13251>>>>>>>>>>>        Integer iVoid
13251>>>>>>>>>>>        Handle hWnd
13251>>>>>>>>>>>        WString wsValue
13251>>>>>>>>>>>        
13251>>>>>>>>>>>        Set Private.Simple_Value to sValue
13252>>>>>>>>>>>        
13252>>>>>>>>>>>        Get Window_Handle to hWnd
13253>>>>>>>>>>>        If hWnd Begin
13255>>>>>>>>>>>            Append sValue ( Character(0) )
13256>>>>>>>>>>>            Move sValue to wsValue
13257>>>>>>>>>>>            
13257>>>>>>>>>>>            Send Windows_Message SB_SETTEXT (255 + sbNORMAL) (AddressOf(wsValue))
13258>>>>>>>>>>>        End
13258>>>>>>>>>>>>
13258>>>>>>>>>>>        Set Simple_State to True
13259>>>>>>>>>>>    End_Procedure
13260>>>>>>>>>>>    
13260>>>>>>>>>>>    Function Simple_Value Returns String
13262>>>>>>>>>>>        Function_Return (private.Simple_value(Self))
13263>>>>>>>>>>>    End_Function
13264>>>>>>>>>>>    
13264>>>>>>>>>>>    Procedure Activate
13266>>>>>>>>>>>    End_Procedure
13267>>>>>>>>>>>    
13267>>>>>>>>>>>    Procedure Page_Object Integer iState
13269>>>>>>>>>>>        Handle hWnd
13269>>>>>>>>>>>        Get Window_handle to hWnd
13270>>>>>>>>>>>        Forward Send Page_Object iState
13272>>>>>>>>>>>        If (iState and hWnd = 0) ;            Send DoRestructure
13275>>>>>>>>>>>    End_Procedure
13276>>>>>>>>>>>    
13276>>>>>>>>>>>    Procedure Page Integer iState
13278>>>>>>>>>>>        Forward Send Page iState
13280>>>>>>>>>>>        If (iState=1) Begin
13282>>>>>>>>>>>            Send Windows_Message SB_SETBKCOLOR 0 (Color(Self))
13283>>>>>>>>>>>        End
13283>>>>>>>>>>>>
13283>>>>>>>>>>>    End_Procedure
13284>>>>>>>>>>>    
13284>>>>>>>>>>>    Procedure DoRestructure
13286>>>>>>>>>>>        Integer iLoop icItems iWidth icWidth iRetVal
13286>>>>>>>>>>>        Handle hWnd
13286>>>>>>>>>>>        Integer[] aItems
13287>>>>>>>>>>>        
13287>>>>>>>>>>>        Get Window_Handle to hWnd
13288>>>>>>>>>>>        If hWnd Begin
13290>>>>>>>>>>>            
13290>>>>>>>>>>>            Send Windows_Message SB_SIMPLE (Simple_State(Self)) 0
13291>>>>>>>>>>>            Set Simple_Value to (Simple_Value(Self))
13292>>>>>>>>>>>            
13292>>>>>>>>>>>            Get Item_Count to icItems
13293>>>>>>>>>>>            
13293>>>>>>>>>>>            For iLoop from 1 to (icItems -1)
13299>>>>>>>>>>>>
13299>>>>>>>>>>>                Get Message (iLoop -1) to iWidth
13300>>>>>>>>>>>                Move (icWidth + iWidth) to icWidth
13301>>>>>>>>>>>                Move (icWidth) to aItems[iLoop - 1]
13302>>>>>>>>>>>                
13302>>>>>>>>>>>                Set Value (iLoop -1) to (Value(Self, iLoop -1))
13303>>>>>>>>>>>            Loop
13304>>>>>>>>>>>>
13304>>>>>>>>>>>            // Now make the last item 'spring' to the end
13304>>>>>>>>>>>            Move -1 to aItems[icItems - 1]
13305>>>>>>>>>>>                        
13305>>>>>>>>>>>            Move (SendMessage(hWnd, SB_SETPARTS, icItems, AddressOf(aItems))) to iRetVal
13306>>>>>>>>>>>            For iLoop from 0 to (icItems -1)
13312>>>>>>>>>>>>
13312>>>>>>>>>>>                Set Value iLoop to (Value(Self, iLoop))
13313>>>>>>>>>>>            Loop
13314>>>>>>>>>>>>
13314>>>>>>>>>>>            
13314>>>>>>>>>>>        End
13314>>>>>>>>>>>>
13314>>>>>>>>>>>    End_Procedure
13315>>>>>>>>>>>    
13315>>>>>>>>>>>    Procedure Add_Item Integer iItemWidth String sValue // this is obsolete
13317>>>>>>>>>>>        Integer iRetVal icItems
13317>>>>>>>>>>>        Handle hWnd
13317>>>>>>>>>>>        
13317>>>>>>>>>>>        Forward Send Add_Item iItemWidth sValue
13319>>>>>>>>>>>        Get Item_Count to icItems
13320>>>>>>>>>>>        Set Value (icItems -1) to sValue
13321>>>>>>>>>>>        If (Window_Handle(Self)) ;            Send DoRestructure
13324>>>>>>>>>>>        Set Current_item to (icItems -1)
13325>>>>>>>>>>>    End_Procedure
13326>>>>>>>>>>>    
13326>>>>>>>>>>>    Procedure AddPane Integer iItemWidth String sValue Integer iStyle
13328>>>>>>>>>>>        Integer iRetVal icItem
13328>>>>>>>>>>>        Handle hWnd
13328>>>>>>>>>>>        
13328>>>>>>>>>>>        Send Add_Item iItemWidth sValue
13329>>>>>>>>>>>        Get Item_Count to icItem
13330>>>>>>>>>>>        Set Value (icItem -1) to sValue
13331>>>>>>>>>>>        Set Aux_Value (icItem -1) to iStyle
13332>>>>>>>>>>>        If (Window_Handle(Self)) ;            Send DoRestructure
13335>>>>>>>>>>>    End_Procedure
13336>>>>>>>>>>>    
13336>>>>>>>>>>>    Procedure AutoSizeLocate
13338>>>>>>>>>>>        Integer iSize iRetVal
13338>>>>>>>>>>>        Handle hWnd
13338>>>>>>>>>>>        Get Window_Handle to hWnd
13339>>>>>>>>>>>        Delegate Get GuiSize to iSize
13341>>>>>>>>>>>        If hWnd ;            Move (SendMessage(hWnd, WM_SIZE, 0, iSize)) to iRetVal
13344>>>>>>>>>>>    End_Procedure
13345>>>>>>>>>>>    
13345>>>>>>>>>>>    Procedure Set Item_Display_Style Integer iItem Integer iStyle  // this is obsolete, Use PaneStyle
13347>>>>>>>>>>>        If (num_arguments = 2) ;            Set Aux_Value iItem to iStyle
13350>>>>>>>>>>>        Else ;            Set Aux_Value (current_item(Self)) to iItem //iStyle passed as arg1
13352>>>>>>>>>>>    End_Procedure
13353>>>>>>>>>>>    
13353>>>>>>>>>>>    Function Item_Display_Style Integer iItem Returns Integer // this is obsolete, use PaneStyle
13355>>>>>>>>>>>        Function_Return (Aux_value(Self, iItem))
13356>>>>>>>>>>>    End_Function
13357>>>>>>>>>>>    
13357>>>>>>>>>>>    Procedure Set Value Integer iItem String sValue
13359>>>>>>>>>>>        Handle hWnd
13359>>>>>>>>>>>        Integer iRetVal iTextStyle iVoid
13359>>>>>>>>>>>        String sNull
13359>>>>>>>>>>>        WString wsValue
13359>>>>>>>>>>>        
13359>>>>>>>>>>>        Forward Set Value iItem to sValue
13361>>>>>>>>>>>        Get Window_Handle to hWnd
13362>>>>>>>>>>>        If hWnd Begin
13364>>>>>>>>>>>            Get Item_Display_Style iItem to iTextStyle
13365>>>>>>>>>>>            Append sValue ( Character(0) )
13366>>>>>>>>>>>            Move sValue to wsValue
13367>>>>>>>>>>>            Move (SendMessage(hWnd, SB_SETTEXT, iItem + iTextStyle, AddressOf(wsValue))) to iRetVal
13368>>>>>>>>>>>        End
13368>>>>>>>>>>>>
13368>>>>>>>>>>>        Set Simple_State to False
13369>>>>>>>>>>>    End_Procedure
13370>>>>>>>>>>>    
13370>>>>>>>>>>>    Function IsSimpleMode Returns Integer
13372>>>>>>>>>>>        Function_Return (WindowsMessage(SB_ISSIMPLE, 0, 0))
13373>>>>>>>>>>>    End_Function
13374>>>>>>>>>>>    
13374>>>>>>>>>>>    Procedure Notify Longptr wParam Longptr lParam
13376>>>>>>>>>>>        Integer iVoid iCode
13376>>>>>>>>>>>        Longptr iPane
13376>>>>>>>>>>>        tWinNmMouse NmMouse
13376>>>>>>>>>>>        tWinNmMouse NmMouse
13376>>>>>>>>>>>        
13376>>>>>>>>>>>        Move (CopyMemory(AddressOf(NmMouse), lParam, SizeOfType(tWinNmMouse))) to iVoid
13377>>>>>>>>>>>        
13377>>>>>>>>>>>        Move NmMouse.hdr.code   to iCode
13378>>>>>>>>>>>        Move NmMouse.dwItemSpec to iPane
13379>>>>>>>>>>>        
13379>>>>>>>>>>>        If (iCode = SBN_SIMPLEMODECHANGE) ;            Send OnSimpleModeChange
13382>>>>>>>>>>>        Else If (iCode = NM_CLICK) ;            Send OnClick            iPane
13386>>>>>>>>>>>        Else If (iCode = NM_DBLCLK) ;            Send OnDoubleClick      iPane
13390>>>>>>>>>>>        Else If (iCode = NM_RCLICK) ;            Send OnRightClick       iPane
13394>>>>>>>>>>>        Else If (iCode = NM_RDBLCLK) ;            Send OnDoubleRightClick iPane
13398>>>>>>>>>>>    End_Procedure
13399>>>>>>>>>>>    
13399>>>>>>>>>>>    //  This needs to be chagned to return the real GUISize of the status bar
13399>>>>>>>>>>>    //  by making API calls.
13399>>>>>>>>>>>    //
13399>>>>>>>>>>>    Function GuiSize Returns Integer
13401>>>>>>>>>>>        Handle hWnd
13401>>>>>>>>>>>        Integer cy cx iVoid
13401>>>>>>>>>>>        tWinRect Rect
13401>>>>>>>>>>>        tWinRect Rect
13401>>>>>>>>>>>        Get Window_Handle to hWnd
13402>>>>>>>>>>>        If hWnd Begin
13404>>>>>>>>>>>            Move (GetWindowRect(hWnd, AddressOf(Rect))) to iVoid
13405>>>>>>>>>>>            Move (Rect.right - Rect.left) to cx
13406>>>>>>>>>>>            Move (Rect.bottom - Rect.top) to cy
13407>>>>>>>>>>>        End
13407>>>>>>>>>>>>
13407>>>>>>>>>>>        Else Begin
13408>>>>>>>>>>>            Move 25 to cy
13409>>>>>>>>>>>            Move 19 to cx
13410>>>>>>>>>>>        End
13410>>>>>>>>>>>>
13410>>>>>>>>>>>        Function_Return ( cy*65536 + cx )
13411>>>>>>>>>>>    End_Function
13412>>>>>>>>>>>    
13412>>>>>>>>>>>    Function PaneTextWidth WString sText Returns Integer
13414>>>>>>>>>>>        Handle hWnd hDC
13414>>>>>>>>>>>        Integer bOK
13414>>>>>>>>>>>        tWinPoint Point
13414>>>>>>>>>>>        tWinPoint Point
13414>>>>>>>>>>>        
13414>>>>>>>>>>>        Get Window_Handle to hWnd
13415>>>>>>>>>>>        Move (GetDC(hWnd)) to hDC
13416>>>>>>>>>>>        
13416>>>>>>>>>>>        Move (GetTextExtentW(hDC, AddressOf(sText), length(sText), AddressOf(Point))) to bOk
13417>>>>>>>>>>>        
13417>>>>>>>>>>>        Move (ReleaseDC(hWnd, hDC)) to hDC
13418>>>>>>>>>>>        
13418>>>>>>>>>>>        Function_Return Point.x
13419>>>>>>>>>>>    End_Function
13420>>>>>>>>>>>    
13420>>>>>>>>>>>    Procedure Set PaneWidth Integer iPane Integer cxPane
13422>>>>>>>>>>>        Set Message iPane to cxPane
13423>>>>>>>>>>>    End_Procedure
13424>>>>>>>>>>>    
13424>>>>>>>>>>>    Function PaneWidth Integer iPane Returns Integer
13426>>>>>>>>>>>        Function_Return (Message(Self,iPane))
13427>>>>>>>>>>>    End_Function
13428>>>>>>>>>>>    
13428>>>>>>>>>>>    Procedure Set PaneStyle Integer iPane Integer iStyle
13430>>>>>>>>>>>        Set Aux_Value iPane to iStyle
13431>>>>>>>>>>>    End_Procedure
13432>>>>>>>>>>>    
13432>>>>>>>>>>>    Function PaneStyle Integer iPane Returns Integer
13434>>>>>>>>>>>        Function_Return (Aux_Value(Self,iPane))
13435>>>>>>>>>>>    End_Function
13436>>>>>>>>>>>    
13436>>>>>>>>>>>    Procedure Set PaneText Integer iPane String sText
13438>>>>>>>>>>>        Set Value iPane to sText
13439>>>>>>>>>>>    End_Procedure
13440>>>>>>>>>>>    
13440>>>>>>>>>>>    Function PaneText Integer iPane Returns String
13442>>>>>>>>>>>        Function_Return (Value(Self,iPane))
13443>>>>>>>>>>>    End_Function
13444>>>>>>>>>>>    
13444>>>>>>>>>>>    Function PaneCount Returns Integer
13446>>>>>>>>>>>        Function_Return (Item_Count(Self))
13447>>>>>>>>>>>    End_Function
13448>>>>>>>>>>>    
13448>>>>>>>>>>>    Procedure OnClick Longptr iPane
13450>>>>>>>>>>>    End_Procedure
13451>>>>>>>>>>>    
13451>>>>>>>>>>>    Procedure OnDoubleClick Longptr iPane
13453>>>>>>>>>>>    End_Procedure
13454>>>>>>>>>>>    
13454>>>>>>>>>>>    Procedure OnRightClick Longptr iPane
13456>>>>>>>>>>>    End_Procedure
13457>>>>>>>>>>>    
13457>>>>>>>>>>>    Procedure OnDoubleRightClick Longptr iPane
13459>>>>>>>>>>>    End_Procedure
13460>>>>>>>>>>>    
13460>>>>>>>>>>>    Procedure OnSimpleModeChange
13462>>>>>>>>>>>    End_Procedure
13463>>>>>>>>>>>End_Class
13464>>>>>>>>>>>
13464>>>>>>>>>
13464>>>>>>>>>Class AppStatusBar is a BasicStatusBar
13465>>>>>>>>>    
13465>>>>>>>>>    Procedure Construct_Object
13467>>>>>>>>>        Forward Send Construct_Object
13469>>>>>>>>>        Property Integer Status_Help_Item 0
13470>>>>>>>>>        Property Integer Menu_Simple_State TRUE
13471>>>>>>>>>        
13471>>>>>>>>>        // SET s/b private, Get is public
13471>>>>>>>>>        Property Integer Menu_status_State False // MUST start false
13472>>>>>>>>>        
13472>>>>>>>>>        Property Integer Old_Simple_State  false
13473>>>>>>>>>        
13473>>>>>>>>>        Property String  Old_Status_Value  ''
13474>>>>>>>>>        
13474>>>>>>>>>        Set Popup_State         To TRUE
13475>>>>>>>>>        Set Attach_Parent_State To TRUE
13476>>>>>>>>>        // register status-bar with container
13476>>>>>>>>>        Delegate Set StatusBar_id To self
13478>>>>>>>>>    End_Procedure
13479>>>>>>>>>    
13479>>>>>>>>>    Procedure Set Status_Help_Value String sHelp
13481>>>>>>>>>        Integer iPart
13481>>>>>>>>>        Get Status_Help_Item To iPart
13482>>>>>>>>>        Set Value iPart to sHelp
13483>>>>>>>>>    End_Procedure
13484>>>>>>>>>    
13484>>>>>>>>>    Function Status_Help_Value Returns String
13486>>>>>>>>>        Integer iPart
13486>>>>>>>>>        String sHelp
13486>>>>>>>>>        Get Status_Help_Item To iPart
13487>>>>>>>>>        Get Value iPart To sHelp
13488>>>>>>>>>        Function_Return sHelp
13489>>>>>>>>>    End_Procedure
13490>>>>>>>>>    
13490>>>>>>>>>    Procedure Initialize_Menu
13492>>>>>>>>>        Integer iState OldState
13492>>>>>>>>>        If Not (Menu_Status_state(self)) Begin
13494>>>>>>>>>            Get Simple_State to OldState
13495>>>>>>>>>            Set Old_Simple_State to OldState
13496>>>>>>>>>            If OldState ;                Set Old_Status_Value to (Simple_Value(self))
13499>>>>>>>>>            Else ;                Set Old_Status_Value to (Status_Help_Value(self))
13501>>>>>>>>>            Set Simple_State to (Menu_Simple_State(self))
13502>>>>>>>>>            Set Menu_Status_State to TRUE
13503>>>>>>>>>        End
13503>>>>>>>>>>
13503>>>>>>>>>    End_Procedure
13504>>>>>>>>>    
13504>>>>>>>>>    Procedure Exit_Menu
13506>>>>>>>>>        Integer OldState
13506>>>>>>>>>        String OldVal
13506>>>>>>>>>        If (Menu_Status_state(self)) Begin
13508>>>>>>>>>            Get Old_Simple_State to OldState
13509>>>>>>>>>            Set Simple_State     to OldState
13510>>>>>>>>>            Get old_status_Value to oldVal
13511>>>>>>>>>            If OldState ;                Set Simple_Value to OldVal
13514>>>>>>>>>            Else ;                Set Status_Help_Value to OldVal
13516>>>>>>>>>            Set Menu_Status_State to FALSE
13517>>>>>>>>>        End
13517>>>>>>>>>>
13517>>>>>>>>>    End_Procedure
13518>>>>>>>>>    
13518>>>>>>>>>    Procedure Show_Status_Help String sHelp
13520>>>>>>>>>        Integer iState
13520>>>>>>>>>        Get Simple_State to iState
13521>>>>>>>>>        If not iState ;            Set Status_Help_Value to sHelp
13524>>>>>>>>>        Else ;            Set Simple_Value      to sHelp
13526>>>>>>>>>    End_Procedure
13527>>>>>>>>>    
13527>>>>>>>>>    Function Current_Status_Help Returns String
13529>>>>>>>>>        Integer iState
13529>>>>>>>>>        String sHelp
13529>>>>>>>>>        Get Simple_State to iState
13530>>>>>>>>>        If not iState ;            Get Status_Help_Value to sHelp
13533>>>>>>>>>        Else ;            Get Simple_Value      to sHelp
13535>>>>>>>>>        Function_Return sHelp
13536>>>>>>>>>    End_Function
13537>>>>>>>>>    
13537>>>>>>>>>    Procedure Page_Object Integer bShow
13539>>>>>>>>>        Integer hoClient
13539>>>>>>>>>        Handle hHndl
13539>>>>>>>>>        Get Window_Handle to hHndl
13540>>>>>>>>>        Forward Send Page_Object bShow
13542>>>>>>>>>        If (bShow AND hHndl=0) Begin
13544>>>>>>>>>            Delegate Get Client_Id To hoClient
13546>>>>>>>>>            If hoClient ;                Send Add_Border_Object to hoClient self amBOTTOM
13549>>>>>>>>>        End
13549>>>>>>>>>>
13549>>>>>>>>>    End_Procedure
13550>>>>>>>>>    
13550>>>>>>>>>    Procedure Deactivating
13552>>>>>>>>>        Integer hoClient
13552>>>>>>>>>        Delegate Get Client_Id To hoClient
13554>>>>>>>>>        Forward Send DeActivating
13556>>>>>>>>>        If hoClient ;            Send Remove_Border_Object to hoClient self amBOTTOM
13559>>>>>>>>>    End_Procedure
13560>>>>>>>>>    
13560>>>>>>>>>End_Class
13561>>>>>>>Use DFABtBar.pkg  // df application button bar
Including file: Dfabtbar.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Dfabtbar.pkg)
13561>>>>>>>>>Register_Procedure Add_Border_Object
13561>>>>>>>>>Register_Procedure Remove_Border_Object
13561>>>>>>>>>
13561>>>>>>>>>Use Windows.pkg
13561>>>>>>>>>
13561>>>>>>>>>Class AppToolBar is a BasicToolBar
13562>>>>>>>>>    
13562>>>>>>>>>    Procedure Construct_Object
13564>>>>>>>>>        Forward Send Construct_Object
13566>>>>>>>>>        Set Scope_State         to True
13567>>>>>>>>>        Set Attach_Parent_State to True
13568>>>>>>>>>        Set Popup_State         to True
13569>>>>>>>>>        Set Client_Area_State   to True
13570>>>>>>>>>        Delegate Set ToolBar_Id to Self
13572>>>>>>>>>    End_Procedure
13573>>>>>>>>>    
13573>>>>>>>>>    Procedure Page Integer bState
13575>>>>>>>>>        Integer hoClient
13575>>>>>>>>>        Handle  hWnd
13575>>>>>>>>>        Get Window_Handle to hWnd
13576>>>>>>>>>        Forward Send Page bState
13578>>>>>>>>>        If (bState=1 and hWnd=0) Begin
13580>>>>>>>>>            Delegate Get Client_Id to hoClient
13582>>>>>>>>>            If hoClient ;                Send Add_Border_Object to hoClient Self amTOP
13585>>>>>>>>>        End
13585>>>>>>>>>>
13585>>>>>>>>>    End_Procedure
13586>>>>>>>>>    
13586>>>>>>>>>    Procedure Deactivating
13588>>>>>>>>>        Integer hoClient
13588>>>>>>>>>        Forward Send DeActivating
13590>>>>>>>>>        Delegate Get Client_Id to hoClient
13592>>>>>>>>>        If hoClient Begin
13594>>>>>>>>>            Send Remove_Border_Object to hoClient Self amTOP
13595>>>>>>>>>        End
13595>>>>>>>>>>
13595>>>>>>>>>    End_Procedure
13596>>>>>>>>>    
13596>>>>>>>>>    Procedure Set GuiSize Integer cy Integer cx
13598>>>>>>>>>        Forward Set GuiSize to cy cx
13600>>>>>>>>>    End_Procedure
13601>>>>>>>>>    
13601>>>>>>>>>    // Container_Handle:
13601>>>>>>>>>    // JvH: - This function was put in to allow support for combo-form & other
13601>>>>>>>>>    // controls in the toolbar.
13601>>>>>>>>>    Function Container_Handle Returns Handle
13603>>>>>>>>>        Function_Return (window_handle(Self))
13604>>>>>>>>>    End_Function
13605>>>>>>>>>End_Class
13606>>>>>>>>>
13606>>>>>>>Use DFAClnt.pkg   // df application Client
Including file: Dfaclnt.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Dfaclnt.pkg)
13606>>>>>>>>>Use Windows.pkg
13606>>>>>>>>>Use Set.pkg
Including file: set.pkg    (C:\Program Files\DataFlex 23.0\Pkg\set.pkg)
13606>>>>>>>>>>>Use VDFBase.pkg
13606>>>>>>>>>>>
13606>>>>>>>>>>>Class Set is an ARRAY
13607>>>>>>>>>>>    
13607>>>>>>>>>>>    Function Find_Element String ElemStr Returns Integer
13609>>>>>>>>>>>        Integer ndx retVal ArrMax
13609>>>>>>>>>>>        String ArrVal
13609>>>>>>>>>>>        Get item_count to ArrMax
13610>>>>>>>>>>>        Move -1 to retVal
13611>>>>>>>>>>>        Move 0 to ndx
13612>>>>>>>>>>>        While (ndx < ArrMax and retVal = -1)
13616>>>>>>>>>>>            Get array_value  ndx to ArrVal
13617>>>>>>>>>>>            If (ArrVal = ElemStr) ;                Move ndx to retVal
13620>>>>>>>>>>>            Move (ndx + 1) to ndx
13621>>>>>>>>>>>        loop
13622>>>>>>>>>>>>
13622>>>>>>>>>>>        Function_Return retVal
13623>>>>>>>>>>>    End_Function
13624>>>>>>>>>>>    
13624>>>>>>>>>>>    Procedure Add_Element String Elem_Str Returns Integer
13626>>>>>>>>>>>        Integer Ret_Val
13626>>>>>>>>>>>        
13626>>>>>>>>>>>        Get Find_Element Elem_Str to Ret_Val
13627>>>>>>>>>>>        
13627>>>>>>>>>>>        If (Ret_Val < 0) ;            Get Item_Count to Ret_Val
13630>>>>>>>>>>>        
13630>>>>>>>>>>>        Set Array_Value  Ret_Val to Elem_Str
13631>>>>>>>>>>>        
13631>>>>>>>>>>>        Procedure_Return Ret_Val
13632>>>>>>>>>>>    End_Procedure
13633>>>>>>>>>>>    
13633>>>>>>>>>>>    Procedure Remove_Element String sElement
13635>>>>>>>>>>>        Integer iIndex
13635>>>>>>>>>>>        Get Find_Element sElement to iIndex
13636>>>>>>>>>>>        If (iIndex > -1) ;            Send delete_item iIndex
13639>>>>>>>>>>>    End_Procedure
13640>>>>>>>>>>>    
13640>>>>>>>>>>>    
13640>>>>>>>>>>>End_Class
13641>>>>>>>>>>>
13641>>>>>>>>>>>//
13641>>>>>>>>>>>// global function to create set instances at random
13641>>>>>>>>>>>//
13641>>>>>>>>>>>Function make_set for cDesktop Returns Integer
13643>>>>>>>>>>>    Integer retval
13643>>>>>>>>>>>    Object SetTemplate is a Set
13645>>>>>>>>>>>        Move Self to retval
13646>>>>>>>>>>>    End_Object
13647>>>>>>>>>>>    Function_Return retval
13648>>>>>>>>>>>End_Function
13649>>>>>>>>>>>
13649>>>>>>>>>>>
13649>>>>>>>>>>>
13649>>>>>>>>>Use Dfpanel.pkg
13649>>>>>>>>>
13649>>>>>>>>>Class AppClientArea is a MdiClientArea
13650>>>>>>>>>    
13650>>>>>>>>>    Procedure Construct_Object
13652>>>>>>>>>        Forward Send Construct_Object
13654>>>>>>>>>        
13654>>>>>>>>>        Property Integer Auto_Arrange_Icons_State True
13655>>>>>>>>>        
13655>>>>>>>>>        Property Integer Private.Client_Scrollbar_State   True
13656>>>>>>>>>        
13656>>>>>>>>>        Delegate Set Client_Id to Self
13658>>>>>>>>>        // keep track of all child dialog objects (views)
13658>>>>>>>>>        
13658>>>>>>>>>        Object Mdi_Dialogs is a Set
13660>>>>>>>>>        End_Object
13661>>>>>>>>>        
13661>>>>>>>>>        Property Integer Private.Last_Dialog_Item -1
13662>>>>>>>>>    End_Procedure
13663>>>>>>>>>    
13663>>>>>>>>>    Procedure Set Client_Scrollbar_State Integer bState
13665>>>>>>>>>        Set Scroll_bar_Visible_State to bState
13666>>>>>>>>>        Set Private.Client_Scrollbar_State to bState
13667>>>>>>>>>    End_Procedure
13668>>>>>>>>>    
13668>>>>>>>>>    Function Client_Scrollbar_State Returns Integer
13670>>>>>>>>>        Function_Return (Private.Client_Scrollbar_State(Self))
13671>>>>>>>>>    End_Function
13672>>>>>>>>>    
13672>>>>>>>>>    Procedure Add_Mdi_Dialog Integer Id#
13674>>>>>>>>>        Send Add_element to (mdi_dialogs(Self)) Id#
13675>>>>>>>>>    End_Procedure
13676>>>>>>>>>    
13676>>>>>>>>>    Procedure Remove_Mdi_Dialog Integer Id#
13678>>>>>>>>>        Integer obj#
13678>>>>>>>>>        Move (mdi_dialogs(Self)) to Obj#
13679>>>>>>>>>        If Obj# ;            Send Remove_element to (mdi_dialogs(Obj#)) Id#
13682>>>>>>>>>    End_Procedure
13683>>>>>>>>>    
13683>>>>>>>>>    Function Next_Mdi_Dialog Integer FindFirst Returns Integer
13685>>>>>>>>>        Integer Id# Item# Obj#
13685>>>>>>>>>        Get Private.Last_dialog_item to Item#
13686>>>>>>>>>        If FindFirst ;            Move -1 to Item#
13689>>>>>>>>>        Increment Item#
13690>>>>>>>>>        Set Private.Last_dialog_item to Item#
13691>>>>>>>>>        Move (Mdi_dialogs(Self)) to Obj#
13692>>>>>>>>>        If (Item_count(Obj#)>Item#) ;            Get Value of Obj# Item# to Id#
13695>>>>>>>>>        Function_Return Id#
13696>>>>>>>>>    End_Function
13697>>>>>>>>>    
13697>>>>>>>>>    Procedure Set GuiSize Integer cy Integer cx
13699>>>>>>>>>        Forward Set GuiSize to cy cx
13701>>>>>>>>>        If (active_state(Self) and Auto_Arrange_Icons_State(Self)) ;            Send Arrange_icons
13704>>>>>>>>>    End_Procedure
13705>>>>>>>>>    
13705>>>>>>>>>    Procedure Private.Adjust_MDI_Margins Integer cy Integer cx Integer BorderFlag
13707>>>>>>>>>        Integer cMargin
13707>>>>>>>>>        If (BorderFlag = amTOP) Begin
13709>>>>>>>>>            Get mdi_top_margin to cMargin
13710>>>>>>>>>            Set mdi_top_margin to (cMargin + cy)
13711>>>>>>>>>        End
13711>>>>>>>>>>
13711>>>>>>>>>        Else If (BorderFlag = amBOTTOM) Begin
13714>>>>>>>>>            Get mdi_bottom_margin to cMargin
13715>>>>>>>>>            Set mdi_bottom_margin to (cMargin + cy)
13716>>>>>>>>>        End
13716>>>>>>>>>>
13716>>>>>>>>>        Else If (BorderFlag = amLEFT) Begin
13719>>>>>>>>>            Get mdi_left_margin to cMargin
13720>>>>>>>>>            Set mdi_left_margin to (cMargin + cx)
13721>>>>>>>>>        End
13721>>>>>>>>>>
13721>>>>>>>>>        Else If (BorderFlag = amRIGHT) Begin
13724>>>>>>>>>            Get mdi_right_margin to cMargin
13725>>>>>>>>>            Set mdi_right_margin to (cMargin + cx)
13726>>>>>>>>>        End
13726>>>>>>>>>>
13726>>>>>>>>>    End_Procedure
13727>>>>>>>>>    
13727>>>>>>>>>    Procedure Add_Border_Object Integer hoBorder Integer BorderFlag
13729>>>>>>>>>        Integer cy cx
13729>>>>>>>>>        Move (hi(GuiSize(hoBorder)))  to cy
13730>>>>>>>>>        Move (low(GuiSize(hoBorder))) to cx
13731>>>>>>>>>        
13731>>>>>>>>>        Send Private.Adjust_MDI_Margins cy cx BorderFlag
13732>>>>>>>>>    End_Procedure
13733>>>>>>>>>    
13733>>>>>>>>>    Procedure Remove_Border_Object Integer hoBorder Integer BorderFlag
13735>>>>>>>>>        Integer cy cx
13735>>>>>>>>>        Move (-(hi(GuiSize(hoBorder))))  to cy
13736>>>>>>>>>        Move (-(low(GuiSize(hoBorder)))) to cx
13737>>>>>>>>>        
13737>>>>>>>>>        Send Private.Adjust_MDI_Margins cy cx BorderFlag
13738>>>>>>>>>    End_Procedure
13739>>>>>>>>>    
13739>>>>>>>>>    //
13739>>>>>>>>>    // default behavior of mdi client is to passively pass these
13739>>>>>>>>>    // message on to their mdi dialogs (views)
13739>>>>>>>>>    //
13739>>>>>>>>>    Function Verify_Exit_Application Returns Integer
13741>>>>>>>>>        Integer rVal Id#
13741>>>>>>>>>        Get Next_Mdi_Dialog True to Id#
13742>>>>>>>>>        While (Id# and Rval=0)
13746>>>>>>>>>            Get Verify_Exit_application of Id# to rVal
13747>>>>>>>>>            If not rval ;                Get Next_Mdi_Dialog False to Id#
13750>>>>>>>>>        End
13751>>>>>>>>>>
13751>>>>>>>>>        Function_Return rval
13752>>>>>>>>>    End_Function
13753>>>>>>>>>    
13753>>>>>>>>>    Procedure Notify_Exit_Application
13755>>>>>>>>>        Integer Id#
13755>>>>>>>>>        Get Next_Mdi_Dialog True to Id#
13756>>>>>>>>>        While Id#
13760>>>>>>>>>            Send Notify_Exit_Application to Id#
13761>>>>>>>>>            Get Next_Mdi_Dialog False to Id#
13762>>>>>>>>>        End
13763>>>>>>>>>>
13763>>>>>>>>>    End_Procedure
13764>>>>>>>>>    
13764>>>>>>>>>    Procedure Make_all_ViewMode Integer Mode
13766>>>>>>>>>        Integer Id#
13766>>>>>>>>>        Get Next_Mdi_Dialog True to Id#
13767>>>>>>>>>        While Id#
13771>>>>>>>>>            If (active_State(Id#)) ;                Set View_Mode of Id# to Mode
13774>>>>>>>>>            Get Next_Mdi_Dialog False to Id#
13775>>>>>>>>>        End
13776>>>>>>>>>>
13776>>>>>>>>>    End_Procedure
13777>>>>>>>>>    
13777>>>>>>>>>    Procedure Minimize_all_Windows
13779>>>>>>>>>        Send Make_All_ViewMode VIEWMODE_ICONIZE
13780>>>>>>>>>    End_Procedure
13781>>>>>>>>>    
13781>>>>>>>>>    Procedure Restore_all_Windows
13783>>>>>>>>>        Send Make_All_ViewMode VIEWMODE_NORMAL
13784>>>>>>>>>    End_Procedure
13785>>>>>>>>>    
13785>>>>>>>>>    // The framework has used activate_about for years to activate an about
13785>>>>>>>>>    // dialog. As of 12.1, we have a sub-class for this and providing the
13785>>>>>>>>>    // required message makes things work better. It is expected that a
13785>>>>>>>>>    // developer will augment this in their clientarea to call the about
13785>>>>>>>>>    // object that they created.
13785>>>>>>>>>    Procedure Activate_About
13787>>>>>>>>>    End_Procedure
13788>>>>>>>>>    
13788>>>>>>>>>    
13788>>>>>>>>>End_Class
13789>>>>>>>Use DFADlg.pkg    // df application Dialog
Including file: Dfadlg.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Dfadlg.pkg)
13789>>>>>>>>>Use LanguageText.pkg
13789>>>>>>>>>Use Windows.pkg
13789>>>>>>>>>Use dfConfrm.pkg
Including file: Dfconfrm.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Dfconfrm.pkg)
13789>>>>>>>>>>>Use LanguageText.pkg
13789>>>>>>>>>>>Use msgbox.pkg
13789>>>>>>>>>>>
13789>>>>>>>>>>>// General purpose confirm function. Added to all classes
13789>>>>>>>>>>>//
13789>>>>>>>>>>>Function Confirm for cUIObject String item_name Returns Integer
13791>>>>>>>>>>>    Integer rval
13791>>>>>>>>>>>    Move (YesNo_Box(item_name, C_$Confirm, MB_DEFBUTTON1 )) to rval
13792>>>>>>>>>>>    Function_Return (rval<>MBR_YES)
13793>>>>>>>>>>>End_function
13794>>>>>>>>>>>
13794>>>>>>>>>>>Function Save_Confirmation for cUIObject Returns integer
13796>>>>>>>>>>>    Function_return (confirm(self, C_$SaveThisRecord))
13797>>>>>>>>>>>End_function
13798>>>>>>>>>>>
13798>>>>>>>>>>>Function Delete_Confirmation for cUIObject Returns integer
13800>>>>>>>>>>>    Function_return (confirm(self, C_$DeleteThisRecord))
13801>>>>>>>>>>>End_function
13802>>>>>>>>>>>
13802>>>>>>>>>>>Function Line_Save_Confirmation for cUIObject Returns Integer
13804>>>>>>>>>>>    Function_return (confirm(self, C_$SaveThisLine))
13805>>>>>>>>>>>End_function
13806>>>>>>>>>>>
13806>>>>>>>>>>>Function Line_Delete_Confirmation for cUIObject Returns Integer
13808>>>>>>>>>>>    Function_return (confirm(self, C_$DeleteThisLine))
13809>>>>>>>>>>>End_function
13810>>>>>>>>>>>
13810>>>>>>>>>>>Function Data_Loss_Confirmation for cUIObject Returns integer
13812>>>>>>>>>>>    Function_return (confirm(self, C_$AbandonChanges))
13813>>>>>>>>>>>End_function
13814>>>>>>>>>>>
13814>>>>>>>>>>>Function Exit_Loss_Confirmation for cUIObject Returns integer
13816>>>>>>>>>>>    Integer tmp
13816>>>>>>>>>>>    get Should_save_recursive to tmp
13817>>>>>>>>>>>    If (tmp <> 0) ;        Function_Return (confirm(Self, C_$ChangesExistAbandon))
13820>>>>>>>>>>>End_function
13821>>>>>>>>>>>
13821>>>>>>>>>>>Function No_Confirmation for cUIObject Returns integer
13823>>>>>>>>>>>End_function
13824>>>>>>>>>>>
13824>>>>>>>>>>>Function Should_Save for cUIObject returns integer
13826>>>>>>>>>>>end_function
13827>>>>>>>>>>>
13827>>>>>>>>>>>Function Should_Save_Recursive for cUIObject returns integer
13829>>>>>>>>>>>    Integer rVal
13829>>>>>>>>>>>    Get Should_Save to Rval // changes in this object???
13830>>>>>>>>>>>    If (rVal = 0) ;        Broadcast Get Should_Save_Recursive to Rval // check w/ kids
13834>>>>>>>>>>>    Function_return rVal
13835>>>>>>>>>>>End_Function
13836>>>>>>>>>>>
13836>>>>>>>>>>>
13836>>>>>>>>>Use GlobalFunctionsProcedures.pkg
13836>>>>>>>>>Use tWinStructs.pkg
13836>>>>>>>>>Use Dfpanel.pkg
13836>>>>>>>>>
13836>>>>>>>>>
13836>>>>>>>>>// as of 15.0, moved some of dbViews features up to this level. Load/Save Environment showing view name
13836>>>>>>>>>Class AppDialog is a MdiDialog
13837>>>>>>>>>    
13837>>>>>>>>>    Procedure Construct_Object
13839>>>>>>>>>        Forward Send Construct_Object
13841>>>>>>>>>        
13841>>>>>>>>>        // This can be used to stop this view from loading and saving its environment.
13841>>>>>>>>>        Property Boolean pbDisableSaveEnvironment False
13842>>>>>>>>>        
13842>>>>>>>>>        // set true to auto-activate the view. This does not work if the object is deferred.
13842>>>>>>>>>        // this is a design time property which is applied during end_construct_object. This should
13842>>>>>>>>>        Property Boolean pbAutoActivate False
13843>>>>>>>>>        
13843>>>>>>>>>        // used to keep track of window placment when deactivated object is reactivated.
13843>>>>>>>>>        Property tWinWindowPlacement pWindowPlacement
13844>>>>>>>>>    End_Procedure
13845>>>>>>>>>    
13845>>>>>>>>>    Procedure End_Construct_Object
13847>>>>>>>>>        Boolean bAutoActivate
13847>>>>>>>>>        Delegate Send Add_Mdi_Dialog Self
13849>>>>>>>>>        Forward Send End_Construct_Object
13851>>>>>>>>>        // if auto-activate, add this to he the panel's array of objects to be acivated.
13851>>>>>>>>>        Get pbAutoActivate to bAutoActivate
13852>>>>>>>>>        If bAutoActivate Begin
13854>>>>>>>>>            Delegate Send AddAutoActivateView Self
13856>>>>>>>>>        End
13856>>>>>>>>>>
13856>>>>>>>>>    End_Procedure
13857>>>>>>>>>    
13857>>>>>>>>>    Procedure Destroy_Object
13859>>>>>>>>>        Integer obj
13859>>>>>>>>>        Move Self to obj
13860>>>>>>>>>        Delegate Send Remove_Mdi_Dialog obj
13862>>>>>>>>>        Forward Send Destroy_Object
13864>>>>>>>>>    End_Procedure
13865>>>>>>>>>    
13865>>>>>>>>>    // Augmented to save view position
13865>>>>>>>>>    Procedure Notify_Exit_Application
13867>>>>>>>>>        Send Save_Environment
13868>>>>>>>>>    End_Procedure
13869>>>>>>>>>    
13869>>>>>>>>>    Function View_Changed Returns Integer
13871>>>>>>>>>    End_Function
13872>>>>>>>>>    
13872>>>>>>>>>    //
13872>>>>>>>>>    // Augment exit_application_check to see if view is changed. If changed,
13872>>>>>>>>>    // display exit message as required
13872>>>>>>>>>    
13872>>>>>>>>>    Function Verify_Exit_Application Returns Integer
13874>>>>>>>>>        Integer Fail
13874>>>>>>>>>        Get View_Changed to Fail // Ask for changes in Data-sets
13875>>>>>>>>>        If fail ; // ok a change exist...activate changed view.            Get confirm (SFormat(C_$ChangesExistExit, Label(Self)) ) to fail
13878>>>>>>>>>        Function_Return fail
13879>>>>>>>>>    End_Function
13880>>>>>>>>>    
13880>>>>>>>>>    // Activates the view. If view is minimized it restores it first
13880>>>>>>>>>    // works with both popup_state T and F
13880>>>>>>>>>    
13880>>>>>>>>>    Procedure Activate_View Returns Integer
13882>>>>>>>>>        Integer rVal
13882>>>>>>>>>        If ( View_mode(Self)=VIEWMODE_ICONIZE ) ;            Set view_mode to viewmode_normal
13885>>>>>>>>>        If (Popup_state(Self)) ;    // support both popup and            Get Msg_Popup to rVal
13888>>>>>>>>>        Else ;            Get Msg_Activate to rVal
13890>>>>>>>>>        Procedure_Return rVal
13891>>>>>>>>>    End_Procedure
13892>>>>>>>>>    
13892>>>>>>>>>    
13892>>>>>>>>>    // augmented to load last view position
13892>>>>>>>>>    
13892>>>>>>>>>    Procedure Add_Focus Integer hoBase Returns Integer
13894>>>>>>>>>        Integer iRetVal bState
13894>>>>>>>>>        Get Visible_State to bState
13895>>>>>>>>>        Set Visible_State to False
13896>>>>>>>>>        Forward Get Msg_Add_Focus hoBase to iRetVal
13898>>>>>>>>>        If (iRetVal=0) Begin
13900>>>>>>>>>            Send Load_Environment
13901>>>>>>>>>        End
13901>>>>>>>>>>
13901>>>>>>>>>        Set Visible_State to bState
13902>>>>>>>>>        Procedure_Return iRetVal
13903>>>>>>>>>    End_Procedure
13904>>>>>>>>>    
13904>>>>>>>>>    // This is augmented to send save_environment during a view close (was in close_panel)
13904>>>>>>>>>    // we set view_mode to normal if it is zoomed. This is needed to make the MDI stuff work
13904>>>>>>>>>    // properly with the save/load environment. The Saved environment data will make it zoom if needed.
13904>>>>>>>>>    //
13904>>>>>>>>>    Procedure Deactivate Integer eDeactivateScope Returns Integer
13906>>>>>>>>>        Integer eArea iFail
13906>>>>>>>>>        Boolean bPreserveEnvironment
13906>>>>>>>>>        Move (If(num_arguments=0, Area_Type, eDeactivateScope)) to eArea // in case no param is passed
13907>>>>>>>>>        If (eArea<>0) Begin
13909>>>>>>>>>            Forward Get msg_deactivate eArea to iFail
13911>>>>>>>>>        End
13911>>>>>>>>>>
13911>>>>>>>>>        Else Begin
13912>>>>>>>>>            Send Save_Environment
13913>>>>>>>>>            Forward Get msg_deactivate eArea to iFail
13915>>>>>>>>>            
13915>>>>>>>>>            // this works around a problem where maximized MDI views get saved but don't come back
13915>>>>>>>>>            // correctly when loaded again without exiting. It turns out the the MDI client restores
13915>>>>>>>>>            // the view sometimes without telling view_mode. If view_mode is normal, it always works.
13915>>>>>>>>>            // This must happen after the view is deactivated!
13915>>>>>>>>>            
13915>>>>>>>>>            If ghoApplication Begin
13917>>>>>>>>>                Get pbPreserveEnvironment of ghoApplication to bPreserveEnvironment
13918>>>>>>>>>            End
13918>>>>>>>>>>
13918>>>>>>>>>            // do these checks to have as small of an effect as possible.
13918>>>>>>>>>            If (bPreserveEnvironment and iFail=0 and view_mode(Self)=Viewmode_Zoom) Begin
13920>>>>>>>>>                Set View_Mode to Viewmode_Normal
13921>>>>>>>>>            End
13921>>>>>>>>>>
13921>>>>>>>>>        End
13921>>>>>>>>>>
13921>>>>>>>>>        Procedure_Return iFail
13922>>>>>>>>>    End_Procedure
13923>>>>>>>>>    
13923>>>>>>>>>    // Save the window placement information for this to the application object
13923>>>>>>>>>    
13923>>>>>>>>>    Procedure Save_Environment
13925>>>>>>>>>        tWinWindowPlacement WindowPlacement
13925>>>>>>>>>        tWinWindowPlacement WindowPlacement
13925>>>>>>>>>        Boolean bSuccess bCancel
13925>>>>>>>>>        Get pbDisableSaveEnvironment to bCancel
13926>>>>>>>>>        If not bCancel Begin
13928>>>>>>>>>            
13928>>>>>>>>>            // save environment to the object, in case it is reactivated during the same run.
13928>>>>>>>>>            Move (SizeOfType(tWinWindowPlacement)) to WindowPlacement.length
13929>>>>>>>>>            Move (GetWindowPlacement(Window_Handle(Self), addressof(WindowPlacement))) to bSuccess
13930>>>>>>>>>            If bSuccess Begin
13932>>>>>>>>>                // if minimized, assume restored, as we don't want to restart minimized!
13932>>>>>>>>>                If (WindowPlacement.showCmd = SW_SHOWMINIMIZED) Begin
13934>>>>>>>>>                    Move SW_SHOWNORMAL to WindowPlacement.showCmd
13935>>>>>>>>>                End
13935>>>>>>>>>>
13935>>>>>>>>>                Set pWindowPlacement to WindowPlacement
13936>>>>>>>>>            End
13936>>>>>>>>>>
13936>>>>>>>>>            // also save environment to the application object, so it can be used when reloaded
13936>>>>>>>>>            If ghoApplication ;                Send DoSaveEnvironment of ghoApplication Self False
13939>>>>>>>>>        End
13939>>>>>>>>>>
13939>>>>>>>>>    End_Procedure
13940>>>>>>>>>    
13940>>>>>>>>>    // Load the window placement information for this from the application object
13940>>>>>>>>>    
13940>>>>>>>>>    Procedure Load_Environment
13942>>>>>>>>>        tWinWindowPlacement WindowPlacement
13942>>>>>>>>>        tWinWindowPlacement WindowPlacement
13942>>>>>>>>>        Boolean bSuccess bCancel
13942>>>>>>>>>        Get pbDisableSaveEnvironment to bCancel
13943>>>>>>>>>        If not bCancel Begin
13945>>>>>>>>>            // if view has alrady been activated and deactivated use the setting from windowplacement saved in the object
13945>>>>>>>>>            Get pWindowPlacement to WindowPlacement
13946>>>>>>>>>            //  if length is zero, assume it has never been used before (never deactivated).
13946>>>>>>>>>            If (WindowPlacement.length>0) Begin
13948>>>>>>>>>                Move (SetWindowPlacement(Window_Handle(Self), AddressOf(WindowPlacement))) to bSuccess
13949>>>>>>>>>            End
13949>>>>>>>>>>
13949>>>>>>>>>            Else Begin
13950>>>>>>>>>                If ghoApplication ;                    Send DoLoadEnvironment of ghoApplication Self False
13953>>>>>>>>>            End
13953>>>>>>>>>>
13953>>>>>>>>>        End
13953>>>>>>>>>>
13953>>>>>>>>>    End_Procedure
13954>>>>>>>>>    
13954>>>>>>>>>    Procedure Entering_Scope Returns Integer
13956>>>>>>>>>        Integer rVal
13956>>>>>>>>>        Forward Get MSG_Entering_Scope to rVal
13958>>>>>>>>>        If not rVal ;            Send Show_View_Name (Label(Self))
13961>>>>>>>>>    End_Procedure
13962>>>>>>>>>    
13962>>>>>>>>>    Procedure Exiting_Scope Integer whereto Returns Integer
13964>>>>>>>>>        Integer rVal
13964>>>>>>>>>        Forward Get MSG_Exiting_Scope whereto to rVal
13966>>>>>>>>>        If not rVal ;            Send Show_View_Name ''
13969>>>>>>>>>    End_Procedure
13970>>>>>>>>>    
13970>>>>>>>>>    Procedure Show_view_Name String sHelp
13972>>>>>>>>>        Integer rVal Id
13972>>>>>>>>>        Get Statusbar_id to id
13973>>>>>>>>>        If Id ;            Send Show_View_Name to Id sHelp
13976>>>>>>>>>    End_Procedure
13977>>>>>>>>>    
13977>>>>>>>>>    // force object to be modal and then pop it up. Upon complettion restore it to a normal view
13977>>>>>>>>>    Procedure Popup_Modal Returns Integer
13979>>>>>>>>>        
13979>>>>>>>>>        Integer OldBMS OldAPS OldPS OldRS OldSS OldMDIState
13979>>>>>>>>>        Integer OldLoc OldAutoLoc OldKeyPath OldDisableSaveEnv OldMin OldMax
13979>>>>>>>>>        Integer rVal
13979>>>>>>>>>        
13979>>>>>>>>>        // If object is active we can't do anything. -1 means already active
13979>>>>>>>>>        If (Active_State(Self)) ;            Procedure_Return -1
13982>>>>>>>>>        
13982>>>>>>>>>        // Remember all important modal property settings.
13982>>>>>>>>>        Get Block_mouse_State to OldBMS
13983>>>>>>>>>        Get Attach_parent_State to OldAPS
13984>>>>>>>>>        Get Popup_State to OldPS
13985>>>>>>>>>        Get Ring_State to OldRS
13986>>>>>>>>>        Get Scope_State to OldSS
13987>>>>>>>>>        Get MDI_State to OldMDIState
13988>>>>>>>>>        Get Key_Path to OldKeyPath
13989>>>>>>>>>        Get Location to OldLoc
13990>>>>>>>>>        Get Maximize_Icon to OldMax
13991>>>>>>>>>        Get Minimize_Icon to OldMin
13992>>>>>>>>>        Get Auto_Locate_State to OldAutoLoc
13993>>>>>>>>>        Get pbDisableSaveEnvironment to OldDisableSaveEnv
13994>>>>>>>>>        
13994>>>>>>>>>        // set propertie required to make this a modal dialog
13994>>>>>>>>>        Set pbDisableSaveEnvironment to True
13995>>>>>>>>>        Set MDI_State to False
13996>>>>>>>>>        Set Auto_Locate_State to True
13997>>>>>>>>>        Set Key_path to Desktop
13998>>>>>>>>>        Set Block_mouse_state to True
13999>>>>>>>>>        Set Attach_parent_state to False
14000>>>>>>>>>        // we used to set Exit_Application_Local_State to True - as of 19.1 we don't
14000>>>>>>>>>        Set Popup_State to True
14001>>>>>>>>>        Set Ring_State to True
14002>>>>>>>>>        Set Scope_State to True
14003>>>>>>>>>        Set Minimize_Icon to False
14004>>>>>>>>>        Set Maximize_Icon to False
14005>>>>>>>>>        
14005>>>>>>>>>        Get Msg_Popup to rVal
14006>>>>>>>>>        If rval ;            Move -2 to rVal      // did not activate
14009>>>>>>>>>        Else ;            Move StrMark to rVal // StrMark keeps track of UI value
14011>>>>>>>>>        // if 0- a stop_ui, if >0, ret value
14011>>>>>>>>>        // restore all expected properties
14011>>>>>>>>>        Set Auto_Locate_State to OldAutoLoc
14012>>>>>>>>>        Set Location to (hi(OldLoc)) (Low(OldLoc))
14013>>>>>>>>>        Set pbDisableSaveEnvironment to OldDisableSaveEnv
14014>>>>>>>>>        Set MDI_State to OldMDIState
14015>>>>>>>>>        Set Maximize_Icon to OldMax
14016>>>>>>>>>        Set Minimize_Icon to OldMin
14017>>>>>>>>>        Set Block_mouse_State   to OldBMS
14018>>>>>>>>>        Set Attach_parent_State to OldAPS
14019>>>>>>>>>        Set Popup_State         to OldPS
14020>>>>>>>>>        Set Ring_State          to OldRS
14021>>>>>>>>>        Set Scope_State         to OldSS
14022>>>>>>>>>        Procedure_Return rVal
14023>>>>>>>>>        
14023>>>>>>>>>    End_Procedure
14024>>>>>>>>>    
14024>>>>>>>>>End_Class
14025>>>>>>>>>
14025>>>>>>>>>// logically this is required
14025>>>>>>>>>//{ DesignerClass=cDTView }
14025>>>>>>>>>Class View is an AppDialog
14026>>>>>>>>>End_Class
14027>>>>>>>>>
14027>>>>>>>
14027>>>>>>>
14027>>>>>>>Register_Function pbPreserveEnvironment Returns Boolean
14027>>>>>>>Register_Procedure Set phoMainPanel Handle hoMain
14027>>>>>>>Register_Procedure DoSaveEnvironment Handle hoContainer Boolean bProgram
14027>>>>>>>Register_Procedure DoLoadEnvironment Handle hoContainer Boolean bProgram
14027>>>>>>>Register_Procedure Set pbVisible Boolean bVisible
14027>>>>>>>Register_Function  pbVisible Returns Boolean
14027>>>>>>>
14027>>>>>>>
14027>>>>>>>
14027>>>>>>>Class AppPanel is a BasicPanel
14028>>>>>>>    //
14028>>>>>>>    //  Panel defaults. Use windows MDI color
14028>>>>>>>    //
14028>>>>>>>    //
14028>>>>>>>    Procedure Construct_Object
14030>>>>>>>        Forward Send Construct_Object
14032>>>>>>>        
14032>>>>>>>        Property Integer Auto_Activate_State True
14033>>>>>>>        
14033>>>>>>>        // Support status for toolbar and status bar. For now we support
14033>>>>>>>        // 0=Hide, 1=Show,
14033>>>>>>>        //
14033>>>>>>>        Property Integer Private.ToolBar_State  1
14034>>>>>>>        
14034>>>>>>>        Property Integer Private.StatusBar_State  1
14035>>>>>>>        
14035>>>>>>>        Property Handle[] phoAutoActivateViews
14036>>>>>>>        
14036>>>>>>>        Set Scope_State to True
14037>>>>>>>        Set Mdi_State to True
14038>>>>>>>        
14038>>>>>>>        Set Size to 274 479
14039>>>>>>>        Set pbSizeToClientArea  to False
14040>>>>>>>    End_Procedure
14041>>>>>>>    
14041>>>>>>>    Procedure Set Auto_Arrange_Icons_State Integer bState
14043>>>>>>>        Integer hoClient
14043>>>>>>>        Get Client_id to hoClient
14044>>>>>>>        If (hoClient and hoClient<>Self ) ;            Set Auto_Arrange_Icons_State of hoClient to bState
14047>>>>>>>    End_Procedure
14048>>>>>>>    
14048>>>>>>>    Function Auto_Arrange_Icons_State Returns Integer
14050>>>>>>>        Integer hoClient bState
14050>>>>>>>        Get Client_id to hoClient
14051>>>>>>>        If (hoClient and hoClient<>Self ) ;            Get Auto_Arrange_Icons_State of hoClient to bState
14054>>>>>>>        Function_Return bState
14055>>>>>>>    End_Function
14056>>>>>>>    
14056>>>>>>>    Procedure Toggle_Auto_Arrange_Icons
14058>>>>>>>        Set Auto_Arrange_Icons_State ;            to (not(Auto_Arrange_Icons_State(Self)))
14059>>>>>>>    End_Procedure
14060>>>>>>>    
14060>>>>>>>    Procedure Set Client_Scrollbar_State Integer bState
14062>>>>>>>        Integer hoClient
14062>>>>>>>        Get Client_id to hoClient
14063>>>>>>>        If (hoClient and hoClient<>Self ) ;            Set Client_Scrollbar_State of hoClient to bState
14066>>>>>>>    End_Procedure
14067>>>>>>>    
14067>>>>>>>    Function Client_Scrollbar_State Returns Integer
14069>>>>>>>        Integer hoClient bState
14069>>>>>>>        Get Client_id to hoClient
14070>>>>>>>        If (hoClient and hoClient<>Self ) ;            Get Client_Scrollbar_State of hoClient to bState
14073>>>>>>>        Function_Return bState
14074>>>>>>>    End_Function
14075>>>>>>>    
14075>>>>>>>    Procedure Toggle_Client_Scrollbar_State
14077>>>>>>>        Set Client_Scrollbar_State ;            to (not(Client_Scrollbar_State(Self)))
14078>>>>>>>    End_Procedure
14079>>>>>>>    
14079>>>>>>>    Function ToolBar_State Returns Integer
14081>>>>>>>        Function_Return (private.Toolbar_State(Self))
14082>>>>>>>    End_Function
14083>>>>>>>    
14083>>>>>>>    Procedure Set Toolbar_State Integer bState
14085>>>>>>>        Integer hoToolBar
14085>>>>>>>        Handle hoCommandBars
14085>>>>>>>        If (bState<>toolbar_State(Self)) Begin
14087>>>>>>>            Set private.toolbar_State to bState
14088>>>>>>>            
14088>>>>>>>            Get phoCommandBars to hoCommandbars
14089>>>>>>>            If hoCommandbars ;                Procedure_Return
14092>>>>>>>            
14092>>>>>>>            If (Window_Handle(Self)) Begin
14094>>>>>>>                Get toolBar_ID to hoToolBar
14095>>>>>>>                If hoToolBar ;                    Send Activate_Component hoToolBar bState (Focus_Mode(hoToolbar))
14098>>>>>>>            End
14098>>>>>>>>
14098>>>>>>>        End
14098>>>>>>>>
14098>>>>>>>    End_Procedure
14099>>>>>>>    
14099>>>>>>>    Procedure Toggle_Toolbar
14101>>>>>>>        Set Toolbar_State to (not(Toolbar_State(Self)))
14102>>>>>>>    End_Procedure
14103>>>>>>>    
14103>>>>>>>    Function StatusBar_State Returns Integer
14105>>>>>>>        Handle hoCommandBars hoStatusBar
14105>>>>>>>        Boolean bState
14105>>>>>>>        Get phoCommandBars to hoCommandbars
14106>>>>>>>        If hoCommandbars Begin
14108>>>>>>>            Get Statusbar_ID to hoStatusBar
14109>>>>>>>            If hoStatusBar Begin
14111>>>>>>>                Get pbVisible of hoStatusBar to bState
14112>>>>>>>            End
14112>>>>>>>>
14112>>>>>>>        End
14112>>>>>>>>
14112>>>>>>>        Else Begin
14113>>>>>>>            Get private.Statusbar_state to bState
14114>>>>>>>        End
14114>>>>>>>>
14114>>>>>>>        Function_Return bState
14115>>>>>>>    End_Function
14116>>>>>>>    
14116>>>>>>>    Procedure Set Statusbar_State Integer bState
14118>>>>>>>        Handle hoStatusBar hoCommandBars
14118>>>>>>>        If (bState<>Statusbar_State(Self)) Begin
14120>>>>>>>            Set private.Statusbar_State to bState
14121>>>>>>>            Get Statusbar_ID to hoStatusBar
14122>>>>>>>            
14122>>>>>>>            Get phoCommandBars to hoCommandbars
14123>>>>>>>            If hoCommandbars Begin
14125>>>>>>>                If hoStatusBar Begin
14127>>>>>>>                    Set pbVisible of hoStatusBar to bState
14128>>>>>>>                End
14128>>>>>>>>
14128>>>>>>>            End
14128>>>>>>>>
14128>>>>>>>            Else Begin
14129>>>>>>>                If (Window_Handle(Self)) Begin
14131>>>>>>>                    If hoStatusBar ;                        Send Activate_Component hoStatusBar bState  nonfocusable
14134>>>>>>>                End
14134>>>>>>>>
14134>>>>>>>            End
14134>>>>>>>>
14134>>>>>>>        End
14134>>>>>>>>
14134>>>>>>>    End_Procedure
14135>>>>>>>    
14135>>>>>>>    Procedure Toggle_Statusbar
14137>>>>>>>        Set Statusbar_State to (not(statusbar_State(Self)))
14138>>>>>>>    End_Procedure
14139>>>>>>>    
14139>>>>>>>    Procedure AutoSizeLocate
14141>>>>>>>    End_Procedure
14142>>>>>>>    
14142>>>>>>>    Procedure Size_Components
14144>>>>>>>        Integer iToolBar iStatBar //iClient
14144>>>>>>>        Integer iSizeToolBar
14144>>>>>>>        Handle hoCommandbars
14144>>>>>>>        
14144>>>>>>>        Get phoCommandBars to hoCommandbars
14145>>>>>>>        If hoCommandbars ;            Procedure_Return
14148>>>>>>>        
14148>>>>>>>        If not (Window_Handle(Self)) ;            Procedure_Return
14151>>>>>>>        
14151>>>>>>>        Get ToolBar_id   to iToolBar
14152>>>>>>>        Get StatusBar_id to iStatBar
14153>>>>>>>        //Get Client_id    To iClient
14153>>>>>>>        
14153>>>>>>>        If (iToolBar and Window_Handle(iToolbar)) Begin
14155>>>>>>>            //Send AutoSizeLocate To iToolBar
14155>>>>>>>            Get GuiSize of iToolbar to iSizeToolbar
14156>>>>>>>            Set GUIsize of iToolbar to (hi(iSizeToolbar)) (low(iSizeToolbar)) // forces auto resize - don't change size
14157>>>>>>>            //set GUIsize of iToolbar to 28 800 // forces auto resize
14157>>>>>>>        End
14157>>>>>>>>
14157>>>>>>>        
14157>>>>>>>        If (iStatBar and Window_Handle(iStatBar)) Begin
14159>>>>>>>            Send AutoSizeLocate to iStatBar
14160>>>>>>>        End
14160>>>>>>>>
14160>>>>>>>    End_Procedure
14161>>>>>>>    
14161>>>>>>>    Procedure Activate_Component Integer Obj Integer st Integer focusmode
14163>>>>>>>        Integer act
14163>>>>>>>        If not Obj ;            Procedure_Return
14166>>>>>>>        Get Active_State of Obj to act
14167>>>>>>>        If (st and act=0) Begin
14169>>>>>>>            Set Focus_Mode of obj to focusable
14170>>>>>>>            Send Add_focus to obj Self
14171>>>>>>>            Set Focus_Mode of obj to focusmode
14172>>>>>>>        End
14172>>>>>>>>
14172>>>>>>>        Else If (st=0 and act) ;            Send deactivate to obj
14176>>>>>>>    End_Procedure
14177>>>>>>>    
14177>>>>>>>    Procedure Add_Components
14179>>>>>>>        Integer hClient
14179>>>>>>>        Handle hoCommandbars
14179>>>>>>>        Get phoCommandBars to hoCommandbars
14180>>>>>>>        If not hoCommandbars Begin
14182>>>>>>>            Get Client_id to hClient
14183>>>>>>>            If (hClient and hClient<>Self ) ; // this forces the client to start at a                Set mdi_top_margin of hClient to (mdi_top_margin(hClient)) // proper size when maximized w/ no components.
14186>>>>>>>            Send Activate_Component (Toolbar_Id(Self)) ;                (Toolbar_State(Self)) nonfocusable
14187>>>>>>>            Send Activate_Component (Statusbar_Id(Self)) ;                (Statusbar_State(Self)) nonfocusable
14188>>>>>>>            Send Size_Components
14189>>>>>>>        End
14189>>>>>>>>
14189>>>>>>>    End_Procedure
14190>>>>>>>    
14190>>>>>>>    Procedure Activate Returns Integer
14192>>>>>>>        Integer bFail
14192>>>>>>>        Forward Get MSG_activate to bFail
14194>>>>>>>        //If NOT bFail Send Add_Components
14194>>>>>>>        Send Add_Components
14195>>>>>>>        Set Main_Window to Self
14196>>>>>>>        Procedure_Return bFail
14197>>>>>>>    End_Procedure
14198>>>>>>>    
14198>>>>>>>    Procedure Client_Message Integer Msg_Id
14200>>>>>>>        Integer hoClient
14200>>>>>>>        Get Client_id to hoClient
14201>>>>>>>        If (hoClient and hoClient <> Self) ;            Send Msg_id to hoClient
14204>>>>>>>    End_Procedure
14205>>>>>>>    
14205>>>>>>>    Procedure Arrange_Icons
14207>>>>>>>        Send Client_Message Current_Message
14208>>>>>>>    End_Procedure
14209>>>>>>>    
14209>>>>>>>    Procedure Cascade_Windows
14211>>>>>>>        Send Client_Message Current_Message
14212>>>>>>>    End_Procedure
14213>>>>>>>    
14213>>>>>>>    Procedure Tile_Windows_Horizontal
14215>>>>>>>        Send Client_Message Current_Message
14216>>>>>>>    End_Procedure
14217>>>>>>>    
14217>>>>>>>    Procedure Tile_Windows_Vertical
14219>>>>>>>        Send Client_Message Current_Message
14220>>>>>>>    End_Procedure
14221>>>>>>>    
14221>>>>>>>    Procedure Set GuiSize Integer sizy Integer sizx
14223>>>>>>>        Forward Set GUISize to sizy sizx
14225>>>>>>>        If BuildingObjectId ;            Procedure_Return
14228>>>>>>>        Send Size_Components
14229>>>>>>>    End_Procedure
14230>>>>>>>    
14230>>>>>>>    //  Returns false to indicate that this is not a DEO. This is used by
14230>>>>>>>    //  delegation to figure out if you are within a DEO and should therefore
14230>>>>>>>    //  send a DEO message. DEO view clients set this true
14230>>>>>>>    //
14230>>>>>>>    Function Is_Function Integer MsgId Integer ObjId Integer DelegateFg Returns Integer
14232>>>>>>>        Integer DelMode rVal Id
14232>>>>>>>        Move ( If(DelegateFg,Self,ObjId) ) to Id
14233>>>>>>>        Get Delegation_mode of Id to DelMode
14234>>>>>>>        Set Delegation_mode of Id to No_Delegate_or_Error
14235>>>>>>>        Get MsgId of ObjId to rVal
14236>>>>>>>        Set Delegation_mode of Id to DelMode
14237>>>>>>>        Function_Return rVal
14238>>>>>>>    End_Function
14239>>>>>>>    
14239>>>>>>>    // In this class this should return an id or nothing (no delegation).
14239>>>>>>>    // Note, if no context exists return a 0 or ''.
14239>>>>>>>    //
14239>>>>>>>    Function Help_Context Integer Context_Type Returns String
14241>>>>>>>        Integer ID
14241>>>>>>>        String  rVal
14241>>>>>>>        
14241>>>>>>>        If (Context_Type = HELP_CONTEXT_ID) ;            Get Help_ID to rVal
14244>>>>>>>        Else If (Context_Type = HELP_CONTEXT_KEYWORD) ;            Get Help_Keyword to rVal
14248>>>>>>>        Else If (Context_Type = HELP_CONTEXT_ID_OR_KEY) Begin
14251>>>>>>>            Get Help_ID to ID
14252>>>>>>>            If (ID = 0) ;                Get Help_Keyword to rVal
14255>>>>>>>            Move ID to rVal
14256>>>>>>>            If (rval = '') ;                Move 0 to rVal
14259>>>>>>>        End
14259>>>>>>>>
14259>>>>>>>        Else If (Context_Type = HELP_CONTEXT_DATAFILE) ;            Move '' to rVal
14263>>>>>>>        
14263>>>>>>>        Function_Return rVal
14264>>>>>>>    End_Function
14265>>>>>>>    
14265>>>>>>>    // Get context based on eContext. If no content found, Don't delegate with panels --- end the search (added to 11.1. See help_mx.pkg)
14265>>>>>>>    //
14265>>>>>>>    Function HtmlHelpContext Integer eContext String ByRef sContext Returns Integer
14267>>>>>>>        Integer eContextFound
14267>>>>>>>        Get HtmlHelpObjectContext eContext (&sContext) to eContextFound // context for this one object
14268>>>>>>>        Function_Return eContextFound
14269>>>>>>>    End_Function
14270>>>>>>>    
14270>>>>>>>    
14270>>>>>>>    // When verify_exit_appliction is received by default just
14270>>>>>>>    // send this message to the Mdi-client Id.
14270>>>>>>>    //
14270>>>>>>>    Function Verify_Exit_Application Returns Integer
14272>>>>>>>        Integer Id rVal
14272>>>>>>>        Get Client_Id to id
14273>>>>>>>        If (Id and Id<>Self) ;            Get Verify_Exit_application of Id to rVal
14276>>>>>>>        Function_Return Rval
14277>>>>>>>    End_Function
14278>>>>>>>    
14278>>>>>>>    // When exit notifiction is received by default just
14278>>>>>>>    // send this message to the Mdi-client Id.
14278>>>>>>>    //
14278>>>>>>>    Procedure Notify_Exit_Application
14280>>>>>>>        Send Client_Message Current_Message
14281>>>>>>>        
14281>>>>>>>        Forward Send Notify_Exit_Application
14283>>>>>>>    End_Procedure
14284>>>>>>>    
14284>>>>>>>    Procedure Minimize_all_Windows
14286>>>>>>>        Send Client_Message Current_Message
14287>>>>>>>    End_Procedure
14288>>>>>>>    
14288>>>>>>>    Procedure Restore_all_Windows
14290>>>>>>>        Send Client_Message Current_Message
14291>>>>>>>    End_Procedure
14292>>>>>>>    
14292>>>>>>>    // augmented to  activate if required
14292>>>>>>>    //
14292>>>>>>>    Procedure End_Construct_Object
14294>>>>>>>        Forward Send End_Construct_object
14296>>>>>>>        If (Auto_activate_state(Self)) ;            Send Activate
14299>>>>>>>    End_Procedure
14300>>>>>>>    
14300>>>>>>>    Procedure Add_Focus Handle hoParent Returns Integer
14302>>>>>>>        Integer iError i iViews
14302>>>>>>>        Handle[] hoAutoActivateViews
14303>>>>>>>        Forward Get msg_Add_Focus hoParent to iError
14305>>>>>>>        If (iError=0) Begin
14307>>>>>>>            Get phoAutoActivateViews to hoAutoActivateViews
14308>>>>>>>            Move (SizeOfArray(hoAutoActivateViews)) to iViews
14309>>>>>>>            For i from 0 to (iViews-1)
14315>>>>>>>>
14315>>>>>>>                Send Activate_View of hoAutoActivateViews[i]
14316>>>>>>>            Loop
14317>>>>>>>>
14317>>>>>>>        End
14317>>>>>>>>
14317>>>>>>>    End_Procedure
14318>>>>>>>    
14318>>>>>>>    // adds a view to the array of views to be autoactivated
14318>>>>>>>    
14318>>>>>>>    Procedure AddAutoActivateView Handle hoView
14320>>>>>>>        Handle[] hoAutoActivateViews
14321>>>>>>>        Get phoAutoActivateViews to hoAutoActivateViews
14322>>>>>>>        Move hoView to hoAutoActivateViews[SizeOfArray(hoAutoActivateViews)]
14323>>>>>>>        Set phoAutoActivateViews to hoAutoActivateViews
14324>>>>>>>    End_Procedure
14325>>>>>>>    
14325>>>>>>>End_Class
14326>>>>>>>
14326>>>>>>>
14326>>>>>>>Use DFCursor.pkg
Including file: Dfcursor.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Dfcursor.pkg)
14326>>>>>>>>>//  create a desktop object named Cursor_control that understands
14326>>>>>>>>>//   Send Cursor_Wait to (cursor_Control(self))
14326>>>>>>>>>//            creates hourclass cursor
14326>>>>>>>>>//   Send Cursor_ready to (cursor_Control(self))
14326>>>>>>>>>//            restores regular cursor
14326>>>>>>>>>//
14326>>>>>>>>>Use Cursor.pkg
Including file: Cursor.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Cursor.pkg)
14326>>>>>>>>>>>Use Windows.pkg
14326>>>>>>>>>>>Use WinUser.pkg
14326>>>>>>>>>>>
14326>>>>>>>>>>>// Standard Cursor IDs
14326>>>>>>>>>>>
14326>>>>>>>>>>>
14326>>>>>>>>>>>
14326>>>>>>>>>>>
14326>>>>>>>>>>>
14326>>>>>>>>>>>Class CursorShape is a DFBaseToolPanel //BasicPanel
14327>>>>>>>>>>>    
14327>>>>>>>>>>>    Procedure Construct_Object
14329>>>>>>>>>>>        Forward Send Construct_Object
14331>>>>>>>>>>>        
14331>>>>>>>>>>>        Property Handle ClassCursorHandle 0
14332>>>>>>>>>>>        Set Visible_State to False
14333>>>>>>>>>>>        Set Size to 1 1
14334>>>>>>>>>>>    End_Procedure
14335>>>>>>>>>>>    
14335>>>>>>>>>>>    Procedure Set Cursor Integer CursorType
14337>>>>>>>>>>>        Handle CursorID hWnd
14337>>>>>>>>>>>        Longptr retval lpCursorType
14337>>>>>>>>>>>        Get Window_Handle to hWnd
14338>>>>>>>>>>>        If (CursorType = 0) Begin
14340>>>>>>>>>>>            Send Release_Mouse_Capture
14341>>>>>>>>>>>            Move (SetClassLongPtr(hWnd, GCL_HCURSOR, ClassCursorHandle(Self))) to retval
14342>>>>>>>>>>>            Set ClassCursorHandle to 0
14343>>>>>>>>>>>            Send Page_Object False
14344>>>>>>>>>>>        End
14344>>>>>>>>>>>>
14344>>>>>>>>>>>        Else Begin
14345>>>>>>>>>>>            Send Page_Object True
14346>>>>>>>>>>>            Get Window_Handle to hWnd
14347>>>>>>>>>>>            If (ClassCursorHandle(Self) = 0) ;                Set ClassCursorHandle to (GetClassLongPtr(hWnd, GCL_HCURSOR))
14350>>>>>>>>>>>            
14350>>>>>>>>>>>            Move CursorType to lpCursorType    // Move to Longptr type to avoid conversion from integer to pointer in the next line
14351>>>>>>>>>>>            Move (LoadCursorW(0,lpCursorType)) to CursorID
14352>>>>>>>>>>>            
14352>>>>>>>>>>>            Move (SetClassLongPtr(hWnd, GCL_HCURSOR, CursorID )) to retval
14353>>>>>>>>>>>            Move (SetCursor(CursorID)) to retval
14354>>>>>>>>>>>            Send Set_Mouse_Capture
14355>>>>>>>>>>>        End
14355>>>>>>>>>>>>
14355>>>>>>>>>>>    End_Procedure
14356>>>>>>>>>>>    
14356>>>>>>>>>>>    Procedure Mouse_Up
14358>>>>>>>>>>>        Handle retval
14358>>>>>>>>>>>        Send Set_Mouse_Capture
14359>>>>>>>>>>>        Move (SetCursor(GetClassLongPtr(Window_Handle(Self), GCL_HCURSOR))) to retval
14360>>>>>>>>>>>    End_Procedure
14361>>>>>>>>>>>    
14361>>>>>>>>>>>    Procedure Cursor_Wait
14363>>>>>>>>>>>        Set cursor to IDC_WAIT
14364>>>>>>>>>>>    End_Procedure
14365>>>>>>>>>>>    
14365>>>>>>>>>>>    Procedure Cursor_Ready
14367>>>>>>>>>>>        Set cursor to 0
14368>>>>>>>>>>>    End_Procedure
14369>>>>>>>>>>>    
14369>>>>>>>>>>>    
14369>>>>>>>>>>>End_Class
14370>>>>>>>>>
14370>>>>>>>>>Object Cursor_Control is a CursorShape
14372>>>>>>>>>End_Object
14373>>>>>>>>>
14373>>>>>>>
14373>>>>>>>//  Main DEO High level main Panel Class
14373>>>>>>>//
14373>>>>>>>Class Panel is a AppPanel
14374>>>>>>>    
14374>>>>>>>    Procedure Construct_Object
14376>>>>>>>        String St
14376>>>>>>>        Integer iVal
14376>>>>>>>        DWord dwState
14376>>>>>>>        Forward Send Construct_Object
14378>>>>>>>        
14378>>>>>>>        // defaults to hourglass...end_construct will remove
14378>>>>>>>        Send Cursor_wait to (Cursor_Control(Self)) // hourglass
14379>>>>>>>        
14379>>>>>>>        Set private_pbEnvironmentProgram to True
14380>>>>>>>    End_Procedure
14381>>>>>>>    
14381>>>>>>>    
14381>>>>>>>    // This sends the message register_active_view to all child objects.
14381>>>>>>>    // It passes the object ID of the object that is requesting this
14381>>>>>>>    // information. The flag BCast_Focus determines if this should
14381>>>>>>>    // broadcast or broadcast_focus
14381>>>>>>>    //
14381>>>>>>>    Procedure Notify_All_Views Integer Msg Integer obj Integer Bcast_Focus
14383>>>>>>>        Integer clobj
14383>>>>>>>        Get Client_ID to clObj
14384>>>>>>>        If (ClObj = 0) ;            Move Self to ClObj
14387>>>>>>>        If BCast_Focus ;            Broadcast_Focus Send Msg to Clobj obj
14391>>>>>>>        Else ;            Broadcast       Send Msg to Clobj obj
14394>>>>>>>    End_Procedure
14395>>>>>>>    
14395>>>>>>>
14395>>>>>>>    
14395>>>>>>>    // augmented to remove hourglass
14395>>>>>>>    //
14395>>>>>>>    Procedure End_Construct_Object
14397>>>>>>>        // if application object exists, we need to tell that object that we are the main panel
14397>>>>>>>        If ghoApplication ;            Set phoMainPanel of ghoApplication to Self
14400>>>>>>>        Forward Send End_Construct_object
14402>>>>>>>        Send Cursor_ready to (Cursor_Control(Self)) // restore
14403>>>>>>>    End_Procedure
14404>>>>>>>    
14404>>>>>>>    Procedure Page Integer iState
14406>>>>>>>        Forward Send Page iState
14408>>>>>>>        If (iState =1) Begin
14410>>>>>>>            Send Load_Environment
14411>>>>>>>        End
14411>>>>>>>>
14411>>>>>>>    End_Procedure
14412>>>>>>>    
14412>>>>>>>End_Class
14413>>>>>>>
14413>>>>>>>//  Main DEO High level main MDI Client Class
14413>>>>>>>//
14413>>>>>>>//  Currently there is nothing special about this class but it was
14413>>>>>>>//  created because it is logically correct. Extensions may go here in
14413>>>>>>>//  the futire
14413>>>>>>>Class ClientArea is a AppClientArea
14414>>>>>>>End_Class
14415>>>>>>>
14415>>>>>Use cCJCommandBarSystem.pkg
Including file: cCJCommandBarSystem.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCJCommandBarSystem.pkg)
14415>>>>>>>Use Windows.pkg
14415>>>>>>>Use cRegistry.pkg
14415>>>>>>>Use cCJCommandBars.pkg // loads CodeJock class
Including file: cCJCommandBars.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCJCommandBars.pkg)
14415>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v22.0.0\Bin\Codejock.CommandBars.Unicode.x64.v22.0.0.ocx
14415>>>>>>>>>Use FlexCom20.pkg
Including file: FlexCOM20.pkg    (C:\Program Files\DataFlex 23.0\Pkg\FlexCOM20.pkg)
14415>>>>>>>>>>>// Full Flexcom support for automation (cComAutomationObject),
14415>>>>>>>>>>>// activeX (cComActiveXControl and document objects (cComDocumentObject)
14415>>>>>>>>>>>Use FlexCOM20_Base.pkg // defines basic flexcom symbols and class cComAutomationObject
Including file: FlexCOM20_Base.pkg    (C:\Program Files\DataFlex 23.0\Pkg\FlexCOM20_Base.pkg)
14415>>>>>>>>>>>>>// Flexcom support for automation (cComAutomationObject).
14415>>>>>>>>>>>>>// If you want activeX and document objects use FlexCom20.pkg
14415>>>>>>>>>>>>>Use VdfBase.pkg
14415>>>>>>>>>>>>>Use ComTypes.pkg
Including file: ComTypes.pkg    (C:\Program Files\DataFlex 23.0\Pkg\ComTypes.pkg)
14415>>>>>>>>>>>>>>>Use Variant.pkg
14415>>>>>>>>>>>>>>>
14415>>>>>>>>>>>>>>>
14415>>>>>>>>>>>>>
14415>>>>>>>>>>>>>
14415>>>>>>>>>>>>>
14415>>>>>>>>>>>>>//Enumerations for the peAutoCreate property
14415>>>>>>>>>>>>>//acNoAutoCreate - Do not automatically instantiate the COM object upon VDF object creation.
14415>>>>>>>>>>>>>//You must manually instantiate the COM object using CreateComObject. This is the default
14415>>>>>>>>>>>>>//for cComAutomation.
14415>>>>>>>>>>>>>Define acNoAutoCreate for 0
14415>>>>>>>>>>>>>//acAutoCreate - Automatically instantiate the COM object upon VDF object creation.
14415>>>>>>>>>>>>>//You won't need to manually instantiate the COM object. This is the default
14415>>>>>>>>>>>>>//for cComActiveXControl
14415>>>>>>>>>>>>>Define acAutoCreate for 1
14415>>>>>>>>>>>>>//acDeferredAutoCreate - Automatically instantiate the COM object during Page_Object,
14415>>>>>>>>>>>>>//and automatically destroy the COM object during Page_Delete. Use this setting only
14415>>>>>>>>>>>>>//if acAutoCreate causes problems.
14415>>>>>>>>>>>>>Define acDeferredAutoCreate for 2
14415>>>>>>>>>>>>>
14415>>>>>>>>>>>>>Class cComAutomationObject is a DFComAutomationObject
14416>>>>>>>>>>>>>    Procedure Construct_Object
14418>>>>>>>>>>>>>        Forward Send Construct_Object
14420>>>>>>>>>>>>>        Send RegisterComEvents
14421>>>>>>>>>>>>>    End_Procedure
14422>>>>>>>>>>>>>    
14422>>>>>>>>>>>>>    // It is expected that the Com class will augment this with useful event definitions
14422>>>>>>>>>>>>>    Procedure RegisterComEvents
14424>>>>>>>>>>>>>    End_Procedure
14425>>>>>>>>>>>>>    
14425>>>>>>>>>>>>>    // Attach the DF object to com automation object via progId.
14425>>>>>>>>>>>>>    // returns: Boolean bSuccess if Ok, If not ok, pcComObject is set to null
14425>>>>>>>>>>>>>    Function AttachActiveObject Returns Boolean
14427>>>>>>>>>>>>>        String sProgId
14427>>>>>>>>>>>>>        Variant vComObject
14427>>>>>>>>>>>>>        Boolean bSuccess
14427>>>>>>>>>>>>>        Get psProgID to sProgId
14428>>>>>>>>>>>>>        Get ComActiveObject sProgId to vComObject
14429>>>>>>>>>>>>>        Set pvComObject to vComObject
14430>>>>>>>>>>>>>        Move (not(IsNullComObject(vComObject))) to bSuccess // success of variant is not null
14431>>>>>>>>>>>>>        Function_Return bSuccess
14432>>>>>>>>>>>>>    End_Function
14433>>>>>>>>>>>>>    
14433>>>>>>>>>>>>>    // returns true if the control is created.
14433>>>>>>>>>>>>>    Function IsComObjectCreated Returns Boolean
14435>>>>>>>>>>>>>        Variant vComObject
14435>>>>>>>>>>>>>        Get pvComObject to vComObject
14436>>>>>>>>>>>>>        Function_Return (not(IsNullComObject(vComObject)))
14437>>>>>>>>>>>>>    End_Function
14438>>>>>>>>>>>>>    
14438>>>>>>>>>>>>>End_Class
14439>>>>>>>>>>>>>
14439>>>>>>>>>>>>>
14439>>>>>>>>>>>
14439>>>>>>>>>>>Use Windows.pkg
14439>>>>>>>>>>>
14439>>>>>>>>>>>Class cComDocumentObject is a DFComDocumentObject
14440>>>>>>>>>>>
14440>>>>>>>>>>>
14440>>>>>>>>>>>    Procedure Construct_Object
14442>>>>>>>>>>>        Forward Send Construct_Object
14444>>>>>>>>>>>        Send RegisterComEvents
14445>>>>>>>>>>>        Send Define_Standard_Object_Mixin
14446>>>>>>>>>>>        Send Define_Shadow_Mixin
14447>>>>>>>>>>>    End_Procedure
14448>>>>>>>>>>>
14448>>>>>>>>>>>    Import_Class_Protocol Standard_Object_Mixin
14449>>>>>>>>>>>    Import_Class_Protocol Shadow_Mixin
14450>>>>>>>>>>>
14450>>>>>>>>>>>    
14450>>>>>>>>>>>    // It is expected that the Com class will augment this with useful event definitions
14450>>>>>>>>>>>    Procedure RegisterComEvents
14452>>>>>>>>>>>    End_Procedure
14453>>>>>>>>>>>    
14453>>>>>>>>>>>    // returns true if the control is created.
14453>>>>>>>>>>>    Function IsComObjectCreated Returns Boolean
14455>>>>>>>>>>>        Variant vComObject
14455>>>>>>>>>>>        Get pvComObject to vComObject
14456>>>>>>>>>>>        Function_Return (not(IsNullComObject(vComObject)))
14457>>>>>>>>>>>    End_Function
14458>>>>>>>>>>>
14458>>>>>>>>>>>
14458>>>>>>>>>>>End_Class
14459>>>>>>>>>>>
14459>>>>>>>>>>>Class cComActiveXControl is a DFComActiveXControl
14460>>>>>>>>>>>
14460>>>>>>>>>>>    Procedure Construct_Object
14462>>>>>>>>>>>        Forward Send Construct_Object
14464>>>>>>>>>>>        Send RegisterComEvents
14465>>>>>>>>>>>
14465>>>>>>>>>>>
14465>>>>>>>>>>>        Send Define_Standard_Object_Mixin
14466>>>>>>>>>>>        Send Define_Single_Item_Navigate_Mixin
14467>>>>>>>>>>>        Send Define_Dflabel_Mixin
14468>>>>>>>>>>>
14468>>>>>>>>>>>        // internal: set true object is notified that the OCX value has changed.
14468>>>>>>>>>>>        Property Boolean pbPrivateControlChanging False
14469>>>>>>>>>>>        // Class sets this true when making a local (externally triggered) change. This is
14469>>>>>>>>>>>        // set when a Set Value change is made to prevent recursion
14469>>>>>>>>>>>        Property Boolean pbPrivateControlRefresh False
14470>>>>>>>>>>>        
14470>>>>>>>>>>>        // added to eumlate a single item form support
14470>>>>>>>>>>>        Property Boolean pbPrivateItem_Changed_State False
14471>>>>>>>>>>>        
14471>>>>>>>>>>>        // This keeps track of value, even when control is not created
14471>>>>>>>>>>>        Property String psPrivateValue ''
14472>>>>>>>>>>>        
14472>>>>>>>>>>>        // If set true, then the control will attempt to bind the value property in the object to the
14472>>>>>>>>>>>        // comValue in the control. It will try to keep these values in synch at all times. This allows a
14472>>>>>>>>>>>        // control to be used as a Form style value control. the default is true. Even when true if the
14472>>>>>>>>>>>        // get/set ComValue methods are not set up to do anything, this will do nothing.
14472>>>>>>>>>>>        Property Boolean pbBindValue True
14473>>>>>>>>>>>        
14473>>>>>>>>>>>    End_Procedure
14474>>>>>>>>>>>    
14474>>>>>>>>>>>    // It is expected that the Com class will augment this with useful event definitions
14474>>>>>>>>>>>    Procedure RegisterComEvents
14476>>>>>>>>>>>    End_Procedure
14477>>>>>>>>>>>
14477>>>>>>>>>>>    
14477>>>>>>>>>>>    // returns true if the control is created.
14477>>>>>>>>>>>    Function IsComObjectCreated Returns Boolean
14479>>>>>>>>>>>        Variant vComObject
14479>>>>>>>>>>>        Get pvComObject to vComObject
14480>>>>>>>>>>>        Function_Return (not(IsNullComObject(vComObject)))
14481>>>>>>>>>>>    End_Function
14482>>>>>>>>>>>    
14482>>>>>>>>>>>
14482>>>>>>>>>>>    Import_Class_Protocol Standard_Object_Mixin
14483>>>>>>>>>>>    Import_Class_Protocol Single_Item_Navigate_Mixin
14484>>>>>>>>>>>    Import_Class_Protocol Dflabel_Mixin
14485>>>>>>>>>>>
14485>>>>>>>>>>>    // added to eumlate a single item form support
14485>>>>>>>>>>>    Function Item_Count Returns Integer
14487>>>>>>>>>>>        Function_Return 1
14488>>>>>>>>>>>    End_Function
14489>>>>>>>>>>>    
14489>>>>>>>>>>>    // added to eumlate a single item form support
14489>>>>>>>>>>>    Procedure Set Item_Changed_State Integer iItem Integer iState
14491>>>>>>>>>>>        Set pbPrivateItem_changed_state to iState
14492>>>>>>>>>>>        If (iState and changed_state(Self)=False) ;            Set changed_state to True
14495>>>>>>>>>>>    End_Procedure
14496>>>>>>>>>>>    
14496>>>>>>>>>>>    Function Item_Changed_State Integer iItem Returns Integer
14498>>>>>>>>>>>        Function_Return (pbPrivateItem_changed_state(Self))
14499>>>>>>>>>>>    End_Function
14500>>>>>>>>>>>    
14500>>>>>>>>>>>    
14500>>>>>>>>>>>    // augment to set the label's appearance
14500>>>>>>>>>>>    Procedure Shadow_Display
14502>>>>>>>>>>>        Forward Send Shadow_display
14504>>>>>>>>>>>        Send Label_Shadow_Display
14505>>>>>>>>>>>    End_Procedure
14506>>>>>>>>>>>    
14506>>>>>>>>>>>    // Created to simulate get/Set value.
14506>>>>>>>>>>>    Procedure Set Value Integer iItem String sVal
14508>>>>>>>>>>>        If not (pbPrivateControlChanging(Self)) ;            Send OnRefreshControl sVal
14511>>>>>>>>>>>        Set psPrivateValue to sVal
14512>>>>>>>>>>>        Send OnChange
14513>>>>>>>>>>>        //Set changed_state to True
14513>>>>>>>>>>>        Set item_changed_state 0 to True
14514>>>>>>>>>>>    End_Procedure
14515>>>>>>>>>>>    
14515>>>>>>>>>>>    Function Value Integer iItem Returns String
14517>>>>>>>>>>>        Function_Return (psPrivateValue(Self))
14518>>>>>>>>>>>        //function_return (Controlvalue(self))
14518>>>>>>>>>>>    End_Function
14519>>>>>>>>>>>    
14519>>>>>>>>>>>    Procedure OnChange
14521>>>>>>>>>>>    End_Procedure
14522>>>>>>>>>>>    
14522>>>>>>>>>>>    
14522>>>>>>>>>>>    // It is expected that the sub-class will provide functionality
14522>>>>>>>>>>>    // for these messages. This gets and sets the value of the actual
14522>>>>>>>>>>>    // window control. These should only be used to synchronize the window
14522>>>>>>>>>>>    // control and the DF side. Do not use for any other purpose.
14522>>>>>>>>>>>    Procedure Set ControlValue String sVal
14524>>>>>>>>>>>    End_Procedure
14525>>>>>>>>>>>    
14525>>>>>>>>>>>    Function ControlValue Returns String
14527>>>>>>>>>>>    End_Function
14528>>>>>>>>>>>    
14528>>>>>>>>>>>    Procedure OnCreate
14530>>>>>>>>>>>        // if we are binding value to comValue, do so upon creation
14530>>>>>>>>>>>        If (pbBindValue(Self)) ;            Set ControlValue to (Value(Self))
14533>>>>>>>>>>>        Forward Send OnCreate
14535>>>>>>>>>>>    End_Procedure
14536>>>>>>>>>>>    
14536>>>>>>>>>>>    // Notification that the control is about to be activated in place. The COM component is
14536>>>>>>>>>>>    // created but OnCreate is not yet fired (this happens after the InPlaceActivate).
14536>>>>>>>>>>>    Procedure OnBeforeInPlaceActivate
14538>>>>>>>>>>>        Forward Send OnBeforeInPlaceActivate
14540>>>>>>>>>>>    End_Procedure
14541>>>>>>>>>>>    
14541>>>>>>>>>>>    // Notification that the control's value has been changed
14541>>>>>>>>>>>    // externally by the program (via set value). Use to synchronize
14541>>>>>>>>>>>    // OCX control value.
14541>>>>>>>>>>>    Procedure OnRefreshControl String sVal
14543>>>>>>>>>>>        Boolean bOld
14543>>>>>>>>>>>        If (pbBindValue(Self) and pbPrivateControlChanging(Self)=0 and IsComObjectCreated(Self)) Begin
14545>>>>>>>>>>>            Get pbPrivateControlRefresh to bOld
14546>>>>>>>>>>>            Set pbPrivateControlRefresh to True
14547>>>>>>>>>>>            Set ControlValue to sval
14548>>>>>>>>>>>            Set pbPrivateControlRefresh to bOld
14549>>>>>>>>>>>        End
14549>>>>>>>>>>>>
14549>>>>>>>>>>>    End_Procedure
14550>>>>>>>>>>>    
14550>>>>>>>>>>>    // notification that the control has changed its value. Used to
14550>>>>>>>>>>>    // synchronize the object with the change.
14550>>>>>>>>>>>    Procedure OnControlValueChanged
14552>>>>>>>>>>>        String sVal
14552>>>>>>>>>>>        Boolean bOld
14552>>>>>>>>>>>        If (pbBindValue(Self) and pbPrivateControlRefresh(Self)=0) Begin
14554>>>>>>>>>>>            Get pbPrivateControlChanging to bOld
14555>>>>>>>>>>>            Set pbPrivateControlChanging to True
14556>>>>>>>>>>>            Get ControlValue to sVal
14557>>>>>>>>>>>            Set Value to sVal
14558>>>>>>>>>>>            Set Item_Changed_State 0 to True
14559>>>>>>>>>>>            Set pbPrivateControlChanging to bOld
14560>>>>>>>>>>>        End
14560>>>>>>>>>>>>
14560>>>>>>>>>>>    End_Procedure
14561>>>>>>>>>>>    
14561>>>>>>>>>>>    Procedure Delete_Data
14563>>>>>>>>>>>        Forward Send Delete_Data
14565>>>>>>>>>>>        Set Value to ''
14566>>>>>>>>>>>        Set Changed_state to False
14567>>>>>>>>>>>        Set Item_changed_state 0 to False
14568>>>>>>>>>>>    End_Procedure
14569>>>>>>>>>>>
14569>>>>>>>>>>>
14569>>>>>>>>>>>End_Class
14570>>>>>>>>>>>
14570>>>>>>>>>>>
14570>>>>>>>>>
14570>>>>>>>>>// Changes to Imported package
14570>>>>>>>>>//     OLEXTPxx to XTPxx
14570>>>>>>>>>//     OLExtpxx to xtpxx
14570>>>>>>>>>//     OLESTDxxx and OLEXPxxxx to STD/XP
14570>>>>>>>>>//     OLEOLE to OLE
14570>>>>>>>>>//     OLESBPS to SBPS
14570>>>>>>>>>//     OLETPM to TPM
14570>>>>>>>>>//     cCom classes to cCJ
14570>>>>>>>>>//     cCJAutomationObject back to cComAutomationObject
14570>>>>>>>>>//     cCJActiveXControl back to cComActiveXControl
14570>>>>>>>>>//     cCJTabToolBar to cCJComTabToolBar
14570>>>>>>>>>//     cCJTabControlItem to cCJComTabControlItem
14570>>>>>>>>>//     cCJStatusBar to cCJComStatusBar
14570>>>>>>>>>//     cCJStatusBarPane to cCJComStatusBarPane
14570>>>>>>>>>//     cCJMenuBar to cCJComMenuBar
14570>>>>>>>>>//     remove OnComUpdate from cCJCommandBars
14570>>>>>>>>>//     Use statements as noted below (classes moved to these files)
14570>>>>>>>>>//     Set classlibrary of all cComAutomation objects to Windows (for class doc)
14570>>>>>>>>>
14570>>>>>>>>>// These have been extracted from this class and moved into seperate packages
14570>>>>>>>>>// because other Codejock classes use these.
14570>>>>>>>>>Use cCJColorManager.pkg     // cCJColorManager
Including file: cCJColorManager.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCJColorManager.pkg)
14570>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
14570>>>>>>>>>>>Use FlexCom20.pkg
14570>>>>>>>>>>>
14570>>>>>>>>>>>Define XTPColorManagerColor for Integer
14570>>>>>>>>>>>    Define STDCOLOR_BACKGROUND for 1
14570>>>>>>>>>>>    Define STDCOLOR_ACTIVECAPTION for 2
14570>>>>>>>>>>>    Define STDCOLOR_INACTIVECAPTION for 3
14570>>>>>>>>>>>    Define STDCOLOR_MENU for 4
14570>>>>>>>>>>>    Define STDCOLOR_WINDOW for 5
14570>>>>>>>>>>>    Define STDCOLOR_WINDOWFRAME for 6
14570>>>>>>>>>>>    Define STDCOLOR_MENUTEXT for 7
14570>>>>>>>>>>>    Define STDCOLOR_WINDOWTEXT for 8
14570>>>>>>>>>>>    Define STDCOLOR_CAPTIONTEXT for 9
14570>>>>>>>>>>>    Define STDCOLOR_ACTIVEBORDER for 10
14570>>>>>>>>>>>    Define STDCOLOR_INACTIVEBORDER for 11
14570>>>>>>>>>>>    Define STDCOLOR_APPWORKSPACE for 12
14570>>>>>>>>>>>    Define STDCOLOR_HIGHLIGHT for 13
14570>>>>>>>>>>>    Define STDCOLOR_HIGHLIGHTTEXT for 14
14570>>>>>>>>>>>    Define STDCOLOR_BTNFACE for 15
14570>>>>>>>>>>>    Define STDCOLOR_BTNSHADOW for 16
14570>>>>>>>>>>>    Define STDCOLOR_GRAYTEXT for 17
14570>>>>>>>>>>>    Define STDCOLOR_BTNTEXT for 18
14570>>>>>>>>>>>    Define STDCOLOR_INACTIVECAPTIONTEXT for 19
14570>>>>>>>>>>>    Define STDCOLOR_BTNHIGHLIGHT for 20
14570>>>>>>>>>>>    Define STDCOLOR_3DDKSHADOW for 21
14570>>>>>>>>>>>    Define STDCOLOR_3DLIGHT for 22
14570>>>>>>>>>>>    Define STDCOLOR_INFOTEXT for 23
14570>>>>>>>>>>>    Define STDCOLOR_INFOBK for 24
14570>>>>>>>>>>>    Define STDCOLOR_HOTLIGHT for 26
14570>>>>>>>>>>>    Define STDCOLOR_GRADIENTACTIVECAPTION for 27
14570>>>>>>>>>>>    Define STDCOLOR_GRADIENTINACTIVECAPTION for 28
14570>>>>>>>>>>>    Define XPCOLOR_TOOLBAR_FACE for 30
14570>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT for 31
14570>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_BORDER for 32
14570>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_PUSHED for 33
14570>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_CHECKED for 36
14570>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_CHECKED_BORDER for 37
14570>>>>>>>>>>>    Define XPCOLOR_ICONSHADDOW for 34
14570>>>>>>>>>>>    Define XPCOLOR_GRAYTEXT for 35
14570>>>>>>>>>>>    Define XPCOLOR_TOOLBAR_GRIPPER for 38
14570>>>>>>>>>>>    Define XPCOLOR_SEPARATOR for 39
14570>>>>>>>>>>>    Define XPCOLOR_DISABLED for 40
14570>>>>>>>>>>>    Define XPCOLOR_MENUBAR_FACE for 41
14570>>>>>>>>>>>    Define XPCOLOR_MENUBAR_EXPANDED for 42
14570>>>>>>>>>>>    Define XPCOLOR_MENUBAR_BORDER for 43
14570>>>>>>>>>>>    Define XPCOLOR_MENUBAR_TEXT for 44
14570>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_TEXT for 45
14570>>>>>>>>>>>    Define XPCOLOR_TOOLBAR_TEXT for 46
14570>>>>>>>>>>>    Define XPCOLOR_PUSHED_TEXT for 47
14570>>>>>>>>>>>    Define XPCOLOR_TAB_INACTIVE_BACK for 48
14570>>>>>>>>>>>    Define XPCOLOR_TAB_INACTIVE_TEXT for 49
14570>>>>>>>>>>>    Define XPCOLOR_HIGHLIGHT_PUSHED_BORDER for 50
14570>>>>>>>>>>>    Define XPCOLOR_3DFACE for 51
14570>>>>>>>>>>>    Define XPCOLOR_3DSHADOW for 52
14570>>>>>>>>>>>    Define XPCOLOR_FRAME for 54
14570>>>>>>>>>>>    Define XPCOLOR_SPLITTER_FACE for 55
14570>>>>>>>>>>>    Define XPCOLOR_LABEL for 56
14570>>>>>>>>>>>    Define XPCOLOR_STATICFRAME for 57
14570>>>>>>>>>>>
14570>>>>>>>>>>>Define XTPCurrentSystemTheme for Integer
14570>>>>>>>>>>>    // No known theme in use
14570>>>>>>>>>>>    Define xtpSystemThemeUnknown for 0
14570>>>>>>>>>>>    // Blue theme in use
14570>>>>>>>>>>>    Define xtpSystemThemeBlue for 1
14570>>>>>>>>>>>    // Olive theme in use
14570>>>>>>>>>>>    Define xtpSystemThemeOlive for 2
14570>>>>>>>>>>>    // Silver theme in use
14570>>>>>>>>>>>    Define xtpSystemThemeSilver for 3
14570>>>>>>>>>>>    // Silver theme in use
14570>>>>>>>>>>>    Define xtpSystemThemeRoyale for 4
14570>>>>>>>>>>>    // Silver theme in use
14570>>>>>>>>>>>    Define xtpSystemThemeAero for 5
14570>>>>>>>>>>>    // Use OS theme.
14570>>>>>>>>>>>    Define xtpSystemThemeAuto for 6
14570>>>>>>>>>>>
14570>>>>>>>>>>>
14570>>>>>>>>>>>// CLSID: {C0DE2200-DE43-4B56-BCEB-E14B825CF245}
14570>>>>>>>>>>>Class cCJIColorManager is a Mixin
14571>>>>>>>>>>>
14571>>>>>>>>>>>    Function ComSystemTheme Returns XTPCurrentSystemTheme
14573>>>>>>>>>>>        XTPCurrentSystemTheme retVal
14573>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
14574>>>>>>>>>>>        Function_Return retVal
14575>>>>>>>>>>>    End_Function
14576>>>>>>>>>>>
14576>>>>>>>>>>>    Procedure Set ComSystemTheme XTPCurrentSystemTheme value
14578>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
14579>>>>>>>>>>>    End_Procedure
14580>>>>>>>>>>>
14580>>>>>>>>>>>    Function ComEnableLunaBlueForRoyaleTheme Returns Boolean
14582>>>>>>>>>>>        Boolean retVal
14582>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
14583>>>>>>>>>>>        Function_Return retVal
14584>>>>>>>>>>>    End_Function
14585>>>>>>>>>>>
14585>>>>>>>>>>>    Procedure Set ComEnableLunaBlueForRoyaleTheme Boolean value
14587>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
14588>>>>>>>>>>>    End_Procedure
14589>>>>>>>>>>>
14589>>>>>>>>>>>    Function ComColor XTPColorManagerColor llIndex Returns OLE_COLOR
14591>>>>>>>>>>>        Handle hDispatchDriver
14591>>>>>>>>>>>        OLE_COLOR retVal
14591>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14592>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14593>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
14594>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_I4 to retVal
14595>>>>>>>>>>>        Function_Return retVal
14596>>>>>>>>>>>    End_Function
14597>>>>>>>>>>>
14597>>>>>>>>>>>    Procedure ComSetColor XTPColorManagerColor llIndex OLE_COLOR llColor
14599>>>>>>>>>>>        Handle hDispatchDriver
14599>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14600>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14601>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
14602>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
14603>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1 OLE_VT_VOID
14604>>>>>>>>>>>    End_Procedure
14605>>>>>>>>>>>
14605>>>>>>>>>>>    Function ComGetCurrentSystemTheme Returns XTPCurrentSystemTheme
14607>>>>>>>>>>>        Handle hDispatchDriver
14607>>>>>>>>>>>        XTPCurrentSystemTheme retVal
14607>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14608>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
14609>>>>>>>>>>>        Function_Return retVal
14610>>>>>>>>>>>    End_Function
14611>>>>>>>>>>>End_Class
14612>>>>>>>>>>>
14612>>>>>>>>>>>// CoClass
14612>>>>>>>>>>>// CLSID: {C0DE2200-F3FE-46E7-BB64-DB033F439F8B}
14612>>>>>>>>>>>Class cCJColorManager is a cComAutomationObject
14613>>>>>>>>>>>    Import_Class_Protocol cCJIColorManager
14614>>>>>>>>>>>
14614>>>>>>>>>>>    Procedure Construct_Object
14616>>>>>>>>>>>        Forward Send Construct_Object
14618>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
14619>>>>>>>>>>>    End_Procedure
14620>>>>>>>>>>>End_Class
14621>>>>>>>>>>>
14621>>>>>>>>>Use cCJImageManager.pkg     // cCJImageManagerIcons, cCJImageManagerIcon, cCJImageManager, cCJImageManagerIconSet
Including file: cCJImageManager.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCJImageManager.pkg)
14621>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
14621>>>>>>>>>>>Use FlexCom20.pkg
14621>>>>>>>>>>>
14621>>>>>>>>>>>// Image State
14621>>>>>>>>>>>Define XTPImageState for Integer
14621>>>>>>>>>>>    Define xtpImageNormal for 0
14621>>>>>>>>>>>    Define xtpImageDisabled for 1
14621>>>>>>>>>>>    Define xtpImageHot for 2
14621>>>>>>>>>>>    Define xtpImageChecked for 3
14621>>>>>>>>>>>    Define xtpImagePressed for 4
14621>>>>>>>>>>>
14621>>>>>>>>>>>// CLSID: {C0DE2200-CD87-48F0-AD57-63682A2F3FCC}
14621>>>>>>>>>>>Class cCJIImageManagerIcons is a Mixin
14622>>>>>>>>>>>
14622>>>>>>>>>>>    Function ComDrawReverted Returns Boolean
14624>>>>>>>>>>>        Boolean retVal
14624>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
14625>>>>>>>>>>>        Function_Return retVal
14626>>>>>>>>>>>    End_Function
14627>>>>>>>>>>>
14627>>>>>>>>>>>    Procedure Set ComDrawReverted Boolean value
14629>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
14630>>>>>>>>>>>    End_Procedure
14631>>>>>>>>>>>
14631>>>>>>>>>>>    Function ComMaskColor Returns OLE_COLOR
14633>>>>>>>>>>>        OLE_COLOR retVal
14633>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
14634>>>>>>>>>>>        Function_Return retVal
14635>>>>>>>>>>>    End_Function
14636>>>>>>>>>>>
14636>>>>>>>>>>>    Procedure Set ComMaskColor OLE_COLOR value
14638>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
14639>>>>>>>>>>>    End_Procedure
14640>>>>>>>>>>>
14640>>>>>>>>>>>    Function ComCount Returns Integer
14642>>>>>>>>>>>        Handle hDispatchDriver
14642>>>>>>>>>>>        Integer retVal
14642>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14643>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
14644>>>>>>>>>>>        Function_Return retVal
14645>>>>>>>>>>>    End_Function
14646>>>>>>>>>>>
14646>>>>>>>>>>>    Procedure ComAddIcon Longptr llHandle Integer llCommand XTPImageState llimageState
14648>>>>>>>>>>>        Handle hDispatchDriver
14648>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14649>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
14650>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llHandle
14651>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14652>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14653>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 2 OLE_VT_VOID
14654>>>>>>>>>>>    End_Procedure
14655>>>>>>>>>>>
14655>>>>>>>>>>>    Procedure ComLoadIcon String llPath Integer llCommand XTPImageState llimageState
14657>>>>>>>>>>>        Handle hDispatchDriver
14657>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14658>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
14659>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14660>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14661>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14662>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
14663>>>>>>>>>>>    End_Procedure
14664>>>>>>>>>>>
14664>>>>>>>>>>>    Procedure ComAddBitmap Longptr llHandle Variant llCommands XTPImageState llimageState Boolean llAlpha
14666>>>>>>>>>>>        Handle hDispatchDriver
14666>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14667>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14668>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llHandle
14669>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llCommands
14670>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14671>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llAlpha
14672>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
14673>>>>>>>>>>>    End_Procedure
14674>>>>>>>>>>>
14674>>>>>>>>>>>    Procedure ComLoadBitmap String llPath Variant llCommands XTPImageState llimageState
14676>>>>>>>>>>>        Handle hDispatchDriver
14676>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14677>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
14678>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14679>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llCommands
14680>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14681>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
14682>>>>>>>>>>>    End_Procedure
14683>>>>>>>>>>>
14683>>>>>>>>>>>    Procedure ComLoadBitmapFromResource Longptr llModule Integer llResource Variant llCommands XTPImageState llimageState
14685>>>>>>>>>>>        Handle hDispatchDriver
14685>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14686>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14687>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llModule
14688>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llResource
14689>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llCommands
14690>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14691>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
14692>>>>>>>>>>>    End_Procedure
14693>>>>>>>>>>>
14693>>>>>>>>>>>    Procedure ComLoadIconFromResource Longptr llModule Integer llResource Integer llCommand XTPImageState llimageState
14695>>>>>>>>>>>        Handle hDispatchDriver
14695>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14696>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14697>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llModule
14698>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llResource
14699>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14700>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14701>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
14702>>>>>>>>>>>    End_Procedure
14703>>>>>>>>>>>
14703>>>>>>>>>>>    Function ComLoadVectorIcon String llPath Integer llnIDCommand Integer llnWidth XTPImageState llimageState Returns Boolean
14705>>>>>>>>>>>        Handle hDispatchDriver
14705>>>>>>>>>>>        Boolean retVal
14705>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14706>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14707>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14708>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIDCommand
14709>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnWidth
14710>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14711>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 17 OLE_VT_BOOL to retVal
14712>>>>>>>>>>>        Function_Return retVal
14713>>>>>>>>>>>    End_Function
14714>>>>>>>>>>>
14714>>>>>>>>>>>    Function ComLoadVectorIconCode String llCode Integer llnIDCommand Integer llnWidth XTPImageState llimageState Returns Boolean
14716>>>>>>>>>>>        Handle hDispatchDriver
14716>>>>>>>>>>>        Boolean retVal
14716>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14717>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
14718>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCode
14719>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIDCommand
14720>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnWidth
14721>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14722>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 18 OLE_VT_BOOL to retVal
14723>>>>>>>>>>>        Function_Return retVal
14724>>>>>>>>>>>    End_Function
14725>>>>>>>>>>>
14725>>>>>>>>>>>    Function ComLoadVectorIconFromResource BigInt llModule String llResourceType Integer llResource Integer llnIDCommand Integer llnWidth XTPImageState llimageState Returns Boolean
14727>>>>>>>>>>>        Handle hDispatchDriver
14727>>>>>>>>>>>        Boolean retVal
14727>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14728>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 6
14729>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I8 llModule
14730>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llResourceType
14731>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llResource
14732>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIDCommand
14733>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnWidth
14734>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
14735>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 19 OLE_VT_BOOL to retVal
14736>>>>>>>>>>>        Function_Return retVal
14737>>>>>>>>>>>    End_Function
14738>>>>>>>>>>>
14738>>>>>>>>>>>    Procedure ComRemoveAll
14740>>>>>>>>>>>        Handle hDispatchDriver
14740>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14741>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
14742>>>>>>>>>>>    End_Procedure
14743>>>>>>>>>>>
14743>>>>>>>>>>>    Procedure ComAddIcons Variant llIcons
14745>>>>>>>>>>>        Handle hDispatchDriver
14745>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14746>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14747>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llIcons
14748>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
14749>>>>>>>>>>>    End_Procedure
14750>>>>>>>>>>>
14750>>>>>>>>>>>    Procedure ComRemoveIcon Integer llCommand
14752>>>>>>>>>>>        Handle hDispatchDriver
14752>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14753>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14754>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14755>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 10 OLE_VT_VOID
14756>>>>>>>>>>>    End_Procedure
14757>>>>>>>>>>>
14757>>>>>>>>>>>    Function ComIsAlphaIconsSupported Returns Boolean
14759>>>>>>>>>>>        Handle hDispatchDriver
14759>>>>>>>>>>>        Boolean retVal
14759>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14760>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_BOOL to retVal
14761>>>>>>>>>>>        Function_Return retVal
14762>>>>>>>>>>>    End_Function
14763>>>>>>>>>>>
14763>>>>>>>>>>>    Procedure ComRefreshAll
14765>>>>>>>>>>>        Handle hDispatchDriver
14765>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14766>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 12 OLE_VT_VOID
14767>>>>>>>>>>>    End_Procedure
14768>>>>>>>>>>>
14768>>>>>>>>>>>    Function ComGetImage Integer llCommand Integer llWidth Returns Variant
14770>>>>>>>>>>>        Handle hDispatchDriver
14770>>>>>>>>>>>        Variant retVal
14770>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14771>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14772>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
14773>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
14774>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_DISPATCH to retVal
14775>>>>>>>>>>>        Function_Return retVal
14776>>>>>>>>>>>    End_Function
14777>>>>>>>>>>>
14777>>>>>>>>>>>    Function Com_NewEnum Returns Variant
14779>>>>>>>>>>>        Handle hDispatchDriver
14779>>>>>>>>>>>        Variant retVal
14779>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14780>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
14781>>>>>>>>>>>        Function_Return retVal
14782>>>>>>>>>>>    End_Function
14783>>>>>>>>>>>
14783>>>>>>>>>>>    Procedure ComDoPropExchange Variant llpPX
14785>>>>>>>>>>>        Handle hDispatchDriver
14785>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14786>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14787>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpPX
14788>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
14789>>>>>>>>>>>    End_Procedure
14790>>>>>>>>>>>End_Class
14791>>>>>>>>>>>
14791>>>>>>>>>>>// CoClass
14791>>>>>>>>>>>// CLSID: {C0DE2200-4290-47A7-8B05-90AC979F12D5}
14791>>>>>>>>>>>Class cCJImageManagerIcons is a cComAutomationObject
14792>>>>>>>>>>>    Import_Class_Protocol cCJIImageManagerIcons
14793>>>>>>>>>>>
14793>>>>>>>>>>>    Procedure Construct_Object
14795>>>>>>>>>>>        Forward Send Construct_Object
14797>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
14798>>>>>>>>>>>    End_Procedure
14799>>>>>>>>>>>End_Class
14800>>>>>>>>>>>
14800>>>>>>>>>>>// CLSID: {C0DE2200-7540-4926-8D3D-82A953AE7B7B}
14800>>>>>>>>>>>// Dispatch interface for ImageManager Control
14800>>>>>>>>>>>Class cCJ_DImageManager is a Mixin
14801>>>>>>>>>>>
14801>>>>>>>>>>>    Function ComIcons Returns Variant
14803>>>>>>>>>>>        Variant retVal
14803>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_DISPATCH to retVal
14804>>>>>>>>>>>        Function_Return retVal
14805>>>>>>>>>>>    End_Function
14806>>>>>>>>>>>
14806>>>>>>>>>>>    Procedure Set ComIcons Variant value
14808>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_DISPATCH to value
14809>>>>>>>>>>>    End_Procedure
14810>>>>>>>>>>>
14810>>>>>>>>>>>    Function ComIsAlphaIconsSupported Returns Boolean
14812>>>>>>>>>>>        Handle hDispatchDriver
14812>>>>>>>>>>>        Boolean retVal
14812>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14813>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
14814>>>>>>>>>>>        Function_Return retVal
14815>>>>>>>>>>>    End_Function
14816>>>>>>>>>>>
14816>>>>>>>>>>>    Procedure ComAboutBox
14818>>>>>>>>>>>        Handle hDispatchDriver
14818>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14819>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
14820>>>>>>>>>>>    End_Procedure
14821>>>>>>>>>>>End_Class
14822>>>>>>>>>>>
14822>>>>>>>>>>>// CLSID: {C0DE2200-E0F3-48CF-BD1D-5305A4F46C99}
14822>>>>>>>>>>>// Event interface for ImageManager Control
14822>>>>>>>>>>>Class cCJ_DImageManagerEvents is a Mixin
14823>>>>>>>>>>>
14823>>>>>>>>>>>    Procedure RegisterComEvents
14825>>>>>>>>>>>    End_Procedure
14826>>>>>>>>>>>End_Class
14827>>>>>>>>>>>
14827>>>>>>>>>>>// CoClass
14827>>>>>>>>>>>// ProgID: Codejock.ImageManager.22.0.0
14827>>>>>>>>>>>// CLSID: {C0DE2200-3949-47B3-B687-85E8DDA2AEDB}
14827>>>>>>>>>>>// Xtreme ImageManager Control
14827>>>>>>>>>>>Class cCJImageManager is a cComActiveXControl
14828>>>>>>>>>>>    Import_Class_Protocol cCJ_DImageManager
14829>>>>>>>>>>>    Import_Class_Protocol cCJ_DImageManagerEvents
14830>>>>>>>>>>>
14830>>>>>>>>>>>    Procedure Construct_Object
14832>>>>>>>>>>>        Forward Send Construct_Object
14834>>>>>>>>>>>        Set psProgID to "{C0DE2200-3949-47B3-B687-85E8DDA2AEDB}"
14835>>>>>>>>>>>        Set psEventId to "{C0DE2200-E0F3-48CF-BD1D-5305A4F46C99}"
14836>>>>>>>>>>>        Set peAutoCreate to acAutoCreate
14837>>>>>>>>>>>    End_Procedure
14838>>>>>>>>>>>End_Class
14839>>>>>>>>>>>
14839>>>>>>>>>>>// CLSID: {C0DE2200-AE6D-46A8-BC77-CEE7D5CE9ED7}
14839>>>>>>>>>>>Class cCJImageManagerIcon is a cComAutomationObject
14840>>>>>>>>>>>
14840>>>>>>>>>>>    Function ComId Returns Integer
14842>>>>>>>>>>>        Handle hDispatchDriver
14842>>>>>>>>>>>        Integer retVal
14842>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14843>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
14844>>>>>>>>>>>        Function_Return retVal
14845>>>>>>>>>>>    End_Function
14846>>>>>>>>>>>
14846>>>>>>>>>>>    Function ComWidth Returns Integer
14848>>>>>>>>>>>        Handle hDispatchDriver
14848>>>>>>>>>>>        Integer retVal
14848>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14849>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
14850>>>>>>>>>>>        Function_Return retVal
14851>>>>>>>>>>>    End_Function
14852>>>>>>>>>>>
14852>>>>>>>>>>>    Function ComHeight Returns Integer
14854>>>>>>>>>>>        Handle hDispatchDriver
14854>>>>>>>>>>>        Integer retVal
14854>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14855>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
14856>>>>>>>>>>>        Function_Return retVal
14857>>>>>>>>>>>    End_Function
14858>>>>>>>>>>>
14858>>>>>>>>>>>    Function ComScaled Returns Boolean
14860>>>>>>>>>>>        Handle hDispatchDriver
14860>>>>>>>>>>>        Boolean retVal
14860>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14861>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_BOOL to retVal
14862>>>>>>>>>>>        Function_Return retVal
14863>>>>>>>>>>>    End_Function
14864>>>>>>>>>>>
14864>>>>>>>>>>>    Function ComAlpha Returns Boolean
14866>>>>>>>>>>>        Handle hDispatchDriver
14866>>>>>>>>>>>        Boolean retVal
14866>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14867>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_BOOL to retVal
14868>>>>>>>>>>>        Function_Return retVal
14869>>>>>>>>>>>    End_Function
14870>>>>>>>>>>>
14870>>>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
14872>>>>>>>>>>>        Handle hDispatchDriver
14872>>>>>>>>>>>        OLE_HANDLE retVal
14872>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14873>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_I4 to retVal
14874>>>>>>>>>>>        Function_Return retVal
14875>>>>>>>>>>>    End_Function
14876>>>>>>>>>>>
14876>>>>>>>>>>>    Procedure ComDraw OLE_HANDLE llhDC Integer llx Integer lly Integer llcx Integer llcy XTPImageState llstate
14878>>>>>>>>>>>        Handle hDispatchDriver
14878>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14879>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 6
14880>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhDC
14881>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
14882>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
14883>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
14884>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
14885>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llstate
14886>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
14887>>>>>>>>>>>    End_Procedure
14888>>>>>>>>>>>
14888>>>>>>>>>>>    Function ComCreatePicture XTPImageState llstate Returns Variant
14890>>>>>>>>>>>        Handle hDispatchDriver
14890>>>>>>>>>>>        Variant retVal
14890>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14891>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14892>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llstate
14893>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_DISPATCH to retVal
14894>>>>>>>>>>>        Function_Return retVal
14895>>>>>>>>>>>    End_Function
14896>>>>>>>>>>>
14896>>>>>>>>>>>    Function ComScale Integer llWidth Returns Variant
14898>>>>>>>>>>>        Handle hDispatchDriver
14898>>>>>>>>>>>        Variant retVal
14898>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14899>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14900>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
14901>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_DISPATCH to retVal
14902>>>>>>>>>>>        Function_Return retVal
14903>>>>>>>>>>>    End_Function
14904>>>>>>>>>>>End_Class
14905>>>>>>>>>>>
14905>>>>>>>>>>>// CLSID: {C0DE2200-374B-4AED-9306-0B7AC4343BCC}
14905>>>>>>>>>>>Class cCJImageManagerIconSet is a cComAutomationObject
14906>>>>>>>>>>>
14906>>>>>>>>>>>    Function ComId Returns Integer
14908>>>>>>>>>>>        Handle hDispatchDriver
14908>>>>>>>>>>>        Integer retVal
14908>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14909>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
14910>>>>>>>>>>>        Function_Return retVal
14911>>>>>>>>>>>    End_Function
14912>>>>>>>>>>>
14912>>>>>>>>>>>    Function ComCount Returns Integer
14914>>>>>>>>>>>        Handle hDispatchDriver
14914>>>>>>>>>>>        Integer retVal
14914>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14915>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
14916>>>>>>>>>>>        Function_Return retVal
14917>>>>>>>>>>>    End_Function
14918>>>>>>>>>>>
14918>>>>>>>>>>>    Function ComGetImage Integer llWidth Returns Variant
14920>>>>>>>>>>>        Handle hDispatchDriver
14920>>>>>>>>>>>        Variant retVal
14920>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14921>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14922>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
14923>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_DISPATCH to retVal
14924>>>>>>>>>>>        Function_Return retVal
14925>>>>>>>>>>>    End_Function
14926>>>>>>>>>>>
14926>>>>>>>>>>>    Function Com_NewEnum Returns Variant
14928>>>>>>>>>>>        Handle hDispatchDriver
14928>>>>>>>>>>>        Variant retVal
14928>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14929>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
14930>>>>>>>>>>>        Function_Return retVal
14931>>>>>>>>>>>    End_Function
14932>>>>>>>>>>>End_Class
14933>>>>>>>>>>>
14933>>>>>>>>>Use cCJPropExchange.pkg     // cCJPropExchange
Including file: cCJPropExchange.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCJPropExchange.pkg)
14933>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
14933>>>>>>>>>>>Use FlexCom20.pkg
14933>>>>>>>>>>>
14933>>>>>>>>>>>// CLSID: {C0DE2200-1659-4A68-B826-DAFCAB16E824}
14933>>>>>>>>>>>Class cCJPropExchange is a cComAutomationObject
14934>>>>>>>>>>>
14934>>>>>>>>>>>    Function ComValue Returns Variant
14936>>>>>>>>>>>        Variant retVal
14936>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 0 OLE_VT_VARIANT to retVal
14937>>>>>>>>>>>        Function_Return retVal
14938>>>>>>>>>>>    End_Function
14939>>>>>>>>>>>
14939>>>>>>>>>>>    Procedure Set ComValue Variant value
14941>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 0 OLE_VT_VARIANT to value
14942>>>>>>>>>>>    End_Procedure
14943>>>>>>>>>>>
14943>>>>>>>>>>>    Function ComEncoding Returns String
14945>>>>>>>>>>>        String retVal
14945>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
14946>>>>>>>>>>>        Function_Return retVal
14947>>>>>>>>>>>    End_Function
14948>>>>>>>>>>>
14948>>>>>>>>>>>    Procedure Set ComEncoding String value
14950>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
14951>>>>>>>>>>>    End_Procedure
14952>>>>>>>>>>>
14952>>>>>>>>>>>    Function ComCreateAsXML Boolean llLoading String llSection Returns Boolean
14954>>>>>>>>>>>        Handle hDispatchDriver
14954>>>>>>>>>>>        Boolean retVal
14954>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14955>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14956>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLoading
14957>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llSection
14958>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BOOL to retVal
14959>>>>>>>>>>>        Function_Return retVal
14960>>>>>>>>>>>    End_Function
14961>>>>>>>>>>>
14961>>>>>>>>>>>    Function ComCreateAsRegistry Boolean llLoading String llSection Returns Boolean
14963>>>>>>>>>>>        Handle hDispatchDriver
14963>>>>>>>>>>>        Boolean retVal
14963>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14964>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14965>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLoading
14966>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llSection
14967>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
14968>>>>>>>>>>>        Function_Return retVal
14969>>>>>>>>>>>    End_Function
14970>>>>>>>>>>>
14970>>>>>>>>>>>    Function ComCreateAsBinaryFile Boolean llLoading String llPath Returns Boolean
14972>>>>>>>>>>>        Handle hDispatchDriver
14972>>>>>>>>>>>        Boolean retVal
14972>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14973>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
14974>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLoading
14975>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14976>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BOOL to retVal
14977>>>>>>>>>>>        Function_Return retVal
14978>>>>>>>>>>>    End_Function
14979>>>>>>>>>>>
14979>>>>>>>>>>>    Function ComLoadFromFile String llPath Returns Boolean
14981>>>>>>>>>>>        Handle hDispatchDriver
14981>>>>>>>>>>>        Boolean retVal
14981>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14982>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14983>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14984>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_BOOL to retVal
14985>>>>>>>>>>>        Function_Return retVal
14986>>>>>>>>>>>    End_Function
14987>>>>>>>>>>>
14987>>>>>>>>>>>    Procedure ComSaveToFile String llPath
14989>>>>>>>>>>>        Handle hDispatchDriver
14989>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14990>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14991>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
14992>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
14993>>>>>>>>>>>    End_Procedure
14994>>>>>>>>>>>
14994>>>>>>>>>>>    Function ComGetSection String llSection Returns Variant
14996>>>>>>>>>>>        Handle hDispatchDriver
14996>>>>>>>>>>>        Variant retVal
14996>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
14997>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
14998>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llSection
14999>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_DISPATCH to retVal
15000>>>>>>>>>>>        Function_Return retVal
15001>>>>>>>>>>>    End_Function
15002>>>>>>>>>>>
15002>>>>>>>>>>>    Procedure ComExchangeString String llPropName String ByRef llValue String llDefaultValue
15004>>>>>>>>>>>        Handle hDispatchDriver
15004>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15005>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
15006>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPropName
15007>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_BSTR) llValue
15008>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llDefaultValue
15009>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
15010>>>>>>>>>>>    End_Procedure
15011>>>>>>>>>>>
15011>>>>>>>>>>>    Procedure ComExchangeInt String llPropName Integer ByRef llValue Integer llDefaultValue
15013>>>>>>>>>>>        Handle hDispatchDriver
15013>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15014>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
15015>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPropName
15016>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llValue
15017>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llDefaultValue
15018>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
15019>>>>>>>>>>>    End_Procedure
15020>>>>>>>>>>>
15020>>>>>>>>>>>    Function ComLoading Returns Boolean
15022>>>>>>>>>>>        Handle hDispatchDriver
15022>>>>>>>>>>>        Boolean retVal
15022>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15023>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_BOOL to retVal
15024>>>>>>>>>>>        Function_Return retVal
15025>>>>>>>>>>>    End_Function
15026>>>>>>>>>>>
15026>>>>>>>>>>>    Function ComValid Returns Boolean
15028>>>>>>>>>>>        Handle hDispatchDriver
15028>>>>>>>>>>>        Boolean retVal
15028>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15029>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
15030>>>>>>>>>>>        Function_Return retVal
15031>>>>>>>>>>>    End_Function
15032>>>>>>>>>>>
15032>>>>>>>>>>>    Procedure ComEmptySection
15034>>>>>>>>>>>        Handle hDispatchDriver
15034>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15035>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
15036>>>>>>>>>>>    End_Procedure
15037>>>>>>>>>>>End_Class
15038>>>>>>>>>>>
15038>>>>>>>>>Use cCJTooltipContext.pkg   // cCJToolTipContext
Including file: cCJTooltipContext.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCJTooltipContext.pkg)
15038>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
15038>>>>>>>>>>>Use FlexCom20.pkg
15038>>>>>>>>>>>
15038>>>>>>>>>>>// ToolTip Style
15038>>>>>>>>>>>Define XTPToolTipStyle for Integer
15038>>>>>>>>>>>    Define xtpToolTipStandard for 0
15038>>>>>>>>>>>    Define xtpToolTipBalloon for 1
15038>>>>>>>>>>>    Define xtpToolTipOffice for 2
15038>>>>>>>>>>>    Define xtpToolTipRTF for 3
15038>>>>>>>>>>>    Define xtpToolTipLuna for 4
15038>>>>>>>>>>>    Define xtpToolTipResource for 5
15038>>>>>>>>>>>    Define xtpToolTipHTML for 6
15038>>>>>>>>>>>    Define xtpToolTipMarkup for 7
15038>>>>>>>>>>>    Define xtpToolTipOffice2013 for 8
15038>>>>>>>>>>>    Define xtpToolTipOffice2016 for 8
15038>>>>>>>>>>>
15038>>>>>>>>>>>// ToolTip Icon
15038>>>>>>>>>>>Define XTPToolTipIcon for Integer
15038>>>>>>>>>>>    Define xtpToolTipIconNone for 0
15038>>>>>>>>>>>    Define xtpToolTipIconInfo for 1
15038>>>>>>>>>>>    Define xtpToolTipIconWarning for 2
15038>>>>>>>>>>>    Define xtpToolTipIconError for 3
15038>>>>>>>>>>>
15038>>>>>>>>>>>// CLSID: {C0DE2200-BFB7-4925-9BB5-D3A0DDA469AF}
15038>>>>>>>>>>>Class cCJIToolTipContext is a Mixin
15039>>>>>>>>>>>
15039>>>>>>>>>>>    Function ComStyle Returns XTPToolTipStyle
15041>>>>>>>>>>>        XTPToolTipStyle retVal
15041>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
15042>>>>>>>>>>>        Function_Return retVal
15043>>>>>>>>>>>    End_Function
15044>>>>>>>>>>>
15044>>>>>>>>>>>    Procedure Set ComStyle XTPToolTipStyle value
15046>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
15047>>>>>>>>>>>    End_Procedure
15048>>>>>>>>>>>
15048>>>>>>>>>>>    Function ComMaxTipWidth Returns Integer
15050>>>>>>>>>>>        Integer retVal
15050>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
15051>>>>>>>>>>>        Function_Return retVal
15052>>>>>>>>>>>    End_Function
15053>>>>>>>>>>>
15053>>>>>>>>>>>    Procedure Set ComMaxTipWidth Integer value
15055>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
15056>>>>>>>>>>>    End_Procedure
15057>>>>>>>>>>>
15057>>>>>>>>>>>    Function ComTipBkColor Returns OLE_COLOR
15059>>>>>>>>>>>        OLE_COLOR retVal
15059>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
15060>>>>>>>>>>>        Function_Return retVal
15061>>>>>>>>>>>    End_Function
15062>>>>>>>>>>>
15062>>>>>>>>>>>    Procedure Set ComTipBkColor OLE_COLOR value
15064>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
15065>>>>>>>>>>>    End_Procedure
15066>>>>>>>>>>>
15066>>>>>>>>>>>    Function ComTipTextColor Returns OLE_COLOR
15068>>>>>>>>>>>        OLE_COLOR retVal
15068>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
15069>>>>>>>>>>>        Function_Return retVal
15070>>>>>>>>>>>    End_Function
15071>>>>>>>>>>>
15071>>>>>>>>>>>    Procedure Set ComTipTextColor OLE_COLOR value
15073>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
15074>>>>>>>>>>>    End_Procedure
15075>>>>>>>>>>>
15075>>>>>>>>>>>    Function ComFont Returns Variant
15077>>>>>>>>>>>        Variant retVal
15077>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
15078>>>>>>>>>>>        Function_Return retVal
15079>>>>>>>>>>>    End_Function
15080>>>>>>>>>>>
15080>>>>>>>>>>>    Procedure Set ComFont Variant value
15082>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
15083>>>>>>>>>>>    End_Procedure
15084>>>>>>>>>>>
15084>>>>>>>>>>>    Function ComShowOfficeBorder Returns Boolean
15086>>>>>>>>>>>        Boolean retVal
15086>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
15087>>>>>>>>>>>        Function_Return retVal
15088>>>>>>>>>>>    End_Function
15089>>>>>>>>>>>
15089>>>>>>>>>>>    Procedure Set ComShowOfficeBorder Boolean value
15091>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
15092>>>>>>>>>>>    End_Procedure
15093>>>>>>>>>>>
15093>>>>>>>>>>>    Function ComShowShadow Returns Boolean
15095>>>>>>>>>>>        Boolean retVal
15095>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
15096>>>>>>>>>>>        Function_Return retVal
15097>>>>>>>>>>>    End_Function
15098>>>>>>>>>>>
15098>>>>>>>>>>>    Procedure Set ComShowShadow Boolean value
15100>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
15101>>>>>>>>>>>    End_Procedure
15102>>>>>>>>>>>
15102>>>>>>>>>>>    Function ComImageDPIScaling Returns Boolean
15104>>>>>>>>>>>        Boolean retVal
15104>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
15105>>>>>>>>>>>        Function_Return retVal
15106>>>>>>>>>>>    End_Function
15107>>>>>>>>>>>
15107>>>>>>>>>>>    Procedure Set ComImageDPIScaling Boolean value
15109>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
15110>>>>>>>>>>>    End_Procedure
15111>>>>>>>>>>>
15111>>>>>>>>>>>    Procedure ComShowTitleAndDescription Boolean llShowTitleAndDescription XTPToolTipIcon llIconTitle
15113>>>>>>>>>>>        Handle hDispatchDriver
15113>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15114>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
15115>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShowTitleAndDescription
15116>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIconTitle
15117>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 2 OLE_VT_VOID
15118>>>>>>>>>>>    End_Procedure
15119>>>>>>>>>>>
15119>>>>>>>>>>>    Function ComIsBalloonStyleSupported Returns Boolean
15121>>>>>>>>>>>        Handle hDispatchDriver
15121>>>>>>>>>>>        Boolean retVal
15121>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15122>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_BOOL to retVal
15123>>>>>>>>>>>        Function_Return retVal
15124>>>>>>>>>>>    End_Function
15125>>>>>>>>>>>
15125>>>>>>>>>>>    Procedure ComSetMargin Integer llLeft Integer llTop Integer llRight Integer llBottom
15127>>>>>>>>>>>        Handle hDispatchDriver
15127>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15128>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
15129>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
15130>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
15131>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
15132>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
15133>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
15134>>>>>>>>>>>    End_Procedure
15135>>>>>>>>>>>
15135>>>>>>>>>>>    Procedure ComShowImage Boolean llShowImage Integer llImageBase
15137>>>>>>>>>>>        Handle hDispatchDriver
15137>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15138>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
15139>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShowImage
15140>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llImageBase
15141>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
15142>>>>>>>>>>>    End_Procedure
15143>>>>>>>>>>>
15143>>>>>>>>>>>    Procedure ComSetVectorIconSize Integer llcx Integer llcy
15145>>>>>>>>>>>        Handle hDispatchDriver
15145>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15146>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
15147>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
15148>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
15149>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 12 OLE_VT_VOID
15150>>>>>>>>>>>    End_Procedure
15151>>>>>>>>>>>End_Class
15152>>>>>>>>>>>
15152>>>>>>>>>>>// CoClass
15152>>>>>>>>>>>// CLSID: {C0DE2200-8C00-4F05-AF87-9F05BCB55475}
15152>>>>>>>>>>>Class cCJToolTipContext is a cComAutomationObject
15153>>>>>>>>>>>    Import_Class_Protocol cCJIToolTipContext
15154>>>>>>>>>>>
15154>>>>>>>>>>>    Procedure Construct_Object
15156>>>>>>>>>>>        Forward Send Construct_Object
15158>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
15159>>>>>>>>>>>    End_Procedure
15160>>>>>>>>>>>End_Class
15161>>>>>>>>>>>
15161>>>>>>>>>Use cCJTabControlItem.pkg   // cCJTabManagerMargin, cCJTabManagerColorSet, cCJTabManager, cCJTabControlItem
Including file: cCJTabControlItem.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCJTabControlItem.pkg)
15161>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
15161>>>>>>>>>>>Use FlexCom20.pkg
15161>>>>>>>>>>>
15161>>>>>>>>>>>Define XTPTabAppearanceStyle for Integer
15161>>>>>>>>>>>    Define xtpTabAppearancePropertyPage for 0
15161>>>>>>>>>>>    Define xtpTabAppearancePropertyPageSelected for 1
15161>>>>>>>>>>>    Define xtpTabAppearancePropertyPageFlat for 2
15161>>>>>>>>>>>    Define xtpTabAppearancePropertyPage2003 for 3
15161>>>>>>>>>>>    Define xtpTabAppearanceStateButtons for 4
15161>>>>>>>>>>>    Define xtpTabAppearanceFlat for 6
15161>>>>>>>>>>>    Define xtpTabThemeExcel2003 for 7
15161>>>>>>>>>>>    Define xtpTabAppearanceVisio for 8
15161>>>>>>>>>>>    Define xtpTabAppearancePropertyPage2007 for 10
15161>>>>>>>>>>>    Define xtpTabAppearancePropertyPageAccess2007 for 11
15161>>>>>>>>>>>    Define xtpTabThemeVisualStudio2003 for 5
15161>>>>>>>>>>>    Define xtpTabThemeVisualStudio2005 for 9
15161>>>>>>>>>>>    Define xtpTabThemeVisualStudio2010 for 12
15161>>>>>>>>>>>    Define xtpTabThemeVisualStudio2012 for 13
15161>>>>>>>>>>>    Define xtpTabThemeVisualStudio2015 for 15
15161>>>>>>>>>>>    Define xtpTabThemeNativeWindows10 for 16
15161>>>>>>>>>>>    Define xtpTabThemeVisualStudio2017 for 17
15161>>>>>>>>>>>    Define xtpTabThemeVisualStudio2019 for 18
15161>>>>>>>>>>>    Define xtpTabThemeVisualStudio2022 for 19
15161>>>>>>>>>>>    Define xtpTabThemeOffice2013 for 14
15161>>>>>>>>>>>    Define xtpTabThemeOffice2016 for 14
15161>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio for 5
15161>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2003 for 5
15161>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2005 for 9
15161>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2010 for 12
15161>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2012 for 13
15161>>>>>>>>>>>    Define xtpTabAppearanceVisualStudio2015 for 15
15161>>>>>>>>>>>    Define xtpTabAppearanceNativeWindows10 for 16
15161>>>>>>>>>>>    Define xtpTabAppearanceExcel for 7
15161>>>>>>>>>>>
15161>>>>>>>>>>>Define XTPTabColorStyle for Integer
15161>>>>>>>>>>>    Define xtpTabColorDefault for 1
15161>>>>>>>>>>>    Define xtpTabColorOffice2003 for 4
15161>>>>>>>>>>>    Define xtpTabColorWinNative for 8
15161>>>>>>>>>>>    Define xtpTabColorResource for 32
15161>>>>>>>>>>>    Define xtpTabColorOffice2007Access for 128
15161>>>>>>>>>>>    Define xtpTabColorVisualStudio2003 for 2
15161>>>>>>>>>>>    Define xtpTabColorVisualStudio2005 for 16
15161>>>>>>>>>>>    Define xtpTabColorVisualStudio2008 for 64
15161>>>>>>>>>>>    Define xtpTabColorVisualStudio2010 for 256
15161>>>>>>>>>>>    Define xtpTabColorVisualStudio2012 for 512
15161>>>>>>>>>>>    Define xtpTabColorVisualStudio2012Dark for 1024
15161>>>>>>>>>>>    Define xtpTabColorOffice2013 for 2048
15161>>>>>>>>>>>    Define xtpTabColorOffice2016 for 2048
15161>>>>>>>>>>>    Define xtpTabColorVisualStudio2015 for 4096
15161>>>>>>>>>>>    Define xtpTabColorNativeWindows10 for 8192
15161>>>>>>>>>>>    Define xtpTabColorVisualStudio2017 for 16384
15161>>>>>>>>>>>    Define xtpTabColorVisualStudio2019 for 32768
15161>>>>>>>>>>>    Define xtpTabColorVisualStudio2022 for 65536
15161>>>>>>>>>>>    Define xtpTabColorAll for -1
15161>>>>>>>>>>>    Define xtpTabColorVisualStudio for 2
15161>>>>>>>>>>>    Define xtpTabColorWinXP for 8
15161>>>>>>>>>>>    Define xtpTabColorWhidbey for 16
15161>>>>>>>>>>>    Define xtpTabColorAccess2007 for 128
15161>>>>>>>>>>>    Define xtpTabColorOffice2007 for 32
15161>>>>>>>>>>>
15161>>>>>>>>>>>Define XTPTabOneNoteColor for Integer
15161>>>>>>>>>>>    Define xtpTabColorBlue for 16777216
15161>>>>>>>>>>>    Define xtpTabColorYellow for 16777217
15161>>>>>>>>>>>    Define xtpTabColorGreen for 16777218
15161>>>>>>>>>>>    Define xtpTabColorRed for 16777219
15161>>>>>>>>>>>    Define xtpTabColorPurple for 16777220
15161>>>>>>>>>>>    Define xtpTabColorCyan for 16777221
15161>>>>>>>>>>>    Define xtpTabColorOrange for 16777222
15161>>>>>>>>>>>    Define xtpTabColorMagenta for 16777223
15161>>>>>>>>>>>
15161>>>>>>>>>>>Define XTPTabPosition for Integer
15161>>>>>>>>>>>    Define xtpTabPositionTop for 0
15161>>>>>>>>>>>    Define xtpTabPositionLeft for 1
15161>>>>>>>>>>>    Define xtpTabPositionBottom for 2
15161>>>>>>>>>>>    Define xtpTabPositionRight for 3
15161>>>>>>>>>>>
15161>>>>>>>>>>>Define XTPTabLayoutStyle for Integer
15161>>>>>>>>>>>    Define xtpTabLayoutAutoSize for 0
15161>>>>>>>>>>>    Define xtpTabLayoutSizeToFit for 1
15161>>>>>>>>>>>    Define xtpTabLayoutFixed for 2
15161>>>>>>>>>>>    Define xtpTabLayoutCompressed for 3
15161>>>>>>>>>>>    Define xtpTabLayoutMultiRow for 4
15161>>>>>>>>>>>    Define xtpTabLayoutRotated for 5
15161>>>>>>>>>>>
15161>>>>>>>>>>>Define XTPTabClientFrame for Integer
15161>>>>>>>>>>>    Define xtpTabFrameBorder for 0
15161>>>>>>>>>>>    Define xtpTabFrameSingleLine for 1
15161>>>>>>>>>>>    Define xtpTabFrameNone for 2
15161>>>>>>>>>>>
15161>>>>>>>>>>>Define XTPTabToolTipBehaviour for Integer
15161>>>>>>>>>>>    Define xtpTabToolTipNever for 0
15161>>>>>>>>>>>    Define xtpTabToolTipAlways for 1
15161>>>>>>>>>>>    Define xtpTabToolTipShrinkedOnly for 2
15161>>>>>>>>>>>
15161>>>>>>>>>>>Define XTPTabDrawTextFormat for Integer
15161>>>>>>>>>>>    Define xtpTabDrawTextLeft for 0
15161>>>>>>>>>>>    Define xtpTabDrawTextCenter for 1
15161>>>>>>>>>>>    Define xtpTabDrawTextRight for 2
15161>>>>>>>>>>>    Define xtpTabDrawTextVCenter for 4
15161>>>>>>>>>>>
15161>>>>>>>>>>>// CLSID: {C0DE2200-B4E9-45C7-AAF6-EF340E785590}
15161>>>>>>>>>>>Class cCJITabManagerMargin is a Mixin
15162>>>>>>>>>>>
15162>>>>>>>>>>>    Function ComLeft Returns Integer
15164>>>>>>>>>>>        Integer retVal
15164>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
15165>>>>>>>>>>>        Function_Return retVal
15166>>>>>>>>>>>    End_Function
15167>>>>>>>>>>>
15167>>>>>>>>>>>    Procedure Set ComLeft Integer value
15169>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
15170>>>>>>>>>>>    End_Procedure
15171>>>>>>>>>>>
15171>>>>>>>>>>>    Function ComTop Returns Integer
15173>>>>>>>>>>>        Integer retVal
15173>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
15174>>>>>>>>>>>        Function_Return retVal
15175>>>>>>>>>>>    End_Function
15176>>>>>>>>>>>
15176>>>>>>>>>>>    Procedure Set ComTop Integer value
15178>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
15179>>>>>>>>>>>    End_Procedure
15180>>>>>>>>>>>
15180>>>>>>>>>>>    Function ComRight Returns Integer
15182>>>>>>>>>>>        Integer retVal
15182>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
15183>>>>>>>>>>>        Function_Return retVal
15184>>>>>>>>>>>    End_Function
15185>>>>>>>>>>>
15185>>>>>>>>>>>    Procedure Set ComRight Integer value
15187>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
15188>>>>>>>>>>>    End_Procedure
15189>>>>>>>>>>>
15189>>>>>>>>>>>    Function ComBottom Returns Integer
15191>>>>>>>>>>>        Integer retVal
15191>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
15192>>>>>>>>>>>        Function_Return retVal
15193>>>>>>>>>>>    End_Function
15194>>>>>>>>>>>
15194>>>>>>>>>>>    Procedure Set ComBottom Integer value
15196>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
15197>>>>>>>>>>>    End_Procedure
15198>>>>>>>>>>>
15198>>>>>>>>>>>    Procedure ComSetRect Integer llLeft Integer llTop Integer llRight Integer llBottom
15200>>>>>>>>>>>        Handle hDispatchDriver
15200>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15201>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
15202>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
15203>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
15204>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
15205>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
15206>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
15207>>>>>>>>>>>    End_Procedure
15208>>>>>>>>>>>End_Class
15209>>>>>>>>>>>
15209>>>>>>>>>>>// CoClass
15209>>>>>>>>>>>// CLSID: {C0DE2200-90EE-4D24-8F7A-DA71BDEC35A8}
15209>>>>>>>>>>>Class cCJTabManagerMargin is a cComAutomationObject
15210>>>>>>>>>>>    Import_Class_Protocol cCJITabManagerMargin
15211>>>>>>>>>>>
15211>>>>>>>>>>>    Procedure Construct_Object
15213>>>>>>>>>>>        Forward Send Construct_Object
15215>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
15216>>>>>>>>>>>    End_Procedure
15217>>>>>>>>>>>End_Class
15218>>>>>>>>>>>
15218>>>>>>>>>>>// CLSID: {C0DE2200-ED71-4B4E-91CF-8444D6244F56}
15218>>>>>>>>>>>Class cCJITabPaintManagerColorSet is a Mixin
15219>>>>>>>>>>>
15219>>>>>>>>>>>    Function ComHeaderFaceLight Returns OLE_COLOR
15221>>>>>>>>>>>        OLE_COLOR retVal
15221>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
15222>>>>>>>>>>>        Function_Return retVal
15223>>>>>>>>>>>    End_Function
15224>>>>>>>>>>>
15224>>>>>>>>>>>    Procedure Set ComHeaderFaceLight OLE_COLOR value
15226>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
15227>>>>>>>>>>>    End_Procedure
15228>>>>>>>>>>>
15228>>>>>>>>>>>    Function ComHeaderFaceDark Returns OLE_COLOR
15230>>>>>>>>>>>        OLE_COLOR retVal
15230>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
15231>>>>>>>>>>>        Function_Return retVal
15232>>>>>>>>>>>    End_Function
15233>>>>>>>>>>>
15233>>>>>>>>>>>    Procedure Set ComHeaderFaceDark OLE_COLOR value
15235>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
15236>>>>>>>>>>>    End_Procedure
15237>>>>>>>>>>>
15237>>>>>>>>>>>    Function ComFrameBorder Returns OLE_COLOR
15239>>>>>>>>>>>        OLE_COLOR retVal
15239>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
15240>>>>>>>>>>>        Function_Return retVal
15241>>>>>>>>>>>    End_Function
15242>>>>>>>>>>>
15242>>>>>>>>>>>    Procedure Set ComFrameBorder OLE_COLOR value
15244>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
15245>>>>>>>>>>>    End_Procedure
15246>>>>>>>>>>>
15246>>>>>>>>>>>    Function ComControlFace Returns OLE_COLOR
15248>>>>>>>>>>>        OLE_COLOR retVal
15248>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
15249>>>>>>>>>>>        Function_Return retVal
15250>>>>>>>>>>>    End_Function
15251>>>>>>>>>>>
15251>>>>>>>>>>>    Procedure Set ComControlFace OLE_COLOR value
15253>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
15254>>>>>>>>>>>    End_Procedure
15255>>>>>>>>>>>
15255>>>>>>>>>>>    Function ComBorderHighlight Returns OLE_COLOR
15257>>>>>>>>>>>        OLE_COLOR retVal
15257>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
15258>>>>>>>>>>>        Function_Return retVal
15259>>>>>>>>>>>    End_Function
15260>>>>>>>>>>>
15260>>>>>>>>>>>    Procedure Set ComBorderHighlight OLE_COLOR value
15262>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
15263>>>>>>>>>>>    End_Procedure
15264>>>>>>>>>>>
15264>>>>>>>>>>>    Function ComButtonSelected Returns OLE_COLOR
15266>>>>>>>>>>>        OLE_COLOR retVal
15266>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
15267>>>>>>>>>>>        Function_Return retVal
15268>>>>>>>>>>>    End_Function
15269>>>>>>>>>>>
15269>>>>>>>>>>>    Procedure Set ComButtonSelected OLE_COLOR value
15271>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
15272>>>>>>>>>>>    End_Procedure
15273>>>>>>>>>>>
15273>>>>>>>>>>>    Function ComButtonNormal Returns OLE_COLOR
15275>>>>>>>>>>>        OLE_COLOR retVal
15275>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to retVal
15276>>>>>>>>>>>        Function_Return retVal
15277>>>>>>>>>>>    End_Function
15278>>>>>>>>>>>
15278>>>>>>>>>>>    Procedure Set ComButtonNormal OLE_COLOR value
15280>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to value
15281>>>>>>>>>>>    End_Procedure
15282>>>>>>>>>>>
15282>>>>>>>>>>>    Function ComNormalText Returns OLE_COLOR
15284>>>>>>>>>>>        OLE_COLOR retVal
15284>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
15285>>>>>>>>>>>        Function_Return retVal
15286>>>>>>>>>>>    End_Function
15287>>>>>>>>>>>
15287>>>>>>>>>>>    Procedure Set ComNormalText OLE_COLOR value
15289>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
15290>>>>>>>>>>>    End_Procedure
15291>>>>>>>>>>>
15291>>>>>>>>>>>    Function ComPressedText Returns OLE_COLOR
15293>>>>>>>>>>>        OLE_COLOR retVal
15293>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
15294>>>>>>>>>>>        Function_Return retVal
15295>>>>>>>>>>>    End_Function
15296>>>>>>>>>>>
15296>>>>>>>>>>>    Procedure Set ComPressedText OLE_COLOR value
15298>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
15299>>>>>>>>>>>    End_Procedure
15300>>>>>>>>>>>
15300>>>>>>>>>>>    Function ComSelectedText Returns OLE_COLOR
15302>>>>>>>>>>>        OLE_COLOR retVal
15302>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
15303>>>>>>>>>>>        Function_Return retVal
15304>>>>>>>>>>>    End_Function
15305>>>>>>>>>>>
15305>>>>>>>>>>>    Procedure Set ComSelectedText OLE_COLOR value
15307>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
15308>>>>>>>>>>>    End_Procedure
15309>>>>>>>>>>>
15309>>>>>>>>>>>    Function ComHighlightText Returns OLE_COLOR
15311>>>>>>>>>>>        OLE_COLOR retVal
15311>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_I4 to retVal
15312>>>>>>>>>>>        Function_Return retVal
15313>>>>>>>>>>>    End_Function
15314>>>>>>>>>>>
15314>>>>>>>>>>>    Procedure Set ComHighlightText OLE_COLOR value
15316>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_I4 to value
15317>>>>>>>>>>>    End_Procedure
15318>>>>>>>>>>>
15318>>>>>>>>>>>    Function ComDisabledText Returns OLE_COLOR
15320>>>>>>>>>>>        OLE_COLOR retVal
15320>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_I4 to retVal
15321>>>>>>>>>>>        Function_Return retVal
15322>>>>>>>>>>>    End_Function
15323>>>>>>>>>>>
15323>>>>>>>>>>>    Procedure Set ComDisabledText OLE_COLOR value
15325>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_I4 to value
15326>>>>>>>>>>>    End_Procedure
15327>>>>>>>>>>>
15327>>>>>>>>>>>    Function ComTabExcelSelectedLeftInnerBorder Returns OLE_COLOR
15329>>>>>>>>>>>        OLE_COLOR retVal
15329>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to retVal
15330>>>>>>>>>>>        Function_Return retVal
15331>>>>>>>>>>>    End_Function
15332>>>>>>>>>>>
15332>>>>>>>>>>>    Procedure Set ComTabExcelSelectedLeftInnerBorder OLE_COLOR value
15334>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to value
15335>>>>>>>>>>>    End_Procedure
15336>>>>>>>>>>>
15336>>>>>>>>>>>    Function ComTabExcelSelectedTopInnerBorder Returns OLE_COLOR
15338>>>>>>>>>>>        OLE_COLOR retVal
15338>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_I4 to retVal
15339>>>>>>>>>>>        Function_Return retVal
15340>>>>>>>>>>>    End_Function
15341>>>>>>>>>>>
15341>>>>>>>>>>>    Procedure Set ComTabExcelSelectedTopInnerBorder OLE_COLOR value
15343>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_I4 to value
15344>>>>>>>>>>>    End_Procedure
15345>>>>>>>>>>>
15345>>>>>>>>>>>    Function ComTabExcelSelectedRightInnerBorder Returns OLE_COLOR
15347>>>>>>>>>>>        OLE_COLOR retVal
15347>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
15348>>>>>>>>>>>        Function_Return retVal
15349>>>>>>>>>>>    End_Function
15350>>>>>>>>>>>
15350>>>>>>>>>>>    Procedure Set ComTabExcelSelectedRightInnerBorder OLE_COLOR value
15352>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
15353>>>>>>>>>>>    End_Procedure
15354>>>>>>>>>>>
15354>>>>>>>>>>>    Function ComTabExcelSelectedLeftOuterBorder Returns OLE_COLOR
15356>>>>>>>>>>>        OLE_COLOR retVal
15356>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_I4 to retVal
15357>>>>>>>>>>>        Function_Return retVal
15358>>>>>>>>>>>    End_Function
15359>>>>>>>>>>>
15359>>>>>>>>>>>    Procedure Set ComTabExcelSelectedLeftOuterBorder OLE_COLOR value
15361>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_I4 to value
15362>>>>>>>>>>>    End_Procedure
15363>>>>>>>>>>>
15363>>>>>>>>>>>    Function ComTabExcelSelectedRightOuterBorder Returns OLE_COLOR
15365>>>>>>>>>>>        OLE_COLOR retVal
15365>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_I4 to retVal
15366>>>>>>>>>>>        Function_Return retVal
15367>>>>>>>>>>>    End_Function
15368>>>>>>>>>>>
15368>>>>>>>>>>>    Procedure Set ComTabExcelSelectedRightOuterBorder OLE_COLOR value
15370>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_I4 to value
15371>>>>>>>>>>>    End_Procedure
15372>>>>>>>>>>>
15372>>>>>>>>>>>    Function ComTabExcelSelectedTopOuterBorder Returns OLE_COLOR
15374>>>>>>>>>>>        OLE_COLOR retVal
15374>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
15375>>>>>>>>>>>        Function_Return retVal
15376>>>>>>>>>>>    End_Function
15377>>>>>>>>>>>
15377>>>>>>>>>>>    Procedure Set ComTabExcelSelectedTopOuterBorder OLE_COLOR value
15379>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
15380>>>>>>>>>>>    End_Procedure
15381>>>>>>>>>>>
15381>>>>>>>>>>>    Function ComTabExcelNormalLeftInnerBorder Returns OLE_COLOR
15383>>>>>>>>>>>        OLE_COLOR retVal
15383>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_I4 to retVal
15384>>>>>>>>>>>        Function_Return retVal
15385>>>>>>>>>>>    End_Function
15386>>>>>>>>>>>
15386>>>>>>>>>>>    Procedure Set ComTabExcelNormalLeftInnerBorder OLE_COLOR value
15388>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_I4 to value
15389>>>>>>>>>>>    End_Procedure
15390>>>>>>>>>>>
15390>>>>>>>>>>>    Function ComTabExcelNormalTopInnerBorder Returns OLE_COLOR
15392>>>>>>>>>>>        OLE_COLOR retVal
15392>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_I4 to retVal
15393>>>>>>>>>>>        Function_Return retVal
15394>>>>>>>>>>>    End_Function
15395>>>>>>>>>>>
15395>>>>>>>>>>>    Procedure Set ComTabExcelNormalTopInnerBorder OLE_COLOR value
15397>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_I4 to value
15398>>>>>>>>>>>    End_Procedure
15399>>>>>>>>>>>
15399>>>>>>>>>>>    Function ComTabExcelNormalRightInnerBorder Returns OLE_COLOR
15401>>>>>>>>>>>        OLE_COLOR retVal
15401>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
15402>>>>>>>>>>>        Function_Return retVal
15403>>>>>>>>>>>    End_Function
15404>>>>>>>>>>>
15404>>>>>>>>>>>    Procedure Set ComTabExcelNormalRightInnerBorder OLE_COLOR value
15406>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
15407>>>>>>>>>>>    End_Procedure
15408>>>>>>>>>>>
15408>>>>>>>>>>>    Function ComTabExcelNormalLeftOuterBorder Returns OLE_COLOR
15410>>>>>>>>>>>        OLE_COLOR retVal
15410>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
15411>>>>>>>>>>>        Function_Return retVal
15412>>>>>>>>>>>    End_Function
15413>>>>>>>>>>>
15413>>>>>>>>>>>    Procedure Set ComTabExcelNormalLeftOuterBorder OLE_COLOR value
15415>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
15416>>>>>>>>>>>    End_Procedure
15417>>>>>>>>>>>
15417>>>>>>>>>>>    Function ComTabExcelNormalRightOuterBorder Returns OLE_COLOR
15419>>>>>>>>>>>        OLE_COLOR retVal
15419>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
15420>>>>>>>>>>>        Function_Return retVal
15421>>>>>>>>>>>    End_Function
15422>>>>>>>>>>>
15422>>>>>>>>>>>    Procedure Set ComTabExcelNormalRightOuterBorder OLE_COLOR value
15424>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
15425>>>>>>>>>>>    End_Procedure
15426>>>>>>>>>>>
15426>>>>>>>>>>>    Function ComTabExcelNormalTopOuterBorder Returns OLE_COLOR
15428>>>>>>>>>>>        OLE_COLOR retVal
15428>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to retVal
15429>>>>>>>>>>>        Function_Return retVal
15430>>>>>>>>>>>    End_Function
15431>>>>>>>>>>>
15431>>>>>>>>>>>    Procedure Set ComTabExcelNormalTopOuterBorder OLE_COLOR value
15433>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to value
15434>>>>>>>>>>>    End_Procedure
15435>>>>>>>>>>>
15435>>>>>>>>>>>    Function ComTabPropertyPageHighlight Returns OLE_COLOR
15437>>>>>>>>>>>        OLE_COLOR retVal
15437>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to retVal
15438>>>>>>>>>>>        Function_Return retVal
15439>>>>>>>>>>>    End_Function
15440>>>>>>>>>>>
15440>>>>>>>>>>>    Procedure Set ComTabPropertyPageHighlight OLE_COLOR value
15442>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to value
15443>>>>>>>>>>>    End_Procedure
15444>>>>>>>>>>>
15444>>>>>>>>>>>    Function ComTabPropertyPageShadow Returns OLE_COLOR
15446>>>>>>>>>>>        OLE_COLOR retVal
15446>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_I4 to retVal
15447>>>>>>>>>>>        Function_Return retVal
15448>>>>>>>>>>>    End_Function
15449>>>>>>>>>>>
15449>>>>>>>>>>>    Procedure Set ComTabPropertyPageShadow OLE_COLOR value
15451>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_I4 to value
15452>>>>>>>>>>>    End_Procedure
15453>>>>>>>>>>>
15453>>>>>>>>>>>    Function ComTabPropertyPageDarkShadow Returns OLE_COLOR
15455>>>>>>>>>>>        OLE_COLOR retVal
15455>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_I4 to retVal
15456>>>>>>>>>>>        Function_Return retVal
15457>>>>>>>>>>>    End_Function
15458>>>>>>>>>>>
15458>>>>>>>>>>>    Procedure Set ComTabPropertyPageDarkShadow OLE_COLOR value
15460>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_I4 to value
15461>>>>>>>>>>>    End_Procedure
15462>>>>>>>>>>>
15462>>>>>>>>>>>    Function ComTabPropertyPage2003DarkShadow Returns OLE_COLOR
15464>>>>>>>>>>>        OLE_COLOR retVal
15464>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
15465>>>>>>>>>>>        Function_Return retVal
15466>>>>>>>>>>>    End_Function
15467>>>>>>>>>>>
15467>>>>>>>>>>>    Procedure Set ComTabPropertyPage2003DarkShadow OLE_COLOR value
15469>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
15470>>>>>>>>>>>    End_Procedure
15471>>>>>>>>>>>
15471>>>>>>>>>>>    Function ComTabPropertyPage2003FrameBorder Returns OLE_COLOR
15473>>>>>>>>>>>        OLE_COLOR retVal
15473>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to retVal
15474>>>>>>>>>>>        Function_Return retVal
15475>>>>>>>>>>>    End_Function
15476>>>>>>>>>>>
15476>>>>>>>>>>>    Procedure Set ComTabPropertyPage2003FrameBorder OLE_COLOR value
15478>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to value
15479>>>>>>>>>>>    End_Procedure
15480>>>>>>>>>>>
15480>>>>>>>>>>>    Function ComTabPropertyPage2003BorderLeftHighlight Returns OLE_COLOR
15482>>>>>>>>>>>        OLE_COLOR retVal
15482>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
15483>>>>>>>>>>>        Function_Return retVal
15484>>>>>>>>>>>    End_Function
15485>>>>>>>>>>>
15485>>>>>>>>>>>    Procedure Set ComTabPropertyPage2003BorderLeftHighlight OLE_COLOR value
15487>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
15488>>>>>>>>>>>    End_Procedure
15489>>>>>>>>>>>
15489>>>>>>>>>>>    Function ComTabPropertyPage2003BorderTopHighlight Returns OLE_COLOR
15491>>>>>>>>>>>        OLE_COLOR retVal
15491>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
15492>>>>>>>>>>>        Function_Return retVal
15493>>>>>>>>>>>    End_Function
15494>>>>>>>>>>>
15494>>>>>>>>>>>    Procedure Set ComTabPropertyPage2003BorderTopHighlight OLE_COLOR value
15496>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
15497>>>>>>>>>>>    End_Procedure
15498>>>>>>>>>>>
15498>>>>>>>>>>>    Function ComTabStateButtonFaceLight Returns OLE_COLOR
15500>>>>>>>>>>>        OLE_COLOR retVal
15500>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
15501>>>>>>>>>>>        Function_Return retVal
15502>>>>>>>>>>>    End_Function
15503>>>>>>>>>>>
15503>>>>>>>>>>>    Procedure Set ComTabStateButtonFaceLight OLE_COLOR value
15505>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
15506>>>>>>>>>>>    End_Procedure
15507>>>>>>>>>>>
15507>>>>>>>>>>>    Function ComTabStateButtonFaceDark Returns OLE_COLOR
15509>>>>>>>>>>>        OLE_COLOR retVal
15509>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_I4 to retVal
15510>>>>>>>>>>>        Function_Return retVal
15511>>>>>>>>>>>    End_Function
15512>>>>>>>>>>>
15512>>>>>>>>>>>    Procedure Set ComTabStateButtonFaceDark OLE_COLOR value
15514>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_I4 to value
15515>>>>>>>>>>>    End_Procedure
15516>>>>>>>>>>>
15516>>>>>>>>>>>    Function ComTabStateButtonBorderTopLeft Returns OLE_COLOR
15518>>>>>>>>>>>        OLE_COLOR retVal
15518>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_I4 to retVal
15519>>>>>>>>>>>        Function_Return retVal
15520>>>>>>>>>>>    End_Function
15521>>>>>>>>>>>
15521>>>>>>>>>>>    Procedure Set ComTabStateButtonBorderTopLeft OLE_COLOR value
15523>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_I4 to value
15524>>>>>>>>>>>    End_Procedure
15525>>>>>>>>>>>
15525>>>>>>>>>>>    Function ComTabStateButtonBorderBottomRight Returns OLE_COLOR
15527>>>>>>>>>>>        OLE_COLOR retVal
15527>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 35 OLE_VT_I4 to retVal
15528>>>>>>>>>>>        Function_Return retVal
15529>>>>>>>>>>>    End_Function
15530>>>>>>>>>>>
15530>>>>>>>>>>>    Procedure Set ComTabStateButtonBorderBottomRight OLE_COLOR value
15532>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 35 OLE_VT_I4 to value
15533>>>>>>>>>>>    End_Procedure
15534>>>>>>>>>>>
15534>>>>>>>>>>>    Function ComPaneFace Returns OLE_COLOR
15536>>>>>>>>>>>        OLE_COLOR retVal
15536>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_I4 to retVal
15537>>>>>>>>>>>        Function_Return retVal
15538>>>>>>>>>>>    End_Function
15539>>>>>>>>>>>
15539>>>>>>>>>>>    Procedure Set ComPaneFace OLE_COLOR value
15541>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_I4 to value
15542>>>>>>>>>>>    End_Procedure
15543>>>>>>>>>>>
15543>>>>>>>>>>>    Function ComButtonHighlighted Returns OLE_COLOR
15545>>>>>>>>>>>        OLE_COLOR retVal
15545>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_I4 to retVal
15546>>>>>>>>>>>        Function_Return retVal
15547>>>>>>>>>>>    End_Function
15548>>>>>>>>>>>
15548>>>>>>>>>>>    Procedure Set ComButtonHighlighted OLE_COLOR value
15550>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_I4 to value
15551>>>>>>>>>>>    End_Procedure
15552>>>>>>>>>>>
15552>>>>>>>>>>>    Function ComPressedButton Returns OLE_COLOR
15554>>>>>>>>>>>        OLE_COLOR retVal
15554>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_I4 to retVal
15555>>>>>>>>>>>        Function_Return retVal
15556>>>>>>>>>>>    End_Function
15557>>>>>>>>>>>
15557>>>>>>>>>>>    Procedure Set ComPressedButton OLE_COLOR value
15559>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_I4 to value
15560>>>>>>>>>>>    End_Procedure
15561>>>>>>>>>>>
15561>>>>>>>>>>>    Function ComHighlightedCloseButton Returns OLE_COLOR
15563>>>>>>>>>>>        OLE_COLOR retVal
15563>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
15564>>>>>>>>>>>        Function_Return retVal
15565>>>>>>>>>>>    End_Function
15566>>>>>>>>>>>
15566>>>>>>>>>>>    Procedure Set ComHighlightedCloseButton OLE_COLOR value
15568>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
15569>>>>>>>>>>>    End_Procedure
15570>>>>>>>>>>>
15570>>>>>>>>>>>    Function ComSelectedPressedButton Returns OLE_COLOR
15572>>>>>>>>>>>        OLE_COLOR retVal
15572>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_I4 to retVal
15573>>>>>>>>>>>        Function_Return retVal
15574>>>>>>>>>>>    End_Function
15575>>>>>>>>>>>
15575>>>>>>>>>>>    Procedure Set ComSelectedPressedButton OLE_COLOR value
15577>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_I4 to value
15578>>>>>>>>>>>    End_Procedure
15579>>>>>>>>>>>
15579>>>>>>>>>>>    Function ComSelectedHighlightedButton Returns OLE_COLOR
15581>>>>>>>>>>>        OLE_COLOR retVal
15581>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 41 OLE_VT_I4 to retVal
15582>>>>>>>>>>>        Function_Return retVal
15583>>>>>>>>>>>    End_Function
15584>>>>>>>>>>>
15584>>>>>>>>>>>    Procedure Set ComSelectedHighlightedButton OLE_COLOR value
15586>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 41 OLE_VT_I4 to value
15587>>>>>>>>>>>    End_Procedure
15588>>>>>>>>>>>
15588>>>>>>>>>>>    Function ComButtonBorder Returns OLE_COLOR
15590>>>>>>>>>>>        OLE_COLOR retVal
15590>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 42 OLE_VT_I4 to retVal
15591>>>>>>>>>>>        Function_Return retVal
15592>>>>>>>>>>>    End_Function
15593>>>>>>>>>>>
15593>>>>>>>>>>>    Procedure Set ComButtonBorder OLE_COLOR value
15595>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 42 OLE_VT_I4 to value
15596>>>>>>>>>>>    End_Procedure
15597>>>>>>>>>>>
15597>>>>>>>>>>>    Function ComButtonBorderHot Returns OLE_COLOR
15599>>>>>>>>>>>        OLE_COLOR retVal
15599>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 43 OLE_VT_I4 to retVal
15600>>>>>>>>>>>        Function_Return retVal
15601>>>>>>>>>>>    End_Function
15602>>>>>>>>>>>
15602>>>>>>>>>>>    Procedure Set ComButtonBorderHot OLE_COLOR value
15604>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 43 OLE_VT_I4 to value
15605>>>>>>>>>>>    End_Procedure
15606>>>>>>>>>>>
15606>>>>>>>>>>>    Function ComHighlightCloseText Returns OLE_COLOR
15608>>>>>>>>>>>        OLE_COLOR retVal
15608>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 44 OLE_VT_I4 to retVal
15609>>>>>>>>>>>        Function_Return retVal
15610>>>>>>>>>>>    End_Function
15611>>>>>>>>>>>
15611>>>>>>>>>>>    Procedure Set ComHighlightCloseText OLE_COLOR value
15613>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 44 OLE_VT_I4 to value
15614>>>>>>>>>>>    End_Procedure
15615>>>>>>>>>>>
15615>>>>>>>>>>>    Function ComSelectedPressedText Returns OLE_COLOR
15617>>>>>>>>>>>        OLE_COLOR retVal
15617>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_I4 to retVal
15618>>>>>>>>>>>        Function_Return retVal
15619>>>>>>>>>>>    End_Function
15620>>>>>>>>>>>
15620>>>>>>>>>>>    Procedure Set ComSelectedPressedText OLE_COLOR value
15622>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_I4 to value
15623>>>>>>>>>>>    End_Procedure
15624>>>>>>>>>>>
15624>>>>>>>>>>>    Function ComSelectedHighlightedText Returns OLE_COLOR
15626>>>>>>>>>>>        OLE_COLOR retVal
15626>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_I4 to retVal
15627>>>>>>>>>>>        Function_Return retVal
15628>>>>>>>>>>>    End_Function
15629>>>>>>>>>>>
15629>>>>>>>>>>>    Procedure Set ComSelectedHighlightedText OLE_COLOR value
15631>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_I4 to value
15632>>>>>>>>>>>    End_Procedure
15633>>>>>>>>>>>
15633>>>>>>>>>>>    Function ComActiveFilesGlyph Returns OLE_COLOR
15635>>>>>>>>>>>        OLE_COLOR retVal
15635>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 47 OLE_VT_I4 to retVal
15636>>>>>>>>>>>        Function_Return retVal
15637>>>>>>>>>>>    End_Function
15638>>>>>>>>>>>
15638>>>>>>>>>>>    Procedure Set ComActiveFilesGlyph OLE_COLOR value
15640>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 47 OLE_VT_I4 to value
15641>>>>>>>>>>>    End_Procedure
15642>>>>>>>>>>>
15642>>>>>>>>>>>    Function ComActiveFilesGlyphHighlighted Returns OLE_COLOR
15644>>>>>>>>>>>        OLE_COLOR retVal
15644>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 48 OLE_VT_I4 to retVal
15645>>>>>>>>>>>        Function_Return retVal
15646>>>>>>>>>>>    End_Function
15647>>>>>>>>>>>
15647>>>>>>>>>>>    Procedure Set ComActiveFilesGlyphHighlighted OLE_COLOR value
15649>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 48 OLE_VT_I4 to value
15650>>>>>>>>>>>    End_Procedure
15651>>>>>>>>>>>
15651>>>>>>>>>>>    Function ComActiveFilesGlyphPressed Returns OLE_COLOR
15653>>>>>>>>>>>        OLE_COLOR retVal
15653>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 49 OLE_VT_I4 to retVal
15654>>>>>>>>>>>        Function_Return retVal
15655>>>>>>>>>>>    End_Function
15656>>>>>>>>>>>
15656>>>>>>>>>>>    Procedure Set ComActiveFilesGlyphPressed OLE_COLOR value
15658>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 49 OLE_VT_I4 to value
15659>>>>>>>>>>>    End_Procedure
15660>>>>>>>>>>>
15660>>>>>>>>>>>    Function ComActiveFilesBack Returns OLE_COLOR
15662>>>>>>>>>>>        OLE_COLOR retVal
15662>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to retVal
15663>>>>>>>>>>>        Function_Return retVal
15664>>>>>>>>>>>    End_Function
15665>>>>>>>>>>>
15665>>>>>>>>>>>    Procedure Set ComActiveFilesBack OLE_COLOR value
15667>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to value
15668>>>>>>>>>>>    End_Procedure
15669>>>>>>>>>>>
15669>>>>>>>>>>>    Function ComActiveFilesBackHighlighted Returns OLE_COLOR
15671>>>>>>>>>>>        OLE_COLOR retVal
15671>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_I4 to retVal
15672>>>>>>>>>>>        Function_Return retVal
15673>>>>>>>>>>>    End_Function
15674>>>>>>>>>>>
15674>>>>>>>>>>>    Procedure Set ComActiveFilesBackHighlighted OLE_COLOR value
15676>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_I4 to value
15677>>>>>>>>>>>    End_Procedure
15678>>>>>>>>>>>
15678>>>>>>>>>>>    Function ComActiveFilesBackPressed Returns OLE_COLOR
15680>>>>>>>>>>>        OLE_COLOR retVal
15680>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
15681>>>>>>>>>>>        Function_Return retVal
15682>>>>>>>>>>>    End_Function
15683>>>>>>>>>>>
15683>>>>>>>>>>>    Procedure Set ComActiveFilesBackPressed OLE_COLOR value
15685>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
15686>>>>>>>>>>>    End_Procedure
15687>>>>>>>>>>>End_Class
15688>>>>>>>>>>>
15688>>>>>>>>>>>// CoClass
15688>>>>>>>>>>>// CLSID: {C0DE2200-494B-4521-B709-C324C2C09578}
15688>>>>>>>>>>>Class cCJTabPaintManagerColorSet is a cComAutomationObject
15689>>>>>>>>>>>    Import_Class_Protocol cCJITabPaintManagerColorSet
15690>>>>>>>>>>>
15690>>>>>>>>>>>    Procedure Construct_Object
15692>>>>>>>>>>>        Forward Send Construct_Object
15694>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
15695>>>>>>>>>>>    End_Procedure
15696>>>>>>>>>>>End_Class
15697>>>>>>>>>>>
15697>>>>>>>>>>>// CLSID: {C0DE2200-9CE6-4D40-B6C5-3B9425FBB55A}
15697>>>>>>>>>>>Class cCJITabPaintManager is a Mixin
15698>>>>>>>>>>>
15698>>>>>>>>>>>    Function ComAppearance Returns XTPTabAppearanceStyle
15700>>>>>>>>>>>        XTPTabAppearanceStyle retVal
15700>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
15701>>>>>>>>>>>        Function_Return retVal
15702>>>>>>>>>>>    End_Function
15703>>>>>>>>>>>
15703>>>>>>>>>>>    Procedure Set ComAppearance XTPTabAppearanceStyle value
15705>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
15706>>>>>>>>>>>    End_Procedure
15707>>>>>>>>>>>
15707>>>>>>>>>>>    Function ComColor Returns XTPTabColorStyle
WARNING: 4543 Redefining function return type for GET_COMCOLOR with INTEGER (first defined as UINTEGER) ON LINE: 832 (15707) OF FILE: C:\Program Files\DataFlex 23.0\Pkg\cCJTabControlItem.pkg
15709>>>>>>>>>>>        XTPTabColorStyle retVal
15709>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
15710>>>>>>>>>>>        Function_Return retVal
15711>>>>>>>>>>>    End_Function
15712>>>>>>>>>>>
15712>>>>>>>>>>>    Procedure Set ComColor XTPTabColorStyle value
15714>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
15715>>>>>>>>>>>    End_Procedure
15716>>>>>>>>>>>
15716>>>>>>>>>>>    Function ComLayout Returns XTPTabLayoutStyle
15718>>>>>>>>>>>        XTPTabLayoutStyle retVal
15718>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
15719>>>>>>>>>>>        Function_Return retVal
15720>>>>>>>>>>>    End_Function
15721>>>>>>>>>>>
15721>>>>>>>>>>>    Procedure Set ComLayout XTPTabLayoutStyle value
15723>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
15724>>>>>>>>>>>    End_Procedure
15725>>>>>>>>>>>
15725>>>>>>>>>>>    Function ComPosition Returns XTPTabPosition
15727>>>>>>>>>>>        XTPTabPosition retVal
15727>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
15728>>>>>>>>>>>        Function_Return retVal
15729>>>>>>>>>>>    End_Function
15730>>>>>>>>>>>
15730>>>>>>>>>>>    Procedure Set ComPosition XTPTabPosition value
15732>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
15733>>>>>>>>>>>    End_Procedure
15734>>>>>>>>>>>
15734>>>>>>>>>>>    Function ComBoldSelected Returns Boolean
15736>>>>>>>>>>>        Boolean retVal
15736>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
15737>>>>>>>>>>>        Function_Return retVal
15738>>>>>>>>>>>    End_Function
15739>>>>>>>>>>>
15739>>>>>>>>>>>    Procedure Set ComBoldSelected Boolean value
15741>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
15742>>>>>>>>>>>    End_Procedure
15743>>>>>>>>>>>
15743>>>>>>>>>>>    Function ComHotTracking Returns Boolean
15745>>>>>>>>>>>        Boolean retVal
15745>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
15746>>>>>>>>>>>        Function_Return retVal
15747>>>>>>>>>>>    End_Function
15748>>>>>>>>>>>
15748>>>>>>>>>>>    Procedure Set ComHotTracking Boolean value
15750>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
15751>>>>>>>>>>>    End_Procedure
15752>>>>>>>>>>>
15752>>>>>>>>>>>    Function ComShowIcons Returns Boolean
15754>>>>>>>>>>>        Boolean retVal
15754>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
15755>>>>>>>>>>>        Function_Return retVal
15756>>>>>>>>>>>    End_Function
15757>>>>>>>>>>>
15757>>>>>>>>>>>    Procedure Set ComShowIcons Boolean value
15759>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
15760>>>>>>>>>>>    End_Procedure
15761>>>>>>>>>>>
15761>>>>>>>>>>>    Function ComDisableLunaColors Returns Boolean
15763>>>>>>>>>>>        Boolean retVal
15763>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
15764>>>>>>>>>>>        Function_Return retVal
15765>>>>>>>>>>>    End_Function
15766>>>>>>>>>>>
15766>>>>>>>>>>>    Procedure Set ComDisableLunaColors Boolean value
15768>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
15769>>>>>>>>>>>    End_Procedure
15770>>>>>>>>>>>
15770>>>>>>>>>>>    Function ComOneNoteColors Returns Boolean
15772>>>>>>>>>>>        Boolean retVal
15772>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
15773>>>>>>>>>>>        Function_Return retVal
15774>>>>>>>>>>>    End_Function
15775>>>>>>>>>>>
15775>>>>>>>>>>>    Procedure Set ComOneNoteColors Boolean value
15777>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
15778>>>>>>>>>>>    End_Procedure
15779>>>>>>>>>>>
15779>>>>>>>>>>>    Function ComClientFrame Returns XTPTabClientFrame
15781>>>>>>>>>>>        XTPTabClientFrame retVal
15781>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_I4 to retVal
15782>>>>>>>>>>>        Function_Return retVal
15783>>>>>>>>>>>    End_Function
15784>>>>>>>>>>>
15784>>>>>>>>>>>    Procedure Set ComClientFrame XTPTabClientFrame value
15786>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_I4 to value
15787>>>>>>>>>>>    End_Procedure
15788>>>>>>>>>>>
15788>>>>>>>>>>>    Function ComStaticFrame Returns Boolean
15790>>>>>>>>>>>        Boolean retVal
15790>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
15791>>>>>>>>>>>        Function_Return retVal
15792>>>>>>>>>>>    End_Function
15793>>>>>>>>>>>
15793>>>>>>>>>>>    Procedure Set ComStaticFrame Boolean value
15795>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
15796>>>>>>>>>>>    End_Procedure
15797>>>>>>>>>>>
15797>>>>>>>>>>>    Function ComDrawTextPathEllipsis Returns Boolean
15799>>>>>>>>>>>        Boolean retVal
15799>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
15800>>>>>>>>>>>        Function_Return retVal
15801>>>>>>>>>>>    End_Function
15802>>>>>>>>>>>
15802>>>>>>>>>>>    Procedure Set ComDrawTextPathEllipsis Boolean value
15804>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
15805>>>>>>>>>>>    End_Procedure
15806>>>>>>>>>>>
15806>>>>>>>>>>>    Function ComDrawTextNoPrefix Returns Boolean
15808>>>>>>>>>>>        Boolean retVal
15808>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
15809>>>>>>>>>>>        Function_Return retVal
15810>>>>>>>>>>>    End_Function
15811>>>>>>>>>>>
15811>>>>>>>>>>>    Procedure Set ComDrawTextNoPrefix Boolean value
15813>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
15814>>>>>>>>>>>    End_Procedure
15815>>>>>>>>>>>
15815>>>>>>>>>>>    Function ComFont Returns Variant
15817>>>>>>>>>>>        Variant retVal
15817>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
15818>>>>>>>>>>>        Function_Return retVal
15819>>>>>>>>>>>    End_Function
15820>>>>>>>>>>>
15820>>>>>>>>>>>    Procedure Set ComFont Variant value
15822>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
15823>>>>>>>>>>>    End_Procedure
15824>>>>>>>>>>>
15824>>>>>>>>>>>    Function ComMultiRowFixedSelection Returns Boolean
15826>>>>>>>>>>>        Boolean retVal
15826>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
15827>>>>>>>>>>>        Function_Return retVal
15828>>>>>>>>>>>    End_Function
15829>>>>>>>>>>>
15829>>>>>>>>>>>    Procedure Set ComMultiRowFixedSelection Boolean value
15831>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
15832>>>>>>>>>>>    End_Procedure
15833>>>>>>>>>>>
15833>>>>>>>>>>>    Function ComMultiRowJustified Returns Boolean
15835>>>>>>>>>>>        Boolean retVal
15835>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_BOOL to retVal
15836>>>>>>>>>>>        Function_Return retVal
15837>>>>>>>>>>>    End_Function
15838>>>>>>>>>>>
15838>>>>>>>>>>>    Procedure Set ComMultiRowJustified Boolean value
15840>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_BOOL to value
15841>>>>>>>>>>>    End_Procedure
15842>>>>>>>>>>>
15842>>>>>>>>>>>    Function ComToolTipBehaviour Returns XTPTabToolTipBehaviour
15844>>>>>>>>>>>        XTPTabToolTipBehaviour retVal
15844>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
15845>>>>>>>>>>>        Function_Return retVal
15846>>>>>>>>>>>    End_Function
15847>>>>>>>>>>>
15847>>>>>>>>>>>    Procedure Set ComToolTipBehaviour XTPTabToolTipBehaviour value
15849>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
15850>>>>>>>>>>>    End_Procedure
15851>>>>>>>>>>>
15851>>>>>>>>>>>    Function ComSelectTabOnDragOver Returns Integer
15853>>>>>>>>>>>        Integer retVal
15853>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to retVal
15854>>>>>>>>>>>        Function_Return retVal
15855>>>>>>>>>>>    End_Function
15856>>>>>>>>>>>
15856>>>>>>>>>>>    Procedure Set ComSelectTabOnDragOver Integer value
15858>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to value
15859>>>>>>>>>>>    End_Procedure
15860>>>>>>>>>>>
15860>>>>>>>>>>>    Function ComFillBackground Returns Boolean
15862>>>>>>>>>>>        Boolean retVal
15862>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_BOOL to retVal
15863>>>>>>>>>>>        Function_Return retVal
15864>>>>>>>>>>>    End_Function
15865>>>>>>>>>>>
15865>>>>>>>>>>>    Procedure Set ComFillBackground Boolean value
15867>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_BOOL to value
15868>>>>>>>>>>>    End_Procedure
15869>>>>>>>>>>>
15869>>>>>>>>>>>    Function ComRotateImageOnVerticalDraw Returns Boolean
15871>>>>>>>>>>>        Boolean retVal
15871>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
15872>>>>>>>>>>>        Function_Return retVal
15873>>>>>>>>>>>    End_Function
15874>>>>>>>>>>>
15874>>>>>>>>>>>    Procedure Set ComRotateImageOnVerticalDraw Boolean value
15876>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
15877>>>>>>>>>>>    End_Procedure
15878>>>>>>>>>>>
15878>>>>>>>>>>>    Function ComFixedTabWidth Returns Integer
15880>>>>>>>>>>>        Integer retVal
15880>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_I4 to retVal
15881>>>>>>>>>>>        Function_Return retVal
15882>>>>>>>>>>>    End_Function
15883>>>>>>>>>>>
15883>>>>>>>>>>>    Procedure Set ComFixedTabWidth Integer value
15885>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_I4 to value
15886>>>>>>>>>>>    End_Procedure
15887>>>>>>>>>>>
15887>>>>>>>>>>>    Function ComMinTabWidth Returns Integer
15889>>>>>>>>>>>        Integer retVal
15889>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
15890>>>>>>>>>>>        Function_Return retVal
15891>>>>>>>>>>>    End_Function
15892>>>>>>>>>>>
15892>>>>>>>>>>>    Procedure Set ComMinTabWidth Integer value
15894>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
15895>>>>>>>>>>>    End_Procedure
15896>>>>>>>>>>>
15896>>>>>>>>>>>    Function ComMaxTabWidth Returns Integer
15898>>>>>>>>>>>        Integer retVal
15898>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to retVal
15899>>>>>>>>>>>        Function_Return retVal
15900>>>>>>>>>>>    End_Function
15901>>>>>>>>>>>
15901>>>>>>>>>>>    Procedure Set ComMaxTabWidth Integer value
15903>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to value
15904>>>>>>>>>>>    End_Procedure
15905>>>>>>>>>>>
15905>>>>>>>>>>>    Function ComDrawTextFormat Returns XTPTabDrawTextFormat
15907>>>>>>>>>>>        XTPTabDrawTextFormat retVal
15907>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
15908>>>>>>>>>>>        Function_Return retVal
15909>>>>>>>>>>>    End_Function
15910>>>>>>>>>>>
15910>>>>>>>>>>>    Procedure Set ComDrawTextFormat XTPTabDrawTextFormat value
15912>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
15913>>>>>>>>>>>    End_Procedure
15914>>>>>>>>>>>
15914>>>>>>>>>>>    Function ComShowTabs Returns Boolean
15916>>>>>>>>>>>        Boolean retVal
15916>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to retVal
15917>>>>>>>>>>>        Function_Return retVal
15918>>>>>>>>>>>    End_Function
15919>>>>>>>>>>>
15919>>>>>>>>>>>    Procedure Set ComShowTabs Boolean value
15921>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to value
15922>>>>>>>>>>>    End_Procedure
15923>>>>>>>>>>>
15923>>>>>>>>>>>    Function ComClearTypeTextQuality Returns Boolean
15925>>>>>>>>>>>        Boolean retVal
15925>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_BOOL to retVal
15926>>>>>>>>>>>        Function_Return retVal
15927>>>>>>>>>>>    End_Function
15928>>>>>>>>>>>
15928>>>>>>>>>>>    Procedure Set ComClearTypeTextQuality Boolean value
15930>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_BOOL to value
15931>>>>>>>>>>>    End_Procedure
15932>>>>>>>>>>>
15932>>>>>>>>>>>    Function ComVerticalTextTopToBottom Returns Boolean
15934>>>>>>>>>>>        Boolean retVal
15934>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
15935>>>>>>>>>>>        Function_Return retVal
15936>>>>>>>>>>>    End_Function
15937>>>>>>>>>>>
15937>>>>>>>>>>>    Procedure Set ComVerticalTextTopToBottom Boolean value
15939>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
15940>>>>>>>>>>>    End_Procedure
15941>>>>>>>>>>>
15941>>>>>>>>>>>    Function ComMultiRowTabsOptimization Returns Boolean
15943>>>>>>>>>>>        Boolean retVal
15943>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_BOOL to retVal
15944>>>>>>>>>>>        Function_Return retVal
15945>>>>>>>>>>>    End_Function
15946>>>>>>>>>>>
15946>>>>>>>>>>>    Procedure Set ComMultiRowTabsOptimization Boolean value
15948>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_BOOL to value
15949>>>>>>>>>>>    End_Procedure
15950>>>>>>>>>>>
15950>>>>>>>>>>>    Function ComIsColorSupported XTPTabColorStyle llColor Returns Boolean
15952>>>>>>>>>>>        Handle hDispatchDriver
15952>>>>>>>>>>>        Boolean retVal
15952>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15953>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
15954>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
15955>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_BOOL to retVal
15956>>>>>>>>>>>        Function_Return retVal
15957>>>>>>>>>>>    End_Function
15958>>>>>>>>>>>
15958>>>>>>>>>>>    Function ComClientMargin Returns Variant
15960>>>>>>>>>>>        Handle hDispatchDriver
15960>>>>>>>>>>>        Variant retVal
15960>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15961>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_DISPATCH to retVal
15962>>>>>>>>>>>        Function_Return retVal
15963>>>>>>>>>>>    End_Function
15964>>>>>>>>>>>
15964>>>>>>>>>>>    Function ComControlMargin Returns Variant
15966>>>>>>>>>>>        Handle hDispatchDriver
15966>>>>>>>>>>>        Variant retVal
15966>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15967>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
15968>>>>>>>>>>>        Function_Return retVal
15969>>>>>>>>>>>    End_Function
15970>>>>>>>>>>>
15970>>>>>>>>>>>    Function ComHeaderMargin Returns Variant
15972>>>>>>>>>>>        Handle hDispatchDriver
15972>>>>>>>>>>>        Variant retVal
15972>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15973>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 15 OLE_VT_DISPATCH to retVal
15974>>>>>>>>>>>        Function_Return retVal
15975>>>>>>>>>>>    End_Function
15976>>>>>>>>>>>
15976>>>>>>>>>>>    Function ComButtonMargin Returns Variant
15978>>>>>>>>>>>        Handle hDispatchDriver
15978>>>>>>>>>>>        Variant retVal
15978>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15979>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
15980>>>>>>>>>>>        Function_Return retVal
15981>>>>>>>>>>>    End_Function
15982>>>>>>>>>>>
15982>>>>>>>>>>>    Function ComColorSet Returns Variant
15984>>>>>>>>>>>        Handle hDispatchDriver
15984>>>>>>>>>>>        Variant retVal
15984>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15985>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 19 OLE_VT_DISPATCH to retVal
15986>>>>>>>>>>>        Function_Return retVal
15987>>>>>>>>>>>    End_Function
15988>>>>>>>>>>>
15988>>>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
15990>>>>>>>>>>>        Handle hDispatchDriver
15990>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
15991>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
15992>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
15993>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
15994>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
15995>>>>>>>>>>>    End_Procedure
15996>>>>>>>>>>>End_Class
15997>>>>>>>>>>>
15997>>>>>>>>>>>// CoClass
15997>>>>>>>>>>>// CLSID: {C0DE2200-BDD4-4257-8CF4-A2AB1674C51E}
15997>>>>>>>>>>>Class cCJTabPaintManager is a cComAutomationObject
15998>>>>>>>>>>>    Import_Class_Protocol cCJITabPaintManager
15999>>>>>>>>>>>
15999>>>>>>>>>>>    Procedure Construct_Object
16001>>>>>>>>>>>        Forward Send Construct_Object
16003>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
16004>>>>>>>>>>>    End_Procedure
16005>>>>>>>>>>>End_Class
16006>>>>>>>>>>>
16006>>>>>>>>>>>// CLSID: {C0DE2200-9479-48D5-A14D-077A9FD5D276}
16006>>>>>>>>>>>Class cCJITabControlItem is a Mixin
16007>>>>>>>>>>>
16007>>>>>>>>>>>    Function ComCaption Returns String
16009>>>>>>>>>>>        String retVal
16009>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
16010>>>>>>>>>>>        Function_Return retVal
16011>>>>>>>>>>>    End_Function
16012>>>>>>>>>>>
16012>>>>>>>>>>>    Procedure Set ComCaption String value
16014>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
16015>>>>>>>>>>>    End_Procedure
16016>>>>>>>>>>>
16016>>>>>>>>>>>    Function ComTag Returns Variant
16018>>>>>>>>>>>        Variant retVal
16018>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_VARIANT to retVal
16019>>>>>>>>>>>        Function_Return retVal
16020>>>>>>>>>>>    End_Function
16021>>>>>>>>>>>
16021>>>>>>>>>>>    Procedure Set ComTag Variant value
16023>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_VARIANT to value
16024>>>>>>>>>>>    End_Procedure
16025>>>>>>>>>>>
16025>>>>>>>>>>>    Function ComSelected Returns Boolean
16027>>>>>>>>>>>        Boolean retVal
16027>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
16028>>>>>>>>>>>        Function_Return retVal
16029>>>>>>>>>>>    End_Function
16030>>>>>>>>>>>
16030>>>>>>>>>>>    Procedure Set ComSelected Boolean value
16032>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
16033>>>>>>>>>>>    End_Procedure
16034>>>>>>>>>>>
16034>>>>>>>>>>>    Function ComImage Returns Integer
16036>>>>>>>>>>>        Integer retVal
16036>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
16037>>>>>>>>>>>        Function_Return retVal
16038>>>>>>>>>>>    End_Function
16039>>>>>>>>>>>
16039>>>>>>>>>>>    Procedure Set ComImage Integer value
16041>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
16042>>>>>>>>>>>    End_Procedure
16043>>>>>>>>>>>
16043>>>>>>>>>>>    Function ComColor Returns OLE_COLOR
16045>>>>>>>>>>>        OLE_COLOR retVal
16045>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
16046>>>>>>>>>>>        Function_Return retVal
16047>>>>>>>>>>>    End_Function
16048>>>>>>>>>>>
16048>>>>>>>>>>>    Procedure Set ComColor OLE_COLOR value
16050>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
16051>>>>>>>>>>>    End_Procedure
16052>>>>>>>>>>>
16052>>>>>>>>>>>    Function ComVisible Returns Boolean
16054>>>>>>>>>>>        Boolean retVal
16054>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
16055>>>>>>>>>>>        Function_Return retVal
16056>>>>>>>>>>>    End_Function
16057>>>>>>>>>>>
16057>>>>>>>>>>>    Procedure Set ComVisible Boolean value
16059>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
16060>>>>>>>>>>>    End_Procedure
16061>>>>>>>>>>>
16061>>>>>>>>>>>    Function ComEnabled Returns Boolean
16063>>>>>>>>>>>        Boolean retVal
16063>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
16064>>>>>>>>>>>        Function_Return retVal
16065>>>>>>>>>>>    End_Function
16066>>>>>>>>>>>
16066>>>>>>>>>>>    Procedure Set ComEnabled Boolean value
16068>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
16069>>>>>>>>>>>    End_Procedure
16070>>>>>>>>>>>
16070>>>>>>>>>>>    Function ComToolTip Returns String
16072>>>>>>>>>>>        String retVal
16072>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
16073>>>>>>>>>>>        Function_Return retVal
16074>>>>>>>>>>>    End_Function
16075>>>>>>>>>>>
16075>>>>>>>>>>>    Procedure Set ComToolTip String value
16077>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
16078>>>>>>>>>>>    End_Procedure
16079>>>>>>>>>>>
16079>>>>>>>>>>>    Function ComClosable Returns Boolean
16081>>>>>>>>>>>        Boolean retVal
16081>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
16082>>>>>>>>>>>        Function_Return retVal
16083>>>>>>>>>>>    End_Function
16084>>>>>>>>>>>
16084>>>>>>>>>>>    Procedure Set ComClosable Boolean value
16086>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
16087>>>>>>>>>>>    End_Procedure
16088>>>>>>>>>>>
16088>>>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
16090>>>>>>>>>>>        OLE_HANDLE retVal
16090>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to retVal
16091>>>>>>>>>>>        Function_Return retVal
16092>>>>>>>>>>>    End_Function
16093>>>>>>>>>>>
16093>>>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
16095>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to value
16096>>>>>>>>>>>    End_Procedure
16097>>>>>>>>>>>
16097>>>>>>>>>>>    Function ComIndex Returns Integer
16099>>>>>>>>>>>        Handle hDispatchDriver
16099>>>>>>>>>>>        Integer retVal
16099>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16100>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
16101>>>>>>>>>>>        Function_Return retVal
16102>>>>>>>>>>>    End_Function
16103>>>>>>>>>>>
16103>>>>>>>>>>>    Procedure ComMove Integer llIndex
16105>>>>>>>>>>>        Handle hDispatchDriver
16105>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16106>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16107>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
16108>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
16109>>>>>>>>>>>    End_Procedure
16110>>>>>>>>>>>
16110>>>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
16112>>>>>>>>>>>        Handle hDispatchDriver
16112>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16113>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16114>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
16115>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
16116>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
16117>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
16118>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
16119>>>>>>>>>>>    End_Procedure
16120>>>>>>>>>>>
16120>>>>>>>>>>>    Procedure ComEnsureVisible
16122>>>>>>>>>>>        Handle hDispatchDriver
16122>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16123>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
16124>>>>>>>>>>>    End_Procedure
16125>>>>>>>>>>>End_Class
16126>>>>>>>>>>>
16126>>>>>>>>>>>// CoClass
16126>>>>>>>>>>>// CLSID: {C0DE2200-9808-4CBF-BAC2-F2455C8C8A46}
16126>>>>>>>>>>>Class cCJComTabControlItem is a cComAutomationObject
16127>>>>>>>>>>>    Import_Class_Protocol cCJITabControlItem
16128>>>>>>>>>>>
16128>>>>>>>>>>>    Procedure Construct_Object
16130>>>>>>>>>>>        Forward Send Construct_Object
16132>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
16133>>>>>>>>>>>    End_Procedure
16134>>>>>>>>>>>End_Class
16135>>>>>>>>>>>
16135>>>>>>>>>Use cCJDataObject.pkg       // cCJDataObjectFile, cCJDataObject
Including file: cCJDataObject.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCJDataObject.pkg)
16135>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
16135>>>>>>>>>>>Use FlexCom20.pkg
16135>>>>>>>>>>>
16135>>>>>>>>>>>// CLSID: {C0DE2200-604D-4242-954B-DF38BBFA8BE3}
16135>>>>>>>>>>>Class cCJDataObjectFiles is a cComAutomationObject
16136>>>>>>>>>>>
16136>>>>>>>>>>>    Function ComItem Integer llIndex Returns String
16138>>>>>>>>>>>        Handle hDispatchDriver
16138>>>>>>>>>>>        String retVal
16138>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16139>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16140>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
16141>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_BSTR to retVal
16142>>>>>>>>>>>        Function_Return retVal
16143>>>>>>>>>>>    End_Function
16144>>>>>>>>>>>
16144>>>>>>>>>>>    Function ComCount Returns Integer
16146>>>>>>>>>>>        Handle hDispatchDriver
16146>>>>>>>>>>>        Integer retVal
16146>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16147>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
16148>>>>>>>>>>>        Function_Return retVal
16149>>>>>>>>>>>    End_Function
16150>>>>>>>>>>>
16150>>>>>>>>>>>    Function Com_NewEnum Returns Variant
16152>>>>>>>>>>>        Handle hDispatchDriver
16152>>>>>>>>>>>        Variant retVal
16152>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16153>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
16154>>>>>>>>>>>        Function_Return retVal
16155>>>>>>>>>>>    End_Function
16156>>>>>>>>>>>End_Class
16157>>>>>>>>>>>
16157>>>>>>>>>>>// CLSID: {C0DE2200-300E-4EB2-AE9B-6F1BA025DF31}
16157>>>>>>>>>>>Class cCJDataObject is a cComAutomationObject
16158>>>>>>>>>>>
16158>>>>>>>>>>>    Function ComGetFormat Integer llFormat Returns Boolean
16160>>>>>>>>>>>        Handle hDispatchDriver
16160>>>>>>>>>>>        Boolean retVal
16160>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16161>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16162>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llFormat
16163>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
16164>>>>>>>>>>>        Function_Return retVal
16165>>>>>>>>>>>    End_Function
16166>>>>>>>>>>>
16166>>>>>>>>>>>    Function ComFiles Returns Variant
16168>>>>>>>>>>>        Handle hDispatchDriver
16168>>>>>>>>>>>        Variant retVal
16168>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16169>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
16170>>>>>>>>>>>        Function_Return retVal
16171>>>>>>>>>>>    End_Function
16172>>>>>>>>>>>
16172>>>>>>>>>>>    Function ComGetData Integer llFormat Returns Variant
16174>>>>>>>>>>>        Handle hDispatchDriver
16174>>>>>>>>>>>        Variant retVal
16174>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16175>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16176>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llFormat
16177>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_VARIANT to retVal
16178>>>>>>>>>>>        Function_Return retVal
16179>>>>>>>>>>>    End_Function
16180>>>>>>>>>>>
16180>>>>>>>>>>>    Procedure ComSetData Variant llvValue Variant llFormat
16182>>>>>>>>>>>        Handle hDispatchDriver
16182>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16183>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16184>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llvValue
16185>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormat
16186>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
16187>>>>>>>>>>>    End_Procedure
16188>>>>>>>>>>>
16188>>>>>>>>>>>    Procedure ComClear
16190>>>>>>>>>>>        Handle hDispatchDriver
16190>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16191>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
16192>>>>>>>>>>>    End_Procedure
16193>>>>>>>>>>>End_Class
16194>>>>>>>>>>>
16194>>>>>>>>>Use cCJResourceImages.pkg   // cCJResourceImages
Including file: cCJResourceImages.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCJResourceImages.pkg)
16194>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
16194>>>>>>>>>>>Use FlexCom20.pkg
16194>>>>>>>>>>>
16194>>>>>>>>>>>// CLSID: {C0DE2200-FDDA-45CE-BBFB-C5E3EE3C4E7B}
16194>>>>>>>>>>>Class cCJResourceImages is a cComAutomationObject
16195>>>>>>>>>>>
16195>>>>>>>>>>>    Function ComLoadFromFile String llDllFileName String llIniFileName Returns Boolean
16197>>>>>>>>>>>        Handle hDispatchDriver
16197>>>>>>>>>>>        Boolean retVal
16197>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16198>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16199>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llDllFileName
16200>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llIniFileName
16201>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BOOL to retVal
16202>>>>>>>>>>>        Function_Return retVal
16203>>>>>>>>>>>    End_Function
16204>>>>>>>>>>>
16204>>>>>>>>>>>    Function ComDllFileName Returns String
16206>>>>>>>>>>>        Handle hDispatchDriver
16206>>>>>>>>>>>        String retVal
16206>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16207>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BSTR to retVal
16208>>>>>>>>>>>        Function_Return retVal
16209>>>>>>>>>>>    End_Function
16210>>>>>>>>>>>
16210>>>>>>>>>>>    Function ComIniFileName Returns String
16212>>>>>>>>>>>        Handle hDispatchDriver
16212>>>>>>>>>>>        String retVal
16212>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16213>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BSTR to retVal
16214>>>>>>>>>>>        Function_Return retVal
16215>>>>>>>>>>>    End_Function
16216>>>>>>>>>>>
16216>>>>>>>>>>>    Function ComGetColor String llSection String llKeyName Returns OLE_COLOR
16218>>>>>>>>>>>        Handle hDispatchDriver
16218>>>>>>>>>>>        OLE_COLOR retVal
16218>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16219>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16220>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llSection
16221>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llKeyName
16222>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
16223>>>>>>>>>>>        Function_Return retVal
16224>>>>>>>>>>>    End_Function
16225>>>>>>>>>>>End_Class
16226>>>>>>>>>>>
16226>>>>>>>>>Use cCJMarkupContext.pkg    // cCJMarkupContext
Including file: cCJMarkupContext.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCJMarkupContext.pkg)
16226>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v20.0.0\Bin\Codejock.CommandBars.Unicode.x64.v20.0.0.ocx
16226>>>>>>>>>>>Use FlexCom20.pkg
16226>>>>>>>>>>>
16226>>>>>>>>>>>// Possible rendering smoothing modes
16226>>>>>>>>>>>Define XTPMarkupSmoothingMode for Integer
16226>>>>>>>>>>>    Define xtpMarkupSmoothingDefault for 0
16226>>>>>>>>>>>    Define xtpMarkupSmoothingNone for 1
16226>>>>>>>>>>>    Define xtpMarkupSmoothingHighSpeed for 2
16226>>>>>>>>>>>    Define xtpMarkupSmoothingHighQuality for 3
16226>>>>>>>>>>>    Define xtpMarkupSmoothingAntiAlias for 4
16226>>>>>>>>>>>
16226>>>>>>>>>>>// CLSID: {C0DE2200-D073-4043-AA8C-62B5BD8E522D}
16226>>>>>>>>>>>Class cCJMarkupContext is a cComAutomationObject
16227>>>>>>>>>>>
16227>>>>>>>>>>>    Function ComEnableGdiPlus Returns Boolean
16229>>>>>>>>>>>        Boolean retVal
16229>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
16230>>>>>>>>>>>        Function_Return retVal
16231>>>>>>>>>>>    End_Function
16232>>>>>>>>>>>
16232>>>>>>>>>>>    Procedure Set ComEnableGdiPlus Boolean value
16234>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
16235>>>>>>>>>>>    End_Procedure
16236>>>>>>>>>>>
16236>>>>>>>>>>>    Function ComDpiAware Returns Boolean
16238>>>>>>>>>>>        Boolean retVal
16238>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 43 OLE_VT_BOOL to retVal
16239>>>>>>>>>>>        Function_Return retVal
16240>>>>>>>>>>>    End_Function
16241>>>>>>>>>>>
16241>>>>>>>>>>>    Procedure Set ComDpiAware Boolean value
16243>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 43 OLE_VT_BOOL to value
16244>>>>>>>>>>>    End_Procedure
16245>>>>>>>>>>>
16245>>>>>>>>>>>    Function ComIcons Returns Variant
16247>>>>>>>>>>>        Variant retVal
16247>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_DISPATCH to retVal
16248>>>>>>>>>>>        Function_Return retVal
16249>>>>>>>>>>>    End_Function
16250>>>>>>>>>>>
16250>>>>>>>>>>>    Procedure Set ComIcons Variant value
16252>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_DISPATCH to value
16253>>>>>>>>>>>    End_Procedure
16254>>>>>>>>>>>
16254>>>>>>>>>>>    Function ComDefaultSmoothingMode Returns XTPMarkupSmoothingMode
16256>>>>>>>>>>>        XTPMarkupSmoothingMode retVal
16256>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 44 OLE_VT_I4 to retVal
16257>>>>>>>>>>>        Function_Return retVal
16258>>>>>>>>>>>    End_Function
16259>>>>>>>>>>>
16259>>>>>>>>>>>    Procedure Set ComDefaultSmoothingMode XTPMarkupSmoothingMode value
16261>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 44 OLE_VT_I4 to value
16262>>>>>>>>>>>    End_Procedure
16263>>>>>>>>>>>
16263>>>>>>>>>>>    Function ComDefaultTextSmoothingEnabled Returns Boolean
16265>>>>>>>>>>>        Boolean retVal
16265>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_BOOL to retVal
16266>>>>>>>>>>>        Function_Return retVal
16267>>>>>>>>>>>    End_Function
16268>>>>>>>>>>>
16268>>>>>>>>>>>    Procedure Set ComDefaultTextSmoothingEnabled Boolean value
16270>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_BOOL to value
16271>>>>>>>>>>>    End_Procedure
16272>>>>>>>>>>>
16272>>>>>>>>>>>    Procedure ComSetMethod Variant llHandler String llMethod
16274>>>>>>>>>>>        Handle hDispatchDriver
16274>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16275>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16276>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llHandler
16277>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llMethod
16278>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1 OLE_VT_VOID
16279>>>>>>>>>>>    End_Procedure
16280>>>>>>>>>>>
16280>>>>>>>>>>>    Procedure ComSetHandler Variant llHandler
16282>>>>>>>>>>>        Handle hDispatchDriver
16282>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16283>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16284>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llHandler
16285>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
16286>>>>>>>>>>>    End_Procedure
16287>>>>>>>>>>>
16287>>>>>>>>>>>    Function ComValidateXML String llText Returns String
16289>>>>>>>>>>>        Handle hDispatchDriver
16289>>>>>>>>>>>        String retVal
16289>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16290>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16291>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
16292>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_BSTR to retVal
16293>>>>>>>>>>>        Function_Return retVal
16294>>>>>>>>>>>    End_Function
16295>>>>>>>>>>>
16295>>>>>>>>>>>    Function ComToolTipContext Returns Variant
16297>>>>>>>>>>>        Handle hDispatchDriver
16297>>>>>>>>>>>        Variant retVal
16297>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16298>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 39 OLE_VT_DISPATCH to retVal
16299>>>>>>>>>>>        Function_Return retVal
16300>>>>>>>>>>>    End_Function
16301>>>>>>>>>>>
16301>>>>>>>>>>>    Procedure ComFreezeUpdates
16303>>>>>>>>>>>        Handle hDispatchDriver
16303>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16304>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 41 OLE_VT_VOID
16305>>>>>>>>>>>    End_Procedure
16306>>>>>>>>>>>
16306>>>>>>>>>>>    Procedure ComUnfreezeUpdates
16308>>>>>>>>>>>        Handle hDispatchDriver
16308>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16309>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 42 OLE_VT_VOID
16310>>>>>>>>>>>    End_Procedure
16311>>>>>>>>>>>End_Class
16312>>>>>>>>>>>
16312>>>>>>>>>
16312>>>>>>>>>Define XTPFrameShadowManagerFlags for Integer
16312>>>>>>>>>    Define xtpFrameShadowsDisabled for 1
16312>>>>>>>>>    Define xtpFrameShadowsInvisible for 2
16312>>>>>>>>>    Define xtpFrameShadowsNotResizeable for 4
16312>>>>>>>>>    Define xtpFrameShadowsDisabledInTSS for 8
16312>>>>>>>>>    Define xtpFrameShadowsInvisibleInTSS for 16
16312>>>>>>>>>
16312>>>>>>>>>Define XTPApplicationAmbientProperty for Integer
16312>>>>>>>>>    // Ambient accent color value. -1 should be used to specify a default accent color value determined individually by each suscribed client.
16312>>>>>>>>>    Define xtpApplicationAccentColor for 0
16312>>>>>>>>>    // Ambient state color value. -1 should be used to specify a default state color value determined individually by each suscribed client.
16312>>>>>>>>>    Define xtpApplicationStateColor for 1
16312>>>>>>>>>
16312>>>>>>>>>Define OLEDropConstants for Integer
16312>>>>>>>>>    Define xtpOLEDropNone for 0
16312>>>>>>>>>    Define xtpOLEDropManual for 1
16312>>>>>>>>>
16312>>>>>>>>>Define OLEDragConstants for Integer
16312>>>>>>>>>    Define xtpOLEDragManual for 0
16312>>>>>>>>>    Define xtpOLEDragAutomatic for 1
16312>>>>>>>>>
16312>>>>>>>>>Define XTPWorkspaceCommand for Integer
16312>>>>>>>>>    // Used to move a TabControlItem to the next tab group.
16312>>>>>>>>>    Define XTP_ID_WORKSPACE_MOVEPREVIOUS for 9155
16312>>>>>>>>>    // Used to move a TabControlItem to the previous tab group.
16312>>>>>>>>>    Define XTP_ID_WORKSPACE_MOVENEXT for 9156
16312>>>>>>>>>    // Used to create a new horizontal tab group.
16312>>>>>>>>>    Define XTP_ID_WORKSPACE_NEWHORIZONTAL for 9157
16312>>>>>>>>>    // Used to create a new vertical tab group.
16312>>>>>>>>>    Define XTP_ID_WORKSPACE_NEWVERTICAL for 9158
16312>>>>>>>>>
16312>>>>>>>>>Define XTPCommandBarStyle for Integer
16312>>>>>>>>>    Define XTP_CBRS_GRIPPER for 4194304
16312>>>>>>>>>
16312>>>>>>>>>Define XTPControlNotify for Integer
16312>>>>>>>>>    Define XTP_EN_SPINUP for 4104
16312>>>>>>>>>    Define XTP_EN_SPINDOWN for 4105
16312>>>>>>>>>    Define XTP_EN_BUDDYBUTTONCLICK for 4106
16312>>>>>>>>>    Define XTP_GN_PREVIEWSTART for 4112
16312>>>>>>>>>    Define XTP_GN_PREVIEWCANCEL for 4113
16312>>>>>>>>>    Define XTP_GN_PREVIEWAPPLY for 4114
16312>>>>>>>>>    Define XTP_GN_PREVIEWCHANGE for 4115
16312>>>>>>>>>    Define XTP_GN_STARTDRAG for 4116
16312>>>>>>>>>    Define XTP_GN_SELCHANGE for 4117
16312>>>>>>>>>    Define XTP_EN_CHANGE for 768
16312>>>>>>>>>    Define XTP_EN_SETFOCUS for 256
16312>>>>>>>>>    Define XTP_EN_KILLFOCUS for 512
16312>>>>>>>>>    Define XTP_CBN_EDITCHANGE for 5
16312>>>>>>>>>    Define XTP_CBN_SETFOCUS for 3
16312>>>>>>>>>    Define XTP_CBN_KILLFOCUS for 4
16312>>>>>>>>>    Define XTP_CBN_CLOSEUP for 8
16312>>>>>>>>>    Define XTP_CBN_DROPDOWN for 7
16312>>>>>>>>>    Define XTP_BS_TABCHANGED for 4352
16312>>>>>>>>>
16312>>>>>>>>>// Bar Position
16312>>>>>>>>>Define XTPBarPosition for Integer
16312>>>>>>>>>    // Docked at top.
16312>>>>>>>>>    Define xtpBarTop for 0
16312>>>>>>>>>    // Docked at bottom.
16312>>>>>>>>>    Define xtpBarBottom for 1
16312>>>>>>>>>    // Docked at left.
16312>>>>>>>>>    Define xtpBarLeft for 2
16312>>>>>>>>>    // Docked at right.
16312>>>>>>>>>    Define xtpBarRight for 3
16312>>>>>>>>>    // Floated.
16312>>>>>>>>>    Define xtpBarFloating for 4
16312>>>>>>>>>    // Popuped.
16312>>>>>>>>>    Define xtpBarPopup for 5
16312>>>>>>>>>    // List box.
16312>>>>>>>>>    Define xtpBarListBox for 6
16312>>>>>>>>>    // ComboBoxGalleryPopup.
16312>>>>>>>>>    Define xtpBarComboBoxGalleryPopup for 8
16312>>>>>>>>>
16312>>>>>>>>>// Type of CommandBars
16312>>>>>>>>>Define XTPBarType for Integer
16312>>>>>>>>>    // Command bar is menu bar.
16312>>>>>>>>>    Define xtpBarTypeMenuBar for 0
16312>>>>>>>>>    // Command bar is toolbar.
16312>>>>>>>>>    Define xtpBarTypeNormal for 1
16312>>>>>>>>>    // Command bar is popup.
16312>>>>>>>>>    Define xtpBarTypePopup for 2
16312>>>>>>>>>    // Command bar is ribbon.
16312>>>>>>>>>    Define xtpBarTypeRibbon for 3
16312>>>>>>>>>
16312>>>>>>>>>// Control Type
16312>>>>>>>>>Define XTPControlType for Integer
16312>>>>>>>>>    // Type not defined.
16312>>>>>>>>>    Define xtpControlError for 0
16312>>>>>>>>>    // Button type.
16312>>>>>>>>>    Define xtpControlButton for 1
16312>>>>>>>>>    // Popup type.
16312>>>>>>>>>    Define xtpControlPopup for 2
16312>>>>>>>>>    // Button popup.
16312>>>>>>>>>    Define xtpControlButtonPopup for 3
16312>>>>>>>>>    // Split button popup.
16312>>>>>>>>>    Define xtpControlSplitButtonPopup for 4
16312>>>>>>>>>    // Combo box button.
16312>>>>>>>>>    Define xtpControlComboBox for 5
16312>>>>>>>>>    // Edit control
16312>>>>>>>>>    Define xtpControlEdit for 6
16312>>>>>>>>>    // Custom control
16312>>>>>>>>>    Define xtpControlCustom for 7
16312>>>>>>>>>    // Label control
16312>>>>>>>>>    Define xtpControlLabel for 8
16312>>>>>>>>>    // CheckBox control
16312>>>>>>>>>    Define xtpControlCheckBox for 9
16312>>>>>>>>>    // Gallery control
16312>>>>>>>>>    Define xtpControlGallery for 10
16312>>>>>>>>>    // Radio Button control
16312>>>>>>>>>    Define xtpControlRadioButton for 11
16312>>>>>>>>>
16312>>>>>>>>>// Button Styles
16312>>>>>>>>>Define XTPButtonStyle for Integer
16312>>>>>>>>>    // Automatic style.
16312>>>>>>>>>    Define xtpButtonAutomatic for 0
16312>>>>>>>>>    // Button draw only caption.
16312>>>>>>>>>    Define xtpButtonCaption for 1
16312>>>>>>>>>    // Button draw only icon.
16312>>>>>>>>>    Define xtpButtonIcon for 2
16312>>>>>>>>>    // Button draw icon and caption.
16312>>>>>>>>>    Define xtpButtonIconAndCaption for 3
16312>>>>>>>>>    // Button draw icon and draw caption below icon.
16312>>>>>>>>>    Define xtpButtonIconAndCaptionBelow for 4
16312>>>>>>>>>    // Button draw icon, caption and description for popup bar.
16312>>>>>>>>>    Define xtpButtonCaptionAndDescription for 5
16312>>>>>>>>>
16312>>>>>>>>>// Control Flags
16312>>>>>>>>>Define XTPControlFlags for Integer
16312>>>>>>>>>    // Control is right aligned.
16312>>>>>>>>>    Define xtpFlagRightAlign for 1
16312>>>>>>>>>    // Control does not have focus.  The control will be skipped when performing actions such as tabbing through the controls in the command bar.
16312>>>>>>>>>    Define xtpFlagSkipFocus for 2
16312>>>>>>>>>    // To Pop up child bar left.  The popup will start from the right side of the control that was clicked and be displayed right-to-left. 
16312>>>>>>>>>    Define xtpFlagLeftPopup for 4
16312>>>>>>>>>    // Control is manually updated.
16312>>>>>>>>>    Define xtpFlagManualUpdate for 8
16312>>>>>>>>>    // Used to disable customization.  The user will not be able to move or edit the control.
16312>>>>>>>>>    Define xtpFlagNoMovable for 16
16312>>>>>>>>>    // Used to stretch a control to fill the maximum available width if the control is in the ActiveMenuBar.  This has no effect on controls in the toolbar.
16312>>>>>>>>>    Define xtpFlagControlStretched for 32
16312>>>>>>>>>    // Show tooltip always.
16312>>>>>>>>>    Define xtpFlagShowPopupBarTip for 64
16312>>>>>>>>>    // Wrap row for toolbar or popup bar.
16312>>>>>>>>>    Define xtpFlagWrapRow for 128
16312>>>>>>>>>    // Control is on the right side of Ribbon tabs.
16312>>>>>>>>>    Define xtpFlagRibbonTabBackground for 256
16312>>>>>>>>>
16312>>>>>>>>>// Combo Styles
16312>>>>>>>>>Define XTPComboStyle for Integer
16312>>>>>>>>>    // Normal combobox.
16312>>>>>>>>>    Define xtpComboNormal for 0
16312>>>>>>>>>    // Combobox with label.
16312>>>>>>>>>    Define xtpComboLabel for 1
16312>>>>>>>>>
16312>>>>>>>>>// Gallery Resizable style
16312>>>>>>>>>Define XTPGalleryResizable for Integer
16312>>>>>>>>>    // xtpAllowResizeWidth
16312>>>>>>>>>    Define xtpAllowResizeWidth for 1
16312>>>>>>>>>    // xtpAllowResizeHeight
16312>>>>>>>>>    Define xtpAllowResizeHeight for 2
16312>>>>>>>>>
16312>>>>>>>>>// Visual Themes
16312>>>>>>>>>Define XTPVisualTheme for Integer
16312>>>>>>>>>    // Office 2000 theme.
16312>>>>>>>>>    Define xtpThemeOffice2000 for 0
16312>>>>>>>>>    // Office XP theme.
16312>>>>>>>>>    Define xtpThemeOfficeXP for 1
16312>>>>>>>>>    // Office 2003 theme.
16312>>>>>>>>>    Define xtpThemeOffice2003 for 2
16312>>>>>>>>>    // Windows XP themes support.
16312>>>>>>>>>    Define xtpThemeNativeWinXP for 3
16312>>>>>>>>>    // VisualStudio 2005 theme.
16312>>>>>>>>>    Define xtpThemeWhidbey for 4
16312>>>>>>>>>    // Office 2007 theme.
16312>>>>>>>>>    Define xtpThemeResource for 5
16312>>>>>>>>>    // Ribbon theme.
16312>>>>>>>>>    Define xtpThemeRibbon for 6
16312>>>>>>>>>    // VisualStudio2008 theme.
16312>>>>>>>>>    Define xtpThemeVisualStudio2008 for 7
16312>>>>>>>>>    // VisualStudio6 theme.
16312>>>>>>>>>    Define xtpThemeVisualStudio6 for 8
16312>>>>>>>>>    // VisualStudio2010 theme.
16312>>>>>>>>>    Define xtpThemeVisualStudio2010 for 9
16312>>>>>>>>>    // Office 2007 System theme.
16312>>>>>>>>>    Define xtpThemeOffice2007System for 11
16312>>>>>>>>>    // Office 2013 theme.
16312>>>>>>>>>    Define xtpThemeOffice2013 for 12
16312>>>>>>>>>    // Office 2016 theme.
16312>>>>>>>>>    Define xtpThemeOffice2016 for 12
16312>>>>>>>>>    // VisualStudio2012 theme. Uses INI file
16312>>>>>>>>>    Define xtpThemeVisualStudio2012 for 13
16312>>>>>>>>>    // VisualStudio2012 Light theme.
16312>>>>>>>>>    Define xtpThemeVisualStudio2012Light for 14
16312>>>>>>>>>    // VisualStudio2012 Dark theme.
16312>>>>>>>>>    Define xtpThemeVisualStudio2012Dark for 15
16312>>>>>>>>>    // VisualStudio2015 theme.
16312>>>>>>>>>    Define xtpThemeVisualStudio2015 for 16
16312>>>>>>>>>    // Windows 10 theme.
16312>>>>>>>>>    Define xtpThemeNativeWindows10 for 17
16312>>>>>>>>>    // VisualStudio2017 theme.
16312>>>>>>>>>    Define xtpThemeVisualStudio2017 for 18
16312>>>>>>>>>    // VisualStudio2019 theme.
16312>>>>>>>>>    Define xtpThemeVisualStudio2019 for 19
16312>>>>>>>>>    // VisualStudio2022 theme.
16312>>>>>>>>>    Define xtpThemeVisualStudio2022 for 20
16312>>>>>>>>>
16312>>>>>>>>>// Backstage Separator Visual Themes
16312>>>>>>>>>Define XTPBackstageSeparatorControlAppearanceStyle for Integer
16312>>>>>>>>>    Define xtpSeparatorAppearanceResource for 6
16312>>>>>>>>>    Define xtpSeparatorAppearanceOffice2013 for 12
16312>>>>>>>>>    Define xtpSeparatorAppearanceOffice2016 for 12
16312>>>>>>>>>    Define xtpSeparatorAppearanceVisualStudio2015 for 16
16312>>>>>>>>>    Define xtpSeparatorAppearanceVisualStudio2017 for 17
16312>>>>>>>>>    Define xtpSeparatorAppearanceVisualStudio2019 for 18
16312>>>>>>>>>    Define xtpSeparatorAppearanceVisualStudio2022 for 19
16312>>>>>>>>>
16312>>>>>>>>>// Backstage Button Control Visual Themes
16312>>>>>>>>>Define XTPBackstageButtonControlAppearanceStyle for Integer
16312>>>>>>>>>    Define xtpAppearanceStandard for 0
16312>>>>>>>>>    Define xtpAppearanceFlat for 1
16312>>>>>>>>>    Define xtpAppearanceUltraFlat for 2
16312>>>>>>>>>    Define xtpAppearanceOffice2000 for 3
16312>>>>>>>>>    Define xtpAppearanceOfficeXP for 4
16312>>>>>>>>>    Define xtpAppearanceOffice2003 for 5
16312>>>>>>>>>    Define xtpAppearanceOffice2007 for 6
16312>>>>>>>>>    Define xtpAppearanceResource for 7
16312>>>>>>>>>    Define xtpAppearanceNativeWinXP for 8
16312>>>>>>>>>    Define xtpAppearanceVisualStudio2005 for 9
16312>>>>>>>>>    Define xtpAppearanceVisualStudio2008 for 10
16312>>>>>>>>>    Define xtpAppearanceVisualStudio2010 for 11
16312>>>>>>>>>    Define xtpAppearanceOffice2013 for 12
16312>>>>>>>>>    Define xtpAppearanceOffice2016 for 12
16312>>>>>>>>>    Define xtpAppearanceVisualStudio2012 for 13
16312>>>>>>>>>    Define xtpAppearanceVisualStudio2012Light for 14
16312>>>>>>>>>    Define xtpAppearanceVisualStudio2012Dark for 15
16312>>>>>>>>>    Define xtpAppearanceVisualStudio2015 for 16
16312>>>>>>>>>    Define xtpAppearanceNativeWindows10 for 17
16312>>>>>>>>>    Define xtpAppearanceVisualStudio2017 for 18
16312>>>>>>>>>    Define xtpAppearanceVisualStudio2019 for 19
16312>>>>>>>>>    Define xtpAppearanceVisualStudio2022 for 20
16312>>>>>>>>>
16312>>>>>>>>>Define XTPRibbonBackstageStyle for Integer
16312>>>>>>>>>    // Backstage like in Office 2010.
16312>>>>>>>>>    Define xtpRibbonBackstageOffice2010Style for 0
16312>>>>>>>>>    // Backstage like in Office 2013/2016.
16312>>>>>>>>>    Define xtpRibbonBackstageOffice2013Style for 1
16312>>>>>>>>>    // Backstage like in Office 2013/2016.
16312>>>>>>>>>    Define xtpRibbonBackstageOffice2016Style for 1
16312>>>>>>>>>
16312>>>>>>>>>// ScrollBar Style
16312>>>>>>>>>Define XTPScrollBarStyle for Integer
16312>>>>>>>>>    Define xtpScrollStyleDefault for 0
16312>>>>>>>>>    Define xtpScrollStyleStandard for 1
16312>>>>>>>>>    Define xtpScrollStyleFlat for 2
16312>>>>>>>>>    Define xtpScrollStyleSystem for 3
16312>>>>>>>>>    Define xtpScrollStyleOffice for 4
16312>>>>>>>>>    Define xtpScrollStyleOffice2007Light for 5
16312>>>>>>>>>    Define xtpScrollStyleOffice2007Dark for 6
16312>>>>>>>>>    Define xtpScrollStyleSlider for 7
16312>>>>>>>>>
16312>>>>>>>>>Define XTPControlCustomVerticalOptions for Integer
16312>>>>>>>>>    Define xtpVerticalHide for 0
16312>>>>>>>>>    Define xtpVerticalShow for 1
16312>>>>>>>>>    Define xtpVerticalButton for 2
16312>>>>>>>>>
16312>>>>>>>>>// Text Orientation
16312>>>>>>>>>Define XTPBarTextOrientation for Integer
16312>>>>>>>>>    Define xtpBarTextAuto for 0
16312>>>>>>>>>    Define xtpBarTextVertical for 1
16312>>>>>>>>>    Define xtpBarTextHorizontal for 2
16312>>>>>>>>>
16312>>>>>>>>>// Edit Style
16312>>>>>>>>>Define XTPCommandBarEditStyle for Integer
16312>>>>>>>>>    Define xtpEditStyleLeft for 0
16312>>>>>>>>>    Define xtpEditStyleCenter for 1
16312>>>>>>>>>    Define xtpEditStyleRight for 2
16312>>>>>>>>>    Define xtpEditStyleLowerCase for 16
16312>>>>>>>>>    Define xtpEditStylePassword for 32
16312>>>>>>>>>
16312>>>>>>>>>Define OLETextImageRelationStyle for Integer
16312>>>>>>>>>    Define xtpOverlay for 0
16312>>>>>>>>>    Define xtpImageAboveText for 1
16312>>>>>>>>>    Define xtpTextAboveImage for 2
16312>>>>>>>>>    Define xtpImageBeforeText for 3
16312>>>>>>>>>    Define xtpTextBeforeImage for 4
16312>>>>>>>>>
16312>>>>>>>>>Define OLEPushButtonStyle for Integer
16312>>>>>>>>>    Define xtpButtonNormal for 0
16312>>>>>>>>>    Define xtpButtonDropDown for 1
16312>>>>>>>>>    Define xtpButtonDropDownRight for 2
16312>>>>>>>>>    Define xtpButtonSplitDropDown for 3
16312>>>>>>>>>    Define xtpButtonDropDownNoGlyph for 4
16312>>>>>>>>>
16312>>>>>>>>>Define OLEAlignmentStyle for Integer
16312>>>>>>>>>    Define xtpAlignLeft for 0
16312>>>>>>>>>    Define xtpAlignRight for 1
16312>>>>>>>>>    Define xtpAlignCenter for 2
16312>>>>>>>>>    Define xtpAlignMiddle for 0
16312>>>>>>>>>    Define xtpAlignTop for 4
16312>>>>>>>>>    Define xtpAlignBottom for 8
16312>>>>>>>>>
16312>>>>>>>>>// Docking Flags
16312>>>>>>>>>Define XTPToolBarFlags for Integer
16312>>>>>>>>>    // Allows docking at the top of the client area. 
16312>>>>>>>>>    Define xtpFlagAlignTop for 1
16312>>>>>>>>>    // Allows docking at the bottom of the client area. 
16312>>>>>>>>>    Define xtpFlagAlignBottom for 2
16312>>>>>>>>>    // Allows docking on the left side of the client area. 
16312>>>>>>>>>    Define xtpFlagAlignLeft for 4
16312>>>>>>>>>    // Allows docking on the left side of the client area. 
16312>>>>>>>>>    Define xtpFlagAlignRight for 8
16312>>>>>>>>>    // Allows docking on any side of the client area. 
16312>>>>>>>>>    Define xtpFlagAlignAny for 15
16312>>>>>>>>>    // Allows floating. 
16312>>>>>>>>>    Define xtpFlagFloating for 16
16312>>>>>>>>>    // Allow to hide wrapped controls.
16312>>>>>>>>>    Define xtpFlagHideWrap for 32
16312>>>>>>>>>    // Bar is stretched.
16312>>>>>>>>>    Define xtpFlagStretched for 64
16312>>>>>>>>>    // Bar is stretched, but not fill whole row
16312>>>>>>>>>    Define xtpFlagStretchedShared for 1048576
16312>>>>>>>>>    // Enables smart layout
16312>>>>>>>>>    Define xtpFlagSmartLayout for 2097152
16312>>>>>>>>>
16312>>>>>>>>>// MenuBar flags
16312>>>>>>>>>Define XTPMenuBarFlags for Integer
16312>>>>>>>>>    // To hide minimize box.
16312>>>>>>>>>    Define xtpFlagHideMinimizeBox for 256
16312>>>>>>>>>    // To hide maximize box.
16312>>>>>>>>>    Define xtpFlagHideMaximizeBox for 512
16312>>>>>>>>>    // To hide close button.
16312>>>>>>>>>    Define xtpFlagHideClose for 4096
16312>>>>>>>>>    // To add system MDI popup bar.
16312>>>>>>>>>    Define xtpFlagHideMDIButtons for 4864
16312>>>>>>>>>    Define xtpFlagAddMDISysPopup for 8192
16312>>>>>>>>>
16312>>>>>>>>>// Animation
16312>>>>>>>>>Define XTPAnimationType for Integer
16312>>>>>>>>>    // As defined in the 'Display' settings.
16312>>>>>>>>>    Define xtpAnimateWindowsDefault for 0
16312>>>>>>>>>    // Any of the first three in random selection.
16312>>>>>>>>>    Define xtpAnimateRandom for 1
16312>>>>>>>>>    // Unfold top to bottom.
16312>>>>>>>>>    Define xtpAnimateUnfold for 2
16312>>>>>>>>>    // Slide in from left.
16312>>>>>>>>>    Define xtpAnimateSlide for 3
16312>>>>>>>>>    // Fade-in.
16312>>>>>>>>>    Define xtpAnimateFade for 4
16312>>>>>>>>>    // No animation.
16312>>>>>>>>>    Define xtpAnimateNone for 5
16312>>>>>>>>>
16312>>>>>>>>>// Status Pane Styles
16312>>>>>>>>>Define XTPStatusPaneStyle for Integer
16312>>>>>>>>>    // When this flag is applied, the border will be removed from the indicated statusbar pane.
16312>>>>>>>>>    Define SBPS_NOBORDERS for 256
16312>>>>>>>>>    // When this flag is applied, the indicated statusbar pane will be disabled.
16312>>>>>>>>>    Define SBPS_DISABLED for 67108864
16312>>>>>>>>>    // The pane will stretched, it will not have a static width.
16312>>>>>>>>>    Define SBPS_STRETCH for 134217728
16312>>>>>>>>>
16312>>>>>>>>>// Tracking Flags
16312>>>>>>>>>Define XTPTrackPopupFlags for Integer
16312>>>>>>>>>    // Returns the Id of the control instead of triggering the execute event.  The execute event will not be triggered.
16312>>>>>>>>>    Define TPM_RETURNCMD for 256
16312>>>>>>>>>    // Allows you to choose a menu item using a right click.
16312>>>>>>>>>    Define TPM_RIGHTBUTTON for 2
16312>>>>>>>>>    // Right aligns the menu starting from the x and y coordinates.
16312>>>>>>>>>    Define TPM_RIGHTALIGN for 8
16312>>>>>>>>>    // Use the TPM_RECURSE flag to display a menu when another menu is already displayed. This is intended to support context menus within a menu.
16312>>>>>>>>>    Define TPM_RECURSE for 1
16312>>>>>>>>>
16312>>>>>>>>>// Control's Hide Flags
16312>>>>>>>>>Define XTPControlHideFlags for Integer
16312>>>>>>>>>    // Control is visible.
16312>>>>>>>>>    Define xtpNoHide for 0
16312>>>>>>>>>    // Control is hidden by generic reason.
16312>>>>>>>>>    Define xtpHideGeneric for 1
16312>>>>>>>>>    // Control is hidden by wrap.
16312>>>>>>>>>    Define xtpHideWrap for 2
16312>>>>>>>>>    // Control is hidden by docking position.
16312>>>>>>>>>    Define xtpHideDockingPosition for 4
16312>>>>>>>>>    // Control is hidden by scrolling.
16312>>>>>>>>>    Define xtpHideScroll for 8
16312>>>>>>>>>    // Control is hidden by customize settings.
16312>>>>>>>>>    Define xtpHideCustomize for 16
16312>>>>>>>>>    // If the control is rarely used and it is not visible because the intelligent menus option on and the command is a hidden command.
16312>>>>>>>>>    Define xtpHideExpand for 32
16312>>>>>>>>>    // Control is hidden because active template excluded from its list.
16312>>>>>>>>>    Define xtpHideDocTemplate for 64
16312>>>>>>>>>    // Control is hidden because inactive ribbon tab.
16312>>>>>>>>>    Define xtpHideRibbonTab for 128
16312>>>>>>>>>
16312>>>>>>>>>Define XTPKeyboardCuesShow for Integer
16312>>>>>>>>>    // Show keyboard cues always
16312>>>>>>>>>    Define xtpKeyboardCuesShowAlways for 0
16312>>>>>>>>>    // Never show keyboard cues
16312>>>>>>>>>    Define xtpKeyboardCuesShowNever for 1
16312>>>>>>>>>    // System defined
16312>>>>>>>>>    Define xtpKeyboardCuesShowWindowsDefault for 2
16312>>>>>>>>>
16312>>>>>>>>>Define XTPKeyboardCuesUse for Integer
16312>>>>>>>>>    // Activate only menu by using underlines
16312>>>>>>>>>    Define xtpKeyboardCuesUseMenuOnly for 0
16312>>>>>>>>>    // Activate menu and toolbars by using underlines
16312>>>>>>>>>    Define xtpKeyboardCuesUseAll for 1
16312>>>>>>>>>    // No using underlines
16312>>>>>>>>>    Define xtpKeyboardCuesUseNone for 2
16312>>>>>>>>>    // Only if Ampersant exists option
16312>>>>>>>>>    Define xtpKeyboardCuesUseAmpersandOnly for 4
16312>>>>>>>>>
16312>>>>>>>>>// Workspace Buttons
16312>>>>>>>>>Define XTPWorkspaceButtons for Integer
16312>>>>>>>>>    // To hide arrow buttons.
16312>>>>>>>>>    Define xtpWorkspaceHideArrows for 1
16312>>>>>>>>>    // To hide close button.
16312>>>>>>>>>    Define xtpWorkspaceHideClose for 2
16312>>>>>>>>>    // To hide arrow and close buttons.
16312>>>>>>>>>    Define xtpWorkspaceHideAll for 3
16312>>>>>>>>>    // To show active file button.
16312>>>>>>>>>    Define xtpWorkspaceShowActiveFiles for 4
16312>>>>>>>>>    // To hide arrow buttons always
16312>>>>>>>>>    Define xtpWorkspaceHideArrowsAlways for 9
16312>>>>>>>>>    // To show close button for all tabs
16312>>>>>>>>>    Define xtpWorkspaceShowCloseTab for 16
16312>>>>>>>>>    // To show close button for selected tabs.
16312>>>>>>>>>    Define xtpWorkspaceShowCloseSelectedTab for 32
16312>>>>>>>>>
16312>>>>>>>>>// Workspace New Tab Position
16312>>>>>>>>>Define XTPWorkspaceNewTabPosition for Integer
16312>>>>>>>>>    // New tab will be created after all tabs
16312>>>>>>>>>    Define xtpWorkspaceNewTabRightMost for 0
16312>>>>>>>>>    // New tab will be created before all tabs
16312>>>>>>>>>    Define xtpWorkspaceNewTabLeftMost for 1
16312>>>>>>>>>    // New tab will be created after active tab
16312>>>>>>>>>    Define xtpWorkspaceNewTabNextToActive for 2
16312>>>>>>>>>
16312>>>>>>>>>// Scale Mode
16312>>>>>>>>>Define XTPScaleMode for Integer
16312>>>>>>>>>    // Auto scale mode
16312>>>>>>>>>    Define xtpScaleAuto for 0
16312>>>>>>>>>    // Pixels scale mode
16312>>>>>>>>>    Define xtpScalePixel for 1
16312>>>>>>>>>    // Twips scale mode
16312>>>>>>>>>    Define xtpScaleTwip for 2
16312>>>>>>>>>
16312>>>>>>>>>Define XTPTextAlignment for Integer
16312>>>>>>>>>    Define xtpAlignmentLeft for 0
16312>>>>>>>>>    Define xtpAlignmentCenter for 1
16312>>>>>>>>>    Define xtpAlignmentRight for 2
16312>>>>>>>>>
16312>>>>>>>>>Define XTPShellAutoCompleteFlags for Integer
16312>>>>>>>>>    Define xtpShellAutoCompleteFileSystem for 1
16312>>>>>>>>>    Define xtpShellAutoCompleteFileSysOnly for 16
16312>>>>>>>>>    Define xtpShellAutoCompleteUrlAll for 6
16312>>>>>>>>>    Define xtpShellAutoCompleteUrlHistory for 2
16312>>>>>>>>>    Define xtpShellAutoCompleteUrlMRU for 4
16312>>>>>>>>>    Define xtpShellAutoCompleteAll for 7
16312>>>>>>>>>
16312>>>>>>>>>Define XTPRibbonTabContextColor for UInteger
16312>>>>>>>>>    Define xtpRibbonTabContextColorNone for 0
16312>>>>>>>>>    Define xtpRibbonTabContextColorBlue for 1
16312>>>>>>>>>    Define xtpRibbonTabContextColorYellow for 2
16312>>>>>>>>>    Define xtpRibbonTabContextColorGreen for 3
16312>>>>>>>>>    Define xtpRibbonTabContextColorRed for 4
16312>>>>>>>>>    Define xtpRibbonTabContextColorPurple for 5
16312>>>>>>>>>    Define xtpRibbonTabContextColorCyan for 6
16312>>>>>>>>>    Define xtpRibbonTabContextColorOrange for 7
16312>>>>>>>>>
16312>>>>>>>>>Define XTPCommandBarsSpecialCommands for Integer
16312>>>>>>>>>    Define XTP_ID_RIBBONCONTROLTAB for 9604
16312>>>>>>>>>    Define XTP_ID_RIBBONCUSTOMIZE for 9607
16312>>>>>>>>>    Define XTP_ID_CUSTOMIZE_ADDORREMOVE for 9122
16312>>>>>>>>>    Define XTP_ID_CUSTOMIZE_RESET for 9123
16312>>>>>>>>>    Define XTP_ID_TOOLBAR_EXPAND for 9148
16312>>>>>>>>>    Define XTP_ID_TOOLBAR_HIDE for 9149
16312>>>>>>>>>    Define XTP_ID_WORKSPACE_CANCEL for 9159
16312>>>>>>>>>    Define XTP_ID_WINDOWLIST for 35000
16312>>>>>>>>>    Define XTP_ID_CUSTOMIZE for 35001
16312>>>>>>>>>    Define XTP_ID_WORKSPACE_ACTIONS for 35002
16312>>>>>>>>>    Define XTP_ID_TOOLBARLIST for 59392
16312>>>>>>>>>    Define XTP_ID_FILE_MRU for 35003
16312>>>>>>>>>
16312>>>>>>>>>Define XTPSliderCommand for Integer
16312>>>>>>>>>    Define XTP_SB_LINELEFT for 0
16312>>>>>>>>>    Define XTP_SB_LINERIGHT for 1
16312>>>>>>>>>    Define XTP_SB_PAGELEFT for 2
16312>>>>>>>>>    Define XTP_SB_PAGERIGHT for 3
16312>>>>>>>>>    Define XTP_SB_THUMBTRACK for 5
16312>>>>>>>>>    Define XTP_SB_LEFT for 6
16312>>>>>>>>>    Define XTP_SB_RIGHT for 7
16312>>>>>>>>>    Define XTP_SB_ENDSCROLL for 8
16312>>>>>>>>>
16312>>>>>>>>>Define XTPPrintOrientation for Integer
16312>>>>>>>>>    Define xtpOrientationPortrait for 1
16312>>>>>>>>>    Define xtpOrientationLandscape for 2
16312>>>>>>>>>
16312>>>>>>>>>Define XTPBackImage for Integer
16312>>>>>>>>>    Define XTPNone for 0
16312>>>>>>>>>    Define XTPCalligraphy for 1
16312>>>>>>>>>    Define XTPCirclesAndStripes for 2
16312>>>>>>>>>    Define XTPCircuit for 3
16312>>>>>>>>>    Define XTPClouds for 4
16312>>>>>>>>>    Define XTPDoodleCircles for 5
16312>>>>>>>>>    Define XTPDoodleDiamonds for 6
16312>>>>>>>>>    Define XTPGeometry for 7
16312>>>>>>>>>    Define XTPLunchBox for 8
16312>>>>>>>>>    Define XTPSchoolSupplies for 9
16312>>>>>>>>>    Define XTPSpring for 10
16312>>>>>>>>>    Define XTPStars for 11
16312>>>>>>>>>    Define XTPStraws for 12
16312>>>>>>>>>    Define XTPTreeRings for 13
16312>>>>>>>>>    Define XTPUnderWater for 14
16312>>>>>>>>>
16312>>>>>>>>>// CLSID: {C0DE2200-87E4-460A-8491-32BD8DE3269C}
16312>>>>>>>>>Class cCJIFrameShadow is a Mixin
16313>>>>>>>>>
16313>>>>>>>>>    Function ComOuterSize Returns Integer
16315>>>>>>>>>        Integer retVal
16315>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
16316>>>>>>>>>        Function_Return retVal
16317>>>>>>>>>    End_Function
16318>>>>>>>>>
16318>>>>>>>>>    Procedure Set ComOuterSize Integer value
16320>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
16321>>>>>>>>>    End_Procedure
16322>>>>>>>>>
16322>>>>>>>>>    Function ComInnerSize Returns Integer
16324>>>>>>>>>        Integer retVal
16324>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
16325>>>>>>>>>        Function_Return retVal
16326>>>>>>>>>    End_Function
16327>>>>>>>>>
16327>>>>>>>>>    Procedure Set ComInnerSize Integer value
16329>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
16330>>>>>>>>>    End_Procedure
16331>>>>>>>>>
16331>>>>>>>>>    Function ComOffsetX Returns OLE_XSIZE_PIXELS
16333>>>>>>>>>        OLE_XSIZE_PIXELS retVal
16333>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
16334>>>>>>>>>        Function_Return retVal
16335>>>>>>>>>    End_Function
16336>>>>>>>>>
16336>>>>>>>>>    Procedure Set ComOffsetX OLE_XSIZE_PIXELS value
16338>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
16339>>>>>>>>>    End_Procedure
16340>>>>>>>>>
16340>>>>>>>>>    Function ComOffsetY Returns OLE_YSIZE_PIXELS
16342>>>>>>>>>        OLE_YSIZE_PIXELS retVal
16342>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
16343>>>>>>>>>        Function_Return retVal
16344>>>>>>>>>    End_Function
16345>>>>>>>>>
16345>>>>>>>>>    Procedure Set ComOffsetY OLE_YSIZE_PIXELS value
16347>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
16348>>>>>>>>>    End_Procedure
16349>>>>>>>>>
16349>>>>>>>>>    Function ComColor Returns OLE_COLOR
16351>>>>>>>>>        OLE_COLOR retVal
16351>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
16352>>>>>>>>>        Function_Return retVal
16353>>>>>>>>>    End_Function
16354>>>>>>>>>
16354>>>>>>>>>    Procedure Set ComColor OLE_COLOR value
16356>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
16357>>>>>>>>>    End_Procedure
16358>>>>>>>>>
16358>>>>>>>>>    Function ComTransparency Returns Short
16360>>>>>>>>>        Short retVal
16360>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I2 to retVal
16361>>>>>>>>>        Function_Return retVal
16362>>>>>>>>>    End_Function
16363>>>>>>>>>
16363>>>>>>>>>    Procedure Set ComTransparency Short value
16365>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I2 to value
16366>>>>>>>>>    End_Procedure
16367>>>>>>>>>
16367>>>>>>>>>    Function ComBlendingFactors Returns Variant
16369>>>>>>>>>        Variant retVal
16369>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_VARIANT to retVal
16370>>>>>>>>>        Function_Return retVal
16371>>>>>>>>>    End_Function
16372>>>>>>>>>
16372>>>>>>>>>    Procedure Set ComBlendingFactors Variant value
16374>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_VARIANT to value
16375>>>>>>>>>    End_Procedure
16376>>>>>>>>>
16376>>>>>>>>>    Function ComBlendingPositions Returns Variant
16378>>>>>>>>>        Variant retVal
16378>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_VARIANT to retVal
16379>>>>>>>>>        Function_Return retVal
16380>>>>>>>>>    End_Function
16381>>>>>>>>>
16381>>>>>>>>>    Procedure Set ComBlendingPositions Variant value
16383>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_VARIANT to value
16384>>>>>>>>>    End_Procedure
16385>>>>>>>>>
16385>>>>>>>>>    Function ComClipOwner Returns Boolean
16387>>>>>>>>>        Boolean retVal
16387>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
16388>>>>>>>>>        Function_Return retVal
16389>>>>>>>>>    End_Function
16390>>>>>>>>>
16390>>>>>>>>>    Procedure Set ComClipOwner Boolean value
16392>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
16393>>>>>>>>>    End_Procedure
16394>>>>>>>>>
16394>>>>>>>>>    Function ComOwner Returns OLE_HANDLE
16396>>>>>>>>>        Handle hDispatchDriver
16396>>>>>>>>>        OLE_HANDLE retVal
16396>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16397>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_I4 to retVal
16398>>>>>>>>>        Function_Return retVal
16399>>>>>>>>>    End_Function
16400>>>>>>>>>
16400>>>>>>>>>    Procedure ComFreezeUpdates Boolean llfreeze
16402>>>>>>>>>        Handle hDispatchDriver
16402>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16403>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16404>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llfreeze
16405>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 10 OLE_VT_VOID
16406>>>>>>>>>    End_Procedure
16407>>>>>>>>>
16407>>>>>>>>>    Procedure ComShow
16409>>>>>>>>>        Handle hDispatchDriver
16409>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16410>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
16411>>>>>>>>>    End_Procedure
16412>>>>>>>>>
16412>>>>>>>>>    Procedure ComHide
16414>>>>>>>>>        Handle hDispatchDriver
16414>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16415>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 12 OLE_VT_VOID
16416>>>>>>>>>    End_Procedure
16417>>>>>>>>>
16417>>>>>>>>>    Procedure ComUpdatePosition
16419>>>>>>>>>        Handle hDispatchDriver
16419>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16420>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
16421>>>>>>>>>    End_Procedure
16422>>>>>>>>>
16422>>>>>>>>>    Procedure ComSetBlendingOptions Variant llfactors Variant llpositions
16424>>>>>>>>>        Handle hDispatchDriver
16424>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16425>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16426>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llfactors
16427>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpositions
16428>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
16429>>>>>>>>>    End_Procedure
16430>>>>>>>>>End_Class
16431>>>>>>>>>
16431>>>>>>>>>// CoClass
16431>>>>>>>>>// CLSID: {C0DE2200-5B81-4C3C-A68E-3F0FF3771B6E}
16431>>>>>>>>>Class cCJFrameShadow is a cComAutomationObject
16432>>>>>>>>>    Import_Class_Protocol cCJIFrameShadow
16433>>>>>>>>>
16433>>>>>>>>>    Procedure Construct_Object
16435>>>>>>>>>        Forward Send Construct_Object
16437>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
16438>>>>>>>>>    End_Procedure
16439>>>>>>>>>End_Class
16440>>>>>>>>>
16440>>>>>>>>>// CLSID: {C0DE2200-F2DA-4617-AD07-FE7F08C16C0B}
16440>>>>>>>>>Class cCJIFrameShadows is a Mixin
16441>>>>>>>>>
16441>>>>>>>>>    Function Com_NewEnum Returns Variant
16443>>>>>>>>>        Handle hDispatchDriver
16443>>>>>>>>>        Variant retVal
16443>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16444>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
16445>>>>>>>>>        Function_Return retVal
16446>>>>>>>>>    End_Function
16447>>>>>>>>>End_Class
16448>>>>>>>>>
16448>>>>>>>>>// CoClass
16448>>>>>>>>>// CLSID: {C0DE2200-B4D6-492D-931A-9A39D207DE99}
16448>>>>>>>>>Class cCJFrameShadows is a cComAutomationObject
16449>>>>>>>>>    Import_Class_Protocol cCJIFrameShadows
16450>>>>>>>>>
16450>>>>>>>>>    Procedure Construct_Object
16452>>>>>>>>>        Forward Send Construct_Object
16454>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
16455>>>>>>>>>    End_Procedure
16456>>>>>>>>>End_Class
16457>>>>>>>>>
16457>>>>>>>>>// CLSID: {C0DE2200-9BF8-4337-959A-4629C9286C7A}
16457>>>>>>>>>Class cCJIFrameShadowManager is a Mixin
16458>>>>>>>>>
16458>>>>>>>>>    Function ComFlags Returns Integer
16460>>>>>>>>>        Integer retVal
16460>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
16461>>>>>>>>>        Function_Return retVal
16462>>>>>>>>>    End_Function
16463>>>>>>>>>
16463>>>>>>>>>    Procedure Set ComFlags Integer value
16465>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
16466>>>>>>>>>    End_Procedure
16467>>>>>>>>>
16467>>>>>>>>>    Function ComDefaultOuterSize Returns Integer
16469>>>>>>>>>        Integer retVal
16469>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
16470>>>>>>>>>        Function_Return retVal
16471>>>>>>>>>    End_Function
16472>>>>>>>>>
16472>>>>>>>>>    Procedure Set ComDefaultOuterSize Integer value
16474>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
16475>>>>>>>>>    End_Procedure
16476>>>>>>>>>
16476>>>>>>>>>    Function ComDefaultInnerSize Returns Integer
16478>>>>>>>>>        Integer retVal
16478>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
16479>>>>>>>>>        Function_Return retVal
16480>>>>>>>>>    End_Function
16481>>>>>>>>>
16481>>>>>>>>>    Procedure Set ComDefaultInnerSize Integer value
16483>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
16484>>>>>>>>>    End_Procedure
16485>>>>>>>>>
16485>>>>>>>>>    Function ComDefaultOffsetX Returns OLE_XSIZE_PIXELS
16487>>>>>>>>>        OLE_XSIZE_PIXELS retVal
16487>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
16488>>>>>>>>>        Function_Return retVal
16489>>>>>>>>>    End_Function
16490>>>>>>>>>
16490>>>>>>>>>    Procedure Set ComDefaultOffsetX OLE_XSIZE_PIXELS value
16492>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
16493>>>>>>>>>    End_Procedure
16494>>>>>>>>>
16494>>>>>>>>>    Function ComDefaultOffsetY Returns OLE_YSIZE_PIXELS
16496>>>>>>>>>        OLE_YSIZE_PIXELS retVal
16496>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
16497>>>>>>>>>        Function_Return retVal
16498>>>>>>>>>    End_Function
16499>>>>>>>>>
16499>>>>>>>>>    Procedure Set ComDefaultOffsetY OLE_YSIZE_PIXELS value
16501>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
16502>>>>>>>>>    End_Procedure
16503>>>>>>>>>
16503>>>>>>>>>    Function ComDefaultColor Returns OLE_COLOR
16505>>>>>>>>>        OLE_COLOR retVal
16505>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
16506>>>>>>>>>        Function_Return retVal
16507>>>>>>>>>    End_Function
16508>>>>>>>>>
16508>>>>>>>>>    Procedure Set ComDefaultColor OLE_COLOR value
16510>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
16511>>>>>>>>>    End_Procedure
16512>>>>>>>>>
16512>>>>>>>>>    Function ComDefaultTransparency Returns Short
16514>>>>>>>>>        Short retVal
16514>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I2 to retVal
16515>>>>>>>>>        Function_Return retVal
16516>>>>>>>>>    End_Function
16517>>>>>>>>>
16517>>>>>>>>>    Procedure Set ComDefaultTransparency Short value
16519>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I2 to value
16520>>>>>>>>>    End_Procedure
16521>>>>>>>>>
16521>>>>>>>>>    Function ComDefaultClipOwner Returns Boolean
16523>>>>>>>>>        Boolean retVal
16523>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
16524>>>>>>>>>        Function_Return retVal
16525>>>>>>>>>    End_Function
16526>>>>>>>>>
16526>>>>>>>>>    Procedure Set ComDefaultClipOwner Boolean value
16528>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
16529>>>>>>>>>    End_Procedure
16530>>>>>>>>>
16530>>>>>>>>>    Function ComDefaultBlendingFactors Returns Variant
16532>>>>>>>>>        Handle hDispatchDriver
16532>>>>>>>>>        Variant retVal
16532>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16533>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_VARIANT to retVal
16534>>>>>>>>>        Function_Return retVal
16535>>>>>>>>>    End_Function
16536>>>>>>>>>
16536>>>>>>>>>    Function ComDefaultBlendingPositions Returns Variant
16538>>>>>>>>>        Handle hDispatchDriver
16538>>>>>>>>>        Variant retVal
16538>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16539>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_VARIANT to retVal
16540>>>>>>>>>        Function_Return retVal
16541>>>>>>>>>    End_Function
16542>>>>>>>>>
16542>>>>>>>>>    Function ComIsShadowSupported Returns Boolean
16544>>>>>>>>>        Handle hDispatchDriver
16544>>>>>>>>>        Boolean retVal
16544>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16545>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_BOOL to retVal
16546>>>>>>>>>        Function_Return retVal
16547>>>>>>>>>    End_Function
16548>>>>>>>>>
16548>>>>>>>>>    Function ComEnableShadow OLE_HANDLE llhWnd OLE_COLOR llColor Integer llOuterSize Integer llInnerSize Integer llxOffset Integer llyOffset Short llTransparency Returns Variant
16550>>>>>>>>>        Handle hDispatchDriver
16550>>>>>>>>>        Variant retVal
16550>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16551>>>>>>>>>        Send PrepareParams to hDispatchDriver 7
16552>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16553>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
16554>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llOuterSize
16555>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llInnerSize
16556>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llxOffset
16557>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llyOffset
16558>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llTransparency
16559>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
16560>>>>>>>>>        Function_Return retVal
16561>>>>>>>>>    End_Function
16562>>>>>>>>>
16562>>>>>>>>>    Procedure ComDisableShadow OLE_HANDLE llhWnd
16564>>>>>>>>>        Handle hDispatchDriver
16564>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16565>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16566>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16567>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 12 OLE_VT_VOID
16568>>>>>>>>>    End_Procedure
16569>>>>>>>>>
16569>>>>>>>>>    Function ComIsShadowEnabled OLE_HANDLE llhWnd Returns Boolean
16571>>>>>>>>>        Handle hDispatchDriver
16571>>>>>>>>>        Boolean retVal
16571>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16572>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16573>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16574>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
16575>>>>>>>>>        Function_Return retVal
16576>>>>>>>>>    End_Function
16577>>>>>>>>>
16577>>>>>>>>>    Function ComGetShadow OLE_HANDLE llhWnd Returns Variant
16579>>>>>>>>>        Handle hDispatchDriver
16579>>>>>>>>>        Variant retVal
16579>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16580>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16581>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16582>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
16583>>>>>>>>>        Function_Return retVal
16584>>>>>>>>>    End_Function
16585>>>>>>>>>
16585>>>>>>>>>    Procedure ComFreezeUpdates Boolean llfreeze
16587>>>>>>>>>        Handle hDispatchDriver
16587>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16588>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16589>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llfreeze
16590>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
16591>>>>>>>>>    End_Procedure
16592>>>>>>>>>
16592>>>>>>>>>    Procedure ComSetGlobalOuterSize Integer llsize
16594>>>>>>>>>        Handle hDispatchDriver
16594>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16595>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16596>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llsize
16597>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
16598>>>>>>>>>    End_Procedure
16599>>>>>>>>>
16599>>>>>>>>>    Procedure ComSetGlobalInnerSize Integer llsize
16601>>>>>>>>>        Handle hDispatchDriver
16601>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16602>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16603>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llsize
16604>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
16605>>>>>>>>>    End_Procedure
16606>>>>>>>>>
16606>>>>>>>>>    Procedure ComSetGlobalOffset OLE_XSIZE_PIXELS llOffsetX OLE_YSIZE_PIXELS llOffsetY
16608>>>>>>>>>        Handle hDispatchDriver
16608>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16609>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16610>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llOffsetX
16611>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llOffsetY
16612>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
16613>>>>>>>>>    End_Procedure
16614>>>>>>>>>
16614>>>>>>>>>    Procedure ComSetGlobalColor OLE_COLOR llColor
16616>>>>>>>>>        Handle hDispatchDriver
16616>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16617>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16618>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
16619>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 19 OLE_VT_VOID
16620>>>>>>>>>    End_Procedure
16621>>>>>>>>>
16621>>>>>>>>>    Procedure ComSetGlobalTransparency Short llTransparency
16623>>>>>>>>>        Handle hDispatchDriver
16623>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16624>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16625>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llTransparency
16626>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
16627>>>>>>>>>    End_Procedure
16628>>>>>>>>>
16628>>>>>>>>>    Procedure ComSetDefaultBlendingOptions Variant llfactors Variant llpositions
16630>>>>>>>>>        Handle hDispatchDriver
16630>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16631>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16632>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llfactors
16633>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpositions
16634>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
16635>>>>>>>>>    End_Procedure
16636>>>>>>>>>
16636>>>>>>>>>    Procedure ComSetGlobalBlendingOptions Variant llfactors Variant llpositions
16638>>>>>>>>>        Handle hDispatchDriver
16638>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16639>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16640>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llfactors
16641>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpositions
16642>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
16643>>>>>>>>>    End_Procedure
16644>>>>>>>>>
16644>>>>>>>>>    Procedure ComSetGlobalClipOwner Boolean llclip
16646>>>>>>>>>        Handle hDispatchDriver
16646>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16647>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16648>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llclip
16649>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
16650>>>>>>>>>    End_Procedure
16651>>>>>>>>>
16651>>>>>>>>>    Function ComFrameShadows Returns Variant
16653>>>>>>>>>        Handle hDispatchDriver
16653>>>>>>>>>        Variant retVal
16653>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16654>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 23 OLE_VT_DISPATCH to retVal
16655>>>>>>>>>        Function_Return retVal
16656>>>>>>>>>    End_Function
16657>>>>>>>>>End_Class
16658>>>>>>>>>
16658>>>>>>>>>// CoClass
16658>>>>>>>>>// CLSID: {C0DE2200-DDA7-45FD-8AE8-B1A88391344D}
16658>>>>>>>>>Class cCJFrameShadowManager is a cComAutomationObject
16659>>>>>>>>>    Import_Class_Protocol cCJIFrameShadowManager
16660>>>>>>>>>
16660>>>>>>>>>    Procedure Construct_Object
16662>>>>>>>>>        Forward Send Construct_Object
16664>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
16665>>>>>>>>>    End_Procedure
16666>>>>>>>>>End_Class
16667>>>>>>>>>
16667>>>>>>>>>// CLSID: {C0DE2200-B997-432B-AB4F-439341A769E5}
16667>>>>>>>>>// Dispatch interface for CommandBars Control
16667>>>>>>>>>Class cCJ_DCommandBars is a Mixin
16668>>>>>>>>>
16668>>>>>>>>>    Function ComVisualTheme Returns XTPVisualTheme
16670>>>>>>>>>        XTPVisualTheme retVal
16670>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
16671>>>>>>>>>        Function_Return retVal
16672>>>>>>>>>    End_Function
16673>>>>>>>>>
16673>>>>>>>>>    Procedure Set ComVisualTheme XTPVisualTheme value
16675>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
16676>>>>>>>>>    End_Procedure
16677>>>>>>>>>
16677>>>>>>>>>    Function ComIcons Returns Variant
16679>>>>>>>>>        Variant retVal
16679>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
16680>>>>>>>>>        Function_Return retVal
16681>>>>>>>>>    End_Function
16682>>>>>>>>>
16682>>>>>>>>>    Procedure Set ComIcons Variant value
16684>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
16685>>>>>>>>>    End_Procedure
16686>>>>>>>>>
16686>>>>>>>>>    Function ComScaleMode Returns XTPScaleMode
16688>>>>>>>>>        XTPScaleMode retVal
16688>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
16689>>>>>>>>>        Function_Return retVal
16690>>>>>>>>>    End_Function
16691>>>>>>>>>
16691>>>>>>>>>    Procedure Set ComScaleMode XTPScaleMode value
16693>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
16694>>>>>>>>>    End_Procedure
16695>>>>>>>>>
16695>>>>>>>>>    Function ComRightToLeft Returns Boolean
16697>>>>>>>>>        Boolean retVal
16697>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to retVal
16698>>>>>>>>>        Function_Return retVal
16699>>>>>>>>>    End_Function
16700>>>>>>>>>
16700>>>>>>>>>    Procedure Set ComRightToLeft Boolean value
16702>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to value
16703>>>>>>>>>    End_Procedure
16704>>>>>>>>>
16704>>>>>>>>>    Function ComIsAllCaps Returns Boolean
16706>>>>>>>>>        Boolean retVal
16706>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_BOOL to retVal
16707>>>>>>>>>        Function_Return retVal
16708>>>>>>>>>    End_Function
16709>>>>>>>>>
16709>>>>>>>>>    Procedure Set ComIsAllCaps Boolean value
16711>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_BOOL to value
16712>>>>>>>>>    End_Procedure
16713>>>>>>>>>
16713>>>>>>>>>    Function ComIsAllowFrameTransparency Returns Boolean
16715>>>>>>>>>        Boolean retVal
16715>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_BOOL to retVal
16716>>>>>>>>>        Function_Return retVal
16717>>>>>>>>>    End_Function
16718>>>>>>>>>
16718>>>>>>>>>    Procedure Set ComIsAllowFrameTransparency Boolean value
16720>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_BOOL to value
16721>>>>>>>>>    End_Procedure
16722>>>>>>>>>
16722>>>>>>>>>    Function ComFontHeight Returns Integer
16724>>>>>>>>>        Integer retVal
16724>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 73 OLE_VT_I4 to retVal
16725>>>>>>>>>        Function_Return retVal
16726>>>>>>>>>    End_Function
16727>>>>>>>>>
16727>>>>>>>>>    Procedure Set ComFontHeight Integer value
16729>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 73 OLE_VT_I4 to value
16730>>>>>>>>>    End_Procedure
16731>>>>>>>>>
16731>>>>>>>>>    Function ComReCreateReparented Returns Boolean
16733>>>>>>>>>        Boolean retVal
16733>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
16734>>>>>>>>>        Function_Return retVal
16735>>>>>>>>>    End_Function
16736>>>>>>>>>
16736>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
16738>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
16739>>>>>>>>>    End_Procedure
16740>>>>>>>>>
16740>>>>>>>>>    Function ComCount Returns Integer
16742>>>>>>>>>        Handle hDispatchDriver
16742>>>>>>>>>        Integer retVal
16742>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16743>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
16744>>>>>>>>>        Function_Return retVal
16745>>>>>>>>>    End_Function
16746>>>>>>>>>
16746>>>>>>>>>    // Returns a specific item.
16746>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
16748>>>>>>>>>        Handle hDispatchDriver
16748>>>>>>>>>        Variant retVal
16748>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16749>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16750>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
16751>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
16752>>>>>>>>>        Function_Return retVal
16753>>>>>>>>>    End_Function
16754>>>>>>>>>
16754>>>>>>>>>    Function Com_NewEnum Returns Variant
16756>>>>>>>>>        Handle hDispatchDriver
16756>>>>>>>>>        Variant retVal
16756>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16757>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
16758>>>>>>>>>        Function_Return retVal
16759>>>>>>>>>    End_Function
16760>>>>>>>>>
16760>>>>>>>>>    Function ComAdd String llName XTPBarPosition llPosition Returns Variant
16762>>>>>>>>>        Handle hDispatchDriver
16762>>>>>>>>>        Variant retVal
16762>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16763>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16764>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
16765>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
16766>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
16767>>>>>>>>>        Function_Return retVal
16768>>>>>>>>>    End_Function
16769>>>>>>>>>
16769>>>>>>>>>    Procedure ComAddImageList Variant llImageList
16771>>>>>>>>>        Handle hDispatchDriver
16771>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16772>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16773>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llImageList
16774>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
16775>>>>>>>>>    End_Procedure
16776>>>>>>>>>
16776>>>>>>>>>    Function ComActiveMenuBar Returns Variant
16778>>>>>>>>>        Handle hDispatchDriver
16778>>>>>>>>>        Variant retVal
16778>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16779>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
16780>>>>>>>>>        Function_Return retVal
16781>>>>>>>>>    End_Function
16782>>>>>>>>>
16782>>>>>>>>>    Procedure ComGetClientRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
16784>>>>>>>>>        Handle hDispatchDriver
16784>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16785>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16786>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
16787>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
16788>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
16789>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
16790>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
16791>>>>>>>>>    End_Procedure
16792>>>>>>>>>
16792>>>>>>>>>    Procedure ComRecalcLayout
16794>>>>>>>>>        Handle hDispatchDriver
16794>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16795>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
16796>>>>>>>>>    End_Procedure
16797>>>>>>>>>
16797>>>>>>>>>    Function ComKeyBindings Returns Variant
16799>>>>>>>>>        Handle hDispatchDriver
16799>>>>>>>>>        Variant retVal
16799>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16800>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_DISPATCH to retVal
16801>>>>>>>>>        Function_Return retVal
16802>>>>>>>>>    End_Function
16803>>>>>>>>>
16803>>>>>>>>>    Procedure ComAddIconHandle Longptr llIcon Integer llCommand Integer llimageState Boolean llAlpha
16805>>>>>>>>>        Handle hDispatchDriver
16805>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16806>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16807>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llIcon
16808>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
16809>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
16810>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llAlpha
16811>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
16812>>>>>>>>>    End_Procedure
16813>>>>>>>>>
16813>>>>>>>>>    Function ComOptions Returns Variant
16815>>>>>>>>>        Handle hDispatchDriver
16815>>>>>>>>>        Variant retVal
16815>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16816>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
16817>>>>>>>>>        Function_Return retVal
16818>>>>>>>>>    End_Function
16819>>>>>>>>>
16819>>>>>>>>>    Procedure ComSaveCommandBars Variant llRegistryKey Variant llAppName Variant llSection
16821>>>>>>>>>        Handle hDispatchDriver
16821>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16822>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
16823>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRegistryKey
16824>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llAppName
16825>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSection
16826>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
16827>>>>>>>>>    End_Procedure
16828>>>>>>>>>
16828>>>>>>>>>    Procedure ComLoadCommandBars Variant llRegistryKey Variant llAppName Variant llSection
16830>>>>>>>>>        Handle hDispatchDriver
16830>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16831>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
16832>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRegistryKey
16833>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llAppName
16834>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSection
16835>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
16836>>>>>>>>>    End_Procedure
16837>>>>>>>>>
16837>>>>>>>>>    Procedure ComLoadDesignerBars Variant llFileNameOrResource Variant llInstance
16839>>>>>>>>>        Handle hDispatchDriver
16839>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16840>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16841>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFileNameOrResource
16842>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llInstance
16843>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
16844>>>>>>>>>    End_Procedure
16845>>>>>>>>>
16845>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
16847>>>>>>>>>        Handle hDispatchDriver
16847>>>>>>>>>        Variant retVal
16847>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16848>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16849>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
16850>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
16851>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
16852>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
16853>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
16854>>>>>>>>>        Function_Return retVal
16855>>>>>>>>>    End_Function
16856>>>>>>>>>
16856>>>>>>>>>    Procedure ComAboutBox
16858>>>>>>>>>        Handle hDispatchDriver
16858>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16859>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
16860>>>>>>>>>    End_Procedure
16861>>>>>>>>>
16861>>>>>>>>>    Procedure ComDockToolBar Variant llToolBar Integer llx Integer lly XTPBarPosition llPosition
16863>>>>>>>>>        Handle hDispatchDriver
16863>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16864>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16865>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llToolBar
16866>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
16867>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
16868>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
16869>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
16870>>>>>>>>>    End_Procedure
16871>>>>>>>>>
16871>>>>>>>>>    Function ComGetSpecialColor XTPColorManagerColor llIndex Returns OLE_COLOR
16873>>>>>>>>>        Handle hDispatchDriver
16873>>>>>>>>>        OLE_COLOR retVal
16873>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16874>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16875>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
16876>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 19 OLE_VT_I4 to retVal
16877>>>>>>>>>        Function_Return retVal
16878>>>>>>>>>    End_Function
16879>>>>>>>>>
16879>>>>>>>>>    Function ComShowTabWorkspace Boolean llShow Returns Variant
16881>>>>>>>>>        Handle hDispatchDriver
16881>>>>>>>>>        Variant retVal
16881>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16882>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16883>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShow
16884>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
16885>>>>>>>>>        Function_Return retVal
16886>>>>>>>>>    End_Function
16887>>>>>>>>>
16887>>>>>>>>>    Procedure ComMoveAlignedControl Variant llControl Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
16889>>>>>>>>>        Handle hDispatchDriver
16889>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16890>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
16891>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llControl
16892>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
16893>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
16894>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
16895>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
16896>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
16897>>>>>>>>>    End_Procedure
16898>>>>>>>>>
16898>>>>>>>>>    Function ComTabWorkspace Returns Variant
16900>>>>>>>>>        Handle hDispatchDriver
16900>>>>>>>>>        Variant retVal
16900>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16901>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 22 OLE_VT_DISPATCH to retVal
16902>>>>>>>>>        Function_Return retVal
16903>>>>>>>>>    End_Function
16904>>>>>>>>>
16904>>>>>>>>>    Procedure ComLoadStateFromString String llProfile Boolean llRestoreControls Boolean llRestoreOptions Boolean llSilent
16906>>>>>>>>>        Handle hDispatchDriver
16906>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16907>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
16908>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
16909>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRestoreControls
16910>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRestoreOptions
16911>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSilent
16912>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
16913>>>>>>>>>    End_Procedure
16914>>>>>>>>>
16914>>>>>>>>>    Function ComSaveStateToString Boolean llSaveControls Boolean llSaveOnlyCustomized Boolean llSaveOptions Returns String
16916>>>>>>>>>        Handle hDispatchDriver
16916>>>>>>>>>        String retVal
16916>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16917>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
16918>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveControls
16919>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveOnlyCustomized
16920>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveOptions
16921>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 24 OLE_VT_BSTR to retVal
16922>>>>>>>>>        Function_Return retVal
16923>>>>>>>>>    End_Function
16924>>>>>>>>>
16924>>>>>>>>>    Function ComStatusBar Returns Variant
16926>>>>>>>>>        Handle hDispatchDriver
16926>>>>>>>>>        Variant retVal
16926>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16927>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 25 OLE_VT_DISPATCH to retVal
16928>>>>>>>>>        Function_Return retVal
16929>>>>>>>>>    End_Function
16930>>>>>>>>>
16930>>>>>>>>>    Function ComMessageBar Returns Variant
16932>>>>>>>>>        Handle hDispatchDriver
16932>>>>>>>>>        Variant retVal
16932>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16933>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 28 OLE_VT_DISPATCH to retVal
16934>>>>>>>>>        Function_Return retVal
16935>>>>>>>>>    End_Function
16936>>>>>>>>>
16936>>>>>>>>>    Procedure ComEnableCustomization Boolean llEnable
16938>>>>>>>>>        Handle hDispatchDriver
16938>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16939>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16940>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
16941>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 26 OLE_VT_VOID
16942>>>>>>>>>    End_Procedure
16943>>>>>>>>>
16943>>>>>>>>>    Function ComDesignerControls Returns Variant
16945>>>>>>>>>        Handle hDispatchDriver
16945>>>>>>>>>        Variant retVal
16945>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16946>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 27 OLE_VT_DISPATCH to retVal
16947>>>>>>>>>        Function_Return retVal
16948>>>>>>>>>    End_Function
16949>>>>>>>>>
16949>>>>>>>>>    Procedure ComEnableDefaultResetCustomizedToolbarChoice Boolean llEnable Boolean llDefaultYes
16951>>>>>>>>>        Handle hDispatchDriver
16951>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16952>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16953>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
16954>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llDefaultYes
16955>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 72 OLE_VT_VOID
16956>>>>>>>>>    End_Procedure
16957>>>>>>>>>
16957>>>>>>>>>    Function ComGetDispatch Returns Variant
16959>>>>>>>>>        Handle hDispatchDriver
16959>>>>>>>>>        Variant retVal
16959>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16960>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 31 OLE_VT_DISPATCH to retVal
16961>>>>>>>>>        Function_Return retVal
16962>>>>>>>>>    End_Function
16963>>>>>>>>>
16963>>>>>>>>>    Procedure ComSetMDIClient OLE_HANDLE llhWnd
16965>>>>>>>>>        Handle hDispatchDriver
16965>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16966>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
16967>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
16968>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
16969>>>>>>>>>    End_Procedure
16970>>>>>>>>>
16970>>>>>>>>>    Function ComGlobalSettings Returns Variant
16972>>>>>>>>>        Handle hDispatchDriver
16972>>>>>>>>>        Variant retVal
16972>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16973>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_DISPATCH to retVal
16974>>>>>>>>>        Function_Return retVal
16975>>>>>>>>>    End_Function
16976>>>>>>>>>
16976>>>>>>>>>    Procedure ComClosePopups
16978>>>>>>>>>        Handle hDispatchDriver
16978>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16979>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 34 OLE_VT_VOID
16980>>>>>>>>>    End_Procedure
16981>>>>>>>>>
16981>>>>>>>>>    Procedure ComSetSpecialColor XTPColorManagerColor llIndex OLE_COLOR llColor
16983>>>>>>>>>        Handle hDispatchDriver
16983>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16984>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16985>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
16986>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
16987>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
16988>>>>>>>>>    End_Procedure
16989>>>>>>>>>
16989>>>>>>>>>    Function ComAddDialogBar String llName XTPBarPosition llPosition Returns Variant
16991>>>>>>>>>        Handle hDispatchDriver
16991>>>>>>>>>        Variant retVal
16991>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
16992>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
16993>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
16994>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
16995>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 36 OLE_VT_DISPATCH to retVal
16996>>>>>>>>>        Function_Return retVal
16997>>>>>>>>>    End_Function
16998>>>>>>>>>
16998>>>>>>>>>    Procedure ComLoadStateFromXMLString String llProfile String llstate Variant llOptions
17000>>>>>>>>>        Handle hDispatchDriver
17000>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17001>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
17002>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
17003>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstate
17004>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
17005>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
17006>>>>>>>>>    End_Procedure
17007>>>>>>>>>
17007>>>>>>>>>    Function ComSaveStateToXMLString String llProfile Variant llOptions Returns String
17009>>>>>>>>>        Handle hDispatchDriver
17009>>>>>>>>>        String retVal
17009>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17010>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
17011>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
17012>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
17013>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 38 OLE_VT_BSTR to retVal
17014>>>>>>>>>        Function_Return retVal
17015>>>>>>>>>    End_Function
17016>>>>>>>>>
17016>>>>>>>>>    Function ComCreateStateOptions Returns Variant
17018>>>>>>>>>        Handle hDispatchDriver
17018>>>>>>>>>        Variant retVal
17018>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17019>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 39 OLE_VT_DISPATCH to retVal
17020>>>>>>>>>        Function_Return retVal
17021>>>>>>>>>    End_Function
17022>>>>>>>>>
17022>>>>>>>>>    Procedure ComDoPropExchange Variant llpPX Variant llOptions
17024>>>>>>>>>        Handle hDispatchDriver
17024>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17025>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
17026>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpPX
17027>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
17028>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 45 OLE_VT_VOID
17029>>>>>>>>>    End_Procedure
17030>>>>>>>>>
17030>>>>>>>>>    Function ComCustomizedControl Returns Variant
17032>>>>>>>>>        Handle hDispatchDriver
17032>>>>>>>>>        Variant retVal
17032>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17033>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_DISPATCH to retVal
17034>>>>>>>>>        Function_Return retVal
17035>>>>>>>>>    End_Function
17036>>>>>>>>>
17036>>>>>>>>>    // Deletes all of the toolbars
17036>>>>>>>>>    Procedure ComDeleteAll
17038>>>>>>>>>        Handle hDispatchDriver
17038>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17039>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 41 OLE_VT_VOID
17040>>>>>>>>>    End_Procedure
17041>>>>>>>>>
17041>>>>>>>>>    Function ComToolTipContext Returns Variant
17043>>>>>>>>>        Handle hDispatchDriver
17043>>>>>>>>>        Variant retVal
17043>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17044>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 42 OLE_VT_DISPATCH to retVal
17045>>>>>>>>>        Function_Return retVal
17046>>>>>>>>>    End_Function
17047>>>>>>>>>
17047>>>>>>>>>    Function ComTrackingMode Returns Boolean
17049>>>>>>>>>        Handle hDispatchDriver
17049>>>>>>>>>        Boolean retVal
17049>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17050>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_BOOL to retVal
17051>>>>>>>>>        Function_Return retVal
17052>>>>>>>>>    End_Function
17053>>>>>>>>>
17053>>>>>>>>>    Function ComFocusedCommandBar Returns Variant
17055>>>>>>>>>        Handle hDispatchDriver
17055>>>>>>>>>        Variant retVal
17055>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17056>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_DISPATCH to retVal
17057>>>>>>>>>        Function_Return retVal
17058>>>>>>>>>    End_Function
17059>>>>>>>>>
17059>>>>>>>>>    Function ComAddMenuBar String llName Returns Variant
17061>>>>>>>>>        Handle hDispatchDriver
17061>>>>>>>>>        Variant retVal
17061>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17062>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17063>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
17064>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 47 OLE_VT_DISPATCH to retVal
17065>>>>>>>>>        Function_Return retVal
17066>>>>>>>>>    End_Function
17067>>>>>>>>>
17067>>>>>>>>>    Function ComAddTabToolBar String llName Returns Variant
17069>>>>>>>>>        Handle hDispatchDriver
17069>>>>>>>>>        Variant retVal
17069>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17070>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17071>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
17072>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 48 OLE_VT_DISPATCH to retVal
17073>>>>>>>>>        Function_Return retVal
17074>>>>>>>>>    End_Function
17075>>>>>>>>>
17075>>>>>>>>>    Function ComAddRibbonBar String llName Returns Variant
17077>>>>>>>>>        Handle hDispatchDriver
17077>>>>>>>>>        Variant retVal
17077>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17078>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17079>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
17080>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 49 OLE_VT_DISPATCH to retVal
17081>>>>>>>>>        Function_Return retVal
17082>>>>>>>>>    End_Function
17083>>>>>>>>>
17083>>>>>>>>>    Procedure ComAttachToWindow OLE_HANDLE llhWnd
17085>>>>>>>>>        Handle hDispatchDriver
17085>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17086>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17087>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17088>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 50 OLE_VT_VOID
17089>>>>>>>>>    End_Procedure
17090>>>>>>>>>
17090>>>>>>>>>    Procedure ComShowCustomizeDialog Integer llActiveTab
17092>>>>>>>>>        Handle hDispatchDriver
17092>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17093>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17094>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llActiveTab
17095>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 51 OLE_VT_VOID
17096>>>>>>>>>    End_Procedure
17097>>>>>>>>>
17097>>>>>>>>>    Procedure ComEnableOffice2007Frame Boolean llEnable
17099>>>>>>>>>        Handle hDispatchDriver
17099>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17100>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17101>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
17102>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 52 OLE_VT_VOID
17103>>>>>>>>>    End_Procedure
17104>>>>>>>>>
17104>>>>>>>>>    Procedure ComEnableFrameTheme Boolean llEnable
17106>>>>>>>>>        Handle hDispatchDriver
17106>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17107>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17108>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
17109>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 90 OLE_VT_VOID
17110>>>>>>>>>    End_Procedure
17111>>>>>>>>>
17111>>>>>>>>>    Procedure ComEnableActions
17113>>>>>>>>>        Handle hDispatchDriver
17113>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17114>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 53 OLE_VT_VOID
17115>>>>>>>>>    End_Procedure
17116>>>>>>>>>
17116>>>>>>>>>    Function ComActions Returns Variant
17118>>>>>>>>>        Handle hDispatchDriver
17118>>>>>>>>>        Variant retVal
17118>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17119>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 54 OLE_VT_DISPATCH to retVal
17120>>>>>>>>>        Function_Return retVal
17121>>>>>>>>>    End_Function
17122>>>>>>>>>
17122>>>>>>>>>    Function ComPaintManager Returns Variant
17124>>>>>>>>>        Handle hDispatchDriver
17124>>>>>>>>>        Variant retVal
17124>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17125>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 55 OLE_VT_DISPATCH to retVal
17126>>>>>>>>>        Function_Return retVal
17127>>>>>>>>>    End_Function
17128>>>>>>>>>
17128>>>>>>>>>    Function ComCreateGalleryItems Integer llId Returns Variant
17130>>>>>>>>>        Handle hDispatchDriver
17130>>>>>>>>>        Variant retVal
17130>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17131>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17132>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17133>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 56 OLE_VT_DISPATCH to retVal
17134>>>>>>>>>        Function_Return retVal
17135>>>>>>>>>    End_Function
17136>>>>>>>>>
17136>>>>>>>>>    Procedure ComEnableOffice2007FrameHandle OLE_HANDLE llhWnd
17138>>>>>>>>>        Handle hDispatchDriver
17138>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17139>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17140>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17141>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 57 OLE_VT_VOID
17142>>>>>>>>>    End_Procedure
17143>>>>>>>>>
17143>>>>>>>>>    Procedure ComEnableFrameThemeHandle OLE_HANDLE llhWnd
17145>>>>>>>>>        Handle hDispatchDriver
17145>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17146>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17147>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17148>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 100 OLE_VT_VOID
17149>>>>>>>>>    End_Procedure
17150>>>>>>>>>
17150>>>>>>>>>    Function ComCreateCommandBarControl String llClassName Returns Variant
17152>>>>>>>>>        Handle hDispatchDriver
17152>>>>>>>>>        Variant retVal
17152>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17153>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17154>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
17155>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 58 OLE_VT_DISPATCH to retVal
17156>>>>>>>>>        Function_Return retVal
17157>>>>>>>>>    End_Function
17158>>>>>>>>>
17158>>>>>>>>>    Function ComCreateCommandBar String llClassName Returns Variant
17160>>>>>>>>>        Handle hDispatchDriver
17160>>>>>>>>>        Variant retVal
17160>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17161>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17162>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
17163>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 59 OLE_VT_DISPATCH to retVal
17164>>>>>>>>>        Function_Return retVal
17165>>>>>>>>>    End_Function
17166>>>>>>>>>
17166>>>>>>>>>    Function ComContextHelp Returns Integer
17168>>>>>>>>>        Handle hDispatchDriver
17168>>>>>>>>>        Integer retVal
17168>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17169>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 60 OLE_VT_I4 to retVal
17170>>>>>>>>>        Function_Return retVal
17171>>>>>>>>>    End_Function
17172>>>>>>>>>
17172>>>>>>>>>    Function ComContextMenus Returns Variant
17174>>>>>>>>>        Handle hDispatchDriver
17174>>>>>>>>>        Variant retVal
17174>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17175>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 61 OLE_VT_DISPATCH to retVal
17176>>>>>>>>>        Function_Return retVal
17177>>>>>>>>>    End_Function
17178>>>>>>>>>
17178>>>>>>>>>    Procedure ComOLEDrag
17180>>>>>>>>>        Handle hDispatchDriver
17180>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17181>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 62 OLE_VT_VOID
17182>>>>>>>>>    End_Procedure
17183>>>>>>>>>
17183>>>>>>>>>    Function ComAddMiniToolBar String llName Returns Variant
17185>>>>>>>>>        Handle hDispatchDriver
17185>>>>>>>>>        Variant retVal
17185>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17186>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17187>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
17188>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 63 OLE_VT_DISPATCH to retVal
17189>>>>>>>>>        Function_Return retVal
17190>>>>>>>>>    End_Function
17191>>>>>>>>>
17191>>>>>>>>>    Function ComRecentFileList Returns Variant
17193>>>>>>>>>        Handle hDispatchDriver
17193>>>>>>>>>        Variant retVal
17193>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17194>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 64 OLE_VT_DISPATCH to retVal
17195>>>>>>>>>        Function_Return retVal
17196>>>>>>>>>    End_Function
17197>>>>>>>>>
17197>>>>>>>>>    Procedure ComDisableOffice2007FrameHandle OLE_HANDLE llhWnd
17199>>>>>>>>>        Handle hDispatchDriver
17199>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17200>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17201>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17202>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 65 OLE_VT_VOID
17203>>>>>>>>>    End_Procedure
17204>>>>>>>>>
17204>>>>>>>>>    Procedure ComDisableFrameThemeHandle OLE_HANDLE llhWnd
17206>>>>>>>>>        Handle hDispatchDriver
17206>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17207>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17208>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17209>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 110 OLE_VT_VOID
17210>>>>>>>>>    End_Procedure
17211>>>>>>>>>
17211>>>>>>>>>    Procedure ComAddCustomBar Variant llCommandBar String llName XTPBarPosition llPosition
17213>>>>>>>>>        Handle hDispatchDriver
17213>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17214>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
17215>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llCommandBar
17216>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
17217>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
17218>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 66 OLE_VT_VOID
17219>>>>>>>>>    End_Procedure
17220>>>>>>>>>
17220>>>>>>>>>    Procedure ComEnableToolbarComposition Boolean llEnable
17222>>>>>>>>>        Handle hDispatchDriver
17222>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17223>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17224>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
17225>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 67 OLE_VT_VOID
17226>>>>>>>>>    End_Procedure
17227>>>>>>>>>
17227>>>>>>>>>    Procedure ComSetAllCaps Boolean llSetAllCaps
17229>>>>>>>>>        Handle hDispatchDriver
17229>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17230>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17231>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllCaps
17232>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 68 OLE_VT_VOID
17233>>>>>>>>>    End_Procedure
17234>>>>>>>>>
17234>>>>>>>>>    Procedure ComAllowFrameTransparency Boolean llSetAllowTransparency
17236>>>>>>>>>        Handle hDispatchDriver
17236>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17237>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17238>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllowTransparency
17239>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 70 OLE_VT_VOID
17240>>>>>>>>>    End_Procedure
17241>>>>>>>>>
17241>>>>>>>>>    Function ComSetOfficeSetBackImage XTPBackImage llBackImage Returns Boolean
17243>>>>>>>>>        Handle hDispatchDriver
17243>>>>>>>>>        Boolean retVal
17243>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17244>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17245>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBackImage
17246>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 80 OLE_VT_BOOL to retVal
17247>>>>>>>>>        Function_Return retVal
17248>>>>>>>>>    End_Function
17249>>>>>>>>>End_Class
17250>>>>>>>>>
17250>>>>>>>>>// CLSID: {C0DE2200-1D1A-4AFA-8DFF-8798A2181226}
17250>>>>>>>>>// Event interface for CommandBars Control
17250>>>>>>>>>Class cCJ_DCommandBarsEvents is a Mixin
17251>>>>>>>>>
17251>>>>>>>>>    Procedure OnComExecute Variant llControl
17253>>>>>>>>>    End_Procedure
17254>>>>>>>>>
17254>>>>>>>>>//    { MethodType=Event }
17254>>>>>>>>>//    Procedure OnComUpdate Variant llControl
17254>>>>>>>>>//    End_Procedure
17254>>>>>>>>>
17254>>>>>>>>>    Procedure OnComResize
17256>>>>>>>>>    End_Procedure
17257>>>>>>>>>
17257>>>>>>>>>    Procedure OnComGetClientBordersWidth Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
17259>>>>>>>>>    End_Procedure
17260>>>>>>>>>
17260>>>>>>>>>    Procedure OnComControlSelected Variant llControl
17262>>>>>>>>>    End_Procedure
17263>>>>>>>>>
17263>>>>>>>>>    Procedure OnComInitCommandsPopup Variant llCommandBar
17265>>>>>>>>>    End_Procedure
17266>>>>>>>>>
17266>>>>>>>>>    Procedure OnComResizeClient Integer llLeft Integer llTop Integer llRight Integer llBottom
17268>>>>>>>>>    End_Procedure
17269>>>>>>>>>
17269>>>>>>>>>    Procedure OnComSpecialColorChanged
17271>>>>>>>>>    End_Procedure
17272>>>>>>>>>
17272>>>>>>>>>    Procedure OnComRepositionAlignedControls Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
17274>>>>>>>>>    End_Procedure
17275>>>>>>>>>
17275>>>>>>>>>    Procedure OnComCustomization Variant llOptions
17277>>>>>>>>>    End_Procedure
17278>>>>>>>>>
17278>>>>>>>>>    Procedure OnComToolBarVisibleChanged Variant llToolBar
17280>>>>>>>>>    End_Procedure
17281>>>>>>>>>
17281>>>>>>>>>    Procedure OnComControlRButtonUp Variant llControl
17283>>>>>>>>>    End_Procedure
17284>>>>>>>>>
17284>>>>>>>>>    Procedure OnComCustomizationDone
17286>>>>>>>>>    End_Procedure
17287>>>>>>>>>
17287>>>>>>>>>    Procedure OnComCommandBarKeyDown Variant llCommandBar Integer ByRef llKeyCode Short llShift
17289>>>>>>>>>    End_Procedure
17290>>>>>>>>>
17290>>>>>>>>>    Procedure OnComToolBarContextMenu Variant llToolBar Variant llContextMenu
17292>>>>>>>>>    End_Procedure
17293>>>>>>>>>
17293>>>>>>>>>    Procedure OnComTrackingModeChanged Variant llCommandBar Boolean llMode
17295>>>>>>>>>    End_Procedure
17296>>>>>>>>>
17296>>>>>>>>>    Procedure OnComCustomizationResetToolBar Variant llToolBar
17298>>>>>>>>>    End_Procedure
17299>>>>>>>>>
17299>>>>>>>>>    Procedure OnComCustomizationAddToolBar Variant llToolBar
17301>>>>>>>>>    End_Procedure
17302>>>>>>>>>
17302>>>>>>>>>    Procedure OnComCustomizationDeleteToolBar Variant llToolBar
17304>>>>>>>>>    End_Procedure
17305>>>>>>>>>
17305>>>>>>>>>    Procedure OnComControlNotify Variant llControl Integer llCode Variant llNotifyData Variant llHandled
17307>>>>>>>>>    End_Procedure
17308>>>>>>>>>
17308>>>>>>>>>    Procedure OnComGetActiveDocumentID Integer ByRef llId
17310>>>>>>>>>    End_Procedure
17311>>>>>>>>>
17311>>>>>>>>>    Procedure OnComCustomizationResetAll
17313>>>>>>>>>    End_Procedure
17314>>>>>>>>>
17314>>>>>>>>>    Procedure OnComMessageBarClosed Variant llMessageBar
17316>>>>>>>>>    End_Procedure
17317>>>>>>>>>
17317>>>>>>>>>    Procedure OnComOLEStartDrag Variant llData Integer ByRef llAllowedEffects
17319>>>>>>>>>    End_Procedure
17320>>>>>>>>>
17320>>>>>>>>>    Procedure OnComOLECompleteDrag Integer ByRef llEffect
17322>>>>>>>>>    End_Procedure
17323>>>>>>>>>
17323>>>>>>>>>    Procedure OnComReCreated
17325>>>>>>>>>    End_Procedure
17326>>>>>>>>>
17326>>>>>>>>>    Procedure RegisterComEvents
17328>>>>>>>>>        Send RegisterComEvent 1 msg_OnComExecute
17329>>>>>>>>>//        Send RegisterComEvent 2 msg_OnComUpdate
17329>>>>>>>>>        Send RegisterComEvent 3 msg_OnComResize
17330>>>>>>>>>        Send RegisterComEvent 4 msg_OnComGetClientBordersWidth
17331>>>>>>>>>        Send RegisterComEvent 5 msg_OnComControlSelected
17332>>>>>>>>>        Send RegisterComEvent 6 msg_OnComInitCommandsPopup
17333>>>>>>>>>        Send RegisterComEvent 7 msg_OnComResizeClient
17334>>>>>>>>>        Send RegisterComEvent 8 msg_OnComSpecialColorChanged
17335>>>>>>>>>        Send RegisterComEvent 9 msg_OnComRepositionAlignedControls
17336>>>>>>>>>        Send RegisterComEvent 10 msg_OnComCustomization
17337>>>>>>>>>        Send RegisterComEvent 11 msg_OnComToolBarVisibleChanged
17338>>>>>>>>>        Send RegisterComEvent 12 msg_OnComControlRButtonUp
17339>>>>>>>>>        Send RegisterComEvent 13 msg_OnComCustomizationDone
17340>>>>>>>>>        Send RegisterComEvent -602 msg_OnComCommandBarKeyDown
17341>>>>>>>>>        Send RegisterComEvent 14 msg_OnComToolBarContextMenu
17342>>>>>>>>>        Send RegisterComEvent 15 msg_OnComTrackingModeChanged
17343>>>>>>>>>        Send RegisterComEvent 16 msg_OnComCustomizationResetToolBar
17344>>>>>>>>>        Send RegisterComEvent 17 msg_OnComCustomizationAddToolBar
17345>>>>>>>>>        Send RegisterComEvent 18 msg_OnComCustomizationDeleteToolBar
17346>>>>>>>>>        Send RegisterComEvent 19 msg_OnComControlNotify
17347>>>>>>>>>        Send RegisterComEvent 20 msg_OnComGetActiveDocumentID
17348>>>>>>>>>        Send RegisterComEvent 21 msg_OnComCustomizationResetAll
17349>>>>>>>>>        Send RegisterComEvent 22 msg_OnComMessageBarClosed
17350>>>>>>>>>        Send RegisterComEvent 303 msg_OnComOLEStartDrag
17351>>>>>>>>>        Send RegisterComEvent 304 msg_OnComOLECompleteDrag
17352>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
17353>>>>>>>>>    End_Procedure
17354>>>>>>>>>End_Class
17355>>>>>>>>>
17355>>>>>>>>>// CoClass
17355>>>>>>>>>// ProgID: Codejock.CommandBars.22.0.0
17355>>>>>>>>>// CLSID: {C0DE2200-1C4D-4DE8-BC4A-5240617D4930}
17355>>>>>>>>>// Xtreme CommandBars Control
17355>>>>>>>>>Class cCJCommandBars is a cComActiveXControl
17356>>>>>>>>>    Import_Class_Protocol cCJ_DCommandBars
17357>>>>>>>>>    Import_Class_Protocol cCJ_DCommandBarsEvents
17358>>>>>>>>>
17358>>>>>>>>>    Procedure Construct_Object
17360>>>>>>>>>        Forward Send Construct_Object
17362>>>>>>>>>        Set psProgID to "{C0DE2200-1C4D-4DE8-BC4A-5240617D4930}"
17363>>>>>>>>>        Set psEventId to "{C0DE2200-1D1A-4AFA-8DFF-8798A2181226}"
17364>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2022 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v22.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
17365>>>>>>>>>        Set peAutoCreate to acAutoCreate
17366>>>>>>>>>    End_Procedure
17367>>>>>>>>>End_Class
17368>>>>>>>>>
17368>>>>>>>>>// CLSID: {C0DE2200-D68C-4339-A284-4C7DB1FB2903}
17368>>>>>>>>>Class cCJIRibbonGroup is a Mixin
17369>>>>>>>>>
17369>>>>>>>>>    Function ComCaption Returns String
17371>>>>>>>>>        String retVal
17371>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BSTR to retVal
17372>>>>>>>>>        Function_Return retVal
17373>>>>>>>>>    End_Function
17374>>>>>>>>>
17374>>>>>>>>>    Procedure Set ComCaption String value
17376>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BSTR to value
17377>>>>>>>>>    End_Procedure
17378>>>>>>>>>
17378>>>>>>>>>    Function ComShowOptionButton Returns Boolean
17380>>>>>>>>>        Boolean retVal
17380>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
17381>>>>>>>>>        Function_Return retVal
17382>>>>>>>>>    End_Function
17383>>>>>>>>>
17383>>>>>>>>>    Procedure Set ComShowOptionButton Boolean value
17385>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
17386>>>>>>>>>    End_Procedure
17387>>>>>>>>>
17387>>>>>>>>>    Function ComId Returns Integer
17389>>>>>>>>>        Integer retVal
17389>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
17390>>>>>>>>>        Function_Return retVal
17391>>>>>>>>>    End_Function
17392>>>>>>>>>
17392>>>>>>>>>    Procedure Set ComId Integer value
17394>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
17395>>>>>>>>>    End_Procedure
17396>>>>>>>>>
17396>>>>>>>>>    Function ComIconId Returns Integer
17398>>>>>>>>>        Integer retVal
17398>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
17399>>>>>>>>>        Function_Return retVal
17400>>>>>>>>>    End_Function
17401>>>>>>>>>
17401>>>>>>>>>    Procedure Set ComIconId Integer value
17403>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
17404>>>>>>>>>    End_Procedure
17405>>>>>>>>>
17405>>>>>>>>>    Function ComVisible Returns Boolean
17407>>>>>>>>>        Boolean retVal
17407>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
17408>>>>>>>>>        Function_Return retVal
17409>>>>>>>>>    End_Function
17410>>>>>>>>>
17410>>>>>>>>>    Procedure Set ComVisible Boolean value
17412>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
17413>>>>>>>>>    End_Procedure
17414>>>>>>>>>
17414>>>>>>>>>    Function ComControlsGrouping Returns Boolean
17416>>>>>>>>>        Boolean retVal
17416>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
17417>>>>>>>>>        Function_Return retVal
17418>>>>>>>>>    End_Function
17419>>>>>>>>>
17419>>>>>>>>>    Procedure Set ComControlsGrouping Boolean value
17421>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
17422>>>>>>>>>    End_Procedure
17423>>>>>>>>>
17423>>>>>>>>>    Function ComControlsCentering Returns Boolean
17425>>>>>>>>>        Boolean retVal
17425>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
17426>>>>>>>>>        Function_Return retVal
17427>>>>>>>>>    End_Function
17428>>>>>>>>>
17428>>>>>>>>>    Procedure Set ComControlsCentering Boolean value
17430>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
17431>>>>>>>>>    End_Procedure
17432>>>>>>>>>
17432>>>>>>>>>    Function ComAllowReduce Returns Integer
17434>>>>>>>>>        Integer retVal
17434>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to retVal
17435>>>>>>>>>        Function_Return retVal
17436>>>>>>>>>    End_Function
17437>>>>>>>>>
17437>>>>>>>>>    Procedure Set ComAllowReduce Integer value
17439>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to value
17440>>>>>>>>>    End_Procedure
17441>>>>>>>>>
17441>>>>>>>>>    Function ComAutoArrangeEditCaption Returns Boolean
17443>>>>>>>>>        Boolean retVal
17443>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
17444>>>>>>>>>        Function_Return retVal
17445>>>>>>>>>    End_Function
17446>>>>>>>>>
17446>>>>>>>>>    Procedure Set ComAutoArrangeEditCaption Boolean value
17448>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
17449>>>>>>>>>    End_Procedure
17450>>>>>>>>>
17450>>>>>>>>>    Function ComRibbonBar Returns Variant
17452>>>>>>>>>        Handle hDispatchDriver
17452>>>>>>>>>        Variant retVal
17452>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17453>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
17454>>>>>>>>>        Function_Return retVal
17455>>>>>>>>>    End_Function
17456>>>>>>>>>
17456>>>>>>>>>    Function ComGroups Returns Variant
17458>>>>>>>>>        Handle hDispatchDriver
17458>>>>>>>>>        Variant retVal
17458>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17459>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_DISPATCH to retVal
17460>>>>>>>>>        Function_Return retVal
17461>>>>>>>>>    End_Function
17462>>>>>>>>>
17462>>>>>>>>>    // Gets the number of controls in the collection.
17462>>>>>>>>>    Function ComCount Returns Integer
17464>>>>>>>>>        Handle hDispatchDriver
17464>>>>>>>>>        Integer retVal
17464>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17465>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
17466>>>>>>>>>        Function_Return retVal
17467>>>>>>>>>    End_Function
17468>>>>>>>>>
17468>>>>>>>>>    // Gets an item from the collection by its index.
17468>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
17470>>>>>>>>>        Handle hDispatchDriver
17470>>>>>>>>>        Variant retVal
17470>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17471>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17472>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
17473>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
17474>>>>>>>>>        Function_Return retVal
17475>>>>>>>>>    End_Function
17476>>>>>>>>>
17476>>>>>>>>>    Function Com_NewEnum Returns Variant
17478>>>>>>>>>        Handle hDispatchDriver
17478>>>>>>>>>        Variant retVal
17478>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17479>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
17480>>>>>>>>>        Function_Return retVal
17481>>>>>>>>>    End_Function
17482>>>>>>>>>
17482>>>>>>>>>    // Adds a new command bar control to the collection.
17482>>>>>>>>>    Function ComAdd XTPControlType llType Integer llId String llCaption Variant llBefore Variant llTemporary Returns Variant
17484>>>>>>>>>        Handle hDispatchDriver
17484>>>>>>>>>        Variant retVal
17484>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17485>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
17486>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llType
17487>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17488>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
17489>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
17490>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llTemporary
17491>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
17492>>>>>>>>>        Function_Return retVal
17493>>>>>>>>>    End_Function
17494>>>>>>>>>
17494>>>>>>>>>    // Deletes all of the command bar controls from the collection
17494>>>>>>>>>    Procedure ComDeleteAll
17496>>>>>>>>>        Handle hDispatchDriver
17496>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17497>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
17498>>>>>>>>>    End_Procedure
17499>>>>>>>>>
17499>>>>>>>>>    Procedure ComDeleteAt Integer llIndex
17501>>>>>>>>>        Handle hDispatchDriver
17501>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17502>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17503>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
17504>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
17505>>>>>>>>>    End_Procedure
17506>>>>>>>>>
17506>>>>>>>>>    Function ComControlGroupPopup Returns Variant
17508>>>>>>>>>        Handle hDispatchDriver
17508>>>>>>>>>        Variant retVal
17508>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17509>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_DISPATCH to retVal
17510>>>>>>>>>        Function_Return retVal
17511>>>>>>>>>    End_Function
17512>>>>>>>>>
17512>>>>>>>>>    Function ComControlGroupOption Returns Variant
17514>>>>>>>>>        Handle hDispatchDriver
17514>>>>>>>>>        Variant retVal
17514>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17515>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_DISPATCH to retVal
17516>>>>>>>>>        Function_Return retVal
17517>>>>>>>>>    End_Function
17518>>>>>>>>>
17518>>>>>>>>>    Function ComIndex Returns Integer
17520>>>>>>>>>        Handle hDispatchDriver
17520>>>>>>>>>        Integer retVal
17520>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17521>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_I4 to retVal
17522>>>>>>>>>        Function_Return retVal
17523>>>>>>>>>    End_Function
17524>>>>>>>>>
17524>>>>>>>>>    Procedure ComAddControl Variant llControl Variant llBefore
17526>>>>>>>>>        Handle hDispatchDriver
17526>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17527>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
17528>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llControl
17529>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
17530>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 108 OLE_VT_VOID
17531>>>>>>>>>    End_Procedure
17532>>>>>>>>>
17532>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
17534>>>>>>>>>        Handle hDispatchDriver
17534>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17535>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
17536>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
17537>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
17538>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
17539>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
17540>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 110 OLE_VT_VOID
17541>>>>>>>>>    End_Procedure
17542>>>>>>>>>End_Class
17543>>>>>>>>>
17543>>>>>>>>>// CoClass
17543>>>>>>>>>// CLSID: {C0DE2200-73F4-4849-A08C-8A64228AA2E3}
17543>>>>>>>>>Class cCJRibbonGroup is a cComAutomationObject
17544>>>>>>>>>    Import_Class_Protocol cCJIRibbonGroup
17545>>>>>>>>>
17545>>>>>>>>>    Procedure Construct_Object
17547>>>>>>>>>        Forward Send Construct_Object
17549>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17550>>>>>>>>>    End_Procedure
17551>>>>>>>>>End_Class
17552>>>>>>>>>
17552>>>>>>>>>// CLSID: {C0DE2200-D3DB-49F4-AC22-14AA249772CB}
17552>>>>>>>>>Class cCJICustomizeOptions is a Mixin
17553>>>>>>>>>
17553>>>>>>>>>    Function ComShowKeyboardPage Returns Boolean
17555>>>>>>>>>        Boolean retVal
17555>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
17556>>>>>>>>>        Function_Return retVal
17557>>>>>>>>>    End_Function
17558>>>>>>>>>
17558>>>>>>>>>    Procedure Set ComShowKeyboardPage Boolean value
17560>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
17561>>>>>>>>>    End_Procedure
17562>>>>>>>>>
17562>>>>>>>>>    Function ComShowOptionsPage Returns Boolean
17564>>>>>>>>>        Boolean retVal
17564>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to retVal
17565>>>>>>>>>        Function_Return retVal
17566>>>>>>>>>    End_Function
17567>>>>>>>>>
17567>>>>>>>>>    Procedure Set ComShowOptionsPage Boolean value
17569>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to value
17570>>>>>>>>>    End_Procedure
17571>>>>>>>>>
17571>>>>>>>>>    Function ComShowRibbonQuickAccessPage Returns Boolean
17573>>>>>>>>>        Boolean retVal
17573>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
17574>>>>>>>>>        Function_Return retVal
17575>>>>>>>>>    End_Function
17576>>>>>>>>>
17576>>>>>>>>>    Procedure Set ComShowRibbonQuickAccessPage Boolean value
17578>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
17579>>>>>>>>>    End_Procedure
17580>>>>>>>>>
17580>>>>>>>>>    Function ComShowMenusPage Returns Boolean
17582>>>>>>>>>        Boolean retVal
17582>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
17583>>>>>>>>>        Function_Return retVal
17584>>>>>>>>>    End_Function
17585>>>>>>>>>
17585>>>>>>>>>    Procedure Set ComShowMenusPage Boolean value
17587>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
17588>>>>>>>>>    End_Procedure
17589>>>>>>>>>
17589>>>>>>>>>    Function ComShowToolbarsPage Returns Boolean
17591>>>>>>>>>        Boolean retVal
17591>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
17592>>>>>>>>>        Function_Return retVal
17593>>>>>>>>>    End_Function
17594>>>>>>>>>
17594>>>>>>>>>    Procedure Set ComShowToolbarsPage Boolean value
17596>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
17597>>>>>>>>>    End_Procedure
17598>>>>>>>>>
17598>>>>>>>>>    Function ComShowCommandsPage Returns Boolean
17600>>>>>>>>>        Boolean retVal
17600>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
17601>>>>>>>>>        Function_Return retVal
17602>>>>>>>>>    End_Function
17603>>>>>>>>>
17603>>>>>>>>>    Procedure Set ComShowCommandsPage Boolean value
17605>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
17606>>>>>>>>>    End_Procedure
17607>>>>>>>>>
17607>>>>>>>>>    Function ComAllowNewToolbars Returns Boolean
17609>>>>>>>>>        Boolean retVal
17609>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
17610>>>>>>>>>        Function_Return retVal
17611>>>>>>>>>    End_Function
17612>>>>>>>>>
17612>>>>>>>>>    Procedure Set ComAllowNewToolbars Boolean value
17614>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
17615>>>>>>>>>    End_Procedure
17616>>>>>>>>>
17616>>>>>>>>>    Function ComResizableSheet Returns Boolean
17618>>>>>>>>>        Boolean retVal
17618>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
17619>>>>>>>>>        Function_Return retVal
17620>>>>>>>>>    End_Function
17621>>>>>>>>>
17621>>>>>>>>>    Procedure Set ComResizableSheet Boolean value
17623>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
17624>>>>>>>>>    End_Procedure
17625>>>>>>>>>
17625>>>>>>>>>    Function ComShowRibbonCustomizePage Returns Boolean
17627>>>>>>>>>        Boolean retVal
17627>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
17628>>>>>>>>>        Function_Return retVal
17629>>>>>>>>>    End_Function
17630>>>>>>>>>
17630>>>>>>>>>    Procedure Set ComShowRibbonCustomizePage Boolean value
17632>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
17633>>>>>>>>>    End_Procedure
17634>>>>>>>>>
17634>>>>>>>>>    Function ComShowListNavigation Returns Boolean
17636>>>>>>>>>        Boolean retVal
17636>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
17637>>>>>>>>>        Function_Return retVal
17638>>>>>>>>>    End_Function
17639>>>>>>>>>
17639>>>>>>>>>    Procedure Set ComShowListNavigation Boolean value
17641>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
17642>>>>>>>>>    End_Procedure
17643>>>>>>>>>
17643>>>>>>>>>    Function ComCustomIcons Returns Variant
17645>>>>>>>>>        Handle hDispatchDriver
17645>>>>>>>>>        Variant retVal
17645>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17646>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_DISPATCH to retVal
17647>>>>>>>>>        Function_Return retVal
17648>>>>>>>>>    End_Function
17649>>>>>>>>>
17649>>>>>>>>>    Function ComContextMenu Returns Variant
17651>>>>>>>>>        Handle hDispatchDriver
17651>>>>>>>>>        Variant retVal
17651>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17652>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
17653>>>>>>>>>        Function_Return retVal
17654>>>>>>>>>    End_Function
17655>>>>>>>>>
17655>>>>>>>>>    Procedure ComAddPage Integer llnIndex OLE_HANDLE llhWnd String llCaption
17657>>>>>>>>>        Handle hDispatchDriver
17657>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17658>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
17659>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIndex
17660>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
17661>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
17662>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
17663>>>>>>>>>    End_Procedure
17664>>>>>>>>>End_Class
17665>>>>>>>>>
17665>>>>>>>>>// CoClass
17665>>>>>>>>>// CLSID: {C0DE2200-FD32-4169-88A0-04275EAF79C5}
17665>>>>>>>>>Class cCJCustomizeOptions is a cComAutomationObject
17666>>>>>>>>>    Import_Class_Protocol cCJICustomizeOptions
17667>>>>>>>>>
17667>>>>>>>>>    Procedure Construct_Object
17669>>>>>>>>>        Forward Send Construct_Object
17671>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17672>>>>>>>>>    End_Procedure
17673>>>>>>>>>End_Class
17674>>>>>>>>>
17674>>>>>>>>>// CLSID: {C0DE2200-AA66-4C26-8B79-FF0DD9DF0E68}
17674>>>>>>>>>Class cCJIStateOptions is a Mixin
17675>>>>>>>>>
17675>>>>>>>>>    Function ComSerializeControls Returns Boolean
17677>>>>>>>>>        Boolean retVal
17677>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
17678>>>>>>>>>        Function_Return retVal
17679>>>>>>>>>    End_Function
17680>>>>>>>>>
17680>>>>>>>>>    Procedure Set ComSerializeControls Boolean value
17682>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
17683>>>>>>>>>    End_Procedure
17684>>>>>>>>>
17684>>>>>>>>>    Function ComSaveOnlyCustomized Returns Boolean
17686>>>>>>>>>        Boolean retVal
17686>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to retVal
17687>>>>>>>>>        Function_Return retVal
17688>>>>>>>>>    End_Function
17689>>>>>>>>>
17689>>>>>>>>>    Procedure Set ComSaveOnlyCustomized Boolean value
17691>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to value
17692>>>>>>>>>    End_Procedure
17693>>>>>>>>>
17693>>>>>>>>>    Function ComLoadSilent Returns Boolean
17695>>>>>>>>>        Boolean retVal
17695>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
17696>>>>>>>>>        Function_Return retVal
17697>>>>>>>>>    End_Function
17698>>>>>>>>>
17698>>>>>>>>>    Procedure Set ComLoadSilent Boolean value
17700>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
17701>>>>>>>>>    End_Procedure
17702>>>>>>>>>
17702>>>>>>>>>    Function ComSaveOriginalControls Returns Boolean
17704>>>>>>>>>        Boolean retVal
17704>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
17705>>>>>>>>>        Function_Return retVal
17706>>>>>>>>>    End_Function
17707>>>>>>>>>
17707>>>>>>>>>    Procedure Set ComSaveOriginalControls Boolean value
17709>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
17710>>>>>>>>>    End_Procedure
17711>>>>>>>>>
17711>>>>>>>>>    Function ComSerializeOptions Returns Boolean
17713>>>>>>>>>        Boolean retVal
17713>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
17714>>>>>>>>>        Function_Return retVal
17715>>>>>>>>>    End_Function
17716>>>>>>>>>
17716>>>>>>>>>    Procedure Set ComSerializeOptions Boolean value
17718>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
17719>>>>>>>>>    End_Procedure
17720>>>>>>>>>
17720>>>>>>>>>    Function ComSerializeImages Returns Boolean
17722>>>>>>>>>        Boolean retVal
17722>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
17723>>>>>>>>>        Function_Return retVal
17724>>>>>>>>>    End_Function
17725>>>>>>>>>
17725>>>>>>>>>    Procedure Set ComSerializeImages Boolean value
17727>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
17728>>>>>>>>>    End_Procedure
17729>>>>>>>>>
17729>>>>>>>>>    Function ComSerializeLayout Returns Boolean
17731>>>>>>>>>        Boolean retVal
17731>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
17732>>>>>>>>>        Function_Return retVal
17733>>>>>>>>>    End_Function
17734>>>>>>>>>
17734>>>>>>>>>    Procedure Set ComSerializeLayout Boolean value
17736>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
17737>>>>>>>>>    End_Procedure
17738>>>>>>>>>
17738>>>>>>>>>    Function ComSerializeDesignerControls Returns Boolean
17740>>>>>>>>>        Boolean retVal
17740>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
17741>>>>>>>>>        Function_Return retVal
17742>>>>>>>>>    End_Function
17743>>>>>>>>>
17743>>>>>>>>>    Procedure Set ComSerializeDesignerControls Boolean value
17745>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
17746>>>>>>>>>    End_Procedure
17747>>>>>>>>>
17747>>>>>>>>>    Function ComSerializeActions Returns Boolean
17749>>>>>>>>>        Boolean retVal
17749>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
17750>>>>>>>>>        Function_Return retVal
17751>>>>>>>>>    End_Function
17752>>>>>>>>>
17752>>>>>>>>>    Procedure Set ComSerializeActions Boolean value
17754>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
17755>>>>>>>>>    End_Procedure
17756>>>>>>>>>End_Class
17757>>>>>>>>>
17757>>>>>>>>>// CoClass
17757>>>>>>>>>// CLSID: {C0DE2200-A205-49F6-975D-F02D82C565D1}
17757>>>>>>>>>Class cCJStateOptions is a cComAutomationObject
17758>>>>>>>>>    Import_Class_Protocol cCJIStateOptions
17759>>>>>>>>>
17759>>>>>>>>>    Procedure Construct_Object
17761>>>>>>>>>        Forward Send Construct_Object
17763>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17764>>>>>>>>>    End_Procedure
17765>>>>>>>>>End_Class
17766>>>>>>>>>
17766>>>>>>>>>// CLSID: {C0DE2200-DFBD-4175-90D5-D84AB2790950}
17766>>>>>>>>>Class cCJICommandBarAction is a Mixin
17767>>>>>>>>>
17767>>>>>>>>>    Function ComCaption Returns String
17769>>>>>>>>>        String retVal
17769>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
17770>>>>>>>>>        Function_Return retVal
17771>>>>>>>>>    End_Function
17772>>>>>>>>>
17772>>>>>>>>>    Procedure Set ComCaption String value
17774>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
17775>>>>>>>>>    End_Procedure
17776>>>>>>>>>
17776>>>>>>>>>    Function ComDescriptionText Returns String
17778>>>>>>>>>        String retVal
17778>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
17779>>>>>>>>>        Function_Return retVal
17780>>>>>>>>>    End_Function
17781>>>>>>>>>
17781>>>>>>>>>    Procedure Set ComDescriptionText String value
17783>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
17784>>>>>>>>>    End_Procedure
17785>>>>>>>>>
17785>>>>>>>>>    Function ComId Returns Integer
17787>>>>>>>>>        Integer retVal
17787>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
17788>>>>>>>>>        Function_Return retVal
17789>>>>>>>>>    End_Function
17790>>>>>>>>>
17790>>>>>>>>>    Procedure Set ComId Integer value
17792>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
17793>>>>>>>>>    End_Procedure
17794>>>>>>>>>
17794>>>>>>>>>    Function ComShortcutText Returns String
17796>>>>>>>>>        String retVal
17796>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
17797>>>>>>>>>        Function_Return retVal
17798>>>>>>>>>    End_Function
17799>>>>>>>>>
17799>>>>>>>>>    Procedure Set ComShortcutText String value
17801>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
17802>>>>>>>>>    End_Procedure
17803>>>>>>>>>
17803>>>>>>>>>    Function ComTooltipText Returns String
17805>>>>>>>>>        String retVal
17805>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
17806>>>>>>>>>        Function_Return retVal
17807>>>>>>>>>    End_Function
17808>>>>>>>>>
17808>>>>>>>>>    Procedure Set ComTooltipText String value
17810>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
17811>>>>>>>>>    End_Procedure
17812>>>>>>>>>
17812>>>>>>>>>    Function ComVisible Returns Boolean
17814>>>>>>>>>        Boolean retVal
17814>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
17815>>>>>>>>>        Function_Return retVal
17816>>>>>>>>>    End_Function
17817>>>>>>>>>
17817>>>>>>>>>    Procedure Set ComVisible Boolean value
17819>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
17820>>>>>>>>>    End_Procedure
17821>>>>>>>>>
17821>>>>>>>>>    Function ComEnabled Returns Boolean
17823>>>>>>>>>        Boolean retVal
17823>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
17824>>>>>>>>>        Function_Return retVal
17825>>>>>>>>>    End_Function
17826>>>>>>>>>
17826>>>>>>>>>    Procedure Set ComEnabled Boolean value
17828>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
17829>>>>>>>>>    End_Procedure
17830>>>>>>>>>
17830>>>>>>>>>    Function ComChecked Returns Boolean
17832>>>>>>>>>        Boolean retVal
17832>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
17833>>>>>>>>>        Function_Return retVal
17834>>>>>>>>>    End_Function
17835>>>>>>>>>
17835>>>>>>>>>    Procedure Set ComChecked Boolean value
17837>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
17838>>>>>>>>>    End_Procedure
17839>>>>>>>>>
17839>>>>>>>>>    Function ComIconId Returns Integer
17841>>>>>>>>>        Integer retVal
17841>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
17842>>>>>>>>>        Function_Return retVal
17843>>>>>>>>>    End_Function
17844>>>>>>>>>
17844>>>>>>>>>    Procedure Set ComIconId Integer value
17846>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
17847>>>>>>>>>    End_Procedure
17848>>>>>>>>>
17848>>>>>>>>>    Function ComCategory Returns String
17850>>>>>>>>>        String retVal
17850>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
17851>>>>>>>>>        Function_Return retVal
17852>>>>>>>>>    End_Function
17853>>>>>>>>>
17853>>>>>>>>>    Procedure Set ComCategory String value
17855>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
17856>>>>>>>>>    End_Procedure
17857>>>>>>>>>
17857>>>>>>>>>    Function ComTag Returns Variant
17859>>>>>>>>>        Variant retVal
17859>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_VARIANT to retVal
17860>>>>>>>>>        Function_Return retVal
17861>>>>>>>>>    End_Function
17862>>>>>>>>>
17862>>>>>>>>>    Procedure Set ComTag Variant value
17864>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_VARIANT to value
17865>>>>>>>>>    End_Procedure
17866>>>>>>>>>
17866>>>>>>>>>    Function ComEditHint Returns String
17868>>>>>>>>>        String retVal
17868>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 55 OLE_VT_BSTR to retVal
17869>>>>>>>>>        Function_Return retVal
17870>>>>>>>>>    End_Function
17871>>>>>>>>>
17871>>>>>>>>>    Procedure Set ComEditHint String value
17873>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 55 OLE_VT_BSTR to value
17874>>>>>>>>>    End_Procedure
17875>>>>>>>>>
17875>>>>>>>>>    Function ComKeyboardTip Returns String
17877>>>>>>>>>        String retVal
17877>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 56 OLE_VT_BSTR to retVal
17878>>>>>>>>>        Function_Return retVal
17879>>>>>>>>>    End_Function
17880>>>>>>>>>
17880>>>>>>>>>    Procedure Set ComKeyboardTip String value
17882>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 56 OLE_VT_BSTR to value
17883>>>>>>>>>    End_Procedure
17884>>>>>>>>>
17884>>>>>>>>>    Function ComKey Returns String
17886>>>>>>>>>        String retVal
17886>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 57 OLE_VT_BSTR to retVal
17887>>>>>>>>>        Function_Return retVal
17888>>>>>>>>>    End_Function
17889>>>>>>>>>
17889>>>>>>>>>    Procedure Set ComKey String value
17891>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 57 OLE_VT_BSTR to value
17892>>>>>>>>>    End_Procedure
17893>>>>>>>>>
17893>>>>>>>>>    Function ComCustomShortcutText Returns String
17895>>>>>>>>>        String retVal
17895>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 58 OLE_VT_BSTR to retVal
17896>>>>>>>>>        Function_Return retVal
17897>>>>>>>>>    End_Function
17898>>>>>>>>>
17898>>>>>>>>>    Procedure Set ComCustomShortcutText String value
17900>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 58 OLE_VT_BSTR to value
17901>>>>>>>>>    End_Procedure
17902>>>>>>>>>End_Class
17903>>>>>>>>>
17903>>>>>>>>>// CoClass
17903>>>>>>>>>// CLSID: {C0DE2200-61DB-4DC7-86B4-61B534FE96BA}
17903>>>>>>>>>Class cCJCommandBarAction is a cComAutomationObject
17904>>>>>>>>>    Import_Class_Protocol cCJICommandBarAction
17905>>>>>>>>>
17905>>>>>>>>>    Procedure Construct_Object
17907>>>>>>>>>        Forward Send Construct_Object
17909>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17910>>>>>>>>>    End_Procedure
17911>>>>>>>>>End_Class
17912>>>>>>>>>
17912>>>>>>>>>// CLSID: {C0DE2200-092D-462D-9934-277EAB35A27D}
17912>>>>>>>>>Class cCJICommandBarActions is a Mixin
17913>>>>>>>>>
17913>>>>>>>>>    // Gets the number of controls in the collection.
17913>>>>>>>>>    Function ComCount Returns Integer
17915>>>>>>>>>        Handle hDispatchDriver
17915>>>>>>>>>        Integer retVal
17915>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17916>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
17917>>>>>>>>>        Function_Return retVal
17918>>>>>>>>>    End_Function
17919>>>>>>>>>
17919>>>>>>>>>    // Gets an item from the collection by its index.
17919>>>>>>>>>    Function ComAction Integer llId Returns Variant
17921>>>>>>>>>        Handle hDispatchDriver
17921>>>>>>>>>        Variant retVal
17921>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17922>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17923>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17924>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
17925>>>>>>>>>        Function_Return retVal
17926>>>>>>>>>    End_Function
17927>>>>>>>>>
17927>>>>>>>>>    Function Com_NewEnum Returns Variant
17929>>>>>>>>>        Handle hDispatchDriver
17929>>>>>>>>>        Variant retVal
17929>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17930>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
17931>>>>>>>>>        Function_Return retVal
17932>>>>>>>>>    End_Function
17933>>>>>>>>>
17933>>>>>>>>>    // Adds a new command bar control to the collection.
17933>>>>>>>>>    Function ComAdd Integer llId String llCaption String llTooltipText String llDescriptionText String llCategory Returns Variant
17935>>>>>>>>>        Handle hDispatchDriver
17935>>>>>>>>>        Variant retVal
17935>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17936>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
17937>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17938>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
17939>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTooltipText
17940>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llDescriptionText
17941>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCategory
17942>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
17943>>>>>>>>>        Function_Return retVal
17944>>>>>>>>>    End_Function
17945>>>>>>>>>
17945>>>>>>>>>    Procedure ComDeleteAll
17947>>>>>>>>>        Handle hDispatchDriver
17947>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17948>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
17949>>>>>>>>>    End_Procedure
17950>>>>>>>>>
17950>>>>>>>>>    Procedure ComDelete Integer llId
17952>>>>>>>>>        Handle hDispatchDriver
17952>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
17953>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
17954>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
17955>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
17956>>>>>>>>>    End_Procedure
17957>>>>>>>>>End_Class
17958>>>>>>>>>
17958>>>>>>>>>// CoClass
17958>>>>>>>>>// CLSID: {C0DE2200-3543-4D3E-88F9-4F8822200142}
17958>>>>>>>>>Class cCJCommandBarActions is a cComAutomationObject
17959>>>>>>>>>    Import_Class_Protocol cCJICommandBarActions
17960>>>>>>>>>
17960>>>>>>>>>    Procedure Construct_Object
17962>>>>>>>>>        Forward Send Construct_Object
17964>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
17965>>>>>>>>>    End_Procedure
17966>>>>>>>>>End_Class
17967>>>>>>>>>
17967>>>>>>>>>// CLSID: {C0DE2200-9E07-4079-924A-4CB1C11FC700}
17967>>>>>>>>>Class cCJICommandBarControl is a Mixin
17968>>>>>>>>>
17968>>>>>>>>>    Function ComChecked Returns Boolean
17970>>>>>>>>>        Boolean retVal
17970>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
17971>>>>>>>>>        Function_Return retVal
17972>>>>>>>>>    End_Function
17973>>>>>>>>>
17973>>>>>>>>>    Procedure Set ComChecked Boolean value
17975>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
17976>>>>>>>>>    End_Procedure
17977>>>>>>>>>
17977>>>>>>>>>    Function ComBeginGroup Returns Boolean
17979>>>>>>>>>        Boolean retVal
17979>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
17980>>>>>>>>>        Function_Return retVal
17981>>>>>>>>>    End_Function
17982>>>>>>>>>
17982>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
17984>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
17985>>>>>>>>>    End_Procedure
17986>>>>>>>>>
17986>>>>>>>>>    Function ComCaption Returns String
17988>>>>>>>>>        String retVal
17988>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
17989>>>>>>>>>        Function_Return retVal
17990>>>>>>>>>    End_Function
17991>>>>>>>>>
17991>>>>>>>>>    Procedure Set ComCaption String value
17993>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
17994>>>>>>>>>    End_Procedure
17995>>>>>>>>>
17995>>>>>>>>>    Function ComDescriptionText Returns String
17997>>>>>>>>>        String retVal
17997>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
17998>>>>>>>>>        Function_Return retVal
17999>>>>>>>>>    End_Function
18000>>>>>>>>>
18000>>>>>>>>>    Procedure Set ComDescriptionText String value
18002>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
18003>>>>>>>>>    End_Procedure
18004>>>>>>>>>
18004>>>>>>>>>    Function ComId Returns Integer
18006>>>>>>>>>        Integer retVal
18006>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
18007>>>>>>>>>        Function_Return retVal
18008>>>>>>>>>    End_Function
18009>>>>>>>>>
18009>>>>>>>>>    Procedure Set ComId Integer value
18011>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
18012>>>>>>>>>    End_Procedure
18013>>>>>>>>>
18013>>>>>>>>>    Function ComParameter Returns String
18015>>>>>>>>>        String retVal
18015>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
18016>>>>>>>>>        Function_Return retVal
18017>>>>>>>>>    End_Function
18018>>>>>>>>>
18018>>>>>>>>>    Procedure Set ComParameter String value
18020>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
18021>>>>>>>>>    End_Procedure
18022>>>>>>>>>
18022>>>>>>>>>    Function ComShortcutText Returns String
18024>>>>>>>>>        String retVal
18024>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
18025>>>>>>>>>        Function_Return retVal
18026>>>>>>>>>    End_Function
18027>>>>>>>>>
18027>>>>>>>>>    Procedure Set ComShortcutText String value
18029>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
18030>>>>>>>>>    End_Procedure
18031>>>>>>>>>
18031>>>>>>>>>    Function ComCustomShortcutText Returns String
18033>>>>>>>>>        String retVal
18033>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
18034>>>>>>>>>        Function_Return retVal
18035>>>>>>>>>    End_Function
18036>>>>>>>>>
18036>>>>>>>>>    Procedure Set ComCustomShortcutText String value
18038>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
18039>>>>>>>>>    End_Procedure
18040>>>>>>>>>
18040>>>>>>>>>    Function ComTooltipText Returns String
18042>>>>>>>>>        String retVal
18042>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
18043>>>>>>>>>        Function_Return retVal
18044>>>>>>>>>    End_Function
18045>>>>>>>>>
18045>>>>>>>>>    Procedure Set ComTooltipText String value
18047>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
18048>>>>>>>>>    End_Procedure
18049>>>>>>>>>
18049>>>>>>>>>    Function ComVisible Returns Boolean
18051>>>>>>>>>        Boolean retVal
18051>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
18052>>>>>>>>>        Function_Return retVal
18053>>>>>>>>>    End_Function
18054>>>>>>>>>
18054>>>>>>>>>    Procedure Set ComVisible Boolean value
18056>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
18057>>>>>>>>>    End_Procedure
18058>>>>>>>>>
18058>>>>>>>>>    Function ComEnabled Returns Boolean
18060>>>>>>>>>        Boolean retVal
18060>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
18061>>>>>>>>>        Function_Return retVal
18062>>>>>>>>>    End_Function
18063>>>>>>>>>
18063>>>>>>>>>    Procedure Set ComEnabled Boolean value
18065>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
18066>>>>>>>>>    End_Procedure
18067>>>>>>>>>
18067>>>>>>>>>    Function ComIconId Returns Integer
18069>>>>>>>>>        Integer retVal
18069>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
18070>>>>>>>>>        Function_Return retVal
18071>>>>>>>>>    End_Function
18072>>>>>>>>>
18072>>>>>>>>>    Procedure Set ComIconId Integer value
18074>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
18075>>>>>>>>>    End_Procedure
18076>>>>>>>>>
18076>>>>>>>>>    Function ComDefaultItem Returns Boolean
18078>>>>>>>>>        Boolean retVal
18078>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
18079>>>>>>>>>        Function_Return retVal
18080>>>>>>>>>    End_Function
18081>>>>>>>>>
18081>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
18083>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
18084>>>>>>>>>    End_Procedure
18085>>>>>>>>>
18085>>>>>>>>>    Function ComFlags Returns XTPControlFlags
18087>>>>>>>>>        XTPControlFlags retVal
18087>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
18088>>>>>>>>>        Function_Return retVal
18089>>>>>>>>>    End_Function
18090>>>>>>>>>
18090>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
18092>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
18093>>>>>>>>>    End_Procedure
18094>>>>>>>>>
18094>>>>>>>>>    Function ComCategory Returns String
18096>>>>>>>>>        String retVal
18096>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
18097>>>>>>>>>        Function_Return retVal
18098>>>>>>>>>    End_Function
18099>>>>>>>>>
18099>>>>>>>>>    Procedure Set ComCategory String value
18101>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
18102>>>>>>>>>    End_Procedure
18103>>>>>>>>>
18103>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
18105>>>>>>>>>        XTPControlHideFlags retVal
18105>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
18106>>>>>>>>>        Function_Return retVal
18107>>>>>>>>>    End_Function
18108>>>>>>>>>
18108>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
18110>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
18111>>>>>>>>>    End_Procedure
18112>>>>>>>>>
18112>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
18114>>>>>>>>>        Boolean retVal
18114>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
18115>>>>>>>>>        Function_Return retVal
18116>>>>>>>>>    End_Function
18117>>>>>>>>>
18117>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
18119>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
18120>>>>>>>>>    End_Procedure
18121>>>>>>>>>
18121>>>>>>>>>    Function ComAction Returns Variant
18123>>>>>>>>>        Variant retVal
18123>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
18124>>>>>>>>>        Function_Return retVal
18125>>>>>>>>>    End_Function
18126>>>>>>>>>
18126>>>>>>>>>    Procedure Set ComAction Variant value
18128>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
18129>>>>>>>>>    End_Procedure
18130>>>>>>>>>
18130>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
18132>>>>>>>>>        Integer retVal
18132>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
18133>>>>>>>>>        Function_Return retVal
18134>>>>>>>>>    End_Function
18135>>>>>>>>>
18135>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
18137>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
18138>>>>>>>>>    End_Procedure
18139>>>>>>>>>
18139>>>>>>>>>    Function ComWidth Returns Integer
18141>>>>>>>>>        Integer retVal
18141>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
18142>>>>>>>>>        Function_Return retVal
18143>>>>>>>>>    End_Function
18144>>>>>>>>>
18144>>>>>>>>>    Procedure Set ComWidth Integer value
18146>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
18147>>>>>>>>>    End_Procedure
18148>>>>>>>>>
18148>>>>>>>>>    Function ComHeight Returns Integer
18150>>>>>>>>>        Integer retVal
18150>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
18151>>>>>>>>>        Function_Return retVal
18152>>>>>>>>>    End_Function
18153>>>>>>>>>
18153>>>>>>>>>    Procedure Set ComHeight Integer value
18155>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
18156>>>>>>>>>    End_Procedure
18157>>>>>>>>>
18157>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
18159>>>>>>>>>        XTPButtonStyle retVal
18159>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
18160>>>>>>>>>        Function_Return retVal
18161>>>>>>>>>    End_Function
18162>>>>>>>>>
18162>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
18164>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
18165>>>>>>>>>    End_Procedure
18166>>>>>>>>>
18166>>>>>>>>>    Function ComKeyboardTip Returns String
18168>>>>>>>>>        String retVal
18168>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
18169>>>>>>>>>        Function_Return retVal
18170>>>>>>>>>    End_Function
18171>>>>>>>>>
18171>>>>>>>>>    Procedure Set ComKeyboardTip String value
18173>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
18174>>>>>>>>>    End_Procedure
18175>>>>>>>>>
18175>>>>>>>>>    Function ComControls Returns Variant
18177>>>>>>>>>        Handle hDispatchDriver
18177>>>>>>>>>        Variant retVal
18177>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18178>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
18179>>>>>>>>>        Function_Return retVal
18180>>>>>>>>>    End_Function
18181>>>>>>>>>
18181>>>>>>>>>    Function ComParent Returns Variant
18183>>>>>>>>>        Handle hDispatchDriver
18183>>>>>>>>>        Variant retVal
18183>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18184>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
18185>>>>>>>>>        Function_Return retVal
18186>>>>>>>>>    End_Function
18187>>>>>>>>>
18187>>>>>>>>>    Function ComIndex Returns Integer
18189>>>>>>>>>        Handle hDispatchDriver
18189>>>>>>>>>        Integer retVal
18189>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18190>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
18191>>>>>>>>>        Function_Return retVal
18192>>>>>>>>>    End_Function
18193>>>>>>>>>
18193>>>>>>>>>    Function ComType Returns XTPControlType
18195>>>>>>>>>        Handle hDispatchDriver
18195>>>>>>>>>        XTPControlType retVal
18195>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18196>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
18197>>>>>>>>>        Function_Return retVal
18198>>>>>>>>>    End_Function
18199>>>>>>>>>
18199>>>>>>>>>    Procedure ComDelete
18201>>>>>>>>>        Handle hDispatchDriver
18201>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18202>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
18203>>>>>>>>>    End_Procedure
18204>>>>>>>>>
18204>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
18206>>>>>>>>>        Handle hDispatchDriver
18206>>>>>>>>>        Variant retVal
18206>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18207>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18208>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
18209>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
18210>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
18211>>>>>>>>>        Function_Return retVal
18212>>>>>>>>>    End_Function
18213>>>>>>>>>
18213>>>>>>>>>    Procedure ComSetFocus
18215>>>>>>>>>        Handle hDispatchDriver
18215>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18216>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
18217>>>>>>>>>    End_Procedure
18218>>>>>>>>>
18218>>>>>>>>>    Procedure ComExecute
18220>>>>>>>>>        Handle hDispatchDriver
18220>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18221>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
18222>>>>>>>>>    End_Procedure
18223>>>>>>>>>
18223>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
18225>>>>>>>>>        Handle hDispatchDriver
18225>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18226>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
18227>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
18228>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
18229>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
18230>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
18231>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
18232>>>>>>>>>    End_Procedure
18233>>>>>>>>>
18233>>>>>>>>>    Function ComRibbonGroup Returns Variant
18235>>>>>>>>>        Handle hDispatchDriver
18235>>>>>>>>>        Variant retVal
18235>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18236>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
18237>>>>>>>>>        Function_Return retVal
18238>>>>>>>>>    End_Function
18239>>>>>>>>>
18239>>>>>>>>>    Procedure ComReset
18241>>>>>>>>>        Handle hDispatchDriver
18241>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18242>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
18243>>>>>>>>>    End_Procedure
18244>>>>>>>>>
18244>>>>>>>>>    Function ComTop Returns Integer
18246>>>>>>>>>        Handle hDispatchDriver
18246>>>>>>>>>        Integer retVal
18246>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18247>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
18248>>>>>>>>>        Function_Return retVal
18249>>>>>>>>>    End_Function
18250>>>>>>>>>
18250>>>>>>>>>    Function ComLeft Returns Integer
18252>>>>>>>>>        Handle hDispatchDriver
18252>>>>>>>>>        Integer retVal
18252>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18253>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
18254>>>>>>>>>        Function_Return retVal
18255>>>>>>>>>    End_Function
18256>>>>>>>>>
18256>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
18258>>>>>>>>>        Handle hDispatchDriver
18258>>>>>>>>>        Variant retVal
18258>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18259>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
18260>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
18261>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
18262>>>>>>>>>        Function_Return retVal
18263>>>>>>>>>    End_Function
18264>>>>>>>>>
18264>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
18266>>>>>>>>>        Handle hDispatchDriver
18266>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18267>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18268>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
18269>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
18270>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
18271>>>>>>>>>    End_Procedure
18272>>>>>>>>>
18272>>>>>>>>>    Function ComCommandBar Returns Variant
18274>>>>>>>>>        Handle hDispatchDriver
18274>>>>>>>>>        Variant retVal
18274>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18275>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 50 OLE_VT_DISPATCH to retVal
18276>>>>>>>>>        Function_Return retVal
18277>>>>>>>>>    End_Function
18278>>>>>>>>>End_Class
18279>>>>>>>>>
18279>>>>>>>>>// CoClass
18279>>>>>>>>>// CLSID: {C0DE2200-C60A-4893-B9E5-CD2EABBCBFF7}
18279>>>>>>>>>Class cCJCommandBarControl is a cComAutomationObject
18280>>>>>>>>>    Import_Class_Protocol cCJICommandBarControl
18281>>>>>>>>>
18281>>>>>>>>>    Procedure Construct_Object
18283>>>>>>>>>        Forward Send Construct_Object
18285>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
18286>>>>>>>>>    End_Procedure
18287>>>>>>>>>End_Class
18288>>>>>>>>>
18288>>>>>>>>>// CLSID: {C0DE2200-1E0F-446D-B92B-BEDBEF77302F}
18288>>>>>>>>>Class cCJICommandBarButton is a Mixin
18289>>>>>>>>>
18289>>>>>>>>>    Function ComChecked Returns Boolean
18291>>>>>>>>>        Boolean retVal
18291>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
18292>>>>>>>>>        Function_Return retVal
18293>>>>>>>>>    End_Function
18294>>>>>>>>>
18294>>>>>>>>>    Procedure Set ComChecked Boolean value
18296>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
18297>>>>>>>>>    End_Procedure
18298>>>>>>>>>
18298>>>>>>>>>    Function ComBeginGroup Returns Boolean
18300>>>>>>>>>        Boolean retVal
18300>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
18301>>>>>>>>>        Function_Return retVal
18302>>>>>>>>>    End_Function
18303>>>>>>>>>
18303>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
18305>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
18306>>>>>>>>>    End_Procedure
18307>>>>>>>>>
18307>>>>>>>>>    Function ComCaption Returns String
18309>>>>>>>>>        String retVal
18309>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
18310>>>>>>>>>        Function_Return retVal
18311>>>>>>>>>    End_Function
18312>>>>>>>>>
18312>>>>>>>>>    Procedure Set ComCaption String value
18314>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
18315>>>>>>>>>    End_Procedure
18316>>>>>>>>>
18316>>>>>>>>>    Function ComDescriptionText Returns String
18318>>>>>>>>>        String retVal
18318>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
18319>>>>>>>>>        Function_Return retVal
18320>>>>>>>>>    End_Function
18321>>>>>>>>>
18321>>>>>>>>>    Procedure Set ComDescriptionText String value
18323>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
18324>>>>>>>>>    End_Procedure
18325>>>>>>>>>
18325>>>>>>>>>    Function ComId Returns Integer
18327>>>>>>>>>        Integer retVal
18327>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
18328>>>>>>>>>        Function_Return retVal
18329>>>>>>>>>    End_Function
18330>>>>>>>>>
18330>>>>>>>>>    Procedure Set ComId Integer value
18332>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
18333>>>>>>>>>    End_Procedure
18334>>>>>>>>>
18334>>>>>>>>>    Function ComParameter Returns String
18336>>>>>>>>>        String retVal
18336>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
18337>>>>>>>>>        Function_Return retVal
18338>>>>>>>>>    End_Function
18339>>>>>>>>>
18339>>>>>>>>>    Procedure Set ComParameter String value
18341>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
18342>>>>>>>>>    End_Procedure
18343>>>>>>>>>
18343>>>>>>>>>    Function ComShortcutText Returns String
18345>>>>>>>>>        String retVal
18345>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
18346>>>>>>>>>        Function_Return retVal
18347>>>>>>>>>    End_Function
18348>>>>>>>>>
18348>>>>>>>>>    Procedure Set ComShortcutText String value
18350>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
18351>>>>>>>>>    End_Procedure
18352>>>>>>>>>
18352>>>>>>>>>    Function ComCustomShortcutText Returns String
18354>>>>>>>>>        String retVal
18354>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
18355>>>>>>>>>        Function_Return retVal
18356>>>>>>>>>    End_Function
18357>>>>>>>>>
18357>>>>>>>>>    Procedure Set ComCustomShortcutText String value
18359>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
18360>>>>>>>>>    End_Procedure
18361>>>>>>>>>
18361>>>>>>>>>    Function ComTooltipText Returns String
18363>>>>>>>>>        String retVal
18363>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
18364>>>>>>>>>        Function_Return retVal
18365>>>>>>>>>    End_Function
18366>>>>>>>>>
18366>>>>>>>>>    Procedure Set ComTooltipText String value
18368>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
18369>>>>>>>>>    End_Procedure
18370>>>>>>>>>
18370>>>>>>>>>    Function ComVisible Returns Boolean
18372>>>>>>>>>        Boolean retVal
18372>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
18373>>>>>>>>>        Function_Return retVal
18374>>>>>>>>>    End_Function
18375>>>>>>>>>
18375>>>>>>>>>    Procedure Set ComVisible Boolean value
18377>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
18378>>>>>>>>>    End_Procedure
18379>>>>>>>>>
18379>>>>>>>>>    Function ComEnabled Returns Boolean
18381>>>>>>>>>        Boolean retVal
18381>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
18382>>>>>>>>>        Function_Return retVal
18383>>>>>>>>>    End_Function
18384>>>>>>>>>
18384>>>>>>>>>    Procedure Set ComEnabled Boolean value
18386>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
18387>>>>>>>>>    End_Procedure
18388>>>>>>>>>
18388>>>>>>>>>    Function ComIconId Returns Integer
18390>>>>>>>>>        Integer retVal
18390>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
18391>>>>>>>>>        Function_Return retVal
18392>>>>>>>>>    End_Function
18393>>>>>>>>>
18393>>>>>>>>>    Procedure Set ComIconId Integer value
18395>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
18396>>>>>>>>>    End_Procedure
18397>>>>>>>>>
18397>>>>>>>>>    Function ComDefaultItem Returns Boolean
18399>>>>>>>>>        Boolean retVal
18399>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
18400>>>>>>>>>        Function_Return retVal
18401>>>>>>>>>    End_Function
18402>>>>>>>>>
18402>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
18404>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
18405>>>>>>>>>    End_Procedure
18406>>>>>>>>>
18406>>>>>>>>>    Function ComFlags Returns XTPControlFlags
18408>>>>>>>>>        XTPControlFlags retVal
18408>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
18409>>>>>>>>>        Function_Return retVal
18410>>>>>>>>>    End_Function
18411>>>>>>>>>
18411>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
18413>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
18414>>>>>>>>>    End_Procedure
18415>>>>>>>>>
18415>>>>>>>>>    Function ComCategory Returns String
18417>>>>>>>>>        String retVal
18417>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
18418>>>>>>>>>        Function_Return retVal
18419>>>>>>>>>    End_Function
18420>>>>>>>>>
18420>>>>>>>>>    Procedure Set ComCategory String value
18422>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
18423>>>>>>>>>    End_Procedure
18424>>>>>>>>>
18424>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
18426>>>>>>>>>        XTPControlHideFlags retVal
18426>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
18427>>>>>>>>>        Function_Return retVal
18428>>>>>>>>>    End_Function
18429>>>>>>>>>
18429>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
18431>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
18432>>>>>>>>>    End_Procedure
18433>>>>>>>>>
18433>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
18435>>>>>>>>>        Boolean retVal
18435>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
18436>>>>>>>>>        Function_Return retVal
18437>>>>>>>>>    End_Function
18438>>>>>>>>>
18438>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
18440>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
18441>>>>>>>>>    End_Procedure
18442>>>>>>>>>
18442>>>>>>>>>    Function ComAction Returns Variant
18444>>>>>>>>>        Variant retVal
18444>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
18445>>>>>>>>>        Function_Return retVal
18446>>>>>>>>>    End_Function
18447>>>>>>>>>
18447>>>>>>>>>    Procedure Set ComAction Variant value
18449>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
18450>>>>>>>>>    End_Procedure
18451>>>>>>>>>
18451>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
18453>>>>>>>>>        Integer retVal
18453>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
18454>>>>>>>>>        Function_Return retVal
18455>>>>>>>>>    End_Function
18456>>>>>>>>>
18456>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
18458>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
18459>>>>>>>>>    End_Procedure
18460>>>>>>>>>
18460>>>>>>>>>    Function ComWidth Returns Integer
18462>>>>>>>>>        Integer retVal
18462>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
18463>>>>>>>>>        Function_Return retVal
18464>>>>>>>>>    End_Function
18465>>>>>>>>>
18465>>>>>>>>>    Procedure Set ComWidth Integer value
18467>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
18468>>>>>>>>>    End_Procedure
18469>>>>>>>>>
18469>>>>>>>>>    Function ComHeight Returns Integer
18471>>>>>>>>>        Integer retVal
18471>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
18472>>>>>>>>>        Function_Return retVal
18473>>>>>>>>>    End_Function
18474>>>>>>>>>
18474>>>>>>>>>    Procedure Set ComHeight Integer value
18476>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
18477>>>>>>>>>    End_Procedure
18478>>>>>>>>>
18478>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
18480>>>>>>>>>        XTPButtonStyle retVal
18480>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
18481>>>>>>>>>        Function_Return retVal
18482>>>>>>>>>    End_Function
18483>>>>>>>>>
18483>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
18485>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
18486>>>>>>>>>    End_Procedure
18487>>>>>>>>>
18487>>>>>>>>>    Function ComKeyboardTip Returns String
18489>>>>>>>>>        String retVal
18489>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
18490>>>>>>>>>        Function_Return retVal
18491>>>>>>>>>    End_Function
18492>>>>>>>>>
18492>>>>>>>>>    Procedure Set ComKeyboardTip String value
18494>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
18495>>>>>>>>>    End_Procedure
18496>>>>>>>>>
18496>>>>>>>>>    Function ComStyleEx Returns XTPButtonStyle
18498>>>>>>>>>        XTPButtonStyle retVal
18498>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 220 OLE_VT_I4 to retVal
18499>>>>>>>>>        Function_Return retVal
18500>>>>>>>>>    End_Function
18501>>>>>>>>>
18501>>>>>>>>>    Procedure Set ComStyleEx XTPButtonStyle value
18503>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 220 OLE_VT_I4 to value
18504>>>>>>>>>    End_Procedure
18505>>>>>>>>>
18505>>>>>>>>>    Function ComControls Returns Variant
18507>>>>>>>>>        Handle hDispatchDriver
18507>>>>>>>>>        Variant retVal
18507>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18508>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
18509>>>>>>>>>        Function_Return retVal
18510>>>>>>>>>    End_Function
18511>>>>>>>>>
18511>>>>>>>>>    Function ComParent Returns Variant
18513>>>>>>>>>        Handle hDispatchDriver
18513>>>>>>>>>        Variant retVal
18513>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18514>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
18515>>>>>>>>>        Function_Return retVal
18516>>>>>>>>>    End_Function
18517>>>>>>>>>
18517>>>>>>>>>    Function ComIndex Returns Integer
18519>>>>>>>>>        Handle hDispatchDriver
18519>>>>>>>>>        Integer retVal
18519>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18520>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
18521>>>>>>>>>        Function_Return retVal
18522>>>>>>>>>    End_Function
18523>>>>>>>>>
18523>>>>>>>>>    Function ComType Returns XTPControlType
18525>>>>>>>>>        Handle hDispatchDriver
18525>>>>>>>>>        XTPControlType retVal
18525>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18526>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
18527>>>>>>>>>        Function_Return retVal
18528>>>>>>>>>    End_Function
18529>>>>>>>>>
18529>>>>>>>>>    Procedure ComDelete
18531>>>>>>>>>        Handle hDispatchDriver
18531>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18532>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
18533>>>>>>>>>    End_Procedure
18534>>>>>>>>>
18534>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
18536>>>>>>>>>        Handle hDispatchDriver
18536>>>>>>>>>        Variant retVal
18536>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18537>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18538>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
18539>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
18540>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
18541>>>>>>>>>        Function_Return retVal
18542>>>>>>>>>    End_Function
18543>>>>>>>>>
18543>>>>>>>>>    Procedure ComSetFocus
18545>>>>>>>>>        Handle hDispatchDriver
18545>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18546>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
18547>>>>>>>>>    End_Procedure
18548>>>>>>>>>
18548>>>>>>>>>    Procedure ComExecute
18550>>>>>>>>>        Handle hDispatchDriver
18550>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18551>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
18552>>>>>>>>>    End_Procedure
18553>>>>>>>>>
18553>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
18555>>>>>>>>>        Handle hDispatchDriver
18555>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18556>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
18557>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
18558>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
18559>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
18560>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
18561>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
18562>>>>>>>>>    End_Procedure
18563>>>>>>>>>
18563>>>>>>>>>    Function ComRibbonGroup Returns Variant
18565>>>>>>>>>        Handle hDispatchDriver
18565>>>>>>>>>        Variant retVal
18565>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18566>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
18567>>>>>>>>>        Function_Return retVal
18568>>>>>>>>>    End_Function
18569>>>>>>>>>
18569>>>>>>>>>    Procedure ComReset
18571>>>>>>>>>        Handle hDispatchDriver
18571>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18572>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
18573>>>>>>>>>    End_Procedure
18574>>>>>>>>>
18574>>>>>>>>>    Function ComTop Returns Integer
18576>>>>>>>>>        Handle hDispatchDriver
18576>>>>>>>>>        Integer retVal
18576>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18577>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
18578>>>>>>>>>        Function_Return retVal
18579>>>>>>>>>    End_Function
18580>>>>>>>>>
18580>>>>>>>>>    Function ComLeft Returns Integer
18582>>>>>>>>>        Handle hDispatchDriver
18582>>>>>>>>>        Integer retVal
18582>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18583>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
18584>>>>>>>>>        Function_Return retVal
18585>>>>>>>>>    End_Function
18586>>>>>>>>>
18586>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
18588>>>>>>>>>        Handle hDispatchDriver
18588>>>>>>>>>        Variant retVal
18588>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18589>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
18590>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
18591>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
18592>>>>>>>>>        Function_Return retVal
18593>>>>>>>>>    End_Function
18594>>>>>>>>>
18594>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
18596>>>>>>>>>        Handle hDispatchDriver
18596>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18597>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18598>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
18599>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
18600>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
18601>>>>>>>>>    End_Procedure
18602>>>>>>>>>End_Class
18603>>>>>>>>>
18603>>>>>>>>>// CoClass
18603>>>>>>>>>// CLSID: {C0DE2200-AACD-4E77-8B1E-42B463760513}
18603>>>>>>>>>Class cCJCommandBarButton is a cComAutomationObject
18604>>>>>>>>>    Import_Class_Protocol cCJICommandBarButton
18605>>>>>>>>>
18605>>>>>>>>>    Procedure Construct_Object
18607>>>>>>>>>        Forward Send Construct_Object
18609>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
18610>>>>>>>>>    End_Procedure
18611>>>>>>>>>End_Class
18612>>>>>>>>>
18612>>>>>>>>>// CLSID: {C0DE2200-D452-4856-BAA4-17E86BD08CBA}
18612>>>>>>>>>Class cCJICommandBarPopup is a Mixin
18613>>>>>>>>>
18613>>>>>>>>>    Function ComChecked Returns Boolean
18615>>>>>>>>>        Boolean retVal
18615>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
18616>>>>>>>>>        Function_Return retVal
18617>>>>>>>>>    End_Function
18618>>>>>>>>>
18618>>>>>>>>>    Procedure Set ComChecked Boolean value
18620>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
18621>>>>>>>>>    End_Procedure
18622>>>>>>>>>
18622>>>>>>>>>    Function ComBeginGroup Returns Boolean
18624>>>>>>>>>        Boolean retVal
18624>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
18625>>>>>>>>>        Function_Return retVal
18626>>>>>>>>>    End_Function
18627>>>>>>>>>
18627>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
18629>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
18630>>>>>>>>>    End_Procedure
18631>>>>>>>>>
18631>>>>>>>>>    Function ComCaption Returns String
18633>>>>>>>>>        String retVal
18633>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
18634>>>>>>>>>        Function_Return retVal
18635>>>>>>>>>    End_Function
18636>>>>>>>>>
18636>>>>>>>>>    Procedure Set ComCaption String value
18638>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
18639>>>>>>>>>    End_Procedure
18640>>>>>>>>>
18640>>>>>>>>>    Function ComDescriptionText Returns String
18642>>>>>>>>>        String retVal
18642>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
18643>>>>>>>>>        Function_Return retVal
18644>>>>>>>>>    End_Function
18645>>>>>>>>>
18645>>>>>>>>>    Procedure Set ComDescriptionText String value
18647>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
18648>>>>>>>>>    End_Procedure
18649>>>>>>>>>
18649>>>>>>>>>    Function ComId Returns Integer
18651>>>>>>>>>        Integer retVal
18651>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
18652>>>>>>>>>        Function_Return retVal
18653>>>>>>>>>    End_Function
18654>>>>>>>>>
18654>>>>>>>>>    Procedure Set ComId Integer value
18656>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
18657>>>>>>>>>    End_Procedure
18658>>>>>>>>>
18658>>>>>>>>>    Function ComParameter Returns String
18660>>>>>>>>>        String retVal
18660>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
18661>>>>>>>>>        Function_Return retVal
18662>>>>>>>>>    End_Function
18663>>>>>>>>>
18663>>>>>>>>>    Procedure Set ComParameter String value
18665>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
18666>>>>>>>>>    End_Procedure
18667>>>>>>>>>
18667>>>>>>>>>    Function ComShortcutText Returns String
18669>>>>>>>>>        String retVal
18669>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
18670>>>>>>>>>        Function_Return retVal
18671>>>>>>>>>    End_Function
18672>>>>>>>>>
18672>>>>>>>>>    Procedure Set ComShortcutText String value
18674>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
18675>>>>>>>>>    End_Procedure
18676>>>>>>>>>
18676>>>>>>>>>    Function ComCustomShortcutText Returns String
18678>>>>>>>>>        String retVal
18678>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
18679>>>>>>>>>        Function_Return retVal
18680>>>>>>>>>    End_Function
18681>>>>>>>>>
18681>>>>>>>>>    Procedure Set ComCustomShortcutText String value
18683>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
18684>>>>>>>>>    End_Procedure
18685>>>>>>>>>
18685>>>>>>>>>    Function ComTooltipText Returns String
18687>>>>>>>>>        String retVal
18687>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
18688>>>>>>>>>        Function_Return retVal
18689>>>>>>>>>    End_Function
18690>>>>>>>>>
18690>>>>>>>>>    Procedure Set ComTooltipText String value
18692>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
18693>>>>>>>>>    End_Procedure
18694>>>>>>>>>
18694>>>>>>>>>    Function ComVisible Returns Boolean
18696>>>>>>>>>        Boolean retVal
18696>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
18697>>>>>>>>>        Function_Return retVal
18698>>>>>>>>>    End_Function
18699>>>>>>>>>
18699>>>>>>>>>    Procedure Set ComVisible Boolean value
18701>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
18702>>>>>>>>>    End_Procedure
18703>>>>>>>>>
18703>>>>>>>>>    Function ComEnabled Returns Boolean
18705>>>>>>>>>        Boolean retVal
18705>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
18706>>>>>>>>>        Function_Return retVal
18707>>>>>>>>>    End_Function
18708>>>>>>>>>
18708>>>>>>>>>    Procedure Set ComEnabled Boolean value
18710>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
18711>>>>>>>>>    End_Procedure
18712>>>>>>>>>
18712>>>>>>>>>    Function ComIconId Returns Integer
18714>>>>>>>>>        Integer retVal
18714>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
18715>>>>>>>>>        Function_Return retVal
18716>>>>>>>>>    End_Function
18717>>>>>>>>>
18717>>>>>>>>>    Procedure Set ComIconId Integer value
18719>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
18720>>>>>>>>>    End_Procedure
18721>>>>>>>>>
18721>>>>>>>>>    Function ComDefaultItem Returns Boolean
18723>>>>>>>>>        Boolean retVal
18723>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
18724>>>>>>>>>        Function_Return retVal
18725>>>>>>>>>    End_Function
18726>>>>>>>>>
18726>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
18728>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
18729>>>>>>>>>    End_Procedure
18730>>>>>>>>>
18730>>>>>>>>>    Function ComFlags Returns XTPControlFlags
18732>>>>>>>>>        XTPControlFlags retVal
18732>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
18733>>>>>>>>>        Function_Return retVal
18734>>>>>>>>>    End_Function
18735>>>>>>>>>
18735>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
18737>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
18738>>>>>>>>>    End_Procedure
18739>>>>>>>>>
18739>>>>>>>>>    Function ComCategory Returns String
18741>>>>>>>>>        String retVal
18741>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
18742>>>>>>>>>        Function_Return retVal
18743>>>>>>>>>    End_Function
18744>>>>>>>>>
18744>>>>>>>>>    Procedure Set ComCategory String value
18746>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
18747>>>>>>>>>    End_Procedure
18748>>>>>>>>>
18748>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
18750>>>>>>>>>        XTPControlHideFlags retVal
18750>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
18751>>>>>>>>>        Function_Return retVal
18752>>>>>>>>>    End_Function
18753>>>>>>>>>
18753>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
18755>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
18756>>>>>>>>>    End_Procedure
18757>>>>>>>>>
18757>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
18759>>>>>>>>>        Boolean retVal
18759>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
18760>>>>>>>>>        Function_Return retVal
18761>>>>>>>>>    End_Function
18762>>>>>>>>>
18762>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
18764>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
18765>>>>>>>>>    End_Procedure
18766>>>>>>>>>
18766>>>>>>>>>    Function ComAction Returns Variant
18768>>>>>>>>>        Variant retVal
18768>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
18769>>>>>>>>>        Function_Return retVal
18770>>>>>>>>>    End_Function
18771>>>>>>>>>
18771>>>>>>>>>    Procedure Set ComAction Variant value
18773>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
18774>>>>>>>>>    End_Procedure
18775>>>>>>>>>
18775>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
18777>>>>>>>>>        Integer retVal
18777>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
18778>>>>>>>>>        Function_Return retVal
18779>>>>>>>>>    End_Function
18780>>>>>>>>>
18780>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
18782>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
18783>>>>>>>>>    End_Procedure
18784>>>>>>>>>
18784>>>>>>>>>    Function ComWidth Returns Integer
18786>>>>>>>>>        Integer retVal
18786>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
18787>>>>>>>>>        Function_Return retVal
18788>>>>>>>>>    End_Function
18789>>>>>>>>>
18789>>>>>>>>>    Procedure Set ComWidth Integer value
18791>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
18792>>>>>>>>>    End_Procedure
18793>>>>>>>>>
18793>>>>>>>>>    Function ComHeight Returns Integer
18795>>>>>>>>>        Integer retVal
18795>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
18796>>>>>>>>>        Function_Return retVal
18797>>>>>>>>>    End_Function
18798>>>>>>>>>
18798>>>>>>>>>    Procedure Set ComHeight Integer value
18800>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
18801>>>>>>>>>    End_Procedure
18802>>>>>>>>>
18802>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
18804>>>>>>>>>        XTPButtonStyle retVal
18804>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
18805>>>>>>>>>        Function_Return retVal
18806>>>>>>>>>    End_Function
18807>>>>>>>>>
18807>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
18809>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
18810>>>>>>>>>    End_Procedure
18811>>>>>>>>>
18811>>>>>>>>>    Function ComKeyboardTip Returns String
18813>>>>>>>>>        String retVal
18813>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
18814>>>>>>>>>        Function_Return retVal
18815>>>>>>>>>    End_Function
18816>>>>>>>>>
18816>>>>>>>>>    Procedure Set ComKeyboardTip String value
18818>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
18819>>>>>>>>>    End_Procedure
18820>>>>>>>>>
18820>>>>>>>>>    Function ComCommandBar Returns Variant
18822>>>>>>>>>        Variant retVal
18822>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
18823>>>>>>>>>        Function_Return retVal
18824>>>>>>>>>    End_Function
18825>>>>>>>>>
18825>>>>>>>>>    Procedure Set ComCommandBar Variant value
18827>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
18828>>>>>>>>>    End_Procedure
18829>>>>>>>>>
18829>>>>>>>>>    Function ComControls Returns Variant
18831>>>>>>>>>        Handle hDispatchDriver
18831>>>>>>>>>        Variant retVal
18831>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18832>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
18833>>>>>>>>>        Function_Return retVal
18834>>>>>>>>>    End_Function
18835>>>>>>>>>
18835>>>>>>>>>    Function ComParent Returns Variant
18837>>>>>>>>>        Handle hDispatchDriver
18837>>>>>>>>>        Variant retVal
18837>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18838>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
18839>>>>>>>>>        Function_Return retVal
18840>>>>>>>>>    End_Function
18841>>>>>>>>>
18841>>>>>>>>>    Function ComIndex Returns Integer
18843>>>>>>>>>        Handle hDispatchDriver
18843>>>>>>>>>        Integer retVal
18843>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18844>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
18845>>>>>>>>>        Function_Return retVal
18846>>>>>>>>>    End_Function
18847>>>>>>>>>
18847>>>>>>>>>    Function ComType Returns XTPControlType
18849>>>>>>>>>        Handle hDispatchDriver
18849>>>>>>>>>        XTPControlType retVal
18849>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18850>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
18851>>>>>>>>>        Function_Return retVal
18852>>>>>>>>>    End_Function
18853>>>>>>>>>
18853>>>>>>>>>    Procedure ComDelete
18855>>>>>>>>>        Handle hDispatchDriver
18855>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18856>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
18857>>>>>>>>>    End_Procedure
18858>>>>>>>>>
18858>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
18860>>>>>>>>>        Handle hDispatchDriver
18860>>>>>>>>>        Variant retVal
18860>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18861>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18862>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
18863>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
18864>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
18865>>>>>>>>>        Function_Return retVal
18866>>>>>>>>>    End_Function
18867>>>>>>>>>
18867>>>>>>>>>    Procedure ComSetFocus
18869>>>>>>>>>        Handle hDispatchDriver
18869>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18870>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
18871>>>>>>>>>    End_Procedure
18872>>>>>>>>>
18872>>>>>>>>>    Procedure ComExecute
18874>>>>>>>>>        Handle hDispatchDriver
18874>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18875>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
18876>>>>>>>>>    End_Procedure
18877>>>>>>>>>
18877>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
18879>>>>>>>>>        Handle hDispatchDriver
18879>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18880>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
18881>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
18882>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
18883>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
18884>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
18885>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
18886>>>>>>>>>    End_Procedure
18887>>>>>>>>>
18887>>>>>>>>>    Function ComRibbonGroup Returns Variant
18889>>>>>>>>>        Handle hDispatchDriver
18889>>>>>>>>>        Variant retVal
18889>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18890>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
18891>>>>>>>>>        Function_Return retVal
18892>>>>>>>>>    End_Function
18893>>>>>>>>>
18893>>>>>>>>>    Procedure ComReset
18895>>>>>>>>>        Handle hDispatchDriver
18895>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18896>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
18897>>>>>>>>>    End_Procedure
18898>>>>>>>>>
18898>>>>>>>>>    Function ComTop Returns Integer
18900>>>>>>>>>        Handle hDispatchDriver
18900>>>>>>>>>        Integer retVal
18900>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18901>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
18902>>>>>>>>>        Function_Return retVal
18903>>>>>>>>>    End_Function
18904>>>>>>>>>
18904>>>>>>>>>    Function ComLeft Returns Integer
18906>>>>>>>>>        Handle hDispatchDriver
18906>>>>>>>>>        Integer retVal
18906>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18907>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
18908>>>>>>>>>        Function_Return retVal
18909>>>>>>>>>    End_Function
18910>>>>>>>>>
18910>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
18912>>>>>>>>>        Handle hDispatchDriver
18912>>>>>>>>>        Variant retVal
18912>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18913>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
18914>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
18915>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
18916>>>>>>>>>        Function_Return retVal
18917>>>>>>>>>    End_Function
18918>>>>>>>>>
18918>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
18920>>>>>>>>>        Handle hDispatchDriver
18920>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
18921>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
18922>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
18923>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
18924>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
18925>>>>>>>>>    End_Procedure
18926>>>>>>>>>End_Class
18927>>>>>>>>>
18927>>>>>>>>>// CoClass
18927>>>>>>>>>// CLSID: {C0DE2200-BB71-4F79-9A7A-11ED146C387C}
18927>>>>>>>>>Class cCJCommandBarPopup is a cComAutomationObject
18928>>>>>>>>>    Import_Class_Protocol cCJICommandBarPopup
18929>>>>>>>>>
18929>>>>>>>>>    Procedure Construct_Object
18931>>>>>>>>>        Forward Send Construct_Object
18933>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
18934>>>>>>>>>    End_Procedure
18935>>>>>>>>>End_Class
18936>>>>>>>>>
18936>>>>>>>>>// CLSID: {C0DE2200-06D0-4869-8168-9CCBAA22C0EB}
18936>>>>>>>>>Class cCJICommandBarGalleryItem is a Mixin
18937>>>>>>>>>
18937>>>>>>>>>    Function ComId Returns Integer
18939>>>>>>>>>        Integer retVal
18939>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
18940>>>>>>>>>        Function_Return retVal
18941>>>>>>>>>    End_Function
18942>>>>>>>>>
18942>>>>>>>>>    Procedure Set ComId Integer value
18944>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
18945>>>>>>>>>    End_Procedure
18946>>>>>>>>>
18946>>>>>>>>>    Function ComImageIndex Returns Integer
18948>>>>>>>>>        Integer retVal
18948>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
18949>>>>>>>>>        Function_Return retVal
18950>>>>>>>>>    End_Function
18951>>>>>>>>>
18951>>>>>>>>>    Procedure Set ComImageIndex Integer value
18953>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
18954>>>>>>>>>    End_Procedure
18955>>>>>>>>>
18955>>>>>>>>>    Function ComCaption Returns String
18957>>>>>>>>>        String retVal
18957>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
18958>>>>>>>>>        Function_Return retVal
18959>>>>>>>>>    End_Function
18960>>>>>>>>>
18960>>>>>>>>>    Procedure Set ComCaption String value
18962>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
18963>>>>>>>>>    End_Procedure
18964>>>>>>>>>
18964>>>>>>>>>    Function ComToolTip Returns String
18966>>>>>>>>>        String retVal
18966>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
18967>>>>>>>>>        Function_Return retVal
18968>>>>>>>>>    End_Function
18969>>>>>>>>>
18969>>>>>>>>>    Procedure Set ComToolTip String value
18971>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
18972>>>>>>>>>    End_Procedure
18973>>>>>>>>>
18973>>>>>>>>>    Function ComTag Returns Variant
18975>>>>>>>>>        Variant retVal
18975>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_VARIANT to retVal
18976>>>>>>>>>        Function_Return retVal
18977>>>>>>>>>    End_Function
18978>>>>>>>>>
18978>>>>>>>>>    Procedure Set ComTag Variant value
18980>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_VARIANT to value
18981>>>>>>>>>    End_Procedure
18982>>>>>>>>>
18982>>>>>>>>>    Function ComItemWidth Returns Integer
18984>>>>>>>>>        Integer retVal
18984>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
18985>>>>>>>>>        Function_Return retVal
18986>>>>>>>>>    End_Function
18987>>>>>>>>>
18987>>>>>>>>>    Procedure Set ComItemWidth Integer value
18989>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
18990>>>>>>>>>    End_Procedure
18991>>>>>>>>>
18991>>>>>>>>>    Function ComItemHeight Returns Integer
18993>>>>>>>>>        Integer retVal
18993>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
18994>>>>>>>>>        Function_Return retVal
18995>>>>>>>>>    End_Function
18996>>>>>>>>>
18996>>>>>>>>>    Procedure Set ComItemHeight Integer value
18998>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
18999>>>>>>>>>    End_Procedure
19000>>>>>>>>>
19000>>>>>>>>>    Function ComDescriptionText Returns String
19002>>>>>>>>>        String retVal
19002>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
19003>>>>>>>>>        Function_Return retVal
19004>>>>>>>>>    End_Function
19005>>>>>>>>>
19005>>>>>>>>>    Procedure Set ComDescriptionText String value
19007>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
19008>>>>>>>>>    End_Procedure
19009>>>>>>>>>
19009>>>>>>>>>    Function ComEnabled Returns Boolean
19011>>>>>>>>>        Boolean retVal
19011>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
19012>>>>>>>>>        Function_Return retVal
19013>>>>>>>>>    End_Function
19014>>>>>>>>>
19014>>>>>>>>>    Procedure Set ComEnabled Boolean value
19016>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
19017>>>>>>>>>    End_Procedure
19018>>>>>>>>>
19018>>>>>>>>>    Function ComIndex Returns Integer
19020>>>>>>>>>        Handle hDispatchDriver
19020>>>>>>>>>        Integer retVal
19020>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19021>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
19022>>>>>>>>>        Function_Return retVal
19023>>>>>>>>>    End_Function
19024>>>>>>>>>
19024>>>>>>>>>    Function ComLabel Returns Boolean
19026>>>>>>>>>        Handle hDispatchDriver
19026>>>>>>>>>        Boolean retVal
19026>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19027>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_BOOL to retVal
19028>>>>>>>>>        Function_Return retVal
19029>>>>>>>>>    End_Function
19030>>>>>>>>>End_Class
19031>>>>>>>>>
19031>>>>>>>>>// CoClass
19031>>>>>>>>>// CLSID: {C0DE2200-9D8C-4025-AAD4-73D8D15E7FED}
19031>>>>>>>>>Class cCJCommandBarGalleryItem is a cComAutomationObject
19032>>>>>>>>>    Import_Class_Protocol cCJICommandBarGalleryItem
19033>>>>>>>>>
19033>>>>>>>>>    Procedure Construct_Object
19035>>>>>>>>>        Forward Send Construct_Object
19037>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
19038>>>>>>>>>    End_Procedure
19039>>>>>>>>>End_Class
19040>>>>>>>>>
19040>>>>>>>>>// CLSID: {C0DE2200-0AFA-4EC8-A49E-4DC7671C4AC7}
19040>>>>>>>>>Class cCJICommandBarGalleryItems is a Mixin
19041>>>>>>>>>
19041>>>>>>>>>    Function ComIcons Returns Variant
19043>>>>>>>>>        Variant retVal
19043>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_DISPATCH to retVal
19044>>>>>>>>>        Function_Return retVal
19045>>>>>>>>>    End_Function
19046>>>>>>>>>
19046>>>>>>>>>    Procedure Set ComIcons Variant value
19048>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_DISPATCH to value
19049>>>>>>>>>    End_Procedure
19050>>>>>>>>>
19050>>>>>>>>>    Function ComItemWidth Returns Integer
19052>>>>>>>>>        Integer retVal
19052>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to retVal
19053>>>>>>>>>        Function_Return retVal
19054>>>>>>>>>    End_Function
19055>>>>>>>>>
19055>>>>>>>>>    Procedure Set ComItemWidth Integer value
19057>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to value
19058>>>>>>>>>    End_Procedure
19059>>>>>>>>>
19059>>>>>>>>>    Function ComItemHeight Returns Integer
19061>>>>>>>>>        Integer retVal
19061>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
19062>>>>>>>>>        Function_Return retVal
19063>>>>>>>>>    End_Function
19064>>>>>>>>>
19064>>>>>>>>>    Procedure Set ComItemHeight Integer value
19066>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
19067>>>>>>>>>    End_Procedure
19068>>>>>>>>>
19068>>>>>>>>>    Function ComClipItems Returns Boolean
19070>>>>>>>>>        Boolean retVal
19070>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
19071>>>>>>>>>        Function_Return retVal
19072>>>>>>>>>    End_Function
19073>>>>>>>>>
19073>>>>>>>>>    Procedure Set ComClipItems Boolean value
19075>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
19076>>>>>>>>>    End_Procedure
19077>>>>>>>>>
19077>>>>>>>>>    Function ComEnableMarkup Returns Boolean
19079>>>>>>>>>        Boolean retVal
19079>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
19080>>>>>>>>>        Function_Return retVal
19081>>>>>>>>>    End_Function
19082>>>>>>>>>
19082>>>>>>>>>    Procedure Set ComEnableMarkup Boolean value
19084>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
19085>>>>>>>>>    End_Procedure
19086>>>>>>>>>
19086>>>>>>>>>    Function ComAddItem Integer llId String llCaption Returns Variant
19088>>>>>>>>>        Handle hDispatchDriver
19088>>>>>>>>>        Variant retVal
19088>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19089>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
19090>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
19091>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
19092>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
19093>>>>>>>>>        Function_Return retVal
19094>>>>>>>>>    End_Function
19095>>>>>>>>>
19095>>>>>>>>>    Function ComAddLabel String llCaption Returns Variant
19097>>>>>>>>>        Handle hDispatchDriver
19097>>>>>>>>>        Variant retVal
19097>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19098>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19099>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
19100>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
19101>>>>>>>>>        Function_Return retVal
19102>>>>>>>>>    End_Function
19103>>>>>>>>>
19103>>>>>>>>>    Function ComAddSeparator Returns Variant
19105>>>>>>>>>        Handle hDispatchDriver
19105>>>>>>>>>        Variant retVal
19105>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19106>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
19107>>>>>>>>>        Function_Return retVal
19108>>>>>>>>>    End_Function
19109>>>>>>>>>
19109>>>>>>>>>    // Gets the number of controls in the collection.
19109>>>>>>>>>    Function ComCount Returns Integer
19111>>>>>>>>>        Handle hDispatchDriver
19111>>>>>>>>>        Integer retVal
19111>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19112>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
19113>>>>>>>>>        Function_Return retVal
19114>>>>>>>>>    End_Function
19115>>>>>>>>>
19115>>>>>>>>>    // Gets an item from the collection by its index.
19115>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
19117>>>>>>>>>        Handle hDispatchDriver
19117>>>>>>>>>        Variant retVal
19117>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19118>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19119>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
19120>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
19121>>>>>>>>>        Function_Return retVal
19122>>>>>>>>>    End_Function
19123>>>>>>>>>
19123>>>>>>>>>    Function Com_NewEnum Returns Variant
19125>>>>>>>>>        Handle hDispatchDriver
19125>>>>>>>>>        Variant retVal
19125>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19126>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
19127>>>>>>>>>        Function_Return retVal
19128>>>>>>>>>    End_Function
19129>>>>>>>>>
19129>>>>>>>>>    // Deletes all of the command bar controls from the collection
19129>>>>>>>>>    Procedure ComDeleteAll
19131>>>>>>>>>        Handle hDispatchDriver
19131>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19132>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
19133>>>>>>>>>    End_Procedure
19134>>>>>>>>>
19134>>>>>>>>>    Procedure ComDeleteAt Integer llIndex
19136>>>>>>>>>        Handle hDispatchDriver
19136>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19137>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19138>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
19139>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 10 OLE_VT_VOID
19140>>>>>>>>>    End_Procedure
19141>>>>>>>>>
19141>>>>>>>>>    Function ComMarkupContext Returns Variant
19143>>>>>>>>>        Handle hDispatchDriver
19143>>>>>>>>>        Variant retVal
19143>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19144>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_DISPATCH to retVal
19145>>>>>>>>>        Function_Return retVal
19146>>>>>>>>>    End_Function
19147>>>>>>>>>End_Class
19148>>>>>>>>>
19148>>>>>>>>>// CLSID: {C0DE2200-7BE8-42EC-870C-8849F5540F14}
19148>>>>>>>>>Class cCJICommandBarGalleryItemsEvents is a Mixin
19149>>>>>>>>>
19149>>>>>>>>>    Procedure OnComDrawItem OLE_HANDLE llhDC Variant llGallery Variant llItem Integer llx Integer lly Integer llcx Integer llcy Boolean llEnabled Boolean llSelected Boolean llPressed Boolean llChecked Variant llHandled
19151>>>>>>>>>    End_Procedure
19152>>>>>>>>>
19152>>>>>>>>>    Procedure RegisterComEvents
19154>>>>>>>>>        Send RegisterComEvent 1 msg_OnComDrawItem
19155>>>>>>>>>    End_Procedure
19156>>>>>>>>>End_Class
19157>>>>>>>>>
19157>>>>>>>>>// CoClass
19157>>>>>>>>>// CLSID: {C0DE2200-BA48-4451-B04D-5304909AE543}
19157>>>>>>>>>Class cCJCommandBarGalleryItems is a cComAutomationObject
19158>>>>>>>>>    Import_Class_Protocol cCJICommandBarGalleryItems
19159>>>>>>>>>    Import_Class_Protocol cCJICommandBarGalleryItemsEvents
19160>>>>>>>>>
19160>>>>>>>>>    Procedure Construct_Object
19162>>>>>>>>>        Forward Send Construct_Object
19164>>>>>>>>>        Set psEventId to "{C0DE2200-7BE8-42EC-870C-8849F5540F14}"
19165>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
19166>>>>>>>>>    End_Procedure
19167>>>>>>>>>End_Class
19168>>>>>>>>>
19168>>>>>>>>>// CLSID: {C0DE2200-55CC-4D4C-A6CF-260F62044127}
19168>>>>>>>>>Class cCJICommandBarGallery is a Mixin
19169>>>>>>>>>
19169>>>>>>>>>    Function ComChecked Returns Boolean
19171>>>>>>>>>        Boolean retVal
19171>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
19172>>>>>>>>>        Function_Return retVal
19173>>>>>>>>>    End_Function
19174>>>>>>>>>
19174>>>>>>>>>    Procedure Set ComChecked Boolean value
19176>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
19177>>>>>>>>>    End_Procedure
19178>>>>>>>>>
19178>>>>>>>>>    Function ComBeginGroup Returns Boolean
19180>>>>>>>>>        Boolean retVal
19180>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
19181>>>>>>>>>        Function_Return retVal
19182>>>>>>>>>    End_Function
19183>>>>>>>>>
19183>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
19185>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
19186>>>>>>>>>    End_Procedure
19187>>>>>>>>>
19187>>>>>>>>>    Function ComCaption Returns String
19189>>>>>>>>>        String retVal
19189>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
19190>>>>>>>>>        Function_Return retVal
19191>>>>>>>>>    End_Function
19192>>>>>>>>>
19192>>>>>>>>>    Procedure Set ComCaption String value
19194>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
19195>>>>>>>>>    End_Procedure
19196>>>>>>>>>
19196>>>>>>>>>    Function ComDescriptionText Returns String
19198>>>>>>>>>        String retVal
19198>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
19199>>>>>>>>>        Function_Return retVal
19200>>>>>>>>>    End_Function
19201>>>>>>>>>
19201>>>>>>>>>    Procedure Set ComDescriptionText String value
19203>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
19204>>>>>>>>>    End_Procedure
19205>>>>>>>>>
19205>>>>>>>>>    Function ComId Returns Integer
19207>>>>>>>>>        Integer retVal
19207>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
19208>>>>>>>>>        Function_Return retVal
19209>>>>>>>>>    End_Function
19210>>>>>>>>>
19210>>>>>>>>>    Procedure Set ComId Integer value
19212>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
19213>>>>>>>>>    End_Procedure
19214>>>>>>>>>
19214>>>>>>>>>    Function ComParameter Returns String
19216>>>>>>>>>        String retVal
19216>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
19217>>>>>>>>>        Function_Return retVal
19218>>>>>>>>>    End_Function
19219>>>>>>>>>
19219>>>>>>>>>    Procedure Set ComParameter String value
19221>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
19222>>>>>>>>>    End_Procedure
19223>>>>>>>>>
19223>>>>>>>>>    Function ComShortcutText Returns String
19225>>>>>>>>>        String retVal
19225>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
19226>>>>>>>>>        Function_Return retVal
19227>>>>>>>>>    End_Function
19228>>>>>>>>>
19228>>>>>>>>>    Procedure Set ComShortcutText String value
19230>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
19231>>>>>>>>>    End_Procedure
19232>>>>>>>>>
19232>>>>>>>>>    Function ComCustomShortcutText Returns String
19234>>>>>>>>>        String retVal
19234>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
19235>>>>>>>>>        Function_Return retVal
19236>>>>>>>>>    End_Function
19237>>>>>>>>>
19237>>>>>>>>>    Procedure Set ComCustomShortcutText String value
19239>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
19240>>>>>>>>>    End_Procedure
19241>>>>>>>>>
19241>>>>>>>>>    Function ComTooltipText Returns String
19243>>>>>>>>>        String retVal
19243>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
19244>>>>>>>>>        Function_Return retVal
19245>>>>>>>>>    End_Function
19246>>>>>>>>>
19246>>>>>>>>>    Procedure Set ComTooltipText String value
19248>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
19249>>>>>>>>>    End_Procedure
19250>>>>>>>>>
19250>>>>>>>>>    Function ComVisible Returns Boolean
19252>>>>>>>>>        Boolean retVal
19252>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
19253>>>>>>>>>        Function_Return retVal
19254>>>>>>>>>    End_Function
19255>>>>>>>>>
19255>>>>>>>>>    Procedure Set ComVisible Boolean value
19257>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
19258>>>>>>>>>    End_Procedure
19259>>>>>>>>>
19259>>>>>>>>>    Function ComEnabled Returns Boolean
19261>>>>>>>>>        Boolean retVal
19261>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
19262>>>>>>>>>        Function_Return retVal
19263>>>>>>>>>    End_Function
19264>>>>>>>>>
19264>>>>>>>>>    Procedure Set ComEnabled Boolean value
19266>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
19267>>>>>>>>>    End_Procedure
19268>>>>>>>>>
19268>>>>>>>>>    Function ComIconId Returns Integer
19270>>>>>>>>>        Integer retVal
19270>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
19271>>>>>>>>>        Function_Return retVal
19272>>>>>>>>>    End_Function
19273>>>>>>>>>
19273>>>>>>>>>    Procedure Set ComIconId Integer value
19275>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
19276>>>>>>>>>    End_Procedure
19277>>>>>>>>>
19277>>>>>>>>>    Function ComDefaultItem Returns Boolean
19279>>>>>>>>>        Boolean retVal
19279>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
19280>>>>>>>>>        Function_Return retVal
19281>>>>>>>>>    End_Function
19282>>>>>>>>>
19282>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
19284>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
19285>>>>>>>>>    End_Procedure
19286>>>>>>>>>
19286>>>>>>>>>    Function ComFlags Returns XTPControlFlags
19288>>>>>>>>>        XTPControlFlags retVal
19288>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
19289>>>>>>>>>        Function_Return retVal
19290>>>>>>>>>    End_Function
19291>>>>>>>>>
19291>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
19293>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
19294>>>>>>>>>    End_Procedure
19295>>>>>>>>>
19295>>>>>>>>>    Function ComCategory Returns String
19297>>>>>>>>>        String retVal
19297>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
19298>>>>>>>>>        Function_Return retVal
19299>>>>>>>>>    End_Function
19300>>>>>>>>>
19300>>>>>>>>>    Procedure Set ComCategory String value
19302>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
19303>>>>>>>>>    End_Procedure
19304>>>>>>>>>
19304>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
19306>>>>>>>>>        XTPControlHideFlags retVal
19306>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
19307>>>>>>>>>        Function_Return retVal
19308>>>>>>>>>    End_Function
19309>>>>>>>>>
19309>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
19311>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
19312>>>>>>>>>    End_Procedure
19313>>>>>>>>>
19313>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
19315>>>>>>>>>        Boolean retVal
19315>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
19316>>>>>>>>>        Function_Return retVal
19317>>>>>>>>>    End_Function
19318>>>>>>>>>
19318>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
19320>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
19321>>>>>>>>>    End_Procedure
19322>>>>>>>>>
19322>>>>>>>>>    Function ComAction Returns Variant
19324>>>>>>>>>        Variant retVal
19324>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
19325>>>>>>>>>        Function_Return retVal
19326>>>>>>>>>    End_Function
19327>>>>>>>>>
19327>>>>>>>>>    Procedure Set ComAction Variant value
19329>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
19330>>>>>>>>>    End_Procedure
19331>>>>>>>>>
19331>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
19333>>>>>>>>>        Integer retVal
19333>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
19334>>>>>>>>>        Function_Return retVal
19335>>>>>>>>>    End_Function
19336>>>>>>>>>
19336>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
19338>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
19339>>>>>>>>>    End_Procedure
19340>>>>>>>>>
19340>>>>>>>>>    Function ComWidth Returns Integer
19342>>>>>>>>>        Integer retVal
19342>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
19343>>>>>>>>>        Function_Return retVal
19344>>>>>>>>>    End_Function
19345>>>>>>>>>
19345>>>>>>>>>    Procedure Set ComWidth Integer value
19347>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
19348>>>>>>>>>    End_Procedure
19349>>>>>>>>>
19349>>>>>>>>>    Function ComHeight Returns Integer
19351>>>>>>>>>        Integer retVal
19351>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
19352>>>>>>>>>        Function_Return retVal
19353>>>>>>>>>    End_Function
19354>>>>>>>>>
19354>>>>>>>>>    Procedure Set ComHeight Integer value
19356>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
19357>>>>>>>>>    End_Procedure
19358>>>>>>>>>
19358>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
19360>>>>>>>>>        XTPButtonStyle retVal
19360>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
19361>>>>>>>>>        Function_Return retVal
19362>>>>>>>>>    End_Function
19363>>>>>>>>>
19363>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
19365>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
19366>>>>>>>>>    End_Procedure
19367>>>>>>>>>
19367>>>>>>>>>    Function ComKeyboardTip Returns String
19369>>>>>>>>>        String retVal
19369>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
19370>>>>>>>>>        Function_Return retVal
19371>>>>>>>>>    End_Function
19372>>>>>>>>>
19372>>>>>>>>>    Procedure Set ComKeyboardTip String value
19374>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
19375>>>>>>>>>    End_Procedure
19376>>>>>>>>>
19376>>>>>>>>>    Function ComCommandBar Returns Variant
19378>>>>>>>>>        Variant retVal
19378>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
19379>>>>>>>>>        Function_Return retVal
19380>>>>>>>>>    End_Function
19381>>>>>>>>>
19381>>>>>>>>>    Procedure Set ComCommandBar Variant value
19383>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
19384>>>>>>>>>    End_Procedure
19385>>>>>>>>>
19385>>>>>>>>>    Function ComItems Returns Variant
19387>>>>>>>>>        Variant retVal
19387>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_DISPATCH to retVal
19388>>>>>>>>>        Function_Return retVal
19389>>>>>>>>>    End_Function
19390>>>>>>>>>
19390>>>>>>>>>    Procedure Set ComItems Variant value
19392>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_DISPATCH to value
19393>>>>>>>>>    End_Procedure
19394>>>>>>>>>
19394>>>>>>>>>    Function ComSelectedItem Returns Variant
19396>>>>>>>>>        Variant retVal
19396>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_DISPATCH to retVal
19397>>>>>>>>>        Function_Return retVal
19398>>>>>>>>>    End_Function
19399>>>>>>>>>
19399>>>>>>>>>    Procedure Set ComSelectedItem Variant value
19401>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_DISPATCH to value
19402>>>>>>>>>    End_Procedure
19403>>>>>>>>>
19403>>>>>>>>>    Function ComCheckedItem Returns Integer
19405>>>>>>>>>        Integer retVal
19405>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
19406>>>>>>>>>        Function_Return retVal
19407>>>>>>>>>    End_Function
19408>>>>>>>>>
19408>>>>>>>>>    Procedure Set ComCheckedItem Integer value
19410>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
19411>>>>>>>>>    End_Procedure
19412>>>>>>>>>
19412>>>>>>>>>    Function ComShowBorders Returns Boolean
19414>>>>>>>>>        Boolean retVal
19414>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BOOL to retVal
19415>>>>>>>>>        Function_Return retVal
19416>>>>>>>>>    End_Function
19417>>>>>>>>>
19417>>>>>>>>>    Procedure Set ComShowBorders Boolean value
19419>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BOOL to value
19420>>>>>>>>>    End_Procedure
19421>>>>>>>>>
19421>>>>>>>>>    Function ComShowLabels Returns Boolean
19423>>>>>>>>>        Boolean retVal
19423>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 54 OLE_VT_BOOL to retVal
19424>>>>>>>>>        Function_Return retVal
19425>>>>>>>>>    End_Function
19426>>>>>>>>>
19426>>>>>>>>>    Procedure Set ComShowLabels Boolean value
19428>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 54 OLE_VT_BOOL to value
19429>>>>>>>>>    End_Procedure
19430>>>>>>>>>
19430>>>>>>>>>    Function ComShowScrollBar Returns Boolean
19432>>>>>>>>>        Boolean retVal
19432>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 55 OLE_VT_BOOL to retVal
19433>>>>>>>>>        Function_Return retVal
19434>>>>>>>>>    End_Function
19435>>>>>>>>>
19435>>>>>>>>>    Procedure Set ComShowScrollBar Boolean value
19437>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 55 OLE_VT_BOOL to value
19438>>>>>>>>>    End_Procedure
19439>>>>>>>>>
19439>>>>>>>>>    Function ComScrollPos Returns Integer
19441>>>>>>>>>        Integer retVal
19441>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 56 OLE_VT_I4 to retVal
19442>>>>>>>>>        Function_Return retVal
19443>>>>>>>>>    End_Function
19444>>>>>>>>>
19444>>>>>>>>>    Procedure Set ComScrollPos Integer value
19446>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 56 OLE_VT_I4 to value
19447>>>>>>>>>    End_Procedure
19448>>>>>>>>>
19448>>>>>>>>>    Function ComResizable Returns XTPGalleryResizable
19450>>>>>>>>>        XTPGalleryResizable retVal
19450>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 62 OLE_VT_I4 to retVal
19451>>>>>>>>>        Function_Return retVal
19452>>>>>>>>>    End_Function
19453>>>>>>>>>
19453>>>>>>>>>    Procedure Set ComResizable XTPGalleryResizable value
19455>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 62 OLE_VT_I4 to value
19456>>>>>>>>>    End_Procedure
19457>>>>>>>>>
19457>>>>>>>>>    Function ComEnableTransparency Returns Boolean
19459>>>>>>>>>        Boolean retVal
19459>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 63 OLE_VT_BOOL to retVal
19460>>>>>>>>>        Function_Return retVal
19461>>>>>>>>>    End_Function
19462>>>>>>>>>
19462>>>>>>>>>    Procedure Set ComEnableTransparency Boolean value
19464>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 63 OLE_VT_BOOL to value
19465>>>>>>>>>    End_Procedure
19466>>>>>>>>>
19466>>>>>>>>>    Function ComControls Returns Variant
19468>>>>>>>>>        Handle hDispatchDriver
19468>>>>>>>>>        Variant retVal
19468>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19469>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
19470>>>>>>>>>        Function_Return retVal
19471>>>>>>>>>    End_Function
19472>>>>>>>>>
19472>>>>>>>>>    Function ComParent Returns Variant
19474>>>>>>>>>        Handle hDispatchDriver
19474>>>>>>>>>        Variant retVal
19474>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19475>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
19476>>>>>>>>>        Function_Return retVal
19477>>>>>>>>>    End_Function
19478>>>>>>>>>
19478>>>>>>>>>    Function ComIndex Returns Integer
19480>>>>>>>>>        Handle hDispatchDriver
19480>>>>>>>>>        Integer retVal
19480>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19481>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
19482>>>>>>>>>        Function_Return retVal
19483>>>>>>>>>    End_Function
19484>>>>>>>>>
19484>>>>>>>>>    Function ComType Returns XTPControlType
19486>>>>>>>>>        Handle hDispatchDriver
19486>>>>>>>>>        XTPControlType retVal
19486>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19487>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
19488>>>>>>>>>        Function_Return retVal
19489>>>>>>>>>    End_Function
19490>>>>>>>>>
19490>>>>>>>>>    Procedure ComDelete
19492>>>>>>>>>        Handle hDispatchDriver
19492>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19493>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
19494>>>>>>>>>    End_Procedure
19495>>>>>>>>>
19495>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
19497>>>>>>>>>        Handle hDispatchDriver
19497>>>>>>>>>        Variant retVal
19497>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19498>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
19499>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
19500>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
19501>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
19502>>>>>>>>>        Function_Return retVal
19503>>>>>>>>>    End_Function
19504>>>>>>>>>
19504>>>>>>>>>    Procedure ComSetFocus
19506>>>>>>>>>        Handle hDispatchDriver
19506>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19507>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
19508>>>>>>>>>    End_Procedure
19509>>>>>>>>>
19509>>>>>>>>>    Procedure ComExecute
19511>>>>>>>>>        Handle hDispatchDriver
19511>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19512>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
19513>>>>>>>>>    End_Procedure
19514>>>>>>>>>
19514>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
19516>>>>>>>>>        Handle hDispatchDriver
19516>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19517>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
19518>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
19519>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
19520>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
19521>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
19522>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
19523>>>>>>>>>    End_Procedure
19524>>>>>>>>>
19524>>>>>>>>>    Function ComRibbonGroup Returns Variant
19526>>>>>>>>>        Handle hDispatchDriver
19526>>>>>>>>>        Variant retVal
19526>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19527>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
19528>>>>>>>>>        Function_Return retVal
19529>>>>>>>>>    End_Function
19530>>>>>>>>>
19530>>>>>>>>>    Procedure ComReset
19532>>>>>>>>>        Handle hDispatchDriver
19532>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19533>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
19534>>>>>>>>>    End_Procedure
19535>>>>>>>>>
19535>>>>>>>>>    Function ComTop Returns Integer
19537>>>>>>>>>        Handle hDispatchDriver
19537>>>>>>>>>        Integer retVal
19537>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19538>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
19539>>>>>>>>>        Function_Return retVal
19540>>>>>>>>>    End_Function
19541>>>>>>>>>
19541>>>>>>>>>    Function ComLeft Returns Integer
19543>>>>>>>>>        Handle hDispatchDriver
19543>>>>>>>>>        Integer retVal
19543>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19544>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
19545>>>>>>>>>        Function_Return retVal
19546>>>>>>>>>    End_Function
19547>>>>>>>>>
19547>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
19549>>>>>>>>>        Handle hDispatchDriver
19549>>>>>>>>>        Variant retVal
19549>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19550>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19551>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
19552>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
19553>>>>>>>>>        Function_Return retVal
19554>>>>>>>>>    End_Function
19555>>>>>>>>>
19555>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
19557>>>>>>>>>        Handle hDispatchDriver
19557>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19558>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
19559>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
19560>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
19561>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
19562>>>>>>>>>    End_Procedure
19563>>>>>>>>>
19563>>>>>>>>>    Procedure ComSetItemsMargin Integer llLeft Integer llTop Integer llRight Integer llBottom
19565>>>>>>>>>        Handle hDispatchDriver
19565>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19566>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
19567>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
19568>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
19569>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
19570>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
19571>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 59 OLE_VT_VOID
19572>>>>>>>>>    End_Procedure
19573>>>>>>>>>
19573>>>>>>>>>    Procedure ComEnsureVisible Integer llIndex
19575>>>>>>>>>        Handle hDispatchDriver
19575>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19576>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
19577>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
19578>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 61 OLE_VT_VOID
19579>>>>>>>>>    End_Procedure
19580>>>>>>>>>End_Class
19581>>>>>>>>>
19581>>>>>>>>>// CoClass
19581>>>>>>>>>// CLSID: {C0DE2200-AD3D-450F-A51C-F3928CA3D480}
19581>>>>>>>>>Class cCJCommandBarGallery is a cComAutomationObject
19582>>>>>>>>>    Import_Class_Protocol cCJICommandBarGallery
19583>>>>>>>>>
19583>>>>>>>>>    Procedure Construct_Object
19585>>>>>>>>>        Forward Send Construct_Object
19587>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
19588>>>>>>>>>    End_Procedure
19589>>>>>>>>>End_Class
19590>>>>>>>>>
19590>>>>>>>>>// CLSID: {C0DE2200-1A6F-478C-8C8D-38C067A2BC1F}
19590>>>>>>>>>Class cCJICommandBarComboBox is a Mixin
19591>>>>>>>>>
19591>>>>>>>>>    Function ComChecked Returns Boolean
19593>>>>>>>>>        Boolean retVal
19593>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
19594>>>>>>>>>        Function_Return retVal
19595>>>>>>>>>    End_Function
19596>>>>>>>>>
19596>>>>>>>>>    Procedure Set ComChecked Boolean value
19598>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
19599>>>>>>>>>    End_Procedure
19600>>>>>>>>>
19600>>>>>>>>>    Function ComBeginGroup Returns Boolean
19602>>>>>>>>>        Boolean retVal
19602>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
19603>>>>>>>>>        Function_Return retVal
19604>>>>>>>>>    End_Function
19605>>>>>>>>>
19605>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
19607>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
19608>>>>>>>>>    End_Procedure
19609>>>>>>>>>
19609>>>>>>>>>    Function ComCaption Returns String
19611>>>>>>>>>        String retVal
19611>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
19612>>>>>>>>>        Function_Return retVal
19613>>>>>>>>>    End_Function
19614>>>>>>>>>
19614>>>>>>>>>    Procedure Set ComCaption String value
19616>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
19617>>>>>>>>>    End_Procedure
19618>>>>>>>>>
19618>>>>>>>>>    Function ComDescriptionText Returns String
19620>>>>>>>>>        String retVal
19620>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
19621>>>>>>>>>        Function_Return retVal
19622>>>>>>>>>    End_Function
19623>>>>>>>>>
19623>>>>>>>>>    Procedure Set ComDescriptionText String value
19625>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
19626>>>>>>>>>    End_Procedure
19627>>>>>>>>>
19627>>>>>>>>>    Function ComId Returns Integer
19629>>>>>>>>>        Integer retVal
19629>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
19630>>>>>>>>>        Function_Return retVal
19631>>>>>>>>>    End_Function
19632>>>>>>>>>
19632>>>>>>>>>    Procedure Set ComId Integer value
19634>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
19635>>>>>>>>>    End_Procedure
19636>>>>>>>>>
19636>>>>>>>>>    Function ComParameter Returns String
19638>>>>>>>>>        String retVal
19638>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
19639>>>>>>>>>        Function_Return retVal
19640>>>>>>>>>    End_Function
19641>>>>>>>>>
19641>>>>>>>>>    Procedure Set ComParameter String value
19643>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
19644>>>>>>>>>    End_Procedure
19645>>>>>>>>>
19645>>>>>>>>>    Function ComShortcutText Returns String
19647>>>>>>>>>        String retVal
19647>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
19648>>>>>>>>>        Function_Return retVal
19649>>>>>>>>>    End_Function
19650>>>>>>>>>
19650>>>>>>>>>    Procedure Set ComShortcutText String value
19652>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
19653>>>>>>>>>    End_Procedure
19654>>>>>>>>>
19654>>>>>>>>>    Function ComCustomShortcutText Returns String
19656>>>>>>>>>        String retVal
19656>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
19657>>>>>>>>>        Function_Return retVal
19658>>>>>>>>>    End_Function
19659>>>>>>>>>
19659>>>>>>>>>    Procedure Set ComCustomShortcutText String value
19661>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
19662>>>>>>>>>    End_Procedure
19663>>>>>>>>>
19663>>>>>>>>>    Function ComTooltipText Returns String
19665>>>>>>>>>        String retVal
19665>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
19666>>>>>>>>>        Function_Return retVal
19667>>>>>>>>>    End_Function
19668>>>>>>>>>
19668>>>>>>>>>    Procedure Set ComTooltipText String value
19670>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
19671>>>>>>>>>    End_Procedure
19672>>>>>>>>>
19672>>>>>>>>>    Function ComVisible Returns Boolean
19674>>>>>>>>>        Boolean retVal
19674>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
19675>>>>>>>>>        Function_Return retVal
19676>>>>>>>>>    End_Function
19677>>>>>>>>>
19677>>>>>>>>>    Procedure Set ComVisible Boolean value
19679>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
19680>>>>>>>>>    End_Procedure
19681>>>>>>>>>
19681>>>>>>>>>    Function ComEnabled Returns Boolean
19683>>>>>>>>>        Boolean retVal
19683>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
19684>>>>>>>>>        Function_Return retVal
19685>>>>>>>>>    End_Function
19686>>>>>>>>>
19686>>>>>>>>>    Procedure Set ComEnabled Boolean value
19688>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
19689>>>>>>>>>    End_Procedure
19690>>>>>>>>>
19690>>>>>>>>>    Function ComIconId Returns Integer
19692>>>>>>>>>        Integer retVal
19692>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
19693>>>>>>>>>        Function_Return retVal
19694>>>>>>>>>    End_Function
19695>>>>>>>>>
19695>>>>>>>>>    Procedure Set ComIconId Integer value
19697>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
19698>>>>>>>>>    End_Procedure
19699>>>>>>>>>
19699>>>>>>>>>    Function ComDefaultItem Returns Boolean
19701>>>>>>>>>        Boolean retVal
19701>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
19702>>>>>>>>>        Function_Return retVal
19703>>>>>>>>>    End_Function
19704>>>>>>>>>
19704>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
19706>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
19707>>>>>>>>>    End_Procedure
19708>>>>>>>>>
19708>>>>>>>>>    Function ComFlags Returns XTPControlFlags
19710>>>>>>>>>        XTPControlFlags retVal
19710>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
19711>>>>>>>>>        Function_Return retVal
19712>>>>>>>>>    End_Function
19713>>>>>>>>>
19713>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
19715>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
19716>>>>>>>>>    End_Procedure
19717>>>>>>>>>
19717>>>>>>>>>    Function ComCategory Returns String
19719>>>>>>>>>        String retVal
19719>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
19720>>>>>>>>>        Function_Return retVal
19721>>>>>>>>>    End_Function
19722>>>>>>>>>
19722>>>>>>>>>    Procedure Set ComCategory String value
19724>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
19725>>>>>>>>>    End_Procedure
19726>>>>>>>>>
19726>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
19728>>>>>>>>>        XTPControlHideFlags retVal
19728>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
19729>>>>>>>>>        Function_Return retVal
19730>>>>>>>>>    End_Function
19731>>>>>>>>>
19731>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
19733>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
19734>>>>>>>>>    End_Procedure
19735>>>>>>>>>
19735>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
19737>>>>>>>>>        Boolean retVal
19737>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
19738>>>>>>>>>        Function_Return retVal
19739>>>>>>>>>    End_Function
19740>>>>>>>>>
19740>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
19742>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
19743>>>>>>>>>    End_Procedure
19744>>>>>>>>>
19744>>>>>>>>>    Function ComAction Returns Variant
19746>>>>>>>>>        Variant retVal
19746>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
19747>>>>>>>>>        Function_Return retVal
19748>>>>>>>>>    End_Function
19749>>>>>>>>>
19749>>>>>>>>>    Procedure Set ComAction Variant value
19751>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
19752>>>>>>>>>    End_Procedure
19753>>>>>>>>>
19753>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
19755>>>>>>>>>        Integer retVal
19755>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
19756>>>>>>>>>        Function_Return retVal
19757>>>>>>>>>    End_Function
19758>>>>>>>>>
19758>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
19760>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
19761>>>>>>>>>    End_Procedure
19762>>>>>>>>>
19762>>>>>>>>>    Function ComWidth Returns Integer
19764>>>>>>>>>        Integer retVal
19764>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
19765>>>>>>>>>        Function_Return retVal
19766>>>>>>>>>    End_Function
19767>>>>>>>>>
19767>>>>>>>>>    Procedure Set ComWidth Integer value
19769>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
19770>>>>>>>>>    End_Procedure
19771>>>>>>>>>
19771>>>>>>>>>    Function ComHeight Returns Integer
19773>>>>>>>>>        Integer retVal
19773>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
19774>>>>>>>>>        Function_Return retVal
19775>>>>>>>>>    End_Function
19776>>>>>>>>>
19776>>>>>>>>>    Procedure Set ComHeight Integer value
19778>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
19779>>>>>>>>>    End_Procedure
19780>>>>>>>>>
19780>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
19782>>>>>>>>>        XTPButtonStyle retVal
19782>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
19783>>>>>>>>>        Function_Return retVal
19784>>>>>>>>>    End_Function
19785>>>>>>>>>
19785>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
19787>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
19788>>>>>>>>>    End_Procedure
19789>>>>>>>>>
19789>>>>>>>>>    Function ComKeyboardTip Returns String
19791>>>>>>>>>        String retVal
19791>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
19792>>>>>>>>>        Function_Return retVal
19793>>>>>>>>>    End_Function
19794>>>>>>>>>
19794>>>>>>>>>    Procedure Set ComKeyboardTip String value
19796>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
19797>>>>>>>>>    End_Procedure
19798>>>>>>>>>
19798>>>>>>>>>    Function ComCommandBar Returns Variant
19800>>>>>>>>>        Variant retVal
19800>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
19801>>>>>>>>>        Function_Return retVal
19802>>>>>>>>>    End_Function
19803>>>>>>>>>
19803>>>>>>>>>    Procedure Set ComCommandBar Variant value
19805>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
19806>>>>>>>>>    End_Procedure
19807>>>>>>>>>
19807>>>>>>>>>    Function ComDropDownWidth Returns Integer
19809>>>>>>>>>        Integer retVal
19809>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
19810>>>>>>>>>        Function_Return retVal
19811>>>>>>>>>    End_Function
19812>>>>>>>>>
19812>>>>>>>>>    Procedure Set ComDropDownWidth Integer value
19814>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
19815>>>>>>>>>    End_Procedure
19816>>>>>>>>>
19816>>>>>>>>>    Function ComDropDownListStyle Returns Boolean
19818>>>>>>>>>        Boolean retVal
19818>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BOOL to retVal
19819>>>>>>>>>        Function_Return retVal
19820>>>>>>>>>    End_Function
19821>>>>>>>>>
19821>>>>>>>>>    Procedure Set ComDropDownListStyle Boolean value
19823>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BOOL to value
19824>>>>>>>>>    End_Procedure
19825>>>>>>>>>
19825>>>>>>>>>    Function ComListIndex Returns Integer
19827>>>>>>>>>        Integer retVal
19827>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_I4 to retVal
19828>>>>>>>>>        Function_Return retVal
19829>>>>>>>>>    End_Function
19830>>>>>>>>>
19830>>>>>>>>>    Procedure Set ComListIndex Integer value
19832>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_I4 to value
19833>>>>>>>>>    End_Procedure
19834>>>>>>>>>
19834>>>>>>>>>    Function ComText Returns String
19836>>>>>>>>>        String retVal
19836>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 59 OLE_VT_BSTR to retVal
19837>>>>>>>>>        Function_Return retVal
19838>>>>>>>>>    End_Function
19839>>>>>>>>>
19839>>>>>>>>>    Procedure Set ComText String value
19841>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 59 OLE_VT_BSTR to value
19842>>>>>>>>>    End_Procedure
19843>>>>>>>>>
19843>>>>>>>>>    Function ComEditHint Returns String
19845>>>>>>>>>        String retVal
19845>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 67 OLE_VT_BSTR to retVal
19846>>>>>>>>>        Function_Return retVal
19847>>>>>>>>>    End_Function
19848>>>>>>>>>
19848>>>>>>>>>    Procedure Set ComEditHint String value
19850>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 67 OLE_VT_BSTR to value
19851>>>>>>>>>    End_Procedure
19852>>>>>>>>>
19852>>>>>>>>>    Function ComAutoComplete Returns Boolean
19854>>>>>>>>>        Boolean retVal
19854>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 68 OLE_VT_BOOL to retVal
19855>>>>>>>>>        Function_Return retVal
19856>>>>>>>>>    End_Function
19857>>>>>>>>>
19857>>>>>>>>>    Procedure Set ComAutoComplete Boolean value
19859>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 68 OLE_VT_BOOL to value
19860>>>>>>>>>    End_Procedure
19861>>>>>>>>>
19861>>>>>>>>>    Function ComShellAutoComplete Returns XTPShellAutoCompleteFlags
19863>>>>>>>>>        XTPShellAutoCompleteFlags retVal
19863>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_I4 to retVal
19864>>>>>>>>>        Function_Return retVal
19865>>>>>>>>>    End_Function
19866>>>>>>>>>
19866>>>>>>>>>    Procedure Set ComShellAutoComplete XTPShellAutoCompleteFlags value
19868>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_I4 to value
19869>>>>>>>>>    End_Procedure
19870>>>>>>>>>
19870>>>>>>>>>    Function ComEditIconId Returns Integer
19872>>>>>>>>>        Integer retVal
19872>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_I4 to retVal
19873>>>>>>>>>        Function_Return retVal
19874>>>>>>>>>    End_Function
19875>>>>>>>>>
19875>>>>>>>>>    Procedure Set ComEditIconId Integer value
19877>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_I4 to value
19878>>>>>>>>>    End_Procedure
19879>>>>>>>>>
19879>>>>>>>>>    Function ComEditStyle Returns XTPCommandBarEditStyle
19881>>>>>>>>>        XTPCommandBarEditStyle retVal
19881>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_I4 to retVal
19882>>>>>>>>>        Function_Return retVal
19883>>>>>>>>>    End_Function
19884>>>>>>>>>
19884>>>>>>>>>    Procedure Set ComEditStyle XTPCommandBarEditStyle value
19886>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_I4 to value
19887>>>>>>>>>    End_Procedure
19888>>>>>>>>>
19888>>>>>>>>>    Function ComDropDownItemCount Returns Integer
19890>>>>>>>>>        Integer retVal
19890>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 72 OLE_VT_I4 to retVal
19891>>>>>>>>>        Function_Return retVal
19892>>>>>>>>>    End_Function
19893>>>>>>>>>
19893>>>>>>>>>    Procedure Set ComDropDownItemCount Integer value
19895>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 72 OLE_VT_I4 to value
19896>>>>>>>>>    End_Procedure
19897>>>>>>>>>
19897>>>>>>>>>    Function ComThemedItems Returns Boolean
19899>>>>>>>>>        Boolean retVal
19899>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 73 OLE_VT_BOOL to retVal
19900>>>>>>>>>        Function_Return retVal
19901>>>>>>>>>    End_Function
19902>>>>>>>>>
19902>>>>>>>>>    Procedure Set ComThemedItems Boolean value
19904>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 73 OLE_VT_BOOL to value
19905>>>>>>>>>    End_Procedure
19906>>>>>>>>>
19906>>>>>>>>>    Function ComListIconId Returns Integer
19908>>>>>>>>>        Integer retVal
19908>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 74 OLE_VT_I4 to retVal
19909>>>>>>>>>        Function_Return retVal
19910>>>>>>>>>    End_Function
19911>>>>>>>>>
19911>>>>>>>>>    Procedure Set ComListIconId Integer value
19913>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 74 OLE_VT_I4 to value
19914>>>>>>>>>    End_Procedure
19915>>>>>>>>>
19915>>>>>>>>>    Function ComTextLimit Returns Integer
19917>>>>>>>>>        Integer retVal
19917>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 80 OLE_VT_I4 to retVal
19918>>>>>>>>>        Function_Return retVal
19919>>>>>>>>>    End_Function
19920>>>>>>>>>
19920>>>>>>>>>    Procedure Set ComTextLimit Integer value
19922>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 80 OLE_VT_I4 to value
19923>>>>>>>>>    End_Procedure
19924>>>>>>>>>
19924>>>>>>>>>    Function ComControls Returns Variant
19926>>>>>>>>>        Handle hDispatchDriver
19926>>>>>>>>>        Variant retVal
19926>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19927>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
19928>>>>>>>>>        Function_Return retVal
19929>>>>>>>>>    End_Function
19930>>>>>>>>>
19930>>>>>>>>>    Function ComParent Returns Variant
19932>>>>>>>>>        Handle hDispatchDriver
19932>>>>>>>>>        Variant retVal
19932>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19933>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
19934>>>>>>>>>        Function_Return retVal
19935>>>>>>>>>    End_Function
19936>>>>>>>>>
19936>>>>>>>>>    Function ComIndex Returns Integer
19938>>>>>>>>>        Handle hDispatchDriver
19938>>>>>>>>>        Integer retVal
19938>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19939>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
19940>>>>>>>>>        Function_Return retVal
19941>>>>>>>>>    End_Function
19942>>>>>>>>>
19942>>>>>>>>>    Function ComType Returns XTPControlType
19944>>>>>>>>>        Handle hDispatchDriver
19944>>>>>>>>>        XTPControlType retVal
19944>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19945>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
19946>>>>>>>>>        Function_Return retVal
19947>>>>>>>>>    End_Function
19948>>>>>>>>>
19948>>>>>>>>>    Procedure ComDelete
19950>>>>>>>>>        Handle hDispatchDriver
19950>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19951>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
19952>>>>>>>>>    End_Procedure
19953>>>>>>>>>
19953>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
19955>>>>>>>>>        Handle hDispatchDriver
19955>>>>>>>>>        Variant retVal
19955>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19956>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
19957>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
19958>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
19959>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
19960>>>>>>>>>        Function_Return retVal
19961>>>>>>>>>    End_Function
19962>>>>>>>>>
19962>>>>>>>>>    Procedure ComSetFocus
19964>>>>>>>>>        Handle hDispatchDriver
19964>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19965>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
19966>>>>>>>>>    End_Procedure
19967>>>>>>>>>
19967>>>>>>>>>    Procedure ComExecute
19969>>>>>>>>>        Handle hDispatchDriver
19969>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19970>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
19971>>>>>>>>>    End_Procedure
19972>>>>>>>>>
19972>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
19974>>>>>>>>>        Handle hDispatchDriver
19974>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19975>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
19976>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
19977>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
19978>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
19979>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
19980>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
19981>>>>>>>>>    End_Procedure
19982>>>>>>>>>
19982>>>>>>>>>    Function ComRibbonGroup Returns Variant
19984>>>>>>>>>        Handle hDispatchDriver
19984>>>>>>>>>        Variant retVal
19984>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19985>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
19986>>>>>>>>>        Function_Return retVal
19987>>>>>>>>>    End_Function
19988>>>>>>>>>
19988>>>>>>>>>    Procedure ComReset
19990>>>>>>>>>        Handle hDispatchDriver
19990>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19991>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
19992>>>>>>>>>    End_Procedure
19993>>>>>>>>>
19993>>>>>>>>>    Function ComTop Returns Integer
19995>>>>>>>>>        Handle hDispatchDriver
19995>>>>>>>>>        Integer retVal
19995>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
19996>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
19997>>>>>>>>>        Function_Return retVal
19998>>>>>>>>>    End_Function
19999>>>>>>>>>
19999>>>>>>>>>    Function ComLeft Returns Integer
20001>>>>>>>>>        Handle hDispatchDriver
20001>>>>>>>>>        Integer retVal
20001>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20002>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
20003>>>>>>>>>        Function_Return retVal
20004>>>>>>>>>    End_Function
20005>>>>>>>>>
20005>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
20007>>>>>>>>>        Handle hDispatchDriver
20007>>>>>>>>>        Variant retVal
20007>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20008>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20009>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
20010>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
20011>>>>>>>>>        Function_Return retVal
20012>>>>>>>>>    End_Function
20013>>>>>>>>>
20013>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
20015>>>>>>>>>        Handle hDispatchDriver
20015>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20016>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20017>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
20018>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
20019>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
20020>>>>>>>>>    End_Procedure
20021>>>>>>>>>
20021>>>>>>>>>    Procedure ComAddItem String llText Variant llIndex
20023>>>>>>>>>        Handle hDispatchDriver
20023>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20024>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20025>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
20026>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llIndex
20027>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 51 OLE_VT_VOID
20028>>>>>>>>>    End_Procedure
20029>>>>>>>>>
20029>>>>>>>>>    Function ComList Integer llIndex Returns String
20031>>>>>>>>>        Handle hDispatchDriver
20031>>>>>>>>>        String retVal
20031>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20032>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20033>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
20034>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 55 OLE_VT_BSTR to retVal
20035>>>>>>>>>        Function_Return retVal
20036>>>>>>>>>    End_Function
20037>>>>>>>>>
20037>>>>>>>>>    Procedure ComClear
20039>>>>>>>>>        Handle hDispatchDriver
20039>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20040>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 56 OLE_VT_VOID
20041>>>>>>>>>    End_Procedure
20042>>>>>>>>>
20042>>>>>>>>>    Function ComListCount Returns Integer
20044>>>>>>>>>        Handle hDispatchDriver
20044>>>>>>>>>        Integer retVal
20044>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20045>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 57 OLE_VT_I4 to retVal
20046>>>>>>>>>        Function_Return retVal
20047>>>>>>>>>    End_Function
20048>>>>>>>>>
20048>>>>>>>>>    Procedure ComRemoveItem Integer llnIndex
20050>>>>>>>>>        Handle hDispatchDriver
20050>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20051>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20052>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnIndex
20053>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 58 OLE_VT_VOID
20054>>>>>>>>>    End_Procedure
20055>>>>>>>>>
20055>>>>>>>>>    Function ComFindItem String llText Returns Integer
20057>>>>>>>>>        Handle hDispatchDriver
20057>>>>>>>>>        Integer retVal
20057>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20058>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20059>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
20060>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 61 OLE_VT_I4 to retVal
20061>>>>>>>>>        Function_Return retVal
20062>>>>>>>>>    End_Function
20063>>>>>>>>>
20063>>>>>>>>>    Function ComItemData Integer llIndex Returns Integer
20065>>>>>>>>>        Handle hDispatchDriver
20065>>>>>>>>>        Integer retVal
20065>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20066>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20067>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
20068>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 62 OLE_VT_I4 to retVal
20069>>>>>>>>>        Function_Return retVal
20070>>>>>>>>>    End_Function
20071>>>>>>>>>
20071>>>>>>>>>    Procedure Set ComItemData Integer llIndex Integer value
20073>>>>>>>>>        Handle hDispatchDriver
20073>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20074>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20075>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
20076>>>>>>>>>        Set ComProperty of hDispatchDriver 62 OLE_VT_I4 to value
20077>>>>>>>>>    End_Procedure
20078>>>>>>>>>
20078>>>>>>>>>    Function ComEditHandle Returns OLE_HANDLE
20080>>>>>>>>>        Handle hDispatchDriver
20080>>>>>>>>>        OLE_HANDLE retVal
20080>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20081>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 63 OLE_VT_I4 to retVal
20082>>>>>>>>>        Function_Return retVal
20083>>>>>>>>>    End_Function
20084>>>>>>>>>
20084>>>>>>>>>    Function ComHasFocus Returns Boolean
20086>>>>>>>>>        Handle hDispatchDriver
20086>>>>>>>>>        Boolean retVal
20086>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20087>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 66 OLE_VT_BOOL to retVal
20088>>>>>>>>>        Function_Return retVal
20089>>>>>>>>>    End_Function
20090>>>>>>>>>End_Class
20091>>>>>>>>>
20091>>>>>>>>>// CoClass
20091>>>>>>>>>// CLSID: {C0DE2200-B90A-44F8-86C2-B28D4540ABFA}
20091>>>>>>>>>Class cCJCommandBarComboBox is a cComAutomationObject
20092>>>>>>>>>    Import_Class_Protocol cCJICommandBarComboBox
20093>>>>>>>>>
20093>>>>>>>>>    Procedure Construct_Object
20095>>>>>>>>>        Forward Send Construct_Object
20097>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
20098>>>>>>>>>    End_Procedure
20099>>>>>>>>>End_Class
20100>>>>>>>>>
20100>>>>>>>>>// CLSID: {C0DE2200-5C60-475B-A774-4B22FAC0B9EC}
20100>>>>>>>>>Class cCJICommandBarCheckBox is a Mixin
20101>>>>>>>>>
20101>>>>>>>>>    Function ComChecked Returns Integer
20103>>>>>>>>>        Integer retVal
20103>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_I4 to retVal
20104>>>>>>>>>        Function_Return retVal
20105>>>>>>>>>    End_Function
20106>>>>>>>>>
20106>>>>>>>>>    Procedure Set ComChecked Integer value
20108>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_I4 to value
20109>>>>>>>>>    End_Procedure
20110>>>>>>>>>
20110>>>>>>>>>    Function ComBeginGroup Returns Boolean
20112>>>>>>>>>        Boolean retVal
20112>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
20113>>>>>>>>>        Function_Return retVal
20114>>>>>>>>>    End_Function
20115>>>>>>>>>
20115>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
20117>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
20118>>>>>>>>>    End_Procedure
20119>>>>>>>>>
20119>>>>>>>>>    Function ComCaption Returns String
20121>>>>>>>>>        String retVal
20121>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
20122>>>>>>>>>        Function_Return retVal
20123>>>>>>>>>    End_Function
20124>>>>>>>>>
20124>>>>>>>>>    Procedure Set ComCaption String value
20126>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
20127>>>>>>>>>    End_Procedure
20128>>>>>>>>>
20128>>>>>>>>>    Function ComDescriptionText Returns String
20130>>>>>>>>>        String retVal
20130>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
20131>>>>>>>>>        Function_Return retVal
20132>>>>>>>>>    End_Function
20133>>>>>>>>>
20133>>>>>>>>>    Procedure Set ComDescriptionText String value
20135>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
20136>>>>>>>>>    End_Procedure
20137>>>>>>>>>
20137>>>>>>>>>    Function ComId Returns Integer
20139>>>>>>>>>        Integer retVal
20139>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
20140>>>>>>>>>        Function_Return retVal
20141>>>>>>>>>    End_Function
20142>>>>>>>>>
20142>>>>>>>>>    Procedure Set ComId Integer value
20144>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
20145>>>>>>>>>    End_Procedure
20146>>>>>>>>>
20146>>>>>>>>>    Function ComParameter Returns String
20148>>>>>>>>>        String retVal
20148>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
20149>>>>>>>>>        Function_Return retVal
20150>>>>>>>>>    End_Function
20151>>>>>>>>>
20151>>>>>>>>>    Procedure Set ComParameter String value
20153>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
20154>>>>>>>>>    End_Procedure
20155>>>>>>>>>
20155>>>>>>>>>    Function ComShortcutText Returns String
20157>>>>>>>>>        String retVal
20157>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
20158>>>>>>>>>        Function_Return retVal
20159>>>>>>>>>    End_Function
20160>>>>>>>>>
20160>>>>>>>>>    Procedure Set ComShortcutText String value
20162>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
20163>>>>>>>>>    End_Procedure
20164>>>>>>>>>
20164>>>>>>>>>    Function ComCustomShortcutText Returns String
20166>>>>>>>>>        String retVal
20166>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
20167>>>>>>>>>        Function_Return retVal
20168>>>>>>>>>    End_Function
20169>>>>>>>>>
20169>>>>>>>>>    Procedure Set ComCustomShortcutText String value
20171>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
20172>>>>>>>>>    End_Procedure
20173>>>>>>>>>
20173>>>>>>>>>    Function ComTooltipText Returns String
20175>>>>>>>>>        String retVal
20175>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
20176>>>>>>>>>        Function_Return retVal
20177>>>>>>>>>    End_Function
20178>>>>>>>>>
20178>>>>>>>>>    Procedure Set ComTooltipText String value
20180>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
20181>>>>>>>>>    End_Procedure
20182>>>>>>>>>
20182>>>>>>>>>    Function ComVisible Returns Boolean
20184>>>>>>>>>        Boolean retVal
20184>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
20185>>>>>>>>>        Function_Return retVal
20186>>>>>>>>>    End_Function
20187>>>>>>>>>
20187>>>>>>>>>    Procedure Set ComVisible Boolean value
20189>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
20190>>>>>>>>>    End_Procedure
20191>>>>>>>>>
20191>>>>>>>>>    Function ComEnabled Returns Boolean
20193>>>>>>>>>        Boolean retVal
20193>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
20194>>>>>>>>>        Function_Return retVal
20195>>>>>>>>>    End_Function
20196>>>>>>>>>
20196>>>>>>>>>    Procedure Set ComEnabled Boolean value
20198>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
20199>>>>>>>>>    End_Procedure
20200>>>>>>>>>
20200>>>>>>>>>    Function ComIconId Returns Integer
20202>>>>>>>>>        Integer retVal
20202>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
20203>>>>>>>>>        Function_Return retVal
20204>>>>>>>>>    End_Function
20205>>>>>>>>>
20205>>>>>>>>>    Procedure Set ComIconId Integer value
20207>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
20208>>>>>>>>>    End_Procedure
20209>>>>>>>>>
20209>>>>>>>>>    Function ComDefaultItem Returns Boolean
20211>>>>>>>>>        Boolean retVal
20211>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
20212>>>>>>>>>        Function_Return retVal
20213>>>>>>>>>    End_Function
20214>>>>>>>>>
20214>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
20216>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
20217>>>>>>>>>    End_Procedure
20218>>>>>>>>>
20218>>>>>>>>>    Function ComFlags Returns XTPControlFlags
20220>>>>>>>>>        XTPControlFlags retVal
20220>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
20221>>>>>>>>>        Function_Return retVal
20222>>>>>>>>>    End_Function
20223>>>>>>>>>
20223>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
20225>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
20226>>>>>>>>>    End_Procedure
20227>>>>>>>>>
20227>>>>>>>>>    Function ComCategory Returns String
20229>>>>>>>>>        String retVal
20229>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
20230>>>>>>>>>        Function_Return retVal
20231>>>>>>>>>    End_Function
20232>>>>>>>>>
20232>>>>>>>>>    Procedure Set ComCategory String value
20234>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
20235>>>>>>>>>    End_Procedure
20236>>>>>>>>>
20236>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
20238>>>>>>>>>        XTPControlHideFlags retVal
20238>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
20239>>>>>>>>>        Function_Return retVal
20240>>>>>>>>>    End_Function
20241>>>>>>>>>
20241>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
20243>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
20244>>>>>>>>>    End_Procedure
20245>>>>>>>>>
20245>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
20247>>>>>>>>>        Boolean retVal
20247>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
20248>>>>>>>>>        Function_Return retVal
20249>>>>>>>>>    End_Function
20250>>>>>>>>>
20250>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
20252>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
20253>>>>>>>>>    End_Procedure
20254>>>>>>>>>
20254>>>>>>>>>    Function ComAction Returns Variant
20256>>>>>>>>>        Variant retVal
20256>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
20257>>>>>>>>>        Function_Return retVal
20258>>>>>>>>>    End_Function
20259>>>>>>>>>
20259>>>>>>>>>    Procedure Set ComAction Variant value
20261>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
20262>>>>>>>>>    End_Procedure
20263>>>>>>>>>
20263>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
20265>>>>>>>>>        Integer retVal
20265>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
20266>>>>>>>>>        Function_Return retVal
20267>>>>>>>>>    End_Function
20268>>>>>>>>>
20268>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
20270>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
20271>>>>>>>>>    End_Procedure
20272>>>>>>>>>
20272>>>>>>>>>    Function ComWidth Returns Integer
20274>>>>>>>>>        Integer retVal
20274>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
20275>>>>>>>>>        Function_Return retVal
20276>>>>>>>>>    End_Function
20277>>>>>>>>>
20277>>>>>>>>>    Procedure Set ComWidth Integer value
20279>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
20280>>>>>>>>>    End_Procedure
20281>>>>>>>>>
20281>>>>>>>>>    Function ComHeight Returns Integer
20283>>>>>>>>>        Integer retVal
20283>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
20284>>>>>>>>>        Function_Return retVal
20285>>>>>>>>>    End_Function
20286>>>>>>>>>
20286>>>>>>>>>    Procedure Set ComHeight Integer value
20288>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
20289>>>>>>>>>    End_Procedure
20290>>>>>>>>>
20290>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
20292>>>>>>>>>        XTPButtonStyle retVal
20292>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
20293>>>>>>>>>        Function_Return retVal
20294>>>>>>>>>    End_Function
20295>>>>>>>>>
20295>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
20297>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
20298>>>>>>>>>    End_Procedure
20299>>>>>>>>>
20299>>>>>>>>>    Function ComKeyboardTip Returns String
20301>>>>>>>>>        String retVal
20301>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
20302>>>>>>>>>        Function_Return retVal
20303>>>>>>>>>    End_Function
20304>>>>>>>>>
20304>>>>>>>>>    Procedure Set ComKeyboardTip String value
20306>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
20307>>>>>>>>>    End_Procedure
20308>>>>>>>>>
20308>>>>>>>>>    Function ComControls Returns Variant
20310>>>>>>>>>        Handle hDispatchDriver
20310>>>>>>>>>        Variant retVal
20310>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20311>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
20312>>>>>>>>>        Function_Return retVal
20313>>>>>>>>>    End_Function
20314>>>>>>>>>
20314>>>>>>>>>    Function ComParent Returns Variant
20316>>>>>>>>>        Handle hDispatchDriver
20316>>>>>>>>>        Variant retVal
20316>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20317>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
20318>>>>>>>>>        Function_Return retVal
20319>>>>>>>>>    End_Function
20320>>>>>>>>>
20320>>>>>>>>>    Function ComIndex Returns Integer
20322>>>>>>>>>        Handle hDispatchDriver
20322>>>>>>>>>        Integer retVal
20322>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20323>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
20324>>>>>>>>>        Function_Return retVal
20325>>>>>>>>>    End_Function
20326>>>>>>>>>
20326>>>>>>>>>    Function ComType Returns XTPControlType
20328>>>>>>>>>        Handle hDispatchDriver
20328>>>>>>>>>        XTPControlType retVal
20328>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20329>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
20330>>>>>>>>>        Function_Return retVal
20331>>>>>>>>>    End_Function
20332>>>>>>>>>
20332>>>>>>>>>    Procedure ComDelete
20334>>>>>>>>>        Handle hDispatchDriver
20334>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20335>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
20336>>>>>>>>>    End_Procedure
20337>>>>>>>>>
20337>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
20339>>>>>>>>>        Handle hDispatchDriver
20339>>>>>>>>>        Variant retVal
20339>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20340>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20341>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
20342>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
20343>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
20344>>>>>>>>>        Function_Return retVal
20345>>>>>>>>>    End_Function
20346>>>>>>>>>
20346>>>>>>>>>    Procedure ComSetFocus
20348>>>>>>>>>        Handle hDispatchDriver
20348>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20349>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
20350>>>>>>>>>    End_Procedure
20351>>>>>>>>>
20351>>>>>>>>>    Procedure ComExecute
20353>>>>>>>>>        Handle hDispatchDriver
20353>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20354>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
20355>>>>>>>>>    End_Procedure
20356>>>>>>>>>
20356>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
20358>>>>>>>>>        Handle hDispatchDriver
20358>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20359>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
20360>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
20361>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
20362>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
20363>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
20364>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
20365>>>>>>>>>    End_Procedure
20366>>>>>>>>>
20366>>>>>>>>>    Function ComRibbonGroup Returns Variant
20368>>>>>>>>>        Handle hDispatchDriver
20368>>>>>>>>>        Variant retVal
20368>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20369>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
20370>>>>>>>>>        Function_Return retVal
20371>>>>>>>>>    End_Function
20372>>>>>>>>>
20372>>>>>>>>>    Procedure ComReset
20374>>>>>>>>>        Handle hDispatchDriver
20374>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20375>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
20376>>>>>>>>>    End_Procedure
20377>>>>>>>>>
20377>>>>>>>>>    Function ComTop Returns Integer
20379>>>>>>>>>        Handle hDispatchDriver
20379>>>>>>>>>        Integer retVal
20379>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20380>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
20381>>>>>>>>>        Function_Return retVal
20382>>>>>>>>>    End_Function
20383>>>>>>>>>
20383>>>>>>>>>    Function ComLeft Returns Integer
20385>>>>>>>>>        Handle hDispatchDriver
20385>>>>>>>>>        Integer retVal
20385>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20386>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
20387>>>>>>>>>        Function_Return retVal
20388>>>>>>>>>    End_Function
20389>>>>>>>>>
20389>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
20391>>>>>>>>>        Handle hDispatchDriver
20391>>>>>>>>>        Variant retVal
20391>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20392>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20393>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
20394>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
20395>>>>>>>>>        Function_Return retVal
20396>>>>>>>>>    End_Function
20397>>>>>>>>>
20397>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
20399>>>>>>>>>        Handle hDispatchDriver
20399>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20400>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20401>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
20402>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
20403>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
20404>>>>>>>>>    End_Procedure
20405>>>>>>>>>End_Class
20406>>>>>>>>>
20406>>>>>>>>>// CoClass
20406>>>>>>>>>// CLSID: {C0DE2200-6975-465C-B19C-FFA0021AAA05}
20406>>>>>>>>>Class cCJCommandBarCheckBox is a cComAutomationObject
20407>>>>>>>>>    Import_Class_Protocol cCJICommandBarCheckBox
20408>>>>>>>>>
20408>>>>>>>>>    Procedure Construct_Object
20410>>>>>>>>>        Forward Send Construct_Object
20412>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
20413>>>>>>>>>    End_Procedure
20414>>>>>>>>>End_Class
20415>>>>>>>>>
20415>>>>>>>>>// CLSID: {C0DE2200-7A03-46D9-B095-9FB1F825530D}
20415>>>>>>>>>Class cCJICommandBarEdit is a Mixin
20416>>>>>>>>>
20416>>>>>>>>>    Function ComChecked Returns Boolean
20418>>>>>>>>>        Boolean retVal
20418>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
20419>>>>>>>>>        Function_Return retVal
20420>>>>>>>>>    End_Function
20421>>>>>>>>>
20421>>>>>>>>>    Procedure Set ComChecked Boolean value
20423>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
20424>>>>>>>>>    End_Procedure
20425>>>>>>>>>
20425>>>>>>>>>    Function ComBeginGroup Returns Boolean
20427>>>>>>>>>        Boolean retVal
20427>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
20428>>>>>>>>>        Function_Return retVal
20429>>>>>>>>>    End_Function
20430>>>>>>>>>
20430>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
20432>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
20433>>>>>>>>>    End_Procedure
20434>>>>>>>>>
20434>>>>>>>>>    Function ComCaption Returns String
20436>>>>>>>>>        String retVal
20436>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
20437>>>>>>>>>        Function_Return retVal
20438>>>>>>>>>    End_Function
20439>>>>>>>>>
20439>>>>>>>>>    Procedure Set ComCaption String value
20441>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
20442>>>>>>>>>    End_Procedure
20443>>>>>>>>>
20443>>>>>>>>>    Function ComDescriptionText Returns String
20445>>>>>>>>>        String retVal
20445>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
20446>>>>>>>>>        Function_Return retVal
20447>>>>>>>>>    End_Function
20448>>>>>>>>>
20448>>>>>>>>>    Procedure Set ComDescriptionText String value
20450>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
20451>>>>>>>>>    End_Procedure
20452>>>>>>>>>
20452>>>>>>>>>    Function ComId Returns Integer
20454>>>>>>>>>        Integer retVal
20454>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
20455>>>>>>>>>        Function_Return retVal
20456>>>>>>>>>    End_Function
20457>>>>>>>>>
20457>>>>>>>>>    Procedure Set ComId Integer value
20459>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
20460>>>>>>>>>    End_Procedure
20461>>>>>>>>>
20461>>>>>>>>>    Function ComParameter Returns String
20463>>>>>>>>>        String retVal
20463>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
20464>>>>>>>>>        Function_Return retVal
20465>>>>>>>>>    End_Function
20466>>>>>>>>>
20466>>>>>>>>>    Procedure Set ComParameter String value
20468>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
20469>>>>>>>>>    End_Procedure
20470>>>>>>>>>
20470>>>>>>>>>    Function ComShortcutText Returns String
20472>>>>>>>>>        String retVal
20472>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
20473>>>>>>>>>        Function_Return retVal
20474>>>>>>>>>    End_Function
20475>>>>>>>>>
20475>>>>>>>>>    Procedure Set ComShortcutText String value
20477>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
20478>>>>>>>>>    End_Procedure
20479>>>>>>>>>
20479>>>>>>>>>    Function ComCustomShortcutText Returns String
20481>>>>>>>>>        String retVal
20481>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
20482>>>>>>>>>        Function_Return retVal
20483>>>>>>>>>    End_Function
20484>>>>>>>>>
20484>>>>>>>>>    Procedure Set ComCustomShortcutText String value
20486>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
20487>>>>>>>>>    End_Procedure
20488>>>>>>>>>
20488>>>>>>>>>    Function ComTooltipText Returns String
20490>>>>>>>>>        String retVal
20490>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
20491>>>>>>>>>        Function_Return retVal
20492>>>>>>>>>    End_Function
20493>>>>>>>>>
20493>>>>>>>>>    Procedure Set ComTooltipText String value
20495>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
20496>>>>>>>>>    End_Procedure
20497>>>>>>>>>
20497>>>>>>>>>    Function ComVisible Returns Boolean
20499>>>>>>>>>        Boolean retVal
20499>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
20500>>>>>>>>>        Function_Return retVal
20501>>>>>>>>>    End_Function
20502>>>>>>>>>
20502>>>>>>>>>    Procedure Set ComVisible Boolean value
20504>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
20505>>>>>>>>>    End_Procedure
20506>>>>>>>>>
20506>>>>>>>>>    Function ComEnabled Returns Boolean
20508>>>>>>>>>        Boolean retVal
20508>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
20509>>>>>>>>>        Function_Return retVal
20510>>>>>>>>>    End_Function
20511>>>>>>>>>
20511>>>>>>>>>    Procedure Set ComEnabled Boolean value
20513>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
20514>>>>>>>>>    End_Procedure
20515>>>>>>>>>
20515>>>>>>>>>    Function ComIconId Returns Integer
20517>>>>>>>>>        Integer retVal
20517>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
20518>>>>>>>>>        Function_Return retVal
20519>>>>>>>>>    End_Function
20520>>>>>>>>>
20520>>>>>>>>>    Procedure Set ComIconId Integer value
20522>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
20523>>>>>>>>>    End_Procedure
20524>>>>>>>>>
20524>>>>>>>>>    Function ComDefaultItem Returns Boolean
20526>>>>>>>>>        Boolean retVal
20526>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
20527>>>>>>>>>        Function_Return retVal
20528>>>>>>>>>    End_Function
20529>>>>>>>>>
20529>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
20531>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
20532>>>>>>>>>    End_Procedure
20533>>>>>>>>>
20533>>>>>>>>>    Function ComFlags Returns XTPControlFlags
20535>>>>>>>>>        XTPControlFlags retVal
20535>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
20536>>>>>>>>>        Function_Return retVal
20537>>>>>>>>>    End_Function
20538>>>>>>>>>
20538>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
20540>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
20541>>>>>>>>>    End_Procedure
20542>>>>>>>>>
20542>>>>>>>>>    Function ComCategory Returns String
20544>>>>>>>>>        String retVal
20544>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
20545>>>>>>>>>        Function_Return retVal
20546>>>>>>>>>    End_Function
20547>>>>>>>>>
20547>>>>>>>>>    Procedure Set ComCategory String value
20549>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
20550>>>>>>>>>    End_Procedure
20551>>>>>>>>>
20551>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
20553>>>>>>>>>        XTPControlHideFlags retVal
20553>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
20554>>>>>>>>>        Function_Return retVal
20555>>>>>>>>>    End_Function
20556>>>>>>>>>
20556>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
20558>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
20559>>>>>>>>>    End_Procedure
20560>>>>>>>>>
20560>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
20562>>>>>>>>>        Boolean retVal
20562>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
20563>>>>>>>>>        Function_Return retVal
20564>>>>>>>>>    End_Function
20565>>>>>>>>>
20565>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
20567>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
20568>>>>>>>>>    End_Procedure
20569>>>>>>>>>
20569>>>>>>>>>    Function ComAction Returns Variant
20571>>>>>>>>>        Variant retVal
20571>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
20572>>>>>>>>>        Function_Return retVal
20573>>>>>>>>>    End_Function
20574>>>>>>>>>
20574>>>>>>>>>    Procedure Set ComAction Variant value
20576>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
20577>>>>>>>>>    End_Procedure
20578>>>>>>>>>
20578>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
20580>>>>>>>>>        Integer retVal
20580>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
20581>>>>>>>>>        Function_Return retVal
20582>>>>>>>>>    End_Function
20583>>>>>>>>>
20583>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
20585>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
20586>>>>>>>>>    End_Procedure
20587>>>>>>>>>
20587>>>>>>>>>    Function ComWidth Returns Integer
20589>>>>>>>>>        Integer retVal
20589>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
20590>>>>>>>>>        Function_Return retVal
20591>>>>>>>>>    End_Function
20592>>>>>>>>>
20592>>>>>>>>>    Procedure Set ComWidth Integer value
20594>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
20595>>>>>>>>>    End_Procedure
20596>>>>>>>>>
20596>>>>>>>>>    Function ComHeight Returns Integer
20598>>>>>>>>>        Integer retVal
20598>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
20599>>>>>>>>>        Function_Return retVal
20600>>>>>>>>>    End_Function
20601>>>>>>>>>
20601>>>>>>>>>    Procedure Set ComHeight Integer value
20603>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
20604>>>>>>>>>    End_Procedure
20605>>>>>>>>>
20605>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
20607>>>>>>>>>        XTPButtonStyle retVal
20607>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
20608>>>>>>>>>        Function_Return retVal
20609>>>>>>>>>    End_Function
20610>>>>>>>>>
20610>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
20612>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
20613>>>>>>>>>    End_Procedure
20614>>>>>>>>>
20614>>>>>>>>>    Function ComKeyboardTip Returns String
20616>>>>>>>>>        String retVal
20616>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
20617>>>>>>>>>        Function_Return retVal
20618>>>>>>>>>    End_Function
20619>>>>>>>>>
20619>>>>>>>>>    Procedure Set ComKeyboardTip String value
20621>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
20622>>>>>>>>>    End_Procedure
20623>>>>>>>>>
20623>>>>>>>>>    Function ComShowLabel Returns Boolean
20625>>>>>>>>>        Boolean retVal
20625>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_BOOL to retVal
20626>>>>>>>>>        Function_Return retVal
20627>>>>>>>>>    End_Function
20628>>>>>>>>>
20628>>>>>>>>>    Procedure Set ComShowLabel Boolean value
20630>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_BOOL to value
20631>>>>>>>>>    End_Procedure
20632>>>>>>>>>
20632>>>>>>>>>    Function ComText Returns String
20634>>>>>>>>>        String retVal
20634>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 59 OLE_VT_BSTR to retVal
20635>>>>>>>>>        Function_Return retVal
20636>>>>>>>>>    End_Function
20637>>>>>>>>>
20637>>>>>>>>>    Procedure Set ComText String value
20639>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 59 OLE_VT_BSTR to value
20640>>>>>>>>>    End_Procedure
20641>>>>>>>>>
20641>>>>>>>>>    Function ComReadOnly Returns Boolean
20643>>>>>>>>>        Boolean retVal
20643>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_BOOL to retVal
20644>>>>>>>>>        Function_Return retVal
20645>>>>>>>>>    End_Function
20646>>>>>>>>>
20646>>>>>>>>>    Procedure Set ComReadOnly Boolean value
20648>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 60 OLE_VT_BOOL to value
20649>>>>>>>>>    End_Procedure
20650>>>>>>>>>
20650>>>>>>>>>    Function ComEditHint Returns String
20652>>>>>>>>>        String retVal
20652>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 67 OLE_VT_BSTR to retVal
20653>>>>>>>>>        Function_Return retVal
20654>>>>>>>>>    End_Function
20655>>>>>>>>>
20655>>>>>>>>>    Procedure Set ComEditHint String value
20657>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 67 OLE_VT_BSTR to value
20658>>>>>>>>>    End_Procedure
20659>>>>>>>>>
20659>>>>>>>>>    Function ComShellAutoComplete Returns XTPShellAutoCompleteFlags
20661>>>>>>>>>        XTPShellAutoCompleteFlags retVal
20661>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_I4 to retVal
20662>>>>>>>>>        Function_Return retVal
20663>>>>>>>>>    End_Function
20664>>>>>>>>>
20664>>>>>>>>>    Procedure Set ComShellAutoComplete XTPShellAutoCompleteFlags value
20666>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_I4 to value
20667>>>>>>>>>    End_Procedure
20668>>>>>>>>>
20668>>>>>>>>>    Function ComEditIconId Returns Integer
20670>>>>>>>>>        Integer retVal
20670>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_I4 to retVal
20671>>>>>>>>>        Function_Return retVal
20672>>>>>>>>>    End_Function
20673>>>>>>>>>
20673>>>>>>>>>    Procedure Set ComEditIconId Integer value
20675>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_I4 to value
20676>>>>>>>>>    End_Procedure
20677>>>>>>>>>
20677>>>>>>>>>    Function ComEditStyle Returns XTPCommandBarEditStyle
20679>>>>>>>>>        XTPCommandBarEditStyle retVal
20679>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_I4 to retVal
20680>>>>>>>>>        Function_Return retVal
20681>>>>>>>>>    End_Function
20682>>>>>>>>>
20682>>>>>>>>>    Procedure Set ComEditStyle XTPCommandBarEditStyle value
20684>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_I4 to value
20685>>>>>>>>>    End_Procedure
20686>>>>>>>>>
20686>>>>>>>>>    Function ComShowSpinButtons Returns Boolean
20688>>>>>>>>>        Boolean retVal
20688>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 72 OLE_VT_BOOL to retVal
20689>>>>>>>>>        Function_Return retVal
20690>>>>>>>>>    End_Function
20691>>>>>>>>>
20691>>>>>>>>>    Procedure Set ComShowSpinButtons Boolean value
20693>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 72 OLE_VT_BOOL to value
20694>>>>>>>>>    End_Procedure
20695>>>>>>>>>
20695>>>>>>>>>    Function ComBuddyButtonId Returns Integer
20697>>>>>>>>>        Integer retVal
20697>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 81 OLE_VT_I4 to retVal
20698>>>>>>>>>        Function_Return retVal
20699>>>>>>>>>    End_Function
20700>>>>>>>>>
20700>>>>>>>>>    Procedure Set ComBuddyButtonId Integer value
20702>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 81 OLE_VT_I4 to value
20703>>>>>>>>>    End_Procedure
20704>>>>>>>>>
20704>>>>>>>>>    Function ComTextLimit Returns Integer
20706>>>>>>>>>        Integer retVal
20706>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 80 OLE_VT_I4 to retVal
20707>>>>>>>>>        Function_Return retVal
20708>>>>>>>>>    End_Function
20709>>>>>>>>>
20709>>>>>>>>>    Procedure Set ComTextLimit Integer value
20711>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 80 OLE_VT_I4 to value
20712>>>>>>>>>    End_Procedure
20713>>>>>>>>>
20713>>>>>>>>>    Function ComNumericOnly Returns Boolean
20715>>>>>>>>>        Boolean retVal
20715>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 82 OLE_VT_BOOL to retVal
20716>>>>>>>>>        Function_Return retVal
20717>>>>>>>>>    End_Function
20718>>>>>>>>>
20718>>>>>>>>>    Procedure Set ComNumericOnly Boolean value
20720>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 82 OLE_VT_BOOL to value
20721>>>>>>>>>    End_Procedure
20722>>>>>>>>>
20722>>>>>>>>>    Function ComControls Returns Variant
20724>>>>>>>>>        Handle hDispatchDriver
20724>>>>>>>>>        Variant retVal
20724>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20725>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
20726>>>>>>>>>        Function_Return retVal
20727>>>>>>>>>    End_Function
20728>>>>>>>>>
20728>>>>>>>>>    Function ComParent Returns Variant
20730>>>>>>>>>        Handle hDispatchDriver
20730>>>>>>>>>        Variant retVal
20730>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20731>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
20732>>>>>>>>>        Function_Return retVal
20733>>>>>>>>>    End_Function
20734>>>>>>>>>
20734>>>>>>>>>    Function ComIndex Returns Integer
20736>>>>>>>>>        Handle hDispatchDriver
20736>>>>>>>>>        Integer retVal
20736>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20737>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
20738>>>>>>>>>        Function_Return retVal
20739>>>>>>>>>    End_Function
20740>>>>>>>>>
20740>>>>>>>>>    Function ComType Returns XTPControlType
20742>>>>>>>>>        Handle hDispatchDriver
20742>>>>>>>>>        XTPControlType retVal
20742>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20743>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
20744>>>>>>>>>        Function_Return retVal
20745>>>>>>>>>    End_Function
20746>>>>>>>>>
20746>>>>>>>>>    Procedure ComDelete
20748>>>>>>>>>        Handle hDispatchDriver
20748>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20749>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
20750>>>>>>>>>    End_Procedure
20751>>>>>>>>>
20751>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
20753>>>>>>>>>        Handle hDispatchDriver
20753>>>>>>>>>        Variant retVal
20753>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20754>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20755>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
20756>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
20757>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
20758>>>>>>>>>        Function_Return retVal
20759>>>>>>>>>    End_Function
20760>>>>>>>>>
20760>>>>>>>>>    Procedure ComSetFocus
20762>>>>>>>>>        Handle hDispatchDriver
20762>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20763>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
20764>>>>>>>>>    End_Procedure
20765>>>>>>>>>
20765>>>>>>>>>    Procedure ComExecute
20767>>>>>>>>>        Handle hDispatchDriver
20767>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20768>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
20769>>>>>>>>>    End_Procedure
20770>>>>>>>>>
20770>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
20772>>>>>>>>>        Handle hDispatchDriver
20772>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20773>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
20774>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
20775>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
20776>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
20777>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
20778>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
20779>>>>>>>>>    End_Procedure
20780>>>>>>>>>
20780>>>>>>>>>    Function ComRibbonGroup Returns Variant
20782>>>>>>>>>        Handle hDispatchDriver
20782>>>>>>>>>        Variant retVal
20782>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20783>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
20784>>>>>>>>>        Function_Return retVal
20785>>>>>>>>>    End_Function
20786>>>>>>>>>
20786>>>>>>>>>    Procedure ComReset
20788>>>>>>>>>        Handle hDispatchDriver
20788>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20789>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
20790>>>>>>>>>    End_Procedure
20791>>>>>>>>>
20791>>>>>>>>>    Function ComTop Returns Integer
20793>>>>>>>>>        Handle hDispatchDriver
20793>>>>>>>>>        Integer retVal
20793>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20794>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
20795>>>>>>>>>        Function_Return retVal
20796>>>>>>>>>    End_Function
20797>>>>>>>>>
20797>>>>>>>>>    Function ComLeft Returns Integer
20799>>>>>>>>>        Handle hDispatchDriver
20799>>>>>>>>>        Integer retVal
20799>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20800>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
20801>>>>>>>>>        Function_Return retVal
20802>>>>>>>>>    End_Function
20803>>>>>>>>>
20803>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
20805>>>>>>>>>        Handle hDispatchDriver
20805>>>>>>>>>        Variant retVal
20805>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20806>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
20807>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
20808>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
20809>>>>>>>>>        Function_Return retVal
20810>>>>>>>>>    End_Function
20811>>>>>>>>>
20811>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
20813>>>>>>>>>        Handle hDispatchDriver
20813>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20814>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
20815>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
20816>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
20817>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
20818>>>>>>>>>    End_Procedure
20819>>>>>>>>>
20819>>>>>>>>>    Function ComEditHandle Returns OLE_HANDLE
20821>>>>>>>>>        Handle hDispatchDriver
20821>>>>>>>>>        OLE_HANDLE retVal
20821>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20822>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 63 OLE_VT_I4 to retVal
20823>>>>>>>>>        Function_Return retVal
20824>>>>>>>>>    End_Function
20825>>>>>>>>>
20825>>>>>>>>>    Function ComHasFocus Returns Boolean
20827>>>>>>>>>        Handle hDispatchDriver
20827>>>>>>>>>        Boolean retVal
20827>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
20828>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 66 OLE_VT_BOOL to retVal
20829>>>>>>>>>        Function_Return retVal
20830>>>>>>>>>    End_Function
20831>>>>>>>>>End_Class
20832>>>>>>>>>
20832>>>>>>>>>// CoClass
20832>>>>>>>>>// CLSID: {C0DE2200-45B6-4F4B-A120-6D59A69B2F1D}
20832>>>>>>>>>Class cCJCommandBarEdit is a cComAutomationObject
20833>>>>>>>>>    Import_Class_Protocol cCJICommandBarEdit
20834>>>>>>>>>
20834>>>>>>>>>    Procedure Construct_Object
20836>>>>>>>>>        Forward Send Construct_Object
20838>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
20839>>>>>>>>>    End_Procedure
20840>>>>>>>>>End_Class
20841>>>>>>>>>
20841>>>>>>>>>// CLSID: {C0DE2200-CB1F-40FD-B073-4BC151A5205F}
20841>>>>>>>>>Class cCJICommandBarControlCustom is a Mixin
20842>>>>>>>>>
20842>>>>>>>>>    Function ComChecked Returns Boolean
20844>>>>>>>>>        Boolean retVal
20844>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
20845>>>>>>>>>        Function_Return retVal
20846>>>>>>>>>    End_Function
20847>>>>>>>>>
20847>>>>>>>>>    Procedure Set ComChecked Boolean value
20849>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
20850>>>>>>>>>    End_Procedure
20851>>>>>>>>>
20851>>>>>>>>>    Function ComBeginGroup Returns Boolean
20853>>>>>>>>>        Boolean retVal
20853>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
20854>>>>>>>>>        Function_Return retVal
20855>>>>>>>>>    End_Function
20856>>>>>>>>>
20856>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
20858>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
20859>>>>>>>>>    End_Procedure
20860>>>>>>>>>
20860>>>>>>>>>    Function ComCaption Returns String
20862>>>>>>>>>        String retVal
20862>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
20863>>>>>>>>>        Function_Return retVal
20864>>>>>>>>>    End_Function
20865>>>>>>>>>
20865>>>>>>>>>    Procedure Set ComCaption String value
20867>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
20868>>>>>>>>>    End_Procedure
20869>>>>>>>>>
20869>>>>>>>>>    Function ComDescriptionText Returns String
20871>>>>>>>>>        String retVal
20871>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
20872>>>>>>>>>        Function_Return retVal
20873>>>>>>>>>    End_Function
20874>>>>>>>>>
20874>>>>>>>>>    Procedure Set ComDescriptionText String value
20876>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
20877>>>>>>>>>    End_Procedure
20878>>>>>>>>>
20878>>>>>>>>>    Function ComId Returns Integer
20880>>>>>>>>>        Integer retVal
20880>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
20881>>>>>>>>>        Function_Return retVal
20882>>>>>>>>>    End_Function
20883>>>>>>>>>
20883>>>>>>>>>    Procedure Set ComId Integer value
20885>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
20886>>>>>>>>>    End_Procedure
20887>>>>>>>>>
20887>>>>>>>>>    Function ComParameter Returns String
20889>>>>>>>>>        String retVal
20889>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
20890>>>>>>>>>        Function_Return retVal
20891>>>>>>>>>    End_Function
20892>>>>>>>>>
20892>>>>>>>>>    Procedure Set ComParameter String value
20894>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
20895>>>>>>>>>    End_Procedure
20896>>>>>>>>>
20896>>>>>>>>>    Function ComShortcutText Returns String
20898>>>>>>>>>        String retVal
20898>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
20899>>>>>>>>>        Function_Return retVal
20900>>>>>>>>>    End_Function
20901>>>>>>>>>
20901>>>>>>>>>    Procedure Set ComShortcutText String value
20903>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
20904>>>>>>>>>    End_Procedure
20905>>>>>>>>>
20905>>>>>>>>>    Function ComCustomShortcutText Returns String
20907>>>>>>>>>        String retVal
20907>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
20908>>>>>>>>>        Function_Return retVal
20909>>>>>>>>>    End_Function
20910>>>>>>>>>
20910>>>>>>>>>    Procedure Set ComCustomShortcutText String value
20912>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
20913>>>>>>>>>    End_Procedure
20914>>>>>>>>>
20914>>>>>>>>>    Function ComTooltipText Returns String
20916>>>>>>>>>        String retVal
20916>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
20917>>>>>>>>>        Function_Return retVal
20918>>>>>>>>>    End_Function
20919>>>>>>>>>
20919>>>>>>>>>    Procedure Set ComTooltipText String value
20921>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
20922>>>>>>>>>    End_Procedure
20923>>>>>>>>>
20923>>>>>>>>>    Function ComVisible Returns Boolean
20925>>>>>>>>>        Boolean retVal
20925>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
20926>>>>>>>>>        Function_Return retVal
20927>>>>>>>>>    End_Function
20928>>>>>>>>>
20928>>>>>>>>>    Procedure Set ComVisible Boolean value
20930>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
20931>>>>>>>>>    End_Procedure
20932>>>>>>>>>
20932>>>>>>>>>    Function ComEnabled Returns Boolean
20934>>>>>>>>>        Boolean retVal
20934>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
20935>>>>>>>>>        Function_Return retVal
20936>>>>>>>>>    End_Function
20937>>>>>>>>>
20937>>>>>>>>>    Procedure Set ComEnabled Boolean value
20939>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
20940>>>>>>>>>    End_Procedure
20941>>>>>>>>>
20941>>>>>>>>>    Function ComIconId Returns Integer
20943>>>>>>>>>        Integer retVal
20943>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
20944>>>>>>>>>        Function_Return retVal
20945>>>>>>>>>    End_Function
20946>>>>>>>>>
20946>>>>>>>>>    Procedure Set ComIconId Integer value
20948>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
20949>>>>>>>>>    End_Procedure
20950>>>>>>>>>
20950>>>>>>>>>    Function ComDefaultItem Returns Boolean
20952>>>>>>>>>        Boolean retVal
20952>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
20953>>>>>>>>>        Function_Return retVal
20954>>>>>>>>>    End_Function
20955>>>>>>>>>
20955>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
20957>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
20958>>>>>>>>>    End_Procedure
20959>>>>>>>>>
20959>>>>>>>>>    Function ComFlags Returns XTPControlFlags
20961>>>>>>>>>        XTPControlFlags retVal
20961>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
20962>>>>>>>>>        Function_Return retVal
20963>>>>>>>>>    End_Function
20964>>>>>>>>>
20964>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
20966>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
20967>>>>>>>>>    End_Procedure
20968>>>>>>>>>
20968>>>>>>>>>    Function ComCategory Returns String
20970>>>>>>>>>        String retVal
20970>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
20971>>>>>>>>>        Function_Return retVal
20972>>>>>>>>>    End_Function
20973>>>>>>>>>
20973>>>>>>>>>    Procedure Set ComCategory String value
20975>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
20976>>>>>>>>>    End_Procedure
20977>>>>>>>>>
20977>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
20979>>>>>>>>>        XTPControlHideFlags retVal
20979>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
20980>>>>>>>>>        Function_Return retVal
20981>>>>>>>>>    End_Function
20982>>>>>>>>>
20982>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
20984>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
20985>>>>>>>>>    End_Procedure
20986>>>>>>>>>
20986>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
20988>>>>>>>>>        Boolean retVal
20988>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
20989>>>>>>>>>        Function_Return retVal
20990>>>>>>>>>    End_Function
20991>>>>>>>>>
20991>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
20993>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
20994>>>>>>>>>    End_Procedure
20995>>>>>>>>>
20995>>>>>>>>>    Function ComAction Returns Variant
20997>>>>>>>>>        Variant retVal
20997>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
20998>>>>>>>>>        Function_Return retVal
20999>>>>>>>>>    End_Function
21000>>>>>>>>>
21000>>>>>>>>>    Procedure Set ComAction Variant value
21002>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
21003>>>>>>>>>    End_Procedure
21004>>>>>>>>>
21004>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
21006>>>>>>>>>        Integer retVal
21006>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
21007>>>>>>>>>        Function_Return retVal
21008>>>>>>>>>    End_Function
21009>>>>>>>>>
21009>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
21011>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
21012>>>>>>>>>    End_Procedure
21013>>>>>>>>>
21013>>>>>>>>>    Function ComWidth Returns Integer
21015>>>>>>>>>        Integer retVal
21015>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
21016>>>>>>>>>        Function_Return retVal
21017>>>>>>>>>    End_Function
21018>>>>>>>>>
21018>>>>>>>>>    Procedure Set ComWidth Integer value
21020>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
21021>>>>>>>>>    End_Procedure
21022>>>>>>>>>
21022>>>>>>>>>    Function ComHeight Returns Integer
21024>>>>>>>>>        Integer retVal
21024>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
21025>>>>>>>>>        Function_Return retVal
21026>>>>>>>>>    End_Function
21027>>>>>>>>>
21027>>>>>>>>>    Procedure Set ComHeight Integer value
21029>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
21030>>>>>>>>>    End_Procedure
21031>>>>>>>>>
21031>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
21033>>>>>>>>>        XTPButtonStyle retVal
21033>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
21034>>>>>>>>>        Function_Return retVal
21035>>>>>>>>>    End_Function
21036>>>>>>>>>
21036>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
21038>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
21039>>>>>>>>>    End_Procedure
21040>>>>>>>>>
21040>>>>>>>>>    Function ComKeyboardTip Returns String
21042>>>>>>>>>        String retVal
21042>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
21043>>>>>>>>>        Function_Return retVal
21044>>>>>>>>>    End_Function
21045>>>>>>>>>
21045>>>>>>>>>    Procedure Set ComKeyboardTip String value
21047>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
21048>>>>>>>>>    End_Procedure
21049>>>>>>>>>
21049>>>>>>>>>    Function ComHandle Returns Integer
21051>>>>>>>>>        Integer retVal
21051>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to retVal
21052>>>>>>>>>        Function_Return retVal
21053>>>>>>>>>    End_Function
21054>>>>>>>>>
21054>>>>>>>>>    Procedure Set ComHandle Integer value
21056>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to value
21057>>>>>>>>>    End_Procedure
21058>>>>>>>>>
21058>>>>>>>>>    Function ComVerticalOptions Returns XTPControlCustomVerticalOptions
21060>>>>>>>>>        XTPControlCustomVerticalOptions retVal
21060>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
21061>>>>>>>>>        Function_Return retVal
21062>>>>>>>>>    End_Function
21063>>>>>>>>>
21063>>>>>>>>>    Procedure Set ComVerticalOptions XTPControlCustomVerticalOptions value
21065>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
21066>>>>>>>>>    End_Procedure
21067>>>>>>>>>
21067>>>>>>>>>    Function ComControls Returns Variant
21069>>>>>>>>>        Handle hDispatchDriver
21069>>>>>>>>>        Variant retVal
21069>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21070>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
21071>>>>>>>>>        Function_Return retVal
21072>>>>>>>>>    End_Function
21073>>>>>>>>>
21073>>>>>>>>>    Function ComParent Returns Variant
21075>>>>>>>>>        Handle hDispatchDriver
21075>>>>>>>>>        Variant retVal
21075>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21076>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
21077>>>>>>>>>        Function_Return retVal
21078>>>>>>>>>    End_Function
21079>>>>>>>>>
21079>>>>>>>>>    Function ComIndex Returns Integer
21081>>>>>>>>>        Handle hDispatchDriver
21081>>>>>>>>>        Integer retVal
21081>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21082>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
21083>>>>>>>>>        Function_Return retVal
21084>>>>>>>>>    End_Function
21085>>>>>>>>>
21085>>>>>>>>>    Function ComType Returns XTPControlType
21087>>>>>>>>>        Handle hDispatchDriver
21087>>>>>>>>>        XTPControlType retVal
21087>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21088>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
21089>>>>>>>>>        Function_Return retVal
21090>>>>>>>>>    End_Function
21091>>>>>>>>>
21091>>>>>>>>>    Procedure ComDelete
21093>>>>>>>>>        Handle hDispatchDriver
21093>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21094>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
21095>>>>>>>>>    End_Procedure
21096>>>>>>>>>
21096>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
21098>>>>>>>>>        Handle hDispatchDriver
21098>>>>>>>>>        Variant retVal
21098>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21099>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21100>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
21101>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
21102>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
21103>>>>>>>>>        Function_Return retVal
21104>>>>>>>>>    End_Function
21105>>>>>>>>>
21105>>>>>>>>>    Procedure ComSetFocus
21107>>>>>>>>>        Handle hDispatchDriver
21107>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21108>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
21109>>>>>>>>>    End_Procedure
21110>>>>>>>>>
21110>>>>>>>>>    Procedure ComExecute
21112>>>>>>>>>        Handle hDispatchDriver
21112>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21113>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
21114>>>>>>>>>    End_Procedure
21115>>>>>>>>>
21115>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
21117>>>>>>>>>        Handle hDispatchDriver
21117>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21118>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
21119>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
21120>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
21121>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
21122>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
21123>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
21124>>>>>>>>>    End_Procedure
21125>>>>>>>>>
21125>>>>>>>>>    Function ComRibbonGroup Returns Variant
21127>>>>>>>>>        Handle hDispatchDriver
21127>>>>>>>>>        Variant retVal
21127>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21128>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
21129>>>>>>>>>        Function_Return retVal
21130>>>>>>>>>    End_Function
21131>>>>>>>>>
21131>>>>>>>>>    Procedure ComReset
21133>>>>>>>>>        Handle hDispatchDriver
21133>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21134>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
21135>>>>>>>>>    End_Procedure
21136>>>>>>>>>
21136>>>>>>>>>    Function ComTop Returns Integer
21138>>>>>>>>>        Handle hDispatchDriver
21138>>>>>>>>>        Integer retVal
21138>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21139>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
21140>>>>>>>>>        Function_Return retVal
21141>>>>>>>>>    End_Function
21142>>>>>>>>>
21142>>>>>>>>>    Function ComLeft Returns Integer
21144>>>>>>>>>        Handle hDispatchDriver
21144>>>>>>>>>        Integer retVal
21144>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21145>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
21146>>>>>>>>>        Function_Return retVal
21147>>>>>>>>>    End_Function
21148>>>>>>>>>
21148>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
21150>>>>>>>>>        Handle hDispatchDriver
21150>>>>>>>>>        Variant retVal
21150>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21151>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21152>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
21153>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
21154>>>>>>>>>        Function_Return retVal
21155>>>>>>>>>    End_Function
21156>>>>>>>>>
21156>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
21158>>>>>>>>>        Handle hDispatchDriver
21158>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21159>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21160>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
21161>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
21162>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
21163>>>>>>>>>    End_Procedure
21164>>>>>>>>>
21164>>>>>>>>>    Procedure ComSetSize Integer llcx Integer llcy
21166>>>>>>>>>        Handle hDispatchDriver
21166>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21167>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21168>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
21169>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
21170>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 51 OLE_VT_VOID
21171>>>>>>>>>    End_Procedure
21172>>>>>>>>>End_Class
21173>>>>>>>>>
21173>>>>>>>>>// CoClass
21173>>>>>>>>>// CLSID: {C0DE2200-1B47-4246-A360-CC5F34ABCE35}
21173>>>>>>>>>Class cCJCommandBarControlCustom is a cComAutomationObject
21174>>>>>>>>>    Import_Class_Protocol cCJICommandBarControlCustom
21175>>>>>>>>>
21175>>>>>>>>>    Procedure Construct_Object
21177>>>>>>>>>        Forward Send Construct_Object
21179>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21180>>>>>>>>>    End_Procedure
21181>>>>>>>>>End_Class
21182>>>>>>>>>
21182>>>>>>>>>// CLSID: {C0DE2200-27BF-4CB1-9ABF-1788D9835223}
21182>>>>>>>>>Class cCJICommandBarControls is a Mixin
21183>>>>>>>>>
21183>>>>>>>>>    // Gets the number of controls in the collection.
21183>>>>>>>>>    Function ComCount Returns Integer
21185>>>>>>>>>        Handle hDispatchDriver
21185>>>>>>>>>        Integer retVal
21185>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21186>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
21187>>>>>>>>>        Function_Return retVal
21188>>>>>>>>>    End_Function
21189>>>>>>>>>
21189>>>>>>>>>    // Gets an item from the collection by its index.
21189>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
21191>>>>>>>>>        Handle hDispatchDriver
21191>>>>>>>>>        Variant retVal
21191>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21192>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21193>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
21194>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
21195>>>>>>>>>        Function_Return retVal
21196>>>>>>>>>    End_Function
21197>>>>>>>>>
21197>>>>>>>>>    Function Com_NewEnum Returns Variant
21199>>>>>>>>>        Handle hDispatchDriver
21199>>>>>>>>>        Variant retVal
21199>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21200>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
21201>>>>>>>>>        Function_Return retVal
21202>>>>>>>>>    End_Function
21203>>>>>>>>>
21203>>>>>>>>>    // Adds a new command bar control to the collection.
21203>>>>>>>>>    Function ComAdd XTPControlType llType Integer llId String llCaption Variant llBefore Variant llTemporary Returns Variant
21205>>>>>>>>>        Handle hDispatchDriver
21205>>>>>>>>>        Variant retVal
21205>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21206>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
21207>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llType
21208>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
21209>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
21210>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
21211>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llTemporary
21212>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
21213>>>>>>>>>        Function_Return retVal
21214>>>>>>>>>    End_Function
21215>>>>>>>>>
21215>>>>>>>>>    // Gets the popup control representing the parent of the command bar
21215>>>>>>>>>    Function ComParent Returns Variant
21217>>>>>>>>>        Handle hDispatchDriver
21217>>>>>>>>>        Variant retVal
21217>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21218>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_DISPATCH to retVal
21219>>>>>>>>>        Function_Return retVal
21220>>>>>>>>>    End_Function
21221>>>>>>>>>
21221>>>>>>>>>    // Finds the specified control
21221>>>>>>>>>    Function ComFind Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
21223>>>>>>>>>        Handle hDispatchDriver
21223>>>>>>>>>        Variant retVal
21223>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21224>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
21225>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
21226>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
21227>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
21228>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
21229>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
21230>>>>>>>>>        Function_Return retVal
21231>>>>>>>>>    End_Function
21232>>>>>>>>>
21232>>>>>>>>>    // Deletes all of the command bar controls from the collection
21232>>>>>>>>>    Procedure ComDeleteAll
21234>>>>>>>>>        Handle hDispatchDriver
21234>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21235>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
21236>>>>>>>>>    End_Procedure
21237>>>>>>>>>
21237>>>>>>>>>    // Recreates original controls
21237>>>>>>>>>    Procedure ComCreateOriginalControls
21239>>>>>>>>>        Handle hDispatchDriver
21239>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21240>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
21241>>>>>>>>>    End_Procedure
21242>>>>>>>>>
21242>>>>>>>>>    // Retrieve original controls
21242>>>>>>>>>    Function ComOriginalControls Returns Variant
21244>>>>>>>>>        Handle hDispatchDriver
21244>>>>>>>>>        Variant retVal
21244>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21245>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_DISPATCH to retVal
21246>>>>>>>>>        Function_Return retVal
21247>>>>>>>>>    End_Function
21248>>>>>>>>>
21248>>>>>>>>>    Procedure ComAddControl Variant llControl Variant llBefore
21250>>>>>>>>>        Handle hDispatchDriver
21250>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21251>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21252>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llControl
21253>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
21254>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
21255>>>>>>>>>    End_Procedure
21256>>>>>>>>>End_Class
21257>>>>>>>>>
21257>>>>>>>>>// CoClass
21257>>>>>>>>>// CLSID: {C0DE2200-A08C-49CB-8B78-58D990C00C51}
21257>>>>>>>>>Class cCJCommandBarControls is a cComAutomationObject
21258>>>>>>>>>    Import_Class_Protocol cCJICommandBarControls
21259>>>>>>>>>
21259>>>>>>>>>    Procedure Construct_Object
21261>>>>>>>>>        Forward Send Construct_Object
21263>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21264>>>>>>>>>    End_Procedure
21265>>>>>>>>>End_Class
21266>>>>>>>>>
21266>>>>>>>>>// CLSID: {C0DE2200-0E35-48A5-BDED-924880DAF1B2}
21266>>>>>>>>>Class cCJIKeyBinding is a Mixin
21267>>>>>>>>>
21267>>>>>>>>>    Function ComCommand Returns Integer
21269>>>>>>>>>        Integer retVal
21269>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
21270>>>>>>>>>        Function_Return retVal
21271>>>>>>>>>    End_Function
21272>>>>>>>>>
21272>>>>>>>>>    Procedure Set ComCommand Integer value
21274>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
21275>>>>>>>>>    End_Procedure
21276>>>>>>>>>
21276>>>>>>>>>    Function ComShortcutText Returns String
21278>>>>>>>>>        String retVal
21278>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
21279>>>>>>>>>        Function_Return retVal
21280>>>>>>>>>    End_Function
21281>>>>>>>>>
21281>>>>>>>>>    Procedure Set ComShortcutText String value
21283>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
21284>>>>>>>>>    End_Procedure
21285>>>>>>>>>End_Class
21286>>>>>>>>>
21286>>>>>>>>>// CoClass
21286>>>>>>>>>// CLSID: {C0DE2200-EA68-4E0D-946F-45694C26F6BA}
21286>>>>>>>>>Class cCJKeyBinding is a cComAutomationObject
21287>>>>>>>>>    Import_Class_Protocol cCJIKeyBinding
21288>>>>>>>>>
21288>>>>>>>>>    Procedure Construct_Object
21290>>>>>>>>>        Forward Send Construct_Object
21292>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21293>>>>>>>>>    End_Procedure
21294>>>>>>>>>End_Class
21295>>>>>>>>>
21295>>>>>>>>>// CLSID: {C0DE2200-7369-4EAB-9B25-1D5C52916D86}
21295>>>>>>>>>Class cCJIKeyBindings is a Mixin
21296>>>>>>>>>
21296>>>>>>>>>    Function ComUseSystemKeyNameText Returns Boolean
21298>>>>>>>>>        Boolean retVal
21298>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
21299>>>>>>>>>        Function_Return retVal
21300>>>>>>>>>    End_Function
21301>>>>>>>>>
21301>>>>>>>>>    Procedure Set ComUseSystemKeyNameText Boolean value
21303>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
21304>>>>>>>>>    End_Procedure
21305>>>>>>>>>
21305>>>>>>>>>    Function ComAllowDoubleKeyShortcuts Returns Boolean
21307>>>>>>>>>        Boolean retVal
21307>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
21308>>>>>>>>>        Function_Return retVal
21309>>>>>>>>>    End_Function
21310>>>>>>>>>
21310>>>>>>>>>    Procedure Set ComAllowDoubleKeyShortcuts Boolean value
21312>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
21313>>>>>>>>>    End_Procedure
21314>>>>>>>>>
21314>>>>>>>>>    Function ComEnabled Returns Boolean
21316>>>>>>>>>        Boolean retVal
21316>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
21317>>>>>>>>>        Function_Return retVal
21318>>>>>>>>>    End_Function
21319>>>>>>>>>
21319>>>>>>>>>    Procedure Set ComEnabled Boolean value
21321>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
21322>>>>>>>>>    End_Procedure
21323>>>>>>>>>
21323>>>>>>>>>    Function ComDisableOnCapture Returns Boolean
21325>>>>>>>>>        Boolean retVal
21325>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
21326>>>>>>>>>        Function_Return retVal
21327>>>>>>>>>    End_Function
21328>>>>>>>>>
21328>>>>>>>>>    Procedure Set ComDisableOnCapture Boolean value
21330>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
21331>>>>>>>>>    End_Procedure
21332>>>>>>>>>
21332>>>>>>>>>    Function ComEnableCustomShortcutText Returns Boolean
21334>>>>>>>>>        Boolean retVal
21334>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
21335>>>>>>>>>        Function_Return retVal
21336>>>>>>>>>    End_Function
21337>>>>>>>>>
21337>>>>>>>>>    Procedure Set ComEnableCustomShortcutText Boolean value
21339>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
21340>>>>>>>>>    End_Procedure
21341>>>>>>>>>
21341>>>>>>>>>    Procedure ComAdd Integer llfVirt Integer llKey Integer llCommand
21343>>>>>>>>>        Handle hDispatchDriver
21343>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21344>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
21345>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llfVirt
21346>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llKey
21347>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21348>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1 OLE_VT_VOID
21349>>>>>>>>>    End_Procedure
21350>>>>>>>>>
21350>>>>>>>>>    Procedure ComAddShortcut Integer llCommand String llShortcut
21352>>>>>>>>>        Handle hDispatchDriver
21352>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21353>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21354>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21355>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llShortcut
21356>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
21357>>>>>>>>>    End_Procedure
21358>>>>>>>>>
21358>>>>>>>>>    Procedure ComDeleteAll
21360>>>>>>>>>        Handle hDispatchDriver
21360>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21361>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 2 OLE_VT_VOID
21362>>>>>>>>>    End_Procedure
21363>>>>>>>>>
21363>>>>>>>>>    Procedure ComSetKeyNameText Integer llKey String llKeyName
21365>>>>>>>>>        Handle hDispatchDriver
21365>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21366>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21367>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llKey
21368>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llKeyName
21369>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
21370>>>>>>>>>    End_Procedure
21371>>>>>>>>>
21371>>>>>>>>>    Procedure ComDelete Integer llCommand
21373>>>>>>>>>        Handle hDispatchDriver
21373>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21374>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21375>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21376>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
21377>>>>>>>>>    End_Procedure
21378>>>>>>>>>
21378>>>>>>>>>    Function ComCount Returns Integer
21380>>>>>>>>>        Handle hDispatchDriver
21380>>>>>>>>>        Integer retVal
21380>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21381>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_I4 to retVal
21382>>>>>>>>>        Function_Return retVal
21383>>>>>>>>>    End_Function
21384>>>>>>>>>
21384>>>>>>>>>    Function Com_NewEnum Returns Variant
21386>>>>>>>>>        Handle hDispatchDriver
21386>>>>>>>>>        Variant retVal
21386>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21387>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
21388>>>>>>>>>        Function_Return retVal
21389>>>>>>>>>    End_Function
21390>>>>>>>>>
21390>>>>>>>>>    // Gets an item from the collection by its Id.
21390>>>>>>>>>    Function ComShortcut Integer llIndex Returns Variant
21392>>>>>>>>>        Handle hDispatchDriver
21392>>>>>>>>>        Variant retVal
21392>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21393>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21394>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
21395>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
21396>>>>>>>>>        Function_Return retVal
21397>>>>>>>>>    End_Function
21398>>>>>>>>>
21398>>>>>>>>>    Function ComFindShortcut Integer llCommand Returns Variant
21400>>>>>>>>>        Handle hDispatchDriver
21400>>>>>>>>>        Variant retVal
21400>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21401>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21402>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21403>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
21404>>>>>>>>>        Function_Return retVal
21405>>>>>>>>>    End_Function
21406>>>>>>>>>End_Class
21407>>>>>>>>>
21407>>>>>>>>>// CLSID: {C0DE2200-B842-4945-A2F6-CA4237496689}
21407>>>>>>>>>Class cCJIKeyBindingsEvents is a Mixin
21408>>>>>>>>>
21408>>>>>>>>>    Procedure OnComBeforeTranslate Integer llCommand Variant llCancel
21410>>>>>>>>>    End_Procedure
21411>>>>>>>>>
21411>>>>>>>>>    Procedure OnComBeforeAdd Integer llfVirt Integer llKey Integer llCommand Variant llCancel
21413>>>>>>>>>    End_Procedure
21414>>>>>>>>>
21414>>>>>>>>>    Procedure OnComBeforeRemove Integer llfVirt Integer llKey Integer llCommand Variant llCancel
21416>>>>>>>>>    End_Procedure
21417>>>>>>>>>
21417>>>>>>>>>    Procedure RegisterComEvents
21419>>>>>>>>>        Send RegisterComEvent 1 msg_OnComBeforeTranslate
21420>>>>>>>>>        Send RegisterComEvent 2 msg_OnComBeforeAdd
21421>>>>>>>>>        Send RegisterComEvent 3 msg_OnComBeforeRemove
21422>>>>>>>>>    End_Procedure
21423>>>>>>>>>End_Class
21424>>>>>>>>>
21424>>>>>>>>>// CoClass
21424>>>>>>>>>// CLSID: {C0DE2200-6BDA-418D-9440-2D141B5D653C}
21424>>>>>>>>>Class cCJKeyBindings is a cComAutomationObject
21425>>>>>>>>>    Import_Class_Protocol cCJIKeyBindings
21426>>>>>>>>>    Import_Class_Protocol cCJIKeyBindingsEvents
21427>>>>>>>>>
21427>>>>>>>>>    Procedure Construct_Object
21429>>>>>>>>>        Forward Send Construct_Object
21431>>>>>>>>>        Set psEventId to "{C0DE2200-B842-4945-A2F6-CA4237496689}"
21432>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21433>>>>>>>>>    End_Procedure
21434>>>>>>>>>End_Class
21435>>>>>>>>>
21435>>>>>>>>>// CLSID: {C0DE2200-48B2-4CCF-B8D7-CFD6A679F837}
21435>>>>>>>>>Class cCJICommandBarsOptions is a Mixin
21436>>>>>>>>>
21436>>>>>>>>>    Function ComAlwaysShowFullMenus Returns Boolean
21438>>>>>>>>>        Boolean retVal
21438>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
21439>>>>>>>>>        Function_Return retVal
21440>>>>>>>>>    End_Function
21441>>>>>>>>>
21441>>>>>>>>>    Procedure Set ComAlwaysShowFullMenus Boolean value
21443>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
21444>>>>>>>>>    End_Procedure
21445>>>>>>>>>
21445>>>>>>>>>    Function ComShowFullAfterDelay Returns Boolean
21447>>>>>>>>>        Boolean retVal
21447>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to retVal
21448>>>>>>>>>        Function_Return retVal
21449>>>>>>>>>    End_Function
21450>>>>>>>>>
21450>>>>>>>>>    Procedure Set ComShowFullAfterDelay Boolean value
21452>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to value
21453>>>>>>>>>    End_Procedure
21454>>>>>>>>>
21454>>>>>>>>>    Function ComToolBarScreenTips Returns Boolean
21456>>>>>>>>>        Boolean retVal
21456>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
21457>>>>>>>>>        Function_Return retVal
21458>>>>>>>>>    End_Function
21459>>>>>>>>>
21459>>>>>>>>>    Procedure Set ComToolBarScreenTips Boolean value
21461>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
21462>>>>>>>>>    End_Procedure
21463>>>>>>>>>
21463>>>>>>>>>    Function ComToolBarAccelTips Returns Boolean
21465>>>>>>>>>        Boolean retVal
21465>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
21466>>>>>>>>>        Function_Return retVal
21467>>>>>>>>>    End_Function
21468>>>>>>>>>
21468>>>>>>>>>    Procedure Set ComToolBarAccelTips Boolean value
21470>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
21471>>>>>>>>>    End_Procedure
21472>>>>>>>>>
21472>>>>>>>>>    Function ComLargeIcons Returns Boolean
21474>>>>>>>>>        Boolean retVal
21474>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
21475>>>>>>>>>        Function_Return retVal
21476>>>>>>>>>    End_Function
21477>>>>>>>>>
21477>>>>>>>>>    Procedure Set ComLargeIcons Boolean value
21479>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
21480>>>>>>>>>    End_Procedure
21481>>>>>>>>>
21481>>>>>>>>>    Function ComUseFadedIcons Returns Boolean
21483>>>>>>>>>        Boolean retVal
21483>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
21484>>>>>>>>>        Function_Return retVal
21485>>>>>>>>>    End_Function
21486>>>>>>>>>
21486>>>>>>>>>    Procedure Set ComUseFadedIcons Boolean value
21488>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
21489>>>>>>>>>    End_Procedure
21490>>>>>>>>>
21490>>>>>>>>>    Function ComUseDisabledIcons Returns Boolean
21492>>>>>>>>>        Boolean retVal
21492>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
21493>>>>>>>>>        Function_Return retVal
21494>>>>>>>>>    End_Function
21495>>>>>>>>>
21495>>>>>>>>>    Procedure Set ComUseDisabledIcons Boolean value
21497>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
21498>>>>>>>>>    End_Procedure
21499>>>>>>>>>
21499>>>>>>>>>    Function ComIconsWithShadow Returns Boolean
21501>>>>>>>>>        Boolean retVal
21501>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
21502>>>>>>>>>        Function_Return retVal
21503>>>>>>>>>    End_Function
21504>>>>>>>>>
21504>>>>>>>>>    Procedure Set ComIconsWithShadow Boolean value
21506>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
21507>>>>>>>>>    End_Procedure
21508>>>>>>>>>
21508>>>>>>>>>    Function ComShowExpandButtonAlways Returns Boolean
21510>>>>>>>>>        Boolean retVal
21510>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
21511>>>>>>>>>        Function_Return retVal
21512>>>>>>>>>    End_Function
21513>>>>>>>>>
21513>>>>>>>>>    Procedure Set ComShowExpandButtonAlways Boolean value
21515>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
21516>>>>>>>>>    End_Procedure
21517>>>>>>>>>
21517>>>>>>>>>    Function ComAnimation Returns XTPAnimationType
21519>>>>>>>>>        XTPAnimationType retVal
21519>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_I4 to retVal
21520>>>>>>>>>        Function_Return retVal
21521>>>>>>>>>    End_Function
21522>>>>>>>>>
21522>>>>>>>>>    Procedure Set ComAnimation XTPAnimationType value
21524>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_I4 to value
21525>>>>>>>>>    End_Procedure
21526>>>>>>>>>
21526>>>>>>>>>    Function ComLunaColors Returns Boolean
21528>>>>>>>>>        Boolean retVal
21528>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
21529>>>>>>>>>        Function_Return retVal
21530>>>>>>>>>    End_Function
21531>>>>>>>>>
21531>>>>>>>>>    Procedure Set ComLunaColors Boolean value
21533>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
21534>>>>>>>>>    End_Procedure
21535>>>>>>>>>
21535>>>>>>>>>    Function ComUseSharedImageList Returns Boolean
21537>>>>>>>>>        Boolean retVal
21537>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
21538>>>>>>>>>        Function_Return retVal
21539>>>>>>>>>    End_Function
21540>>>>>>>>>
21540>>>>>>>>>    Procedure Set ComUseSharedImageList Boolean value
21542>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
21543>>>>>>>>>    End_Procedure
21544>>>>>>>>>
21544>>>>>>>>>    Function ComSyncFloatingToolbars Returns Boolean
21546>>>>>>>>>        Boolean retVal
21546>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_BOOL to retVal
21547>>>>>>>>>        Function_Return retVal
21548>>>>>>>>>    End_Function
21549>>>>>>>>>
21549>>>>>>>>>    Procedure Set ComSyncFloatingToolbars Boolean value
21551>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_BOOL to value
21552>>>>>>>>>    End_Procedure
21553>>>>>>>>>
21553>>>>>>>>>    Function ComFloatToolbarsByDoubleClick Returns Boolean
21555>>>>>>>>>        Boolean retVal
21555>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
21556>>>>>>>>>        Function_Return retVal
21557>>>>>>>>>    End_Function
21558>>>>>>>>>
21558>>>>>>>>>    Procedure Set ComFloatToolbarsByDoubleClick Boolean value
21560>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
21561>>>>>>>>>    End_Procedure
21562>>>>>>>>>
21562>>>>>>>>>    Function ComAutoHideUnusedPopups Returns Boolean
21564>>>>>>>>>        Boolean retVal
21564>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_BOOL to retVal
21565>>>>>>>>>        Function_Return retVal
21566>>>>>>>>>    End_Function
21567>>>>>>>>>
21567>>>>>>>>>    Procedure Set ComAutoHideUnusedPopups Boolean value
21569>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_BOOL to value
21570>>>>>>>>>    End_Procedure
21571>>>>>>>>>
21571>>>>>>>>>    Function ComShowPopupBarToolTips Returns Boolean
21573>>>>>>>>>        Boolean retVal
21573>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
21574>>>>>>>>>        Function_Return retVal
21575>>>>>>>>>    End_Function
21576>>>>>>>>>
21576>>>>>>>>>    Procedure Set ComShowPopupBarToolTips Boolean value
21578>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
21579>>>>>>>>>    End_Procedure
21580>>>>>>>>>
21580>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
21582>>>>>>>>>        Boolean retVal
21582>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
21583>>>>>>>>>        Function_Return retVal
21584>>>>>>>>>    End_Function
21585>>>>>>>>>
21585>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
21587>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
21588>>>>>>>>>    End_Procedure
21589>>>>>>>>>
21589>>>>>>>>>    Function ComUpdatePeriod Returns Integer
21591>>>>>>>>>        Integer retVal
21591>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_I4 to retVal
21592>>>>>>>>>        Function_Return retVal
21593>>>>>>>>>    End_Function
21594>>>>>>>>>
21594>>>>>>>>>    Procedure Set ComUpdatePeriod Integer value
21596>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_I4 to value
21597>>>>>>>>>    End_Procedure
21598>>>>>>>>>
21598>>>>>>>>>    Function ComAltDragCustomization Returns Boolean
21600>>>>>>>>>        Boolean retVal
21600>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
21601>>>>>>>>>        Function_Return retVal
21602>>>>>>>>>    End_Function
21603>>>>>>>>>
21603>>>>>>>>>    Procedure Set ComAltDragCustomization Boolean value
21605>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
21606>>>>>>>>>    End_Procedure
21607>>>>>>>>>
21607>>>>>>>>>    Function ComFont Returns Variant
21609>>>>>>>>>        Variant retVal
21609>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
21610>>>>>>>>>        Function_Return retVal
21611>>>>>>>>>    End_Function
21612>>>>>>>>>
21612>>>>>>>>>    Procedure Set ComFont Variant value
21614>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
21615>>>>>>>>>    End_Procedure
21616>>>>>>>>>
21616>>>>>>>>>    Function ComMaxPopupWidth Returns Real
21618>>>>>>>>>        Real retVal
21618>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_R8 to retVal
21619>>>>>>>>>        Function_Return retVal
21620>>>>>>>>>    End_Function
21621>>>>>>>>>
21621>>>>>>>>>    Procedure Set ComMaxPopupWidth Real value
21623>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_R8 to value
21624>>>>>>>>>    End_Procedure
21625>>>>>>>>>
21625>>>>>>>>>    Function ComKeyboardCuesShow Returns XTPKeyboardCuesShow
21627>>>>>>>>>        XTPKeyboardCuesShow retVal
21627>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to retVal
21628>>>>>>>>>        Function_Return retVal
21629>>>>>>>>>    End_Function
21630>>>>>>>>>
21630>>>>>>>>>    Procedure Set ComKeyboardCuesShow XTPKeyboardCuesShow value
21632>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to value
21633>>>>>>>>>    End_Procedure
21634>>>>>>>>>
21634>>>>>>>>>    Function ComKeyboardCuesUse Returns XTPKeyboardCuesUse
21636>>>>>>>>>        XTPKeyboardCuesUse retVal
21636>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to retVal
21637>>>>>>>>>        Function_Return retVal
21638>>>>>>>>>    End_Function
21639>>>>>>>>>
21639>>>>>>>>>    Procedure Set ComKeyboardCuesUse XTPKeyboardCuesUse value
21641>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to value
21642>>>>>>>>>    End_Procedure
21643>>>>>>>>>
21643>>>>>>>>>    Function ComFloatingBarCaptionFont Returns Variant
21645>>>>>>>>>        Variant retVal
21645>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_DISPATCH to retVal
21646>>>>>>>>>        Function_Return retVal
21647>>>>>>>>>    End_Function
21648>>>>>>>>>
21648>>>>>>>>>    Procedure Set ComFloatingBarCaptionFont Variant value
21650>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_DISPATCH to value
21651>>>>>>>>>    End_Procedure
21652>>>>>>>>>
21652>>>>>>>>>    Function ComComboBoxFont Returns Variant
21654>>>>>>>>>        Variant retVal
21654>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_DISPATCH to retVal
21655>>>>>>>>>        Function_Return retVal
21656>>>>>>>>>    End_Function
21657>>>>>>>>>
21657>>>>>>>>>    Procedure Set ComComboBoxFont Variant value
21659>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 27 OLE_VT_DISPATCH to value
21660>>>>>>>>>    End_Procedure
21661>>>>>>>>>
21661>>>>>>>>>    Function ComOfficeStyleDisabledIcons Returns Boolean
21663>>>>>>>>>        Boolean retVal
21663>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_BOOL to retVal
21664>>>>>>>>>        Function_Return retVal
21665>>>>>>>>>    End_Function
21666>>>>>>>>>
21666>>>>>>>>>    Procedure Set ComOfficeStyleDisabledIcons Boolean value
21668>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_BOOL to value
21669>>>>>>>>>    End_Procedure
21670>>>>>>>>>
21670>>>>>>>>>    Function ComExpandHoverDelay Returns Integer
21672>>>>>>>>>        Integer retVal
21672>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to retVal
21673>>>>>>>>>        Function_Return retVal
21674>>>>>>>>>    End_Function
21675>>>>>>>>>
21675>>>>>>>>>    Procedure Set ComExpandHoverDelay Integer value
21677>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_I4 to value
21678>>>>>>>>>    End_Procedure
21679>>>>>>>>>
21679>>>>>>>>>    Function ComExpandDelay Returns Integer
21681>>>>>>>>>        Integer retVal
21681>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
21682>>>>>>>>>        Function_Return retVal
21683>>>>>>>>>    End_Function
21684>>>>>>>>>
21684>>>>>>>>>    Procedure Set ComExpandDelay Integer value
21686>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
21687>>>>>>>>>    End_Procedure
21688>>>>>>>>>
21688>>>>>>>>>    Function ComUseAltNumPadKeys Returns Boolean
21690>>>>>>>>>        Boolean retVal
21690>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to retVal
21691>>>>>>>>>        Function_Return retVal
21692>>>>>>>>>    End_Function
21693>>>>>>>>>
21693>>>>>>>>>    Procedure Set ComUseAltNumPadKeys Boolean value
21695>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to value
21696>>>>>>>>>    End_Procedure
21697>>>>>>>>>
21697>>>>>>>>>    Function ComUseSystemSaveBitsStyle Returns Boolean
21699>>>>>>>>>        Boolean retVal
21699>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_BOOL to retVal
21700>>>>>>>>>        Function_Return retVal
21701>>>>>>>>>    End_Function
21702>>>>>>>>>
21702>>>>>>>>>    Procedure Set ComUseSystemSaveBitsStyle Boolean value
21704>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_BOOL to value
21705>>>>>>>>>    End_Procedure
21706>>>>>>>>>
21706>>>>>>>>>    Function ComWrapLargePopups Returns Boolean
21708>>>>>>>>>        Boolean retVal
21708>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
21709>>>>>>>>>        Function_Return retVal
21710>>>>>>>>>    End_Function
21711>>>>>>>>>
21711>>>>>>>>>    Procedure Set ComWrapLargePopups Boolean value
21713>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
21714>>>>>>>>>    End_Procedure
21715>>>>>>>>>
21715>>>>>>>>>    Function ComShowKeyboardTips Returns Boolean
21717>>>>>>>>>        Boolean retVal
21717>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_BOOL to retVal
21718>>>>>>>>>        Function_Return retVal
21719>>>>>>>>>    End_Function
21720>>>>>>>>>
21720>>>>>>>>>    Procedure Set ComShowKeyboardTips Boolean value
21722>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_BOOL to value
21723>>>>>>>>>    End_Procedure
21724>>>>>>>>>
21724>>>>>>>>>    Function ComShowContextMenuAccelerators Returns Boolean
21726>>>>>>>>>        Boolean retVal
21726>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 35 OLE_VT_BOOL to retVal
21727>>>>>>>>>        Function_Return retVal
21728>>>>>>>>>    End_Function
21729>>>>>>>>>
21729>>>>>>>>>    Procedure Set ComShowContextMenuAccelerators Boolean value
21731>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 35 OLE_VT_BOOL to value
21732>>>>>>>>>    End_Procedure
21733>>>>>>>>>
21733>>>>>>>>>    // Synchronizes the activation of the mini-frame windows to the activation of its parent window
21733>>>>>>>>>    Function ComSyncActiveFloatingFrames Returns Boolean
21735>>>>>>>>>        Boolean retVal
21735>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
21736>>>>>>>>>        Function_Return retVal
21737>>>>>>>>>    End_Function
21738>>>>>>>>>
21738>>>>>>>>>    // Synchronizes the activation of the mini-frame windows to the activation of its parent window
21738>>>>>>>>>    Procedure Set ComSyncActiveFloatingFrames Boolean value
21740>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
21741>>>>>>>>>    End_Procedure
21742>>>>>>>>>
21742>>>>>>>>>    Function ComShowMiniToolbarTips Returns Boolean
21744>>>>>>>>>        Boolean retVal
21744>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
21745>>>>>>>>>        Function_Return retVal
21746>>>>>>>>>    End_Function
21747>>>>>>>>>
21747>>>>>>>>>    Procedure Set ComShowMiniToolbarTips Boolean value
21749>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
21750>>>>>>>>>    End_Procedure
21751>>>>>>>>>
21751>>>>>>>>>    // Color value for VisualStudio 2015 (and above) state color, usually applied to frame border and status bar
21751>>>>>>>>>    Function ComVSStateColor Returns OLE_COLOR
21753>>>>>>>>>        OLE_COLOR retVal
21753>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_I4 to retVal
21754>>>>>>>>>        Function_Return retVal
21755>>>>>>>>>    End_Function
21756>>>>>>>>>
21756>>>>>>>>>    // Color value for VisualStudio 2015 (and above) state color, usually applied to frame border and status bar
21756>>>>>>>>>    Procedure Set ComVSStateColor OLE_COLOR value
21758>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 45 OLE_VT_I4 to value
21759>>>>>>>>>    End_Procedure
21760>>>>>>>>>
21760>>>>>>>>>    Function ComShowPopupButtonsSelectedToolbarOnly Returns Boolean
21762>>>>>>>>>        Boolean retVal
21762>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to retVal
21763>>>>>>>>>        Function_Return retVal
21764>>>>>>>>>    End_Function
21765>>>>>>>>>
21765>>>>>>>>>    Procedure Set ComShowPopupButtonsSelectedToolbarOnly Boolean value
21767>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to value
21768>>>>>>>>>    End_Procedure
21769>>>>>>>>>
21769>>>>>>>>>    Procedure ComSetIconSize Boolean llLargeIcons Integer llcx Integer llcy
21771>>>>>>>>>        Handle hDispatchDriver
21771>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21772>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
21773>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLargeIcons
21774>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
21775>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
21776>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
21777>>>>>>>>>    End_Procedure
21778>>>>>>>>>
21778>>>>>>>>>    Function ComGetIconWidth Boolean llLargeIcons Returns Integer
21780>>>>>>>>>        Handle hDispatchDriver
21780>>>>>>>>>        Integer retVal
21780>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21781>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21782>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLargeIcons
21783>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
21784>>>>>>>>>        Function_Return retVal
21785>>>>>>>>>    End_Function
21786>>>>>>>>>
21786>>>>>>>>>    Function ComGetIconHeight Boolean llLargeIcons Returns Integer
21788>>>>>>>>>        Handle hDispatchDriver
21788>>>>>>>>>        Integer retVal
21788>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21789>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21790>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llLargeIcons
21791>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
21792>>>>>>>>>        Function_Return retVal
21793>>>>>>>>>    End_Function
21794>>>>>>>>>
21794>>>>>>>>>    Procedure ComAddHiddenCommand Integer llCommand
21796>>>>>>>>>        Handle hDispatchDriver
21796>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21797>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
21798>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
21799>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 10 OLE_VT_VOID
21800>>>>>>>>>    End_Procedure
21801>>>>>>>>>
21801>>>>>>>>>    Procedure ComSetPopupIconSize Integer llcx Integer llcy
21803>>>>>>>>>        Handle hDispatchDriver
21803>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21804>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21805>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
21806>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
21807>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
21808>>>>>>>>>    End_Procedure
21809>>>>>>>>>
21809>>>>>>>>>    Function ComGetPopupIconWidth Returns Integer
21811>>>>>>>>>        Handle hDispatchDriver
21811>>>>>>>>>        Integer retVal
21811>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21812>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 41 OLE_VT_I4 to retVal
21813>>>>>>>>>        Function_Return retVal
21814>>>>>>>>>    End_Function
21815>>>>>>>>>
21815>>>>>>>>>    Function ComGetPopupIconHeight Returns Integer
21817>>>>>>>>>        Handle hDispatchDriver
21817>>>>>>>>>        Integer retVal
21817>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21818>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 42 OLE_VT_I4 to retVal
21819>>>>>>>>>        Function_Return retVal
21820>>>>>>>>>    End_Function
21821>>>>>>>>>
21821>>>>>>>>>    Procedure ComRemoveHiddenCommands
21823>>>>>>>>>        Handle hDispatchDriver
21823>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21824>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 36 OLE_VT_VOID
21825>>>>>>>>>    End_Procedure
21826>>>>>>>>>
21826>>>>>>>>>    Procedure ComSetDPIScallingOptions Boolean llbScaleGalleryItems Boolean llbScaleToolbarIcons
21828>>>>>>>>>        Handle hDispatchDriver
21828>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21829>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
21830>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llbScaleGalleryItems
21831>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llbScaleToolbarIcons
21832>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 39 OLE_VT_VOID
21833>>>>>>>>>    End_Procedure
21834>>>>>>>>>
21834>>>>>>>>>    Function ComIsDPIScallingEnabled Returns Boolean
21836>>>>>>>>>        Handle hDispatchDriver
21836>>>>>>>>>        Boolean retVal
21836>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
21837>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_BOOL to retVal
21838>>>>>>>>>        Function_Return retVal
21839>>>>>>>>>    End_Function
21840>>>>>>>>>End_Class
21841>>>>>>>>>
21841>>>>>>>>>// CoClass
21841>>>>>>>>>// CLSID: {C0DE2200-A0EA-4D8E-8A73-49D5D084F527}
21841>>>>>>>>>Class cCJCommandBarsOptions is a cComAutomationObject
21842>>>>>>>>>    Import_Class_Protocol cCJICommandBarsOptions
21843>>>>>>>>>
21843>>>>>>>>>    Procedure Construct_Object
21845>>>>>>>>>        Forward Send Construct_Object
21847>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
21848>>>>>>>>>    End_Procedure
21849>>>>>>>>>End_Class
21850>>>>>>>>>
21850>>>>>>>>>// CLSID: {C0DE2200-0690-4528-8656-E33E61F39377}
21850>>>>>>>>>Class cCJICommandBar is a Mixin
21851>>>>>>>>>
21851>>>>>>>>>    Function ComTitle Returns String
21853>>>>>>>>>        String retVal
21853>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
21854>>>>>>>>>        Function_Return retVal
21855>>>>>>>>>    End_Function
21856>>>>>>>>>
21856>>>>>>>>>    Procedure Set ComTitle String value
21858>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
21859>>>>>>>>>    End_Procedure
21860>>>>>>>>>
21860>>>>>>>>>    Function ComVisible Returns Boolean
21862>>>>>>>>>        Boolean retVal
21862>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
21863>>>>>>>>>        Function_Return retVal
21864>>>>>>>>>    End_Function
21865>>>>>>>>>
21865>>>>>>>>>    Procedure Set ComVisible Boolean value
21867>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
21868>>>>>>>>>    End_Procedure
21869>>>>>>>>>
21869>>>>>>>>>    Function ComPosition Returns XTPBarPosition
21871>>>>>>>>>        XTPBarPosition retVal
21871>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
21872>>>>>>>>>        Function_Return retVal
21873>>>>>>>>>    End_Function
21874>>>>>>>>>
21874>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
21876>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
21877>>>>>>>>>    End_Procedure
21878>>>>>>>>>
21878>>>>>>>>>    Function ComBarID Returns Integer
21880>>>>>>>>>        Integer retVal
21880>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
21881>>>>>>>>>        Function_Return retVal
21882>>>>>>>>>    End_Function
21883>>>>>>>>>
21883>>>>>>>>>    Procedure Set ComBarID Integer value
21885>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
21886>>>>>>>>>    End_Procedure
21887>>>>>>>>>
21887>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
21889>>>>>>>>>        Boolean retVal
21889>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
21890>>>>>>>>>        Function_Return retVal
21891>>>>>>>>>    End_Function
21892>>>>>>>>>
21892>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
21894>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
21895>>>>>>>>>    End_Procedure
21896>>>>>>>>>
21896>>>>>>>>>    Function ComWidth Returns Integer
21898>>>>>>>>>        Integer retVal
21898>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
21899>>>>>>>>>        Function_Return retVal
21900>>>>>>>>>    End_Function
21901>>>>>>>>>
21901>>>>>>>>>    Procedure Set ComWidth Integer value
21903>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
21904>>>>>>>>>    End_Procedure
21905>>>>>>>>>
21905>>>>>>>>>    Function ComCloseable Returns Boolean
21907>>>>>>>>>        Boolean retVal
21907>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
21908>>>>>>>>>        Function_Return retVal
21909>>>>>>>>>    End_Function
21910>>>>>>>>>
21910>>>>>>>>>    Procedure Set ComCloseable Boolean value
21912>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
21913>>>>>>>>>    End_Procedure
21914>>>>>>>>>
21914>>>>>>>>>    Function ComEnableAnimation Returns Boolean
21916>>>>>>>>>        Boolean retVal
21916>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
21917>>>>>>>>>        Function_Return retVal
21918>>>>>>>>>    End_Function
21919>>>>>>>>>
21919>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
21921>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
21922>>>>>>>>>    End_Procedure
21923>>>>>>>>>
21923>>>>>>>>>    Function ComShowGripper Returns Boolean
21925>>>>>>>>>        Boolean retVal
21925>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
21926>>>>>>>>>        Function_Return retVal
21927>>>>>>>>>    End_Function
21928>>>>>>>>>
21928>>>>>>>>>    Procedure Set ComShowGripper Boolean value
21930>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
21931>>>>>>>>>    End_Procedure
21932>>>>>>>>>
21932>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
21934>>>>>>>>>        XTPButtonStyle retVal
21934>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
21935>>>>>>>>>        Function_Return retVal
21936>>>>>>>>>    End_Function
21937>>>>>>>>>
21937>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
21939>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
21940>>>>>>>>>    End_Procedure
21941>>>>>>>>>
21941>>>>>>>>>    Function ComCustomizable Returns Boolean
21943>>>>>>>>>        Boolean retVal
21943>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
21944>>>>>>>>>        Function_Return retVal
21945>>>>>>>>>    End_Function
21946>>>>>>>>>
21946>>>>>>>>>    Procedure Set ComCustomizable Boolean value
21948>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
21949>>>>>>>>>    End_Procedure
21950>>>>>>>>>
21950>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
21952>>>>>>>>>        Boolean retVal
21952>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
21953>>>>>>>>>        Function_Return retVal
21954>>>>>>>>>    End_Function
21955>>>>>>>>>
21955>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
21957>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
21958>>>>>>>>>    End_Procedure
21959>>>>>>>>>
21959>>>>>>>>>    Function ComDoubleGripper Returns Boolean
21961>>>>>>>>>        Boolean retVal
21961>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
21962>>>>>>>>>        Function_Return retVal
21963>>>>>>>>>    End_Function
21964>>>>>>>>>
21964>>>>>>>>>    Procedure Set ComDoubleGripper Boolean value
21966>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
21967>>>>>>>>>    End_Procedure
21968>>>>>>>>>
21968>>>>>>>>>    Function ComShowExpandButton Returns Boolean
21970>>>>>>>>>        Boolean retVal
21970>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
21971>>>>>>>>>        Function_Return retVal
21972>>>>>>>>>    End_Function
21973>>>>>>>>>
21973>>>>>>>>>    Procedure Set ComShowExpandButton Boolean value
21975>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
21976>>>>>>>>>    End_Procedure
21977>>>>>>>>>
21977>>>>>>>>>    Function ComSelectedControl Returns Variant
21979>>>>>>>>>        Variant retVal
21979>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
21980>>>>>>>>>        Function_Return retVal
21981>>>>>>>>>    End_Function
21982>>>>>>>>>
21982>>>>>>>>>    Procedure Set ComSelectedControl Variant value
21984>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
21985>>>>>>>>>    End_Procedure
21986>>>>>>>>>
21986>>>>>>>>>    Function ComCustomizeDialogPresent Returns Boolean
21988>>>>>>>>>        Boolean retVal
21988>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to retVal
21989>>>>>>>>>        Function_Return retVal
21990>>>>>>>>>    End_Function
21991>>>>>>>>>
21991>>>>>>>>>    Procedure Set ComCustomizeDialogPresent Boolean value
21993>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to value
21994>>>>>>>>>    End_Procedure
21995>>>>>>>>>
21995>>>>>>>>>    Function ComTextOrientation Returns XTPBarTextOrientation
21997>>>>>>>>>        XTPBarTextOrientation retVal
21997>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_I4 to retVal
21998>>>>>>>>>        Function_Return retVal
21999>>>>>>>>>    End_Function
22000>>>>>>>>>
22000>>>>>>>>>    Procedure Set ComTextOrientation XTPBarTextOrientation value
22002>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 40 OLE_VT_I4 to value
22003>>>>>>>>>    End_Procedure
22004>>>>>>>>>
22004>>>>>>>>>    Function ComType Returns XTPBarType
22006>>>>>>>>>        Handle hDispatchDriver
22006>>>>>>>>>        XTPBarType retVal
22006>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22007>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
22008>>>>>>>>>        Function_Return retVal
22009>>>>>>>>>    End_Function
22010>>>>>>>>>
22010>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
22012>>>>>>>>>        Handle hDispatchDriver
22012>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22013>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22014>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
22015>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
22016>>>>>>>>>    End_Procedure
22017>>>>>>>>>
22017>>>>>>>>>    Function ComBuiltIn Returns Boolean
22019>>>>>>>>>        Handle hDispatchDriver
22019>>>>>>>>>        Boolean retVal
22019>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22020>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
22021>>>>>>>>>        Function_Return retVal
22022>>>>>>>>>    End_Function
22023>>>>>>>>>
22023>>>>>>>>>    Procedure ComDelete
22025>>>>>>>>>        Handle hDispatchDriver
22025>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22026>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
22027>>>>>>>>>    End_Procedure
22028>>>>>>>>>
22028>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
22030>>>>>>>>>        Handle hDispatchDriver
22030>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22031>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22032>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
22033>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
22034>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
22035>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
22036>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
22037>>>>>>>>>    End_Procedure
22038>>>>>>>>>
22038>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
22040>>>>>>>>>        Handle hDispatchDriver
22040>>>>>>>>>        OLE_HANDLE retVal
22040>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22041>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
22042>>>>>>>>>        Function_Return retVal
22043>>>>>>>>>    End_Function
22044>>>>>>>>>
22044>>>>>>>>>    Function ComCommandBars Returns Variant
22046>>>>>>>>>        Handle hDispatchDriver
22046>>>>>>>>>        Variant retVal
22046>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22047>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
22048>>>>>>>>>        Function_Return retVal
22049>>>>>>>>>    End_Function
22050>>>>>>>>>
22050>>>>>>>>>    Function ComControls Returns Variant
22052>>>>>>>>>        Handle hDispatchDriver
22052>>>>>>>>>        Variant retVal
22052>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22053>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
22054>>>>>>>>>        Function_Return retVal
22055>>>>>>>>>    End_Function
22056>>>>>>>>>
22056>>>>>>>>>    Function ComShowPopup Variant llFlags Variant llx Variant lly Returns Integer
22058>>>>>>>>>        Handle hDispatchDriver
22058>>>>>>>>>        Integer retVal
22058>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22059>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
22060>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFlags
22061>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llx
22062>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lly
22063>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_I4 to retVal
22064>>>>>>>>>        Function_Return retVal
22065>>>>>>>>>    End_Function
22066>>>>>>>>>
22066>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
22068>>>>>>>>>        Handle hDispatchDriver
22068>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22069>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22070>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
22071>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
22072>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
22073>>>>>>>>>    End_Procedure
22074>>>>>>>>>
22074>>>>>>>>>    Function ComGetIconWidth Returns Integer
22076>>>>>>>>>        Handle hDispatchDriver
22076>>>>>>>>>        Integer retVal
22076>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22077>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
22078>>>>>>>>>        Function_Return retVal
22079>>>>>>>>>    End_Function
22080>>>>>>>>>
22080>>>>>>>>>    Function ComGetIconHeight Returns Integer
22082>>>>>>>>>        Handle hDispatchDriver
22082>>>>>>>>>        Integer retVal
22082>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22083>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
22084>>>>>>>>>        Function_Return retVal
22085>>>>>>>>>    End_Function
22086>>>>>>>>>
22086>>>>>>>>>    Procedure ComSetTearOffPopup String llCaption Integer llId Integer llWidth
22088>>>>>>>>>        Handle hDispatchDriver
22088>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22089>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
22090>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
22091>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22092>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
22093>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
22094>>>>>>>>>    End_Procedure
22095>>>>>>>>>
22095>>>>>>>>>    Function ComParent Returns Variant
22097>>>>>>>>>        Handle hDispatchDriver
22097>>>>>>>>>        Variant retVal
22097>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22098>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
22099>>>>>>>>>        Function_Return retVal
22100>>>>>>>>>    End_Function
22101>>>>>>>>>
22101>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
22103>>>>>>>>>        Handle hDispatchDriver
22103>>>>>>>>>        Variant retVal
22103>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22104>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22105>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
22106>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
22107>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
22108>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
22109>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
22110>>>>>>>>>        Function_Return retVal
22111>>>>>>>>>    End_Function
22112>>>>>>>>>
22112>>>>>>>>>    Procedure ComSetPopupToolBar Boolean llToolBarType
22114>>>>>>>>>        Handle hDispatchDriver
22114>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22115>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22116>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llToolBarType
22117>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
22118>>>>>>>>>    End_Procedure
22119>>>>>>>>>
22119>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
22121>>>>>>>>>        Handle hDispatchDriver
22121>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22122>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22123>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22124>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22125>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
22126>>>>>>>>>    End_Procedure
22127>>>>>>>>>
22127>>>>>>>>>    Procedure ComModifyStyle XTPCommandBarStyle llRemove XTPCommandBarStyle llAdd
22129>>>>>>>>>        Handle hDispatchDriver
22129>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22130>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22131>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22132>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22133>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
22134>>>>>>>>>    End_Procedure
22135>>>>>>>>>
22135>>>>>>>>>    Procedure ComRedrawBar
22137>>>>>>>>>        Handle hDispatchDriver
22137>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22138>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
22139>>>>>>>>>    End_Procedure
22140>>>>>>>>>
22140>>>>>>>>>    Procedure ComRecalcLayout
22142>>>>>>>>>        Handle hDispatchDriver
22142>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22143>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
22144>>>>>>>>>    End_Procedure
22145>>>>>>>>>
22145>>>>>>>>>    Procedure ComReset
22147>>>>>>>>>        Handle hDispatchDriver
22147>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22148>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
22149>>>>>>>>>    End_Procedure
22150>>>>>>>>>End_Class
22151>>>>>>>>>
22151>>>>>>>>>// CoClass
22151>>>>>>>>>// CLSID: {C0DE2200-231A-4BE6-AA1B-9BA4B04CA048}
22151>>>>>>>>>Class cCJCommandBar is a cComAutomationObject
22152>>>>>>>>>    Import_Class_Protocol cCJICommandBar
22153>>>>>>>>>
22153>>>>>>>>>    Procedure Construct_Object
22155>>>>>>>>>        Forward Send Construct_Object
22157>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22158>>>>>>>>>    End_Procedure
22159>>>>>>>>>End_Class
22160>>>>>>>>>
22160>>>>>>>>>// CLSID: {C0DE2200-E7D2-4506-8D3F-D986E0B345D4}
22160>>>>>>>>>Class cCJIMenuBarMDIMenu is a Mixin
22161>>>>>>>>>
22161>>>>>>>>>    Function ComCaption Returns String
22163>>>>>>>>>        String retVal
22163>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
22164>>>>>>>>>        Function_Return retVal
22165>>>>>>>>>    End_Function
22166>>>>>>>>>
22166>>>>>>>>>    Procedure Set ComCaption String value
22168>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
22169>>>>>>>>>    End_Procedure
22170>>>>>>>>>
22170>>>>>>>>>    Function ComDescription Returns String
22172>>>>>>>>>        String retVal
22172>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
22173>>>>>>>>>        Function_Return retVal
22174>>>>>>>>>    End_Function
22175>>>>>>>>>
22175>>>>>>>>>    Procedure Set ComDescription String value
22177>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
22178>>>>>>>>>    End_Procedure
22179>>>>>>>>>
22179>>>>>>>>>    Function ComId Returns Integer
22181>>>>>>>>>        Handle hDispatchDriver
22181>>>>>>>>>        Integer retVal
22181>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22182>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
22183>>>>>>>>>        Function_Return retVal
22184>>>>>>>>>    End_Function
22185>>>>>>>>>
22185>>>>>>>>>    Function ComControls Returns Variant
22187>>>>>>>>>        Handle hDispatchDriver
22187>>>>>>>>>        Variant retVal
22187>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22188>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
22189>>>>>>>>>        Function_Return retVal
22190>>>>>>>>>    End_Function
22191>>>>>>>>>End_Class
22192>>>>>>>>>
22192>>>>>>>>>// CoClass
22192>>>>>>>>>// CLSID: {C0DE2200-B93E-44AD-B277-1B0F84A20CBA}
22192>>>>>>>>>Class cCJComMenuBarMDIMenu is a cComAutomationObject
22193>>>>>>>>>    Import_Class_Protocol cCJIMenuBarMDIMenu
22194>>>>>>>>>
22194>>>>>>>>>    Procedure Construct_Object
22196>>>>>>>>>        Forward Send Construct_Object
22198>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22199>>>>>>>>>    End_Procedure
22200>>>>>>>>>End_Class
22201>>>>>>>>>
22201>>>>>>>>>// CLSID: {C0DE2200-3D4B-41E3-B659-0F8E354111DF}
22201>>>>>>>>>Class cCJIMenuBarMDIMenus is a Mixin
22202>>>>>>>>>
22202>>>>>>>>>    // Gets the number of menus in the collection.
22202>>>>>>>>>    Function ComCount Returns Integer
22204>>>>>>>>>        Handle hDispatchDriver
22204>>>>>>>>>        Integer retVal
22204>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22205>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
22206>>>>>>>>>        Function_Return retVal
22207>>>>>>>>>    End_Function
22208>>>>>>>>>
22208>>>>>>>>>    // Gets an item from the collection by its Id.
22208>>>>>>>>>    Function ComItem Integer llId Returns Variant
22210>>>>>>>>>        Handle hDispatchDriver
22210>>>>>>>>>        Variant retVal
22210>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22211>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22212>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22213>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
22214>>>>>>>>>        Function_Return retVal
22215>>>>>>>>>    End_Function
22216>>>>>>>>>
22216>>>>>>>>>    Function Com_NewEnum Returns Variant
22218>>>>>>>>>        Handle hDispatchDriver
22218>>>>>>>>>        Variant retVal
22218>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22219>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
22220>>>>>>>>>        Function_Return retVal
22221>>>>>>>>>    End_Function
22222>>>>>>>>>
22222>>>>>>>>>    Function ComAdd Integer llId String llCaption String llDescription Returns Variant
22224>>>>>>>>>        Handle hDispatchDriver
22224>>>>>>>>>        Variant retVal
22224>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22225>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
22226>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22227>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
22228>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llDescription
22229>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
22230>>>>>>>>>        Function_Return retVal
22231>>>>>>>>>    End_Function
22232>>>>>>>>>
22232>>>>>>>>>    // Deletes all of the menus from the collection
22232>>>>>>>>>    Procedure ComDeleteAll
22234>>>>>>>>>        Handle hDispatchDriver
22234>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22235>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
22236>>>>>>>>>    End_Procedure
22237>>>>>>>>>End_Class
22238>>>>>>>>>
22238>>>>>>>>>// CoClass
22238>>>>>>>>>// CLSID: {C0DE2200-84B8-4930-8B30-5E56EC7F9860}
22238>>>>>>>>>Class cCJComMenuBarMDIMenus is a cComAutomationObject
22239>>>>>>>>>    Import_Class_Protocol cCJIMenuBarMDIMenus
22240>>>>>>>>>
22240>>>>>>>>>    Procedure Construct_Object
22242>>>>>>>>>        Forward Send Construct_Object
22244>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22245>>>>>>>>>    End_Procedure
22246>>>>>>>>>End_Class
22247>>>>>>>>>
22247>>>>>>>>>// CLSID: {C0DE2200-FED3-4FBC-B204-59C231E6092B}
22247>>>>>>>>>Class cCJIMenuBar is a Mixin
22248>>>>>>>>>
22248>>>>>>>>>    Function ComTitle Returns String
22250>>>>>>>>>        String retVal
22250>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
22251>>>>>>>>>        Function_Return retVal
22252>>>>>>>>>    End_Function
22253>>>>>>>>>
22253>>>>>>>>>    Procedure Set ComTitle String value
22255>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
22256>>>>>>>>>    End_Procedure
22257>>>>>>>>>
22257>>>>>>>>>    Function ComVisible Returns Boolean
22259>>>>>>>>>        Boolean retVal
22259>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
22260>>>>>>>>>        Function_Return retVal
22261>>>>>>>>>    End_Function
22262>>>>>>>>>
22262>>>>>>>>>    Procedure Set ComVisible Boolean value
22264>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
22265>>>>>>>>>    End_Procedure
22266>>>>>>>>>
22266>>>>>>>>>    Function ComPosition Returns XTPBarPosition
22268>>>>>>>>>        XTPBarPosition retVal
22268>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
22269>>>>>>>>>        Function_Return retVal
22270>>>>>>>>>    End_Function
22271>>>>>>>>>
22271>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
22273>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
22274>>>>>>>>>    End_Procedure
22275>>>>>>>>>
22275>>>>>>>>>    Function ComBarID Returns Integer
22277>>>>>>>>>        Integer retVal
22277>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
22278>>>>>>>>>        Function_Return retVal
22279>>>>>>>>>    End_Function
22280>>>>>>>>>
22280>>>>>>>>>    Procedure Set ComBarID Integer value
22282>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
22283>>>>>>>>>    End_Procedure
22284>>>>>>>>>
22284>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
22286>>>>>>>>>        Boolean retVal
22286>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
22287>>>>>>>>>        Function_Return retVal
22288>>>>>>>>>    End_Function
22289>>>>>>>>>
22289>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
22291>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
22292>>>>>>>>>    End_Procedure
22293>>>>>>>>>
22293>>>>>>>>>    Function ComWidth Returns Integer
22295>>>>>>>>>        Integer retVal
22295>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
22296>>>>>>>>>        Function_Return retVal
22297>>>>>>>>>    End_Function
22298>>>>>>>>>
22298>>>>>>>>>    Procedure Set ComWidth Integer value
22300>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
22301>>>>>>>>>    End_Procedure
22302>>>>>>>>>
22302>>>>>>>>>    Function ComCloseable Returns Boolean
22304>>>>>>>>>        Boolean retVal
22304>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
22305>>>>>>>>>        Function_Return retVal
22306>>>>>>>>>    End_Function
22307>>>>>>>>>
22307>>>>>>>>>    Procedure Set ComCloseable Boolean value
22309>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
22310>>>>>>>>>    End_Procedure
22311>>>>>>>>>
22311>>>>>>>>>    Function ComEnableAnimation Returns Boolean
22313>>>>>>>>>        Boolean retVal
22313>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
22314>>>>>>>>>        Function_Return retVal
22315>>>>>>>>>    End_Function
22316>>>>>>>>>
22316>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
22318>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
22319>>>>>>>>>    End_Procedure
22320>>>>>>>>>
22320>>>>>>>>>    Function ComShowGripper Returns Boolean
22322>>>>>>>>>        Boolean retVal
22322>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
22323>>>>>>>>>        Function_Return retVal
22324>>>>>>>>>    End_Function
22325>>>>>>>>>
22325>>>>>>>>>    Procedure Set ComShowGripper Boolean value
22327>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
22328>>>>>>>>>    End_Procedure
22329>>>>>>>>>
22329>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
22331>>>>>>>>>        XTPButtonStyle retVal
22331>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
22332>>>>>>>>>        Function_Return retVal
22333>>>>>>>>>    End_Function
22334>>>>>>>>>
22334>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
22336>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
22337>>>>>>>>>    End_Procedure
22338>>>>>>>>>
22338>>>>>>>>>    Function ComCustomizable Returns Boolean
22340>>>>>>>>>        Boolean retVal
22340>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
22341>>>>>>>>>        Function_Return retVal
22342>>>>>>>>>    End_Function
22343>>>>>>>>>
22343>>>>>>>>>    Procedure Set ComCustomizable Boolean value
22345>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
22346>>>>>>>>>    End_Procedure
22347>>>>>>>>>
22347>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
22349>>>>>>>>>        Boolean retVal
22349>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
22350>>>>>>>>>        Function_Return retVal
22351>>>>>>>>>    End_Function
22352>>>>>>>>>
22352>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
22354>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
22355>>>>>>>>>    End_Procedure
22356>>>>>>>>>
22356>>>>>>>>>    Function ComShowExpandButton Returns Boolean
22358>>>>>>>>>        Boolean retVal
22358>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
22359>>>>>>>>>        Function_Return retVal
22360>>>>>>>>>    End_Function
22361>>>>>>>>>
22361>>>>>>>>>    Procedure Set ComShowExpandButton Boolean value
22363>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
22364>>>>>>>>>    End_Procedure
22365>>>>>>>>>
22365>>>>>>>>>    Function ComSelectedControl Returns Variant
22367>>>>>>>>>        Variant retVal
22367>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
22368>>>>>>>>>        Function_Return retVal
22369>>>>>>>>>    End_Function
22370>>>>>>>>>
22370>>>>>>>>>    Procedure Set ComSelectedControl Variant value
22372>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
22373>>>>>>>>>    End_Procedure
22374>>>>>>>>>
22374>>>>>>>>>    Function ComCustomizeDialogPresent Returns Boolean
22376>>>>>>>>>        Boolean retVal
22376>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to retVal
22377>>>>>>>>>        Function_Return retVal
22378>>>>>>>>>    End_Function
22379>>>>>>>>>
22379>>>>>>>>>    Procedure Set ComCustomizeDialogPresent Boolean value
22381>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to value
22382>>>>>>>>>    End_Procedure
22383>>>>>>>>>
22383>>>>>>>>>    Function ComType Returns XTPBarType
22385>>>>>>>>>        Handle hDispatchDriver
22385>>>>>>>>>        XTPBarType retVal
22385>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22386>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
22387>>>>>>>>>        Function_Return retVal
22388>>>>>>>>>    End_Function
22389>>>>>>>>>
22389>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
22391>>>>>>>>>        Handle hDispatchDriver
22391>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22392>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22393>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
22394>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
22395>>>>>>>>>    End_Procedure
22396>>>>>>>>>
22396>>>>>>>>>    Function ComBuiltIn Returns Boolean
22398>>>>>>>>>        Handle hDispatchDriver
22398>>>>>>>>>        Boolean retVal
22398>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22399>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
22400>>>>>>>>>        Function_Return retVal
22401>>>>>>>>>    End_Function
22402>>>>>>>>>
22402>>>>>>>>>    Procedure ComDelete
22404>>>>>>>>>        Handle hDispatchDriver
22404>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22405>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
22406>>>>>>>>>    End_Procedure
22407>>>>>>>>>
22407>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
22409>>>>>>>>>        Handle hDispatchDriver
22409>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22410>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22411>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
22412>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
22413>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
22414>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
22415>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
22416>>>>>>>>>    End_Procedure
22417>>>>>>>>>
22417>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
22419>>>>>>>>>        Handle hDispatchDriver
22419>>>>>>>>>        OLE_HANDLE retVal
22419>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22420>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
22421>>>>>>>>>        Function_Return retVal
22422>>>>>>>>>    End_Function
22423>>>>>>>>>
22423>>>>>>>>>    Function ComCommandBars Returns Variant
22425>>>>>>>>>        Handle hDispatchDriver
22425>>>>>>>>>        Variant retVal
22425>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22426>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
22427>>>>>>>>>        Function_Return retVal
22428>>>>>>>>>    End_Function
22429>>>>>>>>>
22429>>>>>>>>>    Function ComControls Returns Variant
22431>>>>>>>>>        Handle hDispatchDriver
22431>>>>>>>>>        Variant retVal
22431>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22432>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
22433>>>>>>>>>        Function_Return retVal
22434>>>>>>>>>    End_Function
22435>>>>>>>>>
22435>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
22437>>>>>>>>>        Handle hDispatchDriver
22437>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22438>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22439>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
22440>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
22441>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
22442>>>>>>>>>    End_Procedure
22443>>>>>>>>>
22443>>>>>>>>>    Function ComGetIconWidth Returns Integer
22445>>>>>>>>>        Handle hDispatchDriver
22445>>>>>>>>>        Integer retVal
22445>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22446>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
22447>>>>>>>>>        Function_Return retVal
22448>>>>>>>>>    End_Function
22449>>>>>>>>>
22449>>>>>>>>>    Function ComGetIconHeight Returns Integer
22451>>>>>>>>>        Handle hDispatchDriver
22451>>>>>>>>>        Integer retVal
22451>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22452>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
22453>>>>>>>>>        Function_Return retVal
22454>>>>>>>>>    End_Function
22455>>>>>>>>>
22455>>>>>>>>>    Function ComParent Returns Variant
22457>>>>>>>>>        Handle hDispatchDriver
22457>>>>>>>>>        Variant retVal
22457>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22458>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
22459>>>>>>>>>        Function_Return retVal
22460>>>>>>>>>    End_Function
22461>>>>>>>>>
22461>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
22463>>>>>>>>>        Handle hDispatchDriver
22463>>>>>>>>>        Variant retVal
22463>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22464>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22465>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
22466>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
22467>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
22468>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
22469>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
22470>>>>>>>>>        Function_Return retVal
22471>>>>>>>>>    End_Function
22472>>>>>>>>>
22472>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
22474>>>>>>>>>        Handle hDispatchDriver
22474>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22475>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22476>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22477>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22478>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
22479>>>>>>>>>    End_Procedure
22480>>>>>>>>>
22480>>>>>>>>>    Procedure ComModifyStyle XTPCommandBarStyle llRemove XTPCommandBarStyle llAdd
22482>>>>>>>>>        Handle hDispatchDriver
22482>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22483>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22484>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22485>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22486>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
22487>>>>>>>>>    End_Procedure
22488>>>>>>>>>
22488>>>>>>>>>    Procedure ComRedrawBar
22490>>>>>>>>>        Handle hDispatchDriver
22490>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22491>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
22492>>>>>>>>>    End_Procedure
22493>>>>>>>>>
22493>>>>>>>>>    Procedure ComRecalcLayout
22495>>>>>>>>>        Handle hDispatchDriver
22495>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22496>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
22497>>>>>>>>>    End_Procedure
22498>>>>>>>>>
22498>>>>>>>>>    Procedure ComReset
22500>>>>>>>>>        Handle hDispatchDriver
22500>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22501>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
22502>>>>>>>>>    End_Procedure
22503>>>>>>>>>
22503>>>>>>>>>    Function ComMDIMenus Returns Variant
22505>>>>>>>>>        Handle hDispatchDriver
22505>>>>>>>>>        Variant retVal
22505>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22506>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 130 OLE_VT_DISPATCH to retVal
22507>>>>>>>>>        Function_Return retVal
22508>>>>>>>>>    End_Function
22509>>>>>>>>>
22509>>>>>>>>>    Procedure ComSwitchMDIMenu Integer llId
22511>>>>>>>>>        Handle hDispatchDriver
22511>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22512>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22513>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22514>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 131 OLE_VT_VOID
22515>>>>>>>>>    End_Procedure
22516>>>>>>>>>End_Class
22517>>>>>>>>>
22517>>>>>>>>>// CoClass
22517>>>>>>>>>// CLSID: {C0DE2200-603B-4AB7-B560-A2E43ADB22FC}
22517>>>>>>>>>Class cCJComMenuBar is a cComAutomationObject
22518>>>>>>>>>    Import_Class_Protocol cCJIMenuBar
22519>>>>>>>>>
22519>>>>>>>>>    Procedure Construct_Object
22521>>>>>>>>>        Forward Send Construct_Object
22523>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22524>>>>>>>>>    End_Procedure
22525>>>>>>>>>End_Class
22526>>>>>>>>>
22526>>>>>>>>>// CLSID: {C0DE2200-9D11-4373-B444-BC1F646D2B4D}
22526>>>>>>>>>Class cCJICommandBarsContextMenus is a Mixin
22527>>>>>>>>>
22527>>>>>>>>>    // Gets the number of menus in the collection.
22527>>>>>>>>>    Function ComCount Returns Integer
22529>>>>>>>>>        Handle hDispatchDriver
22529>>>>>>>>>        Integer retVal
22529>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22530>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
22531>>>>>>>>>        Function_Return retVal
22532>>>>>>>>>    End_Function
22533>>>>>>>>>
22533>>>>>>>>>    // Gets an item from the collection by its index.
22533>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
22535>>>>>>>>>        Handle hDispatchDriver
22535>>>>>>>>>        Variant retVal
22535>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22536>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22537>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22538>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
22539>>>>>>>>>        Function_Return retVal
22540>>>>>>>>>    End_Function
22541>>>>>>>>>
22541>>>>>>>>>    Function Com_NewEnum Returns Variant
22543>>>>>>>>>        Handle hDispatchDriver
22543>>>>>>>>>        Variant retVal
22543>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22544>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
22545>>>>>>>>>        Function_Return retVal
22546>>>>>>>>>    End_Function
22547>>>>>>>>>
22547>>>>>>>>>    // Adds a new command bar to the collection.
22547>>>>>>>>>    Function ComAdd Integer llId String llCaption Returns Variant
22549>>>>>>>>>        Handle hDispatchDriver
22549>>>>>>>>>        Variant retVal
22549>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22550>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22551>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22552>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
22553>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
22554>>>>>>>>>        Function_Return retVal
22555>>>>>>>>>    End_Function
22556>>>>>>>>>
22556>>>>>>>>>    // Finds the specified menu
22556>>>>>>>>>    Function ComFind Integer llId Returns Variant
22558>>>>>>>>>        Handle hDispatchDriver
22558>>>>>>>>>        Variant retVal
22558>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22559>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22560>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22561>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
22562>>>>>>>>>        Function_Return retVal
22563>>>>>>>>>    End_Function
22564>>>>>>>>>
22564>>>>>>>>>    // Deletes all of the menus from the collection
22564>>>>>>>>>    Procedure ComDeleteAll
22566>>>>>>>>>        Handle hDispatchDriver
22566>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22567>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
22568>>>>>>>>>    End_Procedure
22569>>>>>>>>>
22569>>>>>>>>>    // Adds a new command bar to the collection.
22569>>>>>>>>>    Procedure ComAddPopup Variant llPopupBar
22571>>>>>>>>>        Handle hDispatchDriver
22571>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22572>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22573>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llPopupBar
22574>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
22575>>>>>>>>>    End_Procedure
22576>>>>>>>>>End_Class
22577>>>>>>>>>
22577>>>>>>>>>// CoClass
22577>>>>>>>>>// CLSID: {C0DE2200-E6F6-4FC8-8273-AD15CCF8D293}
22577>>>>>>>>>Class cCJCommandBarsContextMenus is a cComAutomationObject
22578>>>>>>>>>    Import_Class_Protocol cCJICommandBarsContextMenus
22579>>>>>>>>>
22579>>>>>>>>>    Procedure Construct_Object
22581>>>>>>>>>        Forward Send Construct_Object
22583>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22584>>>>>>>>>    End_Procedure
22585>>>>>>>>>End_Class
22586>>>>>>>>>
22586>>>>>>>>>// CLSID: {C0DE2200-37BE-497E-A56D-D0CBDF0B3F97}
22586>>>>>>>>>Class cCJITabToolBar is a Mixin
22587>>>>>>>>>
22587>>>>>>>>>    Function ComTitle Returns String
22589>>>>>>>>>        String retVal
22589>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
22590>>>>>>>>>        Function_Return retVal
22591>>>>>>>>>    End_Function
22592>>>>>>>>>
22592>>>>>>>>>    Procedure Set ComTitle String value
22594>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
22595>>>>>>>>>    End_Procedure
22596>>>>>>>>>
22596>>>>>>>>>    Function ComVisible Returns Boolean
22598>>>>>>>>>        Boolean retVal
22598>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
22599>>>>>>>>>        Function_Return retVal
22600>>>>>>>>>    End_Function
22601>>>>>>>>>
22601>>>>>>>>>    Procedure Set ComVisible Boolean value
22603>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
22604>>>>>>>>>    End_Procedure
22605>>>>>>>>>
22605>>>>>>>>>    Function ComPosition Returns XTPBarPosition
22607>>>>>>>>>        XTPBarPosition retVal
22607>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
22608>>>>>>>>>        Function_Return retVal
22609>>>>>>>>>    End_Function
22610>>>>>>>>>
22610>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
22612>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
22613>>>>>>>>>    End_Procedure
22614>>>>>>>>>
22614>>>>>>>>>    Function ComBarID Returns Integer
22616>>>>>>>>>        Integer retVal
22616>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
22617>>>>>>>>>        Function_Return retVal
22618>>>>>>>>>    End_Function
22619>>>>>>>>>
22619>>>>>>>>>    Procedure Set ComBarID Integer value
22621>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
22622>>>>>>>>>    End_Procedure
22623>>>>>>>>>
22623>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
22625>>>>>>>>>        Boolean retVal
22625>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
22626>>>>>>>>>        Function_Return retVal
22627>>>>>>>>>    End_Function
22628>>>>>>>>>
22628>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
22630>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
22631>>>>>>>>>    End_Procedure
22632>>>>>>>>>
22632>>>>>>>>>    Function ComWidth Returns Integer
22634>>>>>>>>>        Integer retVal
22634>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
22635>>>>>>>>>        Function_Return retVal
22636>>>>>>>>>    End_Function
22637>>>>>>>>>
22637>>>>>>>>>    Procedure Set ComWidth Integer value
22639>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
22640>>>>>>>>>    End_Procedure
22641>>>>>>>>>
22641>>>>>>>>>    Function ComCloseable Returns Boolean
22643>>>>>>>>>        Boolean retVal
22643>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
22644>>>>>>>>>        Function_Return retVal
22645>>>>>>>>>    End_Function
22646>>>>>>>>>
22646>>>>>>>>>    Procedure Set ComCloseable Boolean value
22648>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
22649>>>>>>>>>    End_Procedure
22650>>>>>>>>>
22650>>>>>>>>>    Function ComEnableAnimation Returns Boolean
22652>>>>>>>>>        Boolean retVal
22652>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
22653>>>>>>>>>        Function_Return retVal
22654>>>>>>>>>    End_Function
22655>>>>>>>>>
22655>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
22657>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
22658>>>>>>>>>    End_Procedure
22659>>>>>>>>>
22659>>>>>>>>>    Function ComShowGripper Returns Boolean
22661>>>>>>>>>        Boolean retVal
22661>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
22662>>>>>>>>>        Function_Return retVal
22663>>>>>>>>>    End_Function
22664>>>>>>>>>
22664>>>>>>>>>    Procedure Set ComShowGripper Boolean value
22666>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
22667>>>>>>>>>    End_Procedure
22668>>>>>>>>>
22668>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
22670>>>>>>>>>        XTPButtonStyle retVal
22670>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
22671>>>>>>>>>        Function_Return retVal
22672>>>>>>>>>    End_Function
22673>>>>>>>>>
22673>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
22675>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
22676>>>>>>>>>    End_Procedure
22677>>>>>>>>>
22677>>>>>>>>>    Function ComCustomizable Returns Boolean
22679>>>>>>>>>        Boolean retVal
22679>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
22680>>>>>>>>>        Function_Return retVal
22681>>>>>>>>>    End_Function
22682>>>>>>>>>
22682>>>>>>>>>    Procedure Set ComCustomizable Boolean value
22684>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
22685>>>>>>>>>    End_Procedure
22686>>>>>>>>>
22686>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
22688>>>>>>>>>        Boolean retVal
22688>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
22689>>>>>>>>>        Function_Return retVal
22690>>>>>>>>>    End_Function
22691>>>>>>>>>
22691>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
22693>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
22694>>>>>>>>>    End_Procedure
22695>>>>>>>>>
22695>>>>>>>>>    Function ComDoubleGripper Returns Boolean
22697>>>>>>>>>        Boolean retVal
22697>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
22698>>>>>>>>>        Function_Return retVal
22699>>>>>>>>>    End_Function
22700>>>>>>>>>
22700>>>>>>>>>    Procedure Set ComDoubleGripper Boolean value
22702>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
22703>>>>>>>>>    End_Procedure
22704>>>>>>>>>
22704>>>>>>>>>    Function ComShowExpandButton Returns Boolean
22706>>>>>>>>>        Boolean retVal
22706>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to retVal
22707>>>>>>>>>        Function_Return retVal
22708>>>>>>>>>    End_Function
22709>>>>>>>>>
22709>>>>>>>>>    Procedure Set ComShowExpandButton Boolean value
22711>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 33 OLE_VT_BOOL to value
22712>>>>>>>>>    End_Procedure
22713>>>>>>>>>
22713>>>>>>>>>    Function ComSelectedControl Returns Variant
22715>>>>>>>>>        Variant retVal
22715>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
22716>>>>>>>>>        Function_Return retVal
22717>>>>>>>>>    End_Function
22718>>>>>>>>>
22718>>>>>>>>>    Procedure Set ComSelectedControl Variant value
22720>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
22721>>>>>>>>>    End_Procedure
22722>>>>>>>>>
22722>>>>>>>>>    Function ComCustomizeDialogPresent Returns Boolean
22724>>>>>>>>>        Boolean retVal
22724>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to retVal
22725>>>>>>>>>        Function_Return retVal
22726>>>>>>>>>    End_Function
22727>>>>>>>>>
22727>>>>>>>>>    Procedure Set ComCustomizeDialogPresent Boolean value
22729>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BOOL to value
22730>>>>>>>>>    End_Procedure
22731>>>>>>>>>
22731>>>>>>>>>    Function ComMinimumWidth Returns Integer
22733>>>>>>>>>        Integer retVal
22733>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 104 OLE_VT_I4 to retVal
22734>>>>>>>>>        Function_Return retVal
22735>>>>>>>>>    End_Function
22736>>>>>>>>>
22736>>>>>>>>>    Procedure Set ComMinimumWidth Integer value
22738>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 104 OLE_VT_I4 to value
22739>>>>>>>>>    End_Procedure
22740>>>>>>>>>
22740>>>>>>>>>    Function ComAllowReorder Returns Boolean
22742>>>>>>>>>        Boolean retVal
22742>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_BOOL to retVal
22743>>>>>>>>>        Function_Return retVal
22744>>>>>>>>>    End_Function
22745>>>>>>>>>
22745>>>>>>>>>    Procedure Set ComAllowReorder Boolean value
22747>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_BOOL to value
22748>>>>>>>>>    End_Procedure
22749>>>>>>>>>
22749>>>>>>>>>    Function ComType Returns XTPBarType
22751>>>>>>>>>        Handle hDispatchDriver
22751>>>>>>>>>        XTPBarType retVal
22751>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22752>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
22753>>>>>>>>>        Function_Return retVal
22754>>>>>>>>>    End_Function
22755>>>>>>>>>
22755>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
22757>>>>>>>>>        Handle hDispatchDriver
22757>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22758>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22759>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
22760>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
22761>>>>>>>>>    End_Procedure
22762>>>>>>>>>
22762>>>>>>>>>    Function ComBuiltIn Returns Boolean
22764>>>>>>>>>        Handle hDispatchDriver
22764>>>>>>>>>        Boolean retVal
22764>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22765>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
22766>>>>>>>>>        Function_Return retVal
22767>>>>>>>>>    End_Function
22768>>>>>>>>>
22768>>>>>>>>>    Procedure ComDelete
22770>>>>>>>>>        Handle hDispatchDriver
22770>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22771>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
22772>>>>>>>>>    End_Procedure
22773>>>>>>>>>
22773>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
22775>>>>>>>>>        Handle hDispatchDriver
22775>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22776>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22777>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
22778>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
22779>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
22780>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
22781>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
22782>>>>>>>>>    End_Procedure
22783>>>>>>>>>
22783>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
22785>>>>>>>>>        Handle hDispatchDriver
22785>>>>>>>>>        OLE_HANDLE retVal
22785>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22786>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
22787>>>>>>>>>        Function_Return retVal
22788>>>>>>>>>    End_Function
22789>>>>>>>>>
22789>>>>>>>>>    Function ComCommandBars Returns Variant
22791>>>>>>>>>        Handle hDispatchDriver
22791>>>>>>>>>        Variant retVal
22791>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22792>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
22793>>>>>>>>>        Function_Return retVal
22794>>>>>>>>>    End_Function
22795>>>>>>>>>
22795>>>>>>>>>    Function ComControls Returns Variant
22797>>>>>>>>>        Handle hDispatchDriver
22797>>>>>>>>>        Variant retVal
22797>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22798>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
22799>>>>>>>>>        Function_Return retVal
22800>>>>>>>>>    End_Function
22801>>>>>>>>>
22801>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
22803>>>>>>>>>        Handle hDispatchDriver
22803>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22804>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22805>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
22806>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
22807>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
22808>>>>>>>>>    End_Procedure
22809>>>>>>>>>
22809>>>>>>>>>    Function ComGetIconWidth Returns Integer
22811>>>>>>>>>        Handle hDispatchDriver
22811>>>>>>>>>        Integer retVal
22811>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22812>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
22813>>>>>>>>>        Function_Return retVal
22814>>>>>>>>>    End_Function
22815>>>>>>>>>
22815>>>>>>>>>    Function ComGetIconHeight Returns Integer
22817>>>>>>>>>        Handle hDispatchDriver
22817>>>>>>>>>        Integer retVal
22817>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22818>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
22819>>>>>>>>>        Function_Return retVal
22820>>>>>>>>>    End_Function
22821>>>>>>>>>
22821>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
22823>>>>>>>>>        Handle hDispatchDriver
22823>>>>>>>>>        Variant retVal
22823>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22824>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
22825>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
22826>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
22827>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
22828>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
22829>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
22830>>>>>>>>>        Function_Return retVal
22831>>>>>>>>>    End_Function
22832>>>>>>>>>
22832>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
22834>>>>>>>>>        Handle hDispatchDriver
22834>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22835>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22836>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22837>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22838>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
22839>>>>>>>>>    End_Procedure
22840>>>>>>>>>
22840>>>>>>>>>    Procedure ComModifyStyle XTPCommandBarStyle llRemove XTPCommandBarStyle llAdd
22842>>>>>>>>>        Handle hDispatchDriver
22842>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22843>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22844>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
22845>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
22846>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
22847>>>>>>>>>    End_Procedure
22848>>>>>>>>>
22848>>>>>>>>>    Procedure ComRedrawBar
22850>>>>>>>>>        Handle hDispatchDriver
22850>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22851>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
22852>>>>>>>>>    End_Procedure
22853>>>>>>>>>
22853>>>>>>>>>    Procedure ComRecalcLayout
22855>>>>>>>>>        Handle hDispatchDriver
22855>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22856>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
22857>>>>>>>>>    End_Procedure
22858>>>>>>>>>
22858>>>>>>>>>    Procedure ComReset
22860>>>>>>>>>        Handle hDispatchDriver
22860>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22861>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
22862>>>>>>>>>    End_Procedure
22863>>>>>>>>>
22863>>>>>>>>>    Function ComInsertCategory Integer llIndex String llCategory Returns Variant
22865>>>>>>>>>        Handle hDispatchDriver
22865>>>>>>>>>        Variant retVal
22865>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22866>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22867>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22868>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCategory
22869>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
22870>>>>>>>>>        Function_Return retVal
22871>>>>>>>>>    End_Function
22872>>>>>>>>>
22872>>>>>>>>>    Function ComCategoryCount Returns Integer
22874>>>>>>>>>        Handle hDispatchDriver
22874>>>>>>>>>        Integer retVal
22874>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22875>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
22876>>>>>>>>>        Function_Return retVal
22877>>>>>>>>>    End_Function
22878>>>>>>>>>
22878>>>>>>>>>    Function ComCategory Integer llIndex Returns Variant
22880>>>>>>>>>        Handle hDispatchDriver
22880>>>>>>>>>        Variant retVal
22880>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22881>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22882>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22883>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
22884>>>>>>>>>        Function_Return retVal
22885>>>>>>>>>    End_Function
22886>>>>>>>>>
22886>>>>>>>>>    Function Com_NewEnum Returns Variant
22888>>>>>>>>>        Handle hDispatchDriver
22888>>>>>>>>>        Variant retVal
22888>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22889>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
22890>>>>>>>>>        Function_Return retVal
22891>>>>>>>>>    End_Function
22892>>>>>>>>>
22892>>>>>>>>>    Procedure ComRemoveCategory Integer llIndex
22894>>>>>>>>>        Handle hDispatchDriver
22894>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22895>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22896>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22897>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 102 OLE_VT_VOID
22898>>>>>>>>>    End_Procedure
22899>>>>>>>>>
22899>>>>>>>>>    Function ComTabPaintManager Returns Variant
22901>>>>>>>>>        Handle hDispatchDriver
22901>>>>>>>>>        Variant retVal
22901>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22902>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_DISPATCH to retVal
22903>>>>>>>>>        Function_Return retVal
22904>>>>>>>>>    End_Function
22905>>>>>>>>>
22905>>>>>>>>>    Procedure ComUpdateTabs
22907>>>>>>>>>        Handle hDispatchDriver
22907>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22908>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 105 OLE_VT_VOID
22909>>>>>>>>>    End_Procedure
22910>>>>>>>>>End_Class
22911>>>>>>>>>
22911>>>>>>>>>// CLSID: {C0DE2200-8B30-4FE9-8F91-C1B573CF9AD5}
22911>>>>>>>>>Class cCJITabToolBarEvents is a Mixin
22912>>>>>>>>>
22912>>>>>>>>>    Procedure OnComSelectedChanged Variant llItem
22914>>>>>>>>>    End_Procedure
22915>>>>>>>>>
22915>>>>>>>>>    Procedure OnComBeforeItemClick Variant llItem Variant llCancel
22917>>>>>>>>>    End_Procedure
22918>>>>>>>>>
22918>>>>>>>>>    Procedure RegisterComEvents
22920>>>>>>>>>        Send RegisterComEvent 1 msg_OnComSelectedChanged
22921>>>>>>>>>        Send RegisterComEvent 4 msg_OnComBeforeItemClick
22922>>>>>>>>>    End_Procedure
22923>>>>>>>>>End_Class
22924>>>>>>>>>
22924>>>>>>>>>// CoClass
22924>>>>>>>>>// CLSID: {C0DE2200-37BA-4711-934F-C9612B6E00E5}
22924>>>>>>>>>Class cCJComTabToolBar is a cComAutomationObject
22925>>>>>>>>>    Import_Class_Protocol cCJITabToolBar
22926>>>>>>>>>    Import_Class_Protocol cCJITabToolBarEvents
22927>>>>>>>>>
22927>>>>>>>>>    Procedure Construct_Object
22929>>>>>>>>>        Forward Send Construct_Object
22931>>>>>>>>>        Set psEventId to "{C0DE2200-8B30-4FE9-8F91-C1B573CF9AD5}"
22932>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
22933>>>>>>>>>    End_Procedure
22934>>>>>>>>>End_Class
22935>>>>>>>>>
22935>>>>>>>>>// CLSID: {C0DE2200-60E7-4964-8F11-5D62D28407B9}
22935>>>>>>>>>Class cCJIRibbonGroups is a Mixin
22936>>>>>>>>>
22936>>>>>>>>>    Function ComInsertGroup Integer llIndex String llCaption Integer llId Returns Variant
22938>>>>>>>>>        Handle hDispatchDriver
22938>>>>>>>>>        Variant retVal
22938>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22939>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
22940>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22941>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
22942>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22943>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
22944>>>>>>>>>        Function_Return retVal
22945>>>>>>>>>    End_Function
22946>>>>>>>>>
22946>>>>>>>>>    Function ComGroupCount Returns Integer
22948>>>>>>>>>        Handle hDispatchDriver
22948>>>>>>>>>        Integer retVal
22948>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22949>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
22950>>>>>>>>>        Function_Return retVal
22951>>>>>>>>>    End_Function
22952>>>>>>>>>
22952>>>>>>>>>    Function ComGroup Integer llIndex Returns Variant
22954>>>>>>>>>        Handle hDispatchDriver
22954>>>>>>>>>        Variant retVal
22954>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22955>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22956>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22957>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
22958>>>>>>>>>        Function_Return retVal
22959>>>>>>>>>    End_Function
22960>>>>>>>>>
22960>>>>>>>>>    Function Com_NewEnum Returns Variant
22962>>>>>>>>>        Handle hDispatchDriver
22962>>>>>>>>>        Variant retVal
22962>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22963>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
22964>>>>>>>>>        Function_Return retVal
22965>>>>>>>>>    End_Function
22966>>>>>>>>>
22966>>>>>>>>>    Function ComAddGroup String llCaption Integer llId Returns Variant
22968>>>>>>>>>        Handle hDispatchDriver
22968>>>>>>>>>        Variant retVal
22968>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22969>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
22970>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
22971>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
22972>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_DISPATCH to retVal
22973>>>>>>>>>        Function_Return retVal
22974>>>>>>>>>    End_Function
22975>>>>>>>>>
22975>>>>>>>>>    Procedure ComRemoveGroup Integer llIndex
22977>>>>>>>>>        Handle hDispatchDriver
22977>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22978>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
22979>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
22980>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 103 OLE_VT_VOID
22981>>>>>>>>>    End_Procedure
22982>>>>>>>>>
22982>>>>>>>>>    Procedure ComRemoveAll
22984>>>>>>>>>        Handle hDispatchDriver
22984>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22985>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 104 OLE_VT_VOID
22986>>>>>>>>>    End_Procedure
22987>>>>>>>>>
22987>>>>>>>>>    Function ComRibbonTab Returns Variant
22989>>>>>>>>>        Handle hDispatchDriver
22989>>>>>>>>>        Variant retVal
22989>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
22990>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_DISPATCH to retVal
22991>>>>>>>>>        Function_Return retVal
22992>>>>>>>>>    End_Function
22993>>>>>>>>>End_Class
22994>>>>>>>>>
22994>>>>>>>>>// CoClass
22994>>>>>>>>>// CLSID: {C0DE2200-1A42-4B87-9E48-28934AC041E5}
22994>>>>>>>>>Class cCJRibbonGroups is a cComAutomationObject
22995>>>>>>>>>    Import_Class_Protocol cCJIRibbonGroups
22996>>>>>>>>>
22996>>>>>>>>>    Procedure Construct_Object
22998>>>>>>>>>        Forward Send Construct_Object
23000>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
23001>>>>>>>>>    End_Procedure
23002>>>>>>>>>End_Class
23003>>>>>>>>>
23003>>>>>>>>>// CLSID: {C0DE2200-0A27-4B80-857D-192A539AE88D}
23003>>>>>>>>>Class cCJIRibbonTab is a Mixin
23004>>>>>>>>>
23004>>>>>>>>>    Function ComCaption Returns String
23006>>>>>>>>>        String retVal
23006>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
23007>>>>>>>>>        Function_Return retVal
23008>>>>>>>>>    End_Function
23009>>>>>>>>>
23009>>>>>>>>>    Procedure Set ComCaption String value
23011>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
23012>>>>>>>>>    End_Procedure
23013>>>>>>>>>
23013>>>>>>>>>    Function ComTag Returns Variant
23015>>>>>>>>>        Variant retVal
23015>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_VARIANT to retVal
23016>>>>>>>>>        Function_Return retVal
23017>>>>>>>>>    End_Function
23018>>>>>>>>>
23018>>>>>>>>>    Procedure Set ComTag Variant value
23020>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_VARIANT to value
23021>>>>>>>>>    End_Procedure
23022>>>>>>>>>
23022>>>>>>>>>    Function ComSelected Returns Boolean
23024>>>>>>>>>        Boolean retVal
23024>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
23025>>>>>>>>>        Function_Return retVal
23026>>>>>>>>>    End_Function
23027>>>>>>>>>
23027>>>>>>>>>    Procedure Set ComSelected Boolean value
23029>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
23030>>>>>>>>>    End_Procedure
23031>>>>>>>>>
23031>>>>>>>>>    Function ComImage Returns Integer
23033>>>>>>>>>        Integer retVal
23033>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
23034>>>>>>>>>        Function_Return retVal
23035>>>>>>>>>    End_Function
23036>>>>>>>>>
23036>>>>>>>>>    Procedure Set ComImage Integer value
23038>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
23039>>>>>>>>>    End_Procedure
23040>>>>>>>>>
23040>>>>>>>>>    Function ComVisible Returns Boolean
23042>>>>>>>>>        Boolean retVal
23042>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
23043>>>>>>>>>        Function_Return retVal
23044>>>>>>>>>    End_Function
23045>>>>>>>>>
23045>>>>>>>>>    Procedure Set ComVisible Boolean value
23047>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
23048>>>>>>>>>    End_Procedure
23049>>>>>>>>>
23049>>>>>>>>>    Function ComEnabled Returns Boolean
23051>>>>>>>>>        Boolean retVal
23051>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to retVal
23052>>>>>>>>>        Function_Return retVal
23053>>>>>>>>>    End_Function
23054>>>>>>>>>
23054>>>>>>>>>    Procedure Set ComEnabled Boolean value
23056>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BOOL to value
23057>>>>>>>>>    End_Procedure
23058>>>>>>>>>
23058>>>>>>>>>    Function ComToolTip Returns String
23060>>>>>>>>>        String retVal
23060>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
23061>>>>>>>>>        Function_Return retVal
23062>>>>>>>>>    End_Function
23063>>>>>>>>>
23063>>>>>>>>>    Procedure Set ComToolTip String value
23065>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
23066>>>>>>>>>    End_Procedure
23067>>>>>>>>>
23067>>>>>>>>>    Function ComKeyboardTip Returns String
23069>>>>>>>>>        String retVal
23069>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BSTR to retVal
23070>>>>>>>>>        Function_Return retVal
23071>>>>>>>>>    End_Function
23072>>>>>>>>>
23072>>>>>>>>>    Procedure Set ComKeyboardTip String value
23074>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 53 OLE_VT_BSTR to value
23075>>>>>>>>>    End_Procedure
23076>>>>>>>>>
23076>>>>>>>>>    Function ComId Returns Integer
23078>>>>>>>>>        Integer retVal
23078>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to retVal
23079>>>>>>>>>        Function_Return retVal
23080>>>>>>>>>    End_Function
23081>>>>>>>>>
23081>>>>>>>>>    Procedure Set ComId Integer value
23083>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_I4 to value
23084>>>>>>>>>    End_Procedure
23085>>>>>>>>>
23085>>>>>>>>>    Function ComColor Returns XTPRibbonTabContextColor
23087>>>>>>>>>        XTPRibbonTabContextColor retVal
23087>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_I4 to retVal
23088>>>>>>>>>        Function_Return retVal
23089>>>>>>>>>    End_Function
23090>>>>>>>>>
23090>>>>>>>>>    Procedure Set ComColor XTPRibbonTabContextColor value
23092>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 51 OLE_VT_I4 to value
23093>>>>>>>>>    End_Procedure
23094>>>>>>>>>
23094>>>>>>>>>    Function ComContextCaption Returns String
23096>>>>>>>>>        String retVal
23096>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_BSTR to retVal
23097>>>>>>>>>        Function_Return retVal
23098>>>>>>>>>    End_Function
23099>>>>>>>>>
23099>>>>>>>>>    Procedure Set ComContextCaption String value
23101>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_BSTR to value
23102>>>>>>>>>    End_Procedure
23103>>>>>>>>>
23103>>>>>>>>>    Function ComCustomizeCaption Returns String
23105>>>>>>>>>        String retVal
23105>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 54 OLE_VT_BSTR to retVal
23106>>>>>>>>>        Function_Return retVal
23107>>>>>>>>>    End_Function
23108>>>>>>>>>
23108>>>>>>>>>    Procedure Set ComCustomizeCaption String value
23110>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 54 OLE_VT_BSTR to value
23111>>>>>>>>>    End_Procedure
23112>>>>>>>>>
23112>>>>>>>>>    Function ComIndex Returns Integer
23114>>>>>>>>>        Handle hDispatchDriver
23114>>>>>>>>>        Integer retVal
23114>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23115>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
23116>>>>>>>>>        Function_Return retVal
23117>>>>>>>>>    End_Function
23118>>>>>>>>>
23118>>>>>>>>>    Procedure ComMove Integer llIndex
23120>>>>>>>>>        Handle hDispatchDriver
23120>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23121>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23122>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
23123>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
23124>>>>>>>>>    End_Procedure
23125>>>>>>>>>
23125>>>>>>>>>    Function ComRibbonBar Returns Variant
23127>>>>>>>>>        Handle hDispatchDriver
23127>>>>>>>>>        Variant retVal
23127>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23128>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
23129>>>>>>>>>        Function_Return retVal
23130>>>>>>>>>    End_Function
23131>>>>>>>>>
23131>>>>>>>>>    Function ComGroups Returns Variant
23133>>>>>>>>>        Handle hDispatchDriver
23133>>>>>>>>>        Variant retVal
23133>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23134>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_DISPATCH to retVal
23135>>>>>>>>>        Function_Return retVal
23136>>>>>>>>>    End_Function
23137>>>>>>>>>
23137>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
23139>>>>>>>>>        Handle hDispatchDriver
23139>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23140>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23141>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
23142>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
23143>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
23144>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
23145>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 110 OLE_VT_VOID
23146>>>>>>>>>    End_Procedure
23147>>>>>>>>>End_Class
23148>>>>>>>>>
23148>>>>>>>>>// CoClass
23148>>>>>>>>>// CLSID: {C0DE2200-D924-4C08-92F8-D2B03CE65E1E}
23148>>>>>>>>>Class cCJRibbonTab is a cComAutomationObject
23149>>>>>>>>>    Import_Class_Protocol cCJIRibbonTab
23150>>>>>>>>>
23150>>>>>>>>>    Procedure Construct_Object
23152>>>>>>>>>        Forward Send Construct_Object
23154>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
23155>>>>>>>>>    End_Procedure
23156>>>>>>>>>End_Class
23157>>>>>>>>>
23157>>>>>>>>>// CLSID: {C0DE2200-AF64-4A71-94AE-1160A10E487A}
23157>>>>>>>>>Class cCJIRibbonBar is a Mixin
23158>>>>>>>>>
23158>>>>>>>>>    Function ComTitle Returns String
23160>>>>>>>>>        String retVal
23160>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
23161>>>>>>>>>        Function_Return retVal
23162>>>>>>>>>    End_Function
23163>>>>>>>>>
23163>>>>>>>>>    Procedure Set ComTitle String value
23165>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
23166>>>>>>>>>    End_Procedure
23167>>>>>>>>>
23167>>>>>>>>>    Function ComVisible Returns Boolean
23169>>>>>>>>>        Boolean retVal
23169>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
23170>>>>>>>>>        Function_Return retVal
23171>>>>>>>>>    End_Function
23172>>>>>>>>>
23172>>>>>>>>>    Procedure Set ComVisible Boolean value
23174>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
23175>>>>>>>>>    End_Procedure
23176>>>>>>>>>
23176>>>>>>>>>    Function ComPosition Returns XTPBarPosition
23178>>>>>>>>>        XTPBarPosition retVal
23178>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
23179>>>>>>>>>        Function_Return retVal
23180>>>>>>>>>    End_Function
23181>>>>>>>>>
23181>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
23183>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
23184>>>>>>>>>    End_Procedure
23185>>>>>>>>>
23185>>>>>>>>>    Function ComBarID Returns Integer
23187>>>>>>>>>        Integer retVal
23187>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
23188>>>>>>>>>        Function_Return retVal
23189>>>>>>>>>    End_Function
23190>>>>>>>>>
23190>>>>>>>>>    Procedure Set ComBarID Integer value
23192>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
23193>>>>>>>>>    End_Procedure
23194>>>>>>>>>
23194>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
23196>>>>>>>>>        Boolean retVal
23196>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
23197>>>>>>>>>        Function_Return retVal
23198>>>>>>>>>    End_Function
23199>>>>>>>>>
23199>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
23201>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
23202>>>>>>>>>    End_Procedure
23203>>>>>>>>>
23203>>>>>>>>>    Function ComWidth Returns Integer
23205>>>>>>>>>        Integer retVal
23205>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
23206>>>>>>>>>        Function_Return retVal
23207>>>>>>>>>    End_Function
23208>>>>>>>>>
23208>>>>>>>>>    Procedure Set ComWidth Integer value
23210>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
23211>>>>>>>>>    End_Procedure
23212>>>>>>>>>
23212>>>>>>>>>    Function ComCloseable Returns Boolean
23214>>>>>>>>>        Boolean retVal
23214>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
23215>>>>>>>>>        Function_Return retVal
23216>>>>>>>>>    End_Function
23217>>>>>>>>>
23217>>>>>>>>>    Procedure Set ComCloseable Boolean value
23219>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
23220>>>>>>>>>    End_Procedure
23221>>>>>>>>>
23221>>>>>>>>>    Function ComEnableAnimation Returns Boolean
23223>>>>>>>>>        Boolean retVal
23223>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
23224>>>>>>>>>        Function_Return retVal
23225>>>>>>>>>    End_Function
23226>>>>>>>>>
23226>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
23228>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
23229>>>>>>>>>    End_Procedure
23230>>>>>>>>>
23230>>>>>>>>>    Function ComShowGripper Returns Boolean
23232>>>>>>>>>        Boolean retVal
23232>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
23233>>>>>>>>>        Function_Return retVal
23234>>>>>>>>>    End_Function
23235>>>>>>>>>
23235>>>>>>>>>    Procedure Set ComShowGripper Boolean value
23237>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
23238>>>>>>>>>    End_Procedure
23239>>>>>>>>>
23239>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
23241>>>>>>>>>        XTPButtonStyle retVal
23241>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
23242>>>>>>>>>        Function_Return retVal
23243>>>>>>>>>    End_Function
23244>>>>>>>>>
23244>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
23246>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
23247>>>>>>>>>    End_Procedure
23248>>>>>>>>>
23248>>>>>>>>>    Function ComCustomizable Returns Boolean
23250>>>>>>>>>        Boolean retVal
23250>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
23251>>>>>>>>>        Function_Return retVal
23252>>>>>>>>>    End_Function
23253>>>>>>>>>
23253>>>>>>>>>    Procedure Set ComCustomizable Boolean value
23255>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
23256>>>>>>>>>    End_Procedure
23257>>>>>>>>>
23257>>>>>>>>>    Function ComSelectedControl Returns Variant
23259>>>>>>>>>        Variant retVal
23259>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
23260>>>>>>>>>        Function_Return retVal
23261>>>>>>>>>    End_Function
23262>>>>>>>>>
23262>>>>>>>>>    Procedure Set ComSelectedControl Variant value
23264>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
23265>>>>>>>>>    End_Procedure
23266>>>>>>>>>
23266>>>>>>>>>    Function ComGroupsVisible Returns Boolean
23268>>>>>>>>>        Boolean retVal
23268>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 104 OLE_VT_BOOL to retVal
23269>>>>>>>>>        Function_Return retVal
23270>>>>>>>>>    End_Function
23271>>>>>>>>>
23271>>>>>>>>>    Procedure Set ComGroupsVisible Boolean value
23273>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 104 OLE_VT_BOOL to value
23274>>>>>>>>>    End_Procedure
23275>>>>>>>>>
23275>>>>>>>>>    Function ComSelectedTab Returns Variant
23277>>>>>>>>>        Variant retVal
23277>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 105 OLE_VT_DISPATCH to retVal
23278>>>>>>>>>        Function_Return retVal
23279>>>>>>>>>    End_Function
23280>>>>>>>>>
23280>>>>>>>>>    Procedure Set ComSelectedTab Variant value
23282>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 105 OLE_VT_DISPATCH to value
23283>>>>>>>>>    End_Procedure
23284>>>>>>>>>
23284>>>>>>>>>    Function ComMinimumVisibleWidth Returns Integer
23286>>>>>>>>>        Integer retVal
23286>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_I4 to retVal
23287>>>>>>>>>        Function_Return retVal
23288>>>>>>>>>    End_Function
23289>>>>>>>>>
23289>>>>>>>>>    Procedure Set ComMinimumVisibleWidth Integer value
23291>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_I4 to value
23292>>>>>>>>>    End_Procedure
23293>>>>>>>>>
23293>>>>>>>>>    Function ComShowQuickAccessBelowRibbon Returns Boolean
23295>>>>>>>>>        Boolean retVal
23295>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 110 OLE_VT_BOOL to retVal
23296>>>>>>>>>        Function_Return retVal
23297>>>>>>>>>    End_Function
23298>>>>>>>>>
23298>>>>>>>>>    Procedure Set ComShowQuickAccessBelowRibbon Boolean value
23300>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 110 OLE_VT_BOOL to value
23301>>>>>>>>>    End_Procedure
23302>>>>>>>>>
23302>>>>>>>>>    Function ComShowQuickAccess Returns Boolean
23304>>>>>>>>>        Boolean retVal
23304>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 115 OLE_VT_BOOL to retVal
23305>>>>>>>>>        Function_Return retVal
23306>>>>>>>>>    End_Function
23307>>>>>>>>>
23307>>>>>>>>>    Procedure Set ComShowQuickAccess Boolean value
23309>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 115 OLE_VT_BOOL to value
23310>>>>>>>>>    End_Procedure
23311>>>>>>>>>
23311>>>>>>>>>    Function ComAllowQuickAccessDuplicates Returns Boolean
23313>>>>>>>>>        Boolean retVal
23313>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 116 OLE_VT_BOOL to retVal
23314>>>>>>>>>        Function_Return retVal
23315>>>>>>>>>    End_Function
23316>>>>>>>>>
23316>>>>>>>>>    Procedure Set ComAllowQuickAccessDuplicates Boolean value
23318>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 116 OLE_VT_BOOL to value
23319>>>>>>>>>    End_Procedure
23320>>>>>>>>>
23320>>>>>>>>>    Function ComAllowMinimize Returns Boolean
23322>>>>>>>>>        Boolean retVal
23322>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 117 OLE_VT_BOOL to retVal
23323>>>>>>>>>        Function_Return retVal
23324>>>>>>>>>    End_Function
23325>>>>>>>>>
23325>>>>>>>>>    Procedure Set ComAllowMinimize Boolean value
23327>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 117 OLE_VT_BOOL to value
23328>>>>>>>>>    End_Procedure
23329>>>>>>>>>
23329>>>>>>>>>    Function ComMinimized Returns Boolean
23331>>>>>>>>>        Boolean retVal
23331>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 118 OLE_VT_BOOL to retVal
23332>>>>>>>>>        Function_Return retVal
23333>>>>>>>>>    End_Function
23334>>>>>>>>>
23334>>>>>>>>>    Procedure Set ComMinimized Boolean value
23336>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 118 OLE_VT_BOOL to value
23337>>>>>>>>>    End_Procedure
23338>>>>>>>>>
23338>>>>>>>>>    Function ComFontHeight Returns Integer
23340>>>>>>>>>        Integer retVal
23340>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 119 OLE_VT_I4 to retVal
23341>>>>>>>>>        Function_Return retVal
23342>>>>>>>>>    End_Function
23343>>>>>>>>>
23343>>>>>>>>>    Procedure Set ComFontHeight Integer value
23345>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 119 OLE_VT_I4 to value
23346>>>>>>>>>    End_Procedure
23347>>>>>>>>>
23347>>>>>>>>>    Function ComTabsVisible Returns Boolean
23349>>>>>>>>>        Boolean retVal
23349>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_BOOL to retVal
23350>>>>>>>>>        Function_Return retVal
23351>>>>>>>>>    End_Function
23352>>>>>>>>>
23352>>>>>>>>>    Procedure Set ComTabsVisible Boolean value
23354>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_BOOL to value
23355>>>>>>>>>    End_Procedure
23356>>>>>>>>>
23356>>>>>>>>>    Function ComShowCaptionAlways Returns Boolean
23358>>>>>>>>>        Boolean retVal
23358>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 123 OLE_VT_BOOL to retVal
23359>>>>>>>>>        Function_Return retVal
23360>>>>>>>>>    End_Function
23361>>>>>>>>>
23361>>>>>>>>>    Procedure Set ComShowCaptionAlways Boolean value
23363>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 123 OLE_VT_BOOL to value
23364>>>>>>>>>    End_Procedure
23365>>>>>>>>>
23365>>>>>>>>>    Function ComAllowQuickAccessCustomization Returns Boolean
23367>>>>>>>>>        Boolean retVal
23367>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 124 OLE_VT_BOOL to retVal
23368>>>>>>>>>        Function_Return retVal
23369>>>>>>>>>    End_Function
23370>>>>>>>>>
23370>>>>>>>>>    Procedure Set ComAllowQuickAccessCustomization Boolean value
23372>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 124 OLE_VT_BOOL to value
23373>>>>>>>>>    End_Procedure
23374>>>>>>>>>
23374>>>>>>>>>    Function ComGroupsHeight Returns Integer
23376>>>>>>>>>        Integer retVal
23376>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 125 OLE_VT_I4 to retVal
23377>>>>>>>>>        Function_Return retVal
23378>>>>>>>>>    End_Function
23379>>>>>>>>>
23379>>>>>>>>>    Procedure Set ComGroupsHeight Integer value
23381>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 125 OLE_VT_I4 to value
23382>>>>>>>>>    End_Procedure
23383>>>>>>>>>
23383>>>>>>>>>    Function ComClientHeight Returns Integer
23385>>>>>>>>>        Integer retVal
23385>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 126 OLE_VT_I4 to retVal
23386>>>>>>>>>        Function_Return retVal
23387>>>>>>>>>    End_Function
23388>>>>>>>>>
23388>>>>>>>>>    Procedure Set ComClientHeight Integer value
23390>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 126 OLE_VT_I4 to value
23391>>>>>>>>>    End_Procedure
23392>>>>>>>>>
23392>>>>>>>>>    Function ComQuickAccessEmptyIconId Returns Integer
23394>>>>>>>>>        Integer retVal
23394>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 130 OLE_VT_I4 to retVal
23395>>>>>>>>>        Function_Return retVal
23396>>>>>>>>>    End_Function
23397>>>>>>>>>
23397>>>>>>>>>    Procedure Set ComQuickAccessEmptyIconId Integer value
23399>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 130 OLE_VT_I4 to value
23400>>>>>>>>>    End_Procedure
23401>>>>>>>>>
23401>>>>>>>>>    Function ComSystemButton Returns Variant
23403>>>>>>>>>        Variant retVal
23403>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 128 OLE_VT_DISPATCH to retVal
23404>>>>>>>>>        Function_Return retVal
23405>>>>>>>>>    End_Function
23406>>>>>>>>>
23406>>>>>>>>>    Procedure Set ComSystemButton Variant value
23408>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 128 OLE_VT_DISPATCH to value
23409>>>>>>>>>    End_Procedure
23410>>>>>>>>>
23410>>>>>>>>>    Function ComType Returns XTPBarType
23412>>>>>>>>>        Handle hDispatchDriver
23412>>>>>>>>>        XTPBarType retVal
23412>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23413>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
23414>>>>>>>>>        Function_Return retVal
23415>>>>>>>>>    End_Function
23416>>>>>>>>>
23416>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
23418>>>>>>>>>        Handle hDispatchDriver
23418>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23419>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23420>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
23421>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
23422>>>>>>>>>    End_Procedure
23423>>>>>>>>>
23423>>>>>>>>>    Function ComBuiltIn Returns Boolean
23425>>>>>>>>>        Handle hDispatchDriver
23425>>>>>>>>>        Boolean retVal
23425>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23426>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
23427>>>>>>>>>        Function_Return retVal
23428>>>>>>>>>    End_Function
23429>>>>>>>>>
23429>>>>>>>>>    Procedure ComDelete
23431>>>>>>>>>        Handle hDispatchDriver
23431>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23432>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
23433>>>>>>>>>    End_Procedure
23434>>>>>>>>>
23434>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
23436>>>>>>>>>        Handle hDispatchDriver
23436>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23437>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23438>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
23439>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
23440>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
23441>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
23442>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
23443>>>>>>>>>    End_Procedure
23444>>>>>>>>>
23444>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
23446>>>>>>>>>        Handle hDispatchDriver
23446>>>>>>>>>        OLE_HANDLE retVal
23446>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23447>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
23448>>>>>>>>>        Function_Return retVal
23449>>>>>>>>>    End_Function
23450>>>>>>>>>
23450>>>>>>>>>    Function ComCommandBars Returns Variant
23452>>>>>>>>>        Handle hDispatchDriver
23452>>>>>>>>>        Variant retVal
23452>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23453>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
23454>>>>>>>>>        Function_Return retVal
23455>>>>>>>>>    End_Function
23456>>>>>>>>>
23456>>>>>>>>>    Function ComControls Returns Variant
23458>>>>>>>>>        Handle hDispatchDriver
23458>>>>>>>>>        Variant retVal
23458>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23459>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
23460>>>>>>>>>        Function_Return retVal
23461>>>>>>>>>    End_Function
23462>>>>>>>>>
23462>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
23464>>>>>>>>>        Handle hDispatchDriver
23464>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23465>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
23466>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
23467>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
23468>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
23469>>>>>>>>>    End_Procedure
23470>>>>>>>>>
23470>>>>>>>>>    Function ComGetIconWidth Returns Integer
23472>>>>>>>>>        Handle hDispatchDriver
23472>>>>>>>>>        Integer retVal
23472>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23473>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
23474>>>>>>>>>        Function_Return retVal
23475>>>>>>>>>    End_Function
23476>>>>>>>>>
23476>>>>>>>>>    Function ComGetIconHeight Returns Integer
23478>>>>>>>>>        Handle hDispatchDriver
23478>>>>>>>>>        Integer retVal
23478>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23479>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
23480>>>>>>>>>        Function_Return retVal
23481>>>>>>>>>    End_Function
23482>>>>>>>>>
23482>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
23484>>>>>>>>>        Handle hDispatchDriver
23484>>>>>>>>>        Variant retVal
23484>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23485>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23486>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
23487>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
23488>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
23489>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
23490>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
23491>>>>>>>>>        Function_Return retVal
23492>>>>>>>>>    End_Function
23493>>>>>>>>>
23493>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
23495>>>>>>>>>        Handle hDispatchDriver
23495>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23496>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
23497>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
23498>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
23499>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
23500>>>>>>>>>    End_Procedure
23501>>>>>>>>>
23501>>>>>>>>>    Procedure ComRedrawBar
23503>>>>>>>>>        Handle hDispatchDriver
23503>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23504>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
23505>>>>>>>>>    End_Procedure
23506>>>>>>>>>
23506>>>>>>>>>    Procedure ComRecalcLayout
23508>>>>>>>>>        Handle hDispatchDriver
23508>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23509>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
23510>>>>>>>>>    End_Procedure
23511>>>>>>>>>
23511>>>>>>>>>    Procedure ComReset
23513>>>>>>>>>        Handle hDispatchDriver
23513>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23514>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
23515>>>>>>>>>    End_Procedure
23516>>>>>>>>>
23516>>>>>>>>>    Function ComInsertTab Integer llIndex String llCaption Returns Variant
23518>>>>>>>>>        Handle hDispatchDriver
23518>>>>>>>>>        Variant retVal
23518>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23519>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
23520>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
23521>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
23522>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
23523>>>>>>>>>        Function_Return retVal
23524>>>>>>>>>    End_Function
23525>>>>>>>>>
23525>>>>>>>>>    Function ComTabCount Returns Integer
23527>>>>>>>>>        Handle hDispatchDriver
23527>>>>>>>>>        Integer retVal
23527>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23528>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
23529>>>>>>>>>        Function_Return retVal
23530>>>>>>>>>    End_Function
23531>>>>>>>>>
23531>>>>>>>>>    Function ComTab Integer llIndex Returns Variant
23533>>>>>>>>>        Handle hDispatchDriver
23533>>>>>>>>>        Variant retVal
23533>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23534>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23535>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
23536>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
23537>>>>>>>>>        Function_Return retVal
23538>>>>>>>>>    End_Function
23539>>>>>>>>>
23539>>>>>>>>>    Function Com_NewEnum Returns Variant
23541>>>>>>>>>        Handle hDispatchDriver
23541>>>>>>>>>        Variant retVal
23541>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23542>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
23543>>>>>>>>>        Function_Return retVal
23544>>>>>>>>>    End_Function
23545>>>>>>>>>
23545>>>>>>>>>    Function ComRibbonPaintManager Returns Variant
23547>>>>>>>>>        Handle hDispatchDriver
23547>>>>>>>>>        Variant retVal
23547>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23548>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_DISPATCH to retVal
23549>>>>>>>>>        Function_Return retVal
23550>>>>>>>>>    End_Function
23551>>>>>>>>>
23551>>>>>>>>>    Function ComTabPaintManager Returns Variant
23553>>>>>>>>>        Handle hDispatchDriver
23553>>>>>>>>>        Variant retVal
23553>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23554>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_DISPATCH to retVal
23555>>>>>>>>>        Function_Return retVal
23556>>>>>>>>>    End_Function
23557>>>>>>>>>
23557>>>>>>>>>    Procedure ComEnableFrameTheme
23559>>>>>>>>>        Handle hDispatchDriver
23559>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23560>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 107 OLE_VT_VOID
23561>>>>>>>>>    End_Procedure
23562>>>>>>>>>
23562>>>>>>>>>    Function ComAddSystemButton Returns Variant
23564>>>>>>>>>        Handle hDispatchDriver
23564>>>>>>>>>        Variant retVal
23564>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23565>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_DISPATCH to retVal
23566>>>>>>>>>        Function_Return retVal
23567>>>>>>>>>    End_Function
23568>>>>>>>>>
23568>>>>>>>>>    Function ComQuickAccessControls Returns Variant
23570>>>>>>>>>        Handle hDispatchDriver
23570>>>>>>>>>        Variant retVal
23570>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23571>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 109 OLE_VT_DISPATCH to retVal
23572>>>>>>>>>        Function_Return retVal
23573>>>>>>>>>    End_Function
23574>>>>>>>>>
23574>>>>>>>>>    Function ComFindTab Integer llId Returns Variant
23576>>>>>>>>>        Handle hDispatchDriver
23576>>>>>>>>>        Variant retVal
23576>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23577>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23578>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
23579>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_DISPATCH to retVal
23580>>>>>>>>>        Function_Return retVal
23581>>>>>>>>>    End_Function
23582>>>>>>>>>
23582>>>>>>>>>    Function ComFindGroup Integer llId Returns Variant
23584>>>>>>>>>        Handle hDispatchDriver
23584>>>>>>>>>        Variant retVal
23584>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23585>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23586>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
23587>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 112 OLE_VT_DISPATCH to retVal
23588>>>>>>>>>        Function_Return retVal
23589>>>>>>>>>    End_Function
23590>>>>>>>>>
23590>>>>>>>>>    Procedure ComRemoveAllTabs
23592>>>>>>>>>        Handle hDispatchDriver
23592>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23593>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 113 OLE_VT_VOID
23594>>>>>>>>>    End_Procedure
23595>>>>>>>>>
23595>>>>>>>>>    Procedure ComRemoveTab Integer llIndex
23597>>>>>>>>>        Handle hDispatchDriver
23597>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23598>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23599>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
23600>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 114 OLE_VT_VOID
23601>>>>>>>>>    End_Procedure
23602>>>>>>>>>
23602>>>>>>>>>    Function ComControlQuickAccess Returns Variant
23604>>>>>>>>>        Handle hDispatchDriver
23604>>>>>>>>>        Variant retVal
23604>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23605>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 120 OLE_VT_DISPATCH to retVal
23606>>>>>>>>>        Function_Return retVal
23607>>>>>>>>>    End_Function
23608>>>>>>>>>
23608>>>>>>>>>    Function ComControlSystemButton Returns Variant
23610>>>>>>>>>        Handle hDispatchDriver
23610>>>>>>>>>        Variant retVal
23610>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23611>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 121 OLE_VT_DISPATCH to retVal
23612>>>>>>>>>        Function_Return retVal
23613>>>>>>>>>    End_Function
23614>>>>>>>>>End_Class
23615>>>>>>>>>
23615>>>>>>>>>// CoClass
23615>>>>>>>>>// CLSID: {C0DE2200-34D1-4EBB-B58C-454DB52012D9}
23615>>>>>>>>>Class cCJRibbonBar is a cComAutomationObject
23616>>>>>>>>>    Import_Class_Protocol cCJIRibbonBar
23617>>>>>>>>>
23617>>>>>>>>>    Procedure Construct_Object
23619>>>>>>>>>        Forward Send Construct_Object
23621>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
23622>>>>>>>>>    End_Procedure
23623>>>>>>>>>End_Class
23624>>>>>>>>>
23624>>>>>>>>>// CLSID: {C0DE2200-46A4-4F99-83D8-C6D3C2B390FC}
23624>>>>>>>>>Class cCJIDialogBar is a Mixin
23625>>>>>>>>>
23625>>>>>>>>>    Function ComTitle Returns String
23627>>>>>>>>>        String retVal
23627>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
23628>>>>>>>>>        Function_Return retVal
23629>>>>>>>>>    End_Function
23630>>>>>>>>>
23630>>>>>>>>>    Procedure Set ComTitle String value
23632>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
23633>>>>>>>>>    End_Procedure
23634>>>>>>>>>
23634>>>>>>>>>    Function ComVisible Returns Boolean
23636>>>>>>>>>        Boolean retVal
23636>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
23637>>>>>>>>>        Function_Return retVal
23638>>>>>>>>>    End_Function
23639>>>>>>>>>
23639>>>>>>>>>    Procedure Set ComVisible Boolean value
23641>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
23642>>>>>>>>>    End_Procedure
23643>>>>>>>>>
23643>>>>>>>>>    Function ComPosition Returns XTPBarPosition
23645>>>>>>>>>        XTPBarPosition retVal
23645>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
23646>>>>>>>>>        Function_Return retVal
23647>>>>>>>>>    End_Function
23648>>>>>>>>>
23648>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
23650>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
23651>>>>>>>>>    End_Procedure
23652>>>>>>>>>
23652>>>>>>>>>    Function ComBarID Returns Integer
23654>>>>>>>>>        Integer retVal
23654>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
23655>>>>>>>>>        Function_Return retVal
23656>>>>>>>>>    End_Function
23657>>>>>>>>>
23657>>>>>>>>>    Procedure Set ComBarID Integer value
23659>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
23660>>>>>>>>>    End_Procedure
23661>>>>>>>>>
23661>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
23663>>>>>>>>>        Boolean retVal
23663>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
23664>>>>>>>>>        Function_Return retVal
23665>>>>>>>>>    End_Function
23666>>>>>>>>>
23666>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
23668>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
23669>>>>>>>>>    End_Procedure
23670>>>>>>>>>
23670>>>>>>>>>    Function ComWidth Returns Integer
23672>>>>>>>>>        Integer retVal
23672>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
23673>>>>>>>>>        Function_Return retVal
23674>>>>>>>>>    End_Function
23675>>>>>>>>>
23675>>>>>>>>>    Procedure Set ComWidth Integer value
23677>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
23678>>>>>>>>>    End_Procedure
23679>>>>>>>>>
23679>>>>>>>>>    Function ComCloseable Returns Boolean
23681>>>>>>>>>        Boolean retVal
23681>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
23682>>>>>>>>>        Function_Return retVal
23683>>>>>>>>>    End_Function
23684>>>>>>>>>
23684>>>>>>>>>    Procedure Set ComCloseable Boolean value
23686>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
23687>>>>>>>>>    End_Procedure
23688>>>>>>>>>
23688>>>>>>>>>    Function ComEnableAnimation Returns Boolean
23690>>>>>>>>>        Boolean retVal
23690>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
23691>>>>>>>>>        Function_Return retVal
23692>>>>>>>>>    End_Function
23693>>>>>>>>>
23693>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
23695>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
23696>>>>>>>>>    End_Procedure
23697>>>>>>>>>
23697>>>>>>>>>    Function ComShowGripper Returns Boolean
23699>>>>>>>>>        Boolean retVal
23699>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
23700>>>>>>>>>        Function_Return retVal
23701>>>>>>>>>    End_Function
23702>>>>>>>>>
23702>>>>>>>>>    Procedure Set ComShowGripper Boolean value
23704>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
23705>>>>>>>>>    End_Procedure
23706>>>>>>>>>
23706>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
23708>>>>>>>>>        XTPButtonStyle retVal
23708>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
23709>>>>>>>>>        Function_Return retVal
23710>>>>>>>>>    End_Function
23711>>>>>>>>>
23711>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
23713>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
23714>>>>>>>>>    End_Procedure
23715>>>>>>>>>
23715>>>>>>>>>    Function ComCaption Returns String
23717>>>>>>>>>        String retVal
23717>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BSTR to retVal
23718>>>>>>>>>        Function_Return retVal
23719>>>>>>>>>    End_Function
23720>>>>>>>>>
23720>>>>>>>>>    Procedure Set ComCaption String value
23722>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BSTR to value
23723>>>>>>>>>    End_Procedure
23724>>>>>>>>>
23724>>>>>>>>>    Function ComResizable Returns Boolean
23726>>>>>>>>>        Boolean retVal
23726>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BOOL to retVal
23727>>>>>>>>>        Function_Return retVal
23728>>>>>>>>>    End_Function
23729>>>>>>>>>
23729>>>>>>>>>    Procedure Set ComResizable Boolean value
23731>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BOOL to value
23732>>>>>>>>>    End_Procedure
23733>>>>>>>>>
23733>>>>>>>>>    Function ComChildHandle Returns OLE_HANDLE
23735>>>>>>>>>        OLE_HANDLE retVal
23735>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 103 OLE_VT_I4 to retVal
23736>>>>>>>>>        Function_Return retVal
23737>>>>>>>>>    End_Function
23738>>>>>>>>>
23738>>>>>>>>>    Procedure Set ComChildHandle OLE_HANDLE value
23740>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 103 OLE_VT_I4 to value
23741>>>>>>>>>    End_Procedure
23742>>>>>>>>>
23742>>>>>>>>>    Function ComShowCaption Returns Boolean
23744>>>>>>>>>        Boolean retVal
23744>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 105 OLE_VT_BOOL to retVal
23745>>>>>>>>>        Function_Return retVal
23746>>>>>>>>>    End_Function
23747>>>>>>>>>
23747>>>>>>>>>    Procedure Set ComShowCaption Boolean value
23749>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 105 OLE_VT_BOOL to value
23750>>>>>>>>>    End_Procedure
23751>>>>>>>>>
23751>>>>>>>>>    Function ComCaptionPopup Returns Boolean
23753>>>>>>>>>        Boolean retVal
23753>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_BOOL to retVal
23754>>>>>>>>>        Function_Return retVal
23755>>>>>>>>>    End_Function
23756>>>>>>>>>
23756>>>>>>>>>    Procedure Set ComCaptionPopup Boolean value
23758>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 106 OLE_VT_BOOL to value
23759>>>>>>>>>    End_Procedure
23760>>>>>>>>>
23760>>>>>>>>>    Function ComType Returns XTPBarType
23762>>>>>>>>>        Handle hDispatchDriver
23762>>>>>>>>>        XTPBarType retVal
23762>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23763>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
23764>>>>>>>>>        Function_Return retVal
23765>>>>>>>>>    End_Function
23766>>>>>>>>>
23766>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
23768>>>>>>>>>        Handle hDispatchDriver
23768>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23769>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
23770>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
23771>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
23772>>>>>>>>>    End_Procedure
23773>>>>>>>>>
23773>>>>>>>>>    Function ComBuiltIn Returns Boolean
23775>>>>>>>>>        Handle hDispatchDriver
23775>>>>>>>>>        Boolean retVal
23775>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23776>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
23777>>>>>>>>>        Function_Return retVal
23778>>>>>>>>>    End_Function
23779>>>>>>>>>
23779>>>>>>>>>    Procedure ComDelete
23781>>>>>>>>>        Handle hDispatchDriver
23781>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23782>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
23783>>>>>>>>>    End_Procedure
23784>>>>>>>>>
23784>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
23786>>>>>>>>>        Handle hDispatchDriver
23786>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23787>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23788>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
23789>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
23790>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
23791>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
23792>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
23793>>>>>>>>>    End_Procedure
23794>>>>>>>>>
23794>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
23796>>>>>>>>>        Handle hDispatchDriver
23796>>>>>>>>>        OLE_HANDLE retVal
23796>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23797>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
23798>>>>>>>>>        Function_Return retVal
23799>>>>>>>>>    End_Function
23800>>>>>>>>>
23800>>>>>>>>>    Function ComCommandBars Returns Variant
23802>>>>>>>>>        Handle hDispatchDriver
23802>>>>>>>>>        Variant retVal
23802>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23803>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
23804>>>>>>>>>        Function_Return retVal
23805>>>>>>>>>    End_Function
23806>>>>>>>>>
23806>>>>>>>>>    Function ComCaptionPopupBar Returns Variant
23808>>>>>>>>>        Handle hDispatchDriver
23808>>>>>>>>>        Variant retVal
23808>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23809>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_DISPATCH to retVal
23810>>>>>>>>>        Function_Return retVal
23811>>>>>>>>>    End_Function
23812>>>>>>>>>
23812>>>>>>>>>    Procedure ComSetSize Integer llcx Integer llcy
23814>>>>>>>>>        Handle hDispatchDriver
23814>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23815>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
23816>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
23817>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
23818>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 104 OLE_VT_VOID
23819>>>>>>>>>    End_Procedure
23820>>>>>>>>>End_Class
23821>>>>>>>>>
23821>>>>>>>>>// CoClass
23821>>>>>>>>>// CLSID: {C0DE2200-C898-4A0B-8D36-A9566203A013}
23821>>>>>>>>>Class cCJDialogBar is a cComAutomationObject
23822>>>>>>>>>    Import_Class_Protocol cCJIDialogBar
23823>>>>>>>>>
23823>>>>>>>>>    Procedure Construct_Object
23825>>>>>>>>>        Forward Send Construct_Object
23827>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
23828>>>>>>>>>    End_Procedure
23829>>>>>>>>>End_Class
23830>>>>>>>>>
23830>>>>>>>>>// CLSID: {C0DE2200-CF7B-4042-BA6F-20F9A96E8AD1}
23830>>>>>>>>>Class cCJIPaintManager is a Mixin
23831>>>>>>>>>
23831>>>>>>>>>    Function ComEnableAnimation Returns Boolean
23833>>>>>>>>>        Boolean retVal
23833>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
23834>>>>>>>>>        Function_Return retVal
23835>>>>>>>>>    End_Function
23836>>>>>>>>>
23836>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
23838>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
23839>>>>>>>>>    End_Procedure
23840>>>>>>>>>
23840>>>>>>>>>    Function ComFlatToolBar Returns Boolean
23842>>>>>>>>>        Boolean retVal
23842>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to retVal
23843>>>>>>>>>        Function_Return retVal
23844>>>>>>>>>    End_Function
23845>>>>>>>>>
23845>>>>>>>>>    Procedure Set ComFlatToolBar Boolean value
23847>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BOOL to value
23848>>>>>>>>>    End_Procedure
23849>>>>>>>>>
23849>>>>>>>>>    Function ComFlatMenuBar Returns Boolean
23851>>>>>>>>>        Boolean retVal
23851>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
23852>>>>>>>>>        Function_Return retVal
23853>>>>>>>>>    End_Function
23854>>>>>>>>>
23854>>>>>>>>>    Procedure Set ComFlatMenuBar Boolean value
23856>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
23857>>>>>>>>>    End_Procedure
23858>>>>>>>>>
23858>>>>>>>>>    Function ComClearTypeTextQuality Returns Boolean
23860>>>>>>>>>        Boolean retVal
23860>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
23861>>>>>>>>>        Function_Return retVal
23862>>>>>>>>>    End_Function
23863>>>>>>>>>
23863>>>>>>>>>    Procedure Set ComClearTypeTextQuality Boolean value
23865>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
23866>>>>>>>>>    End_Procedure
23867>>>>>>>>>
23867>>>>>>>>>    Function ComShowShadow Returns Boolean
23869>>>>>>>>>        Boolean retVal
23869>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
23870>>>>>>>>>        Function_Return retVal
23871>>>>>>>>>    End_Function
23872>>>>>>>>>
23872>>>>>>>>>    Procedure Set ComShowShadow Boolean value
23874>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
23875>>>>>>>>>    End_Procedure
23876>>>>>>>>>
23876>>>>>>>>>    Function ComThemedStatusBar Returns Boolean
23878>>>>>>>>>        Boolean retVal
23878>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
23879>>>>>>>>>        Function_Return retVal
23880>>>>>>>>>    End_Function
23881>>>>>>>>>
23881>>>>>>>>>    Procedure Set ComThemedStatusBar Boolean value
23883>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
23884>>>>>>>>>    End_Procedure
23885>>>>>>>>>
23885>>>>>>>>>    Function ComThickCheckMark Returns Boolean
23887>>>>>>>>>        Boolean retVal
23887>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to retVal
23888>>>>>>>>>        Function_Return retVal
23889>>>>>>>>>    End_Function
23890>>>>>>>>>
23890>>>>>>>>>    Procedure Set ComThickCheckMark Boolean value
23892>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BOOL to value
23893>>>>>>>>>    End_Procedure
23894>>>>>>>>>
23894>>>>>>>>>    Function ComSelectImageInPopupBar Returns Boolean
23896>>>>>>>>>        Boolean retVal
23896>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
23897>>>>>>>>>        Function_Return retVal
23898>>>>>>>>>    End_Function
23899>>>>>>>>>
23899>>>>>>>>>    Procedure Set ComSelectImageInPopupBar Boolean value
23901>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
23902>>>>>>>>>    End_Procedure
23903>>>>>>>>>
23903>>>>>>>>>    Function ComThemedCheckBox Returns Boolean
23905>>>>>>>>>        Boolean retVal
23905>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
23906>>>>>>>>>        Function_Return retVal
23907>>>>>>>>>    End_Function
23908>>>>>>>>>
23908>>>>>>>>>    Procedure Set ComThemedCheckBox Boolean value
23910>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
23911>>>>>>>>>    End_Procedure
23912>>>>>>>>>
23912>>>>>>>>>    Function ComAutoResizeIcons Returns Boolean
23914>>>>>>>>>        Boolean retVal
23914>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
23915>>>>>>>>>        Function_Return retVal
23916>>>>>>>>>    End_Function
23917>>>>>>>>>
23917>>>>>>>>>    Procedure Set ComAutoResizeIcons Boolean value
23919>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
23920>>>>>>>>>    End_Procedure
23921>>>>>>>>>
23921>>>>>>>>>    Procedure ComRefreshMetrics
23923>>>>>>>>>        Handle hDispatchDriver
23923>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23924>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
23925>>>>>>>>>    End_Procedure
23926>>>>>>>>>
23926>>>>>>>>>    Procedure ComFillWorkspace OLE_HANDLE llhDC Integer llx Integer lly Integer llcx Integer llcy
23928>>>>>>>>>        Handle hDispatchDriver
23928>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23929>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
23930>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhDC
23931>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
23932>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
23933>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
23934>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
23935>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
23936>>>>>>>>>    End_Procedure
23937>>>>>>>>>
23937>>>>>>>>>    Procedure ComDrawRectangle OLE_HANDLE llhDC Integer llx Integer lly Integer llcx Integer llcy Boolean llSelected Boolean llPressed Boolean llEnabled Boolean llChecked Boolean llPopuped XTPBarType llbarType XTPBarPosition llbarPosition
23939>>>>>>>>>        Handle hDispatchDriver
23939>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23940>>>>>>>>>        Send PrepareParams to hDispatchDriver 12
23941>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhDC
23942>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
23943>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
23944>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
23945>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
23946>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSelected
23947>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llPressed
23948>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnabled
23949>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llChecked
23950>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llPopuped
23951>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbarType
23952>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbarPosition
23953>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
23954>>>>>>>>>    End_Procedure
23955>>>>>>>>>
23955>>>>>>>>>    Function ComGetRectangleTextColor Boolean llSelected Boolean llPressed Boolean llEnabled Boolean llChecked Boolean llPopuped XTPBarType llbarType XTPBarPosition llbarPosition Returns OLE_COLOR
23957>>>>>>>>>        Handle hDispatchDriver
23957>>>>>>>>>        OLE_COLOR retVal
23957>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23958>>>>>>>>>        Send PrepareParams to hDispatchDriver 7
23959>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSelected
23960>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llPressed
23961>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnabled
23962>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llChecked
23963>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llPopuped
23964>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbarType
23965>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llbarPosition
23966>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_I4 to retVal
23967>>>>>>>>>        Function_Return retVal
23968>>>>>>>>>    End_Function
23969>>>>>>>>>
23969>>>>>>>>>    Procedure ComLoadFrameIcon Longptr llModule String llPath Integer llWidth Integer llHeight
23971>>>>>>>>>        Handle hDispatchDriver
23971>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
23972>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
23973>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_INT_PTR llModule
23974>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
23975>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
23976>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llHeight
23977>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
23978>>>>>>>>>    End_Procedure
23979>>>>>>>>>End_Class
23980>>>>>>>>>
23980>>>>>>>>>// CoClass
23980>>>>>>>>>// CLSID: {C0DE2200-90B7-46EE-8786-A54278B0A559}
23980>>>>>>>>>Class cCJPaintManager is a cComAutomationObject
23981>>>>>>>>>    Import_Class_Protocol cCJIPaintManager
23982>>>>>>>>>
23982>>>>>>>>>    Procedure Construct_Object
23984>>>>>>>>>        Forward Send Construct_Object
23986>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
23987>>>>>>>>>    End_Procedure
23988>>>>>>>>>End_Class
23989>>>>>>>>>
23989>>>>>>>>>// CLSID: {C0DE2200-2F2F-4C05-92CF-6AEB0BFA0E6D}
23989>>>>>>>>>Class cCJITabWorkspace is a Mixin
23990>>>>>>>>>
23990>>>>>>>>>    Function ComFlags Returns XTPWorkspaceButtons
23992>>>>>>>>>        XTPWorkspaceButtons retVal
23992>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
23993>>>>>>>>>        Function_Return retVal
23994>>>>>>>>>    End_Function
23995>>>>>>>>>
23995>>>>>>>>>    Procedure Set ComFlags XTPWorkspaceButtons value
23997>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
23998>>>>>>>>>    End_Procedure
23999>>>>>>>>>
23999>>>>>>>>>    Function ComAllowReorder Returns Boolean
24001>>>>>>>>>        Boolean retVal
24001>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
24002>>>>>>>>>        Function_Return retVal
24003>>>>>>>>>    End_Function
24004>>>>>>>>>
24004>>>>>>>>>    Procedure Set ComAllowReorder Boolean value
24006>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
24007>>>>>>>>>    End_Procedure
24008>>>>>>>>>
24008>>>>>>>>>    Function ComAutoTheme Returns Boolean
24010>>>>>>>>>        Boolean retVal
24010>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
24011>>>>>>>>>        Function_Return retVal
24012>>>>>>>>>    End_Function
24013>>>>>>>>>
24013>>>>>>>>>    Procedure Set ComAutoTheme Boolean value
24015>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
24016>>>>>>>>>    End_Procedure
24017>>>>>>>>>
24017>>>>>>>>>    Function ComThemedBackColor Returns Boolean
24019>>>>>>>>>        Boolean retVal
24019>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
24020>>>>>>>>>        Function_Return retVal
24021>>>>>>>>>    End_Function
24022>>>>>>>>>
24022>>>>>>>>>    Procedure Set ComThemedBackColor Boolean value
24024>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
24025>>>>>>>>>    End_Procedure
24026>>>>>>>>>
24026>>>>>>>>>    Function ComUseSplitterTracker Returns Boolean
24028>>>>>>>>>        Boolean retVal
24028>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
24029>>>>>>>>>        Function_Return retVal
24030>>>>>>>>>    End_Function
24031>>>>>>>>>
24031>>>>>>>>>    Procedure Set ComUseSplitterTracker Boolean value
24033>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
24034>>>>>>>>>    End_Procedure
24035>>>>>>>>>
24035>>>>>>>>>    Function ComHorizGroupSplitting Returns Boolean
24037>>>>>>>>>        Boolean retVal
24037>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
24038>>>>>>>>>        Function_Return retVal
24039>>>>>>>>>    End_Function
24040>>>>>>>>>
24040>>>>>>>>>    Procedure Set ComHorizGroupSplitting Boolean value
24042>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
24043>>>>>>>>>    End_Procedure
24044>>>>>>>>>
24044>>>>>>>>>    Function ComNewTabPosition Returns XTPWorkspaceNewTabPosition
24046>>>>>>>>>        XTPWorkspaceNewTabPosition retVal
24046>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to retVal
24047>>>>>>>>>        Function_Return retVal
24048>>>>>>>>>    End_Function
24049>>>>>>>>>
24049>>>>>>>>>    Procedure Set ComNewTabPosition XTPWorkspaceNewTabPosition value
24051>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to value
24052>>>>>>>>>    End_Procedure
24053>>>>>>>>>
24053>>>>>>>>>    Function ComRightToLeft Returns Boolean
24055>>>>>>>>>        Boolean retVal
24055>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
24056>>>>>>>>>        Function_Return retVal
24057>>>>>>>>>    End_Function
24058>>>>>>>>>
24058>>>>>>>>>    Procedure Set ComRightToLeft Boolean value
24060>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
24061>>>>>>>>>    End_Procedure
24062>>>>>>>>>
24062>>>>>>>>>    Function ComIgnoreFlickersOnActivate Returns Boolean
24064>>>>>>>>>        Boolean retVal
24064>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_BOOL to retVal
24065>>>>>>>>>        Function_Return retVal
24066>>>>>>>>>    End_Function
24067>>>>>>>>>
24067>>>>>>>>>    Procedure Set ComIgnoreFlickersOnActivate Boolean value
24069>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_BOOL to value
24070>>>>>>>>>    End_Procedure
24071>>>>>>>>>
24071>>>>>>>>>    Function ComAutoUpdateTabCaption Returns Boolean
24073>>>>>>>>>        Boolean retVal
24073>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_BOOL to retVal
24074>>>>>>>>>        Function_Return retVal
24075>>>>>>>>>    End_Function
24076>>>>>>>>>
24076>>>>>>>>>    Procedure Set ComAutoUpdateTabCaption Boolean value
24078>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_BOOL to value
24079>>>>>>>>>    End_Procedure
24080>>>>>>>>>
24080>>>>>>>>>    Function ComEnableMarkup Returns Boolean
24082>>>>>>>>>        Boolean retVal
24082>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
24083>>>>>>>>>        Function_Return retVal
24084>>>>>>>>>    End_Function
24085>>>>>>>>>
24085>>>>>>>>>    Procedure Set ComEnableMarkup Boolean value
24087>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
24088>>>>>>>>>    End_Procedure
24089>>>>>>>>>
24089>>>>>>>>>    Function ComPaintManager Returns Variant
24091>>>>>>>>>        Handle hDispatchDriver
24091>>>>>>>>>        Variant retVal
24091>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24092>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
24093>>>>>>>>>        Function_Return retVal
24094>>>>>>>>>    End_Function
24095>>>>>>>>>
24095>>>>>>>>>    Procedure ComEnableGroups
24097>>>>>>>>>        Handle hDispatchDriver
24097>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24098>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
24099>>>>>>>>>    End_Procedure
24100>>>>>>>>>
24100>>>>>>>>>    Procedure ComRefresh
24102>>>>>>>>>        Handle hDispatchDriver
24102>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24103>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
24104>>>>>>>>>    End_Procedure
24105>>>>>>>>>
24105>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
24107>>>>>>>>>        Handle hDispatchDriver
24107>>>>>>>>>        Variant retVal
24107>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24108>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24109>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24110>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
24111>>>>>>>>>        Function_Return retVal
24112>>>>>>>>>    End_Function
24113>>>>>>>>>
24113>>>>>>>>>    Function Com_NewEnum Returns Variant
24115>>>>>>>>>        Handle hDispatchDriver
24115>>>>>>>>>        Variant retVal
24115>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24116>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
24117>>>>>>>>>        Function_Return retVal
24118>>>>>>>>>    End_Function
24119>>>>>>>>>
24119>>>>>>>>>    Function ComItemCount Returns Integer
24121>>>>>>>>>        Handle hDispatchDriver
24121>>>>>>>>>        Integer retVal
24121>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24122>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
24123>>>>>>>>>        Function_Return retVal
24124>>>>>>>>>    End_Function
24125>>>>>>>>>
24125>>>>>>>>>    Function ComHitTest Integer llx Integer lly Returns Variant
24127>>>>>>>>>        Handle hDispatchDriver
24127>>>>>>>>>        Variant retVal
24127>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24128>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24129>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
24130>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
24131>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_DISPATCH to retVal
24132>>>>>>>>>        Function_Return retVal
24133>>>>>>>>>    End_Function
24134>>>>>>>>>
24134>>>>>>>>>    Function ComSelected Returns Variant
24136>>>>>>>>>        Handle hDispatchDriver
24136>>>>>>>>>        Variant retVal
24136>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24137>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_DISPATCH to retVal
24138>>>>>>>>>        Function_Return retVal
24139>>>>>>>>>    End_Function
24140>>>>>>>>>
24140>>>>>>>>>    Procedure ComDoWorkspaceCommand XTPWorkspaceCommand llId
24142>>>>>>>>>        Handle hDispatchDriver
24142>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24143>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24144>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24145>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
24146>>>>>>>>>    End_Procedure
24147>>>>>>>>>
24147>>>>>>>>>    Function ComIsWorkspaceCommandEnabled XTPWorkspaceCommand llId Returns Boolean
24149>>>>>>>>>        Handle hDispatchDriver
24149>>>>>>>>>        Boolean retVal
24149>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24150>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24151>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24152>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_BOOL to retVal
24153>>>>>>>>>        Function_Return retVal
24154>>>>>>>>>    End_Function
24155>>>>>>>>>
24155>>>>>>>>>    Function ComToolTipContext Returns Variant
24157>>>>>>>>>        Handle hDispatchDriver
24157>>>>>>>>>        Variant retVal
24157>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24158>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
24159>>>>>>>>>        Function_Return retVal
24160>>>>>>>>>    End_Function
24161>>>>>>>>>
24161>>>>>>>>>    Function ComGroupCount Returns Integer
24163>>>>>>>>>        Handle hDispatchDriver
24163>>>>>>>>>        Integer retVal
24163>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24164>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_I4 to retVal
24165>>>>>>>>>        Function_Return retVal
24166>>>>>>>>>    End_Function
24167>>>>>>>>>
24167>>>>>>>>>    Function ComFindItem OLE_HANDLE llhWnd Returns Variant
24169>>>>>>>>>        Handle hDispatchDriver
24169>>>>>>>>>        Variant retVal
24169>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24170>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24171>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
24172>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 21 OLE_VT_DISPATCH to retVal
24173>>>>>>>>>        Function_Return retVal
24174>>>>>>>>>    End_Function
24175>>>>>>>>>
24175>>>>>>>>>    Function ComFindGroup Variant llpItem Returns Integer
24177>>>>>>>>>        Handle hDispatchDriver
24177>>>>>>>>>        Integer retVal
24177>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24178>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24179>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpItem
24180>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 22 OLE_VT_I4 to retVal
24181>>>>>>>>>        Function_Return retVal
24182>>>>>>>>>    End_Function
24183>>>>>>>>>
24183>>>>>>>>>    Procedure ComCreateGroup Variant llItem Boolean llHoriz
24185>>>>>>>>>        Handle hDispatchDriver
24185>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24186>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24187>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llItem
24188>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llHoriz
24189>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
24190>>>>>>>>>    End_Procedure
24191>>>>>>>>>
24191>>>>>>>>>    Procedure ComMoveToGroup Variant llItem Integer llGroup
24193>>>>>>>>>        Handle hDispatchDriver
24193>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24194>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24195>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llItem
24196>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llGroup
24197>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 24 OLE_VT_VOID
24198>>>>>>>>>    End_Procedure
24199>>>>>>>>>
24199>>>>>>>>>    Function ComGroupSplitter Integer llGroup Returns Real
24201>>>>>>>>>        Handle hDispatchDriver
24201>>>>>>>>>        Real retVal
24201>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24202>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24203>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llGroup
24204>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 27 OLE_VT_R8 to retVal
24205>>>>>>>>>        Function_Return retVal
24206>>>>>>>>>    End_Function
24207>>>>>>>>>
24207>>>>>>>>>    Procedure Set ComGroupSplitter Integer llGroup Real value
24209>>>>>>>>>        Handle hDispatchDriver
24209>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24210>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24211>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llGroup
24212>>>>>>>>>        Set ComProperty of hDispatchDriver 27 OLE_VT_R8 to value
24213>>>>>>>>>    End_Procedure
24214>>>>>>>>>
24214>>>>>>>>>    Procedure ComShowNewWindowTab Boolean llShow Integer llCommand
24216>>>>>>>>>        Handle hDispatchDriver
24216>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24217>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24218>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShow
24219>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
24220>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
24221>>>>>>>>>    End_Procedure
24222>>>>>>>>>
24222>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
24224>>>>>>>>>        Handle hDispatchDriver
24224>>>>>>>>>        OLE_HANDLE retVal
24224>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24225>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
24226>>>>>>>>>        Function_Return retVal
24227>>>>>>>>>    End_Function
24228>>>>>>>>>End_Class
24229>>>>>>>>>
24229>>>>>>>>>// CLSID: {C0DE2200-9AF2-433A-BA6D-8D7B12B76E12}
24229>>>>>>>>>Class cCJITabWorkspaceEvents is a Mixin
24230>>>>>>>>>
24230>>>>>>>>>    Procedure OnComRClick Variant llItem
24232>>>>>>>>>    End_Procedure
24233>>>>>>>>>
24233>>>>>>>>>    Procedure OnComNewItem Variant llItem
24235>>>>>>>>>    End_Procedure
24236>>>>>>>>>
24236>>>>>>>>>    Procedure OnComSelectedChanged Variant llItem
24238>>>>>>>>>    End_Procedure
24239>>>>>>>>>
24239>>>>>>>>>    Procedure OnComBeforeItemClick Variant llItem
24241>>>>>>>>>    End_Procedure
24242>>>>>>>>>
24242>>>>>>>>>    Procedure RegisterComEvents
24244>>>>>>>>>        Send RegisterComEvent 1 msg_OnComRClick
24245>>>>>>>>>        Send RegisterComEvent 2 msg_OnComNewItem
24246>>>>>>>>>        Send RegisterComEvent 3 msg_OnComSelectedChanged
24247>>>>>>>>>        Send RegisterComEvent 4 msg_OnComBeforeItemClick
24248>>>>>>>>>    End_Procedure
24249>>>>>>>>>End_Class
24250>>>>>>>>>
24250>>>>>>>>>// CoClass
24250>>>>>>>>>// CLSID: {C0DE2200-C1B2-4583-B022-37367FE0CF90}
24250>>>>>>>>>Class cCJTabWorkspace is a cComAutomationObject
24251>>>>>>>>>    Import_Class_Protocol cCJITabWorkspace
24252>>>>>>>>>    Import_Class_Protocol cCJITabWorkspaceEvents
24253>>>>>>>>>
24253>>>>>>>>>    Procedure Construct_Object
24255>>>>>>>>>        Forward Send Construct_Object
24257>>>>>>>>>        Set psEventId to "{C0DE2200-9AF2-433A-BA6D-8D7B12B76E12}"
24258>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
24259>>>>>>>>>    End_Procedure
24260>>>>>>>>>End_Class
24261>>>>>>>>>
24261>>>>>>>>>// CLSID: {C0DE2200-7A0A-447D-9CDC-8F63E7E5AF55}
24261>>>>>>>>>// Dispatch interface for StatusBar Control
24261>>>>>>>>>Class cCJIStatusBar is a Mixin
24262>>>>>>>>>
24262>>>>>>>>>    Function ComVisible Returns Boolean
24264>>>>>>>>>        Boolean retVal
24264>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
24265>>>>>>>>>        Function_Return retVal
24266>>>>>>>>>    End_Function
24267>>>>>>>>>
24267>>>>>>>>>    Procedure Set ComVisible Boolean value
24269>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
24270>>>>>>>>>    End_Procedure
24271>>>>>>>>>
24271>>>>>>>>>    Function ComIdleText Returns String
24273>>>>>>>>>        String retVal
24273>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
24274>>>>>>>>>        Function_Return retVal
24275>>>>>>>>>    End_Function
24276>>>>>>>>>
24276>>>>>>>>>    Procedure Set ComIdleText String value
24278>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
24279>>>>>>>>>    End_Procedure
24280>>>>>>>>>
24280>>>>>>>>>    Function ComDrawDisabledText Returns Boolean
24282>>>>>>>>>        Boolean retVal
24282>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
24283>>>>>>>>>        Function_Return retVal
24284>>>>>>>>>    End_Function
24285>>>>>>>>>
24285>>>>>>>>>    Procedure Set ComDrawDisabledText Boolean value
24287>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
24288>>>>>>>>>    End_Procedure
24289>>>>>>>>>
24289>>>>>>>>>    Function ComMinHeight Returns Integer
24291>>>>>>>>>        Integer retVal
24291>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to retVal
24292>>>>>>>>>        Function_Return retVal
24293>>>>>>>>>    End_Function
24294>>>>>>>>>
24294>>>>>>>>>    Procedure Set ComMinHeight Integer value
24296>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_I4 to value
24297>>>>>>>>>    End_Procedure
24298>>>>>>>>>
24298>>>>>>>>>    Function ComFont Returns Variant
24300>>>>>>>>>        Variant retVal
24300>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
24301>>>>>>>>>        Function_Return retVal
24302>>>>>>>>>    End_Function
24303>>>>>>>>>
24303>>>>>>>>>    Procedure Set ComFont Variant value
24305>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
24306>>>>>>>>>    End_Procedure
24307>>>>>>>>>
24307>>>>>>>>>    Function ComShowSizeGripper Returns Boolean
24309>>>>>>>>>        Boolean retVal
24309>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BOOL to retVal
24310>>>>>>>>>        Function_Return retVal
24311>>>>>>>>>    End_Function
24312>>>>>>>>>
24312>>>>>>>>>    Procedure Set ComShowSizeGripper Boolean value
24314>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BOOL to value
24315>>>>>>>>>    End_Procedure
24316>>>>>>>>>
24316>>>>>>>>>    Function ComRibbonDividerIndex Returns Integer
24318>>>>>>>>>        Integer retVal
24318>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_I4 to retVal
24319>>>>>>>>>        Function_Return retVal
24320>>>>>>>>>    End_Function
24321>>>>>>>>>
24321>>>>>>>>>    Procedure Set ComRibbonDividerIndex Integer value
24323>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_I4 to value
24324>>>>>>>>>    End_Procedure
24325>>>>>>>>>
24325>>>>>>>>>    Function ComEnableMarkup Returns Boolean
24327>>>>>>>>>        Boolean retVal
24327>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
24328>>>>>>>>>        Function_Return retVal
24329>>>>>>>>>    End_Function
24330>>>>>>>>>
24330>>>>>>>>>    Procedure Set ComEnableMarkup Boolean value
24332>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
24333>>>>>>>>>    End_Procedure
24334>>>>>>>>>
24334>>>>>>>>>    Function ComIsAllCaps Returns Boolean
24336>>>>>>>>>        Boolean retVal
24336>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to retVal
24337>>>>>>>>>        Function_Return retVal
24338>>>>>>>>>    End_Function
24339>>>>>>>>>
24339>>>>>>>>>    Procedure Set ComIsAllCaps Boolean value
24341>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_BOOL to value
24342>>>>>>>>>    End_Procedure
24343>>>>>>>>>
24343>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
24345>>>>>>>>>        Handle hDispatchDriver
24345>>>>>>>>>        OLE_HANDLE retVal
24345>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24346>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
24347>>>>>>>>>        Function_Return retVal
24348>>>>>>>>>    End_Function
24349>>>>>>>>>
24349>>>>>>>>>    Function ComAddPane Integer llId Returns Variant
24351>>>>>>>>>        Handle hDispatchDriver
24351>>>>>>>>>        Variant retVal
24351>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24352>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24353>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24354>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
24355>>>>>>>>>        Function_Return retVal
24356>>>>>>>>>    End_Function
24357>>>>>>>>>
24357>>>>>>>>>    Procedure ComSetPaneText Integer llIndex String llText
24359>>>>>>>>>        Handle hDispatchDriver
24359>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24360>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24361>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24362>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
24363>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
24364>>>>>>>>>    End_Procedure
24365>>>>>>>>>
24365>>>>>>>>>    Procedure ComSetPaneWidth Integer llIndex Integer llWidth
24367>>>>>>>>>        Handle hDispatchDriver
24367>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24368>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24369>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24370>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
24371>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
24372>>>>>>>>>    End_Procedure
24373>>>>>>>>>
24373>>>>>>>>>    Procedure ComSetPaneStyle Integer llIndex XTPStatusPaneStyle llStyle
24375>>>>>>>>>        Handle hDispatchDriver
24375>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24376>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24377>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24378>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llStyle
24379>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
24380>>>>>>>>>    End_Procedure
24381>>>>>>>>>
24381>>>>>>>>>    Function ComPane Integer llIndex Returns Variant
24383>>>>>>>>>        Handle hDispatchDriver
24383>>>>>>>>>        Variant retVal
24383>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24384>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24385>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24386>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
24387>>>>>>>>>        Function_Return retVal
24388>>>>>>>>>    End_Function
24389>>>>>>>>>
24389>>>>>>>>>    Function Com_NewEnum Returns Variant
24391>>>>>>>>>        Handle hDispatchDriver
24391>>>>>>>>>        Variant retVal
24391>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24392>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
24393>>>>>>>>>        Function_Return retVal
24394>>>>>>>>>    End_Function
24395>>>>>>>>>
24395>>>>>>>>>    Procedure ComRemoveAll
24397>>>>>>>>>        Handle hDispatchDriver
24397>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24398>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
24399>>>>>>>>>    End_Procedure
24400>>>>>>>>>
24400>>>>>>>>>    Function ComPaneCount Returns Integer
24402>>>>>>>>>        Handle hDispatchDriver
24402>>>>>>>>>        Integer retVal
24402>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24403>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_I4 to retVal
24404>>>>>>>>>        Function_Return retVal
24405>>>>>>>>>    End_Function
24406>>>>>>>>>
24406>>>>>>>>>    Function ComInsertPane Integer llIndex Integer llId Returns Variant
24408>>>>>>>>>        Handle hDispatchDriver
24408>>>>>>>>>        Variant retVal
24408>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24409>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24410>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24411>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24412>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_DISPATCH to retVal
24413>>>>>>>>>        Function_Return retVal
24414>>>>>>>>>    End_Function
24415>>>>>>>>>
24415>>>>>>>>>    Function ComFindPane Integer llId Returns Variant
24417>>>>>>>>>        Handle hDispatchDriver
24417>>>>>>>>>        Variant retVal
24417>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24418>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24419>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24420>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
24421>>>>>>>>>        Function_Return retVal
24422>>>>>>>>>    End_Function
24423>>>>>>>>>
24423>>>>>>>>>    Function ComHitTest Integer llx Integer lly Returns Variant
24425>>>>>>>>>        Handle hDispatchDriver
24425>>>>>>>>>        Variant retVal
24425>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24426>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24427>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
24428>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
24429>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
24430>>>>>>>>>        Function_Return retVal
24431>>>>>>>>>    End_Function
24432>>>>>>>>>
24432>>>>>>>>>    Function ComToolTipContext Returns Variant
24434>>>>>>>>>        Handle hDispatchDriver
24434>>>>>>>>>        Variant retVal
24434>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24435>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 15 OLE_VT_DISPATCH to retVal
24436>>>>>>>>>        Function_Return retVal
24437>>>>>>>>>    End_Function
24438>>>>>>>>>
24438>>>>>>>>>    Function ComAddSwitchPane Integer llId Returns Variant
24440>>>>>>>>>        Handle hDispatchDriver
24440>>>>>>>>>        Variant retVal
24440>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24441>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24442>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24443>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 17 OLE_VT_DISPATCH to retVal
24444>>>>>>>>>        Function_Return retVal
24445>>>>>>>>>    End_Function
24446>>>>>>>>>
24446>>>>>>>>>    Function ComAddSliderPane Integer llId Returns Variant
24448>>>>>>>>>        Handle hDispatchDriver
24448>>>>>>>>>        Variant retVal
24448>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24449>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24450>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24451>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 18 OLE_VT_DISPATCH to retVal
24452>>>>>>>>>        Function_Return retVal
24453>>>>>>>>>    End_Function
24454>>>>>>>>>
24454>>>>>>>>>    Function ComAddProgressPane Integer llId Returns Variant
24456>>>>>>>>>        Handle hDispatchDriver
24456>>>>>>>>>        Variant retVal
24456>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24457>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24458>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24459>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 21 OLE_VT_DISPATCH to retVal
24460>>>>>>>>>        Function_Return retVal
24461>>>>>>>>>    End_Function
24462>>>>>>>>>
24462>>>>>>>>>    Procedure ComEnableCustomization Boolean llEnable
24464>>>>>>>>>        Handle hDispatchDriver
24464>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24465>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24466>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24467>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
24468>>>>>>>>>    End_Procedure
24469>>>>>>>>>
24469>>>>>>>>>    Procedure ComSetAllCaps Boolean llSetAllCaps
24471>>>>>>>>>        Handle hDispatchDriver
24471>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24472>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24473>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllCaps
24474>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
24475>>>>>>>>>    End_Procedure
24476>>>>>>>>>End_Class
24477>>>>>>>>>
24477>>>>>>>>>// CLSID: {C0DE2200-4037-4B66-82A3-D948409E11A6}
24477>>>>>>>>>Class cCJIStatusBarEvents is a Mixin
24478>>>>>>>>>
24478>>>>>>>>>    Procedure OnComMouseDown Short llButton Short llShift Integer llx Integer lly
24480>>>>>>>>>    End_Procedure
24481>>>>>>>>>
24481>>>>>>>>>    Procedure OnComMouseUp Short llButton Short llShift Integer llx Integer lly
24483>>>>>>>>>    End_Procedure
24484>>>>>>>>>
24484>>>>>>>>>    Procedure OnComPaneDblClick Variant llPane
24486>>>>>>>>>    End_Procedure
24487>>>>>>>>>
24487>>>>>>>>>    Procedure OnComPaneClick Variant llPane
24489>>>>>>>>>    End_Procedure
24490>>>>>>>>>
24490>>>>>>>>>    Procedure OnComSwitchPaneClick Variant llPane Integer llSwitch
24492>>>>>>>>>    End_Procedure
24493>>>>>>>>>
24493>>>>>>>>>    Procedure OnComSliderPaneClick Variant llPane XTPSliderCommand llCommand Integer llPos
24495>>>>>>>>>    End_Procedure
24496>>>>>>>>>
24496>>>>>>>>>    Procedure RegisterComEvents
24498>>>>>>>>>        Send RegisterComEvent -605 msg_OnComMouseDown
24499>>>>>>>>>        Send RegisterComEvent -607 msg_OnComMouseUp
24500>>>>>>>>>        Send RegisterComEvent 1 msg_OnComPaneDblClick
24501>>>>>>>>>        Send RegisterComEvent 2 msg_OnComPaneClick
24502>>>>>>>>>        Send RegisterComEvent 3 msg_OnComSwitchPaneClick
24503>>>>>>>>>        Send RegisterComEvent 4 msg_OnComSliderPaneClick
24504>>>>>>>>>    End_Procedure
24505>>>>>>>>>End_Class
24506>>>>>>>>>
24506>>>>>>>>>// CoClass
24506>>>>>>>>>// CLSID: {C0DE2200-0AC9-4997-B4D7-75B0F2E7E4BD}
24506>>>>>>>>>// Xtreme StatusBar Control
24506>>>>>>>>>Class cCJComStatusBar is a cComAutomationObject
24507>>>>>>>>>    Import_Class_Protocol cCJIStatusBar
24508>>>>>>>>>    Import_Class_Protocol cCJIStatusBarEvents
24509>>>>>>>>>
24509>>>>>>>>>    Procedure Construct_Object
24511>>>>>>>>>        Forward Send Construct_Object
24513>>>>>>>>>        Set psEventId to "{C0DE2200-4037-4B66-82A3-D948409E11A6}"
24514>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
24515>>>>>>>>>    End_Procedure
24516>>>>>>>>>End_Class
24517>>>>>>>>>
24517>>>>>>>>>// CLSID: {C0DE2200-97D0-43D4-BEE8-9E2511D89F64}
24517>>>>>>>>>// Dispatch interface for CommandBars Control
24517>>>>>>>>>Class cCJ_DCommandBarsFrame is a Mixin
24518>>>>>>>>>
24518>>>>>>>>>    Function ComVisualTheme Returns XTPVisualTheme
24520>>>>>>>>>        XTPVisualTheme retVal
24520>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
24521>>>>>>>>>        Function_Return retVal
24522>>>>>>>>>    End_Function
24523>>>>>>>>>
24523>>>>>>>>>    Procedure Set ComVisualTheme XTPVisualTheme value
24525>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
24526>>>>>>>>>    End_Procedure
24527>>>>>>>>>
24527>>>>>>>>>    Function ComIcons Returns Variant
24529>>>>>>>>>        Variant retVal
24529>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
24530>>>>>>>>>        Function_Return retVal
24531>>>>>>>>>    End_Function
24532>>>>>>>>>
24532>>>>>>>>>    Procedure Set ComIcons Variant value
24534>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
24535>>>>>>>>>    End_Procedure
24536>>>>>>>>>
24536>>>>>>>>>    Function ComScaleMode Returns XTPScaleMode
24538>>>>>>>>>        XTPScaleMode retVal
24538>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
24539>>>>>>>>>        Function_Return retVal
24540>>>>>>>>>    End_Function
24541>>>>>>>>>
24541>>>>>>>>>    Procedure Set ComScaleMode XTPScaleMode value
24543>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
24544>>>>>>>>>    End_Procedure
24545>>>>>>>>>
24545>>>>>>>>>    Function ComRightToLeft Returns Boolean
24547>>>>>>>>>        Boolean retVal
24547>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to retVal
24548>>>>>>>>>        Function_Return retVal
24549>>>>>>>>>    End_Function
24550>>>>>>>>>
24550>>>>>>>>>    Procedure Set ComRightToLeft Boolean value
24552>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 46 OLE_VT_BOOL to value
24553>>>>>>>>>    End_Procedure
24554>>>>>>>>>
24554>>>>>>>>>    Function ComIsAllCaps Returns Boolean
24556>>>>>>>>>        Boolean retVal
24556>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_BOOL to retVal
24557>>>>>>>>>        Function_Return retVal
24558>>>>>>>>>    End_Function
24559>>>>>>>>>
24559>>>>>>>>>    Procedure Set ComIsAllCaps Boolean value
24561>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 69 OLE_VT_BOOL to value
24562>>>>>>>>>    End_Procedure
24563>>>>>>>>>
24563>>>>>>>>>    Function ComIsAllowFrameTransparency Returns Boolean
24565>>>>>>>>>        Boolean retVal
24565>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_BOOL to retVal
24566>>>>>>>>>        Function_Return retVal
24567>>>>>>>>>    End_Function
24568>>>>>>>>>
24568>>>>>>>>>    Procedure Set ComIsAllowFrameTransparency Boolean value
24570>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 71 OLE_VT_BOOL to value
24571>>>>>>>>>    End_Procedure
24572>>>>>>>>>
24572>>>>>>>>>    Function ComReCreateReparented Returns Boolean
24574>>>>>>>>>        Boolean retVal
24574>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
24575>>>>>>>>>        Function_Return retVal
24576>>>>>>>>>    End_Function
24577>>>>>>>>>
24577>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
24579>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
24580>>>>>>>>>    End_Procedure
24581>>>>>>>>>
24581>>>>>>>>>    Function ComCount Returns Integer
24583>>>>>>>>>        Handle hDispatchDriver
24583>>>>>>>>>        Integer retVal
24583>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24584>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
24585>>>>>>>>>        Function_Return retVal
24586>>>>>>>>>    End_Function
24587>>>>>>>>>
24587>>>>>>>>>    // Returns a specific item.
24587>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
24589>>>>>>>>>        Handle hDispatchDriver
24589>>>>>>>>>        Variant retVal
24589>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24590>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24591>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24592>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
24593>>>>>>>>>        Function_Return retVal
24594>>>>>>>>>    End_Function
24595>>>>>>>>>
24595>>>>>>>>>    Function Com_NewEnum Returns Variant
24597>>>>>>>>>        Handle hDispatchDriver
24597>>>>>>>>>        Variant retVal
24597>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24598>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
24599>>>>>>>>>        Function_Return retVal
24600>>>>>>>>>    End_Function
24601>>>>>>>>>
24601>>>>>>>>>    Function ComAdd String llName XTPBarPosition llPosition Returns Variant
24603>>>>>>>>>        Handle hDispatchDriver
24603>>>>>>>>>        Variant retVal
24603>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24604>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24605>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24606>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
24607>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
24608>>>>>>>>>        Function_Return retVal
24609>>>>>>>>>    End_Function
24610>>>>>>>>>
24610>>>>>>>>>    Procedure ComAddImageList Variant llImageList
24612>>>>>>>>>        Handle hDispatchDriver
24612>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24613>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24614>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llImageList
24615>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
24616>>>>>>>>>    End_Procedure
24617>>>>>>>>>
24617>>>>>>>>>    Function ComActiveMenuBar Returns Variant
24619>>>>>>>>>        Handle hDispatchDriver
24619>>>>>>>>>        Variant retVal
24619>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24620>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_DISPATCH to retVal
24621>>>>>>>>>        Function_Return retVal
24622>>>>>>>>>    End_Function
24623>>>>>>>>>
24623>>>>>>>>>    Procedure ComGetClientRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
24625>>>>>>>>>        Handle hDispatchDriver
24625>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24626>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24627>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
24628>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
24629>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
24630>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
24631>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
24632>>>>>>>>>    End_Procedure
24633>>>>>>>>>
24633>>>>>>>>>    Procedure ComRecalcLayout
24635>>>>>>>>>        Handle hDispatchDriver
24635>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24636>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
24637>>>>>>>>>    End_Procedure
24638>>>>>>>>>
24638>>>>>>>>>    Function ComKeyBindings Returns Variant
24640>>>>>>>>>        Handle hDispatchDriver
24640>>>>>>>>>        Variant retVal
24640>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24641>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_DISPATCH to retVal
24642>>>>>>>>>        Function_Return retVal
24643>>>>>>>>>    End_Function
24644>>>>>>>>>
24644>>>>>>>>>    Procedure ComAddIconHandle Integer llIcon Integer llCommand Integer llimageState Boolean llAlpha
24646>>>>>>>>>        Handle hDispatchDriver
24646>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24647>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24648>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIcon
24649>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
24650>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llimageState
24651>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llAlpha
24652>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
24653>>>>>>>>>    End_Procedure
24654>>>>>>>>>
24654>>>>>>>>>    Function ComOptions Returns Variant
24656>>>>>>>>>        Handle hDispatchDriver
24656>>>>>>>>>        Variant retVal
24656>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24657>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
24658>>>>>>>>>        Function_Return retVal
24659>>>>>>>>>    End_Function
24660>>>>>>>>>
24660>>>>>>>>>    Procedure ComSaveCommandBars Variant llRegistryKey Variant llAppName Variant llSection
24662>>>>>>>>>        Handle hDispatchDriver
24662>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24663>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
24664>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRegistryKey
24665>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llAppName
24666>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSection
24667>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 13 OLE_VT_VOID
24668>>>>>>>>>    End_Procedure
24669>>>>>>>>>
24669>>>>>>>>>    Procedure ComLoadCommandBars Variant llRegistryKey Variant llAppName Variant llSection
24671>>>>>>>>>        Handle hDispatchDriver
24671>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24672>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
24673>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRegistryKey
24674>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llAppName
24675>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSection
24676>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
24677>>>>>>>>>    End_Procedure
24678>>>>>>>>>
24678>>>>>>>>>    Procedure ComLoadDesignerBars Variant llFileNameOrResource Variant llInstance
24680>>>>>>>>>        Handle hDispatchDriver
24680>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24681>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24682>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFileNameOrResource
24683>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llInstance
24684>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
24685>>>>>>>>>    End_Procedure
24686>>>>>>>>>
24686>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
24688>>>>>>>>>        Handle hDispatchDriver
24688>>>>>>>>>        Variant retVal
24688>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24689>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24690>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
24691>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
24692>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
24693>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
24694>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
24695>>>>>>>>>        Function_Return retVal
24696>>>>>>>>>    End_Function
24697>>>>>>>>>
24697>>>>>>>>>    Procedure ComAboutBox
24699>>>>>>>>>        Handle hDispatchDriver
24699>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24700>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
24701>>>>>>>>>    End_Procedure
24702>>>>>>>>>
24702>>>>>>>>>    Procedure ComDockToolBar Variant llToolBar Integer llx Integer lly XTPBarPosition llPosition
24704>>>>>>>>>        Handle hDispatchDriver
24704>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24705>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24706>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llToolBar
24707>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
24708>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
24709>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
24710>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
24711>>>>>>>>>    End_Procedure
24712>>>>>>>>>
24712>>>>>>>>>    Function ComGetSpecialColor XTPColorManagerColor llIndex Returns OLE_COLOR
24714>>>>>>>>>        Handle hDispatchDriver
24714>>>>>>>>>        OLE_COLOR retVal
24714>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24715>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24716>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24717>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 19 OLE_VT_I4 to retVal
24718>>>>>>>>>        Function_Return retVal
24719>>>>>>>>>    End_Function
24720>>>>>>>>>
24720>>>>>>>>>    Function ComShowTabWorkspace Boolean llShow Returns Variant
24722>>>>>>>>>        Handle hDispatchDriver
24722>>>>>>>>>        Variant retVal
24722>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24723>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24724>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llShow
24725>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
24726>>>>>>>>>        Function_Return retVal
24727>>>>>>>>>    End_Function
24728>>>>>>>>>
24728>>>>>>>>>    Procedure ComMoveAlignedControl Variant llControl Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
24730>>>>>>>>>        Handle hDispatchDriver
24730>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24731>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
24732>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llControl
24733>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
24734>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
24735>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
24736>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
24737>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
24738>>>>>>>>>    End_Procedure
24739>>>>>>>>>
24739>>>>>>>>>    Function ComTabWorkspace Returns Variant
24741>>>>>>>>>        Handle hDispatchDriver
24741>>>>>>>>>        Variant retVal
24741>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24742>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 22 OLE_VT_DISPATCH to retVal
24743>>>>>>>>>        Function_Return retVal
24744>>>>>>>>>    End_Function
24745>>>>>>>>>
24745>>>>>>>>>    Procedure ComLoadStateFromString String llProfile Boolean llRestoreControls Boolean llRestoreOptions Boolean llSilent
24747>>>>>>>>>        Handle hDispatchDriver
24747>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24748>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
24749>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
24750>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRestoreControls
24751>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRestoreOptions
24752>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSilent
24753>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
24754>>>>>>>>>    End_Procedure
24755>>>>>>>>>
24755>>>>>>>>>    Function ComSaveStateToString Boolean llSaveControls Boolean llSaveOnlyCustomized Boolean llSaveOptions Returns String
24757>>>>>>>>>        Handle hDispatchDriver
24757>>>>>>>>>        String retVal
24757>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24758>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
24759>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveControls
24760>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveOnlyCustomized
24761>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSaveOptions
24762>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 24 OLE_VT_BSTR to retVal
24763>>>>>>>>>        Function_Return retVal
24764>>>>>>>>>    End_Function
24765>>>>>>>>>
24765>>>>>>>>>    Function ComStatusBar Returns Variant
24767>>>>>>>>>        Handle hDispatchDriver
24767>>>>>>>>>        Variant retVal
24767>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24768>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 25 OLE_VT_DISPATCH to retVal
24769>>>>>>>>>        Function_Return retVal
24770>>>>>>>>>    End_Function
24771>>>>>>>>>
24771>>>>>>>>>    Function ComMessageBar Returns Variant
24773>>>>>>>>>        Handle hDispatchDriver
24773>>>>>>>>>        Variant retVal
24773>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24774>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 28 OLE_VT_DISPATCH to retVal
24775>>>>>>>>>        Function_Return retVal
24776>>>>>>>>>    End_Function
24777>>>>>>>>>
24777>>>>>>>>>    Procedure ComEnableCustomization Boolean llEnable
24779>>>>>>>>>        Handle hDispatchDriver
24779>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24780>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24781>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24782>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 26 OLE_VT_VOID
24783>>>>>>>>>    End_Procedure
24784>>>>>>>>>
24784>>>>>>>>>    Function ComDesignerControls Returns Variant
24786>>>>>>>>>        Handle hDispatchDriver
24786>>>>>>>>>        Variant retVal
24786>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24787>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 27 OLE_VT_DISPATCH to retVal
24788>>>>>>>>>        Function_Return retVal
24789>>>>>>>>>    End_Function
24790>>>>>>>>>
24790>>>>>>>>>    Procedure ComEnableDefaultResetCustomizedToolbarChoice Boolean llEnable Boolean llDefaultYes
24792>>>>>>>>>        Handle hDispatchDriver
24792>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24793>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24794>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24795>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llDefaultYes
24796>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 72 OLE_VT_VOID
24797>>>>>>>>>    End_Procedure
24798>>>>>>>>>
24798>>>>>>>>>    Function ComGetDispatch Returns Variant
24800>>>>>>>>>        Handle hDispatchDriver
24800>>>>>>>>>        Variant retVal
24800>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24801>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 31 OLE_VT_DISPATCH to retVal
24802>>>>>>>>>        Function_Return retVal
24803>>>>>>>>>    End_Function
24804>>>>>>>>>
24804>>>>>>>>>    Procedure ComSetMDIClient OLE_HANDLE llhWnd
24806>>>>>>>>>        Handle hDispatchDriver
24806>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24807>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24808>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
24809>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
24810>>>>>>>>>    End_Procedure
24811>>>>>>>>>
24811>>>>>>>>>    Function ComGlobalSettings Returns Variant
24813>>>>>>>>>        Handle hDispatchDriver
24813>>>>>>>>>        Variant retVal
24813>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24814>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_DISPATCH to retVal
24815>>>>>>>>>        Function_Return retVal
24816>>>>>>>>>    End_Function
24817>>>>>>>>>
24817>>>>>>>>>    Procedure ComClosePopups
24819>>>>>>>>>        Handle hDispatchDriver
24819>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24820>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 34 OLE_VT_VOID
24821>>>>>>>>>    End_Procedure
24822>>>>>>>>>
24822>>>>>>>>>    Procedure ComSetSpecialColor XTPColorManagerColor llIndex OLE_COLOR llColor
24824>>>>>>>>>        Handle hDispatchDriver
24824>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24825>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24826>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
24827>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llColor
24828>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
24829>>>>>>>>>    End_Procedure
24830>>>>>>>>>
24830>>>>>>>>>    Function ComAddDialogBar String llName XTPBarPosition llPosition Returns Variant
24832>>>>>>>>>        Handle hDispatchDriver
24832>>>>>>>>>        Variant retVal
24832>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24833>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24834>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24835>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
24836>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 36 OLE_VT_DISPATCH to retVal
24837>>>>>>>>>        Function_Return retVal
24838>>>>>>>>>    End_Function
24839>>>>>>>>>
24839>>>>>>>>>    Procedure ComLoadStateFromXMLString String llProfile String llstate Variant llOptions
24841>>>>>>>>>        Handle hDispatchDriver
24841>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24842>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
24843>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
24844>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstate
24845>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
24846>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
24847>>>>>>>>>    End_Procedure
24848>>>>>>>>>
24848>>>>>>>>>    Function ComSaveStateToXMLString String llProfile Variant llOptions Returns String
24850>>>>>>>>>        Handle hDispatchDriver
24850>>>>>>>>>        String retVal
24850>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24851>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24852>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llProfile
24853>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
24854>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 38 OLE_VT_BSTR to retVal
24855>>>>>>>>>        Function_Return retVal
24856>>>>>>>>>    End_Function
24857>>>>>>>>>
24857>>>>>>>>>    Function ComCreateStateOptions Returns Variant
24859>>>>>>>>>        Handle hDispatchDriver
24859>>>>>>>>>        Variant retVal
24859>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24860>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 39 OLE_VT_DISPATCH to retVal
24861>>>>>>>>>        Function_Return retVal
24862>>>>>>>>>    End_Function
24863>>>>>>>>>
24863>>>>>>>>>    Procedure ComDoPropExchange Variant llpPX Variant llOptions
24865>>>>>>>>>        Handle hDispatchDriver
24865>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24866>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
24867>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpPX
24868>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llOptions
24869>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 45 OLE_VT_VOID
24870>>>>>>>>>    End_Procedure
24871>>>>>>>>>
24871>>>>>>>>>    Function ComCustomizedControl Returns Variant
24873>>>>>>>>>        Handle hDispatchDriver
24873>>>>>>>>>        Variant retVal
24873>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24874>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_DISPATCH to retVal
24875>>>>>>>>>        Function_Return retVal
24876>>>>>>>>>    End_Function
24877>>>>>>>>>
24877>>>>>>>>>    // Deletes all of the toolbars
24877>>>>>>>>>    Procedure ComDeleteAll
24879>>>>>>>>>        Handle hDispatchDriver
24879>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24880>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 41 OLE_VT_VOID
24881>>>>>>>>>    End_Procedure
24882>>>>>>>>>
24882>>>>>>>>>    Function ComToolTipContext Returns Variant
24884>>>>>>>>>        Handle hDispatchDriver
24884>>>>>>>>>        Variant retVal
24884>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24885>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 42 OLE_VT_DISPATCH to retVal
24886>>>>>>>>>        Function_Return retVal
24887>>>>>>>>>    End_Function
24888>>>>>>>>>
24888>>>>>>>>>    Function ComTrackingMode Returns Boolean
24890>>>>>>>>>        Handle hDispatchDriver
24890>>>>>>>>>        Boolean retVal
24890>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24891>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_BOOL to retVal
24892>>>>>>>>>        Function_Return retVal
24893>>>>>>>>>    End_Function
24894>>>>>>>>>
24894>>>>>>>>>    Function ComFocusedCommandBar Returns Variant
24896>>>>>>>>>        Handle hDispatchDriver
24896>>>>>>>>>        Variant retVal
24896>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24897>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_DISPATCH to retVal
24898>>>>>>>>>        Function_Return retVal
24899>>>>>>>>>    End_Function
24900>>>>>>>>>
24900>>>>>>>>>    Function ComAddMenuBar String llName Returns Variant
24902>>>>>>>>>        Handle hDispatchDriver
24902>>>>>>>>>        Variant retVal
24902>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24903>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24904>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24905>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 47 OLE_VT_DISPATCH to retVal
24906>>>>>>>>>        Function_Return retVal
24907>>>>>>>>>    End_Function
24908>>>>>>>>>
24908>>>>>>>>>    Function ComAddTabToolBar String llName Returns Variant
24910>>>>>>>>>        Handle hDispatchDriver
24910>>>>>>>>>        Variant retVal
24910>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24911>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24912>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24913>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 48 OLE_VT_DISPATCH to retVal
24914>>>>>>>>>        Function_Return retVal
24915>>>>>>>>>    End_Function
24916>>>>>>>>>
24916>>>>>>>>>    Function ComAddRibbonBar String llName Returns Variant
24918>>>>>>>>>        Handle hDispatchDriver
24918>>>>>>>>>        Variant retVal
24918>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24919>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24920>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
24921>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 49 OLE_VT_DISPATCH to retVal
24922>>>>>>>>>        Function_Return retVal
24923>>>>>>>>>    End_Function
24924>>>>>>>>>
24924>>>>>>>>>    Procedure ComAttachToWindow OLE_HANDLE llhWnd
24926>>>>>>>>>        Handle hDispatchDriver
24926>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24927>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24928>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
24929>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 50 OLE_VT_VOID
24930>>>>>>>>>    End_Procedure
24931>>>>>>>>>
24931>>>>>>>>>    Procedure ComShowCustomizeDialog Integer llActiveTab
24933>>>>>>>>>        Handle hDispatchDriver
24933>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24934>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24935>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llActiveTab
24936>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 51 OLE_VT_VOID
24937>>>>>>>>>    End_Procedure
24938>>>>>>>>>
24938>>>>>>>>>    Procedure ComEnableOffice2007Frame Boolean llEnable
24940>>>>>>>>>        Handle hDispatchDriver
24940>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24941>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24942>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24943>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 52 OLE_VT_VOID
24944>>>>>>>>>    End_Procedure
24945>>>>>>>>>
24945>>>>>>>>>    Procedure ComEnableFrameTheme Boolean llEnable
24947>>>>>>>>>        Handle hDispatchDriver
24947>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24948>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24949>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
24950>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 90 OLE_VT_VOID
24951>>>>>>>>>    End_Procedure
24952>>>>>>>>>
24952>>>>>>>>>    Procedure ComEnableActions
24954>>>>>>>>>        Handle hDispatchDriver
24954>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24955>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 53 OLE_VT_VOID
24956>>>>>>>>>    End_Procedure
24957>>>>>>>>>
24957>>>>>>>>>    Function ComActions Returns Variant
24959>>>>>>>>>        Handle hDispatchDriver
24959>>>>>>>>>        Variant retVal
24959>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24960>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 54 OLE_VT_DISPATCH to retVal
24961>>>>>>>>>        Function_Return retVal
24962>>>>>>>>>    End_Function
24963>>>>>>>>>
24963>>>>>>>>>    Function ComPaintManager Returns Variant
24965>>>>>>>>>        Handle hDispatchDriver
24965>>>>>>>>>        Variant retVal
24965>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24966>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 55 OLE_VT_DISPATCH to retVal
24967>>>>>>>>>        Function_Return retVal
24968>>>>>>>>>    End_Function
24969>>>>>>>>>
24969>>>>>>>>>    Function ComCreateGalleryItems Integer llId Returns Variant
24971>>>>>>>>>        Handle hDispatchDriver
24971>>>>>>>>>        Variant retVal
24971>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24972>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24973>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
24974>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 56 OLE_VT_DISPATCH to retVal
24975>>>>>>>>>        Function_Return retVal
24976>>>>>>>>>    End_Function
24977>>>>>>>>>
24977>>>>>>>>>    Procedure ComEnableOffice2007FrameHandle OLE_HANDLE llhWnd
24979>>>>>>>>>        Handle hDispatchDriver
24979>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24980>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24981>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
24982>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 57 OLE_VT_VOID
24983>>>>>>>>>    End_Procedure
24984>>>>>>>>>
24984>>>>>>>>>    Procedure ComEnableFrameThemeHandle OLE_HANDLE llhWnd
24986>>>>>>>>>        Handle hDispatchDriver
24986>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24987>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24988>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
24989>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 100 OLE_VT_VOID
24990>>>>>>>>>    End_Procedure
24991>>>>>>>>>
24991>>>>>>>>>    Function ComCreateCommandBarControl String llClassName Returns Variant
24993>>>>>>>>>        Handle hDispatchDriver
24993>>>>>>>>>        Variant retVal
24993>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
24994>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
24995>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
24996>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 58 OLE_VT_DISPATCH to retVal
24997>>>>>>>>>        Function_Return retVal
24998>>>>>>>>>    End_Function
24999>>>>>>>>>
24999>>>>>>>>>    Function ComCreateCommandBar String llClassName Returns Variant
25001>>>>>>>>>        Handle hDispatchDriver
25001>>>>>>>>>        Variant retVal
25001>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25002>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25003>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
25004>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 59 OLE_VT_DISPATCH to retVal
25005>>>>>>>>>        Function_Return retVal
25006>>>>>>>>>    End_Function
25007>>>>>>>>>
25007>>>>>>>>>    Function ComContextHelp Returns Integer
25009>>>>>>>>>        Handle hDispatchDriver
25009>>>>>>>>>        Integer retVal
25009>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25010>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 60 OLE_VT_I4 to retVal
25011>>>>>>>>>        Function_Return retVal
25012>>>>>>>>>    End_Function
25013>>>>>>>>>
25013>>>>>>>>>    Function ComContextMenus Returns Variant
25015>>>>>>>>>        Handle hDispatchDriver
25015>>>>>>>>>        Variant retVal
25015>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25016>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 61 OLE_VT_DISPATCH to retVal
25017>>>>>>>>>        Function_Return retVal
25018>>>>>>>>>    End_Function
25019>>>>>>>>>
25019>>>>>>>>>    Procedure ComOLEDrag
25021>>>>>>>>>        Handle hDispatchDriver
25021>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25022>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 62 OLE_VT_VOID
25023>>>>>>>>>    End_Procedure
25024>>>>>>>>>
25024>>>>>>>>>    Function ComAddMiniToolBar String llName Returns Variant
25026>>>>>>>>>        Handle hDispatchDriver
25026>>>>>>>>>        Variant retVal
25026>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25027>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25028>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
25029>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 63 OLE_VT_DISPATCH to retVal
25030>>>>>>>>>        Function_Return retVal
25031>>>>>>>>>    End_Function
25032>>>>>>>>>
25032>>>>>>>>>    Function ComRecentFileList Returns Variant
25034>>>>>>>>>        Handle hDispatchDriver
25034>>>>>>>>>        Variant retVal
25034>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25035>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 64 OLE_VT_DISPATCH to retVal
25036>>>>>>>>>        Function_Return retVal
25037>>>>>>>>>    End_Function
25038>>>>>>>>>
25038>>>>>>>>>    Procedure ComDisableOffice2007FrameHandle OLE_HANDLE llhWnd
25040>>>>>>>>>        Handle hDispatchDriver
25040>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25041>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25042>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
25043>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 65 OLE_VT_VOID
25044>>>>>>>>>    End_Procedure
25045>>>>>>>>>
25045>>>>>>>>>    Procedure ComDisableFrameThemeHandle OLE_HANDLE llhWnd
25047>>>>>>>>>        Handle hDispatchDriver
25047>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25048>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25049>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
25050>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 110 OLE_VT_VOID
25051>>>>>>>>>    End_Procedure
25052>>>>>>>>>
25052>>>>>>>>>    Procedure ComAddCustomBar Variant llCommandBar String llName XTPBarPosition llPosition
25054>>>>>>>>>        Handle hDispatchDriver
25054>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25055>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
25056>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llCommandBar
25057>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
25058>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPosition
25059>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 66 OLE_VT_VOID
25060>>>>>>>>>    End_Procedure
25061>>>>>>>>>
25061>>>>>>>>>    Procedure ComEnableToolbarComposition Boolean llEnable
25063>>>>>>>>>        Handle hDispatchDriver
25063>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25064>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25065>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
25066>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 67 OLE_VT_VOID
25067>>>>>>>>>    End_Procedure
25068>>>>>>>>>
25068>>>>>>>>>    Procedure ComSetAllCaps Boolean llSetAllCaps
25070>>>>>>>>>        Handle hDispatchDriver
25070>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25071>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25072>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllCaps
25073>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 68 OLE_VT_VOID
25074>>>>>>>>>    End_Procedure
25075>>>>>>>>>
25075>>>>>>>>>    Procedure ComAllowFrameTransparency Boolean llSetAllowTransparency
25077>>>>>>>>>        Handle hDispatchDriver
25077>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25078>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25079>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llSetAllowTransparency
25080>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 70 OLE_VT_VOID
25081>>>>>>>>>    End_Procedure
25082>>>>>>>>>
25082>>>>>>>>>    Function ComSetOfficeSetBackImage XTPBackImage llBackImage Returns Boolean
25084>>>>>>>>>        Handle hDispatchDriver
25084>>>>>>>>>        Boolean retVal
25084>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25085>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25086>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBackImage
25087>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 80 OLE_VT_BOOL to retVal
25088>>>>>>>>>        Function_Return retVal
25089>>>>>>>>>    End_Function
25090>>>>>>>>>End_Class
25091>>>>>>>>>
25091>>>>>>>>>// CLSID: {C0DE2200-D2EF-4119-BBBB-8314B5794E11}
25091>>>>>>>>>// Event interface for CommandBars Control
25091>>>>>>>>>Class cCJ_DCommandBarsFrameEvents is a Mixin
25092>>>>>>>>>
25092>>>>>>>>>    Procedure OnComExecute Variant llControl
25094>>>>>>>>>    End_Procedure
25095>>>>>>>>>
25095>>>>>>>>>    Procedure OnComUpdate Variant llControl
25097>>>>>>>>>    End_Procedure
25098>>>>>>>>>
25098>>>>>>>>>    Procedure OnComResize
25100>>>>>>>>>    End_Procedure
25101>>>>>>>>>
25101>>>>>>>>>    Procedure OnComGetClientBordersWidth Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
25103>>>>>>>>>    End_Procedure
25104>>>>>>>>>
25104>>>>>>>>>    Procedure OnComControlSelected Variant llControl
25106>>>>>>>>>    End_Procedure
25107>>>>>>>>>
25107>>>>>>>>>    Procedure OnComInitCommandsPopup Variant llCommandBar
25109>>>>>>>>>    End_Procedure
25110>>>>>>>>>
25110>>>>>>>>>    Procedure OnComResizeClient Integer llLeft Integer llTop Integer llRight Integer llBottom
25112>>>>>>>>>    End_Procedure
25113>>>>>>>>>
25113>>>>>>>>>    Procedure OnComSpecialColorChanged
25115>>>>>>>>>    End_Procedure
25116>>>>>>>>>
25116>>>>>>>>>    Procedure OnComRepositionAlignedControls Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
25118>>>>>>>>>    End_Procedure
25119>>>>>>>>>
25119>>>>>>>>>    Procedure OnComCustomization Variant llOptions
25121>>>>>>>>>    End_Procedure
25122>>>>>>>>>
25122>>>>>>>>>    Procedure OnComToolBarVisibleChanged Variant llToolBar
25124>>>>>>>>>    End_Procedure
25125>>>>>>>>>
25125>>>>>>>>>    Procedure OnComControlRButtonUp Variant llControl
25127>>>>>>>>>    End_Procedure
25128>>>>>>>>>
25128>>>>>>>>>    Procedure OnComCustomizationDone
25130>>>>>>>>>    End_Procedure
25131>>>>>>>>>
25131>>>>>>>>>    Procedure OnComCommandBarKeyDown Variant llCommandBar Integer ByRef llKeyCode Short llShift
25133>>>>>>>>>    End_Procedure
25134>>>>>>>>>
25134>>>>>>>>>    Procedure OnComToolBarContextMenu Variant llToolBar Variant llContextMenu
25136>>>>>>>>>    End_Procedure
25137>>>>>>>>>
25137>>>>>>>>>    Procedure OnComTrackingModeChanged Variant llCommandBar Boolean llMode
25139>>>>>>>>>    End_Procedure
25140>>>>>>>>>
25140>>>>>>>>>    Procedure OnComCustomizationResetToolBar Variant llToolBar
25142>>>>>>>>>    End_Procedure
25143>>>>>>>>>
25143>>>>>>>>>    Procedure OnComCustomizationAddToolBar Variant llToolBar
25145>>>>>>>>>    End_Procedure
25146>>>>>>>>>
25146>>>>>>>>>    Procedure OnComCustomizationDeleteToolBar Variant llToolBar
25148>>>>>>>>>    End_Procedure
25149>>>>>>>>>
25149>>>>>>>>>    Procedure OnComControlNotify Variant llControl Integer llCode Variant llNotifyData Variant llHandled
25151>>>>>>>>>    End_Procedure
25152>>>>>>>>>
25152>>>>>>>>>    Procedure OnComGetActiveDocumentID Integer ByRef llId
25154>>>>>>>>>    End_Procedure
25155>>>>>>>>>
25155>>>>>>>>>    Procedure OnComCustomizationResetAll
25157>>>>>>>>>    End_Procedure
25158>>>>>>>>>
25158>>>>>>>>>    Procedure OnComMessageBarClosed Variant llMessageBar
25160>>>>>>>>>    End_Procedure
25161>>>>>>>>>
25161>>>>>>>>>    Procedure OnComOLEStartDrag Variant llData Integer ByRef llAllowedEffects
25163>>>>>>>>>    End_Procedure
25164>>>>>>>>>
25164>>>>>>>>>    Procedure OnComOLECompleteDrag Integer ByRef llEffect
25166>>>>>>>>>    End_Procedure
25167>>>>>>>>>
25167>>>>>>>>>    Procedure OnComReCreated
25169>>>>>>>>>    End_Procedure
25170>>>>>>>>>
25170>>>>>>>>>    Procedure RegisterComEvents
25172>>>>>>>>>        Send RegisterComEvent 1 msg_OnComExecute
25173>>>>>>>>>        Send RegisterComEvent 2 msg_OnComUpdate
25174>>>>>>>>>        Send RegisterComEvent 3 msg_OnComResize
25175>>>>>>>>>        Send RegisterComEvent 4 msg_OnComGetClientBordersWidth
25176>>>>>>>>>        Send RegisterComEvent 5 msg_OnComControlSelected
25177>>>>>>>>>        Send RegisterComEvent 6 msg_OnComInitCommandsPopup
25178>>>>>>>>>        Send RegisterComEvent 7 msg_OnComResizeClient
25179>>>>>>>>>        Send RegisterComEvent 8 msg_OnComSpecialColorChanged
25180>>>>>>>>>        Send RegisterComEvent 9 msg_OnComRepositionAlignedControls
25181>>>>>>>>>        Send RegisterComEvent 10 msg_OnComCustomization
25182>>>>>>>>>        Send RegisterComEvent 11 msg_OnComToolBarVisibleChanged
25183>>>>>>>>>        Send RegisterComEvent 12 msg_OnComControlRButtonUp
25184>>>>>>>>>        Send RegisterComEvent 13 msg_OnComCustomizationDone
25185>>>>>>>>>        Send RegisterComEvent -602 msg_OnComCommandBarKeyDown
25186>>>>>>>>>        Send RegisterComEvent 14 msg_OnComToolBarContextMenu
25187>>>>>>>>>        Send RegisterComEvent 15 msg_OnComTrackingModeChanged
25188>>>>>>>>>        Send RegisterComEvent 16 msg_OnComCustomizationResetToolBar
25189>>>>>>>>>        Send RegisterComEvent 17 msg_OnComCustomizationAddToolBar
25190>>>>>>>>>        Send RegisterComEvent 18 msg_OnComCustomizationDeleteToolBar
25191>>>>>>>>>        Send RegisterComEvent 19 msg_OnComControlNotify
25192>>>>>>>>>        Send RegisterComEvent 20 msg_OnComGetActiveDocumentID
25193>>>>>>>>>        Send RegisterComEvent 21 msg_OnComCustomizationResetAll
25194>>>>>>>>>        Send RegisterComEvent 22 msg_OnComMessageBarClosed
25195>>>>>>>>>        Send RegisterComEvent 303 msg_OnComOLEStartDrag
25196>>>>>>>>>        Send RegisterComEvent 304 msg_OnComOLECompleteDrag
25197>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25198>>>>>>>>>    End_Procedure
25199>>>>>>>>>End_Class
25200>>>>>>>>>
25200>>>>>>>>>// CoClass
25200>>>>>>>>>// ProgID: Codejock.CommandBarsFrame.22.0.0
25200>>>>>>>>>// CLSID: {C0DE2200-148B-45F5-9679-3E0DBBC92C13}
25200>>>>>>>>>// Xtreme CommandBars Frame Control
25200>>>>>>>>>Class cCJCommandBarsFrame is a cComActiveXControl
25201>>>>>>>>>    Import_Class_Protocol cCJ_DCommandBarsFrame
25202>>>>>>>>>    Import_Class_Protocol cCJ_DCommandBarsFrameEvents
25203>>>>>>>>>
25203>>>>>>>>>    Procedure Construct_Object
25205>>>>>>>>>        Forward Send Construct_Object
25207>>>>>>>>>        Set psProgID to "{C0DE2200-148B-45F5-9679-3E0DBBC92C13}"
25208>>>>>>>>>        Set psEventId to "{C0DE2200-D2EF-4119-BBBB-8314B5794E11}"
25209>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2022 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v22.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
25210>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25211>>>>>>>>>    End_Procedure
25212>>>>>>>>>End_Class
25213>>>>>>>>>
25213>>>>>>>>>// CLSID: {C0DE2200-41E3-4369-89EF-1C084E3A21A8}
25213>>>>>>>>>// Dispatch interface for ImageManagerPropPage
25213>>>>>>>>>Class cCJ_DImageManagerPropPage is a Mixin
25214>>>>>>>>>End_Class
25215>>>>>>>>>
25215>>>>>>>>>// CoClass
25215>>>>>>>>>// CLSID: {C0DE2200-62EF-44E0-8471-69E91C8B026C}
25215>>>>>>>>>// Image manager property page
25215>>>>>>>>>Class cCJImageManagerPropPage is a cComAutomationObject
25216>>>>>>>>>    Import_Class_Protocol cCJ_DImageManagerPropPage
25217>>>>>>>>>
25217>>>>>>>>>    Procedure Construct_Object
25219>>>>>>>>>        Forward Send Construct_Object
25221>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
25222>>>>>>>>>    End_Procedure
25223>>>>>>>>>End_Class
25224>>>>>>>>>
25224>>>>>>>>>// CLSID: {C0DE2200-3B80-4CED-A441-19E468F8D087}
25224>>>>>>>>>// Dispatch interface for PrintPreview Control
25224>>>>>>>>>Class cCJ_DPrintPreview is a Mixin
25225>>>>>>>>>
25225>>>>>>>>>    Function ComPrintView Returns Variant
25227>>>>>>>>>        Variant retVal
25227>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_UNKNOWN to retVal
25228>>>>>>>>>        Function_Return retVal
25229>>>>>>>>>    End_Function
25230>>>>>>>>>
25230>>>>>>>>>    Procedure Set ComPrintView Variant value
25232>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_UNKNOWN to value
25233>>>>>>>>>    End_Procedure
25234>>>>>>>>>
25234>>>>>>>>>    Function ComTitle Returns String
25236>>>>>>>>>        String retVal
25236>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
25237>>>>>>>>>        Function_Return retVal
25238>>>>>>>>>    End_Function
25239>>>>>>>>>
25239>>>>>>>>>    Procedure Set ComTitle String value
25241>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
25242>>>>>>>>>    End_Procedure
25243>>>>>>>>>
25243>>>>>>>>>    Function ComVisualTheme Returns XTPVisualTheme
25245>>>>>>>>>        XTPVisualTheme retVal
25245>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
25246>>>>>>>>>        Function_Return retVal
25247>>>>>>>>>    End_Function
25248>>>>>>>>>
25248>>>>>>>>>    Procedure Set ComVisualTheme XTPVisualTheme value
25250>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
25251>>>>>>>>>    End_Procedure
25252>>>>>>>>>
25252>>>>>>>>>    Function ComZoomState Returns Integer
25254>>>>>>>>>        Integer retVal
25254>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to retVal
25255>>>>>>>>>        Function_Return retVal
25256>>>>>>>>>    End_Function
25257>>>>>>>>>
25257>>>>>>>>>    Procedure Set ComZoomState Integer value
25259>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_I4 to value
25260>>>>>>>>>    End_Procedure
25261>>>>>>>>>
25261>>>>>>>>>    Function ComToolBarVisible Returns Boolean
25263>>>>>>>>>        Boolean retVal
25263>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
25264>>>>>>>>>        Function_Return retVal
25265>>>>>>>>>    End_Function
25266>>>>>>>>>
25266>>>>>>>>>    Procedure Set ComToolBarVisible Boolean value
25268>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
25269>>>>>>>>>    End_Procedure
25270>>>>>>>>>
25270>>>>>>>>>    Function ComOrientation Returns XTPPrintOrientation
25272>>>>>>>>>        XTPPrintOrientation retVal
25272>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
25273>>>>>>>>>        Function_Return retVal
25274>>>>>>>>>    End_Function
25275>>>>>>>>>
25275>>>>>>>>>    Procedure Set ComOrientation XTPPrintOrientation value
25277>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
25278>>>>>>>>>    End_Procedure
25279>>>>>>>>>
25279>>>>>>>>>    Function ComBackColor Returns OLE_COLOR
25281>>>>>>>>>        OLE_COLOR retVal
25281>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to retVal
25282>>>>>>>>>        Function_Return retVal
25283>>>>>>>>>    End_Function
25284>>>>>>>>>
25284>>>>>>>>>    Procedure Set ComBackColor OLE_COLOR value
25286>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to value
25287>>>>>>>>>    End_Procedure
25288>>>>>>>>>
25288>>>>>>>>>    Function ComShowBorder Returns Boolean
25290>>>>>>>>>        Boolean retVal
25290>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
25291>>>>>>>>>        Function_Return retVal
25292>>>>>>>>>    End_Function
25293>>>>>>>>>
25293>>>>>>>>>    Procedure Set ComShowBorder Boolean value
25295>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
25296>>>>>>>>>    End_Procedure
25297>>>>>>>>>
25297>>>>>>>>>    Function ComReCreateReparented Returns Boolean
25299>>>>>>>>>        Boolean retVal
25299>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
25300>>>>>>>>>        Function_Return retVal
25301>>>>>>>>>    End_Function
25302>>>>>>>>>
25302>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
25304>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
25305>>>>>>>>>    End_Procedure
25306>>>>>>>>>
25306>>>>>>>>>    Function ComCreateMarkupPrintView String llMarkupText Returns Variant
25308>>>>>>>>>        Handle hDispatchDriver
25308>>>>>>>>>        Variant retVal
25308>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25309>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25310>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llMarkupText
25311>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_UNKNOWN to retVal
25312>>>>>>>>>        Function_Return retVal
25313>>>>>>>>>    End_Function
25314>>>>>>>>>
25314>>>>>>>>>    Procedure ComShowPrintDialog
25316>>>>>>>>>        Handle hDispatchDriver
25316>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25317>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
25318>>>>>>>>>    End_Procedure
25319>>>>>>>>>
25319>>>>>>>>>    Function ComCreateRichEditPrintView String llText Returns Variant
25321>>>>>>>>>        Handle hDispatchDriver
25321>>>>>>>>>        Variant retVal
25321>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25322>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25323>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
25324>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_UNKNOWN to retVal
25325>>>>>>>>>        Function_Return retVal
25326>>>>>>>>>    End_Function
25327>>>>>>>>>
25327>>>>>>>>>    Function ComToolBar Returns Variant
25329>>>>>>>>>        Handle hDispatchDriver
25329>>>>>>>>>        Variant retVal
25329>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25330>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_DISPATCH to retVal
25331>>>>>>>>>        Function_Return retVal
25332>>>>>>>>>    End_Function
25333>>>>>>>>>
25333>>>>>>>>>    Procedure ComPrintDirect OLE_HANDLE llhDC
25335>>>>>>>>>        Handle hDispatchDriver
25335>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25336>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25337>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhDC
25338>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 11 OLE_VT_VOID
25339>>>>>>>>>    End_Procedure
25340>>>>>>>>>
25340>>>>>>>>>    Procedure ComAboutBox
25342>>>>>>>>>        Handle hDispatchDriver
25342>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25343>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
25344>>>>>>>>>    End_Procedure
25345>>>>>>>>>End_Class
25346>>>>>>>>>
25346>>>>>>>>>// CLSID: {C0DE2200-DC0C-498B-9B3E-FEC9F5C31D94}
25346>>>>>>>>>// Event interface for PrintPreview Control
25346>>>>>>>>>Class cCJ_DPrintPreviewEvents is a Mixin
25347>>>>>>>>>
25347>>>>>>>>>    Procedure OnComCloseClick
25349>>>>>>>>>    End_Procedure
25350>>>>>>>>>
25350>>>>>>>>>    Procedure OnComPrintClick
25352>>>>>>>>>    End_Procedure
25353>>>>>>>>>
25353>>>>>>>>>    Procedure OnComReCreated
25355>>>>>>>>>    End_Procedure
25356>>>>>>>>>
25356>>>>>>>>>    Procedure RegisterComEvents
25358>>>>>>>>>        Send RegisterComEvent 1 msg_OnComCloseClick
25359>>>>>>>>>        Send RegisterComEvent 2 msg_OnComPrintClick
25360>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25361>>>>>>>>>    End_Procedure
25362>>>>>>>>>End_Class
25363>>>>>>>>>
25363>>>>>>>>>// CoClass
25363>>>>>>>>>// ProgID: Codejock.PrintPreview.22.0.0
25363>>>>>>>>>// CLSID: {C0DE2200-7F9D-4B69-95D0-249FC10AEF31}
25363>>>>>>>>>// PrintPreview Control
25363>>>>>>>>>Class cCJPrintPreview is a cComActiveXControl
25364>>>>>>>>>    Import_Class_Protocol cCJ_DPrintPreview
25365>>>>>>>>>    Import_Class_Protocol cCJ_DPrintPreviewEvents
25366>>>>>>>>>
25366>>>>>>>>>    Procedure Construct_Object
25368>>>>>>>>>        Forward Send Construct_Object
25370>>>>>>>>>        Set psProgID to "{C0DE2200-7F9D-4B69-95D0-249FC10AEF31}"
25371>>>>>>>>>        Set psEventId to "{C0DE2200-DC0C-498B-9B3E-FEC9F5C31D94}"
25372>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25373>>>>>>>>>    End_Procedure
25374>>>>>>>>>End_Class
25375>>>>>>>>>
25375>>>>>>>>>// CLSID: {C0DE2200-7F27-46D2-91A1-0442FD6DA0DD}
25375>>>>>>>>>// Dispatch interface for PushButton Control
25375>>>>>>>>>Class cCJ_DBackstageButton is a Mixin
25376>>>>>>>>>
25376>>>>>>>>>    Function ComValue Returns Boolean
25378>>>>>>>>>        Boolean retVal
25378>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 0 OLE_VT_BOOL to retVal
25379>>>>>>>>>        Function_Return retVal
25380>>>>>>>>>    End_Function
25381>>>>>>>>>
25381>>>>>>>>>    Procedure Set ComValue Boolean value
25383>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 0 OLE_VT_BOOL to value
25384>>>>>>>>>    End_Procedure
25385>>>>>>>>>
25385>>>>>>>>>    Function ComCaption Returns String
25387>>>>>>>>>        String retVal
25387>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -518 OLE_VT_BSTR to retVal
25388>>>>>>>>>        Function_Return retVal
25389>>>>>>>>>    End_Function
25390>>>>>>>>>
25390>>>>>>>>>    Procedure Set ComCaption String value
25392>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -518 OLE_VT_BSTR to value
25393>>>>>>>>>    End_Procedure
25394>>>>>>>>>
25394>>>>>>>>>    Function ComFont Returns Variant
25396>>>>>>>>>        Variant retVal
25396>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
25397>>>>>>>>>        Function_Return retVal
25398>>>>>>>>>    End_Function
25399>>>>>>>>>
25399>>>>>>>>>    Procedure Set ComFont Variant value
25401>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
25402>>>>>>>>>    End_Procedure
25403>>>>>>>>>
25403>>>>>>>>>    Function ComBackColor Returns OLE_COLOR
25405>>>>>>>>>        OLE_COLOR retVal
25405>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to retVal
25406>>>>>>>>>        Function_Return retVal
25407>>>>>>>>>    End_Function
25408>>>>>>>>>
25408>>>>>>>>>    Procedure Set ComBackColor OLE_COLOR value
25410>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to value
25411>>>>>>>>>    End_Procedure
25412>>>>>>>>>
25412>>>>>>>>>    Function ComForeColor Returns OLE_COLOR
25414>>>>>>>>>        OLE_COLOR retVal
25414>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -513 OLE_VT_I4 to retVal
25415>>>>>>>>>        Function_Return retVal
25416>>>>>>>>>    End_Function
25417>>>>>>>>>
25417>>>>>>>>>    Procedure Set ComForeColor OLE_COLOR value
25419>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -513 OLE_VT_I4 to value
25420>>>>>>>>>    End_Procedure
25421>>>>>>>>>
25421>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
25423>>>>>>>>>        OLE_HANDLE retVal
25423>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -515 OLE_VT_I4 to retVal
25424>>>>>>>>>        Function_Return retVal
25425>>>>>>>>>    End_Function
25426>>>>>>>>>
25426>>>>>>>>>    Procedure Set ComHWnd OLE_HANDLE value
25428>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -515 OLE_VT_I4 to value
25429>>>>>>>>>    End_Procedure
25430>>>>>>>>>
25430>>>>>>>>>    Function ComEnabled Returns Boolean
25432>>>>>>>>>        Boolean retVal
25432>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -514 OLE_VT_BOOL to retVal
25433>>>>>>>>>        Function_Return retVal
25434>>>>>>>>>    End_Function
25435>>>>>>>>>
25435>>>>>>>>>    Procedure Set ComEnabled Boolean value
25437>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -514 OLE_VT_BOOL to value
25438>>>>>>>>>    End_Procedure
25439>>>>>>>>>
25439>>>>>>>>>    Function ComDefault Returns Boolean
25441>>>>>>>>>        Boolean retVal
25441>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1745027088 OLE_VT_BOOL to retVal
25442>>>>>>>>>        Function_Return retVal
25443>>>>>>>>>    End_Function
25444>>>>>>>>>
25444>>>>>>>>>    Procedure Set ComDefault Boolean value
25446>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1745027088 OLE_VT_BOOL to value
25447>>>>>>>>>    End_Procedure
25448>>>>>>>>>
25448>>>>>>>>>    Function ComFlatStyle Returns Boolean
25450>>>>>>>>>        Boolean retVal
25450>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
25451>>>>>>>>>        Function_Return retVal
25452>>>>>>>>>    End_Function
25453>>>>>>>>>
25453>>>>>>>>>    Procedure Set ComFlatStyle Boolean value
25455>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
25456>>>>>>>>>    End_Procedure
25457>>>>>>>>>
25457>>>>>>>>>    Function ComAppearance Returns XTPBackstageButtonControlAppearanceStyle
25459>>>>>>>>>        XTPBackstageButtonControlAppearanceStyle retVal
25459>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
25460>>>>>>>>>        Function_Return retVal
25461>>>>>>>>>    End_Function
25462>>>>>>>>>
25462>>>>>>>>>    Procedure Set ComAppearance XTPBackstageButtonControlAppearanceStyle value
25464>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
25465>>>>>>>>>    End_Procedure
25466>>>>>>>>>
25466>>>>>>>>>    Function ComTextAlignment Returns OLEAlignmentStyle
25468>>>>>>>>>        OLEAlignmentStyle retVal
25468>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to retVal
25469>>>>>>>>>        Function_Return retVal
25470>>>>>>>>>    End_Function
25471>>>>>>>>>
25471>>>>>>>>>    Procedure Set ComTextAlignment OLEAlignmentStyle value
25473>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_I4 to value
25474>>>>>>>>>    End_Procedure
25475>>>>>>>>>
25475>>>>>>>>>    Function ComMultiLine Returns Boolean
25477>>>>>>>>>        Boolean retVal
25477>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to retVal
25478>>>>>>>>>        Function_Return retVal
25479>>>>>>>>>    End_Function
25480>>>>>>>>>
25480>>>>>>>>>    Procedure Set ComMultiLine Boolean value
25482>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BOOL to value
25483>>>>>>>>>    End_Procedure
25484>>>>>>>>>
25484>>>>>>>>>    Function ComChecked Returns Boolean
25486>>>>>>>>>        Boolean retVal
25486>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
25487>>>>>>>>>        Function_Return retVal
25488>>>>>>>>>    End_Function
25489>>>>>>>>>
25489>>>>>>>>>    Procedure Set ComChecked Boolean value
25491>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
25492>>>>>>>>>    End_Procedure
25493>>>>>>>>>
25493>>>>>>>>>    Function ComIcon Returns Variant
25495>>>>>>>>>        Variant retVal
25495>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_DISPATCH to retVal
25496>>>>>>>>>        Function_Return retVal
25497>>>>>>>>>    End_Function
25498>>>>>>>>>
25498>>>>>>>>>    Procedure Set ComIcon Variant value
25500>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_DISPATCH to value
25501>>>>>>>>>    End_Procedure
25502>>>>>>>>>
25502>>>>>>>>>    Function ComRightToLeft Returns Boolean
25504>>>>>>>>>        Boolean retVal
25504>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -611 OLE_VT_BOOL to retVal
25505>>>>>>>>>        Function_Return retVal
25506>>>>>>>>>    End_Function
25507>>>>>>>>>
25507>>>>>>>>>    Procedure Set ComRightToLeft Boolean value
25509>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -611 OLE_VT_BOOL to value
25510>>>>>>>>>    End_Procedure
25511>>>>>>>>>
25511>>>>>>>>>    Function ComImageAlignment Returns OLEAlignmentStyle
25513>>>>>>>>>        OLEAlignmentStyle retVal
25513>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_I4 to retVal
25514>>>>>>>>>        Function_Return retVal
25515>>>>>>>>>    End_Function
25516>>>>>>>>>
25516>>>>>>>>>    Procedure Set ComImageAlignment OLEAlignmentStyle value
25518>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 20 OLE_VT_I4 to value
25519>>>>>>>>>    End_Procedure
25520>>>>>>>>>
25520>>>>>>>>>    Function ComTextImageRelation Returns OLETextImageRelationStyle
25522>>>>>>>>>        OLETextImageRelationStyle retVal
25522>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
25523>>>>>>>>>        Function_Return retVal
25524>>>>>>>>>    End_Function
25525>>>>>>>>>
25525>>>>>>>>>    Procedure Set ComTextImageRelation OLETextImageRelationStyle value
25527>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
25528>>>>>>>>>    End_Procedure
25529>>>>>>>>>
25529>>>>>>>>>    Function ComImageGap Returns Integer
25531>>>>>>>>>        Integer retVal
25531>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
25532>>>>>>>>>        Function_Return retVal
25533>>>>>>>>>    End_Function
25534>>>>>>>>>
25534>>>>>>>>>    Procedure Set ComImageGap Integer value
25536>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
25537>>>>>>>>>    End_Procedure
25538>>>>>>>>>
25538>>>>>>>>>    Function ComBorderGap Returns Integer
25540>>>>>>>>>        Integer retVal
25540>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
25541>>>>>>>>>        Function_Return retVal
25542>>>>>>>>>    End_Function
25543>>>>>>>>>
25543>>>>>>>>>    Procedure Set ComBorderGap Integer value
25545>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
25546>>>>>>>>>    End_Procedure
25547>>>>>>>>>
25547>>>>>>>>>    Function ComStyle Returns OLEPushButtonStyle
25549>>>>>>>>>        OLEPushButtonStyle retVal
25549>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to retVal
25550>>>>>>>>>        Function_Return retVal
25551>>>>>>>>>    End_Function
25552>>>>>>>>>
25552>>>>>>>>>    Procedure Set ComStyle OLEPushButtonStyle value
25554>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_I4 to value
25555>>>>>>>>>    End_Procedure
25556>>>>>>>>>
25556>>>>>>>>>    Function ComEnableMarkup Returns Boolean
25558>>>>>>>>>        Boolean retVal
25558>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to retVal
25559>>>>>>>>>        Function_Return retVal
25560>>>>>>>>>    End_Function
25561>>>>>>>>>
25561>>>>>>>>>    Procedure Set ComEnableMarkup Boolean value
25563>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_BOOL to value
25564>>>>>>>>>    End_Procedure
25565>>>>>>>>>
25565>>>>>>>>>    // Returns/Sets whether this control can act as an OLE drop target.
25565>>>>>>>>>    Function ComOLEDropMode Returns OLEDropConstants
25567>>>>>>>>>        OLEDropConstants retVal
25567>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to retVal
25568>>>>>>>>>        Function_Return retVal
25569>>>>>>>>>    End_Function
25570>>>>>>>>>
25570>>>>>>>>>    // Returns/Sets whether this control can act as an OLE drop target.
25570>>>>>>>>>    Procedure Set ComOLEDropMode OLEDropConstants value
25572>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 52 OLE_VT_I4 to value
25573>>>>>>>>>    End_Procedure
25574>>>>>>>>>
25574>>>>>>>>>    Function ComControlToolTip Returns String
25576>>>>>>>>>        String retVal
25576>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_BSTR to retVal
25577>>>>>>>>>        Function_Return retVal
25578>>>>>>>>>    End_Function
25579>>>>>>>>>
25579>>>>>>>>>    Procedure Set ComControlToolTip String value
25581>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 70 OLE_VT_BSTR to value
25582>>>>>>>>>    End_Procedure
25583>>>>>>>>>
25583>>>>>>>>>    Function ComShowShadow Returns Boolean
25585>>>>>>>>>        Boolean retVal
25585>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 78 OLE_VT_BOOL to retVal
25586>>>>>>>>>        Function_Return retVal
25587>>>>>>>>>    End_Function
25588>>>>>>>>>
25588>>>>>>>>>    Procedure Set ComShowShadow Boolean value
25590>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 78 OLE_VT_BOOL to value
25591>>>>>>>>>    End_Procedure
25592>>>>>>>>>
25592>>>>>>>>>    Function ComTabStyle Returns Boolean
25594>>>>>>>>>        Boolean retVal
25594>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 79 OLE_VT_BOOL to retVal
25595>>>>>>>>>        Function_Return retVal
25596>>>>>>>>>    End_Function
25597>>>>>>>>>
25597>>>>>>>>>    Procedure Set ComTabStyle Boolean value
25599>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 79 OLE_VT_BOOL to value
25600>>>>>>>>>    End_Procedure
25601>>>>>>>>>
25601>>>>>>>>>    Function ComReCreateReparented Returns Boolean
25603>>>>>>>>>        Boolean retVal
25603>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
25604>>>>>>>>>        Function_Return retVal
25605>>>>>>>>>    End_Function
25606>>>>>>>>>
25606>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
25608>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
25609>>>>>>>>>    End_Procedure
25610>>>>>>>>>
25610>>>>>>>>>    Function ComMarkupContext Returns Variant
25612>>>>>>>>>        Handle hDispatchDriver
25612>>>>>>>>>        Variant retVal
25612>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25613>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 40 OLE_VT_DISPATCH to retVal
25614>>>>>>>>>        Function_Return retVal
25615>>>>>>>>>    End_Function
25616>>>>>>>>>
25616>>>>>>>>>    Procedure ComAboutBox
25618>>>>>>>>>        Handle hDispatchDriver
25618>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25619>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
25620>>>>>>>>>    End_Procedure
25621>>>>>>>>>
25621>>>>>>>>>    Function ComToolTipContext Returns Variant
25623>>>>>>>>>        Handle hDispatchDriver
25623>>>>>>>>>        Variant retVal
25623>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25624>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 71 OLE_VT_DISPATCH to retVal
25625>>>>>>>>>        Function_Return retVal
25626>>>>>>>>>    End_Function
25627>>>>>>>>>
25627>>>>>>>>>    Procedure ComVectorImageHeight Integer llHeight
25629>>>>>>>>>        Handle hDispatchDriver
25629>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25630>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25631>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llHeight
25632>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 72 OLE_VT_VOID
25633>>>>>>>>>    End_Procedure
25634>>>>>>>>>
25634>>>>>>>>>    Procedure ComVectorImageWidth Integer llWidth
25636>>>>>>>>>        Handle hDispatchDriver
25636>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25637>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25638>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llWidth
25639>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 73 OLE_VT_VOID
25640>>>>>>>>>    End_Procedure
25641>>>>>>>>>End_Class
25642>>>>>>>>>
25642>>>>>>>>>// CLSID: {C0DE2200-8784-4B18-976D-F889C1F8B1E9}
25642>>>>>>>>>// Event interface for PushButton Control
25642>>>>>>>>>Class cCJ_DBackstageButtonEvents is a Mixin
25643>>>>>>>>>
25643>>>>>>>>>    Procedure OnComClick
25645>>>>>>>>>    End_Procedure
25646>>>>>>>>>
25646>>>>>>>>>    Procedure OnComMouseDown Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly
25648>>>>>>>>>    End_Procedure
25649>>>>>>>>>
25649>>>>>>>>>    Procedure OnComMouseMove Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly
25651>>>>>>>>>    End_Procedure
25652>>>>>>>>>
25652>>>>>>>>>    Procedure OnComMouseUp Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly
25654>>>>>>>>>    End_Procedure
25655>>>>>>>>>
25655>>>>>>>>>    Procedure OnComKeyDown Short ByRef llKeyCode Short llShift
25657>>>>>>>>>    End_Procedure
25658>>>>>>>>>
25658>>>>>>>>>    Procedure OnComKeyPress Short ByRef llKeyAscii
25660>>>>>>>>>    End_Procedure
25661>>>>>>>>>
25661>>>>>>>>>    Procedure OnComKeyUp Short ByRef llKeyCode Short llShift
25663>>>>>>>>>    End_Procedure
25664>>>>>>>>>
25664>>>>>>>>>    Procedure OnComDropDown
25666>>>>>>>>>    End_Procedure
25667>>>>>>>>>
25667>>>>>>>>>    Procedure OnComOLEDragOver Variant llData Integer ByRef llEffect Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly Short llstate
25669>>>>>>>>>    End_Procedure
25670>>>>>>>>>
25670>>>>>>>>>    Procedure OnComOLEDragDrop Variant llData Integer ByRef llEffect Short llButton Short llShift OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly
25672>>>>>>>>>    End_Procedure
25673>>>>>>>>>
25673>>>>>>>>>    Procedure OnComReCreated
25675>>>>>>>>>    End_Procedure
25676>>>>>>>>>
25676>>>>>>>>>    Procedure RegisterComEvents
25678>>>>>>>>>        Send RegisterComEvent -600 msg_OnComClick
25679>>>>>>>>>        Send RegisterComEvent -605 msg_OnComMouseDown
25680>>>>>>>>>        Send RegisterComEvent -606 msg_OnComMouseMove
25681>>>>>>>>>        Send RegisterComEvent -607 msg_OnComMouseUp
25682>>>>>>>>>        Send RegisterComEvent -602 msg_OnComKeyDown
25683>>>>>>>>>        Send RegisterComEvent -603 msg_OnComKeyPress
25684>>>>>>>>>        Send RegisterComEvent -604 msg_OnComKeyUp
25685>>>>>>>>>        Send RegisterComEvent 1 msg_OnComDropDown
25686>>>>>>>>>        Send RegisterComEvent 300 msg_OnComOLEDragOver
25687>>>>>>>>>        Send RegisterComEvent 301 msg_OnComOLEDragDrop
25688>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25689>>>>>>>>>    End_Procedure
25690>>>>>>>>>End_Class
25691>>>>>>>>>
25691>>>>>>>>>// CoClass
25691>>>>>>>>>// ProgID: Codejock.BackstageButton.22.0.0
25691>>>>>>>>>// CLSID: {C0DE2200-ADD1-404B-9432-25BECBA0755F}
25691>>>>>>>>>// PushButton Control
25691>>>>>>>>>Class cCJBackstageButton is a cComActiveXControl
25692>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageButton
25693>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageButtonEvents
25694>>>>>>>>>
25694>>>>>>>>>    Procedure Construct_Object
25696>>>>>>>>>        Forward Send Construct_Object
25698>>>>>>>>>        Set psProgID to "{C0DE2200-ADD1-404B-9432-25BECBA0755F}"
25699>>>>>>>>>        Set psEventId to "{C0DE2200-8784-4B18-976D-F889C1F8B1E9}"
25700>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2022 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v22.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
25701>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25702>>>>>>>>>    End_Procedure
25703>>>>>>>>>End_Class
25704>>>>>>>>>
25704>>>>>>>>>// CLSID: {C0DE2200-B473-4662-B8AD-C5F3FB64C028}
25704>>>>>>>>>// Dispatch interface for BackstageButtonPropPage
25704>>>>>>>>>Class cCJ_DBackstageButtonPropPage is a Mixin
25705>>>>>>>>>End_Class
25706>>>>>>>>>
25706>>>>>>>>>// CoClass
25706>>>>>>>>>// CLSID: {C0DE2200-3CE1-4C9B-B764-D85C63DBEC21}
25706>>>>>>>>>// Backstage button property page
25706>>>>>>>>>Class cCJBackstageButtonPropPage is a cComAutomationObject
25707>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageButtonPropPage
25708>>>>>>>>>
25708>>>>>>>>>    Procedure Construct_Object
25710>>>>>>>>>        Forward Send Construct_Object
25712>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
25713>>>>>>>>>    End_Procedure
25714>>>>>>>>>End_Class
25715>>>>>>>>>
25715>>>>>>>>>// CLSID: {C0DE2200-E970-416D-838B-AFF30EDC1D51}
25715>>>>>>>>>// Dispatch interface for BackstageSeparator Control
25715>>>>>>>>>Class cCJ_DBackstageSeparator is a Mixin
25716>>>>>>>>>
25716>>>>>>>>>    Function ComVertical Returns Boolean
25718>>>>>>>>>        Boolean retVal
25718>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
25719>>>>>>>>>        Function_Return retVal
25720>>>>>>>>>    End_Function
25721>>>>>>>>>
25721>>>>>>>>>    Procedure Set ComVertical Boolean value
25723>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
25724>>>>>>>>>    End_Procedure
25725>>>>>>>>>
25725>>>>>>>>>    Function ComAppearance Returns XTPBackstageSeparatorControlAppearanceStyle
25727>>>>>>>>>        XTPBackstageSeparatorControlAppearanceStyle retVal
25727>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
25728>>>>>>>>>        Function_Return retVal
25729>>>>>>>>>    End_Function
25730>>>>>>>>>
25730>>>>>>>>>    Procedure Set ComAppearance XTPBackstageSeparatorControlAppearanceStyle value
25732>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
25733>>>>>>>>>    End_Procedure
25734>>>>>>>>>
25734>>>>>>>>>    Function ComMarkupText Returns String
25736>>>>>>>>>        String retVal
25736>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -518 OLE_VT_BSTR to retVal
25737>>>>>>>>>        Function_Return retVal
25738>>>>>>>>>    End_Function
25739>>>>>>>>>
25739>>>>>>>>>    Procedure Set ComMarkupText String value
25741>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -518 OLE_VT_BSTR to value
25742>>>>>>>>>    End_Procedure
25743>>>>>>>>>
25743>>>>>>>>>    Function ComReCreateReparented Returns Boolean
25745>>>>>>>>>        Boolean retVal
25745>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
25746>>>>>>>>>        Function_Return retVal
25747>>>>>>>>>    End_Function
25748>>>>>>>>>
25748>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
25750>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
25751>>>>>>>>>    End_Procedure
25752>>>>>>>>>
25752>>>>>>>>>    Procedure ComAboutBox
25754>>>>>>>>>        Handle hDispatchDriver
25754>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25755>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
25756>>>>>>>>>    End_Procedure
25757>>>>>>>>>End_Class
25758>>>>>>>>>
25758>>>>>>>>>// CLSID: {C0DE2200-A9B6-458C-8DBE-71B544CD06B4}
25758>>>>>>>>>// Event interface for BackstageSeparator Control
25758>>>>>>>>>Class cCJ_DBackstageSeparatorEvents is a Mixin
25759>>>>>>>>>
25759>>>>>>>>>    Procedure OnComReCreated
25761>>>>>>>>>    End_Procedure
25762>>>>>>>>>
25762>>>>>>>>>    Procedure RegisterComEvents
25764>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25765>>>>>>>>>    End_Procedure
25766>>>>>>>>>End_Class
25767>>>>>>>>>
25767>>>>>>>>>// CoClass
25767>>>>>>>>>// ProgID: Codejock.BackstageSeparator.22.0.0
25767>>>>>>>>>// CLSID: {C0DE2200-C3CB-4192-B015-BFF56164ED07}
25767>>>>>>>>>// BackstageSeparator Control
25767>>>>>>>>>Class cCJBackstageSeparator is a cComActiveXControl
25768>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageSeparator
25769>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageSeparatorEvents
25770>>>>>>>>>
25770>>>>>>>>>    Procedure Construct_Object
25772>>>>>>>>>        Forward Send Construct_Object
25774>>>>>>>>>        Set psProgID to "{C0DE2200-C3CB-4192-B015-BFF56164ED07}"
25775>>>>>>>>>        Set psEventId to "{C0DE2200-A9B6-458C-8DBE-71B544CD06B4}"
25776>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2022 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v22.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
25777>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25778>>>>>>>>>    End_Procedure
25779>>>>>>>>>End_Class
25780>>>>>>>>>
25780>>>>>>>>>// CLSID: {C0DE2200-0694-4EE0-870A-558EE7DE4BF3}
25780>>>>>>>>>// Dispatch interface for BackstageListBox Control
25780>>>>>>>>>Class cCJ_DBackstageListBox is a Mixin
25781>>>>>>>>>
25781>>>>>>>>>    // Set True to allow using standard icons from shell. By default False.
25781>>>>>>>>>    Function ComUseShellIcons Returns Boolean
25783>>>>>>>>>        Boolean retVal
25783>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to retVal
25784>>>>>>>>>        Function_Return retVal
25785>>>>>>>>>    End_Function
25786>>>>>>>>>
25786>>>>>>>>>    // Set True to allow using standard icons from shell. By default False.
25786>>>>>>>>>    Procedure Set ComUseShellIcons Boolean value
25788>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_BOOL to value
25789>>>>>>>>>    End_Procedure
25790>>>>>>>>>
25790>>>>>>>>>    Function ComVisualTheme Returns XTPVisualTheme
25792>>>>>>>>>        XTPVisualTheme retVal
25792>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
25793>>>>>>>>>        Function_Return retVal
25794>>>>>>>>>    End_Function
25795>>>>>>>>>
25795>>>>>>>>>    Procedure Set ComVisualTheme XTPVisualTheme value
25797>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
25798>>>>>>>>>    End_Procedure
25799>>>>>>>>>
25799>>>>>>>>>    Function ComShowScrollBarAlways Returns Boolean
25801>>>>>>>>>        Boolean retVal
25801>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
25802>>>>>>>>>        Function_Return retVal
25803>>>>>>>>>    End_Function
25804>>>>>>>>>
25804>>>>>>>>>    Procedure Set ComShowScrollBarAlways Boolean value
25806>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
25807>>>>>>>>>    End_Procedure
25808>>>>>>>>>
25808>>>>>>>>>    Function ComReCreateReparented Returns Boolean
25810>>>>>>>>>        Boolean retVal
25810>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to retVal
25811>>>>>>>>>        Function_Return retVal
25812>>>>>>>>>    End_Function
25813>>>>>>>>>
25813>>>>>>>>>    Procedure Set ComReCreateReparented Boolean value
25815>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10002000 OLE_VT_BOOL to value
25816>>>>>>>>>    End_Procedure
25817>>>>>>>>>
25817>>>>>>>>>    Function ComItems Returns Variant
25819>>>>>>>>>        Handle hDispatchDriver
25819>>>>>>>>>        Variant retVal
25819>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25820>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
25821>>>>>>>>>        Function_Return retVal
25822>>>>>>>>>    End_Function
25823>>>>>>>>>
25823>>>>>>>>>    Function ComGallery Returns Variant
25825>>>>>>>>>        Handle hDispatchDriver
25825>>>>>>>>>        Variant retVal
25825>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25826>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
25827>>>>>>>>>        Function_Return retVal
25828>>>>>>>>>    End_Function
25829>>>>>>>>>
25829>>>>>>>>>    Function ComIcons Returns Variant
25831>>>>>>>>>        Handle hDispatchDriver
25831>>>>>>>>>        Variant retVal
25831>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25832>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_DISPATCH to retVal
25833>>>>>>>>>        Function_Return retVal
25834>>>>>>>>>    End_Function
25835>>>>>>>>>
25835>>>>>>>>>    Function ComToolTipContext Returns Variant
25837>>>>>>>>>        Handle hDispatchDriver
25837>>>>>>>>>        Variant retVal
25837>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25838>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_DISPATCH to retVal
25839>>>>>>>>>        Function_Return retVal
25840>>>>>>>>>    End_Function
25841>>>>>>>>>
25841>>>>>>>>>    Procedure ComCreateRecentFileListItems Variant llRecentFileList
25843>>>>>>>>>        Handle hDispatchDriver
25843>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25844>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25845>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llRecentFileList
25846>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
25847>>>>>>>>>    End_Procedure
25848>>>>>>>>>
25848>>>>>>>>>    Function ComPaintManager Returns Variant
25850>>>>>>>>>        Handle hDispatchDriver
25850>>>>>>>>>        Variant retVal
25850>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25851>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
25852>>>>>>>>>        Function_Return retVal
25853>>>>>>>>>    End_Function
25854>>>>>>>>>
25854>>>>>>>>>    Function ComHitTest OLE_XPOS_PIXELS llx OLE_YPOS_PIXELS lly Returns Variant
25856>>>>>>>>>        Handle hDispatchDriver
25856>>>>>>>>>        Variant retVal
25856>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25857>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
25858>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llx
25859>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lly
25860>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 17 OLE_VT_DISPATCH to retVal
25861>>>>>>>>>        Function_Return retVal
25862>>>>>>>>>    End_Function
25863>>>>>>>>>
25863>>>>>>>>>    Procedure ComAboutBox
25865>>>>>>>>>        Handle hDispatchDriver
25865>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25866>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
25867>>>>>>>>>    End_Procedure
25868>>>>>>>>>End_Class
25869>>>>>>>>>
25869>>>>>>>>>// CLSID: {C0DE2200-B56F-4C5C-A7C1-BFD597BE6386}
25869>>>>>>>>>// Event interface for BackstageListBox Control
25869>>>>>>>>>Class cCJ_DBackstageListBoxEvents is a Mixin
25870>>>>>>>>>
25870>>>>>>>>>    Procedure OnComItemClick Variant llItem
25872>>>>>>>>>    End_Procedure
25873>>>>>>>>>
25873>>>>>>>>>    Procedure OnComMouseDown Short llButton Short llShift Integer llx Integer lly
25875>>>>>>>>>    End_Procedure
25876>>>>>>>>>
25876>>>>>>>>>    Procedure OnComMouseUp Short llButton Short llShift Integer llx Integer lly
25878>>>>>>>>>    End_Procedure
25879>>>>>>>>>
25879>>>>>>>>>    Procedure OnComReCreated
25881>>>>>>>>>    End_Procedure
25882>>>>>>>>>
25882>>>>>>>>>    Procedure RegisterComEvents
25884>>>>>>>>>        Send RegisterComEvent 1 msg_OnComItemClick
25885>>>>>>>>>        Send RegisterComEvent -605 msg_OnComMouseDown
25886>>>>>>>>>        Send RegisterComEvent -607 msg_OnComMouseUp
25887>>>>>>>>>        Send RegisterComEvent 10001000 msg_OnComReCreated
25888>>>>>>>>>    End_Procedure
25889>>>>>>>>>End_Class
25890>>>>>>>>>
25890>>>>>>>>>// CoClass
25890>>>>>>>>>// ProgID: Codejock.BackstageListBox.22.0.0
25890>>>>>>>>>// CLSID: {C0DE2200-52D8-4364-BFDC-C828980023B0}
25890>>>>>>>>>// BackstageListBox Control
25890>>>>>>>>>Class cCJBackstageListBox is a cComActiveXControl
25891>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageListBox
25892>>>>>>>>>    Import_Class_Protocol cCJ_DBackstageListBoxEvents
25893>>>>>>>>>
25893>>>>>>>>>    Procedure Construct_Object
25895>>>>>>>>>        Forward Send Construct_Object
25897>>>>>>>>>        Set psProgID to "{C0DE2200-52D8-4364-BFDC-C828980023B0}"
25898>>>>>>>>>        Set psEventId to "{C0DE2200-B56F-4C5C-A7C1-BFD597BE6386}"
25899>>>>>>>>>        Set psLicenseKey to ("CommandBars Control Copyright (c) 1998-2022 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.CommandBars.ActiveX.v22.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: QQS-PNF-OJV-VBX")
25900>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
25901>>>>>>>>>    End_Procedure
25902>>>>>>>>>End_Class
25903>>>>>>>>>
25903>>>>>>>>>// CLSID: {C0DE2200-FEBF-4C62-BD49-AC6556035154}
25903>>>>>>>>>// Global Global Settings
25903>>>>>>>>>Class cCJICommandBarsGlobalSettings is a Mixin
25904>>>>>>>>>
25904>>>>>>>>>    Function ComResourceFile Returns String
25906>>>>>>>>>        String retVal
25906>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BSTR to retVal
25907>>>>>>>>>        Function_Return retVal
25908>>>>>>>>>    End_Function
25909>>>>>>>>>
25909>>>>>>>>>    Procedure Set ComResourceFile String value
25911>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BSTR to value
25912>>>>>>>>>    End_Procedure
25913>>>>>>>>>
25913>>>>>>>>>    Function ComLicense Returns String
25915>>>>>>>>>        String retVal
25915>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to retVal
25916>>>>>>>>>        Function_Return retVal
25917>>>>>>>>>    End_Function
25918>>>>>>>>>
25918>>>>>>>>>    Procedure Set ComLicense String value
25920>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to value
25921>>>>>>>>>    End_Procedure
25922>>>>>>>>>
25922>>>>>>>>>    Function ComTitle Returns String
25924>>>>>>>>>        String retVal
25924>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to retVal
25925>>>>>>>>>        Function_Return retVal
25926>>>>>>>>>    End_Function
25927>>>>>>>>>
25927>>>>>>>>>    Procedure Set ComTitle String value
25929>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to value
25930>>>>>>>>>    End_Procedure
25931>>>>>>>>>
25931>>>>>>>>>    Function ComReCreateReparentedControls Returns Boolean
25933>>>>>>>>>        Boolean retVal
25933>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 109 OLE_VT_BOOL to retVal
25934>>>>>>>>>        Function_Return retVal
25935>>>>>>>>>    End_Function
25936>>>>>>>>>
25936>>>>>>>>>    Procedure Set ComReCreateReparentedControls Boolean value
25938>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 109 OLE_VT_BOOL to value
25939>>>>>>>>>    End_Procedure
25940>>>>>>>>>
25940>>>>>>>>>    Function ComApp Returns Variant
25942>>>>>>>>>        Variant retVal
25942>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_DISPATCH to retVal
25943>>>>>>>>>        Function_Return retVal
25944>>>>>>>>>    End_Function
25945>>>>>>>>>
25945>>>>>>>>>    Procedure Set ComApp Variant value
25947>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_DISPATCH to value
25948>>>>>>>>>    End_Procedure
25949>>>>>>>>>
25949>>>>>>>>>    Function ComCompanyName Returns String
25951>>>>>>>>>        String retVal
25951>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
25952>>>>>>>>>        Function_Return retVal
25953>>>>>>>>>    End_Function
25954>>>>>>>>>
25954>>>>>>>>>    Procedure Set ComCompanyName String value
25956>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
25957>>>>>>>>>    End_Procedure
25958>>>>>>>>>
25958>>>>>>>>>    Function ComColorManager Returns Variant
25960>>>>>>>>>        Handle hDispatchDriver
25960>>>>>>>>>        Variant retVal
25960>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25961>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_DISPATCH to retVal
25962>>>>>>>>>        Function_Return retVal
25963>>>>>>>>>    End_Function
25964>>>>>>>>>
25964>>>>>>>>>    Function ComFrameShadowManager Returns Variant
25966>>>>>>>>>        Handle hDispatchDriver
25966>>>>>>>>>        Variant retVal
25966>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25967>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10003000 OLE_VT_DISPATCH to retVal
25968>>>>>>>>>        Function_Return retVal
25969>>>>>>>>>    End_Function
25970>>>>>>>>>
25970>>>>>>>>>    Function ComVersion Returns String
25972>>>>>>>>>        Handle hDispatchDriver
25972>>>>>>>>>        String retVal
25972>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25973>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_BSTR to retVal
25974>>>>>>>>>        Function_Return retVal
25975>>>>>>>>>    End_Function
25976>>>>>>>>>
25976>>>>>>>>>    Function ComUnicode Returns Boolean
25978>>>>>>>>>        Handle hDispatchDriver
25978>>>>>>>>>        Boolean retVal
25978>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25979>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_BOOL to retVal
25980>>>>>>>>>        Function_Return retVal
25981>>>>>>>>>    End_Function
25982>>>>>>>>>
25982>>>>>>>>>    Function ComOcxPath Returns String
25984>>>>>>>>>        Handle hDispatchDriver
25984>>>>>>>>>        String retVal
25984>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25985>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_BSTR to retVal
25986>>>>>>>>>        Function_Return retVal
25987>>>>>>>>>    End_Function
25988>>>>>>>>>
25988>>>>>>>>>    Function ComGetAmbientProperty XTPApplicationAmbientProperty llproperty Returns Variant
25990>>>>>>>>>        Handle hDispatchDriver
25990>>>>>>>>>        Variant retVal
25990>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25991>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
25992>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llproperty
25993>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_VARIANT to retVal
25994>>>>>>>>>        Function_Return retVal
25995>>>>>>>>>    End_Function
25996>>>>>>>>>
25996>>>>>>>>>    Procedure ComSetAmbientProperty XTPApplicationAmbientProperty llproperty Variant llValue
25998>>>>>>>>>        Handle hDispatchDriver
25998>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
25999>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26000>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llproperty
26001>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llValue
26002>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 112 OLE_VT_VOID
26003>>>>>>>>>    End_Procedure
26004>>>>>>>>>
26004>>>>>>>>>    Function ComCreatePropExchange Returns Variant
26006>>>>>>>>>        Handle hDispatchDriver
26006>>>>>>>>>        Variant retVal
26006>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26007>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 107 OLE_VT_DISPATCH to retVal
26008>>>>>>>>>        Function_Return retVal
26009>>>>>>>>>    End_Function
26010>>>>>>>>>
26010>>>>>>>>>    Function ComIcons Returns Variant
26012>>>>>>>>>        Handle hDispatchDriver
26012>>>>>>>>>        Variant retVal
26012>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26013>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_DISPATCH to retVal
26014>>>>>>>>>        Function_Return retVal
26015>>>>>>>>>    End_Function
26016>>>>>>>>>
26016>>>>>>>>>    Function ComResourceImages Returns Variant
26018>>>>>>>>>        Handle hDispatchDriver
26018>>>>>>>>>        Variant retVal
26018>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26019>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_DISPATCH to retVal
26020>>>>>>>>>        Function_Return retVal
26021>>>>>>>>>    End_Function
26022>>>>>>>>>End_Class
26023>>>>>>>>>
26023>>>>>>>>>// CoClass
26023>>>>>>>>>// ProgID: Codejock.CommandBarsGlobalSettings.22.0.0
26023>>>>>>>>>// CLSID: {C0DE2200-D18F-4F58-8647-38F1AD3314C3}
26023>>>>>>>>>// Command Bars Settings
26023>>>>>>>>>Class cCJCommandBarsGlobalSettings is a cComAutomationObject
26024>>>>>>>>>    Import_Class_Protocol cCJICommandBarsGlobalSettings
26025>>>>>>>>>
26025>>>>>>>>>    Procedure Construct_Object
26027>>>>>>>>>        Forward Send Construct_Object
26029>>>>>>>>>        Set psProgID to "{C0DE2200-D18F-4F58-8647-38F1AD3314C3}"
26030>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
26031>>>>>>>>>    End_Procedure
26032>>>>>>>>>End_Class
26033>>>>>>>>>
26033>>>>>>>>>// CLSID: {C0DE2200-F9CE-44F1-8991-0F6B7C19336B}
26033>>>>>>>>>Class cCJIResourceImageList is a cComAutomationObject
26034>>>>>>>>>
26034>>>>>>>>>    Function ComAddBitmap OLE_HANDLE llHandle Integer llnID Returns Boolean
26036>>>>>>>>>        Handle hDispatchDriver
26036>>>>>>>>>        Boolean retVal
26036>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26037>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26038>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llHandle
26039>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnID
26040>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BOOL to retVal
26041>>>>>>>>>        Function_Return retVal
26042>>>>>>>>>    End_Function
26043>>>>>>>>>
26043>>>>>>>>>    Function ComLoadBitmap String llPath Integer llnID Returns Boolean
26045>>>>>>>>>        Handle hDispatchDriver
26045>>>>>>>>>        Boolean retVal
26045>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26046>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26047>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
26048>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnID
26049>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
26050>>>>>>>>>        Function_Return retVal
26051>>>>>>>>>    End_Function
26052>>>>>>>>>
26052>>>>>>>>>    Function ComRemove Integer llnID Returns Boolean
26054>>>>>>>>>        Handle hDispatchDriver
26054>>>>>>>>>        Boolean retVal
26054>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26055>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
26056>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llnID
26057>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BOOL to retVal
26058>>>>>>>>>        Function_Return retVal
26059>>>>>>>>>    End_Function
26060>>>>>>>>>
26060>>>>>>>>>    Procedure ComRemoveAll
26062>>>>>>>>>        Handle hDispatchDriver
26062>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26063>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
26064>>>>>>>>>    End_Procedure
26065>>>>>>>>>End_Class
26066>>>>>>>>>
26066>>>>>>>>>// CLSID: {C0DE2200-ED8F-4CE1-9E36-403876BEE557}
26066>>>>>>>>>Class cCJXtremePrinterInfo is a cComAutomationObject
26067>>>>>>>>>
26067>>>>>>>>>    Function ComDeviceName Returns String
26069>>>>>>>>>        Handle hDispatchDriver
26069>>>>>>>>>        String retVal
26069>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26070>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BSTR to retVal
26071>>>>>>>>>        Function_Return retVal
26072>>>>>>>>>    End_Function
26073>>>>>>>>>
26073>>>>>>>>>    Function ComDriverName Returns String
26075>>>>>>>>>        Handle hDispatchDriver
26075>>>>>>>>>        String retVal
26075>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26076>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BSTR to retVal
26077>>>>>>>>>        Function_Return retVal
26078>>>>>>>>>    End_Function
26079>>>>>>>>>
26079>>>>>>>>>    Function ComPortName Returns String
26081>>>>>>>>>        Handle hDispatchDriver
26081>>>>>>>>>        String retVal
26081>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26082>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BSTR to retVal
26083>>>>>>>>>        Function_Return retVal
26084>>>>>>>>>    End_Function
26085>>>>>>>>>End_Class
26086>>>>>>>>>
26086>>>>>>>>>// CLSID: {C0DE2200-8BC5-4677-9999-0A29B44F3B23}
26086>>>>>>>>>Class cCJXtremePrintPreviewOptions is a cComAutomationObject
26087>>>>>>>>>
26087>>>>>>>>>    Function ComTitle Returns String
26089>>>>>>>>>        String retVal
26089>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
26090>>>>>>>>>        Function_Return retVal
26091>>>>>>>>>    End_Function
26092>>>>>>>>>
26092>>>>>>>>>    Procedure Set ComTitle String value
26094>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
26095>>>>>>>>>    End_Procedure
26096>>>>>>>>>End_Class
26097>>>>>>>>>
26097>>>>>>>>>// CLSID: {C0DE2200-E75C-4A50-A908-F36D35F098D2}
26097>>>>>>>>>Class cCJPrintPageHeaderFooter is a cComAutomationObject
26098>>>>>>>>>
26098>>>>>>>>>    Function ComFont Returns Variant
26100>>>>>>>>>        Variant retVal
26100>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
26101>>>>>>>>>        Function_Return retVal
26102>>>>>>>>>    End_Function
26103>>>>>>>>>
26103>>>>>>>>>    Procedure Set ComFont Variant value
26105>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
26106>>>>>>>>>    End_Procedure
26107>>>>>>>>>
26107>>>>>>>>>    Function ComFormatString Returns String
26109>>>>>>>>>        String retVal
26109>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
26110>>>>>>>>>        Function_Return retVal
26111>>>>>>>>>    End_Function
26112>>>>>>>>>
26112>>>>>>>>>    Procedure Set ComFormatString String value
26114>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
26115>>>>>>>>>    End_Procedure
26116>>>>>>>>>
26116>>>>>>>>>    Function ComTextLeft Returns String
26118>>>>>>>>>        String retVal
26118>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
26119>>>>>>>>>        Function_Return retVal
26120>>>>>>>>>    End_Function
26121>>>>>>>>>
26121>>>>>>>>>    Procedure Set ComTextLeft String value
26123>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
26124>>>>>>>>>    End_Procedure
26125>>>>>>>>>
26125>>>>>>>>>    Function ComTextCenter Returns String
26127>>>>>>>>>        String retVal
26127>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
26128>>>>>>>>>        Function_Return retVal
26129>>>>>>>>>    End_Function
26130>>>>>>>>>
26130>>>>>>>>>    Procedure Set ComTextCenter String value
26132>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
26133>>>>>>>>>    End_Procedure
26134>>>>>>>>>
26134>>>>>>>>>    Function ComTextRight Returns String
26136>>>>>>>>>        String retVal
26136>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
26137>>>>>>>>>        Function_Return retVal
26138>>>>>>>>>    End_Function
26139>>>>>>>>>
26139>>>>>>>>>    Procedure Set ComTextRight String value
26141>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
26142>>>>>>>>>    End_Procedure
26143>>>>>>>>>
26143>>>>>>>>>    Procedure ComClear
26145>>>>>>>>>        Handle hDispatchDriver
26145>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26146>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 50 OLE_VT_VOID
26147>>>>>>>>>    End_Procedure
26148>>>>>>>>>End_Class
26149>>>>>>>>>
26149>>>>>>>>>// CLSID: {C0DE2200-0E2C-47FC-BFB7-46E70C561AA8}
26149>>>>>>>>>Class cCJPrintInfo is a cComAutomationObject
26150>>>>>>>>>
26150>>>>>>>>>    Function ComContinuePrinting Returns Boolean
26152>>>>>>>>>        Boolean retVal
26152>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
26153>>>>>>>>>        Function_Return retVal
26154>>>>>>>>>    End_Function
26155>>>>>>>>>
26155>>>>>>>>>    Procedure Set ComContinuePrinting Boolean value
26157>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
26158>>>>>>>>>    End_Procedure
26159>>>>>>>>>
26159>>>>>>>>>    Function ComMaxPage Returns Integer
26161>>>>>>>>>        Integer retVal
26161>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26162>>>>>>>>>        Function_Return retVal
26163>>>>>>>>>    End_Function
26164>>>>>>>>>
26164>>>>>>>>>    Procedure Set ComMaxPage Integer value
26166>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26167>>>>>>>>>    End_Procedure
26168>>>>>>>>>
26168>>>>>>>>>    Function ComPreviewMode Returns Boolean
26170>>>>>>>>>        Handle hDispatchDriver
26170>>>>>>>>>        Boolean retVal
26170>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26171>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BOOL to retVal
26172>>>>>>>>>        Function_Return retVal
26173>>>>>>>>>    End_Function
26174>>>>>>>>>
26174>>>>>>>>>    Function ComCurrentPage Returns Integer
26176>>>>>>>>>        Handle hDispatchDriver
26176>>>>>>>>>        Integer retVal
26176>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26177>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26178>>>>>>>>>        Function_Return retVal
26179>>>>>>>>>    End_Function
26180>>>>>>>>>
26180>>>>>>>>>    Function ComPrintRectLeft Returns Integer
26182>>>>>>>>>        Handle hDispatchDriver
26182>>>>>>>>>        Integer retVal
26182>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26183>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26184>>>>>>>>>        Function_Return retVal
26185>>>>>>>>>    End_Function
26186>>>>>>>>>
26186>>>>>>>>>    Function ComPrintRectTop Returns Integer
26188>>>>>>>>>        Handle hDispatchDriver
26188>>>>>>>>>        Integer retVal
26188>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26189>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_I4 to retVal
26190>>>>>>>>>        Function_Return retVal
26191>>>>>>>>>    End_Function
26192>>>>>>>>>
26192>>>>>>>>>    Function ComPrintRectRight Returns Integer
26194>>>>>>>>>        Handle hDispatchDriver
26194>>>>>>>>>        Integer retVal
26194>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26195>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
26196>>>>>>>>>        Function_Return retVal
26197>>>>>>>>>    End_Function
26198>>>>>>>>>
26198>>>>>>>>>    Function ComPrintRectBottom Returns Integer
26200>>>>>>>>>        Handle hDispatchDriver
26200>>>>>>>>>        Integer retVal
26200>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26201>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_I4 to retVal
26202>>>>>>>>>        Function_Return retVal
26203>>>>>>>>>    End_Function
26204>>>>>>>>>End_Class
26205>>>>>>>>>
26205>>>>>>>>>// CLSID: {C0DE2200-A5D8-4569-8690-592295C5583A}
26205>>>>>>>>>Class cCJComStatusBarPane is a cComAutomationObject
26206>>>>>>>>>
26206>>>>>>>>>    Function ComWidth Returns Integer
26208>>>>>>>>>        Integer retVal
26208>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26209>>>>>>>>>        Function_Return retVal
26210>>>>>>>>>    End_Function
26211>>>>>>>>>
26211>>>>>>>>>    Procedure Set ComWidth Integer value
26213>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26214>>>>>>>>>    End_Procedure
26215>>>>>>>>>
26215>>>>>>>>>    Function ComStyle Returns XTPStatusPaneStyle
26217>>>>>>>>>        XTPStatusPaneStyle retVal
26217>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
26218>>>>>>>>>        Function_Return retVal
26219>>>>>>>>>    End_Function
26220>>>>>>>>>
26220>>>>>>>>>    Procedure Set ComStyle XTPStatusPaneStyle value
26222>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
26223>>>>>>>>>    End_Procedure
26224>>>>>>>>>
26224>>>>>>>>>    Function ComVisible Returns Boolean
26226>>>>>>>>>        Boolean retVal
26226>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
26227>>>>>>>>>        Function_Return retVal
26228>>>>>>>>>    End_Function
26229>>>>>>>>>
26229>>>>>>>>>    Procedure Set ComVisible Boolean value
26231>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
26232>>>>>>>>>    End_Procedure
26233>>>>>>>>>
26233>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
26235>>>>>>>>>        OLE_HANDLE retVal
26235>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
26236>>>>>>>>>        Function_Return retVal
26237>>>>>>>>>    End_Function
26238>>>>>>>>>
26238>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
26240>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
26241>>>>>>>>>    End_Procedure
26242>>>>>>>>>
26242>>>>>>>>>    Function ComToolTip Returns String
26244>>>>>>>>>        String retVal
26244>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
26245>>>>>>>>>        Function_Return retVal
26246>>>>>>>>>    End_Function
26247>>>>>>>>>
26247>>>>>>>>>    Procedure Set ComToolTip String value
26249>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
26250>>>>>>>>>    End_Procedure
26251>>>>>>>>>
26251>>>>>>>>>    Function ComBeginGroup Returns Boolean
26253>>>>>>>>>        Boolean retVal
26253>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
26254>>>>>>>>>        Function_Return retVal
26255>>>>>>>>>    End_Function
26256>>>>>>>>>
26256>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
26258>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
26259>>>>>>>>>    End_Procedure
26260>>>>>>>>>
26260>>>>>>>>>    Function ComCaption Returns String
26262>>>>>>>>>        String retVal
26262>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to retVal
26263>>>>>>>>>        Function_Return retVal
26264>>>>>>>>>    End_Function
26265>>>>>>>>>
26265>>>>>>>>>    Procedure Set ComCaption String value
26267>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to value
26268>>>>>>>>>    End_Procedure
26269>>>>>>>>>
26269>>>>>>>>>    Function ComEnabled Returns Boolean
26271>>>>>>>>>        Boolean retVal
26271>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
26272>>>>>>>>>        Function_Return retVal
26273>>>>>>>>>    End_Function
26274>>>>>>>>>
26274>>>>>>>>>    Procedure Set ComEnabled Boolean value
26276>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
26277>>>>>>>>>    End_Procedure
26278>>>>>>>>>
26278>>>>>>>>>    Function ComCustomizable Returns Boolean
26280>>>>>>>>>        Boolean retVal
26280>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
26281>>>>>>>>>        Function_Return retVal
26282>>>>>>>>>    End_Function
26283>>>>>>>>>
26283>>>>>>>>>    Procedure Set ComCustomizable Boolean value
26285>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
26286>>>>>>>>>    End_Procedure
26287>>>>>>>>>
26287>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
26289>>>>>>>>>        XTPControlHideFlags retVal
26289>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
26290>>>>>>>>>        Function_Return retVal
26291>>>>>>>>>    End_Function
26292>>>>>>>>>
26292>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
26294>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
26295>>>>>>>>>    End_Procedure
26296>>>>>>>>>
26296>>>>>>>>>    Function ComDark Returns Boolean
26298>>>>>>>>>        Boolean retVal
26298>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
26299>>>>>>>>>        Function_Return retVal
26300>>>>>>>>>    End_Function
26301>>>>>>>>>
26301>>>>>>>>>    Procedure Set ComDark Boolean value
26303>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
26304>>>>>>>>>    End_Procedure
26305>>>>>>>>>
26305>>>>>>>>>    Function ComText Returns String
26307>>>>>>>>>        String retVal
26307>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
26308>>>>>>>>>        Function_Return retVal
26309>>>>>>>>>    End_Function
26310>>>>>>>>>
26310>>>>>>>>>    Procedure Set ComText String value
26312>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
26313>>>>>>>>>    End_Procedure
26314>>>>>>>>>
26314>>>>>>>>>    Function ComTextColor Returns OLE_COLOR
26316>>>>>>>>>        OLE_COLOR retVal
26316>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -513 OLE_VT_I4 to retVal
26317>>>>>>>>>        Function_Return retVal
26318>>>>>>>>>    End_Function
26319>>>>>>>>>
26319>>>>>>>>>    Procedure Set ComTextColor OLE_COLOR value
26321>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -513 OLE_VT_I4 to value
26322>>>>>>>>>    End_Procedure
26323>>>>>>>>>
26323>>>>>>>>>    Function ComTextGrayColor Returns OLE_COLOR
26325>>>>>>>>>        OLE_COLOR retVal
26325>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to retVal
26326>>>>>>>>>        Function_Return retVal
26327>>>>>>>>>    End_Function
26328>>>>>>>>>
26328>>>>>>>>>    Procedure Set ComTextGrayColor OLE_COLOR value
26330>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 25 OLE_VT_I4 to value
26331>>>>>>>>>    End_Procedure
26332>>>>>>>>>
26332>>>>>>>>>    Function ComBackgroundColor Returns OLE_COLOR
26334>>>>>>>>>        OLE_COLOR retVal
26334>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to retVal
26335>>>>>>>>>        Function_Return retVal
26336>>>>>>>>>    End_Function
26337>>>>>>>>>
26337>>>>>>>>>    Procedure Set ComBackgroundColor OLE_COLOR value
26339>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -501 OLE_VT_I4 to value
26340>>>>>>>>>    End_Procedure
26341>>>>>>>>>
26341>>>>>>>>>    Function ComFont Returns Variant
26343>>>>>>>>>        Variant retVal
26343>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
26344>>>>>>>>>        Function_Return retVal
26345>>>>>>>>>    End_Function
26346>>>>>>>>>
26346>>>>>>>>>    Procedure Set ComFont Variant value
26348>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
26349>>>>>>>>>    End_Procedure
26350>>>>>>>>>
26350>>>>>>>>>    Function ComIconIndex Returns Integer
26352>>>>>>>>>        Integer retVal
26352>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to retVal
26353>>>>>>>>>        Function_Return retVal
26354>>>>>>>>>    End_Function
26355>>>>>>>>>
26355>>>>>>>>>    Procedure Set ComIconIndex Integer value
26357>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_I4 to value
26358>>>>>>>>>    End_Procedure
26359>>>>>>>>>
26359>>>>>>>>>    Function ComAlignment Returns XTPTextAlignment
26361>>>>>>>>>        XTPTextAlignment retVal
26361>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to retVal
26362>>>>>>>>>        Function_Return retVal
26363>>>>>>>>>    End_Function
26364>>>>>>>>>
26364>>>>>>>>>    Procedure Set ComAlignment XTPTextAlignment value
26366>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_I4 to value
26367>>>>>>>>>    End_Procedure
26368>>>>>>>>>
26368>>>>>>>>>    Function ComButton Returns Boolean
26370>>>>>>>>>        Boolean retVal
26370>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
26371>>>>>>>>>        Function_Return retVal
26372>>>>>>>>>    End_Function
26373>>>>>>>>>
26373>>>>>>>>>    Procedure Set ComButton Boolean value
26375>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
26376>>>>>>>>>    End_Procedure
26377>>>>>>>>>
26377>>>>>>>>>    Function ComValue Returns String
26379>>>>>>>>>        String retVal
26379>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BSTR to retVal
26380>>>>>>>>>        Function_Return retVal
26381>>>>>>>>>    End_Function
26382>>>>>>>>>
26382>>>>>>>>>    Procedure Set ComValue String value
26384>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BSTR to value
26385>>>>>>>>>    End_Procedure
26386>>>>>>>>>
26386>>>>>>>>>    Function ComChecked Returns Boolean
26388>>>>>>>>>        Boolean retVal
26388>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
26389>>>>>>>>>        Function_Return retVal
26390>>>>>>>>>    End_Function
26391>>>>>>>>>
26391>>>>>>>>>    Procedure Set ComChecked Boolean value
26393>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
26394>>>>>>>>>    End_Procedure
26395>>>>>>>>>
26395>>>>>>>>>    Function ComId Returns Integer
26397>>>>>>>>>        Handle hDispatchDriver
26397>>>>>>>>>        Integer retVal
26397>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26398>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26399>>>>>>>>>        Function_Return retVal
26400>>>>>>>>>    End_Function
26401>>>>>>>>>
26401>>>>>>>>>    Function ComIndex Returns Integer
26403>>>>>>>>>        Handle hDispatchDriver
26403>>>>>>>>>        Integer retVal
26403>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26404>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26405>>>>>>>>>        Function_Return retVal
26406>>>>>>>>>    End_Function
26407>>>>>>>>>
26407>>>>>>>>>    Procedure ComRemove
26409>>>>>>>>>        Handle hDispatchDriver
26409>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26410>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
26411>>>>>>>>>    End_Procedure
26412>>>>>>>>>
26412>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
26414>>>>>>>>>        Handle hDispatchDriver
26414>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26415>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26416>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
26417>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
26418>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
26419>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
26420>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
26421>>>>>>>>>    End_Procedure
26422>>>>>>>>>
26422>>>>>>>>>    Procedure ComRedrawPane
26424>>>>>>>>>        Handle hDispatchDriver
26424>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26425>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 333 OLE_VT_VOID
26426>>>>>>>>>    End_Procedure
26427>>>>>>>>>
26427>>>>>>>>>    Procedure ComSetPadding Integer llLeft Integer llTop Integer llRight Integer llBottom
26429>>>>>>>>>        Handle hDispatchDriver
26429>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26430>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26431>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
26432>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
26433>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
26434>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
26435>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
26436>>>>>>>>>    End_Procedure
26437>>>>>>>>>
26437>>>>>>>>>    Procedure ComSetMargins Integer llLeft Integer llTop Integer llRight Integer llBottom
26439>>>>>>>>>        Handle hDispatchDriver
26439>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26440>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26441>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
26442>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
26443>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
26444>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
26445>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 20 OLE_VT_VOID
26446>>>>>>>>>    End_Procedure
26447>>>>>>>>>End_Class
26448>>>>>>>>>
26448>>>>>>>>>// CLSID: {C0DE2200-80B8-4E1B-878E-FFF8347C96EE}
26448>>>>>>>>>Class cCJStatusBarSwitchPane is a cComAutomationObject
26449>>>>>>>>>
26449>>>>>>>>>    Function ComWidth Returns Integer
26451>>>>>>>>>        Integer retVal
26451>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26452>>>>>>>>>        Function_Return retVal
26453>>>>>>>>>    End_Function
26454>>>>>>>>>
26454>>>>>>>>>    Procedure Set ComWidth Integer value
26456>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26457>>>>>>>>>    End_Procedure
26458>>>>>>>>>
26458>>>>>>>>>    Function ComStyle Returns XTPStatusPaneStyle
26460>>>>>>>>>        XTPStatusPaneStyle retVal
26460>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
26461>>>>>>>>>        Function_Return retVal
26462>>>>>>>>>    End_Function
26463>>>>>>>>>
26463>>>>>>>>>    Procedure Set ComStyle XTPStatusPaneStyle value
26465>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
26466>>>>>>>>>    End_Procedure
26467>>>>>>>>>
26467>>>>>>>>>    Function ComVisible Returns Boolean
26469>>>>>>>>>        Boolean retVal
26469>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
26470>>>>>>>>>        Function_Return retVal
26471>>>>>>>>>    End_Function
26472>>>>>>>>>
26472>>>>>>>>>    Procedure Set ComVisible Boolean value
26474>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
26475>>>>>>>>>    End_Procedure
26476>>>>>>>>>
26476>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
26478>>>>>>>>>        OLE_HANDLE retVal
26478>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
26479>>>>>>>>>        Function_Return retVal
26480>>>>>>>>>    End_Function
26481>>>>>>>>>
26481>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
26483>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
26484>>>>>>>>>    End_Procedure
26485>>>>>>>>>
26485>>>>>>>>>    Function ComToolTip Returns String
26487>>>>>>>>>        String retVal
26487>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
26488>>>>>>>>>        Function_Return retVal
26489>>>>>>>>>    End_Function
26490>>>>>>>>>
26490>>>>>>>>>    Procedure Set ComToolTip String value
26492>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
26493>>>>>>>>>    End_Procedure
26494>>>>>>>>>
26494>>>>>>>>>    Function ComBeginGroup Returns Boolean
26496>>>>>>>>>        Boolean retVal
26496>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
26497>>>>>>>>>        Function_Return retVal
26498>>>>>>>>>    End_Function
26499>>>>>>>>>
26499>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
26501>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
26502>>>>>>>>>    End_Procedure
26503>>>>>>>>>
26503>>>>>>>>>    Function ComCaption Returns String
26505>>>>>>>>>        String retVal
26505>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to retVal
26506>>>>>>>>>        Function_Return retVal
26507>>>>>>>>>    End_Function
26508>>>>>>>>>
26508>>>>>>>>>    Procedure Set ComCaption String value
26510>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to value
26511>>>>>>>>>    End_Procedure
26512>>>>>>>>>
26512>>>>>>>>>    Function ComEnabled Returns Boolean
26514>>>>>>>>>        Boolean retVal
26514>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
26515>>>>>>>>>        Function_Return retVal
26516>>>>>>>>>    End_Function
26517>>>>>>>>>
26517>>>>>>>>>    Procedure Set ComEnabled Boolean value
26519>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
26520>>>>>>>>>    End_Procedure
26521>>>>>>>>>
26521>>>>>>>>>    Function ComCustomizable Returns Boolean
26523>>>>>>>>>        Boolean retVal
26523>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
26524>>>>>>>>>        Function_Return retVal
26525>>>>>>>>>    End_Function
26526>>>>>>>>>
26526>>>>>>>>>    Procedure Set ComCustomizable Boolean value
26528>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
26529>>>>>>>>>    End_Procedure
26530>>>>>>>>>
26530>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
26532>>>>>>>>>        XTPControlHideFlags retVal
26532>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
26533>>>>>>>>>        Function_Return retVal
26534>>>>>>>>>    End_Function
26535>>>>>>>>>
26535>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
26537>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
26538>>>>>>>>>    End_Procedure
26539>>>>>>>>>
26539>>>>>>>>>    Function ComDark Returns Boolean
26541>>>>>>>>>        Boolean retVal
26541>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
26542>>>>>>>>>        Function_Return retVal
26543>>>>>>>>>    End_Function
26544>>>>>>>>>
26544>>>>>>>>>    Procedure Set ComDark Boolean value
26546>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
26547>>>>>>>>>    End_Procedure
26548>>>>>>>>>
26548>>>>>>>>>    Function ComChecked Returns Integer
26550>>>>>>>>>        Integer retVal
26550>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to retVal
26551>>>>>>>>>        Function_Return retVal
26552>>>>>>>>>    End_Function
26553>>>>>>>>>
26553>>>>>>>>>    Procedure Set ComChecked Integer value
26555>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to value
26556>>>>>>>>>    End_Procedure
26557>>>>>>>>>
26557>>>>>>>>>    Function ComId Returns Integer
26559>>>>>>>>>        Handle hDispatchDriver
26559>>>>>>>>>        Integer retVal
26559>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26560>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26561>>>>>>>>>        Function_Return retVal
26562>>>>>>>>>    End_Function
26563>>>>>>>>>
26563>>>>>>>>>    Function ComIndex Returns Integer
26565>>>>>>>>>        Handle hDispatchDriver
26565>>>>>>>>>        Integer retVal
26565>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26566>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26567>>>>>>>>>        Function_Return retVal
26568>>>>>>>>>    End_Function
26569>>>>>>>>>
26569>>>>>>>>>    Procedure ComRemove
26571>>>>>>>>>        Handle hDispatchDriver
26571>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26572>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
26573>>>>>>>>>    End_Procedure
26574>>>>>>>>>
26574>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
26576>>>>>>>>>        Handle hDispatchDriver
26576>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26577>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26578>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
26579>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
26580>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
26581>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
26582>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
26583>>>>>>>>>    End_Procedure
26584>>>>>>>>>
26584>>>>>>>>>    Procedure ComRedrawPane
26586>>>>>>>>>        Handle hDispatchDriver
26586>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26587>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 333 OLE_VT_VOID
26588>>>>>>>>>    End_Procedure
26589>>>>>>>>>
26589>>>>>>>>>    Procedure ComAddSwitch Integer llId String llToolTip
26591>>>>>>>>>        Handle hDispatchDriver
26591>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26592>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26593>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26594>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llToolTip
26595>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 120 OLE_VT_VOID
26596>>>>>>>>>    End_Procedure
26597>>>>>>>>>
26597>>>>>>>>>    Procedure ComRemoveSwitch Integer llId
26599>>>>>>>>>        Handle hDispatchDriver
26599>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26600>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
26601>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26602>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 121 OLE_VT_VOID
26603>>>>>>>>>    End_Procedure
26604>>>>>>>>>
26604>>>>>>>>>    Procedure ComEnableSwitch Integer llId Boolean llEnable
26606>>>>>>>>>        Handle hDispatchDriver
26606>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26607>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26608>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26609>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llEnable
26610>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 123 OLE_VT_VOID
26611>>>>>>>>>    End_Procedure
26612>>>>>>>>>
26612>>>>>>>>>    Function ComSwitchTooltip Integer llId Returns String
26614>>>>>>>>>        Handle hDispatchDriver
26614>>>>>>>>>        String retVal
26614>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26615>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
26616>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26617>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 124 OLE_VT_BSTR to retVal
26618>>>>>>>>>        Function_Return retVal
26619>>>>>>>>>    End_Function
26620>>>>>>>>>
26620>>>>>>>>>    Procedure Set ComSwitchTooltip Integer llId String value
26622>>>>>>>>>        Handle hDispatchDriver
26622>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26623>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26624>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
26625>>>>>>>>>        Set ComProperty of hDispatchDriver 124 OLE_VT_BSTR to value
26626>>>>>>>>>    End_Procedure
26627>>>>>>>>>End_Class
26628>>>>>>>>>
26628>>>>>>>>>// CLSID: {C0DE2200-C7DE-43D1-A36D-48CDD92DA1F7}
26628>>>>>>>>>Class cCJStatusBarSliderPane is a cComAutomationObject
26629>>>>>>>>>
26629>>>>>>>>>    Function ComWidth Returns Integer
26631>>>>>>>>>        Integer retVal
26631>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26632>>>>>>>>>        Function_Return retVal
26633>>>>>>>>>    End_Function
26634>>>>>>>>>
26634>>>>>>>>>    Procedure Set ComWidth Integer value
26636>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26637>>>>>>>>>    End_Procedure
26638>>>>>>>>>
26638>>>>>>>>>    Function ComStyle Returns XTPStatusPaneStyle
26640>>>>>>>>>        XTPStatusPaneStyle retVal
26640>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
26641>>>>>>>>>        Function_Return retVal
26642>>>>>>>>>    End_Function
26643>>>>>>>>>
26643>>>>>>>>>    Procedure Set ComStyle XTPStatusPaneStyle value
26645>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
26646>>>>>>>>>    End_Procedure
26647>>>>>>>>>
26647>>>>>>>>>    Function ComVisible Returns Boolean
26649>>>>>>>>>        Boolean retVal
26649>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
26650>>>>>>>>>        Function_Return retVal
26651>>>>>>>>>    End_Function
26652>>>>>>>>>
26652>>>>>>>>>    Procedure Set ComVisible Boolean value
26654>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
26655>>>>>>>>>    End_Procedure
26656>>>>>>>>>
26656>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
26658>>>>>>>>>        OLE_HANDLE retVal
26658>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
26659>>>>>>>>>        Function_Return retVal
26660>>>>>>>>>    End_Function
26661>>>>>>>>>
26661>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
26663>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
26664>>>>>>>>>    End_Procedure
26665>>>>>>>>>
26665>>>>>>>>>    Function ComToolTip Returns String
26667>>>>>>>>>        String retVal
26667>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
26668>>>>>>>>>        Function_Return retVal
26669>>>>>>>>>    End_Function
26670>>>>>>>>>
26670>>>>>>>>>    Procedure Set ComToolTip String value
26672>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
26673>>>>>>>>>    End_Procedure
26674>>>>>>>>>
26674>>>>>>>>>    Function ComBeginGroup Returns Boolean
26676>>>>>>>>>        Boolean retVal
26676>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
26677>>>>>>>>>        Function_Return retVal
26678>>>>>>>>>    End_Function
26679>>>>>>>>>
26679>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
26681>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
26682>>>>>>>>>    End_Procedure
26683>>>>>>>>>
26683>>>>>>>>>    Function ComCaption Returns String
26685>>>>>>>>>        String retVal
26685>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to retVal
26686>>>>>>>>>        Function_Return retVal
26687>>>>>>>>>    End_Function
26688>>>>>>>>>
26688>>>>>>>>>    Procedure Set ComCaption String value
26690>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to value
26691>>>>>>>>>    End_Procedure
26692>>>>>>>>>
26692>>>>>>>>>    Function ComEnabled Returns Boolean
26694>>>>>>>>>        Boolean retVal
26694>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
26695>>>>>>>>>        Function_Return retVal
26696>>>>>>>>>    End_Function
26697>>>>>>>>>
26697>>>>>>>>>    Procedure Set ComEnabled Boolean value
26699>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
26700>>>>>>>>>    End_Procedure
26701>>>>>>>>>
26701>>>>>>>>>    Function ComCustomizable Returns Boolean
26703>>>>>>>>>        Boolean retVal
26703>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
26704>>>>>>>>>        Function_Return retVal
26705>>>>>>>>>    End_Function
26706>>>>>>>>>
26706>>>>>>>>>    Procedure Set ComCustomizable Boolean value
26708>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
26709>>>>>>>>>    End_Procedure
26710>>>>>>>>>
26710>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
26712>>>>>>>>>        XTPControlHideFlags retVal
26712>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
26713>>>>>>>>>        Function_Return retVal
26714>>>>>>>>>    End_Function
26715>>>>>>>>>
26715>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
26717>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
26718>>>>>>>>>    End_Procedure
26719>>>>>>>>>
26719>>>>>>>>>    Function ComDark Returns Boolean
26721>>>>>>>>>        Boolean retVal
26721>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
26722>>>>>>>>>        Function_Return retVal
26723>>>>>>>>>    End_Function
26724>>>>>>>>>
26724>>>>>>>>>    Procedure Set ComDark Boolean value
26726>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
26727>>>>>>>>>    End_Procedure
26728>>>>>>>>>
26728>>>>>>>>>    Function ComMin Returns Integer
26730>>>>>>>>>        Integer retVal
26730>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 120 OLE_VT_I4 to retVal
26731>>>>>>>>>        Function_Return retVal
26732>>>>>>>>>    End_Function
26733>>>>>>>>>
26733>>>>>>>>>    Procedure Set ComMin Integer value
26735>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 120 OLE_VT_I4 to value
26736>>>>>>>>>    End_Procedure
26737>>>>>>>>>
26737>>>>>>>>>    Function ComMax Returns Integer
26739>>>>>>>>>        Integer retVal
26739>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 121 OLE_VT_I4 to retVal
26740>>>>>>>>>        Function_Return retVal
26741>>>>>>>>>    End_Function
26742>>>>>>>>>
26742>>>>>>>>>    Procedure Set ComMax Integer value
26744>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 121 OLE_VT_I4 to value
26745>>>>>>>>>    End_Procedure
26746>>>>>>>>>
26746>>>>>>>>>    Function ComValue Returns Integer
26748>>>>>>>>>        Integer retVal
26748>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to retVal
26749>>>>>>>>>        Function_Return retVal
26750>>>>>>>>>    End_Function
26751>>>>>>>>>
26751>>>>>>>>>    Procedure Set ComValue Integer value
26753>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to value
26754>>>>>>>>>    End_Procedure
26755>>>>>>>>>
26755>>>>>>>>>    Function ComId Returns Integer
26757>>>>>>>>>        Handle hDispatchDriver
26757>>>>>>>>>        Integer retVal
26757>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26758>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26759>>>>>>>>>        Function_Return retVal
26760>>>>>>>>>    End_Function
26761>>>>>>>>>
26761>>>>>>>>>    Function ComIndex Returns Integer
26763>>>>>>>>>        Handle hDispatchDriver
26763>>>>>>>>>        Integer retVal
26763>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26764>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26765>>>>>>>>>        Function_Return retVal
26766>>>>>>>>>    End_Function
26767>>>>>>>>>
26767>>>>>>>>>    Procedure ComRemove
26769>>>>>>>>>        Handle hDispatchDriver
26769>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26770>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
26771>>>>>>>>>    End_Procedure
26772>>>>>>>>>
26772>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
26774>>>>>>>>>        Handle hDispatchDriver
26774>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26775>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26776>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
26777>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
26778>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
26779>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
26780>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
26781>>>>>>>>>    End_Procedure
26782>>>>>>>>>
26782>>>>>>>>>    Procedure ComRedrawPane
26784>>>>>>>>>        Handle hDispatchDriver
26784>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26785>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 333 OLE_VT_VOID
26786>>>>>>>>>    End_Procedure
26787>>>>>>>>>
26787>>>>>>>>>    Procedure ComSetTooltipPart XTPSliderCommand llCommand String llToolTip
26789>>>>>>>>>        Handle hDispatchDriver
26789>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26790>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
26791>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCommand
26792>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llToolTip
26793>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 123 OLE_VT_VOID
26794>>>>>>>>>    End_Procedure
26795>>>>>>>>>
26795>>>>>>>>>    Procedure ComSetTicks Variant llTicks
26797>>>>>>>>>        Handle hDispatchDriver
26797>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26798>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
26799>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llTicks
26800>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 124 OLE_VT_VOID
26801>>>>>>>>>    End_Procedure
26802>>>>>>>>>End_Class
26803>>>>>>>>>
26803>>>>>>>>>// CLSID: {C0DE2200-A19C-4749-A1F2-991D33618081}
26803>>>>>>>>>Class cCJStatusBarProgressPane is a cComAutomationObject
26804>>>>>>>>>
26804>>>>>>>>>    Function ComWidth Returns Integer
26806>>>>>>>>>        Integer retVal
26806>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
26807>>>>>>>>>        Function_Return retVal
26808>>>>>>>>>    End_Function
26809>>>>>>>>>
26809>>>>>>>>>    Procedure Set ComWidth Integer value
26811>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
26812>>>>>>>>>    End_Procedure
26813>>>>>>>>>
26813>>>>>>>>>    Function ComStyle Returns XTPStatusPaneStyle
26815>>>>>>>>>        XTPStatusPaneStyle retVal
26815>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
26816>>>>>>>>>        Function_Return retVal
26817>>>>>>>>>    End_Function
26818>>>>>>>>>
26818>>>>>>>>>    Procedure Set ComStyle XTPStatusPaneStyle value
26820>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
26821>>>>>>>>>    End_Procedure
26822>>>>>>>>>
26822>>>>>>>>>    Function ComVisible Returns Boolean
26824>>>>>>>>>        Boolean retVal
26824>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to retVal
26825>>>>>>>>>        Function_Return retVal
26826>>>>>>>>>    End_Function
26827>>>>>>>>>
26827>>>>>>>>>    Procedure Set ComVisible Boolean value
26829>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 7 OLE_VT_BOOL to value
26830>>>>>>>>>    End_Procedure
26831>>>>>>>>>
26831>>>>>>>>>    Function ComHandle Returns OLE_HANDLE
26833>>>>>>>>>        OLE_HANDLE retVal
26833>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
26834>>>>>>>>>        Function_Return retVal
26835>>>>>>>>>    End_Function
26836>>>>>>>>>
26836>>>>>>>>>    Procedure Set ComHandle OLE_HANDLE value
26838>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
26839>>>>>>>>>    End_Procedure
26840>>>>>>>>>
26840>>>>>>>>>    Function ComToolTip Returns String
26842>>>>>>>>>        String retVal
26842>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to retVal
26843>>>>>>>>>        Function_Return retVal
26844>>>>>>>>>    End_Function
26845>>>>>>>>>
26845>>>>>>>>>    Procedure Set ComToolTip String value
26847>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 11 OLE_VT_BSTR to value
26848>>>>>>>>>    End_Procedure
26849>>>>>>>>>
26849>>>>>>>>>    Function ComBeginGroup Returns Boolean
26851>>>>>>>>>        Boolean retVal
26851>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
26852>>>>>>>>>        Function_Return retVal
26853>>>>>>>>>    End_Function
26854>>>>>>>>>
26854>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
26856>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
26857>>>>>>>>>    End_Procedure
26858>>>>>>>>>
26858>>>>>>>>>    Function ComCaption Returns String
26860>>>>>>>>>        String retVal
26860>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to retVal
26861>>>>>>>>>        Function_Return retVal
26862>>>>>>>>>    End_Function
26863>>>>>>>>>
26863>>>>>>>>>    Procedure Set ComCaption String value
26865>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 16 OLE_VT_BSTR to value
26866>>>>>>>>>    End_Procedure
26867>>>>>>>>>
26867>>>>>>>>>    Function ComEnabled Returns Boolean
26869>>>>>>>>>        Boolean retVal
26869>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to retVal
26870>>>>>>>>>        Function_Return retVal
26871>>>>>>>>>    End_Function
26872>>>>>>>>>
26872>>>>>>>>>    Procedure Set ComEnabled Boolean value
26874>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_BOOL to value
26875>>>>>>>>>    End_Procedure
26876>>>>>>>>>
26876>>>>>>>>>    Function ComCustomizable Returns Boolean
26878>>>>>>>>>        Boolean retVal
26878>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to retVal
26879>>>>>>>>>        Function_Return retVal
26880>>>>>>>>>    End_Function
26881>>>>>>>>>
26881>>>>>>>>>    Procedure Set ComCustomizable Boolean value
26883>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_BOOL to value
26884>>>>>>>>>    End_Procedure
26885>>>>>>>>>
26885>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
26887>>>>>>>>>        XTPControlHideFlags retVal
26887>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to retVal
26888>>>>>>>>>        Function_Return retVal
26889>>>>>>>>>    End_Function
26890>>>>>>>>>
26890>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
26892>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 22 OLE_VT_I4 to value
26893>>>>>>>>>    End_Procedure
26894>>>>>>>>>
26894>>>>>>>>>    Function ComDark Returns Boolean
26896>>>>>>>>>        Boolean retVal
26896>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to retVal
26897>>>>>>>>>        Function_Return retVal
26898>>>>>>>>>    End_Function
26899>>>>>>>>>
26899>>>>>>>>>    Procedure Set ComDark Boolean value
26901>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 26 OLE_VT_BOOL to value
26902>>>>>>>>>    End_Procedure
26903>>>>>>>>>
26903>>>>>>>>>    Function ComMin Returns Integer
26905>>>>>>>>>        Integer retVal
26905>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 120 OLE_VT_I4 to retVal
26906>>>>>>>>>        Function_Return retVal
26907>>>>>>>>>    End_Function
26908>>>>>>>>>
26908>>>>>>>>>    Procedure Set ComMin Integer value
26910>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 120 OLE_VT_I4 to value
26911>>>>>>>>>    End_Procedure
26912>>>>>>>>>
26912>>>>>>>>>    Function ComMax Returns Integer
26914>>>>>>>>>        Integer retVal
26914>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 121 OLE_VT_I4 to retVal
26915>>>>>>>>>        Function_Return retVal
26916>>>>>>>>>    End_Function
26917>>>>>>>>>
26917>>>>>>>>>    Procedure Set ComMax Integer value
26919>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 121 OLE_VT_I4 to value
26920>>>>>>>>>    End_Procedure
26921>>>>>>>>>
26921>>>>>>>>>    Function ComValue Returns Integer
26923>>>>>>>>>        Integer retVal
26923>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to retVal
26924>>>>>>>>>        Function_Return retVal
26925>>>>>>>>>    End_Function
26926>>>>>>>>>
26926>>>>>>>>>    Procedure Set ComValue Integer value
26928>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 122 OLE_VT_I4 to value
26929>>>>>>>>>    End_Procedure
26930>>>>>>>>>
26930>>>>>>>>>    Function ComId Returns Integer
26932>>>>>>>>>        Handle hDispatchDriver
26932>>>>>>>>>        Integer retVal
26932>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26933>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
26934>>>>>>>>>        Function_Return retVal
26935>>>>>>>>>    End_Function
26936>>>>>>>>>
26936>>>>>>>>>    Function ComIndex Returns Integer
26938>>>>>>>>>        Handle hDispatchDriver
26938>>>>>>>>>        Integer retVal
26938>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26939>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
26940>>>>>>>>>        Function_Return retVal
26941>>>>>>>>>    End_Function
26942>>>>>>>>>
26942>>>>>>>>>    Procedure ComRemove
26944>>>>>>>>>        Handle hDispatchDriver
26944>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26945>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
26946>>>>>>>>>    End_Procedure
26947>>>>>>>>>
26947>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
26949>>>>>>>>>        Handle hDispatchDriver
26949>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26950>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
26951>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
26952>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
26953>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
26954>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
26955>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 23 OLE_VT_VOID
26956>>>>>>>>>    End_Procedure
26957>>>>>>>>>
26957>>>>>>>>>    Procedure ComRedrawPane
26959>>>>>>>>>        Handle hDispatchDriver
26959>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26960>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 333 OLE_VT_VOID
26961>>>>>>>>>    End_Procedure
26962>>>>>>>>>
26962>>>>>>>>>    Procedure ComRedrawProgress
26964>>>>>>>>>        Handle hDispatchDriver
26964>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26965>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 334 OLE_VT_VOID
26966>>>>>>>>>    End_Procedure
26967>>>>>>>>>End_Class
26968>>>>>>>>>
26968>>>>>>>>>// CLSID: {C0DE2200-481B-4769-ABB2-56F0D7F7BB9E}
26968>>>>>>>>>// Dispatch interface for MessageBar Control
26968>>>>>>>>>Class cCJMessageBar is a cComAutomationObject
26969>>>>>>>>>
26969>>>>>>>>>    Function ComVisible Returns Boolean
26971>>>>>>>>>        Boolean retVal
26971>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to retVal
26972>>>>>>>>>        Function_Return retVal
26973>>>>>>>>>    End_Function
26974>>>>>>>>>
26974>>>>>>>>>    Procedure Set ComVisible Boolean value
26976>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BOOL to value
26977>>>>>>>>>    End_Procedure
26978>>>>>>>>>
26978>>>>>>>>>    Function ComMessage Returns String
26980>>>>>>>>>        String retVal
26980>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
26981>>>>>>>>>        Function_Return retVal
26982>>>>>>>>>    End_Function
26983>>>>>>>>>
26983>>>>>>>>>    Procedure Set ComMessage String value
26985>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
26986>>>>>>>>>    End_Procedure
26987>>>>>>>>>
26987>>>>>>>>>    Function ComHeight Returns Integer
26989>>>>>>>>>        Integer retVal
26989>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
26990>>>>>>>>>        Function_Return retVal
26991>>>>>>>>>    End_Function
26992>>>>>>>>>
26992>>>>>>>>>    Procedure Set ComHeight Integer value
26994>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
26995>>>>>>>>>    End_Procedure
26996>>>>>>>>>
26996>>>>>>>>>    Procedure ComAddButton Integer llId String llCaption String llToolTip
26998>>>>>>>>>        Handle hDispatchDriver
26998>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
26999>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
27000>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
27001>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
27002>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llToolTip
27003>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
27004>>>>>>>>>    End_Procedure
27005>>>>>>>>>
27005>>>>>>>>>    Procedure ComRemoveButtons
27007>>>>>>>>>        Handle hDispatchDriver
27007>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27008>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
27009>>>>>>>>>    End_Procedure
27010>>>>>>>>>
27010>>>>>>>>>    Procedure ComAddCloseButton String llToolTip
27012>>>>>>>>>        Handle hDispatchDriver
27012>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27013>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27014>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llToolTip
27015>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 5 OLE_VT_VOID
27016>>>>>>>>>    End_Procedure
27017>>>>>>>>>End_Class
27018>>>>>>>>>
27018>>>>>>>>>// CLSID: {C0DE2200-789A-40D9-B564-7577DA549319}
27018>>>>>>>>>Class cCJRibbonBarSystemButton is a cComAutomationObject
27019>>>>>>>>>
27019>>>>>>>>>    Function ComChecked Returns Boolean
27021>>>>>>>>>        Boolean retVal
27021>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
27022>>>>>>>>>        Function_Return retVal
27023>>>>>>>>>    End_Function
27024>>>>>>>>>
27024>>>>>>>>>    Procedure Set ComChecked Boolean value
27026>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
27027>>>>>>>>>    End_Procedure
27028>>>>>>>>>
27028>>>>>>>>>    Function ComBeginGroup Returns Boolean
27030>>>>>>>>>        Boolean retVal
27030>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
27031>>>>>>>>>        Function_Return retVal
27032>>>>>>>>>    End_Function
27033>>>>>>>>>
27033>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
27035>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
27036>>>>>>>>>    End_Procedure
27037>>>>>>>>>
27037>>>>>>>>>    Function ComCaption Returns String
27039>>>>>>>>>        String retVal
27039>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
27040>>>>>>>>>        Function_Return retVal
27041>>>>>>>>>    End_Function
27042>>>>>>>>>
27042>>>>>>>>>    Procedure Set ComCaption String value
27044>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
27045>>>>>>>>>    End_Procedure
27046>>>>>>>>>
27046>>>>>>>>>    Function ComDescriptionText Returns String
27048>>>>>>>>>        String retVal
27048>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
27049>>>>>>>>>        Function_Return retVal
27050>>>>>>>>>    End_Function
27051>>>>>>>>>
27051>>>>>>>>>    Procedure Set ComDescriptionText String value
27053>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
27054>>>>>>>>>    End_Procedure
27055>>>>>>>>>
27055>>>>>>>>>    Function ComId Returns Integer
27057>>>>>>>>>        Integer retVal
27057>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
27058>>>>>>>>>        Function_Return retVal
27059>>>>>>>>>    End_Function
27060>>>>>>>>>
27060>>>>>>>>>    Procedure Set ComId Integer value
27062>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
27063>>>>>>>>>    End_Procedure
27064>>>>>>>>>
27064>>>>>>>>>    Function ComParameter Returns String
27066>>>>>>>>>        String retVal
27066>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
27067>>>>>>>>>        Function_Return retVal
27068>>>>>>>>>    End_Function
27069>>>>>>>>>
27069>>>>>>>>>    Procedure Set ComParameter String value
27071>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
27072>>>>>>>>>    End_Procedure
27073>>>>>>>>>
27073>>>>>>>>>    Function ComShortcutText Returns String
27075>>>>>>>>>        String retVal
27075>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
27076>>>>>>>>>        Function_Return retVal
27077>>>>>>>>>    End_Function
27078>>>>>>>>>
27078>>>>>>>>>    Procedure Set ComShortcutText String value
27080>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
27081>>>>>>>>>    End_Procedure
27082>>>>>>>>>
27082>>>>>>>>>    Function ComCustomShortcutText Returns String
27084>>>>>>>>>        String retVal
27084>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
27085>>>>>>>>>        Function_Return retVal
27086>>>>>>>>>    End_Function
27087>>>>>>>>>
27087>>>>>>>>>    Procedure Set ComCustomShortcutText String value
27089>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
27090>>>>>>>>>    End_Procedure
27091>>>>>>>>>
27091>>>>>>>>>    Function ComTooltipText Returns String
27093>>>>>>>>>        String retVal
27093>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
27094>>>>>>>>>        Function_Return retVal
27095>>>>>>>>>    End_Function
27096>>>>>>>>>
27096>>>>>>>>>    Procedure Set ComTooltipText String value
27098>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
27099>>>>>>>>>    End_Procedure
27100>>>>>>>>>
27100>>>>>>>>>    Function ComVisible Returns Boolean
27102>>>>>>>>>        Boolean retVal
27102>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
27103>>>>>>>>>        Function_Return retVal
27104>>>>>>>>>    End_Function
27105>>>>>>>>>
27105>>>>>>>>>    Procedure Set ComVisible Boolean value
27107>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
27108>>>>>>>>>    End_Procedure
27109>>>>>>>>>
27109>>>>>>>>>    Function ComEnabled Returns Boolean
27111>>>>>>>>>        Boolean retVal
27111>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
27112>>>>>>>>>        Function_Return retVal
27113>>>>>>>>>    End_Function
27114>>>>>>>>>
27114>>>>>>>>>    Procedure Set ComEnabled Boolean value
27116>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
27117>>>>>>>>>    End_Procedure
27118>>>>>>>>>
27118>>>>>>>>>    Function ComIconId Returns Integer
27120>>>>>>>>>        Integer retVal
27120>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
27121>>>>>>>>>        Function_Return retVal
27122>>>>>>>>>    End_Function
27123>>>>>>>>>
27123>>>>>>>>>    Procedure Set ComIconId Integer value
27125>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
27126>>>>>>>>>    End_Procedure
27127>>>>>>>>>
27127>>>>>>>>>    Function ComDefaultItem Returns Boolean
27129>>>>>>>>>        Boolean retVal
27129>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
27130>>>>>>>>>        Function_Return retVal
27131>>>>>>>>>    End_Function
27132>>>>>>>>>
27132>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
27134>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
27135>>>>>>>>>    End_Procedure
27136>>>>>>>>>
27136>>>>>>>>>    Function ComFlags Returns XTPControlFlags
27138>>>>>>>>>        XTPControlFlags retVal
27138>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
27139>>>>>>>>>        Function_Return retVal
27140>>>>>>>>>    End_Function
27141>>>>>>>>>
27141>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
27143>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
27144>>>>>>>>>    End_Procedure
27145>>>>>>>>>
27145>>>>>>>>>    Function ComCategory Returns String
27147>>>>>>>>>        String retVal
27147>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
27148>>>>>>>>>        Function_Return retVal
27149>>>>>>>>>    End_Function
27150>>>>>>>>>
27150>>>>>>>>>    Procedure Set ComCategory String value
27152>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
27153>>>>>>>>>    End_Procedure
27154>>>>>>>>>
27154>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
27156>>>>>>>>>        XTPControlHideFlags retVal
27156>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
27157>>>>>>>>>        Function_Return retVal
27158>>>>>>>>>    End_Function
27159>>>>>>>>>
27159>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
27161>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
27162>>>>>>>>>    End_Procedure
27163>>>>>>>>>
27163>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
27165>>>>>>>>>        Boolean retVal
27165>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
27166>>>>>>>>>        Function_Return retVal
27167>>>>>>>>>    End_Function
27168>>>>>>>>>
27168>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
27170>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
27171>>>>>>>>>    End_Procedure
27172>>>>>>>>>
27172>>>>>>>>>    Function ComAction Returns Variant
27174>>>>>>>>>        Variant retVal
27174>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
27175>>>>>>>>>        Function_Return retVal
27176>>>>>>>>>    End_Function
27177>>>>>>>>>
27177>>>>>>>>>    Procedure Set ComAction Variant value
27179>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
27180>>>>>>>>>    End_Procedure
27181>>>>>>>>>
27181>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
27183>>>>>>>>>        Integer retVal
27183>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
27184>>>>>>>>>        Function_Return retVal
27185>>>>>>>>>    End_Function
27186>>>>>>>>>
27186>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
27188>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
27189>>>>>>>>>    End_Procedure
27190>>>>>>>>>
27190>>>>>>>>>    Function ComWidth Returns Integer
27192>>>>>>>>>        Integer retVal
27192>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
27193>>>>>>>>>        Function_Return retVal
27194>>>>>>>>>    End_Function
27195>>>>>>>>>
27195>>>>>>>>>    Procedure Set ComWidth Integer value
27197>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
27198>>>>>>>>>    End_Procedure
27199>>>>>>>>>
27199>>>>>>>>>    Function ComHeight Returns Integer
27201>>>>>>>>>        Integer retVal
27201>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
27202>>>>>>>>>        Function_Return retVal
27203>>>>>>>>>    End_Function
27204>>>>>>>>>
27204>>>>>>>>>    Procedure Set ComHeight Integer value
27206>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
27207>>>>>>>>>    End_Procedure
27208>>>>>>>>>
27208>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
27210>>>>>>>>>        XTPButtonStyle retVal
27210>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
27211>>>>>>>>>        Function_Return retVal
27212>>>>>>>>>    End_Function
27213>>>>>>>>>
27213>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
27215>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
27216>>>>>>>>>    End_Procedure
27217>>>>>>>>>
27217>>>>>>>>>    Function ComKeyboardTip Returns String
27219>>>>>>>>>        String retVal
27219>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
27220>>>>>>>>>        Function_Return retVal
27221>>>>>>>>>    End_Function
27222>>>>>>>>>
27222>>>>>>>>>    Procedure Set ComKeyboardTip String value
27224>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
27225>>>>>>>>>    End_Procedure
27226>>>>>>>>>
27226>>>>>>>>>    Function ComCommandBar Returns Variant
27228>>>>>>>>>        Variant retVal
27228>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
27229>>>>>>>>>        Function_Return retVal
27230>>>>>>>>>    End_Function
27231>>>>>>>>>
27231>>>>>>>>>    Procedure Set ComCommandBar Variant value
27233>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
27234>>>>>>>>>    End_Procedure
27235>>>>>>>>>
27235>>>>>>>>>    Function ComCloseOnDblClick Returns Boolean
27237>>>>>>>>>        Boolean retVal
27237>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_BOOL to retVal
27238>>>>>>>>>        Function_Return retVal
27239>>>>>>>>>    End_Function
27240>>>>>>>>>
27240>>>>>>>>>    Procedure Set ComCloseOnDblClick Boolean value
27242>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_BOOL to value
27243>>>>>>>>>    End_Procedure
27244>>>>>>>>>
27244>>>>>>>>>    Function ComControls Returns Variant
27246>>>>>>>>>        Handle hDispatchDriver
27246>>>>>>>>>        Variant retVal
27246>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27247>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
27248>>>>>>>>>        Function_Return retVal
27249>>>>>>>>>    End_Function
27250>>>>>>>>>
27250>>>>>>>>>    Function ComParent Returns Variant
27252>>>>>>>>>        Handle hDispatchDriver
27252>>>>>>>>>        Variant retVal
27252>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27253>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
27254>>>>>>>>>        Function_Return retVal
27255>>>>>>>>>    End_Function
27256>>>>>>>>>
27256>>>>>>>>>    Function ComIndex Returns Integer
27258>>>>>>>>>        Handle hDispatchDriver
27258>>>>>>>>>        Integer retVal
27258>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27259>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
27260>>>>>>>>>        Function_Return retVal
27261>>>>>>>>>    End_Function
27262>>>>>>>>>
27262>>>>>>>>>    Function ComType Returns XTPControlType
27264>>>>>>>>>        Handle hDispatchDriver
27264>>>>>>>>>        XTPControlType retVal
27264>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27265>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
27266>>>>>>>>>        Function_Return retVal
27267>>>>>>>>>    End_Function
27268>>>>>>>>>
27268>>>>>>>>>    Procedure ComDelete
27270>>>>>>>>>        Handle hDispatchDriver
27270>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27271>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
27272>>>>>>>>>    End_Procedure
27273>>>>>>>>>
27273>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
27275>>>>>>>>>        Handle hDispatchDriver
27275>>>>>>>>>        Variant retVal
27275>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27276>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
27277>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
27278>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
27279>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
27280>>>>>>>>>        Function_Return retVal
27281>>>>>>>>>    End_Function
27282>>>>>>>>>
27282>>>>>>>>>    Procedure ComSetFocus
27284>>>>>>>>>        Handle hDispatchDriver
27284>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27285>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
27286>>>>>>>>>    End_Procedure
27287>>>>>>>>>
27287>>>>>>>>>    Procedure ComExecute
27289>>>>>>>>>        Handle hDispatchDriver
27289>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27290>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
27291>>>>>>>>>    End_Procedure
27292>>>>>>>>>
27292>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
27294>>>>>>>>>        Handle hDispatchDriver
27294>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27295>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
27296>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
27297>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
27298>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
27299>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
27300>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
27301>>>>>>>>>    End_Procedure
27302>>>>>>>>>
27302>>>>>>>>>    Function ComRibbonGroup Returns Variant
27304>>>>>>>>>        Handle hDispatchDriver
27304>>>>>>>>>        Variant retVal
27304>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27305>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
27306>>>>>>>>>        Function_Return retVal
27307>>>>>>>>>    End_Function
27308>>>>>>>>>
27308>>>>>>>>>    Procedure ComReset
27310>>>>>>>>>        Handle hDispatchDriver
27310>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27311>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
27312>>>>>>>>>    End_Procedure
27313>>>>>>>>>
27313>>>>>>>>>    Function ComTop Returns Integer
27315>>>>>>>>>        Handle hDispatchDriver
27315>>>>>>>>>        Integer retVal
27315>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27316>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
27317>>>>>>>>>        Function_Return retVal
27318>>>>>>>>>    End_Function
27319>>>>>>>>>
27319>>>>>>>>>    Function ComLeft Returns Integer
27321>>>>>>>>>        Handle hDispatchDriver
27321>>>>>>>>>        Integer retVal
27321>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27322>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
27323>>>>>>>>>        Function_Return retVal
27324>>>>>>>>>    End_Function
27325>>>>>>>>>
27325>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
27327>>>>>>>>>        Handle hDispatchDriver
27327>>>>>>>>>        Variant retVal
27327>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27328>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27329>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
27330>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
27331>>>>>>>>>        Function_Return retVal
27332>>>>>>>>>    End_Function
27333>>>>>>>>>
27333>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
27335>>>>>>>>>        Handle hDispatchDriver
27335>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27336>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
27337>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
27338>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
27339>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
27340>>>>>>>>>    End_Procedure
27341>>>>>>>>>End_Class
27342>>>>>>>>>
27342>>>>>>>>>// CLSID: {C0DE2200-01E8-43E6-BC94-A31B89077DC4}
27342>>>>>>>>>Class cCJRibbonPaintManager is a cComAutomationObject
27343>>>>>>>>>
27343>>>>>>>>>    Function ComCaptionFont Returns Variant
27345>>>>>>>>>        Variant retVal
27345>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to retVal
27346>>>>>>>>>        Function_Return retVal
27347>>>>>>>>>    End_Function
27348>>>>>>>>>
27348>>>>>>>>>    Procedure Set ComCaptionFont Variant value
27350>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) -512 OLE_VT_DISPATCH to value
27351>>>>>>>>>    End_Procedure
27352>>>>>>>>>
27352>>>>>>>>>    Function ComHotTrackingGroups Returns Boolean
27354>>>>>>>>>        Boolean retVal
27354>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BOOL to retVal
27355>>>>>>>>>        Function_Return retVal
27356>>>>>>>>>    End_Function
27357>>>>>>>>>
27357>>>>>>>>>    Procedure Set ComHotTrackingGroups Boolean value
27359>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 100 OLE_VT_BOOL to value
27360>>>>>>>>>    End_Procedure
27361>>>>>>>>>
27361>>>>>>>>>    Function ComWindowCaptionFont Returns Variant
27363>>>>>>>>>        Variant retVal
27363>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_DISPATCH to retVal
27364>>>>>>>>>        Function_Return retVal
27365>>>>>>>>>    End_Function
27366>>>>>>>>>
27366>>>>>>>>>    Procedure Set ComWindowCaptionFont Variant value
27368>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_DISPATCH to value
27369>>>>>>>>>    End_Procedure
27370>>>>>>>>>End_Class
27371>>>>>>>>>
27371>>>>>>>>>// CLSID: {C0DE2200-F6FB-49A2-A8C7-C5BD794C3C3B}
27371>>>>>>>>>Class cCJMiniToolBar is a cComAutomationObject
27372>>>>>>>>>
27372>>>>>>>>>    Function ComTitle Returns String
27374>>>>>>>>>        String retVal
27374>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
27375>>>>>>>>>        Function_Return retVal
27376>>>>>>>>>    End_Function
27377>>>>>>>>>
27377>>>>>>>>>    Procedure Set ComTitle String value
27379>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
27380>>>>>>>>>    End_Procedure
27381>>>>>>>>>
27381>>>>>>>>>    Function ComVisible Returns Boolean
27383>>>>>>>>>        Boolean retVal
27383>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
27384>>>>>>>>>        Function_Return retVal
27385>>>>>>>>>    End_Function
27386>>>>>>>>>
27386>>>>>>>>>    Procedure Set ComVisible Boolean value
27388>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
27389>>>>>>>>>    End_Procedure
27390>>>>>>>>>
27390>>>>>>>>>    Function ComPosition Returns XTPBarPosition
27392>>>>>>>>>        XTPBarPosition retVal
27392>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to retVal
27393>>>>>>>>>        Function_Return retVal
27394>>>>>>>>>    End_Function
27395>>>>>>>>>
27395>>>>>>>>>    Procedure Set ComPosition XTPBarPosition value
27397>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_I4 to value
27398>>>>>>>>>    End_Procedure
27399>>>>>>>>>
27399>>>>>>>>>    Function ComBarID Returns Integer
27401>>>>>>>>>        Integer retVal
27401>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to retVal
27402>>>>>>>>>        Function_Return retVal
27403>>>>>>>>>    End_Function
27404>>>>>>>>>
27404>>>>>>>>>    Procedure Set ComBarID Integer value
27406>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_I4 to value
27407>>>>>>>>>    End_Procedure
27408>>>>>>>>>
27408>>>>>>>>>    Function ComContextMenuPresent Returns Boolean
27410>>>>>>>>>        Boolean retVal
27410>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to retVal
27411>>>>>>>>>        Function_Return retVal
27412>>>>>>>>>    End_Function
27413>>>>>>>>>
27413>>>>>>>>>    Procedure Set ComContextMenuPresent Boolean value
27415>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_BOOL to value
27416>>>>>>>>>    End_Procedure
27417>>>>>>>>>
27417>>>>>>>>>    Function ComWidth Returns Integer
27419>>>>>>>>>        Integer retVal
27419>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to retVal
27420>>>>>>>>>        Function_Return retVal
27421>>>>>>>>>    End_Function
27422>>>>>>>>>
27422>>>>>>>>>    Procedure Set ComWidth Integer value
27424>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 21 OLE_VT_I4 to value
27425>>>>>>>>>    End_Procedure
27426>>>>>>>>>
27426>>>>>>>>>    Function ComCloseable Returns Boolean
27428>>>>>>>>>        Boolean retVal
27428>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
27429>>>>>>>>>        Function_Return retVal
27430>>>>>>>>>    End_Function
27431>>>>>>>>>
27431>>>>>>>>>    Procedure Set ComCloseable Boolean value
27433>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
27434>>>>>>>>>    End_Procedure
27435>>>>>>>>>
27435>>>>>>>>>    Function ComEnableAnimation Returns Boolean
27437>>>>>>>>>        Boolean retVal
27437>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to retVal
27438>>>>>>>>>        Function_Return retVal
27439>>>>>>>>>    End_Function
27440>>>>>>>>>
27440>>>>>>>>>    Procedure Set ComEnableAnimation Boolean value
27442>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 37 OLE_VT_BOOL to value
27443>>>>>>>>>    End_Procedure
27444>>>>>>>>>
27444>>>>>>>>>    Function ComShowGripper Returns Boolean
27446>>>>>>>>>        Boolean retVal
27446>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to retVal
27447>>>>>>>>>        Function_Return retVal
27448>>>>>>>>>    End_Function
27449>>>>>>>>>
27449>>>>>>>>>    Procedure Set ComShowGripper Boolean value
27451>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 38 OLE_VT_BOOL to value
27452>>>>>>>>>    End_Procedure
27453>>>>>>>>>
27453>>>>>>>>>    Function ComDefaultButtonStyle Returns XTPButtonStyle
27455>>>>>>>>>        XTPButtonStyle retVal
27455>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to retVal
27456>>>>>>>>>        Function_Return retVal
27457>>>>>>>>>    End_Function
27458>>>>>>>>>
27458>>>>>>>>>    Procedure Set ComDefaultButtonStyle XTPButtonStyle value
27460>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 39 OLE_VT_I4 to value
27461>>>>>>>>>    End_Procedure
27462>>>>>>>>>
27462>>>>>>>>>    Function ComCustomizable Returns Boolean
27464>>>>>>>>>        Boolean retVal
27464>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to retVal
27465>>>>>>>>>        Function_Return retVal
27466>>>>>>>>>    End_Function
27467>>>>>>>>>
27467>>>>>>>>>    Procedure Set ComCustomizable Boolean value
27469>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_BOOL to value
27470>>>>>>>>>    End_Procedure
27471>>>>>>>>>
27471>>>>>>>>>    Function ComShowTextBelowIcons Returns Boolean
27473>>>>>>>>>        Boolean retVal
27473>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to retVal
27474>>>>>>>>>        Function_Return retVal
27475>>>>>>>>>    End_Function
27476>>>>>>>>>
27476>>>>>>>>>    Procedure Set ComShowTextBelowIcons Boolean value
27478>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BOOL to value
27479>>>>>>>>>    End_Procedure
27480>>>>>>>>>
27480>>>>>>>>>    Function ComCustomControlKeyboardInteraction Returns Boolean
27482>>>>>>>>>        Boolean retVal
27482>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 302 OLE_VT_BOOL to retVal
27483>>>>>>>>>        Function_Return retVal
27484>>>>>>>>>    End_Function
27485>>>>>>>>>
27485>>>>>>>>>    Procedure Set ComCustomControlKeyboardInteraction Boolean value
27487>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 302 OLE_VT_BOOL to value
27488>>>>>>>>>    End_Procedure
27489>>>>>>>>>
27489>>>>>>>>>    Function ComSelectedControl Returns Variant
27491>>>>>>>>>        Variant retVal
27491>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to retVal
27492>>>>>>>>>        Function_Return retVal
27493>>>>>>>>>    End_Function
27494>>>>>>>>>
27494>>>>>>>>>    Procedure Set ComSelectedControl Variant value
27496>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 34 OLE_VT_DISPATCH to value
27497>>>>>>>>>    End_Procedure
27498>>>>>>>>>
27498>>>>>>>>>    Function ComType Returns XTPBarType
27500>>>>>>>>>        Handle hDispatchDriver
27500>>>>>>>>>        XTPBarType retVal
27500>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27501>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
27502>>>>>>>>>        Function_Return retVal
27503>>>>>>>>>    End_Function
27504>>>>>>>>>
27504>>>>>>>>>    Procedure ComEnableDocking XTPToolBarFlags lldwFlags
27506>>>>>>>>>        Handle hDispatchDriver
27506>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27507>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27508>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldwFlags
27509>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
27510>>>>>>>>>    End_Procedure
27511>>>>>>>>>
27511>>>>>>>>>    Function ComBuiltIn Returns Boolean
27513>>>>>>>>>        Handle hDispatchDriver
27513>>>>>>>>>        Boolean retVal
27513>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27514>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_BOOL to retVal
27515>>>>>>>>>        Function_Return retVal
27516>>>>>>>>>    End_Function
27517>>>>>>>>>
27517>>>>>>>>>    Procedure ComDelete
27519>>>>>>>>>        Handle hDispatchDriver
27519>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27520>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 14 OLE_VT_VOID
27521>>>>>>>>>    End_Procedure
27522>>>>>>>>>
27522>>>>>>>>>    Procedure ComGetWindowRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
27524>>>>>>>>>        Handle hDispatchDriver
27524>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27525>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
27526>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
27527>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
27528>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
27529>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
27530>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
27531>>>>>>>>>    End_Procedure
27532>>>>>>>>>
27532>>>>>>>>>    Function ComHWnd Returns OLE_HANDLE
27534>>>>>>>>>        Handle hDispatchDriver
27534>>>>>>>>>        OLE_HANDLE retVal
27534>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27535>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -515 OLE_VT_I4 to retVal
27536>>>>>>>>>        Function_Return retVal
27537>>>>>>>>>    End_Function
27538>>>>>>>>>
27538>>>>>>>>>    Function ComCommandBars Returns Variant
27540>>>>>>>>>        Handle hDispatchDriver
27540>>>>>>>>>        Variant retVal
27540>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27541>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 45 OLE_VT_DISPATCH to retVal
27542>>>>>>>>>        Function_Return retVal
27543>>>>>>>>>    End_Function
27544>>>>>>>>>
27544>>>>>>>>>    Function ComControls Returns Variant
27546>>>>>>>>>        Handle hDispatchDriver
27546>>>>>>>>>        Variant retVal
27546>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27547>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
27548>>>>>>>>>        Function_Return retVal
27549>>>>>>>>>    End_Function
27550>>>>>>>>>
27550>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
27552>>>>>>>>>        Handle hDispatchDriver
27552>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27553>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
27554>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
27555>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
27556>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
27557>>>>>>>>>    End_Procedure
27558>>>>>>>>>
27558>>>>>>>>>    Function ComGetIconWidth Returns Integer
27560>>>>>>>>>        Handle hDispatchDriver
27560>>>>>>>>>        Integer retVal
27560>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27561>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 43 OLE_VT_I4 to retVal
27562>>>>>>>>>        Function_Return retVal
27563>>>>>>>>>    End_Function
27564>>>>>>>>>
27564>>>>>>>>>    Function ComGetIconHeight Returns Integer
27566>>>>>>>>>        Handle hDispatchDriver
27566>>>>>>>>>        Integer retVal
27566>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27567>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 44 OLE_VT_I4 to retVal
27568>>>>>>>>>        Function_Return retVal
27569>>>>>>>>>    End_Function
27570>>>>>>>>>
27570>>>>>>>>>    Function ComFindControl Variant llType Variant llId Variant llVisible Variant llRecursive Returns Variant
27572>>>>>>>>>        Handle hDispatchDriver
27572>>>>>>>>>        Variant retVal
27572>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27573>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
27574>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llType
27575>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llId
27576>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llVisible
27577>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
27578>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
27579>>>>>>>>>        Function_Return retVal
27580>>>>>>>>>    End_Function
27581>>>>>>>>>
27581>>>>>>>>>    Procedure ComSetFlags XTPMenuBarFlags llAdd XTPMenuBarFlags llRemove
27583>>>>>>>>>        Handle hDispatchDriver
27583>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27584>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
27585>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llAdd
27586>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRemove
27587>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 18 OLE_VT_VOID
27588>>>>>>>>>    End_Procedure
27589>>>>>>>>>
27589>>>>>>>>>    Procedure ComRedrawBar
27591>>>>>>>>>        Handle hDispatchDriver
27591>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27592>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 31 OLE_VT_VOID
27593>>>>>>>>>    End_Procedure
27594>>>>>>>>>
27594>>>>>>>>>    Procedure ComRecalcLayout
27596>>>>>>>>>        Handle hDispatchDriver
27596>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27597>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 32 OLE_VT_VOID
27598>>>>>>>>>    End_Procedure
27599>>>>>>>>>
27599>>>>>>>>>    Procedure ComReset
27601>>>>>>>>>        Handle hDispatchDriver
27601>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27602>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 35 OLE_VT_VOID
27603>>>>>>>>>    End_Procedure
27604>>>>>>>>>
27604>>>>>>>>>    Function ComPopupContextMenu Variant llPopupBar Variant llFlags Variant llx Variant lly Returns Integer
27606>>>>>>>>>        Handle hDispatchDriver
27606>>>>>>>>>        Integer retVal
27606>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27607>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
27608>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llPopupBar
27609>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFlags
27610>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llx
27611>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lly
27612>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_I4 to retVal
27613>>>>>>>>>        Function_Return retVal
27614>>>>>>>>>    End_Function
27615>>>>>>>>>
27615>>>>>>>>>    Function ComPopupMiniToolBar Variant llFlags Variant llx Variant lly Returns Integer
27617>>>>>>>>>        Handle hDispatchDriver
27617>>>>>>>>>        Integer retVal
27617>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27618>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
27619>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFlags
27620>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llx
27621>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lly
27622>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_I4 to retVal
27623>>>>>>>>>        Function_Return retVal
27624>>>>>>>>>    End_Function
27625>>>>>>>>>End_Class
27626>>>>>>>>>
27626>>>>>>>>>// CLSID: {C0DE2200-CBD0-4AF0-9D33-EB56AB0648D8}
27626>>>>>>>>>Class cCJRecentFileList is a cComAutomationObject
27627>>>>>>>>>
27627>>>>>>>>>    Function ComMaxSize Returns Integer
27629>>>>>>>>>        Integer retVal
27629>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to retVal
27630>>>>>>>>>        Function_Return retVal
27631>>>>>>>>>    End_Function
27632>>>>>>>>>
27632>>>>>>>>>    Procedure Set ComMaxSize Integer value
27634>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_I4 to value
27635>>>>>>>>>    End_Procedure
27636>>>>>>>>>
27636>>>>>>>>>    Function ComPinable Returns Boolean
27638>>>>>>>>>        Boolean retVal
27638>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
27639>>>>>>>>>        Function_Return retVal
27640>>>>>>>>>    End_Function
27641>>>>>>>>>
27641>>>>>>>>>    Procedure Set ComPinable Boolean value
27643>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
27644>>>>>>>>>    End_Procedure
27645>>>>>>>>>
27645>>>>>>>>>    Function Com_NewEnum Returns Variant
27647>>>>>>>>>        Handle hDispatchDriver
27647>>>>>>>>>        Variant retVal
27647>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27648>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
27649>>>>>>>>>        Function_Return retVal
27650>>>>>>>>>    End_Function
27651>>>>>>>>>
27651>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
27653>>>>>>>>>        Handle hDispatchDriver
27653>>>>>>>>>        Variant retVal
27653>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27654>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27655>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
27656>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
27657>>>>>>>>>        Function_Return retVal
27658>>>>>>>>>    End_Function
27659>>>>>>>>>
27659>>>>>>>>>    Function ComAdd String llPathName Returns Variant
27661>>>>>>>>>        Handle hDispatchDriver
27661>>>>>>>>>        Variant retVal
27661>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27662>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27663>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPathName
27664>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
27665>>>>>>>>>        Function_Return retVal
27666>>>>>>>>>    End_Function
27667>>>>>>>>>
27667>>>>>>>>>    Function ComCount Returns Integer
27669>>>>>>>>>        Handle hDispatchDriver
27669>>>>>>>>>        Integer retVal
27669>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27670>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
27671>>>>>>>>>        Function_Return retVal
27672>>>>>>>>>    End_Function
27673>>>>>>>>>
27673>>>>>>>>>    Procedure ComRemove Integer llIndex
27675>>>>>>>>>        Handle hDispatchDriver
27675>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27676>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
27677>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
27678>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
27679>>>>>>>>>    End_Procedure
27680>>>>>>>>>End_Class
27681>>>>>>>>>
27681>>>>>>>>>// CLSID: {C0DE2200-214E-44E4-854E-A40882ECD0FF}
27681>>>>>>>>>Class cCJRecentFileListItem is a cComAutomationObject
27682>>>>>>>>>
27682>>>>>>>>>    Function ComCaption Returns String
27684>>>>>>>>>        String retVal
27684>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
27685>>>>>>>>>        Function_Return retVal
27686>>>>>>>>>    End_Function
27687>>>>>>>>>
27687>>>>>>>>>    Procedure Set ComCaption String value
27689>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
27690>>>>>>>>>    End_Procedure
27691>>>>>>>>>
27691>>>>>>>>>    Function ComTag Returns String
27693>>>>>>>>>        String retVal
27693>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
27694>>>>>>>>>        Function_Return retVal
27695>>>>>>>>>    End_Function
27696>>>>>>>>>
27696>>>>>>>>>    Procedure Set ComTag String value
27698>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
27699>>>>>>>>>    End_Procedure
27700>>>>>>>>>
27700>>>>>>>>>    Function ComIconId Returns Integer
27702>>>>>>>>>        Integer retVal
27702>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to retVal
27703>>>>>>>>>        Function_Return retVal
27704>>>>>>>>>    End_Function
27705>>>>>>>>>
27705>>>>>>>>>    Procedure Set ComIconId Integer value
27707>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_I4 to value
27708>>>>>>>>>    End_Procedure
27709>>>>>>>>>
27709>>>>>>>>>    Function ComPinned Returns Boolean
27711>>>>>>>>>        Boolean retVal
27711>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to retVal
27712>>>>>>>>>        Function_Return retVal
27713>>>>>>>>>    End_Function
27714>>>>>>>>>
27714>>>>>>>>>    Procedure Set ComPinned Boolean value
27716>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BOOL to value
27717>>>>>>>>>    End_Procedure
27718>>>>>>>>>
27718>>>>>>>>>    Function ComPathName Returns String
27720>>>>>>>>>        Handle hDispatchDriver
27720>>>>>>>>>        String retVal
27720>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27721>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_BSTR to retVal
27722>>>>>>>>>        Function_Return retVal
27723>>>>>>>>>    End_Function
27724>>>>>>>>>End_Class
27725>>>>>>>>>
27725>>>>>>>>>// CLSID: {C0DE2200-DE30-460B-B55A-40D9D5229C79}
27725>>>>>>>>>Class cCJCommandBarSlider is a cComAutomationObject
27726>>>>>>>>>
27726>>>>>>>>>    Function ComChecked Returns Boolean
27728>>>>>>>>>        Boolean retVal
27728>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
27729>>>>>>>>>        Function_Return retVal
27730>>>>>>>>>    End_Function
27731>>>>>>>>>
27731>>>>>>>>>    Procedure Set ComChecked Boolean value
27733>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
27734>>>>>>>>>    End_Procedure
27735>>>>>>>>>
27735>>>>>>>>>    Function ComBeginGroup Returns Boolean
27737>>>>>>>>>        Boolean retVal
27737>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
27738>>>>>>>>>        Function_Return retVal
27739>>>>>>>>>    End_Function
27740>>>>>>>>>
27740>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
27742>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
27743>>>>>>>>>    End_Procedure
27744>>>>>>>>>
27744>>>>>>>>>    Function ComCaption Returns String
27746>>>>>>>>>        String retVal
27746>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
27747>>>>>>>>>        Function_Return retVal
27748>>>>>>>>>    End_Function
27749>>>>>>>>>
27749>>>>>>>>>    Procedure Set ComCaption String value
27751>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
27752>>>>>>>>>    End_Procedure
27753>>>>>>>>>
27753>>>>>>>>>    Function ComDescriptionText Returns String
27755>>>>>>>>>        String retVal
27755>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
27756>>>>>>>>>        Function_Return retVal
27757>>>>>>>>>    End_Function
27758>>>>>>>>>
27758>>>>>>>>>    Procedure Set ComDescriptionText String value
27760>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
27761>>>>>>>>>    End_Procedure
27762>>>>>>>>>
27762>>>>>>>>>    Function ComId Returns Integer
27764>>>>>>>>>        Integer retVal
27764>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
27765>>>>>>>>>        Function_Return retVal
27766>>>>>>>>>    End_Function
27767>>>>>>>>>
27767>>>>>>>>>    Procedure Set ComId Integer value
27769>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
27770>>>>>>>>>    End_Procedure
27771>>>>>>>>>
27771>>>>>>>>>    Function ComParameter Returns String
27773>>>>>>>>>        String retVal
27773>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
27774>>>>>>>>>        Function_Return retVal
27775>>>>>>>>>    End_Function
27776>>>>>>>>>
27776>>>>>>>>>    Procedure Set ComParameter String value
27778>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
27779>>>>>>>>>    End_Procedure
27780>>>>>>>>>
27780>>>>>>>>>    Function ComShortcutText Returns String
27782>>>>>>>>>        String retVal
27782>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
27783>>>>>>>>>        Function_Return retVal
27784>>>>>>>>>    End_Function
27785>>>>>>>>>
27785>>>>>>>>>    Procedure Set ComShortcutText String value
27787>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
27788>>>>>>>>>    End_Procedure
27789>>>>>>>>>
27789>>>>>>>>>    Function ComCustomShortcutText Returns String
27791>>>>>>>>>        String retVal
27791>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
27792>>>>>>>>>        Function_Return retVal
27793>>>>>>>>>    End_Function
27794>>>>>>>>>
27794>>>>>>>>>    Procedure Set ComCustomShortcutText String value
27796>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
27797>>>>>>>>>    End_Procedure
27798>>>>>>>>>
27798>>>>>>>>>    Function ComTooltipText Returns String
27800>>>>>>>>>        String retVal
27800>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
27801>>>>>>>>>        Function_Return retVal
27802>>>>>>>>>    End_Function
27803>>>>>>>>>
27803>>>>>>>>>    Procedure Set ComTooltipText String value
27805>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
27806>>>>>>>>>    End_Procedure
27807>>>>>>>>>
27807>>>>>>>>>    Function ComVisible Returns Boolean
27809>>>>>>>>>        Boolean retVal
27809>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
27810>>>>>>>>>        Function_Return retVal
27811>>>>>>>>>    End_Function
27812>>>>>>>>>
27812>>>>>>>>>    Procedure Set ComVisible Boolean value
27814>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
27815>>>>>>>>>    End_Procedure
27816>>>>>>>>>
27816>>>>>>>>>    Function ComEnabled Returns Boolean
27818>>>>>>>>>        Boolean retVal
27818>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
27819>>>>>>>>>        Function_Return retVal
27820>>>>>>>>>    End_Function
27821>>>>>>>>>
27821>>>>>>>>>    Procedure Set ComEnabled Boolean value
27823>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
27824>>>>>>>>>    End_Procedure
27825>>>>>>>>>
27825>>>>>>>>>    Function ComIconId Returns Integer
27827>>>>>>>>>        Integer retVal
27827>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
27828>>>>>>>>>        Function_Return retVal
27829>>>>>>>>>    End_Function
27830>>>>>>>>>
27830>>>>>>>>>    Procedure Set ComIconId Integer value
27832>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
27833>>>>>>>>>    End_Procedure
27834>>>>>>>>>
27834>>>>>>>>>    Function ComDefaultItem Returns Boolean
27836>>>>>>>>>        Boolean retVal
27836>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
27837>>>>>>>>>        Function_Return retVal
27838>>>>>>>>>    End_Function
27839>>>>>>>>>
27839>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
27841>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
27842>>>>>>>>>    End_Procedure
27843>>>>>>>>>
27843>>>>>>>>>    Function ComFlags Returns XTPControlFlags
27845>>>>>>>>>        XTPControlFlags retVal
27845>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
27846>>>>>>>>>        Function_Return retVal
27847>>>>>>>>>    End_Function
27848>>>>>>>>>
27848>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
27850>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
27851>>>>>>>>>    End_Procedure
27852>>>>>>>>>
27852>>>>>>>>>    Function ComCategory Returns String
27854>>>>>>>>>        String retVal
27854>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
27855>>>>>>>>>        Function_Return retVal
27856>>>>>>>>>    End_Function
27857>>>>>>>>>
27857>>>>>>>>>    Procedure Set ComCategory String value
27859>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
27860>>>>>>>>>    End_Procedure
27861>>>>>>>>>
27861>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
27863>>>>>>>>>        XTPControlHideFlags retVal
27863>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
27864>>>>>>>>>        Function_Return retVal
27865>>>>>>>>>    End_Function
27866>>>>>>>>>
27866>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
27868>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
27869>>>>>>>>>    End_Procedure
27870>>>>>>>>>
27870>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
27872>>>>>>>>>        Boolean retVal
27872>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
27873>>>>>>>>>        Function_Return retVal
27874>>>>>>>>>    End_Function
27875>>>>>>>>>
27875>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
27877>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
27878>>>>>>>>>    End_Procedure
27879>>>>>>>>>
27879>>>>>>>>>    Function ComAction Returns Variant
27881>>>>>>>>>        Variant retVal
27881>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
27882>>>>>>>>>        Function_Return retVal
27883>>>>>>>>>    End_Function
27884>>>>>>>>>
27884>>>>>>>>>    Procedure Set ComAction Variant value
27886>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
27887>>>>>>>>>    End_Procedure
27888>>>>>>>>>
27888>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
27890>>>>>>>>>        Integer retVal
27890>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
27891>>>>>>>>>        Function_Return retVal
27892>>>>>>>>>    End_Function
27893>>>>>>>>>
27893>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
27895>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
27896>>>>>>>>>    End_Procedure
27897>>>>>>>>>
27897>>>>>>>>>    Function ComWidth Returns Integer
27899>>>>>>>>>        Integer retVal
27899>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
27900>>>>>>>>>        Function_Return retVal
27901>>>>>>>>>    End_Function
27902>>>>>>>>>
27902>>>>>>>>>    Procedure Set ComWidth Integer value
27904>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
27905>>>>>>>>>    End_Procedure
27906>>>>>>>>>
27906>>>>>>>>>    Function ComHeight Returns Integer
27908>>>>>>>>>        Integer retVal
27908>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
27909>>>>>>>>>        Function_Return retVal
27910>>>>>>>>>    End_Function
27911>>>>>>>>>
27911>>>>>>>>>    Procedure Set ComHeight Integer value
27913>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
27914>>>>>>>>>    End_Procedure
27915>>>>>>>>>
27915>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
27917>>>>>>>>>        XTPButtonStyle retVal
27917>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
27918>>>>>>>>>        Function_Return retVal
27919>>>>>>>>>    End_Function
27920>>>>>>>>>
27920>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
27922>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
27923>>>>>>>>>    End_Procedure
27924>>>>>>>>>
27924>>>>>>>>>    Function ComKeyboardTip Returns String
27926>>>>>>>>>        String retVal
27926>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
27927>>>>>>>>>        Function_Return retVal
27928>>>>>>>>>    End_Function
27929>>>>>>>>>
27929>>>>>>>>>    Procedure Set ComKeyboardTip String value
27931>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
27932>>>>>>>>>    End_Procedure
27933>>>>>>>>>
27933>>>>>>>>>    Function ComPos Returns Integer
27935>>>>>>>>>        Integer retVal
27935>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
27936>>>>>>>>>        Function_Return retVal
27937>>>>>>>>>    End_Function
27938>>>>>>>>>
27938>>>>>>>>>    Procedure Set ComPos Integer value
27940>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
27941>>>>>>>>>    End_Procedure
27942>>>>>>>>>
27942>>>>>>>>>    Function ComMin Returns Integer
27944>>>>>>>>>        Integer retVal
27944>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to retVal
27945>>>>>>>>>        Function_Return retVal
27946>>>>>>>>>    End_Function
27947>>>>>>>>>
27947>>>>>>>>>    Procedure Set ComMin Integer value
27949>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to value
27950>>>>>>>>>    End_Procedure
27951>>>>>>>>>
27951>>>>>>>>>    Function ComMax Returns Integer
27953>>>>>>>>>        Integer retVal
27953>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to retVal
27954>>>>>>>>>        Function_Return retVal
27955>>>>>>>>>    End_Function
27956>>>>>>>>>
27956>>>>>>>>>    Procedure Set ComMax Integer value
27958>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to value
27959>>>>>>>>>    End_Procedure
27960>>>>>>>>>
27960>>>>>>>>>    Function ComControls Returns Variant
27962>>>>>>>>>        Handle hDispatchDriver
27962>>>>>>>>>        Variant retVal
27962>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27963>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
27964>>>>>>>>>        Function_Return retVal
27965>>>>>>>>>    End_Function
27966>>>>>>>>>
27966>>>>>>>>>    Function ComParent Returns Variant
27968>>>>>>>>>        Handle hDispatchDriver
27968>>>>>>>>>        Variant retVal
27968>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27969>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
27970>>>>>>>>>        Function_Return retVal
27971>>>>>>>>>    End_Function
27972>>>>>>>>>
27972>>>>>>>>>    Function ComIndex Returns Integer
27974>>>>>>>>>        Handle hDispatchDriver
27974>>>>>>>>>        Integer retVal
27974>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27975>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
27976>>>>>>>>>        Function_Return retVal
27977>>>>>>>>>    End_Function
27978>>>>>>>>>
27978>>>>>>>>>    Function ComType Returns XTPControlType
27980>>>>>>>>>        Handle hDispatchDriver
27980>>>>>>>>>        XTPControlType retVal
27980>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27981>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
27982>>>>>>>>>        Function_Return retVal
27983>>>>>>>>>    End_Function
27984>>>>>>>>>
27984>>>>>>>>>    Procedure ComDelete
27986>>>>>>>>>        Handle hDispatchDriver
27986>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27987>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
27988>>>>>>>>>    End_Procedure
27989>>>>>>>>>
27989>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
27991>>>>>>>>>        Handle hDispatchDriver
27991>>>>>>>>>        Variant retVal
27991>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
27992>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
27993>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
27994>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
27995>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
27996>>>>>>>>>        Function_Return retVal
27997>>>>>>>>>    End_Function
27998>>>>>>>>>
27998>>>>>>>>>    Procedure ComSetFocus
28000>>>>>>>>>        Handle hDispatchDriver
28000>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28001>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
28002>>>>>>>>>    End_Procedure
28003>>>>>>>>>
28003>>>>>>>>>    Procedure ComExecute
28005>>>>>>>>>        Handle hDispatchDriver
28005>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28006>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
28007>>>>>>>>>    End_Procedure
28008>>>>>>>>>
28008>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
28010>>>>>>>>>        Handle hDispatchDriver
28010>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28011>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
28012>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
28013>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
28014>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
28015>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
28016>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
28017>>>>>>>>>    End_Procedure
28018>>>>>>>>>
28018>>>>>>>>>    Function ComRibbonGroup Returns Variant
28020>>>>>>>>>        Handle hDispatchDriver
28020>>>>>>>>>        Variant retVal
28020>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28021>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
28022>>>>>>>>>        Function_Return retVal
28023>>>>>>>>>    End_Function
28024>>>>>>>>>
28024>>>>>>>>>    Procedure ComReset
28026>>>>>>>>>        Handle hDispatchDriver
28026>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28027>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
28028>>>>>>>>>    End_Procedure
28029>>>>>>>>>
28029>>>>>>>>>    Function ComTop Returns Integer
28031>>>>>>>>>        Handle hDispatchDriver
28031>>>>>>>>>        Integer retVal
28031>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28032>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
28033>>>>>>>>>        Function_Return retVal
28034>>>>>>>>>    End_Function
28035>>>>>>>>>
28035>>>>>>>>>    Function ComLeft Returns Integer
28037>>>>>>>>>        Handle hDispatchDriver
28037>>>>>>>>>        Integer retVal
28037>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28038>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
28039>>>>>>>>>        Function_Return retVal
28040>>>>>>>>>    End_Function
28041>>>>>>>>>
28041>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
28043>>>>>>>>>        Handle hDispatchDriver
28043>>>>>>>>>        Variant retVal
28043>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28044>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
28045>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
28046>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
28047>>>>>>>>>        Function_Return retVal
28048>>>>>>>>>    End_Function
28049>>>>>>>>>
28049>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
28051>>>>>>>>>        Handle hDispatchDriver
28051>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28052>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28053>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
28054>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
28055>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
28056>>>>>>>>>    End_Procedure
28057>>>>>>>>>End_Class
28058>>>>>>>>>
28058>>>>>>>>>// CLSID: {C0DE2200-138E-4B16-8812-997A65E84AE6}
28058>>>>>>>>>Class cCJCommandBarProgress is a cComAutomationObject
28059>>>>>>>>>
28059>>>>>>>>>    Function ComChecked Returns Boolean
28061>>>>>>>>>        Boolean retVal
28061>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
28062>>>>>>>>>        Function_Return retVal
28063>>>>>>>>>    End_Function
28064>>>>>>>>>
28064>>>>>>>>>    Procedure Set ComChecked Boolean value
28066>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
28067>>>>>>>>>    End_Procedure
28068>>>>>>>>>
28068>>>>>>>>>    Function ComBeginGroup Returns Boolean
28070>>>>>>>>>        Boolean retVal
28070>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
28071>>>>>>>>>        Function_Return retVal
28072>>>>>>>>>    End_Function
28073>>>>>>>>>
28073>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
28075>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
28076>>>>>>>>>    End_Procedure
28077>>>>>>>>>
28077>>>>>>>>>    Function ComCaption Returns String
28079>>>>>>>>>        String retVal
28079>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
28080>>>>>>>>>        Function_Return retVal
28081>>>>>>>>>    End_Function
28082>>>>>>>>>
28082>>>>>>>>>    Procedure Set ComCaption String value
28084>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
28085>>>>>>>>>    End_Procedure
28086>>>>>>>>>
28086>>>>>>>>>    Function ComDescriptionText Returns String
28088>>>>>>>>>        String retVal
28088>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
28089>>>>>>>>>        Function_Return retVal
28090>>>>>>>>>    End_Function
28091>>>>>>>>>
28091>>>>>>>>>    Procedure Set ComDescriptionText String value
28093>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
28094>>>>>>>>>    End_Procedure
28095>>>>>>>>>
28095>>>>>>>>>    Function ComId Returns Integer
28097>>>>>>>>>        Integer retVal
28097>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
28098>>>>>>>>>        Function_Return retVal
28099>>>>>>>>>    End_Function
28100>>>>>>>>>
28100>>>>>>>>>    Procedure Set ComId Integer value
28102>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
28103>>>>>>>>>    End_Procedure
28104>>>>>>>>>
28104>>>>>>>>>    Function ComParameter Returns String
28106>>>>>>>>>        String retVal
28106>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
28107>>>>>>>>>        Function_Return retVal
28108>>>>>>>>>    End_Function
28109>>>>>>>>>
28109>>>>>>>>>    Procedure Set ComParameter String value
28111>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
28112>>>>>>>>>    End_Procedure
28113>>>>>>>>>
28113>>>>>>>>>    Function ComShortcutText Returns String
28115>>>>>>>>>        String retVal
28115>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
28116>>>>>>>>>        Function_Return retVal
28117>>>>>>>>>    End_Function
28118>>>>>>>>>
28118>>>>>>>>>    Procedure Set ComShortcutText String value
28120>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
28121>>>>>>>>>    End_Procedure
28122>>>>>>>>>
28122>>>>>>>>>    Function ComCustomShortcutText Returns String
28124>>>>>>>>>        String retVal
28124>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
28125>>>>>>>>>        Function_Return retVal
28126>>>>>>>>>    End_Function
28127>>>>>>>>>
28127>>>>>>>>>    Procedure Set ComCustomShortcutText String value
28129>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
28130>>>>>>>>>    End_Procedure
28131>>>>>>>>>
28131>>>>>>>>>    Function ComTooltipText Returns String
28133>>>>>>>>>        String retVal
28133>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
28134>>>>>>>>>        Function_Return retVal
28135>>>>>>>>>    End_Function
28136>>>>>>>>>
28136>>>>>>>>>    Procedure Set ComTooltipText String value
28138>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
28139>>>>>>>>>    End_Procedure
28140>>>>>>>>>
28140>>>>>>>>>    Function ComVisible Returns Boolean
28142>>>>>>>>>        Boolean retVal
28142>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
28143>>>>>>>>>        Function_Return retVal
28144>>>>>>>>>    End_Function
28145>>>>>>>>>
28145>>>>>>>>>    Procedure Set ComVisible Boolean value
28147>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
28148>>>>>>>>>    End_Procedure
28149>>>>>>>>>
28149>>>>>>>>>    Function ComEnabled Returns Boolean
28151>>>>>>>>>        Boolean retVal
28151>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
28152>>>>>>>>>        Function_Return retVal
28153>>>>>>>>>    End_Function
28154>>>>>>>>>
28154>>>>>>>>>    Procedure Set ComEnabled Boolean value
28156>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
28157>>>>>>>>>    End_Procedure
28158>>>>>>>>>
28158>>>>>>>>>    Function ComIconId Returns Integer
28160>>>>>>>>>        Integer retVal
28160>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
28161>>>>>>>>>        Function_Return retVal
28162>>>>>>>>>    End_Function
28163>>>>>>>>>
28163>>>>>>>>>    Procedure Set ComIconId Integer value
28165>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
28166>>>>>>>>>    End_Procedure
28167>>>>>>>>>
28167>>>>>>>>>    Function ComDefaultItem Returns Boolean
28169>>>>>>>>>        Boolean retVal
28169>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
28170>>>>>>>>>        Function_Return retVal
28171>>>>>>>>>    End_Function
28172>>>>>>>>>
28172>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
28174>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
28175>>>>>>>>>    End_Procedure
28176>>>>>>>>>
28176>>>>>>>>>    Function ComFlags Returns XTPControlFlags
28178>>>>>>>>>        XTPControlFlags retVal
28178>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
28179>>>>>>>>>        Function_Return retVal
28180>>>>>>>>>    End_Function
28181>>>>>>>>>
28181>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
28183>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
28184>>>>>>>>>    End_Procedure
28185>>>>>>>>>
28185>>>>>>>>>    Function ComCategory Returns String
28187>>>>>>>>>        String retVal
28187>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
28188>>>>>>>>>        Function_Return retVal
28189>>>>>>>>>    End_Function
28190>>>>>>>>>
28190>>>>>>>>>    Procedure Set ComCategory String value
28192>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
28193>>>>>>>>>    End_Procedure
28194>>>>>>>>>
28194>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
28196>>>>>>>>>        XTPControlHideFlags retVal
28196>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
28197>>>>>>>>>        Function_Return retVal
28198>>>>>>>>>    End_Function
28199>>>>>>>>>
28199>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
28201>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
28202>>>>>>>>>    End_Procedure
28203>>>>>>>>>
28203>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
28205>>>>>>>>>        Boolean retVal
28205>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
28206>>>>>>>>>        Function_Return retVal
28207>>>>>>>>>    End_Function
28208>>>>>>>>>
28208>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
28210>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
28211>>>>>>>>>    End_Procedure
28212>>>>>>>>>
28212>>>>>>>>>    Function ComAction Returns Variant
28214>>>>>>>>>        Variant retVal
28214>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
28215>>>>>>>>>        Function_Return retVal
28216>>>>>>>>>    End_Function
28217>>>>>>>>>
28217>>>>>>>>>    Procedure Set ComAction Variant value
28219>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
28220>>>>>>>>>    End_Procedure
28221>>>>>>>>>
28221>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
28223>>>>>>>>>        Integer retVal
28223>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
28224>>>>>>>>>        Function_Return retVal
28225>>>>>>>>>    End_Function
28226>>>>>>>>>
28226>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
28228>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
28229>>>>>>>>>    End_Procedure
28230>>>>>>>>>
28230>>>>>>>>>    Function ComWidth Returns Integer
28232>>>>>>>>>        Integer retVal
28232>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
28233>>>>>>>>>        Function_Return retVal
28234>>>>>>>>>    End_Function
28235>>>>>>>>>
28235>>>>>>>>>    Procedure Set ComWidth Integer value
28237>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
28238>>>>>>>>>    End_Procedure
28239>>>>>>>>>
28239>>>>>>>>>    Function ComHeight Returns Integer
28241>>>>>>>>>        Integer retVal
28241>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
28242>>>>>>>>>        Function_Return retVal
28243>>>>>>>>>    End_Function
28244>>>>>>>>>
28244>>>>>>>>>    Procedure Set ComHeight Integer value
28246>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
28247>>>>>>>>>    End_Procedure
28248>>>>>>>>>
28248>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
28250>>>>>>>>>        XTPButtonStyle retVal
28250>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
28251>>>>>>>>>        Function_Return retVal
28252>>>>>>>>>    End_Function
28253>>>>>>>>>
28253>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
28255>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
28256>>>>>>>>>    End_Procedure
28257>>>>>>>>>
28257>>>>>>>>>    Function ComKeyboardTip Returns String
28259>>>>>>>>>        String retVal
28259>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
28260>>>>>>>>>        Function_Return retVal
28261>>>>>>>>>    End_Function
28262>>>>>>>>>
28262>>>>>>>>>    Procedure Set ComKeyboardTip String value
28264>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
28265>>>>>>>>>    End_Procedure
28266>>>>>>>>>
28266>>>>>>>>>    Function ComPos Returns Integer
28268>>>>>>>>>        Integer retVal
28268>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
28269>>>>>>>>>        Function_Return retVal
28270>>>>>>>>>    End_Function
28271>>>>>>>>>
28271>>>>>>>>>    Procedure Set ComPos Integer value
28273>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
28274>>>>>>>>>    End_Procedure
28275>>>>>>>>>
28275>>>>>>>>>    Function ComMin Returns Integer
28277>>>>>>>>>        Integer retVal
28277>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to retVal
28278>>>>>>>>>        Function_Return retVal
28279>>>>>>>>>    End_Function
28280>>>>>>>>>
28280>>>>>>>>>    Procedure Set ComMin Integer value
28282>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to value
28283>>>>>>>>>    End_Procedure
28284>>>>>>>>>
28284>>>>>>>>>    Function ComMax Returns Integer
28286>>>>>>>>>        Integer retVal
28286>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to retVal
28287>>>>>>>>>        Function_Return retVal
28288>>>>>>>>>    End_Function
28289>>>>>>>>>
28289>>>>>>>>>    Procedure Set ComMax Integer value
28291>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to value
28292>>>>>>>>>    End_Procedure
28293>>>>>>>>>
28293>>>>>>>>>    Function ComControls Returns Variant
28295>>>>>>>>>        Handle hDispatchDriver
28295>>>>>>>>>        Variant retVal
28295>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28296>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
28297>>>>>>>>>        Function_Return retVal
28298>>>>>>>>>    End_Function
28299>>>>>>>>>
28299>>>>>>>>>    Function ComParent Returns Variant
28301>>>>>>>>>        Handle hDispatchDriver
28301>>>>>>>>>        Variant retVal
28301>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28302>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
28303>>>>>>>>>        Function_Return retVal
28304>>>>>>>>>    End_Function
28305>>>>>>>>>
28305>>>>>>>>>    Function ComIndex Returns Integer
28307>>>>>>>>>        Handle hDispatchDriver
28307>>>>>>>>>        Integer retVal
28307>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28308>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
28309>>>>>>>>>        Function_Return retVal
28310>>>>>>>>>    End_Function
28311>>>>>>>>>
28311>>>>>>>>>    Function ComType Returns XTPControlType
28313>>>>>>>>>        Handle hDispatchDriver
28313>>>>>>>>>        XTPControlType retVal
28313>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28314>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
28315>>>>>>>>>        Function_Return retVal
28316>>>>>>>>>    End_Function
28317>>>>>>>>>
28317>>>>>>>>>    Procedure ComDelete
28319>>>>>>>>>        Handle hDispatchDriver
28319>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28320>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
28321>>>>>>>>>    End_Procedure
28322>>>>>>>>>
28322>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
28324>>>>>>>>>        Handle hDispatchDriver
28324>>>>>>>>>        Variant retVal
28324>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28325>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28326>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
28327>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
28328>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
28329>>>>>>>>>        Function_Return retVal
28330>>>>>>>>>    End_Function
28331>>>>>>>>>
28331>>>>>>>>>    Procedure ComSetFocus
28333>>>>>>>>>        Handle hDispatchDriver
28333>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28334>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
28335>>>>>>>>>    End_Procedure
28336>>>>>>>>>
28336>>>>>>>>>    Procedure ComExecute
28338>>>>>>>>>        Handle hDispatchDriver
28338>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28339>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
28340>>>>>>>>>    End_Procedure
28341>>>>>>>>>
28341>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
28343>>>>>>>>>        Handle hDispatchDriver
28343>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28344>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
28345>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
28346>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
28347>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
28348>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
28349>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
28350>>>>>>>>>    End_Procedure
28351>>>>>>>>>
28351>>>>>>>>>    Function ComRibbonGroup Returns Variant
28353>>>>>>>>>        Handle hDispatchDriver
28353>>>>>>>>>        Variant retVal
28353>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28354>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
28355>>>>>>>>>        Function_Return retVal
28356>>>>>>>>>    End_Function
28357>>>>>>>>>
28357>>>>>>>>>    Procedure ComReset
28359>>>>>>>>>        Handle hDispatchDriver
28359>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28360>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
28361>>>>>>>>>    End_Procedure
28362>>>>>>>>>
28362>>>>>>>>>    Function ComTop Returns Integer
28364>>>>>>>>>        Handle hDispatchDriver
28364>>>>>>>>>        Integer retVal
28364>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28365>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
28366>>>>>>>>>        Function_Return retVal
28367>>>>>>>>>    End_Function
28368>>>>>>>>>
28368>>>>>>>>>    Function ComLeft Returns Integer
28370>>>>>>>>>        Handle hDispatchDriver
28370>>>>>>>>>        Integer retVal
28370>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28371>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
28372>>>>>>>>>        Function_Return retVal
28373>>>>>>>>>    End_Function
28374>>>>>>>>>
28374>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
28376>>>>>>>>>        Handle hDispatchDriver
28376>>>>>>>>>        Variant retVal
28376>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28377>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
28378>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
28379>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
28380>>>>>>>>>        Function_Return retVal
28381>>>>>>>>>    End_Function
28382>>>>>>>>>
28382>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
28384>>>>>>>>>        Handle hDispatchDriver
28384>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28385>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28386>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
28387>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
28388>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
28389>>>>>>>>>    End_Procedure
28390>>>>>>>>>End_Class
28391>>>>>>>>>
28391>>>>>>>>>// CLSID: {C0DE2200-939E-46A8-B81A-507496C30A68}
28391>>>>>>>>>Class cCJCommandBarScrollBar is a cComAutomationObject
28392>>>>>>>>>
28392>>>>>>>>>    Function ComChecked Returns Boolean
28394>>>>>>>>>        Boolean retVal
28394>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
28395>>>>>>>>>        Function_Return retVal
28396>>>>>>>>>    End_Function
28397>>>>>>>>>
28397>>>>>>>>>    Procedure Set ComChecked Boolean value
28399>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
28400>>>>>>>>>    End_Procedure
28401>>>>>>>>>
28401>>>>>>>>>    Function ComBeginGroup Returns Boolean
28403>>>>>>>>>        Boolean retVal
28403>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
28404>>>>>>>>>        Function_Return retVal
28405>>>>>>>>>    End_Function
28406>>>>>>>>>
28406>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
28408>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
28409>>>>>>>>>    End_Procedure
28410>>>>>>>>>
28410>>>>>>>>>    Function ComCaption Returns String
28412>>>>>>>>>        String retVal
28412>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
28413>>>>>>>>>        Function_Return retVal
28414>>>>>>>>>    End_Function
28415>>>>>>>>>
28415>>>>>>>>>    Procedure Set ComCaption String value
28417>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
28418>>>>>>>>>    End_Procedure
28419>>>>>>>>>
28419>>>>>>>>>    Function ComDescriptionText Returns String
28421>>>>>>>>>        String retVal
28421>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
28422>>>>>>>>>        Function_Return retVal
28423>>>>>>>>>    End_Function
28424>>>>>>>>>
28424>>>>>>>>>    Procedure Set ComDescriptionText String value
28426>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
28427>>>>>>>>>    End_Procedure
28428>>>>>>>>>
28428>>>>>>>>>    Function ComId Returns Integer
28430>>>>>>>>>        Integer retVal
28430>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
28431>>>>>>>>>        Function_Return retVal
28432>>>>>>>>>    End_Function
28433>>>>>>>>>
28433>>>>>>>>>    Procedure Set ComId Integer value
28435>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
28436>>>>>>>>>    End_Procedure
28437>>>>>>>>>
28437>>>>>>>>>    Function ComParameter Returns String
28439>>>>>>>>>        String retVal
28439>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
28440>>>>>>>>>        Function_Return retVal
28441>>>>>>>>>    End_Function
28442>>>>>>>>>
28442>>>>>>>>>    Procedure Set ComParameter String value
28444>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
28445>>>>>>>>>    End_Procedure
28446>>>>>>>>>
28446>>>>>>>>>    Function ComShortcutText Returns String
28448>>>>>>>>>        String retVal
28448>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
28449>>>>>>>>>        Function_Return retVal
28450>>>>>>>>>    End_Function
28451>>>>>>>>>
28451>>>>>>>>>    Procedure Set ComShortcutText String value
28453>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
28454>>>>>>>>>    End_Procedure
28455>>>>>>>>>
28455>>>>>>>>>    Function ComCustomShortcutText Returns String
28457>>>>>>>>>        String retVal
28457>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
28458>>>>>>>>>        Function_Return retVal
28459>>>>>>>>>    End_Function
28460>>>>>>>>>
28460>>>>>>>>>    Procedure Set ComCustomShortcutText String value
28462>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
28463>>>>>>>>>    End_Procedure
28464>>>>>>>>>
28464>>>>>>>>>    Function ComTooltipText Returns String
28466>>>>>>>>>        String retVal
28466>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
28467>>>>>>>>>        Function_Return retVal
28468>>>>>>>>>    End_Function
28469>>>>>>>>>
28469>>>>>>>>>    Procedure Set ComTooltipText String value
28471>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
28472>>>>>>>>>    End_Procedure
28473>>>>>>>>>
28473>>>>>>>>>    Function ComVisible Returns Boolean
28475>>>>>>>>>        Boolean retVal
28475>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
28476>>>>>>>>>        Function_Return retVal
28477>>>>>>>>>    End_Function
28478>>>>>>>>>
28478>>>>>>>>>    Procedure Set ComVisible Boolean value
28480>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
28481>>>>>>>>>    End_Procedure
28482>>>>>>>>>
28482>>>>>>>>>    Function ComEnabled Returns Boolean
28484>>>>>>>>>        Boolean retVal
28484>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
28485>>>>>>>>>        Function_Return retVal
28486>>>>>>>>>    End_Function
28487>>>>>>>>>
28487>>>>>>>>>    Procedure Set ComEnabled Boolean value
28489>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
28490>>>>>>>>>    End_Procedure
28491>>>>>>>>>
28491>>>>>>>>>    Function ComIconId Returns Integer
28493>>>>>>>>>        Integer retVal
28493>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
28494>>>>>>>>>        Function_Return retVal
28495>>>>>>>>>    End_Function
28496>>>>>>>>>
28496>>>>>>>>>    Procedure Set ComIconId Integer value
28498>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
28499>>>>>>>>>    End_Procedure
28500>>>>>>>>>
28500>>>>>>>>>    Function ComDefaultItem Returns Boolean
28502>>>>>>>>>        Boolean retVal
28502>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
28503>>>>>>>>>        Function_Return retVal
28504>>>>>>>>>    End_Function
28505>>>>>>>>>
28505>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
28507>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
28508>>>>>>>>>    End_Procedure
28509>>>>>>>>>
28509>>>>>>>>>    Function ComFlags Returns XTPControlFlags
28511>>>>>>>>>        XTPControlFlags retVal
28511>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
28512>>>>>>>>>        Function_Return retVal
28513>>>>>>>>>    End_Function
28514>>>>>>>>>
28514>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
28516>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
28517>>>>>>>>>    End_Procedure
28518>>>>>>>>>
28518>>>>>>>>>    Function ComCategory Returns String
28520>>>>>>>>>        String retVal
28520>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
28521>>>>>>>>>        Function_Return retVal
28522>>>>>>>>>    End_Function
28523>>>>>>>>>
28523>>>>>>>>>    Procedure Set ComCategory String value
28525>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
28526>>>>>>>>>    End_Procedure
28527>>>>>>>>>
28527>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
28529>>>>>>>>>        XTPControlHideFlags retVal
28529>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
28530>>>>>>>>>        Function_Return retVal
28531>>>>>>>>>    End_Function
28532>>>>>>>>>
28532>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
28534>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
28535>>>>>>>>>    End_Procedure
28536>>>>>>>>>
28536>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
28538>>>>>>>>>        Boolean retVal
28538>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
28539>>>>>>>>>        Function_Return retVal
28540>>>>>>>>>    End_Function
28541>>>>>>>>>
28541>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
28543>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
28544>>>>>>>>>    End_Procedure
28545>>>>>>>>>
28545>>>>>>>>>    Function ComAction Returns Variant
28547>>>>>>>>>        Variant retVal
28547>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
28548>>>>>>>>>        Function_Return retVal
28549>>>>>>>>>    End_Function
28550>>>>>>>>>
28550>>>>>>>>>    Procedure Set ComAction Variant value
28552>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
28553>>>>>>>>>    End_Procedure
28554>>>>>>>>>
28554>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
28556>>>>>>>>>        Integer retVal
28556>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
28557>>>>>>>>>        Function_Return retVal
28558>>>>>>>>>    End_Function
28559>>>>>>>>>
28559>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
28561>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
28562>>>>>>>>>    End_Procedure
28563>>>>>>>>>
28563>>>>>>>>>    Function ComWidth Returns Integer
28565>>>>>>>>>        Integer retVal
28565>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
28566>>>>>>>>>        Function_Return retVal
28567>>>>>>>>>    End_Function
28568>>>>>>>>>
28568>>>>>>>>>    Procedure Set ComWidth Integer value
28570>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
28571>>>>>>>>>    End_Procedure
28572>>>>>>>>>
28572>>>>>>>>>    Function ComHeight Returns Integer
28574>>>>>>>>>        Integer retVal
28574>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
28575>>>>>>>>>        Function_Return retVal
28576>>>>>>>>>    End_Function
28577>>>>>>>>>
28577>>>>>>>>>    Procedure Set ComHeight Integer value
28579>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
28580>>>>>>>>>    End_Procedure
28581>>>>>>>>>
28581>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
28583>>>>>>>>>        XTPButtonStyle retVal
28583>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
28584>>>>>>>>>        Function_Return retVal
28585>>>>>>>>>    End_Function
28586>>>>>>>>>
28586>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
28588>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
28589>>>>>>>>>    End_Procedure
28590>>>>>>>>>
28590>>>>>>>>>    Function ComKeyboardTip Returns String
28592>>>>>>>>>        String retVal
28592>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
28593>>>>>>>>>        Function_Return retVal
28594>>>>>>>>>    End_Function
28595>>>>>>>>>
28595>>>>>>>>>    Procedure Set ComKeyboardTip String value
28597>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
28598>>>>>>>>>    End_Procedure
28599>>>>>>>>>
28599>>>>>>>>>    Function ComPos Returns Integer
28601>>>>>>>>>        Integer retVal
28601>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
28602>>>>>>>>>        Function_Return retVal
28603>>>>>>>>>    End_Function
28604>>>>>>>>>
28604>>>>>>>>>    Procedure Set ComPos Integer value
28606>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
28607>>>>>>>>>    End_Procedure
28608>>>>>>>>>
28608>>>>>>>>>    Function ComMin Returns Integer
28610>>>>>>>>>        Integer retVal
28610>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to retVal
28611>>>>>>>>>        Function_Return retVal
28612>>>>>>>>>    End_Function
28613>>>>>>>>>
28613>>>>>>>>>    Procedure Set ComMin Integer value
28615>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 201 OLE_VT_I4 to value
28616>>>>>>>>>    End_Procedure
28617>>>>>>>>>
28617>>>>>>>>>    Function ComMax Returns Integer
28619>>>>>>>>>        Integer retVal
28619>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to retVal
28620>>>>>>>>>        Function_Return retVal
28621>>>>>>>>>    End_Function
28622>>>>>>>>>
28622>>>>>>>>>    Procedure Set ComMax Integer value
28624>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 202 OLE_VT_I4 to value
28625>>>>>>>>>    End_Procedure
28626>>>>>>>>>
28626>>>>>>>>>    Function ComScrollBarStyle Returns XTPScrollBarStyle
28628>>>>>>>>>        XTPScrollBarStyle retVal
28628>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 204 OLE_VT_I4 to retVal
28629>>>>>>>>>        Function_Return retVal
28630>>>>>>>>>    End_Function
28631>>>>>>>>>
28631>>>>>>>>>    Procedure Set ComScrollBarStyle XTPScrollBarStyle value
28633>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 204 OLE_VT_I4 to value
28634>>>>>>>>>    End_Procedure
28635>>>>>>>>>
28635>>>>>>>>>    Function ComControls Returns Variant
28637>>>>>>>>>        Handle hDispatchDriver
28637>>>>>>>>>        Variant retVal
28637>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28638>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
28639>>>>>>>>>        Function_Return retVal
28640>>>>>>>>>    End_Function
28641>>>>>>>>>
28641>>>>>>>>>    Function ComParent Returns Variant
28643>>>>>>>>>        Handle hDispatchDriver
28643>>>>>>>>>        Variant retVal
28643>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28644>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
28645>>>>>>>>>        Function_Return retVal
28646>>>>>>>>>    End_Function
28647>>>>>>>>>
28647>>>>>>>>>    Function ComIndex Returns Integer
28649>>>>>>>>>        Handle hDispatchDriver
28649>>>>>>>>>        Integer retVal
28649>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28650>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
28651>>>>>>>>>        Function_Return retVal
28652>>>>>>>>>    End_Function
28653>>>>>>>>>
28653>>>>>>>>>    Function ComType Returns XTPControlType
28655>>>>>>>>>        Handle hDispatchDriver
28655>>>>>>>>>        XTPControlType retVal
28655>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28656>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
28657>>>>>>>>>        Function_Return retVal
28658>>>>>>>>>    End_Function
28659>>>>>>>>>
28659>>>>>>>>>    Procedure ComDelete
28661>>>>>>>>>        Handle hDispatchDriver
28661>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28662>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
28663>>>>>>>>>    End_Procedure
28664>>>>>>>>>
28664>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
28666>>>>>>>>>        Handle hDispatchDriver
28666>>>>>>>>>        Variant retVal
28666>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28667>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28668>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
28669>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
28670>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
28671>>>>>>>>>        Function_Return retVal
28672>>>>>>>>>    End_Function
28673>>>>>>>>>
28673>>>>>>>>>    Procedure ComSetFocus
28675>>>>>>>>>        Handle hDispatchDriver
28675>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28676>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
28677>>>>>>>>>    End_Procedure
28678>>>>>>>>>
28678>>>>>>>>>    Procedure ComExecute
28680>>>>>>>>>        Handle hDispatchDriver
28680>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28681>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
28682>>>>>>>>>    End_Procedure
28683>>>>>>>>>
28683>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
28685>>>>>>>>>        Handle hDispatchDriver
28685>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28686>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
28687>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
28688>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
28689>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
28690>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
28691>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
28692>>>>>>>>>    End_Procedure
28693>>>>>>>>>
28693>>>>>>>>>    Function ComRibbonGroup Returns Variant
28695>>>>>>>>>        Handle hDispatchDriver
28695>>>>>>>>>        Variant retVal
28695>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28696>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
28697>>>>>>>>>        Function_Return retVal
28698>>>>>>>>>    End_Function
28699>>>>>>>>>
28699>>>>>>>>>    Procedure ComReset
28701>>>>>>>>>        Handle hDispatchDriver
28701>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28702>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
28703>>>>>>>>>    End_Procedure
28704>>>>>>>>>
28704>>>>>>>>>    Function ComTop Returns Integer
28706>>>>>>>>>        Handle hDispatchDriver
28706>>>>>>>>>        Integer retVal
28706>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28707>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
28708>>>>>>>>>        Function_Return retVal
28709>>>>>>>>>    End_Function
28710>>>>>>>>>
28710>>>>>>>>>    Function ComLeft Returns Integer
28712>>>>>>>>>        Handle hDispatchDriver
28712>>>>>>>>>        Integer retVal
28712>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28713>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
28714>>>>>>>>>        Function_Return retVal
28715>>>>>>>>>    End_Function
28716>>>>>>>>>
28716>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
28718>>>>>>>>>        Handle hDispatchDriver
28718>>>>>>>>>        Variant retVal
28718>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28719>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
28720>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
28721>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
28722>>>>>>>>>        Function_Return retVal
28723>>>>>>>>>    End_Function
28724>>>>>>>>>
28724>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
28726>>>>>>>>>        Handle hDispatchDriver
28726>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28727>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28728>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
28729>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
28730>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
28731>>>>>>>>>    End_Procedure
28732>>>>>>>>>End_Class
28733>>>>>>>>>
28733>>>>>>>>>// CLSID: {C0DE2200-C46D-4A11-B782-A5A3684189A4}
28733>>>>>>>>>Class cCJCommandBarPopupColor is a cComAutomationObject
28734>>>>>>>>>
28734>>>>>>>>>    Function ComChecked Returns Boolean
28736>>>>>>>>>        Boolean retVal
28736>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
28737>>>>>>>>>        Function_Return retVal
28738>>>>>>>>>    End_Function
28739>>>>>>>>>
28739>>>>>>>>>    Procedure Set ComChecked Boolean value
28741>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
28742>>>>>>>>>    End_Procedure
28743>>>>>>>>>
28743>>>>>>>>>    Function ComBeginGroup Returns Boolean
28745>>>>>>>>>        Boolean retVal
28745>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
28746>>>>>>>>>        Function_Return retVal
28747>>>>>>>>>    End_Function
28748>>>>>>>>>
28748>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
28750>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
28751>>>>>>>>>    End_Procedure
28752>>>>>>>>>
28752>>>>>>>>>    Function ComCaption Returns String
28754>>>>>>>>>        String retVal
28754>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
28755>>>>>>>>>        Function_Return retVal
28756>>>>>>>>>    End_Function
28757>>>>>>>>>
28757>>>>>>>>>    Procedure Set ComCaption String value
28759>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
28760>>>>>>>>>    End_Procedure
28761>>>>>>>>>
28761>>>>>>>>>    Function ComDescriptionText Returns String
28763>>>>>>>>>        String retVal
28763>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
28764>>>>>>>>>        Function_Return retVal
28765>>>>>>>>>    End_Function
28766>>>>>>>>>
28766>>>>>>>>>    Procedure Set ComDescriptionText String value
28768>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
28769>>>>>>>>>    End_Procedure
28770>>>>>>>>>
28770>>>>>>>>>    Function ComId Returns Integer
28772>>>>>>>>>        Integer retVal
28772>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
28773>>>>>>>>>        Function_Return retVal
28774>>>>>>>>>    End_Function
28775>>>>>>>>>
28775>>>>>>>>>    Procedure Set ComId Integer value
28777>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
28778>>>>>>>>>    End_Procedure
28779>>>>>>>>>
28779>>>>>>>>>    Function ComParameter Returns String
28781>>>>>>>>>        String retVal
28781>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
28782>>>>>>>>>        Function_Return retVal
28783>>>>>>>>>    End_Function
28784>>>>>>>>>
28784>>>>>>>>>    Procedure Set ComParameter String value
28786>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
28787>>>>>>>>>    End_Procedure
28788>>>>>>>>>
28788>>>>>>>>>    Function ComShortcutText Returns String
28790>>>>>>>>>        String retVal
28790>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
28791>>>>>>>>>        Function_Return retVal
28792>>>>>>>>>    End_Function
28793>>>>>>>>>
28793>>>>>>>>>    Procedure Set ComShortcutText String value
28795>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
28796>>>>>>>>>    End_Procedure
28797>>>>>>>>>
28797>>>>>>>>>    Function ComCustomShortcutText Returns String
28799>>>>>>>>>        String retVal
28799>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
28800>>>>>>>>>        Function_Return retVal
28801>>>>>>>>>    End_Function
28802>>>>>>>>>
28802>>>>>>>>>    Procedure Set ComCustomShortcutText String value
28804>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
28805>>>>>>>>>    End_Procedure
28806>>>>>>>>>
28806>>>>>>>>>    Function ComTooltipText Returns String
28808>>>>>>>>>        String retVal
28808>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
28809>>>>>>>>>        Function_Return retVal
28810>>>>>>>>>    End_Function
28811>>>>>>>>>
28811>>>>>>>>>    Procedure Set ComTooltipText String value
28813>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
28814>>>>>>>>>    End_Procedure
28815>>>>>>>>>
28815>>>>>>>>>    Function ComVisible Returns Boolean
28817>>>>>>>>>        Boolean retVal
28817>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
28818>>>>>>>>>        Function_Return retVal
28819>>>>>>>>>    End_Function
28820>>>>>>>>>
28820>>>>>>>>>    Procedure Set ComVisible Boolean value
28822>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
28823>>>>>>>>>    End_Procedure
28824>>>>>>>>>
28824>>>>>>>>>    Function ComEnabled Returns Boolean
28826>>>>>>>>>        Boolean retVal
28826>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
28827>>>>>>>>>        Function_Return retVal
28828>>>>>>>>>    End_Function
28829>>>>>>>>>
28829>>>>>>>>>    Procedure Set ComEnabled Boolean value
28831>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
28832>>>>>>>>>    End_Procedure
28833>>>>>>>>>
28833>>>>>>>>>    Function ComIconId Returns Integer
28835>>>>>>>>>        Integer retVal
28835>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
28836>>>>>>>>>        Function_Return retVal
28837>>>>>>>>>    End_Function
28838>>>>>>>>>
28838>>>>>>>>>    Procedure Set ComIconId Integer value
28840>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
28841>>>>>>>>>    End_Procedure
28842>>>>>>>>>
28842>>>>>>>>>    Function ComDefaultItem Returns Boolean
28844>>>>>>>>>        Boolean retVal
28844>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
28845>>>>>>>>>        Function_Return retVal
28846>>>>>>>>>    End_Function
28847>>>>>>>>>
28847>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
28849>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
28850>>>>>>>>>    End_Procedure
28851>>>>>>>>>
28851>>>>>>>>>    Function ComFlags Returns XTPControlFlags
28853>>>>>>>>>        XTPControlFlags retVal
28853>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
28854>>>>>>>>>        Function_Return retVal
28855>>>>>>>>>    End_Function
28856>>>>>>>>>
28856>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
28858>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
28859>>>>>>>>>    End_Procedure
28860>>>>>>>>>
28860>>>>>>>>>    Function ComCategory Returns String
28862>>>>>>>>>        String retVal
28862>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
28863>>>>>>>>>        Function_Return retVal
28864>>>>>>>>>    End_Function
28865>>>>>>>>>
28865>>>>>>>>>    Procedure Set ComCategory String value
28867>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
28868>>>>>>>>>    End_Procedure
28869>>>>>>>>>
28869>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
28871>>>>>>>>>        XTPControlHideFlags retVal
28871>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
28872>>>>>>>>>        Function_Return retVal
28873>>>>>>>>>    End_Function
28874>>>>>>>>>
28874>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
28876>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
28877>>>>>>>>>    End_Procedure
28878>>>>>>>>>
28878>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
28880>>>>>>>>>        Boolean retVal
28880>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
28881>>>>>>>>>        Function_Return retVal
28882>>>>>>>>>    End_Function
28883>>>>>>>>>
28883>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
28885>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
28886>>>>>>>>>    End_Procedure
28887>>>>>>>>>
28887>>>>>>>>>    Function ComAction Returns Variant
28889>>>>>>>>>        Variant retVal
28889>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
28890>>>>>>>>>        Function_Return retVal
28891>>>>>>>>>    End_Function
28892>>>>>>>>>
28892>>>>>>>>>    Procedure Set ComAction Variant value
28894>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
28895>>>>>>>>>    End_Procedure
28896>>>>>>>>>
28896>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
28898>>>>>>>>>        Integer retVal
28898>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
28899>>>>>>>>>        Function_Return retVal
28900>>>>>>>>>    End_Function
28901>>>>>>>>>
28901>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
28903>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
28904>>>>>>>>>    End_Procedure
28905>>>>>>>>>
28905>>>>>>>>>    Function ComWidth Returns Integer
28907>>>>>>>>>        Integer retVal
28907>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
28908>>>>>>>>>        Function_Return retVal
28909>>>>>>>>>    End_Function
28910>>>>>>>>>
28910>>>>>>>>>    Procedure Set ComWidth Integer value
28912>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
28913>>>>>>>>>    End_Procedure
28914>>>>>>>>>
28914>>>>>>>>>    Function ComHeight Returns Integer
28916>>>>>>>>>        Integer retVal
28916>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
28917>>>>>>>>>        Function_Return retVal
28918>>>>>>>>>    End_Function
28919>>>>>>>>>
28919>>>>>>>>>    Procedure Set ComHeight Integer value
28921>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
28922>>>>>>>>>    End_Procedure
28923>>>>>>>>>
28923>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
28925>>>>>>>>>        XTPButtonStyle retVal
28925>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
28926>>>>>>>>>        Function_Return retVal
28927>>>>>>>>>    End_Function
28928>>>>>>>>>
28928>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
28930>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
28931>>>>>>>>>    End_Procedure
28932>>>>>>>>>
28932>>>>>>>>>    Function ComKeyboardTip Returns String
28934>>>>>>>>>        String retVal
28934>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
28935>>>>>>>>>        Function_Return retVal
28936>>>>>>>>>    End_Function
28937>>>>>>>>>
28937>>>>>>>>>    Procedure Set ComKeyboardTip String value
28939>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
28940>>>>>>>>>    End_Procedure
28941>>>>>>>>>
28941>>>>>>>>>    Function ComColor Returns OLE_COLOR
28943>>>>>>>>>        OLE_COLOR retVal
28943>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
28944>>>>>>>>>        Function_Return retVal
28945>>>>>>>>>    End_Function
28946>>>>>>>>>
28946>>>>>>>>>    Procedure Set ComColor OLE_COLOR value
28948>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
28949>>>>>>>>>    End_Procedure
28950>>>>>>>>>
28950>>>>>>>>>    Function ComCommandBar Returns Variant
28952>>>>>>>>>        Variant retVal
28952>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to retVal
28953>>>>>>>>>        Function_Return retVal
28954>>>>>>>>>    End_Function
28955>>>>>>>>>
28955>>>>>>>>>    Procedure Set ComCommandBar Variant value
28957>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 50 OLE_VT_DISPATCH to value
28958>>>>>>>>>    End_Procedure
28959>>>>>>>>>
28959>>>>>>>>>    Function ComControls Returns Variant
28961>>>>>>>>>        Handle hDispatchDriver
28961>>>>>>>>>        Variant retVal
28961>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28962>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
28963>>>>>>>>>        Function_Return retVal
28964>>>>>>>>>    End_Function
28965>>>>>>>>>
28965>>>>>>>>>    Function ComParent Returns Variant
28967>>>>>>>>>        Handle hDispatchDriver
28967>>>>>>>>>        Variant retVal
28967>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28968>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
28969>>>>>>>>>        Function_Return retVal
28970>>>>>>>>>    End_Function
28971>>>>>>>>>
28971>>>>>>>>>    Function ComIndex Returns Integer
28973>>>>>>>>>        Handle hDispatchDriver
28973>>>>>>>>>        Integer retVal
28973>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28974>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
28975>>>>>>>>>        Function_Return retVal
28976>>>>>>>>>    End_Function
28977>>>>>>>>>
28977>>>>>>>>>    Function ComType Returns XTPControlType
28979>>>>>>>>>        Handle hDispatchDriver
28979>>>>>>>>>        XTPControlType retVal
28979>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28980>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
28981>>>>>>>>>        Function_Return retVal
28982>>>>>>>>>    End_Function
28983>>>>>>>>>
28983>>>>>>>>>    Procedure ComDelete
28985>>>>>>>>>        Handle hDispatchDriver
28985>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28986>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
28987>>>>>>>>>    End_Procedure
28988>>>>>>>>>
28988>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
28990>>>>>>>>>        Handle hDispatchDriver
28990>>>>>>>>>        Variant retVal
28990>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
28991>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
28992>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
28993>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
28994>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
28995>>>>>>>>>        Function_Return retVal
28996>>>>>>>>>    End_Function
28997>>>>>>>>>
28997>>>>>>>>>    Procedure ComSetFocus
28999>>>>>>>>>        Handle hDispatchDriver
28999>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29000>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
29001>>>>>>>>>    End_Procedure
29002>>>>>>>>>
29002>>>>>>>>>    Procedure ComExecute
29004>>>>>>>>>        Handle hDispatchDriver
29004>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29005>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
29006>>>>>>>>>    End_Procedure
29007>>>>>>>>>
29007>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
29009>>>>>>>>>        Handle hDispatchDriver
29009>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29010>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
29011>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
29012>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
29013>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
29014>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
29015>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
29016>>>>>>>>>    End_Procedure
29017>>>>>>>>>
29017>>>>>>>>>    Function ComRibbonGroup Returns Variant
29019>>>>>>>>>        Handle hDispatchDriver
29019>>>>>>>>>        Variant retVal
29019>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29020>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
29021>>>>>>>>>        Function_Return retVal
29022>>>>>>>>>    End_Function
29023>>>>>>>>>
29023>>>>>>>>>    Procedure ComReset
29025>>>>>>>>>        Handle hDispatchDriver
29025>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29026>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
29027>>>>>>>>>    End_Procedure
29028>>>>>>>>>
29028>>>>>>>>>    Function ComTop Returns Integer
29030>>>>>>>>>        Handle hDispatchDriver
29030>>>>>>>>>        Integer retVal
29030>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29031>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
29032>>>>>>>>>        Function_Return retVal
29033>>>>>>>>>    End_Function
29034>>>>>>>>>
29034>>>>>>>>>    Function ComLeft Returns Integer
29036>>>>>>>>>        Handle hDispatchDriver
29036>>>>>>>>>        Integer retVal
29036>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29037>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
29038>>>>>>>>>        Function_Return retVal
29039>>>>>>>>>    End_Function
29040>>>>>>>>>
29040>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
29042>>>>>>>>>        Handle hDispatchDriver
29042>>>>>>>>>        Variant retVal
29042>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29043>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
29044>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
29045>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
29046>>>>>>>>>        Function_Return retVal
29047>>>>>>>>>    End_Function
29048>>>>>>>>>
29048>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
29050>>>>>>>>>        Handle hDispatchDriver
29050>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29051>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
29052>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
29053>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
29054>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
29055>>>>>>>>>    End_Procedure
29056>>>>>>>>>End_Class
29057>>>>>>>>>
29057>>>>>>>>>// CLSID: {C0DE2200-0835-494F-8FFB-1516C2D7D943}
29057>>>>>>>>>Class cCJCommandBarControlColorSelector is a cComAutomationObject
29058>>>>>>>>>
29058>>>>>>>>>    Function ComChecked Returns Boolean
29060>>>>>>>>>        Boolean retVal
29060>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to retVal
29061>>>>>>>>>        Function_Return retVal
29062>>>>>>>>>    End_Function
29063>>>>>>>>>
29063>>>>>>>>>    Procedure Set ComChecked Boolean value
29065>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 14 OLE_VT_BOOL to value
29066>>>>>>>>>    End_Procedure
29067>>>>>>>>>
29067>>>>>>>>>    Function ComBeginGroup Returns Boolean
29069>>>>>>>>>        Boolean retVal
29069>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to retVal
29070>>>>>>>>>        Function_Return retVal
29071>>>>>>>>>    End_Function
29072>>>>>>>>>
29072>>>>>>>>>    Procedure Set ComBeginGroup Boolean value
29074>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BOOL to value
29075>>>>>>>>>    End_Procedure
29076>>>>>>>>>
29076>>>>>>>>>    Function ComCaption Returns String
29078>>>>>>>>>        String retVal
29078>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
29079>>>>>>>>>        Function_Return retVal
29080>>>>>>>>>    End_Function
29081>>>>>>>>>
29081>>>>>>>>>    Procedure Set ComCaption String value
29083>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
29084>>>>>>>>>    End_Procedure
29085>>>>>>>>>
29085>>>>>>>>>    Function ComDescriptionText Returns String
29087>>>>>>>>>        String retVal
29087>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
29088>>>>>>>>>        Function_Return retVal
29089>>>>>>>>>    End_Function
29090>>>>>>>>>
29090>>>>>>>>>    Procedure Set ComDescriptionText String value
29092>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
29093>>>>>>>>>    End_Procedure
29094>>>>>>>>>
29094>>>>>>>>>    Function ComId Returns Integer
29096>>>>>>>>>        Integer retVal
29096>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
29097>>>>>>>>>        Function_Return retVal
29098>>>>>>>>>    End_Function
29099>>>>>>>>>
29099>>>>>>>>>    Procedure Set ComId Integer value
29101>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
29102>>>>>>>>>    End_Procedure
29103>>>>>>>>>
29103>>>>>>>>>    Function ComParameter Returns String
29105>>>>>>>>>        String retVal
29105>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
29106>>>>>>>>>        Function_Return retVal
29107>>>>>>>>>    End_Function
29108>>>>>>>>>
29108>>>>>>>>>    Procedure Set ComParameter String value
29110>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
29111>>>>>>>>>    End_Procedure
29112>>>>>>>>>
29112>>>>>>>>>    Function ComShortcutText Returns String
29114>>>>>>>>>        String retVal
29114>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to retVal
29115>>>>>>>>>        Function_Return retVal
29116>>>>>>>>>    End_Function
29117>>>>>>>>>
29117>>>>>>>>>    Procedure Set ComShortcutText String value
29119>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 9 OLE_VT_BSTR to value
29120>>>>>>>>>    End_Procedure
29121>>>>>>>>>
29121>>>>>>>>>    Function ComCustomShortcutText Returns String
29123>>>>>>>>>        String retVal
29123>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to retVal
29124>>>>>>>>>        Function_Return retVal
29125>>>>>>>>>    End_Function
29126>>>>>>>>>
29126>>>>>>>>>    Procedure Set ComCustomShortcutText String value
29128>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 90 OLE_VT_BSTR to value
29129>>>>>>>>>    End_Procedure
29130>>>>>>>>>
29130>>>>>>>>>    Function ComTooltipText Returns String
29132>>>>>>>>>        String retVal
29132>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to retVal
29133>>>>>>>>>        Function_Return retVal
29134>>>>>>>>>    End_Function
29135>>>>>>>>>
29135>>>>>>>>>    Procedure Set ComTooltipText String value
29137>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BSTR to value
29138>>>>>>>>>    End_Procedure
29139>>>>>>>>>
29139>>>>>>>>>    Function ComVisible Returns Boolean
29141>>>>>>>>>        Boolean retVal
29141>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
29142>>>>>>>>>        Function_Return retVal
29143>>>>>>>>>    End_Function
29144>>>>>>>>>
29144>>>>>>>>>    Procedure Set ComVisible Boolean value
29146>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
29147>>>>>>>>>    End_Procedure
29148>>>>>>>>>
29148>>>>>>>>>    Function ComEnabled Returns Boolean
29150>>>>>>>>>        Boolean retVal
29150>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
29151>>>>>>>>>        Function_Return retVal
29152>>>>>>>>>    End_Function
29153>>>>>>>>>
29153>>>>>>>>>    Procedure Set ComEnabled Boolean value
29155>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
29156>>>>>>>>>    End_Procedure
29157>>>>>>>>>
29157>>>>>>>>>    Function ComIconId Returns Integer
29159>>>>>>>>>        Integer retVal
29159>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
29160>>>>>>>>>        Function_Return retVal
29161>>>>>>>>>    End_Function
29162>>>>>>>>>
29162>>>>>>>>>    Procedure Set ComIconId Integer value
29164>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
29165>>>>>>>>>    End_Procedure
29166>>>>>>>>>
29166>>>>>>>>>    Function ComDefaultItem Returns Boolean
29168>>>>>>>>>        Boolean retVal
29168>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
29169>>>>>>>>>        Function_Return retVal
29170>>>>>>>>>    End_Function
29171>>>>>>>>>
29171>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
29173>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
29174>>>>>>>>>    End_Procedure
29175>>>>>>>>>
29175>>>>>>>>>    Function ComFlags Returns XTPControlFlags
29177>>>>>>>>>        XTPControlFlags retVal
29177>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to retVal
29178>>>>>>>>>        Function_Return retVal
29179>>>>>>>>>    End_Function
29180>>>>>>>>>
29180>>>>>>>>>    Procedure Set ComFlags XTPControlFlags value
29182>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 18 OLE_VT_I4 to value
29183>>>>>>>>>    End_Procedure
29184>>>>>>>>>
29184>>>>>>>>>    Function ComCategory Returns String
29186>>>>>>>>>        String retVal
29186>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to retVal
29187>>>>>>>>>        Function_Return retVal
29188>>>>>>>>>    End_Function
29189>>>>>>>>>
29189>>>>>>>>>    Procedure Set ComCategory String value
29191>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 19 OLE_VT_BSTR to value
29192>>>>>>>>>    End_Procedure
29193>>>>>>>>>
29193>>>>>>>>>    Function ComHideFlags Returns XTPControlHideFlags
29195>>>>>>>>>        XTPControlHideFlags retVal
29195>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to retVal
29196>>>>>>>>>        Function_Return retVal
29197>>>>>>>>>    End_Function
29198>>>>>>>>>
29198>>>>>>>>>    Procedure Set ComHideFlags XTPControlHideFlags value
29200>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 23 OLE_VT_I4 to value
29201>>>>>>>>>    End_Procedure
29202>>>>>>>>>
29202>>>>>>>>>    Function ComCloseSubMenuOnClick Returns Boolean
29204>>>>>>>>>        Boolean retVal
29204>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to retVal
29205>>>>>>>>>        Function_Return retVal
29206>>>>>>>>>    End_Function
29207>>>>>>>>>
29207>>>>>>>>>    Procedure Set ComCloseSubMenuOnClick Boolean value
29209>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 24 OLE_VT_BOOL to value
29210>>>>>>>>>    End_Procedure
29211>>>>>>>>>
29211>>>>>>>>>    Function ComAction Returns Variant
29213>>>>>>>>>        Variant retVal
29213>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
29214>>>>>>>>>        Function_Return retVal
29215>>>>>>>>>    End_Function
29216>>>>>>>>>
29216>>>>>>>>>    Procedure Set ComAction Variant value
29218>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
29219>>>>>>>>>    End_Procedure
29220>>>>>>>>>
29220>>>>>>>>>    Function ComExecuteOnPressInterval Returns Integer
29222>>>>>>>>>        Integer retVal
29222>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to retVal
29223>>>>>>>>>        Function_Return retVal
29224>>>>>>>>>    End_Function
29225>>>>>>>>>
29225>>>>>>>>>    Procedure Set ComExecuteOnPressInterval Integer value
29227>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 30 OLE_VT_I4 to value
29228>>>>>>>>>    End_Procedure
29229>>>>>>>>>
29229>>>>>>>>>    Function ComWidth Returns Integer
29231>>>>>>>>>        Integer retVal
29231>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to retVal
29232>>>>>>>>>        Function_Return retVal
29233>>>>>>>>>    End_Function
29234>>>>>>>>>
29234>>>>>>>>>    Procedure Set ComWidth Integer value
29236>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 31 OLE_VT_I4 to value
29237>>>>>>>>>    End_Procedure
29238>>>>>>>>>
29238>>>>>>>>>    Function ComHeight Returns Integer
29240>>>>>>>>>        Integer retVal
29240>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to retVal
29241>>>>>>>>>        Function_Return retVal
29242>>>>>>>>>    End_Function
29243>>>>>>>>>
29243>>>>>>>>>    Procedure Set ComHeight Integer value
29245>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 32 OLE_VT_I4 to value
29246>>>>>>>>>    End_Procedure
29247>>>>>>>>>
29247>>>>>>>>>    Function ComStyle Returns XTPButtonStyle
29249>>>>>>>>>        XTPButtonStyle retVal
29249>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to retVal
29250>>>>>>>>>        Function_Return retVal
29251>>>>>>>>>    End_Function
29252>>>>>>>>>
29252>>>>>>>>>    Procedure Set ComStyle XTPButtonStyle value
29254>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 28 OLE_VT_I4 to value
29255>>>>>>>>>    End_Procedure
29256>>>>>>>>>
29256>>>>>>>>>    Function ComKeyboardTip Returns String
29258>>>>>>>>>        String retVal
29258>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to retVal
29259>>>>>>>>>        Function_Return retVal
29260>>>>>>>>>    End_Function
29261>>>>>>>>>
29261>>>>>>>>>    Procedure Set ComKeyboardTip String value
29263>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 36 OLE_VT_BSTR to value
29264>>>>>>>>>    End_Procedure
29265>>>>>>>>>
29265>>>>>>>>>    Function ComColor Returns OLE_COLOR
29267>>>>>>>>>        OLE_COLOR retVal
29267>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to retVal
29268>>>>>>>>>        Function_Return retVal
29269>>>>>>>>>    End_Function
29270>>>>>>>>>
29270>>>>>>>>>    Procedure Set ComColor OLE_COLOR value
29272>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 200 OLE_VT_I4 to value
29273>>>>>>>>>    End_Procedure
29274>>>>>>>>>
29274>>>>>>>>>    Function ComControls Returns Variant
29276>>>>>>>>>        Handle hDispatchDriver
29276>>>>>>>>>        Variant retVal
29276>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29277>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
29278>>>>>>>>>        Function_Return retVal
29279>>>>>>>>>    End_Function
29280>>>>>>>>>
29280>>>>>>>>>    Function ComParent Returns Variant
29282>>>>>>>>>        Handle hDispatchDriver
29282>>>>>>>>>        Variant retVal
29282>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29283>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29284>>>>>>>>>        Function_Return retVal
29285>>>>>>>>>    End_Function
29286>>>>>>>>>
29286>>>>>>>>>    Function ComIndex Returns Integer
29288>>>>>>>>>        Handle hDispatchDriver
29288>>>>>>>>>        Integer retVal
29288>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29289>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
29290>>>>>>>>>        Function_Return retVal
29291>>>>>>>>>    End_Function
29292>>>>>>>>>
29292>>>>>>>>>    Function ComType Returns XTPControlType
29294>>>>>>>>>        Handle hDispatchDriver
29294>>>>>>>>>        XTPControlType retVal
29294>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29295>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_I4 to retVal
29296>>>>>>>>>        Function_Return retVal
29297>>>>>>>>>    End_Function
29298>>>>>>>>>
29298>>>>>>>>>    Procedure ComDelete
29300>>>>>>>>>        Handle hDispatchDriver
29300>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29301>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
29302>>>>>>>>>    End_Procedure
29303>>>>>>>>>
29303>>>>>>>>>    Function ComCopy Variant llBar Variant llBefore Returns Variant
29305>>>>>>>>>        Handle hDispatchDriver
29305>>>>>>>>>        Variant retVal
29305>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29306>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
29307>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llBar
29308>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llBefore
29309>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 20 OLE_VT_DISPATCH to retVal
29310>>>>>>>>>        Function_Return retVal
29311>>>>>>>>>    End_Function
29312>>>>>>>>>
29312>>>>>>>>>    Procedure ComSetFocus
29314>>>>>>>>>        Handle hDispatchDriver
29314>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29315>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 21 OLE_VT_VOID
29316>>>>>>>>>    End_Procedure
29317>>>>>>>>>
29317>>>>>>>>>    Procedure ComExecute
29319>>>>>>>>>        Handle hDispatchDriver
29319>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29320>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 22 OLE_VT_VOID
29321>>>>>>>>>    End_Procedure
29322>>>>>>>>>
29322>>>>>>>>>    Procedure ComGetRect Integer ByRef llLeft Integer ByRef llTop Integer ByRef llRight Integer ByRef llBottom
29324>>>>>>>>>        Handle hDispatchDriver
29324>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29325>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
29326>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llLeft
29327>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llTop
29328>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llRight
29329>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llBottom
29330>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 25 OLE_VT_VOID
29331>>>>>>>>>    End_Procedure
29332>>>>>>>>>
29332>>>>>>>>>    Function ComRibbonGroup Returns Variant
29334>>>>>>>>>        Handle hDispatchDriver
29334>>>>>>>>>        Variant retVal
29334>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29335>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 26 OLE_VT_DISPATCH to retVal
29336>>>>>>>>>        Function_Return retVal
29337>>>>>>>>>    End_Function
29338>>>>>>>>>
29338>>>>>>>>>    Procedure ComReset
29340>>>>>>>>>        Handle hDispatchDriver
29340>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29341>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 27 OLE_VT_VOID
29342>>>>>>>>>    End_Procedure
29343>>>>>>>>>
29343>>>>>>>>>    Function ComTop Returns Integer
29345>>>>>>>>>        Handle hDispatchDriver
29345>>>>>>>>>        Integer retVal
29345>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29346>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 33 OLE_VT_I4 to retVal
29347>>>>>>>>>        Function_Return retVal
29348>>>>>>>>>    End_Function
29349>>>>>>>>>
29349>>>>>>>>>    Function ComLeft Returns Integer
29351>>>>>>>>>        Handle hDispatchDriver
29351>>>>>>>>>        Integer retVal
29351>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29352>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 34 OLE_VT_I4 to retVal
29353>>>>>>>>>        Function_Return retVal
29354>>>>>>>>>    End_Function
29355>>>>>>>>>
29355>>>>>>>>>    Function ComClone Variant llRecursive Returns Variant
29357>>>>>>>>>        Handle hDispatchDriver
29357>>>>>>>>>        Variant retVal
29357>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29358>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
29359>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRecursive
29360>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 35 OLE_VT_DISPATCH to retVal
29361>>>>>>>>>        Function_Return retVal
29362>>>>>>>>>    End_Function
29363>>>>>>>>>
29363>>>>>>>>>    Procedure ComSetIconSize Integer llcx Integer llcy
29365>>>>>>>>>        Handle hDispatchDriver
29365>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29366>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
29367>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcx
29368>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcy
29369>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 37 OLE_VT_VOID
29370>>>>>>>>>    End_Procedure
29371>>>>>>>>>End_Class
29372>>>>>>>>>
29372>>>>>>>>>// CLSID: {C0DE2200-9D54-40A3-B626-83FB0F80B8F4}
29372>>>>>>>>>Class cCJRibbonBackstageView is a cComAutomationObject
29373>>>>>>>>>
29373>>>>>>>>>    Function ComStyle Returns XTPRibbonBackstageStyle
29375>>>>>>>>>        XTPRibbonBackstageStyle retVal
29375>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1102 OLE_VT_I4 to retVal
29376>>>>>>>>>        Function_Return retVal
29377>>>>>>>>>    End_Function
29378>>>>>>>>>
29378>>>>>>>>>    Procedure Set ComStyle XTPRibbonBackstageStyle value
29380>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1102 OLE_VT_I4 to value
29381>>>>>>>>>    End_Procedure
29382>>>>>>>>>
29382>>>>>>>>>    Function ComControls Returns Variant
29384>>>>>>>>>        Handle hDispatchDriver
29384>>>>>>>>>        Variant retVal
29384>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29385>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29386>>>>>>>>>        Function_Return retVal
29387>>>>>>>>>    End_Function
29388>>>>>>>>>
29388>>>>>>>>>    Function ComAddCommand Integer llId String llCaption Returns Variant
29390>>>>>>>>>        Handle hDispatchDriver
29390>>>>>>>>>        Variant retVal
29390>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29391>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
29392>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
29393>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
29394>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1000 OLE_VT_DISPATCH to retVal
29395>>>>>>>>>        Function_Return retVal
29396>>>>>>>>>    End_Function
29397>>>>>>>>>
29397>>>>>>>>>    Function ComAddTab Integer llId String llCaption OLE_HANDLE llControlPaneHwnd Returns Variant
29399>>>>>>>>>        Handle hDispatchDriver
29399>>>>>>>>>        Variant retVal
29399>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29400>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
29401>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llId
29402>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llCaption
29403>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llControlPaneHwnd
29404>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1001 OLE_VT_DISPATCH to retVal
29405>>>>>>>>>        Function_Return retVal
29406>>>>>>>>>    End_Function
29407>>>>>>>>>
29407>>>>>>>>>    Procedure ComClose
29409>>>>>>>>>        Handle hDispatchDriver
29409>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29410>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1002 OLE_VT_VOID
29411>>>>>>>>>    End_Procedure
29412>>>>>>>>>
29412>>>>>>>>>    Procedure ComSetTheme XTPVisualTheme llTheme
29414>>>>>>>>>        Handle hDispatchDriver
29414>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29415>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
29416>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTheme
29417>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1003 OLE_VT_VOID
29418>>>>>>>>>    End_Procedure
29419>>>>>>>>>
29419>>>>>>>>>    Function ComAddMenuSeparator Returns Variant
29421>>>>>>>>>        Handle hDispatchDriver
29421>>>>>>>>>        Variant retVal
29421>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29422>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1004 OLE_VT_DISPATCH to retVal
29423>>>>>>>>>        Function_Return retVal
29424>>>>>>>>>    End_Function
29425>>>>>>>>>
29425>>>>>>>>>    Function ComGetForeColor Returns OLE_COLOR
29427>>>>>>>>>        Handle hDispatchDriver
29427>>>>>>>>>        OLE_COLOR retVal
29427>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29428>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1100 OLE_VT_I4 to retVal
29429>>>>>>>>>        Function_Return retVal
29430>>>>>>>>>    End_Function
29431>>>>>>>>>
29431>>>>>>>>>    Function ComGetBackColor Returns OLE_COLOR
29433>>>>>>>>>        Handle hDispatchDriver
29433>>>>>>>>>        OLE_COLOR retVal
29433>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29434>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1101 OLE_VT_I4 to retVal
29435>>>>>>>>>        Function_Return retVal
29436>>>>>>>>>    End_Function
29437>>>>>>>>>End_Class
29438>>>>>>>>>
29438>>>>>>>>>// CLSID: {C0DE2200-2F93-41B3-B097-2DA852A25BFC}
29438>>>>>>>>>Class cCJRibbonBackstageCommand is a cComAutomationObject
29439>>>>>>>>>
29439>>>>>>>>>    Function ComCaption Returns String
29441>>>>>>>>>        String retVal
29441>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
29442>>>>>>>>>        Function_Return retVal
29443>>>>>>>>>    End_Function
29444>>>>>>>>>
29444>>>>>>>>>    Procedure Set ComCaption String value
29446>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
29447>>>>>>>>>    End_Procedure
29448>>>>>>>>>
29448>>>>>>>>>    Function ComDescriptionText Returns String
29450>>>>>>>>>        String retVal
29450>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
29451>>>>>>>>>        Function_Return retVal
29452>>>>>>>>>    End_Function
29453>>>>>>>>>
29453>>>>>>>>>    Procedure Set ComDescriptionText String value
29455>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
29456>>>>>>>>>    End_Procedure
29457>>>>>>>>>
29457>>>>>>>>>    Function ComId Returns Integer
29459>>>>>>>>>        Integer retVal
29459>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
29460>>>>>>>>>        Function_Return retVal
29461>>>>>>>>>    End_Function
29462>>>>>>>>>
29462>>>>>>>>>    Procedure Set ComId Integer value
29464>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
29465>>>>>>>>>    End_Procedure
29466>>>>>>>>>
29466>>>>>>>>>    Function ComParameter Returns String
29468>>>>>>>>>        String retVal
29468>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
29469>>>>>>>>>        Function_Return retVal
29470>>>>>>>>>    End_Function
29471>>>>>>>>>
29471>>>>>>>>>    Procedure Set ComParameter String value
29473>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
29474>>>>>>>>>    End_Procedure
29475>>>>>>>>>
29475>>>>>>>>>    Function ComEnabled Returns Boolean
29477>>>>>>>>>        Boolean retVal
29477>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
29478>>>>>>>>>        Function_Return retVal
29479>>>>>>>>>    End_Function
29480>>>>>>>>>
29480>>>>>>>>>    Procedure Set ComEnabled Boolean value
29482>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
29483>>>>>>>>>    End_Procedure
29484>>>>>>>>>
29484>>>>>>>>>    Function ComVisible Returns Boolean
29486>>>>>>>>>        Boolean retVal
29486>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
29487>>>>>>>>>        Function_Return retVal
29488>>>>>>>>>    End_Function
29489>>>>>>>>>
29489>>>>>>>>>    Procedure Set ComVisible Boolean value
29491>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
29492>>>>>>>>>    End_Procedure
29493>>>>>>>>>
29493>>>>>>>>>    Function ComIconId Returns Integer
29495>>>>>>>>>        Integer retVal
29495>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
29496>>>>>>>>>        Function_Return retVal
29497>>>>>>>>>    End_Function
29498>>>>>>>>>
29498>>>>>>>>>    Procedure Set ComIconId Integer value
29500>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
29501>>>>>>>>>    End_Procedure
29502>>>>>>>>>
29502>>>>>>>>>    Function ComAction Returns Variant
29504>>>>>>>>>        Variant retVal
29504>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
29505>>>>>>>>>        Function_Return retVal
29506>>>>>>>>>    End_Function
29507>>>>>>>>>
29507>>>>>>>>>    Procedure Set ComAction Variant value
29509>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
29510>>>>>>>>>    End_Procedure
29511>>>>>>>>>
29511>>>>>>>>>    Function ComControls Returns Variant
29513>>>>>>>>>        Handle hDispatchDriver
29513>>>>>>>>>        Variant retVal
29513>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29514>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
29515>>>>>>>>>        Function_Return retVal
29516>>>>>>>>>    End_Function
29517>>>>>>>>>
29517>>>>>>>>>    Function ComParent Returns Variant
29519>>>>>>>>>        Handle hDispatchDriver
29519>>>>>>>>>        Variant retVal
29519>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29520>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29521>>>>>>>>>        Function_Return retVal
29522>>>>>>>>>    End_Function
29523>>>>>>>>>
29523>>>>>>>>>    Function ComIndex Returns Integer
29525>>>>>>>>>        Handle hDispatchDriver
29525>>>>>>>>>        Integer retVal
29525>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29526>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
29527>>>>>>>>>        Function_Return retVal
29528>>>>>>>>>    End_Function
29529>>>>>>>>>
29529>>>>>>>>>    Procedure ComDelete
29531>>>>>>>>>        Handle hDispatchDriver
29531>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29532>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
29533>>>>>>>>>    End_Procedure
29534>>>>>>>>>End_Class
29535>>>>>>>>>
29535>>>>>>>>>// CLSID: {C0DE2200-FCAC-4EF3-B27E-2E8A04B170E4}
29535>>>>>>>>>Class cCJRibbonBackstageTab is a cComAutomationObject
29536>>>>>>>>>
29536>>>>>>>>>    Function ComCaption Returns String
29538>>>>>>>>>        String retVal
29538>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to retVal
29539>>>>>>>>>        Function_Return retVal
29540>>>>>>>>>    End_Function
29541>>>>>>>>>
29541>>>>>>>>>    Procedure Set ComCaption String value
29543>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 4 OLE_VT_BSTR to value
29544>>>>>>>>>    End_Procedure
29545>>>>>>>>>
29545>>>>>>>>>    Function ComDescriptionText Returns String
29547>>>>>>>>>        String retVal
29547>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to retVal
29548>>>>>>>>>        Function_Return retVal
29549>>>>>>>>>    End_Function
29550>>>>>>>>>
29550>>>>>>>>>    Procedure Set ComDescriptionText String value
29552>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BSTR to value
29553>>>>>>>>>    End_Procedure
29554>>>>>>>>>
29554>>>>>>>>>    Function ComId Returns Integer
29556>>>>>>>>>        Integer retVal
29556>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
29557>>>>>>>>>        Function_Return retVal
29558>>>>>>>>>    End_Function
29559>>>>>>>>>
29559>>>>>>>>>    Procedure Set ComId Integer value
29561>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
29562>>>>>>>>>    End_Procedure
29563>>>>>>>>>
29563>>>>>>>>>    Function ComParameter Returns String
29565>>>>>>>>>        String retVal
29565>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to retVal
29566>>>>>>>>>        Function_Return retVal
29567>>>>>>>>>    End_Function
29568>>>>>>>>>
29568>>>>>>>>>    Procedure Set ComParameter String value
29570>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 8 OLE_VT_BSTR to value
29571>>>>>>>>>    End_Procedure
29572>>>>>>>>>
29572>>>>>>>>>    Function ComEnabled Returns Boolean
29574>>>>>>>>>        Boolean retVal
29574>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to retVal
29575>>>>>>>>>        Function_Return retVal
29576>>>>>>>>>    End_Function
29577>>>>>>>>>
29577>>>>>>>>>    Procedure Set ComEnabled Boolean value
29579>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 13 OLE_VT_BOOL to value
29580>>>>>>>>>    End_Procedure
29581>>>>>>>>>
29581>>>>>>>>>    Function ComVisible Returns Boolean
29583>>>>>>>>>        Boolean retVal
29583>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
29584>>>>>>>>>        Function_Return retVal
29585>>>>>>>>>    End_Function
29586>>>>>>>>>
29586>>>>>>>>>    Procedure Set ComVisible Boolean value
29588>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
29589>>>>>>>>>    End_Procedure
29590>>>>>>>>>
29590>>>>>>>>>    Function ComIconId Returns Integer
29592>>>>>>>>>        Integer retVal
29592>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to retVal
29593>>>>>>>>>        Function_Return retVal
29594>>>>>>>>>    End_Function
29595>>>>>>>>>
29595>>>>>>>>>    Procedure Set ComIconId Integer value
29597>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 15 OLE_VT_I4 to value
29598>>>>>>>>>    End_Procedure
29599>>>>>>>>>
29599>>>>>>>>>    Function ComDefaultItem Returns Boolean
29601>>>>>>>>>        Boolean retVal
29601>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
29602>>>>>>>>>        Function_Return retVal
29603>>>>>>>>>    End_Function
29604>>>>>>>>>
29604>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
29606>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
29607>>>>>>>>>    End_Procedure
29608>>>>>>>>>
29608>>>>>>>>>    Function ComAction Returns Variant
29610>>>>>>>>>        Variant retVal
29610>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to retVal
29611>>>>>>>>>        Function_Return retVal
29612>>>>>>>>>    End_Function
29613>>>>>>>>>
29613>>>>>>>>>    Procedure Set ComAction Variant value
29615>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 29 OLE_VT_DISPATCH to value
29616>>>>>>>>>    End_Procedure
29617>>>>>>>>>
29617>>>>>>>>>    Function ComControls Returns Variant
29619>>>>>>>>>        Handle hDispatchDriver
29619>>>>>>>>>        Variant retVal
29619>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29620>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
29621>>>>>>>>>        Function_Return retVal
29622>>>>>>>>>    End_Function
29623>>>>>>>>>
29623>>>>>>>>>    Function ComParent Returns Variant
29625>>>>>>>>>        Handle hDispatchDriver
29625>>>>>>>>>        Variant retVal
29625>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29626>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29627>>>>>>>>>        Function_Return retVal
29628>>>>>>>>>    End_Function
29629>>>>>>>>>
29629>>>>>>>>>    Function ComIndex Returns Integer
29631>>>>>>>>>        Handle hDispatchDriver
29631>>>>>>>>>        Integer retVal
29631>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29632>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
29633>>>>>>>>>        Function_Return retVal
29634>>>>>>>>>    End_Function
29635>>>>>>>>>
29635>>>>>>>>>    Procedure ComDelete
29637>>>>>>>>>        Handle hDispatchDriver
29637>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29638>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
29639>>>>>>>>>    End_Procedure
29640>>>>>>>>>End_Class
29641>>>>>>>>>
29641>>>>>>>>>// CLSID: {C0DE2200-3890-484C-A9B0-978E6AA0AA8D}
29641>>>>>>>>>Class cCJRibbonBackstageMenuSeparator is a cComAutomationObject
29642>>>>>>>>>
29642>>>>>>>>>    Function ComId Returns Integer
29644>>>>>>>>>        Integer retVal
29644>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to retVal
29645>>>>>>>>>        Function_Return retVal
29646>>>>>>>>>    End_Function
29647>>>>>>>>>
29647>>>>>>>>>    Procedure Set ComId Integer value
29649>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 6 OLE_VT_I4 to value
29650>>>>>>>>>    End_Procedure
29651>>>>>>>>>
29651>>>>>>>>>    Function ComVisible Returns Boolean
29653>>>>>>>>>        Boolean retVal
29653>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to retVal
29654>>>>>>>>>        Function_Return retVal
29655>>>>>>>>>    End_Function
29656>>>>>>>>>
29656>>>>>>>>>    Procedure Set ComVisible Boolean value
29658>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 12 OLE_VT_BOOL to value
29659>>>>>>>>>    End_Procedure
29660>>>>>>>>>
29660>>>>>>>>>    Function ComDefaultItem Returns Boolean
29662>>>>>>>>>        Boolean retVal
29662>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to retVal
29663>>>>>>>>>        Function_Return retVal
29664>>>>>>>>>    End_Function
29665>>>>>>>>>
29665>>>>>>>>>    Procedure Set ComDefaultItem Boolean value
29667>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 17 OLE_VT_BOOL to value
29668>>>>>>>>>    End_Procedure
29669>>>>>>>>>
29669>>>>>>>>>    Function ComControls Returns Variant
29671>>>>>>>>>        Handle hDispatchDriver
29671>>>>>>>>>        Variant retVal
29671>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29672>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_DISPATCH to retVal
29673>>>>>>>>>        Function_Return retVal
29674>>>>>>>>>    End_Function
29675>>>>>>>>>
29675>>>>>>>>>    Function ComParent Returns Variant
29677>>>>>>>>>        Handle hDispatchDriver
29677>>>>>>>>>        Variant retVal
29677>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29678>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_DISPATCH to retVal
29679>>>>>>>>>        Function_Return retVal
29680>>>>>>>>>    End_Function
29681>>>>>>>>>
29681>>>>>>>>>    Function ComIndex Returns Integer
29683>>>>>>>>>        Handle hDispatchDriver
29683>>>>>>>>>        Integer retVal
29683>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29684>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_I4 to retVal
29685>>>>>>>>>        Function_Return retVal
29686>>>>>>>>>    End_Function
29687>>>>>>>>>
29687>>>>>>>>>    Procedure ComDelete
29689>>>>>>>>>        Handle hDispatchDriver
29689>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
29690>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 16 OLE_VT_VOID
29691>>>>>>>>>    End_Procedure
29692>>>>>>>>>End_Class
29693>>>>>>>>>
29693>>>>>>>Use tWinStructs.pkg
29693>>>>>>>Use Winkern.pkg
29693>>>>>>>
29693>>>>>>>// idle timer used for updates.
29693>>>>>>>Class cCJIdleHandler is a cIdleHandler
29694>>>>>>>    Procedure OnIdle
29696>>>>>>>        Delegate Send Update
29698>>>>>>>    End_Procedure
29699>>>>>>>End_Class
29700>>>>>>>
29700>>>>>>>// xtpThemeOffice2007 was removed by CJ
29700>>>>>>>Define xtpThemeOffice2007 for xtpThemeResource
29700>>>>>>>
29700>>>>>>>// define custom theme names. We use these to turn these into usable
29700>>>>>>>// themes and their dll/ini files. This is in addition to whatever codejock provides
29700>>>>>>>
29700>>>>>>>Enum_List
29700>>>>>>>    Define xtpThemeOffice2007Aqua for 1024
29700>>>>>>>    Define xtpThemeOffice2007Blue
29700>>>>>>>    Define xtpThemeOffice2007Black
29700>>>>>>>    Define xtpThemeOffice2007Silver
29700>>>>>>>    
29700>>>>>>>    Define xtpThemeWindows10Dark
29700>>>>>>>//    Define xtpThemeNativeWindows10 -- already defined in cCJCommandBars.pkg
29700>>>>>>>    
29700>>>>>>>    Define xtpThemeOffice2010
29700>>>>>>>    Define xtpThemeOffice2010Blue
29700>>>>>>>    Define xtpThemeOffice2010Black
29700>>>>>>>    Define xtpThemeOffice2010Silver
29700>>>>>>>    
29700>>>>>>>    Define xtpThemeOffice2013Word
29700>>>>>>>    Define xtpThemeOffice2013Outlook
29700>>>>>>>    Define xtpThemeOffice2013Excel
29700>>>>>>>    Define xtpThemeOffice2013PowerPoint
29700>>>>>>>    Define xtpThemeOffice2013Access
29700>>>>>>>    Define xtpThemeOffice2013Publisher
29700>>>>>>>    Define xtpThemeOffice2013OneNote
29700>>>>>>>    
29700>>>>>>>    Define xtpThemeOffice2016Access
29700>>>>>>>    Define xtpThemeOffice2016AccessBlack
29700>>>>>>>    Define xtpThemeOffice2016Excel
29700>>>>>>>    Define xtpThemeOffice2016OneNote
29700>>>>>>>    Define xtpThemeOffice2016Outlook
29700>>>>>>>    Define xtpThemeOffice2016Publisher
29700>>>>>>>    Define xtpThemeOffice2016PowerPoint
29700>>>>>>>    Define xtpThemeOffice2016Word
29700>>>>>>>    
29700>>>>>>>    Define xtpThemeWindows7
29700>>>>>>>    
29700>>>>>>>    Define xtpThemeVisualStudio2015Blue    
29700>>>>>>>    Define xtpThemeVisualStudio2015Dark
29700>>>>>>>    Define xtpThemeVisualStudio2015Light
29700>>>>>>>    
29700>>>>>>>    Define xtpThemeVisualStudio2017Blue
29700>>>>>>>    Define xtpThemeVisualStudio2017BlueExtra
29700>>>>>>>    Define xtpThemeVisualStudio2017Dark
29700>>>>>>>    Define xtpThemeVisualStudio2017Light
29700>>>>>>>    
29700>>>>>>>    Define xtpThemeVisualStudio2019Blue
29700>>>>>>>    Define xtpThemeVisualStudio2019BlueExtra
29700>>>>>>>    Define xtpThemeVisualStudio2019Dark
29700>>>>>>>    Define xtpThemeVisualStudio2019Light
29700>>>>>>>    
29700>>>>>>>    Define xtpThemeVisualStudio2022Blue
29700>>>>>>>    Define xtpThemeVisualStudio2022BlueExtra
29700>>>>>>>    Define xtpThemeVisualStudio2022Dark
29700>>>>>>>    Define xtpThemeVisualStudio2022Light
29700>>>>>>>End_Enum_List
29700>>>>>>>
29700>>>>>>>// Used for key bindings along with the VK_ defintions
29700>>>>>>>Define xtpKey_None for 0
29700>>>>>>>Define xtpKey_Shift for 4
29700>>>>>>>Define xtpKey_Ctrl for 8
29700>>>>>>>Define xtpKey_Alt for 16
29700>>>>>>>
29700>>>>>>>Define ID_CommandBarsAutoStart for 20001 // start for auto assigned menu items
29700>>>>>>>Define ID_StatusBarsAutoStart  for 10001 // start for auto assigned status panes
29700>>>>>>>Define ID_CommandBarIDAutoStart for 5000 // start for auto assigned commandbar BarIds
29700>>>>>>>Define ID_ImageAutoStart for 5000 // start for auto assigned image ids
29700>>>>>>>
29700>>>>>>>// options for loading and saving command bar layout
29700>>>>>>>Enum_List
29700>>>>>>>    Define rlNoSaveRestore         // don't load or save anything
29700>>>>>>>    Define rlSaveRestoreLayout     // just load and save the layout (position of toolbars)
29700>>>>>>>    Define rlSaveRestoreFullLayout // load/save layout plus addition info such as theme, large icons, etc.
29700>>>>>>>    Define rlSaveRestoreAll        // load and save layout and the controls (useful if you customize)
29700>>>>>>>End_Enum_List
29700>>>>>>>
29700>>>>>>>Enum_List
29700>>>>>>>    Define stNoStretch
29700>>>>>>>    Define stStretch
29700>>>>>>>    Define stStretchShared
29700>>>>>>>End_Enum_List
29700>>>>>>>
29700>>>>>>>// special StatusBar Id valus (piID) values for statusbar panes.
29700>>>>>>>Enum_List
29700>>>>>>>    Define sbpIDAutoAssign for -1    // ID will be auto assigned during pane's end_construct_Object
29700>>>>>>>    Define sbpIDIdlePane   for 0     // Used to display idle text and the DescriptionText of controls on mouse over.
29700>>>>>>>    Define sbpIDCapslock   for 59137 // Indicates whether CAPS Lock is on or off.
29700>>>>>>>    Define sbpIDNumLock    for 59138 // Indicates whether Num Lock is on or off.
29700>>>>>>>    Define sbpIDScrollLock for 59139 // Indicates whether Scroll Lock is on or off
29700>>>>>>>End_Enum_List
29700>>>>>>>
29700>>>>>>>// this keeps track of a global commandbars, which should be the Main menu's commandBars object
29700>>>>>>>// context menus use this to attach to commandbars
29700>>>>>>>Global_Variable Integer ghoCommandBars
29700>>>>>>>Move 0 to ghoCommandBars
29701>>>>>>>
29701>>>>>>>
29701>>>>>>>// DEOFocus is used by the cCJDeoMenuItemClassess and DEOInformation messages. It allows for
29701>>>>>>>// customization of the focus message which is used by FlexTron.
29701>>>>>>>Function DEOAdjustFocus Returns Handle
29703>>>>>>>    Function_Return Self
29704>>>>>>>End_Function
29705>>>>>>>
29705>>>>>>>Function DEOFocus for cUIObject Returns Handle
29707>>>>>>>    Handle hoFocus
29707>>>>>>>    
29707>>>>>>>    Get Focus of desktop to hoFocus
29708>>>>>>>    If (hoFocus) ;        Get DEOAdjustFocus of hoFocus to hoFocus
29711>>>>>>>    
29711>>>>>>>    Function_Return hoFocus
29712>>>>>>>End_Function
29713>>>>>>>
29713>>>>>>>Function DEOFocus for Desktop Returns Handle
29715>>>>>>>    Handle hoFocus
29715>>>>>>>    
29715>>>>>>>    Get Focus to hoFocus
29716>>>>>>>    If (hoFocus) ;        Get DEOAdjustFocus of hoFocus to hoFocus
29719>>>>>>>    
29719>>>>>>>    Function_Return hoFocus
29720>>>>>>>End_Function
29721>>>>>>>
29721>>>>>>>
29721>>>>>>>
29721>>>>>>>
29721>>>>>>>Class cCJCommandBarSystem is a cCJCommandBars
29722>>>>>>>    
29722>>>>>>>    Procedure Construct_Object
29724>>>>>>>        Handle hoTimer hoMain
29724>>>>>>>        Forward Send Construct_Object
29726>>>>>>>        
29726>>>>>>>        // do we save/restore command bars and if so how
29726>>>>>>>        Property Integer peRestoreLayout rlNoSaveRestore
29727>>>>>>>        
29727>>>>>>>        // This allows developers to control when a load layout should not be used
29727>>>>>>>        // because it is out of date. Just keep incrementing this value when you change
29727>>>>>>>        // something that is not compatible
29727>>>>>>>        Property Integer piLayoutBuild 1
29728>>>>>>>        
29728>>>>>>>        // Name used to save a store commandbars. Can be changed to create
29728>>>>>>>        // custom setups.
29728>>>>>>>        Property String  psLayoutSection "CommandBars"
29729>>>>>>>        
29729>>>>>>>        // if true this expects client area and a panel. Auto assigned
29729>>>>>>>        Property Boolean pbMDIMenu False
29730>>>>>>>        
29730>>>>>>>        Property Handle phoStatusBar 0 // assigned automatically
29731>>>>>>>        
29731>>>>>>>        Property Integer pePrivateVisualTheme xtpThemeWhidbey
29732>>>>>>>        Property Boolean pbPrivateEnableCustomization False
29733>>>>>>>        Property Boolean pbPrivateAltDragCustomization False
29734>>>>>>>        Property Integer pePrivateAnimation xtpAnimateWindowsDefault
29735>>>>>>>        Property Boolean pbPrivateLargeIcons False
29736>>>>>>>        Property Boolean pbPrivateShowTextBelowIcons False
29737>>>>>>>        Property Boolean pbPrivateAlwaysShowFullMenus True
29738>>>>>>>        Property Boolean pbPrivateShowFullAfterDelay True
29739>>>>>>>        Property Boolean pbPrivateOfficeStyleDisabledIcons False
29740>>>>>>>        Property Boolean pbPrivateIconsWithShadow True
29741>>>>>>>        Property Boolean pbPrivateToolBarScreenTips True
29742>>>>>>>        Property Boolean pbPrivateShowPopupBarToolTips False
29743>>>>>>>        Property Boolean pbPrivateToolBarAccelTips True
29744>>>>>>>        Property Boolean pbPrivateAutoHideUnusedPopups False
29745>>>>>>>        Property Boolean pbPrivateShowExpandButtonAlways False
29746>>>>>>>        Property Boolean pbPrivateSyncFloatingToolbars True
29747>>>>>>>        Property Boolean pbPrivateFloatToolbarsByDoubleClick False
29748>>>>>>>        Property Boolean pbPrivateAutoResizeIcons False
29749>>>>>>>        
29749>>>>>>>        Property Boolean pbCustomizeShowKeyboardPage False
29750>>>>>>>        Property Boolean pbCustomizeShowOptionsPage False
29751>>>>>>>        
29751>>>>>>>        // This is design-time only.
29751>>>>>>>        Property Boolean pbTabbedWorkspaces False
29752>>>>>>>        // This is mostly design-time only.
29752>>>>>>>        Property Boolean pbCenterTabbedViews True
29753>>>>>>>        Property Handle phoPrivateActions           (Create(Self,U_cCJCommandBarActions))
29754>>>>>>>        Property Handle phoPrivateDesignerControls  (Create(Self,U_cCJCommandBarControls))
29755>>>>>>>        Property Handle phoPrivateKeyBindings       (Create(Self,U_cCJKeyBindings))
29756>>>>>>>        Property Handle phoPrivateOptions           (Create(Self,U_cCJCommandBarsOptions))
29757>>>>>>>        Property Boolean pbPrivateTimerUpdate True
29758>>>>>>>        
29758>>>>>>>        // array of all registered actions (i.e., actions that have a DF object and are COM instanciated)
29758>>>>>>>        Property Handle[] phoRegisteredActions
29759>>>>>>>        
29759>>>>>>>        // array of actions that should actively updated via timer refresh
29759>>>>>>>        Property Handle[] phoActiveUpdates
29760>>>>>>>        
29760>>>>>>>        // array of action IDs that can be reused. We do this because we cannot destroy actions
29760>>>>>>>        Property Integer[] piActionIdPool
29761>>>>>>>        
29761>>>>>>>        // last auto assigned BarId
29761>>>>>>>        Property Integer piLastBarId ID_CommandBarIDAutoStart
29762>>>>>>>        
29762>>>>>>>        // last auto assigned image ID
29762>>>>>>>        Property Integer piLastImageId ID_ImageAutoStart
29763>>>>>>>        
29763>>>>>>>        // used to determine of Load should occur. When the count changes in the
29763>>>>>>>        // the action IDs or barIds it is not safe to reload things.
29763>>>>>>>        Property Integer piLastAssignedDesignTimeID 0
29764>>>>>>>        Property Integer piLastAssignedDesignTimeBarID 0
29765>>>>>>>        
29765>>>>>>>        Property Handle phoTimer 0
29766>>>>>>>        
29766>>>>>>>        Get Create U_cCJIdleHandler to hoTimer
29767>>>>>>>        Set phoTimer to hoTimer
29768>>>>>>>        
29768>>>>>>>        Get Main_Panel_id to hoMain
29769>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
29770>>>>>>>        Set peNeighborhood to nhPublic
29771>>>>>>>        // if commandbar is part of a focusable ring (like a view) we never want it to
29771>>>>>>>        // take the focus
29771>>>>>>>        Set Skip_State to True
29772>>>>>>>        
29772>>>>>>>        Send AssignMDIMenu // determine if this is an MDI commandbar.
29773>>>>>>>    End_Procedure
29774>>>>>>>    
29774>>>>>>>    
29774>>>>>>>    // this will figure out if this is an MDI menu and assign the ghoCommandBars
29774>>>>>>>    // global variable if needed.
29774>>>>>>>    // We assume it is MDI if the main_panel_id is commandbars parent and it is MDI style
29774>>>>>>>    Procedure AssignMDIMenu
29776>>>>>>>        Handle hoMain hoParent
29776>>>>>>>        Boolean bIsMdi
29776>>>>>>>        Get parent to hoParent
29777>>>>>>>        Get Main_Panel_Id to hoMain
29778>>>>>>>        Move (hoMain and hoMain=hoParent and  MDI_State(hoMain)) to bIsMdi
29779>>>>>>>        Set pbMDIMenu to bIsMdi
29780>>>>>>>        If bIsMdi Begin
29782>>>>>>>            Set phoCommandBars of hoMain to Self
29783>>>>>>>            Move Self to ghoCommandBars
29784>>>>>>>        End
29784>>>>>>>>
29784>>>>>>>    End_Procedure
29785>>>>>>>    
29785>>>>>>>    Function IsMDIMenu Returns Boolean
29787>>>>>>>        Boolean bMDI
29787>>>>>>>        Get pbMDIMenu to bMDI
29788>>>>>>>        Function_Return bMDI
29789>>>>>>>    End_Function
29790>>>>>>>    
29790>>>>>>>    // returns the ClientArea DF object if this is an MDI style system.
29790>>>>>>>    Function ClientAreaObject Returns Handle
29792>>>>>>>        Boolean bMDI
29792>>>>>>>        Handle hoClientArea
29792>>>>>>>        Get IsMDIMenu to bMDI
29793>>>>>>>        If (bMDI) Begin
29795>>>>>>>            Get Client_Id of (Parent(Self)) to hoClientArea
29796>>>>>>>        End
29796>>>>>>>>
29796>>>>>>>        Function_Return hoClientArea
29797>>>>>>>    End_Function
29798>>>>>>>    
29798>>>>>>>    // Generic Get and Set property that is used to get and set a DF/COM options property.
29798>>>>>>>    // can be used by any integer or boolean property
29798>>>>>>>    
29798>>>>>>>    Procedure SetComOptionsProperty Handle hmPrivateProperty Handle hmCOMProperty Integer iValue
29800>>>>>>>        Handle hoOptions
29800>>>>>>>        Set hmPrivateProperty to iValue
29801>>>>>>>        If (IsComObjectCreated(Self)) Begin
29803>>>>>>>            Get OptionsObject to hoOptions
29804>>>>>>>            Set hmCOMProperty of hoOptions to iValue
29805>>>>>>>        End
29805>>>>>>>>
29805>>>>>>>    End_Procedure
29806>>>>>>>    
29806>>>>>>>    Function GetComOptionsProperty Handle hmPrivateProperty Handle hmCOMProperty Returns Integer
29808>>>>>>>        Handle hoOptions
29808>>>>>>>        Integer iValue
29808>>>>>>>        If (IsComObjectCreated(Self)) Begin
29810>>>>>>>            Get OptionsObject to hoOptions
29811>>>>>>>            Get hmCOMProperty of hoOptions to iValue
29812>>>>>>>        End
29812>>>>>>>>
29812>>>>>>>        Else Begin
29813>>>>>>>            Get hmPrivateProperty to iValue
29814>>>>>>>        End
29814>>>>>>>>
29814>>>>>>>        Function_Return iValue
29815>>>>>>>    End_Function
29816>>>>>>>    
29816>>>>>>>    // You can call this to handle whatever Theme or Custom theme you have. This is
29816>>>>>>>    // called by Set peVisualTheme
29816>>>>>>>    Procedure ApplyVisualTheme Integer eTheme String sDll String sIni
29818>>>>>>>        Boolean bOk
29818>>>>>>>        Integer iOldAuto
29818>>>>>>>        If (sDll<>"") Begin
29820>>>>>>>            Get LoadResourceImagesFromFile sDll sIni to bOk
29821>>>>>>>            If (not(bOk)) Begin
29823>>>>>>>                Error DFERR_PROGRAM (SFormat("Cannot load Theme resource file %1 %2",sDll,sIni))
29824>>>>>>>>
29824>>>>>>>            End
29824>>>>>>>>
29824>>>>>>>        End
29824>>>>>>>>
29824>>>>>>>        Get pbAutoResizeIcons to iOldAuto
29825>>>>>>>        Set ComVisualTheme to eTheme
29826>>>>>>>        Set pbAutoResizeIcons to iOldAuto
29827>>>>>>>    End_Procedure
29828>>>>>>>    
29828>>>>>>>    
29828>>>>>>>    // This converts our themes to themes that can be used by Codejock and its system
29828>>>>>>>    // of using dlls and inis for some themes. This will change over time and can be
29828>>>>>>>    // augmented for custom values
29828>>>>>>>    Procedure VisualThemeParams Integer ByRef eTheme String ByRef sDll String ByRef sIni
29830>>>>>>>        Case Begin
29830>>>>>>>            Case (eTheme=xtpThemeNativeWindows10)
29832>>>>>>>                Move "Windows10.dll" to sDll
29833>>>>>>>                Move "Windows10Light.ini" to sIni
29834>>>>>>>                Move xtpThemeResource to eTheme
29835>>>>>>>                Case Break
29836>>>>>>>            Case (eTheme=xtpThemeWindows10Dark)
29839>>>>>>>                Move "Windows10.dll" to sDll
29840>>>>>>>                Move "Windows10Dark.ini" to sIni
29841>>>>>>>                Move xtpThemeResource to eTheme
29842>>>>>>>                Case Break
29843>>>>>>>            Case (eTheme=xtpThemeOffice2007)
29846>>>>>>>            Case (eTheme=xtpThemeResource)
29849>>>>>>>            Case (eTheme=xtpThemeOffice2007Blue)
29852>>>>>>>                Move "Office2007.dll" to sDll
29853>>>>>>>                Move "Office2007Blue.ini" to sIni
29854>>>>>>>                Move xtpThemeResource to eTheme
29855>>>>>>>                Case Break
29856>>>>>>>            Case (eTheme=xtpThemeOffice2007Aqua)
29859>>>>>>>                Move "Office2007.dll" to sDll
29860>>>>>>>                Move "Office2007Aqua.ini" to sIni
29861>>>>>>>                Move xtpThemeResource to eTheme
29862>>>>>>>                Case Break
29863>>>>>>>            Case (eTheme=xtpThemeOffice2007Black)
29866>>>>>>>                Move "Office2007.dll" to sDll
29867>>>>>>>                Move "Office2007Black.ini" to sIni
29868>>>>>>>                Move xtpThemeResource to eTheme
29869>>>>>>>                Case Break
29870>>>>>>>            Case (eTheme=xtpThemeOffice2007Silver)
29873>>>>>>>                Move "Office2007.dll" to sDll
29874>>>>>>>                Move "Office2007Silver.ini" to sIni
29875>>>>>>>                Move xtpThemeResource to eTheme
29876>>>>>>>                Case Break
29877>>>>>>>            
29877>>>>>>>            Case (eTheme=xtpThemeOffice2010Blue)
29880>>>>>>>            Case (eTheme=xtpThemeOffice2010)
29883>>>>>>>                Move "Office2010.dll" to sDll
29884>>>>>>>                Move "Office2010Blue.ini" to sIni
29885>>>>>>>                Move xtpThemeResource to eTheme
29886>>>>>>>                Case Break
29887>>>>>>>            Case (eTheme=xtpThemeOffice2010Black)
29890>>>>>>>                Move "Office2010.dll" to sDll
29891>>>>>>>                Move "Office2010Black.ini" to sIni
29892>>>>>>>                Move xtpThemeResource to eTheme
29893>>>>>>>                Case Break
29894>>>>>>>            Case (eTheme=xtpThemeOffice2010Silver)
29897>>>>>>>                Move "Office2010.dll" to sDll
29898>>>>>>>                Move "Office2010Silver.ini" to sIni
29899>>>>>>>                Move xtpThemeResource to eTheme
29900>>>>>>>                Case Break
29901>>>>>>>            
29901>>>>>>>            Case (eTheme=xtpThemeOffice2013)
29904>>>>>>>            Case (eTheme=xtpThemeOffice2013Word)
29907>>>>>>>                Move "Office2013.dll" to sDll
29908>>>>>>>                Move "Office2013Word.ini" to sIni
29909>>>>>>>                Move xtpThemeOffice2013 to eTheme
29910>>>>>>>                Case Break
29911>>>>>>>            Case (eTheme=xtpThemeOffice2013Excel)
29914>>>>>>>                Move "Office2013.dll" to sDll
29915>>>>>>>                Move "Office2013Excel.ini" to sIni
29916>>>>>>>                Move xtpThemeOffice2013 to eTheme
29917>>>>>>>                Case Break
29918>>>>>>>            Case (eTheme=xtpThemeOffice2013PowerPoint)
29921>>>>>>>                Move "Office2013.dll" to sDll
29922>>>>>>>                Move "Office2013PowerPoint.ini" to sIni
29923>>>>>>>                Move xtpThemeOffice2013 to eTheme
29924>>>>>>>                Case Break
29925>>>>>>>            Case (eTheme=xtpThemeOffice2013OutLook)
29928>>>>>>>                Move "Office2013.dll" to sDll
29929>>>>>>>                Move "Office2013OutLook.ini" to sIni
29930>>>>>>>                Move xtpThemeOffice2013 to eTheme
29931>>>>>>>                Case Break
29932>>>>>>>            Case (eTheme=xtpThemeOffice2013Publisher)
29935>>>>>>>                Move "Office2013.dll" to sDll
29936>>>>>>>                Move "Office2013Publisher.ini" to sIni
29937>>>>>>>                Move xtpThemeOffice2013 to eTheme
29938>>>>>>>                Case Break
29939>>>>>>>            Case (eTheme=xtpThemeOffice2013Access)
29942>>>>>>>                Move "Office2013.dll" to sDll
29943>>>>>>>                Move "Office2013Access.ini" to sIni
29944>>>>>>>                Move xtpThemeOffice2013 to eTheme
29945>>>>>>>                Case Break
29946>>>>>>>            Case (eTheme=xtpThemeOffice2013OneNote)
29949>>>>>>>                Move "Office2013.dll" to sDll
29950>>>>>>>                Move "Office2013OneNote.ini" to sIni
29951>>>>>>>                Move xtpThemeOffice2013 to eTheme
29952>>>>>>>                Case Break
29953>>>>>>>                
29953>>>>>>>            Case (eTheme=xtpThemeOffice2016Access)
29956>>>>>>>                Move "Office2016.dll" to sDll
29957>>>>>>>                Move "Office2016AccessWhite.ini" to sIni
29958>>>>>>>                Move xtpThemeOffice2013 to eTheme
29959>>>>>>>                Case Break
29960>>>>>>>            Case (eTheme=xtpThemeOffice2016Excel)
29963>>>>>>>                Move "Office2016.dll" to sDll
29964>>>>>>>                Move "Office2016ExcelWhite.ini" to sIni
29965>>>>>>>                Move xtpThemeOffice2013 to eTheme
29966>>>>>>>                Case Break
29967>>>>>>>            Case (eTheme=xtpThemeOffice2016OneNote)
29970>>>>>>>                Move "Office2016.dll" to sDll
29971>>>>>>>                Move "Office2016OneNoteWhite.ini" to sIni
29972>>>>>>>                Move xtpThemeOffice2013 to eTheme
29973>>>>>>>                Case Break
29974>>>>>>>            Case (eTheme=xtpThemeOffice2016Outlook)
29977>>>>>>>                Move "Office2016.dll" to sDll
29978>>>>>>>                Move "Office2016OutlookWhite.ini" to sIni
29979>>>>>>>                Move xtpThemeOffice2013 to eTheme
29980>>>>>>>                Case Break
29981>>>>>>>            Case (eTheme=xtpThemeOffice2016Publisher)
29984>>>>>>>                Move "Office2016.dll" to sDll
29985>>>>>>>                Move "Office2016PublisherWhite.ini" to sIni
29986>>>>>>>                Move xtpThemeOffice2013 to eTheme
29987>>>>>>>                Case Break
29988>>>>>>>            Case (eTheme=xtpThemeOffice2016PowerPoint)
29991>>>>>>>                Move "Office2016.dll" to sDll
29992>>>>>>>                Move "Office2016PowerPointWhite.ini" to sIni
29993>>>>>>>                Move xtpThemeOffice2013 to eTheme
29994>>>>>>>                Case Break
29995>>>>>>>            Case (eTheme=xtpThemeOffice2016Word)
29998>>>>>>>                Move "Office2016.dll" to sDll
29999>>>>>>>                Move "Office2016WordWhite.ini" to sIni
30000>>>>>>>                Move xtpThemeOffice2013 to eTheme
30001>>>>>>>                Case Break
30002>>>>>>>            
30002>>>>>>>            Case (eTheme=xtpThemeWindows7)
30005>>>>>>>                Move "Windows7.dll" to sDll
30006>>>>>>>                Move "Windows7Blue.ini" to sIni
30007>>>>>>>                Move xtpThemeResource to eTheme
30008>>>>>>>                Case Break
30009>>>>>>>            
30009>>>>>>>            Case (eTheme=xtpThemeVisualStudio2012)
30012>>>>>>>            Case (eTheme=xtpThemeVisualStudio2012Light)
30015>>>>>>>                Move "VisualStudio2012.dll" to sDll
30016>>>>>>>                Move "VisualStudio2012Light.ini" to sIni
30017>>>>>>>                Move xtpThemeVisualStudio2012 to eTheme
30018>>>>>>>                Case Break
30019>>>>>>>            Case (eTheme=xtpThemeVisualStudio2012Dark)
30022>>>>>>>                Move "VisualStudio2012.dll" to sDll
30023>>>>>>>                Move "VisualStudio2012Dark.ini" to sIni
30024>>>>>>>                Move xtpThemeVisualStudio2012Dark to eTheme
30025>>>>>>>                Case Break
30026>>>>>>>            
30026>>>>>>>            Case (eTheme=xtpThemeVisualStudio2015)
30029>>>>>>>            Case (eTheme=xtpThemeVisualStudio2015Blue)
30032>>>>>>>                Move "VisualStudio2015.dll" to sDll
30033>>>>>>>                Move "VisualStudio2015Blue.ini" to sIni
30034>>>>>>>                Move xtpThemeVisualStudio2015 to eTheme
30035>>>>>>>                Case Break
30036>>>>>>>            Case (eTheme=xtpThemeVisualStudio2015Light)
30039>>>>>>>                Move "VisualStudio2015.dll" to sDll
30040>>>>>>>                Move "VisualStudio2015Light.ini" to sIni
30041>>>>>>>                Move xtpThemeVisualStudio2015 to eTheme
30042>>>>>>>                Case Break
30043>>>>>>>            Case (eTheme=xtpThemeVisualStudio2015Dark)
30046>>>>>>>                Move "VisualStudio2015.dll" to sDll
30047>>>>>>>                Move "VisualStudio2015Dark.ini" to sIni
30048>>>>>>>                Move xtpThemeVisualStudio2015Dark to eTheme
30049>>>>>>>                Case Break
30050>>>>>>>
30050>>>>>>>            Case (eTheme=xtpThemeVisualStudio2017)
30053>>>>>>>            Case (eTheme=xtpThemeVisualStudio2017Blue)
30056>>>>>>>                Move "VisualStudio2017.dll" to sDll
30057>>>>>>>                Move "VisualStudio2017Blue.ini" to sIni
30058>>>>>>>                Move xtpThemeVisualStudio2017 to eTheme
30059>>>>>>>                Case Break
30060>>>>>>>            Case (eTheme=xtpThemeVisualStudio2017Light)
30063>>>>>>>                Move "VisualStudio2017.dll" to sDll
30064>>>>>>>                Move "VisualStudio2017Light.ini" to sIni
30065>>>>>>>                Move xtpThemeVisualStudio2017 to eTheme
30066>>>>>>>                Case Break
30067>>>>>>>            Case (eTheme=xtpThemeVisualStudio2017Dark)
30070>>>>>>>                Move "VisualStudio2017.dll" to sDll
30071>>>>>>>                Move "VisualStudio2017Dark.ini" to sIni
30072>>>>>>>                Move xtpThemeVisualStudio2017 to eTheme
30073>>>>>>>                Case Break
30074>>>>>>>                
30074>>>>>>>            Case (eTheme=xtpThemeVisualStudio2019)
30077>>>>>>>            Case (eTheme=xtpThemeVisualStudio2019Blue)
30080>>>>>>>                Move "VisualStudio2019.dll" to sDll
30081>>>>>>>                Move "VisualStudio2019Blue.ini" to sIni
30082>>>>>>>                Move xtpThemeVisualStudio2019 to eTheme
30083>>>>>>>                Case Break
30084>>>>>>>            Case (eTheme=xtpThemeVisualStudio2019BlueExtra)
30087>>>>>>>                Move "VisualStudio2019.dll" to sDll
30088>>>>>>>                Move "VisualStudio2019BlueExtra.ini" to sIni
30089>>>>>>>                Move xtpThemeVisualStudio2019BlueExtra to eTheme
30090>>>>>>>                Case Break
30091>>>>>>>            Case (eTheme=xtpThemeVisualStudio2019Light)
30094>>>>>>>                Move "VisualStudio2019.dll" to sDll
30095>>>>>>>                Move "VisualStudio2019Light.ini" to sIni
30096>>>>>>>                Move xtpThemeVisualStudio2019 to eTheme
30097>>>>>>>                Case Break
30098>>>>>>>            Case (eTheme=xtpThemeVisualStudio2019Dark)
30101>>>>>>>                Move "VisualStudio2019.dll" to sDll
30102>>>>>>>                Move "VisualStudio2019Dark.ini" to sIni
30103>>>>>>>                Move xtpThemeVisualStudio2019Dark to eTheme
30104>>>>>>>                Case Break
30105>>>>>>>                
30105>>>>>>>            Case (eTheme=xtpThemeVisualStudio2022)
30108>>>>>>>            Case (eTheme=xtpThemeVisualStudio2022Blue)
30111>>>>>>>                Move "VisualStudio2022.dll" to sDll
30112>>>>>>>                Move "VisualStudio2022Blue.ini" to sIni
30113>>>>>>>                Move xtpThemeVisualStudio2022 to eTheme
30114>>>>>>>                Case Break
30115>>>>>>>            Case (eTheme=xtpThemeVisualStudio2022BlueExtra)
30118>>>>>>>                Move "VisualStudio2022.dll" to sDll
30119>>>>>>>                Move "VisualStudio2022BlueExtra.ini" to sIni
30120>>>>>>>                Move xtpThemeVisualStudio2022BlueExtra to eTheme
30121>>>>>>>                Case Break
30122>>>>>>>            Case (eTheme=xtpThemeVisualStudio2022Light)
30125>>>>>>>                Move "VisualStudio2022.dll" to sDll
30126>>>>>>>                Move "VisualStudio2022Light.ini" to sIni
30127>>>>>>>                Move xtpThemeVisualStudio2022 to eTheme
30128>>>>>>>                Case Break
30129>>>>>>>            Case (eTheme=xtpThemeVisualStudio2022Dark)
30132>>>>>>>                Move "VisualStudio2022.dll" to sDll
30133>>>>>>>                Move "VisualStudio2022Dark.ini" to sIni
30134>>>>>>>                Move xtpThemeVisualStudio2022Dark to eTheme
30135>>>>>>>                Case Break
30136>>>>>>>            Case Else
30136>>>>>>>                Move "" to sDll
30137>>>>>>>                Move "" to sIni
30138>>>>>>>        Case End
30138>>>>>>>    End_Procedure
30139>>>>>>>    
30139>>>>>>>    
30139>>>>>>>    Procedure Set peVisualTheme Integer eValue
30141>>>>>>>        String sDll sIni
30141>>>>>>>        Integer iOldAuto
30141>>>>>>>        Set pePrivateVisualTheme to eValue
30142>>>>>>>        If (IsComObjectCreated(Self)) Begin
30144>>>>>>>            Send VisualThemeParams (&eValue) (&sDll) (&sIni)
30145>>>>>>>            Send ApplyVisualTheme eValue sDll sIni
30146>>>>>>>        End
30146>>>>>>>>
30146>>>>>>>    End_Procedure
30147>>>>>>>    
30147>>>>>>>    Function peVisualTheme Returns Integer
30149>>>>>>>        Integer eValue
30149>>>>>>>        // always returns our version of the theme because we have custom values
30149>>>>>>>        // If you need the actual theme use ComVisualTheme
30149>>>>>>>        Get pePrivateVisualTheme to eValue
30150>>>>>>>        Function_Return eValue
30151>>>>>>>    End_Function
30152>>>>>>>    
30152>>>>>>>    Procedure Set pbEnableCustomization Boolean bValue
30154>>>>>>>        Set pbPrivateEnableCustomization to bValue
30155>>>>>>>        If (IsComObjectCreated(Self)) Begin
30157>>>>>>>            Send ComEnableCustomization bValue
30158>>>>>>>        End
30158>>>>>>>>
30158>>>>>>>    End_Procedure
30159>>>>>>>    
30159>>>>>>>    Function pbEnableCustomization Returns Boolean
30161>>>>>>>        Boolean bValue
30161>>>>>>>        Get pbPrivateEnableCustomization to bValue
30162>>>>>>>        Function_Return bValue
30163>>>>>>>    End_Function
30164>>>>>>>    
30164>>>>>>>    
30164>>>>>>>    // these are set in the cCJCommandBars's Option object
30164>>>>>>>    
30164>>>>>>>    Procedure Set peAnimation Integer eValue
30166>>>>>>>        Send SetComOptionsProperty set_pePrivateAnimation set_ComAnimation eValue
30167>>>>>>>    End_Procedure
30168>>>>>>>    
30168>>>>>>>    Function peAnimation Returns Integer
30170>>>>>>>        Integer eValue
30170>>>>>>>        Get GetComOptionsProperty get_pePrivateAnimation get_ComAnimation to eValue
30171>>>>>>>        Function_Return eValue
30172>>>>>>>    End_Function
30173>>>>>>>    
30173>>>>>>>    
30173>>>>>>>    Procedure Set pbAlwaysShowFullMenus Boolean bValue
30175>>>>>>>        Send SetComOptionsProperty set_pbPrivateAlwaysShowFullMenus set_ComAlwaysShowFullMenus bValue
30176>>>>>>>    End_Procedure
30177>>>>>>>    
30177>>>>>>>    Function pbAlwaysShowFullMenus Returns Boolean
30179>>>>>>>        Boolean bValue
30179>>>>>>>        Get GetComOptionsProperty get_pbPrivateAlwaysShowFullMenus get_ComAlwaysShowFullMenus to bValue
30180>>>>>>>        Function_Return bValue
30181>>>>>>>    End_Function
30182>>>>>>>    
30182>>>>>>>    Procedure Set pbShowFullAfterDelay Boolean bValue
30184>>>>>>>        Send SetComOptionsProperty set_pbPrivateShowFullAfterDelay set_ComShowFullAfterDelay bValue
30185>>>>>>>    End_Procedure
30186>>>>>>>    
30186>>>>>>>    Function pbShowFullAfterDelay Returns Boolean
30188>>>>>>>        Boolean bValue
30188>>>>>>>        Get GetComOptionsProperty get_pbPrivateShowFullAfterDelay get_ComShowFullAfterDelay to bValue
30189>>>>>>>        Function_Return bValue
30190>>>>>>>    End_Function
30191>>>>>>>    
30191>>>>>>>    Procedure Set pbAutoHideUnusedPopups Boolean bValue
30193>>>>>>>        Send SetComOptionsProperty set_pbPrivateAutoHideUnusedPopups set_ComAutoHideUnusedPopups bValue
30194>>>>>>>    End_Procedure
30195>>>>>>>    
30195>>>>>>>    Function pbAutoHideUnusedPopups Returns Boolean
30197>>>>>>>        Boolean bValue
30197>>>>>>>        Get GetComOptionsProperty get_pbPrivateAutoHideUnusedPopups get_ComAutoHideUnusedPopups to bValue
30198>>>>>>>        Function_Return bValue
30199>>>>>>>    End_Function
30200>>>>>>>    
30200>>>>>>>    Procedure Set pbToolBarScreenTips Boolean bValue
30202>>>>>>>        Send SetComOptionsProperty set_pbPrivateToolBarScreenTips set_ComToolBarScreenTips bValue
30203>>>>>>>    End_Procedure
30204>>>>>>>    
30204>>>>>>>    Function pbToolBarScreenTips Returns Boolean
30206>>>>>>>        Boolean bValue
30206>>>>>>>        Get GetComOptionsProperty get_pbPrivateToolBarScreenTips get_ComToolBarScreenTips to bValue
30207>>>>>>>        Function_Return bValue
30208>>>>>>>    End_Function
30209>>>>>>>    
30209>>>>>>>    Procedure Set pbShowPopupBarToolTips Boolean bValue
30211>>>>>>>        Send SetComOptionsProperty set_pbPrivateShowPopupBarToolTips set_ComShowPopupBarToolTips bValue
30212>>>>>>>    End_Procedure
30213>>>>>>>    
30213>>>>>>>    Function pbShowPopupBarToolTips Returns Boolean
30215>>>>>>>        Boolean bValue
30215>>>>>>>        Get GetComOptionsProperty get_pbPrivateShowPopupBarToolTips get_ComShowPopupBarToolTips to bValue
30216>>>>>>>        Function_Return bValue
30217>>>>>>>    End_Function
30218>>>>>>>    
30218>>>>>>>    Procedure Set pbToolBarAccelTips Boolean bValue
30220>>>>>>>        Send SetComOptionsProperty set_pbPrivateToolBarAccelTips set_ComToolBarAccelTips bValue
30221>>>>>>>    End_Procedure
30222>>>>>>>    
30222>>>>>>>    Function pbToolBarAccelTips Returns Boolean
30224>>>>>>>        Boolean bValue
30224>>>>>>>        Get GetComOptionsProperty get_pbPrivateToolBarAccelTips get_ComToolBarAccelTips to bValue
30225>>>>>>>        Function_Return bValue
30226>>>>>>>    End_Function
30227>>>>>>>    
30227>>>>>>>    Procedure Set pbShowExpandButtonAlways Boolean bValue
30229>>>>>>>        Send SetComOptionsProperty set_pbPrivateShowExpandButtonAlways set_ComShowExpandButtonAlways bValue
30230>>>>>>>    End_Procedure
30231>>>>>>>    
30231>>>>>>>    Function pbShowExpandButtonAlways Returns Boolean
30233>>>>>>>        Boolean bValue
30233>>>>>>>        Get GetComOptionsProperty get_pbPrivateShowExpandButtonAlways get_ComShowExpandButtonAlways to bValue
30234>>>>>>>        Function_Return bValue
30235>>>>>>>    End_Function
30236>>>>>>>    
30236>>>>>>>    Procedure Set pbLargeIcons Boolean bValue
30238>>>>>>>        Send SetComOptionsProperty set_pbPrivateLargeIcons set_ComLargeIcons bValue
30239>>>>>>>    End_Procedure
30240>>>>>>>    
30240>>>>>>>    Function pbLargeIcons Returns Boolean
30242>>>>>>>        Boolean bValue
30242>>>>>>>        Get GetComOptionsProperty get_pbPrivateLargeIcons get_ComLargeIcons to bValue
30243>>>>>>>        Function_Return bValue
30244>>>>>>>    End_Function
30245>>>>>>>    
30245>>>>>>>    Procedure Set pbSyncFloatingToolbars Boolean bValue
30247>>>>>>>        Send SetComOptionsProperty set_pbPrivateSyncFloatingToolbars set_ComSyncFloatingToolbars bValue
30248>>>>>>>    End_Procedure
30249>>>>>>>    
30249>>>>>>>    Function pbSyncFloatingToolbars Returns Boolean
30251>>>>>>>        Boolean bValue
30251>>>>>>>        Get GetComOptionsProperty get_pbPrivateSyncFloatingToolbars get_ComSyncFloatingToolbars to bValue
30252>>>>>>>        Function_Return bValue
30253>>>>>>>    End_Function
30254>>>>>>>    
30254>>>>>>>    Procedure Set pbFloatToolbarsByDoubleClick Boolean bValue
30256>>>>>>>        Send SetComOptionsProperty set_pbPrivateFloatToolbarsByDoubleClick set_ComFloatToolbarsByDoubleClick bValue
30257>>>>>>>    End_Procedure
30258>>>>>>>    
30258>>>>>>>    Function pbFloatToolbarsByDoubleClick Returns Boolean
30260>>>>>>>        Boolean bValue
30260>>>>>>>        Get GetComOptionsProperty get_pbPrivateFloatToolbarsByDoubleClick get_ComFloatToolbarsByDoubleClick to bValue
30261>>>>>>>        Function_Return bValue
30262>>>>>>>    End_Function
30263>>>>>>>    
30263>>>>>>>    Procedure Set pbShowTextBelowIcons Boolean bValue
30265>>>>>>>        Send SetComOptionsProperty set_pbPrivateShowTextBelowIcons set_ComShowTextBelowIcons bValue
30266>>>>>>>    End_Procedure
30267>>>>>>>    
30267>>>>>>>    Function pbShowTextBelowIcons Returns Boolean
30269>>>>>>>        Boolean bValue
30269>>>>>>>        Get GetComOptionsProperty get_pbPrivateShowTextBelowIcons get_ComShowTextBelowIcons to bValue
30270>>>>>>>        Function_Return bValue
30271>>>>>>>    End_Function
30272>>>>>>>    
30272>>>>>>>    Procedure Set pbAltDragCustomization Boolean bValue
30274>>>>>>>        Send SetComOptionsProperty set_pbPrivateAltDragCustomization set_ComAltDragCustomization bValue
30275>>>>>>>    End_Procedure
30276>>>>>>>    
30276>>>>>>>    Function pbAltDragCustomization Returns Boolean
30278>>>>>>>        Boolean bValue
30278>>>>>>>        Get GetComOptionsProperty get_pbPrivateAltDragCustomization get_ComAltDragCustomization to bValue
30279>>>>>>>        Function_Return bValue
30280>>>>>>>    End_Function
30281>>>>>>>    
30281>>>>>>>    Procedure Set pbOfficeStyleDisabledIcons Boolean bValue
30283>>>>>>>        Send SetComOptionsProperty set_pbPrivateOfficeStyleDisabledIcons set_ComOfficeStyleDisabledIcons bValue
30284>>>>>>>    End_Procedure
30285>>>>>>>    
30285>>>>>>>    Function pbOfficeStyleDisabledIcons Returns Boolean
30287>>>>>>>        Boolean bValue
30287>>>>>>>        Get GetComOptionsProperty get_pbPrivateOfficeStyleDisabledIcons get_ComOfficeStyleDisabledIcons to bValue
30288>>>>>>>        Function_Return bValue
30289>>>>>>>    End_Function
30290>>>>>>>    
30290>>>>>>>    Procedure Set pbIconsWithShadow Boolean bValue
30292>>>>>>>        Send SetComOptionsProperty set_pbPrivateIconsWithShadow set_ComIconsWithShadow bValue
30293>>>>>>>    End_Procedure
30294>>>>>>>    
30294>>>>>>>    Function pbIconsWithShadow Returns Boolean
30296>>>>>>>        Boolean bValue
30296>>>>>>>        Get GetComOptionsProperty get_pbPrivateIconsWithShadow get_ComIconsWithShadow to bValue
30297>>>>>>>        Function_Return bValue
30298>>>>>>>    End_Function
30299>>>>>>>    
30299>>>>>>>    Procedure Set pbTimerUpdate Boolean bValue
30301>>>>>>>        Handle hoTimer
30301>>>>>>>        Set pbPrivateTimerUpdate to bValue
30302>>>>>>>        If (IsComObjectCreated(Self)) Begin
30304>>>>>>>            Get phoTimer to hoTimer
30305>>>>>>>            Set pbEnabled of hoTimer to bValue
30306>>>>>>>        End
30306>>>>>>>>
30306>>>>>>>    End_Procedure
30307>>>>>>>    
30307>>>>>>>    Function pbTimerUpdate Returns Boolean
30309>>>>>>>        Boolean bValue
30309>>>>>>>        Get pbPrivateTimerUpdate to bValue
30310>>>>>>>        Function_Return bValue
30311>>>>>>>    End_Function
30312>>>>>>>    
30312>>>>>>>    
30312>>>>>>>    Procedure Set pbAutoResizeIcons Boolean bValue
30314>>>>>>>        Handle hoPaint
30314>>>>>>>        Variant vPaint
30314>>>>>>>        
30314>>>>>>>        Set pbPrivateAutoResizeIcons to bValue
30315>>>>>>>        If (IsComObjectCreated(Self)) Begin
30317>>>>>>>            Get Create (RefClass(cCJPaintManager)) to hoPaint
30318>>>>>>>            Get ComPaintManager to vPaint
30319>>>>>>>            Set pvComObject of hoPaint to vPaint
30320>>>>>>>            Set ComAutoResizeIcons of hoPaint to bValue
30321>>>>>>>            Send Destroy of hoPaint
30322>>>>>>>        End
30322>>>>>>>>
30322>>>>>>>    End_Procedure
30323>>>>>>>    
30323>>>>>>>    Function pbAutoResizeIcons Returns Boolean
30325>>>>>>>        Boolean bValue
30325>>>>>>>        Get pbPrivateAutoResizeIcons to bValue
30326>>>>>>>        Function_Return bValue
30327>>>>>>>    End_Function
30328>>>>>>>    
30328>>>>>>>    
30328>>>>>>>    // returns the CommandBars object handle, which is this object. All menu objects
30328>>>>>>>    // within a command bar will get this via delegation. The exception is context menus (and
30328>>>>>>>    // children of context menus) which uses the global commandbars variable instead.
30328>>>>>>>    Function CommandBarSystemObject Returns Handle
30330>>>>>>>        Function_Return Self
30331>>>>>>>    End_Function
30332>>>>>>>    
30332>>>>>>>    // these are here to make life easier. These return a df-object attached to
30332>>>>>>>    // the following collecions and child objects. These are used enough that
30332>>>>>>>    // an easy access to them was provided.
30332>>>>>>>    
30332>>>>>>>    Function ActionsCollection Returns Handle
30334>>>>>>>        Handle hoPrivate
30334>>>>>>>        Variant vCom
30334>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30336>>>>>>>            Function_Return 0
30337>>>>>>>        End
30337>>>>>>>>
30337>>>>>>>        
30337>>>>>>>        Get phoPrivateActions to hoPrivate
30338>>>>>>>        Get ComActions of hoPrivate to vCom
30339>>>>>>>        Set pvComObject of hoPrivate to vCom
30340>>>>>>>        Function_Return hoPrivate
30341>>>>>>>    End_Function
30342>>>>>>>    
30342>>>>>>>    Function DesignerControlsCollection Returns Handle
30344>>>>>>>        Handle hoPrivate
30344>>>>>>>        Variant vCom
30344>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30346>>>>>>>            Function_Return 0
30347>>>>>>>        End
30347>>>>>>>>
30347>>>>>>>        
30347>>>>>>>        Get phoPrivateDesignerControls to hoPrivate
30348>>>>>>>        Get ComDesignerControls to vCom
30349>>>>>>>        Set pvComObject of hoPrivate to vCom
30350>>>>>>>        Function_Return hoPrivate
30351>>>>>>>    End_Function
30352>>>>>>>    
30352>>>>>>>    Function KeyBindingsCollection Returns Handle
30354>>>>>>>        Handle hoPrivate
30354>>>>>>>        Variant vCom
30354>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30356>>>>>>>            Function_Return 0
30357>>>>>>>        End
30357>>>>>>>>
30357>>>>>>>        
30357>>>>>>>        Get phoPrivateKeyBindings to hoPrivate
30358>>>>>>>        Get ComKeyBindings to vCom
30359>>>>>>>        Set pvComObject of hoPrivate to vCom
30360>>>>>>>        Function_Return hoPrivate
30361>>>>>>>    End_Function
30362>>>>>>>    
30362>>>>>>>    Function OptionsObject Returns Handle
30364>>>>>>>        Handle hoPrivate
30364>>>>>>>        Variant vCom
30364>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30366>>>>>>>            Function_Return 0
30367>>>>>>>        End
30367>>>>>>>>
30367>>>>>>>        
30367>>>>>>>        Get phoPrivateOptions to hoPrivate
30368>>>>>>>        Get ComOptions to vCom
30369>>>>>>>        Set pvComObject of hoPrivate to vCom
30370>>>>>>>        Function_Return hoPrivate
30371>>>>>>>    End_Function
30372>>>>>>>    
30372>>>>>>>    
30372>>>>>>>    // when a commandbars is deactivated, this is called.
30372>>>>>>>    // save layout as needed
30372>>>>>>>    // release all of the action objects in the various arrays
30372>>>>>>>    // make sure that all DF objects are released.
30372>>>>>>>    // One oddity is that at this point the object is deactivated and this causes the
30372>>>>>>>    // statubar's visibleState to always be false. We correct for this in the statusbar's pbVisible
30372>>>>>>>    Procedure ReleaseComObject
30374>>>>>>>        Handle[] hoObjects hoEmpty
30376>>>>>>>        Handle hoTimer hoObj
30376>>>>>>>        Integer i iCount
30376>>>>>>>        Variant vTab
30376>>>>>>>        
30376>>>>>>>        Get phoTimer to hoTimer
30377>>>>>>>        Set pbEnabled of hoTimer to False
30378>>>>>>>        
30378>>>>>>>        Send SaveEnvironment // save layout if needed
30379>>>>>>>        
30379>>>>>>>        // clear the active updates array
30379>>>>>>>        Set phoActiveUpdates to hoEmpty
30380>>>>>>>        
30380>>>>>>>        // release all actions attached to DF objects. This will release actions
30380>>>>>>>        // in context menus
30380>>>>>>>        Get phoRegisteredActions to hoObjects
30381>>>>>>>        Move (SizeOfArray(hoObjects)) to iCount
30382>>>>>>>        For i from 0 to (iCount-1)
30388>>>>>>>>
30388>>>>>>>            // it's possible that we've got actions that have been already been destroyed during shut down (context menus)
30388>>>>>>>            Get Object_Id of hoObjects[i] to hoObj
30389>>>>>>>            If hoObj Begin
30391>>>>>>>                Send ReleaseComObject of hoObj
30392>>>>>>>            End
30392>>>>>>>>
30392>>>>>>>        Loop
30393>>>>>>>>
30393>>>>>>>        Set phoRegisteredActions to hoEmpty
30394>>>>>>>        
30394>>>>>>>        // this should not be needed, but it can't hurt.
30394>>>>>>>        Broadcast Recursive_up Send ReleaseComObject
30396>>>>>>>        Send OnRelease
30397>>>>>>>        Forward Send ReleaseComObject
30399>>>>>>>    End_Procedure
30400>>>>>>>    
30400>>>>>>>    Procedure OnCreateTabbedWorkspace Handle hoTabWorkspace Handle hoTabPaintManager
30402>>>>>>>    End_Procedure
30403>>>>>>>    
30403>>>>>>>    // This sets all of the commandbars properties and the options properties
30403>>>>>>>    Procedure CreateCommandBars
30405>>>>>>>        Handle hWND hoClient hoMain hoOptions hoImageManager hoCommandBar hoTimer hoPaint
30405>>>>>>>        Variant vToolbarObject vImageManager vPaint
30405>>>>>>>        Integer eVisualTheme eAnimation
30405>>>>>>>        Integer iLast
30405>>>>>>>        Boolean bMDIMEnu
30405>>>>>>>        Boolean bEnableCustomization bAltDragCustomization bLargeIcons bShowTextBelowIcons bAlwaysShowFullMenus bShowFullAfterDelay
30405>>>>>>>        Boolean bToolBarScreenTips bToolBarAccelTips bShowPopupBarToolTips bAutoHideUnusedPopups
30405>>>>>>>        Boolean bOfficeStyleDisabledIcons bFloatToolbarsByDoubleClick bSyncFloatingToolbars bShowExpandButtonAlways bIconsWithShadow
30405>>>>>>>        Boolean bTimer bAutoResizeIcons bTabbedWorkspaces
30405>>>>>>>        
30405>>>>>>>        Get pePrivateVisualTheme to eVisualTheme
30406>>>>>>>        Get pbPrivateEnableCustomization to bEnableCustomization
30407>>>>>>>        Get pbPrivateAltDragCustomization to bAltDragCustomization
30408>>>>>>>        Get pePrivateAnimation to eAnimation
30409>>>>>>>        Get pbPrivateLargeIcons to bLargeIcons
30410>>>>>>>        Get pbPrivateShowTextBelowIcons to bShowTextBelowIcons
30411>>>>>>>        Get pbPrivateAlwaysShowFullMenus to bAlwaysShowFullMenus
30412>>>>>>>        Get pbPrivateShowFullAfterDelay to bShowFullAfterDelay
30413>>>>>>>        Get pbPrivateToolBarScreenTips to bToolBarScreenTips
30414>>>>>>>        Get pbPrivateToolBarAccelTips to bToolBarAccelTips
30415>>>>>>>        Get pbPrivateShowPopupBarToolTips to bShowPopupBarToolTips
30416>>>>>>>        Get pbPrivateOfficeStyleDisabledIcons to bOfficeStyleDisabledIcons
30417>>>>>>>        Get pbPrivateIconsWithShadow to bIconsWithShadow
30418>>>>>>>        Get pbPrivateFloatToolbarsByDoubleClick to bFloatToolbarsByDoubleClick
30419>>>>>>>        Get pbPrivateSyncFloatingToolbars   to bSyncFloatingToolbars
30420>>>>>>>        Get pbPrivateShowExpandButtonAlways to bShowExpandButtonAlways
30421>>>>>>>        Get pbPrivateAutoHideUnusedPopups   to bAutoHideUnusedPopups
30422>>>>>>>        Get pbPrivateAutoResizeIcons        to bAutoResizeIcons
30423>>>>>>>        Get pbTabbedWorkspaces to bTabbedWorkspaces
30424>>>>>>>        
30424>>>>>>>        // attach to parent window. This should actually happen automatically
30424>>>>>>>        Get Parent to hoMain
30425>>>>>>>        Get Window_Handle of hoMain to hWND
30426>>>>>>>        Send ComAttachToWindow hWND
30427>>>>>>>        
30427>>>>>>>        // if an MDI menu, find and set the client area
30427>>>>>>>        Get pbMDIMenu to bMDIMenu
30428>>>>>>>        If bMDIMEnu Begin
30430>>>>>>>            Get ClientAreaObject to hoClient
30431>>>>>>>            If hoClient Begin
30433>>>>>>>                If not (Active_State(hoClient)) Begin
30435>>>>>>>                    Send Add_Focus of hoClient hoMain
30436>>>>>>>                End
30436>>>>>>>>
30436>>>>>>>                Get Window_Handle of hoClient to hWND
30437>>>>>>>                Send ComSetMDIClient hWND
30438>>>>>>>            End
30438>>>>>>>>
30438>>>>>>>        End
30438>>>>>>>>
30438>>>>>>>        
30438>>>>>>>        // make sure the first command bar is a main menu
30438>>>>>>>        Get Create U_cCJCommandBar to hoCommandBar
30439>>>>>>>        Get ComAddMenuBar "Main menu" to vToolbarObject
30440>>>>>>>        Set pvComObject of hoCommandBar to vToolbarObject
30441>>>>>>>        Set ComVisible of hoCommandBar to False
30442>>>>>>>        Send Destroy of hoCommandBar
30443>>>>>>>        
30443>>>>>>>        
30443>>>>>>>        // the following are set directly in the object
30443>>>>>>>        Set ComScaleMode to  xtpScalePixel
30444>>>>>>>        //Set ComVisualTheme to eVisualTheme
30444>>>>>>>        Set peVisualTheme to eVisualTheme
30445>>>>>>>        Send ComEnableCustomization bEnableCustomization
30446>>>>>>>        
30446>>>>>>>        // the following are set in the options object
30446>>>>>>>        Get OptionsObject to hoOptions
30447>>>>>>>        // event is completely disabled
30447>>>>>>>        //Set ComUpdatePeriod of hoOptions to 0 // we don't use this method, shut off the timer
30447>>>>>>>        Set ComAltDragCustomization of hoOptions to bAltDragCustomization
30448>>>>>>>        Set ComAnimation of hoOptions to eAnimation
30449>>>>>>>        Set ComLargeIcons of hoOptions to bLargeIcons
30450>>>>>>>        Set ComShowTextBelowIcons of hoOptions to bShowTextBelowIcons
30451>>>>>>>        Set ComShowFullAfterDelay of hoOptions to bShowFullAfterDelay
30452>>>>>>>        Set ComAlwaysShowFullMenus of hoOptions to bAlwaysShowFullMenus
30453>>>>>>>        Set ComToolBarAccelTips of hoOptions to  bToolBarAccelTips
30454>>>>>>>        Set ComToolBarScreenTips of hoOptions to bToolBarScreenTips
30455>>>>>>>        Set ComShowPopupBarToolTips of hoOptions to bShowPopupBarToolTips
30456>>>>>>>        Set ComOfficeStyleDisabledIcons of hoOptions to bOfficeStyleDisabledIcons
30457>>>>>>>        Set ComIconsWithShadow of hoOptions to bIconsWithShadow
30458>>>>>>>        Set ComFloatToolbarsByDoubleClick of hoOptions to bFloatToolbarsByDoubleClick
30459>>>>>>>        Set ComSyncFloatingToolbars of hoOptions to bSyncFloatingToolbars
30460>>>>>>>        Set ComShowExpandButtonAlways of hoOptions to bShowExpandButtonAlways
30461>>>>>>>        Get ComAutoHideUnusedPopups of hoOptions to bAutoHideUnusedPopups
30462>>>>>>>        
30462>>>>>>>        // the following are set in the paint object
30462>>>>>>>        Get Create (RefClass(cCJPaintManager)) to hoPaint
30463>>>>>>>        Get ComPaintManager to vPaint
30464>>>>>>>        Set pvComObject of hoPaint to vPaint
30465>>>>>>>        Set ComAutoResizeIcons of hoPaint to bAutoResizeIcons
30466>>>>>>>        Send Destroy of hoPaint
30467>>>>>>>        
30467>>>>>>>        Send ComEnableActions
30468>>>>>>>        
30468>>>>>>>        // We must explicitly create an image list collection and add it to the object
30468>>>>>>>        Get Create U_cCJImageManager to hoImageManager
30469>>>>>>>        Send CreateComObject of hoImageManager
30470>>>>>>>        Get ComIcons of hoImageManager to vImageManager
30471>>>>>>>        Set ComIcons to vImageManager
30472>>>>>>>        Send destroy of hoImageManager
30473>>>>>>>        // as of 18.3 it appears we must explicitly set this or you get fuzzy images
30473>>>>>>>        Send ComSetDPIScallingOptions of hoOptions False False
30474>>>>>>>        
30474>>>>>>>        // if tabbed workspace, enable it.
30474>>>>>>>        If (bTabbedWorkspaces) Begin
30476>>>>>>>            Send EnableTabbedWorkspace
30477>>>>>>>        End
30477>>>>>>>>
30477>>>>>>>        
30477>>>>>>>        
30477>>>>>>>        // event sent before any child objects are created.
30477>>>>>>>        Send OnCreateCommandBars
30478>>>>>>>        
30478>>>>>>>        // this creates all of the actions and items
30478>>>>>>>        Broadcast Send CreateComInstance
30480>>>>>>>        
30480>>>>>>>        // we keep track of the last action Id and last bar Id auto assigned.
30480>>>>>>>        // We use this to determine if a load environment can be safely done.
30480>>>>>>>        // Anything auto-assigned after this is considered to be dynamic.
30480>>>>>>>        Get LastAssignedId to iLast
30481>>>>>>>        Set piLastAssignedDesignTimeId to iLast
30482>>>>>>>        Get piLastBarId to iLast
30483>>>>>>>        Set piLastAssignedDesignTimeBarId to iLast
30484>>>>>>>        
30484>>>>>>>        Send LoadEnvironment // load layout if needed
30485>>>>>>>        
30485>>>>>>>        Get pbTimerUpdate to bTimer
30486>>>>>>>        If bTimer Begin
30488>>>>>>>            Get phoTimer to hoTimer
30489>>>>>>>            Set pbEnabled of hoTimer to True
30490>>>>>>>        End
30490>>>>>>>>
30490>>>>>>>        
30490>>>>>>>        Send ComRecalcLayout
30491>>>>>>>    End_Procedure
30492>>>>>>>    
30492>>>>>>>    // enable tabbed workspaces. This should only happen when the CON commandbars are
30492>>>>>>>    // being created as part of CreateCommandBars when pbTabbedWorkspaces is true.
30492>>>>>>>    // Use OnCreateTabbedWorkspace to customize
30492>>>>>>>    Procedure EnableTabbedWorkspace
30494>>>>>>>        Variant vTab vPaint
30494>>>>>>>        Handle hoTab hoPaint
30494>>>>>>>        Integer iFgs
30494>>>>>>>        
30494>>>>>>>        Get Create (RefClass(cCJTabWorkspace)) to hoTab
30495>>>>>>>        Get ComShowTabWorkspace True to vTab
30496>>>>>>>        Set pvComObject of hoTab to vTab
30497>>>>>>>        Send ComEnableGroups of hoTab
30498>>>>>>>        Get ComFlags of hoTab to iFgs
30499>>>>>>>        Set ComFlags of hoTab to (iFgs ior xtpWorkspaceShowCloseTab ior xtpWorkspaceShowActiveFiles)
30500>>>>>>>        Get ComPaintManager of hoTab to vPaint
30501>>>>>>>        Get Create (RefClass(cCJTabPaintManager)) to hoPaint
30502>>>>>>>        Set pvComObject of hoPaint to vPaint
30503>>>>>>>        Set ComShowIcons of hoPaint to False
30504>>>>>>>        // event to customize tabbed workspace
30504>>>>>>>        Send OnCreateTabbedWorkspace hoTab hoPaint
30505>>>>>>>        Send Destroy of hoPaint
30506>>>>>>>        Send Destroy of hoTab
30507>>>>>>>    End_Procedure
30508>>>>>>>    
30508>>>>>>>    // Perform an Update. This can be called manually or via the timer
30508>>>>>>>    // it send update to the Statusbar and to all active actions
30508>>>>>>>    Procedure Update
30510>>>>>>>        Handle[] hoActions
30511>>>>>>>        Handle hoStatusBar
30511>>>>>>>        Integer i iActions
30511>>>>>>>        Variant vAction
30511>>>>>>>        If (IsComObjectCreated(Self)) Begin
30513>>>>>>>            Send OnUpdate // update event for commandbars
30514>>>>>>>            Get phoActiveUpdates to hoActions
30515>>>>>>>            Move (SizeOfArray(hoActions)) to iActions
30516>>>>>>>            For i from 0 to (iActions-1)
30522>>>>>>>>
30522>>>>>>>                Send Update of hoActions[i]
30523>>>>>>>            Loop
30524>>>>>>>>
30524>>>>>>>            Get phoStatusBar to hoStatusBar
30525>>>>>>>            If (hoStatusBar) Begin
30527>>>>>>>                Send Update of hoStatusBar
30528>>>>>>>            End
30528>>>>>>>>
30528>>>>>>>        End
30528>>>>>>>>
30528>>>>>>>    End_Procedure
30529>>>>>>>    
30529>>>>>>>    Procedure UpdateAllActions
30531>>>>>>>        Handle[] hoActions
30532>>>>>>>        Integer i iActions
30532>>>>>>>        Variant vAction
30532>>>>>>>        Get phoRegisteredActions to hoActions
30533>>>>>>>        Move (SizeOfArray(hoActions)) to iActions
30534>>>>>>>        For i from 0 to (iActions-1)
30540>>>>>>>>
30540>>>>>>>            Send Update of hoActions[i]
30541>>>>>>>        Loop
30542>>>>>>>>
30542>>>>>>>    End_Procedure
30543>>>>>>>    
30543>>>>>>>    Function LastAssignedId Returns Integer
30545>>>>>>>        Integer[] iActionIdPool
30546>>>>>>>        Integer iId iCount
30546>>>>>>>        Get piActionIdPool to iActionIdPool
30547>>>>>>>        Move (SizeOfArray(iActionIdPool)) to iCount
30548>>>>>>>        If (iCount=0) Begin
30550>>>>>>>            Move ID_CommandBarsAutoStart to iId
30551>>>>>>>        End
30551>>>>>>>>
30551>>>>>>>        Else Begin
30552>>>>>>>            Move (iActionIdPool[0]) to iId
30553>>>>>>>        End
30553>>>>>>>>
30553>>>>>>>        Function_Return iId
30554>>>>>>>    End_Function
30555>>>>>>>    
30555>>>>>>>    Function AssignID Returns Integer // auto assign an Id. Callend in end_construct_object if needed
30557>>>>>>>        Integer[] iActionIdPool
30558>>>>>>>        Integer iId iCount
30558>>>>>>>        Get piActionIdPool to iActionIdPool
30559>>>>>>>        Move (SizeOfArray(iActionIdPool)) to iCount
30560>>>>>>>        If (iCount=0) Begin
30562>>>>>>>            Move ID_CommandBarsAutoStart to iId
30563>>>>>>>            Move iId to iActionIdPool[0]
30564>>>>>>>        End
30564>>>>>>>>
30564>>>>>>>        Else If (iCount=1) Begin
30567>>>>>>>            Move (iActionIdPool[0]+1) to iId
30568>>>>>>>            Move iId to iActionIdPool[0]
30569>>>>>>>        End
30569>>>>>>>>
30569>>>>>>>        Else Begin
30570>>>>>>>            Move iActionIdPool[iCount-1] to iId
30571>>>>>>>            Move (ResizeArray(iActionIdPool,iCount-1)) to iActionIdPool
30572>>>>>>>        End
30572>>>>>>>>
30572>>>>>>>        Set piActionIdPool to iActionIdPool
30573>>>>>>>        Function_Return iId
30574>>>>>>>    End_Function
30575>>>>>>>    
30575>>>>>>>    Procedure ReleaseID Integer iId // might be needed to maintain a pool of actions
30577>>>>>>>        Integer[] iActionIdPool
30578>>>>>>>        Integer iCount iIndex
30578>>>>>>>        Get piActionIdPool to iActionIdPool
30579>>>>>>>        // we must make sure that an action is never added to the pool more than once.
30579>>>>>>>        // this first value is a trick value (the highest number) so we allow a hit on
30579>>>>>>>        // that one. So -1 or 0 is ok
30579>>>>>>>        If (SearchArray(iId,iActionIdPool)<=0) Begin
30581>>>>>>>            Move (SizeOfArray(iActionIdPool)) to iCount
30582>>>>>>>            Move iId to iActionIdPool[iCount]
30583>>>>>>>            Set piActionIdPool to iActionIdPool
30584>>>>>>>        End
30584>>>>>>>>
30584>>>>>>>        Else Begin
30585>>>>>>>            Error DFERR_PROGRAM "Assert: Duplicate released ID in commandbars"
30586>>>>>>>>
30586>>>>>>>        End
30586>>>>>>>>
30586>>>>>>>    End_Procedure
30587>>>>>>>    
30587>>>>>>>    Function AssignBarId Returns Integer
30589>>>>>>>        Integer iId
30589>>>>>>>        Get piLastBarId to iId
30590>>>>>>>        Increment iId
30591>>>>>>>        Set piLastBarId to iId
30592>>>>>>>        Function_Return iId
30593>>>>>>>    End_Function
30594>>>>>>>    
30594>>>>>>>    Procedure AddActiveAction Handle hoAction
30596>>>>>>>        Handle[] hoActiveActions
30597>>>>>>>        Get phoActiveUpdates to hoActiveActions
30598>>>>>>>        If (SearchArray(hoAction,hoActiveActions)=-1) Begin
30600>>>>>>>            Move hoAction to hoActiveActions[SizeOfArray(hoActiveActions)]
30601>>>>>>>            Set phoActiveUpdates to hoActiveActions
30602>>>>>>>        End
30602>>>>>>>>
30602>>>>>>>    End_Procedure
30603>>>>>>>    
30603>>>>>>>    Procedure RegisterAction Handle hoAction
30605>>>>>>>        Boolean bActive
30605>>>>>>>        Handle[] hoActions
30606>>>>>>>        Get phoRegisteredActions to hoActions
30607>>>>>>>        Move hoAction to hoActions[SizeOfArray(hoActions)]
30608>>>>>>>        Set phoRegisteredActions to hoActions
30609>>>>>>>        Get pbActiveUpdate of hoAction to bActive
30610>>>>>>>        If bActive Begin
30612>>>>>>>            Send AddActiveAction hoAction
30613>>>>>>>        End
30613>>>>>>>>
30613>>>>>>>    End_Procedure
30614>>>>>>>    
30614>>>>>>>    // remove action from list of active actions.
30614>>>>>>>    Procedure RemoveActiveAction Handle hoAction
30616>>>>>>>        Handle[] hoActiveActions
30617>>>>>>>        Integer iIndex
30617>>>>>>>        Get phoActiveUpdates to hoActiveActions
30618>>>>>>>        Move (SearchArray(hoAction,hoActiveActions)) to iIndex
30619>>>>>>>        If (iIndex<>-1) Begin
30621>>>>>>>            Move (RemoveFromArray(hoActiveActions,iIndex)) to hoActiveActions
30622>>>>>>>            Set phoActiveUpdates to hoActiveActions
30623>>>>>>>        End
30623>>>>>>>>
30623>>>>>>>    End_Procedure
30624>>>>>>>    
30624>>>>>>>    // remove action from list of registered actions.
30624>>>>>>>    Procedure RemoveRegisteredAction Handle hoAction
30626>>>>>>>        Handle[] hoActiveActions
30627>>>>>>>        Boolean bActive
30627>>>>>>>        Integer iIndex i iCount
30627>>>>>>>        Get phoRegisteredActions to hoActiveActions
30628>>>>>>>        Move (SearchArray(hoAction,hoActiveActions)) to iIndex
30629>>>>>>>        If (iIndex<>-1) Begin
30631>>>>>>>            Move (SizeOfArray(hoActiveActions)) to iCount
30632>>>>>>>            For i from iIndex to (iCount-2)
30638>>>>>>>>
30638>>>>>>>                Move hoActiveActions[i+1] to hoActiveActions[i]
30639>>>>>>>            Loop
30640>>>>>>>>
30640>>>>>>>            Move (ResizeArray(hoActiveActions,iCount-1)) to hoActiveActions
30641>>>>>>>            Set phoRegisteredActions to hoActiveActions
30642>>>>>>>        End
30642>>>>>>>>
30642>>>>>>>        Get pbActiveUpdate of hoAction to bActive
30643>>>>>>>        If bActive Begin
30645>>>>>>>            Send RemoveActiveAction hoAction
30646>>>>>>>        End
30646>>>>>>>>
30646>>>>>>>    End_Procedure
30647>>>>>>>    
30647>>>>>>>    // Retrieves a populated tGrpIconDir struct for the passed icon name. The data is populated
30647>>>>>>>    // from the icon group resource related to the passed icon name.
30647>>>>>>>    // sIcon        - is the name of the icon file e.g. "cut.ico" - this must be an icon resource compiled
30647>>>>>>>    //                into the running application.
30647>>>>>>>    // GroupIconDir - [out] This is the tWinGrpIconDir struct that is populated and passed back
30647>>>>>>>    // Returns      - True of the icon group data could be read otherwise returns false.
30647>>>>>>>    Function GetIconGroupData String sIcon tWinGrpIconDir ByRef GroupIconDir Returns Boolean
30649>>>>>>>        Handle hResInfo hResData
30649>>>>>>>        Pointer lpType lpIconInfo lpDest
30649>>>>>>>        Integer iIcon icIcon
30649>>>>>>>        Longptr iStructSize
30649>>>>>>>        Boolean bOK
30649>>>>>>>        tWinGrpIconDirEntry GroupIconDirEntry
30649>>>>>>>        tWinGrpIconDirEntry GroupIconDirEntry
30649>>>>>>>        
30649>>>>>>>        // Retrieve information about the icon group resource
30649>>>>>>>        Move (FindResource(GetModuleHandleW(0), Utf8ToAnsi(sIcon), RT_GROUP_ICON)) to hResInfo   // get the resource info handle for the icon group resource
30650>>>>>>>        If (hResInfo = 0) ;            Function_Return False
30653>>>>>>>        
30653>>>>>>>        Move (LoadResource(GetModuleHandleW(0), hResInfo)) to hResData               // get the resource data handle from the resource info handle
30654>>>>>>>        If (hResData = 0) ;            Function_Return False
30657>>>>>>>        
30657>>>>>>>        Move (LockResource(hResData)) to lpIconInfo                                 // pointer to tGrpIconDir struct
30658>>>>>>>        If (lpIconInfo = 0) ;            Function_Return False
30661>>>>>>>        
30661>>>>>>>        // Copy the resource information into our Group Icon Dir Struct
30661>>>>>>>        Move (AddressOf(GroupIconDir)) to lpDest
30662>>>>>>>        Move (MemCopy(lpDest, lpIconInfo, 6)) to bOK     // copy the base data
30663>>>>>>>        If (not(bOK)) ;            Function_Return False
30666>>>>>>>        
30666>>>>>>>        Move GroupIconDir.idCount to icIcon                            // get the number of IconDirEntry members
30667>>>>>>>        Move GroupIconDirEntry to GroupIconDir.idEntries[icIcon-1]     // create the empty IconDirEntry array
30668>>>>>>>        Move (SizeOfType(tWinGrpIconDirEntry)) to iStructSize
30669>>>>>>>        Move (lpIconInfo + 6) to lpIconInfo    // advance the memory pointer to the start of the array
30670>>>>>>>        
30670>>>>>>>        For iIcon from 0 to (icIcon-1)    // copy each array member one by one
30676>>>>>>>>
30676>>>>>>>            Move (AddressOf(GroupIconDir.idEntries[iIcon])) to lpDest
30677>>>>>>>            Move (MemCopy(lpDest, lpIconInfo, iStructSize)) to bOK     // copy the base data
30678>>>>>>>            If (not(bOK)) ;                Function_Return False
30681>>>>>>>            
30681>>>>>>>            // advance the memory pointer to the start of the next array member
30681>>>>>>>            Move (lpIconInfo + iStructSize) to lpIconInfo
30682>>>>>>>        Loop
30683>>>>>>>>
30683>>>>>>>        
30683>>>>>>>        Function_Return True
30684>>>>>>>    End_Function
30685>>>>>>>    
30685>>>>>>>    // Loads all icon image resources that belong to the icon group of the passed icon name.
30685>>>>>>>    // The entire icon group is added to the commandbar's icons collection with the same icon ID.
30685>>>>>>>    // sIcon        - Name of the resource group icon we are loading e.g. "Save.ico"
30685>>>>>>>    // iID          - CJ Commandbar ID to be assigned to the icons that we load
30685>>>>>>>    // hoImageIcons - Handle to the command bar's cCJImageManagerIcons object where the icon will be added
30685>>>>>>>    // eImageType   - The commandbar image type, e.g. xtpImageNormal
30685>>>>>>>    // Boolean      - Returns True if successful, otherwise returns False
30685>>>>>>>    Function LoadIconGroupFromResource String sIcon Integer iID Handle hoImageIcons Integer eImageType Returns Boolean
30687>>>>>>>        Integer iIcon
30687>>>>>>>        tWinGrpIconDir GroupIconDir
30687>>>>>>>        tWinGrpIconDir GroupIconDir
30687>>>>>>>        Boolean bRetValue
30687>>>>>>>        
30687>>>>>>>        Get GetIconGroupData sIcon (&GroupIconDir) to bRetValue
30688>>>>>>>        
30688>>>>>>>        If (bRetValue) Begin
30690>>>>>>>            // Iterate the icon entries...
30690>>>>>>>            For iIcon from 0 to (GroupIconDir.idCount-1)
30696>>>>>>>>
30696>>>>>>>                Send ComLoadIconFromResource of hoImageIcons (GetModuleHandleW(0)) GroupIconDir.idEntries[iIcon].nID iID eImageType
30697>>>>>>>            Loop
30698>>>>>>>>
30698>>>>>>>        End
30698>>>>>>>>
30698>>>>>>>        
30698>>>>>>>        Function_Return bRetValue
30699>>>>>>>    End_Function
30700>>>>>>>    
30700>>>>>>>    
30700>>>>>>>    // Adds an image to imagelist. Pass if bmp or icon, the image name and the Id and image type (normal, disabled, etc.)
30700>>>>>>>    // With Bitmaps this will first look for the resource then search for the file in the file path.
30700>>>>>>>    // With Icons it checks for the file first (explained below)
30700>>>>>>>    // return Image Id if success
30700>>>>>>>    Function AddImageType Boolean bIsIcon String sImage Integer iId Integer eImageType Returns Integer
30702>>>>>>>        Handle hBitmap
30702>>>>>>>        Variant vImageManager
30702>>>>>>>        Handle hoImageIcons
30702>>>>>>>        Integer iVoid
30702>>>>>>>        Boolean bOk
30702>>>>>>>        String sFileImage
30702>>>>>>>        
30702>>>>>>>        If (iId=0) Begin
30704>>>>>>>            Get piLastImageId to iId
30705>>>>>>>            Increment iId
30706>>>>>>>            Set piLastImageId to iId
30707>>>>>>>        End
30707>>>>>>>>
30707>>>>>>>        
30707>>>>>>>        Get CreateNamed (RefClass(cCJImageManagerIcons)) "oImageManagerIcons" to hoImageIcons
30708>>>>>>>        Get ComIcons to vImageManager
30709>>>>>>>        Set pvComObject of hoImageIcons to vImageManager
30710>>>>>>>        
30710>>>>>>>        If bIsIcon Begin
30712>>>>>>>            Get LoadIconGroupFromResource sImage iId hoImageIcons eImageType to bOk
30713>>>>>>>            
30713>>>>>>>            If (not(bOk)) Begin
30715>>>>>>>                Get_File_Path sImage to sFileImage // find path in DFPATH, if appropriate
30716>>>>>>>                If (sFileImage<>"") Begin
30718>>>>>>>                    Send ComLoadIcon of hoImageIcons sFileImage iId eImageType
30719>>>>>>>                    Move True to bOk
30720>>>>>>>                End
30720>>>>>>>>
30720>>>>>>>            End
30720>>>>>>>>
30720>>>>>>>        End
30720>>>>>>>>
30720>>>>>>>        Else Begin
30721>>>>>>>            // if a bitmap - load from resource first then from file
30721>>>>>>>            Move (LoadImage(GetModuleHandleW(0), sImage, IMAGE_BITMAP, 0, 0, 0)) to hBitmap
30722>>>>>>>            
30722>>>>>>>            If (hBitmap=0) Begin // the bitmap was not in the EXE resource
30724>>>>>>>                Get_File_Path sImage to sFileImage // find path in DFPATH, if appropriate
30725>>>>>>>                
30725>>>>>>>                If (sFileImage <>"") Begin // The image was found!
30727>>>>>>>                    Send ComLoadBitmap of hoImageIcons sFileImage iId eImageType
30728>>>>>>>                    Move True to bOk
30729>>>>>>>                End
30729>>>>>>>>
30729>>>>>>>            End
30729>>>>>>>>
30729>>>>>>>            
30729>>>>>>>            If hBitmap Begin
30731>>>>>>>                Send ComAddBitmap of hoImageIcons hBitmap iId eImageType False
30732>>>>>>>                Move (DeleteObject(hBitmap)) to iVoid
30733>>>>>>>                Move True to bOk
30734>>>>>>>            End
30734>>>>>>>>
30734>>>>>>>        End
30734>>>>>>>>
30734>>>>>>>        
30734>>>>>>>        Send Destroy of hoImageIcons
30735>>>>>>>        
30735>>>>>>>        Function_Return (If(bOk, iId, 0))
30736>>>>>>>    End_Function
30737>>>>>>>    
30737>>>>>>>    // Adds an image to imagelist.
30737>>>>>>>    // We assume that this is an icon unless the .bmp extension is passed.
30737>>>>>>>    // return True if success
30737>>>>>>>    Function AddImage String sImage Integer iId Integer eImageType Returns Integer
30739>>>>>>>        Boolean bIsIcon
30739>>>>>>>        // Command Bars support many graphics formats including .bmp, .gif, .jpg etc.
30739>>>>>>>        // These are all non-icon formats...
30739>>>>>>>        Move (Right(Lowercase(sImage), 4) = ".ico") to bIsIcon
30740>>>>>>>        Get AddImageType bIsIcon sImage iId eImageType to iId
30741>>>>>>>        Function_Return iId
30742>>>>>>>    End_Function
30743>>>>>>>    
30743>>>>>>>    // Create a StateOptions object and set it as needed. This is used to save and
30743>>>>>>>    // load settings. You could augment this to customize as needed.
30743>>>>>>>    Function CreateStateOptions Integer eLayout Returns Handle
30745>>>>>>>        Handle hoStateOptions
30745>>>>>>>        Variant vStateOptions
30745>>>>>>>        
30745>>>>>>>        Get Create U_cCJStateOptions to hoStateOptions
30746>>>>>>>        Get ComCreateStateOptions to vStateOptions
30747>>>>>>>        Set pvComObject of hoStateOptions to vStateOptions
30748>>>>>>>        
30748>>>>>>>        Set ComLoadSilent of hoStateOptions to True
30749>>>>>>>        
30749>>>>>>>        // If True, only CommandBars that have been customized will be saved.
30749>>>>>>>        Set ComSaveOnlyCustomized of hoStateOptions to True
30750>>>>>>>        
30750>>>>>>>        // If True, the original state of the CommandBars is saved along with the customized state
30750>>>>>>>        // For example, if a button on a toolbar is moved, then both the original and modified states will be saved.
30750>>>>>>>        Set ComSaveOriginalControls of hoStateOptions to True
30751>>>>>>>        
30751>>>>>>>        Set ComSerializeDesignerControls of hoStateOptions to False
30752>>>>>>>        
30752>>>>>>>        // If True, the controls in the CommandBars will be saved. If False, no controls will be saved,
30752>>>>>>>        // regardless of the other settings.
30752>>>>>>>        Set ComSerializeControls of hoStateOptions to (eLayout=rlSaveRestoreAll)
30753>>>>>>>        
30753>>>>>>>        // If True, the images stored in the ImageManager will be saved.
30753>>>>>>>        Set ComSerializeImages of hoStateOptions to False
30754>>>>>>>        
30754>>>>>>>        // If True, the layout of the CommandBars will be saved. The Layout includes information such as
30754>>>>>>>        // bar position, location, and size.
30754>>>>>>>        Set ComSerializeLayout of hoStateOptions to (eLayout<>rlNoSaveRestore)
30755>>>>>>>        
30755>>>>>>>        // If True, the setting on the Keyboard and Options pages of the Customize dialog will
30755>>>>>>>        // be saved. This includes shortcut keys and CommandBar options like large icons and full menus.
30755>>>>>>>        Set ComSerializeOptions of hoStateOptions to (eLayout=rlSaveRestoreAll or eLayout=rlSaveRestoreFullLayout)
30756>>>>>>>        
30756>>>>>>>        // in our model, actions are never saved.
30756>>>>>>>        Set ComSerializeActions of hoStateOptions to False
30757>>>>>>>        
30757>>>>>>>        Function_Return hoStateOptions
30758>>>>>>>    End_Function
30759>>>>>>>    
30759>>>>>>>    Function CreatePropExchangeObject Returns Handle
30761>>>>>>>        Handle hoPropExchange hoGlobal
30761>>>>>>>        Variant vPropExchange vGlobal
30761>>>>>>>        
30761>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30763>>>>>>>            Error DFERR_PROGRAM "Cannot exchange Commands bars data. COM object not created"
30764>>>>>>>>
30764>>>>>>>            Function_Return 0
30765>>>>>>>        End
30765>>>>>>>>
30765>>>>>>>        
30765>>>>>>>        Get Create U_cCJCommandBarsGlobalSettings to hoGlobal
30766>>>>>>>        Get ComGlobalSettings to vGlobal
30767>>>>>>>        Set pvComObject of hoGlobal to vGlobal
30768>>>>>>>        Get ComCreatePropExchange of hoGlobal to vPropExchange
30769>>>>>>>        Get Create U_cCJPropExchange to hoPropExchange
30770>>>>>>>        Set pvComObject of hoPropExchange to vPropExchange
30771>>>>>>>        Send Destroy of hoGlobal
30772>>>>>>>        Function_Return hoPropExchange
30773>>>>>>>    End_Function
30774>>>>>>>    
30774>>>>>>>    // exchange the current commandbar layout with the prop exchange object.
30774>>>>>>>    // pass the exchange object and the section name to save this under. The exchange
30774>>>>>>>    // object contains information if this is a save or load (ComLoading).
30774>>>>>>>    // can be called by any exchange object allowing developers to save a commandbar
30774>>>>>>>    // structure as part of other information they may be saving and loading
30774>>>>>>>    
30774>>>>>>>    Procedure ExchangeLayout Handle hoExchange String sSection Integer eLayout
30776>>>>>>>        Variant vSection vOptions
30776>>>>>>>        Handle hoExchangePref hoStatusBar  hoStateOptions
30776>>>>>>>        Integer iLast iLastBar iStatusBarVisible iBuild iIDBuild iIDCount iIDBarCount
30776>>>>>>>        Boolean bLoad bSerializeControls
30776>>>>>>>        
30776>>>>>>>        If (not(IsComObjectCreated(Self))) Begin
30778>>>>>>>            Error DFERR_PROGRAM "Cannot exchange Commands bars data. COM object not created"
30779>>>>>>>>
30779>>>>>>>            Procedure_Return
30780>>>>>>>        End
30780>>>>>>>>
30780>>>>>>>        
30780>>>>>>>        Get phoStatusBar to hoStatusBar
30781>>>>>>>        Get ComLoading of hoExchange to bLoad
30782>>>>>>>        Get piLastAssignedDesignTimeId to iLast
30783>>>>>>>        Get piLastAssignedDesignTimeBarId to iLastBar
30784>>>>>>>        Get piLayoutBuild to iBuild
30785>>>>>>>        
30785>>>>>>>        Get CreateStateOptions eLayout to hoStateOptions
30786>>>>>>>        Get ComSerializeControls of hoStateOptions to bSerializeControls
30787>>>>>>>        Get pvComObject of hoStateOptions to vOptions
30788>>>>>>>        
30788>>>>>>>        Get Create U_cCJPropExchange to hoExchangePref
30789>>>>>>>        
30789>>>>>>>        Get ComGetSection of hoExchange sSection to vSection
30790>>>>>>>        Set pvComObject of hoExchangePref to vSection
30791>>>>>>>        
30791>>>>>>>        If (not(bLoad)) Begin
30793>>>>>>>            
30793>>>>>>>            Send ComDoPropExchange vSection vOptions
30794>>>>>>>            Send ComExchangeInt of hoExchangePref "IDCount" (&iLast) 0
30795>>>>>>>            Send ComExchangeInt of hoExchangePref "BarIDCount" (&iLastBar) 0
30796>>>>>>>            If (hoStatusBar) Begin
30798>>>>>>>                Get pbVisible of hoStatusBar to iStatusBarVisible
30799>>>>>>>                Send ComExchangeInt of hoExchangePref "IsStatusBarVisible" (&iStatusBarVisible) 1
30800>>>>>>>            End
30800>>>>>>>>
30800>>>>>>>            Send ComExchangeInt of hoExchangePref "Build" (&iBuild) 0
30801>>>>>>>        End
30801>>>>>>>>
30801>>>>>>>        Else Begin
30802>>>>>>>            // get the build from the data. If it is not what we expect, don't load - it is out of date
30802>>>>>>>            Send ComExchangeInt of hoExchangePref "Build" (&iIDBuild) 0
30803>>>>>>>            If (iIDBuild=iBuild) Begin
30805>>>>>>>                Send ComExchangeInt of hoExchangePref "IDCount" (&iIDCount) 0
30806>>>>>>>                Send ComExchangeInt of hoExchangePref "BarIDCount" (&iIDBarCount) 0
30807>>>>>>>                If (hoStatusBar) Begin
30809>>>>>>>                    Send ComExchangeInt of hoExchangePref "IsStatusBarVisible" (&iStatusBarVisible) 1
30810>>>>>>>                    Set pbVisible of hoStatusBar to iStatusBarVisible
30811>>>>>>>                End
30811>>>>>>>>
30811>>>>>>>                
30811>>>>>>>                // do the load if we serialize controls and the control count is ok
30811>>>>>>>                // and if the barId count is ok
30811>>>>>>>                If ((not(bSerializeControls) or iLast=iIDCount) and iLastBar=iIDBarCount) Begin
30813>>>>>>>                    Send ComDoPropExchange vSection vOptions
30814>>>>>>>                End
30814>>>>>>>>
30814>>>>>>>                Send ComRecalcLayout
30815>>>>>>>            End
30815>>>>>>>>
30815>>>>>>>        End
30815>>>>>>>>
30815>>>>>>>        
30815>>>>>>>        Send destroy of hoExchangePref
30816>>>>>>>        Send Destroy of hoStateOptions
30817>>>>>>>    End_Procedure
30818>>>>>>>    
30818>>>>>>>    
30818>>>>>>>    // saves and loads commands info to the registry.
30818>>>>>>>    // While this is private. It provides a good model for how to do this kind of thing.
30818>>>>>>>    Function LoadLayoutFromRegistry Integer eLayout String sKey Returns Boolean
30820>>>>>>>        Handle hoExchange
30820>>>>>>>        Boolean bOk
30820>>>>>>>        String sSection sFullKey
30820>>>>>>>        
30820>>>>>>>        If (eLayout=rlNoSaveRestore) Begin
30822>>>>>>>            Function_Return True
30823>>>>>>>        End
30823>>>>>>>>
30823>>>>>>>        
30823>>>>>>>        Move ("HKEY_CURRENT_USER\" - sKey) to sFullKey
30824>>>>>>>        Get psLayoutSection to sSection
30825>>>>>>>        Get CreatePropExchangeObject to hoExchange
30826>>>>>>>        
30826>>>>>>>        Get ComCreateAsRegistry of hoExchange True sFullKey to bOk
30827>>>>>>>        
30827>>>>>>>        If not (bOk) Begin
30829>>>>>>>            Error DFERR_PROGRAM "Assert: Cannot load from registry"
30830>>>>>>>>
30830>>>>>>>        End
30830>>>>>>>>
30830>>>>>>>        
30830>>>>>>>        If bOk Begin
30832>>>>>>>            Send ExchangeLayout hoExchange sSection eLayout
30833>>>>>>>            Send ComRecalcLayout
30834>>>>>>>        End
30834>>>>>>>>
30834>>>>>>>        Send destroy of hoExchange
30835>>>>>>>        Function_Return bOk
30836>>>>>>>    End_Function
30837>>>>>>>    
30837>>>>>>>    
30837>>>>>>>    Procedure SaveLayoutToRegistry Integer eLayout String sKey
30839>>>>>>>        Handle hoExchange hoRegistry
30839>>>>>>>        Boolean bOk bExists bVoid
30839>>>>>>>        String sSection sFullKey sShortKey
30839>>>>>>>        
30839>>>>>>>        If (eLayout=rlNoSaveRestore) Begin
30841>>>>>>>            Procedure_Return
30842>>>>>>>        End
30842>>>>>>>>
30842>>>>>>>        
30842>>>>>>>        Move ("HKEY_CURRENT_USER\" - sKey) to sFullKey
30843>>>>>>>        Get psLayoutSection to sSection
30844>>>>>>>        Move (sKey - "\" - sSection) to sShortKey
30845>>>>>>>        
30845>>>>>>>        If (sKey="" or sSection="") Begin
30847>>>>>>>            Error DFERR_PROGRAM "Assert: Registry Key or Section name is invalid"
30848>>>>>>>>
30848>>>>>>>        End
30848>>>>>>>>
30848>>>>>>>        
30848>>>>>>>        Get CreatePropExchangeObject to hoExchange
30849>>>>>>>        Get ComCreateAsRegistry of hoExchange False sFullKey to bOk
30850>>>>>>>        
30850>>>>>>>        If not (bOk) Begin
30852>>>>>>>            Error DFERR_PROGRAM "Assert: Cannot save layout to registry"
30853>>>>>>>>
30853>>>>>>>        End
30853>>>>>>>>
30853>>>>>>>        
30853>>>>>>>        If bOk Begin
30855>>>>>>>            // delete the existing registry information for this section
30855>>>>>>>            Get Create U_cRegistry to hoRegistry
30856>>>>>>>            Set pbLazyWrite of hoRegistry to False
30857>>>>>>>            Get KeyExists of hoRegistry sShortKey to bExists
30858>>>>>>>            If bExists Begin
30860>>>>>>>                Get DeleteKey of hoRegistry sShortKey to bVoid
30861>>>>>>>            End
30861>>>>>>>>
30861>>>>>>>            Send Destroy of hoRegistry
30862>>>>>>>            
30862>>>>>>>            Send ExchangeLayout hoExchange sSection eLayout
30863>>>>>>>        End
30863>>>>>>>>
30863>>>>>>>        
30863>>>>>>>        Send destroy of hoExchange
30864>>>>>>>    End_Procedure
30865>>>>>>>    
30865>>>>>>>    
30865>>>>>>>    Function LoadLayoutFromXML Integer eLayout String sFileName Returns Boolean
30867>>>>>>>        Handle hoExchange
30867>>>>>>>        String sSection
30867>>>>>>>        Boolean bOk
30867>>>>>>>        
30867>>>>>>>        If (eLayout=rlNoSaveRestore) Begin
30869>>>>>>>            Function_Return True
30870>>>>>>>        End
30870>>>>>>>>
30870>>>>>>>        
30870>>>>>>>        Get psLayoutSection to sSection
30871>>>>>>>        Get CreatePropExchangeObject to hoExchange
30872>>>>>>>        
30872>>>>>>>        Get ComCreateAsXML of hoExchange True "Settings" to bOk
30873>>>>>>>        
30873>>>>>>>        If not (bOk) Begin
30875>>>>>>>            Error DFERR_PROGRAM "Assert: Cannot load layout from XML"
30876>>>>>>>>
30876>>>>>>>        End
30876>>>>>>>>
30876>>>>>>>        
30876>>>>>>>        If bOk Begin
30878>>>>>>>            Get ComLoadFromFile of hoExchange sFileName to bOk
30879>>>>>>>            If bOk Begin
30881>>>>>>>                Send ExchangeLayout hoExchange sSection eLayout
30882>>>>>>>                Send ComRecalcLayout
30883>>>>>>>            End
30883>>>>>>>>
30883>>>>>>>        End
30883>>>>>>>>
30883>>>>>>>        Send destroy of hoExchange
30884>>>>>>>        Function_Return bOk
30885>>>>>>>    End_Function
30886>>>>>>>    
30886>>>>>>>    Procedure SaveLayoutToXML Integer eLayout String sFileName
30888>>>>>>>        Handle hoExchange
30888>>>>>>>        String sSection
30888>>>>>>>        Boolean bOk
30888>>>>>>>        
30888>>>>>>>        If (eLayout=rlNoSaveRestore) Begin
30890>>>>>>>            Procedure_Return
30891>>>>>>>        End
30891>>>>>>>>
30891>>>>>>>        
30891>>>>>>>        Get psLayoutSection to sSection
30892>>>>>>>        Get CreatePropExchangeObject to hoExchange
30893>>>>>>>        
30893>>>>>>>        Get ComCreateAsXML of hoExchange False "Settings" to bOk
30894>>>>>>>        
30894>>>>>>>        If not (bOk) Begin
30896>>>>>>>            Error DFERR_PROGRAM "Assert: Cannot save XML layout"
30897>>>>>>>>
30897>>>>>>>        End
30897>>>>>>>>
30897>>>>>>>        
30897>>>>>>>        If bOk Begin
30899>>>>>>>            Send ExchangeLayout hoExchange sSection eLayout
30900>>>>>>>            Send ComSaveToFile of hoExchange sFileName
30901>>>>>>>        End
30901>>>>>>>>
30901>>>>>>>        Send destroy of hoExchange
30902>>>>>>>    End_Procedure
30903>>>>>>>    
30903>>>>>>>    // needed in case where no application object is present
30903>>>>>>>    Register_Function pbPreserveEnvironment Returns Boolean
30903>>>>>>>    Register_Function RegistryKeyString Returns String
30903>>>>>>>    
30903>>>>>>>    // Standard SaveEnvironment Behavior. This is called when the commandbar system
30903>>>>>>>    // is closed. It will save environment if:
30903>>>>>>>    // 1) application Object exists and pbPreserveEnvironment is true
30903>>>>>>>    // 2) peRestoreLayout is not rlNoSaveRestore
30903>>>>>>>    // This is good for augmentation if you wish to change the standard save
30903>>>>>>>    Procedure SaveEnvironment
30905>>>>>>>        Handle eLayout
30905>>>>>>>        String sKey
30905>>>>>>>        Boolean bPreserveEnvironment
30905>>>>>>>        
30905>>>>>>>        If (ghoApplication=0) Begin
30907>>>>>>>            Procedure_Return
30908>>>>>>>        End
30908>>>>>>>>
30908>>>>>>>        Get pbPreserveEnvironment of ghoApplication to bPreserveEnvironment
30909>>>>>>>        If bPreserveEnvironment Begin
30911>>>>>>>            Get peRestoreLayout to eLayout
30912>>>>>>>            Get RegistryKeyString of ghoApplication to sKey
30913>>>>>>>            Send SaveLayoutToRegistry eLayout sKey
30914>>>>>>>        End
30914>>>>>>>>
30914>>>>>>>    End_Procedure
30915>>>>>>>    
30915>>>>>>>    
30915>>>>>>>    // Standard LoadEnvironment Behavior. This is called when the commandbar system
30915>>>>>>>    // is created. It will load environment if:
30915>>>>>>>    // 1) application Object exists and pbPreserveEnvironment is true
30915>>>>>>>    // 2) peRestoreLayout is not rlNoSaveRestore
30915>>>>>>>    // This is good for augmentation if you wish to change the standard load.
30915>>>>>>>    
30915>>>>>>>    Procedure LoadEnvironment
30917>>>>>>>        Handle eLayout
30917>>>>>>>        String sKey
30917>>>>>>>        Boolean bOk bPreserveEnvironment
30917>>>>>>>        
30917>>>>>>>        If (ghoApplication=0) Begin
30919>>>>>>>            Procedure_Return
30920>>>>>>>        End
30920>>>>>>>>
30920>>>>>>>        Get pbPreserveEnvironment of ghoApplication to bPreserveEnvironment
30921>>>>>>>        If bPreserveEnvironment Begin
30923>>>>>>>            Get peRestoreLayout to eLayout
30924>>>>>>>            Get RegistryKeyString of ghoApplication to sKey
30925>>>>>>>            Get LoadLayoutFromRegistry eLayout sKey to bOk
30926>>>>>>>        End
30926>>>>>>>>
30926>>>>>>>    End_Procedure
30927>>>>>>>    
30927>>>>>>>    
30927>>>>>>>    Procedure RestoreLayout
30929>>>>>>>        Variant vToolBarObject
30929>>>>>>>        Send ComDeleteAll
30930>>>>>>>        Get ComAddMenuBar "Main menu" to vToolbarObject
30931>>>>>>>        //Broadcast Send CreateComCommandBarInstance
30931>>>>>>>        Broadcast Send CreateComInstance
30933>>>>>>>        Send ComRecalcLayout
30934>>>>>>>    End_Procedure
30935>>>>>>>    
30935>>>>>>>    // used to dock a commandbar, on the same row and to the right of another commandbar
30935>>>>>>>    // used by pbDockNextTo property in toolbars
30935>>>>>>>    Procedure DockNextTo Variant vBarToDock Variant vBarOnLeft
30937>>>>>>>        Integer iLeft iTop iRight iBottom iPosition
30937>>>>>>>        Handle hoBarOnLeft
30937>>>>>>>        Get Create U_cCJCommandBar to hoBarOnLeft
30938>>>>>>>        Set pvComObject of hoBarOnLeft to vBarOnLeft
30939>>>>>>>        Send ComRecalcLayout
30940>>>>>>>        Send ComGetWindowRect of hoBarOnLeft (&iLeft) (&iTop) (&iRight) (&iBottom)
30941>>>>>>>        Get ComPosition of hoBarOnLeft to iPosition
30942>>>>>>>        Send ComDockToolBar vBarToDock (iLeft+1) ((iBottom + iTop)/2) iPosition
30943>>>>>>>        Send Destroy of hoBarOnLeft
30944>>>>>>>    End_Procedure
30945>>>>>>>    
30945>>>>>>>    // This only works if this command bar is placed inside of BasicPanel or if the
30945>>>>>>>    // command bar is in a modal dialog that is placed inside of a Panel
30945>>>>>>>    Function Is_Function Integer iMsgId Integer hoObjId Boolean bDelegateFg Returns Boolean
30947>>>>>>>        Boolean bOk
30947>>>>>>>        Handle hoMain
30947>>>>>>>        // this should get resolved via delegation
30947>>>>>>>        Get Main_Panel_id to hoMain
30948>>>>>>>        If (hoObjId>Desktop and hoMain) ;            Get Is_Function of hoMain iMsgId hoObjId bDelegateFg to bOk
30951>>>>>>>        Function_Return bOk
30952>>>>>>>    End_Function
30953>>>>>>>    
30953>>>>>>>    // these must be registered if you are using this with a non-db application. If you are using this
30953>>>>>>>    // with a non-db application, you should not be calling the DEOInformation method as you will get
30953>>>>>>>    // a runtime programming error.
30953>>>>>>>    
30953>>>>>>>    Register_Function Server Returns Integer
30953>>>>>>>    Register_Function DEO_Object Returns Integer
30953>>>>>>>    Register_Function DEO_Control_Object Returns Integer
30953>>>>>>>    Register_Function File_Field_Index Integer iFile Integer iField Returns Integer
30953>>>>>>>    
30953>>>>>>>    // returns information about the Focus object. If it returns True its a DEO. If a DEO the
30953>>>>>>>    // server, hasRecord, changed and hasindex info will all be returned by ref.
30953>>>>>>>    // If false, these are all unchanged.
30953>>>>>>>    Function DEOInformation Handle ByRef hoServer Boolean ByRef bHasRecord Boolean ByRef bChanged Boolean ByRef bHasIndex Returns Boolean
30955>>>>>>>        Handle hoFocus
30955>>>>>>>        Boolean bISDeo bIsControl
30955>>>>>>>        Integer iFile iField
30955>>>>>>>        Get DEOFocus of desktop to hoFocus
30956>>>>>>>        Get Is_Function Get_Deo_Object hoFocus True to bIsDeo
30957>>>>>>>        If bISDEO Begin
30959>>>>>>>            Move False to bHasRecord
30960>>>>>>>            Move False to bChanged
30961>>>>>>>            Move False to bHasIndex
30962>>>>>>>            Get Server of hoFocus to hoServer
30963>>>>>>>            If hoServer Begin
30965>>>>>>>                Get HasRecord of hoServer to bHasRecord
30966>>>>>>>                Get Should_Save of hoServer to bChanged
30967>>>>>>>                Get Is_Function Get_DEO_Control_Object hoFocus False to bIsControl
30968>>>>>>>                If (bIsControl) Begin
30970>>>>>>>                    Get Data_File of hoFocus to iFile
30971>>>>>>>                    Get Data_Field of hoFocus to iField
30972>>>>>>>                    Move ( iFile>0 and File_Field_Index(hoServer,iFile,iField)>-1) to bHasIndex
30973>>>>>>>                End
30973>>>>>>>>
30973>>>>>>>            End
30973>>>>>>>>
30973>>>>>>>        End
30973>>>>>>>>
30973>>>>>>>        Function_Return bISDeo
30974>>>>>>>    End_Function
30975>>>>>>>    
30975>>>>>>>    // Find all controls within this control with the passed Id.
30975>>>>>>>    Procedure ControlsInControl Integer iId Handle hoControl Variant[] ByRef ArrayOfvControls
30977>>>>>>>        Variant vCommandBar
30977>>>>>>>        Handle  hoCommandBar
30977>>>>>>>        Integer eType
30977>>>>>>>        Get ComType of hoControl to eType
30978>>>>>>>        If (eType=xtpControlPopup or eType=xtpControlButtonPopup or eType=xtpControlSplitButtonPopup) Begin
30980>>>>>>>            Get Create U_cCJCommandBar to hoCommandbar
30981>>>>>>>            Get ComCommandBar of hoControl to vCommandBar
30982>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
30983>>>>>>>            Send ControlsInCommandBar iId hoCommandBar (&ArrayOfvControls)
30984>>>>>>>            Send Destroy of hoCommandBar
30985>>>>>>>        End
30985>>>>>>>>
30985>>>>>>>    End_Procedure
30986>>>>>>>    
30986>>>>>>>    // Find all controls within this commandbar with the passed Id.
30986>>>>>>>    Procedure ControlsInCommandBar Integer iId Handle hoCommandBar Variant[] ByRef ArrayOfvControls
30988>>>>>>>        Variant vNewControl  vNewControls
30988>>>>>>>        Handle  hoNewControl hoNewControls
30988>>>>>>>        Integer iControls i  iNewId
30988>>>>>>>        
30988>>>>>>>        Get Create U_cCJCommandBarControls to hoNewControls
30989>>>>>>>        Get Create U_cCJCommandBarPopup to hoNewControl
30990>>>>>>>        
30990>>>>>>>        Get ComControls of hoCommandBar to vNewControls
30991>>>>>>>        Set pvComObject of hoNewControls to vNewControls
30992>>>>>>>        
30992>>>>>>>        Get ComCount of hoNewControls to iControls
30993>>>>>>>        For i from 1 to iControls
30999>>>>>>>>
30999>>>>>>>            Get ComItem of hoNewControls i to  vNewControl
31000>>>>>>>            Set pvComObject of hoNewControl to vNewControl
31001>>>>>>>            
31001>>>>>>>            Get ComId of hoNewControl to iNewId
31002>>>>>>>            If (iNewId=iId) Begin
31004>>>>>>>                Move vNewControl to ArrayOfvControls[SizeOfArray(ArrayOfvControls)]
31005>>>>>>>            End
31005>>>>>>>>
31005>>>>>>>            
31005>>>>>>>            Send ControlsInControl iId hoNewControl (&ArrayOfvControls)
31006>>>>>>>        Loop
31007>>>>>>>>
31007>>>>>>>        
31007>>>>>>>        Send Destroy of hoNewControl
31008>>>>>>>        Send Destroy of hoNewControls
31009>>>>>>>    End_Procedure
31010>>>>>>>    
31010>>>>>>>    // Find all controls within the commandbarsystem with the passed Id.
31010>>>>>>>    // This can be used to search for Ids within a popup menu item. You only need to use
31010>>>>>>>    // this is there is a chance that there will be more than one control with this id.
31010>>>>>>>    Function FindControls Integer iId Returns Variant[]
31012>>>>>>>        Variant[] ArrayOfvControls
31013>>>>>>>        Variant vCommandBar
31013>>>>>>>        Integer iCommandBars i
31013>>>>>>>        Handle hoCommandBar
31013>>>>>>>        
31013>>>>>>>        Get Create U_cCJCommandBar to hoCommandbar
31014>>>>>>>        Get ComCount to iCommandBars
31015>>>>>>>        For i from 1 to iCommandBars
31021>>>>>>>>
31021>>>>>>>            Get ComItem i to vCommandBar
31022>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
31023>>>>>>>            Send ControlsInCommandBar iId hoCommandBar (&ArrayOfvControls)
31024>>>>>>>        Loop
31025>>>>>>>>
31025>>>>>>>        Send Destroy of hoCommandBar
31026>>>>>>>        Function_Return ArrayOfvControls
31027>>>>>>>    End_Function
31028>>>>>>>    
31028>>>>>>>    
31028>>>>>>>    
31028>>>>>>>    // this sends update to the action of all of the child menu items. Note these are the children
31028>>>>>>>    // of visual control, not the children of the action. This is used to enable, disable all
31028>>>>>>>    // menu items, etc.
31028>>>>>>>    
31028>>>>>>>    Procedure PopupInit Handle hoCommandBar Handle hoCommandBarControls
31030>>>>>>>        Handle hoControl hoAction hoItem
31030>>>>>>>        Variant vAction vControl
31030>>>>>>>        Integer i iCount
31030>>>>>>>        
31030>>>>>>>        Get Create U_cCJCommandBarControl to hoControl
31031>>>>>>>        Get Create U_cCJCommandBarAction to hoAction
31032>>>>>>>        
31032>>>>>>>        Get ComCount of hoCommandBarControls to iCount
31033>>>>>>>        // for each control we must find its action and set the action, which in
31033>>>>>>>        // turn will set this control (and any other control there might be with that action).
31033>>>>>>>        For i from 1 to iCount
31039>>>>>>>>
31039>>>>>>>            Get ComItem of hoCommandBarControls i to vControl
31040>>>>>>>            Set pvComObject of hoControl to vControl
31041>>>>>>>            Get ComAction of hoControl to vAction
31042>>>>>>>            // it is possible that there will be no action, in which case do nothing
31042>>>>>>>            If not (IsNullComObject(vAction)) Begin
31044>>>>>>>                Set pvComObject of hoAction to vAction
31045>>>>>>>                Get ComTag of hoAction to hoItem
31046>>>>>>>                If hoItem Begin
31048>>>>>>>                    Send Update of hoItem
31049>>>>>>>                End
31049>>>>>>>>
31049>>>>>>>            End
31049>>>>>>>>
31049>>>>>>>        Loop
31050>>>>>>>>
31050>>>>>>>        
31050>>>>>>>        Send Destroy of hoAction
31051>>>>>>>        Send Destroy of hoControl
31052>>>>>>>    End_Procedure
31053>>>>>>>    
31053>>>>>>>    
31053>>>>>>>    Procedure OnCreate
31055>>>>>>>        Forward Send OnCreate
31057>>>>>>>        Send CreateCommandBars
31058>>>>>>>    End_Procedure
31059>>>>>>>    
31059>>>>>>>    Procedure OnCreateCommandBars
31061>>>>>>>    End_Procedure
31062>>>>>>>    
31062>>>>>>>    Procedure OnRelease
31064>>>>>>>    End_Procedure
31065>>>>>>>    
31065>>>>>>>    Procedure OnUpdate
31067>>>>>>>    End_Procedure
31068>>>>>>>    
31068>>>>>>>    Procedure OnComExecute Variant llControl
31070>>>>>>>        Handle hoControl hoAction hoActionPointer
31070>>>>>>>        Variant vAction
31070>>>>>>>        Get Create U_cCJCommandBarControl to hoControl
31071>>>>>>>        Get Create U_cCJCommandBarAction to hoAction
31072>>>>>>>        
31072>>>>>>>        Set pvComObject of hoControl to llControl
31073>>>>>>>        Get ComAction of hoControl to vAction
31074>>>>>>>        // There should always be an action but it is possible that all
31074>>>>>>>        // CJ controls will not use this. (colorselector). So we must test.
31074>>>>>>>        If not (IsNullComObject(vAction)) Begin
31076>>>>>>>            Set pvComObject of hoAction to vAction
31077>>>>>>>            Get ComTag of hoAction to hoActionPointer
31078>>>>>>>        End
31078>>>>>>>>
31078>>>>>>>        Send Destroy of hoAction
31079>>>>>>>        Send Destroy of hoControl
31080>>>>>>>        
31080>>>>>>>        If hoActionPointer Begin
31082>>>>>>>            Send Execute of hoActionPointer llControl
31083>>>>>>>        End
31083>>>>>>>>
31083>>>>>>>        Else Begin
31084>>>>>>>            // if for some reason there is no action COM and/or DF object
31084>>>>>>>            // we allow this to be handled by this class as an unhandled
31084>>>>>>>            // execute
31084>>>>>>>            Send OnUnhandledExecute llControl
31085>>>>>>>        End
31085>>>>>>>>
31085>>>>>>>        
31085>>>>>>>    End_Procedure
31086>>>>>>>    
31086>>>>>>>    // this happens when the execute control either has no COM action
31086>>>>>>>    // or it has no DF action object. In such a case, we don't do anything other than
31086>>>>>>>    // call this method. Note that there may be a valid action but fo rsome reason
31086>>>>>>>    // the ComAction property did not get properly assigned by CJ. This seems to happen
31086>>>>>>>    // with the color selector object.
31086>>>>>>>    Procedure OnUnhandledExecute Variant llControl
31088>>>>>>>    End_Procedure
31089>>>>>>>    
31089>>>>>>>    
31089>>>>>>>    Procedure OnComControlSelected Variant llControl
31091>>>>>>>        Handle hoControl hoAction hoActionPointer
31091>>>>>>>        Variant vAction
31091>>>>>>>        If (not(IsNullComObject(llControl))) Begin
31093>>>>>>>            Get Create U_cCJCommandBarControl to hoControl
31094>>>>>>>            Get Create U_cCJCommandBarAction to hoAction
31095>>>>>>>            
31095>>>>>>>            Set pvComObject of hoControl to llControl
31096>>>>>>>            Get ComAction of hoControl to vAction
31097>>>>>>>            If (not(IsNullComObject(vAction))) Begin
31099>>>>>>>                Set pvComObject of hoAction to vAction
31100>>>>>>>                Get ComTag of hoAction to hoActionPointer
31101>>>>>>>            End
31101>>>>>>>>
31101>>>>>>>            Send Destroy of hoAction
31102>>>>>>>            Send Destroy of hoControl
31103>>>>>>>            
31103>>>>>>>            If hoActionPointer Begin
31105>>>>>>>                Send OnSelected of hoActionPointer llControl
31106>>>>>>>            End
31106>>>>>>>>
31106>>>>>>>            Else Begin
31107>>>>>>>                Send OnUnhandledControlSelected llControl
31108>>>>>>>            End
31108>>>>>>>>
31108>>>>>>>        End
31108>>>>>>>>
31108>>>>>>>        
31108>>>>>>>    End_Procedure
31109>>>>>>>    
31109>>>>>>>    Procedure OnUnhandledControlSelected Variant llControl
31111>>>>>>>    End_Procedure
31112>>>>>>>    
31112>>>>>>>    Procedure OnComInitCommandsPopup Variant llCommandBar
31114>>>>>>>        Handle hoCommandBar hoAction hoActionPointer hoCommandBarControl hoCommandBarControls
31114>>>>>>>        Variant vAction vCommandBarControl vCommandBarControls
31114>>>>>>>        Integer eType
31114>>>>>>>        
31114>>>>>>>        Get Create U_cCJCommandbar to hoCommandBar
31115>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
31116>>>>>>>        
31116>>>>>>>        Set pvComObject of hoCommandBar to llCommandBar
31117>>>>>>>        Get ComControls of hoCommandBar to vCommandBarControls
31118>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
31119>>>>>>>        
31119>>>>>>>        Get ComType of hoCommandBar to eType
31120>>>>>>>        
31120>>>>>>>        // if no parent it's a context menu. This is not handled here. It is handled by
31120>>>>>>>        // the context menu during the popup
31120>>>>>>>        Get ComParent of hoCommandBar to vCommandBarControl
31121>>>>>>>        If (not(IsNullComObject(vCommandBarControl))) Begin
31123>>>>>>>            // set all the child objects enabled and disabled
31123>>>>>>>            Send PopupInit hoCommandBar hoCommandBarControls
31124>>>>>>>            
31124>>>>>>>            Get Create U_cCJCommandbarControl to hoCommandBarControl
31125>>>>>>>            Get Create U_cCJCommandbarAction to hoAction
31126>>>>>>>            
31126>>>>>>>            Set pvComObject of hoCommandBarControl to vCommandBarControl
31127>>>>>>>            Get ComAction of hoCommandBarControl to vAction
31128>>>>>>>            // builtin menus like customize may not have actions
31128>>>>>>>            If not (IsNullComObject(vAction)) Begin
31130>>>>>>>                Set pvComObject of hoAction to vAction
31131>>>>>>>                Get ComTag of hoAction to hoActionPointer
31132>>>>>>>            End
31132>>>>>>>>
31132>>>>>>>            
31132>>>>>>>            Send Destroy of hoAction
31133>>>>>>>            Send Destroy of hoCommandBarControl
31134>>>>>>>            
31134>>>>>>>            If hoActionPointer Begin
31136>>>>>>>                Send OnPopupInit of hoActionPointer vCommandBarControl hoCommandBarControls
31137>>>>>>>            End
31137>>>>>>>>
31137>>>>>>>            Else Begin
31138>>>>>>>                Send OnUnhandledInitCommandsPopup llCommandBar
31139>>>>>>>            End
31139>>>>>>>>
31139>>>>>>>        End
31139>>>>>>>>
31139>>>>>>>        
31139>>>>>>>        Send Destroy of hoCommandBarControls
31140>>>>>>>        Send Destroy of hoCommandBar
31141>>>>>>>        
31141>>>>>>>    End_Procedure
31142>>>>>>>    
31142>>>>>>>    Procedure OnUnhandledInitCommandsPopup Variant llCommandBar
31144>>>>>>>    End_Procedure
31145>>>>>>>    
31145>>>>>>>    
31145>>>>>>>    Procedure OnComCustomization Variant vCustomizeOptions
31147>>>>>>>        Handle hoCustomize
31147>>>>>>>        Boolean bShowKeyboardPage bShowOptionsPage
31147>>>>>>>        
31147>>>>>>>        // directly support setting of keyboard and option tab pages.
31147>>>>>>>        // any other customization should be done by developer
31147>>>>>>>        Get pbCustomizeShowKeyboardPage to bShowKeyboardPage
31148>>>>>>>        Get pbCustomizeShowOptionsPage to bShowOptionsPage
31149>>>>>>>        Get Create U_cCJCustomizeOptions to hoCustomize
31150>>>>>>>        Set pvComObject of hoCustomize to vCustomizeOptions
31151>>>>>>>        Set ComShowKeyboardPage of hoCustomize to bShowKeyboardPage
31152>>>>>>>        Set ComShowOptionsPage of hoCustomize to bShowOptionsPage
31153>>>>>>>        Send Destroy of hoCustomize
31154>>>>>>>        
31154>>>>>>>        Forward Send OnComCustomization vCustomizeOptions
31156>>>>>>>    End_Procedure
31157>>>>>>>    
31157>>>>>>>    
31157>>>>>>>    // we do it this way so function DFBinPath is always created. Makes Compiler happy
31157>>>>>>>    Function DFBinPath Returns String
31159>>>>>>>        String sRoot
31159>>>>>>>        Get DFBinPath of ghoApplication to sRoot
31160>>>>>>>        Function_Return sRoot
31161>>>>>>>    End_Function
31162>>>>>>>    
31162>>>>>>>    
31162>>>>>>>    // returns the path for the ResourceImages, which is bin\styles (as of 19)
31162>>>>>>>    //
31162>>>>>>>    Function ResourceImagesPath Returns String
31164>>>>>>>        String sPath
31164>>>>>>>        If ghoApplication Begin
31166>>>>>>>            Get DFBinPath to sPath
31167>>>>>>>            Move (sPath +"\styles") to sPath
31168>>>>>>>        End
31168>>>>>>>>
31168>>>>>>>        Else Begin
31169>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
31170>>>>>>>>
31170>>>>>>>        End
31170>>>>>>>>
31170>>>>>>>        Function_Return sPath
31171>>>>>>>    End_Function
31172>>>>>>>    
31172>>>>>>>    // Loads theme images for File and Ini. This is used with peVisualTheme=xtpThemeResource
31172>>>>>>>    // which must be set *after* this is called.
31172>>>>>>>    //
31172>>>>>>>    // If the sFile is passed relative, it expects the dll to be placed in \Programs
31172>>>>>>>    // which the developer must do.
31172>>>>>>>    //
31172>>>>>>>    // Normally you'd call this within OnCreateCommandBars as follows:
31172>>>>>>>    //    Procedure OnCreateCommandBars
31172>>>>>>>    //        Boolean bOk
31172>>>>>>>    //        Forward Send OnCreateCommandBars
31172>>>>>>>    //        Get LoadResourceImagesFromFile "Office2010.dll" "Office2010Black.ini" to bOk
31172>>>>>>>    //        Set peVisualTheme to xtpThemeResource
31172>>>>>>>    //    End_Procedure
31172>>>>>>>    
31172>>>>>>>    Function LoadResourceImagesFromFile String sFile String sIni Returns Boolean
31174>>>>>>>        Handle hoGlobal hoRes
31174>>>>>>>        Variant vGlobal vRes
31174>>>>>>>        Boolean bOk
31174>>>>>>>        String sDir
31174>>>>>>>        Get Create (RefClass(cCJCommandBarsGlobalSettings)) to hoGlobal
31175>>>>>>>        Send CreateComObject of hoGlobal
31176>>>>>>>        If (not(IsFileNameQualified(sFile))) Begin
31178>>>>>>>            Get ResourceImagesPath to sDir
31179>>>>>>>            Move (sDir + "\"+ sFile) to sFile
31180>>>>>>>        End
31180>>>>>>>>
31180>>>>>>>        Get ComResourceImages of hoGlobal to vRes
31181>>>>>>>        Get Create (RefClass(cCJResourceImages)) to hoRes
31182>>>>>>>        Set pvComObject of hoRes to vRes
31183>>>>>>>        Get ComLoadFromFile of hoRes sFile sIni to bOk
31184>>>>>>>        Send Destroy of hoRes
31185>>>>>>>        Send Destroy of hoGlobal
31186>>>>>>>        Function_Return bOk
31187>>>>>>>    End_Function
31188>>>>>>>    
31188>>>>>>>End_Class
31189>>>>>>>
31189>>>>>>>Class cCJCommandBarMixin is a Mixin
31190>>>>>>>    
31190>>>>>>>    Procedure Define_cCJCommandBarMixin
31192>>>>>>>        
31192>>>>>>>        Property Integer piBarID            0
31193>>>>>>>        
31193>>>>>>>        Property Boolean pbDockNextTo             True
31194>>>>>>>        
31194>>>>>>>        Property Integer peBarPosition xtpBarTop
31195>>>>>>>        
31195>>>>>>>        Property Boolean pbEnableDocking           True
31196>>>>>>>        Property Boolean pbHideWrap                False
31197>>>>>>>        Property Integer peStretched               stNoStretch
31198>>>>>>>        
31198>>>>>>>        Property Boolean pbPrivateCloseable        True
31199>>>>>>>        Property Boolean pbPrivateCustomizable     True
31200>>>>>>>        Property Boolean pbPrivateEnableAnimation  False
31201>>>>>>>        Property Boolean pbPrivateShowExpandButton True
31202>>>>>>>        Property String  psPrivateTitle            "Toolbar"
31203>>>>>>>        Property Boolean pbPrivateVisible          True
31204>>>>>>>        Property Integer piPrivateWidth            0
31205>>>>>>>        Property Boolean pbPrivateGripper          True
31206>>>>>>>        
31206>>>>>>>        Set peNeighborhood to nhNo
31207>>>>>>>        
31207>>>>>>>    End_Procedure
31208>>>>>>>    
31208>>>>>>>    // Generic Get and Set property that is used to get and set a DF/COM property.
31208>>>>>>>    // can be used by any integer or boolean property
31208>>>>>>>    
31208>>>>>>>    Procedure SetComProperty Handle hmPrivateProperty Handle hmCOMProperty Integer iValue
31210>>>>>>>        Set hmPrivateProperty to iValue
31211>>>>>>>        If (IsComObjectCreated(Self)) Begin
31213>>>>>>>            Set hmCOMProperty to iValue
31214>>>>>>>        End
31214>>>>>>>>
31214>>>>>>>    End_Procedure
31215>>>>>>>    
31215>>>>>>>    Function GetComProperty Handle hmPrivateProperty Handle hmCOMProperty Returns Integer
31217>>>>>>>        Integer iValue
31217>>>>>>>        If (IsComObjectCreated(Self)) Begin
31219>>>>>>>            Get hmCOMProperty to iValue
31220>>>>>>>        End
31220>>>>>>>>
31220>>>>>>>        Else Begin
31221>>>>>>>            Get hmPrivateProperty to iValue
31222>>>>>>>        End
31222>>>>>>>>
31222>>>>>>>        Function_Return iValue
31223>>>>>>>    End_Function
31224>>>>>>>    
31224>>>>>>>    Procedure Set pbCloseable Boolean bValue
31226>>>>>>>        Send SetComProperty set_pbPrivateCloseable set_ComCloseable bValue
31227>>>>>>>    End_Procedure
31228>>>>>>>    
31228>>>>>>>    Function pbCloseable Returns Boolean
31230>>>>>>>        Boolean bValue
31230>>>>>>>        Get GetComProperty get_pbPrivateCloseable get_ComCloseable to bValue
31231>>>>>>>        Function_Return bValue
31232>>>>>>>    End_Function
31233>>>>>>>    
31233>>>>>>>    Procedure Set pbCustomizable Boolean bValue
31235>>>>>>>        Send SetComProperty set_pbPrivateCustomizable set_ComCustomizable bValue
31236>>>>>>>    End_Procedure
31237>>>>>>>    
31237>>>>>>>    Function pbCustomizable Returns Boolean
31239>>>>>>>        Boolean bValue
31239>>>>>>>        Get GetComProperty get_pbPrivateCustomizable get_ComCustomizable to bValue
31240>>>>>>>        Function_Return bValue
31241>>>>>>>    End_Function
31242>>>>>>>    
31242>>>>>>>    Procedure Set pbEnableAnimation Boolean bValue
31244>>>>>>>        Send SetComProperty set_pbPrivateEnableAnimation set_ComEnableAnimation bValue
31245>>>>>>>    End_Procedure
31246>>>>>>>    
31246>>>>>>>    Function pbEnableAnimation Returns Boolean
31248>>>>>>>        Boolean bValue
31248>>>>>>>        Get GetComProperty get_pbPrivateEnableAnimation get_ComEnableAnimation to bValue
31249>>>>>>>        Function_Return bValue
31250>>>>>>>    End_Function
31251>>>>>>>    
31251>>>>>>>    Procedure Set pbShowExpandButton Boolean bValue
31253>>>>>>>        Send SetComProperty set_pbPrivateShowExpandButton set_ComShowExpandButton bValue
31254>>>>>>>    End_Procedure
31255>>>>>>>    
31255>>>>>>>    Function pbShowExpandButton Returns Boolean
31257>>>>>>>        Boolean bValue
31257>>>>>>>        Get GetComProperty get_pbPrivateShowExpandButton get_ComShowExpandButton to bValue
31258>>>>>>>        Function_Return bValue
31259>>>>>>>    End_Function
31260>>>>>>>    
31260>>>>>>>    Procedure Set pbVisible Boolean bValue
31262>>>>>>>        Send SetComProperty set_pbPrivateVisible set_ComVisible bValue
31263>>>>>>>    End_Procedure
31264>>>>>>>    
31264>>>>>>>    Function pbVisible Returns Boolean
31266>>>>>>>        Boolean bValue
31266>>>>>>>        Get GetComProperty get_pbPrivateVisible get_ComVisible to bValue
31267>>>>>>>        Function_Return bValue
31268>>>>>>>    End_Function
31269>>>>>>>    
31269>>>>>>>    Procedure Set piWidth Integer iValue
31271>>>>>>>        Send SetComProperty set_piPrivateWidth set_ComWidth iValue
31272>>>>>>>    End_Procedure
31273>>>>>>>    
31273>>>>>>>    Function piWidth Returns Integer
31275>>>>>>>        Integer iValue
31275>>>>>>>        Get GetComProperty get_piPrivateWidth get_ComWidth to iValue
31276>>>>>>>        Function_Return iValue
31277>>>>>>>    End_Function
31278>>>>>>>    
31278>>>>>>>    Procedure Set pbGripper Boolean bValue
31280>>>>>>>        Set pbPrivateGripper to bValue
31281>>>>>>>        If (IsComObjectCreated(Self)) Begin
31283>>>>>>>            Send ComModifyStyle (If(not(bValue),xtp_CBRS_GRIPPER,0)) (If(bValue,xtp_CBRS_GRIPPER,0))
31284>>>>>>>        End
31284>>>>>>>>
31284>>>>>>>    End_Procedure
31285>>>>>>>    
31285>>>>>>>    Function pbGripper Returns Boolean
31287>>>>>>>        Boolean bValue
31287>>>>>>>        Get pbPrivateGripper to bValue
31288>>>>>>>        Function_Return bValue
31289>>>>>>>    End_Function
31290>>>>>>>    
31290>>>>>>>    Procedure Set psTitle String sValue
31292>>>>>>>        Set psPrivateTitle to sValue
31293>>>>>>>        If (IsComObjectCreated(Self)) Begin
31295>>>>>>>            Set ComTitle to sValue
31296>>>>>>>        End
31296>>>>>>>>
31296>>>>>>>    End_Procedure
31297>>>>>>>    
31297>>>>>>>    Function psTitle Returns String
31299>>>>>>>        String sValue
31299>>>>>>>        If (IsComObjectCreated(Self)) Begin
31301>>>>>>>            Get ComTitle to sValue
31302>>>>>>>        End
31302>>>>>>>>
31302>>>>>>>        Else Begin
31303>>>>>>>            Get psPrivateTitle to sValue
31304>>>>>>>        End
31304>>>>>>>>
31304>>>>>>>        Function_Return sValue
31305>>>>>>>    End_Function
31306>>>>>>>    
31306>>>>>>>    Procedure InitComInstance
31308>>>>>>>        Handle hoCommandBars hoNextTo
31308>>>>>>>        Variant vCommandBar vNextTo
31308>>>>>>>        String sTitle
31308>>>>>>>        Integer iBarId iWidth iDockFgs iBars eBarPosition
31308>>>>>>>        Integer eNextToPosition eNextToType iDockingFlags eStretched
31308>>>>>>>        Boolean bCloseable bCustomizable bEnableAnimation bShowExpandButton
31308>>>>>>>        Boolean bEnableDocking bHideWrap
31308>>>>>>>        Boolean bGripper bDockNextTo bNextToVisible
31308>>>>>>>        
31308>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31309>>>>>>>        
31309>>>>>>>        Get psPrivateTitle to sTitle
31310>>>>>>>        Get pbPrivateCloseable to bCloseable
31311>>>>>>>        Get pbPrivateCustomizable to bCustomizable
31312>>>>>>>        Get pbPrivateEnableAnimation to bEnableAnimation
31313>>>>>>>        Get pbPrivateShowExpandButton to bShowExpandButton
31314>>>>>>>        Get piPrivateWidth to iWidth
31315>>>>>>>        Get pbEnableDocking to bEnableDocking
31316>>>>>>>        Get pbHideWrap to bHideWrap
31317>>>>>>>        Get peStretched to eStretched
31318>>>>>>>        
31318>>>>>>>        Get pbPrivateGripper to bGripper
31319>>>>>>>        Get piBarId to iBarId
31320>>>>>>>        Get pbDockNextTo to bDockNextTo
31321>>>>>>>        Get peBarPosition to eBarPosition
31322>>>>>>>        
31322>>>>>>>        
31322>>>>>>>        Get CreateCommandBar to vCommandBar
31323>>>>>>>        
31323>>>>>>>        Set pvComObject to vCommandBar
31324>>>>>>>        Set ComTitle to sTitle
31325>>>>>>>        Set ComCloseable to bCloseable
31326>>>>>>>        Set ComCustomizable to bCustomizable
31327>>>>>>>        Set ComEnableAnimation to bEnableAnimation
31328>>>>>>>        Set ComShowExpandButton to bShowExpandButton
31329>>>>>>>        
31329>>>>>>>        Send ComModifyStyle (If(not(bGripper),xtp_CBRS_GRIPPER,0)) (If(bGripper,xtp_CBRS_GRIPPER,0))
31330>>>>>>>        
31330>>>>>>>        If (iBarId<>0) Begin
31332>>>>>>>            Set ComBarID to iBarId
31333>>>>>>>        End
31333>>>>>>>>
31333>>>>>>>        Else Begin
31334>>>>>>>            Get ComBarId to iBarId
31335>>>>>>>            Set piBarID to iBarId
31336>>>>>>>        End
31336>>>>>>>>
31336>>>>>>>        
31336>>>>>>>        // enabled docking is determiend by iORing flags. We simplify docking to allow all or
31336>>>>>>>        // none. In addition we support hidewrap and the two stretched flags.
31336>>>>>>>        If bEnableDocking Begin
31338>>>>>>>            Move (iDockingFlags ior xtpFlagAlignAny ior xtpFlagFloating) to iDockingFlags
31339>>>>>>>        End
31339>>>>>>>>
31339>>>>>>>        If bHideWrap Begin
31341>>>>>>>            Move (iDockingFlags ior xtpFlagHideWrap) to iDockingFlags
31342>>>>>>>        End
31342>>>>>>>>
31342>>>>>>>        If (eStretched=stStretch) Begin
31344>>>>>>>            Move (iDockingFlags ior xtpFlagStretched) to iDockingFlags
31345>>>>>>>        End
31345>>>>>>>>
31345>>>>>>>        Else If (eStretched=stStretchShared) Begin
31348>>>>>>>            Move (iDockingFlags ior xtpFlagStretchedShared) to iDockingFlags
31349>>>>>>>        End
31349>>>>>>>>
31349>>>>>>>        Send ComEnableDocking iDockingFlags
31350>>>>>>>        
31350>>>>>>>        If (iWidth>0) Begin
31352>>>>>>>            Set ComWidth to iWidth
31353>>>>>>>        End
31353>>>>>>>>
31353>>>>>>>        
31353>>>>>>>        // if we DockNextTo we want to doc "next" to the last command bar that is located
31353>>>>>>>        // in the same position (e.g. top, bottom, left, right). "Next" is relative to the position
31353>>>>>>>        // where top/bottom is Right-of and let/right is below. Menubars are excluded from this logic
31353>>>>>>>        // if we DockNextTo we want to doc "next" to the last command bar that is located
31353>>>>>>>        // in the same position (e.g. top, bottom, left, right). "Next" is relative to the position
31353>>>>>>>        // where top/bottom is Right-of and let/right is below. Menubars are excluded from this logic
31353>>>>>>>        If bDockNextTo Begin
31355>>>>>>>            Get ComCount of hoCommandBars to iBars
31356>>>>>>>            Get Create U_cCJCommandBar to hoNextTo
31357>>>>>>>            While (iBars>1)
31361>>>>>>>                Get ComItem of hoCommandBars (iBars-1) to vNextTo
31362>>>>>>>                Set pvComObject of hoNextTo to vNextTo
31363>>>>>>>                Get ComVisible of hoNextTo to bNextToVisible
31364>>>>>>>                Get ComPosition of hoNextTo to eNextToPosition
31365>>>>>>>                Get ComType of hoNextTo to eNextToType
31366>>>>>>>                If (bNextToVisible and eNextToType=xtpBarTypeNormal and eNextToPosition=eBarPosition) Begin
31368>>>>>>>                    Send DockNextTo vCommandBar vNextTo
31369>>>>>>>                    Move 0 to iBars
31370>>>>>>>                End
31370>>>>>>>>
31370>>>>>>>                Decrement iBars
31371>>>>>>>            Loop
31372>>>>>>>>
31372>>>>>>>            Send Destroy of hoNextTo
31373>>>>>>>        End
31373>>>>>>>>
31373>>>>>>>        
31373>>>>>>>    End_Procedure
31374>>>>>>>    
31374>>>>>>>    // This is called when the commandbar is created and is bound to the commandbar object.
31374>>>>>>>    Procedure OnCreate
31376>>>>>>>    End_Procedure
31377>>>>>>>    
31377>>>>>>>    Procedure End_Construct_Object
31379>>>>>>>        Integer iID
31379>>>>>>>        Handle hoCommandBars
31379>>>>>>>        Get piBarId to iID
31380>>>>>>>        If (iID=0) Begin
31382>>>>>>>            Get CommandBarSystemObject to hoCommandBars
31383>>>>>>>            Get AssignBarId of hoCommandBars to iId
31384>>>>>>>            Set piBarId to iID
31385>>>>>>>        End
31385>>>>>>>>
31385>>>>>>>        Forward Send End_Construct_Object
31387>>>>>>>    End_Procedure
31388>>>>>>>    
31388>>>>>>>End_Class
31389>>>>>>>
31389>>>>>>>
31389>>>>>>>
31389>>>>>>>
31389>>>>>>>
31389>>>>>>>Class cCJAbstractCommandBar is a cCJCommandBar
31390>>>>>>>    
31390>>>>>>>    Import_Class_Protocol cCJCommandBarMixin
31391>>>>>>>    
31391>>>>>>>    Procedure Construct_Object
31393>>>>>>>        Forward Send Construct_Object
31395>>>>>>>        Send Define_cCJCommandBarMixin
31396>>>>>>>    End_Procedure
31397>>>>>>>    
31397>>>>>>>    // Must be defined in a sub-class
31397>>>>>>>    Function CreateCommandBar Returns Variant
31399>>>>>>>        Error DFERR_PROGRAM "Assert: CreateCommandBar not defined in superclass"
31400>>>>>>>>
31400>>>>>>>    End_Function
31401>>>>>>>    
31401>>>>>>>    Procedure CreateComInstance
31403>>>>>>>        Handle hoCommandBarControls
31403>>>>>>>        Variant vCommandBarControls
31403>>>>>>>        
31403>>>>>>>        Send InitComInstance // creates control and returns it attached
31404>>>>>>>        Send OnCreate
31405>>>>>>>        
31405>>>>>>>        
31405>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
31406>>>>>>>        Get ComControls to vCommandBarControls
31407>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
31408>>>>>>>        
31408>>>>>>>        Broadcast Send CreateComInstance hoCommandBarControls
31410>>>>>>>        
31410>>>>>>>        // after this command bar and all its children are created, we set this as the reset point.
31410>>>>>>>        Send ComCreateOriginalControls of hoCommandBarControls
31411>>>>>>>        
31411>>>>>>>        Send Destroy of hoCommandBarControls
31412>>>>>>>        
31412>>>>>>>    End_Procedure
31413>>>>>>>    
31413>>>>>>>End_Class
31414>>>>>>>
31414>>>>>>>Class cCJMenuBar is a cCJAbstractCommandBar
31415>>>>>>>    
31415>>>>>>>    Procedure Construct_object
31417>>>>>>>        Forward Send Construct_Object
31419>>>>>>>        Set piBarId to 1 // menu is always 1
31420>>>>>>>        Set psTitle to "Main Menu"
31421>>>>>>>        Set pbCloseable to False
31422>>>>>>>        Set pbGripper to False
31423>>>>>>>        Set pbEnableDocking to False
31424>>>>>>>        Set pbHideWrap to False
31425>>>>>>>        Set peStretched to stStretch
31426>>>>>>>        Set pbCustomizable to False
31427>>>>>>>        
31427>>>>>>>    End_Procedure
31428>>>>>>>    
31428>>>>>>>    Function CreateCommandBar Returns Variant
31430>>>>>>>        Variant vCommandBar
31430>>>>>>>        Handle hoCommandBars
31430>>>>>>>        Integer eBarPosition
31430>>>>>>>        Get peBarPosition to eBarPosition
31431>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31432>>>>>>>        Get ComActiveMenuBar of hoCommandBars to vCommandBar
31433>>>>>>>        Set pvComObject to vCommandBar
31434>>>>>>>        Set ComPosition to eBarPosition
31435>>>>>>>        Function_Return vCommandBar
31436>>>>>>>    End_Function
31437>>>>>>>    
31437>>>>>>>    
31437>>>>>>>    Procedure CreateComInstance
31439>>>>>>>        // Menubar is invisible by default to allow applications to not force the default menubar on
31439>>>>>>>        // applications that do not have them declared in their application. Here is where we set
31439>>>>>>>        // Visible back to true because if this code is executed then the application really does have
31439>>>>>>>        // a menubar. We do this as late as possible in the process because Set ComVisible is a little
31439>>>>>>>        // fragile if the COM controls are not all set up correctly.
31439>>>>>>>        //17.1
31439>>>>>>>        Boolean bVisible
31439>>>>>>>        Forward Send CreateComInstance
31441>>>>>>>        Get pbPrivateVisible to bVisible
31442>>>>>>>        Set ComVisible to bVisible
31443>>>>>>>    End_Procedure
31444>>>>>>>    
31444>>>>>>>End_Class
31445>>>>>>>
31445>>>>>>>Class cCJToolbar is a cCJAbstractCommandBar
31446>>>>>>>    
31446>>>>>>>    Function CreateCommandBar Returns Variant
31448>>>>>>>        Variant vCommandBar
31448>>>>>>>        Handle hoCommandBars
31448>>>>>>>        Integer eBarPosition
31448>>>>>>>        Get peBarPosition to eBarPosition
31449>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31450>>>>>>>        Get ComAdd of hoCommandBars "Toolbar" eBarPosition to vCommandBar
31451>>>>>>>        Function_Return vCommandBar
31452>>>>>>>    End_Function
31453>>>>>>>    
31453>>>>>>>End_Class
31454>>>>>>>
31454>>>>>>>
31454>>>>>>>Class cCJTabToolBar is a cCJComTabToolBar
31455>>>>>>>    
31455>>>>>>>    Import_Class_Protocol cCJCommandBarMixin
31456>>>>>>>    
31456>>>>>>>    Procedure Construct_Object
31458>>>>>>>        Forward Send Construct_Object
31460>>>>>>>        Send Define_cCJCommandBarMixin
31461>>>>>>>        Property Boolean pbPrivateAllowReorder   False
31462>>>>>>>        
31462>>>>>>>    End_Procedure
31463>>>>>>>    
31463>>>>>>>    Procedure Set pbAllowReorder Boolean bValue
31465>>>>>>>        Send SetComProperty set_pbPrivateAllowReorder set_ComAllowReorder bValue
31466>>>>>>>    End_Procedure
31467>>>>>>>    
31467>>>>>>>    Function pbAllowReorder Returns Boolean
31469>>>>>>>        Boolean bValue
31469>>>>>>>        Get GetComProperty get_pbPrivateAllowReorder get_ComAllowReorder to bValue
31470>>>>>>>        Function_Return bValue
31471>>>>>>>    End_Function
31472>>>>>>>    
31472>>>>>>>    
31472>>>>>>>    Function CreateCommandBar Returns Variant
31474>>>>>>>        Variant vCommandBar
31474>>>>>>>        Handle hoCommandBars
31474>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31475>>>>>>>        Get ComAddTabToolBar of hoCommandBars "TabToolbar" to vCommandBar
31476>>>>>>>        Function_Return vCommandBar
31477>>>>>>>    End_Function
31478>>>>>>>    
31478>>>>>>>    Procedure CreateComInstance
31480>>>>>>>        Handle hoCommandBarControls
31480>>>>>>>        Variant vCommandBarControls
31480>>>>>>>        Boolean bAllowReorder
31480>>>>>>>        Get pbPrivateAllowReorder to bAllowReorder
31481>>>>>>>        
31481>>>>>>>        Send InitComInstance // creates control and returns it attached
31482>>>>>>>        
31482>>>>>>>        Set ComAllowReorder to bAllowReorder
31483>>>>>>>        
31483>>>>>>>        Send OnCreate
31484>>>>>>>        
31484>>>>>>>        
31484>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
31485>>>>>>>        Get ComControls to vCommandBarControls
31486>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
31487>>>>>>>        
31487>>>>>>>        
31487>>>>>>>        Broadcast Send CreateComInstance Self // we pass attached tabmenubar control to tab children
31489>>>>>>>        
31489>>>>>>>        // after this command bar and all its children are created, we set this as the reset point.
31489>>>>>>>        Send ComCreateOriginalControls of hoCommandBarControls
31490>>>>>>>        Send ComUpdateTabs
31491>>>>>>>        Send ComRedrawBar
31492>>>>>>>        Send ComRecalcLayout
31493>>>>>>>        Send Destroy of hoCommandBarControls
31494>>>>>>>        
31494>>>>>>>        //  Commandbars are static and do not change based on loading and editing
31494>>>>>>>        // If so, we will keep the objects bound. If this does not work we will need to
31494>>>>>>>        // use the AttachComObject method.
31494>>>>>>>        
31494>>>>>>>    End_Procedure
31495>>>>>>>    
31495>>>>>>>    Function FindByCategory String sName Returns Variant
31497>>>>>>>        Boolean bAttached bOk
31497>>>>>>>        Handle hoItem
31497>>>>>>>        Variant vItem
31497>>>>>>>        Integer i iCount
31497>>>>>>>        String sCat
31497>>>>>>>        
31497>>>>>>>        Move (IsComObjectCreated(Self)) to bAttached
31498>>>>>>>        If not bAttached Begin
31500>>>>>>>            Error DFERR_PROGRAM "Assert: Find by Category commandbar not attached"
31501>>>>>>>>
31501>>>>>>>            Function_Return (NullComObject())
31502>>>>>>>        End
31502>>>>>>>>
31502>>>>>>>        
31502>>>>>>>        Get Create U_cCJComTabControlItem to hoItem
31503>>>>>>>        Get ComCategoryCount to iCount
31504>>>>>>>        For i from 0 to (iCount-1)
31510>>>>>>>>
31510>>>>>>>            Get ComCategory i to vItem
31511>>>>>>>            Set pvComObject of hoItem to vItem
31512>>>>>>>            Get ComCaption of hoItem to sCat
31513>>>>>>>            Move (sCat=sName) to bOk
31514>>>>>>>            If bOk ;                Break
31517>>>>>>>        Loop
31518>>>>>>>>
31518>>>>>>>        Send destroy of hoItem
31519>>>>>>>        If not bOk Begin
31521>>>>>>>            Move (NullComObject()) to vItem
31522>>>>>>>        End
31522>>>>>>>>
31522>>>>>>>        Function_Return vItem
31523>>>>>>>    End_Function
31524>>>>>>>    
31524>>>>>>>End_Class
31525>>>>>>>
31525>>>>>>>
31525>>>>>>>Class cCJTabControlItem is a cCJComTabControlItem
31526>>>>>>>    
31526>>>>>>>    Procedure Construct_Object
31528>>>>>>>        Forward Send Construct_Object
31530>>>>>>>        Property String psCategory ""
31531>>>>>>>        Property String psToolTip ""
31532>>>>>>>        Property String psImage ""
31533>>>>>>>        Set peNeighborhood to nhNo
31534>>>>>>>    End_Procedure
31535>>>>>>>    
31535>>>>>>>    Procedure CreateComInstance Handle hoTabToolBar
31537>>>>>>>        Handle hoCommandBars hoCommandBarControls  hoControl
31537>>>>>>>        Variant vCommandBarControls vTab vControl
31537>>>>>>>        String sCategory sTip sImage
31537>>>>>>>        Integer iCount i iNewCount iId
31537>>>>>>>        Boolean bOk
31537>>>>>>>        
31537>>>>>>>        Get psCategory to sCategory
31538>>>>>>>        Get psToolTip to sTip
31539>>>>>>>        Get psImage to sImage
31540>>>>>>>        
31540>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31541>>>>>>>        
31541>>>>>>>        Get ComCategoryCount of hoTabToolBar to iCount
31542>>>>>>>        Get ComInsertCategory of hoTabToolbar iCount sCategory to vTab
31543>>>>>>>        Set pvComObject to vTab
31544>>>>>>>        
31544>>>>>>>        Set ComToolTip to sTip
31545>>>>>>>        
31545>>>>>>>        If (sImage<>"") Begin
31547>>>>>>>            Get AddImage of hoCommandBars sImage 0 xtpImageNormal to iId
31548>>>>>>>            Set ComImage to iId
31549>>>>>>>        End
31549>>>>>>>>
31549>>>>>>>        
31549>>>>>>>        If (iCount=0) Begin
31551>>>>>>>            Set ComSelected to True
31552>>>>>>>        End
31552>>>>>>>>
31552>>>>>>>        
31552>>>>>>>        Send OnCreate
31553>>>>>>>        
31553>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
31554>>>>>>>        Get ComControls of hoTabToolBar to vCommandBarControls
31555>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
31556>>>>>>>        
31556>>>>>>>        // before creating the child com controls, get the count of controls
31556>>>>>>>        Get ComCount of hoCommandBarControls to iCount
31557>>>>>>>        
31557>>>>>>>        Broadcast Send CreateComInstance hoCommandBarControls
31559>>>>>>>        
31559>>>>>>>        // get the new count of controls. The difference are the new controls.
31559>>>>>>>        Get ComCount of hoCommandBarControls to iNewCount
31560>>>>>>>        
31560>>>>>>>        Get create U_cCJCommandBarControl to hoControl
31561>>>>>>>        For i from (iCount+1) to iNewCount
31567>>>>>>>>
31567>>>>>>>            Get ComItem of hoCommandBarControls i to vControl
31568>>>>>>>            Set pvComObject of hoControl to vControl
31569>>>>>>>            Set ComCategory of hoControl to sCategory
31570>>>>>>>        Loop
31571>>>>>>>>
31571>>>>>>>        Send Destroy of hoControl
31572>>>>>>>        Send Destroy of hoCommandBarControls
31573>>>>>>>        
31573>>>>>>>    End_Procedure
31574>>>>>>>    
31574>>>>>>>    Procedure OnCreate
31576>>>>>>>    End_Procedure
31577>>>>>>>    
31577>>>>>>>End_Class
31578>>>>>>>
31578>>>>>>>
31578>>>>>>>
31578>>>>>>>Class cCJContextMenu is a cCJCommandBar
31579>>>>>>>    
31579>>>>>>>    Procedure Construct_Object
31581>>>>>>>        Forward Send Construct_Object
31583>>>>>>>        Property Boolean pbEnableAnimation  False
31584>>>>>>>        Property Boolean pbControlDoubleGripper    False
31585>>>>>>>        Property Boolean pbControlPopupToolBar   False
31586>>>>>>>        
31586>>>>>>>        Property Handle phoCommandBars 0
31587>>>>>>>        
31587>>>>>>>        // this is set using SetPopupLocation.
31587>>>>>>>        Property tWinPoint pLocation
31588>>>>>>>    End_Procedure
31589>>>>>>>    
31589>>>>>>>    
31589>>>>>>>    // context menus use a differnt logic for finding the commandbars. Normally it will just attach to
31589>>>>>>>    // the global commandbars. However, a developer can choose attach this to a different commandbars by
31589>>>>>>>    // setting phoCommandBars.
31589>>>>>>>    Function CommandBarSystemObject Returns Handle
31591>>>>>>>        Handle hoCommandBars
31591>>>>>>>        Get phoCommandBars to hoCommandBars
31592>>>>>>>        If (hoCommandBars=0) Begin
31594>>>>>>>            Move ghoCommandBars to hoCommandBars
31595>>>>>>>        End
31595>>>>>>>>
31595>>>>>>>        Function_Return hoCommandBars
31596>>>>>>>    End_Function
31597>>>>>>>    
31597>>>>>>>    Function CreateCommandBar Returns Variant
31599>>>>>>>        Variant vCommandBar
31599>>>>>>>        Handle hoCommandBars
31599>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31600>>>>>>>        Get ComAdd of hoCommandBars "Context Toolbar" xtpBarPopup to vCommandBar
31601>>>>>>>        Function_Return vCommandBar
31602>>>>>>>    End_Function
31603>>>>>>>    
31603>>>>>>>    Procedure CreatePopupComInstance
31605>>>>>>>        Handle hoCommandBars hoCommandBarControls
31605>>>>>>>        Variant vCommandBar vCommandBarControls
31605>>>>>>>        Boolean bEnableAnimation bDoubleGripper bPopupToolBar
31605>>>>>>>        
31605>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31606>>>>>>>        Get pbEnableAnimation to bEnableAnimation
31607>>>>>>>        Get pbControlDoubleGripper to bDoubleGripper
31608>>>>>>>        Get pbControlPopupToolBar  to bPopupToolBar
31609>>>>>>>        
31609>>>>>>>        Get CreateCommandBar to vCommandBar
31610>>>>>>>        Set pvComObject to vCommandBar
31611>>>>>>>        
31611>>>>>>>        Set ComEnableAnimation to bEnableAnimation
31612>>>>>>>        Set ComDoubleGripper to bDoubleGripper
31613>>>>>>>        Send ComSetPopupToolBar bPopupToolBar
31614>>>>>>>        
31614>>>>>>>        Send OnCreate
31615>>>>>>>        
31615>>>>>>>        Get Create U_cCJCommandBarControls to hoCommandBarControls
31616>>>>>>>        Get ComControls to vCommandBarControls
31617>>>>>>>        Set pvComObject of hoCommandBarControls to vCommandBarControls
31618>>>>>>>        
31618>>>>>>>        Broadcast Send CreateComInstance hoCommandBarControls
31620>>>>>>>        
31620>>>>>>>        // This does the same thing OnComPopupInit does.
31620>>>>>>>        
31620>>>>>>>        // this does all of the inital setting of enabled, etc.
31620>>>>>>>        Send PopupInit of hoCommandBars Self hoCommandBarControls
31621>>>>>>>        // user event to do whatever
31621>>>>>>>        Send OnPopupInit vCommandBar hoCommandBarControls
31622>>>>>>>        
31622>>>>>>>        Send Destroy of hoCommandBarControls
31623>>>>>>>        
31623>>>>>>>        // we keep the control attached with popups or we lose it.
31623>>>>>>>    End_Procedure
31624>>>>>>>    
31624>>>>>>>    
31624>>>>>>>    Procedure Popup
31626>>>>>>>        Handle hoCommandBars
31626>>>>>>>        Integer iLoc iId iRet
31626>>>>>>>        tWinPoint Pt PtZero
31626>>>>>>>        tWinPoint Pt PtZero
31626>>>>>>>        
31626>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31627>>>>>>>        If (hoCommandBars=0) Begin
31629>>>>>>>            Error DFERR_PROGRAM "Context menu not attached to commandbars"
31630>>>>>>>>
31630>>>>>>>            Procedure_Return
31631>>>>>>>        End
31631>>>>>>>>
31631>>>>>>>        
31631>>>>>>>        // this will create the context menu and return it attached.
31631>>>>>>>        Send CreatePopupComInstance
31632>>>>>>>        
31632>>>>>>>        // see if location has been set before popup by SetPopupLocation
31632>>>>>>>        Get pLocation to pt
31633>>>>>>>        If (pt.x=0 and Pt.y=0) Begin
31635>>>>>>>            Move (GetCursorPos(addressOf(Pt))) to iRet    // Get the mouse location (this technique supports -ve co-ordinates
31636>>>>>>>        End
31636>>>>>>>>
31636>>>>>>>        Else Begin
31637>>>>>>>            // if set, we use the setting and clear this location for the next popup
31637>>>>>>>            Set pLocation to PtZero
31638>>>>>>>        End
31638>>>>>>>>
31638>>>>>>>        
31638>>>>>>>        Get ComShowPopup OLE_VT_Empty Pt.x Pt.y to iID
31639>>>>>>>        
31639>>>>>>>        // This releases all actions (which will still exist on the COM side)
31639>>>>>>>        // and controls (controls should already be released on both DF and COM side)
31639>>>>>>>        Broadcast Recursive_up Send ReleaseComObject
31641>>>>>>>        Send ReleaseComObject // after popup CJ deletes the controls, so we release this
31642>>>>>>>    End_Procedure
31643>>>>>>>    
31643>>>>>>>    Procedure OnCreate
31645>>>>>>>    End_Procedure
31646>>>>>>>    
31646>>>>>>>    // before called, self and all items IsEnabled, IsChecked and IsVisible are called
31646>>>>>>>    // the first param is of no interest as it is this object which is already attached
31646>>>>>>>    Procedure OnPopupInit Variant vCommandBarControl Handle hoCommandBarControls
31648>>>>>>>    End_Procedure
31649>>>>>>>    
31649>>>>>>>    // This can be called before popup to select a custom popup location. If not called
31649>>>>>>>    // the location is determined in Popup by looking at the mouse position. This must be
31649>>>>>>>    // called before each popup
31649>>>>>>>    Procedure SetPopupLocation Integer iY Integer iX
31651>>>>>>>        tWinPoint pt
31651>>>>>>>        tWinPoint pt
31651>>>>>>>        Move iX to pt.x
31652>>>>>>>        Move iy to pt.y
31653>>>>>>>        Set pLocation to pt
31654>>>>>>>    End_Procedure
31655>>>>>>>    
31655>>>>>>>End_Class
31656>>>>>>>
31656>>>>>>>// used for the Customize dialog
31656>>>>>>>// This provides a way to add controls to the config menu that are not defined
31656>>>>>>>// elsewhere in the menu
31656>>>>>>>
31656>>>>>>>Class cCJDesignerMenu is a cObject
31657>>>>>>>    
31657>>>>>>>    Procedure Construct_Object
31659>>>>>>>        Forward Send Construct_Object
31661>>>>>>>        Set peNeighborhood to nhNo
31662>>>>>>>    End_Procedure
31663>>>>>>>    
31663>>>>>>>    // Get the Controls Collection for the designer and call all children
31663>>>>>>>    Procedure CreateComInstance
31665>>>>>>>        Handle hoCommandBarControls
31665>>>>>>>        Get DesignerControlsCollection to hoCommandBarControls
31666>>>>>>>        Broadcast Send CreateComInstance hoCommandBarControls
31668>>>>>>>    End_Procedure
31669>>>>>>>    
31669>>>>>>>End_Class
31670>>>>>>>
31670>>>>>>>// This creates an action object. It will normally not be directly instanciated but will be used
31670>>>>>>>// as the superclass of the cCJMenuItem class.
31670>>>>>>>
31670>>>>>>>
31670>>>>>>>Class cCJAction is a cCJCommandBarAction
31671>>>>>>>    
31671>>>>>>>    Procedure Construct_Object
31673>>>>>>>        Forward Send Construct_Object
31675>>>>>>>        
31675>>>>>>>        // normally auto assigned. It can be manually assigned.
31675>>>>>>>        Property Integer piId 0
31676>>>>>>>        
31676>>>>>>>        // determins if this action should be updated by the timer. You only set this true if
31676>>>>>>>        // the checked state, enabled state or visible state will be changed by other actions
31676>>>>>>>        // within the program.
31676>>>>>>>        Property Boolean pbPrivateActiveUpdate False
31677>>>>>>>        
31677>>>>>>>        Property Boolean pbPrivateChecked False
31678>>>>>>>        Property Boolean pbPrivateEnabled True
31679>>>>>>>        Property Boolean pbPrivateVisible True
31680>>>>>>>        Property String  psPrivateCaption ""
31681>>>>>>>        Property String  psPrivateCategory C_$CategoryOther
31682>>>>>>>        Property String  psPrivateDescriptionText ""
31683>>>>>>>        Property String  psPrivateTooltipText ""
31684>>>>>>>        Property String  psPrivateShortcutText ""
31685>>>>>>>        Property Integer piPrivateShortCutKey 0
31686>>>>>>>        
31686>>>>>>>        // These are just initial values, if the developer needs to dynamically change
31686>>>>>>>        // images they should use the ComIconId to select the item they need from the image list
31686>>>>>>>        
31686>>>>>>>        // normally only psImage needs to be set
31686>>>>>>>        Property String psImage ""
31687>>>>>>>        Property String psImageDisabled ""
31688>>>>>>>        Property String psImageHot ""
31689>>>>>>>        Property String psImageChecked ""
31690>>>>>>>        Property String psImagePressed ""
31691>>>>>>>        
31691>>>>>>>        Property Integer piPrivateIconId 0
31692>>>>>>>        
31692>>>>>>>        Set peNeighborhood to nhNo
31693>>>>>>>    End_Procedure
31694>>>>>>>    
31694>>>>>>>    
31694>>>>>>>    Procedure Set pbChecked Boolean bValue
31696>>>>>>>        Set pbPrivateChecked to bValue
31697>>>>>>>        If (IsComObjectCreated(Self)) Begin
31699>>>>>>>            Set ComChecked to bValue
31700>>>>>>>        End
31700>>>>>>>>
31700>>>>>>>    End_Procedure
31701>>>>>>>    
31701>>>>>>>    Function pbChecked Returns Boolean
31703>>>>>>>        Boolean bValue
31703>>>>>>>        If (IsComObjectCreated(Self)) Begin
31705>>>>>>>            Get ComChecked to bValue
31706>>>>>>>        End
31706>>>>>>>>
31706>>>>>>>        Else Begin
31707>>>>>>>            Get pbPrivateChecked to bValue
31708>>>>>>>        End
31708>>>>>>>>
31708>>>>>>>        Function_Return bValue
31709>>>>>>>    End_Function
31710>>>>>>>    
31710>>>>>>>    Procedure Set pbEnabled Boolean bValue
31712>>>>>>>        Set pbPrivateEnabled to bValue
31713>>>>>>>        If (IsComObjectCreated(Self)) Begin
31715>>>>>>>            Set ComEnabled to bValue
31716>>>>>>>        End
31716>>>>>>>>
31716>>>>>>>    End_Procedure
31717>>>>>>>    
31717>>>>>>>    Function pbEnabled Returns Boolean
31719>>>>>>>        Boolean bValue
31719>>>>>>>        If (IsComObjectCreated(Self)) Begin
31721>>>>>>>            Get ComEnabled to bValue
31722>>>>>>>        End
31722>>>>>>>>
31722>>>>>>>        Else Begin
31723>>>>>>>            Get pbPrivateEnabled to bValue
31724>>>>>>>        End
31724>>>>>>>>
31724>>>>>>>        Function_Return bValue
31725>>>>>>>    End_Function
31726>>>>>>>    
31726>>>>>>>    Procedure Set pbVisible Boolean bValue
31728>>>>>>>        Set pbPrivateVisible to bValue
31729>>>>>>>        If (IsComObjectCreated(Self)) Begin
31731>>>>>>>            Set ComVisible to bValue
31732>>>>>>>        End
31732>>>>>>>>
31732>>>>>>>    End_Procedure
31733>>>>>>>    
31733>>>>>>>    Function pbVisible Returns Boolean
31735>>>>>>>        Boolean bValue
31735>>>>>>>        If (IsComObjectCreated(Self)) Begin
31737>>>>>>>            Get ComVisible to bValue
31738>>>>>>>        End
31738>>>>>>>>
31738>>>>>>>        Else Begin
31739>>>>>>>            Get pbPrivateVisible to bValue
31740>>>>>>>        End
31740>>>>>>>>
31740>>>>>>>        Function_Return bValue
31741>>>>>>>    End_Function
31742>>>>>>>    
31742>>>>>>>    
31742>>>>>>>    Procedure Set psCaption String sValue
31744>>>>>>>        Set psPrivateCaption to sValue
31745>>>>>>>        If (IsComObjectCreated(Self)) Begin
31747>>>>>>>            Set ComCaption to sValue
31748>>>>>>>        End
31748>>>>>>>>
31748>>>>>>>    End_Procedure
31749>>>>>>>    
31749>>>>>>>    Function psCaption Returns String
31751>>>>>>>        String sValue
31751>>>>>>>        If (IsComObjectCreated(Self)) Begin
31753>>>>>>>            Get ComCaption to sValue
31754>>>>>>>        End
31754>>>>>>>>
31754>>>>>>>        Else Begin
31755>>>>>>>            Get psPrivateCaption to sValue
31756>>>>>>>        End
31756>>>>>>>>
31756>>>>>>>        Function_Return sValue
31757>>>>>>>    End_Function
31758>>>>>>>    
31758>>>>>>>    Procedure Set psCategory String sValue
31760>>>>>>>        Set psPrivateCategory to sValue
31761>>>>>>>        If (IsComObjectCreated(Self)) Begin
31763>>>>>>>            Set ComCategory to sValue
31764>>>>>>>        End
31764>>>>>>>>
31764>>>>>>>    End_Procedure
31765>>>>>>>    
31765>>>>>>>    Function psCategory Returns String
31767>>>>>>>        String sValue
31767>>>>>>>        If (IsComObjectCreated(Self)) Begin
31769>>>>>>>            Get ComCategory to sValue
31770>>>>>>>        End
31770>>>>>>>>
31770>>>>>>>        Else Begin
31771>>>>>>>            Get psPrivateCategory to sValue
31772>>>>>>>        End
31772>>>>>>>>
31772>>>>>>>        Function_Return sValue
31773>>>>>>>    End_Function
31774>>>>>>>    
31774>>>>>>>    Procedure Set psDescription String sValue
31776>>>>>>>        Set psPrivateDescriptionText to sValue
31777>>>>>>>        If (IsComObjectCreated(Self)) Begin
31779>>>>>>>            Set ComDescriptionText to sValue
31780>>>>>>>        End
31780>>>>>>>>
31780>>>>>>>    End_Procedure
31781>>>>>>>    
31781>>>>>>>    Function psDescription Returns String
31783>>>>>>>        String sValue
31783>>>>>>>        If (IsComObjectCreated(Self)) Begin
31785>>>>>>>            Get ComDescriptionText to sValue
31786>>>>>>>        End
31786>>>>>>>>
31786>>>>>>>        Else Begin
31787>>>>>>>            Get psPrivateDescriptionText to sValue
31788>>>>>>>        End
31788>>>>>>>>
31788>>>>>>>        Function_Return sValue
31789>>>>>>>    End_Function
31790>>>>>>>    
31790>>>>>>>    Procedure Set psToolTip String sValue
31792>>>>>>>        Set psPrivateToolTipText to sValue
31793>>>>>>>        If (IsComObjectCreated(Self)) Begin
31795>>>>>>>            Set ComToolTipText to sValue
31796>>>>>>>        End
31796>>>>>>>>
31796>>>>>>>    End_Procedure
31797>>>>>>>    
31797>>>>>>>    Function psToolTip Returns String
31799>>>>>>>        String sValue
31799>>>>>>>        If (IsComObjectCreated(Self)) Begin
31801>>>>>>>            Get ComToolTipText to sValue
31802>>>>>>>        End
31802>>>>>>>>
31802>>>>>>>        Else Begin
31803>>>>>>>            Get psPrivateToolTipText to sValue
31804>>>>>>>        End
31804>>>>>>>>
31804>>>>>>>        Function_Return sValue
31805>>>>>>>    End_Function
31806>>>>>>>    
31806>>>>>>>    Procedure Set psShortcut String sValue
31808>>>>>>>        Set psPrivateShortcutText to sValue
31809>>>>>>>        If (IsComObjectCreated(Self)) Begin
31811>>>>>>>            Set ComShortcutText to sValue
31812>>>>>>>        End
31812>>>>>>>>
31812>>>>>>>    End_Procedure
31813>>>>>>>    
31813>>>>>>>    Function psShortcut Returns String
31815>>>>>>>        String sValue
31815>>>>>>>        If (IsComObjectCreated(Self)) Begin
31817>>>>>>>            Get ComShortcutText to sValue
31818>>>>>>>        End
31818>>>>>>>>
31818>>>>>>>        Else Begin
31819>>>>>>>            Get psPrivateShortcutText to sValue
31820>>>>>>>        End
31820>>>>>>>>
31820>>>>>>>        Function_Return sValue
31821>>>>>>>    End_Function
31822>>>>>>>    
31822>>>>>>>    
31822>>>>>>>    Procedure Set piShortCutKey Integer iExtra Integer iKey
31824>>>>>>>        Set piPrivateShortCutKey to (iKey + (iExtra*65536))
31825>>>>>>>        If (IsComObjectCreated(Self)) Begin
31827>>>>>>>            Send BindKey iExtra iKey
31828>>>>>>>        End
31828>>>>>>>>
31828>>>>>>>    End_Procedure
31829>>>>>>>    
31829>>>>>>>    Function piShortCutKey Returns Integer
31831>>>>>>>        Integer iValue
31831>>>>>>>        Get piPrivateShortCutKey to iValue
31832>>>>>>>        Function_Return iValue
31833>>>>>>>    End_Function
31834>>>>>>>    
31834>>>>>>>    Procedure BindKey Integer iExtra Integer iKey
31836>>>>>>>        Integer iId
31836>>>>>>>        Handle hoKeyBindings hoCommandBars
31836>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31837>>>>>>>        Get piId to iId
31838>>>>>>>        If (iId=0) Begin
31840>>>>>>>            Error DFERR_PROGRAM "Assert: action Id zero in keybinding"
31841>>>>>>>>
31841>>>>>>>            Procedure_Return
31842>>>>>>>        End
31842>>>>>>>>
31842>>>>>>>        Get KeyBindingsCollection of hoCommandBars to hoKeyBindings
31843>>>>>>>        
31843>>>>>>>        Send ComAdd of hoKeyBindings iExtra iKey iId
31844>>>>>>>    End_Procedure
31845>>>>>>>    
31845>>>>>>>    Procedure Set pbActiveUpdate Boolean bValue
31847>>>>>>>        Handle hoCommandBars
31847>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31848>>>>>>>        Set pbPrivateActiveUpdate to bValue
31849>>>>>>>        If (IsComObjectCreated(Self)) Begin
31851>>>>>>>            If bValue Begin
31853>>>>>>>                Send AddActiveAction of hoCommandBars Self
31854>>>>>>>            End
31854>>>>>>>>
31854>>>>>>>            Else Begin
31855>>>>>>>                Send RemoveActiveAction of hoCommandBars Self
31856>>>>>>>            End
31856>>>>>>>>
31856>>>>>>>        End
31856>>>>>>>>
31856>>>>>>>    End_Procedure
31857>>>>>>>    
31857>>>>>>>    Function pbActiveUpdate Returns Integer
31859>>>>>>>        Boolean bValue
31859>>>>>>>        Get pbPrivateActiveUpdate to bValue
31860>>>>>>>        Function_Return bValue
31861>>>>>>>    End_Function
31862>>>>>>>    
31862>>>>>>>    // normally this is zero and not changed. When zero the imageId used will be
31862>>>>>>>    // the statusbarId and this is the ID that is used when the psImage method is used.
31862>>>>>>>    // Using psImage is preferred as it adds the icon and assigns it to the object.
31862>>>>>>>    // This can be used to change icons. Note 0=use StatusbarId
31862>>>>>>>    Procedure Set piIconId Integer iValue
31864>>>>>>>        Set piPrivateIconId to iValue
31865>>>>>>>        If (IsComObjectCreated(Self)) Begin
31867>>>>>>>            Set ComIconId to iValue
31868>>>>>>>        End
31868>>>>>>>>
31868>>>>>>>    End_Procedure
31869>>>>>>>    
31869>>>>>>>    Function piIconId Returns Integer
31871>>>>>>>        Integer iValue
31871>>>>>>>        If (IsComObjectCreated(Self)) Begin
31873>>>>>>>            Get ComIconId to iValue
31874>>>>>>>        End
31874>>>>>>>>
31874>>>>>>>        Else Begin
31875>>>>>>>            Get piPrivateIconId to iValue
31876>>>>>>>        End
31876>>>>>>>>
31876>>>>>>>        Function_Return iValue
31877>>>>>>>    End_Function
31878>>>>>>>    
31878>>>>>>>    
31878>>>>>>>    
31878>>>>>>>    // For augmentation. Return true if the item should be visible
31878>>>>>>>    Function IsVisible Returns Boolean
31880>>>>>>>        Boolean bBool
31880>>>>>>>        Get pbVisible to bBool
31881>>>>>>>        Function_Return bBool
31882>>>>>>>    End_Function
31883>>>>>>>    
31883>>>>>>>    // For augmentation. Return true if the item should be enabled
31883>>>>>>>    Function IsEnabled Returns Boolean
31885>>>>>>>        Boolean bBool
31885>>>>>>>        Get pbEnabled to bBool
31886>>>>>>>        Function_Return bBool
31887>>>>>>>    End_Function
31888>>>>>>>    
31888>>>>>>>    // For augmentation. Return true if the item should be checked
31888>>>>>>>    Function IsChecked Returns Boolean
31890>>>>>>>        Boolean bBool
31890>>>>>>>        Get pbChecked to bBool
31891>>>>>>>        Function_Return bBool
31892>>>>>>>    End_Function
31893>>>>>>>    
31893>>>>>>>    Procedure CreateComAction
31895>>>>>>>        Variant vID vAction
31895>>>>>>>        Handle hoCommandBars hoActions
31895>>>>>>>        Handle[] hoActiveActions
31896>>>>>>>        String sCaption sToolTip sDescriptionText sCategory  sShortCutText
31896>>>>>>>        String sIcon sIconDisabled sIconHot sIconChecked sIconPressed
31896>>>>>>>        Integer iId iShortCut iIconId iAssignedId
31896>>>>>>>        Boolean bVisible bChecked bEnabled bOk
31896>>>>>>>        
31896>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31897>>>>>>>        Get piId to iID
31898>>>>>>>        If (iId=0) Begin
31900>>>>>>>            // this can happen with context menus defined before the Commandbars is created
31900>>>>>>>            Get AssignId of hoCommandBars to iID
31901>>>>>>>            Set piId to iID
31902>>>>>>>        End
31902>>>>>>>>
31902>>>>>>>        
31902>>>>>>>        Get psPrivateCaption to sCaption
31903>>>>>>>        Get psPrivateTooltipText to sToolTip
31904>>>>>>>        Get psPrivateShortcutText to sShortCutText
31905>>>>>>>        Get psPrivateDescriptionText to sDescriptionText
31906>>>>>>>        Get psPrivateCategory to sCategory
31907>>>>>>>        Get pbPrivateVisible to bVisible
31908>>>>>>>        Get pbPrivateChecked to bChecked
31909>>>>>>>        Get pbPrivateEnabled to bEnabled
31910>>>>>>>        Get piPrivateShortCutKey to iShortCut
31911>>>>>>>        Get psImage to sIcon
31912>>>>>>>        Get psImageDisabled to sIconDisabled
31913>>>>>>>        Get psImageHot to sIconHot
31914>>>>>>>        Get psImageChecked to sIconChecked
31915>>>>>>>        Get psImagePressed to sIconPressed
31916>>>>>>>        Get piPrivateIconId to iIconId
31917>>>>>>>        
31917>>>>>>>        Get CommandBarSystemObject to hoCommandBars // via delegation
31918>>>>>>>        Get ActionsCollection of hoCommandBars to hoActions
31919>>>>>>>        Get ComAdd of hoActions iID sCaption sToolTip sDescriptionText sCategory to vAction
31920>>>>>>>        Set pvComObject to vAction
31921>>>>>>>        Set ComEnabled to bEnabled
31922>>>>>>>        Set ComVisible to bVisible
31923>>>>>>>        Set ComChecked to bChecked
31924>>>>>>>        Set ComShortcutText to sShortCutText
31925>>>>>>>        Set piIconId to iIconId
31926>>>>>>>        Set ComTag to Self // used as back pointer from com object to DF object
31927>>>>>>>        
31927>>>>>>>        If (sIcon<>"") Begin
31929>>>>>>>            Get AddImage of hoCommandBars sIcon iId xtpImageNormal to iAssignedId
31930>>>>>>>        End
31930>>>>>>>>
31930>>>>>>>        If (sIconDisabled<>"") Begin
31932>>>>>>>            Get AddImage of hoCommandBars sIconDisabled iId xtpImageDisabled to iAssignedId
31933>>>>>>>        End
31933>>>>>>>>
31933>>>>>>>        If (sIconHot<>"") Begin
31935>>>>>>>            Get AddImage of hoCommandBars sIconHot iId xtpImageHot to iAssignedId
31936>>>>>>>        End
31936>>>>>>>>
31936>>>>>>>        If (sIconChecked<>"") Begin
31938>>>>>>>            Get AddImage of hoCommandBars sIconChecked iId xtpImageChecked to iAssignedId
31939>>>>>>>        End
31939>>>>>>>>
31939>>>>>>>        If (sIconPressed<>"") Begin
31941>>>>>>>            Get AddImage of hoCommandBars sIconPressed iId xtpImagePressed to iAssignedId
31942>>>>>>>        End
31942>>>>>>>>
31942>>>>>>>        
31942>>>>>>>        If (iShortCut<>0) Begin
31944>>>>>>>            Send BindKey (hi(iShortCut)) (low(iShortCut))
31945>>>>>>>        End
31945>>>>>>>>
31945>>>>>>>        
31945>>>>>>>        Send OnCreateAction
31946>>>>>>>        
31946>>>>>>>        Send RegisterAction of hoCommandBars Self
31947>>>>>>>        
31947>>>>>>>    End_Procedure
31948>>>>>>>    
31948>>>>>>>    // called during initial activation to set all default actions.
31948>>>>>>>    Procedure CreateComInstance
31950>>>>>>>        Send CreateComAction
31951>>>>>>>        // actions are flat. You don't look for child actions
31951>>>>>>>    End_Procedure
31952>>>>>>>    
31952>>>>>>>    // find the first control that matches this action's ID. This searches the entire
31952>>>>>>>    // commandbar system and "first" is just the first one it happens to find.
31952>>>>>>>    Function FindFirstControl Returns Variant
31954>>>>>>>        Variant vControl
31954>>>>>>>        Integer iId
31954>>>>>>>        Handle hoCommandBars hoCommandBar
31954>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31955>>>>>>>        Get piId to iId
31956>>>>>>>        Get ComFindControl of hoCommandBars xtpControlError iId Nothing True to vControl
31957>>>>>>>        If (IsNullComObject(vControl)) Begin
31959>>>>>>>            // if not found this could be from our context menu. ComFindControl does not search
31959>>>>>>>            // the active context menu. We will test the focused command bar to see if we can
31959>>>>>>>            // find the object in there. This may create a duplicate search but it will not matter.
31959>>>>>>>            Get ComFocusedCommandBar of hoCommandBars to vControl
31960>>>>>>>            If (not(IsNullComObject(vControl))) Begin
31962>>>>>>>                Get Create U_cCJCommandBar to hoCommandBar
31963>>>>>>>                Set pvComObject of hoCommandBar to vControl
31964>>>>>>>                Get ComFindControl of hoCommandBar xtpControlError iId Nothing True to vControl
31965>>>>>>>                Send Destroy of hoCommandBar
31966>>>>>>>            End
31966>>>>>>>>
31966>>>>>>>        End
31966>>>>>>>>
31966>>>>>>>        Function_Return vControl
31967>>>>>>>    End_Function
31968>>>>>>>    
31968>>>>>>>    // delete all com controls for this action
31968>>>>>>>    Procedure DeleteAllControlsForAction
31970>>>>>>>        Handle hoCommandBars hoControl
31970>>>>>>>        Variant vControl
31970>>>>>>>        Get Create U_cCJCommandBarControl to hoControl
31971>>>>>>>        Repeat
31971>>>>>>>>
31971>>>>>>>            Get FindFirstControl to vControl
31972>>>>>>>            If not (IsNullComObject(vControl)) Begin
31974>>>>>>>                Set pvComObject of hoControl to vControl
31975>>>>>>>                Send ComDelete to hoControl
31976>>>>>>>            End
31976>>>>>>>>
31976>>>>>>>        Until (IsNullComObject(vControl))
31978>>>>>>>        Send Destroy of hoControl
31979>>>>>>>    End_Procedure
31980>>>>>>>    
31980>>>>>>>    // find all controls owned by this action anywhere in the commandbar system
31980>>>>>>>    // returns a variant array. This is only needed if you expect that there will be
31980>>>>>>>    // multiple hits such as could happen if you allow end user editing.
31980>>>>>>>    // This was created because there is no COM message to do this. This is pretty low level
31980>>>>>>>    // (like ComFindControl) and will not be used much.
31980>>>>>>>    Function FindAllControls Returns Variant[]
31982>>>>>>>        Variant[] ArrayofvControls
31983>>>>>>>        Integer iId
31983>>>>>>>        Handle hoCommandBars
31983>>>>>>>        Get CommandBarSystemObject to hoCommandBars
31984>>>>>>>        Get piId to iId
31985>>>>>>>        Get FindControls of hoCommandBars iId to ArrayofvControls
31986>>>>>>>        Function_Return ArrayofvControls
31987>>>>>>>    End_Function
31988>>>>>>>    
31988>>>>>>>    // Return the class for the passed control type. Good for augmentation
31988>>>>>>>    Function ClassForControlType Integer eType Returns Integer
31990>>>>>>>        Integer iClass
31990>>>>>>>        Case Begin
31990>>>>>>>            Case (eType=xtpControlButton)
31992>>>>>>>            Case (eType=xtpControlCheckBox)
31995>>>>>>>            Case (eType=xtpControlRadioButton)
31998>>>>>>>            Case (eType=xtpControlLabel)
32001>>>>>>>                Move U_cCJCommandBarButton to eType
32002>>>>>>>                Case Break
32003>>>>>>>            Case (eType=xtpControlPopup)
32006>>>>>>>            Case (eType=xtpControlButtonPopup)
32009>>>>>>>            Case (eType=xtpControlSplitButtonPopup)
32012>>>>>>>                Move U_cCJCommandBarPopup to eType
32013>>>>>>>                Case Break
32014>>>>>>>            Case (eType=xtpControlComboBox)
32017>>>>>>>                Move U_cCJCommandBarComboBox to eType
32018>>>>>>>                Case Break
32019>>>>>>>            Case (eType=xtpControlCustom)
32022>>>>>>>                Move U_cCJCommandBarControlCustom to eType
32023>>>>>>>                Case Break
32024>>>>>>>            Case (eType=xtpControlEdit)
32027>>>>>>>                Move U_cCJCommandBarEdit to eType
32028>>>>>>>                Case Break
32029>>>>>>>            Case (eType=xtpControlGallery)
32032>>>>>>>                Move U_cCJCommandBarGallery to eType
32033>>>>>>>                Case Break
32034>>>>>>>            Case Else
32034>>>>>>>                Move U_cCJCommandBarControl to eType
32035>>>>>>>        Case End
32035>>>>>>>        Function_Return eType
32036>>>>>>>    End_Function
32037>>>>>>>    
32037>>>>>>>    // Creates a DF object of the proper type and binds it to the COM object.
32037>>>>>>>    Function CreateProxyControl Variant vControl Returns Handle
32039>>>>>>>        Handle hoObj
32039>>>>>>>        Integer eType iClass
32039>>>>>>>        Get Create U_cCJCommandBarControl to hoObj
32040>>>>>>>        Set pvComObject of hoObj to vControl
32041>>>>>>>        Get ComType of hoObj to eType
32042>>>>>>>        Send Destroy of hoObj
32043>>>>>>>        Move 0 to hoObj
32044>>>>>>>        Get ClassForControlType eType to iCLass
32045>>>>>>>        If (iClass<>0) Begin
32047>>>>>>>            Get Create iClass to hoObj
32048>>>>>>>            Set pvComObject of hoObj to vControl
32049>>>>>>>        End
32049>>>>>>>>
32049>>>>>>>        Function_Return hoObj
32050>>>>>>>    End_Function
32051>>>>>>>    
32051>>>>>>>    // use this to find the COM control and return a DF object. You must call this if
32051>>>>>>>    // you don't already have the control pointer. You should only call this if you know that
32051>>>>>>>    // there will only be one control attached to the action. Make no assumption about what "First" means. It's
32051>>>>>>>    // the first one the COM control finds.
32051>>>>>>>    Function CreateFirstProxyControl Returns Handle
32053>>>>>>>        Variant vControl
32053>>>>>>>        Handle hoControl
32053>>>>>>>        Get FindFirstControl to vControl
32054>>>>>>>        If (not(IsNullComObject(vControl))) Begin
32056>>>>>>>            Get CreateProxyControl vControl to hoControl
32057>>>>>>>        End
32057>>>>>>>>
32057>>>>>>>        Function_Return hoControl
32058>>>>>>>    End_Function
32059>>>>>>>    
32059>>>>>>>    
32059>>>>>>>    // when a manual destroy is sent we need to do some cleanup.
32059>>>>>>>    // If an active action, it must be removed from the active action array
32059>>>>>>>    // All menu controls for this action will be removed, wherever they are within the system
32059>>>>>>>    // The Action Id will be added back to the pool for reuse. This is needed because the com
32059>>>>>>>    // action is not destroyed (there is no interface for this).
32059>>>>>>>    Procedure Destroy
32061>>>>>>>        Handle hoCommandBars
32061>>>>>>>        Integer iId
32061>>>>>>>        Variant vControl
32061>>>>>>>        
32061>>>>>>>        Get piId to iId
32062>>>>>>>        // if no com object then this never got activated or another action object is
32062>>>>>>>        // used for this (which doesn't really make sense).
32062>>>>>>>        If (iId>0) Begin
32064>>>>>>>            Get CommandBarSystemObject to hoCommandBars
32065>>>>>>>            If (IsComObjectCreated(Self)) Begin
32067>>>>>>>                Send DeleteAllControlsForAction
32068>>>>>>>            End
32068>>>>>>>>
32068>>>>>>>            Send ReleaseId of hoCommandBars (piId(Self))
32069>>>>>>>        End
32069>>>>>>>>
32069>>>>>>>        Forward Send Destroy
32071>>>>>>>    End_Procedure
32072>>>>>>>    
32072>>>>>>>    // if the action is being released we must remove it from the action pool. This is needed for
32072>>>>>>>    // context menus which whose actions get created and released with each invocation. This will also
32072>>>>>>>    // happen when an object is destroyed. If the com object is created, destroy will send ReleaseComObject
32072>>>>>>>    Procedure ReleaseComObject
32074>>>>>>>        Integer iId
32074>>>>>>>        Handle hoCommandBars
32074>>>>>>>        Get piId to iId
32075>>>>>>>        If (iId>0 and IsComObjectCreated(Self)) Begin
32077>>>>>>>            Get CommandBarSystemObject to hoCommandBars
32078>>>>>>>            Send RemoveRegisteredAction of hoCommandBars Self
32079>>>>>>>        End
32079>>>>>>>>
32079>>>>>>>        Forward Send ReleaseComObject
32081>>>>>>>    End_Procedure
32082>>>>>>>    
32082>>>>>>>    
32082>>>>>>>    // called when this action is selected. Only send OnExecute if the
32082>>>>>>>    // action is enabled.
32082>>>>>>>    Procedure Execute Variant vCommandBarControl
32084>>>>>>>        Boolean bIsEnabled
32084>>>>>>>        Variant vObject
32084>>>>>>>        Get IsEnabled to bIsEnabled
32085>>>>>>>        If bIsEnabled Begin
32087>>>>>>>            // we will allow no parameter being passed. In such a case the developer probably sent
32087>>>>>>>            // execute themselves and did not pass a com pointer (which you don't normally care about)
32087>>>>>>>            // if this happens just pass a null com object to the OnExecute.
32087>>>>>>>            If (Num_Arguments=0) Begin
32089>>>>>>>                Move (NullComObject()) to vObject
32090>>>>>>>            End
32090>>>>>>>>
32090>>>>>>>            Else Begin
32091>>>>>>>                Move vCommandBarControl to vObject
32092>>>>>>>            End
32092>>>>>>>>
32092>>>>>>>            Send OnExecute vObject
32093>>>>>>>            Send Update
32094>>>>>>>        End
32094>>>>>>>>
32094>>>>>>>    End_Procedure
32095>>>>>>>    
32095>>>>>>>    // Updates the action. Can be called by timer when active update or
32095>>>>>>>    // called when a menu pops up
32095>>>>>>>    Procedure Update
32097>>>>>>>        Set pbVisible to (IsVisible(Self))
32098>>>>>>>        Set pbEnabled to (IsEnabled(Self))
32099>>>>>>>        Set pbChecked to (IsChecked(Self))
32100>>>>>>>        Send OnUpdate
32101>>>>>>>    End_Procedure
32102>>>>>>>    
32102>>>>>>>    // Event called to update the action
32102>>>>>>>    Procedure OnUpdate
32104>>>>>>>    End_Procedure
32105>>>>>>>    
32105>>>>>>>    // before this is called IsEnabled is called
32105>>>>>>>    Procedure OnExecute Variant vCommandBarControl
32107>>>>>>>    End_Procedure
32108>>>>>>>    
32108>>>>>>>    // when hover over
32108>>>>>>>    Procedure OnSelected Variant vCommandBarControl
32110>>>>>>>    End_Procedure
32111>>>>>>>    
32111>>>>>>>    // creation of action.
32111>>>>>>>    Procedure OnCreateAction
32113>>>>>>>    End_Procedure
32114>>>>>>>    
32114>>>>>>>    // before called, self and all items IsEnabled, IsChecked and IsVisible are called
32114>>>>>>>    Procedure OnPopupInit Variant vCommandBarControl Handle hoCommandBarControls
32116>>>>>>>    End_Procedure
32117>>>>>>>    
32117>>>>>>>    Procedure End_Construct_Object
32119>>>>>>>        Integer iID
32119>>>>>>>        Handle hoCommandBars
32119>>>>>>>        Get piId to iID
32120>>>>>>>        // if the ID is 0, auto-assign it.
32120>>>>>>>        If (iID=0) Begin
32122>>>>>>>            Get CommandBarSystemObject to hoCommandBars
32123>>>>>>>            // context menus may not be able to assign an id until they are created.
32123>>>>>>>            If (hoCommandBars<>0) Begin
32125>>>>>>>                Get AssignId of hoCommandBars to iID
32126>>>>>>>                Set piId to iID
32127>>>>>>>            End
32127>>>>>>>>
32127>>>>>>>        End
32127>>>>>>>>
32127>>>>>>>        Forward Send End_Construct_Object
32129>>>>>>>    End_Procedure
32130>>>>>>>    
32130>>>>>>>    
32130>>>>>>>End_Class
32131>>>>>>>
32131>>>>>>>// can be used by all controls. Menu, toolbar and popups.
32131>>>>>>>
32131>>>>>>>
32131>>>>>>>Class cCJMenuItem is a cCJAction
32132>>>>>>>    
32132>>>>>>>    Procedure Construct_Object
32134>>>>>>>        Forward Send Construct_Object
32136>>>>>>>        
32136>>>>>>>        // note that these properties are design time and initalize time only properties
32136>>>>>>>        Property Integer peControlType xtpControlButton
32137>>>>>>>        
32137>>>>>>>        Property Integer peControlStyle xtpButtonAutomatic
32138>>>>>>>        
32138>>>>>>>        Property Boolean pbControlBeginGroup   False
32139>>>>>>>        Property Boolean pbControlCloseSubMenu True
32140>>>>>>>        Property Boolean pbControlFlagRightAlign False
32141>>>>>>>        Property Boolean pbControlFlagLeftPopup  False
32142>>>>>>>        Property Boolean pbControlFlagNoMovable  False
32143>>>>>>>        Property Boolean pbControlFlagControlStretched False
32144>>>>>>>        Property Boolean pbControlFlagShowPopupBarToolTip False
32145>>>>>>>        Property Boolean pbControlFlagWrapRow False
32146>>>>>>>        Property Boolean pbControlDoubleGripper    False
32147>>>>>>>        Property Boolean pbControlPopupToolBar   False
32148>>>>>>>        
32148>>>>>>>        Property Boolean pbAddToDesignerMenu False
32149>>>>>>>        
32149>>>>>>>        // Used to redirect an action to a different object.
32149>>>>>>>        Property Integer phoAction Self
32150>>>>>>>        
32150>>>>>>>        Property Boolean pbInCreateTempInstance False
32151>>>>>>>        
32151>>>>>>>    End_Procedure
32152>>>>>>>    
32152>>>>>>>    // returns true if the control is a popup type - i.e., it will have child menu items. Good for Augmentation
32152>>>>>>>    Function IsPopup Returns Boolean
32154>>>>>>>        Integer eType
32154>>>>>>>        Get peControlType to eType
32155>>>>>>>        Function_Return (eType=xtpControlPopup or eType=xtpControlButtonPopup or eType=xtpControlSplitButtonPopup)
32156>>>>>>>    End_Function
32157>>>>>>>    
32157>>>>>>>    
32157>>>>>>>    
32157>>>>>>>    // must create action and then the visual control
32157>>>>>>>    Procedure CreateComInstance Handle hoControls
32159>>>>>>>        Variant vNewControl vNewControls vCommandBar
32159>>>>>>>        Handle hoNewControl hoNewControls hoCommandBar hoAction hoDesignerControls
32159>>>>>>>        Integer iId
32159>>>>>>>        Boolean bPopup
32159>>>>>>>        
32159>>>>>>>        Send AssignAction
32160>>>>>>>        Get CreateComControl hoControls to vNewControl
32161>>>>>>>        If (IsNullComObject(vNewControl)) Begin
32163>>>>>>>            Procedure_Return
32164>>>>>>>        End
32164>>>>>>>>
32164>>>>>>>        
32164>>>>>>>        Get piId to iId
32165>>>>>>>        
32165>>>>>>>        Get Create U_cCJCommandBarPopup to hoNewControl
32166>>>>>>>        Get Create U_cCJCommandBar to hoCommandbar
32167>>>>>>>        Get Create U_cCJCommandBarControls to hoNewControls
32168>>>>>>>        
32168>>>>>>>        Set pvComObject of hoNewControl to vNewControl
32169>>>>>>>        
32169>>>>>>>        Get IsPopup to bPopup
32170>>>>>>>        If (bPopup) Begin
32172>>>>>>>            
32172>>>>>>>            Get ComCommandBar of hoNewControl to vCommandBar
32173>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
32174>>>>>>>            Get ComControls of hoCommandBar to vNewControls
32175>>>>>>>            Set pvComObject of hoNewControls to vNewControls
32176>>>>>>>            
32176>>>>>>>            Broadcast Send CreateComInstance hoNewControls
32178>>>>>>>            
32178>>>>>>>        End
32178>>>>>>>>
32178>>>>>>>        
32178>>>>>>>        // if add to designer, create another instance of this control and add it to the designer
32178>>>>>>>        // controls. This uses the same action as the regular control. We do this after the child controls
32178>>>>>>>        // are created so that menus will contain all of their children.
32178>>>>>>>        If (pbAddToDesignerMenu(Self)) Begin
32180>>>>>>>            Get DesignerControlsCollection to hoDesignerControls
32181>>>>>>>            // if a designer control for this action already exists, we will not add it again.
32181>>>>>>>            Get ComFind of hoDesignerControls xtpControlError iId Nothing True to vNewControl
32182>>>>>>>            If (IsNullComObject(vNewControl)) Begin
32184>>>>>>>                Get CreateComControl hoDesignerControls to vNewControl
32185>>>>>>>                Set pvComObject of hoNewControl to vNewControl
32186>>>>>>>                If (bPopup) Begin
32188>>>>>>>                    Get ComCommandBar of hoNewControl to vCommandBar
32189>>>>>>>                    Set pvComObject of hoCommandBar to vCommandBar
32190>>>>>>>                    Get ComControls of hoCommandBar to vNewControls
32191>>>>>>>                    Set pvComObject of hoNewControls to vNewControls
32192>>>>>>>                    // note that it is safe to do this because the actions will not get
32192>>>>>>>                    // created again. Only the controls will get created.
32192>>>>>>>                    Broadcast Send CreateComInstance hoNewControls
32194>>>>>>>                End
32194>>>>>>>>
32194>>>>>>>            End
32194>>>>>>>>
32194>>>>>>>        End
32194>>>>>>>>
32194>>>>>>>        
32194>>>>>>>        Send Destroy of hoNewControls
32195>>>>>>>        Send Destroy of hoCommandBar
32196>>>>>>>        Send Destroy of hoNewControl
32197>>>>>>>        
32197>>>>>>>    End_Procedure
32198>>>>>>>    
32198>>>>>>>    // handle action for this menu-item. If the item is the action, make sure a com instance is created
32198>>>>>>>    // if this is not the action, attach to the action which should be created
32198>>>>>>>    // lots of assertions if there is a problem
32198>>>>>>>    Procedure AssignAction
32200>>>>>>>        Handle hoAction
32200>>>>>>>        Integer iId
32200>>>>>>>        
32200>>>>>>>        Get phoAction to hoAction
32201>>>>>>>        
32201>>>>>>>        If not hoAction Begin
32203>>>>>>>            Error DFERR_PROGRAM "Assert: action object is not assigned for menu item"
32204>>>>>>>>
32204>>>>>>>            Procedure_Return
32205>>>>>>>        End
32205>>>>>>>>
32205>>>>>>>        
32205>>>>>>>        // If the action object is self (normal) then we create an action com object if needed.
32205>>>>>>>        // it is possible that the action will already be created. If so, do nothing.
32205>>>>>>>        If (hoAction=Self) Begin
32207>>>>>>>            If not (IsComObjectCreated(Self)) Begin
32209>>>>>>>                Send CreateComAction
32210>>>>>>>            End
32210>>>>>>>>
32210>>>>>>>            Get piId to iId
32211>>>>>>>        End
32211>>>>>>>>
32211>>>>>>>        // if the action is some other object, we will assume it has already been created and just assign
32211>>>>>>>        // its id.
32211>>>>>>>        Else Begin
32212>>>>>>>            Get piId of hoAction to iId
32213>>>>>>>            Set piId to iId
32214>>>>>>>        End
32214>>>>>>>>
32214>>>>>>>        
32214>>>>>>>        If (iId=0) Begin
32216>>>>>>>            Error DFERR_PROGRAM "Assert: Action ID is zero"
32217>>>>>>>>
32217>>>>>>>            Procedure_Return
32218>>>>>>>        End
32218>>>>>>>>
32218>>>>>>>        
32218>>>>>>>        If not (IsComObjectCreated(hoAction)) Begin
32220>>>>>>>            Error  DFERR_PROGRAM "Assert: Action com object not created"
32221>>>>>>>>
32221>>>>>>>            Procedure_Return
32222>>>>>>>        End
32222>>>>>>>>
32222>>>>>>>    End_Procedure
32223>>>>>>>    
32223>>>>>>>    Function AddDynamicControl Handle hoControls Returns Variant
32225>>>>>>>        Variant vNewControl vCommandBar vNewControls
32225>>>>>>>        Boolean bOldTemp bPopup
32225>>>>>>>        Handle hoNewControl  hoCommandBar hoNewControls
32225>>>>>>>        
32225>>>>>>>        Get pbInCreateTempInstance to bOldTemp
32226>>>>>>>        Set pbInCreateTempInstance to True
32227>>>>>>>        
32227>>>>>>>        Send AssignAction
32228>>>>>>>        Get CreateComControl hoControls to vNewControl // if null, an assertion will be declared
32229>>>>>>>        
32229>>>>>>>        Get IsPopup to bPopup
32230>>>>>>>        If (bPopup) Begin
32232>>>>>>>            
32232>>>>>>>            Get Create U_cCJCommandBarPopup to hoNewControl
32233>>>>>>>            Get Create U_cCJCommandBar to hoCommandbar
32234>>>>>>>            Get Create U_cCJCommandBarControls to hoNewControls
32235>>>>>>>            
32235>>>>>>>            Set pvComObject of hoNewControl to vNewControl
32236>>>>>>>            
32236>>>>>>>            Get ComCommandBar of hoNewControl to vCommandBar
32237>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
32238>>>>>>>            Get ComControls of hoCommandBar to vNewControls
32239>>>>>>>            Set pvComObject of hoNewControls to vNewControls
32240>>>>>>>            
32240>>>>>>>            Broadcast Send CreateComInstance hoNewControls
32242>>>>>>>            
32242>>>>>>>            Send Destroy of hoNewControls
32243>>>>>>>            Send Destroy of hoCommandBar
32244>>>>>>>            Send Destroy of hoNewControl
32245>>>>>>>            
32245>>>>>>>        End
32245>>>>>>>>
32245>>>>>>>        
32245>>>>>>>        
32245>>>>>>>        Set pbInCreateTempInstance to bOldTemp
32246>>>>>>>        
32246>>>>>>>        Function_Return vNewControl
32247>>>>>>>    End_Function
32248>>>>>>>    
32248>>>>>>>    // used to actually create the desired control and add it to the passed commandbars
32248>>>>>>>    Function CreateCommandBarControl Handle hoControls Integer eType Integer iId Boolean bInCreateTempInstance Returns Variant
32250>>>>>>>        Variant vControl
32250>>>>>>>        Get ComAdd of hoControls eType iId "" Nothing bInCreateTempInstance to vControl
32251>>>>>>>        Function_Return vControl
32252>>>>>>>    End_Function
32253>>>>>>>    
32253>>>>>>>    // create the menu item control. Return a DataFlex object for this control
32253>>>>>>>    // This assumes that an action ID exiss and that a com action object is created.
32253>>>>>>>    
32253>>>>>>>    Function CreateComControl Handle hoControls Returns Variant
32255>>>>>>>        Handle hoObj hoCommandBar hoCommandBars
32255>>>>>>>        Variant vControl vCommandbar
32255>>>>>>>        Integer iId eType eStyle eFlags iClass
32255>>>>>>>        Boolean bPopup bBegin bClose bDoubleGripper bPopupToolBar
32255>>>>>>>        Boolean bFlagStretch bFlagLeftPopup bFlagNoMove bFlagRightAlign bFlagShowTip bFlagWrap
32255>>>>>>>        Boolean bInCreateTempInstance
32255>>>>>>>        
32255>>>>>>>        
32255>>>>>>>        Get pbInCreateTempInstance to bInCreateTempInstance
32256>>>>>>>        
32256>>>>>>>        Get piId to iId
32257>>>>>>>        Get peControlType to eType
32258>>>>>>>        Get peControlStyle to eStyle
32259>>>>>>>        Get pbControlBeginGroup to bBegin
32260>>>>>>>        Get pbControlCloseSubMenu to bClose
32261>>>>>>>        Get pbControlFlagControlStretched to bFlagStretch
32262>>>>>>>        Get pbControlFlagLeftPopup to bFlagLeftPopup
32263>>>>>>>        Get pbControlFlagNoMovable to bFlagNoMove
32264>>>>>>>        Get pbControlFlagRightAlign to bFlagRightAlign
32265>>>>>>>        Get pbControlFlagShowPopupBarToolTip to bFlagShowTip
32266>>>>>>>        Get pbControlDoubleGripper to bDoubleGripper
32267>>>>>>>        Get pbControlPopupToolBar to bPopupToolBar
32268>>>>>>>        Get pbControlFlagWrapRow to bFlagWrap
32269>>>>>>>        // assemble the COMFlags from the flag properties.
32269>>>>>>>        Move (If(bFlagStretch,xtpFlagControlStretched,0) + ;            If(bFlagLeftPopup,xtpFlagLeftPopup,0) +;            If(bFlagNoMove,xtpFlagNoMovable,0) +;            If(bFlagRightAlign,xtpFlagRightAlign,0) +;            If(bFlagShowTip,xtpFlagShowPopupBarTip,0) +;            If(bFlagWrap,xtpFlagWrapRow,0) ) to eFlags
32270>>>>>>>        
32270>>>>>>>        Get CreateCommandBarControl hoControls eType iId bInCreateTempInstance to vControl
32271>>>>>>>        
32271>>>>>>>        If (IsNullComObject(vControl)) Begin
32273>>>>>>>            Error DFERR_PROGRAM ("Assert: could not create com control: Type" - String(eType) - ", iId=" - String(iId))
32274>>>>>>>>
32274>>>>>>>            Function_Return vControl
32275>>>>>>>        End
32275>>>>>>>>
32275>>>>>>>        
32275>>>>>>>        Get IsPopup to bPopup
32276>>>>>>>        Get ClassForControlType eType to iClass
32277>>>>>>>        Get Create iClass to hoObj
32278>>>>>>>        Set pvComObject of hoObj to vControl
32279>>>>>>>        Set ComStyle of hoObj to eStyle
32280>>>>>>>        Set ComBeginGroup of hoObj to bBegin
32281>>>>>>>        Set ComCloseSubMenuOnClick of hoObj to bClose
32282>>>>>>>        Set ComFlags of hoObj to eFlags
32283>>>>>>>        
32283>>>>>>>        If bPopup Begin
32285>>>>>>>            Get Create U_cCJCommandBar to hoCommandbar
32286>>>>>>>            Get ComCommandBar of hoObj to vCommandBar
32287>>>>>>>            
32287>>>>>>>            // it appears that it is possible to have a popup that does not get assigned
32287>>>>>>>            // a commandbar. If that happens we will add a commandbar to the control
32287>>>>>>>            // the hard way.
32287>>>>>>>            If (IsNullComObject(vCommandbar)) Begin
32289>>>>>>>                Get CommandBarSystemObject to hoCommandBars
32290>>>>>>>                Get ComAdd of hoCommandBars "Popup" xtpBarPopup to vCommandBar
32291>>>>>>>                Set ComCommandBar of hoObj to vCommandBar
32292>>>>>>>            End
32292>>>>>>>>
32292>>>>>>>            
32292>>>>>>>            Set pvComObject of hoCommandBar to vCommandBar
32293>>>>>>>            
32293>>>>>>>            If (bDoubleGripper) Begin
32295>>>>>>>                Set ComDoubleGripper of hoCommandBar to True
32296>>>>>>>            End
32296>>>>>>>>
32296>>>>>>>            If (bPopupToolBar) Begin
32298>>>>>>>                Send ComSetPopupToolBar of hoCommandBar True
32299>>>>>>>            End
32299>>>>>>>>
32299>>>>>>>            
32299>>>>>>>            Send Destroy of hoCommandBar
32300>>>>>>>        End
32300>>>>>>>>
32300>>>>>>>        
32300>>>>>>>        Send OnCreateControl hoObj
32301>>>>>>>        
32301>>>>>>>        Send destroy of hoObj
32302>>>>>>>        
32302>>>>>>>        Function_Return vControl
32303>>>>>>>        
32303>>>>>>>    End_Function
32304>>>>>>>    
32304>>>>>>>    Procedure OnCreateControl Handle hoObj
32306>>>>>>>    End_Procedure
32307>>>>>>>    
32307>>>>>>>End_Class
32308>>>>>>>
32308>>>>>>>
32308>>>>>>>Class cCJStatusBar is a cCJComStatusBar
32309>>>>>>>    
32309>>>>>>>    Procedure Construct_Object
32311>>>>>>>        Boolean bMDI
32311>>>>>>>        Handle hoCommandBars
32311>>>>>>>        Forward Send Construct_Object
32313>>>>>>>        
32313>>>>>>>        Property Boolean pbPrivateDrawDisabledText True
32314>>>>>>>        Property String  psPrivateIdleText ''
32315>>>>>>>        Property Boolean pbPrivateVisible True
32316>>>>>>>        
32316>>>>>>>        Property Integer piStatusBarId ID_StatusBarsAutoStart
32317>>>>>>>        
32317>>>>>>>        Property Integer phoViewPane 0
32318>>>>>>>        
32318>>>>>>>        Set peNeighborhood to nhNo
32319>>>>>>>        
32319>>>>>>>        
32319>>>>>>>    End_Procedure
32320>>>>>>>    
32320>>>>>>>    // Remove the references to the statusbar when it is about to be destroyed.
32320>>>>>>>    Procedure Destroy_Object
32322>>>>>>>        Handle hoCommandBars
32322>>>>>>>        Boolean bMDI
32322>>>>>>>        Get CommandBarSystemObject to hoCommandBars
32323>>>>>>>        // if this is an MDI command bar, reset the main Status bar
32323>>>>>>>        Get pbMDIMenu of hoCommandBars to bMDI
32324>>>>>>>        If bMDI Begin
32326>>>>>>>            Set Statusbar_Id to 0
32327>>>>>>>        End
32327>>>>>>>>
32327>>>>>>>        Set phoStatusBar of hoCommandBars to 0
32328>>>>>>>        Forward Send Destroy_Object
32330>>>>>>>    End_Procedure
32331>>>>>>>    
32331>>>>>>>    Procedure Set pbDrawDisabledText Boolean bValue
32333>>>>>>>        Set pbPrivateDrawDisabledText to bValue
32334>>>>>>>        If (IsComObjectCreated(Self)) Begin
32336>>>>>>>            Set ComDrawDisabledText to bValue
32337>>>>>>>        End
32337>>>>>>>>
32337>>>>>>>    End_Procedure
32338>>>>>>>    
32338>>>>>>>    Function pbDrawDisabledText Returns Boolean
32340>>>>>>>        Boolean bValue
32340>>>>>>>        If (IsComObjectCreated(Self)) Begin
32342>>>>>>>            Get ComDrawDisabledText to bValue
32343>>>>>>>        End
32343>>>>>>>>
32343>>>>>>>        Else Begin
32344>>>>>>>            Get pbPrivateDrawDisabledText to bValue
32345>>>>>>>        End
32345>>>>>>>>
32345>>>>>>>        Function_Return bValue
32346>>>>>>>    End_Function
32347>>>>>>>    
32347>>>>>>>    Procedure Set pbVisible Boolean bValue
32349>>>>>>>        Set pbPrivateVisible to bValue
32350>>>>>>>        If (IsComObjectCreated(Self)) Begin
32352>>>>>>>            Set ComVisible to bValue
32353>>>>>>>        End
32353>>>>>>>>
32353>>>>>>>    End_Procedure
32354>>>>>>>    
32354>>>>>>>    Function pbVisible Returns Boolean
32356>>>>>>>        Boolean bValue
32356>>>>>>>        // for some reason visible state of statusbar is set false when
32356>>>>>>>        // commandbarsystem is not active. So we also check active_state
32356>>>>>>>        If (IsComObjectCreated(Self) and Active_State(Self)) Begin
32358>>>>>>>            Get ComVisible to bValue
32359>>>>>>>        End
32359>>>>>>>>
32359>>>>>>>        Else Begin
32360>>>>>>>            Get pbPrivateVisible to bValue
32361>>>>>>>        End
32361>>>>>>>>
32361>>>>>>>        Function_Return bValue
32362>>>>>>>    End_Function
32363>>>>>>>    
32363>>>>>>>    Procedure Set psIdleText String sValue
32365>>>>>>>        Set psPrivateIdleText to sValue
32366>>>>>>>        If (IsComObjectCreated(Self)) Begin
32368>>>>>>>            Set ComIdleText to sValue
32369>>>>>>>        End
32369>>>>>>>>
32369>>>>>>>    End_Procedure
32370>>>>>>>    
32370>>>>>>>    Function psIdleText Returns String
32372>>>>>>>        String sValue
32372>>>>>>>        If (IsComObjectCreated(Self)) Begin
32374>>>>>>>            Get ComIdleText to sValue
32375>>>>>>>        End
32375>>>>>>>>
32375>>>>>>>        Else Begin
32376>>>>>>>            Get psPrivateIdleText to sValue
32377>>>>>>>        End
32377>>>>>>>>
32377>>>>>>>        Function_Return sValue
32378>>>>>>>    End_Function
32379>>>>>>>    
32379>>>>>>>    
32379>>>>>>>    Procedure CreateComInstance
32381>>>>>>>        Handle hoCommandBars
32381>>>>>>>        Variant vStatusBar
32381>>>>>>>        String sTitle
32381>>>>>>>        Integer iBarId iWidth iDockFgs
32381>>>>>>>        Boolean bDrawDisabledText bVisible bMDI
32381>>>>>>>        String  sIdleText
32381>>>>>>>        
32381>>>>>>>        // if already created, we don't do anything. This could happen during
32381>>>>>>>        // a restore
32381>>>>>>>        If (IsComObjectCreated(Self)) Begin
32383>>>>>>>            Procedure_Return
32384>>>>>>>        End
32384>>>>>>>>
32384>>>>>>>        
32384>>>>>>>        Get CommandBarSystemObject to hoCommandBars
32385>>>>>>>        
32385>>>>>>>        // if this is an MDI command bar, we will define this as the main Status bar
32385>>>>>>>        Get pbMDIMenu of hoCommandBars to bMDI
32386>>>>>>>        If bMDI Begin
32388>>>>>>>            Set Statusbar_Id to Self
32389>>>>>>>        End
32389>>>>>>>>
32389>>>>>>>        Set phoStatusBar of hoCommandBars to Self
32390>>>>>>>        
32390>>>>>>>        Get pbPrivateDrawDisabledText to bDrawDisabledText
32391>>>>>>>        Get pbPrivateVisible to bVisible
32392>>>>>>>        Get psPrivateIdleText to sIdleText
32393>>>>>>>        Get ComStatusBar of hoCommandBars to vStatusBar
32394>>>>>>>        Set pvComObject to vStatusBar
32395>>>>>>>        Set ComDrawDisabledText to bDrawDisabledText
32396>>>>>>>        Set ComVisible to bVisible
32397>>>>>>>        Set ComIdleText to sIdleText
32398>>>>>>>        
32398>>>>>>>        Send OnCreate
32399>>>>>>>        
32399>>>>>>>        Broadcast Send CreateComInstance Self
32401>>>>>>>        
32401>>>>>>>    End_Procedure
32402>>>>>>>    
32402>>>>>>>    // display "main" status help. Usually provided from DD.
32402>>>>>>>    Procedure Show_Status_Help String sStatusHelp
32404>>>>>>>        Set psIdleText to sStatusHelp
32405>>>>>>>    End_Procedure
32406>>>>>>>    
32406>>>>>>>    // show the view name in the pane if a phoViewPane exists
32406>>>>>>>    Procedure Show_View_Name String sName
32408>>>>>>>        Handle hoPane
32408>>>>>>>        Get phoViewPane to hoPane
32409>>>>>>>        If (hoPane) Begin
32411>>>>>>>            Set psText of hoPane to sName
32412>>>>>>>        End
32412>>>>>>>>
32412>>>>>>>    End_Procedure
32413>>>>>>>    
32413>>>>>>>    // legacy from old status bar
32413>>>>>>>    Procedure Exit_Menu
32415>>>>>>>    End_Procedure
32416>>>>>>>    
32416>>>>>>>    // returns an array of all pane objects (these are the DF objects, if additional COM panes were
32416>>>>>>>    // created they are not here)
32416>>>>>>>    Function PaneObjects Returns Handle[]
32418>>>>>>>        Handle[] hoPanes
32419>>>>>>>        Broadcast Send RegisterStatusPaneObject (&hoPanes)
32421>>>>>>>        Function_Return hoPanes
32422>>>>>>>    End_Function
32423>>>>>>>    
32423>>>>>>>    // Find the DF object for the passed COM object. Returns 0 if none found
32423>>>>>>>    Function FindPaneObject Variant vPane Returns Handle
32425>>>>>>>        Handle hoPane
32425>>>>>>>        Handle[] hoPanes
32426>>>>>>>        Integer i iPanes iId
32426>>>>>>>        Get Create U_cCJComStatusBarPane to hoPane
32427>>>>>>>        Set pvComObject of hoPane to vPane
32428>>>>>>>        Get ComId of hoPane to iId
32429>>>>>>>        Send destroy of hoPane
32430>>>>>>>        Get PaneObjects to hoPanes // get all df pane objects
32431>>>>>>>        Move (SizeOfArray(hoPanes)) to iPanes
32432>>>>>>>        For i from 0 to (iPanes-1)
32438>>>>>>>>
32438>>>>>>>            If (iId=piId(hoPanes[i])) Begin // search for DF object with same ID as com object
32440>>>>>>>                Function_Return hoPanes[i]
32441>>>>>>>            End
32441>>>>>>>>
32441>>>>>>>        Loop
32442>>>>>>>>
32442>>>>>>>        Function_Return 0
32443>>>>>>>    End_Function
32444>>>>>>>    
32444>>>>>>>    // this returns the width, in pixels, needed to display a string.
32444>>>>>>>    Function PaneTextWidth WString sText Returns Integer
32446>>>>>>>        Handle hWnd hDC
32446>>>>>>>        Integer bOK
32446>>>>>>>        tWinPoint Point
32446>>>>>>>        tWinPoint Point
32446>>>>>>>        
32446>>>>>>>        Get Window_Handle to hWnd
32447>>>>>>>        Move (GetDC(hWnd)) to hDC
32448>>>>>>>        
32448>>>>>>>        Move (GetTextExtentW(hDC, AddressOf(sText), length(sText), AddressOf(Point))) to bOk
32449>>>>>>>        
32449>>>>>>>        Move (ReleaseDC(hWnd, hDC)) to hDC
32450>>>>>>>        Function_Return Point.x
32451>>>>>>>    End_Function
32452>>>>>>>    
32452>>>>>>>    Procedure Update
32454>>>>>>>        Send OnUpdate
32455>>>>>>>    End_Procedure
32456>>>>>>>    
32456>>>>>>>    Procedure OnUpdate
32458>>>>>>>    End_Procedure
32459>>>>>>>    
32459>>>>>>>    Procedure OnCreate
32461>>>>>>>    End_Procedure
32462>>>>>>>    
32462>>>>>>>    Procedure OnComPaneClick Variant llPane
32464>>>>>>>        Handle hoPane
32464>>>>>>>        Get FindPaneObject llPane to hoPane
32465>>>>>>>        If hoPane Begin
32467>>>>>>>            Send onClick of hoPane
32468>>>>>>>        End
32468>>>>>>>>
32468>>>>>>>    End_Procedure
32469>>>>>>>    
32469>>>>>>>    Procedure OnComPaneDblClick Variant llPane
32471>>>>>>>        Handle hoPane
32471>>>>>>>        Get FindPaneObject llPane to hoPane
32472>>>>>>>        If hoPane Begin
32474>>>>>>>            Send onDblClick of hoPane
32475>>>>>>>        End
32475>>>>>>>>
32475>>>>>>>    End_Procedure
32476>>>>>>>    
32476>>>>>>>End_Class
32477>>>>>>>
32477>>>>>>>
32477>>>>>>>Class cCJStatusBarPane is a cCJComStatusBarPane
32478>>>>>>>    
32478>>>>>>>    Procedure Construct_Object
32480>>>>>>>        Forward Send Construct_Object
32482>>>>>>>        Property Integer pePrivateAlignment xtpAlignmentLeft
32483>>>>>>>        Property Integer piPrivateBackGroundColor clNone
32484>>>>>>>        Property Integer piPrivateTextColor clNone
32485>>>>>>>        Property String  psPrivateText ''
32486>>>>>>>        Property String  psPrivateTooltip ''
32487>>>>>>>        Property Boolean pbPrivateVisible True
32488>>>>>>>        Property Integer piPrivateWidth 0
32489>>>>>>>        Property Integer pbPrivateStyleNoBorders False
32490>>>>>>>        Property Integer pbPrivateStyleDisabled False
32491>>>>>>>        Property Integer pbPrivateStyleStretch False
32492>>>>>>>        Property Integer  piPrivateIconId 0
32493>>>>>>>        
32493>>>>>>>        Property String  psImage ''
32494>>>>>>>        
32494>>>>>>>        Property Integer piId sbpIDAutoAssign
32495>>>>>>>        
32495>>>>>>>        Set peNeighborhood to nhNo
32496>>>>>>>    End_Procedure
32497>>>>>>>    
32497>>>>>>>    Procedure Set pbVisible Boolean bValue
32499>>>>>>>        Set pbPrivateVisible to bValue
32500>>>>>>>        If (IsComObjectCreated(Self)) Begin
32502>>>>>>>            Set ComVisible to bValue
32503>>>>>>>        End
32503>>>>>>>>
32503>>>>>>>    End_Procedure
32504>>>>>>>    
32504>>>>>>>    Function pbVisible Returns Boolean
32506>>>>>>>        Boolean bValue
32506>>>>>>>        If (IsComObjectCreated(Self)) Begin
32508>>>>>>>            Get ComVisible to bValue
32509>>>>>>>        End
32509>>>>>>>>
32509>>>>>>>        Else Begin
32510>>>>>>>            Get pbPrivateVisible to bValue
32511>>>>>>>        End
32511>>>>>>>>
32511>>>>>>>        Function_Return bValue
32512>>>>>>>    End_Function
32513>>>>>>>    
32513>>>>>>>    Procedure Set piBackgroundColor Integer iValue
32515>>>>>>>        Set piPrivateBackgroundColor to iValue
32516>>>>>>>        If (IsComObjectCreated(Self)) Begin
32518>>>>>>>            Set ComBackgroundColor to iValue
32519>>>>>>>        End
32519>>>>>>>>
32519>>>>>>>    End_Procedure
32520>>>>>>>    
32520>>>>>>>    Function piBackgroundColor Returns Integer
32522>>>>>>>        Integer iValue
32522>>>>>>>        If (IsComObjectCreated(Self)) Begin
32524>>>>>>>            Get ComBackgroundColor to iValue
32525>>>>>>>        End
32525>>>>>>>>
32525>>>>>>>        Else Begin
32526>>>>>>>            Get piPrivateBackgroundColor to iValue
32527>>>>>>>        End
32527>>>>>>>>
32527>>>>>>>        Function_Return iValue
32528>>>>>>>    End_Function
32529>>>>>>>    
32529>>>>>>>    Procedure Set piTextColor Integer iValue
32531>>>>>>>        Set piPrivateTextColor to iValue
32532>>>>>>>        If (IsComObjectCreated(Self)) Begin
32534>>>>>>>            Set ComTextColor to iValue
32535>>>>>>>        End
32535>>>>>>>>
32535>>>>>>>    End_Procedure
32536>>>>>>>    
32536>>>>>>>    Function piTextColor Returns Integer
32538>>>>>>>        Integer iValue
32538>>>>>>>        If (IsComObjectCreated(Self)) Begin
32540>>>>>>>            Get ComTextColor to iValue
32541>>>>>>>        End
32541>>>>>>>>
32541>>>>>>>        Else Begin
32542>>>>>>>            Get piPrivateTextColor to iValue
32543>>>>>>>        End
32543>>>>>>>>
32543>>>>>>>        Function_Return iValue
32544>>>>>>>    End_Function
32545>>>>>>>    
32545>>>>>>>    Procedure Set piWidth Integer iValue
32547>>>>>>>        Set piPrivateWidth to iValue
32548>>>>>>>        If (IsComObjectCreated(Self)) Begin
32550>>>>>>>            Set ComWidth to iValue
32551>>>>>>>        End
32551>>>>>>>>
32551>>>>>>>    End_Procedure
32552>>>>>>>    
32552>>>>>>>    Function piWidth Returns Integer
32554>>>>>>>        Integer iValue
32554>>>>>>>        If (IsComObjectCreated(Self)) Begin
32556>>>>>>>            Get ComWidth to iValue
32557>>>>>>>        End
32557>>>>>>>>
32557>>>>>>>        Else Begin
32558>>>>>>>            Get piPrivateWidth to iValue
32559>>>>>>>        End
32559>>>>>>>>
32559>>>>>>>        Function_Return iValue
32560>>>>>>>    End_Function
32561>>>>>>>    
32561>>>>>>>    Procedure Set peAlignment Integer eValue
32563>>>>>>>        Set pePrivateAlignment to eValue
32564>>>>>>>        If (IsComObjectCreated(Self)) Begin
32566>>>>>>>            Set ComAlignment to eValue
32567>>>>>>>        End
32567>>>>>>>>
32567>>>>>>>    End_Procedure
32568>>>>>>>    
32568>>>>>>>    Function peAlignment Returns Integer
32570>>>>>>>        Integer eValue
32570>>>>>>>        If (IsComObjectCreated(Self)) Begin
32572>>>>>>>            Get ComAlignment to eValue
32573>>>>>>>        End
32573>>>>>>>>
32573>>>>>>>        Else Begin
32574>>>>>>>            Get pePrivateAlignment to eValue
32575>>>>>>>        End
32575>>>>>>>>
32575>>>>>>>        Function_Return eValue
32576>>>>>>>    End_Function
32577>>>>>>>    
32577>>>>>>>    Procedure SetPaneStyle Integer iMask Boolean bValue Handle hmMessage
32579>>>>>>>        Integer eValue
32579>>>>>>>        Set hmMessage to bValue
32580>>>>>>>        If (IsComObjectCreated(Self)) Begin
32582>>>>>>>            Set ComStyle to eValue
32583>>>>>>>            If (bValue) Begin
32585>>>>>>>                Move (AddBitValue(iMask,eValue)) to eValue
32586>>>>>>>            End
32586>>>>>>>>
32586>>>>>>>            Else Begin
32587>>>>>>>                Move (RemoveBitValue(iMask,eValue)) to eValue
32588>>>>>>>            End
32588>>>>>>>>
32588>>>>>>>            Set ComStyle to eValue
32589>>>>>>>        End
32589>>>>>>>>
32589>>>>>>>    End_Procedure
32590>>>>>>>    
32590>>>>>>>    Function GetPaneStyle Integer iMask Handle hmMessage Returns Boolean
32592>>>>>>>        Integer eValue
32592>>>>>>>        Boolean bValue
32592>>>>>>>        If (IsComObjectCreated(Self)) Begin
32594>>>>>>>            Get ComStyle to eValue
32595>>>>>>>            Move (eValue iand iMask) to bValue
32596>>>>>>>        End
32596>>>>>>>>
32596>>>>>>>        Else Begin
32597>>>>>>>            Get hmMessage to bValue
32598>>>>>>>        End
32598>>>>>>>>
32598>>>>>>>        Function_Return bValue
32599>>>>>>>    End_Function
32600>>>>>>>    
32600>>>>>>>    Procedure Set pbStyleNoBorders Boolean bValue
32602>>>>>>>        Send SetPaneStyle SBPS_NOBORDERS bValue set_pbPrivateStyleNoBorders
32603>>>>>>>    End_Procedure
32604>>>>>>>    
32604>>>>>>>    Function pbStyleNoBorders Returns Boolean
32606>>>>>>>        Boolean bValue
32606>>>>>>>        Get GetPaneStyle SBPS_NOBORDERS get_pbPrivateStyleNoBorders to bValue
32607>>>>>>>        Function_Return bValue
32608>>>>>>>    End_Function
32609>>>>>>>    
32609>>>>>>>    Procedure Set pbStyleDisabled Boolean bValue
32611>>>>>>>        Send SetPaneStyle SBPS_DISABLED bValue set_pbPrivateStyleDisabled
32612>>>>>>>    End_Procedure
32613>>>>>>>    
32613>>>>>>>    Function pbStyleDisabled Returns Boolean
32615>>>>>>>        Boolean bValue
32615>>>>>>>        Get GetPaneStyle SBPS_DISABLED get_pbPrivateStyleDisabled to bValue
32616>>>>>>>        Function_Return bValue
32617>>>>>>>    End_Function
32618>>>>>>>    
32618>>>>>>>    Procedure Set pbStyleStretch Boolean bValue
32620>>>>>>>        Send SetPaneStyle SBPS_STRETCH bValue Set_pbPrivateStyleStretch
32621>>>>>>>    End_Procedure
32622>>>>>>>    
32622>>>>>>>    Function pbStyleStretch Returns Boolean
32624>>>>>>>        Boolean bValue
32624>>>>>>>        Get GetPaneStyle SBPS_STRETCH get_pbPrivateStyleStretch to bValue
32625>>>>>>>        Function_Return bValue
32626>>>>>>>    End_Function
32627>>>>>>>    
32627>>>>>>>    
32627>>>>>>>    Procedure Set psText String sValue
32629>>>>>>>        Set psPrivateText to sValue
32630>>>>>>>        If (IsComObjectCreated(Self)) Begin
32632>>>>>>>            Set ComText to sValue
32633>>>>>>>        End
32633>>>>>>>>
32633>>>>>>>    End_Procedure
32634>>>>>>>    
32634>>>>>>>    Function psText Returns String
32636>>>>>>>        String sValue
32636>>>>>>>        If (IsComObjectCreated(Self)) Begin
32638>>>>>>>            Get ComText to sValue
32639>>>>>>>        End
32639>>>>>>>>
32639>>>>>>>        Else Begin
32640>>>>>>>            Get psPrivateText to sValue
32641>>>>>>>        End
32641>>>>>>>>
32641>>>>>>>        Function_Return sValue
32642>>>>>>>    End_Function
32643>>>>>>>    
32643>>>>>>>    Procedure Set psToolTip String sValue
32645>>>>>>>        Set psPrivateToolTip to sValue
32646>>>>>>>        If (IsComObjectCreated(Self)) Begin
32648>>>>>>>            Set ComToolTip to sValue
32649>>>>>>>        End
32649>>>>>>>>
32649>>>>>>>    End_Procedure
32650>>>>>>>    
32650>>>>>>>    Function psToolTip Returns String
32652>>>>>>>        String sValue
32652>>>>>>>        If (IsComObjectCreated(Self)) Begin
32654>>>>>>>            Get ComToolTip to sValue
32655>>>>>>>        End
32655>>>>>>>>
32655>>>>>>>        Else Begin
32656>>>>>>>            Get psPrivateToolTip to sValue
32657>>>>>>>        End
32657>>>>>>>>
32657>>>>>>>        Function_Return sValue
32658>>>>>>>    End_Function
32659>>>>>>>    
32659>>>>>>>    // normally this is zero and not changed. When zero the imageId used will be
32659>>>>>>>    // the statusbarId and this is the ID that is used when the psImage method is used.
32659>>>>>>>    // Using psImage is preferred as it adds the icon and assigns it to the object.
32659>>>>>>>    // This can be used to change icons. Note 0=use StatusbarId
32659>>>>>>>    Procedure Set piIconId Integer iValue
32661>>>>>>>        Set piPrivateIconId to iValue
32662>>>>>>>        If (IsComObjectCreated(Self)) Begin
32664>>>>>>>            Set ComIconIndex to iValue
32665>>>>>>>        End
32665>>>>>>>>
32665>>>>>>>    End_Procedure
32666>>>>>>>    
32666>>>>>>>    Function piIconId Returns Integer
32668>>>>>>>        Integer iValue
32668>>>>>>>        If (IsComObjectCreated(Self)) Begin
32670>>>>>>>            Get ComIconIndex to iValue
32671>>>>>>>        End
32671>>>>>>>>
32671>>>>>>>        Else Begin
32672>>>>>>>            Get piPrivateIconId to iValue
32673>>>>>>>        End
32673>>>>>>>>
32673>>>>>>>        Function_Return iValue
32674>>>>>>>    End_Function
32675>>>>>>>    
32675>>>>>>>    Procedure CreateComInstance Handle hoStatusBar
32677>>>>>>>        Variant vStatusBarPane
32677>>>>>>>        String sImage sText sToolTip
32677>>>>>>>        Integer iWidth eAlignment eStyle iBackGroundColor iTextColor iId iIconId iNewIconid
32677>>>>>>>        Boolean  bVisible bOk bStyleStretch bStyleDisabled bStyleNoBorders
32677>>>>>>>        Handle hoCommandBars
32677>>>>>>>        
32677>>>>>>>        Get CommandBarSystemObject to hoCommandBars
32678>>>>>>>        
32678>>>>>>>        Get pePrivateAlignment to eAlignment
32679>>>>>>>        Get pbPrivateVisible to bVisible
32680>>>>>>>        Get psPrivateText to sText
32681>>>>>>>        Get psPrivateTooltip to sToolTip
32682>>>>>>>        Get piPrivateBackGroundColor to iBackGroundColor
32683>>>>>>>        Get piPrivateTextColor to iTextColor
32684>>>>>>>        Get psImage to sImage
32685>>>>>>>        Get piPrivateWidth to iWidth
32686>>>>>>>        Get pbPrivateStyleStretch to bStyleStretch
32687>>>>>>>        Get pbPrivateStyleNoBorders to bStyleNoBorders
32688>>>>>>>        Get pbPrivateStyleDisabled to bStyleDisabled
32689>>>>>>>        Get piPrivateIconId to iIconId
32690>>>>>>>        
32690>>>>>>>        Get piId to iId
32691>>>>>>>        
32691>>>>>>>        // this check is added because a duplicate ID throws an exception error
32691>>>>>>>        Get ComFindPane of hoStatusBar iId to vStatusBarPane
32692>>>>>>>        If (not(IsNullComObject(vStatusBarPane))) Begin
32694>>>>>>>            Error DFERR_PROGRAM ("Cannot add status pane. Duplicate Id (" - String(iId) - ")")
32695>>>>>>>>
32695>>>>>>>            Procedure_Return
32696>>>>>>>        End
32696>>>>>>>>
32696>>>>>>>        
32696>>>>>>>        Get ComAddPane of hoStatusBar iId to vStatusBarPane
32697>>>>>>>        Set pvComObject to vStatusBarPane
32698>>>>>>>        Set ComAlignment to eAlignment
32699>>>>>>>        If (sText<>"") Begin
32701>>>>>>>            Set ComText to sText
32702>>>>>>>        End
32702>>>>>>>>
32702>>>>>>>        Set ComToolTip to sToolTip
32703>>>>>>>        If (iBackGroundColor<>clNone) Begin
32705>>>>>>>            Set ComBackgroundColor to iBackGroundColor
32706>>>>>>>        End
32706>>>>>>>>
32706>>>>>>>        If (iTextColor<>clNone) Begin
32708>>>>>>>            Set ComTextColor to iTextColor
32709>>>>>>>        End
32709>>>>>>>>
32709>>>>>>>        
32709>>>>>>>        Move (If(bStyleDisabled,SBPS_DISABLED,0) + ;            If(bStyleNoBorders,SBPS_NOBORDERS,0) + ;            If(bStyleStretch,SBPS_STRETCH,0)) to eStyle
32710>>>>>>>        Set ComStyle to eStyle
32711>>>>>>>        
32711>>>>>>>        If (sImage<>"") Begin
32713>>>>>>>            Get AddImage of hoCommandBars sImage iId xtpImageNormal to iNewIconid
32714>>>>>>>            Set ComIconIndex to iId
32715>>>>>>>        End
32715>>>>>>>>
32715>>>>>>>        If (iIconId<>0) Begin
32717>>>>>>>            Set ComIconIndex to iIconId
32718>>>>>>>        End
32718>>>>>>>>
32718>>>>>>>        
32718>>>>>>>        Set ComVisible to bVisible
32719>>>>>>>        Set ComWidth to iWidth
32720>>>>>>>        
32720>>>>>>>        Send OnCreate
32721>>>>>>>        
32721>>>>>>>    End_Procedure
32722>>>>>>>    
32722>>>>>>>    Procedure RegisterStatusPaneObject Handle[] ByRef hoPanes
32724>>>>>>>        Move Self to hoPanes[SizeOfArray(hoPanes)]
32725>>>>>>>    End_Procedure
32726>>>>>>>    
32726>>>>>>>    // auto assign an Id for the status bar. Called in end_construct_object if needed
32726>>>>>>>    Function AssignStatusBarID Returns Integer
32728>>>>>>>        Integer iId
32728>>>>>>>        Get piStatusBarId  to iId
32729>>>>>>>        Set piStatusBarId to (iId + 1)
32730>>>>>>>        Function_Return iId
32731>>>>>>>    End_Function
32732>>>>>>>    
32732>>>>>>>    Procedure OnCreate
32734>>>>>>>    End_Procedure
32735>>>>>>>    
32735>>>>>>>    Procedure OnClick
32737>>>>>>>    End_Procedure
32738>>>>>>>    
32738>>>>>>>    Procedure OnDblClick
32740>>>>>>>    End_Procedure
32741>>>>>>>    
32741>>>>>>>    Procedure End_Construct_Object
32743>>>>>>>        Integer iID
32743>>>>>>>        Get piId to iID
32744>>>>>>>        If (iID=sbpIDAutoAssign) Begin
32746>>>>>>>            Get AssignStatusBarID to iID
32747>>>>>>>            Set piId to iID
32748>>>>>>>        End
32748>>>>>>>>
32748>>>>>>>        Forward Send End_Construct_Object
32750>>>>>>>    End_Procedure
32751>>>>>>>    
32751>>>>>>>End_Class
32752>>>>>>>
32752>>>>>Use LanguageText.pkg
32752>>>>>
32752>>>>>
32752>>>>>Class cCJUndoMenuItem is a cCJMenuItem
32753>>>>>    
32753>>>>>    Procedure Construct_Object
32755>>>>>        Forward Send Construct_Object
32757>>>>>        Set psCaption   to C_$CaptionUndo
32758>>>>>        Set psToolTip to C_$ToolTipUndo
32759>>>>>        Set psDescription to C_$DescUndo
32760>>>>>        Set psImage to "ActionUndo.ico"
32761>>>>>        Set pbActiveUpdate to True
32762>>>>>        Set psCategory to C_$CategoryEdit
32763>>>>>        Set psShortcut to C_$Key_Ctrl_Z
32764>>>>>    End_Procedure
32765>>>>>    
32765>>>>>    Procedure OnExecute Variant vCommandBarControl
32767>>>>>        Send Undo of (focus(Self))
32768>>>>>    End_Procedure
32769>>>>>    
32769>>>>>    Function IsEnabled Returns Boolean
32771>>>>>        Boolean bEnabled
32771>>>>>        Get CanUndo of (Focus(Self)) to bEnabled
32772>>>>>        Function_Return bEnabled
32773>>>>>    End_Function
32774>>>>>    
32774>>>>>End_Class
32775>>>>>
32775>>>>>
32775>>>>>Class cCJDeleteEditMenuItem is a cCJMenuItem
32776>>>>>    
32776>>>>>    Procedure Construct_Object
32778>>>>>        Forward Send Construct_Object
32780>>>>>        Set psCaption   to C_$CaptionDelete
32781>>>>>        Set psToolTip to C_$ToolTipDelete
32782>>>>>        Set psDescription to C_$DescDelete
32783>>>>>        Set psImage to "actionDelete.ico"
32784>>>>>        Set psShortcut to C_$Key_Delete
32785>>>>>        Set pbActiveUpdate to True
32786>>>>>        Set psCategory to C_$CategoryEdit
32787>>>>>    End_Procedure
32788>>>>>    
32788>>>>>    
32788>>>>>    Procedure OnExecute Variant vCommandBarControl
32790>>>>>        Send Delete of (focus(Self))
32791>>>>>    End_Procedure
32792>>>>>    
32792>>>>>    Function IsEnabled Returns Boolean
32794>>>>>        Boolean bEnabled
32794>>>>>        Get CanDelete of (Focus(Self)) to bEnabled
32795>>>>>        Function_Return bEnabled
32796>>>>>    End_Function
32797>>>>>    
32797>>>>>End_Class
32798>>>>>
32798>>>>>
32798>>>>>Class cCJCutMenuItem is a cCJMenuItem
32799>>>>>    
32799>>>>>    Procedure Construct_Object
32801>>>>>        Forward Send Construct_Object
32803>>>>>        Set psCaption   to C_$CaptionCut
32804>>>>>        Set psToolTip to C_$TooltipCut
32805>>>>>        Set psDescription to C_$DescCut
32806>>>>>        Set psImage to "actionCut.ico"
32807>>>>>        Set psShortcut to C_$Key_Ctrl_X
32808>>>>>        Set pbActiveUpdate to True
32809>>>>>        Set psCategory to C_$CategoryEdit
32810>>>>>    End_Procedure
32811>>>>>    
32811>>>>>    
32811>>>>>    Procedure OnExecute Variant vCommandBarControl
32813>>>>>        Send Cut of (focus(Self))
32814>>>>>    End_Procedure
32815>>>>>    
32815>>>>>    Function IsEnabled Returns Boolean
32817>>>>>        Boolean bEnabled
32817>>>>>        Get CanCut of (Focus(Self)) to bEnabled
32818>>>>>        Function_Return bEnabled
32819>>>>>    End_Function
32820>>>>>    
32820>>>>>End_Class
32821>>>>>
32821>>>>>
32821>>>>>Class cCJCopyMenuItem is a cCJMenuItem
32822>>>>>    
32822>>>>>    Procedure Construct_Object
32824>>>>>        Forward Send Construct_Object
32826>>>>>        Set psCaption   to C_$CaptionCopy
32827>>>>>        Set psToolTip to C_$ToolTipCopy
32828>>>>>        Set psDescription to C_$DescCopy
32829>>>>>        Set psImage to "actionCopy.ico"
32830>>>>>        Set psShortcut to C_$Key_Ctrl_C
32831>>>>>        Set pbActiveUpdate to True
32832>>>>>        Set psCategory to C_$CategoryEdit
32833>>>>>    End_Procedure
32834>>>>>    
32834>>>>>    
32834>>>>>    Procedure OnExecute Variant vCommandBarControl
32836>>>>>        Send Copy of (focus(Self))
32837>>>>>    End_Procedure
32838>>>>>    
32838>>>>>    Function IsEnabled Returns Boolean
32840>>>>>        Boolean bEnabled
32840>>>>>        Get CanCopy of (Focus(Self)) to bEnabled
32841>>>>>        Function_Return bEnabled
32842>>>>>    End_Function
32843>>>>>    
32843>>>>>End_Class
32844>>>>>
32844>>>>>
32844>>>>>Class cCJPasteMenuItem is a cCJMenuItem
32845>>>>>    
32845>>>>>    Procedure Construct_Object
32847>>>>>        Forward Send Construct_Object
32849>>>>>        Set psCaption   to C_$CaptionPaste
32850>>>>>        Set psToolTip to C_$ToolTipPaste
32851>>>>>        Set psDescription to C_$DescPaste
32852>>>>>        Set psImage to "actionPaste.ico"
32853>>>>>        Set pbActiveUpdate to True
32854>>>>>        Set psShortcut to C_$Key_Ctrl_V
32855>>>>>        Set psCategory to C_$CategoryEdit
32856>>>>>    End_Procedure
32857>>>>>    
32857>>>>>    
32857>>>>>    Procedure OnExecute Variant vCommandBarControl
32859>>>>>        Send Paste of (focus(Self))
32860>>>>>    End_Procedure
32861>>>>>    
32861>>>>>    Function IsEnabled Returns Boolean
32863>>>>>        Boolean bEnabled
32863>>>>>        Get CanPaste of (Focus(Self)) to bEnabled
32864>>>>>        Function_Return bEnabled
32865>>>>>    End_Function
32866>>>>>    
32866>>>>>End_Class
32867>>>>>
32867>>>>>Class cCJSelectAllMenuItem is a cCJMenuItem
32868>>>>>    
32868>>>>>    Procedure Construct_Object
32870>>>>>        Forward Send Construct_Object
32872>>>>>        Set psCaption   to C_$CaptionSelectAll
32873>>>>>        Set psToolTip to C_$ToolTipSelectAll
32874>>>>>        Set psDescription to C_$DescSelectAll
32875>>>>>        Set pbActiveUpdate to True
32876>>>>>        Set psShortcut to C_$Key_Ctrl_A
32877>>>>>        Set psCategory to C_$CategoryEdit
32878>>>>>    End_Procedure
32879>>>>>    
32879>>>>>    
32879>>>>>    Procedure OnExecute Variant vCommandBarControl
32881>>>>>        Send Select_All of (focus(Self))
32882>>>>>    End_Procedure
32883>>>>>    
32883>>>>>    Function IsEnabled Returns Boolean
32885>>>>>        Boolean bEnabled
32885>>>>>        Get CanSelect of (Focus(Self)) to bEnabled
32886>>>>>        Function_Return bEnabled
32887>>>>>    End_Function
32888>>>>>    
32888>>>>>End_Class
32889>>>>>
32889>>>>>
32889>>>>>Class cCJExitMenuItem is a cCJMenuItem
32890>>>>>    
32890>>>>>    Procedure Construct_Object
32892>>>>>        Forward Send Construct_Object
32894>>>>>        Set psCaption to C_$CaptionExit
32895>>>>>        Set psToolTip to C_$ToolTipExit
32896>>>>>        Set psDescription to C_$ToolTipExit
32897>>>>>        Set psShortcut to C_$Key_Alt_F4
32898>>>>>        Set psCategory to C_$CategoryFile
32899>>>>>    End_Procedure
32900>>>>>    
32900>>>>>    Procedure OnExecute Variant vCommandBarControl
32902>>>>>        Send Exit_Application of Desktop
32903>>>>>    End_Procedure
32904>>>>>    
32904>>>>>End_Class
32905>>>>>
32905>>>>>Class cCJHelpMenuItem is a cCJMenuItem
32906>>>>>    
32906>>>>>    Procedure Construct_Object
32908>>>>>        Forward Send Construct_Object
32910>>>>>        Set psCaption to C_$CaptionHelp
32911>>>>>        Set psDescription to C_$ToolTipHelp
32912>>>>>        Set psToolTip to C_$DescHelp
32913>>>>>        Set psImage to "ActionHelp.ico"
32914>>>>>        Set psShortcut to "F1"
32915>>>>>        Set psCategory to C_$CategoryHelp
32916>>>>>    End_Procedure
32917>>>>>    
32917>>>>>    Procedure OnExecute Variant vCommandBarControl
32919>>>>>        Send Help of (Focus(Self))
32920>>>>>    End_Procedure
32921>>>>>    
32921>>>>>End_Class
32922>>>>>
32922>>>>>Class cCJStatusbarMenuItem is a cCJMenuItem
32923>>>>>    
32923>>>>>    Procedure Construct_Object
32925>>>>>        Forward Send Construct_Object
32927>>>>>        Set psCaption to C_$CaptionAddStatusbar
32928>>>>>        Set psToolTip to C_$ToolTipAddStatusbar
32929>>>>>        Set psDescription to  C_$DescAddStatusbar
32930>>>>>        Set psCategory to C_$CategoryWindow
32931>>>>>    End_Procedure
32932>>>>>    
32932>>>>>    Procedure OnExecute Variant vCommandBarControl
32934>>>>>        Handle hoCommandBars hoClientArea
32934>>>>>        Get CommandBarSystemObject to hoCommandBars
32935>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32936>>>>>        If hoClientArea Begin
32938>>>>>            // the clientarea's parent panel has message
32938>>>>>            Send Toggle_StatusBar of (Parent(hoClientArea))
32939>>>>>        End
32939>>>>>>
32939>>>>>    End_Procedure
32940>>>>>    
32940>>>>>    Function IsChecked Returns Boolean
32942>>>>>        Boolean bOn
32942>>>>>        Handle hoCommandBars hoClientArea
32942>>>>>        Get CommandBarSystemObject to hoCommandBars
32943>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32944>>>>>        If hoClientArea Begin
32946>>>>>            // the clientarea's parent panel has message
32946>>>>>            Get StatusBar_State of (Parent(hoClientArea)) to bOn
32947>>>>>        End
32947>>>>>>
32947>>>>>        Function_Return bOn
32948>>>>>    End_Function
32949>>>>>End_Class
32950>>>>>
32950>>>>>Class cCJAutoArrangeIconsMenuItem is a cCJMenuItem
32951>>>>>    
32951>>>>>    Procedure Construct_Object
32953>>>>>        Forward Send Construct_Object
32955>>>>>        Set psCaption to C_$CaptionAutoArrangeIcons
32956>>>>>        Set psToolTip to C_$ToolTipAutoArrangeIcons
32957>>>>>        Set psDescription to C_$DescAutoArrangeIcons
32958>>>>>        Set psCategory to C_$CategoryWindow
32959>>>>>    End_Procedure
32960>>>>>    
32960>>>>>    Procedure OnExecute Variant vCommandBarControl
32962>>>>>        Handle hoCommandBars hoClientArea
32962>>>>>        Get CommandBarSystemObject to hoCommandBars
32963>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32964>>>>>        If hoClientArea Begin
32966>>>>>            // the clientarea's parent panel has message
32966>>>>>            Send Toggle_Auto_Arrange_Icons of (Parent(hoClientArea))
32967>>>>>        End
32967>>>>>>
32967>>>>>    End_Procedure
32968>>>>>    
32968>>>>>    Function IsChecked Returns Boolean
32970>>>>>        Boolean bOn
32970>>>>>        Handle hoCommandBars hoClientArea
32970>>>>>        Get CommandBarSystemObject to hoCommandBars
32971>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
32972>>>>>        If hoClientArea Begin
32974>>>>>            // the clientarea's parent panel has message
32974>>>>>            Get Auto_Arrange_Icons_State of (Parent(hoClientArea)) to bOn
32975>>>>>        End
32975>>>>>>
32975>>>>>        Function_Return bOn
32976>>>>>    End_Function
32977>>>>>End_Class
32978>>>>>
32978>>>>>Class cCJRestoreMenusMenuItem is a cCJMenuItem
32979>>>>>    
32979>>>>>    Procedure Construct_Object
32981>>>>>        Forward Send Construct_Object
32983>>>>>        Set psCaption to C_$CaptionRestoreMenus
32984>>>>>        Set psToolTip to C_$ToolTipRestoreMenus
32985>>>>>        Set psDescription to C_$DescRestoreMenus
32986>>>>>        Set psCategory to C_$CategoryWindow
32987>>>>>    End_Procedure
32988>>>>>    
32988>>>>>    Procedure OnExecute Variant vCommandBarControl
32990>>>>>        Handle hoCommandBars
32990>>>>>        Get CommandBarSystemObject to hoCommandBars
32991>>>>>        Send RestoreLayout of hoCommandBars
32992>>>>>    End_Procedure
32993>>>>>    
32993>>>>>End_Class
32994>>>>>
32994>>>>>Class cCJCascadeMenuItem is a cCJMenuItem
32995>>>>>    
32995>>>>>    Procedure Construct_Object
32997>>>>>        Forward Send Construct_Object
32999>>>>>        Set psCaption to C_$CaptionCascade
33000>>>>>        Set psToolTip to C_$ToolTipCascade
33001>>>>>        Set psDescription to  C_$DescCascade
33002>>>>>        Set psImage to "ActionCascade.ico"
33003>>>>>        Set psCategory to C_$CategoryWindow
33004>>>>>    End_Procedure
33005>>>>>    
33005>>>>>    Procedure OnExecute Variant vCommandBarControl
33007>>>>>        Handle hoCommandBars hoClientArea
33007>>>>>        Get CommandBarSystemObject to hoCommandBars
33008>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
33009>>>>>        If hoClientArea Begin
33011>>>>>            Send Cascade_Windows of hoClientArea
33012>>>>>        End
33012>>>>>>
33012>>>>>    End_Procedure
33013>>>>>End_Class
33014>>>>>
33014>>>>>Class cCJTileHorizontally is a cCJMenuItem
33015>>>>>    
33015>>>>>    Procedure Construct_Object
33017>>>>>        Forward Send Construct_Object
33019>>>>>        Set psCaption to C_$CaptionTileHorizontally
33020>>>>>        Set psToolTip to C_$ToolTipTileHorizontally
33021>>>>>        Set psDescription to  C_$DescTileHorizontally
33022>>>>>        Set psImage to "ActionTileHorizontally.ico"
33023>>>>>        Set psCategory to C_$CategoryWindow
33024>>>>>    End_Procedure
33025>>>>>    
33025>>>>>    Procedure OnExecute Variant vCommandBarControl
33027>>>>>        Handle hoCommandBars hoClientArea
33027>>>>>        Get CommandBarSystemObject to hoCommandBars
33028>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
33029>>>>>        If hoClientArea Begin
33031>>>>>            Send Tile_Windows_Horizontal of hoClientArea
33032>>>>>        End
33032>>>>>>
33032>>>>>    End_Procedure
33033>>>>>End_Class
33034>>>>>
33034>>>>>Class cCJTileVertically is a cCJMenuItem
33035>>>>>    
33035>>>>>    Procedure Construct_Object
33037>>>>>        Forward Send Construct_Object
33039>>>>>        Set psCaption to C_$CaptionTileVertically
33040>>>>>        Set psToolTip to C_$ToolTipTileVertically
33041>>>>>        Set psDescription to  C_$DescTileVertically
33042>>>>>        Set psImage to "ActionTileVertically.ico"
33043>>>>>        Set psCategory to C_$CategoryWindow
33044>>>>>    End_Procedure
33045>>>>>    
33045>>>>>    Procedure OnExecute Variant vCommandBarControl
33047>>>>>        Handle hoCommandBars hoClientArea
33047>>>>>        Get CommandBarSystemObject to hoCommandBars
33048>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
33049>>>>>        If hoClientArea Begin
33051>>>>>            Send Tile_Windows_Vertical of hoClientArea
33052>>>>>        End
33052>>>>>>
33052>>>>>    End_Procedure
33053>>>>>End_Class
33054>>>>>
33054>>>>>Class cCJMinimizeWindowsMenuItem is a cCJMenuItem
33055>>>>>    
33055>>>>>    Procedure Construct_Object
33057>>>>>        Forward Send Construct_Object
33059>>>>>        Set psCaption to C_$CaptionMinimizeWindows
33060>>>>>        Set psToolTip to C_$ToolTipMinimizeWindows
33061>>>>>        Set psDescription to  C_$DescMinimizeWindows
33062>>>>>        Set psCategory to C_$CategoryWindow
33063>>>>>    End_Procedure
33064>>>>>    
33064>>>>>    Procedure OnExecute Variant vCommandBarControl
33066>>>>>        Handle hoCommandBars hoClientArea
33066>>>>>        Get CommandBarSystemObject to hoCommandBars
33067>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
33068>>>>>        If hoClientArea Begin
33070>>>>>            // the clientarea's parent panel has message
33070>>>>>            Send Minimize_all_Windows of (Parent(hoClientArea))
33071>>>>>        End
33071>>>>>>
33071>>>>>    End_Procedure
33072>>>>>End_Class
33073>>>>>
33073>>>>>
33073>>>>>Class cCJRestoreWindowsMenuItem is a cCJMenuItem
33074>>>>>    
33074>>>>>    Procedure Construct_Object
33076>>>>>        Forward Send Construct_Object
33078>>>>>        Set psCaption to C_$CaptionRestoreWindows
33079>>>>>        Set psToolTip to C_$ToolTipRestoreWindows
33080>>>>>        Set psDescription to  C_$DescRestoreWindows
33081>>>>>        Set psCategory to C_$CategoryWindow
33082>>>>>    End_Procedure
33083>>>>>    
33083>>>>>    Procedure OnExecute Variant vCommandBarControl
33085>>>>>        Handle hoCommandBars hoClientArea
33085>>>>>        Get CommandBarSystemObject to hoCommandBars
33086>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
33087>>>>>        If hoClientArea Begin
33089>>>>>            // the clientarea's parent panel has message
33089>>>>>            Send Restore_all_Windows of (Parent(hoClientArea))
33090>>>>>        End
33090>>>>>>
33090>>>>>    End_Procedure
33091>>>>>End_Class
33092>>>>>
33092>>>>>Class cCJArrangeIconsMenuItem is a cCJMenuItem
33093>>>>>    
33093>>>>>    Procedure Construct_Object
33095>>>>>        Forward Send Construct_Object
33097>>>>>        Set psCaption to C_$CaptionArrangeIcons
33098>>>>>        Set psToolTip to C_$ToolTipArrangeIcons
33099>>>>>        Set psDescription to  C_$DescArrangeIcons
33100>>>>>        Set psCategory to C_$CategoryWindow
33101>>>>>    End_Procedure
33102>>>>>    
33102>>>>>    Procedure OnExecute Variant vCommandBarControl
33104>>>>>        Handle hoCommandBars hoClientArea
33104>>>>>        Get CommandBarSystemObject to hoCommandBars
33105>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
33106>>>>>        If hoClientArea Begin
33108>>>>>            Send Arrange_Icons of hoClientArea
33109>>>>>        End
33109>>>>>>
33109>>>>>    End_Procedure
33110>>>>>    
33110>>>>>End_Class
33111>>>
33111>>>Object oEditContextMenu is a cCJContextMenu
33113>>>    
33113>>>    Move Self to Default_Form_Floating_Menu_ID
33114>>>    
33114>>>    Object oUndoMenuItem is a cCJUndoMenuItem
33116>>>    End_Object
33117>>>    
33117>>>    Object oCutMenuItem is a cCJCutMenuItem
33119>>>        Set pbControlBeginGroup to True
33120>>>    End_Object
33121>>>    
33121>>>    Object oCopyMenuItem is a cCJCopyMenuItem
33123>>>    End_Object
33124>>>
33124>>>    Object oPasteMenuItem is a cCJPasteMenuItem
33126>>>    End_Object
33127>>>
33127>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
33129>>>    End_Object
33130>>>
33130>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
33132>>>        Set pbControlBeginGroup to True
33133>>>    End_Object
33134>>>
33134>>>End_Object
33135>>>
33135>Use cDbUpdateFunctionLibrary.pkg
Including file: cDbUpdateFunctionLibrary.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cDbUpdateFunctionLibrary.pkg)
33135>>>//****************************************************************************
33135>>>// $Module type: Class
33135>>>// $Module name: cDbUpdateFunctionLibrary
33135>>>// $Author     : Nils Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
33135>>>// Web-site    : http://www.rdctools.com
33135>>>// Created     : 2014-09-05 @ 09:50 (Military date format: YY-MM-DD)
33135>>>//
33135>>>// Description : The class consists of a function library for database manipulations, aka make changes to a database.
33135>>>//               It has top level functions that uses the DataFlex db API, _but_ also specialized
33135>>>//               functions to make db changes to Sql databases with DAW drivers,
33135>>>//               with the help of Sql-scripts.
33135>>>//
33135>>>// $Rev History:
33135>>>//    2014-09-05  Module header created
33135>>>//
33135>>>//****************************************************************************
33135>>>//
33135>>>// Martin Moleman on SQL Server and DateTime2 (Don't use DataTime any longer !)
33135>>>// One remark about your change: I would not change to datetime2(7) (7 decimals) but to
33135>>>// datetime2(3) (3 decimals = milliseconds) or If you don't need the milliseconds datetime2(0).
33135>>>// The reason is that the DataFlex DateTime type only allows 3 decimals. When using 7
33135>>>// decimals you may Get truncation that again may cause problems with finding.
33135>>>//
33135>>>// Important! The conversion from DateTime to Date or datetime2 will also convert all dummy zero Date values from 1753-01-01 to 0001-01-01.
33135>>>// This is important to realize. The conversion will actually change the data in the database (done by the driver)
33135>>>
33135>>>
33135>>>// DF_DATABASE_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA
33135>>>// Determines for all DataFlex data types, which SQL native types willbe used when creating new columns.
33135>>>// Set_Attribute DF_DATABASE_DEFAULT_MAP_DF_TO_SQL_TYPE_SCHEMA of {driverNumber} {databaseHandle} ;
33135>>>// to {MAP_DF_TO_SQL_TYPE_SQL2000|MAP_DF_TO_SQL_TYPE_SQL2005|MAP_DF_TO_SQL_TYPE_SQL2008|MAP_DF_TO_SQL_TYPE_SQL2012}
33135>>>//
33135>>>Use cBaseDbUpdateFuncLib.pkg
Including file: cBaseDbUpdateFuncLib.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cBaseDbUpdateFuncLib.pkg)
33135>>>>>//****************************************************************************
33135>>>>>// $Module type: Class
33135>>>>>// $Module name: cBaseDbUpdateFuncLib
33135>>>>>// $Author     : Nils Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
33135>>>>>// Web-site    : http://www.rdctools.com
33135>>>>>// Created     : 2023-11-06 @ 09:50 (Military date format: YY-MM-DD)
33135>>>>>//
33135>>>>>// Description : The class consists of the basis/parent for the cDbUpdateFunctionLibrary class
33135>>>>>//               It contains helper functions for the cDbUpdateFunctionLibrary class
33135>>>>>//
33135>>>>>// $Rev History:
33135>>>>>//    2023-11-06  Module header created
33135>>>>>//
33135>>>>>//****************************************************************************
33135>>>>>Use cApplication.pkg
33135>>>>>Use seq_chnl.pkg
33135>>>>>Use GlobalFunctionsProcedures.pkg
33135>>>>>Use Datadict.pkg                        // Declaration of DF_FILE_SQL_TABLE_NAME
Including file: Datadict.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Datadict.pkg)
33135>>>>>>>Use VDFBase.pkg
33135>>>>>>>Use LanguageText.pkg // language support VDF pkg replacement strings
33135>>>>>>>
33135>>>>>>>Register_Procedure File_Field_Value_Changed
33135>>>>>>>Register_Procedure File_Field_Mask_Changed
33135>>>>>>>Register_Procedure File_Field_Label_Changed
33135>>>>>>>Register_Procedure File_Field_Option_Changed
33135>>>>>>>Register_Function  Extended_DEO_State Returns Integer
33135>>>>>>>Register_Function  Entry_Refresh_State Returns Integer
33135>>>>>>>Register_Procedure Set Entry_Refresh_State Integer iState
33135>>>>>>>Register_Function  Allow_Foreign_New_Save_State Returns Integer
33135>>>>>>>Register_Function  Server Returns Integer
33135>>>>>>>
33135>>>>>>>Use Data_Set.pkg
Including file: Data_set.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Data_set.pkg)
33135>>>>>>>>>Use VDFBase.pkg
33135>>>>>>>>>Use fndmodes.pkg
Including file: fndmodes.pkg    (C:\Program Files\DataFlex 23.0\Pkg\fndmodes.pkg)
33135>>>>>>>>>>>//
33135>>>>>>>>>>>// special find modes
33135>>>>>>>>>>>//
33135>>>>>>>>>>>Define NEXT_RECORD  for 5 // find-next
33135>>>>>>>>>>>Define FIRST_RECORD for 6 // find-first
33135>>>>>>>>>>>Define LAST_RECORD  for 7 // find-last 
33135>>>>>>>>>Use refmodes.pkg
Including file: refmodes.pkg    (C:\Program Files\DataFlex 23.0\Pkg\refmodes.pkg)
33135>>>>>>>>>>>//
33135>>>>>>>>>>>// constants for REFRESH message parameter values
33135>>>>>>>>>>>//
33135>>>>>>>>>>>Define MODE_CLEAR             for 1  //notification from origin of clear
33135>>>>>>>>>>>Define MODE_FIND_OR_CLEAR_SET for 2  //notification from find or clear
33135>>>>>>>>>>>Define MODE_CLEAR_ALL         for 3  //notification from clear-all
33135>>>>>>>>>>>Define MODE_DELETE            for 4  //notification after successful delete
33135>>>>>>>>>>>Define MODE_SAVE              for 5  //notification after successful save
33135>>>>>>>>>>>
33135>>>>>>>>>
33135>>>>>>>>>
33135>>>>>>>>>//
33135>>>>>>>>>//Global integer status values
33135>>>>>>>>>//
33135>>>>>>>>>Define OPERATION_MODE   for |VI99  //status of data-sets in application
33135>>>>>>>>>Define OPERATION_ORIGIN for |VI108 //origin of current of data-set operation
33135>>>>>>>>>
33135>>>>>>>>>//
33135>>>>>>>>>//Constants for Operation_Mode global int values
33135>>>>>>>>>//
33135>>>>>>>>>Define MODE_WAITING  for 0  //wait-mode
33135>>>>>>>>>Define MODE_FINDING  for 1  //find-mode
33135>>>>>>>>>Define MODE_CLEARING for 2  //clear-mode
33135>>>>>>>>>Define MODE_CREATING for 3  //create-mode
33135>>>>>>>>>Define MODE_SAVING   for 4  //save-mode
33135>>>>>>>>>Define MODE_DELETING for 5  //delete-mode
33135>>>>>>>>>Define MODE_ABORTING for 6  //abort-mode
33135>>>>>>>>>Define MODE_VALIDATING for 7  //request_validate-mode : added for VDF7
33135>>>>>>>>>Define MODE_CLEARINGALL for 8 //clear-all mode (added in VDF8)
33135>>>>>>>>>
33135>>>>>>>>>//   The Data_Set class is implemented as a subclass of Entry_Client, with
33135>>>>>>>>>//   a C language handler providing the majority of new behavior.  The
33135>>>>>>>>>//   Data_Set class is intended to be a grouping agent for data-entry objects
33135>>>>>>>>>//   and a container for subordinate Data_Sets.
33135>>>>>>>>>//
33135>>>>>>>>>Use BaseData_Set.pkg
33135>>>>>>>>>
33135>>>>>>>>>// Data_Set class definition, public class layer. (Extra class layer needed
33135>>>>>>>>>// to augment C-based (Constrain) procedure(s).)
33135>>>>>>>>>
33135>>>>>>>>>Class DataSet is a BaseData_Set
33136>>>>>>>>>    
33136>>>>>>>>>    
33136>>>>>>>>>    // maintain old name for the time being to maximize compatability
33136>>>>>>>>>    // between character mode and windows versions. Developers should be
33136>>>>>>>>>    // able to move DS classes back and forth without changes.
33136>>>>>>>>>    Replace_Class_Name Data_Set DataSet
33136>>>>>>>>>    
33136>>>>>>>>>    Procedure Construct_Object //Integer Img#
33138>>>>>>>>>        Forward Send Construct_Object No_Image //Img#
33140>>>>>>>>>        
33140>>>>>>>>>        Property Integer Constrain_File 0
33141>>>>>>>>>        Property Integer Auto_Fill_State False
33142>>>>>>>>>        Property Integer Change_Disabled_State  False
33143>>>>>>>>>        // RT sets this inside of Mark_components a part of old entry_client DSO behavior. Now it is never used
33143>>>>>>>>>        Property Integer Component_State False
33144>>>>>>>>>        
33144>>>>>>>>>    End_Procedure
33145>>>>>>>>>    
33145>>>>>>>>>    
33145>>>>>>>>>    //
33145>>>>>>>>>    // This may be called by legacy DSO and DDO code
33145>>>>>>>>>    //
33145>>>>>>>>>    // IMPORTANT NOTE of change for 8.2:
33145>>>>>>>>>    //         DO NOT call or augment this anymore.
33145>>>>>>>>>    //
33145>>>>>>>>>    //         for sending: Find all cases of Field_main_index and change it to File_Field_Index
33145>>>>>>>>>    //
33145>>>>>>>>>    //         for augmenting: In DSOs - replace Field_main_index with File_field_index
33145>>>>>>>>>    //                         In DDOs - replace Field_main_Index with Field_Index and do not pass
33145>>>>>>>>>    //                                   the file parameter.
33145>>>>>>>>>    //                                   See DDOs Field_index and File_field_Index for more
33145>>>>>>>>>    //
33145>>>>>>>>>    Function Field_Main_Index Integer file Integer Field Returns Integer
33147>>>>>>>>>        Integer dataType fldNdx retval ordr
33147>>>>>>>>>        Move -1 to retval      //field has no main index (default)
33148>>>>>>>>>        If (file <> 0) Begin
33150>>>>>>>>>//      FIELD_DEF file field to dataType fldNdx
33150>>>>>>>>>            Get_Attribute DF_FIELD_INDEX of file Field to fldNdx // main index field
33153>>>>>>>>>            If (fldNdx > 0 or Field = 0) ;                Move fldNdx to retval //field has main index
33156>>>>>>>>>        End
33156>>>>>>>>>>
33156>>>>>>>>>        If (file = main_file(Self)) Begin
33158>>>>>>>>>            Get ordering to ordr
33159>>>>>>>>>            If (ordr >= 0) ;                Move ordr to retval  //ordering takes precedence over main index
33162>>>>>>>>>        End
33162>>>>>>>>>>
33162>>>>>>>>>        Function_Return retval
33163>>>>>>>>>    End_Function
33164>>>>>>>>>    
33164>>>>>>>>>    // This allows packages that still use data-sets instead of DDOs to use this
33164>>>>>>>>>    // message syntax.
33164>>>>>>>>>    // Note that this will never get here if the DD class is used as
33164>>>>>>>>>    // it has its own handler for this. It only is called if DSOs are used in which
33164>>>>>>>>>    // case it calls the old message field_main_index above.
33164>>>>>>>>>    // DDO based objects will NEVER call this code
33164>>>>>>>>>    //
33164>>>>>>>>>    Function File_Field_Index Integer iFile Integer iField Returns Integer
33166>>>>>>>>>        Function_Return (Field_main_Index(Self,iFile,iField))
33167>>>>>>>>>    End_Function
33168>>>>>>>>>    
33168>>>>>>>>>    
33168>>>>>>>>>    Procedure Item_Find Integer eFindMode ;            Integer iFile Integer iField ;            Integer bDoEntryUpdate Integer bShowFindErr Integer bDeferred
33170>>>>>>>>>        
33170>>>>>>>>>        RowID   riRow
33170>>>>>>>>>        Integer iIndex
33170>>>>>>>>>        Handle  hoServer
33170>>>>>>>>>        Integer iSegments iSeg iSegFld iSegFldMainIndex
33170>>>>>>>>>        Boolean bChanged bDoCheck bOk
33170>>>>>>>>>        
33170>>>>>>>>>        //Get Field_Main_Index iFile iField to iIndex
33170>>>>>>>>>        Get File_Field_Index iFile iField to iIndex
33171>>>>>>>>>        If (iIndex<>-1) Begin
33173>>>>>>>>>            // get prior rowId before it get cleared
33173>>>>>>>>>            Move (GetRowID(iFile)) to riRow
33174>>>>>>>>>            //  'hold' buffer to prepare for entry_update
33174>>>>>>>>>            Set_Attribute DF_FILE_STATUS of iFile to DF_FILE_INACTIVE
33177>>>>>>>>>            If bDoEntryUpdate Begin
33179>>>>>>>>>                Send Request_Entry_Update iFile 1  //entUpdt all DEOs as required
33180>>>>>>>>>                
33180>>>>>>>>>                // If the buffer is cleared (no record and no changed data) then we want
33180>>>>>>>>>                // to do a constrained_clear which will force the buffer to get cleared
33180>>>>>>>>>                // according to the rules of the current constraints.
33180>>>>>>>>>                //Get_field_value iFile 0 to iRec
33180>>>>>>>>>                //Move (GetRowID(iFile)) to riRow // 12.1 moved above the set file inactive
33180>>>>>>>>>                
33180>>>>>>>>>                // If there was an active record to begin with we consider this changed (not cleared)
33180>>>>>>>>>                If (not(IsNullRowId(riRow))) Begin
33182>>>>>>>>>                    Move True to bChanged
33183>>>>>>>>>                End
33183>>>>>>>>>>
33183>>>>>>>>>                Else Begin
33184>>>>>>>>>                    // or, if the record was already changed or the entry_update created a change
33184>>>>>>>>>                    // we consider this changed
33184>>>>>>>>>                    Get_Attribute DF_FILE_CHANGED of iFile to bChanged
33187>>>>>>>>>                End
33187>>>>>>>>>>
33187>>>>>>>>>                
33187>>>>>>>>>                If not bChanged Begin
33189>>>>>>>>>                    // if buffer is unchanged, do a constrained clear. It is unchanged if there was not
33189>>>>>>>>>                    // active record, the record was unchanged, and the update didn't change anything.
33189>>>>>>>>>                    Constrained_Clear eFindMode iFile by iIndex
33192>>>>>>>>>                End
33192>>>>>>>>>>
33192>>>>>>>>>                Else If (eFindMode=GE or eFindMode=LE and iIndex>0) Begin
33195>>>>>>>>>                    
33195>>>>>>>>>                    // If mode is GE or LE we need to do some extra processing. We want to clear
33195>>>>>>>>>                    // all index segemnt fields that occur after this field in the index. This way
33195>>>>>>>>>                    // dbList searches and find ge searches (f9) will always find the first record
33195>>>>>>>>>                    // that matches the data in the field being searched. This was if an index like
33195>>>>>>>>>                    // customer.name x customer.number where you had 10 identical names "john" typing
33195>>>>>>>>>                    // john will find the first record, because customer.number will get cleared.
33195>>>>>>>>>                    // Note we can no do this with GT or LT or you'd get stuck in fields
33195>>>>>>>>>                    
33195>>>>>>>>>                    // check all fields for index. Once you find the iField field, clear all
33195>>>>>>>>>                    // fields that follow it. Only do this if the other fields do not use the
33195>>>>>>>>>                    // same index as its primary index (in which case we assume the data is intentional).
33195>>>>>>>>>                    // This should handle most cases.
33195>>>>>>>>>                    Get_Attribute DF_INDEX_NUMBER_SEGMENTS of iFile iIndex to iSegments
33198>>>>>>>>>                    For iSeg from 1 to iSegments
33204>>>>>>>>>>
33204>>>>>>>>>                        Get_Attribute DF_INDEX_SEGMENT_FIELD of iFile iIndex iSeg to iSegFld
33207>>>>>>>>>                        If not bDoCheck Begin
33209>>>>>>>>>                            If (iSegFld=iField) ;                                Move True to bDoCheck // marked after we find the find field in the index
33212>>>>>>>>>                        End
33212>>>>>>>>>>
33212>>>>>>>>>                        Else Begin // we get here after we've found the main field segment
33213>>>>>>>>>                            // if main index if this segment is same as our find index, do nothing
33213>>>>>>>>>                            Get File_Field_Index iFile iSegFld to iSegFldMainIndex
33214>>>>>>>>>                            If (iSegFldMainIndex<>iIndex) ;                                Set_Field_Value iFile iSegFld to ''
33219>>>>>>>>>                        End
33219>>>>>>>>>>
33219>>>>>>>>>                    Loop
33220>>>>>>>>>>
33220>>>>>>>>>                End
33220>>>>>>>>>>
33220>>>>>>>>>                
33220>>>>>>>>>                Get Which_Data_Set iFile to hoServer
33221>>>>>>>>>                If (hoServer and iFile=main_file(hoServer)) ;                    Send Attach_Main_File to hoServer
33224>>>>>>>>>                Else ;                    Attach iFile
33226>>>>>>>>>            End
33226>>>>>>>>>>
33226>>>>>>>>>            
33226>>>>>>>>>            Move False to Err
33227>>>>>>>>>            
33227>>>>>>>>>            If (Is_SuperFind_Required(Self,iFile)) ;                Send Request_SuperFind eFindMode iFile iField
33230>>>>>>>>>            Else If bDeferred ;                Send Request_Read eFindMode iFile iIndex
33234>>>>>>>>>            Else ;                Send Request_Find eFindMode iFile iIndex
33236>>>>>>>>>            
33236>>>>>>>>>            If (not(Found) and not(err)) Begin
33238>>>>>>>>>                // refind original record (or leave it cleared if not record)
33238>>>>>>>>>                Move (FindByRowId(iFile,riRow)) to bOk
33239>>>>>>>>>                
33239>>>>>>>>>                If bShowFindErr ;                    Error (If(eFindMode<2, DFERR_FIND_PRIOR_BEG_OF_FILE, DFERR_FIND_PAST_END_OF_FILE))
33242>>>>>>>>>                Move False to Found
33243>>>>>>>>>            End
33243>>>>>>>>>>
33243>>>>>>>>>        End
33243>>>>>>>>>>
33243>>>>>>>>>        Else ;            If bShowFindErr ;                Error DFERR_FIELD_NOT_INDEXED
33247>>>>>>>>>    End_Procedure
33248>>>>>>>>>    
33248>>>>>>>>>    
33248>>>>>>>>>    // We only care about should_saves of DEOs and not DSOs when
33248>>>>>>>>>    // exiting the app. Create a handler for data set class. We still
33248>>>>>>>>>    // broadcast in case we've got nested deos in the dso (hopefully not).
33248>>>>>>>>>    //
33248>>>>>>>>>    Function Exit_Application_Check Returns Integer
33250>>>>>>>>>        Integer rVal
33250>>>>>>>>>        Broadcast Get Exit_Application_Check to Rval // check w/ kids
33252>>>>>>>>>        Function_Return rVal
33253>>>>>>>>>    End_Function
33254>>>>>>>>>    
33254>>>>>>>>>    Procedure Constrain
33256>>>>>>>>>        Integer iFile
33256>>>>>>>>>        Send OnConstrain
33257>>>>>>>>>        Forward Send Constrain
33259>>>>>>>>>        Get Constrain_File to iFile
33260>>>>>>>>>        If iFile ;            Constrain (Main_file(Self)) relates to iFile
33263>>>>>>>>>    End_Procedure
33264>>>>>>>>>    
33264>>>>>>>>>    Procedure OnConstrain
33266>>>>>>>>>    End_Procedure
33267>>>>>>>>>    
33267>>>>>>>>>    // Less confusing Message for adding Updating servers
33267>>>>>>>>>    //
33267>>>>>>>>>    Procedure Set DDO_Server Handle ObjId
33269>>>>>>>>>        Send Attach_Server ObjId
33270>>>>>>>>>    End_Procedure
33271>>>>>>>>>    
33271>>>>>>>>>    // This is called when a view takes or retakes the
33271>>>>>>>>>    // focus. If DD not in use, do nothing.
33271>>>>>>>>>    //
33271>>>>>>>>>    Procedure Refind_DD_Records
33273>>>>>>>>>        If (in_use_state(Self)) ;            Send refind_records
33276>>>>>>>>>    End_Procedure
33277>>>>>>>>>    
33277>>>>>>>>>    // this returns true if the data-set is changed AND there are attached
33277>>>>>>>>>    // DEO objects. Without this you can get "changes exist" condition reported
33277>>>>>>>>>    // that the user will have no way of saving.
33277>>>>>>>>>    //
33277>>>>>>>>>    Function Data_Set_Should_Save Returns Integer
33279>>>>>>>>>        Function_Return (Should_Save(Self) and ;            Data_Set_User_interface_count(Self))
33280>>>>>>>>>    End_Function
33281>>>>>>>>>    
33281>>>>>>>>>    // returns 0 indicating that this is not DD enabled. DataDictionary objects will return 1.
33281>>>>>>>>>    // Add DSOs and DDOs must understand this message
33281>>>>>>>>>    
33281>>>>>>>>>    Function Extended_DSO_State Returns Integer
33283>>>>>>>>>        Function_Return 0
33284>>>>>>>>>    End_Function
33285>>>>>>>>>    
33285>>>>>>>>>    
33285>>>>>>>>>End_Class
33286>>>>>>>>>
33286>>>>>>>>>
33286>>>>>>>>>
33286>>>>>>>Use DDValtbl.pkg  // validation table classes
Including file: Ddvaltbl.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Ddvaltbl.pkg)
33286>>>>>>>>>//  Validation Table Support for Extended Data-Sets. Fields may
33286>>>>>>>>>//  attached to validation tables which can then be used for
33286>>>>>>>>>//  validation (if Validate_state is true) or list loading.
33286>>>>>>>>>//  Developers can create their own validation tables as long as they
33286>>>>>>>>>//  conform to the following external interface:
33286>>>>>>>>>//
33286>>>>>>>>>// Properties
33286>>>>>>>>>//   Static_State       - if list must be rebuilt each validation, load
33286>>>>>>>>>//   Allow_Blank_state  - If Blank or 0 is a valid response
33286>>>>>>>>>//   Validate_State     - should table be used for validation
33286>>>>>>>>>//   Table_Loaded_State - is the validation table initialized?
33286>>>>>>>>>//
33286>>>>>>>>>// Methods
33286>>>>>>>>>//  Get Validate_Value sValue to iVal - if iVal=0, it is legal
33286>>>>>>>>>//  Send Fill_list                    - fills a static list
33286>>>>>>>>>//  Send Request_Fill_From_List iObject iMessage
33286>>>>>>>>>//        This is a callback that will fill an external list by sending
33286>>>>>>>>>//        the passed message (iMessage) back to the requesting object
33286>>>>>>>>>//        (iObject). It will send this message for each item in the
33286>>>>>>>>>//        validation table. It always passes back four params. Those are:
33286>>>>>>>>>//                     iItem - Item count being passed back
33286>>>>>>>>>//                     sData - The Database value of the item
33286>>>>>>>>>//                     sDesc - The Value's description, "" if none
33286>>>>>>>>>//                     iFile - File number associated with the item (if any)
33286>>>>>>>>>//                     iRec  - Record associated with the item (if any)
33286>>>>>>>>>// Developers can create classes of any complexity to support validation
33286>>>>>>>>>// tables. We have provided the following four classes.
33286>>>>>>>>>//
33286>>>>>>>>>//  ValidationTable is an Array
33286>>>>>>>>>//           Provides simple one dimensional table support. The table must be
33286>>>>>>>>>//           loaded manually by creating fill_list and sending the message
33286>>>>>>>>>//           Add_Table_Value (send Add_Table_Value Value). If list is static
33286>>>>>>>>>//           it is filled once. If non-static it is filled each time it is
33286>>>>>>>>>//           requested to validate or fill a foreign lis.
33286>>>>>>>>>//
33286>>>>>>>>>//  DescriptionValidationTable is a ValidationTable
33286>>>>>>>>>//           Provides a more complex three dimension array allowing the
33286>>>>>>>>>//           object to store a data value, description value and a record
33286>>>>>>>>>//           number. The developer must fill this list using the Add_table_
33286>>>>>>>>>//           value message passing up to three values (data, desc, record).
33286>>>>>>>>>//
33286>>>>>>>>>//  FileValidationTable is a DescriptionValidationTable
33286>>>>>>>>>//           Provides a data aware table. This can be used to load data from
33286>>>>>>>>>//           data-files, from data-sets. If you use data-sets you can place
33286>>>>>>>>>//           constraints within the data-set. You must define the file-number,
33286>>>>>>>>>//           data-set (if any), the file index, the file's data field, and
33286>>>>>>>>>//           the file's description field. You can also define an optional
33286>>>>>>>>>//           "Type". All records are constrained to this type (with or with-
33286>>>>>>>>>//           data-sets). If is assumed that this file has an optimized finding
33286>>>>>>>>>//           index.
33286>>>>>>>>>//
33286>>>>>>>>>//  CodeValidationTable is a FileValidationTable
33286>>>>>>>>>//           Used for Code lists. Simply set Type_Value to the "type"
33286>>>>>>>>>//
33286>>>>>>>>>Use VDFBase.pkg
33286>>>>>>>>>
33286>>>>>>>>>
33286>>>>>>>>>Class ValidationTable is an Array
33287>>>>>>>>>    
33287>>>>>>>>>    Procedure Construct_Object
33289>>>>>>>>>        Forward Send Construct_Object
33291>>>>>>>>>        Property Integer Static_State        True
33292>>>>>>>>>        
33292>>>>>>>>>        Property Integer Table_Loaded_State  False
33293>>>>>>>>>        
33293>>>>>>>>>        Property Integer Validate_State      True
33294>>>>>>>>>        Property Integer Allow_Blank_State   False
33295>>>>>>>>>        Property Integer Main_File           0
33296>>>>>>>>>        Property String  Table_Title         DD_VALIDATION_LIST_TITLE
33297>>>>>>>>>        
33297>>>>>>>>>        Property Integer Number_Elements     1
33298>>>>>>>>>        
33298>>>>>>>>>        // System maintained. Sub-classes use these
33298>>>>>>>>>        // These are SET by Next_Code_Record. You may GET their values
33298>>>>>>>>>        
33298>>>>>>>>>        Property String  Current_Code            ''
33299>>>>>>>>>        
33299>>>>>>>>>        Property String  Current_Description     ''
33300>>>>>>>>>        
33300>>>>>>>>>        Property RowID Current_RowId
33301>>>>>>>>>    End_Procedure
33302>>>>>>>>>    
33302>>>>>>>>>    Function Data_Item_Count Returns Integer
33304>>>>>>>>>        Function_Return (Item_Count(Self))
33305>>>>>>>>>    End_Function
33306>>>>>>>>>    
33306>>>>>>>>>    Function Data_Value Integer iItem Returns String
33308>>>>>>>>>        Function_Return (Value(Self,iItem))
33309>>>>>>>>>    End_Function
33310>>>>>>>>>    
33310>>>>>>>>>    Procedure Set Data_Value Integer iItem String sValue
33312>>>>>>>>>        Set Value  iItem to sValue
33313>>>>>>>>>    End_Procedure
33314>>>>>>>>>    
33314>>>>>>>>>    Function Data_Description Integer iItem Returns String
33316>>>>>>>>>        Function_Return ''
33317>>>>>>>>>    End_Function
33318>>>>>>>>>    
33318>>>>>>>>>    Procedure Set Data_Description Integer iItem String sValue
33320>>>>>>>>>    End_Procedure
33321>>>>>>>>>    
33321>>>>>>>>>    Function Data_RowId Integer iItem Returns RowID
33323>>>>>>>>>        Function_Return (NullRowId())
33324>>>>>>>>>    End_Function
33325>>>>>>>>>    
33325>>>>>>>>>    Procedure Set Data_RowId Integer iItem RowID riValue
33327>>>>>>>>>    End_Procedure
33328>>>>>>>>>    
33328>>>>>>>>>    
33328>>>>>>>>>    Procedure Add_Table_Value String sValue
33330>>>>>>>>>        Set Data_Value  (Data_Item_Count(Self)) to sValue
33331>>>>>>>>>    End_Procedure
33332>>>>>>>>>    
33332>>>>>>>>>    Function Validate_Value String sCode Returns Integer
33334>>>>>>>>>        Integer iMax
33334>>>>>>>>>        Integer iCnt
33334>>>>>>>>>        If (sCode = '');            Function_Return (not(Allow_Blank_State(Self)))
33337>>>>>>>>>        If (Table_Loaded_State(Self)=0 or Static_State(Self)=0) Begin
33339>>>>>>>>>            Send Delete_Data
33340>>>>>>>>>            Send Fill_list
33341>>>>>>>>>            Set Table_Loaded_State to True
33342>>>>>>>>>        End
33342>>>>>>>>>>
33342>>>>>>>>>        Get Data_Item_Count to iMax
33343>>>>>>>>>        Decrement iMax
33344>>>>>>>>>        For iCnt from 0 to iMax
33350>>>>>>>>>>
33350>>>>>>>>>            If (sCode=Data_Value(Self,iCnt)) Begin
33352>>>>>>>>>                Set Current_Code        to sCode
33353>>>>>>>>>                Set Current_Description to (Data_Description(Self,iCnt))
33354>>>>>>>>>                Set Current_RowId       to (Data_RowId(Self,iCnt))
33355>>>>>>>>>                Function_Return 0
33356>>>>>>>>>            End
33356>>>>>>>>>>
33356>>>>>>>>>        Loop
33357>>>>>>>>>>
33357>>>>>>>>>        Function_Return 1 // 0=OK
33358>>>>>>>>>    End_Function
33359>>>>>>>>>    
33359>>>>>>>>>    Function Find_Code_Description String sCode Returns String
33361>>>>>>>>>        If (sCode='' or ;            (sCode<>Current_Code(Self) and ;            Validate_Value(Self,sCode) ) );            Function_Return ''
33364>>>>>>>>>        Function_Return (Current_Description(Self))
33365>>>>>>>>>    End_Function
33366>>>>>>>>>    
33366>>>>>>>>>    
33366>>>>>>>>>    //  The deveveloper (or a sub-class) must fill this list. It is done
33366>>>>>>>>>    //  by finding the item and sending the Message:
33366>>>>>>>>>    //    Send Add_Table_Value sValue {sDescr}
33366>>>>>>>>>    //
33366>>>>>>>>>    Procedure Fill_List
33368>>>>>>>>>        Set Table_Loaded_State to True
33369>>>>>>>>>    End_Procedure
33370>>>>>>>>>    
33370>>>>>>>>>    Procedure Request_Fill_From_List Integer iObj Integer iMsg
33372>>>>>>>>>        Integer iMax
33372>>>>>>>>>        Integer iCnt
33372>>>>>>>>>        Integer iFile
33372>>>>>>>>>        
33372>>>>>>>>>        If (iObj=0 or iMsg=0) ;            Procedure_Return
33375>>>>>>>>>        
33375>>>>>>>>>        If (Table_Loaded_State(Self)=0 or Static_State(Self)=0) Begin
33377>>>>>>>>>            Send Delete_Data
33378>>>>>>>>>            Send Fill_list
33379>>>>>>>>>            Set Table_Loaded_State to True
33380>>>>>>>>>        End
33380>>>>>>>>>>
33380>>>>>>>>>        Get Main_File to iFile
33381>>>>>>>>>        Get Data_Item_Count to iMax
33382>>>>>>>>>        Decrement iMax
33383>>>>>>>>>        For iCnt from 0 to iMax
33389>>>>>>>>>>
33389>>>>>>>>>            Send iMsg to iObj iCnt (Data_Value(Self,iCnt)) ;                (Data_Description(Self,iCnt)) iFile ;                (Data_RowId(Self,iCnt))
33390>>>>>>>>>        Loop
33391>>>>>>>>>>
33391>>>>>>>>>    End_Procedure
33392>>>>>>>>>    
33392>>>>>>>>>    
33392>>>>>>>>>    // returns all data in a two dimension variant array.
33392>>>>>>>>>    // [i][0] = data
33392>>>>>>>>>    // [i][1] = description
33392>>>>>>>>>    // This can be used by Crystal CDO classes (this is why a variant array is used)
33392>>>>>>>>>    Function TableData Returns Variant[][]
33394>>>>>>>>>        Variant[][2] vData
33395>>>>>>>>>        Integer iMax i
33395>>>>>>>>>        If (Table_Loaded_State(Self)=0 or Static_State(Self)=0) Begin
33397>>>>>>>>>            Send Delete_Data
33398>>>>>>>>>            Send Fill_list
33399>>>>>>>>>            Set Table_Loaded_State to True
33400>>>>>>>>>        End
33400>>>>>>>>>>
33400>>>>>>>>>        Get Data_Item_Count to iMax
33401>>>>>>>>>        For i from 0 to (iMax-1)
33407>>>>>>>>>>
33407>>>>>>>>>            Get Data_Value       i to vData[i][0]
33408>>>>>>>>>            Get Data_Description i to vData[i][1]
33409>>>>>>>>>        Loop
33410>>>>>>>>>>
33410>>>>>>>>>        Function_Return vData
33411>>>>>>>>>    End_Function
33412>>>>>>>>>    
33412>>>>>>>>>End_Class
33413>>>>>>>>>
33413>>>>>>>>>
33413>>>>>>>>>
33413>>>>>>>>>Class DescriptionValidationTable is an ValidationTable
33414>>>>>>>>>    
33414>>>>>>>>>    Procedure Construct_Object
33416>>>>>>>>>        Forward Send Construct_Object
33418>>>>>>>>>        Set Number_Elements to 2
33419>>>>>>>>>    End_Procedure
33420>>>>>>>>>    
33420>>>>>>>>>    Function Data_Item_Count Returns Integer
33422>>>>>>>>>        Function_Return (item_count(Self)/3)
33423>>>>>>>>>    End_Function
33424>>>>>>>>>    
33424>>>>>>>>>    Function Data_Value Integer iItem Returns String
33426>>>>>>>>>        Function_Return (Value(Self,iItem*3))
33427>>>>>>>>>    End_Function
33428>>>>>>>>>    
33428>>>>>>>>>    Procedure Set Data_Value Integer iItem String sValue
33430>>>>>>>>>        Set Value  (iItem*3) to sValue
33431>>>>>>>>>    End_Procedure
33432>>>>>>>>>    
33432>>>>>>>>>    Function Data_Description Integer iItem Returns String
33434>>>>>>>>>        Function_Return (Value(Self,iItem*3+1))
33435>>>>>>>>>    End_Function
33436>>>>>>>>>    
33436>>>>>>>>>    Procedure Set Data_Description Integer iItem String sValue
33438>>>>>>>>>        Set Value  (iItem*3+1) to sValue
33439>>>>>>>>>    End_Procedure
33440>>>>>>>>>    
33440>>>>>>>>>    Function Data_RowId Integer iItem Returns RowID
33442>>>>>>>>>        String sRowId
33442>>>>>>>>>        Get Value (iItem*3+2) to sRowId
33443>>>>>>>>>        Function_Return (DeSerializeRowId(sRowId))
33444>>>>>>>>>    End_Function
33445>>>>>>>>>    
33445>>>>>>>>>    Procedure Set Data_RowId Integer iItem RowID riValue
33447>>>>>>>>>        Set Value  (iItem*3+2) to (SerializeRowId(riValue))
33448>>>>>>>>>    End_Procedure
33449>>>>>>>>>    
33449>>>>>>>>>    Procedure Add_Table_Value String sData String sDescr RowID riRec
33451>>>>>>>>>        String  sVal
33451>>>>>>>>>        RowID   riRecVal
33451>>>>>>>>>        Integer iCnt
33451>>>>>>>>>        Get Data_Item_Count to iCnt
33452>>>>>>>>>        Set Data_Value iCnt to sData
33453>>>>>>>>>        
33453>>>>>>>>>        // If one param passed use it for both display and database values
33453>>>>>>>>>        If (num_arguments <= 1);            Move sData  to sVal
33456>>>>>>>>>        Else ;            Move sDescr to sVal
33458>>>>>>>>>        Set Data_Description iCnt to sVal
33459>>>>>>>>>        
33459>>>>>>>>>        If (num_arguments <= 2) ;            Move (NullRowId()) to riRecVal
33462>>>>>>>>>        Else ;            Move riRec        to riRecVal
33464>>>>>>>>>        Set Data_RowId iCnt to riRecVal
33465>>>>>>>>>    End_Procedure
33466>>>>>>>>>End_Class
33467>>>>>>>>>
33467>>>>>>>>>
33467>>>>>>>>>Class FileValidationTable is an DescriptionValidationTable
33468>>>>>>>>>    
33468>>>>>>>>>    Procedure Construct_Object
33470>>>>>>>>>        Forward Send Construct_Object
33472>>>>>>>>>        Property Integer No_Fill_State     False // this is never used and is obsolete. (JJT)
33473>>>>>>>>>        Property Integer Ordering          1   // Indx1 is a good guess.
33474>>>>>>>>>        Property String  Type_Value        ''  // default these two to
33475>>>>>>>>>        Property Integer Type_Field        0   // Undefined (none).
33476>>>>>>>>>        Property Integer Code_Field        1   // Fld 1=code, 2=descr
33477>>>>>>>>>        Property Integer Description_Field 2   // are good guesses.
33478>>>>>>>>>        
33478>>>>>>>>>        Property Integer Code_Load_Object  0   // or (Code_Loader(Self))
33479>>>>>>>>>    End_Procedure
33480>>>>>>>>>    
33480>>>>>>>>>    Function Table_Loaded_State Returns Integer
33482>>>>>>>>>        Integer iRVal
33482>>>>>>>>>        Get No_fill_State to iRVal // if true, table always is loaded
33483>>>>>>>>>        If not iRval ;            Forward Get table_loaded_State to iRVal
33487>>>>>>>>>        Function_Return iRval
33488>>>>>>>>>    End_Function
33489>>>>>>>>>    
33489>>>>>>>>>    Function Validate_Value String sCode Returns Integer
33491>>>>>>>>>        Integer iRVal
33491>>>>>>>>>        Integer iDSO
33491>>>>>>>>>        Get Code_Load_Object  to iDSO
33492>>>>>>>>>        // we use standard validate, if code is blank, OR if
33492>>>>>>>>>        //   1. if no code DSO or the code DSO exists but is not busy.
33492>>>>>>>>>        //   2. AND it is not no-fill
33492>>>>>>>>>        //   3. AND it is static
33492>>>>>>>>>        // Else we find the record directly
33492>>>>>>>>>        // Note that the operation mode is busy during request_validate (the
33492>>>>>>>>>        // ddo does this). WHen operation mode is busy we must not use
33492>>>>>>>>>        // the code dso (must find manually).
33492>>>>>>>>>        If (sCode='' or ;            ( (iDSO=0 or Operation_Mode=0)    and ; // if no code DSO or DSO not busy            No_Fill_State(Self)=0 and ;            Static_State(Self) ) ) ;            Forward Get Validate_Value sCode to iRVal
33496>>>>>>>>>        Else If (sCode<>Current_Code(Self)) ;            Get Find_Value sCode to iRVal
33500>>>>>>>>>        Function_Return iRVal // OK
33501>>>>>>>>>    End_Function
33502>>>>>>>>>    
33502>>>>>>>>>    Procedure Initialize_File
33504>>>>>>>>>        Integer iFile iCodeField iDescField iDSO iIndex iTypeField
33504>>>>>>>>>        Get Code_Load_Object  to iDSO
33505>>>>>>>>>        Get Main_File         to iFile
33506>>>>>>>>>        Get Code_Field        to iCodeField
33507>>>>>>>>>        Get Description_Field to iDescField
33508>>>>>>>>>        Get Ordering          to iIndex
33509>>>>>>>>>        Get Type_Field        to iTypeField
33510>>>>>>>>>        If (iDSO and Operation_Mode=0) ;            Send Initialize_File to iDSO ;            iFile iIndex iCodeField iDescField ;            iTypeField (Type_Value(Self))
33513>>>>>>>>>        Else Begin
33514>>>>>>>>>            Clear iFile
33515>>>>>>>>>            // if Type exists, seed the type value
33515>>>>>>>>>            If iTypeField ;                Set_Field_Value iFile iTypeField to (Type_Value(Self))
33520>>>>>>>>>        End
33520>>>>>>>>>>
33520>>>>>>>>>    End_Procedure
33521>>>>>>>>>    
33521>>>>>>>>>    Function Find_Value String Code Returns Integer
33523>>>>>>>>>        Integer iFile iCodeField iDescField iDSO iIndex iTypeField
33523>>>>>>>>>        Get Code_Load_Object  to iDSO
33524>>>>>>>>>        Get Main_File         to iFile
33525>>>>>>>>>        Get Ordering          to iIndex
33526>>>>>>>>>        Get Code_Field        to iCodeField
33527>>>>>>>>>        Get Description_Field to iDescField
33528>>>>>>>>>        Get Type_Field        to iTypeField
33529>>>>>>>>>        Send Initialize_File
33530>>>>>>>>>        //
33530>>>>>>>>>        Set_Field_Value iFile iCodeField to Code
33533>>>>>>>>>        If (iDSO and Operation_Mode=0) ;            Send Request_Find to iDSO EQ iFile iIndex
33536>>>>>>>>>        Else ;            Vfind iFile iIndex EQ
33539>>>>>>>>>        If not (Found) ;            Function_Return 1
33542>>>>>>>>>        // Set properties Current_code and Current_Description
33542>>>>>>>>>        Send Store_Current_Data iFile iCodeField iDescField
33543>>>>>>>>>        Function_Return 0
33544>>>>>>>>>    End_Function
33545>>>>>>>>>    
33545>>>>>>>>>    // internal
33545>>>>>>>>>    Procedure Store_Current_Data Integer iFile Integer iCodeField Integer iDescField
33547>>>>>>>>>        String sVal
33547>>>>>>>>>        Get_Field_Value iFile iCodeField to sVal
33550>>>>>>>>>        Set Current_Code to (trim(sVal))
33551>>>>>>>>>        If iDescField Begin
33553>>>>>>>>>            Get_Field_Value iFile iDescField to sVal
33556>>>>>>>>>            Set Current_Description to (trim(sVal))
33557>>>>>>>>>        End
33557>>>>>>>>>>
33557>>>>>>>>>        Set Current_RowId to (GetRowId(iFile))
33558>>>>>>>>>    End_Procedure
33559>>>>>>>>>    
33559>>>>>>>>>    Function Next_Code_Record Returns Boolean
33561>>>>>>>>>        Integer iFile iCodeField iDescField iIndex
33561>>>>>>>>>        Integer iTypeField
33561>>>>>>>>>        String sTypeValue sFoundTypeValue
33561>>>>>>>>>        Boolean bFound
33561>>>>>>>>>        Handle hoDSO
33561>>>>>>>>>        Get Code_Load_Object  to hoDSO
33562>>>>>>>>>        Get Description_Field to iDescField
33563>>>>>>>>>        Get Code_Field        to iCodeField
33564>>>>>>>>>        Get Main_File         to iFile
33565>>>>>>>>>        
33565>>>>>>>>>        If hoDSO Begin
33567>>>>>>>>>            Get Next_Code_record of hoDSO to bFound
33568>>>>>>>>>        End
33568>>>>>>>>>>
33568>>>>>>>>>        Else Begin
33569>>>>>>>>>            Get Ordering to iIndex
33570>>>>>>>>>            Vfind iFile iIndex GT
33572>>>>>>>>>            Move (Found) to bFound
33573>>>>>>>>>            If bFound Begin
33575>>>>>>>>>                // if found see if we are at the end of the valid list of types
33575>>>>>>>>>                Get Type_Field to iTypeField
33576>>>>>>>>>                Get Type_Value to sTypeValue
33577>>>>>>>>>                If ((iTypeField<>0) and (sTypeValue<>"")) Begin
33579>>>>>>>>>                    Get_Field_Value iFile iTypeField to sFoundTypeValue
33582>>>>>>>>>                    Move (Trim(sTypeValue)=Trim(sFoundTypeValue)) to bFound
33583>>>>>>>>>                End
33583>>>>>>>>>>
33583>>>>>>>>>            End
33583>>>>>>>>>>
33583>>>>>>>>>        End
33583>>>>>>>>>>
33583>>>>>>>>>        If bFound Begin
33585>>>>>>>>>            Send Store_Current_Data iFile iCodeField iDescField
33586>>>>>>>>>        End
33586>>>>>>>>>>
33586>>>>>>>>>        Function_Return bFound
33587>>>>>>>>>    End_Function
33588>>>>>>>>>    
33588>>>>>>>>>    Procedure Fill_List
33590>>>>>>>>>        RowID riId
33590>>>>>>>>>        Boolean bFound
33590>>>>>>>>>        String sCode sDesc
33590>>>>>>>>>        If (Static_State(Self)=0 or No_Fill_State(Self)) ;            Procedure_Return
33593>>>>>>>>>        //
33593>>>>>>>>>        Send Delete_Data
33594>>>>>>>>>        Send Initialize_File
33595>>>>>>>>>        Get Next_Code_Record to bFound
33596>>>>>>>>>        While bFound
33600>>>>>>>>>            Get Current_Code        to sCode
33601>>>>>>>>>            Get Current_Description to sDesc
33602>>>>>>>>>            Get Current_RowId       to riId
33603>>>>>>>>>            Send Add_Table_Value sCode sDesc riId
33604>>>>>>>>>            Get Next_Code_Record to bFound
33605>>>>>>>>>        Loop
33606>>>>>>>>>>
33606>>>>>>>>>        Set Table_Loaded_State to True
33607>>>>>>>>>    End_Procedure
33608>>>>>>>>>    
33608>>>>>>>>>    Procedure Request_Fill_From_List Integer iObj Integer iMsg
33610>>>>>>>>>        Integer iItem
33610>>>>>>>>>        Integer iFile
33610>>>>>>>>>        RowID   riId
33610>>>>>>>>>        Boolean bFound
33610>>>>>>>>>        String sCode sDesc
33610>>>>>>>>>        
33610>>>>>>>>>        If (iObj=0 or iMsg=0) ;            Procedure_Return
33613>>>>>>>>>        
33613>>>>>>>>>        If (Static_State(Self) and No_Fill_State(Self)=0 ) ;            Forward Send Request_Fill_From_List iObj iMsg
33617>>>>>>>>>        Else Begin
33618>>>>>>>>>            Get Main_File to iFile
33619>>>>>>>>>            Send Initialize_File
33620>>>>>>>>>            Get Next_Code_Record to bFound
33621>>>>>>>>>            While bFound
33625>>>>>>>>>                Get Current_Code        to sCode
33626>>>>>>>>>                Get Current_Description to sDesc
33627>>>>>>>>>                Get Current_RowId       to riId
33628>>>>>>>>>                Send iMSG to iObj iItem sCode sDesc iFile riId
33629>>>>>>>>>                Increment iItem
33630>>>>>>>>>                Get Next_Code_Record to bFound
33631>>>>>>>>>            Loop
33632>>>>>>>>>>
33632>>>>>>>>>        End
33632>>>>>>>>>>
33632>>>>>>>>>    End_Procedure
33633>>>>>>>>>End_Class
33634>>>>>>>>>
33634>>>>>>>>>Use CodeLoad.pkg
Including file: codeload.pkg    (C:\Program Files\DataFlex 23.0\Pkg\codeload.pkg)
33634>>>>>>>>>>>// Interface:
33634>>>>>>>>>>>//
33634>>>>>>>>>>>//  Procedure Initialize_File Integer File# Integer Index# Integer Code# ;
33634>>>>>>>>>>>//                            Integer Desc# Integer Type# String Type
33634>>>>>>>>>>>//
33634>>>>>>>>>>>//      This initializes the data-set for finding. You MUST pass all five
33634>>>>>>>>>>>//      parameters here. They are:
33634>>>>>>>>>>>//          File#  -  main file to use
33634>>>>>>>>>>>//         Index#  - Index to use for finding
33634>>>>>>>>>>>//          Code#  - field number of the code
33634>>>>>>>>>>>//          Desc#  - field number of the code's description
33634>>>>>>>>>>>//          Type#  - field number of the constraining Type (0 if none)
33634>>>>>>>>>>>//           Type  - the constrain type value ('' = allow all records)
33634>>>>>>>>>>>//
33634>>>>>>>>>>>//      You MUST send this message before finding records. Alternately,
33634>>>>>>>>>>>//      you could set the individual properties and send rebuild_constraints
33634>>>>>>>>>>>//      and CLEAR to initalize the file (see code on how to do this).
33634>>>>>>>>>>>//
33634>>>>>>>>>>>//    Get Next_Code_record to ret_Int
33634>>>>>>>>>>>//
33634>>>>>>>>>>>//      Returns the next record number. 0 if no more. If record exists it
33634>>>>>>>>>>>//      sets the value of Current_Code and Crnt_Description.
33634>>>>>>>>>>>//
33634>>>>>>>>>>>//    Get Current_Code to Ret_String
33634>>>>>>>>>>>//    Get Crnt_Description to Ret_String
33634>>>>>>>>>>>//
33634>>>>>>>>>>>//      Returns the code and description of the last valid record found
33634>>>>>>>>>>>//      with the Next_Code_Record Message
33634>>>>>>>>>>>//
33634>>>>>>>>>>>//   Sample Usage:  This was created primarily to be used by the
33634>>>>>>>>>>>//                  radio-entry-form classes. In particular those using
33634>>>>>>>>>>>//                  the "code" look up file. Look at those packages if
33634>>>>>>>>>>>//                  you wish to use them yourself.
33634>>>>>>>>>>>//
33634>>>>>>>>>>>Use Data_Set.pkg
33634>>>>>>>>>>>
33634>>>>>>>>>>>Class Code_Loader_Data_Set is a DataSet
33635>>>>>>>>>>>    
33635>>>>>>>>>>>    Procedure Construct_Object Integer Img#
33637>>>>>>>>>>>        Forward Send Construct_Object Img#
33639>>>>>>>>>>>        // These should be set by the Initialize_File message
33639>>>>>>>>>>>        Property String  Type_Value           '' // assume no defaults.
33640>>>>>>>>>>>        Property Integer Type_Field           0  // These values should be
33641>>>>>>>>>>>        Property Integer Code_Field           0  // set by initialize_file
33642>>>>>>>>>>>        Property Integer Description_Field    0  //
33643>>>>>>>>>>>        
33643>>>>>>>>>>>        // These are SET by Next_Code_Record. You may GET their values
33643>>>>>>>>>>>        Property String  Current_Code         ''
33644>>>>>>>>>>>        Property String  Current_Description  ''
33645>>>>>>>>>>>    End_Procedure
33646>>>>>>>>>>>    
33646>>>>>>>>>>>    // If a Type exists (not a '') and there is a type field and a
33646>>>>>>>>>>>    // main_file constrain to the type. Else no constraints
33646>>>>>>>>>>>    Procedure OnConstrain
33648>>>>>>>>>>>        String sType
33648>>>>>>>>>>>        Integer iFile iField
33648>>>>>>>>>>>        Get Type_Value to sType
33649>>>>>>>>>>>        Get Main_File  to iFile
33650>>>>>>>>>>>        Get Type_Field to iField
33651>>>>>>>>>>>        If (sType<>'' and iFile<>0 and iField<>0) ;            Vconstrain iFile iField eq sType
33656>>>>>>>>>>>    End_Procedure
33657>>>>>>>>>>>    
33657>>>>>>>>>>>    //  This initializes the data-set for finding. You MUST pass all five
33657>>>>>>>>>>>    //  parameters here. They are:
33657>>>>>>>>>>>    //     File#  -  main file to use
33657>>>>>>>>>>>    //    Index#  - Index to use for finding
33657>>>>>>>>>>>    //     Code#  - field number of the code
33657>>>>>>>>>>>    //     Desc#  - field number of the code's description
33657>>>>>>>>>>>    //     Type#  - field number of the constraining Type (0 if none)
33657>>>>>>>>>>>    //      Type  - the constrain type value ('' = allow all records)
33657>>>>>>>>>>>    //
33657>>>>>>>>>>>    Procedure Initialize_File Integer File# Integer Index# Integer Code# ;            Integer Desc# Integer Type# String Type
33659>>>>>>>>>>>        // note: all params are required!
33659>>>>>>>>>>>        Set Main_File         to File#
33660>>>>>>>>>>>        Set Ordering          to Index#
33661>>>>>>>>>>>        Set Code_Field        to Code#
33662>>>>>>>>>>>        Set Description_Field to Desc#
33663>>>>>>>>>>>        Set Type_Field        to Type#
33664>>>>>>>>>>>        Set Type_Value        to Type
33665>>>>>>>>>>>        //
33665>>>>>>>>>>>        Send Rebuild_Constraints // set up constraints
33666>>>>>>>>>>>        Send Clear               // initialize the file
33667>>>>>>>>>>>    End_Procedure
33668>>>>>>>>>>>    
33668>>>>>>>>>>>    //  Find the next record: Return 0 if no record, 1 if record exists
33668>>>>>>>>>>>    //   if record exists set Current_Code and Current_Description
33668>>>>>>>>>>>    //
33668>>>>>>>>>>>    Function Next_Code_Record Returns Boolean
33670>>>>>>>>>>>        Integer iFile iField
33670>>>>>>>>>>>        String sValue
33670>>>>>>>>>>>        Send Request_Find GT (Main_File(Self)) (Ordering(Self))
33671>>>>>>>>>>>        If not (Found) ;            Function_Return False
33674>>>>>>>>>>>        // Set properties Current_code and Current_Description
33674>>>>>>>>>>>        Get Main_File to iFile
33675>>>>>>>>>>>        
33675>>>>>>>>>>>        Get Code_Field to iField
33676>>>>>>>>>>>        Get_Field_Value iFile iField to sValue
33679>>>>>>>>>>>        Set Current_Code to sValue
33680>>>>>>>>>>>        
33680>>>>>>>>>>>        Get Description_Field to iField
33681>>>>>>>>>>>        Get_Field_Value iFile iField to sValue
33684>>>>>>>>>>>        Set Current_Description to sValue
33685>>>>>>>>>>>        Function_Return True
33686>>>>>>>>>>>    End_Function
33687>>>>>>>>>>>    
33687>>>>>>>>>>>End_Class
33688>>>>>>>>>Use cCodeMaintOpen_Mixin.pkg
Including file: cCodeMaintOpen_Mixin.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCodeMaintOpen_Mixin.pkg)
33688>>>>>>>>>>>// Mixin class to support transistion support for CodeType and CodeMast files.
33688>>>>>>>>>>>// These files used to be in filelist and they used to reside at 207 and 208 and they
33688>>>>>>>>>>>// were always opened with "open as"
33688>>>>>>>>>>>// We want these to be in the filelist at 253 and 254. These open methods will attempt to open these files
33688>>>>>>>>>>>// as such. If these are old files (not in filelist or wrong number) they will get loaded with the old
33688>>>>>>>>>>>// open as - thus keeping this backwards compatible.
33688>>>>>>>>>>>// By adding to filelist, we can sort the files and we can open them as other database sources.
33688>>>>>>>>>>>Use VDFBase.pkg
33688>>>>>>>>>>>
33688>>>>>>>>>>>Declare_Datafile CodeType
Including file: CodeType.fd    (C:\Projects\DF20\DbUpdateFramework\DDSrc\CodeType.fd)
33688>>>>>>>>>>>Declare_Datafile CodeMast
Including file: CodeMast.fd    (C:\Projects\DF20\DbUpdateFramework\DDSrc\CodeMast.fd)
33688>>>>>>>>>>>Define C_Expected_CodeType_FileNumber for 253  // and the logical name must be CODETYPE
33688>>>>>>>>>>>Define C_Expected_CodeMast_FileNumber for 254  // and the logical name must be CODEMAST
33688>>>>>>>>>>>
33688>>>>>>>>>>>Class cCodeMaintOpen_Mixin is a Mixin
33689>>>>>>>>>>>    
33689>>>>>>>>>>>    Procedure OpenCodeMast
33691>>>>>>>>>>>        String sName
33691>>>>>>>>>>>        If (Codemast.File_number=C_Expected_CodeMast_FileNumber) Begin
33693>>>>>>>>>>>            Get_Attribute DF_FILE_LOGICAL_NAME of Codemast.File_number to sName
33696>>>>>>>>>>>            If (uppercase(trim(sName))="CODEMAST") Begin
33698>>>>>>>>>>>                Open CodeMast
33700>>>>>>>>>>>                Procedure_Return
33701>>>>>>>>>>>            End
33701>>>>>>>>>>>>
33701>>>>>>>>>>>        End
33701>>>>>>>>>>>>
33701>>>>>>>>>>>        Open "CodeMast" as Codemast.File_number
33703>>>>>>>>>>>    End_Procedure
33704>>>>>>>>>>>    
33704>>>>>>>>>>>    Procedure OpenCodeType
33706>>>>>>>>>>>        String sName
33706>>>>>>>>>>>        If (Codetype.File_number=C_Expected_CodeType_FileNumber) Begin
33708>>>>>>>>>>>            Get_Attribute DF_FILE_LOGICAL_NAME of CodeType.File_number to sName
33711>>>>>>>>>>>            If (uppercase(trim(sName))="CODETYPE") Begin
33713>>>>>>>>>>>                Open CodeType
33715>>>>>>>>>>>                Procedure_Return
33716>>>>>>>>>>>            End
33716>>>>>>>>>>>>
33716>>>>>>>>>>>        End
33716>>>>>>>>>>>>
33716>>>>>>>>>>>        Open "CodeType" as CodeType.File_number
33718>>>>>>>>>>>    End_Procedure
33719>>>>>>>>>>>    
33719>>>>>>>>>>>End_Class
33720>>>>>>>>>
33720>>>>>>>>>//
33720>>>>>>>>>//  This is the object we need for loading files.
33720>>>>>>>>>//
33720>>>>>>>>>Object Code_loader is a Code_loader_Data_Set no_Image
33722>>>>>>>>>End_Object
33723>>>>>>>>>
33723>>>>>>>>>
33723>>>>>>>>>Class CodeValidationTable is an FileValidationTable
33724>>>>>>>>>    
33724>>>>>>>>>    // supports opening of file in reserved filelist area.
33724>>>>>>>>>    Import_Class_Protocol cCodeMaintOpen_Mixin
33725>>>>>>>>>    
33725>>>>>>>>>    Procedure Construct_Object
33727>>>>>>>>>        Forward Send Construct_Object
33729>>>>>>>>>        
33729>>>>>>>>>        Send OpenCodeMast                       // methods supports w/ filelist (new) and without (old)
33730>>>>>>>>>        
33730>>>>>>>>>        Set Main_File to CodeMast.File_Number   // name of file is CODEMAST
33731>>>>>>>>>        Set Ordering to 1                       // Index 1: Types x Code
33732>>>>>>>>>        Set Type_Field to 1                     // Fld 1: Type
33733>>>>>>>>>        Set Code_Field to 2                     // Fld 2: Code
33734>>>>>>>>>        Set Description_Field to 3              // Fld 3: Description
33735>>>>>>>>>        Set Code_load_Object to (Code_Loader(Self))
33736>>>>>>>>>    End_Procedure
33737>>>>>>>>>    
33737>>>>>>>>>End_Class
33738>>>>>>>
33738>>>>>>>// Used to by DDOConstraintFindMeta to return constraint expression info in a friendlier fashion
33738>>>>>>>Struct tDDOConstraintFindMeta
33738>>>>>>>    Integer iJumpInSegments
33738>>>>>>>    Boolean bJumpOut
33738>>>>>>>    Boolean bPreRelate
33738>>>>>>>    Boolean bPostRelate
33738>>>>>>>End_Struct
33738>>>>>>>
33738>>>>>>>// used by webapp resynchs
33738>>>>>>>Struct tDDChangedParentInfo
33738>>>>>>>    Integer iTable
33738>>>>>>>    Boolean bSwitched
33738>>>>>>>End_Struct
33738>>>>>>>
33738>>>>>>>// used by webapp resynchs
33738>>>>>>>Struct tDDChangedInfo
33738>>>>>>>    Boolean bChanged
33738>>>>>>>    tDDChangedParentInfo[] ParentChanged
33738>>>>>>>    tDDChangedParentInfo[] ParentChanged
33738>>>>>>>End_Struct
33738>>>>>>>
33738>>>>>>>Enum_List
33738>>>>>>>    Define CONST_EXP_JUMPOUT     for 1
33738>>>>>>>    Define CONST_EXP_PRE_RELATE  for 2
33738>>>>>>>    Define CONST_EXP_POST_RELATE for 4
33738>>>>>>>End_Enum_List
33738>>>>>>>
33738>>>>>>>// Constraint Find Types
33738>>>>>>>Enum_List
33738>>>>>>>    Define CONST_VALUE for 0    // Constrain File.Field eq sValue
33738>>>>>>>    Define CONST_CHILD          // Constrain File Relates to iOtherFile
33738>>>>>>>    Define CONST_FIELD          // Constrain File.field eq OtherFile.OtherField
33738>>>>>>>    Define CONST_EXP            // Constrain File as (Expression) - expression is internal
33738>>>>>>>    Define CONST_RELATES        // Sames a CONST_CHILD - should never be used
33738>>>>>>>End_Enum_List
33738>>>>>>>
33738>>>>>>>// Constraint Find Modes
33738>>>>>>>Enum_List
33738>>>>>>>    Define CONST_LT for 0
33738>>>>>>>    Define CONST_LE for 1
33738>>>>>>>    Define CONST_EQ for 2
33738>>>>>>>    Define CONST_GE for 3
33738>>>>>>>    Define CONST_GT for 4
33738>>>>>>>    Define CONST_NE for 5
33738>>>>>>>    Define CONST_Matches for 6       // a matches not capable of a jump in e.g., "?A*"
33738>>>>>>>    Define CONST_Contains for 7      // a contains
33738>>>>>>>    Define CONST_MatchesJumpIn for 9 // a matches which is capable of a jump in e.g., "A*"
33738>>>>>>>    // note that BETWEEN is actually two constraints a GE and LE
33738>>>>>>>End_Enum_List
33738>>>>>>>
33738>>>>>>>// Struct used to DDOConstraints to return current constraints in an array
33738>>>>>>>Struct tConstraintDef
33738>>>>>>>    Integer eType // constraint Find type
33738>>>>>>>    Integer eMode // constrain file mode
33738>>>>>>>    Integer iFile
33738>>>>>>>    Integer iField
33738>>>>>>>    String sValue
33738>>>>>>>    Integer iOtherFile
33738>>>>>>>    Integer iOtherField
33738>>>>>>>End_Struct
33738>>>>>>>
33738>>>>>>>// values passed to OnPre/PostFind to indicate the operation type
33738>>>>>>>Enum_List
33738>>>>>>>    Define DDFindRequestFind    // request_find
33738>>>>>>>    Define DDFindFindByRowRec   // FindByRowId, Find_By_Recnum
33738>>>>>>>    Define DDFindRequestAssign  // Request_assign
33738>>>>>>>    Define DDFindClear          // Clear (note Clear_All doesn't do this)
33738>>>>>>>End_Enum_List
33738>>>>>>>
33738>>>>>>>
33738>>>>>>>// these are private
33738>>>>>>>Define DD_RememberLast for "_REMEMBER$LAST_"
33738>>>>>>>Use tDDRemembered.pkg
Including file: tDDRemembered.pkg    (C:\Program Files\DataFlex 23.0\Pkg\tDDRemembered.pkg)
33738>>>>>>>>>// DDRemember Struct used for DataDictionary Class
33738>>>>>>>>>
33738>>>>>>>>>// private
33738>>>>>>>>>
33738>>>>>>>>>Struct tDDRemembered
33738>>>>>>>>>    Integer iField // searches are performed on this segement - it must be first
33738>>>>>>>>>    String sDefault
33738>>>>>>>>>    String sLastValue
33738>>>>>>>>>End_Struct
33738>>>>>>>>>
33738>>>>>>>
33738>>>>>>>// Used to assign a global validation_object. This can be used for
33738>>>>>>>// automatic prompt object on non-relational validations (checks, validation_
33738>>>>>>>// tables, etc.)
33738>>>>>>>Integer DD_Global_Validation_Prompt_Object
33738>>>>>>>Move 0 to DD_Global_Validation_Prompt_Object
33739>>>>>>>
33739>>>>>>>// Used for Dso traversal marking - Private (do not use)
33739>>>>>>>Integer   DD_Current_Mark_Id
33739>>>>>>>Move 0 to DD_Current_Mark_Id
33740>>>>>>>
33740>>>>>>>// Used to validate DSO structures during Save and deletes
33740>>>>>>>Enumeration_List
33740>>>>>>>    Define DD_VALIDATE_STRUCTURE_ALWAYS // Validate each save/delete operation.
33740>>>>>>>    Define DD_VALIDATE_STRUCTURE_NEVER  // Never validate these operations.
33740>>>>>>>    Define DD_VALIDATE_STRUCTURE_ONCE   // Validate Once (first save or delete).
33740>>>>>>>End_Enumeration_List
33740>>>>>>>
33740>>>>>>>// Used as a start for error handing in DSOs. Only affects errors that go
33740>>>>>>>// through operation_not_allowed and Field_Error. Used by Error_Report_Mode
33740>>>>>>>Enumeration_List
33740>>>>>>>    Define DD_ERROR_REPORT              // Report Error on screen
33740>>>>>>>    Define DD_ERROR_NO_REPORT           // Show no Error..
33740>>>>>>>End_Enumeration_List
33740>>>>>>>
33740>>>>>>>Enumeration_List
33740>>>>>>>    Define DD_Lock_on_All             for  7  // 111
33740>>>>>>>    Define DD_Lock_on_New_Save_Delete for  5  // 101
33740>>>>>>>    Define DD_Lock_on_Delete          for  4  // 100
33740>>>>>>>    Define DD_Lock_on_Save            for  2  // 010
33740>>>>>>>    Define DD_Lock_on_New_Save        for  1  // 001
33740>>>>>>>End_Enumeration_List
33740>>>>>>>
33740>>>>>>>
33740>>>>>>>Define DD_DEFAULT_ERROR_NUMBER  for 999
33740>>>>>>>
33740>>>>>>>
33740>>>>>>>
33740>>>>>>>
33740>>>>>>>// The next replaces will be used to indicate default item-options
33740>>>>>>>// instead of a fieldnumber which is normally used.
33740>>>>>>>
33740>>>>>>>// these are the DD bits that pertain to DEO Item options.
33740>>>>>>>Define DD_DEO_MASK for (DD_NOENTER ior DD_SKIPFOUND ior DD_CAPSLOCK ior DD_ZERO_SUPPRESS ior DD_AUTORETURN ior DD_AUTOBACK ior DD_AUTOCLEAR)
33740>>>>>>>
33740>>>>>>>
33740>>>>>>>// Special parameter options that can get passed to Set Field_Options. The
33740>>>>>>>// purpose is to clear all fields or the remaining passed parameters. Normally,
33740>>>>>>>// these are not used so it does not matter if their interface is a bit odd.
33740>>>>>>>Enumeration_List
33740>>>>>>>    Define DD_CLEAR_FIELD_OPTIONS      for -1
33740>>>>>>>    Define DD_CLEAR_ALL_FIELD_OPTIONS  for -2
33740>>>>>>>End_Enumeration_List
33740>>>>>>>
33740>>>>>>>// used to keep track of extra server file information.
33740>>>>>>>Struct tDDServerInformation
33740>>>>>>>    Integer iParent             // parent file number
33740>>>>>>>    Boolean bAllowNullParent    // does this DD (child) allow a null parent
33740>>>>>>>    Integer bParentNoSwitchIfCommitted // does this DD (child) allow switching committed parents
33740>>>>>>>    Boolean bNoCascadeDelete           // when a child record exists should cascade delete stop the action
33740>>>>>>>    Boolean bCascadeDeleteNullTheParent // when a child record exists that is null parent allowed, should we delete or null the parent
33740>>>>>>>End_Struct
33740>>>>>>>
33740>>>>>>>Use DDExtFld.pkg // adds extended field/pointer support
Including file: DDExtFld.pkg    (C:\Program Files\DataFlex 23.0\Pkg\DDExtFld.pkg)
33740>>>>>>>>>// This is used by the DataDictionary class and provides a method for
33740>>>>>>>>>// windows DDs (for now) to support local buffers for text and binary buffers.
33740>>>>>>>>>// Field objects are created within the DD by sending the message:
33740>>>>>>>>>// The DD interface is:
33740>>>>>>>>>//
33740>>>>>>>>>//      Get  Field_Object iField to hExtFieldObject
33740>>>>>>>>>//      Send DefineExtendedField iField
33740>>>>>>>>>//      Send DefineAllExtendedFields
33740>>>>>>>>>//      Send ExtendedFieldsUpdate bSave
33740>>>>>>>>>//      Send ExtendedFieldsRefresh bCleared
33740>>>>>>>>>//      Set  File_Field_Current_Pointer_Value iFile iField iLen to pValue
33740>>>>>>>>>//      Set  Field_Current_Pointer_Value iField iLen to pValue
33740>>>>>>>>>//      Set  File_Field_Pointer_Entry iFile iField iLen bShowErr to pValue
33740>>>>>>>>>//      Set  Field_Pointer_Entry iField iOpts iLen bShowErr to pValue
33740>>>>>>>>>//      Get  File_Field_Current_Pointer_Value iFile iField to pData
33740>>>>>>>>>//      Get  Field_Current_Pointer_Value iField to pData
33740>>>>>>>>>//
33740>>>>>>>>>// Once object is identified, the following interface can be used
33740>>>>>>>>>//      Get FieldPointer of hExtFieldObject to iMemoryPointer
33740>>>>>>>>>//      Get FieldLength  of hExtFieldObject to iLen
33740>>>>>>>>>//      Get File_Number  of hExtFieldObject to iFile
33740>>>>>>>>>//      Get Field_Number of hExtFieldObject to iFile
33740>>>>>>>>>//      Set Update_Save_State of hExtFieldObject to bState         // be careful!
33740>>>>>>>>>//      Set Update_Find_State of hExtFieldObject to bState         // be careful
33740>>>>>>>>>//      Set FieldRefresh_Save_State of hExtFieldObject to bState   // be careful
33740>>>>>>>>>//
33740>>>>>>>>>
33740>>>>>>>>>//
33740>>>>>>>>>//  DD structure:
33740>>>>>>>>>//       DD Object           (property Field_objects points to child)
33740>>>>>>>>>//           FieldObjects    (array of field#s and field objs)
33740>>>>>>>>>//              FieldObject1 (heap alloc for each field)
33740>>>>>>>>>//              FieldObjectn
33740>>>>>>>>>//
33740>>>>>>>>>
33740>>>>>>>>>//
33740>>>>>>>>>// This is used to create a single extended field object.
33740>>>>>>>>>//
33740>>>>>>>>>// Interface
33740>>>>>>>>>//      Get FieldPointer to iMemoryPointer
33740>>>>>>>>>//      Get FieldLength  to iLen
33740>>>>>>>>>//      Get File_Number  to iFile
33740>>>>>>>>>//      Get Field_Number to iFile
33740>>>>>>>>>//      get/Set Update_Save_State to bState         // be careful!
33740>>>>>>>>>//      get/Set Update_Find_State to bState         // be careful
33740>>>>>>>>>//      get/Set FieldRefresh_Save_State to bState   // be careful
33740>>>>>>>>>//      get/set FieldChangedState
33740>>>>>>>>>//      send defineField  iFile iField
33740>>>>>>>>>//      Send FieldUpdate  bSave
33740>>>>>>>>>//      Send FieldRefresh bCleared bClearFieldChange
33740>>>>>>>>>//      Set  Field_pEntry iOpts iLen to pValue
33740>>>>>>>>>//      Set  Field_pValue iLen to pValue
33740>>>>>>>>>//
33740>>>>>>>>>Use VDFBase.pkg
33740>>>>>>>>>
33740>>>>>>>>>Class FieldObject is a cObject
33741>>>>>>>>>    
33741>>>>>>>>>    Procedure Construct_Object
33743>>>>>>>>>        Forward Send construct_object
33745>>>>>>>>>        // these are all set by DefineField and should not be changed
33745>>>>>>>>>        Property Integer File_Number        0
33746>>>>>>>>>        Property Integer Field_Number       0
33747>>>>>>>>>        Property Integer FieldLength        0
33748>>>>>>>>>        
33748>>>>>>>>>        // maintained by object
33748>>>>>>>>>        Property UChar[] pFieldArray
33749>>>>>>>>>        
33749>>>>>>>>>        // these can be changed, with care, by the developer
33749>>>>>>>>>        Property Integer Update_Save_State  True
33750>>>>>>>>>        Property Integer Update_Find_State  False // usually no point for finds
33751>>>>>>>>>        Property Integer FieldRefresh_State True
33752>>>>>>>>>        
33752>>>>>>>>>        // hopefully never used
33752>>>>>>>>>        Property Pointer pLegacyFieldPointer       0
33753>>>>>>>>>        
33753>>>>>>>>>    End_Procedure
33754>>>>>>>>>    
33754>>>>>>>>>    Procedure Set FieldChangedState Integer bState
33756>>>>>>>>>        Integer iField
33756>>>>>>>>>        Get Field_Number to iField
33757>>>>>>>>>        Delegate Set Field_Changed_state iField to bState
33759>>>>>>>>>    End_Procedure
33760>>>>>>>>>    
33760>>>>>>>>>    Function FieldChangedState Returns Integer
33762>>>>>>>>>        Integer iField  bState
33762>>>>>>>>>        Get Field_Number to iField
33763>>>>>>>>>        Delegate Get Field_Changed_state iField to bState
33765>>>>>>>>>        Function_Return bState
33766>>>>>>>>>    End_Function
33767>>>>>>>>>    
33767>>>>>>>>>    // return the field option specified
33767>>>>>>>>>    Function IsSaveNoPut Returns Boolean
33769>>>>>>>>>        Integer iField
33769>>>>>>>>>        Boolean  bState
33769>>>>>>>>>        Get Field_Number to iField
33770>>>>>>>>>        Delegate Get FieldSaveNoPut iField to bState
33772>>>>>>>>>        Function_Return bState
33773>>>>>>>>>    End_Function
33774>>>>>>>>>    
33774>>>>>>>>>    // for object: define file, field, fieldlength and allocate heap memory
33774>>>>>>>>>    //             and set memory pointer
33774>>>>>>>>>    Procedure DefineField Integer iFile Integer iField
33776>>>>>>>>>        Integer iFldLen
33776>>>>>>>>>        Set File_Number  to iFile
33777>>>>>>>>>        Set Field_Number to iField
33778>>>>>>>>>        Get_Attribute DF_FIELD_LENGTH of iFile iField to iFldLen
33781>>>>>>>>>        Set FieldLength  to iFldLen
33782>>>>>>>>>    End_Procedure
33783>>>>>>>>>    
33783>>>>>>>>>    // Move from the DD Buffer to the file buffer
33783>>>>>>>>>    Procedure FieldUpdate Integer bSave
33785>>>>>>>>>        Integer iFile iField iFieldLen
33785>>>>>>>>>        UChar[] FieldArray
33786>>>>>>>>>        Integer iType
33786>>>>>>>>>        Boolean bNoPut
33786>>>>>>>>>        
33786>>>>>>>>>        // if bSave, part of save which means only update if changed
33786>>>>>>>>>        // if not bsave, part of find. You usually would not update this. You
33786>>>>>>>>>        // don't index on these types of fields
33786>>>>>>>>>        If ( (bSave and Update_Save_State(Self) and FieldChangedState(Self)) or ;            (not(bSave) and Update_Find_state(Self) ) ) Begin
33788>>>>>>>>>            // if save, we must respect DD_NoPut
33788>>>>>>>>>            If (bSave) Begin
33790>>>>>>>>>                // we are looking at the DD's field buffer itemoptions for, which
33790>>>>>>>>>                // should be set appropriately before a save. This setting has any
33790>>>>>>>>>                // changes made to support dd_commit
33790>>>>>>>>>                Get IsSaveNoPut to bNoPut
33791>>>>>>>>>                If bNoPut Begin
33793>>>>>>>>>                    Procedure_Return
33794>>>>>>>>>                End
33794>>>>>>>>>>
33794>>>>>>>>>            End
33794>>>>>>>>>>
33794>>>>>>>>>            Get pFieldArray to FieldArray
33795>>>>>>>>>            Get File_Number to iFile
33796>>>>>>>>>            Get Field_Number to iField
33797>>>>>>>>>            If iFile Begin
33799>>>>>>>>>                Set_Field_Value iFile iField to FieldArray // LENGTH iFieldLen
33802>>>>>>>>>            End
33802>>>>>>>>>>
33802>>>>>>>>>        End
33802>>>>>>>>>>
33802>>>>>>>>>    End_Procedure
33803>>>>>>>>>    
33803>>>>>>>>>    // Move from File buffer to local DD Buffer
33803>>>>>>>>>    // bCleared determines if this is a find or a clear.
33803>>>>>>>>>    // bClearFieldChange determines if we should clear the FieldChangedState.
33803>>>>>>>>>    Procedure FieldRefresh Boolean bCleared Boolean bClearFieldChange
33805>>>>>>>>>        Integer iFile iField
33805>>>>>>>>>        Integer bOk
33805>>>>>>>>>        UChar[] FieldArray
33806>>>>>>>>>        If (FieldRefresh_state(Self)) Begin
33808>>>>>>>>>            //Get FieldPointer to pField
33808>>>>>>>>>            Get File_Number to iFile
33809>>>>>>>>>            Get Field_Number to iField
33810>>>>>>>>>            // move from file buffer to memory pointed to by pField
33810>>>>>>>>>            If (iFile) Begin
33812>>>>>>>>>                If not bCleared Begin
33814>>>>>>>>>                    Get_Field_Value iFile iField to FieldArray
33817>>>>>>>>>                End
33817>>>>>>>>>>
33817>>>>>>>>>                Set Field_UCValue to FieldArray
33818>>>>>>>>>            End
33818>>>>>>>>>>
33818>>>>>>>>>        End
33818>>>>>>>>>>
33818>>>>>>>>>        If bClearFieldChange Begin
33820>>>>>>>>>            Set FieldChangedstate to False
33821>>>>>>>>>        End
33821>>>>>>>>>>
33821>>>>>>>>>    End_Procedure
33822>>>>>>>>>    
33822>>>>>>>>>    Procedure Set Field_pEntry Integer iOpts Integer iLen Integer bShowErr Pointer pValue
33824>>>>>>>>>        Integer iFile iField iFldLen iMemLen
33824>>>>>>>>>        Integer bChanged
33824>>>>>>>>>        UChar[] FieldArray
33825>>>>>>>>>        
33825>>>>>>>>>        // currently we do nothing with bShowErr because we don't checkfor errors!
33825>>>>>>>>>        
33825>>>>>>>>>        // if No-enter or Displayonly, this shouldn't be changed. For now we will
33825>>>>>>>>>        // let NoPut through, since a user might need it for finding.
33825>>>>>>>>>        If (iOpts iand DD_NOENTER) ;            Procedure_Return
33828>>>>>>>>>        
33828>>>>>>>>>        // maybe in the future
33828>>>>>>>>>        // Force a caplsock if required
33828>>>>>>>>>        //If (iOpts IAND DD_CAPSLOCK) Move (Uppercase(sValue)) to sValue
33828>>>>>>>>>        
33828>>>>>>>>>        Get File_Number  to iFile
33829>>>>>>>>>        Get Field_Number to iField
33830>>>>>>>>>        If (iFile) Begin
33832>>>>>>>>>            Get Is_pValueChanged iLen pValue to bChanged
33833>>>>>>>>>            If ( bChanged or (iOpts iand DD_FORCEPUT) ) Begin
33835>>>>>>>>>                Set Field_pValue iLen to pValue
33836>>>>>>>>>            End
33836>>>>>>>>>>
33836>>>>>>>>>            
33836>>>>>>>>>            
33836>>>>>>>>>            // Set changed state if changed and it is not No_put. This
33836>>>>>>>>>            // is an improvement on DEOs which would set changed-state for
33836>>>>>>>>>            // a no-put. This way, finds use the changed value but saves will
33836>>>>>>>>>            // not trigger a phony data loss
33836>>>>>>>>>            //If ( bChanged ) ;
33836>>>>>>>>>            If ( bChanged and not(iOpts iand DD_NOPUT) ) ;                Set FieldChangedState to True
33839>>>>>>>>>            
33839>>>>>>>>>            // The following is really highly unlikely!!!
33839>>>>>>>>>            // perform autofinds if needed. Note that required checking will occur as
33839>>>>>>>>>            // part of validation.
33839>>>>>>>>>            // We will only autofind if the field value is changed. This is consistent with
33839>>>>>>>>>            // DEOs which do not autofind on unchanged values. This provides optimizations
33839>>>>>>>>>            // when a parent record is already loaded.
33839>>>>>>>>>            If (bChanged or FieldChangedState(Self)) Begin
33841>>>>>>>>>                If (iOpts iand DD_AUTOFIND) ;                    Delegate Send File_Field_AutoFind iFile iField EQ
33845>>>>>>>>>                Else If (iOpts iand DD_AUTOFIND_GE) ;                    Delegate Send File_Field_AutoFind iFile iField GE
33850>>>>>>>>>            End
33850>>>>>>>>>>
33850>>>>>>>>>        End
33850>>>>>>>>>>
33850>>>>>>>>>        
33850>>>>>>>>>    End_Procedure
33851>>>>>>>>>    
33851>>>>>>>>>    // convert pointer to UChar[]
33851>>>>>>>>>    Function PointerToUCharArray Pointer pValue Integer iLen Returns UChar[]
33853>>>>>>>>>        UChar[] FieldArray
33854>>>>>>>>>        Boolean bOk
33854>>>>>>>>>        Move (ResizeArray(FieldArray,iLen)) to FieldArray
33855>>>>>>>>>        Move (MemCopy(AddressOf(FieldArray),pValue,iLen)) to bOK
33856>>>>>>>>>        Function_Return FieldArray
33857>>>>>>>>>    End_Function
33858>>>>>>>>>    
33858>>>>>>>>>    // Raw update of pValue
33858>>>>>>>>>    Procedure Set Field_UCValue UChar[] FieldArray
33860>>>>>>>>>        Set pFieldArray to FieldArray
33861>>>>>>>>>        Send DestroyLegacyFieldHeap
33862>>>>>>>>>    End_Procedure
33863>>>>>>>>>    
33863>>>>>>>>>    // Raw update of pValue
33863>>>>>>>>>    Procedure Set Field_pValue Integer iLen Pointer pValue
33865>>>>>>>>>        UChar[] FieldArray
33866>>>>>>>>>        Get PointerToUCharArray pValue iLen to FieldArray
33867>>>>>>>>>        Set Field_UCValue to FieldArray
33868>>>>>>>>>    End_Procedure
33869>>>>>>>>>    
33869>>>>>>>>>    Function Is_pValueChanged Integer iLen Pointer pValue Returns Boolean
33871>>>>>>>>>        Boolean bChanged
33871>>>>>>>>>        UChar[] FieldArray
33872>>>>>>>>>        Integer iFldLen
33872>>>>>>>>>        Get pFieldArray to FieldArray
33873>>>>>>>>>        Move (SizeOfArray(FieldArray)) to iFldLen
33874>>>>>>>>>        If (iLen <> SizeOfArray(FieldArray)) Begin
33876>>>>>>>>>            Move True to bChanged
33877>>>>>>>>>        End
33877>>>>>>>>>>
33877>>>>>>>>>        Else If (iLen) Begin // check for empty pointer
33880>>>>>>>>>            Move (MemCompare(AddressOf(FieldArray),pValue,iLen)) to bChanged
33881>>>>>>>>>        End
33881>>>>>>>>>>
33881>>>>>>>>>        Function_Return bChanged
33882>>>>>>>>>    End_Function
33883>>>>>>>>>    
33883>>>>>>>>>    // returns data as UChar array - best way to access the data
33883>>>>>>>>>    Function FieldArray Returns UChar[]
33885>>>>>>>>>        UChar[] FieldArray
33886>>>>>>>>>        Get pFieldArray to FieldArray
33887>>>>>>>>>        Function_Return FieldArray
33888>>>>>>>>>    End_Function
33889>>>>>>>>>    
33889>>>>>>>>>    // legacy method. Hopefully this is never called.
33889>>>>>>>>>    Function FieldPointer Returns Pointer
33891>>>>>>>>>        Pointer pValue pOldValue
33891>>>>>>>>>        Integer iLen
33891>>>>>>>>>        UChar[] FieldArray
33892>>>>>>>>>        Boolean bOk
33892>>>>>>>>>        Get pFieldArray to FieldArray
33893>>>>>>>>>        Move (SizeOfArray(FieldArray)) to iLen
33894>>>>>>>>>        Move (Alloc(iLen)) to pValue
33895>>>>>>>>>        Move (MemCopy(pValue,AddressOf(FieldArray),iLen)) to bOk
33896>>>>>>>>>        Send DestroyLegacyFieldHeap
33897>>>>>>>>>        Set pLegacyFieldPointer to pValue
33898>>>>>>>>>        Function_Return pValue
33899>>>>>>>>>    End_Function
33900>>>>>>>>>    
33900>>>>>>>>>    Procedure DestroyLegacyFieldHeap
33902>>>>>>>>>        Integer bOK
33902>>>>>>>>>        Pointer pField
33902>>>>>>>>>        Get pLegacyFieldPointer to pField
33903>>>>>>>>>        If (pField ) Begin
33905>>>>>>>>>            Move (Free(pField)) to bOk
33906>>>>>>>>>            Set pLegacyFieldPointer to 0
33907>>>>>>>>>        End
33907>>>>>>>>>>
33907>>>>>>>>>    End_Procedure
33908>>>>>>>>>    
33908>>>>>>>>>    // augment to release heap allocation
33908>>>>>>>>>    Procedure Destroy_Object
33910>>>>>>>>>        Send DestroyLegacyFieldHeap
33911>>>>>>>>>        Forward Send Destroy_object
33913>>>>>>>>>    End_Procedure
33914>>>>>>>>>    
33914>>>>>>>>>End_Class
33915>>>>>>>>>
33915>>>>>>>>>// This contains all extended field objects.
33915>>>>>>>>>// The array contains a list of all objects where item=field#
33915>>>>>>>>>// and item+1=field object.
33915>>>>>>>>>//
33915>>>>>>>>>// Interface is:
33915>>>>>>>>>//     Get Field_object iField to hFldObj
33915>>>>>>>>>//     Send DefineFieldObject iField
33915>>>>>>>>>//     Send ExtendedFieldsUpdate bSave
33915>>>>>>>>>//     Send ExtendedFieldsRefresh bCleared
33915>>>>>>>>>//
33915>>>>>>>>>Class FieldObjects is an Array
33916>>>>>>>>>    
33916>>>>>>>>>    // return object Id for iField. 0 if none.
33916>>>>>>>>>    Function Field_Object Integer iField Returns Integer
33918>>>>>>>>>        Integer iItm iCnt
33918>>>>>>>>>        Get Item_Count to iCnt
33919>>>>>>>>>        Move 0 to iItm
33920>>>>>>>>>        While iItm lt iCnt
33924>>>>>>>>>            If (Value(Self,iItm)=iField) ;                Function_Return (Value(Self,iItm+1))
33927>>>>>>>>>            Increment iItm
33928>>>>>>>>>            Increment iItm
33929>>>>>>>>>        Loop
33930>>>>>>>>>>
33930>>>>>>>>>        Function_Return 0
33931>>>>>>>>>    End_Function
33932>>>>>>>>>    
33932>>>>>>>>>    // define an extended object for field
33932>>>>>>>>>    Procedure DefineFieldObject Integer iField
33934>>>>>>>>>        Integer hFld
33934>>>>>>>>>        Integer iCnt  iFile
33934>>>>>>>>>        Boolean bInUse
33934>>>>>>>>>        Boolean bHasRecord
33934>>>>>>>>>        Delegate Get Main_File to iFile
33936>>>>>>>>>        Get Field_Object iField to hFld // this shouldn't exist yet
33937>>>>>>>>>        If not hFld Begin
33939>>>>>>>>>            Get Create U_FieldObject to hFld
33940>>>>>>>>>            Send DefineField to hFld iFile iField
33941>>>>>>>>>            Get Item_Count to iCnt          // add to array
33942>>>>>>>>>            Set Value  iCnt to iField   // Pos   = field#
33943>>>>>>>>>            Set Value  (iCnt+1) to hFld // Pos+1 = field object
33944>>>>>>>>>            Delegate Get In_Use_State to bInUse
33946>>>>>>>>>            If bInUse Begin
33948>>>>>>>>>                Delegate Send Refind_Records
33950>>>>>>>>>                Delegate Get HasRecord to bHasRecord
33952>>>>>>>>>                // updating the newly created field with the file buffer contents we don't
33952>>>>>>>>>                // want to change the field's changed state, which might have been set already.
33952>>>>>>>>>                Send FieldRefresh of hFld (not(bHasRecord)) False
33953>>>>>>>>>            End
33953>>>>>>>>>>
33953>>>>>>>>>        End
33953>>>>>>>>>>
33953>>>>>>>>>    End_Procedure
33954>>>>>>>>>    
33954>>>>>>>>>    // update all extended fields. Field buffer <-- DD buffer
33954>>>>>>>>>    Procedure ExtendedFieldsUpdate Integer bSave
33956>>>>>>>>>        Integer iItm iCnt
33956>>>>>>>>>        Get Item_Count to iCnt
33957>>>>>>>>>        Move 0 to iItm
33958>>>>>>>>>        While iItm lt iCnt
33962>>>>>>>>>            Increment iItm
33963>>>>>>>>>            Send FieldUpdate to (Value(Self,iItm)) bSave
33964>>>>>>>>>            Increment iItm
33965>>>>>>>>>        Loop
33966>>>>>>>>>>
33966>>>>>>>>>    End_Procedure
33967>>>>>>>>>    
33967>>>>>>>>>    // refresh all extended fields. Field buffer --> DD buffer
33967>>>>>>>>>    Procedure ExtendedFieldsRefresh Boolean bCleared
33969>>>>>>>>>        Integer iItm iCnt
33969>>>>>>>>>        Get Item_Count to iCnt
33970>>>>>>>>>        Move 0 to iItm
33971>>>>>>>>>        While iItm lt iCnt
33975>>>>>>>>>            Increment iItm
33976>>>>>>>>>            Send FieldRefresh to (Value(Self,iItm)) bCleared True
33977>>>>>>>>>            Increment iItm
33978>>>>>>>>>        Loop
33979>>>>>>>>>>
33979>>>>>>>>>    End_Procedure
33980>>>>>>>>>    
33980>>>>>>>>>    //
33980>>>>>>>>>    // these are sent from the child field object. We need to direct them
33980>>>>>>>>>    // to the DDO (the parent).
33980>>>>>>>>>    Procedure Set Field_Changed_State Integer iField Integer bState
33982>>>>>>>>>        Delegate Set Field_Changed_state iField to bState
33984>>>>>>>>>    End_Procedure
33985>>>>>>>>>    
33985>>>>>>>>>    Function Field_Changed_State Integer iField Returns Integer
33987>>>>>>>>>        Integer bState
33987>>>>>>>>>        Delegate Get Field_Changed_state iField to bState
33989>>>>>>>>>        Function_Return bState
33990>>>>>>>>>    End_Function
33991>>>>>>>>>    
33991>>>>>>>>>    Procedure File_Field_AutoFind Integer iFile Integer iField Integer iMode
33993>>>>>>>>>        Delegate Send File_field_AutoFind iFile iField iMode
33995>>>>>>>>>    End_Procedure
33996>>>>>>>>>    
33996>>>>>>>>>    Function FieldSaveNoPut Integer iField Returns Boolean
33998>>>>>>>>>        Boolean bIsCommited bNoPut
33998>>>>>>>>>        Delegate Get IsCommitted to bIsCommited
34000>>>>>>>>>        // we don't know if this is foreign or not (DDOs never do by themselves). We
34000>>>>>>>>>        // will test for regular. This should never be an issue as the DEO itself
34000>>>>>>>>>        // will be DisplayOnly as needed (we don't have indexed NoEnter=T/Noput=F issues)
34000>>>>>>>>>        Delegate Get FieldNoPut iField bIsCommited False to bNoPut
34002>>>>>>>>>        Function_Return bNoPut
34003>>>>>>>>>    End_Function
34004>>>>>>>>>    
34004>>>>>>>>>    Procedure Destroy_Object
34006>>>>>>>>>        Delegate Set Field_Objects to 0
34008>>>>>>>>>        Forward Send Destroy_object
34010>>>>>>>>>    End_Procedure
34011>>>>>>>>>    
34011>>>>>>>>>    
34011>>>>>>>>>End_Class
34012>>>>>>>// for text and binary. Must support Address Type
34012>>>>>>>
34012>>>>>>>
34012>>>>>>>// we need these from CLI.pkg for DAW drivers. These values must match what is defined
34012>>>>>>>// in cli.pkg
34012>>>>>>>Define DF_FILE_SQL_FILTER for 611
34012>>>>>>>Define DF_FILE_SQL_FILTER_ACTIVE for 624
34012>>>>>>>Define DF_FILE_SQL_FILTER_EQ for 636
34012>>>>>>>// same a CLI.pkg DF_FILE_TABLE_NAME but with a different name
34012>>>>>>>// used to avoid naming conflict. Must match cli.pkg df_file_table_name
34012>>>>>>>Define DF_FILE_SQL_TABLE_NAME for 609
34012>>>>>>>
34012>>>>>>>Define DF_FIELD_SQL_COLUMN_NAME         for 723
34012>>>>>>>
34012>>>>>>>Define DF_DATABASE_IDENTIFIER_QUOTE     for 1085
34012>>>>>>>Define DF_FILE_DATABASE_ID              for 622
34012>>>>>>>
34012>>>>>>>// Class helper for SQL/driver assistance.
34012>>>>>>>// This can only be used within a DataDictionary Class as it expects that
34012>>>>>>>// certain properties can be Get and Set via delegation.
34012>>>>>>>Class cDAWSQLDriverHelper is a cObject
34013>>>>>>>    
34013>>>>>>>    Function DriverIndex String sDriver Returns Integer
34015>>>>>>>        String  sCurrentDriver
34015>>>>>>>        Integer iNumberOfDrivers iDriver iCount
34015>>>>>>>        Move 0 to iDriver
34016>>>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
34019>>>>>>>        For iCount from 1 to iNumberOfDrivers
34025>>>>>>>>
34025>>>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
34028>>>>>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriver) ) Begin
34030>>>>>>>                Function_Return iCount
34031>>>>>>>            End
34031>>>>>>>>
34031>>>>>>>        Loop
34032>>>>>>>>
34032>>>>>>>        Function_Return 0
34033>>>>>>>    End_Function
34034>>>>>>>    
34034>>>>>>>    
34034>>>>>>>    // returns true if this table supports SQL filter interface
34034>>>>>>>    Function SupportsSQLFilters Returns Boolean
34036>>>>>>>        String sDriver
34036>>>>>>>        Integer iFile iDriver iConformance
34036>>>>>>>        Delegate Get Main_File to iFile
34038>>>>>>>        Get_Attribute DF_FILE_DRIVER of iFile to sDriver
34041>>>>>>>        Get DriverIndex sDriver to iDriver
34042>>>>>>>        If (iDriver) Begin
34044>>>>>>>            Get_Attribute DF_DRIVER_CONFORMANCE of iDriver to iConformance
34047>>>>>>>        End
34047>>>>>>>>
34047>>>>>>>        Function_Return (iConformance iand 4)
34048>>>>>>>    End_Function
34049>>>>>>>    
34049>>>>>>>    // SQL Helper functions that return SQL Filters strings that can be used in a where clause
34049>>>>>>>    
34049>>>>>>>    // Escape character to escape LIKE wildcards
34049>>>>>>>    
34049>>>>>>>    
34049>>>>>>>    Function SQLEscapedStr String sSQL Returns String
34051>>>>>>>        String sEscapedSQL
34051>>>>>>>        // Replace one single quote by 2 single quotes
34051>>>>>>>        Move (Replaces("'",sSQL,"''")) to sEscapedSQL
34052>>>>>>>        Function_Return sEscapedSQL
34053>>>>>>>    End_Function
34054>>>>>>>    
34054>>>>>>>    
34054>>>>>>>    Function SQLEscapeLikeWildcards String sSQL Returns String
34056>>>>>>>        
34056>>>>>>>        // Escape the wildcard characters than can be used in a LIKE
34056>>>>>>>        If (Pos("%",sSQL)) ;            Move (Replaces("%",sSQL,(SQL_LIKE_ESC + "%"))) to sSQL
34059>>>>>>>        If (Pos("_",sSQL)) ;            Move (Replaces("_",sSQL,(SQL_LIKE_ESC + "_"))) to sSQL
34062>>>>>>>        
34062>>>>>>>        Function_Return sSQL
34063>>>>>>>    End_Function
34064>>>>>>>    
34064>>>>>>>    
34064>>>>>>>    
34064>>>>>>>    // Creates an SQL Like Filter for this field and search target
34064>>>>>>>    Function SQLStrLike Integer iField String sSearch Returns String
34066>>>>>>>        String sFilter sOrigFilter sField
34066>>>>>>>        Integer iFile
34066>>>>>>>        Integer iHasLikeEscape
34066>>>>>>>        String  sPrefix
34066>>>>>>>        
34066>>>>>>>        Delegate Get Main_File to iFile
34068>>>>>>>        Delegate Get psSQLFilter to sOrigFilter
34070>>>>>>>        Get SQLStrFieldName iField to sField
34071>>>>>>>        Get SQLEscapedStr sSearch to sSearch
34072>>>>>>>        
34072>>>>>>>        Move (Pos(SQL_LIKE_ESC,sSearch)) to iHasLikeEscape
34073>>>>>>>        If (not(iHasLikeEscape)) Begin
34075>>>>>>>            Get SQLEscapeLikeWildcards sSearch to sSearch
34076>>>>>>>        End
34076>>>>>>>>
34076>>>>>>>        
34076>>>>>>>        // Add the N prefix to properly handle Unicode data
34076>>>>>>>        Move 'N' to sPrefix
34077>>>>>>>        Move (sField + " LIKE " + sPrefix + "'%" + sSearch + "%'") to sFilter
34078>>>>>>>        
34078>>>>>>>        If (not(iHasLikeEscape)) Begin
34080>>>>>>>            If (Pos(SQL_LIKE_ESC,sFilter)) Begin
34082>>>>>>>                Move (sFilter + " ESCAPE '" + SQL_LIKE_ESC + "' "  ) to sFilter
34083>>>>>>>            End
34083>>>>>>>>
34083>>>>>>>        End
34083>>>>>>>>
34083>>>>>>>        
34083>>>>>>>        Function_Return sFilter
34084>>>>>>>    End_Function
34085>>>>>>>    
34085>>>>>>>    // Appends two Filters with an AND clause. Both or either can be empty
34085>>>>>>>    Function SQLStrAppend String sOrigFilter String sFilter Returns String
34087>>>>>>>        If (sOrigFilter<>"" and sFilter<>"") Begin
34089>>>>>>>            Move ( "(" + sOrigFilter + ") AND " + sFilter) to sFilter
34090>>>>>>>        End
34090>>>>>>>>
34090>>>>>>>        Else If (sFilter="") Begin
34093>>>>>>>            Move sOrigFilter to sFilter
34094>>>>>>>        End
34094>>>>>>>>
34094>>>>>>>        Function_Return sFilter
34095>>>>>>>    End_Function
34096>>>>>>>    
34096>>>>>>>    // Appends two filters with an or clause. Both or either can be empty.
34096>>>>>>>    // This may be used in OnConstrain methods when building SQL WHERE clauses in string values.
34096>>>>>>>    Function SQLStrAppendOr String sOrigFilter String sFilter Returns String
34098>>>>>>>        If (sOrigFilter<>"" and sFilter<>"") Begin
34100>>>>>>>            Move ("(" + sOrigFilter + ") OR (" + sFilter + ")") to sFilter
34101>>>>>>>        End
34101>>>>>>>>
34101>>>>>>>        Else If (sFilter="") Begin
34104>>>>>>>            Move sOrigFilter to sFilter
34105>>>>>>>        End
34105>>>>>>>>
34105>>>>>>>          Function_Return sFilter 
34106>>>>>>>    End_Function
34107>>>>>>>
34107>>>>>>>
34107>>>>>>>    Function SQLIdentifierQuote Handle hTable Returns String
34109>>>>>>>
34109>>>>>>>        String  sDriver        
34109>>>>>>>        Integer iDriverIndex
34109>>>>>>>        Handle  hDatabase
34109>>>>>>>        String  sIdentifierQuote
34109>>>>>>>        
34109>>>>>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriver
34112>>>>>>>        
34112>>>>>>>        Get DriverIndex sDriver to iDriverIndex        
34113>>>>>>>        If (iDriverIndex) Begin
34115>>>>>>>            Get_Attribute DF_FILE_DATABASE_ID of hTable to hDatabase            
34118>>>>>>>            If (hDatabase) Begin
34120>>>>>>>                Get_Attribute DF_DATABASE_IDENTIFIER_QUOTE of iDriverIndex hDatabase to sIdentifierQuote
34123>>>>>>>            End
34123>>>>>>>>
34123>>>>>>>        End
34123>>>>>>>>
34123>>>>>>>        
34123>>>>>>>        Function_Return sIdentifierQuote
34124>>>>>>>        
34124>>>>>>>    End_Function
34125>>>>>>>
34125>>>>>>>
34125>>>>>>>
34125>>>>>>>    // returns the name of the File and Field suitable for an SQL where statement ("Table"."Column")
34125>>>>>>>    Function SQLStrFileFieldName Integer iField Returns String
34127>>>>>>>        String sFile sField
34127>>>>>>>        Integer iFile
34127>>>>>>>        String  sIdentifierQuote
34127>>>>>>>        
34127>>>>>>>        Get Main_File to iFile
34128>>>>>>>        Get_Attribute DF_FILE_SQL_TABLE_NAME of iFile to sFile
34131>>>>>>>        Get_Attribute DF_FIELD_SQL_COLUMN_NAME of iFile iField to sField
34134>>>>>>>        Get SQLIdentifierQuote iFile to sIdentifierQuote
34135>>>>>>>        
34135>>>>>>>        Function_Return (sIdentifierQuote + sFile + sIdentifierQuote + '.' + sIdentifierQuote + sField + sIdentifierQuote ) 
34136>>>>>>>    End_Function
34137>>>>>>>
34137>>>>>>>    // returns the name of the Field suitable for an SQL where statement ("Column")
34137>>>>>>>    Function SQLStrFieldName Integer iField Returns String
34139>>>>>>>        String sField 
34139>>>>>>>        Integer iFile
34139>>>>>>>        String sIdentifierQuote
34139>>>>>>>        Get Main_File to iFile
34140>>>>>>>        Get_Attribute DF_FIELD_SQL_COLUMN_NAME of iFile iField to sField
34143>>>>>>>        
34143>>>>>>>        Get SQLIdentifierQuote iFile to sIdentifierQuote
34144>>>>>>>        
34144>>>>>>>        Function_Return (sIdentifierQuote + sField + sIdentifierQuote ) 
34145>>>>>>>
34145>>>>>>>    End_Function
34146>>>>>>>
34146>>>>>>>    // returns the name of the Schema and File and Field suitable for an SQL where statement ("Schema"."Table"."Column")
34146>>>>>>>    Function SQLStrSchemaFileFieldName Integer iField Returns String
34148>>>>>>>        String sFile sField sSchema
34148>>>>>>>        Integer iFile
34148>>>>>>>        String sIdentifierQuote
34148>>>>>>>        
34148>>>>>>>        Get Main_File to iFile
34149>>>>>>>        Get_Attribute DF_FILE_SQL_TABLE_NAME of iFile to sFile
34152>>>>>>>        Get_Attribute DF_FIELD_SQL_COLUMN_NAME of iFile iField to sField
34155>>>>>>>        Get_Attribute DF_FILE_OWNER of iFile to sSchema
34158>>>>>>>
34158>>>>>>>        Get SQLIdentifierQuote iFile to sIdentifierQuote
34159>>>>>>>            
34159>>>>>>>        If (Trim(sSchema) <> "") ;            Function_Return (sIdentifierQuote + sSchema + sIdentifierQuote + '.' + sIdentifierQuote + sFile + sIdentifierQuote + '.' + sIdentifierQuote + sField + sIdentifierQuote ) 
34162>>>>>>>        Else ;            Function_Return (sIdentifierQuote + sFile + sIdentifierQuote + '.' + sIdentifierQuote + sField + sIdentifierQuote ) 
34164>>>>>>>            
34164>>>>>>>            
34164>>>>>>>            
34164>>>>>>>    End_Function
34165>>>>>>>    
34165>>>>>>>    //  returns the name of a file suitable for a SQL statement
34165>>>>>>>    Function SQLStrFileName Integer iField Returns String
34167>>>>>>>        String sFile
34167>>>>>>>        Integer iFile
34167>>>>>>>        String sIdentifierQuote
34167>>>>>>>        
34167>>>>>>>        Get Main_File to iFile
34168>>>>>>>        Get_Attribute DF_FILE_SQL_TABLE_NAME of iFile to sFile
34171>>>>>>>        
34171>>>>>>>        Get SQLIdentifierQuote iFile to sIdentifierQuote
34172>>>>>>>        
34172>>>>>>>        Function_Return (sIdentifierQuote + sFile + sIdentifierQuote)
34173>>>>>>>    End_Function
34174>>>>>>>    
34174>>>>>>>    // called before an SQL Filter find. Make sure that any global and table attributes are
34174>>>>>>>    // stored.
34174>>>>>>>    Procedure StoreDefaultSQLFilters
34176>>>>>>>        String sOldFilter
34176>>>>>>>        Boolean bOldFilterActive bOldFilterEQ
34176>>>>>>>        Integer iMain
34176>>>>>>>        Get Main_File to iMain
34177>>>>>>>        Get_Attribute DF_FILE_SQL_FILTER of iMain to sOldFilter
34180>>>>>>>        Get_Attribute DF_FILE_SQL_FILTER_ACTIVE of iMain to bOldFilterActive
34183>>>>>>>        Get_Attribute DF_FILE_SQL_FILTER_EQ of iMain to bOldFilterEQ
34186>>>>>>>        Delegate Set psOldFilter to sOldFilter
34188>>>>>>>        Delegate Set pbOldFilterActive to bOldFilterActive
34190>>>>>>>        Delegate Set pbOldFilterEq to bOldFilterEQ
34192>>>>>>>    End_Procedure
34193>>>>>>>    
34193>>>>>>>    // called after an SQL find. Must restore the global and table SQL filter attributes
34193>>>>>>>    Procedure RestoreDefaultSQLFilters
34195>>>>>>>        String sOldFilter
34195>>>>>>>        Boolean bOldFilterActive bOldFilterEQ
34195>>>>>>>        Integer iMain
34195>>>>>>>        Delegate Get Main_File to iMain
34197>>>>>>>        Delegate Get psOldFilter to sOldFilter
34199>>>>>>>        Delegate Get pbOldFilterActive to bOldFilterActive
34201>>>>>>>        Delegate Get pbOldFilterEq to bOldFilterEQ
34203>>>>>>>        Set_Attribute DF_FILE_SQL_FILTER of iMain to sOldFilter
34206>>>>>>>        Set_Attribute DF_FILE_SQL_FILTER_ACTIVE of iMain to bOldFilterActive
34209>>>>>>>        Set_Attribute DF_FILE_SQL_FILTER_EQ of iMain to bOldFilterEQ
34212>>>>>>>    End_Procedure
34213>>>>>>>    
34213>>>>>>>    // applies the passed SQL filter. If empty, it should make sure that no filter
34213>>>>>>>    // is applied. If non-empty it should set the filter active, set the filter string
34213>>>>>>>    // and make sure this is applied to all finds (including find EQ)
34213>>>>>>>    Procedure ApplySQLFilterStr String sFilter
34215>>>>>>>        Integer iMain
34215>>>>>>>        Delegate Get Main_File to iMain
34217>>>>>>>        If (sFilter<>"") Begin
34219>>>>>>>            Set_Attribute DF_FILE_SQL_FILTER_ACTIVE of iMain to True
34222>>>>>>>            Set_Attribute DF_FILE_SQL_FILTER of iMain to sFilter
34225>>>>>>>            Set_Attribute DF_FILE_SQL_FILTER_EQ of iMain to True
34228>>>>>>>        End
34228>>>>>>>>
34228>>>>>>>        Else Begin
34229>>>>>>>            Set_Attribute DF_FILE_SQL_FILTER_ACTIVE of iMain to False
34232>>>>>>>        End
34232>>>>>>>>
34232>>>>>>>    End_Procedure
34233>>>>>>>    
34233>>>>>>>End_Class
34234>>>>>>>
34234>>>>>>>// Every data_set will have a object based on this class. It will hold
34234>>>>>>>// the values for the fields, the entry_options and the messages IDs of the
34234>>>>>>>// iEntry, iExit and iValidate messages for each field.
34234>>>>>>>// It is assumed that an object of this class will always be used as a
34234>>>>>>>// child object of a Data_Set object.
34234>>>>>>>//
34234>>>>>>>// Currently the fieldtypes Overlap, Text and Binary are *not* supported.
34234>>>>>>>//
34234>>>>>>>// ITEM-PROPERTY   ASSIGNED-FUNCTION
34234>>>>>>>//
34234>>>>>>>// Value           The value of the field. Will be updated whenever the
34234>>>>>>>//                 value of a field changes due to data-entry or a found
34234>>>>>>>//                 record.
34234>>>>>>>// Data_File       Contains the filenumber. Is the same for every item.
34234>>>>>>>// Data_Field      Contains the fieldnumber for the item. Is equal to the
34234>>>>>>>//                 items' itemnumber.
34234>>>>>>>// Item_Options    Used to store the standard item-options of a field.
34234>>>>>>>// Aux_Value       Used to store the foreign-item-options of a field.
34234>>>>>>>Class cRecordBuffer is an cDDBuffer
34235>>>>>>>    
34235>>>>>>>    // This procedure will be called from the Data_Set when the Main_File is
34235>>>>>>>    // being set. It will create an item for each field of the file in this
34235>>>>>>>    // object. Fields of the types DF_OVERLAP, DF_TEXT and DF_BINARY are
34235>>>>>>>    // currently not added.
34235>>>>>>>    Procedure Create_Items Integer iFile
34237>>>>>>>        Integer iField_Count iField
34237>>>>>>>        
34237>>>>>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iFile to iField_Count
34240>>>>>>>        Set Main_File to iFile
34241>>>>>>>        Send Delete_Data
34242>>>>>>>        Set Item_Count to (iField_Count+1)
34243>>>>>>>        For iField from 0 to iField_Count
34249>>>>>>>>
34249>>>>>>>            // will skip recnum (field 0) if non-recnum table
34249>>>>>>>            // will set to skip if binary, text or overlap
34249>>>>>>>            Set Data_Field iField to iField
34250>>>>>>>        Loop
34251>>>>>>>>
34251>>>>>>>    End_Procedure
34252>>>>>>>    
34252>>>>>>>    // when an alias is created, we want to clear any values that will not be applied to
34252>>>>>>>    // this alias DD such as prompt and zoom objects (which would point to the superclass master)
34252>>>>>>>    Procedure ReDefineAliasItems Integer iFile
34254>>>>>>>        Integer i iItems
34254>>>>>>>        
34254>>>>>>>        Set Main_File to iFile
34255>>>>>>>        Get item_count to iItems
34256>>>>>>>        For i from 0 to (iItems-1)
34262>>>>>>>>
34262>>>>>>>            Set Prompt_Object i to 0
34263>>>>>>>            Set Zoom_Object i to 0
34264>>>>>>>        Loop
34265>>>>>>>>
34265>>>>>>>    End_Procedure
34266>>>>>>>    
34266>>>>>>>    
34266>>>>>>>    // This procedure will be called from the parent Data_Set whenever the
34266>>>>>>>    // Data_Set changes its Current_Record property, or after a Save, Delete or Clear operation.
34266>>>>>>>    // We use this event to store the values of the fields in our local record buffer.
34266>>>>>>>    Procedure OnNewCurrentRecord RowID riOld RowID riNew
34268>>>>>>>        Integer iMain_File
34268>>>>>>>        Integer iOldState
34268>>>>>>>        tDDRemembered[] DefaultValues
34268>>>>>>>        tDDRemembered[] DefaultValues
34269>>>>>>>        Boolean bRetain bInReSync
34269>>>>>>>        Integer iFld iFlds iIndex
34269>>>>>>>        Handle hoDD
34269>>>>>>>        
34269>>>>>>>        Get Parent to hoDD
34270>>>>>>>        Delegate Get Main_File to iMain_File
34272>>>>>>>        
34272>>>>>>>        If not (IsNullRowId(riNew)) ;            Send Entry_Display
34275>>>>>>>        Else Begin            
34276>>>>>>>            If (OPERATION_ORIGIN) Begin
34278>>>>>>>                // This gets set by webapp during a resync. During resyncs, you don't want to rely
34278>>>>>>>                // on the values in the buffers (as they may not be yours), so you cannot do retain of rememberlast.
34278>>>>>>>                // Fortunately, you don't need to, as this information is not needed during a resync.
34278>>>>>>>                Get pbInResync of operation_origin to bInResync
34279>>>>>>>            End
34279>>>>>>>>
34279>>>>>>>            
34279>>>>>>>            // If we have any 17.0 Remember last value items, we must add those items to our array.
34279>>>>>>>            // Only do this if this is the operation origin or a parent (i.e., skip if a child DDO).
34279>>>>>>>            // Also skip if a resync. See above
34279>>>>>>>            If ( not(bInReSync) and ;                ( (Operation_Origin=hoDD) or ;                ( OPERATION_ORIGIN and (Which_data_set(Operation_Origin,iMain_File)<>0) ) ) ) Begin
34281>>>>>>>                Delegate Get pDDDefaults to DefaultValues
34283>>>>>>>                Move (SizeOfArray(DefaultValues)) to iFlds
34284>>>>>>>                For iFld from 0 to (iFlds-1)
34290>>>>>>>>
34290>>>>>>>                    Move (DefaultValues[iFld].sDefault=DD_RememberLast) to bRetain // if this is a dynamically assigned remember-last
34291>>>>>>>                    If bRetain Begin
34293>>>>>>>                        Get Value DefaultValues[iFld].iField to DefaultValues[iFld].sLastValue
34294>>>>>>>                    End
34294>>>>>>>>
34294>>>>>>>                    Else Begin
34295>>>>>>>                        Move '' to DefaultValues[iFld].sLastValue
34296>>>>>>>                    End
34296>>>>>>>>
34296>>>>>>>                Loop
34297>>>>>>>>
34297>>>>>>>                Delegate Set pDDDefaults to DefaultValues
34299>>>>>>>            End
34299>>>>>>>>
34299>>>>>>>            
34299>>>>>>>            // we must do this to make retains not set changed_state
34299>>>>>>>            Delegate Get Change_Disabled_State to iOldState
34301>>>>>>>            Delegate Set Change_Disabled_State to True
34303>>>>>>>            // If mode is anything other than clear, we do a clear all (clear keeps retains, clear all does not)
34303>>>>>>>            // Also do clear all if the DDO is foreign.
34303>>>>>>>            
34303>>>>>>>            // If bInReSync, we never use retains, as the buffer is not ours yet.
34303>>>>>>>            // The Entry_Clear, Entry_Clear_All parameter is bIgnoreRetains.
34303>>>>>>>            // When True, retain and retain_all states are ignored and cleared.
34303>>>>>>>            If (Operation_Mode=MODE_CLEARING and ;                ( (Operation_Origin=parent(Self)) or ;                (Which_data_set(Operation_Origin,iMain_File)<>0) ) ) Begin
34305>>>>>>>                    Send Entry_Clear bInReSync
34306>>>>>>>            End
34306>>>>>>>>
34306>>>>>>>            Else Begin
34307>>>>>>>                Send Entry_Clear_all bInResync
34308>>>>>>>            End
34308>>>>>>>>
34308>>>>>>>            Delegate Set Change_Disabled_State to iOldState
34310>>>>>>>            Set Changed_State to False
34311>>>>>>>        End
34311>>>>>>>>
34311>>>>>>>    End_Procedure
34312>>>>>>>    
34312>>>>>>>    // Make sure to set the Changed_State of the Data_Set to TRUE when a
34312>>>>>>>    // field value changes and it's not during the Setting of the Defaults.
34312>>>>>>>    Procedure Set Changed_State Integer iState
34314>>>>>>>        Integer iNoChange
34314>>>>>>>        // Server.pkg in dso already knows this property
34314>>>>>>>        Delegate Get Change_disabled_State to iNoChange
34316>>>>>>>        If not iNoChange Begin
34318>>>>>>>            Forward Set Changed_State to iState
34320>>>>>>>            Delegate Set Changed_State to iState
34322>>>>>>>        End
34322>>>>>>>>
34322>>>>>>>    End_Procedure
34323>>>>>>>    
34323>>>>>>>End_Class
34324>>>>>>>
34324>>>>>>>
34324>>>>>>>// Objects of this class will be used to store all kinds of attributes
34324>>>>>>>// which belong to a field.
34324>>>>>>>//
34324>>>>>>>// FA_MIN_VALUE
34324>>>>>>>// Used to store the mininum value of field.
34324>>>>>>>//
34324>>>>>>>// FA_MAX_VALUE
34324>>>>>>>// Used to store the maximum value of a field.
34324>>>>>>>//
34324>>>>>>>// FA_CHECK_VALUE
34324>>>>>>>// Used to store a string which contains all possible values of a field.
34324>>>>>>>//
34324>>>>>>>// FA_CHECKBOX_TRUE
34324>>>>>>>// Used to store the TRUE value for a checkbox field
34324>>>>>>>//
34324>>>>>>>// FA_CHECKBOX_FALSE
34324>>>>>>>// Used to store the FALSE value of a checkbox field
34324>>>>>>>//
34324>>>>>>>// FA_TABLE_OBJECT
34324>>>>>>>// Stores object Id of a validation table.
34324>>>>>>>//
34324>>>>>>>// FA_ERROR_MESSAGE
34324>>>>>>>// Used to store a error text which will be shown to a user when a fields
34324>>>>>>>// value violates one of the rules defined for it.
34324>>>>>>>// This field may contain the special strings @MIN, @MAX and @CHECK. When
34324>>>>>>>// these are used, these will be replaced by the actual value of MIN_VALUE,
34324>>>>>>>// MAX_VALUE or CHECK_VALUE.
34324>>>>>>>//
34324>>>>>>>
34324>>>>>>>
34324>>>>>>>// Validation Types
34324>>>>>>>Enumeration_List
34324>>>>>>>    Define FA_VALIDATION_TYPE_NONE
34324>>>>>>>    Define FA_VALIDATION_TYPE_RANGE
34324>>>>>>>    Define FA_VALIDATION_TYPE_CHECK
34324>>>>>>>    Define FA_VALIDATION_TYPE_CHECKBOX
34324>>>>>>>    Define FA_VALIDATION_TYPE_TABLE
34324>>>>>>>End_Enumeration_List
34324>>>>>>>
34324>>>>>>>
34324>>>>>>>Class Field_Attributes is a Array
34325>>>>>>>    
34325>>>>>>>    Procedure Construct_Object
34327>>>>>>>        Forward Send Construct_Object
34329>>>>>>>        // Private: This replaces the use of arrays to get at this value. This
34329>>>>>>>        // allows us to find specific validation types (like checkboxes) more
34329>>>>>>>        // quickly than scanning an array
34329>>>>>>>        Property String Private.Validation_Types     ''
34330>>>>>>>    End_Procedure
34331>>>>>>>    
34331>>>>>>>    // Returns the extended validation type for the passed field.
34331>>>>>>>    Function Field_Validation_Type Integer iField Returns Integer
34333>>>>>>>        Integer iType
34333>>>>>>>        If iField ;            Move (mid(Private.Validation_Types(Self),1,iField)) to iType
34336>>>>>>>        Else ;            Move FA_VALIDATION_TYPE_NONE to iType
34338>>>>>>>        Function_Return iType
34339>>>>>>>    End_Function
34340>>>>>>>    
34340>>>>>>>    Procedure Set Field_Validation_Type Integer iField String sType
34342>>>>>>>        Integer iType
34342>>>>>>>        String sTypes
34342>>>>>>>        If iField Begin
34344>>>>>>>            Get Private.Validation_Types to sTypes
34345>>>>>>>            Set Private.Validation_Types to (Overstrike(sType, sTypes, iField))
34346>>>>>>>        End
34346>>>>>>>>
34346>>>>>>>    End_Procedure
34347>>>>>>>    
34347>>>>>>>    // Set any defaults required by this class when the main file is created.
34347>>>>>>>    // Create a string which contains all validation types. Set all to
34347>>>>>>>    // No extended validation type.
34347>>>>>>>    Procedure Create_Items
34349>>>>>>>        String  sType
34349>>>>>>>        Integer iCount
34349>>>>>>>        Delegate Get Field_Count to iCOunt
34351>>>>>>>        Move FA_VALIDATION_TYPE_NONE to sType
34352>>>>>>>        Set Private.Validation_Types to (Repeat(sType,iCount))
34353>>>>>>>    End_Procedure
34354>>>>>>>    
34354>>>>>>>    // Return field number of next field matching the passed validation type.
34354>>>>>>>    // Pass validation type and last position checked. Return 0 if no match
34354>>>>>>>    Function Next_Validation_Type String sType Integer iOffset Returns Integer
34356>>>>>>>        String sTypes
34356>>>>>>>        Integer iPos
34356>>>>>>>        Get Private.Validation_Types to sTypes
34357>>>>>>>        Move (Pos(sType, mid(sTypes,255,iOffset+1))) to iPos
34358>>>>>>>        If iPos ;            Add iOffset to iPos
34361>>>>>>>        Function_Return iPos
34362>>>>>>>    End_Function
34363>>>>>>>    
34363>>>>>>>    // This procedure will be called by the Extended_Data_Set to set the
34363>>>>>>>    // errornumber and message which will be triggered when it needs to.
34363>>>>>>>    Procedure Set Field_Error Integer iField Integer iErr String sMsg
34365>>>>>>>        Integer iBase
34365>>>>>>>        Move (iField * FA_COUNT) to iBase
34366>>>>>>>        Set Value (iBase + FA_ERROR_NUMBER) to iErr
34367>>>>>>>        Set Value (iBase + FA_ERROR_MESSAGE) to sMsg
34368>>>>>>>    End_Procedure
34369>>>>>>>    
34369>>>>>>>    // Used to retreive the error number and message for a particular field
34369>>>>>>>    Function Field_Error_Number Integer iField Returns Integer
34371>>>>>>>        Integer iErr
34371>>>>>>>        Get Value (iField*FA_COUNT + FA_ERROR_NUMBER)  to iErr
34372>>>>>>>        Function_Return iErr
34373>>>>>>>    End_Function
34374>>>>>>>    
34374>>>>>>>    Function Field_Error_Message Integer iField Returns String
34376>>>>>>>        String sValue
34376>>>>>>>        Get Value (iField*FA_COUNT + FA_ERROR_MESSAGE) to sValue
34377>>>>>>>        Function_Return sValue
34378>>>>>>>    End_Function
34379>>>>>>>    
34379>>>>>>>    
34379>>>>>>>    // This function manages the validation of a field against its extended
34379>>>>>>>    // validations.
34379>>>>>>>    Function Validate_Field Integer iField Returns Integer
34381>>>>>>>        Integer iType
34381>>>>>>>        Integer iResult
34381>>>>>>>        Get Field_Validation_Type iField to iType
34382>>>>>>>        If (iType = FA_VALIDATION_TYPE_RANGE) ;            Get Validate_Field_Range iField to iResult
34385>>>>>>>        Else If (iType = FA_VALIDATION_TYPE_CHECK) ;            Get Validate_Field_Check iField to iResult
34389>>>>>>>        Else If (iType = FA_VALIDATION_TYPE_CHECKBOX) ;            Get Validate_Field_Checkbox iField to iResult
34393>>>>>>>        Else If (iType = FA_VALIDATION_TYPE_TABLE) ;            Get Validate_Field_Table iField to iResult
34397>>>>>>>        Function_Return iResult
34398>>>>>>>    End_Function
34399>>>>>>>    
34399>>>>>>>    // All extended validations know how to send callback messages (iMsg) to
34399>>>>>>>    // the calling object (iObj). This allows external lists to get filled w/
34399>>>>>>>    // the contents of a range. Used by combo boxes, spinners, etc.
34399>>>>>>>    Procedure Field_Fill_List Integer iField Integer iObj Integer iMsg
34401>>>>>>>        Integer iType
34401>>>>>>>        Integer iResult
34401>>>>>>>        Get Field_Validation_Type iField to iType
34402>>>>>>>        If (iType = FA_VALIDATION_TYPE_RANGE) ;            Send Field_Fill_List_Field_Range iField iObj iMsg
34405>>>>>>>        Else If (iType = FA_VALIDATION_TYPE_CHECK) ;            Send Field_Fill_List_Field_Check iField iObj iMsg
34409>>>>>>>        Else If (iType = FA_VALIDATION_TYPE_CHECKBOX) ;            Send Field_Fill_List_Field_Checkbox iField iObj iMsg
34413>>>>>>>        Else If (iType = FA_VALIDATION_TYPE_TABLE) ;            Send Field_Fill_List_Field_Table iField iObj iMsg
34417>>>>>>>    End_Procedure
34418>>>>>>>    
34418>>>>>>>    // Return the id of the validation table if one exists. Otherwise return
34418>>>>>>>    // a zero.
34418>>>>>>>    Function Field_Table_Object Integer iField Returns Integer
34420>>>>>>>        Integer iType
34420>>>>>>>        Integer iObj
34420>>>>>>>        Integer iBase
34420>>>>>>>        Move (iField * FA_COUNT) to iBase
34421>>>>>>>        Get Field_Validation_Type iField to iType
34422>>>>>>>        If (iType = FA_VALIDATION_TYPE_TABLE) ;            Get Value (iBase + FA_TABLE_OBJECT) to iObj
34425>>>>>>>        Function_Return iObj
34426>>>>>>>    End_Function
34427>>>>>>>    
34427>>>>>>>    // Procedure to set the range for a field. It will automatically set the
34427>>>>>>>    // validation type of the field as well.
34427>>>>>>>    Procedure Set Field_Value_Range Integer iField String sMin String sMax
34429>>>>>>>        Integer iBase
34429>>>>>>>        Move (iField * FA_COUNT) to iBase
34430>>>>>>>        Set Value (iBase + FA_MIN_VALUE) to sMin
34431>>>>>>>        Set Value (iBase + FA_MAX_VALUE) to sMax
34432>>>>>>>        Set Field_Validation_Type iField to FA_VALIDATION_TYPE_RANGE
34433>>>>>>>    End_Procedure
34434>>>>>>>    
34434>>>>>>>    // Function to check a fields value agains a given check string.
34434>>>>>>>    Function Validate_Field_Range Integer iField Returns Integer
34436>>>>>>>        String  sMin
34436>>>>>>>        String  sMax
34436>>>>>>>        String  sValue
34436>>>>>>>        Integer iField_Type
34436>>>>>>>        Integer iResult
34436>>>>>>>        Integer iFile
34436>>>>>>>        Integer iBase
34436>>>>>>>        Move (iField * FA_COUNT) to iBase
34437>>>>>>>        Get Value (iBase + FA_MIN_VALUE) to sMin
34438>>>>>>>        Get Value (iBase + FA_MAX_VALUE) to sMax
34439>>>>>>>        Delegate Get Field_Current_Value iField to sValue
34441>>>>>>>        Delegate Get Main_File to iFile
34443>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iField_Type
34446>>>>>>>        Move 0 to iResult
34447>>>>>>>        If (iField_Type=DF_ASCII) ;            Move (sValue < sMin or sValue > sMax) to iResult
34450>>>>>>>        Else If (iField_Type=DF_BCD) ;            Move (Number(sValue) < Number(sMin) or ;            Number(sValue) > Number(sMax)) to iResult
34454>>>>>>>        Else If (iField_Type=DF_DATE) ;            Move (Date(sValue) < Date(sMin) or Date(sValue) > Date(sMax)) to iResult
34458>>>>>>>        Else If (iField_Type=DF_DATETIME) ;            Move (Cast(sValue,DateTime) < Cast(sMin,DateTime) or Cast(sValue,DateTime) > Cast(sMax,DateTime)) to iResult
34462>>>>>>>        If iResult Begin
34464>>>>>>>            Delegate Send Field_Error iField DD_INVALID_RANGE sMin sMax
34466>>>>>>>            Function_Return 1
34467>>>>>>>        End
34467>>>>>>>>
34467>>>>>>>    End_Function
34468>>>>>>>    
34468>>>>>>>    // Callback to provide all valid value for this validation.
34468>>>>>>>    // Just call back with the two range values
34468>>>>>>>    Procedure Field_Fill_List_Field_Range Integer iField Integer iObj Integer iMsg
34470>>>>>>>        String  sMin
34470>>>>>>>        String  sMax
34470>>>>>>>        Integer iBase
34470>>>>>>>        Move (iField * FA_COUNT) to iBase
34471>>>>>>>        Get Value (iBase + FA_MIN_VALUE) to sMin
34472>>>>>>>        Get Value (iBase + FA_MAX_VALUE) to sMax
34473>>>>>>>        Send iMsg to iObj 0 sMin '' 0 (NullrowId())
34474>>>>>>>        Send iMsg to iObj 1 sMax '' 0 (NullrowId())
34475>>>>>>>    End_Procedure
34476>>>>>>>    
34476>>>>>>>    // Procedure to set the check for a field. It will automatically set the
34476>>>>>>>    // validation type of the field as well.
34476>>>>>>>    Procedure Set Field_Value_Check Integer iField String sCheck
34478>>>>>>>        Integer iBase
34478>>>>>>>        Move (iField * FA_COUNT) to iBase
34479>>>>>>>        Set Value (iBase + FA_CHECK_VALUE) to sCheck
34480>>>>>>>        //Set Value iBase to FA_VALIDATION_TYPE_CHECK
34480>>>>>>>        Set Field_Validation_Type iField to FA_VALIDATION_TYPE_CHECK
34481>>>>>>>    End_Procedure
34482>>>>>>>    
34482>>>>>>>    // Function to check a fields value agains a given check string.
34482>>>>>>>    Function Validate_Field_Check Integer iField Returns Integer
34484>>>>>>>        String  sCheck
34484>>>>>>>        String  sValue
34484>>>>>>>        Integer iBase
34484>>>>>>>        Integer iPos
34484>>>>>>>        Integer iLength
34484>>>>>>>        Integer iResult
34484>>>>>>>        Integer iFile
34484>>>>>>>        Move (iField * FA_COUNT) to iBase
34485>>>>>>>        Get Value (iBase + FA_CHECK_VALUE) to sCheck
34486>>>>>>>        Delegate Get Field_Current_Value iField to sValue
34488>>>>>>>        Delegate Get Main_File to iFile
34490>>>>>>>        Get_Attribute DF_FIELD_LENGTH of iFile iField to iLength
34493>>>>>>>        Move (Pad( sValue,iLength)) to sValue
34494>>>>>>>        // Replace the seperation characters with two of them so the user
34494>>>>>>>        // can't bypass the check by entering a seperation character.
34494>>>>>>>        Move (Replaces("|", sValue, "||")) to sValue
34495>>>>>>>        // Report an error if rules are violated.
34495>>>>>>>        Move (Pos( sValue, sCheck)) to iPos
34496>>>>>>>        If not iPos Begin
34498>>>>>>>            Delegate Send Field_Error iField DD_INVALID_CHECK sCheck
34500>>>>>>>            Function_Return 1
34501>>>>>>>        End
34501>>>>>>>>
34501>>>>>>>    End_Function
34502>>>>>>>    
34502>>>>>>>    // Callback to provide all valid value for this validation.
34502>>>>>>>    // Call back with all valid check values
34502>>>>>>>    Procedure Field_Fill_List_Field_Check Integer iField Integer iObj Integer iMsg
34504>>>>>>>        String  sCheck
34504>>>>>>>        Integer iBase
34504>>>>>>>        Integer iPos
34504>>>>>>>        Integer iItem
34504>>>>>>>        Move (iField * FA_COUNT) to iBase
34505>>>>>>>        Get Value (iBase + FA_CHECK_VALUE) to sCheck
34506>>>>>>>        Append sCheck "|"
34507>>>>>>>        Move (Pos( "|", sCheck)) to iPos
34508>>>>>>>        While iPos
34512>>>>>>>            If (iPos > 1) Begin
34514>>>>>>>                Send iMsg to iObj iItem (Left(sCheck,iPos-1)) '' 0 (NullrowId())
34515>>>>>>>                Increment iItem
34516>>>>>>>            End
34516>>>>>>>>
34516>>>>>>>            Move (Mid( sCheck, 255, iPos+1))  to sCheck
34517>>>>>>>            Move (Pos( "|", sCheck)) to iPos
34518>>>>>>>        Loop
34519>>>>>>>>
34519>>>>>>>    End_Procedure
34520>>>>>>>    
34520>>>>>>>    // Procedure to set up a checkbox field. We will store the TRUE and FALSE
34520>>>>>>>    // Values in the extended array.
34520>>>>>>>    Procedure Set Field_CheckBox_Values Integer iField String sTrue String sFalse
34522>>>>>>>        Integer iBase
34522>>>>>>>        Move (iField * FA_COUNT) to iBase
34523>>>>>>>        Set Value (iBase + FA_CHECKBOX_TRUE) to sTrue
34524>>>>>>>        Set Value (iBase + FA_CHECKBOX_FALSE) to sFalse
34525>>>>>>>        Set Field_Validation_Type iField to FA_VALIDATION_TYPE_CHECKBOX
34526>>>>>>>    End_Procedure
34527>>>>>>>    
34527>>>>>>>    // Return the Value associated with the field and its select-state.
34527>>>>>>>    Function Field_CheckBox_Value Integer iField Integer iState Returns String
34529>>>>>>>        Integer iBase
34529>>>>>>>        Integer iType
34529>>>>>>>        String sValue
34529>>>>>>>        Move (iField * FA_COUNT) to iBase
34530>>>>>>>        Get Field_Validation_Type iField to iType
34531>>>>>>>        If (iType <> FA_VALIDATION_TYPE_CHECKBOX) ;            Move iState to sValue
34534>>>>>>>        Else ;            Get Value (iBase + If(iState,FA_CHECKBOX_TRUE,FA_CHECKBOX_FALSE));            to sValue
34536>>>>>>>        Function_Return sValue
34537>>>>>>>    End_Function
34538>>>>>>>    
34538>>>>>>>    // Return the select_state based on the passed value and field
34538>>>>>>>    Function Field_Value_Select_State Integer iField String sValue Returns Integer
34540>>>>>>>        Integer iBase
34540>>>>>>>        Integer iType
34540>>>>>>>        String  sTrue
34540>>>>>>>        Integer iState
34540>>>>>>>        Integer iFile
34540>>>>>>>        Integer iField_Type
34540>>>>>>>        Move (iField * FA_COUNT) to iBase
34541>>>>>>>        Get Field_Validation_Type iField to iType
34542>>>>>>>        Get Value (iBase + FA_CHECKBOX_TRUE) to sTrue
34543>>>>>>>        If (iType <> FA_VALIDATION_TYPE_CHECKBOX) ;            Move (not(sValue=0 or sValue='')) to iState
34546>>>>>>>        Else Begin
34547>>>>>>>            Delegate Get Main_File to iFile
34549>>>>>>>            Get_Attribute DF_FIELD_TYPE of iFile iField to iField_Type
34552>>>>>>>            If (iField_Type = DF_BCD) ;                Move (Number(sValue)=Number(sTrue)) to iState
34555>>>>>>>            Else ; // DF_ASCII                Move (sValue=sTrue) to iState
34557>>>>>>>        End
34557>>>>>>>>
34557>>>>>>>        Function_Return iState
34558>>>>>>>    End_Function
34559>>>>>>>    
34559>>>>>>>    
34559>>>>>>>    // Check that the buffer value is one of the two checkbox values.
34559>>>>>>>    Function Validate_Field_Checkbox Integer iField Returns Integer
34561>>>>>>>        String  sTrue
34561>>>>>>>        String  sFalse
34561>>>>>>>        String  sValue
34561>>>>>>>        Integer iField_Type
34561>>>>>>>        Integer iResult
34561>>>>>>>        Integer iFile
34561>>>>>>>        Integer iBase
34561>>>>>>>        Move (iField * FA_COUNT) to iBase
34562>>>>>>>        Get Value (iBase + FA_CHECKBOX_TRUE) to sTrue
34563>>>>>>>        Get Value (iBase + FA_CHECKBOX_FALSE) to sFalse
34564>>>>>>>        Delegate Get Field_Current_Value iField to sValue
34566>>>>>>>        Delegate Get Main_File to iFile
34568>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iField_Type
34571>>>>>>>        Move 0 to iResult
34572>>>>>>>        If (iField_Type = DF_BCD) ;            Move (Number(sValue)=Number(sTrue) or ;            Number(sValue)=Number(sFalse)) to iResult
34575>>>>>>>        Else ; // DF_ASCII            Move (sValue=sTrue or sValue=sFalse) to iResult
34577>>>>>>>        If not iResult Begin
34579>>>>>>>            Delegate Send Field_Error iField DD_INVALID_CHECKBOX sTrue sFalse
34581>>>>>>>            Function_Return 1
34582>>>>>>>        End
34582>>>>>>>>
34582>>>>>>>    End_Function
34583>>>>>>>    
34583>>>>>>>    // Callback to provide all valid value for this validation.
34583>>>>>>>    // Just call back with the two true and false values
34583>>>>>>>    Procedure Field_Fill_List_Field_Checkbox Integer iField Integer iObj Integer iMsg
34585>>>>>>>        String  sTrue
34585>>>>>>>        String  sFalse
34585>>>>>>>        Integer iBase
34585>>>>>>>        Move (iField * FA_COUNT) to iBase
34586>>>>>>>        Get Value (iBase + FA_CHECKBOX_TRUE) to sTrue
34587>>>>>>>        Get Value (iBase + FA_CHECKBOX_FALSE) to sFalse
34588>>>>>>>        Send iMsg to iObj 0 sTrue '' 0 (NullrowId())
34589>>>>>>>        Send iMsg to iObj 1 sFalse '' 0 (NullrowId())
34590>>>>>>>    End_Procedure
34591>>>>>>>    
34591>>>>>>>    // The object keeps track of a validation table object. This table object
34591>>>>>>>    // can be any type of object must at a minimum understand a small message
34591>>>>>>>    // protocol (see xvaltbl.pkg for info)
34591>>>>>>>    Procedure Set Field_Value_Table Integer iField Integer iObj
34593>>>>>>>        Integer iBase
34593>>>>>>>        Move (iField * FA_COUNT) to iBase
34594>>>>>>>        Set Value (iBase + FA_TABLE_OBJECT) to iObj
34595>>>>>>>        Set Field_Validation_Type iField to FA_VALIDATION_TYPE_TABLE
34596>>>>>>>    End_Procedure
34597>>>>>>>    
34597>>>>>>>    // This valdates against a validation table if appropriate (if a table
34597>>>>>>>    // exists and the table's validate_State is T). It validates by passing
34597>>>>>>>    // the message validate_value to the validation table object
34597>>>>>>>    Function Validate_Field_Table Integer iField Returns Integer
34599>>>>>>>        Integer iBase
34599>>>>>>>        Integer iTableObj
34599>>>>>>>        String  sValue
34599>>>>>>>        Integer iResult
34599>>>>>>>        Move (iField * FA_COUNT) to iBase
34600>>>>>>>        Get Value (iBase + FA_TABLE_OBJECT) to iTableObj
34601>>>>>>>        If (iTableObj and Validate_State(iTableObj) ) Begin
34603>>>>>>>            Delegate Get Field_Current_Value iField to sValue
34605>>>>>>>            Get Validate_Value of iTableOBj sValue to iResult
34606>>>>>>>            If iResult ;                Delegate Send Field_Error iField DD_INVALID_VALUE_TABLE
34610>>>>>>>        End
34610>>>>>>>>
34610>>>>>>>        Function_Return iResult
34611>>>>>>>    End_Function
34612>>>>>>>    
34612>>>>>>>    // Callback to provide all valid value for this validation.
34612>>>>>>>    // Pass the request on to the validation table. This is the most common
34612>>>>>>>    // use of this.
34612>>>>>>>    Procedure Field_Fill_List_Field_Table Integer iField Integer iObj Integer iMsg
34614>>>>>>>        Integer iBase
34614>>>>>>>        Integer iTableObj
34614>>>>>>>        Move (iField * FA_COUNT) to iBase
34615>>>>>>>        Get Value (iBase + FA_TABLE_OBJECT) to iTableObj
34616>>>>>>>        If iTableObj ;            Send Request_Fill_From_List to iTableObj iObj iMsg
34619>>>>>>>    End_Procedure
34620>>>>>>>    
34620>>>>>>>    // Often extended valditation types can provide automatic prompt
34620>>>>>>>    // objects. If the extended type supports a prompt object and there is
34620>>>>>>>    // a global validation_list object, we will use it
34620>>>>>>>    Function Prompt_Object Integer iField Returns Integer
34622>>>>>>>        Integer iType
34622>>>>>>>        Integer iObj
34622>>>>>>>        Get Field_Validation_Type iField to iType
34623>>>>>>>        If not (iType=FA_VALIDATION_TYPE_NONE or iType=FA_VALIDATION_TYPE_RANGE) ;            Move DD_Global_Validation_Prompt_Object to iObj
34626>>>>>>>        Function_Return iObj
34627>>>>>>>    End_Function
34628>>>>>>>    
34628>>>>>>>    
34628>>>>>>>End_Class
34629>>>>>>>
34629>>>>>>>
34629>>>>>>>
34629>>>>>>>// use to keep track of file field pairs such as system file file/field
34629>>>>>>>Struct tDDFileField
34629>>>>>>>    Integer iFile
34629>>>>>>>    Integer iField
34629>>>>>>>End_Struct
34629>>>>>>>
34629>>>>>>>Class Field_Mask_Array is an Array
34630>>>>>>>    
34630>>>>>>>    Function Array_Name Integer iField Integer iType Returns String
34632>>>>>>>        String sName
34632>>>>>>>        Move (iField*FMA_COUNT+iType) to iField
34633>>>>>>>        If (Item_Count(Self)>iField) ;            Get value iField to sName
34636>>>>>>>        // sometimes an array value that is undefined returns a 0, we must change this to ''
34636>>>>>>>        If (sName = '0') ;            Move '' to sName
34639>>>>>>>        Function_Return sName
34640>>>>>>>    End_Function
34641>>>>>>>    
34641>>>>>>>    
34641>>>>>>>    Procedure Set Field_Mask_Type Integer iField Integer iType
34643>>>>>>>        Set Value (iField*FMA_COUNT+FMA_MASK_TYPE) to iType
34644>>>>>>>    End_Procedure
34645>>>>>>>    
34645>>>>>>>    Function Field_Mask_Type Integer iField Returns Integer
34647>>>>>>>        Integer iType
34647>>>>>>>        Move (iField*FMA_COUNT+FMA_MASK_TYPE) to iField
34648>>>>>>>        If (Item_Count(Self)>iField) ;            Get value iField to iType
34651>>>>>>>        Function_Return iType
34652>>>>>>>    End_Function
34653>>>>>>>    
34653>>>>>>>    Procedure Set Field_Mask_Value_State Integer iField Integer iState
34655>>>>>>>        Set Value (iField*FMA_COUNT+FMA_MASK_VALUE_STATE) to iState
34656>>>>>>>    End_Procedure
34657>>>>>>>    
34657>>>>>>>    Function Field_Mask_Value_State Integer iField Returns Integer
34659>>>>>>>        Integer iState
34659>>>>>>>        Move (iField*FMA_COUNT+FMA_MASK_VALUE_STATE) to iField
34660>>>>>>>        If (Item_Count(Self)>iField) ;            Get value iField to iState
34663>>>>>>>        Function_Return iState
34664>>>>>>>    End_Function
34665>>>>>>>    
34665>>>>>>>    Procedure Set Field_Mask Integer iField String sMask
34667>>>>>>>        Set Value (iField*FMA_COUNT+FMA_MASK) to sMask
34668>>>>>>>    End_Procedure
34669>>>>>>>    
34669>>>>>>>    Function Field_Mask Integer iField Returns String
34671>>>>>>>        Function_Return (Array_Name(Self,iField,FMA_MASK))
34672>>>>>>>    End_Function
34673>>>>>>>    
34673>>>>>>>    Procedure Set Field_Label_Short Integer iField String sName
34675>>>>>>>        Set Value (iField*FMA_COUNT+FMA_SHORT_NAME) to sName
34676>>>>>>>    End_Procedure
34677>>>>>>>    
34677>>>>>>>    Function Field_Label_Short Integer iField Returns String
34679>>>>>>>        Function_Return (Array_Name(Self,iField,FMA_SHORT_NAME))
34680>>>>>>>    End_Function
34681>>>>>>>    
34681>>>>>>>    Procedure Set Field_Label_Long Integer iField String sName
34683>>>>>>>        Set Value (iField*FMA_COUNT+FMA_LONG_NAME) to sName
34684>>>>>>>    End_Procedure
34685>>>>>>>    
34685>>>>>>>    Function Field_Label_Long Integer iField Returns String
34687>>>>>>>        Function_Return (Array_Name(Self,iField,FMA_LONG_NAME))
34688>>>>>>>    End_Function
34689>>>>>>>    
34689>>>>>>>    Procedure Set Field_Class_Name Integer iField String sName
34691>>>>>>>        Set Value (iField*FMA_COUNT+FMA_CLASS_NAME) to sName
34692>>>>>>>    End_Procedure
34693>>>>>>>    
34693>>>>>>>    Function Field_Class_Name Integer iField Returns String
34695>>>>>>>        Function_Return (Array_Name(Self,iField,FMA_CLASS_NAME))
34696>>>>>>>    End_Function
34697>>>>>>>    
34697>>>>>>>    Procedure Set Field_WebPrompt_Object Integer iField Handle hoPrompt
34699>>>>>>>        Set Value (iField*FMA_COUNT+FMA_WEBPROMPTOBJECT) to hoPrompt
34700>>>>>>>    End_Procedure
34701>>>>>>>    
34701>>>>>>>    Function Field_WebPrompt_Object Integer iField Returns Handle
34703>>>>>>>        Function_Return (Array_Name(Self,iField,FMA_WEBPROMPTOBJECT))
34704>>>>>>>    End_Function
34705>>>>>>>    
34705>>>>>>>End_Class
34706>>>>>>>
34706>>>>>>>Class DataDictionary is a DataSet
34707>>>>>>>    
34707>>>>>>>    Procedure Construct_Object
34709>>>>>>>        Forward Send Construct_Object
34711>>>>>>>        
34711>>>>>>>        Property String  Existing_Key_Value                           ""
34712>>>>>>>        Property Integer Protect_Key_State                            True
34713>>>>>>>        
34713>>>>>>>        Property String  Key_Fields                                   ""
34714>>>>>>>        
34714>>>>>>>        // These are added to support the checking of DSO connections
34714>>>>>>>        // during deletes and saves. Only the first two properties are Public
34714>>>>>>>        Property Integer Validate_Save_Structure_Mode   DD_Validate_Structure_Once
34715>>>>>>>        Property Integer Validate_Delete_Structure_Mode DD_Validate_Structure_Once
34716>>>>>>>        Property Integer Save_Structure_Validated_State              False
34717>>>>>>>        Property Integer Cascade_Delete_Structure_Validated_State    False
34718>>>>>>>        Property Integer No_Cascade_Delete_Structure_Validated_State False
34719>>>>>>>        
34719>>>>>>>        Property Integer Last_Mark_Sequence_Id                       0
34720>>>>>>>        
34720>>>>>>>        // These are added for optimized traversal of
34720>>>>>>>        // entry-update and validation and maybe more
34720>>>>>>>        Property String  Visited_Fields          ""
34721>>>>>>>        Property Integer Visited_State           False
34722>>>>>>>        // means will be part of a downward delete (cascade deletable). This only has meaning
34722>>>>>>>        // when cascade_delete_state is True
34722>>>>>>>        Property Boolean DownDelete_State        False
34723>>>>>>>        
34723>>>>>>>        // these are set by the define_auto_increment, which is obsolete and has been replaced
34723>>>>>>>        // the Set Field_auto_increment method.
34723>>>>>>>        Property Integer Auto_Increment_Source_File  0
34724>>>>>>>        Property Integer Auto_Increment_Source_Field 0
34725>>>>>>>        Property Integer Auto_Increment_Dest_Field   0
34726>>>>>>>        
34726>>>>>>>        // used by the set Field_auto_increment method
34726>>>>>>>        // these are split into two arrays to make searching for the field easier
34726>>>>>>>        // the arrays should always be synched.
34726>>>>>>>        Property Integer[] pAutoIncrementFields
34727>>>>>>>        Property tDDFileField[] pAutoIncrementSysFileFields
34728>>>>>>>        
34728>>>>>>>        // Error Reporting Related
34728>>>>>>>        // If DD_Error_No_Report errors would be supressed (only ERR gets set)
34728>>>>>>>        Property Integer Error_Report_Mode           DD_Error_Report
34729>>>>>>>        
34729>>>>>>>        // During validation, this is the field being validated.
34729>>>>>>>        Property Integer Current_Validate_Field      0
34730>>>>>>>        
34730>>>>>>>        // when errors are redirected locally this maintains the original handler.
34730>>>>>>>        Property Integer Old_Error_Object_Id         0
34731>>>>>>>        
34731>>>>>>>        // Must be provided if local error handler is to be created
34731>>>>>>>        Property Integer Error_Processing_State      0
34732>>>>>>>        
34732>>>>>>>        // These should be changed most carefully and possible only and the
34732>>>>>>>        // DSO level. These allow you to defeat full field validation which
34732>>>>>>>        // makes it easier to corrupt data! Validate_DEO_Only_State limits
34732>>>>>>>        // save validation to DEOs (which is what data-sets have always done).
34732>>>>>>>        // Validate_foreign_File_State will skip validation under the following
34732>>>>>>>        // conditions: 1) DSO if for a parent (it did not originate the save).
34732>>>>>>>        //
34732>>>>>>>        Property Integer Validate_DEOs_Only_State    False
34733>>>>>>>        Property Integer Validate_Foreign_File_State True
34734>>>>>>>        // if set true, a field validation requested started with this
34734>>>>>>>        // DD will check all fields, even in an error is encountered
34734>>>>>>>        Property Integer Validate_All_Fields_State   False
34735>>>>>>>        
34735>>>>>>>        // If true, all entry updates will occur through the DD. Else
34735>>>>>>>        // saves occur through the DD and find occur through the DEOs
34735>>>>>>>        Property Integer EntryUpdateLocalState True // changed from false to true in 17.0
34736>>>>>>>        
34736>>>>>>>        // can be used by Refind_records method (remote refind of recs). Obsolete. Use prFindRowId
34736>>>>>>>        Property Integer Find_Record_Id 0
34737>>>>>>>        
34737>>>>>>>        // can be used by Refind_records method (remote refind of recs)
34737>>>>>>>        Property RowID prFindRowId (NullRowId())
34738>>>>>>>        // can be used by Refind_records method (remote refind of recs)
34738>>>>>>>        Property tDDChangedInfo pDDChangedInfo
34739>>>>>>>        
34739>>>>>>>        // Private: Id of field_objects container. This is not created until needed
34739>>>>>>>        Property Integer Field_Objects 0
34740>>>>>>>        
34740>>>>>>>        // Public: If set the DDO will never be foreign, allowing
34740>>>>>>>        // you to create new parents when a child is saved. This would
34740>>>>>>>        // normally only be set within the DDO and not the class. This would be
34740>>>>>>>        // used where a child table wants to save the parent (header) when the
34740>>>>>>>        // first child is saved. It would disable the foreign key and index
34740>>>>>>>        // find_Req and required settings (as well as any displayonly).
34740>>>>>>>        Property Integer Allow_Foreign_New_Save_State False
34741>>>>>>>        
34741>>>>>>>        Set pbDDAttach to True // set false to get (very) old attach_main_file_behavior
34742>>>>>>>        Set pbSmartRelate to True // Only relate if parent is attached via a DDO
34743>>>>>>>        
34743>>>>>>>        // If this is an alias file, this is the master file it is based on
34743>>>>>>>        Property Handle piMasterTable 0
34744>>>>>>>        
34744>>>>>>>        Property tDDServerInformation[] pServerInformation
34745>>>>>>>        
34745>>>>>>>        Property tDDRemembered[] pDDDefaults
34746>>>>>>>        
34746>>>>>>>        Property Boolean pbInSuperFind False
34747>>>>>>>        
34747>>>>>>>        // Create the local buffer.
34747>>>>>>>        Object Record_Buffer is a cRecordBuffer
34749>>>>>>>        End_Object
34750>>>>>>>        
34750>>>>>>>        // Create the extended field attributes array.
34750>>>>>>>        Object Field_Attributes is a Field_Attributes
34752>>>>>>>        End_Object
34753>>>>>>>        
34753>>>>>>>        // Create an array to maintain Status help values for each field
34753>>>>>>>        Object Statushelp_Array is an array
34755>>>>>>>        End_Object
34756>>>>>>>        
34756>>>>>>>        Object FieldMask_Array is an Field_Mask_array
34758>>>>>>>        End_Object
34759>>>>>>>        
34759>>>>>>>        
34759>>>>>>>        // keep track of all system/unknown files that must be set to
34759>>>>>>>        // default for smart file mode to work right.
34759>>>>>>>        Object System_File_obj is an Array
34761>>>>>>>        End_Object
34762>>>>>>>        
34762>>>>>>>        // used during Request_Validate
34762>>>>>>>        Property Handle[] pDDsWithFindReqErrors
34763>>>>>>>        
34763>>>>>>>        // Apply SQL filters in constrained finds
34763>>>>>>>        Property Boolean pbUseDDSQLFilters False
34764>>>>>>>        // If pbUseDDSQLFilters is true, this determines if the table global filter should be applied as well
34764>>>>>>>        Property Boolean pbApplyGlobalSQLFilters False
34765>>>>>>>        // Filter which will get applied before each DDO constrained find. If "", no filter is applied
34765>>>>>>>        Property String psSQLFilter ""
34766>>>>>>>        
34766>>>>>>>        // Old values for SQL Filters which are pushed and popped by StoreSQLDefaultFilters and RestoreSQLDefaultFilters
34766>>>>>>>        Property String psOldFilter ""
34767>>>>>>>        Property Boolean pbOldFilterActive
34768>>>>>>>        Property Boolean pbOldFilterEq
34769>>>>>>>        
34769>>>>>>>        // used to point to the composite child object that provides the SQL
34769>>>>>>>        // interfaces for a driver. This can be used with DAW drivers. Other drivers may require
34769>>>>>>>        // that you sub-class your DD and create a different object based on a custom class
34769>>>>>>>        Property Handle phoSQLHelper (Create(Self,RefClass(cDAWSQLDriverHelper)))
34770>>>>>>>        
34770>>>>>>>        
34770>>>>>>>        Property Handle pbInResync False
34771>>>>>>>        
34771>>>>>>>        Property Integer piPrimaryIndex -1      // Indicates the unique index used by the webapp view state system (-1 defaults to the primary key or recnum for embedded).
34772>>>>>>>        
34772>>>>>>>        Set Smart_FileMode_State to True  // extended DSOs should default to true
34773>>>>>>>        
34773>>>>>>>        Send Define_Fields // Developer Hook - define all field rules
34774>>>>>>>    End_Procedure
34775>>>>>>>    
34775>>>>>>>    // Returns 1 to indicate that this is a DD class.
34775>>>>>>>    Function Extended_DSO_State Returns Integer
34777>>>>>>>        Function_Return 1
34778>>>>>>>    End_Function
34779>>>>>>>    
34779>>>>>>>    
34779>>>>>>>    // Used to set up all XDS functions and rules. Called by construct_object
34779>>>>>>>    // and considered a bit more user friendly.
34779>>>>>>>    Procedure Define_Fields
34781>>>>>>>    End_Procedure
34782>>>>>>>    
34782>>>>>>>    
34782>>>>>>>    
34782>>>>>>>    // This message has been augmented to create a local recordbuffer for a
34782>>>>>>>    // file. We cannot do this earlier because we need the file to count the
34782>>>>>>>    // number of necessary fields.
34782>>>>>>>    Procedure Set Main_File Integer iFile
34784>>>>>>>        Integer iCurrent_File iMaster
34784>>>>>>>        Get piMasterTable to iMaster
34785>>>>>>>        If iMaster Begin
34787>>>>>>>            // is an alias condition
34787>>>>>>>            Forward Set Main_File to iFile
34789>>>>>>>            Send ReDefineAliasItems to (Record_Buffer(Self)) iFile
34790>>>>>>>        End
34790>>>>>>>>
34790>>>>>>>        Else If iFile Begin
34793>>>>>>>            Get Main_File to iCurrent_File
34794>>>>>>>            If (iCurrent_File and iCurrent_File <> iFile) Begin
34796>>>>>>>                Send Data_Set_Error -1 DFERR_PROGRAM DD_CANNOT_CHANGE_MAIN_FILE
34797>>>>>>>                Procedure_Return
34798>>>>>>>            End
34798>>>>>>>>
34798>>>>>>>            Forward Set Main_File to iFile
34800>>>>>>>            Send Create_Items to (Record_Buffer(Self)) iFile
34801>>>>>>>            Send Create_Items to (Field_Attributes(Self))
34802>>>>>>>        End
34802>>>>>>>>
34802>>>>>>>    End_Procedure
34803>>>>>>>    
34803>>>>>>>    // This procedure will update the Key_Fields property to include or
34803>>>>>>>    // excluded the fieldnumber passed in the list of fieldnumbers which make
34803>>>>>>>    // up an keyvalue.
34803>>>>>>>    Procedure Set Key_Field_State Integer iField Integer iState
34805>>>>>>>        String  sKeys
34805>>>>>>>        Set Key_Field_State of Record_Buffer iField to iState
34806>>>>>>>        Get Key_Fields to sKeys
34807>>>>>>>        Set Key_Fields to (Overstrike(If(iState, "X", " "), sKeys, iField))
34808>>>>>>>    End_Procedure
34809>>>>>>>    
34809>>>>>>>    // Will return TRUE if the field passed has been defined as a key.
34809>>>>>>>    Function Key_Field_State Integer iField Returns Integer
34811>>>>>>>        Integer iState
34811>>>>>>>        Get Key_Field_State of Record_Buffer iField to iState
34812>>>>>>>        Function_Return iState
34813>>>>>>>    End_Function
34814>>>>>>>    
34814>>>>>>>    // Returns complete key value.
34814>>>>>>>    Function Key_Value Returns String
34816>>>>>>>        String  sKeys
34816>>>>>>>        String  sKey_Value
34816>>>>>>>        String  sValue
34816>>>>>>>        Integer iField
34816>>>>>>>        Get Key_Fields to sKeys
34817>>>>>>>        Move "" to sKey_Value
34818>>>>>>>        Repeat
34818>>>>>>>>
34818>>>>>>>            Move (Pos( "X",sKeys)) to iField
34819>>>>>>>            If iField Begin
34821>>>>>>>                Get Field_Current_Value iField to sValue
34822>>>>>>>                Append sKey_Value sValue
34823>>>>>>>                Move (Overstrike(" ", sKeys, iField)) to sKeys
34824>>>>>>>            End
34824>>>>>>>>
34824>>>>>>>        Until not iField
34826>>>>>>>        Function_Return sKey_Value
34827>>>>>>>    End_Function
34828>>>>>>>    
34828>>>>>>>    // This procedure will be called whenever the Data_Set changes its
34828>>>>>>>    // Current_Record property, or after a Save, Delete or Clear operation.
34828>>>>>>>    // We send this message to the Record_Buffer object to update its values.
34828>>>>>>>    Procedure New_Current_Record Integer iOld Integer iNew
34830>>>>>>>        // does nothing, but exists if developer is using this for some purpose. Is called after
34830>>>>>>>        // OnNewCurrentRecord (if recnum based table)
34830>>>>>>>    End_Procedure
34831>>>>>>>    
34831>>>>>>>    Procedure OnNewCurrentRecord RowID riOld RowID riNew
34833>>>>>>>        Integer iObj
34833>>>>>>>        Integer iOldst
34833>>>>>>>        Integer iFoc
34833>>>>>>>        Integer iIsExt
34833>>>>>>>        Forward Send OnNewCurrentRecord riOld riNew
34835>>>>>>>        Move (Record_Buffer(Self)) to iObj
34836>>>>>>>        If iObj Begin
34838>>>>>>>            Send OnNewCurrentRecord of iObj riOld riNew
34839>>>>>>>            // must also refresh all defined extended fields
34839>>>>>>>            Send ExtendedFieldsRefresh (IsNullRowId(riNew)) // pass bCleared (true if a clear)
34840>>>>>>>            Get Focus of Desktop to iFoc
34841>>>>>>>            Get Extended_DEO_State of iFoc to iIsExt     // if focus is deo item
34842>>>>>>>            If iIsExt Begin                               // disable the state so
34844>>>>>>>                Get Entry_Refresh_State of iFoc to iOldSt // value will come
34845>>>>>>>                Set Entry_Refresh_State of iFoc to True   // from Local buffer.
34846>>>>>>>            End
34846>>>>>>>>
34846>>>>>>>            Set Existing_Key_Value to (Key_Value(Self))
34847>>>>>>>            If iIsExt ;                Set Entry_Refresh_State of iFoc to iOldSt
34850>>>>>>>            // Only set defaults when the record is new
34850>>>>>>>            If (IsNullRowId(riNew)) ;                Send Prepare_Default_Values
34853>>>>>>>        End
34853>>>>>>>>
34853>>>>>>>    End_Procedure
34854>>>>>>>    
34854>>>>>>>    // Shuts off change mode and sends initialize_default_values which is
34854>>>>>>>    // a user hook routine.
34854>>>>>>>    Procedure Prepare_Default_Values
34856>>>>>>>        Integer iOldState
34856>>>>>>>        Get Change_disabled_State to iOldState
34857>>>>>>>        Set Change_disabled_State to True
34858>>>>>>>        Send Private_Field_Defaults
34859>>>>>>>        // set defaults if this is the main DDO or the DDO is
34859>>>>>>>        // flagged as supporting saving new records when foreign (a parent)
34859>>>>>>>        If (Operation_Origin=Self or ;            Allow_Foreign_New_Save_State(Self)) ;            Send Field_Defaults
34862>>>>>>>        Send AssignDynamicDefaults
34863>>>>>>>        Set Change_disabled_State to iOldState
34864>>>>>>>    End_Procedure
34865>>>>>>>    
34865>>>>>>>    // Set all checkbox fields to default to False data value.
34865>>>>>>>    Procedure Private_Field_Defaults
34867>>>>>>>        Integer iField
34867>>>>>>>        Repeat
34867>>>>>>>>
34867>>>>>>>            Get Next_Validation_Type of (Field_Attributes(Self)) ;                FA_VALIDATION_TYPE_CHECKBOX iField to iField
34868>>>>>>>            If (iField = 0) ;                Procedure_Return
34871>>>>>>>            Set Field_Select_State  iField to False
34872>>>>>>>            Set Field_Changed_State iField to True
34873>>>>>>>        Loop
34874>>>>>>>>
34874>>>>>>>    End_Procedure
34875>>>>>>>    
34875>>>>>>>    // Will be called after a clear operation to let the application
34875>>>>>>>    // programmer set the default values for the record. This should be done
34875>>>>>>>    // by sending SET Field_Current_Value.
34875>>>>>>>    Procedure Field_Defaults
34877>>>>>>>    End_Procedure
34878>>>>>>>    
34878>>>>>>>    // Pass type and string value and see if this is valid data for this
34878>>>>>>>    // type. Currently we check for numbers and dates. Return non-zero
34878>>>>>>>    // if invalid.
34878>>>>>>>    Function IsDataInvalid Integer iType String sValue Returns Integer
34880>>>>>>>        Date    dVal
34880>>>>>>>        DateTime dtVal
34880>>>>>>>        Number  nVal
34880>>>>>>>        Integer bOK
34880>>>>>>>        Boolean bInvalid
34880>>>>>>>        
34880>>>>>>>        Move False to bInvalid
34881>>>>>>>        If (iType=DF_BCD or iType=DF_DATE or iType=DF_DATETIME) Begin
34883>>>>>>>            If (iType=DF_DATE) Begin
34885>>>>>>>                MoveTrapErr sValue to dVal
34886>>>>>>>                Move (Err) to bInvalid
34887>>>>>>>            End
34887>>>>>>>>
34887>>>>>>>            Else If (iType=DF_DATETIME) Begin
34890>>>>>>>                MoveTrapErr sValue to dtVal
34891>>>>>>>                Move (Err) to bInvalid
34892>>>>>>>//          Move (not(IsDateValid(dtVal))) to bInvalid //jjt-uncomment when working
34892>>>>>>>            End
34892>>>>>>>>
34892>>>>>>>            Else Begin
34893>>>>>>>                MoveTrapErr sValue to nVal // this may gen an error.
34894>>>>>>>                Move (Err) to bInvalid
34895>>>>>>>            End
34895>>>>>>>>
34895>>>>>>>            Move False to Err
34896>>>>>>>        End
34896>>>>>>>>
34896>>>>>>>        Function_Return bInvalid
34897>>>>>>>    End_Function
34898>>>>>>>    
34898>>>>>>>    // Return 1 if the passed DEO is part of the DDs list of connected DEOs
34898>>>>>>>    // First check if server of DEO is this DD. If so, we are owned. If not
34898>>>>>>>    // we must check the DD's UI DEO list.
34898>>>>>>>    // The passed object MUST be a valid DEO or an error will occur.
34898>>>>>>>    Function IsDEOOwned Integer iDEO Returns Integer
34900>>>>>>>        Integer iMax iCount
34900>>>>>>>        // if DEOs server is same as current DD it is owned. This is the
34900>>>>>>>        // fast check
34900>>>>>>>        If (Server(iDEO)=Self) ;            Function_Return 1
34903>>>>>>>        // else see if the DEO is in the DD's DEO list
34903>>>>>>>        Get Data_Set_User_Interface_Count to iMax
34904>>>>>>>        Decrement iMax
34905>>>>>>>        For iCount from 0 to iMax
34911>>>>>>>>
34911>>>>>>>            If (Data_Set_User_Interface(Self,iCount)=iDEO) ;                Function_Return 1
34914>>>>>>>        Loop
34915>>>>>>>>
34915>>>>>>>        Function_Return 0
34916>>>>>>>    End_Function
34917>>>>>>>    
34917>>>>>>>    // This procedure changes the field value of the given field in the
34917>>>>>>>    // record-buffer object.
34917>>>>>>>    // It also sends Field_Value_Changed to notify every the attached DEOs.
34917>>>>>>>    // This has been optimized so this message is only sent when data is
34917>>>>>>>    // actually changed.
34917>>>>>>>    Procedure Set Field_Current_Value Integer iField String sValue
34919>>>>>>>        Integer iObj
34919>>>>>>>        String sOldVal
34919>>>>>>>        Integer iChanged
34919>>>>>>>        Integer iType
34919>>>>>>>        Integer iFile
34919>>>>>>>        Integer iFocObj
34919>>>>>>>        Integer iCrnt
34919>>>>>>>        Integer bInvalid
34919>>>>>>>        Integer iIdentity
34919>>>>>>>        Address pData
34919>>>>>>>        Integer iLen
34919>>>>>>>        
34919>>>>>>>        Get Main_File to iFile
34920>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
34923>>>>>>>        
34923>>>>>>>        // Overlap fields are not supported directly in DDs. It is expected
34923>>>>>>>        // that you will use the underlying fields instead
34923>>>>>>>        If (iType = DF_OVERLAP) Begin
34925>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_OVERLAP_ERROR
34926>>>>>>>            Procedure_Return
34927>>>>>>>        End
34927>>>>>>>>
34927>>>>>>>        
34927>>>>>>>        If (iType=DF_TEXT or iType=DF_BINARY) Begin // if text or binary direct to pointer
34929>>>>>>>            Move sValue to sValue // intentional code: make sure passed sValue is a really string
34930>>>>>>>            Move (SizeOfString(sValue)) to iLen // length to copy
34931>>>>>>>            Move (AddressOf(sValue)) to pData   // first byte of string
34932>>>>>>>            // will gen error if ext. field does not exist
34932>>>>>>>            Set Field_Current_Pointer_Value iField iLen to pData
34933>>>>>>>            Procedure_Return
34934>>>>>>>        End
34934>>>>>>>>
34934>>>>>>>        
34934>>>>>>>        
34934>>>>>>>        // If date or number, force conversion so any error is detected before
34934>>>>>>>        // the buffer is updated. We don't want the record buffer to contain
34934>>>>>>>        // invalid data
34934>>>>>>>        Get IsDataInvalid iType sValue to bInvalid
34935>>>>>>>        If bInvalid ;         // If an error occurred we have            Procedure_Return  // a bad number or a bad date. Do no more!
34938>>>>>>>        
34938>>>>>>>        Move (Record_Buffer(Self)) to iObj
34939>>>>>>>        Get Value of iObj iField to sOldVal
34940>>>>>>>        
34940>>>>>>>        Set Value of iObj iField to sValue
34941>>>>>>>        
34941>>>>>>>        // Augmented to handle non DF databases JJT
34941>>>>>>>        // Some tables may use some field other then recnum for their record identity.
34941>>>>>>>        // This will be dfrecnum or some other numeric field. When this happens the DD have
34941>>>>>>>        // to field buffers for the same value. When an update occurs from the DD to the DB buffer
34941>>>>>>>        // an update can occur twice. If the values are the same, this does not matter. Else the highest
34941>>>>>>>        // field value will get the update (not recnum). So if someone changes recnum but not its real field
34941>>>>>>>        // finding may not work right. The DD is updated when a record is found and the API keeps the two values
34941>>>>>>>        // the same. If the user changes recnum, the real field does not get changed. That is what we are fixing
34941>>>>>>>        // here. Note that: 1) this has no effect on Dataflex databases (or any DB that has a 0 field recnum).
34941>>>>>>>        // 2) this type of update is rarely seen anyway (you have to change just the recnum and perform an entry_update).
34941>>>>>>>        //
34941>>>>>>>        // if field is recnum and record identity is not 0, we must also update the other field.
34941>>>>>>>        If (iField=0) Begin
34943>>>>>>>            Get_Attribute DF_FILE_RECORD_IDENTITY of iFile to iIdentity
34946>>>>>>>            If (iIdentity>0) ;                Set Value of iObj iIdentity to sValue
34949>>>>>>>        End
34949>>>>>>>>
34949>>>>>>>        
34949>>>>>>>        // When data-sets are working they should not update the
34949>>>>>>>        // DEOs.
34949>>>>>>>        
34949>>>>>>>        // prior to vdf7, we stopped all operation modes of non-zero. We now allow
34949>>>>>>>        // validates to pass through and we have a new operation mode for this. This
34949>>>>>>>        // should be ok, since we already allowed navigation validation through - we just
34949>>>>>>>        // stopped request_validate validations.
34949>>>>>>>        If (Operation_Mode=0 or Operation_Mode=MODE_VALIDATING) Begin
34951>>>>>>>            If (iType=DF_BCD) ;                Move (Number(sValue)<>Number(sOldVal)) to iChanged
34954>>>>>>>            Else If (iType=DF_DATE) ;                Move (Date(sValue)<>Date(sOldVal)) to iChanged
34958>>>>>>>            Else If (iType=DF_DATETIME) ;                Move (Cast(sValue,DateTime)<>Cast(sOldVal,DateTime)) to iChanged
34962>>>>>>>            Else ;                Move (sValue<>sOldVal) to iChanged
34964>>>>>>>            // if changed, notify all DEOs of this change
34964>>>>>>>            If iChanged ;                Send Field_Value_Changed iField sValue
34967>>>>>>>            Else Begin
34968>>>>>>>                // If here the set value did not change the contents of the DD.
34968>>>>>>>                // However, it is possible that the current focus DEO may contain
34968>>>>>>>                // a different value than the one we are setting. In such a case
34968>>>>>>>                // we must re-synchronize the DEO. Only the one DEO can be affected
34968>>>>>>>                // because it is the current focus deo/item that can contain a value
34968>>>>>>>                // that is not yet updated in the DD. This fixes a bug where the
34968>>>>>>>                // iexit was setting a value which was different from what was in
34968>>>>>>>                // the DEO but was the same as the old DD value (iExit is called
34968>>>>>>>                // before the DD is re-synched with the DEO). This could happen
34968>>>>>>>                // also by sending this message directly with a different value in
34968>>>>>>>                // the DEO focus item.
34968>>>>>>>                Get Focus of Desktop to iFocObj
34969>>>>>>>                // similar logic to Get Field_Current_Value. We check that the DEO
34969>>>>>>>                // is extended, that entry_refresh is not disabled and that the
34969>>>>>>>                // DEO's server is this DD.
34969>>>>>>>                If ( Extended_DEO_State(iFocObj) and ;                    (Entry_Refresh_State(iFocObj)=0)) Begin
34971>>>>>>>                    Get Current_item of iFocObj to iCrnt
34972>>>>>>>                    // If Focus DEO has same file and field and it is not checkbox
34972>>>>>>>                    // we must set its value. Set local value directly sets the value
34972>>>>>>>                    // in the DEO item. If we used value we'd get recursion!
34972>>>>>>>                    If ( Data_File(iFocObj,iCrnt)=iFile and ;                        Data_Field(iFocObj,iCrnt)=iField and ;                        IsDEOOwned(Self,iFocObj) and ;                        Checkbox_item_State(iFocObj,iCrnt)=0 ) ;                        Send File_Field_Value_Changed to iFocObj iFile iField sValue True
34975>>>>>>>                    //Set Local_Value of iFocObj iCrnt to sValue
34975>>>>>>>                End
34975>>>>>>>>
34975>>>>>>>            End
34975>>>>>>>>
34975>>>>>>>        End
34975>>>>>>>>
34975>>>>>>>    End_Procedure
34976>>>>>>>    
34976>>>>>>>    // Sets Field_Current_Value and Sets Field_Changed_State for passed field.
34976>>>>>>>    Procedure Set Field_Changed_Value Integer iField String sValue
34978>>>>>>>        Set Field_Changed_State iField to True
34979>>>>>>>        Set Field_Current_Value iField to sValue
34980>>>>>>>    End_Procedure
34981>>>>>>>    
34981>>>>>>>    
34981>>>>>>>    // This should only be set by a DEO that is changing a NoPut value. This should only happen when NoEnter=F
34981>>>>>>>    // for indexed findable noput deos. With foreign-field noputs we may store the value and update them
34981>>>>>>>    // for finds but we don't want them for saves. The cDDBuffer class handles this but it needs to
34981>>>>>>>    // know if this was a DEO NoPut update. DDOs have always allowed you to directly update foreign NoPut
34981>>>>>>>    // fields when the change did not come from a DEO.
34981>>>>>>>    Procedure Set Field_NoPutValueChangedByDeo Integer iField Boolean bChange
34983>>>>>>>        Set Item_ChangedByDeo of Record_Buffer iField to bChange
34984>>>>>>>    End_Procedure
34985>>>>>>>    
34985>>>>>>>    Procedure Set File_Field_NoPutValueChangedByDeo Integer iFile Integer iField Boolean bChange
34987>>>>>>>        Integer iDSO
34987>>>>>>>        Get Data_set iFile to iDSO
34988>>>>>>>        If iDSO Begin
34990>>>>>>>            Set Field_NoPutValueChangedByDeo of iDSO iField to bChange
34991>>>>>>>        End
34991>>>>>>>>
34991>>>>>>>    End_Procedure
34992>>>>>>>    
34992>>>>>>>    // Returns the value from the record buffer for the field of which the
34992>>>>>>>    // fieldnumber has been passed.
34992>>>>>>>    // If the file/field requested is the focus file/field the use the DEO's
34992>>>>>>>    // value.
34992>>>>>>>    Function Field_Current_Value Integer iField Returns String
34994>>>>>>>        Integer iType
34994>>>>>>>        Integer iFile
34994>>>>>>>        String  sValue
34994>>>>>>>        Integer iFoc
34994>>>>>>>        Integer iCrnt
34994>>>>>>>        Integer iFldSize iVoid
34994>>>>>>>        UChar[] UCData
34995>>>>>>>        
34995>>>>>>>        Get Focus of desktop to iFoc
34996>>>>>>>        Get Main_File to iFile
34997>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
35000>>>>>>>        
35000>>>>>>>        // Overlap fields are not supported directly in DDs. It is expected
35000>>>>>>>        // that you will use the underlying fields instead
35000>>>>>>>        If (iType=DF_OVERLAP) Begin
35002>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_OVERLAP_ERROR
35003>>>>>>>            Function_Return ''
35004>>>>>>>        End
35004>>>>>>>>
35004>>>>>>>        
35004>>>>>>>        If (iType=DF_TEXT or iType=DF_BINARY) Begin // if overlap, text or binary direct to pointer
35006>>>>>>>            Get Field_Current_UCAValue iField to UCData
35007>>>>>>>            
35007>>>>>>>            // we assume a string is passed here. If we return to a string the
35007>>>>>>>            // pointer message will convert this to a string. Check that max string
35007>>>>>>>            // length is not larger than Max_Argument_Size has been removed.
35007>>>>>>>            Move (SizeOfArray(UCData)) to iFldSize
35008>>>>>>>            Move (UCharArrayToString(UCData)) to sValue
35009>>>>>>>            // This function has always returned the value as a 0 delimited string.
35009>>>>>>>            // Therefore trim at first zero. This means that you should not use this method
35009>>>>>>>            // with Binary types as embedded zeros will cause a truncation.
35009>>>>>>>            Move (CString(sValue)) to sValue
35010>>>>>>>            Function_Return sValue
35011>>>>>>>        End
35011>>>>>>>>
35011>>>>>>>        
35011>>>>>>>        // This was extended to also make sure that the focus's server
35011>>>>>>>        // is this DD. This prevent the (very unlikely) case of a focus
35011>>>>>>>        // file/field being the right file/field but for a different view.
35011>>>>>>>        // 12.1: Also check operation mode, if within an operation assume that the
35011>>>>>>>        // ddos have the information they need from the deos. During a refresh we don't
35011>>>>>>>        // the data to be taken from a DEO - the DD buffer has the information you want. Note that
35011>>>>>>>        // we also changed all methods that set operation_mode to update the DD with the current
35011>>>>>>>        // DEO field, so the buffer is always correct.
35011>>>>>>>        If ( (OPERATION_MODE=MODE_WAITING) and ;            Extended_DEO_State(iFoc) and (Entry_Refresh_State(iFoc)=0) ) Begin
35013>>>>>>>            Get Current_item of iFoc to iCrnt
35014>>>>>>>            If ( Data_File(iFoc,iCrnt)=iFile and Data_Field(iFoc,iCrnt)=iField and ;                IsDEOOwned(Self,iFoc) and ;                (Checkbox_item_State(iFoc,iCrnt)=0) ) Begin
35016>>>>>>>                Get Data_Value of iFoc iCrnt to sValue
35017>>>>>>>            End
35017>>>>>>>>
35017>>>>>>>            Else Begin
35018>>>>>>>                Get Value of (Record_Buffer(Self)) iField to sValue
35019>>>>>>>            End
35019>>>>>>>>
35019>>>>>>>        End
35019>>>>>>>>
35019>>>>>>>        Else Begin
35020>>>>>>>            Get Value of (Record_Buffer(Self)) iField to sValue
35021>>>>>>>        End
35021>>>>>>>>
35021>>>>>>>        
35021>>>>>>>        // cast value to the proper datatype
35021>>>>>>>        If (iType=DF_BCD) Begin
35023>>>>>>>            Function_Return (Number(sValue))
35024>>>>>>>        End
35024>>>>>>>>
35024>>>>>>>        Else If (iType=DF_DATE) Begin
35027>>>>>>>            Function_Return (Date(sValue))
35028>>>>>>>        End
35028>>>>>>>>
35028>>>>>>>        Else If (iType=DF_DATETIME) Begin
35031>>>>>>>            Function_Return (Cast(sValue,DateTime))
35032>>>>>>>        End
35032>>>>>>>>
35032>>>>>>>        // else return as string
35032>>>>>>>        Function_Return sValue
35033>>>>>>>    End_Function
35034>>>>>>>    
35034>>>>>>>    // This sets a default value without setting the DSO's changed_State
35034>>>>>>>    Procedure Set Field_Default_Value Integer iField String sValue
35036>>>>>>>        Integer iOldState
35036>>>>>>>        Get Change_disabled_State to iOldState
35037>>>>>>>        Set Change_disabled_State to True
35038>>>>>>>        Set Field_Changed_Value iField to sValue
35039>>>>>>>        Set Change_disabled_State to iOldState
35040>>>>>>>    End_Procedure
35041>>>>>>>    
35041>>>>>>>    Procedure Set File_Field_default_Value Integer iFile Integer iField String sValue
35043>>>>>>>        Integer iDSO
35043>>>>>>>        Get Data_set iFile to iDSO
35044>>>>>>>        If iDSO ;            Set Field_default_Value of iDSO iField to sValue
35047>>>>>>>    End_Procedure
35048>>>>>>>    
35048>>>>>>>    // Methods to set and get the value of a field. When set all DSOs and
35048>>>>>>>    // DEOs are notified.
35048>>>>>>>    Procedure Set File_Field_Current_Value Integer iFile Integer iField String sValue
35050>>>>>>>        Integer iDSO
35050>>>>>>>        Get Data_set iFile to iDSO
35051>>>>>>>        If iDSO ;            Set Field_Current_Value of iDSO iField to sValue
35054>>>>>>>    End_Procedure
35055>>>>>>>    
35055>>>>>>>    Procedure Set File_Field_Changed_Value Integer iFile Integer iField String sValue
35057>>>>>>>        Integer iDSO
35057>>>>>>>        Get Data_set iFile to iDSO
35058>>>>>>>        If iDSO ;            Set Field_Changed_Value of iDSO iField to sValue
35061>>>>>>>    End_Procedure
35062>>>>>>>    
35062>>>>>>>    Function File_Field_Current_Value Integer iFile Integer iField Returns String
35064>>>>>>>        Integer iDSO
35064>>>>>>>        String sValue
35064>>>>>>>        Get Data_set iFile to iDSO
35065>>>>>>>        If iDSO ;            Get Field_Current_Value of iDSO iField to sValue
35068>>>>>>>        Function_Return sValue
35069>>>>>>>    End_Function
35070>>>>>>>    
35070>>>>>>>    // This procedure will notify every attached DEO that the value of a
35070>>>>>>>    // field has been changed. Every DEO needs to update its value to reflect
35070>>>>>>>    // the new value.
35070>>>>>>>    Procedure Field_Value_Changed Integer iField String sValue
35072>>>>>>>        Integer iMax
35072>>>>>>>        Integer iCount
35072>>>>>>>        Integer iDEO
35072>>>>>>>        Integer iMain_File
35072>>>>>>>        Integer iNoChange
35072>>>>>>>        Get Change_Disabled_State to iNoChange
35073>>>>>>>        Get Main_File to iMain_File
35074>>>>>>>        Get Data_Set_User_Interface_Count to iMax
35075>>>>>>>        Decrement iMax
35076>>>>>>>        For iCount from 0 to iMax
35082>>>>>>>>
35082>>>>>>>            Get Data_Set_User_Interface iCount to iDEO
35083>>>>>>>            If (Extended_DEO_State(iDEO) ) Begin
35085>>>>>>>                Send File_Field_Value_Changed to iDEO iMain_File iField sValue iNoChange
35086>>>>>>>            End
35086>>>>>>>>
35086>>>>>>>        Loop
35087>>>>>>>>
35087>>>>>>>    End_Procedure
35088>>>>>>>    
35088>>>>>>>    // Gets/Sets Field_Changed_State of the passed field. Will Set Changed_
35088>>>>>>>    // state if appropriate (if change_disabled_state is false)
35088>>>>>>>    Function Field_Changed_State Integer iField Returns Integer
35090>>>>>>>        Function_Return ;            (Item_Changed_State(Record_Buffer(Self), iField))
35091>>>>>>>    End_Function
35092>>>>>>>    
35092>>>>>>>    
35092>>>>>>>    // Handle NoPut here. If the field is noput set the field_changed_State but do not set the
35092>>>>>>>    // DD's changed_state. As of 17.0, we changed the rule so that noput DEOs always update the DD.
35092>>>>>>>    // They set the field_Current_value and they set the field_changed_state. If noput they will
35092>>>>>>>    // not set changed_state. This now makes windows and web consistent.
35092>>>>>>>    Procedure Set Field_Changed_State Integer iField Integer iState
35094>>>>>>>        Boolean bNoPut bOldSt bIsCommitted
35094>>>>>>>        
35094>>>>>>>        Get Field_Option iField DD_NOPUT to bNoPut
35095>>>>>>>        If not bNoPut Begin // if not noput, see if this is a committed and therefore noput
35097>>>>>>>            Get IsCommitted to bIsCommitted
35098>>>>>>>            If bIsCommitted Begin
35100>>>>>>>                Get IsFieldCommitted iField to bNoPut
35101>>>>>>>            End
35101>>>>>>>>
35101>>>>>>>        End
35101>>>>>>>>
35101>>>>>>>        
35101>>>>>>>        If bNoPut Begin
35103>>>>>>>            Get Change_disabled_State to bOldSt
35104>>>>>>>            Set Change_disabled_State to True
35105>>>>>>>        End
35105>>>>>>>>
35105>>>>>>>        
35105>>>>>>>        Set Item_Changed_State of (Record_Buffer(Self)) iField to iState
35106>>>>>>>        // the cDDBuffer class item_changed_state does not attempt to set
35106>>>>>>>        // changed_state, so we do it here. This will allow for future
35106>>>>>>>        // greater flexibilities.
35106>>>>>>>        If (iState) Begin
35108>>>>>>>            Set Changed_State of (Record_Buffer(Self)) to True
35109>>>>>>>        End
35109>>>>>>>>
35109>>>>>>>        If bNoPut Begin
35111>>>>>>>            Set Change_disabled_State to bOldSt
35112>>>>>>>        End
35112>>>>>>>>
35112>>>>>>>        
35112>>>>>>>    End_Procedure
35113>>>>>>>    
35113>>>>>>>    // As above, but passes both file and field
35113>>>>>>>    Function File_Field_Changed_State Integer iFile Integer iField Returns Integer
35115>>>>>>>        Integer iDSO
35115>>>>>>>        Get Data_Set iFile to iDSO
35116>>>>>>>        If iDSO ;            Function_Return (Field_Changed_State(iDSO, iField))
35119>>>>>>>    End_Function
35120>>>>>>>    
35120>>>>>>>    Procedure Set File_Field_Changed_State Integer iFile Integer iField Integer iState
35122>>>>>>>        Integer iDSO
35122>>>>>>>        Get Data_Set iFile to iDSO
35123>>>>>>>        If iDSO ;            Set Field_Changed_State of iDSO iField to iState
35126>>>>>>>    End_Procedure
35127>>>>>>>    
35127>>>>>>>    // This simulates entering a value into a field from a keyboard. Pass the
35127>>>>>>>    // Field and DD Options and the value. It is up to you to pass the proper
35127>>>>>>>    // DD options. This is normally sent by File_Field_Entry and you are
35127>>>>>>>    // advised to use that message and not this one.
35127>>>>>>>    Procedure Set Field_Entry Integer iField Integer iOpts Integer bShowErr String sValue
35129>>>>>>>        Integer iFile
35129>>>>>>>        Integer iType
35129>>>>>>>        Integer bChanged
35129>>>>>>>        Integer bInvalid
35129>>>>>>>        Integer hObj
35129>>>>>>>        String sOldVal
35129>>>>>>>        Address pData
35129>>>>>>>        Integer iLen
35129>>>>>>>        
35129>>>>>>>        Get Main_File to iFile
35130>>>>>>>        
35130>>>>>>>        // if No-enter or Displayonly, this shouldn't be changed. We will
35130>>>>>>>        // let NoPut through, since a user might need it for finding.
35130>>>>>>>        If (iOpts iand DD_NOENTER) ;            Procedure_Return
35133>>>>>>>        
35133>>>>>>>        // Force a caplsock if required
35133>>>>>>>        If (iOpts iand DD_CAPSLOCK) ;            Move (Uppercase(sValue)) to sValue
35136>>>>>>>        
35136>>>>>>>        // If date or number, force conversion so any error is detected before
35136>>>>>>>        // the buffer is updated. We don't want the record buffer to contain
35136>>>>>>>        // invalid data
35136>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
35139>>>>>>>        
35139>>>>>>>        // Overlap fields are not supported directly in DDs. It is expected
35139>>>>>>>        // that you will use the underlying fields instead
35139>>>>>>>        If (iType = DF_OVERLAP) Begin
35141>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_OVERLAP_ERROR
35142>>>>>>>            Procedure_Return
35143>>>>>>>        End
35143>>>>>>>>
35143>>>>>>>        
35143>>>>>>>        If (iType=DF_TEXT or iType=DF_BINARY) Begin // if text or binary direct to pointer
35145>>>>>>>            Move sValue to sValue // intentional code: make sure passed sValue is a really string
35146>>>>>>>            Move (SizeOfString(sValue)) to iLen // length to copy
35147>>>>>>>            Move (AddressOf(sValue)) to pData   // first byte of string
35148>>>>>>>            // will gen error if ext. field does not exist
35148>>>>>>>            Set Field_Pointer_Entry iField iOpts iLen bShowErr to pData
35149>>>>>>>            Procedure_Return
35150>>>>>>>        End
35150>>>>>>>>
35150>>>>>>>        
35150>>>>>>>        Get IsDataInvalid iType sValue to bInvalid
35151>>>>>>>        If bInvalid Begin     // If an error occurred we have
35153>>>>>>>            If bShowErr ;                Send Data_set_error iField (If(iType=DF_DATE or iType=DF_DATETIME, DFERR_ENTER_VALID_DATE, DFERR_BAD_ENTRY)) ;                (" ("-sValue-")")
35156>>>>>>>            Procedure_Return  // a bad number or a bad date. Do no more!
35157>>>>>>>        End
35157>>>>>>>>
35157>>>>>>>        // update the value only if the value is changed.
35157>>>>>>>        Move (Record_Buffer(Self)) to hObj
35158>>>>>>>        Get Value of hObj iField to sOldVal
35159>>>>>>>        If (iType=DF_BCD) ;            Move (Number(sValue)<>Number(sOldVal)) to bChanged
35162>>>>>>>        Else If (iType=DF_DATE) ;            Move (Date(sValue)<>Date(sOldVal)) to bChanged
35166>>>>>>>        Else If (iType=DF_DATETIME) ;            Move (Cast(sValue,DateTime)<>Cast(sOldVal,DateTime)) to bChanged
35170>>>>>>>        Else ;            Move (sValue<>sOldVal) to bChanged
35172>>>>>>>        
35172>>>>>>>        // if changed or force put, update the value.
35172>>>>>>>        If ( bChanged or (iOpts iand DD_FORCEPUT) ) ;            Set Field_Current_Value iField to sValue
35175>>>>>>>        
35175>>>>>>>        // Set changed state if changed. This is an improvement on DEOs which would set changed-state for
35175>>>>>>>        // a no-put. Set Field_Changed_State will not set Changed_state if it is noput
35175>>>>>>>        If ( bChanged) Begin
35177>>>>>>>            Set Field_Changed_State iField to True
35178>>>>>>>            // if noput (but not noenter) we must tell the DDO that this should not be
35178>>>>>>>            // updated during a save.
35178>>>>>>>            If (iOpts iand DD_NOPUT) Begin
35180>>>>>>>                Set Field_NoPutValueChangedByDeo iField to True
35181>>>>>>>            End
35181>>>>>>>>
35181>>>>>>>        End
35181>>>>>>>>
35181>>>>>>>        
35181>>>>>>>        // perform autofinds if needed. Note that required checking will occur as
35181>>>>>>>        // part of validation.
35181>>>>>>>        // We will only autofind if the field value is changed. This is consistent with
35181>>>>>>>        // DEOs which do not autofind on unchanged values. This provides optimizations
35181>>>>>>>        // when a parent record is already loaded.
35181>>>>>>>        If (bChanged or Field_Changed_state(Self,iField)) Begin
35183>>>>>>>            // note that autofind is 1 and _ge is 100000001 (8th bit set). So order of
35183>>>>>>>            // testing is important and make sure we test for exact bit match. Must first
35183>>>>>>>            // test _GE and the EQ (because EQ bit is part of GE)
35183>>>>>>>            If ((iOpts iand DD_AUTOFIND_GE)=DD_AUTOFIND_GE) ;                Send File_Field_AutoFind iFile iField GE
35186>>>>>>>            Else If ((iOpts iand DD_AUTOFIND)=DD_AUTOFIND) ;                Send File_Field_AutoFind iFile iField EQ
35190>>>>>>>        End
35190>>>>>>>>
35190>>>>>>>        
35190>>>>>>>    End_Procedure
35191>>>>>>>    
35191>>>>>>>    // This returns file-field options for a Field_Entry type of environment.
35191>>>>>>>    // It will strip autofind from main-file DDs but leave foreign field alone.
35191>>>>>>>    // This is needed for Field_entry. Otherwise adding a field value to an autofind
35191>>>>>>>    // for save or find causes an autofind to trigger first which either causes the
35191>>>>>>>    // wrong rec to save or for a double find.
35191>>>>>>>    Function File_Field_Entry_Options Integer iFile Integer iField Returns Integer
35193>>>>>>>        Integer iOpts
35193>>>>>>>        // this will get the appropriate field and foreign field opts
35193>>>>>>>        Get File_Field_Options iFile iField to iOpts
35194>>>>>>>        // If the main file (not foreign) we will strip autofind. Autofind should not
35194>>>>>>>        // be an automatic part of main file entry while it should with foreign fields.
35194>>>>>>>        If (iFile=Main_File(Self)) Begin
35196>>>>>>>            // note that autofind is 1 and _ge is 100000001 (8th bit set). So order of
35196>>>>>>>            // testing is important and make sure we test for exact bit match. Must first
35196>>>>>>>            // test _GE and the EQ (because EQ bit is part of GE)
35196>>>>>>>            If ((iOpts iand DD_AUTOFIND_GE)=DD_AUTOFIND_GE) ;                Move (iOpts - DD_AUTOFIND_GE) to iOpts
35199>>>>>>>            Else If ((iOpts iand DD_AUTOFIND)=DD_AUTOFIND)  ;                Move (iOpts - DD_AUTOFIND)    to iOpts
35203>>>>>>>        End
35203>>>>>>>>
35203>>>>>>>        Function_Return iOpts
35204>>>>>>>    End_Function
35205>>>>>>>    
35205>>>>>>>    // This simulates entering a value into a field from a keyboard. The DD
35205>>>>>>>    // receiving this message determines if it is Main or Foreign (just like
35205>>>>>>>    // server). It will do an uppercase, will respect No_Enter and DisplayOnly
35205>>>>>>>    // and will do a autofind if required. It does not do a field validation.
35205>>>>>>>    Procedure Set File_Field_Entry Integer iFile Integer iField Integer bShowErr String sValue
35207>>>>>>>        Integer iOpts
35207>>>>>>>        Integer hDD
35207>>>>>>>        Get Data_Set iFile to hDD
35208>>>>>>>        If hDD Begin
35210>>>>>>>            // this will get the appropriate field and foreign field opts
35210>>>>>>>            Get File_Field_Entry_Options iFile iField to iOpts
35211>>>>>>>            Set Field_Entry of hDD iField iOpts bShowErr to sValue
35212>>>>>>>        End
35212>>>>>>>>
35212>>>>>>>    End_Procedure
35213>>>>>>>    
35213>>>>>>>    // return object ID of extended field, 0 if none
35213>>>>>>>    Function Field_Object Integer iField Returns Integer
35215>>>>>>>        Integer hoFlds hoField
35215>>>>>>>        Boolean bAutoAssign
35215>>>>>>>        Get Field_Objects to hoFlds
35216>>>>>>>        If hoFlds Begin
35218>>>>>>>            Get Field_Object of hoFlds iField to hoField
35219>>>>>>>        End
35219>>>>>>>>
35219>>>>>>>        If not hoField Begin
35221>>>>>>>            Send DefineExtendedField iField // will create field_objects and Field_Object as needed
35222>>>>>>>            Get Field_Objects to hoFlds
35223>>>>>>>            Get Field_Object of hoFlds iField to hoField
35224>>>>>>>        End
35224>>>>>>>>
35224>>>>>>>        Function_Return hoField
35225>>>>>>>    End_Function
35226>>>>>>>    
35226>>>>>>>    // This is the same as Field_entry except the value is passed via a
35226>>>>>>>    // pointer. If data-type is extended (text/binary) it will use and an
35226>>>>>>>    // extended field object to handle this. If date/number/string we will
35226>>>>>>>    // convert this to a string and use Field_Entry. It is the caller's
35226>>>>>>>    // responsibility to pass a valid pointer to valid data...else !@#$%^&^
35226>>>>>>>    // If an extended Field object is needed and not defined, an error is
35226>>>>>>>    // returned. If pointer is null, assume empty string passed (this is a
35226>>>>>>>    // change as of 8.3 - it used to ignore null pointers)
35226>>>>>>>    Procedure Set Field_Pointer_Entry Integer iField Integer iOpts Integer iLen Integer bShowErr Address pData
35228>>>>>>>        Integer hFld
35228>>>>>>>        String  sValue
35228>>>>>>>        Integer iFile
35228>>>>>>>        Integer iType
35228>>>>>>>        
35228>>>>>>>        Get Main_file to iFile
35229>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
35232>>>>>>>        
35232>>>>>>>        // Overlap fields are not supported directly in DDs. It is expected
35232>>>>>>>        // that you will use the underlying fields instead
35232>>>>>>>        If (iType = DF_OVERLAP) ;            Send Data_set_Error iField DFERR_PROGRAM  DD_EXTENDED_OVERLAP_ERROR
35235>>>>>>>        Else If (iType=DF_TEXT or iType=DF_BINARY) Begin
35238>>>>>>>            Get Field_Object iField to hFld // the object that handles this large text
35239>>>>>>>            If hFld ;                Set Field_pEntry of hFld iOpts iLen bShowErr to pData
35242>>>>>>>            Else ;                Send Data_set_Error iField DFERR_PROGRAM  DD_EXTENDED_FIELD_NOT_DEFINED
35244>>>>>>>        End
35244>>>>>>>>
35244>>>>>>>        Else Begin
35245>>>>>>>            // if number,date or string convert the pointer data to
35245>>>>>>>            // string data and do a normal entry with it.
35245>>>>>>>            Move (PointerToString(pData)) to sValue
35246>>>>>>>            Set Field_Entry iField iOpts bShowErr to sValue
35247>>>>>>>        End
35247>>>>>>>>
35247>>>>>>>    End_Procedure
35248>>>>>>>    
35248>>>>>>>    // This is the same as File_Field_entry except the value is passed via a
35248>>>>>>>    // pointer. See Field_Pointer_Entry for more on this
35248>>>>>>>    Procedure Set File_Field_Pointer_Entry Integer iFile Integer iField Integer iLen Integer bShowErr Address pData
35250>>>>>>>        Integer iOpts
35250>>>>>>>        Integer hDD
35250>>>>>>>        Get Data_Set iFile to hDD
35251>>>>>>>        If hDD Begin
35253>>>>>>>            // this will get the appropriate field and foreign field opts
35253>>>>>>>            Get File_Field_Entry_Options iFile iField to iOpts
35254>>>>>>>            Set Field_Pointer_Entry of hDD iField iOpts iLen bShowErr to pData
35255>>>>>>>        End
35255>>>>>>>>
35255>>>>>>>    End_Procedure
35256>>>>>>>    
35256>>>>>>>    // This is the same as Field_Current_Value except the value is passed via
35256>>>>>>>    // a pointer. If data-type is extended (text/binary) it will use and an
35256>>>>>>>    // extended field object to handle this. If date/number/string we will
35256>>>>>>>    // convert this to a string and use Field_Entry. It is the caller's
35256>>>>>>>    // responsibility to pass a valid pointer to valid data...else !@#$%^&^
35256>>>>>>>    // If an extended Field object is needed and not defined, an error is
35256>>>>>>>    // returned. If pointer is null, assume empty string passed (this is a
35256>>>>>>>    // change as of 8.3 - it used to ignore null pointers)
35256>>>>>>>    Procedure Set Field_Current_Pointer_Value Integer iField Integer iLen Address pData
35258>>>>>>>        Integer hFld
35258>>>>>>>        String  sValue
35258>>>>>>>        Integer iFile iType iCrnt
35258>>>>>>>        Handle iFocObj
35258>>>>>>>        Boolean bChanged
35258>>>>>>>        
35258>>>>>>>        Get Main_file to iFile
35259>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iType
35262>>>>>>>        
35262>>>>>>>        // Overlap fields are not supported directly in DDs. It is expected
35262>>>>>>>        // that you will use the underlying fields instead
35262>>>>>>>        If (iType = DF_OVERLAP) Begin
35264>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_OVERLAP_ERROR
35265>>>>>>>            Procedure_Return
35266>>>>>>>        End
35266>>>>>>>>
35266>>>>>>>        
35266>>>>>>>        If (iType<>DF_TEXT and iType<>DF_BINARY) Begin
35268>>>>>>>            // if number,date or string convert the pointer data to
35268>>>>>>>            // string data and do a normal entry with it.
35268>>>>>>>            Move (PointerToString(pData)) to sValue  // create string from pointer data
35269>>>>>>>            Set Field_Current_Value iField to sValue
35270>>>>>>>            Procedure_Return
35271>>>>>>>        End
35271>>>>>>>>
35271>>>>>>>        
35271>>>>>>>        Get Field_Object iField to hFld // the object that handles this large text
35272>>>>>>>        If not hFld Begin
35274>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_FIELD_NOT_DEFINED
35275>>>>>>>            Procedure_Return
35276>>>>>>>        End
35276>>>>>>>>
35276>>>>>>>        
35276>>>>>>>        Get Is_pValueChanged of hFld iLen pData to bChanged
35277>>>>>>>        If bChanged Begin
35279>>>>>>>            Set Field_pValue of hFld iLen to pData
35280>>>>>>>            Send Field_Pointer_Value_Changed iField pData
35281>>>>>>>        End
35281>>>>>>>>
35281>>>>>>>        Else Begin
35282>>>>>>>            // If here the set value did not change the contents of the DD.
35282>>>>>>>            // However, it is possible that the current focus DEO may contain
35282>>>>>>>            // a different value than the one we are setting. In such a case
35282>>>>>>>            // we must re-synchronize the DEO. Only the one DEO can be affected
35282>>>>>>>            // because it is the current focus deo/item that can contain a value
35282>>>>>>>            // that is not yet updated in the DD. This fixes a bug where the
35282>>>>>>>            // iexit was setting a value which was different from what was in
35282>>>>>>>            // the DEO but was the same as the old DD value (iExit is called
35282>>>>>>>            // before the DD is re-synched with the DEO). This could happen
35282>>>>>>>            // also by sending this message directly with a different value in
35282>>>>>>>            // the DEO focus item.
35282>>>>>>>            Get Focus of Desktop to iFocObj
35283>>>>>>>            // similar logic to Get Field_Pointer_Current_Value. We check that the DEO
35283>>>>>>>            // is extended, that entry_refresh is not disabled and that the
35283>>>>>>>            // DEO's server is this DD.
35283>>>>>>>            If ( Extended_DEO_State(iFocObj) and (Entry_Refresh_State(iFocObj)=0)) Begin
35285>>>>>>>                // If Focus DEO has same file and field and it is not checkbox
35285>>>>>>>                // we must set its value. Set local value directly sets the value
35285>>>>>>>                // in the DEO item. If we used value we'd get recursion!
35285>>>>>>>                Get Current_item of iFocObj to iCrnt
35286>>>>>>>                If ( Data_File(iFocObj,iCrnt)=iFile and ;                    Data_Field(iFocObj,iCrnt)=iField and ;                    IsDEOOwned(Self,iFocObj) ) Begin
35288>>>>>>>                    Send File_Field_Pointer_Value_Changed to iFocObj iFile iField pData True
35289>>>>>>>                End
35289>>>>>>>>
35289>>>>>>>            End
35289>>>>>>>>
35289>>>>>>>        End
35289>>>>>>>>
35289>>>>>>>    End_Procedure
35290>>>>>>>    
35290>>>>>>>    // This is never called but it needed for the compiler. Required for apps DDs that don't compile in a DEO interface
35290>>>>>>>    Procedure File_Field_Pointer_Value_Changed Integer iFile Integer iField Address pValue Integer iChangeDisabled
35292>>>>>>>    End_Procedure
35293>>>>>>>    
35293>>>>>>>    Procedure Field_Pointer_Value_Changed Integer iField Address pValue
35295>>>>>>>        Integer iMax
35295>>>>>>>        Integer iCount
35295>>>>>>>        Integer iDEO
35295>>>>>>>        Integer iMain_File
35295>>>>>>>        Integer iNoChange
35295>>>>>>>        Get Change_Disabled_State to iNoChange
35296>>>>>>>        Get Main_File to iMain_File
35297>>>>>>>        Get Data_Set_User_Interface_Count to iMax
35298>>>>>>>        Decrement iMax
35299>>>>>>>        For iCount from 0 to iMax
35305>>>>>>>>
35305>>>>>>>            Get Data_Set_User_Interface iCount to iDEO
35306>>>>>>>            If (Extended_DEO_State(iDEO) ) Begin
35308>>>>>>>                Send File_Field_Pointer_Value_Changed to iDEO iMain_File iField pValue iNoChange
35309>>>>>>>            End
35309>>>>>>>>
35309>>>>>>>        Loop
35310>>>>>>>>
35310>>>>>>>    End_Procedure
35311>>>>>>>    
35311>>>>>>>    // This is the same as File_Field_Current_Value except the value is passed
35311>>>>>>>    // via a pointer. See Field_current_Pointer_Value for more on this
35311>>>>>>>    Procedure Set File_Field_Current_Pointer_Value Integer iFile Integer iField Integer iLen Address pData
35313>>>>>>>        Integer hDD
35313>>>>>>>        Get Data_Set iFile to hDD
35314>>>>>>>        If hDD ;            Set Field_Current_Pointer_Value of hDD iField iLen to pData
35317>>>>>>>    End_Procedure
35318>>>>>>>    
35318>>>>>>>    // This returns the data pointer to the extended field. At this point
35318>>>>>>>    // this is the data. Be careful if you change the data, be even more
35318>>>>>>>    // careful if you change the pointer (don't do it!!!!)
35318>>>>>>>    Function Field_Current_Pointer_Value Integer iField Returns Address
35320>>>>>>>        Integer hFld
35320>>>>>>>        Handle iFoc
35320>>>>>>>        
35320>>>>>>>        Get Field_Object iField to hFld // the object that handles this large text
35321>>>>>>>        If not hFld Begin
35323>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_FIELD_NOT_DEFINED
35324>>>>>>>            Function_Return 0
35325>>>>>>>        End
35325>>>>>>>>
35325>>>>>>>        
35325>>>>>>>        
35325>>>>>>>        // This was extended to also make sure that the focus's server
35325>>>>>>>        // is this DD. This prevent the (very unlikely) case of a focus
35325>>>>>>>        // file/field being the right file/field but for a different view.
35325>>>>>>>        // 12.1: Also check operation mode, if within an operation assume that the
35325>>>>>>>        // ddos have the information they need from the deos. During a refresh we don't
35325>>>>>>>        // the data to be taken from a DEO - the DD buffer has the information you want. Note that
35325>>>>>>>        // we also changed all methods that set operation_mode to update the DD with the current
35325>>>>>>>        // DEO field, so the buffer is always correct.
35325>>>>>>>        Get Focus of Desktop to iFoc
35326>>>>>>>        If ( (OPERATION_MODE=MODE_WAITING) and ;            Extended_DEO_State(iFoc) and (Entry_Refresh_State(iFoc)=0) ) Begin
35328>>>>>>>            If ( Data_File(iFoc,0)=Main_File(Self) and Data_Field(iFoc,0)=iField and ;                IsDEOOwned(Self,iFoc) ) Begin
35330>>>>>>>                Send Update_Focus_Field
35331>>>>>>>            End
35331>>>>>>>>
35331>>>>>>>        End
35331>>>>>>>>
35331>>>>>>>        
35331>>>>>>>        Function_Return (FieldPointer(hFld))
35332>>>>>>>    End_Function
35333>>>>>>>    
35333>>>>>>>    
35333>>>>>>>    Function Field_Current_UCAValue Integer iField Returns UChar[]
35335>>>>>>>        Integer hFld
35335>>>>>>>        Handle iFoc
35335>>>>>>>        UChar[] Data
35336>>>>>>>        
35336>>>>>>>        Get Field_Object iField to hFld // the object that handles this large text
35337>>>>>>>        If not hFld Begin
35339>>>>>>>            Send Data_set_Error iField DFERR_PROGRAM DD_EXTENDED_FIELD_NOT_DEFINED
35340>>>>>>>            Function_Return 0
35341>>>>>>>        End
35341>>>>>>>>
35341>>>>>>>        
35341>>>>>>>        
35341>>>>>>>        // This was extended to also make sure that the focus's server
35341>>>>>>>        // is this DD. This prevent the (very unlikely) case of a focus
35341>>>>>>>        // file/field being the right file/field but for a different view.
35341>>>>>>>        // 12.1: Also check operation mode, if within an operation assume that the
35341>>>>>>>        // ddos have the information they need from the deos. During a refresh we don't
35341>>>>>>>        // the data to be taken from a DEO - the DD buffer has the information you want. Note that
35341>>>>>>>        // we also changed all methods that set operation_mode to update the DD with the current
35341>>>>>>>        // DEO field, so the buffer is always correct.
35341>>>>>>>        Get Focus of Desktop to iFoc
35342>>>>>>>        If ( (OPERATION_MODE=MODE_WAITING) and ;            Extended_DEO_State(iFoc) and (Entry_Refresh_State(iFoc)=0) ) Begin
35344>>>>>>>            If ( Data_File(iFoc,0)=Main_File(Self) and Data_Field(iFoc,0)=iField and ;                IsDEOOwned(Self,iFoc) ) Begin
35346>>>>>>>                Send Update_Focus_Field
35347>>>>>>>            End
35347>>>>>>>>
35347>>>>>>>        End
35347>>>>>>>>
35347>>>>>>>        Get FieldArray of hFld to Data
35348>>>>>>>        Function_Return Data
35349>>>>>>>    End_Function
35350>>>>>>>    
35350>>>>>>>    Function File_Field_Current_Pointer_Value Integer iFile Integer iField Returns Address
35352>>>>>>>        Address pValue
35352>>>>>>>        Integer hDD
35352>>>>>>>        Get Data_Set iFile to hDD
35353>>>>>>>        If hDD Begin
35355>>>>>>>            Get Field_Current_Pointer_Value of hDD iField to pValue // return pointer to first byte of
35356>>>>>>>            Function_Return pValue                                  // data
35357>>>>>>>        End
35357>>>>>>>>
35357>>>>>>>    End_Function
35358>>>>>>>    
35358>>>>>>>    Procedure Set Field_Current_UCAValue Integer iField UChar[] Data
35360>>>>>>>        Set Field_Current_Pointer_Value iField (SizeOfArray(Data)) to (AddressOf(Data))
35361>>>>>>>    End_Procedure
35362>>>>>>>    
35362>>>>>>>    Procedure Set File_Field_Current_UCAValue Integer iFile Integer iField UChar[] Data
35364>>>>>>>        Integer hDD
35364>>>>>>>        Get Data_Set iFile to hDD
35365>>>>>>>        If hDD Begin
35367>>>>>>>            Set Field_Current_UCAValue of hDD iField to Data
35368>>>>>>>        End
35368>>>>>>>>
35368>>>>>>>    End_Procedure
35369>>>>>>>    
35369>>>>>>>    Function File_Field_Current_UCAValue Integer iFile Integer iField Returns UChar[]
35371>>>>>>>        UChar[] UCValue
35372>>>>>>>        Handle hDD
35372>>>>>>>        Get Data_Set iFile to hDD
35373>>>>>>>        If hDD Begin
35375>>>>>>>            Get Field_Current_UCAValue of hDD iField to UCValue // return pointer to first byte of
35376>>>>>>>            Function_Return UCValue                              // data
35377>>>>>>>        End
35377>>>>>>>>
35377>>>>>>>    End_Function
35378>>>>>>>    
35378>>>>>>>    // Create an extended field object for the passed field. .
35378>>>>>>>    // If field already exists, do nothing. This should only be used with
35378>>>>>>>    // text and binary fields.
35378>>>>>>>    Procedure DefineExtendedField Integer iField
35380>>>>>>>        Integer hFlds
35380>>>>>>>        Get Field_Objects to hFlds // this may not be created yet.
35381>>>>>>>        If not hFlds Begin         // if not created, create extended-fields wrapper
35383>>>>>>>            Object ExtendedFieldObjects is a FieldObjects
35385>>>>>>>                Move Self to hFlds
35386>>>>>>>            End_Object
35387>>>>>>>            Set Field_Objects to hFlds
35388>>>>>>>        End
35388>>>>>>>>
35388>>>>>>>        Send DefineFieldObject to hFlds iField
35389>>>>>>>    End_Procedure
35390>>>>>>>    
35390>>>>>>>    // create extended DD fields for all text and binary files
35390>>>>>>>    Procedure DefineAllExtendedFields
35392>>>>>>>        Integer iCount iType iField iFile
35392>>>>>>>        Get Main_file to iFile
35393>>>>>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iFile to iCount
35396>>>>>>>        For iField from 1 to iCount
35402>>>>>>>>
35402>>>>>>>            Get_Attribute DF_FIELD_TYPE of iFile iField to iType
35405>>>>>>>            If (iType=DF_TEXT or iType=DF_BINARY) ; // if text or binary                Send DefineExtendedField iField
35408>>>>>>>        Loop
35409>>>>>>>>
35409>>>>>>>    End_Procedure
35410>>>>>>>    
35410>>>>>>>    // Update Extended fields to FileBuffer.  DD-Fields ---> FileBuffer
35410>>>>>>>    // Private
35410>>>>>>>    Procedure ExtendedFieldsUpdate Integer bSave
35412>>>>>>>        Integer hFlds
35412>>>>>>>        Get Field_Objects to hFlds
35413>>>>>>>        If hFlds ;            Send ExtendedFieldsUpdate to hFlds bSave
35416>>>>>>>    End_Procedure
35417>>>>>>>    
35417>>>>>>>    // Refresh Extended field from FileBuffer.  DD-Fields <--- FileBuffer
35417>>>>>>>    // Private
35417>>>>>>>    Procedure ExtendedFieldsRefresh Boolean bCleared
35419>>>>>>>        Integer hFlds
35419>>>>>>>        Get Field_Objects to hFlds
35420>>>>>>>        If hFlds ;            Send ExtendedFieldsRefresh to hFlds bCleared
35423>>>>>>>    End_Procedure
35424>>>>>>>    
35424>>>>>>>    // This procedure can be used to set the Item_Options of a field. This can
35424>>>>>>>    // be passed any number of arguments.
35424>>>>>>>    // Support the following special first parameters:
35424>>>>>>>    //      DD_CLEAR_FIELD_OPTIONS     - clear all following passed otpions
35424>>>>>>>    //      DD_CLEAR_ALL_FIELD_OPTIONS - clear all options
35424>>>>>>>    Procedure Set Field_Options Integer iField Integer iArg1 // plus unknown arguments
35426>>>>>>>        Integer iObj
35426>>>>>>>        Integer iOptions
35426>>>>>>>        Integer iOption
35426>>>>>>>        Integer iArg
35426>>>>>>>        Integer iClear
35426>>>>>>>        Integer iType
35426>>>>>>>        Move (Record_Buffer(Self)) to iObj
35427>>>>>>>        Get Item_Options of iObj iField to iOptions
35428>>>>>>>        //
35428>>>>>>>        For iArg from 2 to Num_Arguments
35434>>>>>>>>
35434>>>>>>>            Move iArg& to iOption // tricky way to parse passed arguments
35435>>>>>>>            
35435>>>>>>>            If (iOption = DD_CLEAR_ALL_FIELD_OPTIONS) ;                Move 0 to iOptions
35438>>>>>>>            Else If (iOption = DD_CLEAR_FIELD_OPTIONS) ;                Move 1 to iClear
35442>>>>>>>            Else If not iClear ;                Move (iOptions ior iOption) to iOptions
35446>>>>>>>            Else ; // only unset bits already set! Note multiple bits can be passed                Move (iOptions - (iOptions iand iOption)) to iOptions
35448>>>>>>>        Loop
35449>>>>>>>>
35449>>>>>>>        //
35449>>>>>>>        //Get_Attribute DF_FIELD_TYPE of (Main_File(self)) iField to iType
35449>>>>>>>        //If (iType=DF_TEXT or iType=DF_BINARY) ;            // if text of binary
35449>>>>>>>        //    Move (iOptions iOR DD_DISPLAYONLY) to iOptions // make sure DO is set
35449>>>>>>>        
35449>>>>>>>        Set Item_Options of iObj iField to iOptions
35450>>>>>>>    End_Procedure
35451>>>>>>>    
35451>>>>>>>    // This function returns all the item_options which have been set for
35451>>>>>>>    // a field. The value from the Record_Buffer object will be binary or'ed
35451>>>>>>>    // with constand Default_Item_Options and the DD_AUTOCLEAR constants when
35451>>>>>>>    // the Autoclear_State of the field has been set.
35451>>>>>>>    // Keep in mind that Autoclear is *not* kept in the Item_Options
35451>>>>>>>    // property.
35451>>>>>>>    Function Field_Options Integer iField Returns Integer
35453>>>>>>>        Function_Return (Item_Options(Record_Buffer(Self), iField))
35454>>>>>>>    End_Function
35455>>>>>>>    
35455>>>>>>>    Function Field_Option Integer iField Integer iOption Returns Integer
35457>>>>>>>        Integer iOptions
35457>>>>>>>        Integer iState
35457>>>>>>>        Get Item_Options of (Record_Buffer(Self)) iField to iOptions
35458>>>>>>>        // All bits must match for it to be True (e.g., displayonly requires noput & noenter)
35458>>>>>>>        Move ((iOptions iand iOption)=iOption) to iState
35459>>>>>>>        Function_Return iState
35460>>>>>>>    End_Function
35461>>>>>>>    
35461>>>>>>>    
35461>>>>>>>    Procedure Set Foreign_Field_Options Integer iField Integer iArg1 // Integer iOption
35463>>>>>>>        Integer iObj
35463>>>>>>>        Integer iOptions
35463>>>>>>>        Integer iOption
35463>>>>>>>        Integer iArg
35463>>>>>>>        Integer iClear
35463>>>>>>>        
35463>>>>>>>        
35463>>>>>>>        Move (Record_Buffer(Self)) to iObj
35464>>>>>>>        Get Aux_Value of iObj iField to iOptions
35465>>>>>>>        //
35465>>>>>>>        For iArg from 2 to Num_Arguments
35471>>>>>>>>
35471>>>>>>>            Move iArg& to iOption // tricky way to parse passed arguments
35472>>>>>>>            If (iOption = DD_CLEAR_ALL_FIELD_OPTIONS) ;                Move 0 to iOptions
35475>>>>>>>            Else If (iOption = DD_CLEAR_FIELD_OPTIONS) ;                Move 1 to iClear
35479>>>>>>>            Else If not iClear ;                Move (iOptions ior iOption) to iOptions
35483>>>>>>>            Else ; // only unset bits already set! Note multiple bits can be passed                Move (iOptions - (iOptions iand iOption)) to iOptions
35485>>>>>>>        Loop
35486>>>>>>>>
35486>>>>>>>        //
35486>>>>>>>        Set Aux_Value of iObj iField to iOptions
35487>>>>>>>    End_Procedure
35488>>>>>>>    
35488>>>>>>>    Function Foreign_Field_Options Integer iField Returns Integer
35490>>>>>>>        Integer iOpts
35490>>>>>>>        Get ForeignFieldOptions of Record_Buffer iField to iOpts
35491>>>>>>>        Function_Return iOpts
35492>>>>>>>    End_Function
35493>>>>>>>    
35493>>>>>>>    Procedure Set Foreign_Field_Option Integer iField Integer iOption Integer bSet
35495>>>>>>>        If bSet Begin
35497>>>>>>>            Set Foreign_Field_Options iField to iOption
35498>>>>>>>        End
35498>>>>>>>>
35498>>>>>>>        Else Begin
35499>>>>>>>            Set Foreign_Field_Options iField to DD_CLEAR_FIELD_OPTIONS iOption
35500>>>>>>>        End
35500>>>>>>>>
35500>>>>>>>    End_Procedure
35501>>>>>>>    
35501>>>>>>>    Function Foreign_Field_Option Integer iField Integer iOption Returns Integer
35503>>>>>>>        Integer iOptions
35503>>>>>>>        Integer iState
35503>>>>>>>        Get Foreign_Field_Options iField to iOptions
35504>>>>>>>        Move ((iOptions iand iOption)=iOption) to iState
35505>>>>>>>        Function_Return iState
35506>>>>>>>    End_Function
35507>>>>>>>    
35507>>>>>>>    // This procedure is being used by DEOs when they need to copy the item-
35507>>>>>>>    // options from the Data_Set. When the filenumber being passed is not
35507>>>>>>>    // equal to the Main_File of this Data_Set, then the Foreign_Field_Options
35507>>>>>>>    // will be applied.
35507>>>>>>>    Function File_Field_Options Integer iFile Integer iField Returns Integer
35509>>>>>>>        Integer iDSO
35509>>>>>>>        Integer iMain_File
35509>>>>>>>        Integer iOpts
35509>>>>>>>        Integer iRB
35509>>>>>>>        Integer iType
35509>>>>>>>        Get Main_File to iMain_File
35510>>>>>>>        If (iFile <> iMain_File) ;            Get Data_Set iFile to iDSO
35513>>>>>>>        Else ;            Move Self to iDSO
35515>>>>>>>        If iDSO Begin
35517>>>>>>>            Get Field_Options of iDSO iField to iOpts
35518>>>>>>>            // we consider the item to be foreign if the DDO main file is different than the one
35518>>>>>>>            // passed and we do not allow foreign (parent) new records to be saved.
35518>>>>>>>            If (iFile<>iMain_File and Allow_Foreign_New_Save_State(iDSO)=0) ; // Add Foreign_Field_Options                Move (iOpts ior Foreign_Field_Options(iDSO, iField)) to iOpts
35521>>>>>>>            Function_Return iOpts
35522>>>>>>>        End
35522>>>>>>>>
35522>>>>>>>    End_Function
35523>>>>>>>    
35523>>>>>>>    
35523>>>>>>>    // Procedure to set the message to be sent on item entry.
35523>>>>>>>    Procedure Set Field_Entry_msg Integer iField Integer iMsg
35525>>>>>>>        Set Item_Entry_MSG of (Record_Buffer(Self)) iField to iMsg
35526>>>>>>>    End_Procedure
35527>>>>>>>    
35527>>>>>>>    // Function to return the message to be sent on item entry.
35527>>>>>>>    Function Field_Entry_msg Integer iField Returns Integer
35529>>>>>>>        Function_Return (Item_Entry_MSG(Record_Buffer(Self), iField))
35530>>>>>>>    End_Function
35531>>>>>>>    
35531>>>>>>>    
35531>>>>>>>    // Procedure to send the message to be sent on item exit.
35531>>>>>>>    Procedure Set Field_Exit_msg Integer iField Integer iMsg
35533>>>>>>>        Set Item_Exit_MSG of (Record_Buffer(Self)) iField to iMsg
35534>>>>>>>    End_Procedure
35535>>>>>>>    
35535>>>>>>>    // Function to return the message to be set on item exit.
35535>>>>>>>    Function Field_Exit_msg Integer iField Returns Integer
35537>>>>>>>        Function_Return (Item_Exit_MSG(Record_Buffer(Self), iField))
35538>>>>>>>    End_Function
35539>>>>>>>    
35539>>>>>>>    // Procedure to set the message to be sent on item validation.
35539>>>>>>>    Procedure Set Field_Validate_msg Integer iField Integer iMsg
35541>>>>>>>        Set Item_Validate_MSG of (Record_Buffer(Self)) iField to iMsg
35542>>>>>>>    End_Procedure
35543>>>>>>>    
35543>>>>>>>    // Function to return the message to be set on item validation.
35543>>>>>>>    Function Field_Validate_msg Integer iField Returns Integer
35545>>>>>>>        Function_Return (Item_Validate_MSG(Record_Buffer(Self), iField))
35546>>>>>>>    End_Function
35547>>>>>>>    
35547>>>>>>>    
35547>>>>>>>    // Used to Get/Set the Prompt_Object for a Field.
35547>>>>>>>    Procedure Set Field_Prompt_Object Integer iField Integer iObj
35549>>>>>>>        Set Prompt_Object of (Record_Buffer(Self)) iField to iObj
35550>>>>>>>    End_Procedure
35551>>>>>>>    
35551>>>>>>>    Function Field_Prompt_Object Integer iField Returns Integer
35553>>>>>>>        Integer iObj
35553>>>>>>>        Get Prompt_Object of (Record_Buffer(Self)) iField to iObj
35554>>>>>>>        If (iObj = 0) ;            Get Prompt_Object of (Field_Attributes(Self)) iField to iObj
35557>>>>>>>        Function_Return iObj
35558>>>>>>>    End_Function
35559>>>>>>>    
35559>>>>>>>    Procedure Set Field_Zoom_Object Integer iField Integer iObj
35561>>>>>>>        Set Zoom_Object of (Record_Buffer(Self)) iField to iObj
35562>>>>>>>    End_Procedure
35563>>>>>>>    
35563>>>>>>>    Function Field_Zoom_Object Integer iField Returns Integer
35565>>>>>>>        Function_Return (Zoom_Object(Record_Buffer(Self), iField))
35566>>>>>>>    End_Function
35567>>>>>>>    
35567>>>>>>>    
35567>>>>>>>    Procedure Set Field_WebPrompt_Object Integer iField Handle hoObj
35569>>>>>>>        Set Field_WebPrompt_Object of FieldMask_Array iField to hoObj
35570>>>>>>>    End_Procedure
35571>>>>>>>    
35571>>>>>>>    Function Field_WebPrompt_Object Integer iField Returns Handle
35573>>>>>>>        Handle hoPrompt
35573>>>>>>>        Get Field_WebPrompt_Object of FieldMask_Array iField to hoPrompt
35574>>>>>>>        Function_Return hoPrompt
35575>>>>>>>    End_Function
35576>>>>>>>    
35576>>>>>>>    
35576>>>>>>>    // Used to Get/Set the Prompt_Object for a Field.
35576>>>>>>>    Function File_Field_Prompt_Object Integer iFile Integer iField Returns Integer
35578>>>>>>>        Integer iObj
35578>>>>>>>        Get File_Field_Property iFile iField GET_Field_Prompt_Object to iObj
35579>>>>>>>        Function_Return iObj
35580>>>>>>>    End_Function
35581>>>>>>>    
35581>>>>>>>    Function File_Field_Zoom_Object Integer iFile Integer iField Returns Integer
35583>>>>>>>        Integer iObj
35583>>>>>>>        Get File_Field_Property iFile iField GET_Field_Zoom_Object to iObj
35584>>>>>>>        Function_Return iObj
35585>>>>>>>    End_Function
35586>>>>>>>    
35586>>>>>>>    Function File_Field_WebPrompt_Object Integer iFile Integer iField Returns Handle
35588>>>>>>>        Handle hoPrompt
35588>>>>>>>        Get File_Field_Property iFile iField GET_Field_WebPrompt_Object to hoPrompt
35589>>>>>>>        Function_Return hoPrompt
35590>>>>>>>    End_Function
35591>>>>>>>    
35591>>>>>>>    // Return the extended validation type for this field.
35591>>>>>>>    Function Field_Validation_Type Integer iField Returns Integer
35593>>>>>>>        Integer iType
35593>>>>>>>        Get Field_Validation_Type of (Field_Attributes(Self)) iField ;            to iType
35594>>>>>>>        Function_Return iType
35595>>>>>>>    End_Function
35596>>>>>>>    
35596>>>>>>>    // Procedure to define a valid value range for a field.
35596>>>>>>>    Procedure Set Field_Value_Range Integer iField String sMin String sMax
35598>>>>>>>        Set Field_Value_Range of (Field_Attributes(Self)) iField ;            to sMin sMax
35599>>>>>>>    End_Procedure
35600>>>>>>>    
35600>>>>>>>    
35600>>>>>>>    // Procedure to define a validate table for a field.
35600>>>>>>>    Procedure Set Field_Value_Table Integer iField Integer iObj
35602>>>>>>>        Set Field_Value_Table of (Field_Attributes(Self)) iField ;            to iObj
35603>>>>>>>    End_Procedure
35604>>>>>>>    
35604>>>>>>>    // This provides a callback to the calling object (iObj) by passing this
35604>>>>>>>    // object the message iMsg for each item in the table. Note this works for
35604>>>>>>>    // all extended validation types (range, check, etc.)
35604>>>>>>>    Procedure Field_Fill_List Integer iField Integer iObj Integer iMsg
35606>>>>>>>        Send Field_Fill_list to (Field_Attributes(Self)) ;            iField iObj iMsg
35607>>>>>>>    End_Procedure
35608>>>>>>>    
35608>>>>>>>    Procedure File_Field_Fill_List Integer iFile Integer iField ;            Integer iObj Integer iMsg
35610>>>>>>>        Integer iDSO
35610>>>>>>>        Get Data_set iFile to iDSO
35611>>>>>>>        If iDSO ;            Send Field_Fill_list to iDSO iField iObj iMsg
35614>>>>>>>    End_Procedure
35615>>>>>>>    
35615>>>>>>>    // Returns the ID if any of the validation table for this object.
35615>>>>>>>    Function Field_Table_Object Integer iField Returns Integer
35617>>>>>>>        Integer iRval
35617>>>>>>>        Get Field_Table_Object of (Field_Attributes(Self)) iField to iRVal
35618>>>>>>>        Function_Return iRVal
35619>>>>>>>    End_Function
35620>>>>>>>    
35620>>>>>>>    Function File_Field_Table_Object Integer iFile Integer iField Returns Integer
35622>>>>>>>        Integer iDSO
35622>>>>>>>        Get Data_set iFile to iDSO
35623>>>>>>>        If iDSO ;            Function_Return (Field_Table_Object(iDSO,iField))
35626>>>>>>>    End_Function
35627>>>>>>>    
35627>>>>>>>    // Returns code description value for the passed string for the
35627>>>>>>>    // passed validation table object. Normally use field_value_description
35627>>>>>>>    Function Validation_Table_Description Integer iObj String sVal Returns String
35629>>>>>>>        String sDesc
35629>>>>>>>        If iObj ;            Get Find_Code_Description of iObj sVal to sDesc
35632>>>>>>>        Function_Return sDesc
35633>>>>>>>    End_Function
35634>>>>>>>    
35634>>>>>>>    // Returns the description value for the field's code value. This only
35634>>>>>>>    // works if you have a validation table - else it returns the field value
35634>>>>>>>    Function Field_Current_Description Integer iField Returns String
35636>>>>>>>        String sDesc
35636>>>>>>>        String sVal
35636>>>>>>>        Integer iObj
35636>>>>>>>        Get Field_Current_Value iField to sVal
35637>>>>>>>        Get Field_Table_Object iField to iObj
35638>>>>>>>        If iObj Begin
35640>>>>>>>            Get Validation_Table_Description iObj sVal to sDesc
35641>>>>>>>            If (sDesc="") ;                Move sVal to sDesc // if desc is blank, use value
35644>>>>>>>        End
35644>>>>>>>>
35644>>>>>>>        Else ;            Move sVal to sDesc
35646>>>>>>>        Function_Return sDesc
35647>>>>>>>    End_Function
35648>>>>>>>    
35648>>>>>>>    Function File_Field_Current_Description Integer iFile Integer iField Returns String
35650>>>>>>>        Integer iDSO
35650>>>>>>>        Get Data_set iFile to iDSO
35651>>>>>>>        If iDSO ;            Function_Return (Field_Current_Description(iDSO,iField))
35654>>>>>>>    End_Function
35655>>>>>>>    
35655>>>>>>>    // Required Messaging to Support Checkbox items in DEOs
35655>>>>>>>    //  Defines a field as a two item field and defines True and False values
35655>>>>>>>    Procedure Set Field_CheckBox_Values Integer iField String sTrue String sFalse
35657>>>>>>>        Set Field_CheckBox_Values of (Field_Attributes(Self)) iField ;            to sTrue sFalse
35658>>>>>>>    End_Procedure
35659>>>>>>>    
35659>>>>>>>    //    Returns a field's select_State based on the pased value
35659>>>>>>>    Function Field_Value_Select_State Integer iField String sValue Returns Integer
35661>>>>>>>        Function_Return (Field_Value_Select_State(Field_Attributes(Self),iField,sValue))
35662>>>>>>>    End_Function
35663>>>>>>>    
35663>>>>>>>    //    Returns a field's select_State based on the DD buffer contents
35663>>>>>>>    Function Field_Select_State Integer iField Returns Integer
35665>>>>>>>        String sValue
35665>>>>>>>        Get Field_Current_Value iField to sValue
35666>>>>>>>        Function_Return (Field_Value_Select_State(Self,iField,sValue))
35667>>>>>>>    End_Function
35668>>>>>>>    
35668>>>>>>>    //   Returns a file/field' select_State based on contents of DD buffer
35668>>>>>>>    Function File_Field_Select_State Integer iFile Integer iField Returns Integer
35670>>>>>>>        Integer iDSO
35670>>>>>>>        Get Data_set iFile to iDSO
35671>>>>>>>        If iDSO ;            Function_Return (Field_Select_State(iDSO,iField))
35674>>>>>>>    End_Function
35675>>>>>>>    
35675>>>>>>>    //   Returns a file/field' select_State based on passed value
35675>>>>>>>    Function File_Field_Value_Select_State Integer iFile Integer iField ;            String sValue Returns Integer
35677>>>>>>>        Integer iDSO
35677>>>>>>>        Get Data_set iFile to iDSO
35678>>>>>>>        If iDSO ;            Function_Return (Field_Value_Select_State(iDSO,iField,sValue))
35681>>>>>>>    End_Function
35682>>>>>>>    
35682>>>>>>>    // get the actual database value that corresponds to the boolean value
35682>>>>>>>    // passed.
35682>>>>>>>    Function Field_CheckBox_Value Integer iField Integer iState Returns String
35684>>>>>>>        Function_Return (Field_Checkbox_Value(Field_Attributes(Self),iField,iState))
35685>>>>>>>    End_Function
35686>>>>>>>    
35686>>>>>>>    Function File_Field_CheckBox_Value Integer iFile Integer iField Integer iState Returns String
35688>>>>>>>        Integer iDSO
35688>>>>>>>        Get Data_set iFile to iDSO
35689>>>>>>>        If iDSO ;            Function_Return (Field_Checkbox_Value(iDSO,iField,iState))
35692>>>>>>>    End_Function
35693>>>>>>>    
35693>>>>>>>    // Set the buffer's value based on the state passed. This notifies DEOs
35693>>>>>>>    Procedure Set Field_Select_State Integer iField Integer iState
35695>>>>>>>        String sValue
35695>>>>>>>        Get Field_Checkbox_Value iField iState to sValue
35696>>>>>>>        Set Field_Current_Value iField to sValue
35697>>>>>>>    End_Procedure
35698>>>>>>>    
35698>>>>>>>    // Set the buffer's value based on the state passed. This notifies DEOs
35698>>>>>>>    // if needed (set Field_Current_Value does this). First finds proper file
35698>>>>>>>    // DSO
35698>>>>>>>    Procedure Set File_Field_Select_State Integer iFile Integer iField Integer iState
35700>>>>>>>        Integer iDSO
35700>>>>>>>        Get Data_set iFile to iDSO
35701>>>>>>>        If iDSO ;            Set Field_Select_State of iDSO iField to iState
35704>>>>>>>    End_Procedure
35705>>>>>>>    
35705>>>>>>>    // Procedure to define a check string for a field.
35705>>>>>>>    Procedure Set Field_Value_Check Integer iField String sCheck
35707>>>>>>>        Set Field_Value_Check of (Field_Attributes(Self)) iField ;            to sCheck
35708>>>>>>>    End_Procedure
35709>>>>>>>    
35709>>>>>>>    // This function will be called indirectly by DEOs when an item is being
35709>>>>>>>    // entered, exited or needs validation. The first argument holds the
35709>>>>>>>    // fieldnumber for the field and the second holds the id of the message
35709>>>>>>>    // which can be send to retrieve the message which needs to be send for
35709>>>>>>>    // this Field/Event combination. The value of the second argument can be
35709>>>>>>>    // GET_Field_Entry_MSG, GET_Field_Exit_MSG or GET_Field_Validate_MSG.
35709>>>>>>>    Function Exec_Field_Message Integer iField Integer iMsg_ID Returns Integer
35711>>>>>>>        Integer iMsg
35711>>>>>>>        Integer iResult
35711>>>>>>>        String  sValue
35711>>>>>>>        Get iMsg_ID iField to iMsg
35712>>>>>>>        If iMsg Begin
35714>>>>>>>            Get Field_Current_Value iField to sValue
35715>>>>>>>            Get iMsg iField sValue to iResult
35716>>>>>>>        End
35716>>>>>>>>
35716>>>>>>>        Function_Return iResult
35717>>>>>>>    End_Function
35718>>>>>>>    
35718>>>>>>>    
35718>>>>>>>    // This function will be called from within DEOs when an item is being
35718>>>>>>>    // entered, exited or needs validation. The first argument holds the
35718>>>>>>>    // file number, the second argument holds the field and the third
35718>>>>>>>    // holds the id of the message  which can be send to retrieve the message
35718>>>>>>>    // which needs to be send for this File/Field/Event combination.
35718>>>>>>>    // The value of the second argument can be  GET_Field_Entry_MSG,
35718>>>>>>>    // GET_Field_Exit_MSG or GET_Field_Validate_MSG.
35718>>>>>>>    // This will redirect to the proper data-set object.
35718>>>>>>>    Function Exec_File_Field_Message Integer iFile Integer iField Integer iMsg_ID Returns Integer
35720>>>>>>>        Integer iDSO
35720>>>>>>>        Integer iResult
35720>>>>>>>        Get Data_set iFile to iDSO
35721>>>>>>>        If iDSO ;            Get Exec_Field_Message of iDSO iField iMsg_ID to iResult
35724>>>>>>>        Function_Return iResult
35725>>>>>>>    End_Function
35726>>>>>>>    
35726>>>>>>>    // Find the data-set whose main_file is the same as File#. The message
35726>>>>>>>    // Which_data_set includes updating parent files, we will throw those out.
35726>>>>>>>    // This has been augmented to search down the DDO tree if we do not find
35726>>>>>>>    // the DD with our quick C Which_Data_set search
35726>>>>>>>    Function Data_Set Integer iFile Returns Integer
35728>>>>>>>        Integer iTmp
35728>>>>>>>        Integer iDSO
35728>>>>>>>        Get Main_File to iTmp
35729>>>>>>>        If (iTmp = iFile) ;            Function_Return Self
35732>>>>>>>        Get Which_Data_Set iFile to iDSO
35733>>>>>>>        If iDSO Begin
35735>>>>>>>            // check that DS's main-file is the File (and not a parent file)
35735>>>>>>>            Get Main_File of iDSO to iTmp
35736>>>>>>>            If (iTmp = iFile) ;                Function_Return iDSO
35739>>>>>>>        End
35739>>>>>>>>
35739>>>>>>>        
35739>>>>>>>        // This really should have succeeded by now. If not we need to do a
35739>>>>>>>        // downward sweep looking for DD. This will be a slower process since it
35739>>>>>>>        // involves flex level DDO structure traversal. We should very rarely ever
35739>>>>>>>        // get to this point. If we do, it takes longer!
35739>>>>>>>        
35739>>>>>>>        // Unlike other traversals we will mark and check in a single
35739>>>>>>>        // step.
35739>>>>>>>        // This Mark_Id creates a sequence Id for this clear. This way
35739>>>>>>>        // DSOs only get cleared one time during this process.
35739>>>>>>>        Send IncrementCurrentMarkId
35740>>>>>>>        Get Private.Data_set iFile to iDSO // this does the recursive downward search
35741>>>>>>>        Function_Return iDSO
35742>>>>>>>    End_Function
35743>>>>>>>    
35743>>>>>>>    Function Private.Data_Set Integer iFile Returns Integer
35745>>>>>>>        Integer iMax
35745>>>>>>>        Integer iDSO hDD
35745>>>>>>>        Integer iCount
35745>>>>>>>        
35745>>>>>>>        If (iFile=Main_file(Self)) ;            Function_Return Self
35748>>>>>>>        
35748>>>>>>>        // We are only looking at sequence ID.
35748>>>>>>>        Set Last_Mark_Sequence_id to DD_Current_mark_id
35749>>>>>>>        
35749>>>>>>>        // recurse Down first, since we already tried upward direction.
35749>>>>>>>        Get Data_Set_Client_Count to iMax
35750>>>>>>>        Decrement iMax
35751>>>>>>>        For iCount from 0 to iMax
35757>>>>>>>>
35757>>>>>>>            Get Data_Set_Client iCount to iDSO
35758>>>>>>>            // If already cleared during this sequence...do nothing
35758>>>>>>>            If (Last_Mark_Sequence_id(iDSO)<>DD_Current_mark_id) Begin
35760>>>>>>>                Get Private.Data_Set of iDSO iFile to hDD
35761>>>>>>>                If hDD ;                    Function_Return hDD // when found...get out
35764>>>>>>>            End
35764>>>>>>>>
35764>>>>>>>        Loop
35765>>>>>>>>
35765>>>>>>>        // recurse up server list next. We do this 2nd because it is
35765>>>>>>>        // the less likely path for success.
35765>>>>>>>        Get Data_Set_Server_Count to iMax
35766>>>>>>>        Decrement iMax
35767>>>>>>>        For iCount from 0 to iMax
35773>>>>>>>>
35773>>>>>>>            Get Data_Set_Server iCount to iDSO
35774>>>>>>>            // If already cleared during this sequence...do nothing
35774>>>>>>>            If (Last_Mark_Sequence_id(iDSO)<>DD_Current_mark_id) Begin
35776>>>>>>>                Get Private.Data_Set of iDSO iFile to hDD
35777>>>>>>>                If hDD ;                    Function_Return hDD // when found...get out
35780>>>>>>>            End
35780>>>>>>>>
35780>>>>>>>        Loop
35781>>>>>>>>
35781>>>>>>>        Function_Return 0 // if here, our traversal has failed.
35782>>>>>>>    End_Function
35783>>>>>>>    
35783>>>>>>>    // These methods can be used to set/get a field property in a flexible
35783>>>>>>>    // way. The first two argument are the file- and fieldnumber followed by
35783>>>>>>>    // the ID of the message that should be send. The last argument should
35783>>>>>>>    // be the value to set or the variable to store the value in.
35783>>>>>>>    Procedure Set File_Field_Property Integer iFile Integer iField Integer iMsg String sValue
35785>>>>>>>        Integer iDSO
35785>>>>>>>        Get Data_Set iFile to iDSO
35786>>>>>>>        If iDSO Begin
35788>>>>>>>            Set iMsg of iDSO iField to sValue
35789>>>>>>>            Procedure_Return sValue
35790>>>>>>>        End
35790>>>>>>>>
35790>>>>>>>    End_Procedure
35791>>>>>>>    
35791>>>>>>>    Function File_Field_Property Integer iFile Integer iField Integer iMsg Returns Integer
35793>>>>>>>        Integer iDSO
35793>>>>>>>        String  sValue
35793>>>>>>>        Get Data_Set iFile to iDSO
35794>>>>>>>        If iDSO Begin
35796>>>>>>>            Get iMsg of iDSO iField to sValue
35797>>>>>>>            Function_Return sValue
35798>>>>>>>        End
35798>>>>>>>>
35798>>>>>>>    End_Function
35799>>>>>>>    
35799>>>>>>>    // This procedure will return the number of fields in the object
35799>>>>>>>    Function Field_Count Returns Integer
35801>>>>>>>        Function_Return (Item_Count(Record_Buffer(Self)) - 1)
35802>>>>>>>    End_Function
35803>>>>>>>    
35803>>>>>>>    // This procedure will clear all flags in the visited_fields string so
35803>>>>>>>    // that all field will be validated on the next requests.
35803>>>>>>>    Procedure Clear_Visited_Fields
35805>>>>>>>        // this clears field visitation marks
35805>>>>>>>        Set Visited_Fields to (Repeat(" ", Field_Count(Self)))
35806>>>>>>>    End_Procedure
35807>>>>>>>    
35807>>>>>>>    // Private.Initialize_Visited
35807>>>>>>>    // This procedure will be called when validations (and perhaps other
35807>>>>>>>    // events) is requested. It clears the visited marks and then proceeds
35807>>>>>>>    // to clear the marks up the server tree.
35807>>>>>>>    // This is passed two parameters: Up_and_down, If true upward and downward
35807>>>>>>>    // initialize. If Clear_Fields also clear the field string
35807>>>>>>>    Procedure Private.Initialize_Visited Integer Up_and_Down Integer Clear_Fields
35809>>>>>>>        Integer iMax
35809>>>>>>>        Integer iDSO
35809>>>>>>>        Integer iCount
35809>>>>>>>        
35809>>>>>>>        // recurse up server list first. Only recurse up
35809>>>>>>>        Get Data_Set_Server_Count to iMax
35810>>>>>>>        Decrement iMax
35811>>>>>>>        For iCount from 0 to iMax
35817>>>>>>>>
35817>>>>>>>            Get Data_Set_Server iCount to iDSO
35818>>>>>>>            // If already cleared during this sequence...do nothing
35818>>>>>>>            If (Last_Mark_Sequence_id(iDSO)<>DD_Current_mark_id) ;                Send Private.Initialize_Visited to iDSO False Clear_Fields
35821>>>>>>>        Loop
35822>>>>>>>>
35822>>>>>>>        
35822>>>>>>>        If Clear_Fields ;            Send Clear_Visited_Fields // clear all markers in this object
35825>>>>>>>        // this clears the visited mark for the entire object
35825>>>>>>>        Set Visited_State to False
35826>>>>>>>        Set DownDelete_State to False
35827>>>>>>>        Set Last_Mark_Sequence_id to DD_Current_mark_id
35828>>>>>>>        
35828>>>>>>>        // If Up_and_Down recurse Down server list
35828>>>>>>>        If Up_and_Down Begin
35830>>>>>>>            Get Data_Set_Client_Count to iMax
35831>>>>>>>            Decrement iMax // **EK** This line was missing
35832>>>>>>>            For iCount from 0 to iMax
35838>>>>>>>>
35838>>>>>>>                Get Data_Set_Client iCount to iDSO
35839>>>>>>>                // If already cleared during this sequence...do nothing
35839>>>>>>>                If (Last_Mark_Sequence_id(iDSO)<>DD_Current_mark_id) ;                    Send Private.Initialize_Visited to iDSO True Clear_Fields
35842>>>>>>>            Loop
35843>>>>>>>>
35843>>>>>>>        End
35843>>>>>>>>
35843>>>>>>>    End_Procedure
35844>>>>>>>    
35844>>>>>>>    
35844>>>>>>>    // Clears Visited marks and (maybe) field visited marks in all required
35844>>>>>>>    // DSOs. If Up_and_Down is TRUE DSOs are marked up and Down (delete style)
35844>>>>>>>    // propagation. If False, DSOs are marked up (save style). This does not
35844>>>>>>>    // have a mode to mark ALL DSOs in a structure. (Not needed so far).
35844>>>>>>>    // If Clear_Fields is T the field string marker is also cleared.
35844>>>>>>>    // The method of using the global integer DD_Current_Mark_ID is an opt-
35844>>>>>>>    // imizer. This is private - do not tamper with it!
35844>>>>>>>    // Note that Intialize_Visited does not always Clear all DDOs in the structure. When
35844>>>>>>>    // Up_and_Down is true, it is marking all DDOs that will participate in a cascade delete
35844>>>>>>>    // which may not be all DDOs in the structure. If you want to initialize all DDOs use InitializeAllVisited
35844>>>>>>>    Procedure Initialize_Visited Integer Up_and_Down Integer Clear_Fields
35846>>>>>>>        Send IncrementCurrentMarkId
35847>>>>>>>        Send Private.Initialize_Visited Up_and_Down Clear_Fields
35848>>>>>>>    End_Procedure
35849>>>>>>>    
35849>>>>>>>    Procedure InitializeAllVisited2
35851>>>>>>>        Integer iMax iCount
35851>>>>>>>        Handle hoDSO
35851>>>>>>>        
35851>>>>>>>        Set Visited_State to False
35852>>>>>>>        Set Last_Mark_Sequence_id to DD_Current_mark_id // marks this as visited
35853>>>>>>>        
35853>>>>>>>        // recurse up server list.
35853>>>>>>>        Get Data_Set_Server_Count to iMax
35854>>>>>>>        For iCount from 0 to (iMax-1)
35860>>>>>>>>
35860>>>>>>>            Get Data_Set_Server iCount to hoDSO
35861>>>>>>>            // If already cleared during this sequence...do nothing
35861>>>>>>>            If (Last_Mark_Sequence_id(hoDSO)<>DD_Current_mark_id) ;                Send InitializeAllVisited2 of hoDSO
35864>>>>>>>        Loop
35865>>>>>>>>
35865>>>>>>>        
35865>>>>>>>        // recurse down client list.
35865>>>>>>>        Get Data_Set_Client_Count to iMax
35866>>>>>>>        For iCount from 0 to (iMax-1)
35872>>>>>>>>
35872>>>>>>>            Get Data_Set_Client iCount to hoDSO
35873>>>>>>>            // If already cleared during this sequence...do nothing
35873>>>>>>>            If (Last_Mark_Sequence_id(hoDSO)<>DD_Current_mark_id) ;                Send InitializeAllVisited2 to hoDSO
35876>>>>>>>        Loop
35877>>>>>>>>
35877>>>>>>>    End_Procedure
35878>>>>>>>    
35878>>>>>>>    // clears visited flag for *all* ddos in the structure.
35878>>>>>>>    Procedure InitializeAllVisited
35880>>>>>>>        Send IncrementCurrentMarkId
35881>>>>>>>        Send InitializeAllVisited2
35882>>>>>>>    End_Procedure
35883>>>>>>>    
35883>>>>>>>    
35883>>>>>>>    // Internal recursive message to check file connections. Called from
35883>>>>>>>    // Valid_connections only. Private message
35883>>>>>>>    Function Private.Valid_Structure Integer Up_And_Down Returns Integer
35885>>>>>>>        Integer iRval iCount iMax
35885>>>>>>>        Handle iDSO iPDSO
35885>>>>>>>        Integer iPMax iPCount iPMain
35885>>>>>>>        Boolean bUpDown bNull bCascadeNull bDown
35885>>>>>>>        
35885>>>>>>>        // Check Current Connections
35885>>>>>>>        Get Valid_Servers to iRval           // always check servers
35886>>>>>>>        If (iRval=0 and Up_and_Down) ;       // check Clients if required            Get Valid_Clients to iRval
35889>>>>>>>        Set Visited_State to True
35890>>>>>>>        
35890>>>>>>>        // Ask Server data-sets to check their server connections
35890>>>>>>>        If not iRval Begin // check up
35892>>>>>>>            Get Data_Set_Server_Count to iMax
35893>>>>>>>            Decrement iMax
35894>>>>>>>            For iCount from 0 to iMax
35900>>>>>>>>
35900>>>>>>>                Get Data_Set_Server iCount to iDSO
35901>>>>>>>                If not (Visited_state(iDSO)) ;                    Get Private.Valid_Structure of iDSO False to iRVal
35904>>>>>>>            Until iRval
35906>>>>>>>        End
35906>>>>>>>>
35906>>>>>>>        
35906>>>>>>>        // If required, Ask Clients to check their server and client connections
35906>>>>>>>        //
35906>>>>>>>        If (iRval=0 and Up_and_Down) Begin // check down
35908>>>>>>>            Get Data_Set_Client_Count to iMax
35909>>>>>>>            Decrement iMax
35910>>>>>>>            For iCount from 0 to iMax
35916>>>>>>>>
35916>>>>>>>                Get Data_Set_Client iCount to iDSO
35917>>>>>>>                If not (Visited_state(iDSO)) Begin
35919>>>>>>>                    Get Data_Set_Server_Count of iDSO to iPMax
35920>>>>>>>                    // test if all deletable parents for a non parent null allowed/cascade delete null
35920>>>>>>>                    For iPCount from 0 to (iPMax-1)
35926>>>>>>>>
35926>>>>>>>                        Get Data_Set_Server of iDSO iPCount to iPDSO
35927>>>>>>>                        Get DownDelete_State of iPDSO to bDown
35928>>>>>>>                        If (bDown) Begin
35930>>>>>>>                            Get Main_File of iPDSO to iPMain
35931>>>>>>>                            Get IsNullParentAllowed of iDSO iPMain to bNull
35932>>>>>>>                            Get IsCascadeDeleteNull of iDSO iPMain to bCascadeNull
35933>>>>>>>                            Move (not(bNull) or not(bCascadeNull)) to bUpDown
35934>>>>>>>                        End
35934>>>>>>>>
35934>>>>>>>                    Until bUpDown
35936>>>>>>>                    Get Private.Valid_Structure of iDSO bUpDown to iRVal
35937>>>>>>>                End
35937>>>>>>>>
35937>>>>>>>            Until iRval
35939>>>>>>>        End
35939>>>>>>>>
35939>>>>>>>        
35939>>>>>>>        Function_Return iRVal
35940>>>>>>>        
35940>>>>>>>    End_Function
35941>>>>>>>    
35941>>>>>>>    // Validate data-set updating connections against required connections
35941>>>>>>>    // Pass: Up_and_down=T if we should check Server and Client connections
35941>>>>>>>    //                  =F is we only check servers
35941>>>>>>>    // Ret: 0 if ok, Missing File# if not ok.
35941>>>>>>>    // Up_And_Down should be true when testing for cascade delete structures and
35941>>>>>>>    // false when testing for save / delete-no-cascade structures
35941>>>>>>>    Function Valid_Structure Integer Up_And_Down Returns Integer
35943>>>>>>>        Send Initialize_Visited Up_and_Down False // False=don't clear field marks
35944>>>>>>>        If (Up_And_Down) Begin
35946>>>>>>>            Send MarkDDOsForCascadeDelete
35947>>>>>>>        End
35947>>>>>>>>
35947>>>>>>>        Function_Return (Private.Valid_Structure(Self,Up_and_Down))
35948>>>>>>>    End_Function
35949>>>>>>>    
35949>>>>>>>    // mark all DDOs which are part of this deletes cascade delete tree
35949>>>>>>>    // mark this and all clients as Downward deletable. This includes
35949>>>>>>>    // cacscade delete and cascade set to null (not for cascade_delete_state=F)
35949>>>>>>>    Procedure MarkDDOsForCascadeDelete
35951>>>>>>>        Integer iMax  iCount
35951>>>>>>>        Boolean bDown
35951>>>>>>>        Handle hoDDO
35951>>>>>>>        Set DownDelete_State to True
35952>>>>>>>        Get Data_Set_Client_Count to iMax
35953>>>>>>>        For iCount from 0 to (iMax-1)
35959>>>>>>>>
35959>>>>>>>            Get Data_Set_Client iCount to hoDDO
35960>>>>>>>            Get DownDelete_State of hoDDO to bDown
35961>>>>>>>            If not bDown Begin // circular DDO test - never do this
35963>>>>>>>                Send MarkDDOsForCascadeDelete of hoDDO
35964>>>>>>>            End
35964>>>>>>>>
35964>>>>>>>        Loop
35965>>>>>>>>
35965>>>>>>>    End_Procedure
35966>>>>>>>    
35966>>>>>>>    
35966>>>>>>>    // This function will execute the validation message for each field within
35966>>>>>>>    // this object. If DoAllFG is true all items are validated. If false
35966>>>>>>>    // only unvisited items are checked.
35966>>>>>>>    // Added bNoStop, If true, all items are validated. It is up to you to
35966>>>>>>>    // do something with the possible cascade of errors
35966>>>>>>>    // if the err returns DFERR_ENTER_VALID_REC_ID we will not continue
35966>>>>>>>    // the validation (the other fields will be bad). This works best if the
35966>>>>>>>    // findreq appears as one of the first fields in the file (which is almost
35966>>>>>>>    // always the case
35966>>>>>>>    Function Validate_Fields Integer DoAllFg Integer bNoStop Returns Integer
35968>>>>>>>        Integer iRetval
35968>>>>>>>        Integer iMax
35968>>>>>>>        Integer iCount
35968>>>>>>>        Integer iFile
35968>>>>>>>        Integer iErr
35968>>>>>>>        String  sVS
35968>>>>>>>        Get Visited_Fields to sVS
35969>>>>>>>        Get Field_Count to iMax
35970>>>>>>>        Get Main_File to iFile
35971>>>>>>>        For iCount from 1 to iMax
35977>>>>>>>>
35977>>>>>>>            If (DoAllFG or Mid(sVS, 1, iCount)=" ") Begin
35979>>>>>>>                Get Validate_Field iCount to iErr
35980>>>>>>>                If iErr Begin
35982>>>>>>>                    Move iErr to iRetVal
35983>>>>>>>                    // error occurred. If not no-stop or the error is
35983>>>>>>>                    // a findreq error - we are done.
35983>>>>>>>                    If (not(bNoStop) or iRetVal=DFERR_ENTER_VALID_REC_ID) ;                        Function_Return iRetVal
35986>>>>>>>                End
35986>>>>>>>>
35986>>>>>>>            End
35986>>>>>>>>
35986>>>>>>>        Loop
35987>>>>>>>>
35987>>>>>>>        Function_Return iRetval
35988>>>>>>>    End_Function
35989>>>>>>>    
35989>>>>>>>    // 17.0 - added support for null-parents. If null parents allowed, req lets it through
35989>>>>>>>    Function Validate_Required Integer iField Returns Integer
35991>>>>>>>        Boolean bNull bErr
35991>>>>>>>        
35991>>>>>>>        Move (trim(Field_Current_Value(Self,iField))='') to bErr
35992>>>>>>>        If bErr ;            Send Data_set_Error iField DFERR_ENTRY_REQUIRED ""
35995>>>>>>>        Function_Return bErr
35996>>>>>>>    End_Function
35997>>>>>>>    
35997>>>>>>>    // return true if we should skip validation for this field. This can happen with Null allowed parents.
35997>>>>>>>    // if this is foreign, new and has no changes and is null allowed we will skip.
35997>>>>>>>    Function SkipValidate Integer iField Returns Boolean
35999>>>>>>>        Boolean bSkip bFieldChanged bEmpty
35999>>>>>>>        String sValue
35999>>>>>>>        
35999>>>>>>>        If (OPERATION_ORIGIN<>Self and not(HasRecord(Self)) and not(changed_state(Self))) Begin
36001>>>>>>>            // We must also check field_changed_state and only skip if this is not changed.
36001>>>>>>>            Get Field_Changed_State iField to bFieldChanged
36002>>>>>>>            // Retain and remember may set field_changed_state to true even when empty. If this field is changed
36002>>>>>>>            // but its value is empty we assume it is a candidate for Null checking, so we will set field-changed to false
36002>>>>>>>            If bFieldChanged Begin
36004>>>>>>>                Get Field_Current_Value iField to sValue
36005>>>>>>>                Get IsEmptyField iField sValue to bEmpty
36006>>>>>>>                If bEmpty Begin
36008>>>>>>>                    Move False to bFieldChanged
36009>>>>>>>                End
36009>>>>>>>>
36009>>>>>>>            End
36009>>>>>>>>
36009>>>>>>>            If (not(bFieldChanged)) Begin
36011>>>>>>>                // we must find the child that points to this DD, starting with operation_origin. If a child
36011>>>>>>>                // is found, it will be in array position 1 (0 is self, 1 is child)
36011>>>>>>>                Get IsNullParentOrAncestor to bSkip
36012>>>>>>>            End
36012>>>>>>>>
36012>>>>>>>        End
36012>>>>>>>>
36012>>>>>>>        Function_Return bSkip
36013>>>>>>>    End_Function
36014>>>>>>>    
36014>>>>>>>    
36014>>>>>>>    // This will tell us if this DD can be treated as either a null parent
36014>>>>>>>    // or an ancestor of a null parent. This should only be called for a DD
36014>>>>>>>    // that is a candidate for this meaning that it does not have a change.
36014>>>>>>>    // We will test if its child allows this parent to be null or if this
36014>>>>>>>    // is in the path of an allowed null parent. We assume that parents of
36014>>>>>>>    // null parents will also be null. This is used to test if validations are
36014>>>>>>>    // needed.
36014>>>>>>>    Function IsNullParentOrAncestor Returns Boolean
36016>>>>>>>        Handle[] hoDDs
36017>>>>>>>        Integer i iSize iMain
36017>>>>>>>        Boolean bNullAllowed
36017>>>>>>>        // gets an array where 0 is self, 1 is parent, 2 is grandparent, and the
36017>>>>>>>        // last item is the operation_origin.
36017>>>>>>>        Send DDOServerPath of operation_origin Self (&hoDDs)
36018>>>>>>>        Move (SizeOfArray(hoDDs)) to iSize
36019>>>>>>>        If (iSize) Begin
36021>>>>>>>            // see if the immediate child allows this to be null.
36021>>>>>>>            Get Main_File to iMain
36022>>>>>>>            Get IsNullParentAllowed of hoDDs[1] iMain to bNullAllowed
36023>>>>>>>            
36023>>>>>>>            // if null not allowed, see if this is an ancestor to a null allowed
36023>>>>>>>            // parent where all DDs in this path are unchanged. For example:
36023>>>>>>>            // G.DD <- P.DD <- C.DD where we C.DD allows P.DD to be null and we
36023>>>>>>>            // want to test if G.DD needs validation
36023>>>>>>>            Move 1 to i
36024>>>>>>>            While (not(bNullAllowed) and (i+1<iSize) and not(changed_state(hoDDs[i])) )
36028>>>>>>>                Get Main_File of hoDDs[i] to iMain
36029>>>>>>>                Get IsNullParentAllowed of hoDDs[i+1] iMain to bNullAllowed
36030>>>>>>>                Increment i
36031>>>>>>>            Loop
36032>>>>>>>>
36032>>>>>>>            
36032>>>>>>>        End
36032>>>>>>>>
36032>>>>>>>        Function_Return bNullAllowed
36033>>>>>>>    End_Function
36034>>>>>>>    
36034>>>>>>>    
36034>>>>>>>    Function Validate_FindReq Integer iField Returns Integer
36036>>>>>>>        Integer bErr iOpts
36036>>>>>>>        // if no current record, we have not found the required record.
36036>>>>>>>        Move (not(HasRecord(Self))) to bErr
36037>>>>>>>        // We also need to check if the field is changed. If the field is changed and this
36037>>>>>>>        // is an autofind field, this indicates that an autofind was attempted and failed. We
36037>>>>>>>        // can't jut rely on current_record because a failed autofind restores the old current
36037>>>>>>>        // record. For this to work, DEOs must set the DD field's changed_state to true on
36037>>>>>>>        // no-put fields (dd_deomx.pkg was changed to do this).
36037>>>>>>>        If (not(bErr) and field_changed_state(Self,iField)) Begin
36039>>>>>>>            Get Field_Options iField to iOpts
36040>>>>>>>            Move ( ((iOpts iand DD_AUTOFIND)=DD_AUTOFIND) or ;                ((iOpts iand DD_AUTOFIND_GE)=DD_AUTOFIND_GE) ) ;                to bErr
36041>>>>>>>        End
36041>>>>>>>>
36041>>>>>>>        If bErr ;            Send Data_set_Error iField DFERR_ENTER_VALID_REC_ID ""
36044>>>>>>>        Function_Return bErr
36045>>>>>>>    End_Function
36046>>>>>>>    
36046>>>>>>>    // This function will be called to validate a field.
36046>>>>>>>    // mark field currently being validated
36046>>>>>>>    // Altered to Check DD options (required, findreq)
36046>>>>>>>    Function Validate_Field Integer iField Returns Integer
36048>>>>>>>        Integer iResult
36048>>>>>>>        Integer iMsg
36048>>>>>>>        Integer iObj
36048>>>>>>>        String  sValue
36048>>>>>>>        Integer iFile
36048>>>>>>>        Integer iOpts iMain
36048>>>>>>>        Boolean bSkipValidate
36048>>>>>>>        Handle[] hoDDs
36049>>>>>>>        
36049>>>>>>>        Set Current_Validate_Field to iField
36050>>>>>>>        
36050>>>>>>>        // test if we should skip validation on this field
36050>>>>>>>        Get SkipValidate iField to bSkipValidate
36051>>>>>>>        
36051>>>>>>>        If (not(bSkipValidate)) Begin
36053>>>>>>>            
36053>>>>>>>            Move (Record_Buffer(Self)) to iObj
36054>>>>>>>            Get Main_File to iFile
36055>>>>>>>            
36055>>>>>>>            // Check for DD option failures: required, find_required
36055>>>>>>>            // "File_field" gets regular and foreign fields as needed
36055>>>>>>>            //Get File_Field_Options iFile iField to iOpts
36055>>>>>>>            Get Field_Options iField to iOpts  // get reg options
36056>>>>>>>            // if this is not the DDO that started the validation, we will assume that
36056>>>>>>>            // this is foreign. Operation_origin is set in Request_Validate
36056>>>>>>>            // If foreign (as defined above) and we do not allow new saves when
36056>>>>>>>            // foreign, we will consider this to be foreign and add foreign options
36056>>>>>>>            If (Operation_Origin<>Self and ;                Allow_Foreign_New_Save_State(Self)=0)  ;                Move (iOpts ior Foreign_Field_Options(Self, iField)) to iOpts
36059>>>>>>>            
36059>>>>>>>            
36059>>>>>>>            // Check for FindReq first. If it fails, set iResult to DFERR_ENTER_VALID_REC_ID so
36059>>>>>>>            // the calling function knows that a findreq failed. Always do this validation first
36059>>>>>>>            If (iOpts iand DD_FINDREQ) ;                Get Validate_FindReq  iField to iResult
36062>>>>>>>            If iResult Begin
36064>>>>>>>                Send AddDDHasFindReqError
36065>>>>>>>                Move DFERR_ENTER_VALID_REC_ID to iResult
36066>>>>>>>            End
36066>>>>>>>>
36066>>>>>>>            Else Begin
36067>>>>>>>                
36067>>>>>>>                If (iOpts iand DD_REQUIRED) ;                    Get Validate_Required iField to iResult
36070>>>>>>>                
36070>>>>>>>                If (iResult=0) Begin
36072>>>>>>>                    // First execute the user defined validation message
36072>>>>>>>                    Get Item_Validate_MSG of iObj iField to iMsg
36073>>>>>>>                    If iMsg Begin
36075>>>>>>>                        Get Field_Current_Value iField to sValue
36076>>>>>>>                        Get iMsg iField sValue to iResult
36077>>>>>>>                    End
36077>>>>>>>>
36077>>>>>>>                End
36077>>>>>>>>
36077>>>>>>>                
36077>>>>>>>                // Check for keys
36077>>>>>>>                If (iResult=0 and Key_Field_State(Self, iField)) ;                    Get Validate_Key_Field iField to iResult
36080>>>>>>>                
36080>>>>>>>                // Do extended validations
36080>>>>>>>                If (iResult=0) ;                    Get Validate_Field of (Field_Attributes(Self)) iField to iResult
36083>>>>>>>            End
36083>>>>>>>>
36083>>>>>>>        End
36083>>>>>>>>
36083>>>>>>>        
36083>>>>>>>        Set Current_Validate_Field to 0
36084>>>>>>>        // Mark this field being validated
36084>>>>>>>        Get Visited_Fields to sValue
36085>>>>>>>        Set Visited_Fields to (Overstrike("X", sValue, iField))
36086>>>>>>>        
36086>>>>>>>        Function_Return iResult
36087>>>>>>>        
36087>>>>>>>    End_Function
36088>>>>>>>    
36088>>>>>>>    
36088>>>>>>>    // This function will be called to validate a field.
36088>>>>>>>    Function File_Field_Validate_Field Integer iFile Integer iField Returns Integer
36090>>>>>>>        Integer iDSO
36090>>>>>>>        Integer iResult
36090>>>>>>>        Integer hOldOrigin
36090>>>>>>>        Get Data_Set iFile to iDSO
36091>>>>>>>        If not iDSO ;            Function_Return 0
36094>>>>>>>        
36094>>>>>>>        // This function is only called by the DEOs.
36094>>>>>>>        // It is possible for validate_item when called as part of
36094>>>>>>>        // request_validate to get called more than once
36094>>>>>>>        // when a field is foreign (it is attached to both its DDO and the
36094>>>>>>>        // child-main ddo). This makes sure the validation is only called once.
36094>>>>>>>        // (vdf7 change: previously we set OpMode to Mode_Saving and checked that, now we have
36094>>>>>>>        // a mode just for request_validate).
36094>>>>>>>        If (Operation_Mode=MODE_VALIDATING and ;         // if from request_validate            Mid(Visited_Fields(iDSO), 1, iField)="X" ) ; // and already marked            Function_Return 0                         // skip it
36097>>>>>>>        
36097>>>>>>>        Move Operation_origin to hOldOrigin
36098>>>>>>>        
36098>>>>>>>        // if from request_validate operation_origin will be set and should not
36098>>>>>>>        // be reset here.
36098>>>>>>>        If (OPERATION_ORIGIN=0) Begin
36100>>>>>>>            Move Self to Operation_Origin
36101>>>>>>>        End
36101>>>>>>>>
36101>>>>>>>        
36101>>>>>>>        Get Validate_Field of iDSO iField to iResult
36102>>>>>>>        Move hOldOrigin to Operation_Origin
36103>>>>>>>        Function_Return iResult
36104>>>>>>>    End_Function
36105>>>>>>>    
36105>>>>>>>    // This function will be called to check if a key has been changed.
36105>>>>>>>    Function Validate_Key_Field Integer iField Returns Integer
36107>>>>>>>        String  sOld_Value
36107>>>>>>>        String  sNew_Value
36107>>>>>>>        String  sKeys
36107>>>>>>>        Integer iState
36107>>>>>>>        Boolean bMultiKeys
36107>>>>>>>        Get Protect_Key_State to iState
36108>>>>>>>        If iState Begin
36110>>>>>>>            Get Key_Value to sNew_Value
36111>>>>>>>            // Only check existing records.
36111>>>>>>>            If (HasRecord(Self)) Begin
36113>>>>>>>                Get Existing_Key_Value to sOld_Value
36114>>>>>>>                If (sNew_Value <> sOld_Value) Begin
36116>>>>>>>                    // we have an error. If there is only one key field we know
36116>>>>>>>                    // where the field is and we can report that field. If we have
36116>>>>>>>                    // multiple key fields, we don't really know where the offending key change
36116>>>>>>>                    // is, so we will not report a field.
36116>>>>>>>                    Get Key_Fields to sKeys
36117>>>>>>>                    Move (Pos("X",sKeys)<>RightPos("X",sKeys)) to bMultiKeys
36118>>>>>>>                    Send Data_set_Error (If(bMultiKeys, -1, iField)) 0 DD_TEXT_NO_KEY_CHANGE_ALLOWED
36119>>>>>>>                    Function_Return 1
36120>>>>>>>                End
36120>>>>>>>>
36120>>>>>>>            End
36120>>>>>>>>
36120>>>>>>>        End
36120>>>>>>>>
36120>>>>>>>    End_Function
36121>>>>>>>    
36121>>>>>>>    
36121>>>>>>>    // During request_validate process tell us if this DD has had a find_request error. This
36121>>>>>>>    // is handled by the DD that originated the request_validate. Very private
36121>>>>>>>    Function DDHasFindReqError Returns Boolean
36123>>>>>>>        Handle[] DDsWithFindReqErrors
36124>>>>>>>        Integer iIndex
36124>>>>>>>        If (OPERATION_ORIGIN) Begin
36126>>>>>>>            Get pDDsWithFindReqErrors of OPERATION_ORIGIN to DDsWithFindReqErrors
36127>>>>>>>            Move (SearchArray(Self,DDsWithFindReqErrors)) to iIndex
36128>>>>>>>            Function_Return (iIndex<>-1)
36129>>>>>>>        End
36129>>>>>>>>
36129>>>>>>>    End_Function
36130>>>>>>>    
36130>>>>>>>    // During a request_validate a find_request error has occurred. Add this DD
36130>>>>>>>    // to list of DDs that have this error. This is handled by the DD that
36130>>>>>>>    // originated the request_validate.  Very private
36130>>>>>>>    Procedure AddDDHasFindReqError
36132>>>>>>>        Handle[] DDsWithFindReqErrors
36133>>>>>>>        If (OPERATION_ORIGIN) Begin
36135>>>>>>>            Get pDDsWithFindReqErrors of OPERATION_ORIGIN to DDsWithFindReqErrors
36136>>>>>>>            Move Self to DDsWithFindReqErrors[SizeOfArray(DDsWithFindReqErrors)]
36137>>>>>>>            Set pDDsWithFindReqErrors of OPERATION_ORIGIN to DDsWithFindReqErrors
36138>>>>>>>        End
36138>>>>>>>>
36138>>>>>>>    End_Procedure
36139>>>>>>>    
36139>>>>>>>    // This function will execute the validation message for each field of the
36139>>>>>>>    // data set and all of its parents in parent first order.
36139>>>>>>>    // Pass: DoALLFg bNoStop
36139>>>>>>>    // Added bNoStop, If true, all items are validated. It is up to you to
36139>>>>>>>    // do something with the possible cascade of errors
36139>>>>>>>    Function Validate_Data_Sets Integer DoAllFg Integer bNoStop Returns Integer
36141>>>>>>>        Integer iDSO
36141>>>>>>>        Integer iRetval
36141>>>>>>>        Integer iCount
36141>>>>>>>        Integer iMax
36141>>>>>>>        Integer bErr
36141>>>>>>>        Boolean bDDHasFindReqError
36141>>>>>>>        // ShowLn "Validate_Data_Sets in Data_Set in " (Name(self))
36141>>>>>>>        // Validate if not foreign, or foreign new saves allowed, or
36141>>>>>>>        // foreign validation is supported (it normally is)
36141>>>>>>>        If (Operation_Origin=Self or ;            Allow_Foreign_New_Save_State(Self) or ;            Validate_Foreign_File_State(Self)) Begin
36143>>>>>>>            
36143>>>>>>>            If (bNoStop) Begin
36145>>>>>>>                // if do all, it is possible that this DD as a find-req error. If so there is no
36145>>>>>>>                // need to look for more errors in this DD or its parents. This makes the do all checking
36145>>>>>>>                // a little more intelligent and doesn't return a bunch of errors when it is not needed
36145>>>>>>>                Get DDHasFindReqError to bDDHasFindReqError
36146>>>>>>>            End
36146>>>>>>>>
36146>>>>>>>            
36146>>>>>>>            If (not(bDDHasFindReqError)) Begin
36148>>>>>>>                Get Data_Set_Server_Count to iMax
36149>>>>>>>                Decrement iMax
36150>>>>>>>                For iCount from 0 to iMax
36156>>>>>>>>
36156>>>>>>>                    Get Data_Set_Server iCount to iDSO
36157>>>>>>>                    If not (Visited_state(iDSO)) Begin
36159>>>>>>>                        Get Validate_Data_Sets of iDSO DoAllFg bNoStop to bErr
36160>>>>>>>                        If bErr Begin
36162>>>>>>>                            Move bErr to iRetVal
36163>>>>>>>                            If bNoStop ;                                Move 0 to bErr
36166>>>>>>>                        End
36166>>>>>>>>
36166>>>>>>>                    End
36166>>>>>>>>
36166>>>>>>>                Until bErr
36168>>>>>>>                If not bErr Begin
36170>>>>>>>                    Get Validate_Fields DoAllFg bNoStop to bErr
36171>>>>>>>                    If bErr ;                        Move bErr to iRetVal
36174>>>>>>>                End
36174>>>>>>>>
36174>>>>>>>            End
36174>>>>>>>>
36174>>>>>>>        End
36174>>>>>>>>
36174>>>>>>>        Set Visited_State to True
36175>>>>>>>        Function_Return iRetval
36176>>>>>>>    End_Function
36177>>>>>>>    
36177>>>>>>>    // This tests the DDO and all "up" DDOs to see if a switched parent / commit test even needs to be
36177>>>>>>>    // tested. This is called by the top ValidateSwitchedCommittedParents to see if a switch parent test
36177>>>>>>>    // even needs to be applied before it has to refinds records.
36177>>>>>>>    // Return true is there is nothing to test (i.e., the shortcut worked).
36177>>>>>>>    Function IsCommittedRecursiveUpParentChangeAllowed Returns Boolean
36179>>>>>>>        Boolean bAllowed bCommitted bVisited bHasRecord
36179>>>>>>>        Integer iServers iSrvr iParent
36179>>>>>>>        Handle hoSrvr
36179>>>>>>>        
36179>>>>>>>        
36179>>>>>>>        // optimization. We only test committed parents if one parent does not allow changing committed records.
36179>>>>>>>        // This avoids extra finds and relates when not needed
36179>>>>>>>        Set Visited_State to True
36180>>>>>>>        Get Data_Set_Server_Count to iServers
36181>>>>>>>        Get IsCommitted to bCommitted
36182>>>>>>>        Move 0 to iSrvr
36183>>>>>>>        Move True to bAllowed
36184>>>>>>>        While (iSrvr<iServers and bAllowed)
36188>>>>>>>            Get Data_Set_Server iSrvr to hoSrvr
36189>>>>>>>            Get Main_File of hoSrvr to iParent
36190>>>>>>>            // if committed and parent change not allowed, we are done
36190>>>>>>>            If (bCommitted) Begin
36192>>>>>>>                Get IsCommittedParentChangeAllowed iParent to bAllowed
36193>>>>>>>            End
36193>>>>>>>>
36193>>>>>>>            // if still allowed, check all parents
36193>>>>>>>            If (bAllowed) Begin
36195>>>>>>>                Get Visited_State of hoSrvr to bVisited
36196>>>>>>>                If not bVisited Begin
36198>>>>>>>                    Get IsCommittedRecursiveUpParentChangeAllowed of hoSrvr to bAllowed
36199>>>>>>>                End
36199>>>>>>>>
36199>>>>>>>            End
36199>>>>>>>>
36199>>>>>>>            Increment iSrvr
36200>>>>>>>        Loop
36201>>>>>>>>
36201>>>>>>>        Function_Return bAllowed
36202>>>>>>>    End_Function
36203>>>>>>>    
36203>>>>>>>    
36203>>>>>>>    // special validate-save check for changed committed parent. If the record is committed
36203>>>>>>>    // and it has a switched parent and this is not allowed, we have an error. This should rarely happen because the
36203>>>>>>>    // DEOs should guard aginst this. This is a recursive routine that requires special attention the first time through.
36203>>>>>>>    // When called from the we must refind the original record and all original parents. This way we can compare these parent
36203>>>>>>>    // rowids to the DD row id (if different, they've changed). At the end we must restore the DD records. Because this takes time
36203>>>>>>>    // we only even do this if this is committed and there is a chance that there are changed parents
36203>>>>>>>    
36203>>>>>>>    Function ValidateSwitchedCommittedParents Boolean bTop Returns Boolean
36205>>>>>>>        Integer iServers iSrvr iMain iParent iPMain
36205>>>>>>>        Handle hoSrvr
36205>>>>>>>        RowID riCrnt riParent riPCrnt
36205>>>>>>>        Boolean bChanged bCommitted bAllowed bErr bParentChanged bVisited
36205>>>>>>>        Boolean bHasRecord bPHasRecord bFound
36205>>>>>>>        
36205>>>>>>>        
36205>>>>>>>        // Shortcut optimization. This tests for any committed DDO with a parent that doesn't allow a switch
36205>>>>>>>        // return true if there is any reason to actually test any DDO up the tree for a parent change
36205>>>>>>>        If bTop Begin
36207>>>>>>>            // init visited nodes, these will be tested and set in IsCommittedRecursiveUpParentChangeAllowed
36207>>>>>>>            Send Initialize_Visited False False //false=up only, true=clear fields
36208>>>>>>>            Get IsCommittedRecursiveUpParentChangeAllowed to bAllowed
36209>>>>>>>            If bAllowed Begin
36211>>>>>>>                Function_Return False // if all are allowed, we have nothing to test - its ok
36212>>>>>>>            End
36212>>>>>>>>
36212>>>>>>>        End
36212>>>>>>>>
36212>>>>>>>        
36212>>>>>>>        Get Main_File to iMain
36213>>>>>>>        Get CurrentRowId to riCrnt
36214>>>>>>>        Get Data_Set_Server_Count to iServers
36215>>>>>>>        Get HasRecord to bHasRecord
36216>>>>>>>        
36216>>>>>>>        If (bHasRecord and (bTop or not(IsSameRowID(GetRowID(iMain),riCrnt))) ) Begin
36218>>>>>>>            // this refinds the main record and, most importantly, relates all original parents on up
36218>>>>>>>            // We now have the original parents which we can test to see if they are changed.
36218>>>>>>>            Get ReadByRowIdEx iMain riCrnt to bFound
36219>>>>>>>            If not bFound Begin
36221>>>>>>>                Error DFERR_CANT_REFIND_RECORD
36222>>>>>>>>
36222>>>>>>>                Function_Return True
36223>>>>>>>            End
36223>>>>>>>>
36223>>>>>>>        End
36223>>>>>>>>
36223>>>>>>>        
36223>>>>>>>        If (bTop) Begin
36225>>>>>>>            // If at start, init visited nodes, these will be tested and set during recursive calls to this function
36225>>>>>>>            Send Initialize_Visited False False // false=up only, true=clear fields
36226>>>>>>>        End
36226>>>>>>>>
36226>>>>>>>        
36226>>>>>>>        Set Visited_State to True
36227>>>>>>>        Get IsCommitted to bCommitted
36228>>>>>>>        If bCommitted Begin
36230>>>>>>>            // Parent_Changed_State tells us a parent is changed but not which one. Look at each child to see if it is changed.
36230>>>>>>>            // First see any any of the parents are changed.
36230>>>>>>>            Get Parent_Changed_State to bChanged
36231>>>>>>>            If bChanged Begin
36233>>>>>>>                // Parent_Changed_State tells us a parent is changed but not which one. Look at each child to see if it is changed.
36233>>>>>>>                Move 0 to iSrvr
36234>>>>>>>                While (iSrvr<iServers and not(bErr))
36238>>>>>>>                    Get Data_Set_Server iSrvr to hoSrvr
36239>>>>>>>                    Get Main_File of hoSrvr to iParent
36240>>>>>>>                    Get CurrentRowId of hoSrvr to riParent
36241>>>>>>>                    Move (not(IsSameRowID(GetRowID(iParent),riParent))) to bParentChanged // is parent changed?
36242>>>>>>>                    If bParentChanged Begin
36244>>>>>>>                        Get IsCommittedParentChangeAllowed iParent to bAllowed // is changing committed parent allowed?
36245>>>>>>>                        If not bAllowed Begin
36247>>>>>>>                            Move True to bErr
36248>>>>>>>                            If bErr Begin
36250>>>>>>>                                Send Data_Set_Error of hoSrvr -1 0 DD_CANNOT_SWITCH_PARENT
36251>>>>>>>                            End
36251>>>>>>>>
36251>>>>>>>                        End
36251>>>>>>>>
36251>>>>>>>                    End
36251>>>>>>>>
36251>>>>>>>                    Increment iSrvr
36252>>>>>>>                Loop
36253>>>>>>>>
36253>>>>>>>            End
36253>>>>>>>>
36253>>>>>>>        End
36253>>>>>>>>
36253>>>>>>>        
36253>>>>>>>        // no error in immediate we must continue this check up the parent tree.
36253>>>>>>>        Move 0 to iSrvr
36254>>>>>>>        While (iSrvr<iServers and not(bErr))
36258>>>>>>>            Get Data_Set_Server iSrvr to hoSrvr
36259>>>>>>>            Get Visited_State of hoSrvr to bVisited
36260>>>>>>>            If (not(bVisited)) Begin
36262>>>>>>>                
36262>>>>>>>                // if new record, we need to refind parent records from here since you cannot
36262>>>>>>>                // have done a find/relate on a new record.
36262>>>>>>>                If (not(bHasRecord)) Begin
36264>>>>>>>                    Get HasRecord of hoSrvr to bPHasRecord
36265>>>>>>>                    If (bPHasRecord) Begin
36267>>>>>>>                        Get Main_File of hoSrvr to iPMain
36268>>>>>>>                        Get CurrentRowId of hoSrvr to riPCrnt
36269>>>>>>>                        If (not(IsNullRowID(riPCrnt))) Begin
36271>>>>>>>                            Get ReadByRowIdEx of hoSrvr iPMain riPCrnt to bFound
36272>>>>>>>                            If not bFound Begin
36274>>>>>>>                                Error DFERR_CANT_REFIND_RECORD
36275>>>>>>>>
36275>>>>>>>                                Function_Return True
36276>>>>>>>                            End
36276>>>>>>>>
36276>>>>>>>                        End
36276>>>>>>>>
36276>>>>>>>                    End
36276>>>>>>>>
36276>>>>>>>                End
36276>>>>>>>>
36276>>>>>>>                
36276>>>>>>>                Get ValidateSwitchedCommittedParents of hoSrvr False to bErr // call recursively up the parent tree
36277>>>>>>>            End
36277>>>>>>>>
36277>>>>>>>            Increment iSrvr
36278>>>>>>>        Loop
36279>>>>>>>>
36279>>>>>>>        
36279>>>>>>>        If bTop Begin // if back to the top, make sure our buffers are correct.
36281>>>>>>>            Send Refind_Records
36282>>>>>>>        End
36282>>>>>>>>
36282>>>>>>>        
36282>>>>>>>        Function_Return bErr
36283>>>>>>>    End_Function
36284>>>>>>>    
36284>>>>>>>    Procedure Entry_Update_Data_Sets Integer iFile Integer iAll
36286>>>>>>>        
36286>>>>>>>        Handle hoBuff hoDSO
36286>>>>>>>        Boolean bCommit bIsFind bVisited bIsForeign
36286>>>>>>>        Integer iMax iCount iItems iOpts iChanges
36286>>>>>>>        
36286>>>>>>>        
36286>>>>>>>        Move record_buffer to hoBuff
36287>>>>>>>        Move (OPERATION_MODE<>MODE_SAVING) to bIsFind
36288>>>>>>>        
36288>>>>>>>        // first recurse to all parent ddos
36288>>>>>>>        Get Data_Set_Server_Count to iMax
36289>>>>>>>        Decrement iMax
36290>>>>>>>        For iCount from 0 to iMax
36296>>>>>>>>
36296>>>>>>>            Get Data_Set_Server iCount to hoDSO
36297>>>>>>>            Get Visited_State of hoDSO to bVisited
36298>>>>>>>            If not (bVisited) Begin
36300>>>>>>>                Send Entry_Update_Data_Sets to hoDSO iFile iAll
36301>>>>>>>            End
36301>>>>>>>>
36301>>>>>>>        Loop
36302>>>>>>>>
36302>>>>>>>        
36302>>>>>>>        // if find, we only do this if the main file is the same as the find file
36302>>>>>>>        If (not(bIsFind) or iFile=Main_File(Self)) Begin
36304>>>>>>>            If (not(bIsFind)) Begin
36306>>>>>>>                // if a save, we care if it is committed.
36306>>>>>>>                Get IsCommitted to bCommit
36307>>>>>>>            End
36307>>>>>>>>
36307>>>>>>>            
36307>>>>>>>            // pass if Find (True) or save (False). We only care about commit on saves
36307>>>>>>>            // The setting of bIsForeign is an approximation. Foreign is really a DEO and and not
36307>>>>>>>            // a DD concept - in fact, at this point we don't really know. For example, a save in a header/dtl
36307>>>>>>>            // detail DEO (ordrdtl grid)has header DEOs that are not really foreign. This test errs on the side
36307>>>>>>>            // of assuming it's foreign. This would cause problems with incorrect parent NoPuts except we also
36307>>>>>>>            // set a flag, Field_NoPutValueChangedByDeo, when a field is changed via a NoPut DEO. The DD will still update
36307>>>>>>>            // foreign NoPuts unless this field flag is set.
36307>>>>>>>            Move (OPERATION_ORIGIN<>Self and Allow_Foreign_New_Save_State(Self)=0) to bIsForeign
36308>>>>>>>            Send Entry_Update of hoBuff bIsFind (If(bCommit,1,0) + If(bIsForeign,2,0))
36309>>>>>>>            
36309>>>>>>>            // also move data from extended dd fields to buffer
36309>>>>>>>            Send ExtendedFieldsUpdate (not(bIsFind))
36310>>>>>>>        End
36310>>>>>>>>
36310>>>>>>>        Set Visited_State to True
36311>>>>>>>        
36311>>>>>>>    End_Procedure
36312>>>>>>>    
36312>>>>>>>    // is this field NoPut based passed Commit and Foreign flags.
36312>>>>>>>    Function FieldNoPut Integer iField Boolean bIsCommited Boolean bIsForeign Returns Boolean
36314>>>>>>>        Boolean bNoPut
36314>>>>>>>        // this uses runtime logic - the same use for moving DD Buffer to Field Buffer
36314>>>>>>>        Get IsFieldDDNoPut of Record_Buffer iField (If(bIsCommited,1,0) + If(bIsForeign,2,0)) to bNoPut
36315>>>>>>>        Function_Return bNoPut
36316>>>>>>>    End_Function
36317>>>>>>>    
36317>>>>>>>    
36317>>>>>>>    // Check that Server data-sets exist for all required server file numbers
36317>>>>>>>    Function Valid_Servers Returns Integer
36319>>>>>>>        Integer iRval
36319>>>>>>>        Integer iCount
36319>>>>>>>        Integer iMax
36319>>>>>>>        Integer iDSO
36319>>>>>>>        Integer iPos
36319>>>>>>>        Integer iFile
36319>>>>>>>        String  sFiles
36319>>>>>>>        
36319>>>>>>>        // First assemble a string of all server file#s in ','##',' format
36319>>>>>>>        Move ',' to sFiles
36320>>>>>>>        Get Data_Set_Server_Count to iMax
36321>>>>>>>        Decrement iMax
36322>>>>>>>        For iCount from 0 to iMax
36328>>>>>>>>
36328>>>>>>>            Get Data_Set_Server iCount to iDSO
36329>>>>>>>            Move ( sFiles + String(Main_file(iDSO)) + ",") to sFiles
36330>>>>>>>        Loop
36331>>>>>>>>
36331>>>>>>>        
36331>>>>>>>        // Make sure each required File exists
36331>>>>>>>        Get Server_File_Count to iMax
36332>>>>>>>        Decrement iMax
36333>>>>>>>        For iCount from 0 to iMax
36339>>>>>>>>
36339>>>>>>>            Get Server_File iCount to iFile
36340>>>>>>>            Move (Pos ( ','+String(iFile)+',' , sFiles)) to iPos
36341>>>>>>>            If (iPos = 0) ;                Move iFile to iRVal
36344>>>>>>>        Until iRval
36346>>>>>>>        Function_Return iRVal
36347>>>>>>>    End_Function
36348>>>>>>>    
36348>>>>>>>    
36348>>>>>>>    // Check that Client data-sets exist for all required Client file numbers
36348>>>>>>>    Function Valid_Clients Returns Integer
36350>>>>>>>        Integer iRval
36350>>>>>>>        Integer iCount
36350>>>>>>>        Integer iMax
36350>>>>>>>        Integer iDSO
36350>>>>>>>        Integer iPos
36350>>>>>>>        Integer iFile
36350>>>>>>>        String  sFiles
36350>>>>>>>        
36350>>>>>>>        // First assemble a string of all Client file#s in ','##',' format
36350>>>>>>>        Move ',' to sFiles
36351>>>>>>>        Get Data_Set_Client_Count to iMax
36352>>>>>>>        Decrement iMax
36353>>>>>>>        For iCount from 0 to iMax
36359>>>>>>>>
36359>>>>>>>            Get Data_Set_Client iCount to iDSO
36360>>>>>>>            Move ( sFiles + String(Main_file(iDSO))+",") to sFiles
36361>>>>>>>        Loop
36362>>>>>>>>
36362>>>>>>>        
36362>>>>>>>        // Make sure each required File exists
36362>>>>>>>        Get Client_File_Count to iMax
36363>>>>>>>        Decrement iMax
36364>>>>>>>        For iCount from 0 to iMax
36370>>>>>>>>
36370>>>>>>>            Get Client_File iCount to iFile
36371>>>>>>>            Move (Pos( ','+String(iFile)+',', sFiles)) to iPos
36372>>>>>>>            If (iPos = 0) ;                Move iFile to iRVal
36375>>>>>>>        Until iRval
36377>>>>>>>        Function_Return iRVal
36378>>>>>>>    End_Function
36379>>>>>>>    
36379>>>>>>>    
36379>>>>>>>    // Validates save updating connections. If error returns file# that is
36379>>>>>>>    // expected and missing. If no error Set Validated_Save_connectio_State
36379>>>>>>>    // indicating that the connection validation has occurred and is ok
36379>>>>>>>    Function Validate_Save_Structure Integer ForceFg Returns Integer
36381>>>>>>>        Integer iRval
36381>>>>>>>        Integer iMode
36381>>>>>>>        If not ForceFg Begin
36383>>>>>>>            Get Validate_Save_Structure_Mode to iMode
36384>>>>>>>            Move ( iMode=DD_VALIDATE_STRUCTURE_ALWAYS or ;                (iMode=DD_VALIDATE_STRUCTURE_ONCE and ;                Save_Structure_Validated_state(Self)=0 ) ) ;                to ForceFg
36385>>>>>>>        End
36385>>>>>>>>
36385>>>>>>>        If ForceFg Begin
36387>>>>>>>            Get Valid_Structure False to iRval
36388>>>>>>>            If (iRVal = 0) ;                Set Save_Structure_Validated_State to True
36391>>>>>>>        End
36391>>>>>>>>
36391>>>>>>>        Function_Return iRVal
36392>>>>>>>    End_Function
36393>>>>>>>    
36393>>>>>>>    // Validates Delete Structure. If cascade_state is true this must check
36393>>>>>>>    // up and down the tree. If no cascade_state just check up the tree.  If
36393>>>>>>>    // Ok, set Validated_Delete_no_Cascade_Connection_State and and or
36393>>>>>>>    // Validated_Delete_Cascade_Connection_State
36393>>>>>>>    // Pass: ForceFg - if TRUE force the validation.
36393>>>>>>>    Function Validate_Delete_Structure Integer ForceFg Returns Integer
36395>>>>>>>        Integer iCascade
36395>>>>>>>        Integer iMode
36395>>>>>>>        Integer iSt
36395>>>>>>>        Integer iRval
36395>>>>>>>        Get Cascade_delete_State to iCascade
36396>>>>>>>        If not ForceFg Begin
36398>>>>>>>            Get Validate_Delete_Structure_Mode to iMode
36399>>>>>>>            If (iMode=DD_VALIDATE_STRUCTURE_ONCE and iCascade );                Get Cascade_Delete_Structure_Validated_state to iSt
36402>>>>>>>            Else ;                Get No_Cascade_Delete_Structure_Validated_state to iSt
36404>>>>>>>            Move ( iMode=DD_VALIDATE_STRUCTURE_ALWAYS or ;                (iMode=DD_VALIDATE_STRUCTURE_ONCE and iSt=0) ) to ForceFg
36405>>>>>>>        End
36405>>>>>>>>
36405>>>>>>>        
36405>>>>>>>        If ForceFg Begin
36407>>>>>>>            Get Valid_Structure iCascade to iRval
36408>>>>>>>            If (iRval = 0) Begin
36410>>>>>>>                Set No_Cascade_Delete_Structure_Validated_State to True
36411>>>>>>>                If iCascade ;                    Set Cascade_Delete_Structure_Validated_State to True
36414>>>>>>>            End
36414>>>>>>>>
36414>>>>>>>        End
36414>>>>>>>>
36414>>>>>>>        Function_Return iRval
36415>>>>>>>    End_Function
36416>>>>>>>    
36416>>>>>>>    
36416>>>>>>>    // This procedure will be called whenever the Data_Set wants its DEOs to
36416>>>>>>>    // write their values to the record buffer. The value of OPERATION_MODE
36416>>>>>>>    // determines if this is for finding an record or before saving a record.
36416>>>>>>>    // We use this event to tell our Record_Buffer to update the
36416>>>>>>>    // global record buffer.
36416>>>>>>>    // Modified to visit all server DSOs
36416>>>>>>>    // Note that this is only sent to the DSO starting the operation.
36416>>>>>>>    // We must manually send this to all server data-sets ourselves
36416>>>>>>>    // Note that during a DSO save this will get passed iFile=0 and iAll=3
36416>>>>>>>    // Changed to Support EntryUpdateLocalState (private)
36416>>>>>>>    // as of 17.0, EntryUpdateLocalState is True which means that entry_updates
36416>>>>>>>    // for finds now through the DD Buffer (saves always did).
36416>>>>>>>    Procedure Request_Entry_Update Integer iFile Integer iAll
36418>>>>>>>        If ((Operation_Mode=MODE_SAVING and iAll=3) or (EntryUpdateLocalState(Self)) ) Begin //3=dso save
36420>>>>>>>            If (OPERATION_MODE=MODE_WAITING) Begin
36422>>>>>>>                // we will only not be in an operation if we are doing a find with EntryUpdateLocalState
36422>>>>>>>                // set to true. In such a case make this a finding. I am not this is actually needed
36422>>>>>>>                Send Update_Focus_Field_For_Operation MODE_FINDING
36423>>>>>>>            End
36423>>>>>>>>
36423>>>>>>>            Else Begin
36424>>>>>>>                // if here we already have an operation_mode so there is no need to do anything special
36424>>>>>>>                Send Update_Focus_Field // Make sure buffer has latest focus item changes
36425>>>>>>>            End
36425>>>>>>>>
36425>>>>>>>            Send Initialize_Visited False False // Clear up, do not clear fields
36426>>>>>>>            Send Entry_Update_Data_Sets iFile iAll
36427>>>>>>>        End
36427>>>>>>>>
36427>>>>>>>        Forward Send Request_Entry_Update iFile iAll
36429>>>>>>>    End_Procedure
36430>>>>>>>    
36430>>>>>>>    
36430>>>>>>>    
36430>>>>>>>    // Forces the focus field to get update its value with the data-set.
36430>>>>>>>    // This insures that the DSO and DEO contain the same values.
36430>>>>>>>    Procedure Update_Focus_Field
36432>>>>>>>        Integer iFocObj
36432>>>>>>>        Get Focus of desktop to iFocObj
36433>>>>>>>        If (Extended_DEO_State(iFocObj)) ;            Send Update_Focus_Field to iFocObj
36436>>>>>>>    End_Procedure
36437>>>>>>>    
36437>>>>>>>    // very internal. Used to set Operation_mode and Operation_origin before the
36437>>>>>>>    // update. A developer can use this in the DEO to know what state the update is in.
36437>>>>>>>    // This was created because a DEO value change will trigger an OnChange event and you
36437>>>>>>>    // can look at this and know that this is part of a DD operation.
36437>>>>>>>    // This is *only* called by the DD operations in this class and the change is made for as
36437>>>>>>>    // small of a period as possible.
36437>>>>>>>    Procedure Update_Focus_Field_For_Operation Integer iOperationMode
36439>>>>>>>        Integer iOldMode iOldOrigin
36439>>>>>>>        
36439>>>>>>>        Move OPERATION_MODE to iOldMode
36440>>>>>>>        Move OPERATION_ORIGIN to iOldOrigin
36441>>>>>>>        Move iOperationMode to OPERATION_MODE
36442>>>>>>>        Move Self to OPERATION_ORIGIN
36443>>>>>>>        Send Update_Focus_Field
36444>>>>>>>        Move iOldMode to OPERATION_MODE
36445>>>>>>>        Move iOldOrigin to OPERATION_ORIGIN
36446>>>>>>>    End_Procedure
36447>>>>>>>    
36447>>>>>>>    
36447>>>>>>>    // Augment to validate all field values that do not get
36447>>>>>>>    // validated as part of the item validation process. The advantage
36447>>>>>>>    // of item validation (over only field validation) is that an error
36447>>>>>>>    // returns you to the offending item.
36447>>>>>>>    Function Request_Validate Returns Integer
36449>>>>>>>        Integer iRetval iOldOrigin iOldMode iRetVal2
36449>>>>>>>        Handle[] DDsWithFindReqErrors
36450>>>>>>>        
36450>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
36452>>>>>>>            Send Update_Focus_Field_For_Operation MODE_VALIDATING // added 12.1/15.1
36453>>>>>>>        End
36453>>>>>>>>
36453>>>>>>>        Move Operation_Origin to iOldOrigin
36454>>>>>>>        Move Self to Operation_Origin
36455>>>>>>>        Move Operation_Mode to iOldMode
36456>>>>>>>        // clear all find req DD markers at the origin of the validate request. When request validates occur
36456>>>>>>>        // they will get added to this array and can be tested to see of such an error has occurred.
36456>>>>>>>        Set pDDsWithFindReqErrors to DDsWithFindReqErrors
36457>>>>>>>        // Prior to VDF7, we set this to Mode_Saving. We now have a special mode just for request_validate.
36457>>>>>>>        // We do this because:
36457>>>>>>>        //   1) because it is useful (more detail never hurts) and
36457>>>>>>>        //   2) we will allow set_field_current_value to update when mode_validation is set
36457>>>>>>>        Move MODE_VALIDATING to Operation_Mode
36458>>>>>>>        Send Initialize_Visited False True //false=up only, true=clear fields
36459>>>>>>>        Forward Get Request_Validate to iRetval // normal deo validate
36461>>>>>>>        // If DEO validation failed, do not validate other fields unless Validate_All_Fields is set
36461>>>>>>>        If ( (iRetval=0 or (Validate_All_Fields_State(Self))) and Validate_DEOs_Only_State(Self)=0) Begin
36463>>>>>>>            Get Validate_Data_Sets False (Validate_All_Fields_State(Self)) to iRetval2
36464>>>>>>>            Move (iRetval or iRetVal2) to iRetval
36465>>>>>>>        End
36465>>>>>>>>
36465>>>>>>>        
36465>>>>>>>        If (iRetval=0) Begin
36467>>>>>>>            Get ValidateSwitchedCommittedParents True to iRetval
36468>>>>>>>        End
36468>>>>>>>>
36468>>>>>>>        
36468>>>>>>>        Move iOldMode   to Operation_Mode
36469>>>>>>>        Move iOldOrigin to Operation_Origin
36470>>>>>>>        Function_Return iRetval
36471>>>>>>>    End_Function
36472>>>>>>>    
36472>>>>>>>    Function Request_Validate_All Returns Integer
36474>>>>>>>        Integer bOld iRetVal
36474>>>>>>>        Get Validate_All_Fields_State to bOld
36475>>>>>>>        Set Validate_All_Fields_State to True
36476>>>>>>>        Get request_validate to iretVal
36477>>>>>>>        Set Validate_All_Fields_State to bOld
36478>>>>>>>        Function_Return iRetval
36479>>>>>>>    End_Function
36480>>>>>>>    
36480>>>>>>>    
36480>>>>>>>    
36480>>>>>>>    // Like Item_find except entry-update is forced through the DD, not DEO
36480>>>>>>>    Procedure File_Field_Find Integer iFindMode Integer iFile Integer iField ;            Integer bEntUpdt  Integer bShowErr Integer bDfrd
36482>>>>>>>        Integer bOld
36482>>>>>>>        Get EntryUpdateLocalState to bOld
36483>>>>>>>        Set EntryUpdateLocalState to True
36484>>>>>>>        Send Item_Find iFindMode iFile iField bEntUpdt bShowErr bDfrd
36485>>>>>>>        Set EntryUpdateLocalState to bOld
36486>>>>>>>    End_Procedure
36487>>>>>>>    
36487>>>>>>>    // Autofind for requestd file, field and mode.
36487>>>>>>>    //    If mode not passed, EQ is assummed
36487>>>>>>>    Procedure File_Field_AutoFind Integer iFile Integer iField Integer iFindMode
36489>>>>>>>        Integer eMode
36489>>>>>>>        If iFile  Begin
36491>>>>>>>            // if no 3rd argument, default to autofind
36491>>>>>>>            Move (If(Num_Arguments<3,EQ,iFindMode)) to eMode
36492>>>>>>>            Send File_Field_Find eMode iFile iField True False False
36493>>>>>>>        End
36493>>>>>>>>
36493>>>>>>>    End_Procedure
36494>>>>>>>    
36494>>>>>>>    // Autofind in default mode (does not set changed states). Can be used
36494>>>>>>>    // within Clear and Clear_all to autofind parents. Parent values can be
36494>>>>>>>    // maintained using retainAll option
36494>>>>>>>    Procedure File_Field_Default_AutoFind Integer iFile Integer iField
36496>>>>>>>        Integer iOldState
36496>>>>>>>        Handle  hoDD
36496>>>>>>>        Get Data_set iFile to hoDD
36497>>>>>>>        If hoDD Begin
36499>>>>>>>            Get Change_disabled_State of hoDD to iOldState
36500>>>>>>>            Set Change_disabled_State of hoDD to True
36501>>>>>>>            Send File_Field_AutoFind  of hoDD iFile iField EQ
36502>>>>>>>            Set Change_disabled_State of hoDD to iOldState
36503>>>>>>>            Set changed_state to False
36504>>>>>>>        End
36504>>>>>>>>
36504>>>>>>>    End_Procedure
36505>>>>>>>    
36505>>>>>>>    // File_Index_find
36505>>>>>>>    // Like item_find except you pass the index you want to find with and
36505>>>>>>>    // ent-update occurs through DDO buffers not deo buffers.
36505>>>>>>>    // This is currently private and is only used by web-applications
36505>>>>>>>    Procedure File_Index_Find Integer iFindMode Integer iFile Integer iIndex ;            Integer bEntUpdt  Integer bShowErr Integer bDfrd
36507>>>>>>>        Integer bOld
36507>>>>>>>        RowID riRec
36507>>>>>>>        Integer wasChanged hDD iOldStat
36507>>>>>>>        Boolean bOk
36507>>>>>>>        
36507>>>>>>>        Get Data_Set iFile to hDD
36508>>>>>>>        If (hDD=0) Begin
36510>>>>>>>            Error DFERR_PROGRAM C_$CannotFindDD
36511>>>>>>>>
36511>>>>>>>            Procedure_Return
36512>>>>>>>        End
36512>>>>>>>>
36512>>>>>>>        
36512>>>>>>>        Get EntryUpdateLocalState to bOld
36513>>>>>>>        Set EntryUpdateLocalState to True
36514>>>>>>>        
36514>>>>>>>        //  'hold' buffer to prepare for entry_update
36514>>>>>>>        Move (getRowId(iFile)) to riRec
36515>>>>>>>        Get_Attribute DF_FILE_STATUS of iFile to iOldStat
36518>>>>>>>        Set_Attribute DF_FILE_STATUS of iFile to DF_FILE_INACTIVE
36521>>>>>>>        
36521>>>>>>>        If bEntUpdt Begin
36523>>>>>>>            Send Request_Entry_Update to hDD iFile 1  //entUpdt all DEOs as required
36524>>>>>>>            
36524>>>>>>>            //
36524>>>>>>>            // we really only need to know if any segment of the index changed
36524>>>>>>>            // but since we don't have field-changed flags, we look at the
36524>>>>>>>            // whole recbuf - this is consistent with 2.3b and 3.0 non-dataset
36524>>>>>>>            // behavior.
36524>>>>>>>            //
36524>>>>>>>            Move (iOldStat<>DF_FILE_INACTIVE) to wasChanged
36525>>>>>>>            If not wasChanged ;                Get_Attribute DF_FILE_CHANGED of iFile to wasChanged
36530>>>>>>>            If not wasChanged ;                Constrained_Clear iFindMode iFile by iIndex
36535>>>>>>>            
36535>>>>>>>        End
36535>>>>>>>>
36535>>>>>>>        Move False to Err
36536>>>>>>>        If bDfrd ;            Send Request_Read iFindMode iFile iIndex
36539>>>>>>>        Else ;            Send Request_Find iFindMode iFile iIndex
36541>>>>>>>        If (not(Found) and  not(err)) Begin
36543>>>>>>>            // refind original record (or leave it cleared if not record)
36543>>>>>>>            Move (FindByRowId(iFile,riRec)) to bOk
36544>>>>>>>            
36544>>>>>>>            If bShowErr ;                Error (If(iFindMode<2, DFERR_FIND_PRIOR_BEG_OF_FILE, DFERR_FIND_PAST_END_OF_FILE))
36547>>>>>>>            Move False to Err
36548>>>>>>>        End
36548>>>>>>>>
36548>>>>>>>        Set EntryUpdateLocalState to bOld
36549>>>>>>>    End_Procedure
36550>>>>>>>    
36550>>>>>>>    // This does a refind of all records based on the contents of the
36550>>>>>>>    // refine_record_id property.
36550>>>>>>>    // This would be used after clearing the DDs and loading the local rencum
36550>>>>>>>    // buffer with recnums. This can be used by remote DEOs (BPOs).
36550>>>>>>>    //
36550>>>>>>>    // Find all existing records. This must be done in bottom-up, breadth
36550>>>>>>>    // first order. i.e., Start with the passed DD, find it and then find for
36550>>>>>>>    // parents. Only find if the record is non-zero and it is different than
36550>>>>>>>    // the current_record.
36550>>>>>>>    // This order will allow us to support changed parents.
36550>>>>>>>    // Don't use this if you do not understand what it does.
36550>>>>>>>    // Private.Find_Records is a helper. We will keep this private because
36550>>>>>>>    // it is rather specialized and only used by WebApp.
36550>>>>>>>    Procedure Find_Records
36552>>>>>>>        Send Initialize_Visited False False // Clear up, do not clear fields
36553>>>>>>>        Send Private.Find_Records           // refind all records in upward sweep
36554>>>>>>>    End_Procedure
36555>>>>>>>    
36555>>>>>>>    
36555>>>>>>>    Procedure Private.Find_Records
36557>>>>>>>        Integer hPrnt
36557>>>>>>>        Integer iMax
36557>>>>>>>        Integer iCount
36557>>>>>>>        RowID riRec
36557>>>>>>>        Integer iRec iMain
36557>>>>>>>        // works with both recId and rowId. Only one should ever be set.
36557>>>>>>>        // find(clear) record, if needed
36557>>>>>>>        Get Main_File to iMain
36558>>>>>>>        // assume that either prFindRowId or Find_record_id has a value - never both
36558>>>>>>>        // also assume Find_record_id only has values when you are using a recnum table
36558>>>>>>>        Get prFindRowId to riRec
36559>>>>>>>        If not (IsNullRowId(riRec)) Begin
36561>>>>>>>            If not (IsSameRowId(riRec, CurrentRowId(Self) ) ) Begin
36563>>>>>>>                Send FindByRowId iMain riRec // find an Relate all parents
36564>>>>>>>            End
36564>>>>>>>>
36564>>>>>>>            Set prFindRowId to (NullRowId())  // reset refind rec back to zero.
36565>>>>>>>        End
36565>>>>>>>>
36565>>>>>>>        Else Begin
36566>>>>>>>            // if this has a recnum, it better be a recnum table or an error will occur.
36566>>>>>>>            // This is not being tested for a recnum table on purpose. If someone is setting Find_record_id
36566>>>>>>>            // on a non-recnum table, they doing something wrong. An Error will be a good thing.
36566>>>>>>>            Get Find_Record_Id to iRec
36567>>>>>>>            If iRec Begin
36569>>>>>>>                If (iRec<>Current_record(Self)) Begin
36571>>>>>>>                    Send Find_By_Recnum iMain iRec // find an Relate all parents
36572>>>>>>>                End
36572>>>>>>>>
36572>>>>>>>                Set Find_record_id to 0 // reset refind rec back to zero.
36573>>>>>>>            End
36573>>>>>>>>
36573>>>>>>>        End
36573>>>>>>>>
36573>>>>>>>        Set Visited_State to True
36574>>>>>>>        
36574>>>>>>>        // recurse and do the same to all parent files
36574>>>>>>>        // in almost all cases, there will be no new finding here since the relate has
36574>>>>>>>        // found the records. If the record is different than the relate, we have
36574>>>>>>>        // a switched parent state (should_save will be set appropriately).
36574>>>>>>>        Get Data_Set_Server_Count to iMax
36575>>>>>>>        Decrement iMax
36576>>>>>>>        For iCount from 0 to iMax
36582>>>>>>>>
36582>>>>>>>            Get Data_Set_Server iCount to hPrnt
36583>>>>>>>            If not (Visited_state(hPrnt)) ;                Send Private.Find_Records to hPrnt
36586>>>>>>>        Loop
36587>>>>>>>>
36587>>>>>>>    End_Procedure
36588>>>>>>>    
36588>>>>>>>    // This Mark_Id creates a sequence Id for this clear. This way
36588>>>>>>>    // DDOs only get cleared one time during this process.
36588>>>>>>>    Procedure IncrementCurrentMarkId
36590>>>>>>>        If (DD_Current_Mark_ID>65536) Begin
36592>>>>>>>            Move 0 to DD_Current_Mark_id
36593>>>>>>>        End
36593>>>>>>>>
36593>>>>>>>        Increment DD_Current_Mark_id
36594>>>>>>>    End_Procedure
36595>>>>>>>    
36595>>>>>>>    
36595>>>>>>>    // private use by new webapp framework as of 18.2.
36595>>>>>>>    // pass bStart as True if this is the start of the resynch.
36595>>>>>>>    Function ReSyncRecords Boolean bStart Returns Handle
36597>>>>>>>        RowID riRowId riCrnt
36597>>>>>>>        Boolean bOk bOldReSync bVisited
36597>>>>>>>        Handle hoOtherDDO hoBadDDO hoBadPrntDDO
36597>>>>>>>        Integer iMax iCount iMain
36597>>>>>>>
36597>>>>>>>        If bStart Begin
36599>>>>>>>            Send InitializeAllVisited
36600>>>>>>>        End
36600>>>>>>>>
36600>>>>>>>        
36600>>>>>>>        // we want depth first traversal. Make sure children are handled before parents
36600>>>>>>>        // Recursively traverse Children, Find by RowId, Recursively traverse Parents
36600>>>>>>>        // Use visited_state logic to avoid multiple visits caused by diamond DDO strutures
36600>>>>>>>        
36600>>>>>>>        //mark first so we don't visit this coming back up.
36600>>>>>>>        Set Visited_State to True
36601>>>>>>>        
36601>>>>>>>        // traverse downward first
36601>>>>>>>        Get Data_Set_Client_Count to iMax
36602>>>>>>>        For iCount from 0 to (iMax-1)
36608>>>>>>>>
36608>>>>>>>            Get Data_Set_Client iCount to hoOtherDDO
36609>>>>>>>            Get Visited_State of hoOtherDDO to bVisited
36610>>>>>>>            If not bVisited Begin
36612>>>>>>>                Get ReSyncRecords of hoOtherDDO False to hoBadPrntDDO
36613>>>>>>>                If (hoBadPrntDDO and not(hoBadDDO)) Begin
36615>>>>>>>                    Move hoBadPrntDDO to hoBadDDO
36616>>>>>>>                End
36616>>>>>>>>
36616>>>>>>>            End
36616>>>>>>>>
36616>>>>>>>        Loop
36617>>>>>>>>
36617>>>>>>>        
36617>>>>>>>        // Find record for DD. It might already be correct if child has already
36617>>>>>>>        // related it in. If not correct after a relate, this has been switched by this
36617>>>>>>>        // user or switched by another user, in which case it will be swtitched back
36617>>>>>>>        // (DDOs have always worked this way).
36617>>>>>>>        Get prFindRowId to riRowId
36618>>>>>>>        Get Main_File to iMain
36619>>>>>>>        Get CurrentRowId to riCrnt
36620>>>>>>>        If ( not(IsSameRowId(riRowID, riCrnt)) ) Begin
36622>>>>>>>            Get pbInReSync to bOldReSync
36623>>>>>>>            Set pbInReSync to True
36624>>>>>>>            
36624>>>>>>>            If (IsNullRowId(riRowID)) Begin
36626>>>>>>>                Send Clear
36627>>>>>>>            End
36627>>>>>>>>
36627>>>>>>>            Else Begin
36628>>>>>>>                Get FindByRowIdExNoAutoFill iMain riRowId to bOk
36629>>>>>>>                If not bOk Begin
36631>>>>>>>                    Move Self to hoBadDDO
36632>>>>>>>                End
36632>>>>>>>>
36632>>>>>>>            End
36632>>>>>>>>
36632>>>>>>>            Set pbInReSync to bOldReSync
36633>>>>>>>        End
36633>>>>>>>>
36633>>>>>>>        
36633>>>>>>>        // finally traverse to parents
36633>>>>>>>        Get Data_Set_Server_Count to iMax
36634>>>>>>>        For iCount from 0 to (iMax-1)
36640>>>>>>>>
36640>>>>>>>            Get Data_Set_Server iCount to hoOtherDDO
36641>>>>>>>            Get Visited_State of hoOtherDDO to bVisited
36642>>>>>>>            If not bVisited Begin
36644>>>>>>>                Get ReSyncRecords of hoOtherDDO False to hoBadPrntDDO
36645>>>>>>>                If (hoBadPrntDDO and not(hoBadDDO)) Begin
36647>>>>>>>                    Move hoBadPrntDDO to hoBadDDO
36648>>>>>>>                End
36648>>>>>>>>
36648>>>>>>>            End
36648>>>>>>>>
36648>>>>>>>        Loop
36649>>>>>>>>
36649>>>>>>>        
36649>>>>>>>        If bStart Begin
36651>>>>>>>            Send InitializeAllVisited
36652>>>>>>>            Send ResetChangedStates
36653>>>>>>>        End
36653>>>>>>>>
36653>>>>>>>        
36653>>>>>>>        Function_Return hoBadDDO
36654>>>>>>>    End_Function
36655>>>>>>>    
36655>>>>>>>
36655>>>>>>>    Procedure ResetChangedStates
36657>>>>>>>        Boolean bVisited
36657>>>>>>>        Handle hoOtherDDO
36657>>>>>>>        Integer iMax iCount
36657>>>>>>>        tDDChangedInfo DDChangedInfo
36657>>>>>>>        tDDChangedInfo DDChangedInfo
36657>>>>>>>                
36657>>>>>>>        // we want depth first traversal.
36657>>>>>>>        //mark first so we don't visit this coming back up.
36657>>>>>>>        Set Visited_State to True
36658>>>>>>>        
36658>>>>>>>        // traverse downward first
36658>>>>>>>        Get Data_Set_Client_Count to iMax
36659>>>>>>>        For iCount from 0 to (iMax-1)
36665>>>>>>>>
36665>>>>>>>            Get Data_Set_Client iCount to hoOtherDDO
36666>>>>>>>            Get Visited_State of hoOtherDDO to bVisited
36667>>>>>>>            If not bVisited Begin
36669>>>>>>>                Send ResetChangedStates of hoOtherDDO
36670>>>>>>>            End
36670>>>>>>>>
36670>>>>>>>        Loop
36671>>>>>>>>
36671>>>>>>>        
36671>>>>>>>        // Set changed states for this DDO
36671>>>>>>>        Get pDDChangedInfo to DDChangedInfo
36672>>>>>>>        Set Changed_State to False // clears changed_state and parent_changed_states            
36673>>>>>>>        Set Changed_State to DDChangedInfo.bChanged            
36674>>>>>>>        For iCount from 0 to (SizeOfArray(DDChangedInfo.ParentChanged)-1)
36680>>>>>>>>
36680>>>>>>>            Send SetParentDDOSwitched DDChangedInfo.ParentChanged[iCount].iTable DDChangedInfo.ParentChanged[iCount].bSwitched
36681>>>>>>>        Loop
36682>>>>>>>>
36682>>>>>>>        
36682>>>>>>>        // finally traverse to parents
36682>>>>>>>        Get Data_Set_Server_Count to iMax
36683>>>>>>>        For iCount from 0 to (iMax-1)
36689>>>>>>>>
36689>>>>>>>            Get Data_Set_Server iCount to hoOtherDDO
36690>>>>>>>            Get Visited_State of hoOtherDDO to bVisited
36691>>>>>>>            If not bVisited Begin
36693>>>>>>>                Send ResetChangedStates of hoOtherDDO
36694>>>>>>>            End
36694>>>>>>>>
36694>>>>>>>        Loop
36695>>>>>>>>
36695>>>>>>>        
36695>>>>>>>    End_Procedure
36696>>>>>>>
36696>>>>>>>    // private use by new webapp framework (pre 18.2)
36696>>>>>>>    Function ReSyncRecord Returns Boolean
36698>>>>>>>        RowID riRowId
36698>>>>>>>        Boolean bOk bOldReSync
36698>>>>>>>        Handle hPrnt
36698>>>>>>>        Integer iMax iCount iMain
36698>>>>>>>        
36698>>>>>>>        Get pbInReSync to bOldReSync
36699>>>>>>>        
36699>>>>>>>        Get prFindRowId to riRowId
36700>>>>>>>        Get Main_File to iMain
36701>>>>>>>        If not (IsSameRowId(riRowID, CurrentRowId(Self) ) ) Begin
36703>>>>>>>            If (IsNullRowId(riRowID)) Begin
36705>>>>>>>                Set pbInReSync to True
36706>>>>>>>                Send Clear
36707>>>>>>>                Set pbInReSync to bOldReSync
36708>>>>>>>            End
36708>>>>>>>>
36708>>>>>>>            Else Begin
36709>>>>>>>                Set pbInReSync to True
36710>>>>>>>                Get FindByRowIdExNoAutoFill iMain riRowId to bOk
36711>>>>>>>                Set pbInReSync to bOldReSync
36712>>>>>>>                If not bOk Begin
36714>>>>>>>                    Function_Return False
36715>>>>>>>                End
36715>>>>>>>>
36715>>>>>>>            End
36715>>>>>>>>
36715>>>>>>>            
36715>>>>>>>            // check that the relate found all the parent records we expect.
36715>>>>>>>            // This should be correct unless a parent has been switched. Constrained
36715>>>>>>>            // parents, by definition, should already be correct. See **Note** below
36715>>>>>>>            Get Data_Set_Server_Count to iMax
36716>>>>>>>            For iCount from 0 to (iMax-1)
36722>>>>>>>>
36722>>>>>>>                Get Data_Set_Server iCount to hPrnt
36723>>>>>>>                If (Constrain_File(Self)<>Main_File(hPrnt) and ;                    not (IsSameRowID(prFindRowId(hPrnt),CurrentRowId(hPrnt)))) Begin
36725>>>>>>>                    // the parent is either wrong or not processed yet. Either way
36725>>>>>>>                    // make it right.
36725>>>>>>>                    Get ReSyncRecord of hPrnt to bOk
36726>>>>>>>                    If not bOk Begin
36728>>>>>>>                        Function_Return False
36729>>>>>>>                    End
36729>>>>>>>>
36729>>>>>>>                End
36729>>>>>>>>
36729>>>>>>>            Loop
36730>>>>>>>>
36730>>>>>>>        End
36730>>>>>>>>
36730>>>>>>>        
36730>>>>>>>        Function_Return True
36731>>>>>>>    End_Function
36732>>>>>>>    
36732>>>>>>>    // **Note** - dealing with changed parents and diamonds during a resync.
36732>>>>>>>    // If there is not a relates-to contraint between DD and child it is possible
36732>>>>>>>    // that the child find's relate will change the just found parent DD.
36732>>>>>>>    // Assuming this is not a structure bug, it means the parent is changed parent and that
36732>>>>>>>    // change must occur after the child record has been found and related. Therefore we add
36732>>>>>>>    // check after each child find to see if an parent is incorrect. If it is, either it is a
36732>>>>>>>    // switched parent or we haven't processed it yet. If the record is fine it
36732>>>>>>>    // just does nothing. For example (where *=relates-to):
36732>>>>>>>    //     W
36732>>>>>>>    //   */  \*
36732>>>>>>>    //   X    Y
36732>>>>>>>    //    \  /*
36732>>>>>>>    //     Z
36732>>>>>>>    // Assume you found a Z and changed its parent X.
36732>>>>>>>    // The refind order can be: WXZY or WYZX
36732>>>>>>>    // If WXZY the refound parent will be lost because Z will relate after the X
36732>>>>>>>    // find and replace it with the original parent. To control this we add this check
36732>>>>>>>    // after child Z has done its work. We only need to do this when child DDOs exist
36732>>>>>>>    // that are not constrained. This can change the order that DDOs are resynced but it
36732>>>>>>>    // should not matter.
36732>>>>>>>    
36732>>>>>>>    
36732>>>>>>>    
36732>>>>>>>    // Private use by new webapp framework
36732>>>>>>>    Procedure ReSyncClearAll
36734>>>>>>>        Boolean bOldReSync
36734>>>>>>>        Get pbInReSync to bOldReSync
36735>>>>>>>        // we need this to stop RememberLast and retains. We don't want those during a resyc clear
36735>>>>>>>        Set pbInReSync to True
36736>>>>>>>        Send Clear_All
36737>>>>>>>        Set pbInReSync to bOldReSync
36738>>>>>>>    End_Procedure
36739>>>>>>>    
36739>>>>>>>    // returns table name for error display. By default it returns the logical name
36739>>>>>>>    // can be augmented to return other information
36739>>>>>>>    Function ErrorMessageTableName Integer iTable Returns String
36741>>>>>>>        String sTable
36741>>>>>>>        Get_Attribute DF_FILE_LOGICAL_NAME of iTable to sTable
36744>>>>>>>        Function_Return sTable
36745>>>>>>>    End_Function
36746>>>>>>>    
36746>>>>>>>    
36746>>>>>>>    // Augmented to test updating connections.
36746>>>>>>>    // If error report it.
36746>>>>>>>    Procedure Request_Save
36748>>>>>>>        Integer iRval
36748>>>>>>>        String sTable
36748>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
36750>>>>>>>            Send Update_Focus_Field_For_Operation MODE_SAVING // added in 12.1/15.1
36751>>>>>>>            Get Validate_Save_Structure False to iRval
36752>>>>>>>            If iRval Begin
36754>>>>>>>                Get ErrorMessageTableName iRval to sTable
36755>>>>>>>                Move (String(iRval) * "(" - sTable -")") to sTable
36756>>>>>>>                Send Data_Set_Error -1 DFERR_PROGRAM DD_INVALID_SAVE_STRUCTURE sTable
36757>>>>>>>                Procedure_Return
36758>>>>>>>            End
36758>>>>>>>>
36758>>>>>>>        End
36758>>>>>>>>
36758>>>>>>>        Forward Send Request_Save
36760>>>>>>>    End_Procedure
36761>>>>>>>    
36761>>>>>>>    // Augmented to test updating connections.
36761>>>>>>>    // If error report it.
36761>>>>>>>    Procedure Request_Delete
36763>>>>>>>        Integer iRval
36763>>>>>>>        String sTable
36763>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
36765>>>>>>>            Send Update_Focus_Field_For_Operation MODE_DELETING // added to 12.1/15.1
36766>>>>>>>            Get Validate_Delete_Structure False to iRval
36767>>>>>>>            If iRval Begin
36769>>>>>>>                Get ErrorMessageTableName iRval to sTable
36770>>>>>>>                Move (String(iRval) * "(" - sTable -")") to sTable
36771>>>>>>>                Send data_Set_Error -1 DFERR_PROGRAM DD_INVALID_DELETE_STRUCTURE sTable
36772>>>>>>>                Procedure_Return
36773>>>>>>>            End
36773>>>>>>>>
36773>>>>>>>        End
36773>>>>>>>>
36773>>>>>>>        Forward Send Request_Delete
36775>>>>>>>    End_Procedure
36776>>>>>>>    
36776>>>>>>>    // Set status-line help for the passed field. This could have been named
36776>>>>>>>    // Set Field_Status_Help but this keeps this message interface consistent
36776>>>>>>>    // with the rest of DF for windows.
36776>>>>>>>    Procedure Set Status_Help Integer iField String sVal
36778>>>>>>>        Set Value of (StatusHelp_Array(Self)) iField to sVal
36779>>>>>>>    End_Procedure
36780>>>>>>>    
36780>>>>>>>    // Get status-line help for the passed field. This could have been named
36780>>>>>>>    // Get Field_Status_Help but this keeps this message interface consistent
36780>>>>>>>    // with the rest of DF for windows.
36780>>>>>>>    Function Status_Help Integer iField Returns String
36782>>>>>>>        String sHelp
36782>>>>>>>        Integer iObj
36782>>>>>>>        Move (StatusHelp_Array(Self)) to iObj
36783>>>>>>>        If (Item_Count(iObj)>iField) Begin
36785>>>>>>>            Get value of iObj iField to sHelp
36786>>>>>>>            If (sHelp = '0') ;                Move '' to shelp
36789>>>>>>>        End
36789>>>>>>>>
36789>>>>>>>        Function_Return shelp
36790>>>>>>>    End_Function
36791>>>>>>>    
36791>>>>>>>    // Get status-line help for the passed file and field. This is called
36791>>>>>>>    // by DEOs (or any other object) that needs help for a particular file
36791>>>>>>>    // and field.
36791>>>>>>>    Function File_Field_Status_Help Integer iFile Integer iField Returns String
36793>>>>>>>        Integer iDSO
36793>>>>>>>        String sValue
36793>>>>>>>        Get Data_set iFile to iDSO
36794>>>>>>>        If iDSO ;            Get Status_Help of iDSO iField to sValue
36797>>>>>>>        Function_Return sValue
36798>>>>>>>    End_Function
36799>>>>>>>    
36799>>>>>>>    // Allows user to set a mask type. Legal value is any of the current mask
36799>>>>>>>    // window types. 0 Means undefined.
36799>>>>>>>    Procedure Set Field_Mask_Type Integer iField Integer iType
36801>>>>>>>        Set Field_Mask_Type of (FieldMask_Array(Self)) iField to iType
36802>>>>>>>    End_Procedure
36803>>>>>>>    
36803>>>>>>>    Function Field_Mask_Type Integer iField Returns Integer
36805>>>>>>>        Function_Return (Field_Mask_Type(FieldMask_Array(Self),iField))
36806>>>>>>>    End_Function
36807>>>>>>>    
36807>>>>>>>    Function File_Field_Mask_Type Integer iFile Integer iField Returns Integer
36809>>>>>>>        Integer iDSO
36809>>>>>>>        Get Data_set iFile to iDSO
36810>>>>>>>        If iDSO ;            Function_Return (Field_Mask_Type(iDSO,iField))
36813>>>>>>>    End_Function
36814>>>>>>>    
36814>>>>>>>    // If TRUE the value returned by DEO will contain mask characters.
36814>>>>>>>    // Currently not supported.
36814>>>>>>>    Procedure Set Field_Mask_Value_State Integer iField Integer iState
36816>>>>>>>        Set Field_Mask_Value_State of (FieldMask_Array(Self)) iField to iState
36817>>>>>>>    End_Procedure
36818>>>>>>>    
36818>>>>>>>    Function Field_Mask_Value_State Integer iField Returns Integer
36820>>>>>>>        Function_Return (Field_Mask_Value_State(FieldMask_Array(Self),iField))
36821>>>>>>>    End_Function
36822>>>>>>>    
36822>>>>>>>    Function File_Field_Mask_Value_State Integer iFile Integer iField Returns Integer
36824>>>>>>>        Integer iDSO
36824>>>>>>>        Get Data_set iFile to iDSO
36825>>>>>>>        If iDSO ;            Function_Return (Field_Mask_Value_State(iDSO,iField))
36828>>>>>>>    End_Function
36829>>>>>>>    
36829>>>>>>>    // Allows user to set a mask strinng. Legal value is any of the current
36829>>>>>>>    // masks. Note an empty string with a valid mask type implies that the
36829>>>>>>>    // system should figure it out by itself.
36829>>>>>>>    Procedure Set Field_Mask Integer iField String sMask
36831>>>>>>>        Set Field_Mask of (FieldMask_Array(Self)) iField to sMask
36832>>>>>>>        If (Data_Set_User_Interface_Count(Self)) ;            Send Field_Mask_Changed iField sMask
36835>>>>>>>    End_Procedure
36836>>>>>>>    
36836>>>>>>>    Function Field_Mask Integer iField Returns String
36838>>>>>>>        Function_Return (Field_Mask(FieldMask_Array(Self),iField))
36839>>>>>>>    End_Function
36840>>>>>>>    
36840>>>>>>>    Function File_Field_Mask Integer iFile Integer iField Returns String
36842>>>>>>>        Integer iDSO
36842>>>>>>>        String sValue
36842>>>>>>>        Get Data_set iFile to iDSO
36843>>>>>>>        If iDSO ;            Get Field_Mask of iDSO iField to sValue
36846>>>>>>>        Function_Return sValue
36847>>>>>>>    End_Function
36848>>>>>>>    
36848>>>>>>>    // Short for field. This is normally used by grid headers.
36848>>>>>>>    Procedure Set Field_Label_Short Integer iField String sName
36850>>>>>>>        Set Field_Label_Short of (FieldMask_Array(Self)) iField to sName
36851>>>>>>>        If (Data_Set_User_Interface_Count(Self)) ;            Send Field_Label_Changed iField 0 sName
36854>>>>>>>    End_Procedure
36855>>>>>>>    
36855>>>>>>>    Function Field_Label_Short Integer iField Returns String
36857>>>>>>>        Function_Return (Field_Label_Short(FieldMask_Array(Self),iField))
36858>>>>>>>    End_Function
36859>>>>>>>    
36859>>>>>>>    Function File_Field_Label_Short Integer iFile Integer iField Returns String
36861>>>>>>>        Integer iDSO
36861>>>>>>>        String sValue
36861>>>>>>>        Get Data_set iFile to iDSO
36862>>>>>>>        If iDSO ;            Get Field_Label_Short of iDSO iField to sValue
36865>>>>>>>        Function_Return sValue
36866>>>>>>>    End_Function
36867>>>>>>>    
36867>>>>>>>    // Full Name for field. This is normally used by form labels
36867>>>>>>>    Procedure Set Field_Label_Long Integer iField String sName
36869>>>>>>>        Set Field_Label_Long of (FieldMask_Array(Self)) iField to sName
36870>>>>>>>        If (Data_Set_User_Interface_Count(Self)) ;            Send Field_Label_Changed iField 1 sName
36873>>>>>>>    End_Procedure
36874>>>>>>>    
36874>>>>>>>    Function Field_Label_Long Integer iField Returns String
36876>>>>>>>        Function_Return (Field_Label_Long(FieldMask_Array(Self),iField))
36877>>>>>>>    End_Function
36878>>>>>>>    
36878>>>>>>>    Function File_Field_Label_Long Integer iFile Integer iField Returns String
36880>>>>>>>        Integer iDSO
36880>>>>>>>        String sValue
36880>>>>>>>        Get Data_set iFile to iDSO
36881>>>>>>>        If iDSO ;            Get Field_Label_Long of iDSO iField to sValue
36884>>>>>>>        Function_Return sValue
36885>>>>>>>    End_Function
36886>>>>>>>    
36886>>>>>>>    // This is not really a DD attribute (it is in the API) but it is
36886>>>>>>>    // appropriate to be accessed from the DD
36886>>>>>>>    Function Field_Label_Tag Integer iField Returns String
36888>>>>>>>        String sName
36888>>>>>>>        Integer iFile
36888>>>>>>>        Get Main_File to iFile
36889>>>>>>>        If iFile ;            Get_Attribute DF_FIELD_NAME of iFile iField to sName
36894>>>>>>>        Function_Return sName
36895>>>>>>>    End_Function
36896>>>>>>>    
36896>>>>>>>    Function SmartCase String sName Returns String
36898>>>>>>>        Integer iPos iNewPos
36898>>>>>>>        String sRight
36898>>>>>>>        Move (Replaces("_",lowercase(sName)," ")) to sName
36899>>>>>>>        Move (Trim (Replaces(".",sName," "))) to sName
36900>>>>>>>        Move 1 to iPos
36901>>>>>>>        Repeat
36901>>>>>>>>
36901>>>>>>>            Move (mid(sName,255,iPos+1)) to sRight
36902>>>>>>>            Move (left(sName,iPos-1) + Uppercase(mid(sName,1,iPos)) + sRight) to sName
36903>>>>>>>            Move (Pos( " ", sRight)) to iNewPos
36904>>>>>>>            If (iNewPos = 0) ;                Break
36907>>>>>>>            Add (iNewPos+1) to iPos
36908>>>>>>>        Loop
36909>>>>>>>>
36909>>>>>>>        Function_Return sName
36910>>>>>>>    End_Function
36911>>>>>>>    
36911>>>>>>>    Enumeration_List
36911>>>>>>>        Define DD_LABEL_SHORT
36911>>>>>>>        Define DD_LABEL_LONG
36911>>>>>>>        Define DD_LABEL_TAG
36911>>>>>>>    End_Enumeration_List
36911>>>>>>>    
36911>>>>>>>    // Handy function to get the label for a field. Three "types" are
36911>>>>>>>    // supported:
36911>>>>>>>    // DD_LABEL_SHORT  use short, if none use long, if none use smart tag
36911>>>>>>>    // DD_LABEL_LONG   use long, if none use smart tag
36911>>>>>>>    // DD_LABEL_TAG    use smart tag
36911>>>>>>>    // If you want an explicit field name use oneof the other messages.
36911>>>>>>>    Function Field_Label Integer iField Integer iType Returns String
36913>>>>>>>        Integer iServer
36913>>>>>>>        String sValue
36913>>>>>>>        If (iType = DD_LABEL_SHORT) ;  // 0 = Short            Get Field_Label_Short iField to sValue
36916>>>>>>>        If (iType = DD_LABEL_LONG or (iType=DD_LABEL_SHORT and sValue='')) ;            Get Field_Label_Long iField to sValue
36919>>>>>>>        If (iType = DD_LABEL_TAG or sValue="") Begin
36921>>>>>>>            Get Field_Label_Tag iField to sValue
36922>>>>>>>            Get SmartCase sValue to sValue
36923>>>>>>>        End
36923>>>>>>>>
36923>>>>>>>        Function_Return sValue
36924>>>>>>>    End_Function
36925>>>>>>>    
36925>>>>>>>    Function File_Field_Label Integer iFile Integer iField Integer iType Returns String
36927>>>>>>>        Integer iDSO
36927>>>>>>>        String sValue
36927>>>>>>>        Get Data_set iFile to iDSO
36928>>>>>>>        If iDSO ;            Get Field_Label of iDSO iField iType to sValue
36931>>>>>>>        Function_Return sValue
36932>>>>>>>    End_Function
36933>>>>>>>    
36933>>>>>>>    // Normally this will not be used by a running program. However, it
36933>>>>>>>    // could be possible to create classes dynamically at runtime, in which
36933>>>>>>>    // case these messages could be useful. No File_Field is provided. If the
36933>>>>>>>    // person knows enough to create dynamic classes they can find the DD.
36933>>>>>>>    Procedure Set Field_Class_Name Integer iField String sName
36935>>>>>>>        Set Field_Class_Name of (FieldMask_Array(Self)) iField to sName
36936>>>>>>>    End_Procedure
36937>>>>>>>    
36937>>>>>>>    Function Field_Class_Name Integer iField Returns String
36939>>>>>>>        Function_Return (Field_Class_Name(FieldMask_Array(Self),iField))
36940>>>>>>>    End_Function
36941>>>>>>>    
36941>>>>>>>    // This procedure should be used to set a specific error number and
36941>>>>>>>    // message for a particular field. This can be used with the Field_error
36941>>>>>>>    // message to generate this error during a validation.
36941>>>>>>>    Procedure Set Field_Error Integer iField Integer iErr String sMsg
36943>>>>>>>        Set Field_Error of (Field_Attributes(Self)) iField to iErr sMsg
36944>>>>>>>    End_Procedure
36945>>>>>>>    
36945>>>>>>>    // Used to retreive the error number and message for a particular field
36945>>>>>>>    Function Field_Error_Number Integer iField Returns Integer
36947>>>>>>>        Function_Return (Field_Error_Number(Field_Attributes(Self),iField))
36948>>>>>>>    End_Function
36949>>>>>>>    
36949>>>>>>>    Function Field_Error_Message Integer iField Returns String
36951>>>>>>>        Function_Return (Field_Error_Message(Field_Attributes(Self),iField))
36952>>>>>>>    End_Function
36953>>>>>>>    
36953>>>>>>>    // This procedure is used to declare an error on a standard field
36953>>>>>>>    // validation violation like Range or Check.
36953>>>>>>>    // Can pass 1 to 4 params:
36953>>>>>>>    // iField -                  Standard usage. Generates field as defined
36953>>>>>>>    //                           for this field. If field=-1, General error
36953>>>>>>>    // iField SDefault           If no field error mess (or field=-1) use
36953>>>>>>>    //                           the default message
36953>>>>>>>    // iField sDefault sParam1 {sParam2} Replace occurances of @PARAM1 and
36953>>>>>>>    //                           @PARAM2 in text with these values
36953>>>>>>>    Procedure Field_Error Integer iField String sDefault ;            String sParam1 String sParam2
36955>>>>>>>        Integer iErr
36955>>>>>>>        String  sMess
36955>>>>>>>        If (iField >= 0) Begin
36957>>>>>>>            Get Field_Error_Number  iField to iErr
36958>>>>>>>            Get Field_Error_Message iField to sMess
36959>>>>>>>        End
36959>>>>>>>>
36959>>>>>>>        If (sMess="" and Num_Arguments>1) ;            Move sDefault to sMess
36962>>>>>>>        If (Num_Arguments = 4) ;            Send Data_Set_Error iField iErr sMess sParam1 sParam2
36965>>>>>>>        Else If (Num_Arguments = 3) ;            Send Data_Set_Error iField iErr sMess sParam1
36969>>>>>>>        Else ;            Send Data_Set_Error iField iErr sMess
36971>>>>>>>    End_Procedure
36972>>>>>>>    
36972>>>>>>>    // Procedure Data_Set_Error
36972>>>>>>>    // This procedure is used to declare a data-set error. Pass error number
36972>>>>>>>    // and optional error message text.
36972>>>>>>>    // If iErr is 0, use the default error number.
36972>>>>>>>    // sParam1 and sParam2 are optional. If passed they are used as text
36972>>>>>>>    // replacements for @PARAM1 and @PARAM2.
36972>>>>>>>    // We pass iField (even though we don't use it) so that augmentations
36972>>>>>>>    // could support error logging down to a field level. If a non-field error
36972>>>>>>>    // is required the developer should pass negative values (e.g., -1)
36972>>>>>>>    // This will redirect errors locally if not already redirected
36972>>>>>>>    //
36972>>>>>>>    // Altered to additionally support %1 %2 replacements as well as
36972>>>>>>>    // replacements for @PARAM1 and @PARAM2. (vdf8.2)
36972>>>>>>>    Procedure Data_set_error Integer iField Integer iErr String sMess ;            String sParam1 String sParam2
36974>>>>>>>        Integer iOldField
36974>>>>>>>        Get Current_validate_field to iOldField
36975>>>>>>>        If (iField <> 0) ;            Set Current_Validate_field to iField
36978>>>>>>>        
36978>>>>>>>        If (iErr = 0) ; // if no error is passes, used a default error            Move DD_DEFAULT_ERROR_NUMBER to iErr
36981>>>>>>>        
36981>>>>>>>        If (sMess > "") Begin
36983>>>>>>>            
36983>>>>>>>            // Support message replacements.. Up to two values
36983>>>>>>>            // altered to support @Param1/2 and %1 %2 messages
36983>>>>>>>            If (Num_Arguments>3) Begin
36985>>>>>>>                Move (Replaces("@PARAM1", sMess, sParam1)) to sMess
36986>>>>>>>                If (Num_Arguments>4) Begin
36988>>>>>>>                    Move (Replaces("@PARAM2", sMess, sParam2)) to sMess
36989>>>>>>>                    Move (SFormat(sMess,sParam1,sParam2)) to sMess
36990>>>>>>>                End
36990>>>>>>>>
36990>>>>>>>                Else Begin
36991>>>>>>>                    Move (SFormat(sMess,sParam1)) to sMess
36992>>>>>>>                End
36992>>>>>>>>
36992>>>>>>>            End
36992>>>>>>>>
36992>>>>>>>            Move Self to ghoErrorSource
36993>>>>>>>            Error iErr sMess
36994>>>>>>>>
36994>>>>>>>            Move 0 to ghoErrorSource
36995>>>>>>>        End
36995>>>>>>>>
36995>>>>>>>        Else ;            Send Operation_Not_Allowed iErr
36997>>>>>>>        Set Current_validate_field to iOldField
36998>>>>>>>        Move True to Err // make sure Err is still set
36999>>>>>>>    End_Procedure
37000>>>>>>>    
37000>>>>>>>    // Augment to support Error_Report_Mode. Allows errors without error mess
37000>>>>>>>    // This will redirect errors locally if not already redirected
37000>>>>>>>    Procedure Operation_Not_Allowed Integer iErr
37002>>>>>>>        Integer bOK
37002>>>>>>>        Move Self to ghoErrorSource
37003>>>>>>>        Forward Send Operation_Not_Allowed iErr
37005>>>>>>>        Move 0 to ghoErrorSource
37006>>>>>>>    End_Procedure
37007>>>>>>>    
37007>>>>>>>    // Local error handler. When errors are redirected to the DD this proce-
37007>>>>>>>    // dure handles the errors. If error_report_mode is NO-report it sets
37007>>>>>>>    // the err indicator and returns. Else it redirects the error to the
37007>>>>>>>    // main error handler first moving its ID to ghoErrorSource. This way the
37007>>>>>>>    // handler knows who sent this message and will get additional error info
37007>>>>>>>    // by calling Get Extended_error_message
37007>>>>>>>    Procedure Error_Report Integer iError Integer iLine String ErrMsg
37009>>>>>>>        Integer hoErrId
37009>>>>>>>        Integer bRedirect
37009>>>>>>>        If (Error_Processing_State(Self)) ;  // this prevents recursion            Procedure_Return
37012>>>>>>>        Set Error_Processing_State to True
37013>>>>>>>        
37013>>>>>>>        // if no report mode, just set the err indicator to true.
37013>>>>>>>        If (Error_Report_Mode(Self)=DD_ERROR_NO_REPORT) ;            Move True to Err
37016>>>>>>>        Else Begin
37017>>>>>>>            Get Old_error_object_id to hoErrId  // the original error handler
37018>>>>>>>            If hoErrId Begin
37020>>>>>>>                Move (ghoErrorSource=0) to bRedirect
37021>>>>>>>                If bRedirect ;                    Move Self to ghoErrorSource // error handler can use this
37024>>>>>>>                Move hoErrID to Error_object_id
37025>>>>>>>                Send Error_Report to hoErrId iError iLine ErrMsg
37026>>>>>>>                Move Self to Error_object_id
37027>>>>>>>                If bRedirect ;                    Move 0 to ghoErrorSource
37030>>>>>>>            End
37030>>>>>>>>
37030>>>>>>>            Else ;                Send error_report of desktop iError iLine ErrMsg
37032>>>>>>>            //else forward send error_report iError iLine ErrMsg
37032>>>>>>>        End
37032>>>>>>>>
37032>>>>>>>        Set Error_Processing_State to False
37033>>>>>>>    End_Procedure
37034>>>>>>>    
37034>>>>>>>    // This is called (by the system error handler) to get additional informa-
37034>>>>>>>    // tion about the error. Returns a multi line string with each line
37034>>>>>>>    // separated by a "\n". Return the file number, name, and if possible
37034>>>>>>>    // the field number and name.
37034>>>>>>>    Function Extended_Error_Message Returns String
37036>>>>>>>        String sExtMess
37036>>>>>>>        String sFile
37036>>>>>>>        Integer iFile iField
37036>>>>>>>        Get main_file to iFile
37037>>>>>>>        Get Current_Validate_Field to iField
37038>>>>>>>        Get ErrorMessageTableName iFile to sFile
37039>>>>>>>        Move (DD_FILE_TEXT* String(iFile) * "-" * sFile) to sExtMess
37040>>>>>>>        If (iField > 0) ;            Append sExtMess "\n" ;            (DD_FIELD_TEXT* String(iField) * "-" * Field_Label(Self,iField,DD_LABEL_LONG))
37044>>>>>>>        Set Current_Validate_Field to 0
37045>>>>>>>        Function_Return sExtMess
37046>>>>>>>    End_Function
37047>>>>>>>    
37047>>>>>>>    Function Extended_Error_File Returns Integer
37049>>>>>>>        Function_Return (Main_File(Self))
37050>>>>>>>    End_Function
37051>>>>>>>    
37051>>>>>>>    Function Extended_Error_Field Returns Integer
37053>>>>>>>        Function_Return (Current_Validate_Field(Self))
37054>>>>>>>    End_Function
37055>>>>>>>    
37055>>>>>>>    
37055>>>>>>>    // The following messages are used to control smart file mode exception
37055>>>>>>>    // handling. The message "Send Add_system_File file# Fg" allows you to
37055>>>>>>>    // add system files (or any other files not known to the dso structure)
37055>>>>>>>    // within define_fields. This allows you to not have to augment the msg
37055>>>>>>>    // reset_filemodes_for_lock. The only truly public messages here are
37055>>>>>>>    // Add_system_file and Remove_system_File (which s/b rarely used).
37055>>>>>>>    
37055>>>>>>>    // Adds a system file for smart_file_mode handling. A second optional
37055>>>>>>>    // parameter may be passed to determine of the sys file should only be
37055>>>>>>>    // locked during a new save (and not during a delete or a save of an
37055>>>>>>>    // existing record). It is expected that this will be the only public
37055>>>>>>>    // message used to control smart filemode. All of the remaining sys file
37055>>>>>>>    // messages are considered advanced.
37055>>>>>>>    Procedure Add_System_File Integer iFile Integer iLock_Mode
37057>>>>>>>        Integer iobj iCnt iMode
37057>>>>>>>        If (Num_arguments = 1) ;            Move DD_Lock_on_All to iMode
37060>>>>>>>        Else ;            Move iLock_Mode     to iMode
37062>>>>>>>        Move (system_file_obj(Self)) to iObj
37063>>>>>>>        Get Item_Count  of iObj to iCnt
37064>>>>>>>        Set Array_Value of iObj iCnt to iFile
37065>>>>>>>        Increment iCnt
37066>>>>>>>        Set Array_Value of iObj iCnt to iMode
37067>>>>>>>    End_Procedure
37068>>>>>>>    
37068>>>>>>>    // Return number of system files
37068>>>>>>>    Function System_File_Count Returns Integer
37070>>>>>>>        Function_Return (Item_Count(System_File_Obj(Self))/2)
37071>>>>>>>    End_Function
37072>>>>>>>    
37072>>>>>>>    // Returns system file number for passed item.
37072>>>>>>>    Function System_File_Number Integer iItem Returns Integer
37074>>>>>>>        Function_Return (Integer_Value(System_File_Obj(Self),iItem*2))
37075>>>>>>>    End_Function
37076>>>>>>>    
37076>>>>>>>    // Returns system flag to determine if file is only used during a new
37076>>>>>>>    // save (and not during an exiting save or a delete).
37076>>>>>>>    Function System_File_Lock_Mode Integer iItem Returns Integer
37078>>>>>>>        Function_Return (Integer_Value(System_File_Obj(Self),iItem*2+1))
37079>>>>>>>    End_Function
37080>>>>>>>    
37080>>>>>>>    // Removes a system_file for smart_file_Mode handling. This remvoes the
37080>>>>>>>    // first occurance of the file (S/b the only occurance). We assume that
37080>>>>>>>    // this will be rarely used.
37080>>>>>>>    Procedure Remove_System_File Integer iFile
37082>>>>>>>        Integer iobj iCnt iItmCnt
37082>>>>>>>        Get System_file_Count to iItmCnt
37083>>>>>>>        Decrement iItmCnt
37084>>>>>>>        For iCnt from 0 to iItmCnt
37090>>>>>>>>
37090>>>>>>>            If (System_File_Number(Self,iCnt)=iFile) Begin
37092>>>>>>>                Move (system_file_obj(Self)) to iObj
37093>>>>>>>                Move (iCnt*2) to iCnt
37094>>>>>>>                Send Delete_Item to iObj iCnt
37095>>>>>>>                Send Delete_Item to iObj iCnt
37096>>>>>>>                Procedure_Return
37097>>>>>>>            End
37097>>>>>>>>
37097>>>>>>>        Loop
37098>>>>>>>>
37098>>>>>>>    End_Procedure
37099>>>>>>>    
37099>>>>>>>    // These set messages, add_client_file, add_server_file and add_system_file
37099>>>>>>>    // were added to more easily support visual DD class modeling. They do the
37099>>>>>>>    // same thing the Send counterpart messages do
37099>>>>>>>    
37099>>>>>>>    Procedure Set Add_Client_File Integer iFile
37101>>>>>>>        Send Add_Client_File iFile
37102>>>>>>>    End_Procedure
37103>>>>>>>    
37103>>>>>>>    Procedure Set Add_Server_File Integer iFile
37105>>>>>>>        Send Add_Server_File iFile
37106>>>>>>>    End_Procedure
37107>>>>>>>    
37107>>>>>>>    Procedure Set Add_System_File Integer iFile Integer iLock_Mode
37109>>>>>>>        // allow no arguments because the old message allowed this
37109>>>>>>>        If (Num_arguments=1) Begin
37111>>>>>>>            Send Add_System_File iFile
37112>>>>>>>        End
37112>>>>>>>>
37112>>>>>>>        Else Begin
37113>>>>>>>            Send Add_System_File iFile iLock_Mode
37114>>>>>>>        End
37114>>>>>>>>
37114>>>>>>>    End_Procedure
37115>>>>>>>    
37115>>>>>>>    // The Set Field_Auto_Increment method replaces the need to use the Define_Auto_Incrmement
37115>>>>>>>    // command. This models more easily and it supports multiple auto-increment fields
37115>>>>>>>    Procedure Set Field_Auto_Increment Integer iField Integer iSysFile Integer iSysField
37117>>>>>>>        Integer[] AutoIncFields
37118>>>>>>>        tDDFileField[] SysFileFields
37118>>>>>>>        tDDFileField[] SysFileFields
37119>>>>>>>        Integer iIndex
37119>>>>>>>        
37119>>>>>>>        If (iField=0 or (iSysFile<>0 and iSysField=0)) Begin
37121>>>>>>>            Error DFERR_PROGRAM "Auto-increment source or destination field is 0"
37122>>>>>>>>
37122>>>>>>>            Procedure_Return
37123>>>>>>>        End
37123>>>>>>>>
37123>>>>>>>        // setting the sysfile to 0 is valid. It can be used to clear an existing sysfile
37123>>>>>>>        If (iSysFile=0) Begin
37125>>>>>>>            Move 0 to iSysField
37126>>>>>>>        End
37126>>>>>>>>
37126>>>>>>>        Get pAutoIncrementFields to AutoIncFields
37127>>>>>>>        Get pAutoIncrementSysFileFields to SysFileFields
37128>>>>>>>        // the destination field array is a list of fields that have auto-incr info. There
37128>>>>>>>        // can only be zero or one entry per field arranged in no defined order.
37128>>>>>>>        // see if field is already defined. If not add this to the end.
37128>>>>>>>        Move (SearchArray(iField,AutoIncFields)) to iIndex
37129>>>>>>>        If (iIndex=-1) Begin
37131>>>>>>>            Move (SizeOfArray(SysFileFields)) to iIndex
37132>>>>>>>        End
37132>>>>>>>>
37132>>>>>>>        Move iField    to AutoIncFields[iIndex]
37133>>>>>>>        Move iSysFile  to SysFileFields[iIndex].iFile
37134>>>>>>>        Move iSysField to SysFileFields[iIndex].iField
37135>>>>>>>        Set pAutoIncrementFields to AutoIncFields
37136>>>>>>>        Set pAutoIncrementSysFileFields to SysFileFields
37137>>>>>>>    End_Procedure
37138>>>>>>>    
37138>>>>>>>    // Get auto-increment system file/field value for a field. There really should be no
37138>>>>>>>    // reason to ever need this. Field is returned byref
37138>>>>>>>    Function Field_Auto_Increment Integer iField Integer ByRef iSysField Returns Integer
37140>>>>>>>        Integer iSysFile
37140>>>>>>>        Integer[] AutoIncFields
37141>>>>>>>        tDDFileField[] SysFileFields
37141>>>>>>>        tDDFileField[] SysFileFields
37142>>>>>>>        Integer iIndex
37142>>>>>>>        
37142>>>>>>>        Get pAutoIncrementFields to AutoIncFields
37143>>>>>>>        Move (SearchArray(iField,AutoIncFields)) to iIndex
37144>>>>>>>        If (iIndex>-1) Begin
37146>>>>>>>            Get pAutoIncrementSysFileFields to SysFileFields
37147>>>>>>>            Move SysFileFields[iIndex].iFile to iSysFile
37148>>>>>>>            Move SysFileFields[iIndex].iField to iSysField
37149>>>>>>>        End
37149>>>>>>>>
37149>>>>>>>        Else Begin
37150>>>>>>>            Move 0 to iSysFile
37151>>>>>>>            Move 0 to iSysField
37152>>>>>>>        End
37152>>>>>>>>
37152>>>>>>>        Function_Return iSysFile
37153>>>>>>>    End_Function
37154>>>>>>>    
37154>>>>>>>    
37154>>>>>>>    // Augmented to set any system files defined via the Add_System_file
37154>>>>>>>    // message. This allows us to hide this procedure for the vast majority
37154>>>>>>>    // of cases.
37154>>>>>>>    Procedure Reset_Filemodes_For_Lock
37156>>>>>>>        Boolean bNewRec
37156>>>>>>>        Integer  iItmCnt iCnt iMode iFile
37156>>>>>>>        Integer iMain iMaster iOpts
37156>>>>>>>        Handle hoDD
37156>>>>>>>        
37156>>>>>>>        Forward Send Reset_Filemodes_for_lock
37158>>>>>>>        
37158>>>>>>>        Get System_File_Count to iItmCnt
37159>>>>>>>        If iItmCnt Begin
37161>>>>>>>            Move (not(HasRecord(Self))) to bNewRec
37162>>>>>>>            Decrement iItmCnt
37163>>>>>>>            For iCnt from 0 to iItmCnt
37169>>>>>>>>
37169>>>>>>>                Get System_File_Number         iCnt to iFile
37170>>>>>>>                Get System_File_Lock_Mode iCnt to iMode
37171>>>>>>>                If ( (iMode=DD_Lock_on_All) or ;                    (Operation_Mode=MODE_DELETING and (iMode iand DD_Lock_on_Delete) ) or ;                    (Operation_Mode=MODE_SAVING and ( (iMode iand DD_Lock_on_Save) or ;                    ( (iMode iand DD_Lock_on_New_Save) and bNewRec) ) ) ) Begin
37173>>>>>>>                    Set_Attribute DF_FILE_MODE of iFile to DF_FILEMODE_DEFAULT
37176>>>>>>>                End
37176>>>>>>>>
37176>>>>>>>            Loop
37177>>>>>>>>
37177>>>>>>>        End
37177>>>>>>>>
37177>>>>>>>        
37177>>>>>>>        // augment to support DD magnaged alias tables.
37177>>>>>>>        // If an alias, set the alias to the proper alias no locks only if
37177>>>>>>>        // the master file is actually part of this DDO structure. This allows you
37177>>>>>>>        // to use alias files without the master being present (or even open). This will work without needing
37177>>>>>>>        // to set the Master|Alias DF_FILE_ALIAS attributes. If the file is master and part of the DDO structure
37177>>>>>>>        // it will already have its No_locks attribute cleared. If not part of the DD, its not needed.
37177>>>>>>>        //
37177>>>>>>>        Get MasterForAlias to iMaster
37178>>>>>>>        If iMaster Begin
37180>>>>>>>            Get Main_File to iMain
37181>>>>>>>            Get Data_Set iMaster to hoDD // is the master in the DD structure
37182>>>>>>>            If hoDD Begin
37184>>>>>>>                Get_Attribute DF_FILE_MODE of iMain to iOpts
37187>>>>>>>                Set_Attribute DF_FILE_MODE of iMain to (iOpts ior DF_FILEMODE_NO_LOCKS)
37190>>>>>>>                // note this will be reset to what it was when the transaction ends
37190>>>>>>>            End
37190>>>>>>>>
37190>>>>>>>        End
37190>>>>>>>>
37190>>>>>>>        
37190>>>>>>>    End_Procedure
37191>>>>>>>    
37191>>>>>>>    // Augmented to handle auto-increment fields if defined. The value from
37191>>>>>>>    // the auto-incre sys file is incremented, saved and moved to the new
37191>>>>>>>    // record. As of 17.0 this is no longer in Creating, which is called after
37191>>>>>>>    // AutoIncrement.
37191>>>>>>>    Procedure AutoIncrement
37193>>>>>>>        Integer iSrcFile iSrcField i iAutoFields
37193>>>>>>>        Integer iDestFile iDestField
37193>>>>>>>        Number nNum
37193>>>>>>>        Integer[] AutoIncFields
37194>>>>>>>        tDDFileField[] AutoIncSysFileFields
37194>>>>>>>        tDDFileField[] AutoIncSysFileFields
37195>>>>>>>        Handle hoOwner
37195>>>>>>>        
37195>>>>>>>        Forward Send AutoIncrement
37197>>>>>>>        
37197>>>>>>>        // this supports the older Define_Auto_Increment logic. Only one is supported
37197>>>>>>>        // this is exists for backwards compatibility
37197>>>>>>>        Get Auto_Increment_Source_File to iSrcFile
37198>>>>>>>        If iSrcFile Begin // do we have auto increment?
37200>>>>>>>            Get Auto_Increment_Source_Field  to iSrcField
37201>>>>>>>            Get Auto_Increment_Dest_Field    to iDestField
37202>>>>>>>            If (iSrcField and iDestField) Begin  // just in case of error
37204>>>>>>>                Get Main_file to iDestFile
37205>>>>>>>                Get_Field_Value iSrcFile iSrcField to nNum
37208>>>>>>>                Move (nNum+1) to nNum
37209>>>>>>>                Set_Field_Value iSrcFile  iSrcField  to nNum
37212>>>>>>>                Set_Field_Value iDestFile iDestField to nNum
37215>>>>>>>                // if the file's DD is a parent file in the structure, this will get saved as part of normal operations
37215>>>>>>>                // if the DD is not a parent file, it is a sysfile and we must save it
37215>>>>>>>                Get Which_Data_Set iSrcFile to hoOwner
37216>>>>>>>                If not hoOwner Begin
37218>>>>>>>                    SaveRecord iSrcFile
37219>>>>>>>                End
37219>>>>>>>>
37219>>>>>>>            End
37219>>>>>>>>
37219>>>>>>>        End
37219>>>>>>>>
37219>>>>>>>        // this supports the newer set syntax which support multiple fields. It is expected that you will
37219>>>>>>>        // use one syntax of the other, not both. If you use the old syntax, you cannot use the new one
37219>>>>>>>        Else Begin
37220>>>>>>>            Get pAutoIncrementFields to AutoIncFields
37221>>>>>>>            Move (SizeOfArray(AutoIncFields)) to iAutoFields
37222>>>>>>>            If (iAutoFields>0) Begin
37224>>>>>>>                Get pAutoIncrementSysFileFields to AutoIncSysFileFields
37225>>>>>>>                Get Main_file to iDestFile
37226>>>>>>>                For i from 0 to (iAutoFields-1)
37232>>>>>>>>
37232>>>>>>>                    // it is legal to set the sysfile to 0, this means it has been cleared and is not used
37232>>>>>>>                    If (AutoIncSysFileFields[i].iFile>0) Begin
37234>>>>>>>                        // we assume both the fields are valid and that they've already been tested when added
37234>>>>>>>                        Get_Field_Value AutoIncSysFileFields[i].iFile AutoIncSysFileFields[i].iField to nNum
37237>>>>>>>                        Move (nNum+1) to nNum
37238>>>>>>>                        Set_Field_Value AutoIncSysFileFields[i].iFile AutoIncSysFileFields[i].iField to nNum
37241>>>>>>>                        Set_Field_Value iDestFile AutoIncFields[i] to nNum
37244>>>>>>>                        // if the file's DD is a parent file in the structure, this will get saved as part of normal operations
37244>>>>>>>                        // if the DD is not a parent file, it is a sysfile and we must save it
37244>>>>>>>                        Get Which_Data_Set AutoIncSysFileFields[i].iFile to hoOwner
37245>>>>>>>                        If not hoOwner Begin
37247>>>>>>>                            SaveRecord AutoIncSysFileFields[i].iFile
37248>>>>>>>                        End
37248>>>>>>>>
37248>>>>>>>                    End
37248>>>>>>>>
37248>>>>>>>                Loop
37249>>>>>>>>
37249>>>>>>>            End
37249>>>>>>>>
37249>>>>>>>        End
37249>>>>>>>>
37249>>>>>>>        
37249>>>>>>>    End_Procedure
37250>>>>>>>    
37250>>>>>>>    // Augmented to fix a bug in the data-set C code. When a record is saved
37250>>>>>>>    // as part of a delete operation OnNewCurrentRecord is not called. It
37250>>>>>>>    // should be. We will do this in flex code for now.
37250>>>>>>>    Procedure Save_Main_File
37252>>>>>>>        RowID riRec
37252>>>>>>>        Integer iRec iMain
37252>>>>>>>        Boolean bRecnumTable bChanged
37252>>>>>>>        
37252>>>>>>>        Get Main_File to iMain
37253>>>>>>>        Get_Attribute DF_FILE_CHANGED of iMain to bChanged
37256>>>>>>>        If bChanged Begin
37258>>>>>>>            Send OnSaveRecord // OnSaveRecord sent if there is something to save
37259>>>>>>>        End
37259>>>>>>>>
37259>>>>>>>        
37259>>>>>>>        Forward Send Save_Main_File
37261>>>>>>>        
37261>>>>>>>        If (Operation_Mode = MODE_DELETING) Begin  // during a delete the crnt
37263>>>>>>>            Get CurrentRowId to riRec             // rec of parents do not change
37264>>>>>>>            Send OnNewCurrentRecord riRec riRec  // so old and new are the same.
37265>>>>>>>            // for backwards compatibility reasons, we also send new_current_record if appropriate
37265>>>>>>>            Get_Attribute DF_FILE_RECNUM_TABLE of iMain to bRecnumTable
37268>>>>>>>            If (bRecnumTable) Begin
37270>>>>>>>                Get_Field_Value iMain 0 to iRec
37273>>>>>>>                Send New_Current_Record iRec iRec
37274>>>>>>>            End
37274>>>>>>>>
37274>>>>>>>        End
37274>>>>>>>>
37274>>>>>>>    End_Procedure
37275>>>>>>>    
37275>>>>>>>    // Augmented to not clear if a system-file. The auto-latching of views
37275>>>>>>>    // may cause a sys file DD to get cleared. This corrects this. This really
37275>>>>>>>    // belongs in Data_set (C) but we will not risk this for now.
37275>>>>>>>    Procedure Clear_Main_File
37277>>>>>>>        Integer iFile iIsSys
37277>>>>>>>        Get Main_File to iFile
37278>>>>>>>        If iFile Begin
37280>>>>>>>            Get_Attribute DF_FILE_IS_SYSTEM_FILE of iFile to iIsSys
37283>>>>>>>            If iIsSys ;                Procedure_Return
37286>>>>>>>        End
37286>>>>>>>>
37286>>>>>>>        Forward Send Clear_main_file
37288>>>>>>>    End_Procedure
37289>>>>>>>    
37289>>>>>>>    // Executes a request_find on the mainfile. This is easier that having to
37289>>>>>>>    // pass file number all the time. Useful for batch operations.
37289>>>>>>>    // If Index is 0, use find_by_recnum (it handles a recnum of 0 better)
37289>>>>>>>    Procedure Find Integer iMode Integer iIndex
37291>>>>>>>        Integer iFile
37291>>>>>>>        Integer iRec
37291>>>>>>>        Get Main_file to iFile
37292>>>>>>>        If (iIndex<>0 or iMode<>EQ) ;            Send request_find iMode iFile iIndex
37295>>>>>>>        Else Begin
37296>>>>>>>            // this would never happen with row ID
37296>>>>>>>            Get_Field_Value iFile 0 to iRec // get recnum value
37299>>>>>>>            Send find_by_recnum iFile iRec
37300>>>>>>>        End
37300>>>>>>>>
37300>>>>>>>    End_Procedure
37301>>>>>>>    
37301>>>>>>>    // So many people make the mistake of using requeset_clear and request_
37301>>>>>>>    // clear_all that will support these are alteratives to clear and
37301>>>>>>>    // clear_all. The preferred messages remain Clear and Clear_all.
37301>>>>>>>    // This would not work if you nested DEOs within DSOs (no-one does).
37301>>>>>>>    Procedure Request_Clear
37303>>>>>>>        Send Clear
37304>>>>>>>    End_Procedure
37305>>>>>>>    
37305>>>>>>>    Procedure Request_Clear_All
37307>>>>>>>        Send Clear_All
37308>>>>>>>    End_Procedure
37309>>>>>>>    
37309>>>>>>>    // we want changed_state to always go through the
37309>>>>>>>    // Record_buffer object. From there it is sent to
37309>>>>>>>    // here. So if state or RB does not match we must
37309>>>>>>>    // send to the RB object...it will delegate to here
37309>>>>>>>    
37309>>>>>>>    Procedure Set Changed_State Integer bState
37311>>>>>>>        Integer hRB
37311>>>>>>>        Move (record_buffer(Self)) to hRB
37312>>>>>>>        If (hRB and changed_state(hRB)<>bState) ;            Set changed_state of hRB to bState
37315>>>>>>>        Else ;            Forward Set changed_state to bState
37318>>>>>>>    End_Procedure
37319>>>>>>>    
37319>>>>>>>    // this lets us use the new attach logic
37319>>>>>>>    
37319>>>>>>>    // This is a smarter attach than the normal attach command. It only attaches data from a parent
37319>>>>>>>    // if 1) the DDO parent is connected to the structure and 2) if there is a record to attach. It will
37319>>>>>>>    // not attach empty records into a child. This should make the finding (and saving) more sensible when
37319>>>>>>>    // partial DD structures are used. For example, often a report does not all of the parent DDOs - however if
37319>>>>>>>    // they are not provided, finding can get messed up because blank data is being moved into the child before a
37319>>>>>>>    // find. This has been a problem since 3.0. This should just make it go away.
37319>>>>>>>    // as of 17.0, we get the related field info through the local DSO if needed
37319>>>>>>>    
37319>>>>>>>    // as if 18.1 this is only called when there is an attachable relationship. This gives us a chance to do any
37319>>>>>>>    // customizations and to cancel the attach. We've left this to the flex level so we can fine tune attaches.
37319>>>>>>>    Function ShouldFieldAttach Integer iField Handle hoRelDD Returns Boolean
37321>>>>>>>        Boolean bDoAttach bChanged
37321>>>>>>>        Integer iFile iStat iRelFile iType
37321>>>>>>>        String sValue
37321>>>>>>>        
37321>>>>>>>        Get Main_File to iFile
37322>>>>>>>        Get Main_File of hoRelDD to iRelFile
37323>>>>>>>        
37323>>>>>>>        // before we attach check if Find mode and relfile is new and unchanged..if so skip.
37323>>>>>>>        // If operation_mode is 0, this is probably a Find (item_find sends attach_main_file for some reason).
37323>>>>>>>        Move True to bDoAttach
37324>>>>>>>        If (Operation_mode=MODE_FINDING or OPERATION_MODE=0) Begin
37326>>>>>>>            // we can test the file status to see if we have a record or not. If we have a record, we attach
37326>>>>>>>            Get_Attribute DF_FILE_STATUS  of iRelFile to iStat
37329>>>>>>>            If (iStat=DF_FILE_INACTIVE) Begin
37331>>>>>>>                // if no record, we need to look for changes. We can't just look at the file's changed state because the DD
37331>>>>>>>                // may have set defaults, which have been moved to the buffer. We should be able to check the DD's changed state
37331>>>>>>>                // because this is not set with default values. When doing a find entry_update this should be ok. If this were
37331>>>>>>>                // a save, this would cause problems (but this is not a save). Prior to 17.0 this was not an issue with windows
37331>>>>>>>                // applications because find entry_updates were done at the DEO level (unlike web applications).
37331>>>>>>>                Get Changed_State of hoRelDD to bChanged
37332>>>>>>>                Move bChanged to bDoAttach
37333>>>>>>>                
37333>>>>>>>                // special Triumph workaround for Item_Find with blank inner segment. They were counting on the item_find attach_main_file
37333>>>>>>>                // which would slip through the "no-attach on find when parent is empty optimization". This was needed to force a string segment
37333>>>>>>>                // that was "" to get filled with spaces from the parent field. The child field was set to "" because of a constrained_clear
37333>>>>>>>                // in Item_find. This workaround is as narrow as possible. If an item_find attach_main_file (operation_mode=0) and this is
37333>>>>>>>                // an empty parent (bOk was just set to False), and the field is DF_Ascii and the child value is empty (no trailing spaces)
37333>>>>>>>                // then force an attach. Since the parent should be "", we can just Set_Field_value to "", which fills the field buffer.
37333>>>>>>>                // There is no real logic as to why this is being done other than to make it work like it used to with the least
37333>>>>>>>                // amount of side-effects.
37333>>>>>>>                If (not(bDoAttach) and OPERATION_MODE=0) Begin
37335>>>>>>>                    Get_Attribute DF_FIELD_TYPE of iFile iField to iType
37338>>>>>>>                    If (iType=DF_ASCII) Begin
37340>>>>>>>                        Get_Field_Value iFile iField to sValue
37343>>>>>>>                        // if no spaces, this probably was cleared via constrained_clear in Item_Find. We should update
37343>>>>>>>                        If (Ascii(Left(sValue,1))=0) Begin
37345>>>>>>>                            Set_Field_Value iFile iField to ""
37348>>>>>>>                        End
37348>>>>>>>>
37348>>>>>>>                    End
37348>>>>>>>>
37348>>>>>>>                End
37348>>>>>>>>
37348>>>>>>>                
37348>>>>>>>            End
37348>>>>>>>>
37348>>>>>>>        End
37348>>>>>>>>
37348>>>>>>>        Function_Return bDoAttach
37349>>>>>>>    End_Function
37350>>>>>>>    
37350>>>>>>>    // Notify all DEOs that a mask has changed.
37350>>>>>>>    //        this message is sent by set Field_Mask
37350>>>>>>>    Procedure Field_Mask_Changed Integer iField String sMask
37352>>>>>>>        Integer i iDEOs iDEO
37352>>>>>>>        Integer iMain_File
37352>>>>>>>        Get Main_File to iMain_File
37353>>>>>>>        Get Data_Set_User_Interface_Count to iDEOs
37354>>>>>>>        Decrement iDEOs
37355>>>>>>>        For i from 0 to iDEOs
37361>>>>>>>>
37361>>>>>>>            Get Data_Set_User_Interface i to iDEO
37362>>>>>>>            If (Extended_DEO_State(iDEO)) ;                Send File_Field_Mask_Changed to iDEO ;                iMain_File iField sMask
37365>>>>>>>        Loop
37366>>>>>>>>
37366>>>>>>>    End_Procedure
37367>>>>>>>    
37367>>>>>>>    // Notify all DEOs that a label has changed.
37367>>>>>>>    //   This message is sent by Set Field_Label_long & Field_Label_Short
37367>>>>>>>    Procedure Field_label_Changed Integer iField Boolean bLong String sLabel
37369>>>>>>>        Integer i iDEOs iDEO
37369>>>>>>>        Integer iMain_File
37369>>>>>>>        Get Main_File to iMain_File
37370>>>>>>>        Get Data_Set_User_Interface_Count to iDEOs
37371>>>>>>>        Decrement iDEOs
37372>>>>>>>        For i from 0 to iDEOs
37378>>>>>>>>
37378>>>>>>>            Get Data_Set_User_Interface i to iDEO
37379>>>>>>>            If (Extended_DEO_State(iDEO)) ;                Send File_Field_Label_Changed to iDEO ;                iMain_File iField bLong sLabel
37382>>>>>>>        Loop
37383>>>>>>>>
37383>>>>>>>    End_Procedure
37384>>>>>>>    
37384>>>>>>>    // Notify all DEOs that a field option has changed.
37384>>>>>>>    //   This message is sent by Set Field_Option
37384>>>>>>>    Procedure Field_Option_Changed Integer iField Integer iOptions Boolean bClear
37386>>>>>>>        Integer i iDEOs iDEO
37386>>>>>>>        Integer iMain_File
37386>>>>>>>        Get Main_File to iMain_File
37387>>>>>>>        Get Data_Set_User_Interface_Count to iDEOs
37388>>>>>>>        Decrement iDEOs
37389>>>>>>>        For i from 0 to iDEOs
37395>>>>>>>>
37395>>>>>>>            Get Data_Set_User_Interface i to iDEO
37396>>>>>>>            If (Extended_DEO_State(iDEO)) ;                Send File_Field_Option_Changed of iDEO ;                iMain_File iField iOptions bClear
37399>>>>>>>        Loop
37400>>>>>>>>
37400>>>>>>>    End_Procedure
37401>>>>>>>    
37401>>>>>>>    
37401>>>>>>>    //   Set, clear or toggle a field option
37401>>>>>>>    //   Multiple options can be passed as an expression
37401>>>>>>>    //   (e.g. Set Field_option 2 (dd_Retain IOR dd_NoEnter).
37401>>>>>>>    //   Unlike set Field_options this notifies DEOs of changes
37401>>>>>>>    // supports setting and clearing. e.g.:
37401>>>>>>>    //    Set Field_Option Field Customer.Name DD_NoEnter to True
37401>>>>>>>    // This new syntax is now the recommended syntax but the older syntax without
37401>>>>>>>    // the last parameter is supported (where true is the default). The old syntax is
37401>>>>>>>    // only supported for compatibility. This means that Field_Option_Clear should
37401>>>>>>>    // also be replaced with Field_Option
37401>>>>>>>    Procedure Set Field_Option Integer iField Integer iOption Boolean bSet
37403>>>>>>>        Boolean bSetTrue
37403>>>>>>>        Move (If(num_arguments>2, bSet, True)) to bSetTrue // support for old deprecated syntax
37404>>>>>>>        If bSetTrue Begin
37406>>>>>>>            Set Field_options iField to iOption
37407>>>>>>>        End
37407>>>>>>>>
37407>>>>>>>        Else Begin
37408>>>>>>>            Set Field_options iField to DD_CLEAR_FIELD_OPTIONS iOption
37409>>>>>>>        End
37409>>>>>>>>
37409>>>>>>>        If (Data_Set_User_Interface_Count(Self)) Begin
37411>>>>>>>            Send Field_Option_Changed iField iOption (not(bSetTrue))
37412>>>>>>>        End
37412>>>>>>>>
37412>>>>>>>    End_Procedure
37413>>>>>>>    
37413>>>>>>>    Procedure Set File_Field_Option Integer iFile Integer iField Integer iOption Boolean bSet
37415>>>>>>>        Handle hoDD
37415>>>>>>>        Boolean bSetTrue
37415>>>>>>>        Move (If(num_arguments>3, bSet, True)) to bSetTrue // support for old deprecated syntax
37416>>>>>>>        Get Data_set iFile to hoDD
37417>>>>>>>        If hoDD Begin
37419>>>>>>>            Set Field_Option of hoDD iField iOption to bSetTrue
37420>>>>>>>        End
37420>>>>>>>>
37420>>>>>>>        
37420>>>>>>>    End_Procedure
37421>>>>>>>    
37421>>>>>>>    Procedure Set Field_Option_Clear Integer iField Integer iOptions
37423>>>>>>>        Set Field_Option iField iOptions to False
37424>>>>>>>    End_Procedure
37425>>>>>>>    
37425>>>>>>>    Procedure Set File_Field_Option_Clear Integer iFile Integer iField Integer iOptions
37427>>>>>>>        Set File_Field_Option iFile iField iOptions to False
37428>>>>>>>    End_Procedure
37429>>>>>>>    
37429>>>>>>>    Procedure Set Field_Option_Toggle Integer iField Integer iOption
37431>>>>>>>        Integer iOldOption
37431>>>>>>>        Get Field_Options iField to iOldOption
37432>>>>>>>        // if old and new have overlapping bits, we assume clear
37432>>>>>>>        Set Field_Option iField iOption to ((iOldOption iand iOption)=0)
37433>>>>>>>    End_Procedure
37434>>>>>>>    
37434>>>>>>>    Procedure Set File_Field_Option_Toggle Integer iFile Integer iField Integer iOption
37436>>>>>>>        Handle hoDD
37436>>>>>>>        Get Data_set iFile to hoDD
37437>>>>>>>        If hoDD ;            Set Field_Option_Toggle of hoDD iField to iOption
37440>>>>>>>    End_Procedure
37441>>>>>>>    
37441>>>>>>>    // This returns the main index for a field. This replaces the DSO message Field_Main_index which
37441>>>>>>>    // should no longer be used by DDOs. The old message has the problem that the DDO or DSO using
37441>>>>>>>    // this message may not be the owner of the field. So augmenting the owner DDO did not insure that
37441>>>>>>>    // all requests for this index would go through it. Now you can augment Field_Index and always
37441>>>>>>>    // be sure that any DDO requesting an index for a file (via file_field_index) will always go to
37441>>>>>>>    // the owner object.
37441>>>>>>>    Function Field_Index Integer iField Returns Integer
37443>>>>>>>        Integer iFile iIndex iOrder
37443>>>>>>>        // ordering takes precendence
37443>>>>>>>        Get ordering to iOrder
37444>>>>>>>        If (iOrder>=0);            Move iOrder to iIndex  //ordering takes precedence over main index
37447>>>>>>>        Else Begin
37448>>>>>>>            Get Main_file to iFile
37449>>>>>>>            Get_Attribute DF_FIELD_INDEX of iFile iField to iIndex // main index field
37452>>>>>>>            If (iIndex=0 and iField>0) ; // If field is not recnum and there is no index, the                Move -1 to iIndex        // field has no main index
37455>>>>>>>        End
37455>>>>>>>>
37455>>>>>>>        Function_Return iIndex
37456>>>>>>>    End_Function
37457>>>>>>>    
37457>>>>>>>    // In all cases, this message should be sent instead of Field_Main_Index. If
37457>>>>>>>    // augmentation was used in Field_Main_Index, use Field_Index to insure the owner object
37457>>>>>>>    // is called.
37457>>>>>>>    
37457>>>>>>>    Function File_Field_Index Integer iFile Integer iField Returns Integer
37459>>>>>>>        Integer iIndex
37459>>>>>>>        Handle hoDD
37459>>>>>>>        Get Data_set iFile to hoDD
37460>>>>>>>        If (hoDD) ;            Get Field_Index of hoDD iField to iIndex
37463>>>>>>>        Else ;            Move -1 to iIndex
37465>>>>>>>        Function_Return iIndex
37466>>>>>>>    End_Function
37467>>>>>>>    
37467>>>>>>>    // 12/1 change: Make sure all of the major DD operations update the DD with the value in
37467>>>>>>>    // the focus field. After the actual find, save, clar or delete, the DD buffer contains information that
37467>>>>>>>    // is not yet reflected in the DEOs (before refresh is called) we want to make sure that we
37467>>>>>>>    // don't try to get data from the DEO. Get Field_Current_Value now checks if operation_mode is
37467>>>>>>>    // non-zero. If it is, it always gets from the DD buffer.
37467>>>>>>>    
37467>>>>>>>    Procedure Clear
37469>>>>>>>        Boolean bOpOk
37469>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37470>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37472>>>>>>>            Send Update_Focus_Field_For_Operation MODE_CLEARING
37473>>>>>>>        End
37473>>>>>>>>
37473>>>>>>>        If (bOpOk) Begin
37475>>>>>>>            Send OnPreFind DDFindClear
37476>>>>>>>        End
37476>>>>>>>>
37476>>>>>>>        Forward Send Clear
37478>>>>>>>        If (bOpOk) Begin
37480>>>>>>>            Send DefaultParentAutofinds
37481>>>>>>>            Send OnPostFind DDFindClear True
37482>>>>>>>        End
37482>>>>>>>>
37482>>>>>>>    End_Procedure
37483>>>>>>>    
37483>>>>>>>    Procedure Clear_All
37485>>>>>>>        Boolean bOpOk
37485>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37486>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37488>>>>>>>            Send Update_Focus_Field_For_Operation MODE_CLEARINGALL
37489>>>>>>>        End
37489>>>>>>>>
37489>>>>>>>        Forward Send clear_all
37491>>>>>>>        If (bOpOk) Begin
37493>>>>>>>            Send DefaultParentAutofinds
37494>>>>>>>        End
37494>>>>>>>>
37494>>>>>>>    End_Procedure
37495>>>>>>>    
37495>>>>>>>    Procedure Request_Assign Integer iFile
37497>>>>>>>        Handle hoDD
37497>>>>>>>        Boolean bFound
37497>>>>>>>        Boolean bOpOk
37497>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37498>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37500>>>>>>>            Send Update_Focus_Field_For_Operation MODE_FINDING
37501>>>>>>>        End
37501>>>>>>>>
37501>>>>>>>        
37501>>>>>>>        If (bOpOk) Begin
37503>>>>>>>            If (num_arguments=0 or iFile=0) Begin
37505>>>>>>>                Move Self to hoDD
37506>>>>>>>            End
37506>>>>>>>>
37506>>>>>>>            Else Begin
37507>>>>>>>                Get Data_Set iFile to hoDD
37508>>>>>>>            End
37508>>>>>>>>
37508>>>>>>>            If hoDD Begin
37510>>>>>>>                Send OnPreFind of hoDD DDFindRequestAssign
37511>>>>>>>            End
37511>>>>>>>>
37511>>>>>>>        End
37511>>>>>>>>
37511>>>>>>>        
37511>>>>>>>        If (num_arguments=0) Begin
37513>>>>>>>            Forward Send Request_Assign
37515>>>>>>>        End
37515>>>>>>>>
37515>>>>>>>        Else Begin
37516>>>>>>>            Forward Send Request_Assign iFile
37518>>>>>>>        End
37518>>>>>>>>
37518>>>>>>>        
37518>>>>>>>        If (bOpOk) Begin
37520>>>>>>>            If (hoDD) Begin
37522>>>>>>>                Move (Found) to bFound
37523>>>>>>>                Send OnPostFind of hoDD DDFindRequestAssign bFound
37524>>>>>>>                Move bFound to Found
37525>>>>>>>            End
37525>>>>>>>>
37525>>>>>>>        End
37525>>>>>>>>
37525>>>>>>>    End_Procedure
37526>>>>>>>    
37526>>>>>>>    
37526>>>>>>>    Procedure Find_By_Recnum Integer iFile Integer iRecord
37528>>>>>>>        Handle hoDD
37528>>>>>>>        Boolean bFound
37528>>>>>>>        Boolean bOpOk
37528>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37529>>>>>>>        Send Update_Focus_Field_For_Operation MODE_FINDING
37530>>>>>>>        
37530>>>>>>>        If (bOpOk) Begin
37532>>>>>>>            Get Data_Set iFile to hoDD
37533>>>>>>>            If hoDD Begin
37535>>>>>>>                Send OnPreFind of hoDD DDFindFindByRowRec
37536>>>>>>>            End
37536>>>>>>>>
37536>>>>>>>        End
37536>>>>>>>>
37536>>>>>>>        
37536>>>>>>>        Forward Send Find_By_Recnum iFile iRecord
37538>>>>>>>        
37538>>>>>>>        If (bOpOk) Begin
37540>>>>>>>            If (hoDD) Begin
37542>>>>>>>                Move (Found) to bFound
37543>>>>>>>                Send OnPostFind of hoDD DDFindFindByRowRec bFound
37544>>>>>>>                Move bFound to Found
37545>>>>>>>            End
37545>>>>>>>>
37545>>>>>>>        End
37545>>>>>>>>
37545>>>>>>>    End_Procedure
37546>>>>>>>    
37546>>>>>>>    Procedure FindByRowId Integer iFile RowID riRowId
37548>>>>>>>        Handle hoDD
37548>>>>>>>        Boolean bFound
37548>>>>>>>        Boolean bOpOk
37548>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37549>>>>>>>        Send Update_Focus_Field_For_Operation MODE_FINDING
37550>>>>>>>        
37550>>>>>>>        If (bOpOk) Begin
37552>>>>>>>            Get Data_Set iFile to hoDD
37553>>>>>>>            If hoDD Begin
37555>>>>>>>                Send OnPreFind of hoDD DDFindFindByRowRec
37556>>>>>>>            End
37556>>>>>>>>
37556>>>>>>>        End
37556>>>>>>>>
37556>>>>>>>        
37556>>>>>>>        Forward Send FindByRowId iFile riRowId
37558>>>>>>>        
37558>>>>>>>        If (bOpOk) Begin
37560>>>>>>>            If (hoDD) Begin
37562>>>>>>>                Move (Found) to bFound
37563>>>>>>>                Send OnPostFind of hoDD DDFindFindByRowRec bFound
37564>>>>>>>                Move bFound to Found
37565>>>>>>>            End
37565>>>>>>>>
37565>>>>>>>        End
37565>>>>>>>>
37565>>>>>>>    End_Procedure
37566>>>>>>>    
37566>>>>>>>    Function FindByRowIdEx Integer iFile RowID riRowId Returns Boolean
37568>>>>>>>        Handle hoDD
37568>>>>>>>        Boolean bFound bSuccess
37568>>>>>>>        Boolean bOpOk
37568>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37569>>>>>>>        Send Update_Focus_Field_For_Operation MODE_FINDING
37570>>>>>>>        
37570>>>>>>>        If (bOpOk) Begin
37572>>>>>>>            Get Data_Set iFile to hoDD
37573>>>>>>>            If hoDD Begin
37575>>>>>>>                Send OnPreFind of hoDD DDFindFindByRowRec
37576>>>>>>>            End
37576>>>>>>>>
37576>>>>>>>        End
37576>>>>>>>>
37576>>>>>>>        
37576>>>>>>>        Forward Get FindByRowIdEx iFile riRowId to bSuccess
37578>>>>>>>        
37578>>>>>>>        If (bOpOk) Begin
37580>>>>>>>            If (hoDD) Begin
37582>>>>>>>                Move (Found) to bFound
37583>>>>>>>                Send OnPostFind of hoDD DDFindFindByRowRec bFound
37584>>>>>>>                Move bFound to Found
37585>>>>>>>            End
37585>>>>>>>>
37585>>>>>>>        End
37585>>>>>>>>
37585>>>>>>>        Function_Return bSuccess
37586>>>>>>>    End_Function
37587>>>>>>>    
37587>>>>>>>    Function FindByRowIdExNoAutoFill Integer iFile RowID riRowId Returns Boolean
37589>>>>>>>        Handle hoDD
37589>>>>>>>        Boolean bFound bSuccess
37589>>>>>>>        Boolean bOpOk
37589>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37590>>>>>>>        Send Update_Focus_Field_For_Operation MODE_FINDING
37591>>>>>>>        
37591>>>>>>>        If (bOpOk) Begin
37593>>>>>>>            Get Data_Set iFile to hoDD
37594>>>>>>>            If hoDD Begin
37596>>>>>>>                Send OnPreFind of hoDD DDFindFindByRowRec
37597>>>>>>>            End
37597>>>>>>>>
37597>>>>>>>        End
37597>>>>>>>>
37597>>>>>>>        
37597>>>>>>>        Forward Get FindByRowIdExNoAutoFill iFile riRowId to bSuccess
37599>>>>>>>        
37599>>>>>>>        If (bOpOk) Begin
37601>>>>>>>            If (hoDD) Begin
37603>>>>>>>                Move (Found) to bFound
37604>>>>>>>                Send OnPostFind of hoDD DDFindFindByRowRec bFound
37605>>>>>>>                Move bFound to Found
37606>>>>>>>            End
37606>>>>>>>>
37606>>>>>>>        End
37606>>>>>>>>
37606>>>>>>>        Function_Return bSuccess
37607>>>>>>>    End_Function
37608>>>>>>>    
37608>>>>>>>    
37608>>>>>>>    Procedure Request_Find Integer eFindMode Integer iFile Integer iIndex
37610>>>>>>>        Handle hoDD
37610>>>>>>>        Boolean bFound
37610>>>>>>>        Boolean bOpOk
37610>>>>>>>        Move (OPERATION_MODE=MODE_WAITING or OPERATION_MODE=MODE_VALIDATING) to bOpOk
37611>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37613>>>>>>>            Send Update_Focus_Field_For_Operation MODE_FINDING
37614>>>>>>>        End
37614>>>>>>>>
37614>>>>>>>        
37614>>>>>>>        If (bOpOk) Begin
37616>>>>>>>            Get Data_Set iFile to hoDD
37617>>>>>>>            If hoDD Begin
37619>>>>>>>                Send OnPreFind of hoDD DDFindRequestFind
37620>>>>>>>            End
37620>>>>>>>>
37620>>>>>>>        End
37620>>>>>>>>
37620>>>>>>>        
37620>>>>>>>        Forward Send Request_Find eFindMode iFile iIndex
37622>>>>>>>        
37622>>>>>>>        If (bOpOk) Begin
37624>>>>>>>            If (hoDD) Begin
37626>>>>>>>                Move (Found) to bFound
37627>>>>>>>                Send OnPostFind of hoDD DDFindRequestFind bFound
37628>>>>>>>                Move bFound to Found
37629>>>>>>>            End
37629>>>>>>>>
37629>>>>>>>        End
37629>>>>>>>>
37629>>>>>>>    End_Procedure
37630>>>>>>>    
37630>>>>>>>    Procedure OnPreFind Integer eMessage
37632>>>>>>>    End_Procedure
37633>>>>>>>    
37633>>>>>>>    Procedure OnPostFind Integer eMessage Boolean bFound
37635>>>>>>>    End_Procedure
37636>>>>>>>    
37636>>>>>>>    
37636>>>>>>>    
37636>>>>>>>    Procedure Request_Superfind Integer eFindMode Integer iFile Integer iField
37638>>>>>>>        Boolean bInSuperFind
37638>>>>>>>        // we need to set pbInSuperFind so Entry_update in the DEOs will know that
37638>>>>>>>        // they should perform an entry_update. Superfind entry_updates have never gone through
37638>>>>>>>        // the DD's field buffer.
37638>>>>>>>        Get pbInSuperFind to bInSuperFind
37639>>>>>>>        Set pbInSuperFind to True
37640>>>>>>>        If (OPERATION_MODE=MODE_WAITING) Begin
37642>>>>>>>            Send Update_Focus_Field_For_Operation MODE_FINDING
37643>>>>>>>        End
37643>>>>>>>>
37643>>>>>>>        Forward Send Request_Superfind eFindMode iFile iField
37645>>>>>>>        Set pbInSuperFind to bInSuperFind
37646>>>>>>>    End_Procedure
37647>>>>>>>    
37647>>>>>>>    // Augmented to return true if a non-constrained parent DD has a change. This way
37647>>>>>>>    // Should_Save_row only filters changes in a consrained parent.
37647>>>>>>>    
37647>>>>>>>    Function Should_Save_Row Returns Boolean
37649>>>>>>>        Boolean bShouldSaveRow bShouldSave bRelatesToConstraint
37649>>>>>>>        Integer iServers iServer iServerFile
37649>>>>>>>        Handle hoServerDD
37649>>>>>>>        Forward Get Should_Save_Row to bShouldSaveRow // will be true if this DD is changed or has a changed parent.
37651>>>>>>>        Get Should_Save to bShouldSave // will be true if there is a change anywhere up the entire save structure
37652>>>>>>>        If (not(bShouldSaveRow) and bShouldSave) Begin
37654>>>>>>>            // If here we have a changed in an server but not the this DD. We need a further refinement. If the server
37654>>>>>>>            // change is in a constrained server, we don't consider this a change because you can switch rows without losing
37654>>>>>>>            // data (with RT changes made for 17.0).
37654>>>>>>>            Get Data_Set_Server_Count to iServers
37655>>>>>>>            For iServer from 0 to (iServers-1)
37661>>>>>>>>
37661>>>>>>>                Get Data_Set_Server iServer to hoServerDD
37662>>>>>>>                Get Should_Save of hoServerDD to bShouldSave
37663>>>>>>>                If bShouldSave Begin
37665>>>>>>>                    Get Main_File of hoServerDD to iServerFile
37666>>>>>>>                    Get IsRelatesToConstrained iServerFile to bRelatesToConstraint
37667>>>>>>>                    If not bRelatesToConstraint Begin
37669>>>>>>>                        Function_Return True
37670>>>>>>>                    End
37670>>>>>>>>
37670>>>>>>>                End
37670>>>>>>>>
37670>>>>>>>            Loop
37671>>>>>>>>
37671>>>>>>>        End
37671>>>>>>>>
37671>>>>>>>        Function_Return bShouldSaveRow
37672>>>>>>>    End_Function
37673>>>>>>>    
37673>>>>>>>    // returns true if any relates-to constraining server needs a save. Normally there will be
37673>>>>>>>    // one or zero related-to parents. If Should_Save_Row returns false it is possible that there
37673>>>>>>>    // is a change up the relates-to constrained branch. If so, this will return True. This can be
37673>>>>>>>    // used to better determine the changed status of your DDO sructure
37673>>>>>>>    Function ShouldSaveConstrainedToServer Returns Boolean
37675>>>>>>>        Boolean bShouldSave bRelatesToConstraint
37675>>>>>>>        Integer iServers iServer iServerFile
37675>>>>>>>        Handle hoServerDD
37675>>>>>>>        Get Data_Set_Server_Count to iServers
37676>>>>>>>        For iServer from 0 to (iServers-1)
37682>>>>>>>>
37682>>>>>>>            Get Data_Set_Server iServer to hoServerDD
37683>>>>>>>            Get Main_File of hoServerDD to iServerFile
37684>>>>>>>            Get IsRelatesToConstrained iServerFile to bRelatesToConstraint
37685>>>>>>>            If bRelatesToConstraint Begin
37687>>>>>>>                Get Should_Save of hoServerDD to bShouldSave
37688>>>>>>>                If bShouldSave Begin
37690>>>>>>>                    Function_Return True
37691>>>>>>>                End
37691>>>>>>>>
37691>>>>>>>            End
37691>>>>>>>>
37691>>>>>>>        Loop
37692>>>>>>>>
37692>>>>>>>        Function_Return False
37693>>>>>>>    End_Function
37694>>>>>>>    
37694>>>>>>>    Function FindServerInformationElement Integer iFile Returns Integer
37696>>>>>>>        tDDServerInformation[] ServerInformation
37696>>>>>>>        tDDServerInformation[] ServerInformation
37697>>>>>>>        tDDServerInformation ServerSearch
37697>>>>>>>        tDDServerInformation ServerSearch
37697>>>>>>>        Integer iIndex
37697>>>>>>>        Move iFile to ServerSearch.iParent
37698>>>>>>>        Get pServerInformation to ServerInformation
37699>>>>>>>        Function_Return (SearchArray(ServerSearch,ServerInformation))
37700>>>>>>>    End_Function
37701>>>>>>>    
37701>>>>>>>    Procedure AddServerData Integer iFile Integer eParam Boolean bValue
37703>>>>>>>        tDDServerInformation[] ServerInformation
37703>>>>>>>        tDDServerInformation[] ServerInformation
37704>>>>>>>        Integer iIndex
37704>>>>>>>        Handle hoDDO
37704>>>>>>>        
37704>>>>>>>        Get pServerInformation to ServerInformation
37705>>>>>>>        Get FindServerInformationElement iFile to iIndex
37706>>>>>>>        If (iIndex=-1) Begin
37708>>>>>>>            Move (SizeOfArray(ServerInformation)) to iIndex
37709>>>>>>>            Move iFile to ServerInformation[iIndex].iParent
37710>>>>>>>            // defaults must always be false!
37710>>>>>>>            Move False to ServerInformation[iIndex].bParentNoSwitchIfCommitted
37711>>>>>>>            Move False to ServerInformation[iIndex].bAllowNullParent
37712>>>>>>>            Move False to ServerInformation[iIndex].bNoCascadeDelete
37713>>>>>>>            Move False to ServerInformation[iIndex].bCascadeDeleteNullTheParent
37714>>>>>>>        End
37714>>>>>>>>
37714>>>>>>>        
37714>>>>>>>        If (eParam=0) Begin
37716>>>>>>>            If (bValue<>ServerInformation[iIndex].bAllowNullParent) Begin
37718>>>>>>>                Move bValue to ServerInformation[iIndex].bAllowNullParent
37719>>>>>>>                Send AdjustDeleteValidateStructure iFile
37720>>>>>>>            End
37720>>>>>>>>
37720>>>>>>>        End
37720>>>>>>>>
37720>>>>>>>        Else If (eParam=1) Begin
37723>>>>>>>            Move bValue to ServerInformation[iIndex].bParentNoSwitchIfCommitted
37724>>>>>>>        End
37724>>>>>>>>
37724>>>>>>>        Else If (eParam=2) Begin
37727>>>>>>>            Move bValue to ServerInformation[iIndex].bNoCascadeDelete
37728>>>>>>>        End
37728>>>>>>>>
37728>>>>>>>        Else Begin // (3)
37729>>>>>>>            If (bValue<>ServerInformation[iIndex].bCascadeDeleteNullTheParent) Begin
37731>>>>>>>                Move bValue to ServerInformation[iIndex].bCascadeDeleteNullTheParent
37732>>>>>>>                Send AdjustDeleteValidateStructure iFile
37733>>>>>>>            End
37733>>>>>>>>
37733>>>>>>>        End
37733>>>>>>>>
37733>>>>>>>        Set pServerInformation to ServerInformation
37734>>>>>>>    End_Procedure
37735>>>>>>>    
37735>>>>>>>    Function GetServerData Integer iFile Integer eParam Returns Boolean
37737>>>>>>>        Boolean bValue
37737>>>>>>>        tDDServerInformation[] ServerInformation
37737>>>>>>>        tDDServerInformation[] ServerInformation
37738>>>>>>>        Integer iIndex
37738>>>>>>>        Get pServerInformation to ServerInformation
37739>>>>>>>        Get FindServerInformationElement iFile to iIndex
37740>>>>>>>        // when not found in array, we want to make sure that we return false. Therefore
37740>>>>>>>        // false should always be the default.
37740>>>>>>>        If (iIndex<>-1) Begin
37742>>>>>>>            If (eParam=0) Begin
37744>>>>>>>                Move ServerInformation[iIndex].bAllowNullParent to bValue
37745>>>>>>>            End
37745>>>>>>>>
37745>>>>>>>            Else If (eParam=1) Begin
37748>>>>>>>                Move ServerInformation[iIndex].bParentNoSwitchIfCommitted to bValue
37749>>>>>>>            End
37749>>>>>>>>
37749>>>>>>>            Else If (eParam=2) Begin
37752>>>>>>>                Move ServerInformation[iIndex].bNoCascadeDelete to bValue
37753>>>>>>>            End
37753>>>>>>>>
37753>>>>>>>            Else Begin
37754>>>>>>>                Move ServerInformation[iIndex].bCascadeDeleteNullTheParent to bValue
37755>>>>>>>            End
37755>>>>>>>>
37755>>>>>>>        End
37755>>>>>>>>
37755>>>>>>>        Function_Return bValue
37756>>>>>>>    End_Function
37757>>>>>>>    
37757>>>>>>>    Procedure AdjustDeleteValidateStructure2
37759>>>>>>>        Integer iCount i
37759>>>>>>>        Handle hoDDO
37759>>>>>>>        Boolean bVisited
37759>>>>>>>        Set Visited_State to True
37760>>>>>>>        Set Cascade_Delete_Structure_Validated_State to False
37761>>>>>>>        Get Data_Set_Server_Count to iCount
37762>>>>>>>        For i from 0 to (iCount-1)
37768>>>>>>>>
37768>>>>>>>            Get Data_Set_Server i to hoDDO
37769>>>>>>>            Get Visited_State of hoDDO to bVisited
37770>>>>>>>            If (not(bVisited)) Begin
37772>>>>>>>                Send AdjustDeleteValidateStructure2 of hoDDO
37773>>>>>>>            End
37773>>>>>>>>
37773>>>>>>>        Loop
37774>>>>>>>>
37774>>>>>>>    End_Procedure
37775>>>>>>>    
37775>>>>>>>    // This is called in the unlikely case that NullParent/CascadeNull are set dynamically. It
37775>>>>>>>    // tells the parent DDO to recheck its validate-delete structure and it tells all ancestors of
37775>>>>>>>    // this parent to do the same. If called while DDOs are being created (via a class setting) there
37775>>>>>>>    // will not be a connected parent for iFile, which is fine.
37775>>>>>>>    Procedure AdjustDeleteValidateStructure Integer iFile
37777>>>>>>>        Handle hoDDO
37777>>>>>>>        Get Which_Data_Set iFile to hoDDO
37778>>>>>>>        If hoDDO Begin
37780>>>>>>>            Send Initialize_Visited of hoDDO False False
37781>>>>>>>            Send AdjustDeleteValidateStructure2 of hoDDO
37782>>>>>>>        End
37782>>>>>>>>
37782>>>>>>>    End_Procedure
37783>>>>>>>    
37783>>>>>>>    // Used to add a null parent to the list of parents that allow this
37783>>>>>>>    Procedure Set ParentNullAllowed Integer iParent Boolean bAllowed
37785>>>>>>>        Send AddServerData iParent 0 bAllowed
37786>>>>>>>    End_Procedure
37787>>>>>>>    
37787>>>>>>>    // returns true if null parent allowed for this parent file
37787>>>>>>>    Function ParentNullAllowed Integer iParent Returns Boolean
37789>>>>>>>        Boolean bValue
37789>>>>>>>        Get GetServerData iParent 0 to bValue
37790>>>>>>>        Function_Return bValue
37791>>>>>>>    End_Function
37792>>>>>>>    
37792>>>>>>>    // returns true if null parent allowed for this parent file. This is the function
37792>>>>>>>    // that can be used for augmentation. This is the methid that is called by the runtime
37792>>>>>>>    // to determine if a null parent is allowed
37792>>>>>>>    Function IsNullParentAllowed Integer iServer Returns Boolean
37794>>>>>>>        Boolean bAllowed
37794>>>>>>>        Get ParentNullAllowed iServer to bAllowed
37795>>>>>>>        Function_Return bAllowed
37796>>>>>>>    End_Function
37797>>>>>>>    
37797>>>>>>>    Procedure Set ParentNoSwitchIfCommitted Integer iParent Boolean bAllowed
37799>>>>>>>        Send AddServerData iParent 1 bAllowed
37800>>>>>>>    End_Procedure
37801>>>>>>>    
37801>>>>>>>    Function ParentNoSwitchIfCommitted Integer iParent Returns Boolean
37803>>>>>>>        Boolean bValue
37803>>>>>>>        Get GetServerData iParent 1 to bValue
37804>>>>>>>        Function_Return bValue
37805>>>>>>>    End_Function
37806>>>>>>>    
37806>>>>>>>    
37806>>>>>>>    Procedure Set CascadeDeleteAllowed Integer iParent Boolean bAllowed
37808>>>>>>>        Send AddServerData iParent 2 (not(bAllowed))
37809>>>>>>>    End_Procedure
37810>>>>>>>    
37810>>>>>>>    Function CascadeDeleteAllowed Integer iParent Returns Boolean
37812>>>>>>>        Boolean bValue
37812>>>>>>>        Get GetServerData iParent 2 to bValue // note that False=allowed
37813>>>>>>>        Function_Return (not(bValue))
37814>>>>>>>    End_Function
37815>>>>>>>    
37815>>>>>>>    Function IsCascadeDeleteAllowed Integer iServer Returns Boolean
37817>>>>>>>        Boolean bAllowed
37817>>>>>>>        Get CascadeDeleteAllowed iServer to bAllowed
37818>>>>>>>        Function_Return bAllowed
37819>>>>>>>    End_Function
37820>>>>>>>    
37820>>>>>>>    Procedure Set CascadeDeleteNull Integer iParent Boolean bAllowed
37822>>>>>>>        Send AddServerData iParent 3 bAllowed
37823>>>>>>>    End_Procedure
37824>>>>>>>    
37824>>>>>>>    Function CascadeDeleteNull Integer iParent Returns Boolean
37826>>>>>>>        Boolean bValue
37826>>>>>>>        Get GetServerData iParent 3 to bValue
37827>>>>>>>        Function_Return bValue
37828>>>>>>>    End_Function
37829>>>>>>>    
37829>>>>>>>    Function IsCascadeDeleteNull Integer iServer Returns Boolean
37831>>>>>>>        Boolean bAllowed
37831>>>>>>>        Get CascadeDeleteNull iServer to bAllowed
37832>>>>>>>        Function_Return bAllowed
37833>>>>>>>    End_Function
37834>>>>>>>    
37834>>>>>>>    // return an array with the server path from this DD to passed top. The top will be
37834>>>>>>>    // in 0 and its child in 1, grand-child in 2, etc. If empty, no path was found. To start
37834>>>>>>>    // this process the byref hoDDs array MUST be empty
37834>>>>>>>    Procedure DDOServerPath Handle hoTop Handle[] ByRef hoDDs
37836>>>>>>>        Handle hoServer
37836>>>>>>>        Integer iServers iServer
37836>>>>>>>        If (hoTop=Self) Begin
37838>>>>>>>            Move Self to hoDDs[SizeOfArray(hoDDs)]
37839>>>>>>>            Procedure_Return
37840>>>>>>>        End
37840>>>>>>>>
37840>>>>>>>        Get Data_Set_Server_Count to iServers
37841>>>>>>>        For iServer from 0 to (iServers-1)
37847>>>>>>>>
37847>>>>>>>            Get Data_Set_Server iServer to hoServer
37848>>>>>>>            Send DDOServerPath of hoServer hoTop (&hoDDs)
37849>>>>>>>            If (SizeOfArray(hoDDs)) Begin
37851>>>>>>>                Move Self to hoDDs[SizeOfArray(hoDDs)]
37852>>>>>>>                Procedure_Return
37853>>>>>>>            End
37853>>>>>>>>
37853>>>>>>>        Loop
37854>>>>>>>>
37854>>>>>>>    End_Procedure
37855>>>>>>>    
37855>>>>>>>    // returns True if the value passed can be considered empty for this field.
37855>>>>>>>    Function IsEmptyField Integer iField String sValue Returns Boolean
37857>>>>>>>        Integer iFile iDataType iValidationType
37857>>>>>>>        Number nNum
37857>>>>>>>        Boolean bInvalid bChecked
37857>>>>>>>        Get Main_File to iFile
37858>>>>>>>        Get_Attribute DF_FIELD_TYPE of iFile iField to iDataType
37861>>>>>>>        Get IsDataInvalid iDataType sValue to bInvalid
37862>>>>>>>        If bInvalid Begin
37864>>>>>>>            Function_Return True
37865>>>>>>>        End
37865>>>>>>>>
37865>>>>>>>        
37865>>>>>>>        // DDs set checkbox fields to the False value as default. We must test its select_state
37865>>>>>>>        Get Field_Validation_Type of (Field_Attributes(Self)) iField to iValidationType
37866>>>>>>>        If (iValidationType=FA_VALIDATION_TYPE_CHECKBOX) Begin
37868>>>>>>>            Get Field_Select_State iField to bChecked
37869>>>>>>>            If not bChecked Begin
37871>>>>>>>                Function_Return True
37872>>>>>>>            End
37872>>>>>>>>
37872>>>>>>>        End
37872>>>>>>>>
37872>>>>>>>        
37872>>>>>>>        If ((iDataType=DF_BCD or iDataType=DF_DATE) and (Number(sValue)=0)) Begin
37874>>>>>>>            Move "" to sValue
37875>>>>>>>        End
37875>>>>>>>>
37875>>>>>>>        Else If (iDataType=DF_DATETIME and IsNullDateTime(cast(sValue,DateTime))) Begin
37878>>>>>>>            Move "" to sValue
37879>>>>>>>        End
37879>>>>>>>>
37879>>>>>>>        Function_Return (sValue="")
37880>>>>>>>    End_Function
37881>>>>>>>    
37881>>>>>>>    
37881>>>>>>>    // is the record committed
37881>>>>>>>    Function IsCommitted Returns Boolean
37883>>>>>>>        Boolean bHasRecord
37883>>>>>>>        Get HasRecord to bHasRecord
37884>>>>>>>        Function_Return bHasRecord
37885>>>>>>>    End_Function
37886>>>>>>>    
37886>>>>>>>    // is the field committed. It assumes the record is already committed
37886>>>>>>>    Function IsFieldCommitted Integer iField Returns Boolean
37888>>>>>>>        Boolean bIsCommitted
37888>>>>>>>        Get Field_Option iField DD_COMMIT to bIsCommitted
37889>>>>>>>        Function_Return bIsCommitted
37890>>>>>>>    End_Function
37891>>>>>>>    
37891>>>>>>>    // is a parent change allowed for this parent server.
37891>>>>>>>    Function IsCommittedParentChangeAllowed Integer iServer Returns Boolean
37893>>>>>>>        Boolean bNoSwitch
37893>>>>>>>        Get ParentNoSwitchIfCommitted iServer to bNoSwitch
37894>>>>>>>        Function_Return (not(bNoSwitch))
37895>>>>>>>    End_Function
37896>>>>>>>    
37896>>>>>>>    // Are we allowed to find with this file when it is used as a parent?
37896>>>>>>>    // Check all child DDOs and see if any are committed and do not allow switching parents when committed.
37896>>>>>>>    //  The rules for each child are switching is ok If:
37896>>>>>>>    // 1. the child is not committed,
37896>>>>>>>    // 2. it has a relates-to constraint (Find will change child which is ok)
37896>>>>>>>    // 3. if IsCommittedParentChangeAllowed allowed.
37896>>>>>>>    //
37896>>>>>>>    Function AllowParentFind Returns Boolean
37898>>>>>>>        Integer iClients iClient iMain
37898>>>>>>>        Handle hoChild
37898>>>>>>>        Boolean bIsCommitted
37898>>>>>>>        Get Data_Set_Client_Count to iClients
37899>>>>>>>        For iClient from 0 to (iClients-1)
37905>>>>>>>>
37905>>>>>>>            Get Data_Set_Client iClient to hoChild
37906>>>>>>>            Get IsCommitted of hoChild to bIsCommitted
37907>>>>>>>            If bIsCommitted Begin
37909>>>>>>>                Get Main_File to iMain
37910>>>>>>>                Get IsRelatesToConstrained of hoChild iMain to bIsCommitted
37911>>>>>>>                If not bIsCommitted Begin
37913>>>>>>>                    Get IsCommittedParentChangeAllowed of hoChild iMain to bIsCommitted
37914>>>>>>>                    If (not(bIsCommitted)) Begin
37916>>>>>>>                        Function_Return False
37917>>>>>>>                    End
37917>>>>>>>>
37917>>>>>>>                End
37917>>>>>>>>
37917>>>>>>>            End
37917>>>>>>>>
37917>>>>>>>        Loop
37918>>>>>>>>
37918>>>>>>>        Function_Return True
37919>>>>>>>    End_Function
37920>>>>>>>    
37920>>>>>>>    // aumgented to do nothing if there is no index (instead of annoying error message) and
37920>>>>>>>    // to do nothing if a find is not allowed because it is a no switch parent of a committed child.
37920>>>>>>>    Procedure Item_Find Integer eFindMode ;            Integer iFile Integer iField ;            Integer bDoEntryUpdate Integer bShowFindErr Integer bDeferred
37922>>>>>>>        
37922>>>>>>>        Integer iIndex iMain
37922>>>>>>>        Handle  hoOwner
37922>>>>>>>        Boolean bOk
37922>>>>>>>        
37922>>>>>>>        Get File_Field_Index iFile iField to iIndex
37923>>>>>>>        If (iIndex=-1)  Begin
37925>>>>>>>            Procedure_Return
37926>>>>>>>        End
37926>>>>>>>>
37926>>>>>>>        Get Main_File to iMain
37927>>>>>>>        If (iMain<>iFile) Begin
37929>>>>>>>            Get Which_Data_Set iFile to hoOwner
37930>>>>>>>            If hoOwner Begin
37932>>>>>>>                Get AllowParentFind of hoOwner to bOk
37933>>>>>>>                If not bOk Begin
37935>>>>>>>                    Procedure_Return
37936>>>>>>>                End
37936>>>>>>>>
37936>>>>>>>            End
37936>>>>>>>>
37936>>>>>>>        End
37936>>>>>>>>
37936>>>>>>>        
37936>>>>>>>        If not bDeferred Begin
37938>>>>>>>            Send Refind_Records // make sure the buffers are correct before the find
37939>>>>>>>        End
37939>>>>>>>>
37939>>>>>>>        
37939>>>>>>>        Forward Send Item_Find eFindMode iFile iField bDoEntryUpdate bShowFindErr bDeferred
37941>>>>>>>    End_Procedure
37942>>>>>>>    
37942>>>>>>>    
37942>>>>>>>    Function Field_CommitNoEnterOnIndex Integer iField Returns Boolean
37944>>>>>>>        Function_Return False
37945>>>>>>>    End_Function
37946>>>>>>>    
37946>>>>>>>    // Return the committed options for this field based on the committed status or this record,
37946>>>>>>>    // the committed status of the field and whether, if committed, it should be noput or noput+noenter
37946>>>>>>>    Function File_Field_Committed_Options Integer iFile Integer iField Returns Integer
37948>>>>>>>        Boolean bIsCommitted bNoEnter
37948>>>>>>>        Integer iNewOpts iIndex
37948>>>>>>>        Handle hoOwner
37948>>>>>>>        
37948>>>>>>>        Get Which_Data_Set iFile to hoOwner
37949>>>>>>>        If not hoOwner ;            Function_Return 0
37952>>>>>>>        
37952>>>>>>>        Get File_Field_Index iFile iField to iIndex
37953>>>>>>>        Get IsCommitted of hoOwner to bIsCommitted
37954>>>>>>>        If bIsCommitted Begin
37956>>>>>>>            Get IsFieldCommitted of hoOwner iField to bIsCommitted
37957>>>>>>>            If bIsCommitted Begin
37959>>>>>>>                Move True to bNoEnter
37960>>>>>>>                If (iIndex<>-1) Begin
37962>>>>>>>                    Get Field_CommitNoEnterOnIndex iField to bNoEnter
37963>>>>>>>                End
37963>>>>>>>>
37963>>>>>>>                // if committed, it is noput and, if non-indexed, also noenter
37963>>>>>>>                Move (If(bNoEnter,DD_DISPLAYONLY,DD_NOPUT)) to iNewOpts
37964>>>>>>>            End
37964>>>>>>>>
37964>>>>>>>        End
37964>>>>>>>>
37964>>>>>>>        // if a finding parent field, we want to know if you are allowed to switch parents as we will assume
37964>>>>>>>        // that this field is used for finding.
37964>>>>>>>        If (hoOwner<>Self and iIndex>-1) Begin
37966>>>>>>>            Get AllowParentFind of hoOwner to bIsCommitted
37967>>>>>>>            If not bIsCommitted Begin
37969>>>>>>>                Move DD_DISPLAYONLY to iNewOpts
37970>>>>>>>            End
37970>>>>>>>>
37970>>>>>>>        End
37970>>>>>>>>
37970>>>>>>>        
37970>>>>>>>        Function_Return iNewOpts
37971>>>>>>>    End_Function
37972>>>>>>>    
37972>>>>>>>    // Returns the current field-field options based on regular options, foreign field status
37972>>>>>>>    // plus committed record status
37972>>>>>>>    Function File_Field_DynamicEntryOptions Integer iFile Integer iField Returns Integer
37974>>>>>>>        Integer iCOpts iFOpts
37974>>>>>>>        If (iFile=0) Begin
37976>>>>>>>            Function_Return 0
37977>>>>>>>        End
37977>>>>>>>>
37977>>>>>>>        Get File_Field_Options iFile iField to iFOpts            // regular options (handles regular and foreign)
37978>>>>>>>        Get File_Field_Committed_Options iFile iField to iCOpts  // possible NoPut, NoEnter additions
37979>>>>>>>        Function_Return (iFOpts ior iCOpts)
37980>>>>>>>    End_Function
37981>>>>>>>    
37981>>>>>>>    Function DDRememberedFieldIndex Integer iField Returns Integer
37983>>>>>>>        tDDRemembered[] DefaultValues
37983>>>>>>>        tDDRemembered[] DefaultValues
37984>>>>>>>        tDDRemembered SearchItem
37984>>>>>>>        tDDRemembered SearchItem
37984>>>>>>>        Integer iIndex
37984>>>>>>>        Get pDDDefaults to DefaultValues
37985>>>>>>>        Move iField to SearchItem.iField
37986>>>>>>>        Move (SearchArray(SearchItem,DefaultValues)) to iIndex
37987>>>>>>>        Function_Return iIndex
37988>>>>>>>    End_Function
37989>>>>>>>    
37989>>>>>>>    // Interface used to set or clear a dynamic default (remembered) value for a DD field. If the
37989>>>>>>>    // value passed is empty ("" or as empty as defined by the data-type) it is cleared. If the value
37989>>>>>>>    // is DD_RememberLast, it will use the last value before a clear as the default, else it uses the
37989>>>>>>>    // passed value as the default
37989>>>>>>>    Procedure Set Field_RememberedValue Integer iField String sValue
37991>>>>>>>        tDDRemembered[] DefaultValues
37991>>>>>>>        tDDRemembered[] DefaultValues
37992>>>>>>>        Integer iIndex
37992>>>>>>>        Boolean bNull
37992>>>>>>>        Get DDRememberedFieldIndex iField to iIndex
37993>>>>>>>        Get pDDDefaults to DefaultValues
37994>>>>>>>        If (sValue<>DD_RememberLast) Begin // if it is rememberlast, we know it is not null
37996>>>>>>>            Get IsEmptyField iField sValue to bNull
37997>>>>>>>        End
37997>>>>>>>>
37997>>>>>>>        If (not(bNull)) Begin
37999>>>>>>>            If (iIndex=-1) Begin
38001>>>>>>>                Move (SizeOfArray(DefaultValues)) to iIndex
38002>>>>>>>                Move iField to DefaultValues[iIndex].iField
38003>>>>>>>            End
38003>>>>>>>>
38003>>>>>>>            Move sValue to DefaultValues[iIndex].sDefault
38004>>>>>>>            Set pDDDefaults to DefaultValues
38005>>>>>>>        End
38005>>>>>>>>
38005>>>>>>>        Else If  (iIndex<>-1) Begin
38008>>>>>>>            Set pDDDefaults to (RemoveFromArray(DefaultValues,iIndex))
38009>>>>>>>        End
38009>>>>>>>>
38009>>>>>>>    End_Procedure
38010>>>>>>>    
38010>>>>>>>    // get the remembered value as per rules above
38010>>>>>>>    Function Field_RememberedValue Integer iField Returns String
38012>>>>>>>        tDDRemembered[] DefaultValues
38012>>>>>>>        tDDRemembered[] DefaultValues
38013>>>>>>>        Integer iIndex
38013>>>>>>>        Get DDRememberedFieldIndex iField to iIndex
38014>>>>>>>        If (iIndex<>-1) Begin
38016>>>>>>>            Get pDDDefaults to DefaultValues
38017>>>>>>>            Function_Return DefaultValues[iIndex].sDefault
38018>>>>>>>        End
38018>>>>>>>>
38018>>>>>>>        Function_Return ''
38019>>>>>>>    End_Function
38020>>>>>>>    
38020>>>>>>>    Procedure AssignDynamicDefaults
38022>>>>>>>        Integer iField iFields iFile
38022>>>>>>>        tDDRemembered[] DefaultValues
38022>>>>>>>        tDDRemembered[] DefaultValues
38023>>>>>>>        Boolean bMain
38023>>>>>>>        String sValue
38023>>>>>>>        
38023>>>>>>>        Get Main_File to iFile
38024>>>>>>>        Get pDDDefaults to DefaultValues
38025>>>>>>>        Move (SizeOfArray(DefaultValues)) to iFields
38026>>>>>>>        For iField from 0 to (iFields-1)
38032>>>>>>>>
38032>>>>>>>            If ( DefaultValues[iField].sDefault<>"") Begin
38034>>>>>>>                If (DefaultValues[iField].sDefault=DD_RememberLast) Begin
38036>>>>>>>                    Move DefaultValues[iField].sLastValue to sValue
38037>>>>>>>                End
38037>>>>>>>>
38037>>>>>>>                Else Begin
38038>>>>>>>                    Move DefaultValues[iField].sDefault to sValue
38039>>>>>>>                End
38039>>>>>>>>
38039>>>>>>>                Set Field_Changed_Value DefaultValues[iField].iField to sValue
38040>>>>>>>            End
38040>>>>>>>>
38040>>>>>>>        Loop
38041>>>>>>>>
38041>>>>>>>    End_Procedure
38042>>>>>>>    
38042>>>>>>>    // Clears all remembered defaults for this DD.
38042>>>>>>>    Procedure ClearRememberedDefaults
38044>>>>>>>        tDDRemembered[] DefaultValues
38044>>>>>>>        tDDRemembered[] DefaultValues
38045>>>>>>>        Set pDDDefaults to DefaultValues
38046>>>>>>>    End_Procedure
38047>>>>>>>    
38047>>>>>>>    Procedure PrivateClearAllRememberedDefaults
38049>>>>>>>        Integer iCount iMax
38049>>>>>>>        Handle hoDD
38049>>>>>>>        Boolean bVisisted
38049>>>>>>>        
38049>>>>>>>        Set Visited_State to True
38050>>>>>>>        
38050>>>>>>>        Get Data_Set_Server_Count to iMax
38051>>>>>>>        Decrement iMax
38052>>>>>>>        For iCount from 0 to iMax
38058>>>>>>>>
38058>>>>>>>            Get Data_Set_Server iCount to hoDD
38059>>>>>>>            Get Visited_State of hoDD to bVisisted
38060>>>>>>>            If not (bVisisted) Begin
38062>>>>>>>                Send PrivateClearAllRememberedDefaults of hoDD
38063>>>>>>>            End
38063>>>>>>>>
38063>>>>>>>        Loop
38064>>>>>>>>
38064>>>>>>>        
38064>>>>>>>        Send ClearRememberedDefaults
38065>>>>>>>        
38065>>>>>>>        Get Data_Set_Client_Count to iMax
38066>>>>>>>        Decrement iMax
38067>>>>>>>        For iCount from 0 to iMax
38073>>>>>>>>
38073>>>>>>>            Get Data_Set_Client iCount to hoDD
38074>>>>>>>            Get Visited_State of hoDD to bVisisted
38075>>>>>>>            If not (bVisisted) Begin
38077>>>>>>>                Send PrivateClearAllRememberedDefaults of hoDD
38078>>>>>>>            End
38078>>>>>>>>
38078>>>>>>>        Loop
38079>>>>>>>>
38079>>>>>>>        
38079>>>>>>>    End_Procedure
38080>>>>>>>    
38080>>>>>>>    // Clears all remembered defaults for all DDs in this structure.
38080>>>>>>>    Procedure ClearAllRememberedDefaults
38082>>>>>>>        Send InitializeAllVisited
38083>>>>>>>        Send PrivateClearAllRememberedDefaults
38084>>>>>>>    End_Procedure
38085>>>>>>>    
38085>>>>>>>    // This is called after a clear or clear all is sent to this DD. It does autofinds as needed
38085>>>>>>>    // for any parent DDs. It does this if the parent is not a relates to contraining parent, if
38085>>>>>>>    // a field has an index, it has a changed value and it is autofind or autofind_ge.
38085>>>>>>>    Procedure DefaultParentAutofinds
38087>>>>>>>        Integer i iServers iField iFields iFile iIndex iOpts
38087>>>>>>>        Boolean bDoAutoFind bRelates bIsEmptyField
38087>>>>>>>        String sValue
38087>>>>>>>        Handle hoServer
38087>>>>>>>        Get Data_Set_Server_Count to iServers
38088>>>>>>>        For i from 0 to (iServers-1)
38094>>>>>>>>
38094>>>>>>>            Get Data_Set_Server i to hoServer
38095>>>>>>>            Get Main_File of hoServer to iFile
38096>>>>>>>            Get IsRelatesToConstrained iFile to bRelates
38097>>>>>>>            // never autofind on a relates-to constraining parent
38097>>>>>>>            If not (bRelates) Begin
38099>>>>>>>                
38099>>>>>>>                Get Field_Count of hoServer to iFields
38100>>>>>>>                Move False to bDoAutoFind
38101>>>>>>>                Move 1 to iField
38102>>>>>>>                While (not(bDoAutoFind) and (iField<=iFields))
38106>>>>>>>                    Get_Attribute DF_FIELD_INDEX of iFile iField to iIndex
38109>>>>>>>                    If (iIndex>0) Begin
38111>>>>>>>                        Get Field_Changed_State of hoServer iField to bDoAutoFind
38112>>>>>>>                        If bDoAutoFind Begin
38114>>>>>>>                            Get Field_Current_Value of hoServer iField to sValue
38115>>>>>>>                            Get IsEmptyField of hoServer iField sValue to bIsEmptyField
38116>>>>>>>                            Move (not(bIsEmptyField)) to bDoAutoFind
38117>>>>>>>                            If bDoAutoFind Begin
38119>>>>>>>                                Get File_Field_Options iFile iField to iOpts
38120>>>>>>>                                // if this is a retain or retainall we don't do this because we want
38120>>>>>>>                                // to maintain backwards compatibility
38120>>>>>>>                                Move ( (iOpts iand DD_AUTOFIND or iOpts iand DD_AUTOFIND_GE) and ;                                    not( iOpts iand DD_RETAIN or iOpts iand DD_RETAINALL) ) to bDoAutoFind
38121>>>>>>>                                If bDoAutoFind Begin
38123>>>>>>>                                    Send File_Field_Default_AutoFind iFile iField
38124>>>>>>>                                    Set Changed_State to False // clears parent changed state
38125>>>>>>>                                End
38125>>>>>>>>
38125>>>>>>>                            End
38125>>>>>>>>
38125>>>>>>>                        End
38125>>>>>>>>
38125>>>>>>>                    End
38125>>>>>>>>
38125>>>>>>>                    Increment iField
38126>>>>>>>                Loop
38127>>>>>>>>
38127>>>>>>>                
38127>>>>>>>                // Only check for grandparent autofinds if this parent did not do a an autofind
38127>>>>>>>                // Doing an autofind on an autofind parent's parent is just too confusing
38127>>>>>>>                If not bDoAutoFind Begin
38129>>>>>>>                    Send DefaultParentAutofinds of hoServer
38130>>>>>>>                End
38130>>>>>>>>
38130>>>>>>>            End
38130>>>>>>>>
38130>>>>>>>        Loop
38131>>>>>>>>
38131>>>>>>>    End_Procedure
38132>>>>>>>    
38132>>>>>>>    // Set this DD to be an alias, passing the file number of the alias
38132>>>>>>>    // This can only be called once per instance and the Main_File must already have been set
38132>>>>>>>    // most likely in a superclass.
38132>>>>>>>    // This sets Main_File to the alias, stores the original master file (accessed via MasterForAlias).
38132>>>>>>>    // It also clears all existing relatonships. Normally we expect the alias class to set
38132>>>>>>>    // sets pbUseDDRelates and pbNoCascadeDeleteStrict to true. We don't do that automatically so that
38132>>>>>>>    // the Studio's property panel will show the correct values. When an alias is defined using the
38132>>>>>>>    // studio it will set these two properties.
38132>>>>>>>    // This means you must set any required relationships yourself
38132>>>>>>>    Procedure Set Alias_File Integer iTable
38134>>>>>>>        Integer iMain iMaster iFieldsM iFieldsA
38134>>>>>>>        Get Main_File to iMain
38135>>>>>>>        Get MasterForAlias to iMaster
38136>>>>>>>        
38136>>>>>>>        If (iTable=0 and iMaster) Begin
38138>>>>>>>            Error DFERR_PROGRAM "Cannot unset alias table"
38139>>>>>>>>
38139>>>>>>>            Procedure_Return
38140>>>>>>>        End
38140>>>>>>>>
38140>>>>>>>        If (iTable=iMain) Begin
38142>>>>>>>            Error DFERR_PROGRAM "Cannot set alias table to self"
38143>>>>>>>>
38143>>>>>>>            Procedure_Return
38144>>>>>>>        End
38144>>>>>>>>
38144>>>>>>>        If (iMaster) Begin
38146>>>>>>>            Error DFERR_PROGRAM "Cannot redefine alias table"
38147>>>>>>>>
38147>>>>>>>            Procedure_Return
38148>>>>>>>        End
38148>>>>>>>>
38148>>>>>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iMain to iFieldsM
38151>>>>>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iTable to iFieldsA
38154>>>>>>>        If (iFieldsA<>iFieldsM) Begin
38156>>>>>>>            Error DFERR_PROGRAM "Alias and Master file are not based on the same table"
38157>>>>>>>>
38157>>>>>>>            Procedure_Return
38158>>>>>>>        End
38158>>>>>>>>
38158>>>>>>>        
38158>>>>>>>        Set piMasterTable to iMain
38159>>>>>>>        Set Main_File to iTable
38160>>>>>>>        Send DefineAsAlias
38161>>>>>>>    End_Procedure
38162>>>>>>>    
38162>>>>>>>    Procedure DefineAsAlias
38164>>>>>>>        Integer i iFile
38164>>>>>>>        
38164>>>>>>>        // We expect he developer to set these properties to True
38164>>>>>>>        //Set pbUseDDRelates to True
38164>>>>>>>        //Set pbNoCascadeDeleteStrict to True
38164>>>>>>>        
38164>>>>>>>        Send ClearDDRelates
38165>>>>>>>        Get Client_File_Count to i
38166>>>>>>>        While i
38170>>>>>>>            Decrement i
38171>>>>>>>            Get Client_File i to iFile
38172>>>>>>>            Send Remove_Client_File iFile
38173>>>>>>>        Loop
38174>>>>>>>>
38174>>>>>>>        Get Server_File_Count to i
38175>>>>>>>        While i
38179>>>>>>>            Decrement i
38180>>>>>>>            Get Server_File i to iFile
38181>>>>>>>            Send Remove_Server_File iFile
38182>>>>>>>        Loop
38183>>>>>>>>
38183>>>>>>>    End_Procedure
38184>>>>>>>    
38184>>>>>>>    Function MasterForAlias Returns Integer
38186>>>>>>>        Integer iMaster
38186>>>>>>>        Get piMasterTable to iMaster
38187>>>>>>>        Function_Return iMaster
38188>>>>>>>    End_Function
38189>>>>>>>    
38189>>>>>>>    Function IsAlias Returns Boolean
38191>>>>>>>        Integer iMaster
38191>>>>>>>        Get piMasterTable to iMaster
38192>>>>>>>        Function_Return (iMaster<>0)
38193>>>>>>>    End_Function
38194>>>>>>>    
38194>>>>>>>    
38194>>>>>>>    Procedure OnSaveRecord
38196>>>>>>>    End_Procedure
38197>>>>>>>    
38197>>>>>>>    Procedure StoreDefaultSQLFilters
38199>>>>>>>        Handle hoSQLHelper
38199>>>>>>>        Get phoSQLHelper to hoSQLHelper
38200>>>>>>>        Send StoreDefaultSQLFilters of hoSQLHelper
38201>>>>>>>    End_Procedure
38202>>>>>>>    
38202>>>>>>>    Procedure RestoreDefaultSQLFilters
38204>>>>>>>        Handle hoSQLHelper
38204>>>>>>>        Get phoSQLHelper to hoSQLHelper
38205>>>>>>>        Send RestoreDefaultSQLFilters of hoSQLHelper
38206>>>>>>>    End_Procedure
38207>>>>>>>    
38207>>>>>>>    Procedure ApplySQLFilterStr String sFilter
38209>>>>>>>        Handle hoSQLHelper
38209>>>>>>>        Get phoSQLHelper to hoSQLHelper
38210>>>>>>>        Send ApplySQLFilterStr of hoSQLHelper sFilter
38211>>>>>>>    End_Procedure
38212>>>>>>>    
38212>>>>>>>    
38212>>>>>>>    Procedure ApplySQLFilter
38214>>>>>>>        String sNewFilter sOldFilter
38214>>>>>>>        Boolean bApplyGlobalSQLFilters bOldFilterActive
38214>>>>>>>        Handle hoSQLHelper
38214>>>>>>>        Get phoSQLHelper to hoSQLHelper
38215>>>>>>>        Get psSQLFilter to sNewFilter
38216>>>>>>>        // if we have am active  table filter we can either ignore it or and it to the where clause
38216>>>>>>>        // pbApplyGlobalSQLFilters determines what to do.
38216>>>>>>>        Get pbApplyGlobalSQLFilters to bApplyGlobalSQLFilters
38217>>>>>>>        Get pbOldFilterActive to bOldFilterActive
38218>>>>>>>        If (bApplyGlobalSQLFilters and bOldFilterActive) Begin
38220>>>>>>>            Get psOldFilter to sOldFilter
38221>>>>>>>            Get SQLStrAppend sOldFilter sNewFilter to sNewFilter
38222>>>>>>>        End
38222>>>>>>>>
38222>>>>>>>        Send ApplySQLFilterStr of hoSQLHelper sNewFilter
38223>>>>>>>    End_Procedure
38224>>>>>>>    
38224>>>>>>>    Procedure Data_Set_PreFind
38226>>>>>>>        Boolean bUseDDSQLFilters
38226>>>>>>>        String sOldDDFilter
38226>>>>>>>        Get pbUseDDSQLFilters to bUseDDSQLFilters
38227>>>>>>>        If bUseDDSQLFilters Begin
38229>>>>>>>            
38229>>>>>>>            Send StoreDefaultSQLFilters
38230>>>>>>>            
38230>>>>>>>            // this can get called during cascade deletes. In such a case we will
38230>>>>>>>            // never explicitly not apply an SQL filters because it could violate relational integrity
38230>>>>>>>            If (OPERATION_MODE=MODE_DELETING) Begin
38232>>>>>>>                Get psSQLFilter to sOldDDFilter
38233>>>>>>>                Set psSQLFilter to "" // make sure there is no filter applied
38234>>>>>>>            End
38234>>>>>>>>
38234>>>>>>>            
38234>>>>>>>            Send ApplySQLFilter
38235>>>>>>>            
38235>>>>>>>            If (OPERATION_MODE=MODE_DELETING) Begin
38237>>>>>>>                Set psSQLFilter to sOldDDFilter
38238>>>>>>>            End
38238>>>>>>>>
38238>>>>>>>        End
38238>>>>>>>>
38238>>>>>>>    End_Procedure
38239>>>>>>>    
38239>>>>>>>    Procedure Data_Set_PostFind
38241>>>>>>>        Boolean bUseDDSQLFilters
38241>>>>>>>        Get pbUseDDSQLFilters to bUseDDSQLFilters
38242>>>>>>>        If bUseDDSQLFilters Begin
38244>>>>>>>            Send RestoreDefaultSQLFilters
38245>>>>>>>        End
38245>>>>>>>>
38245>>>>>>>    End_Procedure
38246>>>>>>>    
38246>>>>>>>    
38246>>>>>>>    // returns active constraints in atConstraintDef array.
38246>>>>>>>    // Should be called after constraints are built
38246>>>>>>>    // typically right after Rebuild_Constraints
38246>>>>>>>    
38246>>>>>>>    Function DDOConstraints Returns tConstraintDef[]
38248>>>>>>>        tConstraintDef[] Constraints
38248>>>>>>>        tConstraintDef[] Constraints
38249>>>>>>>        Integer i iCount i1
38249>>>>>>>        Get DATA_SET_CONSTRAINT_COUNT to iCount
38250>>>>>>>        For i from 0 to (iCount-1)
38256>>>>>>>>
38256>>>>>>>            Get DATA_SET_CONSTRAINT_INFO i 0 to i1 // type / mode
38257>>>>>>>            Move (Hi(i1)) to  Constraints[i].eType
38258>>>>>>>            Move (Low(i1)) to  Constraints[i].eMode
38259>>>>>>>            Get DATA_SET_CONSTRAINT_INFO i 1 to i1 // file / field
38260>>>>>>>            Move (Hi(i1)) to  Constraints[i].iFile
38261>>>>>>>            Move (Low(i1)) to  Constraints[i].iField
38262>>>>>>>            Get DATA_SET_CONSTRAINT_INFO i 2 to i1 // other file /field
38263>>>>>>>            Move (Hi(i1)) to  Constraints[i].iOtherFile
38264>>>>>>>            Move (Low(i1)) to  Constraints[i].iOtherField
38265>>>>>>>            Get DATA_SET_CONSTRAINT_INFO_Value i  to Constraints[i].sValue
38266>>>>>>>        Loop
38267>>>>>>>>
38267>>>>>>>        Function_Return Constraints
38268>>>>>>>    End_Function
38269>>>>>>>    
38269>>>>>>>    // returns constraint finding information about the current find. This tells us what kinds
38269>>>>>>>    // of constraint find "expressions" are used. This will actually do a cosntrained find
38269>>>>>>>    // initialization much like Establish_Find_Direction, which means it can change the values in
38269>>>>>>>    // the file buffer to assist with a jump-in.
38269>>>>>>>    Function DDOConstraintFindMeta Integer eMode Integer iOrder Returns tDDOConstraintFindMeta
38271>>>>>>>        tDDOConstraintFindMeta FindMeta
38271>>>>>>>        tDDOConstraintFindMeta FindMeta
38271>>>>>>>        Integer i
38271>>>>>>>        Get Data_Set_Constraint_Exps eMode iOrder to i
38272>>>>>>>        Move (Hi(i)) to FindMeta.iJumpInSegments
38273>>>>>>>        Move (i iand CONST_EXP_JUMPOUT) to FindMeta.bJumpOut
38274>>>>>>>        Move (i iand CONST_EXP_PRE_RELATE) to FindMeta.bPreRelate
38275>>>>>>>        Move (i iand CONST_EXP_POST_RELATE) to FindMeta.bPostRelate
38276>>>>>>>        Function_Return FindMeta
38277>>>>>>>    End_Function
38278>>>>>>>    
38278>>>>>>>    // this tells you if the current find or read requires a relate to evaluate the DF constraint.
38278>>>>>>>    // If false you could use this to set no_relate_state to false for the find/read process and then
38278>>>>>>>    // restore it when complete. Be careful using this.
38278>>>>>>>    Function DDOConstraintNeedsRelate Integer iOrder Returns Boolean
38280>>>>>>>        tDDOConstraintFindMeta FindMeta
38280>>>>>>>        tDDOConstraintFindMeta FindMeta
38280>>>>>>>        Get DDOConstraintFindMeta (GE) iOrder to FindMeta
38281>>>>>>>        Function_Return FindMeta.bPostRelate
38282>>>>>>>    End_Function
38283>>>>>>>    
38283>>>>>>>    // returns true if this table supports SQL filter interface
38283>>>>>>>    Function SupportsSQLFilters Returns Boolean
38285>>>>>>>        Boolean bSupports
38285>>>>>>>        Handle hoSQLHelper
38285>>>>>>>        Get phoSQLHelper to hoSQLHelper
38286>>>>>>>        Get SupportsSQLFilters of hoSQLHelper to bSupports
38287>>>>>>>        Function_Return bSupports
38288>>>>>>>    End_Function
38289>>>>>>>    
38289>>>>>>>    // SQL Helper functions that return SQL Filters strings that can be used in a where clause
38289>>>>>>>    
38289>>>>>>>    // Creates an SQL Like Filter for this field and search target
38289>>>>>>>    Function SQLStrLike Integer iField String sSearch Returns String
38291>>>>>>>        String sFilter
38291>>>>>>>        Handle hoSQLHelper
38291>>>>>>>        Get phoSQLHelper to hoSQLHelper
38292>>>>>>>        Get SQLStrLike of hoSQLHelper iField sSearch to sFilter
38293>>>>>>>        Function_Return sFilter
38294>>>>>>>    End_Function
38295>>>>>>>    
38295>>>>>>>    // Appends two Filters with an AND clause. Both or either can be empty
38295>>>>>>>    Function SQLStrAppend String sOrigFilter String sFilter Returns String
38297>>>>>>>        Handle hoSQLHelper
38297>>>>>>>        Get phoSQLHelper to hoSQLHelper
38298>>>>>>>        Get SQLStrAppend of hoSQLHelper sOrigFilter sFilter to sFilter
38299>>>>>>>        Function_Return sFilter
38300>>>>>>>    End_Function
38301>>>>>>>    
38301>>>>>>>    // Appends two Filters with an AND clause. Both or either can be empty
38301>>>>>>>    Function SQLStrAppendOr String sOrigFilter String sFilter Returns String
38303>>>>>>>        Handle hoSQLHelper
38303>>>>>>>        Get phoSQLHelper to hoSQLHelper
38304>>>>>>>        Get SQLStrAppendOr of hoSQLHelper sOrigFilter sFilter to sFilter
38305>>>>>>>        Function_Return sFilter
38306>>>>>>>    End_Function
38307>>>>>>>
38307>>>>>>>    // returns the name of the File and Field suitable for an SQL where statement
38307>>>>>>>    Function SQLStrFileFieldName Integer iField Returns String
38309>>>>>>>        String sName
38309>>>>>>>        Handle hoSQLHelper
38309>>>>>>>        Get phoSQLHelper to hoSQLHelper
38310>>>>>>>        Get SQLStrFileFieldName of hoSQLHelper iField to sName
38311>>>>>>>        Function_Return sName
38312>>>>>>>    End_Function
38313>>>>>>>
38313>>>>>>>    // returns the name of the Field suitable for an SQL where statement
38313>>>>>>>    Function SQLStrFieldName Integer iField Returns String
38315>>>>>>>        String sName
38315>>>>>>>        Handle hoSQLHelper
38315>>>>>>>        Get phoSQLHelper to hoSQLHelper
38316>>>>>>>        Get SQLStrFieldName of hoSQLHelper iField to sName
38317>>>>>>>        Function_Return sName
38318>>>>>>>    End_Function
38319>>>>>>>
38319>>>>>>>    // returns the name of the Schema and File and Field suitable for an SQL where statement
38319>>>>>>>    Function SQLStrSchemaFileFieldName Integer iField Returns String
38321>>>>>>>        String sName
38321>>>>>>>        Handle hoSQLHelper
38321>>>>>>>        Get phoSQLHelper to hoSQLHelper
38322>>>>>>>        Get SQLStrSchemaFileFieldName of hoSQLHelper iField to sName
38323>>>>>>>        Function_Return sName
38324>>>>>>>    End_Function
38325>>>>>>>    
38325>>>>>>>    //  returns the name of a file suitable for a SQL statement
38325>>>>>>>    Function SQLStrFileName Integer iField Returns String
38327>>>>>>>        String sName
38327>>>>>>>        Handle hoSQLHelper
38327>>>>>>>        Get phoSQLHelper to hoSQLHelper
38328>>>>>>>        Get SQLStrFileName of hoSQLHelper iField to sName
38329>>>>>>>        Function_Return sName
38330>>>>>>>    End_Function
38331>>>>>>>    
38331>>>>>>>    // creates escaped SQL string by replacing single quote with two single quotes
38331>>>>>>>    Function SQLEscapedStr String sSQL Returns String
38333>>>>>>>        Handle hoSQLHelper
38333>>>>>>>        Get phoSQLHelper to hoSQLHelper
38334>>>>>>>        Get SQLEscapedStr of hoSQLHelper sSQL to sSQL
38335>>>>>>>        Function_Return sSQL
38336>>>>>>>    End_Function
38337>>>>>>>    
38337>>>>>>>    // Returns:
38337>>>>>>>    //       The record id string based on piPrimaryIndex.
38337>>>>>>>    Function PrimaryRecordId Returns String
38339>>>>>>>        Integer iIndex iFile iSegments iSegment iField
38339>>>>>>>        String sVal sId
38339>>>>>>>        
38339>>>>>>>        Get Main_File to iFile
38340>>>>>>>        Get piPrimaryIndex to iIndex
38341>>>>>>>        
38341>>>>>>>        If (iIndex < 0) Begin
38343>>>>>>>            Get_Attribute DF_FILE_PRIMARY_INDEX of iFile to iIndex
38346>>>>>>>        End
38346>>>>>>>>
38346>>>>>>>        
38346>>>>>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of iFile iIndex to iSegments
38349>>>>>>>        For iSegment from 1 to iSegments
38355>>>>>>>>
38355>>>>>>>            Get_Attribute DF_INDEX_SEGMENT_FIELD of iFile iIndex iSegment to iField
38358>>>>>>>            
38358>>>>>>>            Get_Field_Value iFile iField to sVal
38361>>>>>>>            Move (Trim(sVal)) to sVal
38362>>>>>>>            
38362>>>>>>>            //  Encode join sign for multi segment indexes
38362>>>>>>>            If (iSegments > 1) Begin
38364>>>>>>>                Move (Replaces("_", sVal, "~5F~")) to sVal
38365>>>>>>>            End
38365>>>>>>>>
38365>>>>>>>            
38365>>>>>>>            If (iSegment = 1) Begin
38367>>>>>>>                Move sVal to sId
38368>>>>>>>            End
38368>>>>>>>>
38368>>>>>>>            Else Begin
38369>>>>>>>                Move (sId + "_" + sVal) to sId
38370>>>>>>>            End
38370>>>>>>>>
38370>>>>>>>            
38370>>>>>>>        Loop
38371>>>>>>>>
38371>>>>>>>        
38371>>>>>>>        Function_Return sId
38372>>>>>>>    End_Function
38373>>>>>>>    
38373>>>>>>>    
38373>>>>>>>    // Finds a record on the global buffer based on the record id.
38373>>>>>>>    //
38373>>>>>>>    // Params:
38373>>>>>>>    //       sRecordId   Record id generated by PrimaryRecordId.
38373>>>>>>>    Function FindByPrimaryRecordId String sRecordId Returns Boolean
38375>>>>>>>        Integer iIndex iFile iSegments iSegment iField
38375>>>>>>>        String[] aValues
38376>>>>>>>        String sVal
38376>>>>>>>        Boolean bTrapped
38376>>>>>>>        
38376>>>>>>>        Get Main_File to iFile
38377>>>>>>>        Get piPrimaryIndex to iIndex
38378>>>>>>>        
38378>>>>>>>        If (iIndex < 0) Begin
38380>>>>>>>            Get_Attribute DF_FILE_PRIMARY_INDEX of iFile to iIndex
38383>>>>>>>        End
38383>>>>>>>>
38383>>>>>>>        
38383>>>>>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of iFile iIndex to iSegments
38386>>>>>>>        
38386>>>>>>>        If (iSegments > 1) Begin
38388>>>>>>>            Move (StrSplitToArray(sRecordId, "_")) to aValues
38389>>>>>>>        End
38389>>>>>>>>
38389>>>>>>>        Else Begin
38390>>>>>>>            Move sRecordId to aValues[0]
38391>>>>>>>        End
38391>>>>>>>>
38391>>>>>>>        
38391>>>>>>>        If (iSegments = SizeOfArray(aValues)) Begin
38393>>>>>>>            Clear iFile
38394>>>>>>>            
38394>>>>>>>            Send Ignore_Error of Error_Object_Id 56
38395>>>>>>>            Send Ignore_Error of Error_Object_Id 11
38396>>>>>>>            
38396>>>>>>>            For iSegment from 1 to iSegments
38402>>>>>>>>
38402>>>>>>>                Get_Attribute DF_INDEX_SEGMENT_FIELD of iFile iIndex iSegment to iField
38405>>>>>>>                
38405>>>>>>>                Move aValues[iSegment - 1] to sVal
38406>>>>>>>                If (iSegments > 1) Begin
38408>>>>>>>                    Move (Replaces("~5F~", sVal, "_")) to sVal
38409>>>>>>>                End
38409>>>>>>>>
38409>>>>>>>                
38409>>>>>>>                Set_Field_Value iFile iField to sVal
38412>>>>>>>            Loop
38413>>>>>>>>
38413>>>>>>>            Send Trap_Error of Error_Object_Id 56
38414>>>>>>>            Send Trap_Error of Error_Object_Id 11
38415>>>>>>>            
38415>>>>>>>            Vfind iFile iIndex EQ
38417>>>>>>>            
38417>>>>>>>            Function_Return (Found)
38418>>>>>>>        End
38418>>>>>>>>
38418>>>>>>>        
38418>>>>>>>        Function_Return False
38419>>>>>>>    End_Function
38420>>>>>>>    
38420>>>>>>>    // Converts a RecordId to a RowId by finding it on the global buffer.
38420>>>>>>>    //
38420>>>>>>>    // Params:
38420>>>>>>>    //       sRecordId   Record id based on piPrimaryIndex.
38420>>>>>>>    //       rRowId      (ByRef) Will be filled with the rowid.
38420>>>>>>>    // Returns:
38420>>>>>>>    //       True if the record id was valid.
38420>>>>>>>    Function RecordIdToRowId String sRecordId RowID ByRef rRowId Returns Boolean
38422>>>>>>>        Boolean bFound
38422>>>>>>>        
38422>>>>>>>        Get FindByPrimaryRecordId sRecordId to bFound
38423>>>>>>>        If (bFound) Begin
38425>>>>>>>            Move (GetRowID(Main_File(Self))) to rRowId
38426>>>>>>>        End
38426>>>>>>>>
38426>>>>>>>        Else Begin
38427>>>>>>>            Move (NullRowID()) to rRowId
38428>>>>>>>        End
38428>>>>>>>>
38428>>>>>>>        
38428>>>>>>>        Function_Return bFound
38429>>>>>>>    End_Function
38430>>>>>>>    
38430>>>>>>>    // Converts a RowId into a record ID. Note that it performs a find on the global buffer.
38430>>>>>>>    //
38430>>>>>>>    // Params:
38430>>>>>>>    //       riRowId     RowID.
38430>>>>>>>    // Returns:
38430>>>>>>>    //       Record id based on piPrimaryIndex.
38430>>>>>>>    Function RowIdToRecordId RowID riRowId Returns String
38432>>>>>>>        Boolean bFound
38432>>>>>>>        String sRecId
38432>>>>>>>        
38432>>>>>>>        If (not(IsNullRowID(riRowId))) Begin
38434>>>>>>>            Move (FindByRowID(Main_File(Self), riRowId)) to bFound
38435>>>>>>>            
38435>>>>>>>            If (bFound) Begin
38437>>>>>>>                Get PrimaryRecordId to sRecId
38438>>>>>>>            End
38438>>>>>>>>
38438>>>>>>>        End
38438>>>>>>>>
38438>>>>>>>        
38438>>>>>>>        Function_Return sRecId
38439>>>>>>>    End_Function
38440>>>>>>>End_Class
38441>>>>>>>
38441>>>>>>>// This message will be send as a notification message from an
38441>>>>>>>// Extended_Data_Set whenever a fieldvalue has been changed.
38441>>>>>>>// It has been defined FOR cUIObject or Desktop  here so that attached
38441>>>>>>>// DEO which do not know anything about Extended_Data_Sets don't get
38441>>>>>>>// frustrated.
38441>>>>>>>// All focusable objects and DEOs must understand this. This should be
38441>>>>>>>// changed at some point in the future.
38441>>>>>>>Function Extended_DEO_State for cUIObject Returns Integer
38443>>>>>>>End_Function
38444>>>>>>>
38444>>>>>>>
38444>>>>>>>// this command is now obsolete. use Set Field_auto_increment
38444>>>>>>>
38444>>>>>Use Dfcursor.pkg
38444>>>>>Use DUFStatusPanel.pkg
Including file: DUFStatusPanel.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\DUFStatusPanel.pkg)
38444>>>>>>>// StatPnl.pkg - creates the standard status_panel object.
38444>>>>>>>//
38444>>>>>>>//
38444>>>>>>>// This is the default Status Panel object used by any of the Visual DataFlex classes that
38444>>>>>>>// invoke the standard status panel. The standard has always been that the package name
38444>>>>>>>// is StatPnl.pkg and the name of the object is Status_Panel. As of 12.0, there are major
38444>>>>>>>// changes in the way the status panel operates The Sentinel based external status panel used in
38444>>>>>>>// prior revisions has been replace with status panel that is part of the application.
38444>>>>>>>// This should work much better and faster than the old sentinel based solution.
38444>>>>>>>// While the way this operates has changed, the interface has not and therefore this should work
38444>>>>>>>// with most applications.
38444>>>>>>>//
38444>>>>>>>// As of 12.0, we have added a global handle that contains the object ID of this status panel.
38444>>>>>>>// This variable ghoStatusPanel can be used in place of the object name Status_Panel. This provides
38444>>>>>>>// a cleaner more robust interface.
38444>>>>>>>//
38444>>>>>>>//
38444>>>>>>>// Compatibility Note:
38444>>>>>>>//
38444>>>>>>>// When used in the standard way, this change will require no changes. A developer will only need to
38444>>>>>>>// change their code if they've modified the sentinel program, which was a difficult thing to do.
38444>>>>>>>//
38444>>>>>>>// If for some reason you application will not work using this as a replacement for the old status
38444>>>>>>>// panel, you've probably done something special with the old status-panel. If you don't want to
38444>>>>>>>// figure out how to use the new one and you want to continue using the old one you are going to need
38444>>>>>>>// to add some code to include the old status panel in your application. Add the following to your project (your src).
38444>>>>>>>//
38444>>>>>>>// Use StatPnl.pkg    // Make sure you load the new status panel object first. this is not optional!
38444>>>>>>>// Use OldStatPnl.pkg // load the old status panel. Status_Panel is now this old object
38444>>>>>>>//
38444>>>>>>>// If you do this, you will lose access to the new status-panel via Status_Panel. However, you
38444>>>>>>>// can still access the new object via the ghoStatusPanel handle.
38444>>>>>>>//
38444>>>>>>>//
38444>>>>>>>// Creating your own Status Panel objects
38444>>>>>>>//
38444>>>>>>>// If a developer wishes to create a custom panel, they should use this package as their template.
38444>>>>>>>// This panel can be visually modeled and changed any way you wish. Just save your new custom panel
38444>>>>>>>// with a different file and object name and direct your status panel request to the new object.
38444>>>>>>>//
38444>>>>>>>// If the new panel changes the interface and updates objects that are not currently defined, you
38444>>>>>>>// want to make sure you send the message ProcessEvents after you've updated the object. This allows
38444>>>>>>>// the object to paint when inside of a tight loop. For example, if you wanted to add a progress
38444>>>>>>>// bar (cProgressBar) you would want to Send ProcessEvents after you update the progress bar.
38444>>>>>>>// e.g.
38444>>>>>>>//       Procedure UpdateStatusBar
38444>>>>>>>//           Send DoAdvance of oProgressBar
38444>>>>>>>//           Send ProcessEvents
38444>>>>>>>//       End_Procedure
38444>>>>>>>//
38444>>>>>>>// of course, if you use the standard interfaces in status bar and your forward send these
38444>>>>>>>// messages this will be done for you.
38444>>>>>>>//
38444>>>>>>>// the standard Interface for status panels are:
38444>>>>>>>//
38444>>>>>>>// Send Initialize_StatusPanel - initializes values for caption, title & message
38444>>>>>>>// Send Start_StatusPanel      - start the status panel
38444>>>>>>>// Send Stop_StatusPanel       - stop the status panel
38444>>>>>>>// Send Update_StatusPanel     - update the status panel's action area
38444>>>>>>>// Get  Check_StatusPanel      - check for cancel (if cancel or pbCancel is set, close the panel)
38444>>>>>>>//
38444>>>>>>>// Get/Set Caption_Text - updates the caption bar
38444>>>>>>>// Get/Set Title_Text   - updates the title area
38444>>>>>>>// Get/Set Message_Text - updates the Message area
38444>>>>>>>// Get/Set Action_Text  - updates the action area
38444>>>>>>>// Get/Set Button_Text  - updates the button area
38444>>>>>>>//
38444>>>>>>>// Get/Set Allow_cancel_state - determines if panel can be canceled
38444>>>>>>>// Send EnableCancelButton - code you should provide to enable/disable cancel button
38444>>>>>>>//
38444>>>>>>>// ghoStatusPanel - global handle that points to the standard status panel.
38444>>>>>>>Use cProcessStatusPanel.pkg
38444>>>>>>>Use cCJSkinFramework.pkg
Including file: cCJSkinFramework.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCJSkinFramework.pkg)
38444>>>>>>>>>Use windows.pkg
38444>>>>>>>>>Use cCJComSkinFramework.pkg
Including file: cCJComSkinFramework.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCJComSkinFramework.pkg)
38444>>>>>>>>>>>// DataFlex COM proxy classes generated from C:\Program Files (x86)\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v22.0.0\Bin\Codejock.SkinFramework.Unicode.x64.v22.0.0.ocx
38444>>>>>>>>>>>Use FlexCom20.pkg
38444>>>>>>>>>>>
38444>>>>>>>>>>>// Changes to Imported package
38444>>>>>>>>>>>//     OLEXTPxx to XTPxx
38444>>>>>>>>>>>//     OLExtpxx to xtpxx
38444>>>>>>>>>>>//     OLESkinFramework to SkinFramework
38444>>>>>>>>>>>//     OLESTDxxx and OLEXPxxxx to STD/XP
38444>>>>>>>>>>>//     cCom classes to cCJ
38444>>>>>>>>>>>//     cCJAutomationObject back to cComAutomationObject
38444>>>>>>>>>>>//     cCJActiveXControl back to cComActiveXControl
38444>>>>>>>>>>>//     cCJSkinFramework to cCJComSkinFramework
38444>>>>>>>>>>>//     Use statements as noted below (classes moved to these files)
38444>>>>>>>>>>>//     Set classlibrary of all cComAutomation objects to Windows (for class doc)
38444>>>>>>>>>>>
38444>>>>>>>>>>>// These have been extracted from this class and moved into seperate packages
38444>>>>>>>>>>>// because other Codejock classes use these.
38444>>>>>>>>>>>Use cCJColorManager.pkg     // cCJColorManager
38444>>>>>>>>>>>
38444>>>>>>>>>>>
38444>>>>>>>>>>>Define SkinFrameworkApplyOptions for Integer
38444>>>>>>>>>>>    Define xtpSkinApplyMetrics for 1
38444>>>>>>>>>>>    Define xtpSkinApplyFrame for 2
38444>>>>>>>>>>>    Define xtpSkinApplyColors for 4
38444>>>>>>>>>>>    Define xtpSkinApplyMenus for 8
38444>>>>>>>>>>>
38444>>>>>>>>>>>// CLSID: {C0DE2200-28D7-4F2C-87A7-7266367B4655}
38444>>>>>>>>>>>// Dispatch interface for SkinFramework Control
38444>>>>>>>>>>>Class cCJ_DSkinFramework is a Mixin
38445>>>>>>>>>>>
38445>>>>>>>>>>>    Function ComApplyOptions Returns SkinFrameworkApplyOptions
38447>>>>>>>>>>>        SkinFrameworkApplyOptions retVal
38447>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
38448>>>>>>>>>>>        Function_Return retVal
38449>>>>>>>>>>>    End_Function
38450>>>>>>>>>>>
38450>>>>>>>>>>>    Procedure Set ComApplyOptions SkinFrameworkApplyOptions value
38452>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
38453>>>>>>>>>>>    End_Procedure
38454>>>>>>>>>>>
38454>>>>>>>>>>>    Function ComAutoApplyNewWindows Returns Boolean
38456>>>>>>>>>>>        Boolean retVal
38456>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
38457>>>>>>>>>>>        Function_Return retVal
38458>>>>>>>>>>>    End_Function
38459>>>>>>>>>>>
38459>>>>>>>>>>>    Procedure Set ComAutoApplyNewWindows Boolean value
38461>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
38462>>>>>>>>>>>    End_Procedure
38463>>>>>>>>>>>
38463>>>>>>>>>>>    Function ComAutoApplyNewThreads Returns Boolean
38465>>>>>>>>>>>        Boolean retVal
38465>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
38466>>>>>>>>>>>        Function_Return retVal
38467>>>>>>>>>>>    End_Function
38468>>>>>>>>>>>
38468>>>>>>>>>>>    Procedure Set ComAutoApplyNewThreads Boolean value
38470>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
38471>>>>>>>>>>>    End_Procedure
38472>>>>>>>>>>>
38472>>>>>>>>>>>    Function ComLoadSkin String llResourcePath String llIniFileName Returns Boolean
38474>>>>>>>>>>>        Handle hDispatchDriver
38474>>>>>>>>>>>        Boolean retVal
38474>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38475>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38476>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llResourcePath
38477>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llIniFileName
38478>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
38479>>>>>>>>>>>        Function_Return retVal
38480>>>>>>>>>>>    End_Function
38481>>>>>>>>>>>
38481>>>>>>>>>>>    Procedure ComApplyWindow OLE_HANDLE llhWnd
38483>>>>>>>>>>>        Handle hDispatchDriver
38483>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38484>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38485>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
38486>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
38487>>>>>>>>>>>    End_Procedure
38488>>>>>>>>>>>
38488>>>>>>>>>>>    Procedure ComEnableThemeDialogTexture OLE_HANDLE llhWnd Integer llFlags
38490>>>>>>>>>>>        Handle hDispatchDriver
38490>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38491>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38492>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
38493>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llFlags
38494>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
38495>>>>>>>>>>>    End_Procedure
38496>>>>>>>>>>>
38496>>>>>>>>>>>    Procedure ComRemoveWindow OLE_HANDLE llhWnd
38498>>>>>>>>>>>        Handle hDispatchDriver
38498>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38499>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38500>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
38501>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
38502>>>>>>>>>>>    End_Procedure
38503>>>>>>>>>>>
38503>>>>>>>>>>>    Procedure ComRemoveAllWindows
38505>>>>>>>>>>>        Handle hDispatchDriver
38505>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38506>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
38507>>>>>>>>>>>    End_Procedure
38508>>>>>>>>>>>
38508>>>>>>>>>>>    Procedure ComAddWindowClass String llClassName String llBaseClassName
38510>>>>>>>>>>>        Handle hDispatchDriver
38510>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38511>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38512>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
38513>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llBaseClassName
38514>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
38515>>>>>>>>>>>    End_Procedure
38516>>>>>>>>>>>
38516>>>>>>>>>>>    Procedure ComRemoveWindowClass String llClassName
38518>>>>>>>>>>>        Handle hDispatchDriver
38518>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38519>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38520>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
38521>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
38522>>>>>>>>>>>    End_Procedure
38523>>>>>>>>>>>
38523>>>>>>>>>>>    Function ComEnumerateSkinDirectory String llPath Boolean llRecursive Returns Variant
38525>>>>>>>>>>>        Handle hDispatchDriver
38525>>>>>>>>>>>        Variant retVal
38525>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38526>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38527>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
38528>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRecursive
38529>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
38530>>>>>>>>>>>        Function_Return retVal
38531>>>>>>>>>>>    End_Function
38532>>>>>>>>>>>
38532>>>>>>>>>>>    Function ComEnumerateSkinFile String llPath Returns Variant
38534>>>>>>>>>>>        Handle hDispatchDriver
38534>>>>>>>>>>>        Variant retVal
38534>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38535>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38536>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
38537>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
38538>>>>>>>>>>>        Function_Return retVal
38539>>>>>>>>>>>    End_Function
38540>>>>>>>>>>>
38540>>>>>>>>>>>    Function ComGetColor XTPColorManagerColor llIndex Returns OLE_COLOR
38542>>>>>>>>>>>        Handle hDispatchDriver
38542>>>>>>>>>>>        OLE_COLOR retVal
38542>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38543>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38544>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
38545>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_I4 to retVal
38546>>>>>>>>>>>        Function_Return retVal
38547>>>>>>>>>>>    End_Function
38548>>>>>>>>>>>
38548>>>>>>>>>>>    Procedure ComExcludeModule String llModuleName
38550>>>>>>>>>>>        Handle hDispatchDriver
38550>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38551>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38552>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llModuleName
38553>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
38554>>>>>>>>>>>    End_Procedure
38555>>>>>>>>>>>
38555>>>>>>>>>>>    Function ComCreateSchema String llResourcePath String llIniFileName Returns Variant
38557>>>>>>>>>>>        Handle hDispatchDriver
38557>>>>>>>>>>>        Variant retVal
38557>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38558>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38559>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llResourcePath
38560>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llIniFileName
38561>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
38562>>>>>>>>>>>        Function_Return retVal
38563>>>>>>>>>>>    End_Function
38564>>>>>>>>>>>
38564>>>>>>>>>>>    Procedure ComSetWindowTheme OLE_HANDLE llhWnd Variant llSchema
38566>>>>>>>>>>>        Handle hDispatchDriver
38566>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38567>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
38568>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
38569>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llSchema
38570>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
38571>>>>>>>>>>>    End_Procedure
38572>>>>>>>>>>>
38572>>>>>>>>>>>    Procedure ComAboutBox
38574>>>>>>>>>>>        Handle hDispatchDriver
38574>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38575>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
38576>>>>>>>>>>>    End_Procedure
38577>>>>>>>>>>>End_Class
38578>>>>>>>>>>>
38578>>>>>>>>>>>// CLSID: {C0DE2200-4463-4030-B324-AC6A8075FEC8}
38578>>>>>>>>>>>// Event interface for SkinFramework Control
38578>>>>>>>>>>>Class cCJ_DSkinFrameworkEvents is a Mixin
38579>>>>>>>>>>>
38579>>>>>>>>>>>    Procedure RegisterComEvents
38581>>>>>>>>>>>    End_Procedure
38582>>>>>>>>>>>End_Class
38583>>>>>>>>>>>
38583>>>>>>>>>>>// CoClass
38583>>>>>>>>>>>// ProgID: Codejock.SkinFramework.22.0.0
38583>>>>>>>>>>>// CLSID: {C0DE2200-2217-42EE-B1B0-82C890431F17}
38583>>>>>>>>>>>// SkinFramework Control
38583>>>>>>>>>>>Class cCJComSkinFramework is a cComActiveXControl
38584>>>>>>>>>>>    Import_Class_Protocol cCJ_DSkinFramework
38585>>>>>>>>>>>    Import_Class_Protocol cCJ_DSkinFrameworkEvents
38586>>>>>>>>>>>
38586>>>>>>>>>>>    Procedure Construct_Object
38588>>>>>>>>>>>        Forward Send Construct_Object
38590>>>>>>>>>>>        Set psProgID to "{C0DE2200-2217-42EE-B1B0-82C890431F17}"
38591>>>>>>>>>>>        Set psEventId to "{C0DE2200-4463-4030-B324-AC6A8075FEC8}"
38592>>>>>>>>>>>        Set psLicenseKey to ("Skin Framework Control Copyright (c) 1998-2022 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.SkinFramework.ActiveX.v22.0"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: GGE-OLD-QQR-EJS")
38593>>>>>>>>>>>        Set peAutoCreate to acAutoCreate
38594>>>>>>>>>>>    End_Procedure
38595>>>>>>>>>>>End_Class
38596>>>>>>>>>>>
38596>>>>>>>>>>>// CLSID: {C0DE2200-CA9A-4AA9-8601-0AB7F551AA3D}
38596>>>>>>>>>>>// SkinFramework Global Settings
38596>>>>>>>>>>>Class cCJISkinFrameworkGlobalSettings is a Mixin
38597>>>>>>>>>>>
38597>>>>>>>>>>>    Function ComLicense Returns String
38599>>>>>>>>>>>        String retVal
38599>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to retVal
38600>>>>>>>>>>>        Function_Return retVal
38601>>>>>>>>>>>    End_Function
38602>>>>>>>>>>>
38602>>>>>>>>>>>    Procedure Set ComLicense String value
38604>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to value
38605>>>>>>>>>>>    End_Procedure
38606>>>>>>>>>>>
38606>>>>>>>>>>>    Function ComTitle Returns String
38608>>>>>>>>>>>        String retVal
38608>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to retVal
38609>>>>>>>>>>>        Function_Return retVal
38610>>>>>>>>>>>    End_Function
38611>>>>>>>>>>>
38611>>>>>>>>>>>    Procedure Set ComTitle String value
38613>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to value
38614>>>>>>>>>>>    End_Procedure
38615>>>>>>>>>>>
38615>>>>>>>>>>>    // Set this value to True to force using legacy SkinFramework core that has been in use up to version 19
38615>>>>>>>>>>>    Function ComUseLegacyCore Returns Boolean
38617>>>>>>>>>>>        Boolean retVal
38617>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 110 OLE_VT_BOOL to retVal
38618>>>>>>>>>>>        Function_Return retVal
38619>>>>>>>>>>>    End_Function
38620>>>>>>>>>>>
38620>>>>>>>>>>>    // Set this value to True to force using legacy SkinFramework core that has been in use up to version 19
38620>>>>>>>>>>>    Procedure Set ComUseLegacyCore Boolean value
38622>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 110 OLE_VT_BOOL to value
38623>>>>>>>>>>>    End_Procedure
38624>>>>>>>>>>>
38624>>>>>>>>>>>    Function ComVersion Returns String
38626>>>>>>>>>>>        Handle hDispatchDriver
38626>>>>>>>>>>>        String retVal
38626>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38627>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_BSTR to retVal
38628>>>>>>>>>>>        Function_Return retVal
38629>>>>>>>>>>>    End_Function
38630>>>>>>>>>>>
38630>>>>>>>>>>>    Function ComUnicode Returns Boolean
38632>>>>>>>>>>>        Handle hDispatchDriver
38632>>>>>>>>>>>        Boolean retVal
38632>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38633>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_BOOL to retVal
38634>>>>>>>>>>>        Function_Return retVal
38635>>>>>>>>>>>    End_Function
38636>>>>>>>>>>>
38636>>>>>>>>>>>    Function ComOcxPath Returns String
38638>>>>>>>>>>>        Handle hDispatchDriver
38638>>>>>>>>>>>        String retVal
38638>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38639>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_BSTR to retVal
38640>>>>>>>>>>>        Function_Return retVal
38641>>>>>>>>>>>    End_Function
38642>>>>>>>>>>>End_Class
38643>>>>>>>>>>>
38643>>>>>>>>>>>// CoClass
38643>>>>>>>>>>>// ProgID: Codejock.SkinFrameworkGlobalSettings.22.0.0
38643>>>>>>>>>>>// CLSID: {C0DE2200-F744-4373-B38D-29CE83EF0EE5}
38643>>>>>>>>>>>// SkinFramework Global Settings
38643>>>>>>>>>>>Class cCJComSkinFrameworkGlobalSettings is a cComAutomationObject
38644>>>>>>>>>>>    Import_Class_Protocol cCJISkinFrameworkGlobalSettings
38645>>>>>>>>>>>
38645>>>>>>>>>>>    Procedure Construct_Object
38647>>>>>>>>>>>        Forward Send Construct_Object
38649>>>>>>>>>>>        Set psProgID to "{C0DE2200-F744-4373-B38D-29CE83EF0EE5}"
38650>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
38651>>>>>>>>>>>    End_Procedure
38652>>>>>>>>>>>End_Class
38653>>>>>>>>>>>
38653>>>>>>>>>>>// CLSID: {C0DE2200-1038-498E-A936-361F08B4C4AA}
38653>>>>>>>>>>>Class cCJSkinIniFile is a cComAutomationObject
38654>>>>>>>>>>>
38654>>>>>>>>>>>    Function ComColorScheme Returns String
38656>>>>>>>>>>>        String retVal
38656>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
38657>>>>>>>>>>>        Function_Return retVal
38658>>>>>>>>>>>    End_Function
38659>>>>>>>>>>>
38659>>>>>>>>>>>    Procedure Set ComColorScheme String value
38661>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
38662>>>>>>>>>>>    End_Procedure
38663>>>>>>>>>>>
38663>>>>>>>>>>>    Function ComFontSize Returns String
38665>>>>>>>>>>>        String retVal
38665>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
38666>>>>>>>>>>>        Function_Return retVal
38667>>>>>>>>>>>    End_Function
38668>>>>>>>>>>>
38668>>>>>>>>>>>    Procedure Set ComFontSize String value
38670>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
38671>>>>>>>>>>>    End_Procedure
38672>>>>>>>>>>>
38672>>>>>>>>>>>    Function ComIniFileName Returns String
38674>>>>>>>>>>>        String retVal
38674>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
38675>>>>>>>>>>>        Function_Return retVal
38676>>>>>>>>>>>    End_Function
38677>>>>>>>>>>>
38677>>>>>>>>>>>    Procedure Set ComIniFileName String value
38679>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
38680>>>>>>>>>>>    End_Procedure
38681>>>>>>>>>>>End_Class
38682>>>>>>>>>>>
38682>>>>>>>>>>>// CLSID: {C0DE2200-4834-499E-95B4-30E0C3F43A10}
38682>>>>>>>>>>>Class cCJSkinDescription is a cComAutomationObject
38683>>>>>>>>>>>
38683>>>>>>>>>>>    Function ComName Returns String
38685>>>>>>>>>>>        String retVal
38685>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
38686>>>>>>>>>>>        Function_Return retVal
38687>>>>>>>>>>>    End_Function
38688>>>>>>>>>>>
38688>>>>>>>>>>>    Procedure Set ComName String value
38690>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
38691>>>>>>>>>>>    End_Procedure
38692>>>>>>>>>>>
38692>>>>>>>>>>>    Function ComPath Returns String
38694>>>>>>>>>>>        String retVal
38694>>>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
38695>>>>>>>>>>>        Function_Return retVal
38696>>>>>>>>>>>    End_Function
38697>>>>>>>>>>>
38697>>>>>>>>>>>    Procedure Set ComPath String value
38699>>>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
38700>>>>>>>>>>>    End_Procedure
38701>>>>>>>>>>>
38701>>>>>>>>>>>    Function ComCount Returns Integer
38703>>>>>>>>>>>        Handle hDispatchDriver
38703>>>>>>>>>>>        Integer retVal
38703>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38704>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
38705>>>>>>>>>>>        Function_Return retVal
38706>>>>>>>>>>>    End_Function
38707>>>>>>>>>>>
38707>>>>>>>>>>>    Function ComIniFile Integer llIndex Returns Variant
38709>>>>>>>>>>>        Handle hDispatchDriver
38709>>>>>>>>>>>        Variant retVal
38709>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38710>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38711>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
38712>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
38713>>>>>>>>>>>        Function_Return retVal
38714>>>>>>>>>>>    End_Function
38715>>>>>>>>>>>
38715>>>>>>>>>>>    Function Com_NewEnum Returns Variant
38717>>>>>>>>>>>        Handle hDispatchDriver
38717>>>>>>>>>>>        Variant retVal
38717>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38718>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
38719>>>>>>>>>>>        Function_Return retVal
38720>>>>>>>>>>>    End_Function
38721>>>>>>>>>>>End_Class
38722>>>>>>>>>>>
38722>>>>>>>>>>>// CLSID: {C0DE2200-FB37-4B08-A2B9-F6F8B253D697}
38722>>>>>>>>>>>Class cCJSkinDescriptions is a cComAutomationObject
38723>>>>>>>>>>>
38723>>>>>>>>>>>    Function ComCount Returns Integer
38725>>>>>>>>>>>        Handle hDispatchDriver
38725>>>>>>>>>>>        Integer retVal
38725>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38726>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
38727>>>>>>>>>>>        Function_Return retVal
38728>>>>>>>>>>>    End_Function
38729>>>>>>>>>>>
38729>>>>>>>>>>>    Function ComSkin Integer llIndex Returns Variant
38731>>>>>>>>>>>        Handle hDispatchDriver
38731>>>>>>>>>>>        Variant retVal
38731>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38732>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38733>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
38734>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
38735>>>>>>>>>>>        Function_Return retVal
38736>>>>>>>>>>>    End_Function
38737>>>>>>>>>>>
38737>>>>>>>>>>>    Function Com_NewEnum Returns Variant
38739>>>>>>>>>>>        Handle hDispatchDriver
38739>>>>>>>>>>>        Variant retVal
38739>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38740>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
38741>>>>>>>>>>>        Function_Return retVal
38742>>>>>>>>>>>    End_Function
38743>>>>>>>>>>>End_Class
38744>>>>>>>>>>>
38744>>>>>>>>>>>// CLSID: {C0DE2200-C56F-43C0-BCF1-8193B35FE4C4}
38744>>>>>>>>>>>Class cCJSkinSchema is a cComAutomationObject
38745>>>>>>>>>>>
38745>>>>>>>>>>>    Function ComGetColor XTPColorManagerColor llIndex Returns OLE_COLOR
38747>>>>>>>>>>>        Handle hDispatchDriver
38747>>>>>>>>>>>        OLE_COLOR retVal
38747>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
38748>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
38749>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
38750>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
38751>>>>>>>>>>>        Function_Return retVal
38752>>>>>>>>>>>    End_Function
38753>>>>>>>>>>>End_Class
38754>>>>>>>>>Use cApplication.pkg
38754>>>>>>>>>
38754>>>>>>>>>Struct tSkinInformation
38754>>>>>>>>>    String sName     // description of the skin
38754>>>>>>>>>    String sSkinfile // file path. Can be relative or full
38754>>>>>>>>>    String sSkinIni  // section name
38754>>>>>>>>>End_Struct
38754>>>>>>>>>
38754>>>>>>>>>
38754>>>>>>>>>Class cCJSkinFramework is a cCJComSkinFramework
38755>>>>>>>>>    
38755>>>>>>>>>    Procedure Construct_Object
38757>>>>>>>>>        Forward Send Construct_Object
38759>>>>>>>>>        
38759>>>>>>>>>        Property String psSkinFile ""
38760>>>>>>>>>        Property String psSkinIni ""
38761>>>>>>>>>        Property Boolean pbLoadPreference False
38762>>>>>>>>>        
38762>>>>>>>>>        Set peAutoCreate to acAutoCreate
38763>>>>>>>>>        
38763>>>>>>>>>        Move Self to ghoSkinFramework
38764>>>>>>>>>    End_Procedure
38765>>>>>>>>>    
38765>>>>>>>>>    // return the default skin path, which is the programs directory.
38765>>>>>>>>>    // This requires an application object.
38765>>>>>>>>>    // If you want to different skin path, override this.
38765>>>>>>>>>    Function SkinPath Returns String
38767>>>>>>>>>        String sPath sPaths
38767>>>>>>>>>        Handle hoWorkspace
38767>>>>>>>>>        If ghoApplication Begin
38769>>>>>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
38770>>>>>>>>>            Get psProgramPath of hoWorkspace to sPaths
38771>>>>>>>>>            Get PathAtIndex of hoWorkspace sPaths 1 to sPath
38772>>>>>>>>>        End
38772>>>>>>>>>>
38772>>>>>>>>>        Else Begin
38773>>>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
38774>>>>>>>>>>
38774>>>>>>>>>        End
38774>>>>>>>>>>
38774>>>>>>>>>        Function_Return sPath
38775>>>>>>>>>    End_Function
38776>>>>>>>>>    
38776>>>>>>>>>    // Returns the Qualified name of psSkinFile. If the file is already qualified it just
38776>>>>>>>>>    // returns itself. If it is not, it uses SkinPath to get the path.
38776>>>>>>>>>    Function SkinQFile Returns String
38778>>>>>>>>>        String sFile sPath sSep
38778>>>>>>>>>        Boolean bQualified
38778>>>>>>>>>        Get psSkinFile to sFile
38779>>>>>>>>>        If not (IsFileNameQualified(sFile)) Begin
38781>>>>>>>>>            Get SkinPath to sPath
38782>>>>>>>>>            Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sSep
38783>>>>>>>>>            Move (sPath - sSep - sFile) to sFile
38784>>>>>>>>>        End
38784>>>>>>>>>>
38784>>>>>>>>>        Function_Return sFile
38785>>>>>>>>>    End_Function
38786>>>>>>>>>    
38786>>>>>>>>>    // defines the default VDF window class mapping.
38786>>>>>>>>>    Procedure OnAddVDFWindowClasses
38788>>>>>>>>>        Send ComAddWindowClass "DFlistbox"               "ListBox"
38789>>>>>>>>>        Send ComAddWindowClass "DFentry"                 "Edit"
38790>>>>>>>>>        Send ComAddWindowClass "DFtextbox"               "Edit"
38791>>>>>>>>>        Send ComAddWindowClass "DFRichEditCtrl"          "Edit"
38792>>>>>>>>>        Send ComAddWindowClass "DFcombobox"              "ComboBox"
38793>>>>>>>>>        Send ComAddWindowClass "DFformlist"              "Edit"
38794>>>>>>>>>        Send ComAddWindowClass "DFFormListHeader"        "SysHeader32"
38795>>>>>>>>>        Send ComAddWindowClass "DFbutton"                "Button"
38796>>>>>>>>>        Send ComAddWindowClass "HPromptBtn"              "Button"
38797>>>>>>>>>        Send ComAddWindowClass "Hspinbtn"                "msctls_updown32"
38798>>>>>>>>>        Send ComAddWindowClass "DFSysTabControl32"       "SysTabControl32"
38799>>>>>>>>>        Send ComAddWindowClass "DFMDIClient"             "MDIClient"
38800>>>>>>>>>        Send ComAddWindowClass "DFedit"                  "edit"
38801>>>>>>>>>        Send ComAddWindowClass "DFlistedit"              "edit"
38802>>>>>>>>>        Send ComAddWindowClass "DFscrollbar"             "scrollbar"
38803>>>>>>>>>        Send ComAddWindowClass "DFgroup"                 "Button"
38804>>>>>>>>>        Send ComAddWindowClass "DFComboGrid"             "ComboBox"
38805>>>>>>>>>        // External class
38805>>>>>>>>>        Send ComAddWindowClass "cVdfAnimation"           "SysAnimate32"
38806>>>>>>>>>        Send ComAddWindowClass "cVdfProgressBar"         "msctls_progress32"
38807>>>>>>>>>        Send ComAddWindowClass "cVdfStatusBar"           "msctls_statusbar32"
38808>>>>>>>>>        Send ComAddWindowClass "cVdfToolbar"             "ToolbarWindow32"
38809>>>>>>>>>        Send ComAddWindowClass "cObsoleteVdfProgressBar" "msctls_progress32"
38810>>>>>>>>>        Send ComAddWindowClass "cVdfTrackBar"            "msctls_trackbar32"
38811>>>>>>>>>        Send ComAddWindowClass "cObsoleteBasicStatusBar" "msctls_statusbar32"
38812>>>>>>>>>        Send ComAddWindowClass "cVdfTreeView"            "SysTreeView32"
38813>>>>>>>>>    End_Procedure
38814>>>>>>>>>    
38814>>>>>>>>>    // Used to support developer designed class mappings (e.g. COM controls)
38814>>>>>>>>>    Procedure OnAddCustomWindowClasses
38816>>>>>>>>>    End_Procedure
38817>>>>>>>>>    
38817>>>>>>>>>    // called when object is created during end_construct_object.
38817>>>>>>>>>    Procedure OnCreate
38819>>>>>>>>>        Integer iOpts
38819>>>>>>>>>        Boolean bUseWindowsFont
38819>>>>>>>>>        Forward Send OnCreate
38821>>>>>>>>>        
38821>>>>>>>>>        // if we are using the windows fonts we will disable the apply metrics which
38821>>>>>>>>>        // never really looked good anyway. This test only exists or legacy purposes
38821>>>>>>>>>        Get pbUseWindowsFont of Desktop to bUseWindowsFont
38822>>>>>>>>>        If bUseWindowsFont Begin
38824>>>>>>>>>            Get ComApplyOptions to iOpts
38825>>>>>>>>>            Set ComApplyOptions to (RemoveBitValue(xtpSkinApplyMetrics, iOpts))
38826>>>>>>>>>        End
38826>>>>>>>>>>
38826>>>>>>>>>        
38826>>>>>>>>>        // this works around a CJ issue where skins applied to other threads causes an exception upon close down.
38826>>>>>>>>>        // We saw this with our mssql driver but it could occur elsewhere. This has been reported in the CJ newsgroup
38826>>>>>>>>>        // and this was the suggested workaround.
38826>>>>>>>>>        Set ComAutoApplyNewThreads to False
38827>>>>>>>>>        
38827>>>>>>>>>        Send OnAddVDFWindowClasses
38828>>>>>>>>>        Send OnAddCustomWindowClasses
38829>>>>>>>>>        
38829>>>>>>>>>        // if preferences are used, it will set psSkinFile and psSkinIni
38829>>>>>>>>>        If (pbLoadPreference(Self)) Begin
38831>>>>>>>>>            Send LoadSkinPreference
38832>>>>>>>>>        End
38832>>>>>>>>>>
38832>>>>>>>>>        // if a skin file name exists, we apply the skin.
38832>>>>>>>>>        If (psSkinFile(Self)<>"") Begin
38834>>>>>>>>>            Send ApplySkin
38835>>>>>>>>>        End
38835>>>>>>>>>>
38835>>>>>>>>>    End_Procedure
38836>>>>>>>>>    
38836>>>>>>>>>    // called by framework as part of application exit.
38836>>>>>>>>>    Procedure Broadcast_Notify_Exit_Application
38838>>>>>>>>>        Send Notify_Exit_Application
38839>>>>>>>>>    End_Procedure
38840>>>>>>>>>    
38840>>>>>>>>>    Procedure Notify_Exit_Application
38842>>>>>>>>>        If (pbLoadPreference(Self)) Begin
38844>>>>>>>>>            Send SaveSkinPreference
38845>>>>>>>>>        End
38845>>>>>>>>>>
38845>>>>>>>>>    End_Procedure
38846>>>>>>>>>    
38846>>>>>>>>>    Procedure NotifyPreApplySkin
38848>>>>>>>>>        Broadcast Send OnPreApplySkin of Desktop True
38850>>>>>>>>>    End_Procedure
38851>>>>>>>>>    
38851>>>>>>>>>    Procedure NotifyPostApplySkin
38853>>>>>>>>>        Broadcast Send OnPostApplySkin of Desktop True
38855>>>>>>>>>    End_Procedure
38856>>>>>>>>>    
38856>>>>>>>>>    // returns an array of all skins in the path. If path is "", use the default path.
38856>>>>>>>>>    // If the default path is used, returns the file names as relative names, else use full path.
38856>>>>>>>>>    Function EnumerateSkins String sPath Boolean bRecursive Returns tSkinInformation[]
38858>>>>>>>>>        tSkinInformation[] Skins
38858>>>>>>>>>        tSkinInformation[] Skins
38859>>>>>>>>>        String sSkinName sSkinFile sDefaultPath sSep
38859>>>>>>>>>        Variant vSkinDescriptions vSkinDescription vSkinIniFile
38859>>>>>>>>>        Handle hSkinDescriptions hSkinDescription hSkinIniFile
38859>>>>>>>>>        Integer iSkinsCount iSkinFilesCount iNumSkins iNumSkinFiles iArrayItem
38859>>>>>>>>>        Integer iPos iDfltLen
38859>>>>>>>>>        Boolean bUseRelativePath
38859>>>>>>>>>        
38859>>>>>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sSep
38860>>>>>>>>>        
38860>>>>>>>>>        Get SkinPath to sDefaultPath
38861>>>>>>>>>        If (sPath="") Begin
38863>>>>>>>>>            Move sDefaultPath to sPath
38864>>>>>>>>>        End
38864>>>>>>>>>>
38864>>>>>>>>>        Move (Uppercase(sDefaultPath)) to sDefaultPath
38865>>>>>>>>>        Move (Length(sDefaultPath)) to iDfltLen
38866>>>>>>>>>        Move (sDefaultPath=Uppercase(sPath)) to bUseRelativePath
38867>>>>>>>>>        
38867>>>>>>>>>        Get ComEnumerateSkinDirectory sPath bRecursive to vSkinDescriptions
38868>>>>>>>>>        If (not(IsNullComObject(vSkinDescriptions))) Begin
38870>>>>>>>>>            
38870>>>>>>>>>            Get Create U_cCJSkinDescriptions to hSkinDescriptions
38871>>>>>>>>>            Get Create U_cCJSkinDescription to hSkinDescription
38872>>>>>>>>>            Get Create U_cCJSkinIniFile to hSkinIniFile
38873>>>>>>>>>            
38873>>>>>>>>>            Set pvComObject of hSkinDescriptions to vSkinDescriptions
38874>>>>>>>>>            Get ComCount of hSkinDescriptions to iNumSkinFiles
38875>>>>>>>>>            
38875>>>>>>>>>            For iSkinFilesCount from 0 to (iNumSkinFiles-1)
38881>>>>>>>>>>
38881>>>>>>>>>                Get ComSkin of hSkinDescriptions iSkinFilesCount to vSkinDescription
38882>>>>>>>>>                Set pvComObject of hSkinDescription to vSkinDescription
38883>>>>>>>>>                
38883>>>>>>>>>                Get ComCount of hSkinDescription to iNumSkins
38884>>>>>>>>>                
38884>>>>>>>>>                For iSkinsCount from 0 to (iNumSkins-1)
38890>>>>>>>>>>
38890>>>>>>>>>                    Get ComIniFile of hSkinDescription iSkinsCount to vSkinIniFile
38891>>>>>>>>>                    Set pvComObject of hSkinIniFile to vSkinIniFile
38892>>>>>>>>>                    
38892>>>>>>>>>                    Get ComName of hSkinDescription to Skins[iArrayItem].sName
38893>>>>>>>>>                    Get ComPath of hSkinDescription to sSkinFile
38894>>>>>>>>>                    If bUseRelativePath Begin
38896>>>>>>>>>                        Move (pos(sDefaultPath,uppercase(sSkinFile))) to iPos
38897>>>>>>>>>                        If iPos Begin
38899>>>>>>>>>                            Move (Remove(sSkinFile,iPos,iDfltLen)) to sSkinFile
38900>>>>>>>>>                            While (Left(sSkinFile,1)=sSep)
38904>>>>>>>>>                                Move (Remove(sSkinFile,1,1)) to sSkinFile
38905>>>>>>>>>                            Loop
38906>>>>>>>>>>
38906>>>>>>>>>                        End
38906>>>>>>>>>>
38906>>>>>>>>>                    End
38906>>>>>>>>>>
38906>>>>>>>>>                    Move sSkinFile to Skins[iArrayItem].sSkinfile
38907>>>>>>>>>                    Get ComIniFileName of hSkinIniFile to Skins[iArrayItem].sSkinIni
38908>>>>>>>>>                    
38908>>>>>>>>>                    Increment iArrayItem
38909>>>>>>>>>                Loop
38910>>>>>>>>>>
38910>>>>>>>>>            Loop
38911>>>>>>>>>>
38911>>>>>>>>>            
38911>>>>>>>>>            Send Destroy of hSkinDescriptions
38912>>>>>>>>>            Send Destroy of hSkinDescription
38913>>>>>>>>>            Send Destroy of hSkinIniFile
38914>>>>>>>>>            
38914>>>>>>>>>        End
38914>>>>>>>>>>
38914>>>>>>>>>        Function_Return Skins
38915>>>>>>>>>    End_Function
38916>>>>>>>>>    
38916>>>>>>>>>    // Save the skin preference. This requires an application object.
38916>>>>>>>>>    // Only do this if the application object allows it.
38916>>>>>>>>>    // This is called during startup if pbLoadPreference is True
38916>>>>>>>>>    // Suitable for override
38916>>>>>>>>>    Procedure SaveSkinPreference
38918>>>>>>>>>        String sSkin sIni
38918>>>>>>>>>        If ghoApplication Begin
38920>>>>>>>>>            If (pbPreserveEnvironment(ghoApplication)) Begin
38922>>>>>>>>>                Get psSkinFile to sSkin
38923>>>>>>>>>                Get psSkinIni to sIni
38924>>>>>>>>>                Send WriteString of ghoApplication "Preferences" "SkinFile" sSkin
38925>>>>>>>>>                Send WriteString of ghoApplication "Preferences" "SkinIni" sIni
38926>>>>>>>>>            End
38926>>>>>>>>>>
38926>>>>>>>>>        End
38926>>>>>>>>>>
38926>>>>>>>>>        Else Begin
38927>>>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
38928>>>>>>>>>>
38928>>>>>>>>>        End
38928>>>>>>>>>>
38928>>>>>>>>>    End_Procedure
38929>>>>>>>>>    
38929>>>>>>>>>    // Load the skin preference. This requires an application object.
38929>>>>>>>>>    // Only do this if the application object allows it.
38929>>>>>>>>>    // This is called during startup if pbLoadPreference is True
38929>>>>>>>>>    // Suitable for override
38929>>>>>>>>>    Procedure LoadSkinPreference
38931>>>>>>>>>        String sSkin sIni
38931>>>>>>>>>        Boolean bExists
38931>>>>>>>>>        If ghoApplication Begin
38933>>>>>>>>>            If (pbPreserveEnvironment(ghoApplication)) Begin
38935>>>>>>>>>                Get ValueExists of ghoApplication "Preferences" "SkinFile" to bExists
38936>>>>>>>>>                If bExists Begin
38938>>>>>>>>>                    Get ReadString of ghoApplication "Preferences" "SkinFile" "" to sSkin
38939>>>>>>>>>                    Get ReadString of ghoApplication "Preferences" "SkinIni" "" to sIni
38940>>>>>>>>>                    Set psSkinFile to sSkin
38941>>>>>>>>>                    Set psSkinIni to sIni
38942>>>>>>>>>                End
38942>>>>>>>>>>
38942>>>>>>>>>            End
38942>>>>>>>>>>
38942>>>>>>>>>        End
38942>>>>>>>>>>
38942>>>>>>>>>        Else Begin
38943>>>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
38944>>>>>>>>>>
38944>>>>>>>>>        End
38944>>>>>>>>>>
38944>>>>>>>>>    End_Procedure
38945>>>>>>>>>    
38945>>>>>>>>>    // Can be called to apply the current skin.
38945>>>>>>>>>    Procedure ApplySkin
38947>>>>>>>>>        Boolean bOk
38947>>>>>>>>>        String sSkin sIni
38947>>>>>>>>>        If (IsComObjectCreated(Self)) Begin
38949>>>>>>>>>            Get SkinQFile to sSkin
38950>>>>>>>>>            Get psSkinIni to sIni
38951>>>>>>>>>            
38951>>>>>>>>>            Send NotifyPreApplySkin
38952>>>>>>>>>            // when skins are used we don't want to use built in Visual Styles
38952>>>>>>>>>            Send EnableVisualStyles of Desktop (sSkin="")
38953>>>>>>>>>            Get ComLoadSkin sSkin sIni to bOK
38954>>>>>>>>>            If (sSkin<>"" and not(bOk)) Begin
38956>>>>>>>>>                // if not ok, no skin was appied. Enable visual styles
38956>>>>>>>>>                Send EnableVisualStyles of Desktop True
38957>>>>>>>>>            End
38957>>>>>>>>>>
38957>>>>>>>>>            Send NotifyPostApplySkin
38958>>>>>>>>>        End
38958>>>>>>>>>>
38958>>>>>>>>>    End_Procedure
38959>>>>>>>>>    
38959>>>>>>>>>    
38959>>>>>>>>>End_Class
38960>>>>>>>Use cProgressBar.pkg
Including file: cProgressBar.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cProgressBar.pkg)
38960>>>>>>>>>Use Windows.pkg
38960>>>>>>>>>Use cWinControl.pkg
Including file: cWinControl.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cWinControl.pkg)
38960>>>>>>>>>>>Use Windows.pkg
38960>>>>>>>>>>>
38960>>>>>>>>>>>// Key State Masks for Mouse Messages
38960>>>>>>>>>>>
38960>>>>>>>>>>>Define MK_LBUTTON  for |CI$0001
38960>>>>>>>>>>>Define MK_RBUTTON  for |CI$0002
38960>>>>>>>>>>>Define MK_SHIFT    for |CI$0004
38960>>>>>>>>>>>Define MK_CONTROL  for |CI$0008
38960>>>>>>>>>>>Define MK_MBUTTON  for |CI$0010
38960>>>>>>>>>>>Define MK_XBUTTON1 for |CI$0020
38960>>>>>>>>>>>Define MK_XBUTTON2 for |CI$0040
38960>>>>>>>>>>>
38960>>>>>>>>>>>Enum_List // Mouse Key Flags
38960>>>>>>>>>>>    Define mkLeft    for MK_LBUTTON
38960>>>>>>>>>>>    Define mkMiddle  for MK_MBUTTON
38960>>>>>>>>>>>    Define mkRight   for MK_RBUTTON
38960>>>>>>>>>>>    Define mkX1      for MK_XBUTTON1
38960>>>>>>>>>>>    Define mkX2      for MK_XBUTTON2
38960>>>>>>>>>>>    Define mkShift   for MK_SHIFT
38960>>>>>>>>>>>    Define mkControl for MK_CONTROL
38960>>>>>>>>>>>End_Enum_List
38960>>>>>>>>>>>
38960>>>>>>>>>>>Enum_List // Mouse Buttons. Used in OnMouseXXX messages
38960>>>>>>>>>>>    Define mbLeft
38960>>>>>>>>>>>    Define mbMiddle
38960>>>>>>>>>>>    Define mbRight
38960>>>>>>>>>>>    Define mbX1
38960>>>>>>>>>>>    Define mbX2
38960>>>>>>>>>>>End_Enum_List
38960>>>>>>>>>>>
38960>>>>>>>>>>>Class cWinControl is a DfBaseControl
38961>>>>>>>>>>>    Procedure Construct_Object
38963>>>>>>>>>>>        Forward Send Construct_Object
38965>>>>>>>>>>>        Property Integer private_pbEnabled True
38966>>>>>>>>>>>        Property Integer private_pbVisible True
38967>>>>>>>>>>>    End_Procedure
38968>>>>>>>>>>>    
38968>>>>>>>>>>>    Procedure End_Construct_Object
38970>>>>>>>>>>>        Forward Send End_Construct_Object
38972>>>>>>>>>>>        
38972>>>>>>>>>>>        Set External_Message WM_LBUTTONDOWN   to msg_OnWmLButtonDown
38973>>>>>>>>>>>        Set External_Message WM_MBUTTONDOWN   to msg_OnWmMButtonDown
38974>>>>>>>>>>>        Set External_Message WM_RBUTTONDOWN   to msg_OnWmRButtonDown
38975>>>>>>>>>>>        Set External_Message WM_LBUTTONUP     to msg_OnWmLButtonUp
38976>>>>>>>>>>>        Set External_Message WM_MBUTTONUP     to msg_OnWmMButtonUp
38977>>>>>>>>>>>        Set External_Message WM_RBUTTONUP     to msg_OnWmRButtonUp
38978>>>>>>>>>>>        Set External_Message WM_LBUTTONDBLCLK to msg_OnWmLButtonDblClk
38979>>>>>>>>>>>        Set External_Message WM_MBUTTONDBLCLK to msg_OnWmMButtonDblClk
38980>>>>>>>>>>>        Set External_Message WM_RBUTTONDBLCLK to msg_OnWmRButtonDblClk
38981>>>>>>>>>>>        Set External_Message WM_MOUSEMOVE     to msg_OnWmMouseMove
38982>>>>>>>>>>>    End_Procedure
38983>>>>>>>>>>>    
38983>>>>>>>>>>>    Procedure Notify Longptr wParam Longptr lParam
38985>>>>>>>>>>>        //Intentionally cancelled
38985>>>>>>>>>>>    End_Procedure
38986>>>>>>>>>>>    
38986>>>>>>>>>>>    Procedure Command Longptr wParam Longptr lParam
38988>>>>>>>>>>>        //Intentionally cancelled
38988>>>>>>>>>>>    End_Procedure
38989>>>>>>>>>>>    
38989>>>>>>>>>>>    Procedure DoRecreateWindow
38991>>>>>>>>>>>        // Recreates the window
38991>>>>>>>>>>>        If (Window_Handle(Self)) Begin
38993>>>>>>>>>>>            // attempt to do this without disturbing the focus tree.
38993>>>>>>>>>>>            Send Page_delete // prior to 8.3 this was Send Page_Object 0
38994>>>>>>>>>>>            Send Page 1      //                       Send Page_Object 1
38995>>>>>>>>>>>        End
38995>>>>>>>>>>>>
38995>>>>>>>>>>>    End_Procedure
38996>>>>>>>>>>>    
38996>>>>>>>>>>>    Procedure DoUpdateWindow
38998>>>>>>>>>>>        // Forces windows to update the window by bypassing WM_PAINT
38998>>>>>>>>>>>        Handle hWnd
38998>>>>>>>>>>>        
38998>>>>>>>>>>>        Get Window_Handle to hWnd
38999>>>>>>>>>>>        If hWnd ;            Move (UpdateWindow(hWnd)) to hWnd
39002>>>>>>>>>>>    End_Procedure
39003>>>>>>>>>>>    
39003>>>>>>>>>>>    Procedure Page Integer iState
39005>>>>>>>>>>>        Set Window_Style to WS_DISABLED (private_pbEnabled(Self) =False)
39006>>>>>>>>>>>        Set Window_Style to WS_VISIBLE (private_pbVisible(Self))
39007>>>>>>>>>>>        Forward Send Page iState
39009>>>>>>>>>>>    End_Procedure
39010>>>>>>>>>>>    
39010>>>>>>>>>>>    Procedure OnWmLButtonUp Integer wParam Integer lParam
39012>>>>>>>>>>>        Integer x y eButton
39012>>>>>>>>>>>        
39012>>>>>>>>>>>        Move (Hi(lParam))  to y
39013>>>>>>>>>>>        Move (Low(lParam)) to x
39014>>>>>>>>>>>        
39014>>>>>>>>>>>        Send OnMouseUp mbLeft x y wParam
39015>>>>>>>>>>>    End_Procedure
39016>>>>>>>>>>>    
39016>>>>>>>>>>>    Procedure OnWmMButtonUp Integer wParam Integer lParam
39018>>>>>>>>>>>        Integer x y eButton
39018>>>>>>>>>>>        
39018>>>>>>>>>>>        Move (Hi(lParam))  to y
39019>>>>>>>>>>>        Move (Low(lParam)) to x
39020>>>>>>>>>>>        
39020>>>>>>>>>>>        Send OnMouseUp mbMiddle x y wParam
39021>>>>>>>>>>>    End_Procedure
39022>>>>>>>>>>>    
39022>>>>>>>>>>>    Procedure OnWmRButtonUp Integer wParam Integer lParam
39024>>>>>>>>>>>        Integer x y eButton
39024>>>>>>>>>>>        
39024>>>>>>>>>>>        Move (Hi(lParam))  to y
39025>>>>>>>>>>>        Move (Low(lParam)) to x
39026>>>>>>>>>>>        
39026>>>>>>>>>>>        Send OnMouseUp mbRight x y wParam
39027>>>>>>>>>>>    End_Procedure
39028>>>>>>>>>>>    
39028>>>>>>>>>>>    Procedure OnWmLButtonDown Integer wParam Integer lParam
39030>>>>>>>>>>>        Integer x y eButton fKeys
39030>>>>>>>>>>>        
39030>>>>>>>>>>>        Move (Hi(lParam))  to y
39031>>>>>>>>>>>        Move (Low(lParam)) to x
39032>>>>>>>>>>>        
39032>>>>>>>>>>>        Send OnMouseDown mbLeft x y wParam
39033>>>>>>>>>>>    End_Procedure
39034>>>>>>>>>>>    Procedure OnWmMButtonDown Integer wParam Integer lParam
39036>>>>>>>>>>>        Integer x y eButton
39036>>>>>>>>>>>        
39036>>>>>>>>>>>        Move (Hi(lParam))  to y
39037>>>>>>>>>>>        Move (Low(lParam)) to x
39038>>>>>>>>>>>        
39038>>>>>>>>>>>        Send OnMouseDown mbMiddle x y wParam
39039>>>>>>>>>>>    End_Procedure
39040>>>>>>>>>>>    Procedure OnWmRButtonDown Integer wParam Integer lParam
39042>>>>>>>>>>>        Integer x y eButton
39042>>>>>>>>>>>        
39042>>>>>>>>>>>        Move (Hi(lParam))  to y
39043>>>>>>>>>>>        Move (Low(lParam)) to x
39044>>>>>>>>>>>        
39044>>>>>>>>>>>        Send OnMouseDown mbRight x y wParam
39045>>>>>>>>>>>    End_Procedure
39046>>>>>>>>>>>    
39046>>>>>>>>>>>    Procedure OnWmLButtonDblClk Integer wParam Integer lParam
39048>>>>>>>>>>>        Integer x y eButton
39048>>>>>>>>>>>        
39048>>>>>>>>>>>        Move (Hi(lParam))  to y
39049>>>>>>>>>>>        Move (Low(lParam)) to x
39050>>>>>>>>>>>        
39050>>>>>>>>>>>        Send OnMouseDoubleClick mbLeft x y wParam
39051>>>>>>>>>>>    End_Procedure
39052>>>>>>>>>>>    Procedure OnWmMButtonDblClk Integer wParam Integer lParam
39054>>>>>>>>>>>        Integer x y eButton
39054>>>>>>>>>>>        
39054>>>>>>>>>>>        Move (Hi(lParam))  to y
39055>>>>>>>>>>>        Move (Low(lParam)) to x
39056>>>>>>>>>>>        
39056>>>>>>>>>>>        Send OnMouseDoubleClick mbMiddle x y wParam
39057>>>>>>>>>>>    End_Procedure
39058>>>>>>>>>>>    Procedure OnWmRButtonDblClk Integer wParam Integer lParam
39060>>>>>>>>>>>        Integer x y eButton
39060>>>>>>>>>>>        
39060>>>>>>>>>>>        Move (Hi(lParam))  to y
39061>>>>>>>>>>>        Move (Low(lParam)) to x
39062>>>>>>>>>>>        
39062>>>>>>>>>>>        Send OnMouseDoubleClick mbRight x y wParam
39063>>>>>>>>>>>    End_Procedure
39064>>>>>>>>>>>    
39064>>>>>>>>>>>    Procedure OnWmMouseMove Integer wParam Integer lParam
39066>>>>>>>>>>>        Integer x y eButton
39066>>>>>>>>>>>        
39066>>>>>>>>>>>        Move (Hi(lParam))  to y
39067>>>>>>>>>>>        Move (Low(lParam)) to x
39068>>>>>>>>>>>        
39068>>>>>>>>>>>        Send OnMouseMove x y wParam
39069>>>>>>>>>>>    End_Procedure
39070>>>>>>>>>>>    
39070>>>>>>>>>>>    Procedure OnMouseDown Integer eButton Integer x Integer y Integer fKeys
39072>>>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
39072>>>>>>>>>>>        //String sButton
39072>>>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
39072>>>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
39072>>>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
39072>>>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
39072>>>>>>>>>>>        
39072>>>>>>>>>>>        //If (eButton = mbLeft) Move 'Left Button' To sButton
39072>>>>>>>>>>>        //If (eButton = mbRight) Move 'Right Button' To sButton
39072>>>>>>>>>>>        //Showln 'OnMouseDown ' sButton ' ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
39072>>>>>>>>>>>    End_Procedure
39073>>>>>>>>>>>    
39073>>>>>>>>>>>    Procedure OnMouseUp Integer eButton Integer x Integer y Integer fKeys
39075>>>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
39075>>>>>>>>>>>        //String sButton
39075>>>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
39075>>>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
39075>>>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
39075>>>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
39075>>>>>>>>>>>        
39075>>>>>>>>>>>        //If (eButton = mbLeft) Move 'Left Button' To sButton
39075>>>>>>>>>>>        //If (eButton = mbRight) Move 'Right Button' To sButton
39075>>>>>>>>>>>        //Showln 'OnMouseUp ' sButton ' ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
39075>>>>>>>>>>>    End_Procedure
39076>>>>>>>>>>>    
39076>>>>>>>>>>>    Procedure OnMouseDoubleClick Integer eButton Integer x Integer y Integer fKeys
39078>>>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
39078>>>>>>>>>>>        //String sButton
39078>>>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
39078>>>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
39078>>>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
39078>>>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
39078>>>>>>>>>>>        
39078>>>>>>>>>>>        //If (eButton = mbLeft) Move 'Left Button' To sButton
39078>>>>>>>>>>>        //If (eButton = mbRight) Move 'Right Button' To sButton
39078>>>>>>>>>>>        //Showln 'OnMouseDblClk ' sButton ' ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
39078>>>>>>>>>>>    End_Procedure
39079>>>>>>>>>>>    
39079>>>>>>>>>>>    Procedure OnMouseMove Integer x Integer y Integer fKeys
39081>>>>>>>>>>>        //Boolean bShiftKey bControlKey bLeftButton bRightButton
39081>>>>>>>>>>>        //Move (IsFlagIn(mkShift, fKeys))   To bShiftKey
39081>>>>>>>>>>>        //Move (IsFlagIn(mkControl, fKeys)) To bControlKey
39081>>>>>>>>>>>        //Move (IsFlagIn(mkLeft, fKeys))    To bLeftButton
39081>>>>>>>>>>>        //Move (IsFlagIn(mkRight, fKeys))   To bRightButton
39081>>>>>>>>>>>        
39081>>>>>>>>>>>        //Showln 'OnMouseMove ' x ' ' y ' shift=' bShiftKey ' ctrl=' bControlKey  ' left=' bLeftButton ' right=' bRightButton
39081>>>>>>>>>>>    End_Procedure
39082>>>>>>>>>>>    
39082>>>>>>>>>>>    Procedure Set pbEnabled Boolean bEnabled
39084>>>>>>>>>>>        Handle hWnd
39084>>>>>>>>>>>        
39084>>>>>>>>>>>        If (bEnabled <> private_pbEnabled(Self)) Begin
39086>>>>>>>>>>>            Set private_pbEnabled to bEnabled
39087>>>>>>>>>>>            Get Window_Handle to hWnd
39088>>>>>>>>>>>            If hWnd ;                Move (EnableWindow(hWnd, bEnabled)) to hWnd
39091>>>>>>>>>>>        End
39091>>>>>>>>>>>>
39091>>>>>>>>>>>    End_Procedure
39092>>>>>>>>>>>    Function pbEnabled Returns Boolean
39094>>>>>>>>>>>        Function_Return (private_pbEnabled(Self))
39095>>>>>>>>>>>    End_Function
39096>>>>>>>>>>>    
39096>>>>>>>>>>>    Procedure Set pbVisible Boolean bVisible
39098>>>>>>>>>>>        Handle  hWnd
39098>>>>>>>>>>>        Integer iVoid
39098>>>>>>>>>>>        
39098>>>>>>>>>>>        If (bVisible <> private_pbVisible(Self)) Begin
39100>>>>>>>>>>>            Set private_pbVisible to bVisible
39101>>>>>>>>>>>            Get Window_Handle to hWnd
39102>>>>>>>>>>>            If hWnd ;                Move (ShowWindow(hWnd, If (bVisible, SW_SHOWNA, SW_HIDE))) to iVoid
39105>>>>>>>>>>>        End
39105>>>>>>>>>>>>
39105>>>>>>>>>>>    End_Procedure
39106>>>>>>>>>>>    Function pbVisible Returns Boolean
39108>>>>>>>>>>>        Function_Return (private_pbVisible(Self))
39109>>>>>>>>>>>    End_Function
39110>>>>>>>>>>>    
39110>>>>>>>>>>>End_Class
39111>>>>>>>>>Use CommCtrl.pkg
39111>>>>>>>>>
39111>>>>>>>>>//{ OverrideProperty=pbEnabled DesignTime=False }
39111>>>>>>>>>Class cProgressBar is a cWinControl
39112>>>>>>>>>    
39112>>>>>>>>>    Procedure Construct_Object
39114>>>>>>>>>        Forward Send Construct_Object
39116>>>>>>>>>        Property Integer private_piMinimum
39117>>>>>>>>>        Property Integer private_piMaximum   100
39118>>>>>>>>>        Property Integer private_piAdvanceBy 10
39119>>>>>>>>>        Property Integer private_piPosition
39120>>>>>>>>>        Property Integer private_pbVertical  False
39121>>>>>>>>>        Property Integer private_pbSmooth    False
39122>>>>>>>>>        Property Integer private_piBackColor clDefault
39123>>>>>>>>>        Property Integer private_piBarColor  clDefault
39124>>>>>>>>>        
39124>>>>>>>>>        Send Define_ToolTip_Support_Mixin
39125>>>>>>>>>        
39125>>>>>>>>>        Set External_Class_Name 'cVdfProgressBar' to 'msctls_progress32'
39126>>>>>>>>>        Set Focus_Mode to NonFocusable
39127>>>>>>>>>        Set Skip_State to True
39128>>>>>>>>>        Set pbUseFormWindowHandle to False     // Must come after Define_ToolTip_Support_Mixin
39129>>>>>>>>>    End_Procedure
39130>>>>>>>>>    
39130>>>>>>>>>    Import_Class_Protocol ToolTip_Support_Mixin
39131>>>>>>>>>    
39131>>>>>>>>>    Procedure Set piMinimum Integer iMin
39133>>>>>>>>>        Integer iMax
39133>>>>>>>>>        
39133>>>>>>>>>        Set private_piMinimum to iMin
39134>>>>>>>>>        Get private_piMaximum to iMax
39135>>>>>>>>>        Send Windows_Message PBM_SETRANGE32 iMin iMax
39136>>>>>>>>>    End_Procedure
39137>>>>>>>>>    Function piMinimum Returns Integer
39139>>>>>>>>>        If (Window_Handle(Self));            Function_Return (WindowsMessage(PBM_GETRANGE, 1, 0))
39142>>>>>>>>>        Else;            Function_Return (private_piMinimum(Self))
39144>>>>>>>>>    End_Function
39145>>>>>>>>>    
39145>>>>>>>>>    Procedure Set piMaximum Integer iMax
39147>>>>>>>>>        Integer iMin
39147>>>>>>>>>        
39147>>>>>>>>>        Set private_piMaximum to iMax
39148>>>>>>>>>        Get private_piMinimum to iMin
39149>>>>>>>>>        Send Windows_Message PBM_SETRANGE32 iMin iMax
39150>>>>>>>>>    End_Procedure
39151>>>>>>>>>    Function piMaximum Returns Integer
39153>>>>>>>>>        If (Window_Handle(Self));            Function_Return (WindowsMessage(PBM_GETRANGE, 0, 0))
39156>>>>>>>>>        Else;            Function_Return (private_piMaximum(Self))
39158>>>>>>>>>    End_Function
39159>>>>>>>>>    
39159>>>>>>>>>    Procedure Set piAdvanceBy Integer iAdvanceBy
39161>>>>>>>>>        Set private_piAdvanceBy to iAdvanceBy
39162>>>>>>>>>        Send Windows_Message PBM_SETSTEP iAdvanceBy 0
39163>>>>>>>>>    End_Procedure
39164>>>>>>>>>    Function piAdvanceBy Returns Integer
39166>>>>>>>>>        Function_Return (private_piAdvanceBy(Self))
39167>>>>>>>>>    End_Function
39168>>>>>>>>>    
39168>>>>>>>>>    Procedure Set piPosition Integer iPos
39170>>>>>>>>>        Set private_piPosition to iPos
39171>>>>>>>>>        Send Windows_Message PBM_SETPOS iPos 0
39172>>>>>>>>>    End_Procedure
39173>>>>>>>>>    
39173>>>>>>>>>    Function piPosition Returns Integer
39175>>>>>>>>>        If (Window_Handle(Self));            Function_Return (WindowsMessage(PBM_GETPOS, 0, 0))
39178>>>>>>>>>        Else;            Function_Return (private_piPosition(Self))
39180>>>>>>>>>    End_Function
39181>>>>>>>>>    
39181>>>>>>>>>    Procedure Set pbVertical Boolean bVertical
39183>>>>>>>>>        If (private_pbVertical(Self) <> bVertical) Begin
39185>>>>>>>>>            Set private_pbVertical to bVertical
39186>>>>>>>>>            Send DoRecreateWindow
39187>>>>>>>>>        End
39187>>>>>>>>>>
39187>>>>>>>>>    End_Procedure
39188>>>>>>>>>    
39188>>>>>>>>>    Function pbVertical Returns Boolean
39190>>>>>>>>>        Function_Return (private_pbVertical(Self))
39191>>>>>>>>>    End_Function
39192>>>>>>>>>    
39192>>>>>>>>>    Procedure Set pbSmooth Boolean bSmooth
39194>>>>>>>>>        If (private_pbSmooth(Self) <> bSmooth) Begin
39196>>>>>>>>>            Set private_pbSmooth to bSmooth
39197>>>>>>>>>            Send DoRecreateWindow
39198>>>>>>>>>        End
39198>>>>>>>>>>
39198>>>>>>>>>    End_Procedure
39199>>>>>>>>>    Function pbSmooth Returns Boolean
39201>>>>>>>>>        Function_Return (private_pbSmooth(Self))
39202>>>>>>>>>    End_Function
39203>>>>>>>>>    
39203>>>>>>>>>    Procedure Set piBackColor Integer rgbColor
39205>>>>>>>>>        Set private_piBackColor to rgbColor
39206>>>>>>>>>        Send Windows_Message PBM_SETBKCOLOR 0 rgbColor
39207>>>>>>>>>    End_Procedure
39208>>>>>>>>>    Function piBackColor Returns Integer
39210>>>>>>>>>        Function_Return (private_piBackColor(Self))
39211>>>>>>>>>    End_Function
39212>>>>>>>>>    
39212>>>>>>>>>    Procedure Set piBarColor Integer rgbColor
39214>>>>>>>>>        Set private_piBarColor to rgbColor
39215>>>>>>>>>        Send Windows_Message PBM_SETBARCOLOR 0 rgbColor
39216>>>>>>>>>    End_Procedure
39217>>>>>>>>>    Function piBarColor Returns Integer
39219>>>>>>>>>        Function_Return (private_piBarColor(Self))
39220>>>>>>>>>    End_Function
39221>>>>>>>>>    
39221>>>>>>>>>    Procedure DoAdvance
39223>>>>>>>>>        Send Windows_Message PBM_STEPIT 0 0
39224>>>>>>>>>    End_Procedure
39225>>>>>>>>>    
39225>>>>>>>>>    Procedure DoAdvanceBy  Integer iAdvanceBy
39227>>>>>>>>>        Send Windows_Message PBM_DELTAPOS iAdvanceBy 0
39228>>>>>>>>>    End_Procedure
39229>>>>>>>>>    
39229>>>>>>>>>    Procedure private_DoInitWindow
39231>>>>>>>>>        Set piBarColor  to (private_piBarColor(Self))
39232>>>>>>>>>        Set piBackColor to (private_piBackColor(Self))
39233>>>>>>>>>        Set piAdvanceBy to (private_piAdvanceBy(Self))
39234>>>>>>>>>        Set piMinimum   to (private_piMinimum(Self))
39235>>>>>>>>>        Set piMaximum   to (private_piMaximum(Self))
39236>>>>>>>>>        Set piPosition  to (private_piPosition(Self))
39237>>>>>>>>>    End_Procedure
39238>>>>>>>>>    
39238>>>>>>>>>    Procedure Page_Object Integer iState
39240>>>>>>>>>        Handle hWnd
39240>>>>>>>>>        
39240>>>>>>>>>        Get Window_Handle to hWnd
39241>>>>>>>>>        If (hWnd=0 and iState) Begin
39243>>>>>>>>>            Set Window_Style to PBS_VERTICAL (private_pbVertical(Self))
39244>>>>>>>>>            Set Window_Style to PBS_SMOOTH   (private_pbSmooth(Self))
39245>>>>>>>>>            Forward Send Page_Object True
39247>>>>>>>>>        End
39247>>>>>>>>>>
39247>>>>>>>>>        Else ;            Forward Send Page_Object iState
39250>>>>>>>>>        
39250>>>>>>>>>        // Handle tooltip support....
39250>>>>>>>>>        If (iState = 0) Begin
39252>>>>>>>>>            Send RequestDeleteToolTip
39253>>>>>>>>>        End
39253>>>>>>>>>>
39253>>>>>>>>>        Else Begin
39254>>>>>>>>>            Send RequestAddToolTip
39255>>>>>>>>>        End
39255>>>>>>>>>>
39255>>>>>>>>>    End_Procedure
39256>>>>>>>>>    
39256>>>>>>>>>    Procedure Page Integer iState
39258>>>>>>>>>        Forward Send Page iState
39260>>>>>>>>>        If (iState =1);            Send private_DoInitWindow
39263>>>>>>>>>    End_Procedure
39264>>>>>>>>>    
39264>>>>>>>>>    // Called by Page_Object. Handles tooltip creation. We use a dedicated
39264>>>>>>>>>    // method to perform AddToolTip because it is often the case that Page_Object
39264>>>>>>>>>    // is implemented in a mixin class.
39264>>>>>>>>>    Procedure RequestAddToolTip
39266>>>>>>>>>        Send AddToolTip
39267>>>>>>>>>    End_Procedure
39268>>>>>>>>>    
39268>>>>>>>>>    
39268>>>>>>>>>    // Called by Page_Object. Handles tooltip removal.
39268>>>>>>>>>    Procedure RequestDeleteToolTip
39270>>>>>>>>>        Send DeleteToolTip
39271>>>>>>>>>    End_Procedure
39272>>>>>>>>>End_Class
39273>>>>>>>Use Windows.pkg
39273>>>>>>>Use DUFLanguageConstants.inc
Including file: DUFLanguageConstants.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\DUFLanguageConstants.inc)
39273>>>>>>>>>// *** The Database Update Framework Include file for Languages ***
39273>>>>>>>>>// Language constant declarations for all classes included in "DUF - The Database Update Framework"
39273>>>>>>>>>// They have all been placed in this central spot to make translations to various languages more convenient.
39273>>>>>>>>>//
39273>>>>>>>>>Use LanguageText.Pkg
39273>>>>>>>>>
39273>>>>>>>>>    // *** cSQLConnectionsIniFile.pkg Class Language Constants ***
39273>>>>>>>>>    Define CS_DUF_DuplicateConnectionIDPre  for "Cannot register connection ID"
39273>>>>>>>>>    Define CS_DUF_DuplicateConnectionIDPost for "This ID already exists."
39273>>>>>>>>>    // *** cSQLConnectionsHandler.pkg Class Language Constants ***
39273>>>>>>>>>    Define CS_DUF_SetupErrorcConnection     for "Cannot login to the database server as the cConnection hasn't been setup properly. Can't continue. Program will now exit."
39273>>>>>>>>>    Define CS_DUF_CannotLoginToServer       for "Could not login to the database server. Can't continue. Program will now exit."
39273>>>>>>>>>    Define CS_DUF_ErrorText                 for "\n\nError Text:"
39273>>>>>>>>>    // *** cDbUpdateFunctionLibrary.pkg Class Language Constants ***
39273>>>>>>>>>    Define CS_DUF_ConnectError              for "SQL error. Could not connect to the SQL database manager"
39273>>>>>>>>>    Define CS_DUF_AttachError               for "Could not attach to the database:"
39273>>>>>>>>>    Define CS_DUF_DeletingIndex             for "Deleting index"
39273>>>>>>>>>    Define CS_DUF_CopyingData               for "Copying data"
39273>>>>>>>>>    Define CS_DUF_CreatingIndex             for "Creating index"
39273>>>>>>>>>    Define CS_DUF_LoginToDbServerFailed     for  "Login failed to the database server. The following connect string was used:\n"
39273>>>>>>>>>    Define CS_DUF_DoYouWantToExit           for "Do you want to stop the database update and exit?"  
39273>>>>>>>>>    Define CS_DUF_NoIntFilesFound           for "No .int files found! Nothing was changed."
39273>>>>>>>>>    // *** cDbUpdateVersion.pkg Class Language Constants ***
39273>>>>>>>>>    Define CS_DUF_UpdateVersion             for "Updating database"
39273>>>>>>>>>    Define CS_DUF_UpdateFromVersion         for "from version"
39273>>>>>>>>>    Define CS_DUF_UpdateToVersion           for "to version:"
39273>>>>>>>>>    Define CS_DUF_DbUpdateTableMissing      for "Cannot open the 'DbVersion' table that is used when updating the database! Cannot continue!"
39273>>>>>>>>>    // *** cDbUpdateHandler.inc Language Constants ***
39273>>>>>>>>>    Define CS_DUF_DatabaseInUseShort        for "There are others using the application/database. Are you sure you still want to update the database?"
39273>>>>>>>>>    Define CS_DUF_DatabaseNeedsUpdate       for ("The database needs to be updated." + "\n\nATTENTION! The database may not be in use while this work is performed. Make sure that nobody else is using the application before clicking 'Yes' below.\n\n" + "Start update now?")
39273>>>>>>>>>    Define CS_DUF_HeaderUpdateText          for "Important!"
39273>>>>>>>>>    Define CS_DUF_DatabaseInUseText         for "There are others using the application/database or at least one table could NOT be opened exclusively. Please close all other applications using the database and try again. The Application will now close."
39273>>>>>>>>>    Define CS_DUF_WorkingHeaderText         for "Working!"
39273>>>>>>>>>    Define CS_DUF_WorkingUpdateText         for "The database is being updated. Please wait..."
39273>>>>>>>>>    Define CS_DUF_DatabaseUpdatedText       for "Ready! The database was updated."
39273>>>>>>>>>    Define CS_DUF_DatabaseCheckedText       for "Ready! The database was checked but no updates was needed."
39273>>>>>>>>>    Define CS_DUF_DbUpdatedErrorText        for "One or more errors occured while the database was updated. Please check the logfile in the data-folder.\n\nThe program will now close."
39273>>>>>>>>>    Define CS_DUF_UpdateInProgressTxt       for ("System locked!\n\nThe database is being updated. Please try again later...\n\n" * "The program will now close.")
39273>>>>>>>>>    // *** cDbUpdateHandler.pkg Class Language Constants ***
39273>>>>>>>>>    Define CS_DUF_DatabaseConnStringSpec    for "The database specified in the connection string: '"
39273>>>>>>>>>    Define CS_DUF_DatabaseDoesntExist       for "' doesn't exist!\n\nYou need to create it with a database management software or by using the 'SqlDatabaseCreate' function, which can be used in the 'OnPreUpdate' event of the cDbUpdateHandler object.\n\nThe program will now exit."
39273>>>>>>>>>    // *** cDbUpdateLogFile.pkg Class Language Constants ***   
39273>>>>>>>>>    Define CS_DUF_LogFileNotFound           for "Could not locate the log file:\n\n"
39273>>>>>>>>>
39273>>>>>>>>>
39273>>>>>>>>>
39273>>>>>>>>>
39273>>>>>>>>>
39273>>>>>>>>>
39273>>>>>>>>>
39273>>>>>>>>>
39273>>>>>>>>>
39273>>>>>>>>>
39273>>>>>>>>>
39273>>>>>>>>>
39273>>>>>>>Use Statpnl.pkg
39273>>>>>>>
39273>>>>>>>
39273>>>>>>>    Global_Variable Handle ghoProgressBar // will contain the ID of the embedded progress bar.
39273>>>>>>>
39273>>>>>>>    Global_Variable Handle ghoProgressBarOverall // will contain the ID of the embedded progress bar with overall results
39273>>>>>>>
39273>>>>>>>Object Status_Panel is a cProcessStatusPanel
39275>>>>>>>    Set Size to 152 222
39276>>>>>>>    Set Border_Style to Border_Dialog
39277>>>>>>>    Set Icon to "Default.ico"
39278>>>>>>>    Move Self to ghoStatusPanel // this can be used throughout the applicaton to access this object
39279>>>>>>>
39279>>>>>>>    Property Boolean Cancel_Button_Visible_State True
39281>>>>>>>
39281>>>>>>>    Procedure Activate
39284>>>>>>>        Integer iSizeBefore
39284>>>>>>>        Get GuiSize to iSizeBefore
39285>>>>>>>        Forward Send Activate
39287>>>>>>>        Set GuiSize to (Hi(iSizeBefore)) (Low(iSizeBefore))
39288>>>>>>>    End_Procedure
39289>>>>>>>
39289>>>>>>>    Procedure End_Construct_Object
39292>>>>>>>        Forward Send End_Construct_Object
39294>>>>>>>        Set Label of oTitleTxt      to ""
39295>>>>>>>        Set Label of oTableNameTxt  to ""
39296>>>>>>>        Set Label of oMessageTxt    to ""
39297>>>>>>>        Set Label of oActionTxt     to ""
39298>>>>>>>    End_Procedure
39299>>>>>>>
39299>>>>>>>    Object oTitleTxt is a TextBox
39301>>>>>>>        Set Location to 5 21
39302>>>>>>>        Set Size to 8 179
39303>>>>>>>        Set Auto_Size_State to False
39304>>>>>>>        Set Justification_Mode  to jMode_Center
39305>>>>>>>        Set Label to "This is the Title Text"
39306>>>>>>>    End_Object
39307>>>>>>>
39307>>>>>>>    Object oTableNameTxt is a TextBox
39309>>>>>>>        Set Size to 19 204
39310>>>>>>>        Set Location to 18 9
39311>>>>>>>        Set Auto_Size_State to False
39312>>>>>>>        Set Justification_Mode to JMode_Left
39313>>>>>>>        Set Label to "This is the TableName Text"
39314>>>>>>>    End_Object
39315>>>>>>>
39315>>>>>>>    Object oMessageTxt is a TextBox
39317>>>>>>>        Set Location to 39 9
39318>>>>>>>        Set Size to 19 204
39319>>>>>>>        Set Auto_Size_State to False
39320>>>>>>>        Set Justification_Mode to JMode_Left
39321>>>>>>>        Set Label to "This is the Message text"
39322>>>>>>>    End_Object
39323>>>>>>>
39323>>>>>>>    Object oActionTxt is a TextBox
39325>>>>>>>        Set Size to 16 204
39326>>>>>>>        Set Location to 60 9
39327>>>>>>>        Set Auto_Size_State to False
39328>>>>>>>        Set Justification_Mode to JMode_Left
39329>>>>>>>        Set Label to "This is the Action Text"
39330>>>>>>>    End_Object
39331>>>>>>>
39331>>>>>>>    Object oStopButton is a Button
39333>>>>>>>        Set Location to 123 82
39334>>>>>>>        Set Label to C_$Cancel
39335>>>>>>>
39335>>>>>>>        Procedure OnClick 
39338>>>>>>>            Integer iRetval
39338>>>>>>>            Get YesNo_Box CS_DUF_DoYouWantToExit to iRetval
39339>>>>>>>            If (iRetval = MBR_Yes) Begin
39341>>>>>>>                Send Exit_Application
39342>>>>>>>            End
39342>>>>>>>>
39342>>>>>>>        End_Procedure
39343>>>>>>>
39343>>>>>>>    End_Object
39344>>>>>>>
39344>>>>>>>    Object oPercentage_tb is a TextBox
39346>>>>>>>        Set Location to 74 196
39347>>>>>>>        Set Size to 10 25
39348>>>>>>>//        Set Label to "% Done"
39348>>>>>>>    End_Object
39349>>>>>>>
39349>>>>>>>    Object oCopyRight is a TextBox
39351>>>>>>>        Set Location to 140 21
39352>>>>>>>        Set Size to 9 197
39353>>>>>>>        Set FontPointHeight to 8
39354>>>>>>>        Set Auto_Size_State to False
39355>>>>>>>        Set Justification_Mode  to jMode_Center
39356>>>>>>>        Set Label to "Copyright 2001-2020 RDC Tools International"
39357>>>>>>>    End_Object
39358>>>>>>>
39358>>>>>>>    Object oProgressBar is a cProgressBar
39360>>>>>>>        Set Size to 10 179
39361>>>>>>>        Set Location to 83 22
39362>>>>>>>        Set pbVisible to True // default
39363>>>>>>>        Move Self to ghoProgressBar // this can be used throughout your application to access the progress bar
39364>>>>>>>    End_Object
39365>>>>>>>
39365>>>>>>>    Procedure Set Progress_Bar_Visible_State Boolean bVisible
39368>>>>>>>        Set pbVisible of ghoProgressBar to bVisible
39369>>>>>>>    End_Procedure
39370>>>>>>>
39370>>>>>>>    Function Progress_Bar_Visible_State Returns Boolean
39373>>>>>>>        Boolean bVisible
39373>>>>>>>        Get pbVisible of ghoProgressBar to bVisible
39374>>>>>>>        Function_Return (bVisible)
39375>>>>>>>    End_Function
39376>>>>>>>
39376>>>>>>>    Object oProgressBarOverall is a cProgressBar
39378>>>>>>>        Set Size to 10 179
39379>>>>>>>        Set Location to 107 22
39380>>>>>>>        Set pbVisible to True // default
39381>>>>>>>        Move Self to ghoProgressBarOverall // this can be used throughout your application to access the progress bar
39382>>>>>>>    End_Object
39383>>>>>>>
39383>>>>>>>    Object oOverallProgress_tb is a TextBox
39385>>>>>>>        Set Size to 10 65
39386>>>>>>>        Set Location to 95 24
39387>>>>>>>        Set Label to "Overall Progress"
39388>>>>>>>    End_Object
39389>>>>>>>
39389>>>>>>>    Procedure Set Progress_Bar_Overall_Visible_State Boolean bVisible
39392>>>>>>>        Set pbVisible of ghoProgressBarOverall to bVisible
39393>>>>>>>    End_Procedure
39394>>>>>>>
39394>>>>>>>    Function Progress_Bar_Overall_Visible_State Returns Boolean
39397>>>>>>>        Boolean bVisible
39397>>>>>>>        Get pbVisible of ghoProgressBarOverall to bVisible
39398>>>>>>>        Function_Return (bVisible)
39399>>>>>>>    End_Function
39400>>>>>>>
39400>>>>>>>    // These messages bind the standard cProcessStatusPanel interface to the actual
39400>>>>>>>    // objects defined within this instance of the status panel.
39400>>>>>>>
39400>>>>>>>    // note: all of the messages that change text should be forwarded
39400>>>>>>>    // as the forwarded messages allows the panel to paint when in a tight loop
39400>>>>>>>
39400>>>>>>>    Procedure Set Message_Text String sText
39403>>>>>>>        Set Label of oMessageTxt to sText
39404>>>>>>>        Forward Set Message_Text to sText
39406>>>>>>>    End_Procedure
39407>>>>>>>
39407>>>>>>>    Function Message_Text Returns String
39410>>>>>>>        Function_Return (Label(oMessageTxt))
39411>>>>>>>    End_Function
39412>>>>>>>
39412>>>>>>>    Procedure Set Action_Text String sText
39415>>>>>>>        Set Label of oActionTxt to sText
39416>>>>>>>        Forward Set Action_Text to sText
39418>>>>>>>    End_Procedure
39419>>>>>>>
39419>>>>>>>    Function Action_Text Returns String
39422>>>>>>>        Function_Return (Label(oActionTxt))
39423>>>>>>>    End_Function
39424>>>>>>>
39424>>>>>>>    Procedure Set Button_Text String sText
39427>>>>>>>        Set Label of oStopButton to sText
39428>>>>>>>        Forward Set Button_Text to sText
39430>>>>>>>    End_Procedure
39431>>>>>>>
39431>>>>>>>    Function Button_Text Returns String
39434>>>>>>>        Function_Return (Label(oStopButton))
39435>>>>>>>    End_Function
39436>>>>>>>
39436>>>>>>>    Procedure Set Title_Text String sText
39439>>>>>>>        Set Label of oTitleTxt to sText
39440>>>>>>>        Forward Set Title_Text to sText
39442>>>>>>>    End_Procedure
39443>>>>>>>
39443>>>>>>>    Function Title_Text Returns String
39446>>>>>>>        Function_Return (Label(oTitleTxt))
39447>>>>>>>    End_Function
39448>>>>>>>
39448>>>>>>>    Procedure Set TableName_Text String sText
39451>>>>>>>        Set Label of oTableNameTxt to sText
39452>>>>>>>    End_Procedure
39453>>>>>>>
39453>>>>>>>    Function TableName_Text Returns String
39456>>>>>>>        Function_Return (Label(oTableNameTxt))
39457>>>>>>>    End_Function
39458>>>>>>>
39458>>>>>>>    Procedure Set License_Text String sText
39461>>>>>>>//        Set Label of oLicense_txt to sText
39461>>>>>>>    End_Procedure
39462>>>>>>>
39462>>>>>>>    // gets called when status panel is activated passing whether a button
39462>>>>>>>    // should appear
39462>>>>>>>    Procedure EnableCancelButton Boolean bEnable
39465>>>>>>>        Boolean bVisible
39465>>>>>>>        Get Cancel_Button_Visible_State to bVisible
39466>>>>>>>        If (bEnable = False) Begin
39468>>>>>>>            Set Visible_State of oStopButton to bVisible
39469>>>>>>>        End
39469>>>>>>>>
39469>>>>>>>        Set Enabled_State of oStopButton to bEnable
39470>>>>>>>    End_Procedure
39471>>>>>>>
39471>>>>>>>    Procedure Reset_StatusPanel
39474>>>>>>>        Set Allow_Cancel_State of ghoStatusPanel to True
39475>>>>>>>        Set Cancel_Button_Visible_State of ghoStatusPanel to True
39476>>>>>>>        Set Progress_Bar_Visible_State  of ghoStatusPanel to True
39477>>>>>>>        Set Progress_Bar_Overall_Visible_State of ghoProgressBarOverall to False
39478>>>>>>>    End_Procedure
39479>>>>>>>
39479>>>>>>>//    Object oProgressBar is a cProgressBar
39479>>>>>>>//        Move Self to ghoProgressBar
39479>>>>>>>//        Set Location to 1 25
39479>>>>>>>//        Set Size to 9 173
39479>>>>>>>//        Set piMinimum        to 0
39479>>>>>>>//        Set piMaximum        to 2000
39479>>>>>>>//        Set piAdvanceBy      to 100
39479>>>>>>>//        Set pbSmooth to True
39479>>>>>>>//
39479>>>>>>>//        // For some weird reason the application skin makes the coloring of the progressbar
39479>>>>>>>//        // to malfunction. By telling the CodeJock SkinFramework to skip this object, the
39479>>>>>>>//        // color will show correctly.
39479>>>>>>>//        Procedure Page Integer iPageObject
39479>>>>>>>//            Handle hWin
39479>>>>>>>//            Forward Send Page iPageObject
39479>>>>>>>//            If (ghoSkinFramework <> 0) Begin
39479>>>>>>>//                Get Window_Handle to hWin
39479>>>>>>>//                Send ComRemoveWindow of ghoSkinFramework hWin
39479>>>>>>>//            End
39479>>>>>>>//        End_Procedure
39479>>>>>>>//    End_Object
39479>>>>>>>
39479>>>>>>>End_Object
39480>>>>>>>
39480>>>>>Use cDbUpdateFunctionLibrary_Mixin.pkg  // Properties used by the cDbUpdateFunctionLibrary class.
Including file: cDbUpdateFunctionLibrary_Mixin.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cDbUpdateFunctionLibrary_Mixin.pkg)
39480>>>>>>>// *** Mixin Class For the cDbUpdateFunctionLibrary Class ***
39480>>>>>>>//
39480>>>>>>>// We need to create a mixin class for the library.
39480>>>>>>>// Why? Because we import the library to the cDbUpdateVersion class; that imports
39480>>>>>>>// all messages (functions & procedures) but all Properties are "lost", aka not imported by
39480>>>>>>>// the Import_Class_Protocol command. So we need a way to create our properties somewhere else...
39480>>>>>>>// Note: This class should _not_ have a construct_object defined.
39480>>>>>>>//
39480>>>>>>>Use VdfBase.pkg
39480>>>>>>>Use WinUuid.pkg
Including file: WinUuid.pkg    (C:\Program Files\DataFlex 23.0\Pkg\WinUuid.pkg)
39480>>>>>>>>>Use Unicode.Pkg
39480>>>>>>>>>
39480>>>>>>>>>External_Function WinAPI_UuidCreate "UuidCreate" Rpcrt4.dll ;    Pointer Uuid ;    Returns Integer
39481>>>>>>>>>
39481>>>>>>>>>External_Function WinAPI_UuidToString  "UuidToStringW" Rpcrt4.dll ;    Pointer pUuid ;    Pointer lpUUIDString ;    Returns Integer
39482>>>>>>>>>
39482>>>>>>>>>External_Function WinAPI_UuidCreateSequential "UuidCreateSequential" Rpcrt4.dll ;    Pointer pUuid ;    Returns Integer
39483>>>>>>>>>
39483>>>>>>>>>External_Function WinAPI_RpcStringFree "RpcStringFreeW" Rpcrt4.dll ;    Pointer pStr ;    Returns Integer
39484>>>>>>>>>
39484>>>>>>>>>
39484>>>>>>>>>// Returns a 'random' Universally Unique Identifier string as a 32 digit hex number.
39484>>>>>>>>>Function RandomHexUUID Global Returns String
39486>>>>>>>>>    Pointer pUUID pUUIDStr
39486>>>>>>>>>    Integer iRetval iOffset iChar
39486>>>>>>>>>    String sUUID
39486>>>>>>>>>    
39486>>>>>>>>>    Move (Alloc(16)) to pUUID
39487>>>>>>>>>    
39487>>>>>>>>>    Move (WinAPI_UuidCreate (pUUID)) to iRetval
39488>>>>>>>>>    
39488>>>>>>>>>    If (iRetval = 0) Begin
39490>>>>>>>>>        Move 0 to pUUIDStr
39491>>>>>>>>>        
39491>>>>>>>>>        Move (WinAPI_UuidToString (pUUID, AddressOf(pUUIDStr))) to iRetval
39492>>>>>>>>>        If (iRetval = 0) Begin
39494>>>>>>>>>            Move (PointerToWString(pUUIDStr)) to sUUID
39495>>>>>>>>>            Move (WinAPI_RpcStringFree (AddressOf (pUUIDStr))) to iRetval
39496>>>>>>>>>            
39496>>>>>>>>>            Move (Uppercase (sUUID)) to sUUID
39497>>>>>>>>>        End
39497>>>>>>>>>>
39497>>>>>>>>>    End
39497>>>>>>>>>>
39497>>>>>>>>>    
39497>>>>>>>>>    Move (Free(pUUID)) to iRetval
39498>>>>>>>>>    
39498>>>>>>>>>    Function_Return sUUID
39499>>>>>>>>>End_Function
39500>>>>>>>>>
39500>>>>>>>>>
39500>>>>>>>>>// Returns a sequential Universally Unique Identifier string as a 32 digit hex number.
39500>>>>>>>>>Function SeqHexUUID Global Returns String
39502>>>>>>>>>    Pointer pUUID pUUIDStr
39502>>>>>>>>>    Integer iRetval iOffset iChar
39502>>>>>>>>>    String sUUID
39502>>>>>>>>>    
39502>>>>>>>>>    Move (Alloc(16)) to pUUID
39503>>>>>>>>>    
39503>>>>>>>>>    Move (WinAPI_UuidCreateSequential (pUUID)) to iRetval
39504>>>>>>>>>    
39504>>>>>>>>>    If (iRetval = 0) Begin
39506>>>>>>>>>        Move 0 to pUUIDStr
39507>>>>>>>>>        
39507>>>>>>>>>        Move (WinAPI_UuidToString (pUUID, AddressOf(pUUIDStr))) to iRetval
39508>>>>>>>>>        If (iRetval = 0) Begin
39510>>>>>>>>>            Move (PointerToWString(pUUIDStr)) to sUUID
39511>>>>>>>>>            Move (WinAPI_RpcStringFree (AddressOf (pUUIDStr))) to iRetval
39512>>>>>>>>>            
39512>>>>>>>>>            Move (Uppercase (sUUID)) to sUUID
39513>>>>>>>>>        End
39513>>>>>>>>>>
39513>>>>>>>>>    End
39513>>>>>>>>>>
39513>>>>>>>>>    
39513>>>>>>>>>    Move (Free(pUUID)) to iRetval
39514>>>>>>>>>    
39514>>>>>>>>>    Function_Return sUUID
39515>>>>>>>>>End_Function
39516>>>>>>>Use cli.pkg
39516>>>>>>>Use sql.pkg
Including file: sql.pkg    (C:\Program Files\DataFlex 23.0\Pkg\sql.pkg)
39516>>>>>>>>>// Embedded SQL classes for use with Data Access Worldwide CLI    
39516>>>>>>>>>// Connectivty Kits.                                              
39516>>>>>>>>>Use CLI.pkg
39516>>>>>>>>>
39516>>>>>>>>>// Global storage for results
39516>>>>>>>>>Integer SQLResult
39516>>>>>>>>>
39516>>>>>>>>>// Embedded SQL function constants
39516>>>>>>>>>Define FUNC_SQLCONNECT             for 1000000
39516>>>>>>>>>Define FUNC_SQLFILECONNECT         for 1000001
39516>>>>>>>>>Define FUNC_SQLDISCONNECT          for 1000002
39516>>>>>>>>>Define FUNC_SQLOPEN                for 1000003
39516>>>>>>>>>Define FUNC_SQLCLOSE               for 1000004
39516>>>>>>>>>Define FUNC_SQLPREPARE             for 1000005
39516>>>>>>>>>Define FUNC_SQLEXECUTE             for 1000006
39516>>>>>>>>>Define FUNC_SQLEXECDIRECT          for 1000007
39516>>>>>>>>>Define FUNC_SQLFETCH               for 1000008
39516>>>>>>>>>Define FUNC_SQLCOLUMNINFO          for 1000009
39516>>>>>>>>>Define FUNC_SQLCOLUMNVALUE         for 1000010
39516>>>>>>>>>Define FUNC_SQLBINDFILE            for 1000011
39516>>>>>>>>>Define FUNC_SQLGETDATA             for 1000012
39516>>>>>>>>>Define FUNC_SQLCOLSTRINGATTRIBLEN  for 1000013
39516>>>>>>>>>Define FUNC_SQLCOLSTRINGATTRIB     for 1000014
39516>>>>>>>>>Define FUNC_SQLCOLINTATTRIB        for 1000015
39516>>>>>>>>>Define FUNC_SQLSTMTINTATTRIB       for 1000016
39516>>>>>>>>>Define FUNC_SQLSETPROCNAME         for 1000017
39516>>>>>>>>>Define FUNC_SQLSETPROCARG          for 1000018
39516>>>>>>>>>Define FUNC_SQLCALL                for 1000019
39516>>>>>>>>>Define FUNC_SQLGETPROCARGLEN       for 1000020
39516>>>>>>>>>Define FUNC_SQLGETPROCARG          for 1000021
39516>>>>>>>>>Define FUNC_SQLGETPROCRETVALLEN    for 1000022
39516>>>>>>>>>Define FUNC_SQLGETPROCRETVAL       for 1000023
39516>>>>>>>>>Define FUNC_SQLNEXTRESULTSET       for 1000024
39516>>>>>>>>>Define FUNC_SQLBUFFERSTATUS        for 1000025
39516>>>>>>>>>Define FUNC_SQLSETPROCSCHEMA       for 1000026
39516>>>>>>>>>Define FUNC_SQLGETMESSAGE          for 1000027
39516>>>>>>>>>Define FUNC_SQLSETSTMTINTATTRIB    for 1000028
39516>>>>>>>>>
39516>>>>>>>>>// Embedded SQL statement attribute constants
39516>>>>>>>>>Define SQLSTMTATTRIB_COLUMNCOUNT    for 1
39516>>>>>>>>>Define SQLSTMTATTRIB_ROWCOUNT       for 2
39516>>>>>>>>>Define SQLSTMTATTRIB_ROWCOUNT_TYPE  for 3
39516>>>>>>>>>Define SQLSTMTATTRIB_NUMMESSAGES    for 4
39516>>>>>>>>>Define SQLSTMTATTRIB_CURSOR_TYPE    for 5
39516>>>>>>>>>
39516>>>>>>>>>// Embedded SQL possible values for SQLSTMTATTRIB_CURSOR_TYPE
39516>>>>>>>>>Define SQL_CURSOR_FORWARD_ONLY      for 0
39516>>>>>>>>>Define SQL_CURSOR_KEYSET_DRIVEN     for 1
39516>>>>>>>>>Define SQL_CURSOR_DYNAMIC           for 2
39516>>>>>>>>>Define SQL_CURSOR_STATIC            for 3
39516>>>>>>>>>
39516>>>>>>>>>
39516>>>>>>>>>// Embedded SQL column attribute constants
39516>>>>>>>>>Define SQLCOLATTRIB_SIZE           for 1
39516>>>>>>>>>Define SQLCOLATTRIB_LENGTH         for 1
39516>>>>>>>>>Define SQLCOLATTRIB_PRECISION      for 2
39516>>>>>>>>>Define SQLCOLATTRIB_LABEL          for 3
39516>>>>>>>>>Define SQLCOLATTRIB_BASECOLUMNNAME for 4
39516>>>>>>>>>Define SQLCOLATTRIB_BASETABLENAME  for 5
39516>>>>>>>>>Define SQLCOLATTRIB_SQLTYPE        for 6
39516>>>>>>>>>Define SQLCOLATTRIB_NULLABLE       for 7
39516>>>>>>>>>Define SQLCOLATTRIB_DFTYPE         for 8
39516>>>>>>>>>
39516>>>>>>>>>
39516>>>>>>>>>// Types used for conversion with ConvertToXml
39516>>>>>>>>>Define esqlTime      for 8
39516>>>>>>>>>Define esqlDatetime  for 9
39516>>>>>>>>>
39516>>>>>>>>>// Global variables holding last executed embedded SQL connection and statement handles.
39516>>>>>>>>>Integer giLastSQLhdbc
39516>>>>>>>>>Integer giLastSQLhstmt
39516>>>>>>>>>
39516>>>>>>>>>Move -1 to giLastSQLhdbc
39517>>>>>>>>>Move -1 to giLastSQLhstmt
39518>>>>>>>>>
39518>>>>>>>>>Struct tSQLColumn
39518>>>>>>>>>    Integer iSQLType
39518>>>>>>>>>    Integer iSQLSize
39518>>>>>>>>>    Integer iSQLPrecision
39518>>>>>>>>>    Integer iVariableDataType
39518>>>>>>>>>End_Struct
39518>>>>>>>>>
39518>>>>>>>>>// Statement object for embedded sql                           
39518>>>>>>>>>//   An object is created for each statement. These will be children    
39518>>>>>>>>>//   of cSQLConnection objects which manage the create and destruction  
39518>>>>>>>>>//   of these.                                                          
39518>>>>>>>>>
39518>>>>>>>>>Class cSQLStatement is a cObject
39519>>>>>>>>>    
39519>>>>>>>>>    Procedure Construct_object
39521>>>>>>>>>        Forward Send Construct_object
39523>>>>>>>>>        
39523>>>>>>>>>        Property Handle  phCLIStatementHandle   0
39524>>>>>>>>>        Property Handle  phCLIConnectionHandle  0
39525>>>>>>>>>        Property String  psDriverID             ""
39526>>>>>>>>>        
39526>>>>>>>>>        Property Integer piLastColumn      0
39527>>>>>>>>>        Property Integer piLastArgument    0
39528>>>>>>>>>        Property Integer piBindFile        0
39529>>>>>>>>>        
39529>>>>>>>>>        Property Integer piColumnCount     0
39530>>>>>>>>>        
39530>>>>>>>>>        // True if there is at least 1 column with a variable length data type
39530>>>>>>>>>        Property Integer piHasVariableDataType  0
39531>>>>>>>>>        
39531>>>>>>>>>        // Max size of buffer for variable length data. Default 16000
39531>>>>>>>>>        Property Integer piMaxVariableBufferLength 16000
39532>>>>>>>>>        
39532>>>>>>>>>        // Allocated buffer for SQLGetData.
39532>>>>>>>>>        Property WString psVariableBuffer  ""
39533>>>>>>>>>        
39533>>>>>>>>>        // Allocated size of psVariableBuffer
39533>>>>>>>>>        Property Integer piVariableBufferLength 0
39534>>>>>>>>>        
39534>>>>>>>>>        // Stores column properties of a result set.
39534>>>>>>>>>        Property tSQLColumn[] paSQLColumns
39535>>>>>>>>>        
39535>>>>>>>>>        // piFetchResult is set by SQLFetchRowValues and SQLFetchResultSetValues
39535>>>>>>>>>        //   0    = Fetch returned no data.
39535>>>>>>>>>        //   <> 0 = Row fetched
39535>>>>>>>>>        Property Integer piFetchResult     0
39536>>>>>>>>>        
39536>>>>>>>>>        
39536>>>>>>>>>        Property String psDummyZeroDate              '0001-01-01'
39537>>>>>>>>>        Property String psDummyZeroDateMssqlDatetime '1753-01-01'
39538>>>>>>>>>        
39538>>>>>>>>>    End_Procedure
39539>>>>>>>>>    
39539>>>>>>>>>    // Store basic information about the statement.
39539>>>>>>>>>    Procedure StoreStatementInfo Handle hCLIStatementHandle String sDrvrId Handle hCLIConnectionHandle
39541>>>>>>>>>        
39541>>>>>>>>>        Set phCLIStatementHandle   to hCLIStatementHandle
39542>>>>>>>>>        Set phCLIConnectionHandle  to hCLIConnectionHandle
39543>>>>>>>>>        Set psDriverID             to sDrvrId
39544>>>>>>>>>        
39544>>>>>>>>>    End_Procedure
39545>>>>>>>>>    
39545>>>>>>>>>    
39545>>>>>>>>>    // Destroy the cSQLStatement object
39545>>>>>>>>>    Procedure DestroySQLStatement
39547>>>>>>>>>        Send Destroy
39548>>>>>>>>>    End_Procedure
39549>>>>>>>>>    
39549>>>>>>>>>    // Handle an error that has occurred while checking properties.
39549>>>>>>>>>    Procedure HandleError Integer ihstmt Integer ihdbc String sDrvrId String sOriginMsg
39551>>>>>>>>>        Integer iErrHandle
39551>>>>>>>>>        Integer iErrNum
39551>>>>>>>>>        String  sLocationInfo
39551>>>>>>>>>        
39551>>>>>>>>>        // Get the DataFlex statement identifier
39551>>>>>>>>>        Move Self to iErrHandle
39552>>>>>>>>>        
39552>>>>>>>>>        // Determine error number
39552>>>>>>>>>        If (ihstmt = 0) ;            Move CLIERR_SQLINVALID_CLI_STMT_HANDLE to iErrNum
39555>>>>>>>>>        Else If (ihdbc = 0) ;            Move CLIERR_SQLINVALID_CLI_CONN_HANDLE to iErrNum
39559>>>>>>>>>        Else If (sDrvrId = "") ;            Move CLIERR_SQLINVALID_DRIVER_ID to iErrNum
39563>>>>>>>>>        Else ;            Move CLIERR_SQL_ERROR to iErrNum
39565>>>>>>>>>        
39565>>>>>>>>>        // Create location ifnormation
39565>>>>>>>>>        Move "[" to sLocationInfo
39566>>>>>>>>>        If (sOriginMsg <> "") Begin
39568>>>>>>>>>            Move (Append(sLocationInfo, sOriginMsg)) to sLocationInfo
39569>>>>>>>>>            Move (Append(sLocationInfo, ", "))       to sLocationInfo
39570>>>>>>>>>        End
39570>>>>>>>>>>
39570>>>>>>>>>        Move (Append(sLocationInfo, "DataFlex hstmt = ")) to sLocationInfo
39571>>>>>>>>>        Move (Append(sLocationInfo, iErrHandle))          to sLocationInfo
39572>>>>>>>>>        Move (Append(sLocationInfo, "]"))                 to sLocationInfo
39573>>>>>>>>>        
39573>>>>>>>>>        // Generate the error
39573>>>>>>>>>        Error iErrNum sLocationInfo
39574>>>>>>>>>>
39574>>>>>>>>>    End_Procedure
39575>>>>>>>>>    
39575>>>>>>>>>    // Handle general error not related to the properties
39575>>>>>>>>>    Procedure StmtError Integer iErrNum String sErrText String sOriginMsg
39577>>>>>>>>>        Integer iErrHandle
39577>>>>>>>>>        String  sLocationInfo
39577>>>>>>>>>        
39577>>>>>>>>>        // Get the DataFlex statement identifier
39577>>>>>>>>>        Move Self to iErrHandle
39578>>>>>>>>>        
39578>>>>>>>>>        // Create location information
39578>>>>>>>>>        Move "[" to sLocationInfo
39579>>>>>>>>>        If (sOriginMsg <> "") Begin
39581>>>>>>>>>            Move (Append(sLocationInfo, sOriginMsg)) to sLocationInfo
39582>>>>>>>>>            Move (Append(sLocationInfo, ", "))       to sLocationInfo
39583>>>>>>>>>        End
39583>>>>>>>>>>
39583>>>>>>>>>        If (sErrtext <> "") Begin
39585>>>>>>>>>            Move (Append(sLocationInfo, sErrtext)) to sLocationInfo
39586>>>>>>>>>            Move (Append(sLocationInfo, ", "))     to sLocationInfo
39587>>>>>>>>>        End
39587>>>>>>>>>>
39587>>>>>>>>>        Move (Append(sLocationInfo, "DataFlex hstmt = ")) to sLocationInfo
39588>>>>>>>>>        Move (Append(sLocationInfo, iErrHandle))          to sLocationInfo
39589>>>>>>>>>        Move (Append(sLocationInfo, "]"))                 to sLocationInfo
39590>>>>>>>>>        
39590>>>>>>>>>        // Generate the error
39590>>>>>>>>>        Error iErrNum sLocationInfo
39591>>>>>>>>>>
39591>>>>>>>>>    End_Procedure
39592>>>>>>>>>    
39592>>>>>>>>>    // Handle an illegal attribute error
39592>>>>>>>>>    Procedure SQLIllegalAttribute String sErrText String sOriginMsg
39594>>>>>>>>>        Integer bReport
39594>>>>>>>>>        
39594>>>>>>>>>        Get_Attribute DF_REPORT_UNSUPPORTED_ATTRIBUTES to bReport
39597>>>>>>>>>        If (bReport) ;            Send StmtError CLIERR_SQLINVALID_ATTRIBUTE sErrtext sOriginMsg
39600>>>>>>>>>    End_Procedure
39601>>>>>>>>>    
39601>>>>>>>>>    // Check if a column number is legal
39601>>>>>>>>>    Function SQLPrivateColumnIsLegal Integer ihdbc String sDrvrId Integer ihstmt Integer iCol Returns Integer
39603>>>>>>>>>        Integer bLegal
39603>>>>>>>>>        Integer iNumColumns
39603>>>>>>>>>        
39603>>>>>>>>>        Get SQLPrivateStmtAttribute SQLSTMTATTRIB_COLUMNCOUNT ihdbc sDrvrId ihstmt to iNumColumns
39604>>>>>>>>>        If (iCol > 0 and iCol <= iNumColumns) ;            Move DFTRUE to bLegal
39607>>>>>>>>>        Else ;            Move DFFALSE to bLegal
39609>>>>>>>>>        
39609>>>>>>>>>        Function_Return bLegal
39610>>>>>>>>>    End_Function
39611>>>>>>>>>    
39611>>>>>>>>>    
39611>>>>>>>>>    
39611>>>>>>>>>    // Close a statement and free all alllocated resources
39611>>>>>>>>>    Procedure SQLClose
39613>>>>>>>>>        Integer ihdbc
39613>>>>>>>>>        Integer ihstmt
39613>>>>>>>>>        Integer iVoid
39613>>>>>>>>>        String  sDrvrId
39613>>>>>>>>>        String  sEmpty
39613>>>>>>>>>        
39613>>>>>>>>>        // Initialize
39613>>>>>>>>>        Move "" to sEmpty
39614>>>>>>>>>        
39614>>>>>>>>>        // Get the cli handles
39614>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39615>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39616>>>>>>>>>        Get psDriverId            to sDrvrId
39617>>>>>>>>>        
39617>>>>>>>>>        // Free the CLI handle
39617>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39619>>>>>>>>>            // Call the driver function to close
39619>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCLOSE ;                Callback Self ;                Passing ihdbc sEmpty ihstmt ;                Result iVoid
39624>>>>>>>>>            
39624>>>>>>>>>            Move -1 to giLastSQLhstmt
39625>>>>>>>>>            // Free the DataFlex handle
39625>>>>>>>>>            Send DestroySQLStatement
39626>>>>>>>>>        End
39626>>>>>>>>>>
39626>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLClose"
39628>>>>>>>>>    End_Procedure
39629>>>>>>>>>    
39629>>>>>>>>>    // Prepare a statement for execution
39629>>>>>>>>>    Procedure SQLPrepare String sStatement
39631>>>>>>>>>        Integer ihdbc
39631>>>>>>>>>        Integer ihstmt
39631>>>>>>>>>        Integer iVoid
39631>>>>>>>>>        String  sDrvrId
39631>>>>>>>>>        
39631>>>>>>>>>        // Get the cli handles
39631>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39632>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39633>>>>>>>>>        Get psDriverId            to sDrvrId
39634>>>>>>>>>        
39634>>>>>>>>>        // Prepare
39634>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39636>>>>>>>>>            // Call the driver function to prepare
39636>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLPREPARE ;                Callback Self ;                Passing ihdbc sStatement ihstmt ;                Result iVoid
39641>>>>>>>>>            Set piLastArgument to 0
39642>>>>>>>>>
39642>>>>>>>>>        End
39642>>>>>>>>>>
39642>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLPrepare"
39644>>>>>>>>>    End_Procedure
39645>>>>>>>>>    
39645>>>>>>>>>    Procedure SQLGetStatementAttributes
39647>>>>>>>>>        Integer ihdbc ihstmt iNumColumns iCol iMaxSize
39647>>>>>>>>>        String sMaxValue
39647>>>>>>>>>        tSQLColumn[] aSQLColumns
39647>>>>>>>>>        tSQLColumn[] aSQLColumns
39648>>>>>>>>>        
39648>>>>>>>>>        Integer iSqlType
39648>>>>>>>>>        Integer iSQLSize
39648>>>>>>>>>        Integer iSQLprecision
39648>>>>>>>>>        Integer iVariableDataType
39648>>>>>>>>>        
39648>>>>>>>>>        String  sDrvrId
39648>>>>>>>>>        
39648>>>>>>>>>        Integer iHasVariableDataType
39648>>>>>>>>>        
39648>>>>>>>>>        Move 0 to iHasVariableDataType
39649>>>>>>>>>        
39649>>>>>>>>>        
39649>>>>>>>>>        // Get the cli handles
39649>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39650>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39651>>>>>>>>>        Get psDriverId            to sDrvrId
39652>>>>>>>>>        
39652>>>>>>>>>        Get SQLPrivateStmtAttribute SQLSTMTATTRIB_COLUMNCOUNT ihdbc sDrvrId ihstmt to iNumColumns
39653>>>>>>>>>        
39653>>>>>>>>>        Set piColumnCount to iNumColumns
39654>>>>>>>>>        
39654>>>>>>>>>        // Fill columns array
39654>>>>>>>>>        For iCol from 1 to iNumColumns
39660>>>>>>>>>>
39660>>>>>>>>>            Move 0 to iVariableDataType
39661>>>>>>>>>            
39661>>>>>>>>>            Get SQLPrivateColAttribute iCol SQLCOLATTRIB_SQLTYPE ihdbc sDrvrId ihstmt to iSQLType
39662>>>>>>>>>            Get SQLPrivateColAttribute iCol SQLCOLATTRIB_SIZE ihdbc sDrvrId ihstmt to iSQLSize
39663>>>>>>>>>            Get SQLPrivateColAttribute iCol SQLCOLATTRIB_PRECISION ihdbc sDrvrId ihstmt to iSQLPrecision
39664>>>>>>>>>            
39664>>>>>>>>>            If ( (iSQLType = SQL_LONGVARCHAR) or (iSQLType = SQL_WLONGVARCHAR) ) Begin
39666>>>>>>>>>                // text type
39666>>>>>>>>>                Move 1 to iVariableDataType
39667>>>>>>>>>            End
39667>>>>>>>>>>
39667>>>>>>>>>            Else Begin
39668>>>>>>>>>                If (sDrvrId = "MSSQLDRV") Begin
39670>>>>>>>>>                    // SQL Server varchar(max) and nvarchar(max) types return Size = 0
39670>>>>>>>>>                    If ( ((iSQLType = SQL_VARCHAR) and (iSQLSize = 0) ) or ;                        ((iSQLType = SQL_WVARCHAR) and (iSQLSize = 0) ) ) Begin
39672>>>>>>>>>                        
39672>>>>>>>>>                        Move 1 to iVariableDataType
39673>>>>>>>>>                    End
39673>>>>>>>>>>
39673>>>>>>>>>                End
39673>>>>>>>>>>
39673>>>>>>>>>            End
39673>>>>>>>>>>
39673>>>>>>>>>            
39673>>>>>>>>>            Move iSqlType           to aSQLColumns[iCol].iSQLType
39674>>>>>>>>>            Move iSQLSize           to aSQLColumns[iCol].iSQLSize
39675>>>>>>>>>            Move iSQLPrecision      to aSQLColumns[iCol].iSQLPrecision
39676>>>>>>>>>            Move iVariableDataType  to aSQLColumns[iCol].iVariableDataType
39677>>>>>>>>>            
39677>>>>>>>>>            If (not(iVariableDataType)) Begin
39679>>>>>>>>>                If (iSQLSize > iMaxSize) Begin
39681>>>>>>>>>                    Move iSQLSize to iMaxSize
39682>>>>>>>>>                End
39682>>>>>>>>>>
39682>>>>>>>>>            End
39682>>>>>>>>>>
39682>>>>>>>>>            Else Begin
39683>>>>>>>>>                Move 1 to iHasVariableDataType
39684>>>>>>>>>            End
39684>>>>>>>>>>
39684>>>>>>>>>            
39684>>>>>>>>>        Loop
39685>>>>>>>>>>
39685>>>>>>>>>        
39685>>>>>>>>>        Set paSQLColumns   to aSQLColumns
39686>>>>>>>>>        Set piHasVariableDataType to iHasVariableDataType
39687>>>>>>>>>        
39687>>>>>>>>>    End_Procedure
39688>>>>>>>>>    
39688>>>>>>>>>    // Execute a prepared statement
39688>>>>>>>>>    Procedure SQLExecute
39690>>>>>>>>>        Integer ihdbc
39690>>>>>>>>>        Integer ihstmt
39690>>>>>>>>>        Integer iVoid
39690>>>>>>>>>        String  sDrvrId
39690>>>>>>>>>        String  sEmpty
39690>>>>>>>>>        
39690>>>>>>>>>        // Initialize
39690>>>>>>>>>        Move "" to sEmpty
39691>>>>>>>>>        
39691>>>>>>>>>        // Get the cli handles
39691>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39692>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39693>>>>>>>>>        Get psDriverId            to sDrvrId
39694>>>>>>>>>        
39694>>>>>>>>>        // Execute
39694>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39696>>>>>>>>>            // Call the driver function to execute
39696>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLEXECUTE ;                Callback Self ;                Passing ihdbc sEmpty ihstmt ;                Result iVoid
39701>>>>>>>>>            Send SQLGetStatementAttributes
39702>>>>>>>>>            Set piLastArgument to 0
39703>>>>>>>>>        End
39703>>>>>>>>>>
39703>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLExecute"
39705>>>>>>>>>    End_Procedure
39706>>>>>>>>>    
39706>>>>>>>>>    
39706>>>>>>>>>    
39706>>>>>>>>>    // Prepare and execute a statement
39706>>>>>>>>>    Procedure SQLExecDirect String sStatement
39708>>>>>>>>>        Integer ihdbc
39708>>>>>>>>>        Integer ihstmt
39708>>>>>>>>>        Integer iVoid
39708>>>>>>>>>        String  sDrvrId
39708>>>>>>>>>        
39708>>>>>>>>>        // Get the cli handles
39708>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39709>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39710>>>>>>>>>        Get psDriverId            to sDrvrId
39711>>>>>>>>>        
39711>>>>>>>>>        // ExecDirect
39711>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39713>>>>>>>>>            // Call the driver function to execdirect
39713>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLEXECDIRECT ;                Callback Self ;                Passing ihdbc sStatement ihstmt ;                Result iVoid
39718>>>>>>>>>            Send SQLGetStatementAttributes
39719>>>>>>>>>        End
39719>>>>>>>>>>
39719>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLExecDirect"
39721>>>>>>>>>    End_Procedure
39722>>>>>>>>>    
39722>>>>>>>>>    // Fetch the next row
39722>>>>>>>>>    // Returns  : 0   = No more data
39722>>>>>>>>>    //<>0 = Success
39722>>>>>>>>>    Function SQLFetch Returns Integer
39724>>>>>>>>>        Integer ihdbc
39724>>>>>>>>>        Integer ihstmt
39724>>>>>>>>>        Integer iResult
39724>>>>>>>>>        String  sDrvrId
39724>>>>>>>>>        String  sEmpty
39724>>>>>>>>>        
39724>>>>>>>>>        // Initialize
39724>>>>>>>>>        Move "" to sEmpty
39725>>>>>>>>>        Move 0  to iResult
39726>>>>>>>>>        
39726>>>>>>>>>        // Get the cli handles
39726>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39727>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39728>>>>>>>>>        Get psDriverId            to sDrvrId
39729>>>>>>>>>        
39729>>>>>>>>>        // Fetch
39729>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39731>>>>>>>>>            Move False to Err
39732>>>>>>>>>            
39732>>>>>>>>>            // Call the driver function to fetch
39732>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLFETCH Callback Self Passing ihdbc sEmpty ihstmt Result iResult
39737>>>>>>>>>            
39737>>>>>>>>>            // If something went wrong, adjust the result
39737>>>>>>>>>            If (Err) ;                Move 0 to iResult
39740>>>>>>>>>            
39740>>>>>>>>>            Set piLastcolumn to 0
39741>>>>>>>>>        End
39741>>>>>>>>>>
39741>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLFetch"
39743>>>>>>>>>        
39743>>>>>>>>>        Function_Return iResult
39744>>>>>>>>>    End_Function
39745>>>>>>>>>    
39745>>>>>>>>>    // Fetch the next row and return an array with all column values
39745>>>>>>>>>    // Returns  : Array of strings with all column values
39745>>>>>>>>>    // Sets piFetchResult property
39745>>>>>>>>>    //   0    = No more data
39745>>>>>>>>>    //   <> 0 = Success
39745>>>>>>>>>    Function SQLFetchRowValues Returns String[]
39747>>>>>>>>>        
39747>>>>>>>>>        String[] asValues
39748>>>>>>>>>        
39748>>>>>>>>>        tSQLColumn[] aSQLColumns
39748>>>>>>>>>        tSQLColumn[] aSQLColumns
39749>>>>>>>>>        
39749>>>>>>>>>        Integer ihdbc
39749>>>>>>>>>        Integer ihstmt
39749>>>>>>>>>        Integer iResult iVoid
39749>>>>>>>>>        Integer iColCount iCol
39749>>>>>>>>>        String  sDrvrId
39749>>>>>>>>>        String  sEmpty
39749>>>>>>>>>        Longptr pResultWStr
39749>>>>>>>>>        WString wVariableResult
39749>>>>>>>>>        Integer iHasVariableDataType
39749>>>>>>>>>        Integer iLen
39749>>>>>>>>>        Integer iVariableBufferLength
39749>>>>>>>>>        
39749>>>>>>>>>        // Initialize
39749>>>>>>>>>        Move "" to sEmpty
39750>>>>>>>>>        Move 0  to iResult
39751>>>>>>>>>        
39751>>>>>>>>>        // Get the cli handles
39751>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39752>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39753>>>>>>>>>        Get psDriverId            to sDrvrId
39754>>>>>>>>>        
39754>>>>>>>>>        Get paSQLColumns to aSQLColumns
39755>>>>>>>>>        Get piColumnCount to iColCount
39756>>>>>>>>>        Get piHasVariableDataType to iHasVariableDataType
39757>>>>>>>>>        
39757>>>>>>>>>        If (iHasVariableDataType) Begin
39759>>>>>>>>>            
39759>>>>>>>>>            Get piVariableBufferLength      to iVariableBufferLength
39760>>>>>>>>>            Get piMaxVariableBufferLength   to iLen
39761>>>>>>>>>            
39761>>>>>>>>>            If (iLen > iVariableBufferLength) Begin
39763>>>>>>>>>                // Allocate
39763>>>>>>>>>                Move (Repeat(' ', iLen)) to wVariableResult
39764>>>>>>>>>                
39764>>>>>>>>>                Set piVariableBufferLength to iLen
39765>>>>>>>>>                Set psVariableBuffer       to wVariableResult
39766>>>>>>>>>                
39766>>>>>>>>>                Get piVariableBufferLength to iVariableBufferLength
39767>>>>>>>>>            End
39767>>>>>>>>>>
39767>>>>>>>>>        End
39767>>>>>>>>>>
39767>>>>>>>>>        
39767>>>>>>>>>        // Fetch
39767>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39769>>>>>>>>>            Move (False) to Err
39770>>>>>>>>>            
39770>>>>>>>>>            // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
39770>>>>>>>>>            // in the next FUNC_SQLCOLUMNVALUE call.
39770>>>>>>>>>            // If hdbc and hstmt have not changed since the last call we don't have to set it.
39770>>>>>>>>>            If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
39772>>>>>>>>>                // Setup function arguments
39772>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO Callback 0 Passing ihdbc iCol ihstmt Result iVoid
39777>>>>>>>>>                Move ihstmt to giLastSQLhstmt
39778>>>>>>>>>                Move ihdbc to giLastSQLhdbc
39779>>>>>>>>>            End
39779>>>>>>>>>>
39779>>>>>>>>>            
39779>>>>>>>>>            // Call the driver function to fetch
39779>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLFETCH Callback 0 Passing ihdbc sEmpty ihstmt Result iResult
39784>>>>>>>>>            
39784>>>>>>>>>            // If something went wrong, adjust the result
39784>>>>>>>>>            If (Err) ;                Move 0 to iResult
39787>>>>>>>>>            
39787>>>>>>>>>            If (iResult) Begin
39789>>>>>>>>>                For iCol from 1 to iColCount
39795>>>>>>>>>>
39795>>>>>>>>>                    
39795>>>>>>>>>                    If (not(aSQLColumns[iCol].iVariableDataType)) Begin
39797>>>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNVALUE ;                            Callback 0 ;                            Passing sEmpty sEmpty iCol ;                            Result pResultWStr
39802>>>>>>>>>                            
39802>>>>>>>>>                        If (pResultWStr) Begin
39804>>>>>>>>>                            Move (CString(PointerToWString(pResultWStr))) to asValues[iCol - 1]
39805>>>>>>>>>                        End
39805>>>>>>>>>>
39805>>>>>>>>>                        Else Begin
39806>>>>>>>>>                            Move "" to asValues[iCol - 1]
39807>>>>>>>>>                        End
39807>>>>>>>>>>
39807>>>>>>>>>                        
39807>>>>>>>>>                    End
39807>>>>>>>>>>
39807>>>>>>>>>                    Else Begin
39808>>>>>>>>>                        Get psVariableBuffer       to wVariableResult
39809>>>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLGETDATA ;                            Callback 0 ;                            Passing iCol iVariableBufferLength (AddressOf(wVariableResult));                            Result iVoid
39814>>>>>>>>>                        
39814>>>>>>>>>                        Move (CString(wVariableResult)) to asValues[iCol - 1]
39815>>>>>>>>>                    End
39815>>>>>>>>>>
39815>>>>>>>>>                    
39815>>>>>>>>>                Loop
39816>>>>>>>>>>
39816>>>>>>>>>            End
39816>>>>>>>>>>
39816>>>>>>>>>        End
39816>>>>>>>>>>
39816>>>>>>>>>        Else Begin
39817>>>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLFetchRowValues"
39818>>>>>>>>>        End
39818>>>>>>>>>>
39818>>>>>>>>>        
39818>>>>>>>>>        Set piFetchResult to iResult
39819>>>>>>>>>        
39819>>>>>>>>>        Function_Return asValues
39820>>>>>>>>>        
39820>>>>>>>>>    End_Function
39821>>>>>>>>>    
39821>>>>>>>>>    // Fetch a complete result set.
39821>>>>>>>>>    // Returns  : 2-dimensional array of strings with result set
39821>>>>>>>>>    // Sets piFetchResult property
39821>>>>>>>>>    //   0    = No more data
39821>>>>>>>>>    //   <> 0 = Success
39821>>>>>>>>>    Function SQLFetchResultsetValues Returns String[][]
39823>>>>>>>>>        
39823>>>>>>>>>        String[][] asValues
39824>>>>>>>>>        
39824>>>>>>>>>        Integer ihdbc ihstmt iResult iVoid iColCount iCol iRow
39824>>>>>>>>>        String sDrvrId sEmpty sMax
39824>>>>>>>>>        Longptr pResultWStr
39824>>>>>>>>>        WString wResult
39824>>>>>>>>>        
39824>>>>>>>>>        tSQLColumn[] aSQLColumns
39824>>>>>>>>>        tSQLColumn[] aSQLColumns
39825>>>>>>>>>        WString  wVariableResult
39825>>>>>>>>>        Integer iHasVariableDataType
39825>>>>>>>>>        Integer iLen
39825>>>>>>>>>        Integer iVariableBufferLength
39825>>>>>>>>>        
39825>>>>>>>>>        // Initialize
39825>>>>>>>>>        Move "" to sEmpty
39826>>>>>>>>>        Move 0  to iResult
39827>>>>>>>>>        
39827>>>>>>>>>        // Get the cli handles
39827>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39828>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39829>>>>>>>>>        Get psDriverId            to sDrvrId
39830>>>>>>>>>        
39830>>>>>>>>>        // Fetch
39830>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39832>>>>>>>>>            Move False to Err
39833>>>>>>>>>            
39833>>>>>>>>>            // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
39833>>>>>>>>>            // in the next FUNC_SQLCOLUMNVALUE call.
39833>>>>>>>>>            // If hdbc and hstmt have not changed since the last call we don't have to set it.
39833>>>>>>>>>            If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
39835>>>>>>>>>                // Setup function arguments
39835>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO Callback 0 Passing ihdbc iCol ihstmt Result iVoid
39840>>>>>>>>>                Move ihstmt to giLastSQLhstmt
39841>>>>>>>>>                Move ihdbc to giLastSQLhdbc
39842>>>>>>>>>            End
39842>>>>>>>>>>
39842>>>>>>>>>            
39842>>>>>>>>>            Get piColumnCount to iColCount
39843>>>>>>>>>            If (iColCount) Begin
39845>>>>>>>>>                Get paSQLColumns to aSQLColumns
39846>>>>>>>>>                Get piHasVariableDataType to iHasVariableDataType
39847>>>>>>>>>                If (iHasVariableDataType) Begin
39849>>>>>>>>>                    Get piVariableBufferLength      to iVariableBufferLength
39850>>>>>>>>>                    Get piMaxVariableBufferLength   to iLen
39851>>>>>>>>>                    If (iLen > iVariableBufferLength) Begin
39853>>>>>>>>>                        // Allocate
39853>>>>>>>>>                        Move (Repeat(' ', iLen)) to wVariableResult
39854>>>>>>>>>                        
39854>>>>>>>>>                        Set piVariableBufferLength to iLen
39855>>>>>>>>>                        Set psVariableBuffer       to wVariableResult
39856>>>>>>>>>                        
39856>>>>>>>>>                        Get piVariableBufferLength to iVariableBufferLength
39857>>>>>>>>>                    End
39857>>>>>>>>>>
39857>>>>>>>>>                    Else Begin
39858>>>>>>>>>                        Set psVariableBuffer       to wVariableResult
39859>>>>>>>>>                    End
39859>>>>>>>>>>
39859>>>>>>>>>                End
39859>>>>>>>>>>
39859>>>>>>>>>                
39859>>>>>>>>>                // Call the driver function to fetch
39859>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLFETCH Callback Self Passing ihdbc sEmpty ihstmt Result iResult
39864>>>>>>>>>                If (Err) ;                    Move 0 to iResult
39867>>>>>>>>>                
39867>>>>>>>>>                While (iResult <> 0)
39871>>>>>>>>>                    
39871>>>>>>>>>                    For iCol from 1 to (iColCount)
39877>>>>>>>>>>
39877>>>>>>>>>                        
39877>>>>>>>>>                        If (not(aSQLColumns[iCol].iVariableDataType)) Begin
39879>>>>>>>>>                            
39879>>>>>>>>>                            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNVALUE ;                                Callback 0 ;                                Passing sEmpty sEmpty iCol ;                                Result pResultWStr
39884>>>>>>>>>                            
39884>>>>>>>>>                            If (pResultWStr) Begin
39886>>>>>>>>>                                Move (CString(PointerToWString(pResultWStr))) to asValues[iRow][iCol - 1]
39887>>>>>>>>>                            End
39887>>>>>>>>>>
39887>>>>>>>>>                            Else Begin
39888>>>>>>>>>                                Move "" to asValues[iRow][iCol - 1]
39889>>>>>>>>>                            End
39889>>>>>>>>>>
39889>>>>>>>>>                        End
39889>>>>>>>>>>
39889>>>>>>>>>                        Else Begin
39890>>>>>>>>>                            //Variable data
39890>>>>>>>>>                            Move wVariableResult to wResult
39891>>>>>>>>>                            Call_Driver 0 sDrvrId Function FUNC_SQLGETDATA ;                                Callback 0 ;                                Passing iCol iVariableBufferLength (AddressOf(wResult)) ;                                Result iVoid
39896>>>>>>>>>                            
39896>>>>>>>>>                            Move (CString(wResult)) to asValues[iRow][iCol - 1]
39897>>>>>>>>>                        End
39897>>>>>>>>>>
39897>>>>>>>>>                    Loop
39898>>>>>>>>>>
39898>>>>>>>>>                    
39898>>>>>>>>>                    Increment iRow
39899>>>>>>>>>                    
39899>>>>>>>>>                    // Call the driver function to fetch
39899>>>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLFETCH Callback Self Passing ihdbc sEmpty ihstmt Result iResult
39904>>>>>>>>>                    If (Err) ;                        Move 0 to iResult
39907>>>>>>>>>                    
39907>>>>>>>>>                Loop
39908>>>>>>>>>>
39908>>>>>>>>>            End
39908>>>>>>>>>>
39908>>>>>>>>>        End
39908>>>>>>>>>>
39908>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLFetchResultsetValues"
39910>>>>>>>>>        
39910>>>>>>>>>        Set piFetchResult to iResult
39911>>>>>>>>>        
39911>>>>>>>>>        Function_Return asValues
39912>>>>>>>>>    End_Function
39913>>>>>>>>>    
39913>>>>>>>>>    // Get the next column
39913>>>>>>>>>    Function SQLNextColumn Returns String
39915>>>>>>>>>        Integer iCol
39915>>>>>>>>>        String  sResult
39915>>>>>>>>>        
39915>>>>>>>>>        Get piLastColumn to iCol
39916>>>>>>>>>        Increment iCol
39917>>>>>>>>>        Get SQLColumnValue iCol to sResult
39918>>>>>>>>>        Set piLastColumn to iCol
39919>>>>>>>>>        
39919>>>>>>>>>        Function_Return sResult
39920>>>>>>>>>    End_Function
39921>>>>>>>>>    
39921>>>>>>>>>    
39921>>>>>>>>>    // Returns the native type of a column
39921>>>>>>>>>    Function SQLColumnType Integer iCol Returns Integer
39923>>>>>>>>>        Integer ihdbc
39923>>>>>>>>>        Integer ihstmt
39923>>>>>>>>>        String  sDrvrId
39923>>>>>>>>>        Integer iSQLType
39923>>>>>>>>>        Integer iColumns
39923>>>>>>>>>        
39923>>>>>>>>>        tSQLColumn[] aSQLColumns
39923>>>>>>>>>        tSQLColumn[] aSQLColumns
39924>>>>>>>>>        
39924>>>>>>>>>        // Get the cli handles
39924>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39925>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39926>>>>>>>>>        Get psDriverId            to sDrvrId
39927>>>>>>>>>        
39927>>>>>>>>>        // Get the value
39927>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39929>>>>>>>>>            
39929>>>>>>>>>            Get paSQLColumns   to aSQLColumns
39930>>>>>>>>>            Move (SizeOfArray(aSQLColumns)) to iColumns
39931>>>>>>>>>            
39931>>>>>>>>>            If (iCol >= 1 and iCol <= iColumns) Begin
39933>>>>>>>>>                Move aSQLColumns[iCol].iSQLType to iSQLType
39934>>>>>>>>>            End
39934>>>>>>>>>>
39934>>>>>>>>>            Else Begin
39935>>>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLColumnType"
39936>>>>>>>>>            End
39936>>>>>>>>>>
39936>>>>>>>>>        End
39936>>>>>>>>>>
39936>>>>>>>>>        Else Begin
39937>>>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLColumnType"
39938>>>>>>>>>        End
39938>>>>>>>>>>
39938>>>>>>>>>        
39938>>>>>>>>>        Function_Return iSQLType
39939>>>>>>>>>    End_Function
39940>>>>>>>>>    
39940>>>>>>>>>    // Returns the size (max length) of a column
39940>>>>>>>>>    Function SQLColumnSize Integer iCol Returns Integer
39942>>>>>>>>>        Integer ihdbc
39942>>>>>>>>>        Integer ihstmt
39942>>>>>>>>>        String  sDrvrId
39942>>>>>>>>>        Integer iSQLSize
39942>>>>>>>>>        Integer iColumns
39942>>>>>>>>>        
39942>>>>>>>>>        tSQLColumn[] aSQLColumns
39942>>>>>>>>>        tSQLColumn[] aSQLColumns
39943>>>>>>>>>        
39943>>>>>>>>>        // Get the cli handles
39943>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39944>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39945>>>>>>>>>        Get psDriverId            to sDrvrId
39946>>>>>>>>>        
39946>>>>>>>>>        // Get the value
39946>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39948>>>>>>>>>            
39948>>>>>>>>>            Get paSQLColumns   to aSQLColumns
39949>>>>>>>>>            Move (SizeOfArray(aSQLColumns)) to iColumns
39950>>>>>>>>>            
39950>>>>>>>>>            If (iCol >= 1 and iCol <= iColumns) Begin
39952>>>>>>>>>                Move aSQLColumns[iCol].iSQLSize to iSQLSize
39953>>>>>>>>>            End
39953>>>>>>>>>>
39953>>>>>>>>>            Else Begin
39954>>>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLColumnSize"
39955>>>>>>>>>            End
39955>>>>>>>>>>
39955>>>>>>>>>        End
39955>>>>>>>>>>
39955>>>>>>>>>        Else Begin
39956>>>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLColumnSize"
39957>>>>>>>>>        End
39957>>>>>>>>>>
39957>>>>>>>>>        
39957>>>>>>>>>        Function_Return iSQLSize
39958>>>>>>>>>    End_Function
39959>>>>>>>>>    
39959>>>>>>>>>    //  Returns 1 for variable length datatypes.
39959>>>>>>>>>    //  For example SQL Server varchar(max) or text type
39959>>>>>>>>>    //  The data of variable length datatype columns should be retrieved with SQLGetData
39959>>>>>>>>>    Function SQLColumnVariableDatatype Integer iCol Returns Integer
39961>>>>>>>>>        Integer ihdbc
39961>>>>>>>>>        Integer ihstmt
39961>>>>>>>>>        String  sDrvrId
39961>>>>>>>>>        Integer iVariableDataType
39961>>>>>>>>>        Integer iColumns
39961>>>>>>>>>        
39961>>>>>>>>>        tSQLColumn[] aSQLColumns
39961>>>>>>>>>        tSQLColumn[] aSQLColumns
39962>>>>>>>>>        
39962>>>>>>>>>        // Get the cli handles
39962>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39963>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39964>>>>>>>>>        Get psDriverId            to sDrvrId
39965>>>>>>>>>        
39965>>>>>>>>>        // Get the value
39965>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
39967>>>>>>>>>            
39967>>>>>>>>>            Get paSQLColumns   to aSQLColumns
39968>>>>>>>>>            Move (SizeOfArray(aSQLColumns)) to iColumns
39969>>>>>>>>>            
39969>>>>>>>>>            If (iCol >= 1 and iCol <= iColumns) Begin
39971>>>>>>>>>                Move aSQLColumns[iCol].iVariableDataType to iVariableDataType
39972>>>>>>>>>            End
39972>>>>>>>>>>
39972>>>>>>>>>            Else Begin
39973>>>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLColumnVariableDatatype"
39974>>>>>>>>>            End
39974>>>>>>>>>>
39974>>>>>>>>>        End
39974>>>>>>>>>>
39974>>>>>>>>>        Else Begin
39975>>>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLColumnVariableDatatype"
39976>>>>>>>>>        End
39976>>>>>>>>>>
39976>>>>>>>>>        
39976>>>>>>>>>        Function_Return iVariableDataType
39977>>>>>>>>>    End_Function
39978>>>>>>>>>    
39978>>>>>>>>>    
39978>>>>>>>>>    // Return the value of a column in a fetched row of a given
39978>>>>>>>>>    // statement.
39978>>>>>>>>>    Function SQLColumnValue Integer iCol Returns String
39980>>>>>>>>>        Integer ihdbc
39980>>>>>>>>>        Integer ihstmt
39980>>>>>>>>>        String  sDrvrId sResult
39980>>>>>>>>>        Longptr pResultWStr
39980>>>>>>>>>        
39980>>>>>>>>>        Integer iVoid
39980>>>>>>>>>        Integer iColSize
39980>>>>>>>>>        Integer iColPrecision
39980>>>>>>>>>        String  sEmpty
39980>>>>>>>>>        Integer bLegalColumn
39980>>>>>>>>>        
39980>>>>>>>>>        // Initialize
39980>>>>>>>>>        Move "" to sResult
39981>>>>>>>>>        
39981>>>>>>>>>        // Get the cli handles
39981>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
39982>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
39983>>>>>>>>>        Get psDriverId            to sDrvrId
39984>>>>>>>>>        
39984>>>>>>>>>        // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
39984>>>>>>>>>        // in the next FUNC_SQLCOLUMNVALUE call.
39984>>>>>>>>>        // If hdbc and hstmt have not changed since the last call we don't have to set it.
39984>>>>>>>>>        If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
39986>>>>>>>>>            // Setup function arguments
39986>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback 0 ;                Passing ihdbc iCol ihstmt ;                Result iVoid
39991>>>>>>>>>            Move ihstmt to giLastSQLhstmt
39992>>>>>>>>>            Move ihdbc to giLastSQLhdbc
39993>>>>>>>>>        End
39993>>>>>>>>>>
39993>>>>>>>>>        
39993>>>>>>>>>        If (iCol >= 1 and iCol <= piColumnCount(Self)) Begin
39995>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNVALUE ;                Callback 0 ;                Passing sResult sEmpty iCol ;                Result pResultWStr
40000>>>>>>>>>            
40000>>>>>>>>>            If (pResultWStr) Begin
40002>>>>>>>>>                Move (PointerToWString(pResultWStr)) to sResult
40003>>>>>>>>>            End
40003>>>>>>>>>>
40003>>>>>>>>>            Else Begin
40004>>>>>>>>>                Move "" to sResult
40005>>>>>>>>>            End
40005>>>>>>>>>>
40005>>>>>>>>>        End
40005>>>>>>>>>>
40005>>>>>>>>>        Else Begin
40006>>>>>>>>>            Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLColumnValue"
40007>>>>>>>>>        End
40007>>>>>>>>>>
40007>>>>>>>>>        
40007>>>>>>>>>        Function_Return sResult
40008>>>>>>>>>        
40008>>>>>>>>>    End_Function
40009>>>>>>>>>    
40009>>>>>>>>>    // Add a file to the files used to place the statement result in.
40009>>>>>>>>>    Procedure SQLBindFile Integer iFileNum
40011>>>>>>>>>        Integer ihdbc
40011>>>>>>>>>        Integer ihstmt
40011>>>>>>>>>        Integer iVoid
40011>>>>>>>>>        String  sDrvrId
40011>>>>>>>>>        String  sFileType
40011>>>>>>>>>        Integer bIsOpen
40011>>>>>>>>>        
40011>>>>>>>>>        // Get the cli handles
40011>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40012>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40013>>>>>>>>>        Get psDriverId            to sDrvrId
40014>>>>>>>>>        
40014>>>>>>>>>        // If a file number is not passed see if we can use the statement's
40014>>>>>>>>>        // default file number which is usually set with SetFileConnection
40014>>>>>>>>>        If (iFileNum = 0) Begin
40016>>>>>>>>>            Get piBindFile to iFileNum
40017>>>>>>>>>            If (iFileNum = 0) Begin
40019>>>>>>>>>                // Logic error, if 0 is passed as filenumber, piBindFile should be set.
40019>>>>>>>>>                Send StmtError CLIERR_SQLINVALID_BIND_FILE "piBindFile should be set" "SQLBindFile"
40020>>>>>>>>>                
40020>>>>>>>>>                Move 0 to SQLResult
40021>>>>>>>>>                Procedure_Return
40022>>>>>>>>>            End
40022>>>>>>>>>>
40022>>>>>>>>>        End
40022>>>>>>>>>>
40022>>>>>>>>>        
40022>>>>>>>>>        // Bind the file
40022>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40024>>>>>>>>>            // Chek if the file is open
40024>>>>>>>>>            Get_Attribute DF_FILE_OPENED of iFileNum to bIsOpen
40027>>>>>>>>>            If (bIsOpen) Begin
40029>>>>>>>>>                // Check if the file has the correct type
40029>>>>>>>>>                Get_Attribute DF_FILE_DRIVER of iFileNum to sFileType
40032>>>>>>>>>                If (sFileType = sDrvrId) Begin
40034>>>>>>>>>                    // Call the driver function to add a file to a statement
40034>>>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLBINDFILE ;                        Callback Self ;                        Passing ihdbc iFileNum ihstmt ;                        Result iVoid
40039>>>>>>>>>                End
40039>>>>>>>>>>
40039>>>>>>>>>                Else ;                    Send StmtError CLIERR_SQLINVALID_BIND_FILE ("File" * String(iFileNum) * "type incompatible with statement ("  + sFileType + ")") "SQLBindFile"
40041>>>>>>>>>            End
40041>>>>>>>>>>
40041>>>>>>>>>            Else ;                Send StmtError CLIERR_SQLINVALID_BIND_FILE ("File not open (number =" * String(iFileNum) + ")") "SQLBindFile"
40043>>>>>>>>>        End
40043>>>>>>>>>>
40043>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLBindFile"
40045>>>>>>>>>    End_Procedure
40046>>>>>>>>>    
40046>>>>>>>>>    
40046>>>>>>>>>    
40046>>>>>>>>>    // Get data of a column.                                  
40046>>>>>>>>>    Function SQLGetData Integer iCol Integer iLen Returns String
40048>>>>>>>>>        Integer ihdbc
40048>>>>>>>>>        Integer ihstmt
40048>>>>>>>>>        Integer iVoid
40048>>>>>>>>>        Integer iColSize
40048>>>>>>>>>        Integer iResult
40048>>>>>>>>>        String  sDrvrId
40048>>>>>>>>>        WString wResult
40048>>>>>>>>>        String  sEmpty
40048>>>>>>>>>        Integer bLegalColumn
40048>>>>>>>>>        
40048>>>>>>>>>        Integer iVariableBufferLength
40048>>>>>>>>>        
40048>>>>>>>>>        // Initialize
40048>>>>>>>>>        Move "" to sEmpty
40049>>>>>>>>>        Move 0 to iResult
40050>>>>>>>>>        
40050>>>>>>>>>        // Get the cli handles
40050>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40051>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40052>>>>>>>>>        Get psDriverId            to sDrvrId
40053>>>>>>>>>        
40053>>>>>>>>>        // Get the data
40053>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40055>>>>>>>>>            // Check if the column exists
40055>>>>>>>>>            If (iCol >= 1 and iCol <= piColumnCount(Self)) Begin
40057>>>>>>>>>                If (iLen = 0) Begin
40059>>>>>>>>>                    Get SQLColumnValue iCol to wResult
40060>>>>>>>>>                End
40060>>>>>>>>>>
40060>>>>>>>>>                Else Begin
40061>>>>>>>>>                    // Add 1 for string terminator
40061>>>>>>>>>                    Move (iLen + 1) to iLen
40062>>>>>>>>>                    
40062>>>>>>>>>                    Get piVariableBufferLength to iVariableBufferLength
40063>>>>>>>>>                    If (iLen > iVariableBufferLength) Begin
40065>>>>>>>>>                        // Allocate
40065>>>>>>>>>                        Move (Repeat(' ', iLen)) to wResult
40066>>>>>>>>>                        
40066>>>>>>>>>                        Set piVariableBufferLength to iLen
40067>>>>>>>>>                        Set psVariableBuffer       to wResult
40068>>>>>>>>>                    End
40068>>>>>>>>>>
40068>>>>>>>>>                    Else Begin
40069>>>>>>>>>                        Get psVariableBuffer       to wResult
40070>>>>>>>>>                    End
40070>>>>>>>>>>
40070>>>>>>>>>                    
40070>>>>>>>>>                    
40070>>>>>>>>>                    // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
40070>>>>>>>>>                    // in the next FUNC_SQLCOLUMNVALUE call.
40070>>>>>>>>>                    // If hdbc and hstmt have not changed since the last call we don't have to set it.
40070>>>>>>>>>                    If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
40072>>>>>>>>>                        // Setup function arguments
40072>>>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                            Callback 0 ;                            Passing ihdbc iCol ihstmt ;                            Result iVoid
40077>>>>>>>>>                        Move ihstmt to giLastSQLhstmt
40078>>>>>>>>>                        Move ihdbc to giLastSQLhdbc
40079>>>>>>>>>                    End
40079>>>>>>>>>>
40079>>>>>>>>>                    
40079>>>>>>>>>                    Move False to Err
40080>>>>>>>>>                    // Call the driver function to get the data
40080>>>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLGETDATA ;                        Callback Self ;                        Passing iCol iLen (AddressOf(wResult)) ;                        Result iResult
40085>>>>>>>>>                    
40085>>>>>>>>>                    // If something went wrong, adjust the result
40085>>>>>>>>>                    If (Err) Begin
40087>>>>>>>>>                        Move 0 to iResult
40088>>>>>>>>>                    End
40088>>>>>>>>>>
40088>>>>>>>>>                    
40088>>>>>>>>>                    // SQL_NO_TOTAL (-4) Not all data retrieved. Unknown how much is left. 
40088>>>>>>>>>                    If (iResult = -4) Begin
40090>>>>>>>>>                        Move (SizeOfWString(wResult)) to iResult
40091>>>>>>>>>                    End
40091>>>>>>>>>>
40091>>>>>>>>>                End
40091>>>>>>>>>>
40091>>>>>>>>>            End
40091>>>>>>>>>>
40091>>>>>>>>>            Else Begin
40092>>>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLGetData"
40093>>>>>>>>>            End
40093>>>>>>>>>>
40093>>>>>>>>>        End
40093>>>>>>>>>>
40093>>>>>>>>>        Else Begin
40094>>>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLGetData"
40095>>>>>>>>>        End
40095>>>>>>>>>>
40095>>>>>>>>>        
40095>>>>>>>>>        // Fill global result
40095>>>>>>>>>        If (iResult > 0) Begin
40097>>>>>>>>>            Move 1 to SQLResult // SQLResult == 1 : Something was found
40098>>>>>>>>>        End
40098>>>>>>>>>>
40098>>>>>>>>>        Else Begin
40099>>>>>>>>>           Move 0 to SQLResult // SQLResult == 0 : no (more) data found
40100>>>>>>>>>        End
40100>>>>>>>>>>
40100>>>>>>>>>        
40100>>>>>>>>>        Function_Return (CString(wResult))
40101>>>>>>>>>    End_Function
40102>>>>>>>>>
40102>>>>>>>>>    // SQLGetDataToUChar (SQLGetData returning uchar array)
40102>>>>>>>>>    // Use for binary data and for character data containing Unicode non-bmp characters
40102>>>>>>>>>    Function SQLGetDataToUChar Integer iCol Integer iLen Returns UChar[]
40104>>>>>>>>>        Integer ihdbc
40104>>>>>>>>>        Integer ihstmt
40104>>>>>>>>>        Integer iVoid
40104>>>>>>>>>        Integer iColSize
40104>>>>>>>>>        Integer iResult
40104>>>>>>>>>        String  sDrvrId
40104>>>>>>>>>        UChar[] uaResult
40105>>>>>>>>>        
40105>>>>>>>>>        Integer iSQLType
40105>>>>>>>>>        Integer iBinaryType
40105>>>>>>>>>        Integer iLenArray
40105>>>>>>>>>        Integer iResizeSize
40105>>>>>>>>>        
40105>>>>>>>>>        Move 0 to iResult
40106>>>>>>>>>        
40106>>>>>>>>>        // Get the cli handles
40106>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40107>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40108>>>>>>>>>        Get psDriverId            to sDrvrId
40109>>>>>>>>>        
40109>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40111>>>>>>>>>            // Check if the column exists
40111>>>>>>>>>            If (iCol >= 1 and iCol <= piColumnCount(Self)) Begin
40113>>>>>>>>>                            
40113>>>>>>>>>                Get SQLColumnType iCol to iSQLType
40114>>>>>>>>>                If ( (iSQLType = SQL_BINARY) or (iSQLType = SQL_VARBINARY) or (iSQLType = SQL_LONGVARBINARY) ) Begin
40116>>>>>>>>>                    Move 1 to iBinaryType
40117>>>>>>>>>                End
40117>>>>>>>>>>
40117>>>>>>>>>                Else Begin
40118>>>>>>>>>                    Move 0 to iBinaryType 
40119>>>>>>>>>                End
40119>>>>>>>>>>
40119>>>>>>>>>    
40119>>>>>>>>>                If (iBinaryType) Begin
40121>>>>>>>>>                    Move (ResizeArray(uaResult,iLen)) to uaResult
40122>>>>>>>>>                End
40122>>>>>>>>>>
40122>>>>>>>>>                Else Begin
40123>>>>>>>>>                    // Character type
40123>>>>>>>>>                    // returned as wstring (2 bytes per character)
40123>>>>>>>>>                    // Add 1 for string terminator
40123>>>>>>>>>                    Move (iLen + 1) to iLen
40124>>>>>>>>>                    Move (iLen * 2) to iLenArray // wstring 2 bytes per char
40125>>>>>>>>>                    Move (ResizeArray(uaResult,iLenArray)) to uaResult
40126>>>>>>>>>                End
40126>>>>>>>>>>
40126>>>>>>>>>
40126>>>>>>>>>                // FUNC_SQLCOLUMNINFO will tell the driver which hdbc and hstmt to use
40126>>>>>>>>>                // in the next FUNC_SQLCOLUMNVALUE call.
40126>>>>>>>>>                If (ihstmt <> giLastSQLhstmt or ihdbc <> giLastSQLhdbc) Begin
40128>>>>>>>>>                    // Setup function arguments
40128>>>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                        Callback 0 ;                        Passing ihdbc iCol ihstmt ;                        Result iVoid
40133>>>>>>>>>                    Move ihstmt to giLastSQLhstmt
40134>>>>>>>>>                    Move ihdbc to giLastSQLhdbc
40135>>>>>>>>>                End
40135>>>>>>>>>>
40135>>>>>>>>>                
40135>>>>>>>>>                Move False to Err
40136>>>>>>>>>                
40136>>>>>>>>>                // Call the driver function to get the data
40136>>>>>>>>>                // iResult will be the length of the data in bytes 
40136>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLGETDATA ;                    Callback Self ;                    Passing iCol iLen (AddressOf(uaResult[0])) ;                    Result iResult
40141>>>>>>>>>                
40141>>>>>>>>>                // If something went wrong, adjust the result
40141>>>>>>>>>                If (Err) Begin
40143>>>>>>>>>                    Move 0 to iResult
40144>>>>>>>>>                End
40144>>>>>>>>>>
40144>>>>>>>>>                
40144>>>>>>>>>                // SQL_NO_TOTAL (-4) Not all data retrieved. Unknown how much is left. 
40144>>>>>>>>>                If (iResult = -4) Begin
40146>>>>>>>>>                    Move (SizeOfArray(uaResult)) to iResult
40147>>>>>>>>>                End
40147>>>>>>>>>>
40147>>>>>>>>>                
40147>>>>>>>>>                If (iBinaryType) Begin
40149>>>>>>>>>                    If (iResult < iLen) Begin
40151>>>>>>>>>                        Move (ResizeArray(uaResult,iResult)) to uaResult
40152>>>>>>>>>                    End
40152>>>>>>>>>>
40152>>>>>>>>>                End
40152>>>>>>>>>>
40152>>>>>>>>>                Else Begin
40153>>>>>>>>>                    // Character data
40153>>>>>>>>>                    //   iResult has length of data in bytes (without zero terminator)
40153>>>>>>>>>                    //   uaResult will have data + zero terminator
40153>>>>>>>>>                    If (iResult < (iLenArray - 2) ) Begin
40155>>>>>>>>>                        // Received less than requested, strip off trailing zeroes.
40155>>>>>>>>>                        Move iResult to iResizeSize
40156>>>>>>>>>                    End
40156>>>>>>>>>>
40156>>>>>>>>>                    Else Begin
40157>>>>>>>>>                        // Strip off zero terminator
40157>>>>>>>>>                        Move (iLenArray - 2) to iResizeSize
40158>>>>>>>>>                    End
40158>>>>>>>>>>
40158>>>>>>>>>                    
40158>>>>>>>>>                    Move (ResizeArray(uaResult,iResizeSize)) to uaResult
40159>>>>>>>>>                    
40159>>>>>>>>>                End
40159>>>>>>>>>>
40159>>>>>>>>>            End
40159>>>>>>>>>>
40159>>>>>>>>>            Else Begin
40160>>>>>>>>>                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLGetData"
40161>>>>>>>>>            End
40161>>>>>>>>>>
40161>>>>>>>>>        End
40161>>>>>>>>>>
40161>>>>>>>>>        Else Begin
40162>>>>>>>>>            Send HandleError ihstmt ihdbc sDrvrId "SQLGetData"
40163>>>>>>>>>        End
40163>>>>>>>>>>
40163>>>>>>>>>        
40163>>>>>>>>>        // Fill global result
40163>>>>>>>>>        If (iResult > 0) Begin
40165>>>>>>>>>            Move 1 to SQLResult // SQLResult == 1 : Something was found
40166>>>>>>>>>        End
40166>>>>>>>>>>
40166>>>>>>>>>        Else Begin
40167>>>>>>>>>           Move 0 to SQLResult // SQLResult == 0 : no (more) data found
40168>>>>>>>>>        End
40168>>>>>>>>>>
40168>>>>>>>>>        
40168>>>>>>>>>        Function_Return uaResult
40169>>>>>>>>>
40169>>>>>>>>>    End_Function
40170>>>>>>>>>    
40170>>>>>>>>>    
40170>>>>>>>>>    // Map a column name to a number, if the name id not found no
40170>>>>>>>>>    // error is generated the returned number will be 0 (zero) in
40170>>>>>>>>>    // that case
40170>>>>>>>>>    Function SQLColumnMap String sColname Returns Integer
40172>>>>>>>>>        Integer ihdbc
40172>>>>>>>>>        Integer ihstmt
40172>>>>>>>>>        Integer iNumColumns
40172>>>>>>>>>        Integer iColCount
40172>>>>>>>>>        Integer iColNum
40172>>>>>>>>>        String  sDrvrId
40172>>>>>>>>>        String  sCurColName
40172>>>>>>>>>        
40172>>>>>>>>>        // Get the cli handles
40172>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40173>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40174>>>>>>>>>        Get psDriverId            to sDrvrId
40175>>>>>>>>>        
40175>>>>>>>>>        // Get the number by looping through the column names
40175>>>>>>>>>        Move 0 to iColNum
40176>>>>>>>>>        Get SQLPrivateStmtAttribute SQLSTMTATTRIB_COLUMNCOUNT ihdbc sDrvrId ihstmt to iNumColumns
40177>>>>>>>>>        For iColCount from 1 to iNumColumns
40183>>>>>>>>>>
40183>>>>>>>>>            Get SQLPrivateColAttribute iColCount SQLCOLATTRIB_LABEL ihdbc sDrvrId ihstmt to sCurColName
40184>>>>>>>>>            If (Uppercase(Trim(sColName)) = Uppercase(Trim(sCurColName))) ;                Move iColCount to iColNum
40187>>>>>>>>>            
40187>>>>>>>>>            If (iColNum) ;                Break
40190>>>>>>>>>        Loop
40191>>>>>>>>>>
40191>>>>>>>>>        
40191>>>>>>>>>        Function_Return iColNum
40192>>>>>>>>>    End_Function
40193>>>>>>>>>    
40193>>>>>>>>>    
40193>>>>>>>>>    // SQLStmtAttribute
40193>>>>>>>>>    // Moved to SQLGetStatementAttribute. 
40193>>>>>>>>>    // This function is still here for backward compatibility.
40193>>>>>>>>>
40193>>>>>>>>>    Function SQLStmtAttribute Integer iAttribId Returns String
40195>>>>>>>>>        String  sResult
40195>>>>>>>>>
40195>>>>>>>>>        Get SQLGetStmtAttribute iAttribId to sResult        
40196>>>>>>>>>        
40196>>>>>>>>>        Function_Return sResult
40197>>>>>>>>>    End_Function
40198>>>>>>>>>
40198>>>>>>>>> 
40198>>>>>>>>>   Function SQLGetStmtAttribute Integer iAttribId Returns String
40200>>>>>>>>>        Integer ihdbc
40200>>>>>>>>>        Integer ihstmt
40200>>>>>>>>>        String  sResult
40200>>>>>>>>>        String  sDrvrId
40200>>>>>>>>>        
40200>>>>>>>>>        // Initialize
40200>>>>>>>>>        Move "" to sResult
40201>>>>>>>>>        
40201>>>>>>>>>        // Get the cli handles
40201>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40202>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40203>>>>>>>>>        Get psDriverId            to sDrvrId
40204>>>>>>>>>        
40204>>>>>>>>>        // Get the attribute
40204>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") ;            Get SQLPrivateStmtAttribute iAttribId ihdbc sDrvrId ihstmt to sResult
40207>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLGetStmtAttribute"
40209>>>>>>>>>        
40209>>>>>>>>>        Function_Return sResult
40210>>>>>>>>>    End_Function
40211>>>>>>>>>
40211>>>>>>>>>    
40211>>>>>>>>>    Procedure SQLSetStmtAttribute Integer iAttribId String sAttribValue 
40213>>>>>>>>>
40213>>>>>>>>>        Integer ihdbc
40213>>>>>>>>>        Integer ihstmt
40213>>>>>>>>>        String  sDrvrId
40213>>>>>>>>>        
40213>>>>>>>>>        Integer iLen
40213>>>>>>>>>        Integer bLegalAttrib
40213>>>>>>>>>        Integer iVoid
40213>>>>>>>>>        Integer iAttribValue
40213>>>>>>>>>
40213>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40214>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40215>>>>>>>>>        Get psDriverId            to sDrvrId
40216>>>>>>>>>        
40216>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40218>>>>>>>>>            Case Begin
40218>>>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_CURSOR_TYPE)
40220>>>>>>>>>                    Move DFTRUE to bLegalAttrib
40221>>>>>>>>>                    Break
40222>>>>>>>>>                    
40222>>>>>>>>>                Case Else
40222>>>>>>>>>                    Move DFFALSE to bLegalAttrib
40223>>>>>>>>>                    Send SQLIllegalAttribute ("Attribute is = " + String(iAttribId) + ")") "SQLSetStmtAttribute"
40224>>>>>>>>>            Case End
40224>>>>>>>>>
40224>>>>>>>>>            If (bLegalAttrib) Begin
40226>>>>>>>>>                If (iAttribId = SQLSTMTATTRIB_CURSOR_TYPE) Begin
40228>>>>>>>>>                    
40228>>>>>>>>>                    Move sAttribValue to iAttribValue // Check numeric?
40229>>>>>>>>>                    Case Begin
40229>>>>>>>>>                        Case (iAttribValue = SQL_CURSOR_FORWARD_ONLY)
40231>>>>>>>>>                        Case (iAttribValue = SQL_CURSOR_DYNAMIC)
40234>>>>>>>>>                        Case (iAttribValue = SQL_CURSOR_KEYSET_DRIVEN)
40237>>>>>>>>>                        Case (iAttribValue = SQL_CURSOR_STATIC)
40240>>>>>>>>>                            Break
40241>>>>>>>>>                            
40241>>>>>>>>>                        Case Else
40241>>>>>>>>>                            Move DFFALSE to bLegalAttrib
40242>>>>>>>>>                            Send StmtError CLIERR_SQLINVALID_ATTRIBUTE (SFormat("Invalid value for SQLSTMTATTRIB_CURSOR_TYPE: %1", iAttribValue)) "SQLSetStmtAttribute"
40243>>>>>>>>>
40243>>>>>>>>>                    Case End
40243>>>>>>>>>                End
40243>>>>>>>>>>
40243>>>>>>>>>            End
40243>>>>>>>>>>
40243>>>>>>>>>
40243>>>>>>>>>            
40243>>>>>>>>>            If (bLegalAttrib) Begin
40245>>>>>>>>>                
40245>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                    Callback Self ;                    Passing ihdbc iVoid ihstmt ;                    Result iVoid
40250>>>>>>>>>                
40250>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLSETSTMTINTATTRIB ;                    Callback Self ;                    Passing iAttribId iAttribValue 0 ;                    Result iVoid
40255>>>>>>>>>            End
40255>>>>>>>>>>
40255>>>>>>>>>        End
40255>>>>>>>>>>
40255>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLPrivateStmtAttribute"
40257>>>>>>>>>        
40257>>>>>>>>>        
40257>>>>>>>>>        
40257>>>>>>>>>    End_Procedure
40258>>>>>>>>>    
40258>>>>>>>>>    
40258>>>>>>>>>    
40258>>>>>>>>>    Function SQLPrivateStmtAttribute Integer iAttribId Integer ihdbc String sDrvrId Integer ihstmt Returns String
40260>>>>>>>>>        String  sResult
40260>>>>>>>>>        Integer iLen
40260>>>>>>>>>        Integer bLegalAttrib
40260>>>>>>>>>        
40260>>>>>>>>>        // Initialize
40260>>>>>>>>>        Move ""     to sResult
40261>>>>>>>>>        
40261>>>>>>>>>        // Get the attribute
40261>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40263>>>>>>>>>            Case Begin
40263>>>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_COLUMNCOUNT)
40265>>>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_ROWCOUNT)
40268>>>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_ROWCOUNT_TYPE)
40271>>>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_NUMMESSAGES)
40274>>>>>>>>>                Case (iAttribId = SQLSTMTATTRIB_CURSOR_TYPE)
40277>>>>>>>>>                    Move DFTRUE to bLegalAttrib
40278>>>>>>>>>                    Break
40279>>>>>>>>>                    
40279>>>>>>>>>                Case Else
40279>>>>>>>>>                    Move DFFALSE to bLegalAttrib
40280>>>>>>>>>                    Send SQLIllegalAttribute ("Attribute is = " + String(iAttribId) + ")") "SQLPrivateStmtAttribute"
40281>>>>>>>>>            Case End
40281>>>>>>>>>            
40281>>>>>>>>>            If (bLegalAttrib) Begin
40283>>>>>>>>>                // Setup function arguments
40283>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLSTMTINTATTRIB ;                    Callback Self ;                    Passing ihdbc iAttribId ihstmt ;                    Result sResult
40288>>>>>>>>>            End
40288>>>>>>>>>>
40288>>>>>>>>>        End
40288>>>>>>>>>>
40288>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLPrivateStmtAttribute"
40290>>>>>>>>>        
40290>>>>>>>>>        Function_Return sResult
40291>>>>>>>>>    End_Function
40292>>>>>>>>>    
40292>>>>>>>>>    
40292>>>>>>>>>    
40292>>>>>>>>>    // Get a column's attribute
40292>>>>>>>>>    Function SQLColAttribute Integer iCol Integer iAttribId Returns String
40294>>>>>>>>>        Integer ihdbc
40294>>>>>>>>>        Integer ihstmt
40294>>>>>>>>>        String  sResult
40294>>>>>>>>>        String  sDrvrId
40294>>>>>>>>>        
40294>>>>>>>>>        // Initialize
40294>>>>>>>>>        Move "" to sResult
40295>>>>>>>>>        
40295>>>>>>>>>        // Get the cli handles
40295>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40296>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40297>>>>>>>>>        Get psDriverId            to sDrvrId
40298>>>>>>>>>        
40298>>>>>>>>>        // Get the attribute
40298>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") ;            Get SQLPrivateColAttribute iCol iAttribId ihdbc sDrvrId ihstmt to sResult
40301>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLColAttribute"
40303>>>>>>>>>        
40303>>>>>>>>>        Function_Return sResult
40304>>>>>>>>>    End_Function
40305>>>>>>>>>    
40305>>>>>>>>>    Function SQLPrivateColAttribute Integer iCol Integer iAttribId Integer ihdbc String sDrvrId Integer ihstmt Returns String
40307>>>>>>>>>        String  sResult
40307>>>>>>>>>        String  sEmpty
40307>>>>>>>>>        Integer bIsStringAttribute
40307>>>>>>>>>        Integer iLen
40307>>>>>>>>>        Integer iVoid
40307>>>>>>>>>        Integer bLegalAttrib
40307>>>>>>>>>        Integer bLegalColumn
40307>>>>>>>>>        
40307>>>>>>>>>        // Initialize
40307>>>>>>>>>        Move "" to sResult
40308>>>>>>>>>        Move "" to sEmpty
40309>>>>>>>>>        Move 0  to iLen
40310>>>>>>>>>        
40310>>>>>>>>>        // Get the attribute
40310>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40312>>>>>>>>>            Get SQLPrivateColumnIsLegal ihdbc sDrvrId ihstmt iCol to bLegalColumn
40313>>>>>>>>>            If (bLegalColumn) Begin
40315>>>>>>>>>                // Determine the atributes type
40315>>>>>>>>>                Case Begin
40315>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_SIZE)
40317>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_LENGTH)
40320>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_PRECISION)
40323>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_SQLTYPE)
40326>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_NULLABLE)
40329>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_DFTYPE)
40332>>>>>>>>>                        Move DFFALSE to bIsStringAttribute
40333>>>>>>>>>                        Move DFTRUE to bLegalAttrib
40334>>>>>>>>>                        Break
40335>>>>>>>>>                        
40335>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_LABEL)
40338>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_BASECOLUMNNAME)
40341>>>>>>>>>                    Case (iAttribId = SQLCOLATTRIB_BASETABLENAME)
40344>>>>>>>>>                        Move DFTRUE to bIsStringAttribute
40345>>>>>>>>>                        Move DFTRUE to bLegalAttrib
40346>>>>>>>>>                        Break
40347>>>>>>>>>                        
40347>>>>>>>>>                    Case Else
40347>>>>>>>>>                        Move DFFALSE to bLegalAttrib
40348>>>>>>>>>                        Send SQLIllegalAttribute ("Attribute is = " + String(iAttribId) + ")") "SQLPrivateColAttribute"
40349>>>>>>>>>                Case End
40349>>>>>>>>>                
40349>>>>>>>>>                If (bLegalAttrib) Begin
40351>>>>>>>>>                    // Setup function arguments
40351>>>>>>>>>                    Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                        Callback Self ;                        Passing ihdbc iCol ihstmt ;                        Result iVoid
40356>>>>>>>>>                    
40356>>>>>>>>>                    If (bIsStringAttribute) Begin
40358>>>>>>>>>                        // Call the driver function to get the data length
40358>>>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLCOLSTRINGATTRIBLEN ;                            Callback Self ;                            Passing sEmpty sEmpty iAttribId ;                            Result iLen
40363>>>>>>>>>                        
40363>>>>>>>>>                        If (iLen) Begin
40365>>>>>>>>>                            // Allocate
40365>>>>>>>>>                            Move (Repeat(' ', iLen)) to sResult
40366>>>>>>>>>                            
40366>>>>>>>>>                            // Call the driver function to get the name
40366>>>>>>>>>                            Call_Driver 0 sDrvrId Function FUNC_SQLCOLSTRINGATTRIB ;                                Callback Self ;                                Passing sResult sEmpty iAttribId ;                                Result iVoid
40371>>>>>>>>>                        End
40371>>>>>>>>>>
40371>>>>>>>>>                    End
40371>>>>>>>>>>
40371>>>>>>>>>                    Else Begin
40372>>>>>>>>>                        // get the attribute
40372>>>>>>>>>                        Call_Driver 0 sDrvrId Function FUNC_SQLCOLINTATTRIB ;                            Callback Self ;                            Passing sEmpty sEmpty iAttribId ;                            Result sResult
40377>>>>>>>>>                    End
40377>>>>>>>>>>
40377>>>>>>>>>                End
40377>>>>>>>>>>
40377>>>>>>>>>            End
40377>>>>>>>>>>
40377>>>>>>>>>            Else ;                Send StmtError CLIERR_SQLINVALID_COLUMN ("(Column number = " + String(iCol) + ")") "SQLPrivateColAttribute"
40379>>>>>>>>>        End
40379>>>>>>>>>>
40379>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLPrivateColAttribute"
40381>>>>>>>>>        
40381>>>>>>>>>        Function_Return sResult
40382>>>>>>>>>    End_Function
40383>>>>>>>>>    
40383>>>>>>>>>    
40383>>>>>>>>>    // Preapre for calling a stored procedure, pass the procedure name.
40383>>>>>>>>>    Procedure SQLSetProcedureName String sProcName String sSchemaArg
40385>>>>>>>>>        Integer ihdbc
40385>>>>>>>>>        Integer ihstmt
40385>>>>>>>>>        String  sDrvrId
40385>>>>>>>>>        Integer iVoid
40385>>>>>>>>>        String  sSchema
40385>>>>>>>>>        String  sEmpty
40385>>>>>>>>>        
40385>>>>>>>>>        // Initialize
40385>>>>>>>>>        Move "" to sEmpty
40386>>>>>>>>>        
40386>>>>>>>>>        // Get the cli handles
40386>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40387>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40388>>>>>>>>>        Get psDriverId            to sDrvrId
40389>>>>>>>>>        
40389>>>>>>>>>        // Call the procedure
40389>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40391>>>>>>>>>            If (Num_Arguments >= 2) ;                Move sSchemaArg to sSchema
40394>>>>>>>>>            Else ;                Move "" to sSchema
40396>>>>>>>>>            
40396>>>>>>>>>            If (sSchema <> "") Begin
40398>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLSETPROCSCHEMA ;                    Callback Self ;                    Passing ihdbc sSchema ihstmt ;                    Result iVoid
40403>>>>>>>>>            End
40403>>>>>>>>>>
40403>>>>>>>>>            
40403>>>>>>>>>            // Call the procedure
40403>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLSETPROCNAME ;                Callback Self ;                Passing ihdbc sProcName ihstmt ;                Result iVoid
40408>>>>>>>>>            
40408>>>>>>>>>            Set piLastArgument to 0
40409>>>>>>>>>        End
40409>>>>>>>>>>
40409>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLSetProcedurename"
40411>>>>>>>>>    End_Procedure
40412>>>>>>>>>    
40412>>>>>>>>>    // Pass the next argument
40412>>>>>>>>>    Procedure SQLSetNextArgument String sArgument
40414>>>>>>>>>        Integer iArgnum
40414>>>>>>>>>        
40414>>>>>>>>>        Get piLastArgument to iArgnum
40415>>>>>>>>>        Increment iArgnum
40416>>>>>>>>>        Send SQLSetArgument iArgnum sArgument
40417>>>>>>>>>        Set piLastArgument to iArgnum
40418>>>>>>>>>    End_Procedure
40419>>>>>>>>>    
40419>>>>>>>>>    
40419>>>>>>>>>    
40419>>>>>>>>>    // Set the next argument
40419>>>>>>>>>    Procedure SQLSetArgument Integer iArgnum String sArgument
40421>>>>>>>>>        Integer ihdbc
40421>>>>>>>>>        Integer ihstmt
40421>>>>>>>>>        String  sDrvrId
40421>>>>>>>>>        Integer iVoid
40421>>>>>>>>>        String  sEmpty
40421>>>>>>>>>        
40421>>>>>>>>>        // Initialize
40421>>>>>>>>>        Move "" to sEmpty
40422>>>>>>>>>        
40422>>>>>>>>>        // Get the cli handles
40422>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40423>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40424>>>>>>>>>        Get psDriverId            to sDrvrId
40425>>>>>>>>>        
40425>>>>>>>>>        // Call the procedure
40425>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40427>>>>>>>>>            // Pass the information
40427>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback Self ;                Passing ihdbc iArgnum ihstmt ;                Result iVoid
40432>>>>>>>>>            
40432>>>>>>>>>            // Pass the argument
40432>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLSETPROCARG ;                Callback Self ;                Passing sArgument sEmpty 0 ;                Result iVoid
40437>>>>>>>>>        End
40437>>>>>>>>>>
40437>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLSetArgument"
40439>>>>>>>>>    End_Procedure
40440>>>>>>>>>    
40440>>>>>>>>>    Procedure SQLSetNextParameter String sParamValue Integer iParamType
40442>>>>>>>>>        Integer iParamNum 
40442>>>>>>>>>        Integer iType
40442>>>>>>>>>        
40442>>>>>>>>>        If (num_arguments < 2) Begin
40444>>>>>>>>>            Move typeString to iType
40445>>>>>>>>>        End
40445>>>>>>>>>>
40445>>>>>>>>>        Else Begin
40446>>>>>>>>>            Move iParamType to iType
40447>>>>>>>>>        End
40447>>>>>>>>>>
40447>>>>>>>>>        
40447>>>>>>>>>        Get piLastArgument to iParamNum
40448>>>>>>>>>        Increment iParamNum
40449>>>>>>>>>        Send SQLSetParameter iParamNum sParamValue iType
40450>>>>>>>>>        Set piLastArgument to iParamNum
40451>>>>>>>>>    End_Procedure
40452>>>>>>>>>
40452>>>>>>>>>    Procedure SQLSetParameter Integer iParamNum String sParamValue Integer iParamType
40454>>>>>>>>>        
40454>>>>>>>>>        Integer ihdbc
40454>>>>>>>>>        Integer ihstmt
40454>>>>>>>>>        String  sDrvrId
40454>>>>>>>>>        Integer iVoid
40454>>>>>>>>>        String  sEmpty
40454>>>>>>>>>        Integer iType
40454>>>>>>>>>        
40454>>>>>>>>>        If (num_arguments < 3) Begin
40456>>>>>>>>>            Move typeString to iType
40457>>>>>>>>>        End
40457>>>>>>>>>>
40457>>>>>>>>>        Else Begin
40458>>>>>>>>>            Move iParamType to iType
40459>>>>>>>>>        End
40459>>>>>>>>>>
40459>>>>>>>>>        
40459>>>>>>>>>        Case Begin
40459>>>>>>>>>            Case (iType = typeDate )    
40461>>>>>>>>>
40461>>>>>>>>>                If (sParamValue <> "") Begin
40463>>>>>>>>>                    ConvertToXml typeDate sParamValue to sParamValue
40464>>>>>>>>>                End
40464>>>>>>>>>>
40464>>>>>>>>>                
40464>>>>>>>>>                Break
40465>>>>>>>>>
40465>>>>>>>>>            Case (iType = typeDatetime )    
40468>>>>>>>>>
40468>>>>>>>>>                If (sParamValue <> "") Begin
40470>>>>>>>>>                    ConvertToXml esqlDatetime sParamValue to sParamValue
40471>>>>>>>>>                    Move (Replace('T',sParamValue,' ')) to sParamValue 
40472>>>>>>>>>                End
40472>>>>>>>>>>
40472>>>>>>>>>
40472>>>>>>>>>                Break
40473>>>>>>>>>
40473>>>>>>>>>            Case (iType = typeNumber )    
40476>>>>>>>>>
40476>>>>>>>>>                If (sParamValue <> "") Begin
40478>>>>>>>>>                    ConvertToXml typeNumber sParamValue to sParamValue
40479>>>>>>>>>                End
40479>>>>>>>>>>
40479>>>>>>>>>                
40479>>>>>>>>>                Break
40480>>>>>>>>>            
40480>>>>>>>>>            Case (iType = typeTime )    
40483>>>>>>>>>
40483>>>>>>>>>                If (sParamValue <> "") Begin
40485>>>>>>>>>                    ConvertToXml esqlTime sParamValue to sParamValue
40486>>>>>>>>>                End
40486>>>>>>>>>>
40486>>>>>>>>>                
40486>>>>>>>>>                Break
40487>>>>>>>>>                
40487>>>>>>>>>            Case Else
40487>>>>>>>>>                    // sParamValue is a string type or a type that must be passed as a string
40487>>>>>>>>>                    Break
40488>>>>>>>>>                
40488>>>>>>>>>        Case End
40488>>>>>>>>>        
40488>>>>>>>>>        
40488>>>>>>>>>        // Initialize
40488>>>>>>>>>        Move "" to sEmpty
40489>>>>>>>>>        
40489>>>>>>>>>        // Get the cli handles
40489>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40490>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40491>>>>>>>>>        Get psDriverId            to sDrvrId
40492>>>>>>>>>        
40492>>>>>>>>>        // Call the procedure
40492>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40494>>>>>>>>>            // Pass the information
40494>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback Self ;                Passing ihdbc iParamnum ihstmt ;                Result iVoid
40499>>>>>>>>>            
40499>>>>>>>>>            // Pass the argument
40499>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLSETPROCARG ;                Callback Self ;                Passing sParamValue sEmpty 0 ;                Result iVoid
40504>>>>>>>>>        End
40504>>>>>>>>>>
40504>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLSetParameter"
40506>>>>>>>>>    End_Procedure
40507>>>>>>>>>    
40507>>>>>>>>>    
40507>>>>>>>>>    // Call a stored procedure
40507>>>>>>>>>    Procedure SQLCall
40509>>>>>>>>>        Integer ihdbc
40509>>>>>>>>>        Integer ihstmt
40509>>>>>>>>>        String  sDrvrId
40509>>>>>>>>>        Integer iVoid
40509>>>>>>>>>        String  sEmpty
40509>>>>>>>>>        
40509>>>>>>>>>        // Initialize
40509>>>>>>>>>        Move "" to sEmpty
40510>>>>>>>>>        
40510>>>>>>>>>        // Get the cli handles
40510>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40511>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40512>>>>>>>>>        Get psDriverId            to sDrvrId
40513>>>>>>>>>        
40513>>>>>>>>>        // Call the procedure
40513>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40515>>>>>>>>>            // Call the procedure
40515>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCALL ;                Callback Self ;                Passing ihdbc sEmpty ihstmt ;                Result iVoid
40520>>>>>>>>>            
40520>>>>>>>>>            Send SQLGetStatementAttributes
40521>>>>>>>>>            Set piLastArgument to 0
40522>>>>>>>>>        End
40522>>>>>>>>>>
40522>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLCall"
40524>>>>>>>>>    End_Procedure
40525>>>>>>>>>    
40525>>>>>>>>>    
40525>>>>>>>>>    // Get the next argument
40525>>>>>>>>>    Function SQLGetNextArgument Returns String
40527>>>>>>>>>        Integer iArgnum
40527>>>>>>>>>        String  sResult
40527>>>>>>>>>        
40527>>>>>>>>>        Get piLastArgument to iArgnum
40528>>>>>>>>>        Increment iArgnum
40529>>>>>>>>>        Get SQLGetArgument iArgnum to sResult
40530>>>>>>>>>        Set piLastArgument to iArgnum
40531>>>>>>>>>        
40531>>>>>>>>>        Function_Return sResult
40532>>>>>>>>>    End_Function
40533>>>>>>>>>    
40533>>>>>>>>>    
40533>>>>>>>>>    
40533>>>>>>>>>    // Get the specified argument from a procedure
40533>>>>>>>>>    Function SQLGetArgument Integer iArgnum Returns String
40535>>>>>>>>>        Integer ihdbc
40535>>>>>>>>>        Integer ihstmt
40535>>>>>>>>>        String  sDrvrId
40535>>>>>>>>>        Integer iVoid
40535>>>>>>>>>        String  sEmpty
40535>>>>>>>>>        String  sArgument
40535>>>>>>>>>        Integer iLen
40535>>>>>>>>>        
40535>>>>>>>>>        // Initialize
40535>>>>>>>>>        Move "" to sEmpty
40536>>>>>>>>>        Move "" to sArgument
40537>>>>>>>>>        
40537>>>>>>>>>        // Get the cli handles
40537>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40538>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40539>>>>>>>>>        Get psDriverId            to sDrvrId
40540>>>>>>>>>        
40540>>>>>>>>>        // Call the procedure
40540>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40542>>>>>>>>>            // Pass the information
40542>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback Self ;                Passing ihdbc iArgnum ihstmt ;                Result iVoid
40547>>>>>>>>>            
40547>>>>>>>>>            // Get the length
40547>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLGETPROCARGLEN ;                Callback Self ;                Passing sEmpty sEmpty 0 ;                Result iLen
40552>>>>>>>>>            
40552>>>>>>>>>            If (iLen) Begin
40554>>>>>>>>>                // Allocate
40554>>>>>>>>>                Move (Repeat(' ', iLen)) to sArgument
40555>>>>>>>>>                
40555>>>>>>>>>                // Pass the argument
40555>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLGETPROCARG ;                    Callback Self ;                    Passing sArgument sEmpty 0 ;                    Result iVoid
40560>>>>>>>>>            End
40560>>>>>>>>>>
40560>>>>>>>>>        End
40560>>>>>>>>>>
40560>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLGetArgument"
40562>>>>>>>>>        
40562>>>>>>>>>        Function_Return sArgument
40563>>>>>>>>>    End_Function
40564>>>>>>>>>    
40564>>>>>>>>>    
40564>>>>>>>>>    // Get the return value of a stored function
40564>>>>>>>>>    Function SQLReturnValue Returns String
40566>>>>>>>>>        Integer ihdbc
40566>>>>>>>>>        Integer ihstmt
40566>>>>>>>>>        String  sDrvrId
40566>>>>>>>>>        Integer iVoid
40566>>>>>>>>>        String  sEmpty
40566>>>>>>>>>        String  sRetval
40566>>>>>>>>>        Integer iLen
40566>>>>>>>>>        
40566>>>>>>>>>        // Initialize
40566>>>>>>>>>        Move "" to sEmpty
40567>>>>>>>>>        Move "" to sRetval
40568>>>>>>>>>        
40568>>>>>>>>>        // Get the cli handles
40568>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40569>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40570>>>>>>>>>        Get psDriverId            to sDrvrId
40571>>>>>>>>>        
40571>>>>>>>>>        // Call the procedure
40571>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40573>>>>>>>>>            // Get the length
40573>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLGETPROCRETVALLEN ;                Callback Self ;                Passing ihdbc sEmpty ihstmt  ;                Result iLen
40578>>>>>>>>>            
40578>>>>>>>>>            If (iLen) Begin
40580>>>>>>>>>                // Allocate
40580>>>>>>>>>                Move (Repeat(' ', iLen)) to sRetval
40581>>>>>>>>>                
40581>>>>>>>>>                // Pass the argument
40581>>>>>>>>>                Call_Driver 0 sDrvrId Function FUNC_SQLGETPROCRETVAL ;                    Callback Self ;                    Passing ihdbc sRetval ihstmt ;                    Result iVoid
40586>>>>>>>>>            End
40586>>>>>>>>>>
40586>>>>>>>>>        End
40586>>>>>>>>>>
40586>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLReturnValue"
40588>>>>>>>>>        
40588>>>>>>>>>        Function_Return sRetval
40589>>>>>>>>>    End_Function
40590>>>>>>>>>    
40590>>>>>>>>>    
40590>>>>>>>>>    // Switch to the next set
40590>>>>>>>>>    // Returns : 0   = No more result sets
40590>>>>>>>>>    //     <>0 = Switched to next set
40590>>>>>>>>>    Function SQLNextResultSet Returns Integer
40592>>>>>>>>>        Integer ihdbc
40592>>>>>>>>>        Integer ihstmt
40592>>>>>>>>>        String  sDrvrId
40592>>>>>>>>>        Integer iResult
40592>>>>>>>>>        String  sEmpty
40592>>>>>>>>>        
40592>>>>>>>>>        // Initialize
40592>>>>>>>>>        Move "" to sEmpty
40593>>>>>>>>>        Move 0  to iResult
40594>>>>>>>>>        
40594>>>>>>>>>        // Get the cli handles
40594>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40595>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40596>>>>>>>>>        Get psDriverId            to sDrvrId
40597>>>>>>>>>        
40597>>>>>>>>>        // Call the procedure
40597>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40599>>>>>>>>>            // Get the length
40599>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLNEXTRESULTSET ;                Callback Self ;                Passing ihdbc sEmpty ihstmt  ;                Result iResult
40604>>>>>>>>>            
40604>>>>>>>>>            Send SQLGetStatementAttributes
40605>>>>>>>>>            Set piLastArgument to 0
40606>>>>>>>>>        End
40606>>>>>>>>>>
40606>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLNextResultSet"
40608>>>>>>>>>        
40608>>>>>>>>>        Function_Return iResult
40609>>>>>>>>>    End_Function
40610>>>>>>>>>    
40610>>>>>>>>>    
40610>>>>>>>>>    // Setup a file that will be acivated after a succesfull
40610>>>>>>>>>    //fetch on the statement
40610>>>>>>>>>    Procedure SQLFetchActivatesBuffer Integer iFileNum Integer bState
40612>>>>>>>>>        Integer ihdbc
40612>>>>>>>>>        Integer ihstmt
40612>>>>>>>>>        String  sDrvrId
40612>>>>>>>>>        Integer iResult
40612>>>>>>>>>        Integer bIsOpen
40612>>>>>>>>>        Integer iVoid
40612>>>>>>>>>        String  sFileType
40612>>>>>>>>>        
40612>>>>>>>>>        // Check if file is open
40612>>>>>>>>>        Get_Attribute DF_FILE_OPENED of iFileNum to bIsOpen
40615>>>>>>>>>        If (bIsOpen) Begin
40617>>>>>>>>>            // Get the cli handles
40617>>>>>>>>>            Get phCLIStatementHandle  to ihstmt
40618>>>>>>>>>            Get phCLIConnectionHandle to ihdbc
40619>>>>>>>>>            Get psDriverId            to sDrvrId
40620>>>>>>>>>            
40620>>>>>>>>>            // Call the procedure
40620>>>>>>>>>            If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40622>>>>>>>>>                // Check if the file has the correct type
40622>>>>>>>>>                Get_Attribute DF_FILE_DRIVER of iFileNum to sFileType
40625>>>>>>>>>                If (sFileType = sDrvrId) Begin
40627>>>>>>>>>                    // Setup the buffer
40627>>>>>>>>>                    Call_Driver iFileNum sDrvrId Function FUNC_SQLBUFFERSTATUS ;                        Callback Self ;                        Passing ihdbc bState ihstmt  ;                        Result iVoid
40632>>>>>>>>>                End
40632>>>>>>>>>>
40632>>>>>>>>>                Else ;                    Send StmtError CLIERR_SQLINVALID_BIND_FILE ("File" * String(iFileNum) * "type incompatible with statement ("  + sFileType + ")") "SQLBindFile"
40634>>>>>>>>>            End
40634>>>>>>>>>>
40634>>>>>>>>>            Else ;                Send HandleError ihstmt ihdbc sDrvrId "SQLFetchActivatesBuffer"
40636>>>>>>>>>        End
40636>>>>>>>>>>
40636>>>>>>>>>        Else ;            Send StmtError CLIERR_SQLINVALID_BUFFER ("File not open (number =" * String(iFileNum) + ")") "SQLFetchActivatesBuffer"
40638>>>>>>>>>    End_Procedure
40639>>>>>>>>>    
40639>>>>>>>>>    
40639>>>>>>>>>    
40639>>>>>>>>>    Function SQLGetMessage Integer iMessageNum Returns String
40641>>>>>>>>>        Integer ihdbc
40641>>>>>>>>>        Integer ihstmt
40641>>>>>>>>>        String  sDrvrId
40641>>>>>>>>>        String  sMessage
40641>>>>>>>>>        Integer iVoid
40641>>>>>>>>>        
40641>>>>>>>>>        // Initialize
40641>>>>>>>>>        Move "" to sMessage
40642>>>>>>>>>        
40642>>>>>>>>>        // Get the cli handles
40642>>>>>>>>>        Get phCLIStatementHandle  to ihstmt
40643>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40644>>>>>>>>>        Get psDriverId            to sDrvrId
40645>>>>>>>>>        
40645>>>>>>>>>        // Call the procedure
40645>>>>>>>>>        If (ihstmt <> 0 and ihdbc <> 0 and sDrvrId <> "") Begin
40647>>>>>>>>>            // Setup function arguments
40647>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLCOLUMNINFO ;                Callback Self ;                Passing ihdbc iMessageNum ihstmt ;                Result iVoid
40652>>>>>>>>>            
40652>>>>>>>>>            Move (Repeat(' ', 1024)) to sMessage
40653>>>>>>>>>            // Get the length
40653>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLGETMESSAGE ;                Callback Self ;                Passing iVoid sMessage iVoid ;                Result iVoid
40658>>>>>>>>>        End
40658>>>>>>>>>>
40658>>>>>>>>>        Else ;            Send HandleError ihstmt ihdbc sDrvrId "SQLGetDiagRec"
40660>>>>>>>>>        
40660>>>>>>>>>        Function_Return sMessage
40661>>>>>>>>>    End_Function
40662>>>>>>>>>    
40662>>>>>>>>>    
40662>>>>>>>>>    
40662>>>>>>>>>    // Remove the component identifier from a diagnostic message
40662>>>>>>>>>    Function RemoveComponentIdentifier String sDiagMessage Returns String
40664>>>>>>>>>        While (Left(sDiagMessage, 1) = "[")
40668>>>>>>>>>            Move (Right(sDiagMessage, Length(sDiagMessage) - Pos("]", sDiagMessage))) to sDiagMessage
40669>>>>>>>>>        Loop
40670>>>>>>>>>>
40670>>>>>>>>>        
40670>>>>>>>>>        Function_Return sDiagMessage
40671>>>>>>>>>    End_Function
40672>>>>>>>>>    
40672>>>>>>>>>    
40672>>>>>>>>>    
40672>>>>>>>>>    // Convert a DataFlex date to a SQL Date. Use dummy zero dates.
40672>>>>>>>>>    Function DFDateToSQLDate Date dDFDate Integer iSQLType Returns String
40674>>>>>>>>>        
40674>>>>>>>>>        Integer iType
40674>>>>>>>>>        String  sSQLDate
40674>>>>>>>>>        Integer iOrgDateFmt
40674>>>>>>>>>        Integer iOrgDateSep
40674>>>>>>>>>        
40674>>>>>>>>>        String sDriverId
40674>>>>>>>>>        String sDummyZeroDate
40674>>>>>>>>>        String sDummyZeroDateMssqlDatetime
40674>>>>>>>>>        
40674>>>>>>>>>        // Change date format to military, SQL dates are military dates
40674>>>>>>>>>        Get_Attribute DF_DATE_FORMAT to iOrgDateFmt
40677>>>>>>>>>        Get_Attribute DF_DATE_SEPARATOR to iOrgDateSep
40680>>>>>>>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_MILITARY
40683>>>>>>>>>        Set_Attribute DF_DATE_SEPARATOR to (Ascii('-'))
40686>>>>>>>>>        
40686>>>>>>>>>        // We only need to convert if the date is 0
40686>>>>>>>>>        If (Integer(dDFDate = 0)) Begin
40688>>>>>>>>>            
40688>>>>>>>>>            If (num_arguments < 2) Begin
40690>>>>>>>>>                Move SQL_TYPE_TIMESTAMP to iType
40691>>>>>>>>>            End
40691>>>>>>>>>>
40691>>>>>>>>>            Else Begin
40692>>>>>>>>>                Move iSQLType to iType
40693>>>>>>>>>            End
40693>>>>>>>>>>
40693>>>>>>>>>            
40693>>>>>>>>>            
40693>>>>>>>>>            Get psDriverID to sDriverId
40694>>>>>>>>>            Get psDummyZeroDate to sDummyZeroDate
40695>>>>>>>>>            
40695>>>>>>>>>            If ( (iType = SQL_TYPE_TIMESTAMP) and (sDriverID = 'MSSQLDRV') ) Begin
40697>>>>>>>>>                Get psDummyZeroDateMssqlDatetime to sDummyZeroDateMssqlDatetime
40698>>>>>>>>>                Move sDummyZeroDateMssqlDatetime to sSQLDate
40699>>>>>>>>>            End
40699>>>>>>>>>>
40699>>>>>>>>>            Else Begin
40700>>>>>>>>>                Move sDummyZeroDate to sSQLDate
40701>>>>>>>>>            End
40701>>>>>>>>>>
40701>>>>>>>>>            
40701>>>>>>>>>        End
40701>>>>>>>>>>
40701>>>>>>>>>        Else Begin
40702>>>>>>>>>            Move dDFDate to sSQLDate
40703>>>>>>>>>        End
40703>>>>>>>>>>
40703>>>>>>>>>        
40703>>>>>>>>>        // Change date format back to original
40703>>>>>>>>>        Set_Attribute DF_DATE_FORMAT to iOrgDateFmt
40706>>>>>>>>>        Set_Attribute DF_DATE_SEPARATOR to iOrgDateSep
40709>>>>>>>>>        
40709>>>>>>>>>        Function_Return sSQLDate
40710>>>>>>>>>    End_Function
40711>>>>>>>>>    
40711>>>>>>>>>    
40711>>>>>>>>>    // Convert a SQL date to a DataFlex Date. Use dummy zero dates.
40711>>>>>>>>>    Function SQLDateToDFDate String sSQLDate Returns Date
40713>>>>>>>>>        
40713>>>>>>>>>        Integer iType
40713>>>>>>>>>        Date    dDFDate
40713>>>>>>>>>        Integer iOrgDateFmt
40713>>>>>>>>>        Integer iOrgDateSep
40713>>>>>>>>>        
40713>>>>>>>>>        String  sDriverId
40713>>>>>>>>>        String  sDummyZeroDate
40713>>>>>>>>>        String  sDummyZeroDateMssqlDatetime
40713>>>>>>>>>        
40713>>>>>>>>>        Get psDriverID to sDriverId
40714>>>>>>>>>        
40714>>>>>>>>>        Get psDummyZeroDate to sDummyZeroDate
40715>>>>>>>>>        Get psDummyZeroDateMssqlDatetime to sDummyZeroDateMssqlDatetime
40716>>>>>>>>>        
40716>>>>>>>>>        Get_Attribute DF_DATE_FORMAT to iOrgDateFmt
40719>>>>>>>>>        Get_Attribute DF_DATE_SEPARATOR to iOrgDateSep
40722>>>>>>>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_MILITARY
40725>>>>>>>>>        Set_Attribute DF_DATE_SEPARATOR to (Ascii('-'))
40728>>>>>>>>>        
40728>>>>>>>>>        Move (Left(sSQLDate,10)) to sSQLDate
40729>>>>>>>>>        
40729>>>>>>>>>        If ( (sSQLDate = sDummyZeroDate) or ;            ( (sDriverId = 'MSSQLDRV') and (sSQLDate = sDummyZeroDateMssqlDatetime) ) )  Begin
40731>>>>>>>>>            Move 0 to dDFDate
40732>>>>>>>>>        End
40732>>>>>>>>>>
40732>>>>>>>>>        Else Begin
40733>>>>>>>>>            Move sSQLDate to dDFDate
40734>>>>>>>>>        End
40734>>>>>>>>>>
40734>>>>>>>>>        
40734>>>>>>>>>        // Change date format back to original
40734>>>>>>>>>        Set_Attribute DF_DATE_FORMAT to iOrgDateFmt
40737>>>>>>>>>        Set_Attribute DF_DATE_SEPARATOR to iOrgDateSep
40740>>>>>>>>>        
40740>>>>>>>>>        Function_Return dDFDate
40741>>>>>>>>>    End_Function
40742>>>>>>>>>    
40742>>>>>>>>>End_Class
40743>>>>>>>>>
40743>>>>>>>>>
40743>>>>>>>>>// Connection object for embedded SQL                          
40743>>>>>>>>>// This provides the ability to create a connection for a driver.     
40743>>>>>>>>>// It will contain child statement objects                            
40743>>>>>>>>>
40743>>>>>>>>>Class cSQLConnection is a cObject
40744>>>>>>>>>    
40744>>>>>>>>>    Procedure Construct_object
40746>>>>>>>>>        Forward Send Construct_object
40748>>>>>>>>>        
40748>>>>>>>>>        Property Integer phCLIConnectionHandle       0
40749>>>>>>>>>        
40749>>>>>>>>>        Property String  psDriverID        ""
40750>>>>>>>>>        Property Integer piBindFile        0
40751>>>>>>>>>        
40751>>>>>>>>>        Property String psDummyZeroDate              '0001-01-01'
40752>>>>>>>>>        Property String psDummyZeroDateMssqlDatetime '1753-01-01'
40753>>>>>>>>>        
40753>>>>>>>>>    End_Procedure
40754>>>>>>>>>    
40754>>>>>>>>>    
40754>>>>>>>>>    
40754>>>>>>>>>    // Store basic information about the connection
40754>>>>>>>>>    Procedure StoreConnectionInfo Handle hCLIConnectionHandle String sDrvrId
40756>>>>>>>>>        
40756>>>>>>>>>        String sDummyZeroDate
40756>>>>>>>>>        Integer iDriverIndex
40756>>>>>>>>>        
40756>>>>>>>>>        Set phCLIConnectionHandle to hCLIConnectionHandle
40757>>>>>>>>>        Set psDriverID            to sDrvrId
40758>>>>>>>>>        
40758>>>>>>>>>        Case Begin
40758>>>>>>>>>            Case (sDrvrId = "MSSQLDRV")
40760>>>>>>>>>                Set psDummyZeroDate to '0001-01-01'
40761>>>>>>>>>                Set psDummyZeroDateMssqlDatetime to '1753-01-01'
40762>>>>>>>>>                Break
40763>>>>>>>>>            Case (sDrvrId = "DB2_DRV")
40766>>>>>>>>>                Set psDummyZeroDate to '0001-01-01'
40767>>>>>>>>>                Break
40768>>>>>>>>>            Case (sDrvrId = "ODBC_DRV")
40771>>>>>>>>>                Get DriverIndex "ODBC_DRV" to iDriverIndex
40772>>>>>>>>>                If (iDriverIndex <> 0) Begin
40774>>>>>>>>>                    Get_Attribute DF_DRIVER_DUMMY_ZERO_DATE_VALUE of iDriverIndex to sDummyZeroDate
40777>>>>>>>>>                End
40777>>>>>>>>>>
40777>>>>>>>>>                Else Begin
40778>>>>>>>>>                    Move '0001-01-01' to sDummyZeroDate
40779>>>>>>>>>                End
40779>>>>>>>>>>
40779>>>>>>>>>
40779>>>>>>>>>                Set psDummyZeroDate to sDummyZeroDate
40780>>>>>>>>>                Break
40781>>>>>>>>>                
40781>>>>>>>>>        Case End
40781>>>>>>>>>        
40781>>>>>>>>>    End_Procedure
40782>>>>>>>>>    
40782>>>>>>>>>    Function DriverIndex String sDriver Returns Integer
40784>>>>>>>>>        
40784>>>>>>>>>        String  sCurrentDriver
40784>>>>>>>>>        Integer iNumberOfDrivers iDriver iCount
40784>>>>>>>>>        
40784>>>>>>>>>        Move 0 to iDriver
40785>>>>>>>>>        
40785>>>>>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
40788>>>>>>>>>        For iCount from 1 to iNumberOfDrivers
40794>>>>>>>>>>
40794>>>>>>>>>            
40794>>>>>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
40797>>>>>>>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriver) ) Begin
40799>>>>>>>>>                Move iCount to iDriver
40800>>>>>>>>>            End
40800>>>>>>>>>>
40800>>>>>>>>>        Loop
40801>>>>>>>>>>
40801>>>>>>>>>        
40801>>>>>>>>>        Function_Return iDriver
40802>>>>>>>>>        
40802>>>>>>>>>    End_Function
40803>>>>>>>>>
40803>>>>>>>>>    
40803>>>>>>>>>    // Destroy the SQLConnection object
40803>>>>>>>>>    Procedure DestroySQLConnection
40805>>>>>>>>>        Send Destroy
40806>>>>>>>>>    End_Procedure
40807>>>>>>>>>    
40807>>>>>>>>>    
40807>>>>>>>>>    // Connect to a database server
40807>>>>>>>>>    // Returns : 1 Succesfully connected
40807>>>>>>>>>    //           0 Not connected
40807>>>>>>>>>    Function SQLConnect String sDrvrID String sConnect Returns Integer
40809>>>>>>>>>        Integer ihdbc
40809>>>>>>>>>        String  sEmpty
40809>>>>>>>>>        
40809>>>>>>>>>        // Initialize
40809>>>>>>>>>        Move "" to sEmpty
40810>>>>>>>>>        Move 0  to ihdbc
40811>>>>>>>>>        
40811>>>>>>>>>        Move False to Err
40812>>>>>>>>>        
40812>>>>>>>>>        // Call the driver function to connect
40812>>>>>>>>>        Call_Driver 0 sDrvrId Function FUNC_SQLCONNECT ;            Callback Self ;            Passing sConnect sEmpty Self ;            Result ihdbc
40817>>>>>>>>>        
40817>>>>>>>>>        // If there was an error, make result invalid
40817>>>>>>>>>        If (Err) ;            Move 0 to ihdbc
40820>>>>>>>>>        
40820>>>>>>>>>        // Check result and store it
40820>>>>>>>>>        If (ihdbc <> 0) ;            Send StoreConnectionInfo ihdbc sDrvrId
40823>>>>>>>>>        
40823>>>>>>>>>        // Return success status
40823>>>>>>>>>        Function_Return (ihdbc <> 0)
40824>>>>>>>>>    End_Function
40825>>>>>>>>>    
40825>>>>>>>>>    
40825>>>>>>>>>    // Use a connection of an already open file
40825>>>>>>>>>    Function SQLFileConnect Integer iFileNum Returns Integer
40827>>>>>>>>>        Integer ihdbc
40827>>>>>>>>>        Integer bIsOpen
40827>>>>>>>>>        String  sDrvrId
40827>>>>>>>>>        String  sEmpty
40827>>>>>>>>>        
40827>>>>>>>>>        // Initialize
40827>>>>>>>>>        Move "" to sEmpty
40828>>>>>>>>>        Move 0  to ihdbc
40829>>>>>>>>>        
40829>>>>>>>>>        // Check if file is open
40829>>>>>>>>>        Get_Attribute DF_FILE_OPENED of iFileNum to bIsOpen
40832>>>>>>>>>        If (bIsOpen) Begin
40834>>>>>>>>>            // Fill the driver id, assume longest is 255 characters
40834>>>>>>>>>            Move (Repeat(' ', 255)) to sDrvrId
40835>>>>>>>>>            Get_Attribute DF_FILE_DRIVER of iFileNum to sDrvrId
40838>>>>>>>>>            
40838>>>>>>>>>            Move False to Err
40839>>>>>>>>>            
40839>>>>>>>>>            // Call the driver function to connect
40839>>>>>>>>>            Call_Driver iFileNum sDrvrId Function FUNC_SQLFILECONNECT ;                Callback Self ;                Passing sEmpty sEmpty 0 ;                Result ihdbc
40844>>>>>>>>>            
40844>>>>>>>>>            // If there was an error, make result invalid
40844>>>>>>>>>            If (Err) ;                Move 0 to ihdbc
40847>>>>>>>>>            
40847>>>>>>>>>            // Check result and store it
40847>>>>>>>>>            If (ihdbc <> 0) Begin
40849>>>>>>>>>                // Somehow Call_driver overwrites the sDrvrId variable, restore it here
40849>>>>>>>>>                Get_Attribute DF_FILE_DRIVER of iFileNum to sDrvrId
40852>>>>>>>>>                Send StoreConnectionInfo ihdbc sDrvrId
40853>>>>>>>>>                
40853>>>>>>>>>                // Set filenum so it can be used for fetching
40853>>>>>>>>>                Set piBindFile to iFileNum
40854>>>>>>>>>            End
40854>>>>>>>>>>
40854>>>>>>>>>        End
40854>>>>>>>>>>
40854>>>>>>>>>        
40854>>>>>>>>>        // Return success status
40854>>>>>>>>>        Function_Return (ihdbc <> 0)
40855>>>>>>>>>    End_Function
40856>>>>>>>>>    
40856>>>>>>>>>    
40856>>>>>>>>>    // Establish an embedded SQL connection that uses an existing connection from an earlier login or open.
40856>>>>>>>>>    // Existing connections are identified by there connectstring. (can be obtained with DF_DRIVER_SERVER_NAME attribute)
40856>>>>>>>>>    // If sConnectString exist in the list of existing connections, that connection will be used for embedded SQL.
40856>>>>>>>>>    // The connectstring must be an exact match, but can be case insensitive
40856>>>>>>>>>    // The connectstring can contain a connection id. For example: "DFCONNID=MyConnectionID"
40856>>>>>>>>>    // If no matching connectstring is found, this function will return 0
40856>>>>>>>>>    // This function will only work with CLI connectivity kits 6.2 or later
40856>>>>>>>>>    Function SQLConnectionConnect String sDrvrID String sConnectString Returns Integer
40858>>>>>>>>>        Integer ihdbc
40858>>>>>>>>>        String  sEmpty
40858>>>>>>>>>        Integer iFileNum
40858>>>>>>>>>        
40858>>>>>>>>>        // Initialize
40858>>>>>>>>>        Move "" to sEmpty
40859>>>>>>>>>        Move 0  to ihdbc
40860>>>>>>>>>        
40860>>>>>>>>>        Move False to Err
40861>>>>>>>>>        
40861>>>>>>>>>        // Call the driver function
40861>>>>>>>>>        //   Note we call FUNC_SQLFILECONNECT with iFileNum = 0.
40861>>>>>>>>>        //   This will perform SQLConnectionConnect instead of SQLFileConnect
40861>>>>>>>>>        Move 0 to iFileNum
40862>>>>>>>>>        Call_Driver iFileNum sDrvrId Function FUNC_SQLFILECONNECT ;            Callback Self ;            Passing sConnectString sEmpty Self ;            Result ihdbc
40867>>>>>>>>>        
40867>>>>>>>>>        // If there was an error, make result invalid
40867>>>>>>>>>        If (Err) ;            Move 0 to ihdbc
40870>>>>>>>>>        
40870>>>>>>>>>        // Check result and store it
40870>>>>>>>>>        If (ihdbc <> 0) ;            Send StoreConnectionInfo ihdbc sDrvrId
40873>>>>>>>>>        
40873>>>>>>>>>        // Return success status
40873>>>>>>>>>        Function_Return (ihdbc <> 0)
40874>>>>>>>>>    End_Function
40875>>>>>>>>>    
40875>>>>>>>>>    
40875>>>>>>>>>    // Disconnect from an embedded SQL server and free allocated
40875>>>>>>>>>    // resources
40875>>>>>>>>>    Procedure SQLDisconnect
40877>>>>>>>>>        Integer ihdbc
40877>>>>>>>>>        Integer iVoid
40877>>>>>>>>>        String  sDrvrId
40877>>>>>>>>>        String  sEmpty
40877>>>>>>>>>        
40877>>>>>>>>>        // Initialize
40877>>>>>>>>>        Move "" to sEmpty
40878>>>>>>>>>        
40878>>>>>>>>>        // Get the cli handle
40878>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40879>>>>>>>>>        Get psDriverId to sDrvrId
40880>>>>>>>>>        
40880>>>>>>>>>        // Free the CLI handle
40880>>>>>>>>>        If (ihdbc <> 0) Begin
40882>>>>>>>>>            // Call the driver function to disconnect
40882>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLDISCONNECT ;                Callback Self ;                Passing sEmpty sEmpty ihdbc ;                Result iVoid
40887>>>>>>>>>            
40887>>>>>>>>>            Move -1 to giLastSQLhdbc
40888>>>>>>>>>            
40888>>>>>>>>>            // Free the DataFlex handle
40888>>>>>>>>>            Send DestroySQLConnection
40889>>>>>>>>>        End
40889>>>>>>>>>>
40889>>>>>>>>>    End_Procedure
40890>>>>>>>>>    
40890>>>>>>>>>    // Create a cSQLStatement object
40890>>>>>>>>>    Function CreateSQLStatement Returns Handle
40892>>>>>>>>>        
40892>>>>>>>>>        Handle hoSQLStatement
40892>>>>>>>>>        Get Create (RefClass(cSQLStatement)) to hoSQLStatement
40893>>>>>>>>>        
40893>>>>>>>>>        // If the connection has a default Bind File, assign it to the
40893>>>>>>>>>        // statement object. The default is set when you open a file with a
40893>>>>>>>>>        // SetFileConnection command.
40893>>>>>>>>>        Set piBindFile of hoSQLStatement to (piBindFile(Self))
40894>>>>>>>>>        
40894>>>>>>>>>        Function_Return hoSQLStatement
40895>>>>>>>>>    End_Function
40896>>>>>>>>>    
40896>>>>>>>>>    
40896>>>>>>>>>    // Open a statement for use
40896>>>>>>>>>    Function SQLOpen Returns Handle
40898>>>>>>>>>        Handle  hoSQLStatement
40898>>>>>>>>>        Integer ihdbc
40898>>>>>>>>>        Integer ihstmt
40898>>>>>>>>>        Integer iVoid
40898>>>>>>>>>        String  sDrvrId
40898>>>>>>>>>        String  sEmpty
40898>>>>>>>>>        String  sDummyZeroDate
40898>>>>>>>>>        String  sDummyZeroDateMssqlDatetime
40898>>>>>>>>>        
40898>>>>>>>>>        // Initialize
40898>>>>>>>>>        Move "" to sEmpty
40899>>>>>>>>>        
40899>>>>>>>>>        // Get the cli handle to the connection
40899>>>>>>>>>        Get phCLIConnectionHandle to ihdbc
40900>>>>>>>>>        Get psDriverId  to sDrvrId
40901>>>>>>>>>        
40901>>>>>>>>>        // Allocate a new handle and populate it
40901>>>>>>>>>        If (ihdbc <> 0) Begin
40903>>>>>>>>>            // Create a new cSQLStatement object
40903>>>>>>>>>            Get CreateSQLStatement to hoSQLStatement
40904>>>>>>>>>            
40904>>>>>>>>>            // Call the driver function to allocate a cli statement handle
40904>>>>>>>>>            Call_Driver 0 sDrvrId Function FUNC_SQLOPEN ;                Callback Self ;                Passing hoSQLStatement sEmpty ihdbc ;                Result ihstmt
40909>>>>>>>>>            
40909>>>>>>>>>            // If unsuccessful destroy hoSQLStatement
40909>>>>>>>>>            If (ihstmt = 0) Begin
40911>>>>>>>>>                Send DestroySQLStatement of hoSQLStatement
40912>>>>>>>>>                Move 0 to hoSQLStatement
40913>>>>>>>>>            End
40913>>>>>>>>>>
40913>>>>>>>>>            Else Begin
40914>>>>>>>>>                Send StoreStatementInfo of hoSQLStatement ihstmt sDrvrId ihdbc
40915>>>>>>>>>                
40915>>>>>>>>>                // Store DummyZeroDate of hoSQLConnection in hoSQLStatement
40915>>>>>>>>>                Get psDummyZeroDate              to sDummyZeroDate
40916>>>>>>>>>                Get psDummyZeroDateMssqlDatetime to sDummyZeroDateMssqlDatetime
40917>>>>>>>>>                
40917>>>>>>>>>                Set psDummyZeroDate              of hoSQLStatement to sDummyZeroDate
40918>>>>>>>>>                Set psDummyZeroDateMssqlDatetime of hoSQLStatement to sDummyZeroDateMssqlDatetime
40919>>>>>>>>>                
40919>>>>>>>>>            End
40919>>>>>>>>>>
40919>>>>>>>>>        End
40919>>>>>>>>>>
40919>>>>>>>>>        
40919>>>>>>>>>        Function_Return hoSQLStatement
40920>>>>>>>>>    End_Function
40921>>>>>>>>>    
40921>>>>>>>>>End_Class
40922>>>>>>>>>
40922>>>>>>>>>// Manager for embedded SQL handles.                           
40922>>>>>>>>>// We want to be able to use multiple drivers and multiple            
40922>>>>>>>>>// connections within a driver and multiple statements within a       
40922>>>>>>>>>// connection. To allow this we have placed our own handle logic on   
40922>>>>>>>>>// top of the driver handle logic. This way we can handle the         
40922>>>>>>>>>// situation where two driver handles may be equal.                   
40922>>>>>>>>>
40922>>>>>>>>>Class cSQLHandleManager is a cObject
40923>>>>>>>>>    
40923>>>>>>>>>    Procedure Construct_object
40925>>>>>>>>>        Forward Send Construct_object
40927>>>>>>>>>        
40927>>>>>>>>>        Property String  psDefaultDriver      ""
40928>>>>>>>>>        Property String  psDefaultConnection  ""
40929>>>>>>>>>        
40929>>>>>>>>>    End_Procedure
40930>>>>>>>>>    
40930>>>>>>>>>    // Create a cSQLConnection object
40930>>>>>>>>>    Function CreateSQLConnection Returns Handle
40932>>>>>>>>>        Handle hoSQLConnection
40932>>>>>>>>>        Get Create (RefClass(cSQLConnection)) to hoSQLConnection
40933>>>>>>>>>        Function_Return hoSQLConnection
40934>>>>>>>>>    End_Function
40935>>>>>>>>>    
40935>>>>>>>>>    
40935>>>>>>>>>    // Store default connection information
40935>>>>>>>>>    Procedure SQLSetConnect String sDriver String sConnect
40937>>>>>>>>>        Set psDefaultDriver      to sDriver
40938>>>>>>>>>        Set psDefaultConnection  to sConnect
40939>>>>>>>>>    End_Procedure
40940>>>>>>>>>    
40940>>>>>>>>>    
40940>>>>>>>>>    // Make a connection to an embedded SQL server
40940>>>>>>>>>    // Returns : The DataFlex handle to the connection
40940>>>>>>>>>    Function SQLConnect String sDrvrID String sConnect Returns Integer
40942>>>>>>>>>        Handle hoSQLConnection
40942>>>>>>>>>        Integer bOK
40942>>>>>>>>>        
40942>>>>>>>>>        // Check arguments
40942>>>>>>>>>        If (sDrvrID = "" and sConnect = "") Begin
40944>>>>>>>>>            Get psDefaultDriver      to sDrvrId
40945>>>>>>>>>            Get psDefaultConnection  to sConnect
40946>>>>>>>>>        End
40946>>>>>>>>>>
40946>>>>>>>>>        
40946>>>>>>>>>        // Create a cSQLConnection object
40946>>>>>>>>>        Get CreateSQLConnection to hoSQLConnection
40947>>>>>>>>>        // Connect to the database
40947>>>>>>>>>        Get SQLConnect of hoSQLConnection sDrvrID sConnect to bOK
40948>>>>>>>>>        
40948>>>>>>>>>        // If connection to the database failed, destroy the cSQLConnection object and return a 0 handle
40948>>>>>>>>>        If (not(bOK)) Begin
40950>>>>>>>>>            Send DestroySQLConnection of hoSQLConnection
40951>>>>>>>>>            Move 0 to hoSQLConnection
40952>>>>>>>>>        End
40952>>>>>>>>>>
40952>>>>>>>>>        
40952>>>>>>>>>        Function_Return hoSQLConnection
40953>>>>>>>>>    End_Function
40954>>>>>>>>>    
40954>>>>>>>>>    
40954>>>>>>>>>    
40954>>>>>>>>>    // Make an existing connection available for use with Embedded SQL.
40954>>>>>>>>>    // The connection is identified by the number of a file
40954>>>>>>>>>    // that is open for that connection.
40954>>>>>>>>>    Function SQLFileConnect Integer iFileNum Returns Handle
40956>>>>>>>>>        Handle hoSQLConnection
40956>>>>>>>>>        Integer bOK
40956>>>>>>>>>        
40956>>>>>>>>>        // Create a cSQLConnection object
40956>>>>>>>>>        Get CreateSQLConnection to hoSQLConnection
40957>>>>>>>>>        Get SQLFileConnect of hoSQLConnection iFileNum to bOK
40958>>>>>>>>>        
40958>>>>>>>>>        // If connection to the database failed, destroy the cSQLConnection object and return a 0 handle
40958>>>>>>>>>        If (not(bOK)) Begin
40960>>>>>>>>>            Send DestroySQLConnection of hoSQLConnection
40961>>>>>>>>>            Move 0 to hoSQLConnection
40962>>>>>>>>>        End
40962>>>>>>>>>>
40962>>>>>>>>>        
40962>>>>>>>>>        Function_Return hoSQLConnection
40963>>>>>>>>>    End_Function
40964>>>>>>>>>    
40964>>>>>>>>>    // Establish an embedded SQL connection that uses an existing connection from an earlier login or open.
40964>>>>>>>>>    // Existing connections are identified by there connectstring. (can be obtained with DF_DRIVER_SERVER_NAME attribute)
40964>>>>>>>>>    // If sConnectString exist in the list of existing connections, that connection will be used for embedded SQL.
40964>>>>>>>>>    // The connectstrings must be an exact match, but can be case insensitive
40964>>>>>>>>>    // If no matching connectstring is found, this function will return 0
40964>>>>>>>>>    // This function will only work with CLI connectivity kits 6.2 or later
40964>>>>>>>>>    Function SQLConnectionConnect String sDrvrID String sConnectString Returns Integer
40966>>>>>>>>>        Handle hoSQLConnection
40966>>>>>>>>>        Integer bOK
40966>>>>>>>>>        
40966>>>>>>>>>        // Check arguments
40966>>>>>>>>>        If (sDrvrID = "" and sConnectString = "") Begin
40968>>>>>>>>>            Get psDefaultDriver      to sDrvrId
40969>>>>>>>>>            Get psDefaultConnection  to sConnectString
40970>>>>>>>>>        End
40970>>>>>>>>>>
40970>>>>>>>>>        
40970>>>>>>>>>        // Create a cSQLConnection object
40970>>>>>>>>>        Get CreateSQLConnection to hoSQLConnection
40971>>>>>>>>>        // Connect to the database
40971>>>>>>>>>        Get SQLConnectionConnect of hoSQLConnection sDrvrID sConnectString to bOK
40972>>>>>>>>>        
40972>>>>>>>>>        // If connection to the database failed, destroy the cSQLConnection object and return a 0 handle
40972>>>>>>>>>        If (not(bOK)) Begin
40974>>>>>>>>>            Send DestroySQLConnection of hoSQLConnection
40975>>>>>>>>>            Move 0 to hoSQLConnection
40976>>>>>>>>>        End
40976>>>>>>>>>>
40976>>>>>>>>>        
40976>>>>>>>>>        Function_Return hoSQLConnection
40977>>>>>>>>>    End_Function
40978>>>>>>>>>    
40978>>>>>>>>>    
40978>>>>>>>>>End_Class
40979>>>>>>>Use MSSqldrv.pkg
Including file: MSSqldrv.pkg    (C:\Program Files\DataFlex 23.0\Pkg\MSSqldrv.pkg)
40979>>>>>>>>>//     Package that declares MS SQL driver constants and functions.
40979>>>>>>>>>//     This package can be used by developers who want to add Data Access
40979>>>>>>>>>//     MS SQL Client specific code to a DataFlex application.
40979>>>>>>>>>
40979>>>>>>>>>Use Cli.pkg
40979>>>>>>>>>Use SQL.pkg
40979>>>>>>>>>
40979>>>>>>>>>//   Driver Indentification
40979>>>>>>>>>
40979>>>>>>>>>//   Error number constants
40979>>>>>>>>>
40979>>>>>>>>>
40979>>>>>>>>>//   Possible DF_DRIVER_SQLSERVER_CLIENT_VERSION values
40979>>>>>>>>>
40979>>>>>>>>>
40979>>>>>>>>>
40979>>>>>>>>>
40979>>>>>>>>>
40979>>>>>>>>>
40979>>>>>>>>>// SQL Server spcific types.
40979>>>>>>>>>Define SQL_SS_TIMESTAMPOFFSET   for   (-155) //SQL server datetimeoffset type */
40979>>>>>>>>>Define SQL_SS_TIME2             for   (-154) //SQL server time type */
40979>>>>>>>>>Define SQL_SS_XML               for   (-152) //SQL server xml type */
40979>>>>>>>>>Define SQL_SS_VARIANT           for   (-150) //SQL server variant type */
40979>>>>>>>>>
40979>>>>>>>>>// SQL Server spcific types.
40979>>>>>>>>>Define SQL_TYPE_TIMESTAMP2      for   (-200) //SQL server datetime2 type */
40979>>>>>>>>>Define SQL_VARCHARMAX           for   (-201) //SQL server varchar(max) type */
40979>>>>>>>>>Define SQL_WVARCHARMAX          for   (-202) //SQL server wvarchar(max) type */
40979>>>>>>>>>Define SQL_VARBINARYMAX         for   (-203) //SQL server varbinary(max) type */
40979>>>>>>>>>Define SQL_TYPE_MONEY           for   (-204) //SQL server money type */
40979>>>>>>>>>Define SQL_TYPE_SMALLMONEY      for   (-205) //SQL server smallmoney type */
40979>>>>>>>>>Define SQL_TYPE_SMALLDATETIME   for   (-206) //SQL server smalldatetype type */
40979>>>>>>>>>
40979>>>>>>>>>
40979>>>>>>>>>//   MSSQL_SetConstraint <FileNum> <ConstraintText>
40979>>>>>>>>>//
40979>>>>>>>>>//     Setup a constraint for a file.
40979>>>>>>>>>
40979>>>>>>>>>
40979>>>>>>>>>Class cMSSQLHandler is a cCLIHandler
40980>>>>>>>>>    
40980>>>>>>>>>    Procedure Construct_Object
40982>>>>>>>>>        Forward Send Construct_Object
40984>>>>>>>>>        
40984>>>>>>>>>        Set psDriverID to MSSQLDRV_ID
40985>>>>>>>>>    End_Procedure
40986>>>>>>>>>    
40986>>>>>>>>>    
40986>>>>>>>>>    
40986>>>>>>>>>    //   Extract the list from the out connect string.
40986>>>>>>>>>    Function ExtractList String sOutConnStr Integer hoStore Returns Integer
40988>>>>>>>>>        String  sItem
40988>>>>>>>>>        Integer iStart
40988>>>>>>>>>        Integer iEnd
40988>>>>>>>>>        
40988>>>>>>>>>        If (hoStore = 0) ;            Move Current_object to hoStore
40991>>>>>>>>>        
40991>>>>>>>>>        Send Delete_Data to hoStore
40992>>>>>>>>>        Move (Pos("{", sOutConnStr)) to iStart
40993>>>>>>>>>        While (iStart > 0)
40997>>>>>>>>>            Move (Right(sOutConnStr, Length(sOutConnStr) - iStart)) to sOutConnStr
40998>>>>>>>>>            If (Left(sOutConnStr, 1) = "}") ;                Move 0 to iStart
41001>>>>>>>>>            Else Begin
41002>>>>>>>>>                Move (Pos(",", sOutConnStr)) to iStart
41003>>>>>>>>>                Move (Pos("}", sOutConnStr)) to iEnd
41004>>>>>>>>>                If ((iStart = 0) or (iEnd < iStart)) ;                    Move iEnd to iStart
41007>>>>>>>>>                
41007>>>>>>>>>                If (iStart > 0) ;                    Set Value of hoStore  (Item_Count(Current_Object)) to (Left(sOutConnStr, iStart - 1))
41010>>>>>>>>>                
41010>>>>>>>>>                If (iStart = iEnd) ;                    Move 0 to iStart
41013>>>>>>>>>            End
41013>>>>>>>>>>
41013>>>>>>>>>        Loop
41014>>>>>>>>>>
41014>>>>>>>>>        
41014>>>>>>>>>        Function_Return (Item_Count(hoStore))
41015>>>>>>>>>    End_Procedure
41016>>>>>>>>>    
41016>>>>>>>>>    
41016>>>>>>>>>    
41016>>>>>>>>>    //   Call the driver's browse connect function
41016>>>>>>>>>    Function BrowseConnect String sInConnStr Returns String
41018>>>>>>>>>        String  sDriver
41018>>>>>>>>>        String  sOutConnStr
41018>>>>>>>>>        Integer iArg
41018>>>>>>>>>        Integer iRetval
41018>>>>>>>>>        
41018>>>>>>>>>        Get psDriverID to sDriver
41019>>>>>>>>>        If (sDriver <> "") Begin
41021>>>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
41022>>>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
41027>>>>>>>>>        End
41027>>>>>>>>>>
41027>>>>>>>>>        
41027>>>>>>>>>        Function_Return sOutConnStr
41028>>>>>>>>>    End_Function// BrowseConnect
41029>>>>>>>>>    
41029>>>>>>>>>    
41029>>>>>>>>>    Function BrowseConnectLocal String sInConnStr Returns String
41031>>>>>>>>>        String  sDriver
41031>>>>>>>>>        String  sOutConnStr
41031>>>>>>>>>        Integer iArg
41031>>>>>>>>>        Integer iRetval
41031>>>>>>>>>        
41031>>>>>>>>>        Move 1 to iArg // Browses only local
41032>>>>>>>>>        
41032>>>>>>>>>        Get psDriverID to sDriver
41033>>>>>>>>>        If (sDriver <> "") Begin
41035>>>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
41036>>>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
41041>>>>>>>>>        End
41041>>>>>>>>>>
41041>>>>>>>>>        
41041>>>>>>>>>        Function_Return sOutConnStr
41042>>>>>>>>>    End_Function// BrowseConnect
41043>>>>>>>>>    
41043>>>>>>>>>    
41043>>>>>>>>>    Function EnumerateServersNetworkOrLocal Integer iNetworkLocal  Returns Integer
41045>>>>>>>>>        
41045>>>>>>>>>        String  sServerList
41045>>>>>>>>>        Integer iNumServers
41045>>>>>>>>>        Integer iDriver
41045>>>>>>>>>        Integer iClientVersion
41045>>>>>>>>>        String  sDriver
41045>>>>>>>>>        
41045>>>>>>>>>        Get DriverIndex MSSQLDRV_ID to iDriver
41046>>>>>>>>>        
41046>>>>>>>>>        If (iDriver) Begin
41048>>>>>>>>>            
41048>>>>>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
41051>>>>>>>>>            
41051>>>>>>>>>            Get SqlServerClientDriverName iClientVersion to sDriver
41052>>>>>>>>>            
41052>>>>>>>>>            Move ("DRIVER={" + sDriver + "};") to sDriver
41053>>>>>>>>>            If (iNetworkLocal = 0) Begin
41055>>>>>>>>>                Get BrowseConnect sDriver to sServerList
41056>>>>>>>>>            End
41056>>>>>>>>>>
41056>>>>>>>>>            Else Begin
41057>>>>>>>>>                Get BrowseConnectLocal sDriver to sServerList
41058>>>>>>>>>            End
41058>>>>>>>>>>
41058>>>>>>>>>            Get ExtractList sServerList Current_object to iNumServers
41059>>>>>>>>>        End
41059>>>>>>>>>>
41059>>>>>>>>>        
41059>>>>>>>>>        Function_Return iNumServers
41060>>>>>>>>>        
41060>>>>>>>>>    End_Function
41061>>>>>>>>>    
41061>>>>>>>>>    //   Enumerate the available SQL Server database servers
41061>>>>>>>>>    //   This function will return all SQL Server instances on the network.
41061>>>>>>>>>    //   This may take a long time.
41061>>>>>>>>>    //   To enumerate only local SQL Server instances use EnumerateServersLocal
41061>>>>>>>>>    Function EnumerateServers Returns Integer
41063>>>>>>>>>        
41063>>>>>>>>>        Integer iNumServers
41063>>>>>>>>>        Integer iNetworkLocal
41063>>>>>>>>>        
41063>>>>>>>>>        Move 0 to iNetworkLocal // 0 = enumerate network servers
41064>>>>>>>>>        
41064>>>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
41065>>>>>>>>>        
41065>>>>>>>>>        Function_Return iNumServers
41066>>>>>>>>>        
41066>>>>>>>>>    End_Function
41067>>>>>>>>>    
41067>>>>>>>>>    
41067>>>>>>>>>    //   Enumerate the available SQL Server database servers
41067>>>>>>>>>    //   This function will return only return SQL Server instance on the local machine
41067>>>>>>>>>    //   To enumerate all SQL Server instances in a network use EnumerateServers
41067>>>>>>>>>    Function EnumerateServersLocal Returns Integer
41069>>>>>>>>>        
41069>>>>>>>>>        Integer iNumServers
41069>>>>>>>>>        Integer iNetworkLocal
41069>>>>>>>>>        
41069>>>>>>>>>        Move 1 to iNetworkLocal // 1 = enumerate local servers
41070>>>>>>>>>        
41070>>>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
41071>>>>>>>>>        
41071>>>>>>>>>        Function_Return iNumServers
41072>>>>>>>>>        
41072>>>>>>>>>    End_Function
41073>>>>>>>>>    
41073>>>>>>>>>    
41073>>>>>>>>>    
41073>>>>>>>>>    //   Enumerate database in a given server.
41073>>>>>>>>>    Function EnumerateDatabases String sServer String sUser String sPassWord Returns Integer
41075>>>>>>>>>        Integer hoSQL
41075>>>>>>>>>        String  sConnect
41075>>>>>>>>>        String  sDatabase
41075>>>>>>>>>        Integer hdbc
41075>>>>>>>>>        Integer hstmt
41075>>>>>>>>>        Integer iFetchResult
41075>>>>>>>>>        
41075>>>>>>>>>        If (Num_Arguments < 3) ;            Move "" to sPassWord
41078>>>>>>>>>        If (Num_Arguments < 2) ;            Move "" to sUser
41081>>>>>>>>>        
41081>>>>>>>>>        If (sUser <> "") ;            Move ("SERVER=" + Trim(sServer) + ";UID=" + Trim(sUser) + ";PWD=" + Trim(sPassword) + ";") to sConnect
41084>>>>>>>>>        Else ;            Move ("SERVER=" + Trim(sServer) + ";Trusted_Connection=yes") to sConnect
41086>>>>>>>>>        
41086>>>>>>>>>        Object oEnumDBSQLmanager is a cSQLHandleManager
41088>>>>>>>>>            Move Current_Object to hoSQL
41089>>>>>>>>>        End_Object
41090>>>>>>>>>        
41090>>>>>>>>>        If (hoSQL <> 0) Begin
41092>>>>>>>>>            Get SQLConnect of hoSQL "MSSQLDRV" sConnect to hdbc
41093>>>>>>>>>            If (hdbc <> 0) Begin
41095>>>>>>>>>                Get SQLOpen of hdbc to hstmt
41096>>>>>>>>>                If (hstmt <> 0) Begin
41098>>>>>>>>>                    //   We could do a direct select on the sysdatabases table but we use
41098>>>>>>>>>                    //   the stored procedure sp_database instead. SQL Server recommends this
41098>>>>>>>>>                    //   approach in case meta data might change, the stored procedure will
41098>>>>>>>>>                    //   stay the same.
41098>>>>>>>>>                    Send SQLSetProcedureName to hstmt "sp_databases"
41099>>>>>>>>>                    Send SQLCall to hstmt
41100>>>>>>>>>                    Repeat
41100>>>>>>>>>>
41100>>>>>>>>>                        Get SQLFetch of hstmt to iFetchResult
41101>>>>>>>>>                        If (iFetchResult <> 0) Begin
41103>>>>>>>>>                            Get SQLColumnValue of hstmt 1 to sDatabase
41104>>>>>>>>>                            Set Value  (Item_Count(Current_Object)) to sDatabase
41105>>>>>>>>>                        End
41105>>>>>>>>>>
41105>>>>>>>>>                    Until (iFetchResult = 0)
41107>>>>>>>>>                    
41107>>>>>>>>>                    Send SQLClose to hstmt
41108>>>>>>>>>                End
41108>>>>>>>>>>
41108>>>>>>>>>                Send SQLDisconnect to hdbc
41109>>>>>>>>>            End
41109>>>>>>>>>>
41109>>>>>>>>>        End
41109>>>>>>>>>>
41109>>>>>>>>>        Send Destroy_Object to hoSQL
41110>>>>>>>>>        
41110>>>>>>>>>        Function_Return (Item_Count(Current_Object))
41111>>>>>>>>>    End_Function
41112>>>>>>>>>    
41112>>>>>>>>>    
41112>>>>>>>>>    Function SqlServerClientVersionName Integer iClientVersion  Returns String
41114>>>>>>>>>        
41114>>>>>>>>>        String  sSqlServerClientVersionName
41114>>>>>>>>>        
41114>>>>>>>>>        
41114>>>>>>>>>        Case Begin
41114>>>>>>>>>
41114>>>>>>>>>            Case (iClientVersion = SQLSERVER2019CLIENT)
41116>>>>>>>>>                Move SQLSERVER2019CLIENTNAME to sSqlServerClientVersionName
41117>>>>>>>>>                Case Break
41118>>>>>>>>>            
41118>>>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
41121>>>>>>>>>                Move SQLSERVER2017CLIENTNAME to sSqlServerClientVersionName
41122>>>>>>>>>                Case Break
41123>>>>>>>>>                
41123>>>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
41126>>>>>>>>>                Move SQLSERVER2016CLIENTNAME to sSqlServerClientVersionName
41127>>>>>>>>>                Case Break
41128>>>>>>>>>            
41128>>>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
41131>>>>>>>>>                Move SQLSERVER2014CLIENTNAME to sSqlServerClientVersionName
41132>>>>>>>>>                Case Break
41133>>>>>>>>>            
41133>>>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
41136>>>>>>>>>                Move SQLSERVER2012CLIENTNAME to sSqlServerClientVersionName
41137>>>>>>>>>                Case Break
41138>>>>>>>>>            
41138>>>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
41141>>>>>>>>>                Move SQLSERVER2008CLIENTNAME to sSqlServerClientVersionName
41142>>>>>>>>>                Case Break
41143>>>>>>>>>            
41143>>>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
41146>>>>>>>>>                Move SQLSERVER2005CLIENTNAME to sSqlServerClientVersionName
41147>>>>>>>>>                Case Break
41148>>>>>>>>>            
41148>>>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
41151>>>>>>>>>                Move SQLSERVER2000CLIENTNAME to sSqlServerClientVersionName
41152>>>>>>>>>                Case Break
41153>>>>>>>>>            
41153>>>>>>>>>            Case Else
41153>>>>>>>>>                Move (SFormat("%1 (version %2) ",SQLSERVERUNKNOWNCLIENTNAME,iClientVersion)) to sSqlServerClientVersionName
41154>>>>>>>>>                
41154>>>>>>>>>        Case End
41154>>>>>>>>>        
41154>>>>>>>>>        
41154>>>>>>>>>        Function_Return sSqlServerClientVersionName
41155>>>>>>>>>        
41155>>>>>>>>>    End_Function
41156>>>>>>>>>
41156>>>>>>>>>
41156>>>>>>>>>    Function SqlServerClientDriverName Integer iClientVersion  Returns String
41158>>>>>>>>>        
41158>>>>>>>>>        String  sSqlServerClientDriverName
41158>>>>>>>>>        
41158>>>>>>>>>        Case Begin
41158>>>>>>>>>
41158>>>>>>>>>            Case (iClientVersion = SQLSERVER2019CLIENT)
41160>>>>>>>>>                Move SQLSERVER2019DRVRSTR to sSqlServerClientDriverName
41161>>>>>>>>>                Case Break
41162>>>>>>>>>
41162>>>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
41165>>>>>>>>>                Move SQLSERVER2017DRVRSTR to sSqlServerClientDriverName
41166>>>>>>>>>                Case Break
41167>>>>>>>>>                
41167>>>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
41170>>>>>>>>>                Move SQLSERVER2016DRVRSTR to sSqlServerClientDriverName
41171>>>>>>>>>                Case Break
41172>>>>>>>>>            
41172>>>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
41175>>>>>>>>>                Move SQLSERVER2014DRVRSTR to sSqlServerClientDriverName
41176>>>>>>>>>                Case Break
41177>>>>>>>>>            
41177>>>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
41180>>>>>>>>>                Move SQLSERVER2012DRVRSTR to sSqlServerClientDriverName
41181>>>>>>>>>                Case Break
41182>>>>>>>>>            
41182>>>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
41185>>>>>>>>>                Move SQLSERVER2008DRVRSTR to sSqlServerClientDriverName
41186>>>>>>>>>                Case Break
41187>>>>>>>>>            
41187>>>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
41190>>>>>>>>>                Move SQLSERVER2005DRVRSTR to sSqlServerClientDriverName
41191>>>>>>>>>                Case Break
41192>>>>>>>>>            
41192>>>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
41195>>>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
41196>>>>>>>>>                Case Break
41197>>>>>>>>>            
41197>>>>>>>>>            Case Else
41197>>>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
41198>>>>>>>>>                
41198>>>>>>>>>        Case End
41198>>>>>>>>>        
41198>>>>>>>>>        
41198>>>>>>>>>        Function_Return sSqlServerClientDriverName
41199>>>>>>>>>        
41199>>>>>>>>>    End_Function
41200>>>>>>>>>    
41200>>>>>>>>>    
41200>>>>>>>>>End_Class
41201>>>>>>>>>
41201>>>>>>>>>
41201>>>>>>>Use db2_drv.pkg
Including file: db2_drv.pkg    (C:\Program Files\DataFlex 23.0\Pkg\db2_drv.pkg)
41201>>>>>>>>>// DB2_DRV.PKG                                                          
41201>>>>>>>>>//   Package that declares DB2 driver constants and functions.          
41201>>>>>>>>>//   This package can be used by developers who want to add DB2 driver  
41201>>>>>>>>>//   specific code to a DataFlex application.                           
41201>>>>>>>>>
41201>>>>>>>>>Use Cli.pkg
41201>>>>>>>>>
41201>>>>>>>>>// Driver attributes
41201>>>>>>>>>
41201>>>>>>>>>
41201>>>>>>>>>// Driver Indentification
41201>>>>>>>>>
41201>>>>>>>>>// Error number constants
41201>>>>>>>>>
41201>>>>>>>>>// Call driver function identifiers
41201>>>>>>>>>
41201>>>>>>>>>// DB2 specific data types
41201>>>>>>>>>Define SQL_CLOB           for   (-99)
41201>>>>>>>>>Define SQL_BLOB           for   (-98)
41201>>>>>>>>>Define SQL_XML            for   (-370)
41201>>>>>>>>>// DB2 Graphic types are Unicode types
41201>>>>>>>>>Define SQL_GRAPHIC        for   (-95)
41201>>>>>>>>>Define SQL_VARGRAPHIC     for   (-96)
41201>>>>>>>>>Define SQL_LONGVARGRAPHIC for   (-97)
41201>>>>>>>>>Define SQL_DBCLOB         for   (-350)
41201>>>>>>>>>
41201>>>>>>>>>
41201>>>>>>>>>// Extra DB2 commands
41201>>>>>>>>>
41201>>>>>>>>>
41201>>>>>>>>>// DB2_SetConstraint <FileNum> <ConstraintText>                         
41201>>>>>>>>>//   Setup a constraint for a file.                                     
41201>>>>>>>>>
41201>>>>>>>>>
41201>>>>>>>>>
41201>>>>>>>>>Class cDB2Handler is a cCLIHandler
41202>>>>>>>>>    
41202>>>>>>>>>    Procedure Construct_Object
41204>>>>>>>>>        Forward Send Construct_Object
41206>>>>>>>>>        
41206>>>>>>>>>        Set psDriverID to DB2_DRV_ID
41207>>>>>>>>>    End_Procedure
41208>>>>>>>>>    
41208>>>>>>>>>    
41208>>>>>>>>>    
41208>>>>>>>>>    // Reset the datasource list to the beginning
41208>>>>>>>>>    Procedure SeedDataSources
41210>>>>>>>>>        String  sDriver
41210>>>>>>>>>        String  sVoid
41210>>>>>>>>>        Integer iRetval
41210>>>>>>>>>        
41210>>>>>>>>>        Get psDriverID to sDriver
41211>>>>>>>>>        If (sDriver <> "") ;            Call_Driver 0 sDRiver Function CLI_INITDATASOURCES Callback 0 Passing sVoid sVoid SQL_FETCH_ALL Result iRetval
41218>>>>>>>>>    End_Procedure
41219>>>>>>>>>    
41219>>>>>>>>>    
41219>>>>>>>>>    
41219>>>>>>>>>    // Call the driver's data sources function
41219>>>>>>>>>    Function DataSources Returns String
41221>>>>>>>>>        String  sDriver
41221>>>>>>>>>        String  sDataSource
41221>>>>>>>>>        String  sDescription
41221>>>>>>>>>        Integer iLength
41221>>>>>>>>>        Integer iRetval
41221>>>>>>>>>        
41221>>>>>>>>>        Get psDriverID to sDriver
41222>>>>>>>>>        If (sDriver <> "") Begin
41224>>>>>>>>>            Move 8192 to iLength
41225>>>>>>>>>            Move (Repeat(" ", iLength)) to sDataSource
41226>>>>>>>>>            Move (Repeat(" ", iLength)) to sDescription
41227>>>>>>>>>            Call_Driver 0 sDRiver Function CLI_DATASOURCES Callback 0 Passing sDataSource sDescription iLength Result iRetval
41232>>>>>>>>>        End
41232>>>>>>>>>>
41232>>>>>>>>>        
41232>>>>>>>>>        If (sDataSource <> "" or sDescription <> "") ;            Function_Return (sDataSource - (If(sDescription <> "", "," *  sDescription, "")))
41235>>>>>>>>>        Else ;            Function_Return ""
41237>>>>>>>>>    End_Function
41238>>>>>>>>>    
41238>>>>>>>>>End_Class
41239>>>>>>>Use odbc_drv.pkg
Including file: odbc_drv.pkg    (C:\Program Files\DataFlex 23.0\Pkg\odbc_drv.pkg)
41239>>>>>>>>>//   Package that declares ODBC driver constants and functions.         
41239>>>>>>>>>//   This package can be used by developers who want to add Data Access 
41239>>>>>>>>>//   ODBC Client specific code to a DataFlex application.               
41239>>>>>>>>>
41239>>>>>>>>>Use Cli.pkg
41239>>>>>>>>>
41239>>>>>>>>>// Driver Indentification
41239>>>>>>>>>
41239>>>>>>>>>// Error number constants
41239>>>>>>>>>
41239>>>>>>>>>// Call driver function identifiers
41239>>>>>>>>>
41239>>>>>>>>>Class cODBCHandler is a cCLIHandler
41240>>>>>>>>>    
41240>>>>>>>>>    Procedure Construct_Object
41242>>>>>>>>>        Forward Send Construct_Object
41244>>>>>>>>>        
41244>>>>>>>>>        Set psDriverID to ODBC_DRV_ID
41245>>>>>>>>>    End_Procedure
41246>>>>>>>>>    
41246>>>>>>>>>    
41246>>>>>>>>>    
41246>>>>>>>>>    // Setup the type of data sources returned by the datasources function
41246>>>>>>>>>    Procedure Set DataSourceType Integer iNewType
41248>>>>>>>>>        String  sDriver
41248>>>>>>>>>        String  sVoid
41248>>>>>>>>>        Integer iRetval
41248>>>>>>>>>        
41248>>>>>>>>>        Get psDriverID to sDriver
41249>>>>>>>>>        If (sDriver <> "") ;            Call_Driver 0 sDRiver Function CLI_INITDATASOURCES Callback 0 Passing sVoid sVoid iNewType Result iRetval
41256>>>>>>>>>    End_Procedure
41257>>>>>>>>>    
41257>>>>>>>>>    
41257>>>>>>>>>    // Call the driver's data sources function
41257>>>>>>>>>    Function DataSources Returns String
41259>>>>>>>>>        String  sDriver
41259>>>>>>>>>        String  sDataSource
41259>>>>>>>>>        String  sDescription
41259>>>>>>>>>        Integer iLength
41259>>>>>>>>>        Integer iRetval
41259>>>>>>>>>        
41259>>>>>>>>>        Get psDriverID to sDriver
41260>>>>>>>>>        If (sDriver <> "") Begin
41262>>>>>>>>>            Move 8192 to iLength
41263>>>>>>>>>            Move (Repeat(" ", iLength)) to sDataSource
41264>>>>>>>>>            Move (Repeat(" ", iLength)) to sDescription
41265>>>>>>>>>            Call_Driver 0 sDRiver Function CLI_DATASOURCES Callback 0 Passing sDataSource sDescription iLength Result iRetval
41270>>>>>>>>>        End
41270>>>>>>>>>>
41270>>>>>>>>>        
41270>>>>>>>>>        If (sDataSource <> "" or sDescription <> "") ;            Function_Return (sDataSource - (If(sDescription <> "", "," * sDescription, "")))
41273>>>>>>>>>        Else ;            Function_Return ""
41275>>>>>>>>>    End_Function
41276>>>>>>>>>    
41276>>>>>>>>>End_Class
41277>>>>>>>>>
41277>>>>>>>Use DFBTRDRV.PKG
Including file: DFBTRDRV.PKG    (C:\Program Files\DataFlex 23.0\Pkg\DFBTRDRV.PKG)
41277>>>>>>>>>// $File title : Package for the DataFlex Connectivity Kit for Pervasive.SQL
41277>>>>>>>>>// Notice      : This package contains constants and commands, used to call
41277>>>>>>>>>//               specific functions in the DFBTRDRV.
41277>>>>>>>>>Use Ui
41277>>>>>>>>>//
41277>>>>>>>>>// Driver Indentification
41277>>>>>>>>>//
41277>>>>>>>>>
41277>>>>>>>>>// Driver attributes
41277>>>>>>>>>//
41277>>>>>>>>>// Call_Driver functions ID's
41277>>>>>>>>>//
41277>>>>>>>>>//
41277>>>>>>>>>// DFBTRFN_CONVERT_FILE options
41277>>>>>>>>>//
41277>>>>>>>>>
41277>>>>>>>>>//
41277>>>>>>>>>// DFBTRFN_SET_OWNER options
41277>>>>>>>>>//
41277>>>>>>>>>
41277>>>>>>>>>//
41277>>>>>>>>>// DFBTRFN_SET_TRANSACTION_TYPE options
41277>>>>>>>>>//
41277>>>>>>>>>
41277>>>>>>>>>
41277>>>>>>>>>//
41277>>>>>>>>>// Command to create all vars which may be needed
41277>>>>>>>>>// in other commands.
41277>>>>>>>>>//
41277>>>>>>>>>
41277>>>>>>>>>
41277>>>>>>>>>
41277>>>>>>>>>//
41277>>>>>>>>>// Command to set the owner of a Btrieve file.
41277>>>>>>>>>// File must have been opened.
41277>>>>>>>>>// Filenumber needs to be passed.
41277>>>>>>>>>// To clear set the owner to "".
41277>>>>>>>>>// Examples:
41277>>>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret"
41277>>>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY CALLBACK MyCallBack
41277>>>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" ENCRYPT
41277>>>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY ENCRYPT CALLBACK MyCallBack
41277>>>>>>>>>// To clear:
41277>>>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to ""
41277>>>>>>>>>//
41277>>>>>>>>>
41277>>>>>>>>>
41277>>>>>>>>>
41277>>>>>>>>>//
41277>>>>>>>>>// Command to parse DFBTR_SET_OWNVER
41277>>>>>>>>>// options.
41277>>>>>>>>>//
41277>>>>>>>>>
41277>>>>>>>>>
41277>>>>>>>>>
41277>>>>>>>>>//
41277>>>>>>>>>// Command to parse for Callback
41277>>>>>>>>>//
41277>>>>>>>>>
41277>>>>>>>>>
41277>>>>>>>>>
41277>>>>>>>>>//
41277>>>>>>>>>// Command to clear the owner of a Btrieve file.
41277>>>>>>>>>// File must have been opened.
41277>>>>>>>>>// Filenumber needs to be passed.
41277>>>>>>>>>// Examples:
41277>>>>>>>>>//      DFBTR_CLEAR_OWNER MyFileNumber
41277>>>>>>>>>//
41277>>>>>>>>>
41277>>>>>>>>>
41277>>>>>>>>>
41277>>>>>>>>>//
41277>>>>>>>>>// Command to add a owner name to the internal list of ownernames
41277>>>>>>>>>// which will be tries when opening files.
41277>>>>>>>>>//
41277>>>>>>>>>
41277>>>>>>>>>
41277>>>>>>>>>
41277>>>>>>>>>//
41277>>>>>>>>>// Command to remove all owners from the internal list of ownernames
41277>>>>>>>>>//
41277>>>>>>>>>
41277>>>>>>>>>
41277>>>>>>>>>//
41277>>>>>>>>>// Command to set the owner name to be used when opening the DDF files.
41277>>>>>>>>>// The DDF owner is required when Pervasive.SQL security is turned on.
41277>>>>>>>>>// The DDF owner is equal to the password of the Master user in Pervasive.SQL
41277>>>>>>>>>// This command overwrites the DDF_OWNER setting in DFBTRDRV.INT
41277>>>>>>>>>//
41277>>>>>>>>>
41277>>>>>>>>>//
41277>>>>>>>>>// Command to change the transaction type.
41277>>>>>>>>>// Valid types are:
41277>>>>>>>>>//     DFBTRTT_NONE
41277>>>>>>>>>//     DFBTRTT_EXCLUSIVE
41277>>>>>>>>>//     DFBTRTT_CONCURRENT
41277>>>>>>>>>//
41277>>>>>>>>>//
41277>>>>>>>>>
41277>>>>>>>>>
41277>>>>>>>>>
41277>>>>>>>>>//
41277>>>>>>>>>// Command to get the current transaction type.
41277>>>>>>>>>//
41277>>>>>>>>>
41277>>>>>>>>>//
41277>>>>>>>>>// Command to set explicit_locking
41277>>>>>>>>>//
41277>>>>>>>>>
41277>>>>>>>>>//
41277>>>>>>>>>// Command to get explicit locking
41277>>>>>>>>>//
41277>>>>>>>>>
41277>>>>>>>>>//
41277>>>>>>>>>// Command to set detection for incompatible positive signs in numeric fields
41277>>>>>>>>>//
41277>>>>>>>>>
41277>>>>>>>>>//
41277>>>>>>>>>// Command to get detection for incompatible positive signs in numeric fields
41277>>>>>>>>>//
41277>>>>>>>>>
41277>>>>>>>>>// Purpose: An instance of this class can be used as a broker object to
41277>>>>>>>>>//          call several Dfbtrdrv releated methods.
41277>>>>>>>>>
41277>>>>>>>>>Class cDFBtrDrvHandler is an Array
41278>>>>>>>>>    
41278>>>>>>>>>    Procedure Construct_Object Integer iImage
41280>>>>>>>>>        Forward Send Construct_object iImage
41282>>>>>>>>>        
41282>>>>>>>>>        Property String  psDriverID "DFBTRDRV"
41283>>>>>>>>>    End_Procedure
41284>>>>>>>>>    
41284>>>>>>>>>    //  The revsion of a Dfbtrdrv Connectivity Kit
41284>>>>>>>>>    //
41284>>>>>>>>>    
41284>>>>>>>>>    Function CKRevision Returns String
41286>>>>>>>>>        String  sDriverID
41286>>>>>>>>>        String  sRevision
41286>>>>>>>>>        String  sVoid
41286>>>>>>>>>        Integer iRetval
41286>>>>>>>>>        
41286>>>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41286>>>>>>>>>        // This error would otherwise be raised when we have an older
41286>>>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
41286>>>>>>>>>        Send Ignore_error to Error_object_Id 20491
41287>>>>>>>>>        Get psDriverID to sDriverID
41288>>>>>>>>>        Move (Repeat(" ", 255)) to sRevision
41289>>>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKREVISION Callback 0 Passing sRevision sVoid 0 Result iRetval
41294>>>>>>>>>        Send Trap_Error to Error_object_Id 20491
41295>>>>>>>>>        If (Trim(sRevision) = "") Begin
41297>>>>>>>>>            // Unable to get the revision. return all zeroes.
41297>>>>>>>>>            Move "0.0.0.0" to sRevision
41298>>>>>>>>>        End
41298>>>>>>>>>>
41298>>>>>>>>>        Function_Return sRevision
41299>>>>>>>>>    End_Function
41300>>>>>>>>>    
41300>>>>>>>>>    Function CkUsesUri Returns Integer
41302>>>>>>>>>        String  sDriverID
41302>>>>>>>>>        String  sVoid1
41302>>>>>>>>>        String  sVoid2
41302>>>>>>>>>        Integer iRetval
41302>>>>>>>>>        
41302>>>>>>>>>        Get psDriverID to sDriverID
41303>>>>>>>>>        
41303>>>>>>>>>        Move 0 to iRetval
41304>>>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41304>>>>>>>>>        // This error would otherwise be raised when we have an older
41304>>>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKUSESURI function
41304>>>>>>>>>        Send Ignore_error to Error_object_Id 20491
41305>>>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKUSESURI Callback 0 Passing sVoid1 sVoid2 0 Result iRetval
41310>>>>>>>>>        Send Trap_Error to Error_object_Id 20491
41311>>>>>>>>>        
41311>>>>>>>>>        Function_Return iRetval
41312>>>>>>>>>    End_Function
41313>>>>>>>>>    
41313>>>>>>>>>    
41313>>>>>>>>>    
41313>>>>>>>>>    // Extract the Nth part of a a.b.c.d revsion string.
41313>>>>>>>>>    //
41313>>>>>>>>>    // Returns : The part version number or -1 if there is no such part number.
41313>>>>>>>>>    //
41313>>>>>>>>>    
41313>>>>>>>>>    Function ExtractPartFromRevision Integer iPartNum String sRevision Returns Integer
41315>>>>>>>>>        Integer iPartRev
41315>>>>>>>>>        Integer iCurrentPart
41315>>>>>>>>>        Integer iSeparatorPos
41315>>>>>>>>>        
41315>>>>>>>>>        If (iPartNum > 4) ;            Function_Return -1
41318>>>>>>>>>        
41318>>>>>>>>>        Move 0 to iCurrentPart
41319>>>>>>>>>        Repeat
41319>>>>>>>>>>
41319>>>>>>>>>            Move (Pos(".", sRevision)) to iSeparatorPos
41320>>>>>>>>>            If (iSeparatorPos > 0) Begin
41322>>>>>>>>>                Move (Left(sRevision, iSeparatorPos - 1)) to iPartRev
41323>>>>>>>>>                Move (Right(sRevision, Length(sRevision) - iSeparatorPos)) to sRevision
41324>>>>>>>>>                Increment iCurrentPart
41325>>>>>>>>>            End
41325>>>>>>>>>>
41325>>>>>>>>>            Else If (sRevision <> "") Begin
41328>>>>>>>>>                Move sRevision to iPartRev
41329>>>>>>>>>                Move "" to sRevision
41330>>>>>>>>>                Increment iCurrentPart
41331>>>>>>>>>            End
41331>>>>>>>>>>
41331>>>>>>>>>            Else ;                Move -1 to iPartRev
41333>>>>>>>>>        Until (iCurrentPart >= iPartNum or iPartRev = -1)
41335>>>>>>>>>        
41335>>>>>>>>>        Function_Return iPartRev
41336>>>>>>>>>    End_Function
41337>>>>>>>>>    
41337>>>>>>>>>    
41337>>>>>>>>>    
41337>>>>>>>>>    //
41337>>>>>>>>>    //  Returns the major revision of the CK
41337>>>>>>>>>    //
41337>>>>>>>>>    
41337>>>>>>>>>    Function CKMajorRevision Returns Integer
41339>>>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 1, CKRevision(Current_Object)))
41340>>>>>>>>>    End_Function
41341>>>>>>>>>    
41341>>>>>>>>>    
41341>>>>>>>>>    
41341>>>>>>>>>    //  Returns the minor revision of the CK
41341>>>>>>>>>    //
41341>>>>>>>>>    
41341>>>>>>>>>    Function CKMinorRevision Returns Integer
41343>>>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 2, CKRevision(Current_Object)))
41344>>>>>>>>>    End_Function
41345>>>>>>>>>    
41345>>>>>>>>>    
41345>>>>>>>>>    //  Returns the release revision of the CK
41345>>>>>>>>>    //
41345>>>>>>>>>    
41345>>>>>>>>>    Function CKReleaseRevision Returns Integer
41347>>>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 3, CKRevision(Current_Object)))
41348>>>>>>>>>    End_Function
41349>>>>>>>>>    
41349>>>>>>>>>    
41349>>>>>>>>>    //  Returns the major revision of the CK
41349>>>>>>>>>    //
41349>>>>>>>>>    
41349>>>>>>>>>    Function CKBuildRevision Returns Integer
41351>>>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 4, CKRevision(Current_Object)))
41352>>>>>>>>>    End_Function
41353>>>>>>>>>    
41353>>>>>>>>>    
41353>>>>>>>>>    //  Determines if the CK conforms to a passed minimal revsion.
41353>>>>>>>>>    //
41353>>>>>>>>>    
41353>>>>>>>>>    Function IsMinimalRevision Integer iMajor Integer iMinor Integer iRelease Integer iBuild Returns Integer
41355>>>>>>>>>        If (iMajor < CKMajorRevision(Current_object)) ;            Function_Return (True)
41358>>>>>>>>>        Else If (iMajor = CKMajorRevision(Current_object)) Begin
41361>>>>>>>>>            If (iMinor < CKMinorRevision(Current_object)) ;                Function_Return (True)
41364>>>>>>>>>            Else If (iMinor = CKMinorRevision(Current_object)) Begin
41367>>>>>>>>>                If (iRelease < CKReleaseRevision(Current_object)) ;                    Function_Return (True)
41370>>>>>>>>>                Else If (iRelease = CKReleaseRevision(Current_object) and iBuild <= CKBuildRevision(Current_object)) ;                    Function_Return (True)
41374>>>>>>>>>            End
41374>>>>>>>>>>
41374>>>>>>>>>        End
41374>>>>>>>>>>
41374>>>>>>>>>        
41374>>>>>>>>>        Function_Return (False)
41375>>>>>>>>>    End_Function
41376>>>>>>>>>    
41376>>>>>>>>>    //   Functions to query the Pervasive.SQL version:
41376>>>>>>>>>    //       PSQLRequesterVersionInfo    Integer iFileNum Returns String
41376>>>>>>>>>    //       PSQLLocalEngineVersionInfo  Integer iFileNum Returns String
41376>>>>>>>>>    //       PSQLServerEngineVersionInfo Integer iFileNum Returns String
41376>>>>>>>>>    //
41376>>>>>>>>>    //   All 3 functions return the version of a Pervasive.SQL component
41376>>>>>>>>>    //   in the following format:
41376>>>>>>>>>    //       <version>.<revision>.<type>
41376>>>>>>>>>    //   possible values for <type>:
41376>>>>>>>>>    //       9 for 32-bit Windows workstation/workgroup engine or Linux
41376>>>>>>>>>    //         server using Workgroup authentication mode
41376>>>>>>>>>    //       C for client cache engine
41376>>>>>>>>>    //       D for DOS workstation
41376>>>>>>>>>    //       N for client Requester
41376>>>>>>>>>    //       S for NetWare server
41376>>>>>>>>>    //       T for 32-bit Windows server engine
41376>>>>>>>>>    //       U for Linux server using PAM or BTPASSWD authentication
41376>>>>>>>>>    //
41376>>>>>>>>>    //   example:
41376>>>>>>>>>    //       8.50.T
41376>>>>>>>>>    //   will be returned for a Pervasive.SQL 8.5 Server Engine running on
41376>>>>>>>>>    //   32-bits Windows server.
41376>>>>>>>>>    //
41376>>>>>>>>>    //   The FileNumber parameter must specify an opened table or 0.
41376>>>>>>>>>    //   For PSQLServerEngineVersionInfo the FileNumber can not be 0.
41376>>>>>>>>>    //
41376>>>>>>>>>    //   If the version information is not available or can not be obtained
41376>>>>>>>>>    //   the functions will return "0.0.0"
41376>>>>>>>>>    
41376>>>>>>>>>    //  Returns the version information of the
41376>>>>>>>>>    //           Pervasive.SQL Client requester.
41376>>>>>>>>>    
41376>>>>>>>>>    Function PSQLRequesterVersionInfo Integer iFileNum Returns String
41378>>>>>>>>>        
41378>>>>>>>>>        String  sDriverID
41378>>>>>>>>>        String  sVersion
41378>>>>>>>>>        String  sVoid
41378>>>>>>>>>        Integer iRetval
41378>>>>>>>>>        
41378>>>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41378>>>>>>>>>        // This error would otherwise be raised when we have an older
41378>>>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
41378>>>>>>>>>        Send Ignore_error to Error_object_Id 20491
41379>>>>>>>>>        Get psDriverID to sDriverID
41380>>>>>>>>>        Move (Repeat(" ", 255)) to sVersion
41381>>>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLREQUESTERVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
41386>>>>>>>>>        Send Trap_Error to Error_object_Id 20491
41387>>>>>>>>>        If (Trim(sVersion) = "") Begin
41389>>>>>>>>>            // Unable to get the revision. return all zeroes.
41389>>>>>>>>>            Move "0.0.0" to sVersion
41390>>>>>>>>>        End
41390>>>>>>>>>>
41390>>>>>>>>>        Function_Return sVersion
41391>>>>>>>>>    End_Function
41392>>>>>>>>>    
41392>>>>>>>>>    //           Pervasive.SQL Engine
41392>>>>>>>>>    
41392>>>>>>>>>    Function PSQLLocalEngineVersionInfo Integer iFileNum Returns String
41394>>>>>>>>>        
41394>>>>>>>>>        String  sDriverID
41394>>>>>>>>>        String  sVersion
41394>>>>>>>>>        String  sVoid
41394>>>>>>>>>        Integer iRetval
41394>>>>>>>>>        
41394>>>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41394>>>>>>>>>        // This error would otherwise be raised when we have an older
41394>>>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
41394>>>>>>>>>        Send Ignore_error to Error_object_Id 20491
41395>>>>>>>>>        Get psDriverID to sDriverID
41396>>>>>>>>>        Move (Repeat(" ", 255)) to sVersion
41397>>>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLLOCALENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
41402>>>>>>>>>        Send Trap_Error to Error_object_Id 20491
41403>>>>>>>>>        If (Trim(sVersion) = "") Begin
41405>>>>>>>>>            // Unable to get the revision. return all zeroes.
41405>>>>>>>>>            Move "0.0.0" to sVersion
41406>>>>>>>>>        End
41406>>>>>>>>>>
41406>>>>>>>>>        Function_Return sVersion
41407>>>>>>>>>    End_Function
41408>>>>>>>>>    
41408>>>>>>>>>    //  Returns the version information of the
41408>>>>>>>>>    //           Pervasive.SQL Server Engine
41408>>>>>>>>>    
41408>>>>>>>>>    Function PSQLServerEngineVersionInfo Integer iFileNum Returns String
41410>>>>>>>>>        
41410>>>>>>>>>        String  sDriverID
41410>>>>>>>>>        String  sVersion
41410>>>>>>>>>        String  sVoid
41410>>>>>>>>>        Integer iRetval
41410>>>>>>>>>        
41410>>>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
41410>>>>>>>>>        // This error would otherwise be raised when we have an older
41410>>>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
41410>>>>>>>>>        Send Ignore_error to Error_object_Id 20491
41411>>>>>>>>>        Get psDriverID to sDriverID
41412>>>>>>>>>        Move (Repeat(" ", 255)) to sVersion
41413>>>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLSERVERENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
41418>>>>>>>>>        Send Trap_Error to Error_object_Id 20491
41419>>>>>>>>>        If (Trim(sVersion) = "") Begin
41421>>>>>>>>>            // Unable to get the revision. return all zeroes.
41421>>>>>>>>>            Move "0.0.0" to sVersion
41422>>>>>>>>>        End
41422>>>>>>>>>>
41422>>>>>>>>>        Function_Return sVersion
41423>>>>>>>>>    End_Function
41424>>>>>>>>>    
41424>>>>>>>>>End_Class
41425>>>>>>>>>
41425>>>>>>>>>
41425>>>>>>>Use cSQLConnectionIniFile.inc
Including file: cSQLConnectionIniFile.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cSQLConnectionIniFile.inc)
41425>>>>>>>>>//****************************************************************************
41425>>>>>>>>>// $Module type: Include file
41425>>>>>>>>>// $Module name: cSQLConnectionIniFile.inc
41425>>>>>>>>>//
41425>>>>>>>>>// $Author     : Nils G. Svedmyr, RDC Tools International.
41425>>>>>>>>>// Copyright (c) 2012 RDC Tools International
41425>>>>>>>>>// E-mail      : support@rdctools.com
41425>>>>>>>>>// Web-site    : http://www.rdctools.com
41425>>>>>>>>>//
41425>>>>>>>>>// Created     : 2017-01-18 @ 13:04 (Military date format - Year-Month-Day)
41425>>>>>>>>>//
41425>>>>>>>>>// Note        : Header file with constant declarations for the cSQLConnectionIniFile class.
41425>>>>>>>>>//
41425>>>>>>>>>// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
41425>>>>>>>>>// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
41425>>>>>>>>>// This is free software; you can redistribute it and/or modify it under the terms of the
41425>>>>>>>>>// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
41425>>>>>>>>>// in the help folder for more details.
41425>>>>>>>>>//
41425>>>>>>>>>Use Winkern.pkg
41425>>>>>>>>>Use cIniFile.pkg
41425>>>>>>>>>    Use cCryptographerEx.pkg
Including file: cCryptographerEx.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCryptographerEx.pkg)
41425>>>>>>>>>>>Use VdfBase.pkg
41425>>>>>>>>>>>
41425>>>>>>>>>>>Use CryptographerConstants.pkg
Including file: CryptographerConstants.pkg    (C:\Program Files\DataFlex 23.0\Pkg\CryptographerConstants.pkg)
41425>>>>>>>>>>>>>//   Author  : Ulbe Stellema
41425>>>>>>>>>>>>>// Algorithm classes
41425>>>>>>>>>>>>>Define ALG_CLASS_ANY                    for |CI$00000000 // (0)
41425>>>>>>>>>>>>>Define ALG_CLASS_SIGNATURE              for |CI$00002000 // (1 << 13)
41425>>>>>>>>>>>>>Define ALG_CLASS_MSG_ENCRYPT            for |CI$00004000 // (2 << 13)
41425>>>>>>>>>>>>>Define ALG_CLASS_DATA_ENCRYPT           for |CI$00006000 // (3 << 13)
41425>>>>>>>>>>>>>Define ALG_CLASS_HASH                   for |CI$00008000 // (4 << 13)
41425>>>>>>>>>>>>>Define ALG_CLASS_KEY_EXCHANGE           for |CI$0000A000 // (5 << 13)
41425>>>>>>>>>>>>>Define ALG_CLASS_ALL                    for |CI$0000E000 // (7 << 13)
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// Algorithm types
41425>>>>>>>>>>>>>Define ALG_TYPE_ANY                     for |CI$00000000 // (0)
41425>>>>>>>>>>>>>Define ALG_TYPE_DSS                     for |CI$00000200 // (1 << 9)
41425>>>>>>>>>>>>>Define ALG_TYPE_RSA                     for |CI$00000400 // (2 << 9)
41425>>>>>>>>>>>>>Define ALG_TYPE_BLOCK                   for |CI$00000600 // (3 << 9)
41425>>>>>>>>>>>>>Define ALG_TYPE_STREAM                  for |CI$00000800 // (4 << 9)
41425>>>>>>>>>>>>>Define ALG_TYPE_DH                      for |CI$00000A00 // (5 << 9)
41425>>>>>>>>>>>>>Define ALG_TYPE_SECURECHANNEL           for |CI$00000C00 // (6 << 9)
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// Generic sub-ids
41425>>>>>>>>>>>>>Define ALG_SID_ANY                      for |CI$00000000 // (0)
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// RSA sub-ids
41425>>>>>>>>>>>>>Define ALG_SID_RSA_ANY                  for 0
41425>>>>>>>>>>>>>Define ALG_SID_RSA_PKCS                 for 1
41425>>>>>>>>>>>>>Define ALG_SID_RSA_MSATWORK             for 2
41425>>>>>>>>>>>>>Define ALG_SID_RSA_ENTRUST              for 3
41425>>>>>>>>>>>>>Define ALG_SID_RSA_PGP                  for 4
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// DSS sub-ids
41425>>>>>>>>>>>>>Define ALG_SID_DSS_ANY                  for 0
41425>>>>>>>>>>>>>Define ALG_SID_DSS_PKCS                 for 1
41425>>>>>>>>>>>>>Define ALG_SID_DSS_DMS                  for 2
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// DES sub_ids
41425>>>>>>>>>>>>>Define ALG_SID_DES                      for 1
41425>>>>>>>>>>>>>Define ALG_SID_3DES                     for 3
41425>>>>>>>>>>>>>Define ALG_SID_DESX                     for 4
41425>>>>>>>>>>>>>Define ALG_SID_IDEA                     for 5
41425>>>>>>>>>>>>>Define ALG_SID_CAST                     for 6
41425>>>>>>>>>>>>>Define ALG_SID_SAFERSK64                for 7
41425>>>>>>>>>>>>>Define ALG_SID_SAFERSK128               for 8
41425>>>>>>>>>>>>>Define ALG_SID_3DES_112                 for 9
41425>>>>>>>>>>>>>Define ALG_SID_CYLINK_MEK               for 12
41425>>>>>>>>>>>>>Define ALG_SID_RC5                      for 13
41425>>>>>>>>>>>>>Define ALG_SID_AES_128                  for 14
41425>>>>>>>>>>>>>Define ALG_SID_AES_192                  for 15
41425>>>>>>>>>>>>>Define ALG_SID_AES_256                  for 16
41425>>>>>>>>>>>>>Define ALG_SID_AES                      for 17
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// Fortezza sub-ids
41425>>>>>>>>>>>>>Define ALG_SID_SKIPJACK                 for 10
41425>>>>>>>>>>>>>Define ALG_SID_TEK                      for 11
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// RC2 sub-ids
41425>>>>>>>>>>>>>Define ALG_SID_RC2                      for 2
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// Stream cipher sub-ids
41425>>>>>>>>>>>>>Define ALG_SID_RC4                      for 1
41425>>>>>>>>>>>>>Define ALG_SID_SEAL                     for 2
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// Diffie-Hellman sub-ids
41425>>>>>>>>>>>>>Define ALG_SID_DH_SANDF                 for 1
41425>>>>>>>>>>>>>Define ALG_SID_DH_EPHEM                 for 2
41425>>>>>>>>>>>>>Define ALG_SID_AGREED_KEY_ANY           for 3
41425>>>>>>>>>>>>>Define ALG_SID_KEA                      for 4
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// Hash sub ids
41425>>>>>>>>>>>>>Define ALG_SID_MD2                      for 1
41425>>>>>>>>>>>>>Define ALG_SID_MD4                      for 2
41425>>>>>>>>>>>>>Define ALG_SID_MD5                      for 3
41425>>>>>>>>>>>>>Define ALG_SID_SHA                      for 4
41425>>>>>>>>>>>>>Define ALG_SID_SHA1                     for 4
41425>>>>>>>>>>>>>Define ALG_SID_MAC                      for 5
41425>>>>>>>>>>>>>Define ALG_SID_RIPEMD                   for 6
41425>>>>>>>>>>>>>Define ALG_SID_RIPEMD160                for 7
41425>>>>>>>>>>>>>Define ALG_SID_SSL3SHAMD5               for 8
41425>>>>>>>>>>>>>Define ALG_SID_HMAC                     for 9
41425>>>>>>>>>>>>>Define ALG_SID_TLS1PRF                  for 10
41425>>>>>>>>>>>>>Define ALG_SID_HASH_REPLACE_OWF         for 11
41425>>>>>>>>>>>>>Define ALG_SID_SHA_256                  for 12
41425>>>>>>>>>>>>>Define ALG_SID_SHA_384                  for 13
41425>>>>>>>>>>>>>Define ALG_SID_SHA_512                  for 14
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// secure channel sub ids
41425>>>>>>>>>>>>>Define ALG_SID_SSL3_MASTER              for 1
41425>>>>>>>>>>>>>Define ALG_SID_SCHANNEL_MASTER_HASH     for 2
41425>>>>>>>>>>>>>Define ALG_SID_SCHANNEL_MAC_KEY         for 3
41425>>>>>>>>>>>>>Define ALG_SID_PCT1_MASTER              for 4
41425>>>>>>>>>>>>>Define ALG_SID_SSL2_MASTER              for 5
41425>>>>>>>>>>>>>Define ALG_SID_TLS1_MASTER              for 6
41425>>>>>>>>>>>>>Define ALG_SID_SCHANNEL_ENC_KEY         for 7
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// algorithm identifier definitions
41425>>>>>>>>>>>>>Define CALG_MD2                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD2)
41425>>>>>>>>>>>>>Define CALG_MD4                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD4)
41425>>>>>>>>>>>>>Define CALG_MD5                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD5)
41425>>>>>>>>>>>>>Define CALG_SHA                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA)
41425>>>>>>>>>>>>>Define CALG_SHA1                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA1)
41425>>>>>>>>>>>>>Define CALG_MAC                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MAC)
41425>>>>>>>>>>>>>Define CALG_RSA_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
41425>>>>>>>>>>>>>Define CALG_DSS_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_DSS ior ALG_SID_DSS_ANY)
41425>>>>>>>>>>>>>Define CALG_NO_SIGN                     for (ALG_CLASS_SIGNATURE ior ALG_TYPE_ANY ior ALG_SID_ANY)
41425>>>>>>>>>>>>>Define CALG_RSA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
41425>>>>>>>>>>>>>Define CALG_DES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DES)
41425>>>>>>>>>>>>>Define CALG_3DES_112                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES_112)
41425>>>>>>>>>>>>>Define CALG_3DES                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES)
41425>>>>>>>>>>>>>Define CALG_DESX                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DESX)
41425>>>>>>>>>>>>>Define CALG_RC2                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC2)
41425>>>>>>>>>>>>>Define CALG_RC4                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_RC4)
41425>>>>>>>>>>>>>Define CALG_SEAL                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_SEAL)
41425>>>>>>>>>>>>>Define CALG_DH_SF                       for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_SANDF)
41425>>>>>>>>>>>>>Define CALG_DH_EPHEM                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_EPHEM)
41425>>>>>>>>>>>>>Define CALG_AGREEDKEY_ANY               for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_AGREED_KEY_ANY)
41425>>>>>>>>>>>>>Define CALG_KEA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_KEA)
41425>>>>>>>>>>>>>Define CALG_HUGHES_MD5                  for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_ANY ior ALG_SID_MD5)
41425>>>>>>>>>>>>>Define CALG_SKIPJACK                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_SKIPJACK)
41425>>>>>>>>>>>>>Define CALG_TEK                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_TEK)
41425>>>>>>>>>>>>>Define CALG_CYLINK_MEK                  for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_CYLINK_MEK)
41425>>>>>>>>>>>>>Define CALG_SSL3_SHAMD5                 for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SSL3SHAMD5)
41425>>>>>>>>>>>>>Define CALG_SSL3_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL3_MASTER)
41425>>>>>>>>>>>>>Define CALG_SCHANNEL_MASTER_HASH        for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MASTER_HASH)
41425>>>>>>>>>>>>>Define CALG_SCHANNEL_MAC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MAC_KEY)
41425>>>>>>>>>>>>>Define CALG_SCHANNEL_ENC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_ENC_KEY)
41425>>>>>>>>>>>>>Define CALG_PCT1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_PCT1_MASTER)
41425>>>>>>>>>>>>>Define CALG_SSL2_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL2_MASTER)
41425>>>>>>>>>>>>>Define CALG_TLS1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_TLS1_MASTER)
41425>>>>>>>>>>>>>Define CALG_RC5                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC5)
41425>>>>>>>>>>>>>Define CALG_HMAC                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HMAC)
41425>>>>>>>>>>>>>Define CALG_TLS1PRF                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_TLS1PRF)
41425>>>>>>>>>>>>>Define CALG_HASH_REPLACE_OWF            for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HASH_REPLACE_OWF)
41425>>>>>>>>>>>>>Define CALG_AES_128                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_128)
41425>>>>>>>>>>>>>Define CALG_AES_192                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_192)
41425>>>>>>>>>>>>>Define CALG_AES_256                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_256)
41425>>>>>>>>>>>>>Define CALG_AES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES)
41425>>>>>>>>>>>>>Define CALG_SHA_256                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_256)
41425>>>>>>>>>>>>>Define CALG_SHA_384                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_384)
41425>>>>>>>>>>>>>Define CALG_SHA_512                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_512)
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// Providers
41425>>>>>>>>>>>>>Define MS_DEF_PROV                      for "Microsoft Base Cryptographic Provider v1.0"
41425>>>>>>>>>>>>>Define MS_ENHANCED_PROV                 for "Microsoft Enhanced Cryptographic Provider v1.0"
41425>>>>>>>>>>>>>Define MS_STRONG_PROV                   for "Microsoft Strong Cryptographic Provider"
41425>>>>>>>>>>>>>Define MS_DEF_RSA_SIG_PROV              for "Microsoft RSA Signature Cryptographic Provider"
41425>>>>>>>>>>>>>Define MS_DEF_RSA_SCHANNEL_PROV         for "Microsoft RSA SChannel Cryptographic Provider"
41425>>>>>>>>>>>>>Define MS_DEF_DSS_PROV                  for "Microsoft Base DSS Cryptographic Provider"
41425>>>>>>>>>>>>>Define MS_DEF_DSS_DH_PROV               for "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
41425>>>>>>>>>>>>>Define MS_ENH_DSS_DH_PROV               for "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
41425>>>>>>>>>>>>>Define MS_DEF_DH_SCHANNEL_PROV          for "Microsoft DH SChannel Cryptographic Provider"
41425>>>>>>>>>>>>>Define MS_SCARD_PROV                    for "Microsoft Base Smart Card Crypto Provider"
41425>>>>>>>>>>>>>Define MS_ENH_RSA_AES_PROV              for "Microsoft Enhanced RSA and AES Cryptographic Provider"
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// dwFlags definitions for CryptAcquireContext
41425>>>>>>>>>>>>>Define CRYPT_VERIFYCONTEXT              for |CI$F0000000
41425>>>>>>>>>>>>>Define CRYPT_NEWKEYSET                  for |CI$00000008
41425>>>>>>>>>>>>>Define CRYPT_DELETEKEYSET               for |CI$00000010
41425>>>>>>>>>>>>>Define CRYPT_MACHINE_KEYSET             for |CI$00000020
41425>>>>>>>>>>>>>Define CRYPT_SILENT                     for |CI$00000040
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// dwFlag definitions for CryptGenKey
41425>>>>>>>>>>>>>Define CRYPT_EXPORTABLE                 for |CI$00000001
41425>>>>>>>>>>>>>Define CRYPT_USER_PROTECTED             for |CI$00000002
41425>>>>>>>>>>>>>Define CRYPT_CREATE_SALT                for |CI$00000004
41425>>>>>>>>>>>>>Define CRYPT_UPDATE_KEY                 for |CI$00000008
41425>>>>>>>>>>>>>Define CRYPT_NO_SALT                    for |CI$00000010
41425>>>>>>>>>>>>>Define CRYPT_PREGEN                     for |CI$00000040
41425>>>>>>>>>>>>>Define CRYPT_RECIPIENT                  for |CI$00000010
41425>>>>>>>>>>>>>Define CRYPT_INITIATOR                  for |CI$00000040
41425>>>>>>>>>>>>>Define CRYPT_ONLINE                     for |CI$00000080
41425>>>>>>>>>>>>>Define CRYPT_SF                         for |CI$00000100
41425>>>>>>>>>>>>>Define CRYPT_CREATE_IV                  for |CI$00000200
41425>>>>>>>>>>>>>Define CRYPT_KEK                        for |CI$00000400
41425>>>>>>>>>>>>>Define CRYPT_DATA_KEY                   for |CI$00000800
41425>>>>>>>>>>>>>Define CRYPT_VOLATILE                   for |CI$00001000
41425>>>>>>>>>>>>>Define CRYPT_SGCKEY                     for |CI$00002000
41425>>>>>>>>>>>>>Define CRYPT_ARCHIVABLE                 for |CI$00004000
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// Provider types
41425>>>>>>>>>>>>>Define PROV_RSA_FULL                    for 1
41425>>>>>>>>>>>>>Define PROV_RSA_SIG                     for 2
41425>>>>>>>>>>>>>Define PROV_DSS                         for 3
41425>>>>>>>>>>>>>Define PROV_FORTEZZA                    for 4
41425>>>>>>>>>>>>>Define PROV_MS_EXCHANGE                 for 5
41425>>>>>>>>>>>>>Define PROV_SSL                         for 6
41425>>>>>>>>>>>>>Define PROV_RSA_SCHANNEL                for 12
41425>>>>>>>>>>>>>Define PROV_DSS_DH                      for 13
41425>>>>>>>>>>>>>Define PROV_EC_ECDSA_SIG                for 14
41425>>>>>>>>>>>>>Define PROV_EC_ECNRA_SIG                for 15
41425>>>>>>>>>>>>>Define PROV_EC_ECDSA_FULL               for 16
41425>>>>>>>>>>>>>Define PROV_EC_ECNRA_FULL               for 17
41425>>>>>>>>>>>>>Define PROV_DH_SCHANNEL                 for 18
41425>>>>>>>>>>>>>Define PROV_SPYRUS_LYNKS                for 20
41425>>>>>>>>>>>>>Define PROV_RNG                         for 21
41425>>>>>>>>>>>>>Define PROV_INTEL_SEC                   for 22
41425>>>>>>>>>>>>>Define PROV_REPLACE_OWF                 for 23
41425>>>>>>>>>>>>>Define PROV_RSA_AES                     for 24
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// KP_MODE
41425>>>>>>>>>>>>>// KP_MODE
41425>>>>>>>>>>>>>Define CRYPT_MODE_CBC                   for 1       // Cipher block chaining
41425>>>>>>>>>>>>>Define CRYPT_MODE_ECB                   for 2       // Electronic code book
41425>>>>>>>>>>>>>Define CRYPT_MODE_OFB                   for 3       // Output feedback mode
41425>>>>>>>>>>>>>Define CRYPT_MODE_CFB                   for 4       // Cipher feedback mode
41425>>>>>>>>>>>>>Define CRYPT_MODE_CTS                   for 5       // Ciphertext stealing mode
41425>>>>>>>>>>>>>Define CRYPT_MODE_CBCI                  for 6       // ANSI CBC Interleaved
41425>>>>>>>>>>>>>Define CRYPT_MODE_CFBP                  for 7       // ANSI CFB Pipelined
41425>>>>>>>>>>>>>Define CRYPT_MODE_OFBP                  for 8       // ANSI OFB Pipelined
41425>>>>>>>>>>>>>Define CRYPT_MODE_CBCOFM                for 9       // ANSI CBC + OF Masking
41425>>>>>>>>>>>>>Define CRYPT_MODE_CBCOFMI               for 10      // ANSI CBC + OFM Interleaved
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// dwParam definitions for CryptGetKeyParam
41425>>>>>>>>>>>>>Define KP_IV                            for 1       // Initialization vector
41425>>>>>>>>>>>>>Define KP_SALT                          for 2       // Salt value
41425>>>>>>>>>>>>>Define KP_PADDING                       for 3       // Padding values
41425>>>>>>>>>>>>>Define KP_MODE                          for 4       // Mode of the cipher
41425>>>>>>>>>>>>>Define KP_MODE_BITS                     for 5       // Number of bits to feedback
41425>>>>>>>>>>>>>Define KP_PERMISSIONS                   for 6       // Key permissions DWORD
41425>>>>>>>>>>>>>Define KP_ALGID                         for 7       // Key algorithm
41425>>>>>>>>>>>>>Define KP_BLOCKLEN                      for 8       // Block size of the cipher
41425>>>>>>>>>>>>>Define KP_KEYLEN                        for 9       // Length of key in bits
41425>>>>>>>>>>>>>Define KP_SALT_EX                       for 10      // Length of salt in bytes
41425>>>>>>>>>>>>>Define KP_P                             for 11      // DSS/Diffie-Hellman P value
41425>>>>>>>>>>>>>Define KP_G                             for 12      // DSS/Diffie-Hellman G value
41425>>>>>>>>>>>>>Define KP_Q                             for 13      // DSS Q value
41425>>>>>>>>>>>>>Define KP_X                             for 14      // Diffie-Hellman X value
41425>>>>>>>>>>>>>Define KP_Y                             for 15      // Y value
41425>>>>>>>>>>>>>Define KP_RA                            for 16      // Fortezza RA value
41425>>>>>>>>>>>>>Define KP_RB                            for 17      // Fortezza RB value
41425>>>>>>>>>>>>>Define KP_INFO                          for 18      // for putting information into an RSA envelope
41425>>>>>>>>>>>>>Define KP_EFFECTIVE_KEYLEN              for 19      // setting and getting RC2 effective key length
41425>>>>>>>>>>>>>Define KP_SCHANNEL_ALG                  for 20      // for setting the Secure Channel algorithms
41425>>>>>>>>>>>>>Define KP_CLIENT_RANDOM                 for 21      // for setting the Secure Channel client random data
41425>>>>>>>>>>>>>Define KP_SERVER_RANDOM                 for 22      // for setting the Secure Channel server random data
41425>>>>>>>>>>>>>Define KP_RP                            for 23
41425>>>>>>>>>>>>>Define KP_PRECOMP_MD5                   for 24
41425>>>>>>>>>>>>>Define KP_PRECOMP_SHA                   for 25
41425>>>>>>>>>>>>>Define KP_CERTIFICATE                   for 26      // for setting Secure Channel certificate data (PCT1)
41425>>>>>>>>>>>>>Define KP_CLEAR_KEY                     for 27      // for setting Secure Channel clear key data (PCT1)
41425>>>>>>>>>>>>>Define KP_PUB_EX_LEN                    for 28
41425>>>>>>>>>>>>>Define KP_PUB_EX_VAL                    for 29
41425>>>>>>>>>>>>>Define KP_KEYVAL                        for 30
41425>>>>>>>>>>>>>Define KP_ADMIN_PIN                     for 31
41425>>>>>>>>>>>>>Define KP_KEYEXCHANGE_PIN               for 32
41425>>>>>>>>>>>>>Define KP_SIGNATURE_PIN                 for 33
41425>>>>>>>>>>>>>Define KP_PREHASH                       for 34
41425>>>>>>>>>>>>>Define KP_ROUNDS                        for 35
41425>>>>>>>>>>>>>Define KP_OAEP_PARAMS                   for 36      // for setting OAEP params on RSA keys
41425>>>>>>>>>>>>>Define KP_CMS_KEY_INFO                  for 37
41425>>>>>>>>>>>>>Define KP_CMS_DH_KEY_INFO               for 38
41425>>>>>>>>>>>>>Define KP_PUB_PARAMS                    for 39      // for setting public parameters
41425>>>>>>>>>>>>>Define KP_VERIFY_PARAMS                 for 40      // for verifying DSA and DH parameters
41425>>>>>>>>>>>>>Define KP_HIGHEST_VERSION               for 41      // for TLS protocol version setting
41425>>>>>>>>>>>>>Define KP_GET_USE_COUNT                 for 42      // for use with PP_CRYPT_COUNT_KEY_USE contexts
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// dwParam definitions for CryptGetHashParam
41425>>>>>>>>>>>>>Define HP_ALGID                         for |CI$0001  // Hash algorithm
41425>>>>>>>>>>>>>Define HP_HASHVAL                       for |CI$0002  // Hash value
41425>>>>>>>>>>>>>Define HP_HASHSIZE                      for |CI$0004  // Hash value size
41425>>>>>>>>>>>>>Define HP_HMAC_INFO                     for |CI$0005  // information for creating an HMA
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// key BLOB types
41425>>>>>>>>>>>>>Define KEYSTATEBLOB                     for |CI$0C
41425>>>>>>>>>>>>>Define OPAQUEKEYBLOB                    for |CI$09
41425>>>>>>>>>>>>>Define PLAINTEXTKEYBLOB                 for |CI$08
41425>>>>>>>>>>>>>Define PRIVATEKEYBLOB                   for |CI$07
41425>>>>>>>>>>>>>Define PUBLICKEYBLOB                    for |CI$06
41425>>>>>>>>>>>>>Define PUBLICKEYBLOBEX                  for |CI$0A
41425>>>>>>>>>>>>>Define SIMPLEBLOB                       for |CI$01
41425>>>>>>>>>>>>>Define SYMMETRICWRAPKEYBLOB             for |CI$0B
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>Define CUR_BLOB_VERSION                 for 2
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// KP_PADDING
41425>>>>>>>>>>>>>Define PKCS5_PADDING                    for 1       // PKCS 5 (sec 6.2) padding method
41425>>>>>>>>>>>>>Define RANDOM_PADDING                   for 2
41425>>>>>>>>>>>>>Define ZERO_PADDING                     for 3
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>//  Structure cryptimportkey
41425>>>>>>>>>>>>>Struct PUBLICKEYSTRUC
41425>>>>>>>>>>>>>    UChar    bType
41425>>>>>>>>>>>>>    UChar    bVersion
41425>>>>>>>>>>>>>    UShort   reserved
41425>>>>>>>>>>>>>    UInteger aiKeyAlg
41425>>>>>>>>>>>>>End_Struct
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>Struct tPLAINTEXTKEYBLOB
41425>>>>>>>>>>>>>    PUBLICKEYSTRUC hdr
41425>>>>>>>>>>>>>    PUBLICKEYSTRUC hdr
41425>>>>>>>>>>>>>    UInteger       dwKeySize
41425>>>>>>>>>>>>>//    UChar[]        rgbKeyData
41425>>>>>>>>>>>>>End_Struct
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>//  Structure for specifying the inner and outer strings when calculating HMAC hash (use with CryptSetHashParam)
41425>>>>>>>>>>>>>Struct HMAC_INFO
41425>>>>>>>>>>>>>    UInteger HashAlgid
41425>>>>>>>>>>>>>    Pointer pbInnerString
41425>>>>>>>>>>>>>    DWord cbInnerString
41425>>>>>>>>>>>>>    Pointer pbOuterString
41425>>>>>>>>>>>>>    DWord cbOuterString
41425>>>>>>>>>>>>>End_Struct
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>Struct BLOBHEADER
41425>>>>>>>>>>>>>    UChar   bType
41425>>>>>>>>>>>>>    UChar   bVersion
41425>>>>>>>>>>>>>    Short   reserved
41425>>>>>>>>>>>>>    Integer aiKeyAlg
41425>>>>>>>>>>>>>End_Struct
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>Struct CryptoBlob
41425>>>>>>>>>>>>>    BLOBHEADER  header
41425>>>>>>>>>>>>>    BLOBHEADER  header
41425>>>>>>>>>>>>>    Integer     cbKeySize
41425>>>>>>>>>>>>>    UChar[32]   rgbKeyData
41425>>>>>>>>>>>>>End_Struct
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>
41425>>>>>>>>>>>>>// Note: lpContainer and lpProvider refer to WString types.
41425>>>>>>>>>>>>>External_Function CryptAcquireContextW "CryptAcquireContextW" advapi32.dll ;    Pointer phProv ;    Pointer lpContainer ;    Pointer lpProvider ;    Integer dwProvType ;    Integer dwFlags ;    Returns Boolean
41426>>>>>>>>>>>>>
41426>>>>>>>>>>>>>// Compatibilty wrapper Function CryptAcquireContext
41426>>>>>>>>>>>>>Function CryptAcquireContext Global ;    Pointer phProv ;    Pointer szContainer ;    Pointer szProvider ;    Integer dwProvType ;    Integer dwFlags ;    Returns Boolean
41428>>>>>>>>>>>>>    
41428>>>>>>>>>>>>>    Boolean bResult
41428>>>>>>>>>>>>>    UWide   uwContainer uwProvider
41428>>>>>>>>>>>>>    UWide   uwContainer uwProvider
41428>>>>>>>>>>>>>
41428>>>>>>>>>>>>>    Send StringToWide szContainer (&uwContainer)
41429>>>>>>>>>>>>>    Send StringToWide szProvider (&uwProvider)
41430>>>>>>>>>>>>>    
41430>>>>>>>>>>>>>    Move (CryptAcquireContextW (phProv, uwContainer.lpUText, uwProvider.lpUText, dwProvType, dwFlags)) to bResult                   
41431>>>>>>>>>>>>>
41431>>>>>>>>>>>>>    Function_Return bResult
41432>>>>>>>>>>>>>End_Function
41433>>>>>>>>>>>>>
41433>>>>>>>>>>>>>External_Function CryptReleaseContext "CryptReleaseContext" advapi32.dll ;    Handle hProv ;    Integer dwFlags ;    Returns Boolean
41434>>>>>>>>>>>>>
41434>>>>>>>>>>>>>External_Function CryptCreateHash "CryptCreateHash" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hKey ;    Integer dwFlags ;    Pointer phHash ;    Returns Boolean
41435>>>>>>>>>>>>>
41435>>>>>>>>>>>>>External_Function CryptDestroyHash "CryptDestroyHash" advapi32.dll ;    Handle hHash ;    Returns Boolean
41436>>>>>>>>>>>>>
41436>>>>>>>>>>>>>External_Function CryptHashData "CryptHashData" advapi32.dll ;    Handle hHash ;    Pointer pbData ;    Integer dwDataLen ;    Integer dwFlags ;    Returns Boolean
41437>>>>>>>>>>>>>
41437>>>>>>>>>>>>>External_Function CryptDeriveKey "CryptDeriveKey" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hBaseData ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
41438>>>>>>>>>>>>>
41438>>>>>>>>>>>>>External_Function CryptGetHashParam "CryptGetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    DWord dwFlags ;    Returns Integer
41439>>>>>>>>>>>>>
41439>>>>>>>>>>>>>External_Function CryptDestroyKey "CryptDestroyKey" advapi32.dll ;    Handle hKey ;    Returns Boolean
41440>>>>>>>>>>>>>
41440>>>>>>>>>>>>>External_Function CryptImportKey "CryptImportKey" advapi32.dll ;    Handle hProv ;    Pointer pbData ;    Integer dwDataLen ;    Handle hPubKey ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
41441>>>>>>>>>>>>>
41441>>>>>>>>>>>>>External_Function CryptGetKeyParam "CryptGetKeyParam" advapi32.dll ;    Handle hKey ;    Integer dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwFlags ;    Returns Boolean
41442>>>>>>>>>>>>>    
41442>>>>>>>>>>>>>External_Function CryptSetKeyParam "CryptSetKeyParam" advapi32.dll ;    Handle   hKey ;    UInteger dwParam ;    Pointer  pbdata ;    UInteger dwFlags ;    Returns  Boolean
41443>>>>>>>>>>>>>
41443>>>>>>>>>>>>>External_Function CryptEncrypt "CryptEncrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwBufLen ;    Returns Boolean
41444>>>>>>>>>>>>>
41444>>>>>>>>>>>>>External_Function CryptDecrypt "CryptDecrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Returns Boolean
41445>>>>>>>>>>>>>
41445>>>>>>>>>>>>>External_Function CryptGenRandom "CryptGenRandom" advapi32.dll ;    Handle hProv ;    DWord dwLen ;    Pointer pbBuffer ;    Returns Boolean
41446>>>>>>>>>>>>>    
41446>>>>>>>>>>>>>External_Function CryptSetHashParam "CryptSetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Integer dwFlags ;    Returns Boolean
41447>>>>>>>>>>>>>    
41447>>>>>>>>>>>>>External_Function CryptGenKey "CryptGenKey" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
41448>>>>>>>>>>>>>    
41448>>>>>>>>>>>>>External_Function CryptExportKey "CryptExportKey" advapi32.dll ;    Handle hKey ;    Handle hExpKey ;    Integer dwBlobType ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Returns Boolean
41449>>>>>>>>>>>
41449>>>>>>>>>>>Class cCryptographerEx is a cObject
41450>>>>>>>>>>>    
41450>>>>>>>>>>>    Procedure Construct_Object
41452>>>>>>>>>>>        Forward Send Construct_Object
41454>>>>>>>>>>>        
41454>>>>>>>>>>>        Property String     psProvider  MS_ENHANCED_PROV
41455>>>>>>>>>>>        Property Integer    piProvider  PROV_RSA_FULL
41456>>>>>>>>>>>        Property Integer    piCipher    CALG_RC4
41457>>>>>>>>>>>        Property Integer    piHash      CALG_MD5
41458>>>>>>>>>>>        
41458>>>>>>>>>>>        // Private properties
41458>>>>>>>>>>>        Property Handle     Private_phProv
41459>>>>>>>>>>>        
41459>>>>>>>>>>>        // Block cipher properties
41459>>>>>>>>>>>        Property UChar[]    paKey
41460>>>>>>>>>>>        Property UChar[]    paIV
41461>>>>>>>>>>>        Property Integer    piKeyAlg        PLAINTEXTKEYBLOB
41462>>>>>>>>>>>        Property Integer    piKeyType       CALG_AES_256
41463>>>>>>>>>>>        Property Integer    piKeyPadding    PKCS5_PADDING
41464>>>>>>>>>>>        Property Integer    piKeyMode       CRYPT_MODE_CBC
41465>>>>>>>>>>>        Property Integer    piBlockSize     16
41466>>>>>>>>>>>    End_Procedure
41467>>>>>>>>>>>    
41467>>>>>>>>>>>    
41467>>>>>>>>>>>    // Acquire key container handle
41467>>>>>>>>>>>    Function AcquireContext Returns Handle
41469>>>>>>>>>>>        Integer iProvider
41469>>>>>>>>>>>        WString wProvider
41469>>>>>>>>>>>        Handle hProv
41469>>>>>>>>>>>        Boolean bOk
41469>>>>>>>>>>>        Pointer pProv
41469>>>>>>>>>>>        
41469>>>>>>>>>>>        Move 0 to hProv
41470>>>>>>>>>>>        Get piProvider to iProvider
41471>>>>>>>>>>>        Get psProvider to wProvider
41472>>>>>>>>>>>        
41472>>>>>>>>>>>        //  Determine address to be passed as provider
41472>>>>>>>>>>>        If (Trim(wProvider) <> "") Begin
41474>>>>>>>>>>>            Move (AddressOf(wProvider)) to pProv
41475>>>>>>>>>>>        End
41475>>>>>>>>>>>>
41475>>>>>>>>>>>        Else Begin
41476>>>>>>>>>>>            Move 0 to pProv
41477>>>>>>>>>>>        End
41477>>>>>>>>>>>>
41477>>>>>>>>>>>        
41477>>>>>>>>>>>        //  Acquire Crypto Context. Note: pProv is pointer to UTF16 string.
41477>>>>>>>>>>>        Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_VERIFYCONTEXT)) to bOk
41478>>>>>>>>>>>        If (not(bOk) or hProv = 0) Begin
41480>>>>>>>>>>>            Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_NEWKEYSET ior CRYPT_VERIFYCONTEXT)) to bOk
41481>>>>>>>>>>>        End
41481>>>>>>>>>>>>
41481>>>>>>>>>>>        
41481>>>>>>>>>>>        If (not(bOk) or hProv = 0) Begin
41483>>>>>>>>>>>            // Fallback to original
41483>>>>>>>>>>>            Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,0)) to bOk
41484>>>>>>>>>>>            
41484>>>>>>>>>>>            If (not(bOk) or hProv = 0) Begin
41486>>>>>>>>>>>                Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_NEWKEYSET)) to bOk
41487>>>>>>>>>>>            End
41487>>>>>>>>>>>>
41487>>>>>>>>>>>        End
41487>>>>>>>>>>>>
41487>>>>>>>>>>>        Set Private_phProv to hProv
41488>>>>>>>>>>>        
41488>>>>>>>>>>>        Function_Return hProv
41489>>>>>>>>>>>    End_Function
41490>>>>>>>>>>>    
41490>>>>>>>>>>>    // Releases key container handle
41490>>>>>>>>>>>    Function ReleaseContext Handle hProv Returns Boolean
41492>>>>>>>>>>>        Function_Return (CryptReleaseContext(hProv,0))
41493>>>>>>>>>>>    End_Function
41494>>>>>>>>>>>    
41494>>>>>>>>>>>    // Creates hash object
41494>>>>>>>>>>>    Function CreateHash Handle hProv Returns Handle
41496>>>>>>>>>>>        Integer iAlgorithm
41496>>>>>>>>>>>        Handle hHash
41496>>>>>>>>>>>        Boolean bOk
41496>>>>>>>>>>>        
41496>>>>>>>>>>>        Move 0 to hHash
41497>>>>>>>>>>>        Get piHash to iAlgorithm
41498>>>>>>>>>>>        Move (CryptCreateHash(hProv,iAlgorithm,0,0,AddressOf(hHash))) to bOk
41499>>>>>>>>>>>        
41499>>>>>>>>>>>        Function_Return hHash
41500>>>>>>>>>>>    End_Function
41501>>>>>>>>>>>    
41501>>>>>>>>>>>    // Destroys the hash object
41501>>>>>>>>>>>    Function DestroyHash Handle hHash Returns Boolean
41503>>>>>>>>>>>        Function_Return (CryptDestroyHash(hHash))
41504>>>>>>>>>>>    End_Function
41505>>>>>>>>>>>    
41505>>>>>>>>>>>    // Adds data to hash object
41505>>>>>>>>>>>    Function HashData Handle hHash UChar[] ucData Returns Boolean
41507>>>>>>>>>>>        Function_Return (CryptHashData(hHash,AddressOf(ucData), SizeOfArray(ucData),0))
41508>>>>>>>>>>>    End_Function
41509>>>>>>>>>>>    
41509>>>>>>>>>>>    // Generates session key
41509>>>>>>>>>>>    Function DeriveKey Handle hProv Handle hHash Returns Handle
41511>>>>>>>>>>>        Integer iAlgorithm
41511>>>>>>>>>>>        Handle hKey
41511>>>>>>>>>>>        Boolean bOk
41511>>>>>>>>>>>        
41511>>>>>>>>>>>        Move 0 to hKey
41512>>>>>>>>>>>        Get piCipher to iAlgorithm
41513>>>>>>>>>>>        Move (CryptDeriveKey(hProv,iAlgorithm,hHash,CRYPT_EXPORTABLE,AddressOf(hKey))) to bOk
41514>>>>>>>>>>>        
41514>>>>>>>>>>>        Function_Return hKey
41515>>>>>>>>>>>    End_Function
41516>>>>>>>>>>>    
41516>>>>>>>>>>>    // Imports a plain text key
41516>>>>>>>>>>>    Function ImportPlainTextKey Handle hProv UChar[] ucaKey Returns Handle
41518>>>>>>>>>>>        tPLAINTEXTKEYBLOB blobhead
41518>>>>>>>>>>>        tPLAINTEXTKEYBLOB blobhead
41518>>>>>>>>>>>        Boolean   bSuccess
41518>>>>>>>>>>>        Handle    hKey
41518>>>>>>>>>>>        Integer   iHeadSize iKeySize
41518>>>>>>>>>>>        UChar[]   ucaKeyblob
41519>>>>>>>>>>>        Integer iVoid
41519>>>>>>>>>>>        
41519>>>>>>>>>>>        Move (SizeOfType(tPLAINTEXTKEYBLOB)) to iHeadSize
41520>>>>>>>>>>>        Move (SizeOfArray(ucaKey)) to iKeySize
41521>>>>>>>>>>>        
41521>>>>>>>>>>>        Move PLAINTEXTKEYBLOB to blobhead.hdr.bType
41522>>>>>>>>>>>        Move CUR_BLOB_VERSION   to blobhead.hdr.bVersion
41523>>>>>>>>>>>        Get piCipher            to blobhead.hdr.aiKeyAlg
41524>>>>>>>>>>>        Move iKeySize           to blobhead.dwKeySize
41525>>>>>>>>>>>        
41525>>>>>>>>>>>        Move (ResizeArray(ucaKeyblob, iHeadSize)) to ucaKeyblob
41526>>>>>>>>>>>        Move (CopyMemory(AddressOf(ucaKeyblob), AddressOf(blobhead), iHeadSize)) to iVoid
41527>>>>>>>>>>>        Move (AppendArray(ucaKeyblob, ucaKey)) to ucaKeyblob
41528>>>>>>>>>>>        
41528>>>>>>>>>>>        Move 0 to hKey
41529>>>>>>>>>>>        Move (CryptImportKey(hProv, AddressOf(ucaKeyblob), SizeOfArray(ucaKeyblob), 0, 0, AddressOf(hKey))) to bSuccess
41530>>>>>>>>>>>        If (not(bSuccess)) Begin
41532>>>>>>>>>>>            Move (ShowLastError()) to iVoid
41533>>>>>>>>>>>        End
41533>>>>>>>>>>>>
41533>>>>>>>>>>>        
41533>>>>>>>>>>>        Function_Return hKey
41534>>>>>>>>>>>    End_Function
41535>>>>>>>>>>>    
41535>>>>>>>>>>>    // Destroys the key
41535>>>>>>>>>>>    Function DestroyKey Handle hKey Returns Boolean
41537>>>>>>>>>>>        Function_Return (CryptDestroyKey(hKey))
41538>>>>>>>>>>>    End_Function
41539>>>>>>>>>>>    
41539>>>>>>>>>>>    // Retrieves key data
41539>>>>>>>>>>>    Function KeyParameter Handle hKey Integer iQuery Returns Integer
41541>>>>>>>>>>>        Integer iBuffer iLen
41541>>>>>>>>>>>        Boolean bOk
41541>>>>>>>>>>>        
41541>>>>>>>>>>>        Move (SizeOfType(Integer)) to iLen
41542>>>>>>>>>>>        Move (CryptGetKeyParam(hKey,iQuery,AddressOf(iBuffer),AddressOf(iLen),0)) to bOk
41543>>>>>>>>>>>        Function_Return iBuffer
41544>>>>>>>>>>>    End_Function
41545>>>>>>>>>>>    
41545>>>>>>>>>>>    // Retrieves a hash value
41545>>>>>>>>>>>    Function HashValue Handle lhHash Returns UChar[]
41547>>>>>>>>>>>        UChar[] ucHash
41548>>>>>>>>>>>        Integer liResult
41548>>>>>>>>>>>        DWord   dwDataLen
41548>>>>>>>>>>>        
41548>>>>>>>>>>>        Move 0 to dwDataLen
41549>>>>>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,0,AddressOf(dwDataLen),0)) to liResult
41550>>>>>>>>>>>        If (liResult = 0) ;            Function_Return ""
41553>>>>>>>>>>>        
41553>>>>>>>>>>>        Move (ResizeArray(ucHash, dwDataLen, 0)) to ucHash
41554>>>>>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,AddressOf(ucHash),AddressOf(dwDataLen),0)) to liResult
41555>>>>>>>>>>>        If (liResult = 0) ;            Function_Return ""
41558>>>>>>>>>>>        
41558>>>>>>>>>>>        Function_Return ucHash
41559>>>>>>>>>>>    End_Function
41560>>>>>>>>>>>
41560>>>>>>>>>>>    // Encrypts data
41560>>>>>>>>>>>    Function Encrypt UChar[] ucPassword UChar[] ucData Returns UChar[]
41562>>>>>>>>>>>        Handle hProv hHash hKey
41562>>>>>>>>>>>        Integer iAlgorithm iDataLen iCipherLen iErr
41562>>>>>>>>>>>        Boolean bOk
41562>>>>>>>>>>>        
41562>>>>>>>>>>>        Get AcquireContext to hProv
41563>>>>>>>>>>>        If (hProv) Begin
41565>>>>>>>>>>>            Get CreateHash hProv to hHash
41566>>>>>>>>>>>            If (hHash) Begin
41568>>>>>>>>>>>                Get HashData hHash ucPassword to bOk
41569>>>>>>>>>>>                If (bOk) Begin
41571>>>>>>>>>>>                    Get piCipher to iAlgorithm
41572>>>>>>>>>>>                    Get DeriveKey hProv hHash to hKey
41573>>>>>>>>>>>                End
41573>>>>>>>>>>>>
41573>>>>>>>>>>>                Get DestroyHash hHash to bOk
41574>>>>>>>>>>>            End
41574>>>>>>>>>>>>
41574>>>>>>>>>>>            
41574>>>>>>>>>>>            If (hKey) Begin
41576>>>>>>>>>>>                //  First call to determine resulting data size
41576>>>>>>>>>>>                Move (SizeOfArray(ucData)) to iDataLen
41577>>>>>>>>>>>                Move (SizeOfArray(ucData)) to iCipherLen
41578>>>>>>>>>>>                Move (CryptEncrypt(hKey, 0, True, 0, 0, AddressOf(iCipherLen), iDataLen)) to bOk
41579>>>>>>>>>>>                
41579>>>>>>>>>>>                //  Reserve space in string
41579>>>>>>>>>>>                If (iDataLen < iCipherLen) Begin
41581>>>>>>>>>>>                    Move (ResizeArray(ucData, iCipherLen, 0)) to ucData
41582>>>>>>>>>>>                End
41582>>>>>>>>>>>>
41582>>>>>>>>>>>                
41582>>>>>>>>>>>                //  Call to really decrypt
41582>>>>>>>>>>>                Move (CryptEncrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iDataLen),SizeOfArray(ucData))) to bOk
41583>>>>>>>>>>>                //If (not(bOk)) Begin
41583>>>>>>>>>>>                //Move "" to sData
41583>>>>>>>>>>>                //Move (GetLastError()) to iErr
41583>>>>>>>>>>>                //End
41583>>>>>>>>>>>                
41583>>>>>>>>>>>                Get DestroyKey hKey to bOk
41584>>>>>>>>>>>            End 
41584>>>>>>>>>>>>
41584>>>>>>>>>>>            Get ReleaseContext hProv to bOk
41585>>>>>>>>>>>        End 
41585>>>>>>>>>>>>
41585>>>>>>>>>>>        Function_Return ucData
41586>>>>>>>>>>>    End_Function
41587>>>>>>>>>>>    
41587>>>>>>>>>>>    // Decrypts data
41587>>>>>>>>>>>    Function Decrypt UChar[] ucPassword UChar[] ucData Returns UChar[]
41589>>>>>>>>>>>        Handle hProv hHash hKey
41589>>>>>>>>>>>        Integer iAlgorithm iDataLen
41589>>>>>>>>>>>        Boolean bOk
41589>>>>>>>>>>>        
41589>>>>>>>>>>>        Get AcquireContext to hProv
41590>>>>>>>>>>>        If (hProv) Begin
41592>>>>>>>>>>>            Get CreateHash hProv to hHash
41593>>>>>>>>>>>            If (hHash) Begin
41595>>>>>>>>>>>                Get HashData hHash ucPassword to bOk
41596>>>>>>>>>>>                If (bOk) Begin
41598>>>>>>>>>>>                    Get piCipher to iAlgorithm
41599>>>>>>>>>>>                    Get DeriveKey hProv hHash to hKey
41600>>>>>>>>>>>                End
41600>>>>>>>>>>>>
41600>>>>>>>>>>>                Get DestroyHash hHash to bOk
41601>>>>>>>>>>>            End
41601>>>>>>>>>>>>
41601>>>>>>>>>>>            
41601>>>>>>>>>>>            If (hKey) Begin
41603>>>>>>>>>>>                Move (SizeOfArray(ucData)) to iDataLen
41604>>>>>>>>>>>                Move (CryptDecrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iDataLen))) to bOk
41605>>>>>>>>>>>                //  Resulting data can be shorter as the input string, in that case we shorten the result string
41605>>>>>>>>>>>                If (SizeOfArray (ucData) > iDataLen) Begin
41607>>>>>>>>>>>                    Move (ResizeArray(ucData, iDataLen)) to ucData
41608>>>>>>>>>>>                End
41608>>>>>>>>>>>>
41608>>>>>>>>>>>                
41608>>>>>>>>>>>                Get DestroyKey hKey to bOk
41609>>>>>>>>>>>            End
41609>>>>>>>>>>>>
41609>>>>>>>>>>>            Get ReleaseContext hProv to bOk
41610>>>>>>>>>>>        End
41610>>>>>>>>>>>>
41610>>>>>>>>>>>        Function_Return ucData
41611>>>>>>>>>>>    End_Function
41612>>>>>>>>>>>    
41612>>>>>>>>>>>    // Creates a key
41612>>>>>>>>>>>    Function CreateKey Handle hProv Returns Handle
41614>>>>>>>>>>>        Integer iAlg iType iByte iLength iSize
41614>>>>>>>>>>>        CryptoBlob keyBlob
41614>>>>>>>>>>>        CryptoBlob keyBlob
41614>>>>>>>>>>>        Boolean bOk
41614>>>>>>>>>>>        Handle hKey
41614>>>>>>>>>>>        UChar[] aKey
41615>>>>>>>>>>>
41615>>>>>>>>>>>        Get paKey to aKey
41616>>>>>>>>>>>        Get piKeyAlg to iAlg
41617>>>>>>>>>>>        Get piKeyType to iType
41618>>>>>>>>>>>        Move iAlg                   to keyBlob.header.bType
41619>>>>>>>>>>>        Move CUR_BLOB_VERSION       to keyBlob.header.bVersion
41620>>>>>>>>>>>        Move iType                  to keyBlob.header.aiKeyAlg
41621>>>>>>>>>>>        Move (SizeOfArray(aKey))    to keyBlob.cbKeySize
41622>>>>>>>>>>>        
41622>>>>>>>>>>>        Move (SizeOfArray(aKey)-1) to iLength
41623>>>>>>>>>>>        For iByte from 0 to iLength
41629>>>>>>>>>>>>
41629>>>>>>>>>>>            Move aKey[iByte] to keyBlob.rgbKeyData[iByte]
41630>>>>>>>>>>>        Loop
41631>>>>>>>>>>>>
41631>>>>>>>>>>>        
41631>>>>>>>>>>>        Move 0 to hKey
41632>>>>>>>>>>>        Move (CryptImportKey(hProv,AddressOf(keyBlob),SizeOfType(CryptoBlob),0,0,AddressOf(hKey))) to bOk
41633>>>>>>>>>>>        Function_Return hKey
41634>>>>>>>>>>>    End_Function
41635>>>>>>>>>>>    
41635>>>>>>>>>>>    // Sets the key parameters
41635>>>>>>>>>>>    Function SetKeyParameters Handle hKey Returns Boolean
41637>>>>>>>>>>>        Integer iPadding iMode
41637>>>>>>>>>>>        Boolean bOk
41637>>>>>>>>>>>        UChar[] aIV
41638>>>>>>>>>>>        
41638>>>>>>>>>>>        //Move (SizeOfArray(aIV)-1) to iLength
41638>>>>>>>>>>>        //For iByte from 0 to iLength
41638>>>>>>>>>>>        //    Move iByte to aIV[iByte]
41638>>>>>>>>>>>        //Loop
41638>>>>>>>>>>>
41638>>>>>>>>>>>        // Set initialization vector
41638>>>>>>>>>>>        Get paIV to aIV
41639>>>>>>>>>>>        Move (CryptSetKeyParam(hKey,KP_IV,AddressOf(aIV),0)) to bOk
41640>>>>>>>>>>>        If (bOk) Begin
41642>>>>>>>>>>>            // Set padding
41642>>>>>>>>>>>            Get piKeyPadding to iPadding
41643>>>>>>>>>>>            Move (CryptSetKeyParam(hKey,KP_PADDING,AddressOf(iPadding),0)) to bOk
41644>>>>>>>>>>>            If (bOk) Begin
41646>>>>>>>>>>>                // Set move
41646>>>>>>>>>>>                Get piKeyMode to iMode
41647>>>>>>>>>>>                Move (CryptSetKeyParam(hKey,KP_MODE,AddressOf(iMode),0)) to bOk
41648>>>>>>>>>>>            End
41648>>>>>>>>>>>>
41648>>>>>>>>>>>        End
41648>>>>>>>>>>>>
41648>>>>>>>>>>>        Function_Return bOk        
41649>>>>>>>>>>>    End_Function
41650>>>>>>>>>>>    
41650>>>>>>>>>>>    // Encrypts using block cipher
41650>>>>>>>>>>>    Function BlockEncrypt UChar[] ucData Returns UChar[]
41652>>>>>>>>>>>        Handle hProv hKey
41652>>>>>>>>>>>        Integer iLen iSize iBlocks
41652>>>>>>>>>>>        Boolean bOk
41652>>>>>>>>>>>        
41652>>>>>>>>>>>        Get AcquireContext to hProv
41653>>>>>>>>>>>        If (hProv) Begin
41655>>>>>>>>>>>            // Create key
41655>>>>>>>>>>>            Get CreateKey hProv to hKey
41656>>>>>>>>>>>            If (hKey) Begin
41658>>>>>>>>>>>                Get SetKeyParameters hKey to bOk
41659>>>>>>>>>>>                If (bOk) Begin
41661>>>>>>>>>>>                    // Buffer for block ciphers can be up to block length larger
41661>>>>>>>>>>>                    Get piBlockSize to iSize
41662>>>>>>>>>>>                    Move (SizeOfArray(ucData)) to iLen
41663>>>>>>>>>>>                    
41663>>>>>>>>>>>                    Move ((iLen/iSize)+1) to iBlocks
41664>>>>>>>>>>>                    Move (ResizeArray(ucData,iBlocks*iSize)) to ucData
41665>>>>>>>>>>>                    Move (CryptEncrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iLen),SizeOfArray(ucData))) to bOk
41666>>>>>>>>>>>                End
41666>>>>>>>>>>>>
41666>>>>>>>>>>>                Get DestroyKey hKey to bOk
41667>>>>>>>>>>>            End
41667>>>>>>>>>>>>
41667>>>>>>>>>>>            Get ReleaseContext hProv to bOk
41668>>>>>>>>>>>        End
41668>>>>>>>>>>>>
41668>>>>>>>>>>>        Function_Return ucData
41669>>>>>>>>>>>    End_Function
41670>>>>>>>>>>>    
41670>>>>>>>>>>>    // Decrypts using block cipher
41670>>>>>>>>>>>    Function BlockDecrypt UChar[] ucData Returns UChar[]
41672>>>>>>>>>>>        Handle hProv hKey
41672>>>>>>>>>>>        Integer iLen
41672>>>>>>>>>>>        Boolean bOk
41672>>>>>>>>>>>        
41672>>>>>>>>>>>        Get AcquireContext to hProv
41673>>>>>>>>>>>        If (hProv) Begin
41675>>>>>>>>>>>            // Create key
41675>>>>>>>>>>>            Get CreateKey hProv to hKey
41676>>>>>>>>>>>            If (hKey) Begin
41678>>>>>>>>>>>                Get SetKeyParameters hKey to bOk
41679>>>>>>>>>>>                If (bOk) Begin
41681>>>>>>>>>>>                    Move (SizeOfArray(ucData)) to iLen
41682>>>>>>>>>>>                    Move (CryptDecrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iLen))) to bOk
41683>>>>>>>>>>>                    Move (ResizeArray(ucData,iLen)) to ucData
41684>>>>>>>>>>>                End
41684>>>>>>>>>>>>
41684>>>>>>>>>>>                Get DestroyKey hKey to bOk
41685>>>>>>>>>>>            End
41685>>>>>>>>>>>>
41685>>>>>>>>>>>            Get ReleaseContext hProv to bOk
41686>>>>>>>>>>>        End
41686>>>>>>>>>>>>
41686>>>>>>>>>>>        Function_Return ucData
41687>>>>>>>>>>>    End_Function
41688>>>>>>>>>>>    
41688>>>>>>>>>>>    
41688>>>>>>>>>>>    //  Generates random data.
41688>>>>>>>>>>>    Function GenerateRandom Integer iBytes Returns UChar[]
41690>>>>>>>>>>>        Handle hProv
41690>>>>>>>>>>>        UChar[] uaResult
41691>>>>>>>>>>>        Boolean bRes
41691>>>>>>>>>>>        
41691>>>>>>>>>>>        Get AcquireContext to hProv
41692>>>>>>>>>>>        
41692>>>>>>>>>>>        Move (ResizeArray(uaResult, iBytes)) to uaResult
41693>>>>>>>>>>>        Move (CryptGenRandom(hProv, iBytes, AddressOf(uaResult))) to bRes
41694>>>>>>>>>>>        
41694>>>>>>>>>>>        Get ReleaseContext hProv to bRes
41695>>>>>>>>>>>        
41695>>>>>>>>>>>        Function_Return uaResult
41696>>>>>>>>>>>    End_Function
41697>>>>>>>>>>>    
41697>>>>>>>>>>>    //  Generates random data and does a base64 encoding to properly present it as a string.
41697>>>>>>>>>>>    Function GenerateRandomString Integer iLength Returns String
41699>>>>>>>>>>>        String sResult
41699>>>>>>>>>>>        UChar[] ucData
41700>>>>>>>>>>>        Pointer pBase64
41700>>>>>>>>>>>        Integer iVoid
41700>>>>>>>>>>>        
41700>>>>>>>>>>>        Get GenerateRandom iLength to ucData
41701>>>>>>>>>>>        
41701>>>>>>>>>>>        Move (Base64Encode(AddressOf(ucData), iLength)) to pBase64
41702>>>>>>>>>>>        Move (PointerToString(pBase64)) to sResult
41703>>>>>>>>>>>        Move (Free(pBase64)) to iVoid
41704>>>>>>>>>>>        
41704>>>>>>>>>>>        Function_Return (Left(sResult, iLength))
41705>>>>>>>>>>>    End_Function
41706>>>>>>>>>>>    
41706>>>>>>>>>>>End_Class
41707>>>>>>>>>Use Base64Functions.pkg
Including file: Base64Functions.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\Base64Functions.pkg)
41707>>>>>>>>>>>//> This package enables base64 encoding and decoding of strings:
41707>>>>>>>>>>>//>
41707>>>>>>>>>>>//>     Get EncodeString of oBase64Functions sValue to sValue
41707>>>>>>>>>>>//>     Get DecodeString of oBase64Functions sValue to sValue
41707>>>>>>>>>>>//>
41707>>>>>>>>>>>//> Remember to set the "max argument size" if dealing with very large
41707>>>>>>>>>>>//> strings.
41707>>>>>>>>>>>//>
41707>>>>>>>>>>>//> For 17.1 and later the functionality of this package is based on two functions (Base64Encode and
41707>>>>>>>>>>>//> Base64Decode) that are built into the runtime.
41707>>>>>>>>>>>//>
41707>>>>>>>>>>>//> But for versions up to and including 17.0 it's based on the vdfBase64.dll file that was obtained
41707>>>>>>>>>>>//> from DAE that have kindly allowed me to distribute it to other DF developers. Programs including
41707>>>>>>>>>>>//> this package will give off an error on start-up if vdfBase64.dll is not found in the /bin folder
41707>>>>>>>>>>>//> if the VDF runtime. You will find the DLL in the /programs folder of the StureApsPublicLib workspace
41707>>>>>>>>>>>
41707>>>>>>>>>>>Use VdfBase.pkg
41707>>>>>>>>>>>
41707>>>>>>>>>>>// Functions in vdfBase64.dll
41707>>>>>>>>>>>External_Function xxBase64Encode "vdfbase64Encode" vdfBase64.dll Pointer pBuffer Returns Integer
41708>>>>>>>>>>>External_Function xxBase64Decode "vdfbase64Decode" vdfBase64.dll Pointer pBuffer Returns Integer
41709>>>>>>>>>>>External_Function xxBase64Free   "vdfbase64Free"   vdfBase64.dll Pointer pBuffer Returns Integer
41710>>>>>>>>>>>
41710>>>>>>>>>>>// Structure
41710>>>>>>>>>>>Struct txxfBase64Buffer
41710>>>>>>>>>>>    Pointer pData
41710>>>>>>>>>>>    Integer iLength
41710>>>>>>>>>>>End_Struct 
41710>>>>>>>>>>>
41710>>>>>>>>>>>Global_Variable Integer oBase64Functions
41710>>>>>>>>>>>
41710>>>>>>>>>>>Object _oBase64Functions is a cObject
41712>>>>>>>>>>>    Move Self to oBase64Functions
41713>>>>>>>>>>>
41713>>>>>>>>>>>
41713>>>>>>>>>>>    Function EncodeString String sValue Returns String
41716>>>>>>>>>>>        Address pBase64
41716>>>>>>>>>>>        String sResult
41716>>>>>>>>>>>        Integer iVoid
41716>>>>>>>>>>>        Move (Base64Encode(AddressOf(sValue), Length(sValue))) to pBase64
41717>>>>>>>>>>>        Move (PointerToString(pBase64)) to sResult
41718>>>>>>>>>>>        Move (Free(pBase64)) to iVoid
41719>>>>>>>>>>>        Function_Return sResult
41720>>>>>>>>>>>    End_Function
41721>>>>>>>>>>>
41721>>>>>>>>>>>    Function DecodeString String sValue Returns String
41724>>>>>>>>>>>        Address pBinary
41724>>>>>>>>>>>        String sBinary
41724>>>>>>>>>>>        Integer iVoid iLen
41724>>>>>>>>>>>        Move (Base64Decode(AddressOf(sValue), &iLen)) to pBinary
41725>>>>>>>>>>>        Move (Repeat(Character(0), iLen)) to sBinary
41726>>>>>>>>>>>        Move (MemCopy(AddressOf(sBinary), pBinary, iLen)) to iVoid
41727>>>>>>>>>>>        Move (Free(pBinary)) to iVoid
41728>>>>>>>>>>>        Function_Return sBinary
41729>>>>>>>>>>>    End_Function
41730>>>>>>>>>>>
41730>>>>>>>>>>>End_Object
41731>>>>>>>>>Use MSSqldrv.pkg
41731>>>>>>>>>Use db2_drv.pkg
41731>>>>>>>>>Use odbc_drv.pkg
41731>>>>>>>>>Use DFBtrDrv.pkg
41731>>>>>>>>>Use vWin32fh.pkg
41731>>>>>>>>>
41731>>>>>>>>>Use DUFLanguageConstants.inc
41731>>>>>>>>>
41731>>>>>>>>>    Define DATAFLEX_ID for "DATAFLEX"
41731>>>>>>>>>
41731>>>>>>>>>// Create a new PSQL identifier for the Btrieve driver.
41731>>>>>>>>>    Define PSQLDRV_ID for "DFBTRDRV"
41731>>>>>>>>>
41731>>>>>>>>>// SQL Back-ends (iSQLDbType in the tSQLKeywords struct).
41731>>>>>>>>>// They can have slightly different SQL keywords.
41731>>>>>>>>>// Note: If a new type is added to the list,
41731>>>>>>>>>//       the struct array xxx must be adjusted
41731>>>>>>>>>//       so that it is filled with all SQL
41731>>>>>>>>>//       keywords for that new type.
41731>>>>>>>>>Enum_List  
41731>>>>>>>>>        Define EN_DbTypeDataFlex   for 0
41731>>>>>>>>>        Define EN_DbTypeMSSQL      for 1
41731>>>>>>>>>        Define EN_DbTypeMySQL      for 2
41731>>>>>>>>>        Define EN_DbTypeOracle     for 3
41731>>>>>>>>>        Define EN_DbTypeDB2        for 4
41731>>>>>>>>>        Define EN_DbTypePostgre    for 5
41731>>>>>>>>>        Define EN_DbTypePervasive  for 6
41731>>>>>>>>>End_Enum_List
41731>>>>>>>>>
41731>>>>>>>>>// We need to have our "own" constants for the standard DataFlex data types.
41731>>>>>>>>>// These can be used with SQL functions such as e.g. SQLColumnAdd, instead
41731>>>>>>>>>// of using one of the driver specific integer constants such as e.g. "SQL_VARCHAR".
41731>>>>>>>>>Define CS_DbTypeDataFlex    for "DataFlex Embedded"
41731>>>>>>>>>Define CS_DbTypeMSSQL       for "Microsoft SQL Server"
41731>>>>>>>>>Define CS_DbTypeMySQL       for "MySQL"
41731>>>>>>>>>Define CS_DbTypeOracle      for "Oracle"
41731>>>>>>>>>Define CS_DbTypeDB2         for "IBM DB2"
41731>>>>>>>>>Define CS_DbTypePostgre     for "PostgreSQL"
41731>>>>>>>>>Define CS_DbTypePervasive   for "Pervasive.SQL (Btrieve)"
41731>>>>>>>>>
41731>>>>>>>>>
41731>>>>>>>>>// SQLConnection.ini constants:
41731>>>>>>>>>    Define CS_SQLConnectionIDText       for "DFConnectionId"
41731>>>>>>>>>
41731>>>>>>>>>Define CS_SQLIniFileName                for "SQLConnections.ini"
41731>>>>>>>>>Define CS_SQLDF19IniFileName            for "DFConnId.ini"
41731>>>>>>>>>Define CS_SQLIniConnectionSection       for "SQL Connections" // Obsolete!
41731>>>>>>>>>Define CS_SQLIniSectionName             for "Connection"
41731>>>>>>>>>Define CS_SQLODBCIniSectionName         for "ODBC"
41731>>>>>>>>>
41731>>>>>>>>>// DF 19 ini-file settings:
41731>>>>>>>>>Define CS_SQLIniConnectionIdKeyword     for "Id"
41731>>>>>>>>>Define CS_SQLIniDriverKeyword           for "Driver"
41731>>>>>>>>>Define CS_SQLIniConnectionKeyWord       for "Connection"
41731>>>>>>>>>Define CS_SQLIniUIDKeyword              for "UID"
41731>>>>>>>>>Define CS_SQLIniPWDKeyword              for "PWD"
41731>>>>>>>>>Define CS_SQLIniDFPWDKeyword            for "DFPWD"
41731>>>>>>>>>Define CS_SQLIniServerKeyword           for "SERVER"
41731>>>>>>>>>Define CS_SQLIniDSNKeyword              for "DSN"
41731>>>>>>>>>Define CS_SQLIniFileDSNKeyword          for "FILEDSN"
41731>>>>>>>>>Define CS_SQLIniDatabaseKeyword         for "DATABASE"
41731>>>>>>>>>Define CS_SQLIniTrustedKeyword          for "Trusted_Connection" 
41731>>>>>>>>>Define CS_SQLIniDisabledKeyword         for "Disabled"
41731>>>>>>>>>
41731>>>>>>>>>// Database Update Framework extended settings:
41731>>>>>>>>>Define CS_SQLIniDbTypeKeyword           for "DbType"
41731>>>>>>>>>Define CS_SQLIniSchemaKeyword           for "Schema"
41731>>>>>>>>>Define CS_SQLIniBaseTableSpaceKeyword   for "Base Table Space"
41731>>>>>>>>>Define CS_SQLIniLongTableSpaceKeyword   for "Long Table Space"
41731>>>>>>>>>Define CS_SQLIniIndexTableSpaceKeyword  for "Index Table Space"
41731>>>>>>>>>Define CS_SQLIniSilentLoginKeyword      for "Silent Login"
41731>>>>>>>>>Define CS_SQLIniDisabledKeyword         for "Disabled"      // For compatability with DF19.
41731>>>>>>>>>
41731>>>>>>>>>Define CS_SQLIniConnectionPWD           for "PWD"
41731>>>>>>>>>Define CS_SQLIniConnectionYes           for "Yes"
41731>>>>>>>>>Define CS_SQLIniConnectionNo            for "No"
41731>>>>>>>>>
41731>>>>>>>>>Struct tSQLConnection
41731>>>>>>>>>    Boolean bEnabled                // 1. There can only be one active/enabled connection at a time.
41731>>>>>>>>>    String sConnectionID            // 2. The name of the connection ID.
41731>>>>>>>>>    Integer iDbType                 // 3. Database type; "MS-SQL Server", "DB2", "Oracle", "MySQL", "PostgreSQL"
41731>>>>>>>>>    String sDriverID                // 4. Name of the driver. E.g. MSSQLDRV, DB2_DRV, ODBC_DRV or PSQLDRV_ID.
41731>>>>>>>>>    String sServer                  // 5. SQL Server/DSN/ODBC source name. (In DF19 this is the "sString" member of the tConnection struct.)
41731>>>>>>>>>    String sDatabase                // 6. SQL Database
41731>>>>>>>>>    String sConnectionString        // 7. Full connection string as is needed by e.g. the login command.
41731>>>>>>>>>    Boolean bTrusted                // 8. Trusted connection (then is UID & PWD not used)
41731>>>>>>>>>    String sUserID                  // 9. User ID
41731>>>>>>>>>    String sPassword                // 10. Password
41731>>>>>>>>>    String sSchema                  // 11. DB2 (and perhaps ODBC specific)
41731>>>>>>>>>    String sBaseTableSpace          // 12. DB2 specific
41731>>>>>>>>>    String sLongTableSpace          // 13. DB2 specific
41731>>>>>>>>>    String sIndexTableSpace         // 14. DB2 specific
41731>>>>>>>>>    Boolean bSilentLogin            // 15. True=Silent login. (i.e. don't show Database login dialog if database login to fails). Same as driver "Options" parameter.
41731>>>>>>>>>    Boolean bError                  // 16. Set to true on error.
41731>>>>>>>>>    Boolean bDAWConnection          // 17. True if a DFConnId.ini file (from DAW) has been used instead of a DUF SQLConnections.ini file.
41731>>>>>>>>>End_Struct
41731>>>>>>>Use cDbUpdateFunctionLibrary.inc
Including file: cDbUpdateFunctionLibrary.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cDbUpdateFunctionLibrary.inc)
41731>>>>>>>>>Use DUFLanguageConstants.inc
41731>>>>>>>>>
41731>>>>>>>>>Register_Function paSQLQueryMessages Returns String[]
41731>>>>>>>>>Register_Procedure Set paSQLQueryMessages String[] aSQLQueryMessages
41731>>>>>>>>>
41731>>>>>>>>>    Define CS_DatabaseUpdateFramework for " ***  The Database Update Framework (DUF) ***"
41731>>>>>>>>>
41731>>>>>>>>>
41731>>>>>>>>>    Define CS_OEM_Txt for "OEM"
41731>>>>>>>>>
41731>>>>>>>>>    Define CS_ANSI_Txt for "ANSI"
41731>>>>>>>>>
41731>>>>>>>>>    Define CS_DFCONNID for "DFCONNID"
41731>>>>>>>>>
41731>>>>>>>>>    Define CS_SERVER for "SERVER"
41731>>>>>>>>>
41731>>>>>>>>>    Define CS_SERVER_NAME for "SERVER_NAME"
41731>>>>>>>>>
41731>>>>>>>>>    Define CS_DRIVER_NAME for "DRIVER_NAME"
41731>>>>>>>>>
41731>>>>>>>>>    Define CS_DATABASE_NAME for "DATABASE_NAME"
41731>>>>>>>>>
41731>>>>>>>>>    Define CS_SCHEMA_NAME for "SCHEMA_NAME"
41731>>>>>>>>>
41731>>>>>>>>>    Define CS_TABLE_CHARACTER_FORMAT for "TABLE_CHARACTER_FORMAT"
41731>>>>>>>>>
41731>>>>>>>>>    Define CS_USE_DUMMY_ZERO_DATE for "USE_DUMMY_ZERO_DATE"
41731>>>>>>>>>
41731>>>>>>>>>    Define CS_SYSTEM_FILE for "SYSTEM_FILE"
41731>>>>>>>>>
41731>>>>>>>>>    Define CS_RECNUM_TABLE for "RECNUM_TABLE"
41731>>>>>>>>>
41731>>>>>>>>>    Define CS_PRIMARY_INDEX for "PRIMARY_INDEX"
41731>>>>>>>>>
41731>>>>>>>>>    Define CS_INDEX_NUMBER for "INDEX_NUMBER"
41731>>>>>>>>>
41731>>>>>>>>>    Define CS_INDEX_NAME for "INDEX_NAME"
41731>>>>>>>>>
41731>>>>>>>>>    Define CS_DUFLowestAllowedDateValue for "01/01/1753"
41731>>>>>>>>>    Define CS_DUFLowestSQLDateValue     for "1753-01-01"
41731>>>>>>>>>
41731>>>>>>>>>    Define CS_DUFBackupDataFolder for "BackupData"
41731>>>>>>>>>
41731>>>>>>>>>// Global handle to a cDatabaseUpdateHandler object
41731>>>>>>>>>    Global_Variable Handle ghoDbUpdateHandler    
41731>>>>>>>>>    Move 0 to ghoDbUpdateHandler
41732>>>>>>>>>
41732>>>>>>>>>    Global_Variable Handle ghoDbUpdateFunctionLibrary  
41732>>>>>>>>>    Move 0 to ghoDbUpdateFunctionLibrary
41733>>>>>>>>>
41733>>>>>>>>>Struct tSQLScriptArray
41733>>>>>>>>>    Boolean bError
41733>>>>>>>>>    Boolean bArgumentSizeChanged
41733>>>>>>>>>    Integer iOrgArgumentSize
41733>>>>>>>>>    String[] sSQLScriptArray
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>Struct tSqlErrorArray
41733>>>>>>>>>    String[]  sSqlErrorArray
41733>>>>>>>>>    String[]  sSqlStatementArray
41733>>>>>>>>>    Integer[] iSqlErrorArray
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>Struct tSqlColumnNew
41733>>>>>>>>>    String  sBaseColumnName
41733>>>>>>>>>    String  sBaseTableName
41733>>>>>>>>>    String  sLabel
41733>>>>>>>>>    Integer iSqlType
41733>>>>>>>>>    Integer iSize
41733>>>>>>>>>    Integer iPrecision
41733>>>>>>>>>    Integer iDFType
41733>>>>>>>>>    Integer iDFNativeType
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>Struct tColumnType
41733>>>>>>>>>    String  sSQLType
41733>>>>>>>>>    Integer iSQLType
41733>>>>>>>>>    Boolean bCanEditSize
41733>>>>>>>>>    Integer iDefaultSize
41733>>>>>>>>>    Integer iMinSize
41733>>>>>>>>>    Number  nMaxSize
41733>>>>>>>>>    String  sDataFlexType
41733>>>>>>>>>    Integer iDataFlexType
41733>>>>>>>>>    Boolean bNativeDataType
41733>>>>>>>>>    String  sPrecision
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>// Used to store/retreive SQL keywords in a struct array.
41733>>>>>>>>>// Various SQL back-ends can have slightly different
41733>>>>>>>>>// keywords.
41733>>>>>>>>>Struct tSQLKeyWords
41733>>>>>>>>>    Integer iSQLWord
41733>>>>>>>>>    Integer iSQLDbType
41733>>>>>>>>>    String  sSQLPhrase // Can be more than one word.
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>Struct tSQLRelation
41733>>>>>>>>>    Integer iFileNumber
41733>>>>>>>>>    Integer iFieldNumber
41733>>>>>>>>>    String  sFileName
41733>>>>>>>>>    String  sFieldName
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>Struct tSQLLoggedInUser
41733>>>>>>>>>    String sUser
41733>>>>>>>>>    String sProgram
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>// Used as a start for error handing. Used by Error_Report_Mode property
41733>>>>>>>>>Enumeration_List
41733>>>>>>>>>    Define DUF_ERROR_REPORT    // Report Error on screen
41733>>>>>>>>>    Define DUF_ERROR_NO_REPORT // Show no Error..
41733>>>>>>>>>End_Enumeration_List
41733>>>>>>>>>
41733>>>>>>>>>// We need to re-define the standard constants because several driver constants
41733>>>>>>>>>// have the same value and we need to be able to distinguish which data type to use when
41733>>>>>>>>>// SQL Back-ends (iSQLDbType in the tSQLKeywords struct).
41733>>>>>>>>>// They can have slightly different SQL keywords.
41733>>>>>>>>>// Note: If a new type is added to the list,
41733>>>>>>>>>//       the struct array xxx must be adjusted
41733>>>>>>>>>//       so that it is filled with all SQL
41733>>>>>>>>>//       keywords for that new type.
41733>>>>>>>>>Enum_List
41733>>>>>>>>>//    Define EN_DbTypeMSSQL
41733>>>>>>>>>//    Define EN_DbTypeMySQL
41733>>>>>>>>>//    Define EN_DbTypeOracle
41733>>>>>>>>>//    Define EN_DbTypeDB2
41733>>>>>>>>>//    Define EN_DbTypePostgre
41733>>>>>>>>>//    Define EN_DbTypeDataFlex // Embedded database.
41733>>>>>>>>>End_Enum_List
41733>>>>>>>>>
41733>>>>>>>>>// We need to have our "own" constants for the standard DataFlex data types.
41733>>>>>>>>>// These can be used with SQL functions such as e.g. SQLColumnAdd, instead
41733>>>>>>>>>// of using one of the driver specific integer constants such as e.g. "SQL_VARCHAR".
41733>>>>>>>>>Define CS_DbTypeMSSQL       for "Microsoft SQL Server"
41733>>>>>>>>>Define CS_DbTypeMySQL       for "MySQL"
41733>>>>>>>>>Define CS_DbTypeOracle      for "Oracle"
41733>>>>>>>>>Define CS_DbTypeDB2         for "IBM DB2"
41733>>>>>>>>>Define CS_DbTypePostgre     for "PostgreSQL"
41733>>>>>>>>>Define CS_DbTypeDataFlex    for "DataFlex Embedded"
41733>>>>>>>>>
41733>>>>>>>>>// We need to re-define the standard constants because several driver constants
41733>>>>>>>>>// have the same value and we need to be able to distinguish which data type to use when
41733>>>>>>>>>// e.g. creating a column with embedded SQL (ESQL).
41733>>>>>>>>>Enum_List
41733>>>>>>>>>    Define DF_ASCII_DUF     for -1500 // All of these are DF_xxx constant values - 1500
41733>>>>>>>>>    Define DF_BCD_DUF       for -1499
41733>>>>>>>>>    Define DF_DATE_DUF      for -1498
41733>>>>>>>>>    Define DF_TEXT_DUF      for -1495
41733>>>>>>>>>    Define DF_BINARY_DUF    for -1494
41733>>>>>>>>>    Define DF_DATETIME_DUF  for -1493
41733>>>>>>>>>End_Enum_List
41733>>>>>>>>>
41733>>>>>>>>>    Define SQL_TEXT for (DF_TEXT + 1024)
41733>>>>>>>>>
41733>>>>>>>>>Define SQL_CHARBIT          for (DF_BINARY + 1024)
41733>>>>>>>>>Define SQL_LONGVARCHARBIT   for (DF_BINARY + 1025)
41733>>>>>>>>>Define SQL_VARCHARBIT       for (DF_BINARY + 1026)
41733>>>>>>>>>
41733>>>>>>>>>// These are not defined pre DF 18:
41733>>>>>>>>>
41733>>>>>>>>>Struct tSQLIntTableInfo
41733>>>>>>>>>    String sDriverName
41733>>>>>>>>>    String sServerName
41733>>>>>>>>>    String sDatabaseName
41733>>>>>>>>>    String sSchemaName
41733>>>>>>>>>    Boolean bRecnumTable
41733>>>>>>>>>    Integer iPrimaryIndex
41733>>>>>>>>>    Integer iGenerateRecordIdMethod  // RIM_NONE, RIM_IDENTITY_COLUMN,  RIM_DISPENSER_TABLE, RIM_EXTERNAL
41733>>>>>>>>>    String sTableCharacterFormat
41733>>>>>>>>>    Boolean bUseDummyZeroDate
41733>>>>>>>>>    Integer iFileDummyUpdateColumn // Init value to -1 if not exists (value can be in range 1 - number of columns)
41733>>>>>>>>>    Integer iFileBlockSize         // Init value to -1 if not exists
41733>>>>>>>>>    Integer iFileMaxRowsFetched    // Init value to -1 if not exists
41733>>>>>>>>>    Integer iFileGetRidAfterCreate // Init value to -1. But is boolean!
41733>>>>>>>>>    Integer iFileJitBinding        // Init value to -1. But is boolean!
41733>>>>>>>>>    String sRefindAfterSave        // Yes or No (how to handle?)
41733>>>>>>>>>    String sSystemFile             // Yes or No (how to handle?)
41733>>>>>>>>>    String sFileIndexTablespace
41733>>>>>>>>>    String sFileLongTablespace
41733>>>>>>>>>    String sTableTablespace
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>Struct tSQLIntColumnInfo
41733>>>>>>>>>    Integer iFieldNumber
41733>>>>>>>>>    Integer iFieldIndex
41733>>>>>>>>>    Integer iFieldRelatedFile
41733>>>>>>>>>    Integer iFieldRelatedField
41733>>>>>>>>>    Integer iIndexNumber
41733>>>>>>>>>    Integer iIndexNumberSegments
41733>>>>>>>>>    Integer iIndexSegmentField1
41733>>>>>>>>>    Integer iIndexSegmentField2
41733>>>>>>>>>    Integer iIndexSegmentFieldn
41733>>>>>>>>>    String  sIndexName
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>Struct tAPIColumn
41733>>>>>>>>>    Integer iFieldNumber
41733>>>>>>>>>    String  sFieldName
41733>>>>>>>>>    Integer iType
41733>>>>>>>>>    String  sType
41733>>>>>>>>>    Integer iLength
41733>>>>>>>>>    Integer iPrecision
41733>>>>>>>>>    Integer iOptions
41733>>>>>>>>>    Boolean bIsSQLType
41733>>>>>>>>>    Boolean bAllowNULL
41733>>>>>>>>>    String  sDefaultValue
41733>>>>>>>>>    Boolean bShouldChange
41733>>>>>>>>>    Boolean bCancel
41733>>>>>>>>>    Boolean bError
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>Struct tAPIColumnCompare
41733>>>>>>>>>    Integer iFieldNumber
41733>>>>>>>>>    // FROM database:
41733>>>>>>>>>    Boolean bExistsFrom
41733>>>>>>>>>    String  sFieldNameFrom
41733>>>>>>>>>    Integer iTypeFrom
41733>>>>>>>>>    String  sTypeFrom
41733>>>>>>>>>    Integer iLengthFrom
41733>>>>>>>>>    Integer iPrecisionFrom
41733>>>>>>>>>    Integer iOptionsFrom
41733>>>>>>>>>    Boolean bIsSQLTypeFrom
41733>>>>>>>>>    Boolean bAllowNULLFrom
41733>>>>>>>>>    String  sDefaultValueFrom
41733>>>>>>>>>    Boolean bShouldChangeFrom
41733>>>>>>>>>    Boolean bCancelFrom
41733>>>>>>>>>    Boolean bErrorFrom
41733>>>>>>>>>    // TO database:
41733>>>>>>>>>    Boolean bExistsTo
41733>>>>>>>>>    Integer iFieldNumberTo
41733>>>>>>>>>    String  sFieldNameTo
41733>>>>>>>>>    Integer iTypeTo
41733>>>>>>>>>    String  sTypeTo
41733>>>>>>>>>    Integer iLengthTo
41733>>>>>>>>>    Integer iPrecisionTo
41733>>>>>>>>>    Integer iOptionsTo
41733>>>>>>>>>    Boolean bIsSQLTypeTo
41733>>>>>>>>>    Boolean bAllowNULLTo
41733>>>>>>>>>    String  sDefaultValueTo
41733>>>>>>>>>    Boolean bShouldChangeTo
41733>>>>>>>>>    Boolean bCancelTo
41733>>>>>>>>>    Boolean bErrorTo
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>Struct tAPIRelation
41733>>>>>>>>>    Handle  hTableFrom
41733>>>>>>>>>    Integer iColumnFrom
41733>>>>>>>>>    Handle  hTableTo
41733>>>>>>>>>    Integer iColumnTo
41733>>>>>>>>>    String  sLogicalNameFrom
41733>>>>>>>>>    String  sLogicalNameTo
41733>>>>>>>>>    String  sFieldNameFrom
41733>>>>>>>>>    String  sFieldNameTo
41733>>>>>>>>>    Boolean bShouldChange
41733>>>>>>>>>    Boolean bCancel
41733>>>>>>>>>    Boolean bError
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>Struct tAPIRelationCompare
41733>>>>>>>>>    // Common:
41733>>>>>>>>>    Handle  hTableFrom
41733>>>>>>>>>    Integer iColumnFrom
41733>>>>>>>>>    Handle  hTableTo
41733>>>>>>>>>    Integer iColumnTo
41733>>>>>>>>>    // FROM database:
41733>>>>>>>>>    Boolean bExistsFrom
41733>>>>>>>>>    String  sLogicalNameFrom_From
41733>>>>>>>>>    String  sLogicalNameTo_From
41733>>>>>>>>>    String  sFieldNameFrom_From
41733>>>>>>>>>    String  sFieldNameTo_From
41733>>>>>>>>>    Boolean bShouldChange_From
41733>>>>>>>>>    Boolean bCancel_From
41733>>>>>>>>>    Boolean bError_From
41733>>>>>>>>>    // TO database:
41733>>>>>>>>>    Boolean bExistsTo
41733>>>>>>>>>    String  sLogicalNameFrom_To
41733>>>>>>>>>    String  sLogicalNameTo_To
41733>>>>>>>>>    String  sFieldNameFrom_To
41733>>>>>>>>>    String  sFieldNameTo_To
41733>>>>>>>>>    Boolean bShouldChange_To
41733>>>>>>>>>    Boolean bCancel_To
41733>>>>>>>>>    Boolean bError_To
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>Struct tAPIIndexSegment
41733>>>>>>>>>    Integer iFieldNumber
41733>>>>>>>>>    String  sFieldName
41733>>>>>>>>>    Boolean bUppercase
41733>>>>>>>>>    Boolean bAscending
41733>>>>>>>>>    Boolean bShouldChange
41733>>>>>>>>>    Boolean bCancel
41733>>>>>>>>>    Boolean bError
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>Struct tAPIIndex
41733>>>>>>>>>    Integer iIndexNumber
41733>>>>>>>>>    Integer iPrimaryIndex
41733>>>>>>>>>    String  sSQLIndexName
41733>>>>>>>>>    Integer iSQLIndexType
41733>>>>>>>>>    Boolean bIsSQLClustered
41733>>>>>>>>>    Boolean bIsSQLPrimaryKey
41733>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArray
41733>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArray
41733>>>>>>>>>    Boolean bShouldChange
41733>>>>>>>>>    Boolean bCancel
41733>>>>>>>>>    Boolean bError
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>Struct tAPIIndexCompare
41733>>>>>>>>>    // Common:
41733>>>>>>>>>    Integer iIndexNumber
41733>>>>>>>>>    // FROM database:
41733>>>>>>>>>    Boolean bExistsFrom
41733>>>>>>>>>    Integer iPrimaryIndexFrom
41733>>>>>>>>>    String  sSQLIndexNameFrom
41733>>>>>>>>>    Integer iSQLIndexTypeFrom
41733>>>>>>>>>    Boolean bIsSQLClusteredFrom
41733>>>>>>>>>    Boolean bIsSQLPrimaryKeyFrom
41733>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArrayFrom
41733>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArrayFrom
41733>>>>>>>>>    Boolean bShouldChangeFrom
41733>>>>>>>>>    Boolean bCancelFrom
41733>>>>>>>>>    Boolean bErrorFrom
41733>>>>>>>>>    // TO database:
41733>>>>>>>>>    Boolean bExistsTo
41733>>>>>>>>>    Integer iPrimaryIndexTo
41733>>>>>>>>>    String  sSQLIndexNameTo
41733>>>>>>>>>    Integer iSQLIndexTypeTo
41733>>>>>>>>>    Boolean bIsSQLClusteredTo
41733>>>>>>>>>    Boolean bIsSQLPrimaryKeyTo
41733>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArrayTo
41733>>>>>>>>>    tAPIIndexSegment[] IndexSegmentArrayTo
41733>>>>>>>>>    Boolean bShouldChangeTo
41733>>>>>>>>>    Boolean bCancelTo
41733>>>>>>>>>    Boolean bErrorTo
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>Struct tAPITableNameInfo
41733>>>>>>>>>    Integer iTableNumber
41733>>>>>>>>>    String  sRootName
41733>>>>>>>>>    String  sLogicalName
41733>>>>>>>>>    String  sDisplayName
41733>>>>>>>>>    String  sDriverID
41733>>>>>>>>>    Boolean bIsAlias
41733>>>>>>>>>    Boolean bIsSQL
41733>>>>>>>>>    Boolean bIsSystemFile
41733>>>>>>>>>    Boolean bShouldChange
41733>>>>>>>>>    Boolean bCancel
41733>>>>>>>>>    Boolean bError
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>Struct tAPITableNameInfoCompare
41733>>>>>>>>>    Integer iTableNumber
41733>>>>>>>>>    // FROM
41733>>>>>>>>>    Boolean bExistsFrom
41733>>>>>>>>>    String  sRootNameFrom
41733>>>>>>>>>    String  sLogicalNameFrom
41733>>>>>>>>>    String  sDisplayNameFrom
41733>>>>>>>>>    String  sDriverIDFrom
41733>>>>>>>>>    Boolean bIsAliasFrom
41733>>>>>>>>>    Boolean bIsSQLFrom
41733>>>>>>>>>    Boolean bIsSystemFileFrom
41733>>>>>>>>>    // TO database:
41733>>>>>>>>>    Boolean bExistsTo
41733>>>>>>>>>    String  sRootNameTo
41733>>>>>>>>>    String  sLogicalNameTo
41733>>>>>>>>>    String  sDisplayNameTo
41733>>>>>>>>>    String  sDriverIDTo
41733>>>>>>>>>    Boolean bIsAliasTo
41733>>>>>>>>>    Boolean bIsSQLTo
41733>>>>>>>>>    Boolean bIsSystemFileTo // *** Implement!
41733>>>>>>>>>    Boolean bShouldChange
41733>>>>>>>>>    Boolean bCancel
41733>>>>>>>>>    Boolean bError
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>Struct tAPITable
41733>>>>>>>>>    Handle hTable
41733>>>>>>>>>    Boolean bFromTable
41733>>>>>>>>>    Boolean bToTable
41733>>>>>>>>>    tAPITableNameInfo ApiTableInfo
41733>>>>>>>>>    tAPITableNameInfo ApiTableInfo
41733>>>>>>>>>    tAPIColumn[]      aApiColumns
41733>>>>>>>>>    tAPIColumn[]      aApiColumns
41733>>>>>>>>>    tAPIIndex[]       aApiIndexes
41733>>>>>>>>>    tAPIIndex[]       aApiIndexes
41733>>>>>>>>>    tAPIRelation[]    aApiRelations
41733>>>>>>>>>    tAPIRelation[]    aApiRelations
41733>>>>>>>>>    Boolean bShouldChange
41733>>>>>>>>>    Boolean bCancel
41733>>>>>>>>>    Boolean bError
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>Struct tAPITableCompare
41733>>>>>>>>>    Handle hTable
41733>>>>>>>>>    // FROM database:
41733>>>>>>>>>    Boolean bExistsFrom
41733>>>>>>>>>    // TO database:
41733>>>>>>>>>    Boolean bExistsTo
41733>>>>>>>>>    // Both:
41733>>>>>>>>>    tAPITableNameInfoCompare APITableNameInfoCompare
41733>>>>>>>>>    tAPITableNameInfoCompare APITableNameInfoCompare
41733>>>>>>>>>    tAPIColumnCompare[]     aAPIColumnsCompare
41733>>>>>>>>>    tAPIColumnCompare[]     aAPIColumnsCompare
41733>>>>>>>>>    tAPIIndexCompare[]      aAPIIndexesCompare
41733>>>>>>>>>    tAPIIndexCompare[]      aAPIIndexesCompare
41733>>>>>>>>>    tAPIRelationCompare[]   aAPIRelationsCompare
41733>>>>>>>>>    tAPIRelationCompare[]   aAPIRelationsCompare
41733>>>>>>>>>    Boolean bShouldChange   // Not implemented yet (!)
41733>>>>>>>>>    Boolean bCancel         // User cancel
41733>>>>>>>>>    Boolean bError          // Error occured while collecting data
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>Struct tAPITableBooleans
41733>>>>>>>>>    Boolean bApiTableUpdateAuto
41733>>>>>>>>>    Boolean bCompareDate_DateTime
41733>>>>>>>>>    Boolean bCompareIndexAscending
41733>>>>>>>>>    Boolean bCompareIndexUppercase
41733>>>>>>>>>    Boolean bCompareFilelistUppercase
41733>>>>>>>>>End_Struct
41733>>>>>>>>>
41733>>>>>>>>>Define C_tAPIColumn_None for 0
41733>>>>>>>>>Define C_tAPIColumn_Identity for 1
41733>>>>>>>>>
41733>>>>>>>>>// SQL Key-Word Constants:  CI_SQLSelect CI_SQLName CI_SQLFrom  CI_SQLSys
41733>>>>>>>>>// Used by the _SqlFindKeyWord function to return a proper keyword depending on the backend SQL,
41733>>>>>>>>>// i.e. one of the EN_DbTypeXXX members from the Enum_list above.
41733>>>>>>>>>// E.g. the CI_SQLAlterTable is only defined once, but the _SqlFindKeyWord function can return
41733>>>>>>>>>// different wording content depending on the EN_xxx value also passed to the function.
41733>>>>>>>>>Enum_List
41733>>>>>>>>>    Define CI_SQLAlterDatabase         //for "ALTER DATABASE"
41733>>>>>>>>>    Define CI_SQLSingle_User           //for "SINGLE_USER"
41733>>>>>>>>>    Define CI_SQLMulti_User            //for "USER_USER"
41733>>>>>>>>>    Define CI_SQLRollback              //for "ROLLBACK"
41733>>>>>>>>>    Define CI_SQLIMMEDIATE             //for "IMMEDIATE"
41733>>>>>>>>>    Define CI_SQLAlterTable            //for "ALTER TABLE"
41733>>>>>>>>>    Define CI_SQLAlterColumn           //for "ALTER COLUMN"
41733>>>>>>>>>    Define CI_SQLRenameColumn          //for "RENAME COLUMN"
41733>>>>>>>>>    Define CI_SQLColumn                //for "COLUMN"
41733>>>>>>>>>    Define CI_SQLSelect                //for "SELECT"
41733>>>>>>>>>    Define CI_SQLWhere                 //for "WHERE"
41733>>>>>>>>>    Define CI_SQLInfoSchema            //for "INFORMATION_SCHEMA.COLUMNS"
41733>>>>>>>>>    Define CI_SQLTable_Name            //for "TABLE_NAME"
41733>>>>>>>>>    Define CI_SQLTable                 //for "TABLE"
41733>>>>>>>>>    Define CI_SQLSys                   //for "SYS"
41733>>>>>>>>>    Define CI_SQLSp_Help               //for "SP_HELP"
41733>>>>>>>>>    Define CI_SQLFrom                  //for "FROM"
41733>>>>>>>>>    Define CI_SQLAdd                   //for "ADD"
41733>>>>>>>>>    Define CI_SQLDropColumn            //for "DROP"
41733>>>>>>>>>    Define CI_SQLCreateDatabase        //for "CREATE DATABASE"
41733>>>>>>>>>    Define CI_SQLDatabaseCollation     //for "COLLATE"
41733>>>>>>>>>    Define CI_SQLCreateTable           //for "CREATE TABLE"
41733>>>>>>>>>    Define CI_SQLDropTable             //for "DROP TABLE"
41733>>>>>>>>>    Define CI_SQLCreateView            //for "CREATE VIEW"
41733>>>>>>>>>    Define CI_SQLRenameTable           //for "RENAME TABLE"
41733>>>>>>>>>//    Define CI_SQLSelectFromWhereName   //for "SELECT name from [master].[dbo].[sysdatabases] where name"
41733>>>>>>>>>    Define CI_SQLDropView              //for "DROP VIEW"
41733>>>>>>>>>    Define CI_SQLSetNoCountOn          //for "SET NOCOUNT ON"
41733>>>>>>>>>    Define CI_SQLTo                    //for "TO"
41733>>>>>>>>>    Define CI_SQLGO                    //for "GO"
41733>>>>>>>>>    Define CI_SQLUse                   //for "USE"
41733>>>>>>>>>    Define CI_SQLDBO                   //for "DBO"
41733>>>>>>>>>
41733>>>>>>>>>    Define CI_SQLName                  //for "NAME"
41733>>>>>>>>>    Define CI_SQLMaster                //for "MASTER"
41733>>>>>>>>>    Define CI_SQLDatabases             //for "DATABASES"
41733>>>>>>>>>    Define CI_SQLSysIndexes            //for "SYS.INDEXES"
41733>>>>>>>>>    Define CI_SQLObjectID              //for "OBJECT_ID"
41733>>>>>>>>>    Define CI_SQLID                    //for "ID"
41733>>>>>>>>>    Define CI_SQLAND                   //for "AND"
41733>>>>>>>>>    Define CI_SQLUpdate                //for "UPDATE"
41733>>>>>>>>>    Define CI_SQLSet                   //for "SET"
41733>>>>>>>>>    Define CI_SQLWith                  //for "WITH"
41733>>>>>>>>>    Define CI_SQLNotNull               //for "NOT NULL"
41733>>>>>>>>>    Define CI_SQL_SAFE_UPDATES         //for "SQL_SAFE_UPDATES"  
41733>>>>>>>>>    Define CI_SQLDescription          //for "SELECT name, description from sys.fn_helpcollations()" (Enumerates all collates)
41733>>>>>>>>>End_Enum_List
41733>>>>>>>>>
41733>>>>>>>>>
41733>>>>>>>
41733>>>>>>>Class cDbUpdateFunctionLibrary_Mixin is a Mixin
41734>>>>>>>
41734>>>>>>>    Procedure CreateDbUpdateLibraryProperties
41736>>>>>>>        Handle hoSQLManagerMT
41736>>>>>>>
41736>>>>>>>        Property String private.psUseDatabase ""
41737>>>>>>>
41737>>>>>>>        // These are used by the Error routine to show the Table# & Field# if something goes wrong:
41737>>>>>>>        Property Handle  private.phCurrentTable 0
41738>>>>>>>        Property Integer private.piCurrentField 0
41739>>>>>>>
41739>>>>>>>        Property Handle phoCLIHandler      (Create(Self,RefClass(cCLIHandler)))
41740>>>>>>>        Property Handle phoSQLManager      (Create(Self,RefClass(cSQLHandleManager)))
41741>>>>>>>
41741>>>>>>>        Property Handle phoSQLManagerMT
41742>>>>>>>
41742>>>>>>>        Property Handle phoMSSQLHandler    (Create(Self,RefClass(cMSSQLHandler)))
41743>>>>>>>        Property Handle phoDB2SQLHandler   (Create(Self,RefClass(cDB2Handler)))
41744>>>>>>>        Property Handle phoODBCSQLHandler  (Create(Self,RefClass(cODBCHandler)))
41745>>>>>>>        Property Handle phoSQLConnectionHandler 0
41746>>>>>>>        Property tSQLKeyWords[] paSQLKeywordArray
41747>>>>>>>
41747>>>>>>>        Property Boolean pbHandleQueryErrors True
41748>>>>>>>
41748>>>>>>>        Property tSqlColumnNew[] paQueryColumns
41749>>>>>>>        Property String[] paSQLFetchResults
41750>>>>>>>
41750>>>>>>>        // Error handling
41750>>>>>>>        Property Integer Error_Report_Mode DUF_ERROR_REPORT
41751>>>>>>>        Property Boolean pbSqlError False
41752>>>>>>>        Property tSqlErrorArray paSqlErrorArray
41753>>>>>>>        Property Boolean pbProcessingError False
41754>>>>>>>
41754>>>>>>>        // Statistics on query
41754>>>>>>>        Property TimeSpan ptsTotalQueryTime
41755>>>>>>>        Property TimeSpan ptsQueryExec
41756>>>>>>>        Property TimeSpan ptsFetchResults
41757>>>>>>>        Property Integer piColumns 0
41758>>>>>>>        Property Integer piRows 0
41759>>>>>>>        Property Integer piRowType 0
41760>>>>>>>        Property String[] paQueryMessages
41761>>>>>>>        Property String psSQLStatementString
41762>>>>>>>
41762>>>>>>>        Property Integer[] paTableConvertExceptions
41763>>>>>>>
41763>>>>>>>        Property Integer[] paTableDateCorrectionExceptions
41764>>>>>>>
41764>>>>>>>        // Number of SQL statements (chunks) to be executed when executing a really big
41764>>>>>>>        // SQL file that has been compiled into the program. It is way faster to divide
41764>>>>>>>        // the statements in smaller chunks than to execute them all at the same time.
41764>>>>>>>        Property Integer piChunkMax 500
41765>>>>>>>
41765>>>>>>>        // Fill the paSQLKeywordArray array with values;
41765>>>>>>>        Send SetupSQLKeywordArray
41766>>>>>>>    End_Procedure
41767>>>>>>>
Including file: ParseKeyWord.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ParseKeyWord.pkg)
41767>>>>>>>>
41767>>>>>>>>Function ParseKeyWord String sConnect String sKeyWord Returns String
41769>>>>>>>>    Integer iStart iEnd
41769>>>>>>>>    String sRetval
41769>>>>>>>>
41769>>>>>>>>    Move (Trim(sConnect)) to sConnect
41770>>>>>>>>    Move (Pos(Uppercase(sKeyWord), Uppercase(sConnect)))  to iStart
41771>>>>>>>>    If (iStart = 0) Begin
41773>>>>>>>>        Function_Return ""
41774>>>>>>>>    End
41774>>>>>>>>>
41774>>>>>>>>    Move (Left(sConnect, (iStart -1 + Length(sKeyWord)))) to sRetval
41775>>>>>>>>    Move (Replace(sRetval, sConnect, "")) to sRetval
41776>>>>>>>>    If (sKeyWord = Uppercase(CS_SQLConnectionIDText)) Begin
41778>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
41779>>>>>>>>    End
41779>>>>>>>>>
41779>>>>>>>>    Else Begin
41780>>>>>>>>        Move (Pos(";", sRetval))          to iEnd
41781>>>>>>>>    End
41781>>>>>>>>>
41781>>>>>>>>    If (iEnd = 0 and (sRetval contains ",")) Begin
41783>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
41784>>>>>>>>        Decrement iEnd
41785>>>>>>>>    End
41785>>>>>>>>>
41785>>>>>>>>    If (iEnd <> 0) Begin
41787>>>>>>>>        Move (Left(sRetval, (iEnd -1)))   to sRetval
41788>>>>>>>>    End
41788>>>>>>>>>
41788>>>>>>>>    Move (Replace("=", sRetval, ""))      to sRetval
41789>>>>>>>>
41789>>>>>>>>    Function_Return (Trim(sRetval))
41790>>>>>>>>End_Function
41791>>>>>>>>
41791>>>>>>>>
41791>>>>>>>
41791>>>>>>>    // Custom array find function. It compares both the iSQLWord & iSQLDbType params.
41791>>>>>>>    Function CompareFindSQLKeyWords tSQLKeyWords SQLKeywords1 tSQLKeyWords SQLKeywords2 Returns Integer
41793>>>>>>>        If (SQLKeywords1.iSQLWord = SQLKeywords2.iSQLWord and SQLKeywords1.iSQLDbType = SQLKeywords2.iSQLDbType) Begin
41795>>>>>>>            Function_Return (EQ)
41796>>>>>>>        End
41796>>>>>>>>
41796>>>>>>>        Function_Return (GT)
41797>>>>>>>    End_Function
41798>>>>>>>
41798>>>>>>>    // Custom array sort function. It compares both the iSQLWord & iSQLDbType params.
41798>>>>>>>    Function CompareSortSQLKeyWords tSQLKeyWords SQLKeywords1 tSQLKeyWords SQLKeywords2 Returns Integer
41800>>>>>>>        If (SQLKeywords1.iSQLWord   < SQLKeywords2.iSQLWord) ;            Function_Return (LT)
41803>>>>>>>        If (SQLKeywords1.iSQLWord   > SQLKeywords2.iSQLWord) ;            Function_Return (GT)
41806>>>>>>>        If (SQLKeywords1.iSQLDbType < SQLKeywords2.iSQLDbType) ;            Function_Return (LT)
41809>>>>>>>        If (SQLKeywords1.iSQLDbType > SQLKeywords2.iSQLDbType) ;            Function_Return (GT)
41812>>>>>>>
41812>>>>>>>        Function_Return (EQ)
41813>>>>>>>    End_Function
41814>>>>>>>
41814>>>>>>>    Procedure Add_Element Integer iSQLKeywordConstant Integer iEN_dbType String sSQLKeyword
41816>>>>>>>        tSQLKeyWords[] SQLKeywordArray
41816>>>>>>>        tSQLKeyWords[] SQLKeywordArray
41817>>>>>>>        Integer iSize
41817>>>>>>>
41817>>>>>>>        Get paSQLKeywordArray to SQLKeywordArray
41818>>>>>>>        Move (SizeOfArray(SQLKeywordArray)) to iSize
41819>>>>>>>        Move iSQLKeywordConstant to SQLKeywordArray[iSize].iSQLWord
41820>>>>>>>        Move iEN_dbType          to SQLKeywordArray[iSize].iSQLDbType
41821>>>>>>>        Move sSQLKeyword         to SQLKeywordArray[iSize].sSQLPhrase
41822>>>>>>>
41822>>>>>>>        Set paSQLKeywordArray to SQLKeywordArray
41823>>>>>>>    End_Procedure
41824>>>>>>>
41824>>>>>>>    // Creates a struct array with all SQL keywords
41824>>>>>>>    // for all EN_xxx SQL back-ends. Various back-ends can
41824>>>>>>>    // have slightly different wording.
41824>>>>>>>    // If a new EN_dbTypexxx type is added; additions
41824>>>>>>>    // needs to be done for every keyword group below.
41824>>>>>>>    Procedure SetupSQLKeywordArray
41826>>>>>>>        tSQLKeyWords[] SQLKeywordArray SQLKeywordArraySorted
41826>>>>>>>        tSQLKeyWords[] SQLKeywordArray SQLKeywordArraySorted
41828>>>>>>>
41828>>>>>>>        // This should only be called once; but in case it is
41828>>>>>>>        // we delete the array first.
41828>>>>>>>        Set paSQLKeywordArray to SQLKeywordArray
41829>>>>>>>
41829>>>>>>>        // ToDo: *** Not all SQL Key-words has been checked for other backends than MS-SQL ***
41829>>>>>>>        //
41829>>>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypeMSSQL    "ALTER DATABASE"
41830>>>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypeMySQL    "ALTER DATABASE"
41831>>>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypeOracle   "ALTER DATABASE"
41832>>>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypeDB2      "ALTER DATABASE"
41833>>>>>>>        Send Add_Element CI_SQLAlterDatabase EN_dbTypePostgre  "ALTER DATABASE"
41834>>>>>>>
41834>>>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypeMSSQL    "SINGLE_USER"
41835>>>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypeMySQL    "SINGLE_USER"
41836>>>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypeOracle   "SINGLE_USER"
41837>>>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypeDB2      "SINGLE_USER"
41838>>>>>>>        Send Add_Element CI_SQLSingle_User   EN_dbTypePostgre  "SINGLE_USER"
41839>>>>>>>
41839>>>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypeMSSQL    "MULTI_USER"
41840>>>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypeMySQL    "MULTI_USER"
41841>>>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypeOracle   "MULTI_USER"
41842>>>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypeDB2      "MULTI_USER"
41843>>>>>>>        Send Add_Element CI_SQLMulti_User    EN_dbTypePostgre  "MULTI_USER"
41844>>>>>>>
41844>>>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypeMSSQL    "ROLLBACK"
41845>>>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypeMySQL    "ROLLBACK"
41846>>>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypeOracle   "ROLLBACK"
41847>>>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypeDB2      "ROLLBACK"
41848>>>>>>>        Send Add_Element CI_SQLRollback      EN_dbTypePostgre  "ROLLBACK"
41849>>>>>>>
41849>>>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypeMSSQL    "IMMEDIATE"
41850>>>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypeMySQL    "IMMEDIATE"
41851>>>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypeOracle   "IMMEDIATE"
41852>>>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypeDB2      "IMMEDIATE"
41853>>>>>>>        Send Add_Element CI_SQLImmediate     EN_dbTypePostgre  "IMMEDIATE"
41854>>>>>>>
41854>>>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypeMSSQL    "ALTER TABLE"
41855>>>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypeMySQL    "ALTER TABLE"
41856>>>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypeOracle   "ALTER TABLE"
41857>>>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypeDB2      "ALTER TABLE"
41858>>>>>>>        Send Add_Element CI_SQLAlterTable EN_dbTypePostgre  "ALTER TABLE"
41859>>>>>>>
41859>>>>>>>        Send Add_Element CI_SQLAdd EN_dbTypeMSSQL           "ADD"
41860>>>>>>>        Send Add_Element CI_SQLAdd EN_dbTypeMySQL           "ADD"
41861>>>>>>>        Send Add_Element CI_SQLAdd EN_dbTypeOracle          "ADD"
41862>>>>>>>        Send Add_Element CI_SQLAdd EN_dbTypeDB2             "ADD"
41863>>>>>>>        Send Add_Element CI_SQLAdd EN_dbTypePostgre         "ADD"
41864>>>>>>>
41864>>>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypeMSSQL        "UPDATE"
41865>>>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypeMySQL        "UPDATE"
41866>>>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypeOracle       "UPDATE"
41867>>>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypeDB2          "UPDATE"
41868>>>>>>>        Send Add_Element CI_SQLUpdate EN_dbTypePostgre      "UPDATE"
41869>>>>>>>
41869>>>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypeMSSQL       "NOT NULL"
41870>>>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypeMySQL       "NOT NULL"
41871>>>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypeOracle      "" // Seems like Oracle can't handle setting a new column to 'NOT NULL' if the table exists with data(!)
41872>>>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypeDB2         "DEFAULT NOT NULL"
41873>>>>>>>        Send Add_Element CI_SQLNotNull EN_dbTypePostgre     "NOT NULL"
41874>>>>>>>
41874>>>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_DbTypeMSSQL   ""
41875>>>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_dbTypeMySQL   "SQL_SAFE_UPDATES"
41876>>>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_dbTypeOracle  ""
41877>>>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_dbTypeDB2     ""
41878>>>>>>>        Send Add_Element CI_SQL_SAFE_UPDATES EN_dbTypePostgre ""
41879>>>>>>>
41879>>>>>>>        Send Add_Element CI_SQLSet EN_dbTypeMSSQL           "SET"
41880>>>>>>>        Send Add_Element CI_SQLSet EN_dbTypeMySQL           "SET"
41881>>>>>>>        Send Add_Element CI_SQLSet EN_dbTypeOracle          "SET"
41882>>>>>>>        Send Add_Element CI_SQLSet EN_dbTypeDB2             "SET"
41883>>>>>>>        Send Add_Element CI_SQLSet EN_dbTypePostgre         "SET"
41884>>>>>>>
41884>>>>>>>        Send Add_Element CI_SQLWith EN_dbTypeMSSQL          "WITH"
41885>>>>>>>        Send Add_Element CI_SQLWith EN_dbTypeMySQL          "WITH"
41886>>>>>>>        Send Add_Element CI_SQLWith EN_dbTypeOracle         "WITH"
41887>>>>>>>        Send Add_Element CI_SQLWith EN_dbTypeDB2            "WITH"
41888>>>>>>>        Send Add_Element CI_SQLWith EN_dbTypePostgre        "WITH"
41889>>>>>>>
41889>>>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypeMSSQL    "CREATE DATABASE"
41890>>>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypeMySQL    "CREATE DATABASE"
41891>>>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypeOracle   "CREATE DATABASE"
41892>>>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypeDB2      "CREATE DATABASE"
41893>>>>>>>        Send Add_Element CI_SQLCreateDatabase EN_dbTypePostgre  "CREATE DATABASE"
41894>>>>>>>
41894>>>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypeMSSQL    "COLLATE"
41895>>>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypeMySQL    "COLLATE"
41896>>>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypeOracle   "COLLATE"
41897>>>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypeDB2      "COLLATE"
41898>>>>>>>        Send Add_Element CI_SQLDatabaseCollation EN_dbTypePostgre  "COLLATE"
41899>>>>>>>
41899>>>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypeMSSQL    "CREATE VIEW"
41900>>>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypeMySQL    "CREATE VIEW"
41901>>>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypeOracle   "CREATE VIEW"
41902>>>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypeDB2      "CREATE VIEW"
41903>>>>>>>        Send Add_Element CI_SQLCreateView EN_dbTypePostgre  "CREATE VIEW"
41904>>>>>>>
41904>>>>>>>        Send Add_Element CI_SQLDropView EN_dbTypeMSSQL      "DROP VIEW"
41905>>>>>>>        Send Add_Element CI_SQLDropView EN_dbTypeMySQL      "DROP VIEW"
41906>>>>>>>        Send Add_Element CI_SQLDropView EN_dbTypeOracle     "DROP VIEW"
41907>>>>>>>        Send Add_Element CI_SQLDropView EN_dbTypeDB2        "DROP VIEW"
41908>>>>>>>        Send Add_Element CI_SQLDropView EN_dbTypePostgre    "DROP VIEW"
41909>>>>>>>
41909>>>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypeMSSQL   "CREATE TABLE"
41910>>>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypeMySQL   "CREATE TABLE"
41911>>>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypeOracle  "CREATE TABLE"
41912>>>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypeDB2     "CREATE TABLE"
41913>>>>>>>        Send Add_Element CI_SQLCreateTable EN_dbTypePostgre "CREATE TABLE"
41914>>>>>>>
41914>>>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypeMSSQL     "DROP TABLE"
41915>>>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypeMySQL     "DROP TABLE"
41916>>>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypeOracle    "DROP TABLE"
41917>>>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypeDB2       "DROP TABLE"
41918>>>>>>>        Send Add_Element CI_SQLDropTable EN_dbTypePostgre   "DROP TABLE"
41919>>>>>>>
41919>>>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypeMSSQL   "EXEC sp_rename"
41920>>>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypeMySQL   "RENAME TABLE"
41921>>>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypeOracle  "RENAME TABLE"
41922>>>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypeDB2     "RENAME TABLE"
41923>>>>>>>        Send Add_Element CI_SQLRenameTable EN_dbTypePostgre "RENAME TO"
41924>>>>>>>
41924>>>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypeMSSQL    "DROP COLUMN"
41925>>>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypeMySQL    "DROP COLUMN"
41926>>>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypeOracle   "DROP COLUMN"
41927>>>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypeDB2      "DROP COLUMN"
41928>>>>>>>        Send Add_Element CI_SQLDropColumn EN_dbTypePostgre  "DROP COLUMN"
41929>>>>>>>
41929>>>>>>>        Send Add_Element CI_SQLColumn EN_dbTypeMSSQL        "COLUMN"
41930>>>>>>>        Send Add_Element CI_SQLColumn EN_dbTypeMySQL        "COLUMN"
41931>>>>>>>        Send Add_Element CI_SQLColumn EN_dbTypeOracle       "COLUMN"
41932>>>>>>>        Send Add_Element CI_SQLColumn EN_dbTypeDB2          "COLUMN"
41933>>>>>>>        Send Add_Element CI_SQLColumn EN_dbTypePostgre      "COLUMN"
41934>>>>>>>
41934>>>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypeMSSQL   "ALTER COLUMN"
41935>>>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypeMySQL   "MODIFY"
41936>>>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypeOracle  "MODIFY"
41937>>>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypeDB2     "ALTER COLUMN"
41938>>>>>>>        Send Add_Element CI_SQLAlterColumn EN_dbTypePostgre "ALTER COLUMN"
41939>>>>>>>
41939>>>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypeMSSQL   "EXEC sp_RENAME"
41940>>>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypeMySQL   "CHANGE"
41941>>>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypeOracle  "RENAME COLUMN"
41942>>>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypeDB2     "RENAME COLUMN"
41943>>>>>>>        Send Add_Element CI_SQLRenameColumn EN_dbTypePostgre "RENAME COLUMN"
41944>>>>>>>
41944>>>>>>>        Send Add_Element CI_SQLSelect EN_dbTypeMSSQL        "SELECT"
41945>>>>>>>        Send Add_Element CI_SQLSelect EN_dbTypeMySQL        "SELECT"
41946>>>>>>>        Send Add_Element CI_SQLSelect EN_dbTypeOracle       "SELECT"
41947>>>>>>>        Send Add_Element CI_SQLSelect EN_dbTypeDB2          "SELECT"
41948>>>>>>>        Send Add_Element CI_SQLSelect EN_dbTypePostgre      "SELECT"
41949>>>>>>>
41949>>>>>>>        Send Add_Element CI_SQLWhere EN_dbTypeMSSQL         "WHERE"
41950>>>>>>>        Send Add_Element CI_SQLWhere EN_dbTypeMySQL         "WHERE"
41951>>>>>>>        Send Add_Element CI_SQLWhere EN_dbTypeOracle        "WHERE"
41952>>>>>>>        Send Add_Element CI_SQLWhere EN_dbTypeDB2           "WHERE"
41953>>>>>>>        Send Add_Element CI_SQLWhere EN_dbTypePostgre       "WHERE"
41954>>>>>>>
41954>>>>>>>        Send Add_Element CI_SQLFrom EN_dbTypeMSSQL          "FROM"
41955>>>>>>>        Send Add_Element CI_SQLFrom EN_dbTypeMySQL          "FROM"
41956>>>>>>>        Send Add_Element CI_SQLFrom EN_dbTypeOracle         "FROM"
41957>>>>>>>        Send Add_Element CI_SQLFrom EN_dbTypeDB2            "FROM"
41958>>>>>>>        Send Add_Element CI_SQLFrom EN_dbTypePostgre        "FROM"
41959>>>>>>>
41959>>>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypeMSSQL    "INFORMATION_SCHEMA.COLUMNS"
41960>>>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypeMySQL    "INFORMATION_SCHEMA.COLUMNS"
41961>>>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypeOracle   "INFORMATION_SCHEMA.COLUMNS"
41962>>>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypeDB2      "INFORMATION_SCHEMA.COLUMNS"
41963>>>>>>>        Send Add_Element CI_SQLInfoSchema EN_dbTypePostgre  "INFORMATION_SCHEMA.COLUMNS"
41964>>>>>>>
41964>>>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypeMSSQL    "TABLE_NAME"
41965>>>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypeMySQL    "TABLE_NAME"
41966>>>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypeOracle   "TABLE_NAME"
41967>>>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypeDB2      "TABLE_NAME"
41968>>>>>>>        Send Add_Element CI_SQLTable_Name EN_dbTypePostgre  "TABLE_NAME"
41969>>>>>>>
41969>>>>>>>        Send Add_Element CI_SQLTable EN_dbTypeMSSQL         "TABLE"
41970>>>>>>>        Send Add_Element CI_SQLTable EN_dbTypeMySQL         "TABLE"
41971>>>>>>>        Send Add_Element CI_SQLTable EN_dbTypeOracle        "TABLE"
41972>>>>>>>        Send Add_Element CI_SQLTable EN_dbTypeDB2           "TABLE"
41973>>>>>>>        Send Add_Element CI_SQLTable EN_dbTypePostgre       "TABLE"
41974>>>>>>>
41974>>>>>>>        Send Add_Element CI_SQLSys EN_dbTypeMSSQL           "SYS"
41975>>>>>>>        Send Add_Element CI_SQLSys EN_dbTypeMySQL           "SYS"
41976>>>>>>>        Send Add_Element CI_SQLSys EN_dbTypeOracle          "SYS"
41977>>>>>>>        Send Add_Element CI_SQLSys EN_dbTypeDB2             "SYS"
41978>>>>>>>        Send Add_Element CI_SQLSys EN_dbTypePostgre         "SYS"
41979>>>>>>>
41979>>>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypeMSSQL       "SP_HELP"
41980>>>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypeMySQL       "SP_HELP"
41981>>>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypeOracle      "SP_HELP"
41982>>>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypeDB2         "SP_HELP"
41983>>>>>>>        Send Add_Element CI_SQLSp_Help EN_dbTypePostgre     "SP_HELP"
41984>>>>>>>
41984>>>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypeMSSQL      "SET NOCOUNT ON"
41985>>>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypeMySQL      "SET NOCOUNT ON"
41986>>>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypeOracle     "SET NOCOUNT ON"
41987>>>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypeDB2        "SET NOCOUNT ON"
41988>>>>>>>        Send Add_Element CI_SQLSetNoCountOn EN_dbTypePostgre    "SET NOCOUNT ON"
41989>>>>>>>
41989>>>>>>>        Send Add_Element CI_SQLTo EN_dbTypeMSSQL            "TO"
41990>>>>>>>        Send Add_Element CI_SQLTo EN_dbTypeMySQL            "TO"
41991>>>>>>>        Send Add_Element CI_SQLTo EN_dbTypeOracle           "TO"
41992>>>>>>>        Send Add_Element CI_SQLTo EN_dbTypeDB2              "TO"
41993>>>>>>>        Send Add_Element CI_SQLTo EN_dbTypePostgre          "TO"
41994>>>>>>>
41994>>>>>>>        Send Add_Element CI_SQLGO EN_dbTypeMSSQL            "GO"
41995>>>>>>>        Send Add_Element CI_SQLGO EN_dbTypeMySQL            "GO"
41996>>>>>>>        Send Add_Element CI_SQLGO EN_dbTypeOracle           "GO"
41997>>>>>>>        Send Add_Element CI_SQLGO EN_dbTypeDB2              "GO"
41998>>>>>>>        Send Add_Element CI_SQLGO EN_dbTypePostgre          "GO"
41999>>>>>>>
41999>>>>>>>        Send Add_Element CI_SQLUse EN_dbTypeMSSQL           "USE"
42000>>>>>>>        Send Add_Element CI_SQLUse EN_dbTypeMySQL           "USE"
42001>>>>>>>        Send Add_Element CI_SQLUse EN_dbTypeOracle          "USE"
42002>>>>>>>        Send Add_Element CI_SQLUse EN_dbTypeDB2             "USE"
42003>>>>>>>        Send Add_Element CI_SQLUse EN_dbTypePostgre         "USE"
42004>>>>>>>
42004>>>>>>>        Send Add_Element CI_SQLDBO EN_dbTypeMSSQL           "dbo"
42005>>>>>>>        Send Add_Element CI_SQLDBO EN_dbTypeMySQL           "dbo"
42006>>>>>>>        Send Add_Element CI_SQLDBO EN_dbTypeOracle          "dbo"
42007>>>>>>>        Send Add_Element CI_SQLDBO EN_dbTypeDB2             "dbo"
42008>>>>>>>        Send Add_Element CI_SQLDBO EN_dbTypePostgre         "dbo"
42009>>>>>>>
42009>>>>>>>        Send Add_Element CI_SQLMaster EN_dbTypeMSSQL        "MASTER"
42010>>>>>>>        Send Add_Element CI_SQLMaster EN_dbTypeMySQL        "MASTER"
42011>>>>>>>        Send Add_Element CI_SQLMaster EN_dbTypeOracle       "MASTER"
42012>>>>>>>        Send Add_Element CI_SQLMaster EN_dbTypeDB2          "MASTER"
42013>>>>>>>        Send Add_Element CI_SQLMaster EN_dbTypePostgre      "MASTER"
42014>>>>>>>
42014>>>>>>>        Send Add_Element CI_SQLName EN_dbTypeMSSQL          "NAME"
42015>>>>>>>        Send Add_Element CI_SQLName EN_dbTypeMySQL          "NAME"
42016>>>>>>>        Send Add_Element CI_SQLName EN_dbTypeOracle         "NAME"
42017>>>>>>>        Send Add_Element CI_SQLName EN_dbTypeDB2            "NAME"
42018>>>>>>>        Send Add_Element CI_SQLName EN_dbTypePostgre        "NAME"
42019>>>>>>>
42019>>>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypeMSSQL     "DATABASES"
42020>>>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypeMySQL     "DATABASES"
42021>>>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypeOracle    "DATABASES"
42022>>>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypeDB2       "DATABASES"
42023>>>>>>>        Send Add_Element CI_SQLDatabases EN_dbTypePostgre   "DATABASES"
42024>>>>>>>
42024>>>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypeMSSQL    "SYS.INDEXES"
42025>>>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypeMySQL    "SYS.INDEXES"
42026>>>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypeOracle   "SYS.INDEXES"
42027>>>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypeDB2      "SYS.INDEXES"
42028>>>>>>>        Send Add_Element CI_SQLSysIndexes EN_dbTypePostgre  "SYS.INDEXES"
42029>>>>>>>
42029>>>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypeMSSQL      "OBJECT_ID"
42030>>>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypeMySQL      "OBJECT_ID"
42031>>>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypeOracle     "OBJECT_ID"
42032>>>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypeDB2        "OBJECT_ID"
42033>>>>>>>        Send Add_Element CI_SQLObjectID EN_dbTypePostgre    "OBJECT_ID"
42034>>>>>>>
42034>>>>>>>        Send Add_Element CI_SQLID EN_dbTypeMSSQL            "ID"
42035>>>>>>>        Send Add_Element CI_SQLID EN_dbTypeMySQL            "ID"
42036>>>>>>>        Send Add_Element CI_SQLID EN_dbTypeOracle           "ID"
42037>>>>>>>        Send Add_Element CI_SQLID EN_dbTypeDB2              "ID"
42038>>>>>>>        Send Add_Element CI_SQLID EN_dbTypePostgre          "ID"
42039>>>>>>>
42039>>>>>>>        Send Add_Element CI_SQLAND EN_dbTypeMSSQL           "AND"
42040>>>>>>>        Send Add_Element CI_SQLAND EN_dbTypeMySQL           "AND"
42041>>>>>>>        Send Add_Element CI_SQLAND EN_dbTypeOracle          "AND"
42042>>>>>>>        Send Add_Element CI_SQLAND EN_dbTypeDB2             "AND"
42043>>>>>>>        Send Add_Element CI_SQLAND EN_dbTypePostgre         "AND"
42044>>>>>>>
42044>>>>>>>        Send Add_Element CI_SQLDescription EN_dbTypeMSSQL   "DESCRIPTION"
42045>>>>>>>        Send Add_Element CI_SQLDescription EN_dbTypeMySQL   "DESCRIPTION"
42046>>>>>>>        Send Add_Element CI_SQLDescription EN_dbTypeOracle  "DESCRIPTION"
42047>>>>>>>        Send Add_Element CI_SQLDescription EN_dbTypeDB2     "DESCRIPTION"
42048>>>>>>>        Send Add_Element CI_SQLDescription EN_dbTypePostgre "DESCRIPTION"
42049>>>>>>>
42049>>>>>>>        // In case we didn't put the above in order (and we don't need to); we sort the struct array.
42049>>>>>>>        Get paSQLKeywordArray to SQLKeywordArray
42050>>>>>>>        Move (SortArray(SQLKeywordArray, Self, (RefFunc(CompareSortSQLKeyWords)))) to SQLKeywordArraySorted
42051>>>>>>>        Set paSQLKeywordArray to SQLKeywordArraySorted
42052>>>>>>>
42052>>>>>>>    End_Procedure
42053>>>>>>>
42053>>>>>>>End_Class
42054>>>>>Use cSQLConnectionHandler.pkg
Including file: cSQLConnectionHandler.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cSQLConnectionHandler.pkg)
42054>>>>>>>//****************************************************************************
42054>>>>>>>// $Module type: Class
42054>>>>>>>// $Module name: cSQLConnectionHandler.pkg
42054>>>>>>>// $Author     : Nils Svedmyr, RDC Tools International, <mailto:support@rdctools.com>
42054>>>>>>>// Web-site    : http://www.rdctools.com
42054>>>>>>>// Created     : 2015-08-11 @ 16:02 (Military date format: YY-MM-DD)
42054>>>>>>>//
42054>>>>>>>// Description : A handler class for using CLI connection ID's to login to a database server.
42054>>>>>>>//
42054>>>>>>>// $Rev History:
42054>>>>>>>//    2015-08-11  Module header created
42054>>>>>>>//    2016-09-26  Changed name of the objecthandle from ghoCreateConnectionID to ghoSQLConnectionHandler.
42054>>>>>>>//                Added a new structure for passing connection data back & forth.
42054>>>>>>>//                Added better error handling.
42054>>>>>>>//                Added a decompose message for the connection string.
42054>>>>>>>//    2017-01-09  Added support for Mertech drivers
42054>>>>>>>//                Big overhaul to comply better with "Managed Connections" (DF 19)
42054>>>>>>>//                These changes make the class compatible with DFConnId.ini (can read/write DAW connection ini-files)
42054>>>>>>>//    2017-02-12  Reworked the whole connection property interface.
42054>>>>>>>//                Now there is one struct property that is the at cencter of a connection.
42054>>>>>>>//    2023-11-06 *** REMOVED ALL SUPPORT FOR MERTECH DRIVERS ***
42054>>>>>>>//****************************************************************************
42054>>>>>>>Use cli.pkg
42054>>>>>>>Use MSSqldrv.pkg
42054>>>>>>>Use db2_drv.pkg
42054>>>>>>>Use odbc_drv.pkg
42054>>>>>>>Use cSQLConnectionIniFile.pkg
Including file: cSQLConnectionIniFile.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cSQLConnectionIniFile.pkg)
42054>>>>>>>>>//****************************************************************************
42054>>>>>>>>>// $Module type: Class
42054>>>>>>>>>// $Module name: cSQLConnectionIniFile.pkg
42054>>>>>>>>>//
42054>>>>>>>>>// $Author     : Nils G. Svedmyr, RDC Tools International.
42054>>>>>>>>>// Copyright (c) 2012 RDC Tools International
42054>>>>>>>>>// E-mail      : support@rdctools.com
42054>>>>>>>>>// Web-site    : http://www.rdctools.com
42054>>>>>>>>>//
42054>>>>>>>>>// Created     : 2012-09-20 @ 18:04 (Military date format - Year-Month-Day)
42054>>>>>>>>>//
42054>>>>>>>>>// Note        : The file must be USEd after declaration of the ghoApplication object, as it uses
42054>>>>>>>>>//               properties of that object.
42054>>>>>>>>>//
42054>>>>>>>>>// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
42054>>>>>>>>>// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
42054>>>>>>>>>// This is free software; you can redistribute it and/or modify it under the terms of the
42054>>>>>>>>>// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
42054>>>>>>>>>// in the help folder for more details.
42054>>>>>>>>>//
42054>>>>>>>>>Use cSQLConnectionIniFile.inc
42054>>>>>>>>>Use cDbUpdateDatabaseDriver.pkg
Including file: cDbUpdateDatabaseDriver.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cDbUpdateDatabaseDriver.pkg)
42054>>>>>>>>>>>Use cSQLConnectionIniFile.inc
42054>>>>>>>>>>>
42054>>>>>>>>>>>Class cDbUpdateGenericDatabaseDriver is a cObject
42055>>>>>>>>>>>    Procedure Construct_Object
42057>>>>>>>>>>>        Forward Send Construct_Object
42059>>>>>>>>>>>        Property String psDriverID DATAFLEX_ID
42060>>>>>>>>>>>    End_Procedure
42061>>>>>>>>>>>
42061>>>>>>>>>>>    Function ServerKeyword String sServer Returns String
42063>>>>>>>>>>>        String sRetval
42063>>>>>>>>>>>        If (Uppercase(sServer) contains ("." + CS_SQLIniDSNKeyword)) Begin
42065>>>>>>>>>>>            Move CS_SQLIniFileDSNKeyword to sRetval    
42066>>>>>>>>>>>        End                                        
42066>>>>>>>>>>>>
42066>>>>>>>>>>>        Else Begin
42067>>>>>>>>>>>            Move CS_SQLIniDSNKeyword to sRetval
42068>>>>>>>>>>>        End
42068>>>>>>>>>>>>
42068>>>>>>>>>>>            
42068>>>>>>>>>>>        Function_Return sRetval
42069>>>>>>>>>>>    End_Function
42070>>>>>>>>>>>
42070>>>>>>>>>>>    Function ConstructConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
42072>>>>>>>>>>>        String sConnect sServerKeyWord sDriverID
42072>>>>>>>>>>>
42072>>>>>>>>>>>        Get psDriverID to sDriverID
42073>>>>>>>>>>>        Get ServerKeyword sServer to sServerKeyWord
42074>>>>>>>>>>>        Move (sConnect + sServerKeyWord + "=" + sServer) to sConnect
42075>>>>>>>>>>>        If (sServerKeyWord = CS_SQLIniDSNKeyword or sServerKeyWord = CS_SQLIniFileDSNKeyword) Begin
42077>>>>>>>>>>>            Move "" to sDatabase
42078>>>>>>>>>>>        End
42078>>>>>>>>>>>>
42078>>>>>>>>>>>        
42078>>>>>>>>>>>        // 2019-10-20 I think this was plain wrong for the DAW ODBC_DRV driver. At least it didn't work for login to an MS-SQL db.
42078>>>>>>>>>>>//        If (bTrusted = False and (sDriverID = ODBC_DRV_ID and sServerKeyWord = CS_SQLIniDSNKeyword)) Begin
42078>>>>>>>>>>>//            Function_Return sConnect
42078>>>>>>>>>>>//        End
42078>>>>>>>>>>>
42078>>>>>>>>>>>        If (sDatabase <> "") Begin
42080>>>>>>>>>>>            Move (sConnect + ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
42081>>>>>>>>>>>        End
42081>>>>>>>>>>>>
42081>>>>>>>>>>>        If (bTrusted = True) Begin
42083>>>>>>>>>>>            Move (sConnect + ";" + CS_SQLIniTrustedKeyword + "=Yes") to sConnect
42084>>>>>>>>>>>        End
42084>>>>>>>>>>>>
42084>>>>>>>>>>>        Else Begin
42085>>>>>>>>>>>            Move (sConnect + ";" + CS_SQLIniUIDKeyword + "=" + sUserID + ";" + CS_SQLIniPWDKeyword + "=" + sPassword) to sConnect
42086>>>>>>>>>>>        End
42086>>>>>>>>>>>>
42086>>>>>>>>>>>        Function_Return sConnect
42087>>>>>>>>>>>    End_Function
42088>>>>>>>>>>>
42088>>>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
42090>>>>>>>>>>>        Boolean bLoginSuccessful
42090>>>>>>>>>>>        String sDriverID
42090>>>>>>>>>>>
42090>>>>>>>>>>>        Get psDriverID to sDriverID
42091>>>>>>>>>>>        If (sDriverID = DATAFLEX_ID or sDriverID = "") Begin
42093>>>>>>>>>>>            Function_Return True
42094>>>>>>>>>>>        End
42094>>>>>>>>>>>>
42094>>>>>>>>>>>        Move 0 to LastErr  // Do NOT use the Err flag, it will be set true by the login command although it is successful.
42095>>>>>>>>>>>        If (bTrusted = False and sDatabase <> "") Begin
42097>>>>>>>>>>>            Move (SFormat("SERVER=%1;DATABASE=%2", sServer, sDatabase)) to sServer
42098>>>>>>>>>>>            Login sServer sUserId sPassword sDriverID  
42100>>>>>>>>>>>        End
42100>>>>>>>>>>>>
42100>>>>>>>>>>>        Else Begin
42101>>>>>>>>>>>            Login sConnectionString "" "" sDriverID
42103>>>>>>>>>>>        End
42103>>>>>>>>>>>>
42103>>>>>>>>>>>        Move (LastErr = 0) to bLoginSuccessful
42104>>>>>>>>>>>        Function_Return bLoginSuccessful
42105>>>>>>>>>>>    End_Function
42106>>>>>>>>>>>End_Class
42107>>>>>>>>>>>
42107>>>>>>>>>>>Class cDbUpdateMSSQLDriver is a cDbUpdateGenericDatabaseDriver
42108>>>>>>>>>>>    Function ServerKeyword String sServer Returns String
42110>>>>>>>>>>>        Function_Return CS_SQLIniServerKeyword
42111>>>>>>>>>>>    End_Function
42112>>>>>>>>>>>End_Class
42113>>>>>>>>>>>
42113>>>>>>>>>>>Class cDbUpdateODBCDriver is a cDbUpdateGenericDatabaseDriver
42114>>>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
42116>>>>>>>>>>>        Boolean bLoginSuccessful
42116>>>>>>>>>>>        String sDriverID
42116>>>>>>>>>>>
42116>>>>>>>>>>>        Get psDriverID to sDriverID
42117>>>>>>>>>>>        Move (Trim(sDriverID)) to sDriverID
42118>>>>>>>>>>>        If (sDriverID = DATAFLEX_ID or sDriverID = "") Begin
42120>>>>>>>>>>>            Function_Return True
42121>>>>>>>>>>>        End
42121>>>>>>>>>>>>
42121>>>>>>>>>>>        Move 0 to LastErr  // Do NOT use the Err flag, it will be set true by the login command although it is successful.
42122>>>>>>>>>>>        If (bTrusted = False) Begin
42124>>>>>>>>>>>            If (Uppercase(sServer) contains ("." + String(CS_SQLIniDSNKeyword))) Begin
42126>>>>>>>>>>>                Move (CS_SQLIniFileDSNKeyword + "=" + sServer) to sServer
42127>>>>>>>>>>>            End
42127>>>>>>>>>>>>
42127>>>>>>>>>>>            Else If (not(Uppercase(sServer) contains CS_SQLIniDSNKeyword)) Begin
42130>>>>>>>>>>>                Move (CS_SQLIniDSNKeyword + "=" + sServer) to sServer
42131>>>>>>>>>>>            End
42131>>>>>>>>>>>>
42131>>>>>>>>>>>            Login sServer sUserId sPassword sDriverID  
42133>>>>>>>>>>>        End
42133>>>>>>>>>>>>
42133>>>>>>>>>>>        Else Begin
42134>>>>>>>>>>>            Login sConnectionString "" "" sDriverID
42136>>>>>>>>>>>        End
42136>>>>>>>>>>>>
42136>>>>>>>>>>>        Move (LastErr = 0) to bLoginSuccessful
42137>>>>>>>>>>>
42137>>>>>>>>>>>        Function_Return bLoginSuccessful
42138>>>>>>>>>>>    End_Function
42139>>>>>>>>>>>End_Class
42140>>>>>>>>>>>
42140>>>>>>>>>>>Class cDbUpdateDB2Driver is a cDbUpdateGenericDatabaseDriver
42141>>>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
42143>>>>>>>>>>>        Boolean bLoginSuccessful
42143>>>>>>>>>>>        String sDriverID
42143>>>>>>>>>>>
42143>>>>>>>>>>>        Move False to Err
42144>>>>>>>>>>>        Get psDriverID to sDriverID
42145>>>>>>>>>>>        If (not(Uppercase(sServer) contains CS_SQLIniDSNKeyword)) Begin
42147>>>>>>>>>>>            Move (CS_SQLIniDSNKeyword + "=" + sServer) to sServer
42148>>>>>>>>>>>        End
42148>>>>>>>>>>>>
42148>>>>>>>>>>>        Login sServer sUserId sPassword sDriverID
42150>>>>>>>>>>>
42150>>>>>>>>>>>        Move (not(Err)) to bLoginSuccessful
42151>>>>>>>>>>>        Function_Return bLoginSuccessful
42152>>>>>>>>>>>    End_Function
42153>>>>>>>>>>>End_Class
42154>>>>>>>>>>>
42154>>>>>>>>>>>Class cDbUpdatePSQLDriver is a cDbUpdateGenericDatabaseDriver
42155>>>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
42157>>>>>>>>>>>        Boolean bLoginSuccessful
42157>>>>>>>>>>>        String sDriverID
42157>>>>>>>>>>>
42157>>>>>>>>>>>        Move False to Err
42158>>>>>>>>>>>        Get psDriverID to sDriverID
42159>>>>>>>>>>>//        If (not(Uppercase(sServer) contains CS_SQLIniDSNKeyword)) Begin
42159>>>>>>>>>>>//            Move (CS_SQLIniDSNKeyword + "=" + sServer) to sServer
42159>>>>>>>>>>>//        End
42159>>>>>>>>>>>        Login sServer sUserId sPassword sDriverID
42161>>>>>>>>>>>
42161>>>>>>>>>>>        Move (not(Err)) to bLoginSuccessful
42162>>>>>>>>>>>        Function_Return bLoginSuccessful
42163>>>>>>>>>>>    End_Function
42164>>>>>>>>>>>End_Class
42165>>>>>>>>>>>
42165>>>>>>>>>>>Class cDbUpdateDataFlexDriver is a cDbUpdateGenericDatabaseDriver
42166>>>>>>>>>>>    Function ConstructConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
42168>>>>>>>>>>>        Function_Return ""
42169>>>>>>>>>>>    End_Function
42170>>>>>>>>>>>End_Class
42171>>>>>>>>>>>
42171>>>>>>>>>>>Class cDbUpdateDatabaseDriver is a cObject
42172>>>>>>>>>>>    Procedure Construct_Object
42174>>>>>>>>>>>        Forward Send Construct_Object
42176>>>>>>>>>>>        Property String psDriverID DATAFLEX_ID
42177>>>>>>>>>>>        Property Handle phoDriverSpecificObject
42178>>>>>>>>>>>    End_Procedure
42179>>>>>>>>>>>
42179>>>>>>>>>>>    Function CreateDriver Returns Handle
42181>>>>>>>>>>>        String sDriverID
42181>>>>>>>>>>>        Handle hoDriver hcDriverClass
42181>>>>>>>>>>>
42181>>>>>>>>>>>        Get psDriverID to sDriverID
42182>>>>>>>>>>>        Case Begin
42182>>>>>>>>>>>            Case (sDriverID = MSSQLDRV_ID)
42184>>>>>>>>>>>                Move (RefClass(cDbUpdateMSSQLDriver))    to hcDriverClass
42185>>>>>>>>>>>                Case Break
42186>>>>>>>>>>>            Case (sDriverID = ODBC_DRV_ID)
42189>>>>>>>>>>>                Move (RefClass(cDbUpdateODBCDriver))     to hcDriverClass
42190>>>>>>>>>>>                Case Break
42191>>>>>>>>>>>            Case (sDriverID = DB2_DRV_ID)
42194>>>>>>>>>>>                Move (RefClass(cDbUpdateDB2Driver))      to hcDriverClass
42195>>>>>>>>>>>                Case Break               
42196>>>>>>>>>>>            // DATAFLEX_ID = Default driver
42196>>>>>>>>>>>            Case Else
42196>>>>>>>>>>>                Move (RefClass(cDbUpdateDataFlexDriver)) to hcDriverClass
42197>>>>>>>>>>>                Move DATAFLEX_ID to sDriverID
42198>>>>>>>>>>>        Case End
42198>>>>>>>>>>>
42198>>>>>>>>>>>        Get Create hcDriverClass to hoDriver
42199>>>>>>>>>>>        Set psDriverID of hoDriver to sDriverID
42200>>>>>>>>>>>        Set phoDriverSpecificObject to hoDriver
42201>>>>>>>>>>>
42201>>>>>>>>>>>        Function_Return hoDriver
42202>>>>>>>>>>>    End_Function
42203>>>>>>>>>>>
42203>>>>>>>>>>>    Procedure DestroyDriver
42205>>>>>>>>>>>        If (phoDriverSpecificObject(Self)) Begin
42207>>>>>>>>>>>            Send Destroy of (phoDriverSpecificObject(Self))
42208>>>>>>>>>>>        End
42208>>>>>>>>>>>>
42208>>>>>>>>>>>    End_Procedure
42209>>>>>>>>>>>
42209>>>>>>>>>>>    Function ConstructConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
42211>>>>>>>>>>>        String sConnect
42211>>>>>>>>>>>        Handle hoDriver
42211>>>>>>>>>>>
42211>>>>>>>>>>>        Get CreateDriver to hoDriver
42212>>>>>>>>>>>        Get ConstructConnectionString of hoDriver sServer sDatabase bTrusted sUserID sPassword to sConnect
42213>>>>>>>>>>>        Send DestroyDriver
42214>>>>>>>>>>>        Function_Return sConnect
42215>>>>>>>>>>>    End_Function
42216>>>>>>>>>>>
42216>>>>>>>>>>>    Function DbLogin String sConnectionString String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns Boolean
42218>>>>>>>>>>>        Boolean bLoginSuccessful
42218>>>>>>>>>>>        Handle hoDriver
42218>>>>>>>>>>>
42218>>>>>>>>>>>        Get CreateDriver to hoDriver
42219>>>>>>>>>>>        Get DbLogin of hoDriver sConnectionString sServer sDatabase bTrusted sUserID sPassword to bLoginSuccessful
42220>>>>>>>>>>>        Send DestroyDriver
42221>>>>>>>>>>>        Function_Return bLoginSuccessful
42222>>>>>>>>>>>    End_Function
42223>>>>>>>>>>>
42223>>>>>>>>>>>End_Class
42224>>>>>>>>>
42224>>>>>>>>>    Use cLoginEncryption.pkg
Including file: cLoginEncryption.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cLoginEncryption.pkg)
42224>>>>>>>>>>>Use cCryptographerEx.pkg
42224>>>>>>>>>>>
42224>>>>>>>>>>>Class cLoginEncryption is a cObject
42225>>>>>>>>>>>    
42225>>>>>>>>>>>    Procedure Construct_Object
42227>>>>>>>>>>>        Forward Send Construct_Object
42229>>>>>>>>>>>        // this must be set to a multi (40ish) character random key
42229>>>>>>>>>>>        Property String psEncryptPassword ""
42230>>>>>>>>>>>        
42230>>>>>>>>>>>        Object oDataCrypter is a cCryptographerEx
42232>>>>>>>>>>>            Set piHash to CALG_SHA_256
42233>>>>>>>>>>>            Set piCipher to CALG_AES_256
42234>>>>>>>>>>>            Set psProvider to "" //  Not providing a specific provider gives the default provider for the provider type
42235>>>>>>>>>>>            Set piProvider to PROV_RSA_AES
42236>>>>>>>>>>>        End_Object
42237>>>>>>>>>>>    End_Procedure
42238>>>>>>>>>>>    
42238>>>>>>>>>>>    // This can be augmented to return a password encryption key using any
42238>>>>>>>>>>>    // hidden mechanism desired.
42238>>>>>>>>>>>    Function GetEncryptionPassword Returns String
42240>>>>>>>>>>>        String sPassword
42240>>>>>>>>>>>        Get psEncryptPassword to sPassword
42241>>>>>>>>>>>        Function_Return sPassword
42242>>>>>>>>>>>    End_Function
42243>>>>>>>>>>>    
42243>>>>>>>>>>>    // Encrypts a string into an unreadable hash that can later be decrypted using DecryptKey.
42243>>>>>>>>>>>    //
42243>>>>>>>>>>>    // Params:
42243>>>>>>>>>>>    //   sPlainText     String to encrypt.
42243>>>>>>>>>>>    // Returns:
42243>>>>>>>>>>>    //   Base64 encoded hash.
42243>>>>>>>>>>>    Function EncryptPassword String sPlainText Returns String
42245>>>>>>>>>>>        String sEncryptPassword sBase64
42245>>>>>>>>>>>        UChar[] ucBinary
42246>>>>>>>>>>>        Pointer pBase64
42246>>>>>>>>>>>        Integer iVoid
42246>>>>>>>>>>>        
42246>>>>>>>>>>>        //  Encrypt Key
42246>>>>>>>>>>>        Get GetEncryptionPassword to sEncryptPassword
42247>>>>>>>>>>>        If (sEncryptPassword = "") Begin
42249>>>>>>>>>>>            Error DFERR_PROGRAM "No encryption password set"
42250>>>>>>>>>>>>
42250>>>>>>>>>>>        End
42250>>>>>>>>>>>>
42250>>>>>>>>>>>        
42250>>>>>>>>>>>        Get Encrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) (StringToUCharArray(sPlainText)) to ucBinary
42251>>>>>>>>>>>        
42251>>>>>>>>>>>        If (SizeOfArray(ucBinary) = 0) Begin
42253>>>>>>>>>>>            Error DFERR_PROGRAM "Unable to encrypt database login password"
42254>>>>>>>>>>>>
42254>>>>>>>>>>>            Function_Return ""
42255>>>>>>>>>>>        End
42255>>>>>>>>>>>>
42255>>>>>>>>>>>        
42255>>>>>>>>>>>        //  Encode binary hash to Base64
42255>>>>>>>>>>>        Move (Base64Encode(AddressOf(ucBinary), SizeOfArray(ucBinary))) to pBase64
42256>>>>>>>>>>>        Move (PointerToString(pBase64)) to sBase64
42257>>>>>>>>>>>        Move (Free(pBase64)) to iVoid
42258>>>>>>>>>>>        
42258>>>>>>>>>>>        Function_Return sBase64
42259>>>>>>>>>>>    End_Function
42260>>>>>>>>>>>    
42260>>>>>>>>>>>    
42260>>>>>>>>>>>    // Decrypts the unreadable hash generated by EncryptKey into a readable string.
42260>>>>>>>>>>>    //
42260>>>>>>>>>>>    // Params:
42260>>>>>>>>>>>    //   sBase64EncryptedPassword       Base64 Encrypted password
42260>>>>>>>>>>>    // Returns:
42260>>>>>>>>>>>    //   Readable plain text password
42260>>>>>>>>>>>    Function DecryptPassword String sBase64EncryptedPassword Returns String
42262>>>>>>>>>>>        String sEncryptPassword
42262>>>>>>>>>>>        UChar[] ucBinary ucPlain
42264>>>>>>>>>>>        Boolean bIsHex
42264>>>>>>>>>>>        Integer iLen iVoid
42264>>>>>>>>>>>        Pointer pBinary
42264>>>>>>>>>>>        
42264>>>>>>>>>>>        If (sBase64EncryptedPassword <> "") Begin
42266>>>>>>>>>>>            //  Decode from Base64
42266>>>>>>>>>>>            Move (Base64Decode(AddressOf(sBase64EncryptedPassword), &iLen)) to pBinary
42267>>>>>>>>>>>            
42267>>>>>>>>>>>            Move (ResizeArray(ucBinary, iLen, 0)) to ucBinary
42268>>>>>>>>>>>            Move (MemCopy(AddressOf(ucBinary), pBinary, iLen)) to iVoid
42269>>>>>>>>>>>                        
42269>>>>>>>>>>>            Move (Free(pBinary)) to iVoid
42270>>>>>>>>>>>            
42270>>>>>>>>>>>            //  Encrypted binary hash to string
42270>>>>>>>>>>>            Get GetEncryptionPassword to sEncryptPassword
42271>>>>>>>>>>>            Get Decrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) ucBinary to ucPlain
42272>>>>>>>>>>>        End
42272>>>>>>>>>>>>
42272>>>>>>>>>>>        
42272>>>>>>>>>>>        Function_Return (UCharArrayToString(ucPlain))
42273>>>>>>>>>>>    End_Function
42274>>>>>>>>>>>End_Class
42275>>>>>>>>>
42275>>>>>>>>>Class cSQLConnectionIniFile is a cIniFile
42276>>>>>>>>>    Procedure Construct_Object
42278>>>>>>>>>        Forward Send Construct_Object
42280>>>>>>>>>
42280>>>>>>>>>        Property String Private_psIniFilePath
42281>>>>>>>>>        Property String Private_psIniFileName CS_SQLIniFileName
42282>>>>>>>>>        Property String psIniSectionName (CS_SQLIniSectionName + "1")
42283>>>>>>>>>
42283>>>>>>>>>        Property Boolean pbDFConnId False
42284>>>>>>>>>
42284>>>>>>>>>        // *** You really want to change this value! ***
42284>>>>>>>>>        // It is used when encrypting/decrypting passwords.
42284>>>>>>>>>        Property String psHashString "zx!2139(LI0+?ips7433"
42285>>>>>>>>>
42285>>>>>>>>>    End_Procedure
42286>>>>>>>>>
42286>>>>>>>>>    Procedure End_Construct_Object
42288>>>>>>>>>        Forward Send End_Construct_Object
42290>>>>>>>>>    End_Procedure
42291>>>>>>>>>
42291>>>>>>>>>    Procedure Set psIniFilePath String sPath
42293>>>>>>>>>        String sIniFile
42293>>>>>>>>>        Get vFolderFormat sPath to sPath
42294>>>>>>>>>        Set private_psIniFilePath to sPath
42295>>>>>>>>>        Get psIniFileName to sIniFile
42296>>>>>>>>>        Set psFileName to (sPath + sIniFile)
42297>>>>>>>>>    End_Procedure
42298>>>>>>>>>
42298>>>>>>>>>    Function psIniFilePath Returns String
42300>>>>>>>>>        Function_Return (private_psIniFilePath(Self))
42301>>>>>>>>>    End_Function
42302>>>>>>>>>
42302>>>>>>>>>    Procedure Set psIniFileName String sFileName
42304>>>>>>>>>        String sPath
42304>>>>>>>>>        Get psIniFilePath to sPath
42305>>>>>>>>>        Set psFileName to (sPath + sFileName)
42306>>>>>>>>>        Set private_psIniFileName to sFileName
42307>>>>>>>>>    End_Procedure
42308>>>>>>>>>
42308>>>>>>>>>    Function psIniFileName Returns String
42310>>>>>>>>>        Function_Return (private_psIniFileName(Self))
42311>>>>>>>>>    End_Function
42312>>>>>>>>>
42312>>>>>>>>>    // *** Generalized messages to Get & Set values of the ini file.
42312>>>>>>>>>    // Sets a value in the program's ini file (write)
42312>>>>>>>>>    // Pass a section name, the value name parameter and the value itself to be written.
42312>>>>>>>>>    Procedure Set IniFileValue String sSection String sValueName String sValue
42314>>>>>>>>>        String sIniFile sPath
42314>>>>>>>>>
42314>>>>>>>>>        Get psIniFilePath to sPath
42315>>>>>>>>>        Get psIniFileName to sIniFile
42316>>>>>>>>>        Move (sPath + sIniFile) to sIniFile
42317>>>>>>>>>        Set psFileName to sIniFile
42318>>>>>>>>>        Send WriteString sSection sValueName sValue
42319>>>>>>>>>    End_Procedure
42320>>>>>>>>>
42320>>>>>>>>>    // Get a value from program's ini-file (read)
42320>>>>>>>>>    // Pass a section name and the name of the value parameter & a default value.
42320>>>>>>>>>    // Returns the value
42320>>>>>>>>>    Function IniFileValue String sSection String sValueName String sDefaultValue Returns String
42322>>>>>>>>>        String sValue sIniFile sPath
42322>>>>>>>>>
42322>>>>>>>>>        Get psIniFilePath to sPath
42323>>>>>>>>>        Get psIniFileName to sIniFile
42324>>>>>>>>>        Move (sPath + sIniFile) to sIniFile
42325>>>>>>>>>        Set psFileName to sIniFile
42326>>>>>>>>>        Get ReadString sSection sValueName sDefaultValue to sValue
42327>>>>>>>>>
42327>>>>>>>>>        Function_Return sValue
42328>>>>>>>>>    End_Function
42329>>>>>>>>>
42329>>>>>>>>>    // Sort function that first sorts on bEnabled & then on the connection string.
42329>>>>>>>>>    Function SortActiveFirst tSQLConnection SQLConnectionRow1 tSQLConnection SQLConnectionRow2 Returns Integer
42331>>>>>>>>>        If (SQLConnectionRow1.bEnabled > SQLConnectionRow2.bEnabled) ;            Function_Return (LT)
42334>>>>>>>>>        If (SQLConnectionRow1.bEnabled < SQLConnectionRow2.bEnabled) ;            Function_Return (GT)
42337>>>>>>>>>
42337>>>>>>>>>        If (SQLConnectionRow1.sConnectionID < SQLConnectionRow2.sConnectionID) ;            Function_Return (LT)
42340>>>>>>>>>        If (SQLConnectionRow1.sConnectionID > SQLConnectionRow2.sConnectionID) ;            Function_Return (GT)
42343>>>>>>>>>
42343>>>>>>>>>        If (SQLConnectionRow1.iDbType < SQLConnectionRow2.iDbType) ;            Function_Return (LT)
42346>>>>>>>>>        If (SQLConnectionRow1.iDbType > SQLConnectionRow2.iDbType) ;            Function_Return (GT)
42349>>>>>>>>>
42349>>>>>>>>>        If (SQLConnectionRow1.sServer < SQLConnectionRow2.sServer) ;            Function_Return (LT)
42352>>>>>>>>>        If (SQLConnectionRow1.sServer > SQLConnectionRow2.sServer) ;            Function_Return (GT)
42355>>>>>>>>>
42355>>>>>>>>>        If (SQLConnectionRow1.sDatabase < SQLConnectionRow2.sDatabase) ;            Function_Return (LT)
42358>>>>>>>>>        If (SQLConnectionRow1.sDatabase > SQLConnectionRow2.sDatabase) ;            Function_Return (GT)
42361>>>>>>>>>
42361>>>>>>>>>        If (SQLConnectionRow1.sDriverID < SQLConnectionRow2.sDriverID) ;            Function_Return (LT)
42364>>>>>>>>>        If (SQLConnectionRow1.sDriverID > SQLConnectionRow2.sDriverID) ;            Function_Return (GT)
42367>>>>>>>>>
42367>>>>>>>>>        If (SQLConnectionRow1.sConnectionString < SQLConnectionRow2.sConnectionString) ;            Function_Return (LT)
42370>>>>>>>>>        If (SQLConnectionRow1.sConnectionString > SQLConnectionRow2.sConnectionString) ;            Function_Return (GT)
42373>>>>>>>>>
42373>>>>>>>>>        Function_Return (EQ)
42374>>>>>>>>>    End_Function
42375>>>>>>>>>
42375>>>>>>>>>    Function SQLIniFileNumberOfConnections Returns Integer
42377>>>>>>>>>        Handle hoSections
42377>>>>>>>>>        Integer iItems
42377>>>>>>>>>
42377>>>>>>>>>        Send ReadSections hoSections
42378>>>>>>>>>        Move (Item_Count(hoSections)) to iItems
42379>>>>>>>>>        Function_Return iItems
42380>>>>>>>>>    End_Function
42381>>>>>>>>>
42381>>>>>>>>>    // The normal connection string looks something like this;
42381>>>>>>>>>    // "SERVER=.\SQLEXPRESS; DATABASE=OrderEntry; TRUSTED_CONNECTION=Yes; ,0"
42381>>>>>>>>>    // ...but the full connection string looks like this;
42381>>>>>>>>>    // "DFConnectionId OrderEntry, SERVER=.\SQLEXPRESS; DATABASE=OrderEntry; TRUSTED_CONNECTION=Yes; ,0"
42381>>>>>>>>>//    Function SQLIniFileAddConnection String sFullConnectionString Returns Boolean
42381>>>>>>>>>//        String sSection
42381>>>>>>>>>//        Integer iCount
42381>>>>>>>>>//
42381>>>>>>>>>//        Move False to Err
42381>>>>>>>>>//        Get psIniSectionName to sSection
42381>>>>>>>>>//        Get SQLIniFileNumberOfConnections to iCount
42381>>>>>>>>>//        Increment iCount
42381>>>>>>>>>//        Set IniFileValue sSection (CS_SQLIniSectionName + String(iCount)) to sFullConnectionString
42381>>>>>>>>>//
42381>>>>>>>>>//        Function_Return (Err = False)
42381>>>>>>>>>//    End_Function
42381>>>>>>>>>
42381>>>>>>>>>    Function SQLIniFileDeleteAllConnections Returns Boolean
42383>>>>>>>>>        Integer iCount
42383>>>>>>>>>        Boolean bExists
42383>>>>>>>>>        String sSection
42383>>>>>>>>>
42383>>>>>>>>>        Move False to Err
42384>>>>>>>>>        Move 1 to iCount
42385>>>>>>>>>        Get psIniSectionName to sSection
42386>>>>>>>>>        Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists
42387>>>>>>>>>        While (bExists = True)
42391>>>>>>>>>            Send DeleteSection (CS_SQLIniSectionName + String(iCount))
42392>>>>>>>>>            Increment iCount
42393>>>>>>>>>            Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists
42394>>>>>>>>>        Loop
42395>>>>>>>>>>
42395>>>>>>>>>        Function_Return (Err = False)
42396>>>>>>>>>    End_Function
42397>>>>>>>>>
42397>>>>>>>>>    Function SQLIniFileDeleteConnection Integer iItem Returns Boolean
42399>>>>>>>>>        Integer iCount
42399>>>>>>>>>        String sSection
42399>>>>>>>>>        Boolean bExists
42399>>>>>>>>>
42399>>>>>>>>>        Move False to Err
42400>>>>>>>>>        Move 1 to iCount
42401>>>>>>>>>        Get psIniSectionName to sSection
42402>>>>>>>>>        Get KeyExists sSection CS_SQLIniConnectionIdKeyword to bExists
42403>>>>>>>>>        While (bExists = True)
42407>>>>>>>>>            If (iCount = iItem) Begin
42409>>>>>>>>>                Send DeleteSection sSection
42410>>>>>>>>>//                Set IniFileValue sSection (CS_SQLIniSectionName + String(iCount)) to ""
42410>>>>>>>>>                Move 9999 to iCount // Just some ridiculously high number to get out of the loop as we're done.
42411>>>>>>>>>            End
42411>>>>>>>>>>
42411>>>>>>>>>            Increment iCount
42412>>>>>>>>>            Get KeyExists sSection (CS_SQLIniSectionName + String(iCount)) to bExists
42413>>>>>>>>>        Loop
42414>>>>>>>>>>
42414>>>>>>>>>
42414>>>>>>>>>        Function_Return (Err = False)
42415>>>>>>>>>    End_Function
42416>>>>>>>>>
42416>>>>>>>>>    // Returns all connection details for the passed Connection ID as a tSQLConnection
42416>>>>>>>>>    // If it fails the returned struct member SQLConnection.bError = True.
42416>>>>>>>>>    Function SQLIniFileConnectionID String sConnectionID Returns tSQLConnection
42418>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42418>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42419>>>>>>>>>        tSQLConnection   SQLConnection
42419>>>>>>>>>        tSQLConnection   SQLConnection
42419>>>>>>>>>        Integer iIndex
42419>>>>>>>>>
42419>>>>>>>>>        Get SQLIniFileConnectionIDIndex sConnectionID to iIndex
42420>>>>>>>>>        If (iIndex = -1) Begin
42422>>>>>>>>>            Move True to SQLConnection.bError
42423>>>>>>>>>            Function_Return SQLConnection
42424>>>>>>>>>        End
42424>>>>>>>>>>
42424>>>>>>>>>
42424>>>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42425>>>>>>>>>        Move SQLConnectionsArray[iIndex -1] to SQLConnection
42426>>>>>>>>>
42426>>>>>>>>>        Function_Return SQLConnection
42427>>>>>>>>>    End_Function
42428>>>>>>>>>
42428>>>>>>>>>    // Returns -1 if the passed connection ID was not found, else the item number.
42428>>>>>>>>>    Function SQLIniFileConnectionIDIndex String sConnectionID Returns Integer
42430>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42430>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42431>>>>>>>>>        Integer iRetval iCount iSize
42431>>>>>>>>>        String sValue
42431>>>>>>>>>        Boolean bExists
42431>>>>>>>>>
42431>>>>>>>>>        Move -1 to iRetval
42432>>>>>>>>>
42432>>>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42433>>>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42434>>>>>>>>>        Decrement iSize
42435>>>>>>>>>        For iCount from 0 to iSize
42441>>>>>>>>>>
42441>>>>>>>>>            Move SQLConnectionsArray[iCount].sConnectionID to sValue
42442>>>>>>>>>            Move (Uppercase(sValue) = Uppercase(sConnectionID)) to bExists
42443>>>>>>>>>            If (bExists) Begin
42445>>>>>>>>>                Move (iCount + 1) to iRetval // The [ConnectionX] keys are one-based (starts at 1) but the loop starts at zero.
42446>>>>>>>>>                Move iSize to iCount         // We're done!
42447>>>>>>>>>            End
42447>>>>>>>>>>
42447>>>>>>>>>        Loop
42448>>>>>>>>>>
42448>>>>>>>>>
42448>>>>>>>>>        Function_Return iRetval
42449>>>>>>>>>    End_Function
42450>>>>>>>>>
42450>>>>>>>>>    // Checks if the passed sConnectionID exists more than once in the passed struct array.
42450>>>>>>>>>    // Used to check that ConnectionID's are unique.
42450>>>>>>>>>    Function IsConnectionIDDuplicate String sConnectionID Returns Boolean
42452>>>>>>>>>        Integer iCount iSize iItems
42452>>>>>>>>>        String sValue
42452>>>>>>>>>        Boolean bExists
42452>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42452>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42453>>>>>>>>>
42453>>>>>>>>>        Move 0 to iItems
42454>>>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42455>>>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42456>>>>>>>>>        Decrement iSize
42457>>>>>>>>>        For iCount from 0 to iSize
42463>>>>>>>>>>
42463>>>>>>>>>            Move SQLConnectionsArray[iCount].sConnectionID to sValue
42464>>>>>>>>>            Move (sValue = sConnectionID) to bExists
42465>>>>>>>>>            If (bExists) Begin
42467>>>>>>>>>                Increment iItems
42468>>>>>>>>>            End
42468>>>>>>>>>>
42468>>>>>>>>>        Loop
42469>>>>>>>>>>
42469>>>>>>>>>
42469>>>>>>>>>        Function_Return (iItems > 1)
42470>>>>>>>>>    End_Function
42471>>>>>>>>>
42471>>>>>>>>>    // To update the SQLConnections.ini file with a new default Connection ID.
42471>>>>>>>>>    Function SQLIniFileSetDefaultConnection String sConnectionID Returns Boolean
42473>>>>>>>>>        Boolean bOK
42473>>>>>>>>>        Integer iSize iCount
42473>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42473>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42474>>>>>>>>>        tSQLConnection SQLConnection
42474>>>>>>>>>        tSQLConnection SQLConnection
42474>>>>>>>>>        String sConnectionString
42474>>>>>>>>>
42474>>>>>>>>>        Move False to Err
42475>>>>>>>>>        Get psConnectionString to sConnectionString
42476>>>>>>>>>
42476>>>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42477>>>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42478>>>>>>>>>        Decrement iSize
42479>>>>>>>>>        // Set all current connection to inactive.
42479>>>>>>>>>        For iCount from 0 to iSize
42485>>>>>>>>>>
42485>>>>>>>>>            Move False to SQLConnectionsArray[iCount].bEnabled
42486>>>>>>>>>        Loop
42487>>>>>>>>>>
42487>>>>>>>>>
42487>>>>>>>>>        Get SQLIniFileConnectionID sConnectionID to SQLConnection
42488>>>>>>>>>        Move True              to SQLConnection.bEnabled
42489>>>>>>>>>        Move sConnectionString to SQLConnection.sConnectionString
42490>>>>>>>>>        Move (InsertInArray(SQLConnectionsArray, 0, SQLConnection)) to SQLConnectionsArray
42491>>>>>>>>>        Get SQLIniFileWriteConnections SQLConnectionsArray to bOK
42492>>>>>>>>>
42492>>>>>>>>>        Function_Return (bOK = True)
42493>>>>>>>>>    End_Function
42494>>>>>>>>>
42494>>>>>>>>>    // Used for updating an existing connection with new data.
42494>>>>>>>>>    // Returns True if successful.
42494>>>>>>>>>    Function SQLIniFileUpdateConnection tSQLConnection SQLConnection Returns Boolean
42496>>>>>>>>>        Boolean bOK
42496>>>>>>>>>        Integer iItem iSize iCount
42496>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42496>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42497>>>>>>>>>
42497>>>>>>>>>        Move False to Err
42498>>>>>>>>>        Move -1 to iItem
42499>>>>>>>>>        Get SQLIniFileReadConnections to SQLConnectionsArray
42500>>>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42501>>>>>>>>>        Decrement iSize
42502>>>>>>>>>        // Set all current connection to inactive.
42502>>>>>>>>>        For iCount from 0 to iSize
42508>>>>>>>>>>
42508>>>>>>>>>            Move False to SQLConnectionsArray[iCount].bEnabled
42509>>>>>>>>>            If (SQLConnectionsArray[iCount].sConnectionID = SQLConnection.sConnectionID) Begin
42511>>>>>>>>>                Move iCount to iItem
42512>>>>>>>>>            End
42512>>>>>>>>>>
42512>>>>>>>>>        Loop
42513>>>>>>>>>>
42513>>>>>>>>>
42513>>>>>>>>>        If (iItem <> -1) Begin
42515>>>>>>>>>            Move True to SQLConnection.bEnabled
42516>>>>>>>>>            Move SQLConnection to SQLConnectionsArray[iItem]
42517>>>>>>>>>            Get SQLIniFileWriteConnections SQLConnectionsArray to bOK
42518>>>>>>>>>        End
42518>>>>>>>>>>
42518>>>>>>>>>
42518>>>>>>>>>        Function_Return (bOK = True)
42519>>>>>>>>>    End_Function
42520>>>>>>>>>
42520>>>>>>>>>    Function SQLIniFileReadConnections Returns tSQLConnection[]
42522>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42522>>>>>>>>>        tSQLConnection[] SQLConnectionsArray
42523>>>>>>>>>        String sSection sValue
42523>>>>>>>>>        Integer iCount
42523>>>>>>>>>        Boolean bExists
42523>>>>>>>>>
42523>>>>>>>>>        Get psIniSectionName to sSection
42524>>>>>>>>>        Get SectionExists sSection to bExists
42525>>>>>>>>>        If (bExists = False) Begin
42527>>>>>>>>>            Function_Return SQLConnectionsArray
42528>>>>>>>>>        End
42528>>>>>>>>>>
42528>>>>>>>>>        Get SectionExists CS_SQLIniConnectionSection to bExists
42529>>>>>>>>>        If (bExists = True) Begin
42531>>>>>>>>>            Error DFERR_PROGRAM "Sorry, the format for the SQLConnections.ini file has been changed and this file has the old format that is no longer valid and thus cannot be read. You need to re-enter your connection(s)."
42532>>>>>>>>>>
42532>>>>>>>>>        End
42532>>>>>>>>>>
42532>>>>>>>>>
42532>>>>>>>>>        Move 1 to iCount // The section name "[ConnectionXX]" starts with "1"
42533>>>>>>>>>        Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists
42534>>>>>>>>>
42534>>>>>>>>>        While (bExists = True)                 
42538>>>>>>>>>            // 2018-07-14 Change to allow disabling all connections in test environment.
42538>>>>>>>>>            // We always put the enabled/active connection at the top
42538>>>>>>>>>//            Move (iCount = 1) to bEnabled
42538>>>>>>>>>//            Move bEnabled to SQLConnectionsArray[iCount].bEnabled
42538>>>>>>>>>
42538>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniConnectionIdKeyword ""        to SQLConnectionsArray[iCount].sConnectionID
42539>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDriverKeyword       ""        to SQLConnectionsArray[iCount].sDriverID
42540>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDisabledKeyword     ""        to sValue
42541>>>>>>>>>            Move (If(Uppercase(sValue) = "YES", False, True))                                               to SQLConnectionsArray[iCount].bEnabled
42542>>>>>>>>>
42542>>>>>>>>>            // The iDbType might be missing from the ini-file. This is e.g. the case when a DAW Managed Connection "DFConnId.ini" file is read.
42542>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDbTypeKeyword       "99"      to sValue
42543>>>>>>>>>            If (sValue = "99") Begin
42545>>>>>>>>>                Get SqlUtilDbTypeFromDriver SQLConnectionsArray[iCount].sDriverID to sValue
42546>>>>>>>>>            End
42546>>>>>>>>>>
42546>>>>>>>>>            Move sValue                                                                                     to SQLConnectionsArray[iCount].iDbType
42547>>>>>>>>>
42547>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniConnectionKeyWord   ""        to SQLConnectionsArray[iCount].sConnectionString
42548>>>>>>>>>            Get ParseKeyWord SQLConnectionsArray[iCount].sConnectionString (CS_SQLIniServerKeyword + "=")   to SQLConnectionsArray[iCount].sServer
42549>>>>>>>>>            If (SQLConnectionsArray[iCount].sServer = "") Begin
42551>>>>>>>>>                Get ParseKeyWord SQLConnectionsArray[iCount].sConnectionString (CS_SQLIniFileDSNKeyword +"=") to SQLConnectionsArray[iCount].sServer
42552>>>>>>>>>            End
42552>>>>>>>>>>
42552>>>>>>>>>            If (SQLConnectionsArray[iCount].sServer = "") Begin
42554>>>>>>>>>                Get ParseKeyWord SQLConnectionsArray[iCount].sConnectionString (CS_SQLIniDSNKeyword +"=")   to SQLConnectionsArray[iCount].sServer
42555>>>>>>>>>            End
42555>>>>>>>>>>
42555>>>>>>>>>
42555>>>>>>>>>            Get ParseKeyWord SQLConnectionsArray[iCount].sConnectionString (CS_SQLIniDatabaseKeyword + "=") to SQLConnectionsArray[iCount].sDatabase
42556>>>>>>>>>
42556>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniTrustedKeyword      ""        to sValue
42557>>>>>>>>>            Move (If(Uppercase(sValue) = "YES", True, False))                                               to SQLConnectionsArray[iCount].bTrusted
42558>>>>>>>>>
42558>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniUIDKeyword          ""        to SQLConnectionsArray[iCount].sUserID
42559>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniDFPWDKeyword        ""        to sValue
42560>>>>>>>>>            If (pbDFConnId(Self) = False and sValue <> "") Begin
42562>>>>>>>>>                Get DecryptPassword sValue to sValue
42563>>>>>>>>>            End
42563>>>>>>>>>>
42563>>>>>>>>>            Move sValue                                                                                     to SQLConnectionsArray[iCount].sPassword
42564>>>>>>>>>
42564>>>>>>>>>            // Here we reconstruct the connection string to be complete with all params;
42564>>>>>>>>>            Get ConstructConnectionString SQLConnectionsArray[iCount].sDriverID SQLConnectionsArray[iCount].sServer SQLConnectionsArray[iCount].sDatabase ;                                          SQLConnectionsArray[iCount].bTrusted SQLConnectionsArray[iCount].sUserID SQLConnectionsArray[iCount].sPassword ;                                          to SQLConnectionsArray[iCount].sConnectionString
42565>>>>>>>>>
42565>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniSchemaKeyword          ""     to SQLConnectionsArray[iCount].sSchema
42566>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniBaseTableSpaceKeyword  ""     to SQLConnectionsArray[iCount].sBaseTableSpace
42567>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniLongTableSpaceKeyword  ""     to SQLConnectionsArray[iCount].sLongTableSpace
42568>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniIndexTableSpaceKeyword ""     to SQLConnectionsArray[iCount].sIndexTableSpace
42569>>>>>>>>>            Get IniFileValue (CS_SQLIniSectionName + String(iCount)) CS_SQLIniSilentLoginKeyword     ""     to sValue
42570>>>>>>>>>            Move (If(Uppercase(sValue) = "YES", True, False))                                               to SQLConnectionsArray[iCount].bSilentLogin
42571>>>>>>>>>
42571>>>>>>>>>            Increment iCount
42572>>>>>>>>>            Get SectionExists (CS_SQLIniSectionName + String(iCount)) to bExists
42573>>>>>>>>>        Loop
42574>>>>>>>>>>
42574>>>>>>>>>
42574>>>>>>>>>        // Lastly, we remove the very first array item as it is empty (we started at 1 because that is the first [Connection#])
42574>>>>>>>>>        If (SizeOfArray(SQLConnectionsArray) > 0) Begin
42576>>>>>>>>>            Move (RemoveFromArray(SQLConnectionsArray, 0)) to SQLConnectionsArray
42577>>>>>>>>>        End
42577>>>>>>>>>>
42577>>>>>>>>>
42577>>>>>>>>>        Function_Return SQLConnectionsArray
42578>>>>>>>>>    End_Function
42579>>>>>>>>>
42579>>>>>>>>>    Function SQLIniFileWriteConnections tSQLConnection[] SQLConnectionsArray Returns Boolean
42581>>>>>>>>>        Integer iCount iSize
42581>>>>>>>>>        Boolean bOK
42581>>>>>>>>>        String sSection sValue
42581>>>>>>>>>
42581>>>>>>>>>        // First we need to _remove_ all current connections from the ini-file.
42581>>>>>>>>>        Move 0 to iCount
42582>>>>>>>>>        Get SQLIniFileDeleteAllConnections to bOK
42583>>>>>>>>>        If (bOK = False) Begin
42585>>>>>>>>>            Function_Return False
42586>>>>>>>>>        End
42586>>>>>>>>>>
42586>>>>>>>>>
42586>>>>>>>>>        Move False to Err
42587>>>>>>>>>        Get psIniSectionName to sSection
42588>>>>>>>>>        // Sorting will make sure we have the active connection record as the first connection item in the ini-file.
42588>>>>>>>>>        Move (SortArray(SQLConnectionsArray, Self, (RefFunc(SortActiveFirst)))) to SQLConnectionsArray
42589>>>>>>>>>        Move (SizeOfArray(SQLConnectionsArray)) to iSize
42590>>>>>>>>>        Decrement iSize
42591>>>>>>>>>
42591>>>>>>>>>        For iCount from 0 to iSize
42597>>>>>>>>>>
42597>>>>>>>>>            // DF 19 compatible settings:
42597>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniConnectionIdKeyword   to SQLConnectionsArray[iCount].sConnectionID
42598>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniDriverKeyword         to SQLConnectionsArray[iCount].sDriverID
42599>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniDisabledKeyword       to (If(SQLConnectionsArray[iCount].bEnabled = 0, "Yes", "No"))
42600>>>>>>>>>            
42600>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniUIDKeyword            to SQLConnectionsArray[iCount].sUserID
42601>>>>>>>>>
42601>>>>>>>>>            Move SQLConnectionsArray[iCount].sPassword to sValue
42602>>>>>>>>>            If (pbDFConnId(Self) = False and sValue <> "") Begin
42604>>>>>>>>>                Get EncryptPassword sValue to sValue
42605>>>>>>>>>            End
42605>>>>>>>>>>
42605>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniDFPWDKeyword          to sValue
42606>>>>>>>>>
42606>>>>>>>>>            If (SQLConnectionsArray[iCount].bTrusted = True) Begin
42608>>>>>>>>>                Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniTrustedKeyword    to CS_SQLIniConnectionYes
42609>>>>>>>>>            End
42609>>>>>>>>>>
42609>>>>>>>>>
42609>>>>>>>>>            Get ConstructShortConnectionString SQLConnectionsArray[iCount].sDriverID SQLConnectionsArray[iCount].sServer SQLConnectionsArray[iCount].sDatabase ;                                            to SQLConnectionsArray[iCount].sConnectionString
42610>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniConnectionKeyWord     to SQLConnectionsArray[iCount].sConnectionString
42611>>>>>>>>>
42611>>>>>>>>>            // The Database Update Framework extended settings:
42611>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniDbTypeKeyword          to SQLConnectionsArray[iCount].iDbType
42612>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniSchemaKeyword          to SQLConnectionsArray[iCount].sSchema
42613>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniBaseTableSpaceKeyword  to SQLConnectionsArray[iCount].sBaseTableSpace
42614>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniLongTableSpaceKeyword  to SQLConnectionsArray[iCount].sLongTableSpace
42615>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniIndexTableSpaceKeyword to SQLConnectionsArray[iCount].sIndexTableSpace
42616>>>>>>>>>            Set IniFileValue (CS_SQLIniSectionName + String(iCount + 1)) CS_SQLIniSilentLoginKeyword     to (If(SQLConnectionsArray[iCount].bSilentLogin = 1, "Yes", "No"))
42617>>>>>>>>>        Loop
42618>>>>>>>>>>
42618>>>>>>>>>
42618>>>>>>>>>        Function_Return (bOK and Err = False)
42619>>>>>>>>>    End_Function
42620>>>>>>>>>
42620>>>>>>>>>    // *** DbType conversion routines - Converts between string/integer and driver ID values ***
42620>>>>>>>>>    //
42620>>>>>>>>>    // SQL utility function that returns a database type (string) constant
42620>>>>>>>>>    // corresponding to the passed iDbType.
42620>>>>>>>>>    Function SqlUtilDbTypeToString Integer iDbType Returns String
42622>>>>>>>>>        String sRetval
42622>>>>>>>>>        If (iDbType = EN_dbTypeMSSQL) Begin
42624>>>>>>>>>            Move CS_dbTypeMSSQL to sRetval
42625>>>>>>>>>        End
42625>>>>>>>>>>
42625>>>>>>>>>        If (iDbType = EN_dbTypeMySQL) Begin
42627>>>>>>>>>            Move CS_dbTypeMySQL to sRetval
42628>>>>>>>>>        End
42628>>>>>>>>>>
42628>>>>>>>>>        If (iDbType = EN_dbTypeOracle) Begin
42630>>>>>>>>>            Move CS_dbTypeOracle to sRetval
42631>>>>>>>>>        End
42631>>>>>>>>>>
42631>>>>>>>>>        If (iDbType = EN_dbTypeDB2) Begin
42633>>>>>>>>>            Move CS_dbTypeDB2 to sRetval
42634>>>>>>>>>        End
42634>>>>>>>>>>
42634>>>>>>>>>        If (iDbType = EN_dbTypePostgre) Begin
42636>>>>>>>>>            Move CS_dbTypePostgre to sRetval
42637>>>>>>>>>        End
42637>>>>>>>>>>
42637>>>>>>>>>        If (iDbType = EN_DbTypePervasive) Begin
42639>>>>>>>>>            Move CS_DbTypePervasive to sRetval
42640>>>>>>>>>        End
42640>>>>>>>>>>
42640>>>>>>>>>        Function_Return sRetval
42641>>>>>>>>>    End_Function
42642>>>>>>>>>
42642>>>>>>>>>    // SQL utility function that returns a database type constant (integer)
42642>>>>>>>>>    // corresponding to the passed sDbType string constant.
42642>>>>>>>>>    Function SqlUtilDbTypeToInteger String sDbType  Returns Integer
42644>>>>>>>>>        Integer iRetval
42644>>>>>>>>>        If (sDbType = CS_dbTypeMSSQL) Begin
42646>>>>>>>>>            Move EN_dbTypeMSSQL to iRetval
42647>>>>>>>>>        End
42647>>>>>>>>>>
42647>>>>>>>>>        If (sDbType = CS_dbTypeMySQL) Begin
42649>>>>>>>>>            Move EN_dbTypeMySQL to iRetval
42650>>>>>>>>>        End
42650>>>>>>>>>>
42650>>>>>>>>>        If (sDbType = CS_dbTypeOracle) Begin
42652>>>>>>>>>            Move EN_dbTypeOracle to iRetval
42653>>>>>>>>>        End
42653>>>>>>>>>>
42653>>>>>>>>>        If (sDbType = CS_dbTypeDB2) Begin
42655>>>>>>>>>            Move EN_dbTypeDB2 to iRetval
42656>>>>>>>>>        End
42656>>>>>>>>>>
42656>>>>>>>>>        If (sDbType = CS_dbTypePostgre) Begin
42658>>>>>>>>>            Move EN_dbTypePostgre to iRetval
42659>>>>>>>>>        End
42659>>>>>>>>>>
42659>>>>>>>>>        If (sDbType = CS_DbTypePervasive) Begin
42661>>>>>>>>>            Move EN_DbTypePervasive to iRetval
42662>>>>>>>>>        End
42662>>>>>>>>>>
42662>>>>>>>>>        Function_Return iRetval
42663>>>>>>>>>    End_Function
42664>>>>>>>>>
42664>>>>>>>>>    // Pass an integer DbType and function returns the database type integer as a string value.
42664>>>>>>>>>    // Used e.g. when reading a connection ini-file to display the database type in
42664>>>>>>>>>    // the SQL Connection program's grid.
42664>>>>>>>>>    Function SqlUtilDbTypeIntegerToStringConstant Integer iDbType Returns String
42666>>>>>>>>>        String sRetval
42666>>>>>>>>>        If (iDbType = EN_dbTypeMSSQL) Begin
42668>>>>>>>>>            Move "EN_dbTypeMSSQL" to sRetval
42669>>>>>>>>>        End
42669>>>>>>>>>>
42669>>>>>>>>>        If (iDbType = EN_dbTypeMySQL) Begin
42671>>>>>>>>>            Move "EN_dbTypeMySQL" to sRetval
42672>>>>>>>>>        End
42672>>>>>>>>>>
42672>>>>>>>>>        If (iDbType = EN_dbTypeOracle) Begin
42674>>>>>>>>>            Move "EN_dbTypeOracle" to sRetval
42675>>>>>>>>>        End
42675>>>>>>>>>>
42675>>>>>>>>>        If (iDbType = EN_dbTypeDB2) Begin
42677>>>>>>>>>            Move "EN_dbTypeDB2" to sRetval
42678>>>>>>>>>        End
42678>>>>>>>>>>
42678>>>>>>>>>        If (iDbType = EN_dbTypePostgre) Begin
42680>>>>>>>>>            Move "EN_dbTypePostgre" to sRetval
42681>>>>>>>>>        End
42681>>>>>>>>>>
42681>>>>>>>>>        If (iDbType = EN_DbTypePervasive) Begin
42683>>>>>>>>>            Move "EN_dbTypePervasive" to sRetval
42684>>>>>>>>>        End
42684>>>>>>>>>>
42684>>>>>>>>>        Function_Return sRetval
42685>>>>>>>>>    End_Function
42686>>>>>>>>>
42686>>>>>>>>>    // Pass a driver id and the function will return
42686>>>>>>>>>    // a dbType as an integer. Obviously for the ODBC_DRV this doesn't
42686>>>>>>>>>    // quite work and always returns "MS SQL Server"
42686>>>>>>>>>    Function SqlUtilDbTypeFromDriver String sDriverID Returns Integer
42688>>>>>>>>>        Integer iRetval
42688>>>>>>>>>        If (sDriverID = MSSQLDRV_ID) Begin
42690>>>>>>>>>            Move EN_dbTypeMSSQL to iRetval
42691>>>>>>>>>        End
42691>>>>>>>>>>
42691>>>>>>>>>        If (sDriverID = ODBC_DRV_ID) Begin
42693>>>>>>>>>            Move EN_dbTypeMSSQL to iRetval
42694>>>>>>>>>        End
42694>>>>>>>>>>
42694>>>>>>>>>        If (sDriverID = DB2_DRV_ID) Begin
42696>>>>>>>>>            Move EN_dbTypeDB2 to iRetval
42697>>>>>>>>>        End
42697>>>>>>>>>>
42697>>>>>>>>>        If (sDriverID = DFBTRDRV_ID) Begin
42699>>>>>>>>>            Move EN_DbTypePervasive to iRetval
42700>>>>>>>>>        End
42700>>>>>>>>>>
42700>>>>>>>>>        Function_Return iRetval
42701>>>>>>>>>    End_Function
42702>>>>>>>>>
Including file: ParseKeyWord.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ParseKeyWord.pkg)
42702>>>>>>>>>>
42702>>>>>>>>>>Function ParseKeyWord String sConnect String sKeyWord Returns String
42704>>>>>>>>>>    Integer iStart iEnd
42704>>>>>>>>>>    String sRetval
42704>>>>>>>>>>
42704>>>>>>>>>>    Move (Trim(sConnect)) to sConnect
42705>>>>>>>>>>    Move (Pos(Uppercase(sKeyWord), Uppercase(sConnect)))  to iStart
42706>>>>>>>>>>    If (iStart = 0) Begin
42708>>>>>>>>>>        Function_Return ""
42709>>>>>>>>>>    End
42709>>>>>>>>>>>
42709>>>>>>>>>>    Move (Left(sConnect, (iStart -1 + Length(sKeyWord)))) to sRetval
42710>>>>>>>>>>    Move (Replace(sRetval, sConnect, "")) to sRetval
42711>>>>>>>>>>    If (sKeyWord = Uppercase(CS_SQLConnectionIDText)) Begin
42713>>>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
42714>>>>>>>>>>    End
42714>>>>>>>>>>>
42714>>>>>>>>>>    Else Begin
42715>>>>>>>>>>        Move (Pos(";", sRetval))          to iEnd
42716>>>>>>>>>>    End
42716>>>>>>>>>>>
42716>>>>>>>>>>    If (iEnd = 0 and (sRetval contains ",")) Begin
42718>>>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
42719>>>>>>>>>>        Decrement iEnd
42720>>>>>>>>>>    End
42720>>>>>>>>>>>
42720>>>>>>>>>>    If (iEnd <> 0) Begin
42722>>>>>>>>>>        Move (Left(sRetval, (iEnd -1)))   to sRetval
42723>>>>>>>>>>    End
42723>>>>>>>>>>>
42723>>>>>>>>>>    Move (Replace("=", sRetval, ""))      to sRetval
42724>>>>>>>>>>
42724>>>>>>>>>>    Function_Return (Trim(sRetval))
42725>>>>>>>>>>End_Function
42726>>>>>>>>>>
42726>>>>>>>>>>
42726>>>>>>>>>
42726>>>>>>>>>    Function ConstructConnectionString String sDriverID String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
42728>>>>>>>>>        String sConnect
42728>>>>>>>>>        Handle hoDriver
42728>>>>>>>>>
42728>>>>>>>>>        Get Create (RefClass(cDbUpdateDatabaseDriver)) to hoDriver
42729>>>>>>>>>        Set psDriverID of hoDriver to sDriverID
42730>>>>>>>>>        Get ConstructConnectionString of hoDriver sServer sDatabase bTrusted sUserID sPassword to sConnect
42731>>>>>>>>>        Send Destroy of hoDriver
42732>>>>>>>>>
42732>>>>>>>>>        Function_Return sConnect
42733>>>>>>>>>    End_Function
42734>>>>>>>>>
42734>>>>>>>>>    // Short connection string used when writing to ini-file. This is to be compatible with DF19 DFConnId.ini files that uses this short format.
42734>>>>>>>>>    Function ConstructShortConnectionString String sDriverID String sServer String sDatabase Returns String
42736>>>>>>>>>        String sConnect
42736>>>>>>>>>
42736>>>>>>>>>        Case Begin
42736>>>>>>>>>            Case (sDriverID = MSSQLDRV_ID)
42738>>>>>>>>>                Move (sConnect * CS_SQLIniServerKeyword + "=" + sServer) to sConnect
42739>>>>>>>>>                If (sDatabase <> "") Begin
42741>>>>>>>>>                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
42742>>>>>>>>>                End
42742>>>>>>>>>>
42742>>>>>>>>>                Case Break
42743>>>>>>>>>
42743>>>>>>>>>            Case (sDriverID = ODBC_DRV_ID)
42746>>>>>>>>>                If (Uppercase(sServer) contains ".DSN") Begin
42748>>>>>>>>>                    Move (CS_SQLIniFileDSNKeyword + "=" + sServer) to sConnect
42749>>>>>>>>>                End
42749>>>>>>>>>>
42749>>>>>>>>>                Else If (not(Uppercase(sServer) contains "DSN")) Begin
42752>>>>>>>>>                    Move (CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
42753>>>>>>>>>                End
42753>>>>>>>>>>
42753>>>>>>>>>
42753>>>>>>>>>                If (sDatabase <> "") Begin
42755>>>>>>>>>                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
42756>>>>>>>>>                End
42756>>>>>>>>>>
42756>>>>>>>>>                Case Break
42757>>>>>>>>>
42757>>>>>>>>>            Case (sDriverID = DB2_DRV_ID)
42760>>>>>>>>>                Move (sConnect * CS_SQLIniDSNKeyword + "=" + sServer) to sConnect
42761>>>>>>>>>                If (sDatabase <> "") Begin
42763>>>>>>>>>                    Move (sConnect * ";" + CS_SQLIniDatabaseKeyword + "=" + sDatabase) to sConnect
42764>>>>>>>>>                End
42764>>>>>>>>>>
42764>>>>>>>>>                Case Break
42765>>>>>>>>>
42765>>>>>>>>>            Case (sDriverID = DATAFLEX_ID)    // Dummy stub.
42768>>>>>>>>>                Break
42769>>>>>>>>>
42769>>>>>>>>>            Case Else
42769>>>>>>>>>                Move "" to sConnect
42770>>>>>>>>>        Case End
42770>>>>>>>>>
42770>>>>>>>>>        Function_Return sConnect
42771>>>>>>>>>    End_Function
42772>>>>>>>>>
42772>>>>>>>>>    // Use Base64
42772>>>>>>>>>    Function EncryptPassword String sPassword Returns String
42774>>>>>>>>>        String sRetval
42774>>>>>>>>>        Handle hoLoginEncryption
42774>>>>>>>>>
42774>>>>>>>>>        Get Create (RefClass(cLoginEncryption)) to hoLoginEncryption
42775>>>>>>>>>        Set psEncryptPassword of hoLoginEncryption to (psHashString(Self))
42776>>>>>>>>>        Get EncryptPassword of hoLoginEncryption sPassword to sRetval
42777>>>>>>>>>        Send Destroy of hoLoginEncryption
42778>>>>>>>>>          
42778>>>>>>>>>        Function_Return sRetval
42779>>>>>>>>>    End_Function
42780>>>>>>>>>
42780>>>>>>>>>    Function DecryptPassword String sPassword Returns String
42782>>>>>>>>>        String sRetval
42782>>>>>>>>>        Handle hoLoginEncryption
42782>>>>>>>>>
42782>>>>>>>>>        Get Create (RefClass(cLoginEncryption)) to hoLoginEncryption
42783>>>>>>>>>        Set psEncryptPassword of hoLoginEncryption to (psHashString(Self))
42784>>>>>>>>>        Get DecryptPassword of hoLoginEncryption sPassword to sRetval
42785>>>>>>>>>        Send Destroy of hoLoginEncryption
42786>>>>>>>>>
42786>>>>>>>>>        Function_Return sRetval
42787>>>>>>>>>    End_Function
42788>>>>>>>>>
42788>>>>>>>>>    // Returns the full path of the Application (no trailing "\")
42788>>>>>>>>>    Function ApplicationPath Returns String
42790>>>>>>>>>        String sApplicationFileName sPath
42790>>>>>>>>>        Integer iNumChars iRetval
42790>>>>>>>>>
42790>>>>>>>>>        Move (Repeat(Character(0), 1024))    to sApplicationFileName
42791>>>>>>>>>        Move (GetModuleFileName(0, AddressOf(sApplicationFileName), 1024)) to iNumChars
42792>>>>>>>>>        Move (CString(sApplicationFileName)) to sApplicationFileName
42793>>>>>>>>>        Move (PathRemoveFileSpec(AddressOf(sApplicationFileName))) to iRetval
42794>>>>>>>>>        Move (CString(sApplicationFileName)) to sPath
42795>>>>>>>>>
42795>>>>>>>>>        Function_Return sPath
42796>>>>>>>>>    End_Function
42797>>>>>>>>>
42797>>>>>>>>>    // Pass a filename including the extension. The return value
42797>>>>>>>>>    // will be the path of of the first found "sSearchFileName in the workspace.
42797>>>>>>>>>    // If not found in the workspace it will be search "globally" by the Get_File_Path command.
42797>>>>>>>>>    Function SearchLocallyThenGloballyForFile String sSearchFileName Returns String
42799>>>>>>>>>        Boolean bExists
42799>>>>>>>>>        Handle hoPaths hoIniFile
42799>>>>>>>>>        String[] asWorkSpaceFiles
42800>>>>>>>>>        String sProgramsPath sSection sFileName sRelativePath sRelativePaths sPath sDirSep sProgramsDir
42800>>>>>>>>>        Integer iSize iCount iPath iNoOfPaths iCountPath
42800>>>>>>>>>        
42800>>>>>>>>>        Get psIniFilePath to sProgramsPath
42801>>>>>>>>>        Get vFolderFormat sProgramsPath to sProgramsPath 
42802>>>>>>>>>        Move (Lowercase(sSearchFileName)) to sSearchFileName
42803>>>>>>>>>        Get vFilePathExists (sProgramsPath + sSearchFileName) to bExists   
42804>>>>>>>>>        If (bExists = True) Begin
42806>>>>>>>>>            Function_Return sProgramsPath
42807>>>>>>>>>        End                      
42807>>>>>>>>>>
42807>>>>>>>>>    
42807>>>>>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
42808>>>>>>>>>        If (Right(sProgramsPath, 1) ="\") Begin
42810>>>>>>>>>            Move (Left(sProgramsPath, Length(sProgramsPath) -1)) to sProgramsPath        
42811>>>>>>>>>        End                                              
42811>>>>>>>>>>
42811>>>>>>>>>        Get StringFromRightOfChar sProgramsPath sDirSep to sProgramsDir
42812>>>>>>>>>        
42812>>>>>>>>>        Move False to bExists
42813>>>>>>>>>        Get Create (RefClass(Array)) to hoPaths
42814>>>>>>>>>        Get WorkspaceIniFiles sProgramsPath to asWorkspaceFiles
42815>>>>>>>>>        Move (SizeOfArray(asWorkspaceFiles)) to iSize
42816>>>>>>>>>        Decrement iSize       
42817>>>>>>>>>        
42817>>>>>>>>>        For iCount from 0 to iSize
42823>>>>>>>>>>
42823>>>>>>>>>            Move asWorkspaceFiles[iCount] to sFileName
42824>>>>>>>>>            Get Create (Refclass(cIniFile)) to hoIniFile
42825>>>>>>>>>            Set psFileName of hoIniFile to sFileName
42826>>>>>>>>>            Send ReadSection of hoIniFile "Workspace" hoPaths
42827>>>>>>>>>            For iPath from 0 to (Item_Count(hoPaths) -1)
42833>>>>>>>>>>
42833>>>>>>>>>                Get Value of hoPaths iPath to sSection    
42834>>>>>>>>>                Get ReadString of hoIniFile "Workspace" sSection "" to sRelativePath 
42835>>>>>>>>>                // Check if there are more than one path specified;
42835>>>>>>>>>                Get CountOfPaths of (phoWorkspace(ghoApplication)) sRelativePath to iNoOfPaths
42836>>>>>>>>>                If (iNoOfPaths > 1) Begin         
42838>>>>>>>>>                    Move sRelativePath to sRelativePaths
42839>>>>>>>>>                    For iCountPath from 1 to iNoOfPaths
42845>>>>>>>>>>
42845>>>>>>>>>                        Get PathAtIndex of (phoWorkspace(ghoApplication)) sRelativePaths iCountPath to sRelativePath
42846>>>>>>>>>                        Get FullPathNames of (phoWorkspace(ghoApplication)) sRelativePath to sPath   
42847>>>>>>>>>                        Move (Replace((sDirSep + sProgramsDir + sDirSep), sPath, sDirSep)) to sPath
42848>>>>>>>>>                        Get vFolderFormat sPath to sPath
42849>>>>>>>>>                        Get vFilePathExists (sPath + sSearchFileName) to bExists
42850>>>>>>>>>                        If (bExists = True) Begin
42852>>>>>>>>>                            Move iNoOfPaths to iCountPath
42853>>>>>>>>>                            Move (Item_Count(hoPaths)) to iPath // We're done.
42854>>>>>>>>>                            Move iSize to iCount
42855>>>>>>>>>                        End                                                    
42855>>>>>>>>>>
42855>>>>>>>>>                    Loop
42856>>>>>>>>>>
42856>>>>>>>>>                End
42856>>>>>>>>>>
42856>>>>>>>>>                Else Begin
42857>>>>>>>>>                    Get FullPathNames of (phoWorkspace(ghoApplication)) sRelativePath to sPath   
42858>>>>>>>>>                    Move (Replace((sDirSep + sProgramsDir + sDirSep), sPath, sDirSep)) to sPath
42859>>>>>>>>>                    Get vFolderFormat sPath to sPath
42860>>>>>>>>>                    Get vFilePathExists (sPath + sSearchFileName) to bExists
42861>>>>>>>>>                    If (bExists = True) Begin
42863>>>>>>>>>                        Move (Item_Count(hoPaths)) to iPath // We're done.
42864>>>>>>>>>                        Move iSize to iCount
42865>>>>>>>>>                    End                                                    
42865>>>>>>>>>>
42865>>>>>>>>>                End
42865>>>>>>>>>>
42865>>>>>>>>>            Loop
42866>>>>>>>>>>
42866>>>>>>>>>            If (bExists = False) Begin
42868>>>>>>>>>                Move "" to sPath    
42869>>>>>>>>>            End
42869>>>>>>>>>>
42869>>>>>>>>>            Send Destroy of hoIniFile          
42870>>>>>>>>>        Loop        
42871>>>>>>>>>>
42871>>>>>>>>>        Send Destroy of hoPaths
42872>>>>>>>>>        
42872>>>>>>>>>        // Then not found in workspace, look for the file in DFSysPath;
42872>>>>>>>>>        If (sPath = "") Begin
42874>>>>>>>>>            Get_File_Path sSearchFileName to sFileName   
42875>>>>>>>>>            Get ParseFolderName sFileName to sPath
42876>>>>>>>>>        End                  
42876>>>>>>>>>>
42876>>>>>>>>>        
42876>>>>>>>>>        Function_Return sPath    
42877>>>>>>>>>    End_Function
42878>>>>>>>>>    
42878>>>>>>>>>    // Pass the path to the workspace Programs folder - returns a string array
42878>>>>>>>>>    // with one or more .ws file names.
42878>>>>>>>>>    // First checks if there is a .sws file - and if so reads the name of the
42878>>>>>>>>>    // workspace file (.ws) and returns it as a string array.
42878>>>>>>>>>    // If _no_ .sws file is found, enumerates the passed sProgramsPath variable
42878>>>>>>>>>    Function WorkspaceIniFiles String sProgramsPath Returns String[]
42880>>>>>>>>>        String[] asSWSFiles asWorkspaceFiles   
42882>>>>>>>>>        String sFile sHomePath sDirSep
42882>>>>>>>>>        Integer iCh iSize
42882>>>>>>>>>        Boolean bExists      
42882>>>>>>>>>        Handle hoIniFile 
42882>>>>>>>>>        
42882>>>>>>>>>        Move (ResizeArray(asSWSFiles, 0)) to asSWSFiles
42883>>>>>>>>>        Move (ResizeArray(asWorkspaceFiles, 0)) to asWorkspaceFiles
42884>>>>>>>>>        If (Right(sProgramsPath, 1) ="\") Begin
42886>>>>>>>>>            Move (Left(sProgramsPath, Length(sProgramsPath) -1)) to sProgramsPath        
42887>>>>>>>>>        End                                              
42887>>>>>>>>>>
42887>>>>>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
42888>>>>>>>>>        Get StringFromRightOfChar sProgramsPath sDirSep to sHomePath
42889>>>>>>>>>        Move (Replace(sHomePath, sProgramsPath, "")) to sHomePath
42890>>>>>>>>>        Get vFolderFormat sHomePath to sHomePath 
42891>>>>>>>>>        
42891>>>>>>>>>        // First check if theres an .sws file. If there is we will open it and
42891>>>>>>>>>        // read the name of the .ws file name.
42891>>>>>>>>>        File_Exist (sHomePath + "*.sws") bExists
42892>>>>>>>>>        If (bExists = True) Begin
42894>>>>>>>>>            Get Seq_Open_input_Channel ("dir:" + sHomePath + "*.sws") to iCh
42895>>>>>>>>>            If (iCh < 0) Begin
42897>>>>>>>>>                Function_Return asSWSFiles
42898>>>>>>>>>            End                                 
42898>>>>>>>>>>
42898>>>>>>>>>            
42898>>>>>>>>>            Repeat
42898>>>>>>>>>>
42898>>>>>>>>>                Readln channel iCh sFile
42900>>>>>>>>>                If (Trim(sFile) <> "") Begin
42902>>>>>>>>>                    Move sFile to asSWSFiles[SizeOfArray(asSWSFiles)]
42903>>>>>>>>>                End
42903>>>>>>>>>>
42903>>>>>>>>>            Until (SeqEof = True)
42905>>>>>>>>>            Send Seq_Close_Channel iCh    
42906>>>>>>>>>            
42906>>>>>>>>>            Move (SizeOfArray(asSWSFiles)) to iSize
42907>>>>>>>>>            If (iSize <> 0) Begin
42909>>>>>>>>>                Get Create (RefClass(cIniFile)) to hoIniFile  
42910>>>>>>>>>                // Use the file with that is last as it might have the DataFlex version in it,
42910>>>>>>>>>                // and thus is the latest one and it is more likely it is accurate (?)...
42910>>>>>>>>>                Move asSWSFiles[SizeOfArray(asSWSFiles) -1] to sFile
42911>>>>>>>>>                Set psFileName of hoIniFile to (sHomePath + sFile)
42912>>>>>>>>>                Get ReadString of hoIniFile "WorkspacePaths" "ConfigFile" "" to sFile
42913>>>>>>>>>                If (sFile <> "") Begin
42915>>>>>>>>>                    Move (Replace(".", sFile, sHomePath)) to sFile
42916>>>>>>>>>                    Move (Replace((sDirSep + String(sDirSep)), sFile, sDirSep)) to sFile
42917>>>>>>>>>                    File_Exist sFile bExists
42918>>>>>>>>>                    If (bExists = True) Begin
42920>>>>>>>>>                        Move sFile to asWorkspaceFiles[0] 
42921>>>>>>>>>                    End
42921>>>>>>>>>>
42921>>>>>>>>>                End
42921>>>>>>>>>>
42921>>>>>>>>>                Send Destroy of hoIniFile
42922>>>>>>>>>            End
42922>>>>>>>>>>
42922>>>>>>>>>        End
42922>>>>>>>>>>
42922>>>>>>>>>        
42922>>>>>>>>>        // If no .sws file exists, enumerate the .ws files from the Programs folder:    
42922>>>>>>>>>        If (SizeOfArray(asWorkspaceFiles) = 0) Begin
42924>>>>>>>>>            Get vFolderFormat sProgramsPath to sProgramsPath 
42925>>>>>>>>>            File_Exist (sProgramsPath + "*.ws") bExists
42926>>>>>>>>>            If (bExists = False) Begin
42928>>>>>>>>>                Function_Return asWorkspaceFiles
42929>>>>>>>>>            End
42929>>>>>>>>>>
42929>>>>>>>>>        
42929>>>>>>>>>            Get Seq_Open_input_Channel ("dir:" + sProgramsPath + "*.ws") to iCh
42930>>>>>>>>>            If (iCh < 0) Begin
42932>>>>>>>>>                Function_Return asWorkspaceFiles
42933>>>>>>>>>            End                                 
42933>>>>>>>>>>
42933>>>>>>>>>            
42933>>>>>>>>>            Repeat
42933>>>>>>>>>>
42933>>>>>>>>>                Readln channel iCh sFile
42935>>>>>>>>>                If (Trim(sFile) <> "") Begin
42937>>>>>>>>>                    Move sFile to asWorkspaceFiles[SizeOfArray(asWorkspaceFiles)]
42938>>>>>>>>>                End
42938>>>>>>>>>>
42938>>>>>>>>>            Until (SeqEof = True)
42940>>>>>>>>>            Send Seq_Close_Channel iCh
42941>>>>>>>>>        End
42941>>>>>>>>>>
42941>>>>>>>>>        
42941>>>>>>>>>        Function_Return asWorkspaceFiles
42942>>>>>>>>>    End_Function
42943>>>>>>>>>
42943>>>>>>>>>End_Class
42944>>>>>>>Use cDbUpdateDatabaseDriver.pkg
42944>>>>>>>Use vWin32fh.pkg
42944>>>>>>>
42944>>>>>>>// The cConnection class is the new SQL connections class for DF 19.
42944>>>>>>>// If an object of the cConnection class hasn't been instantiated we use a "dummy" class in its place.
42944>>>>>>>    Use cConnectionDUF.pkg
Including file: cConnectionDUF.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cConnectionDUF.pkg)
42944>>>>>>>>>// * Dummy class * that will only be used if DF 18.2 or less.
42944>>>>>>>>>//
42944>>>>>>>>>// The cConnection class is new to DF 19 and that DF 19 package/class
42944>>>>>>>>>// will be used automatically instead of this package
42944>>>>>>>>>// if the current DF version is 19 and up _and_ the class
42944>>>>>>>>>// has been instantianted in the cApplication object.
42944>>>>>>>>>//
42944>>>>>>>>>// If an object of the original cConnection class is placed in
42944>>>>>>>>>// the cApplication, that connection logic will be used instead
42944>>>>>>>>>// of the Database Update Framework's SQLConnections logic. Or more
42944>>>>>>>>>// correctly; "Managed Connection" settings will be read and applied
42944>>>>>>>>>// instead of those defined in the framework's SQLConnections.ini file.
42944>>>>>>>>>//
42944>>>>>>>>>Struct tConnection
42944>>>>>>>>>    String sId                // connection id
42944>>>>>>>>>    String sString            // server-string as added via the ini file
42944>>>>>>>>>    String sUID               // User Id
42944>>>>>>>>>    String sPWD               // non-encrypted password
42944>>>>>>>>>    Boolean bTrustedConnection // Trusted connection
42944>>>>>>>>>    Integer iOptions          // connection ID options (don't use)
42944>>>>>>>>>    String sDriver            // name of driver
42944>>>>>>>>>    Integer iDriverIndex      // loaded driver index (is 1 based, 0 if none)
42944>>>>>>>>>    String sConnectionString  // Full connection string assembled from various strings
42944>>>>>>>>>    String sSection           // this is usually the section name as it appears
42944>>>>>>>>>                              // in the connections ini file (e.g., [Connection1])
42944>>>>>>>>>    Boolean bDisabled         // if set, this is not an active Id
42944>>>>>>>>>End_Struct
42944>>>>>>>>>
42944>>>>>>>>>
42944>>>>>>>>>Class cConnection is a cObject
42945>>>>>>>>>
42945>>>>>>>>>    Procedure Construct_Object
42947>>>>>>>>>        Forward Send Construct_Object
42949>>>>>>>>>
42949>>>>>>>>>    End_Procedure
42950>>>>>>>>>
42950>>>>>>>>>    Function ConnectionIdInfo Returns tConnection
42952>>>>>>>>>        tConnection Connection
42952>>>>>>>>>        tConnection Connection
42952>>>>>>>>>        Function_Return Connection
42953>>>>>>>>>    End_Function
42954>>>>>>>>>
42954>>>>>>>>>    Function IsConnectionIdLoggedIn Returns Boolean
42956>>>>>>>>>        Function_Return False
42957>>>>>>>>>    End_Function
42958>>>>>>>>>
42958>>>>>>>>>    Function LoginConnectionId Returns String
42960>>>>>>>>>        Function_Return ""
42961>>>>>>>>>    End_Function
42962>>>>>>>>>
42962>>>>>>>>>    // get array of managed connections across all drivers
42962>>>>>>>>>    // returns array of connections in tConnection.
42962>>>>>>>>>    Function ConnectionIDs Returns tConnection[]
42964>>>>>>>>>        tConnection[] Connections
42964>>>>>>>>>        tConnection[] Connections
42965>>>>>>>>>        Function_Return Connections
42966>>>>>>>>>    End_Function
42967>>>>>>>>>
42967>>>>>>>>>    Function ConnectionIdIndex String sConnectionID Returns Integer
42969>>>>>>>>>        Function_Return 0
42970>>>>>>>>>    End_Function
42971>>>>>>>>>
42971>>>>>>>>>    Function RedirectConnectionId String sConnectionID String sServer String sUserId String sPw Boolean bTrusted Boolean bKeepOpen Returns Boolean
42973>>>>>>>>>        Function_Return False
42974>>>>>>>>>    End_Function
42975>>>>>>>>>
42975>>>>>>>>>End_Class
42976>>>>>>>
42976>>>>>>>// We're making references to this object handle so we need it defined
42976>>>>>>>// here as well as for the cDbUpdateHandler class
42976>>>>>>>
42976>>>>>>>    Global_Variable Handle ghoSQLConnectionHandler
42976>>>>>>>    Move 0 to ghoSQLConnectionHandler
42977>>>>>>>
42977>>>>>>>Class cSQLConnectionHandler is a cObject
42978>>>>>>>
42978>>>>>>>    Procedure Construct_Object
42980>>>>>>>        Forward Send Construct_Object
42982>>>>>>>        Move Self to ghoSQLConnectionHandler
42983>>>>>>>
42983>>>>>>>        Property Handle phoSQLConnectionIniFile (Create(Self,RefClass(cSQLConnectionIniFile)))
42984>>>>>>>
42984>>>>>>>        // These properties are used by the cDbUpdateVersion and cDbUpdateFunctionLibrary classes,
42984>>>>>>>        // but put here so they can be set/get in both class objects. Those classes has "relay"
42984>>>>>>>        // methods to this class.
42984>>>>>>>        Property Boolean pbUseConnectionID True
42985>>>>>>>        Property Boolean pbToANSI          True
42986>>>>>>>        Property Boolean pbRecnum          True
42987>>>>>>>        Property Boolean pbCopyData        True
42988>>>>>>>        Property Boolean pbApiTableUpdateAuto    False
42989>>>>>>>        Property Boolean pbCompareDate_DateTime  False
42990>>>>>>>        Property Boolean pbCompareIndexAscending False
42991>>>>>>>        Property Boolean pbCompareIndexUppercase False
42992>>>>>>>
42992>>>>>>>        // Driver default value settings:
42992>>>>>>>        // Note: When the object is created the corresponding values
42992>>>>>>>        // from the driver .int files are read.
42992>>>>>>>        // Sample: Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_NUMERIC of {driverNumber} to {StringVariable}
42992>>>>>>>        Property String psDriverDefaultValueASCII    ""
42993>>>>>>>        Property String psDriverDefaultValueBinary   ""
42994>>>>>>>        Property String psDriverDefaultValueDate     ""
42995>>>>>>>        Property String psDriverDefaultValueDateTime ""
42996>>>>>>>        Property String psDriverDefaultValueNumeric  ""
42997>>>>>>>        Property String psDriverDefaultValueText     ""
42998>>>>>>>
42998>>>>>>>        // Driver "nullability" settings:
42998>>>>>>>        // Note: When the object is created the corresponding values
42998>>>>>>>        // from the driver .int files are read.
42998>>>>>>>        // Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_ASCII of {driverNumber} to {BooleanVariable}
42998>>>>>>>        Property Boolean pbDriverDefaultNullableASCII    False
42999>>>>>>>        Property Boolean pbDriverDefaultNullableBinary   False
43000>>>>>>>        Property Boolean pbDriverDefaultNullableDate     False
43001>>>>>>>        Property Boolean pbDriverDefaultNullableDateTime False
43002>>>>>>>        Property Boolean pbDriverDefaultNullableNumeric  False
43003>>>>>>>        Property Boolean pbDriverDefaultNullableText     False
43004>>>>>>>
43004>>>>>>>        // *** This is the central point of connection data for the Database Update Framework ***
43004>>>>>>>        //     It is private because the get/set version also updates the DAW
43004>>>>>>>        //     driver interfaces.
43004>>>>>>>        //     There are also procedure/function pairs to set/get individual data members
43004>>>>>>>        //     of the struct they are all routed throu this struct property.
43004>>>>>>>        Property tSQLConnection Private.pSQLConnection
43005>>>>>>>
43005>>>>>>>    End_Procedure
43006>>>>>>>
43006>>>>>>>    Procedure End_Construct_Object
43008>>>>>>>        tSQLConnection SQLConnection
43008>>>>>>>        tSQLConnection SQLConnection
43008>>>>>>>
43008>>>>>>>        Forward Send End_Construct_Object
43010>>>>>>>
43010>>>>>>>        // Now is the time to read and apply SQL connection settings.
43010>>>>>>>        Get SetupSQLConnection True True to SQLConnection
43011>>>>>>>        Set Private.pSQLConnection to SQLConnection
43012>>>>>>>    End_Procedure
43013>>>>>>>
43013>>>>>>>    // *** Properties ***
43013>>>>>>>    // All connection related "properties" (get/set pairs) are really done by changing the
43013>>>>>>>    // private.pSQLConnection struct connection property. These "properties" are
43013>>>>>>>    // merely here for conveniance.
43013>>>>>>>    //
43013>>>>>>>    // The pSQLConnection get/set are here so we have a "central hub"
43013>>>>>>>    // where we update data to/from the DAW driver interfaces and this framework.
43013>>>>>>>    // This struct property contains all the connection data.
43013>>>>>>>    //
43013>>>>>>>    Procedure Set pSQLConnection tSQLConnection SQLConnection
43015>>>>>>>        Boolean bOK
43015>>>>>>>
43015>>>>>>>        Set Private.pSQLConnection to SQLConnection
43016>>>>>>>
43016>>>>>>>        // When starting a program we might not have a connection id yet:
43016>>>>>>>        If (SQLConnection.sDriverID = DATAFLEX_ID) Begin
43018>>>>>>>//        If (SQLConnection.sConnectionID = "" or SQLConnection.sDriverID = DATAFLEX_ID) Begin
43018>>>>>>>            Procedure_Return
43019>>>>>>>        End
43019>>>>>>>>
43019>>>>>>>
43019>>>>>>>        // If a DAW DFConnId.ini file was read instead of the DUF SQLConnections.ini file we should by now
43019>>>>>>>        // be logged in already and don't want to do it again.
43019>>>>>>>        If (SQLConnection.bDAWConnection = False) Begin
43021>>>>>>>            // After we have set the class property we need to tell the DAW
43021>>>>>>>            // driver interfaces about the change & make a new login.
43021>>>>>>>            Get SQLLogin SQLConnection to bOK
43022>>>>>>>            If (bOK = False) Begin
43024>>>>>>>                Error DFERR_PROGRAM "Login error."
43025>>>>>>>>
43025>>>>>>>            End
43025>>>>>>>>
43025>>>>>>>        End
43025>>>>>>>>
43025>>>>>>>
43025>>>>>>>        // Now is the time to setup our driver default values by reading the driver .int file:
43025>>>>>>>        Send SetupDriverDefaults SQLConnection.sDriverID
43026>>>>>>>
43026>>>>>>>    End_Procedure
43027>>>>>>>
43027>>>>>>>    // Similar to _SqlCheckCurrentDriver but generates no error and it doesn't
43027>>>>>>>    // attempt to load the driver.
43027>>>>>>>    // Returns true if the passed driver is SQL based.
43027>>>>>>>    Function IsSQLDriver String sDriverID Returns Boolean
43029>>>>>>>        Boolean bOK
43029>>>>>>>        Get IsDAWSQLDriver sDriverID to bOK
43030>>>>>>>        Function_Return bOK
43031>>>>>>>    End_Function
43032>>>>>>>
43032>>>>>>>    // Reads the driver .int file and sets class properties of the cDbUpdateFunctionLibrary accordingly.
43032>>>>>>>    Procedure SetupDriverDefaults String sDriverID
43034>>>>>>>        String sAttributeValue
43034>>>>>>>        Integer iDriverID
43034>>>>>>>        Boolean bNULL bSQLDriver
43034>>>>>>>
43034>>>>>>>        Get IsSQLDriver sDriverID to bSQLDriver
43035>>>>>>>        If (bSQLDriver = False) Begin
43037>>>>>>>            Procedure_Return
43038>>>>>>>        End                                      
43038>>>>>>>>
43038>>>>>>>        
43038>>>>>>>        Get DriverIndex sDriverID to iDriverID
43039>>>>>>>
43039>>>>>>>        // Driver default values for various data types:
43039>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_ASCII of iDriverID      to sAttributeValue
43042>>>>>>>        Set psDriverDefaultValueASCII                                   to sAttributeValue
43043>>>>>>>
43043>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_BINARY of iDriverID     to sAttributeValue
43046>>>>>>>        Set psDriverDefaultValueBinary                                  to sAttributeValue
43047>>>>>>>
43047>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_DATE of iDriverID       to sAttributeValue
43050>>>>>>>        Set psDriverDefaultValueDate                                    to sAttributeValue
43051>>>>>>>
43051>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_DATETIME of iDriverID   to sAttributeValue
43054>>>>>>>        Set psDriverDefaultValueDateTime                                to sAttributeValue
43055>>>>>>>
43055>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_NUMERIC of iDriverID    to sAttributeValue
43058>>>>>>>        Set psDriverDefaultValueNumeric                                 to sAttributeValue
43059>>>>>>>
43059>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_DEFAULT_TEXT of iDriverID       to sAttributeValue
43062>>>>>>>        Set psDriverDefaultValueText                                    to sAttributeValue
43063>>>>>>>
43063>>>>>>>        // The default setting for the "nullability" of newly created ASCII columns.
43063>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_ASCII      of iDriverID to bNULL
43066>>>>>>>        Set pbDriverDefaultNullableASCII to bNULL
43067>>>>>>>
43067>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_BINARY     of iDriverID to bNULL
43070>>>>>>>        Set pbDriverDefaultNullableBinary to bNULL
43071>>>>>>>
43071>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_DATE       of iDriverID to bNULL
43074>>>>>>>        Set pbDriverDefaultNullableDate to bNULL
43075>>>>>>>
43075>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_DATETIME   of iDriverID to bNULL
43078>>>>>>>        Set pbDriverDefaultNullableDateTime to bNULL
43079>>>>>>>
43079>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_NUMERIC    of iDriverID to bNULL
43082>>>>>>>        Set pbDriverDefaultNullableNumeric to bNULL
43083>>>>>>>
43083>>>>>>>        Get_Attribute DF_DRIVER_DEFAULT_NULLABLE_TEXT       of iDriverID to bNULL
43086>>>>>>>        Set pbDriverDefaultNullableText to bNULL
43087>>>>>>>
43087>>>>>>>    End_Procedure
43088>>>>>>>
43088>>>>>>>    Function SQLLogin tSQLConnection SQLConnection Returns Boolean
43090>>>>>>>        Boolean bOK bIsDaw
43090>>>>>>>        String sConnectionString
43090>>>>>>>        Handle hoErrorObj hoDriver hoIniFile
43090>>>>>>>        Integer iDriverID
43090>>>>>>>
43090>>>>>>>        Move False to bOK
43091>>>>>>>        Get IsDAWSQLDriver SQLConnection.sDriverID to bIsDaw
43092>>>>>>>
43092>>>>>>>        Get phoSQLConnectionIniFile to hoIniFile
43093>>>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to sConnectionString
43094>>>>>>>        Get DriverIndex SQLConnection.sDriverID to iDriverID
43095>>>>>>>        If (iDriverID = 0) Begin
43097>>>>>>>            Move hoErrorObj to Error_Object_Id
43098>>>>>>>            Function_Return False
43099>>>>>>>        End
43099>>>>>>>>
43099>>>>>>>
43099>>>>>>>        Set_Attribute DF_DRIVER_SILENT_LOGIN of iDriverID to SQLConnection.bSilentLogin
43102>>>>>>>        Get Create (RefClass(cDbUpdateDatabaseDriver)) to hoDriver
43103>>>>>>>        Set psDriverID of hoDriver to SQLConnection.sDriverID
43104>>>>>>>        Get DbLogin    of hoDriver sConnectionString SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to bOK
43105>>>>>>>        Send Destroy   of hoDriver
43106>>>>>>>
43106>>>>>>>        Function_Return bOK
43107>>>>>>>    End_Function
43108>>>>>>>
43108>>>>>>>    Function pSQLConnection Returns tSQLConnection
43110>>>>>>>        tSQLConnection SQLConnection
43110>>>>>>>        tSQLConnection SQLConnection
43110>>>>>>>        Get Private.pSQLConnection to SQLConnection
43111>>>>>>>        Function_Return SQLConnection
43112>>>>>>>    End_Function
43113>>>>>>>
43113>>>>>>>    Procedure Set psConnectionID String sValue
43115>>>>>>>        tSQLConnection SQLConnection
43115>>>>>>>        tSQLConnection SQLConnection
43115>>>>>>>
43115>>>>>>>        Get Private.pSQLConnection to SQLConnection
43116>>>>>>>        If (SQLConnection.sConnectionID = "") Begin
43118>>>>>>>            Move sValue to SQLConnection.sConnectionID
43119>>>>>>>        End
43119>>>>>>>>
43119>>>>>>>
43119>>>>>>>        // Else we might want to change the current connection ID
43119>>>>>>>        Else If (SQLConnection.sConnectionID <> "" and SQLConnection.sConnectionID <> sValue) Begin
43122>>>>>>>            Move False to Err
43123>>>>>>>            Logout SQLConnection.sDriverID
43124>>>>>>>            // This will also make a login to the new server.
43124>>>>>>>            Get SQLIniFileConnectionID of (phoSQLConnectionIniFile(Self)) sValue to SQLConnection
43125>>>>>>>        End
43125>>>>>>>>
43125>>>>>>>        Set pSQLConnection to SQLConnection
43126>>>>>>>    End_Procedure
43127>>>>>>>
43127>>>>>>>    Function psConnectionID Returns String
43129>>>>>>>        tSQLConnection SQLConnection
43129>>>>>>>        tSQLConnection SQLConnection
43129>>>>>>>        Get Private.pSQLConnection to SQLConnection
43130>>>>>>>        Function_Return SQLConnection.sConnectionID
43131>>>>>>>    End_Function
43132>>>>>>>
43132>>>>>>>    // Note: If the psDriverID + other connection properties are to be changed,
43132>>>>>>>    //       the psDriverID *must* be the first property that is changed!
43132>>>>>>>    //       Otherwise errors might be raised by the driver when e.g. the format
43132>>>>>>>    //       for a connection string has the wrong format for that driver.
43132>>>>>>>    Procedure Set psDriverID String sValue
43134>>>>>>>        tSQLConnection SQLConnection
43134>>>>>>>        tSQLConnection SQLConnection
43134>>>>>>>        Get pSQLConnection to SQLConnection
43135>>>>>>>        Move sValue        to SQLConnection.sDriverID
43136>>>>>>>        Set pSQLConnection to SQLConnection
43137>>>>>>>        If (sValue <> DATAFLEX_ID) Begin
43139>>>>>>>            Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43140>>>>>>>        End
43140>>>>>>>>
43140>>>>>>>    End_Procedure
43141>>>>>>>
43141>>>>>>>    Function psDriverID Returns String
43143>>>>>>>        tSQLConnection SQLConnection
43143>>>>>>>        tSQLConnection SQLConnection
43143>>>>>>>        Get Private.pSQLConnection to SQLConnection
43144>>>>>>>        If (SQLConnection.sDriverID = "") Begin
43146>>>>>>>            Move DATAFLEX_ID to SQLConnection.sDriverID // Default is the DataFlex driver.
43147>>>>>>>        End
43147>>>>>>>>
43147>>>>>>>        Function_Return SQLConnection.sDriverID
43148>>>>>>>    End_Function
43149>>>>>>>
43149>>>>>>>    Procedure Set psConnectionString String sValue
43151>>>>>>>        tSQLConnection SQLConnection
43151>>>>>>>        tSQLConnection SQLConnection
43151>>>>>>>        Get Private.pSQLConnection to SQLConnection
43152>>>>>>>        Move sValue        to SQLConnection.sConnectionString
43153>>>>>>>        Set pSQLConnection to SQLConnection
43154>>>>>>>    End_Procedure
43155>>>>>>>
43155>>>>>>>    Function psConnectionString Returns String
43157>>>>>>>        tSQLConnection SQLConnection
43157>>>>>>>        tSQLConnection SQLConnection
43157>>>>>>>        Get Private.pSQLConnection to SQLConnection
43158>>>>>>>        Function_Return SQLConnection.sConnectionString
43159>>>>>>>    End_Function
43160>>>>>>>
43160>>>>>>>    Procedure Set psServer String sValue
43162>>>>>>>        tSQLConnection SQLConnection
43162>>>>>>>        tSQLConnection SQLConnection
43162>>>>>>>        Get Private.pSQLConnection to SQLConnection
43163>>>>>>>        Move sValue        to SQLConnection.sServer
43164>>>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43165>>>>>>>        Set pSQLConnection to SQLConnection
43166>>>>>>>    End_Procedure
43167>>>>>>>
43167>>>>>>>    Function psServer Returns String
43169>>>>>>>        tSQLConnection SQLConnection
43169>>>>>>>        tSQLConnection SQLConnection
43169>>>>>>>        Get Private.pSQLConnection to SQLConnection
43170>>>>>>>        Function_Return SQLConnection.sServer
43171>>>>>>>    End_Function
43172>>>>>>>
43172>>>>>>>    Procedure Set psDatabase String sValue
43174>>>>>>>        tSQLConnection SQLConnection
43174>>>>>>>        tSQLConnection SQLConnection
43174>>>>>>>        Get Private.pSQLConnection to SQLConnection
43175>>>>>>>        Move sValue        to SQLConnection.sDatabase
43176>>>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43177>>>>>>>        Set pSQLConnection to SQLConnection
43178>>>>>>>    End_Procedure
43179>>>>>>>
43179>>>>>>>    Function psDatabase Returns String
43181>>>>>>>        tSQLConnection SQLConnection
43181>>>>>>>        tSQLConnection SQLConnection
43181>>>>>>>        Get Private.pSQLConnection to SQLConnection
43182>>>>>>>        Function_Return SQLConnection.sDatabase
43183>>>>>>>    End_Function
43184>>>>>>>
43184>>>>>>>    Procedure Set psUserID String sValue
43186>>>>>>>        tSQLConnection SQLConnection
43186>>>>>>>        tSQLConnection SQLConnection
43186>>>>>>>        Get Private.pSQLConnection to SQLConnection
43187>>>>>>>        Move sValue        to SQLConnection.sUserID
43188>>>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43189>>>>>>>        Set pSQLConnection to SQLConnection
43190>>>>>>>    End_Procedure
43191>>>>>>>
43191>>>>>>>    Function psUserID Returns String
43193>>>>>>>        tSQLConnection SQLConnection
43193>>>>>>>        tSQLConnection SQLConnection
43193>>>>>>>        Get Private.pSQLConnection to SQLConnection
43194>>>>>>>        Function_Return SQLConnection.sUserID
43195>>>>>>>    End_Function
43196>>>>>>>
43196>>>>>>>    // This is the uncrypted password
43196>>>>>>>    Procedure Set psPassword String sValue
43198>>>>>>>        tSQLConnection SQLConnection
43198>>>>>>>        tSQLConnection SQLConnection
43198>>>>>>>        Get Private.pSQLConnection to SQLConnection
43199>>>>>>>        Move sValue        to SQLConnection.sPassword
43200>>>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43201>>>>>>>        Set pSQLConnection to SQLConnection
43202>>>>>>>    End_Procedure
43203>>>>>>>
43203>>>>>>>    Function psPassword Returns String
43205>>>>>>>        tSQLConnection SQLConnection
43205>>>>>>>        tSQLConnection SQLConnection
43205>>>>>>>        Get Private.pSQLConnection to SQLConnection
43206>>>>>>>        Function_Return SQLConnection.sPassword
43207>>>>>>>    End_Function
43208>>>>>>>
43208>>>>>>>    Procedure Set pbTrusted Boolean bValue
43210>>>>>>>        tSQLConnection SQLConnection
43210>>>>>>>        tSQLConnection SQLConnection
43210>>>>>>>        Get Private.pSQLConnection to SQLConnection
43211>>>>>>>        Move bValue        to SQLConnection.bTrusted
43212>>>>>>>        Get ConstructConnectionString SQLConnection.sDriverID SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to SQLConnection.sConnectionString
43213>>>>>>>        Set pSQLConnection to SQLConnection
43214>>>>>>>    End_Procedure
43215>>>>>>>
43215>>>>>>>    Function pbTrusted Returns Boolean
43217>>>>>>>        tSQLConnection SQLConnection
43217>>>>>>>        tSQLConnection SQLConnection
43217>>>>>>>        Get Private.pSQLConnection to SQLConnection
43218>>>>>>>        Function_Return SQLConnection.bTrusted
43219>>>>>>>    End_Function
43220>>>>>>>
43220>>>>>>>    // *** All of these properties are special to the Database Update Framework ***
43220>>>>>>>    //     Thus they are not propagated to the DAW classes and that is why
43220>>>>>>>    //     the Private.pSQLConnection property is set instead of the going throu
43220>>>>>>>    //     the central pSQLConnection "hub".
43220>>>>>>>    Procedure Set pbSilentLogin Boolean bValue
43222>>>>>>>        tSQLConnection SQLConnection
43222>>>>>>>        tSQLConnection SQLConnection
43222>>>>>>>        Get Private.pSQLConnection to SQLConnection
43223>>>>>>>        Move bValue to SQLConnection.bTrusted
43224>>>>>>>        Set Private.pSQLConnection to SQLConnection
43225>>>>>>>    End_Procedure
43226>>>>>>>
43226>>>>>>>    Function pbSilentLogin Returns Boolean
43228>>>>>>>        tSQLConnection SQLConnection
43228>>>>>>>        tSQLConnection SQLConnection
43228>>>>>>>        Get Private.pSQLConnection to SQLConnection
43229>>>>>>>        Function_Return SQLConnection.bSilentLogin
43230>>>>>>>    End_Function
43231>>>>>>>
43231>>>>>>>    Procedure Set piDbType Integer iValue
43233>>>>>>>        tSQLConnection SQLConnection
43233>>>>>>>        tSQLConnection SQLConnection
43233>>>>>>>        Get Private.pSQLConnection to SQLConnection
43234>>>>>>>        Move iValue to SQLConnection.iDbType
43235>>>>>>>        Set Private.pSQLConnection to SQLConnection
43236>>>>>>>    End_Procedure
43237>>>>>>>
43237>>>>>>>    Function piDbType Returns Integer
43239>>>>>>>        tSQLConnection SQLConnection
43239>>>>>>>        tSQLConnection SQLConnection
43239>>>>>>>        Get Private.pSQLConnection to SQLConnection
43240>>>>>>>        Function_Return SQLConnection.iDbType
43241>>>>>>>    End_Function
43242>>>>>>>
43242>>>>>>>    Procedure Set psBaseTableSpace String sValue
43244>>>>>>>        tSQLConnection SQLConnection
43244>>>>>>>        tSQLConnection SQLConnection
43244>>>>>>>        Get Private.pSQLConnection to SQLConnection
43245>>>>>>>        Move sValue to SQLConnection.sBaseTableSpace
43246>>>>>>>        Set Private.pSQLConnection to SQLConnection
43247>>>>>>>    End_Procedure
43248>>>>>>>
43248>>>>>>>    Function psBaseTableSpace Returns String
43250>>>>>>>        tSQLConnection SQLConnection
43250>>>>>>>        tSQLConnection SQLConnection
43250>>>>>>>        Get Private.pSQLConnection to SQLConnection
43251>>>>>>>        Function_Return SQLConnection.sBaseTableSpace
43252>>>>>>>    End_Function
43253>>>>>>>
43253>>>>>>>    Procedure Set psIndexTableSpace String sValue
43255>>>>>>>        tSQLConnection SQLConnection
43255>>>>>>>        tSQLConnection SQLConnection
43255>>>>>>>        Get Private.pSQLConnection to SQLConnection
43256>>>>>>>        Move sValue to SQLConnection.sIndexTableSpace
43257>>>>>>>        Set Private.pSQLConnection to SQLConnection
43258>>>>>>>    End_Procedure
43259>>>>>>>
43259>>>>>>>    Function psIndexTableSpace Returns String
43261>>>>>>>        tSQLConnection SQLConnection
43261>>>>>>>        tSQLConnection SQLConnection
43261>>>>>>>        Get Private.pSQLConnection to SQLConnection
43262>>>>>>>        Function_Return SQLConnection.sIndexTableSpace
43263>>>>>>>    End_Function
43264>>>>>>>
43264>>>>>>>    Procedure Set psLongTableSpace String sValue
43266>>>>>>>        tSQLConnection SQLConnection
43266>>>>>>>        tSQLConnection SQLConnection
43266>>>>>>>        Get Private.pSQLConnection to SQLConnection
43267>>>>>>>        Move sValue to SQLConnection.sLongTableSpace
43268>>>>>>>        Set Private.pSQLConnection to SQLConnection
43269>>>>>>>    End_Procedure
43270>>>>>>>
43270>>>>>>>    Function psLongTableSpace Returns String
43272>>>>>>>        tSQLConnection SQLConnection
43272>>>>>>>        tSQLConnection SQLConnection
43272>>>>>>>        Get Private.pSQLConnection to SQLConnection
43273>>>>>>>        Function_Return SQLConnection.sLongTableSpace
43274>>>>>>>    End_Function
43275>>>>>>>
43275>>>>>>>    Procedure Set psSchema String sValue
43277>>>>>>>        tSQLConnection SQLConnection
43277>>>>>>>        tSQLConnection SQLConnection
43277>>>>>>>        Get Private.pSQLConnection to SQLConnection
43278>>>>>>>        Move sValue to SQLConnection.sSchema
43279>>>>>>>        Set Private.pSQLConnection to SQLConnection
43280>>>>>>>    End_Procedure
43281>>>>>>>
43281>>>>>>>    Function psSchema Returns String
43283>>>>>>>        tSQLConnection SQLConnection
43283>>>>>>>        tSQLConnection SQLConnection
43283>>>>>>>        Get Private.pSQLConnection to SQLConnection
43284>>>>>>>        Function_Return SQLConnection.sSchema
43285>>>>>>>    End_Function
43286>>>>>>>
43286>>>>>>>    Procedure Set pbEnabled Boolean bValue
43288>>>>>>>        tSQLConnection SQLConnection
43288>>>>>>>        tSQLConnection SQLConnection
43288>>>>>>>        Get Private.pSQLConnection to SQLConnection
43289>>>>>>>        Move bValue to SQLConnection.bEnabled
43290>>>>>>>        Set Private.pSQLConnection to SQLConnection
43291>>>>>>>    End_Procedure
43292>>>>>>>
43292>>>>>>>    Function pbEnabled Returns Boolean
43294>>>>>>>        tSQLConnection SQLConnection
43294>>>>>>>        tSQLConnection SQLConnection
43294>>>>>>>        Get Private.pSQLConnection to SQLConnection
43295>>>>>>>        Function_Return SQLConnection.bEnabled
43296>>>>>>>    End_Function
43297>>>>>>>
43297>>>>>>>
43297>>>>>>>    // ************************************
43297>>>>>>>    Function SetupSQLConnection Boolean bReadDFConnSettings Boolean bReadSQLConnections Returns tSQLConnection
43299>>>>>>>        tSQLConnection SQLConnection
43299>>>>>>>        tSQLConnection SQLConnection
43299>>>>>>>
43299>>>>>>>        // If this object was created by the cDbUpdateHandler class we will
43299>>>>>>>        // deferr reading SQL connection values until later.
43299>>>>>>>        If (bReadDFConnSettings = True) Begin
43301>>>>>>>            // This is the new SQL login logic for DF 19 and up; "Managed Connections"
43301>>>>>>>            If (ghoConnection > 0) Begin
43303>>>>>>>                Get ReadcConnections to SQLConnection
43304>>>>>>>            End
43304>>>>>>>>
43304>>>>>>>
43304>>>>>>>            // In addition to the above; there might be other values set even if a cConnection
43304>>>>>>>            // object is used.
43304>>>>>>>            If (bReadSQLConnections = True) Begin
43306>>>>>>>                Get ReadSQLConnectionsIniSettings to SQLConnection
43307>>>>>>>            End
43307>>>>>>>>
43307>>>>>>>        End
43307>>>>>>>>
43307>>>>>>>
43307>>>>>>>        Function_Return SQLConnection
43308>>>>>>>    End_Function
43309>>>>>>>
43309>>>>>>>    // This is for the new cConnection class used by DF 19 and up (only).
43309>>>>>>>    Function ReadcConnections Returns tSQLConnection
43311>>>>>>>        tConnection Connection
43311>>>>>>>        tConnection Connection
43311>>>>>>>        tSQLConnection SQLConnection SQLConnectionEmpty
43311>>>>>>>        tSQLConnection SQLConnection SQLConnectionEmpty
43311>>>>>>>        Integer iRetval iDbType
43311>>>>>>>        Boolean bOK bConnected
43311>>>>>>>        String sConnectionID
43311>>>>>>>
43311>>>>>>>
43311>>>>>>>        Function_Return SQLConnection
43312>>>>>>>    End_Function
43313>>>>>>>
43313>>>>>>>    // Returns True if the psConnectionID has been set in the cDbUpateHandler object,
43313>>>>>>>    // or the DAW cConnect array of registered connection only contains one active/enabled
43313>>>>>>>    // connection id for a particular driver.
43313>>>>>>>    // So either the psConnectionID or the psDriverID can have been set in the cDbUpdateHandler
43313>>>>>>>    // object. We can then match a connection id from the DAW cConnect class array.
43313>>>>>>>    // Returns False if there are multiple connections that are enabled or the psConnectionID has
43313>>>>>>>    // been set in the cDbUpdateHandler object but it cannot be found amongst the registered
43313>>>>>>>    // connections of the DAW cConnect class.
43313>>>>>>>    Function IsSinglecConnection String ByRef sConnectionID Returns Boolean
43315>>>>>>>        tConnection[] ConnIdArray
43315>>>>>>>        tConnection[] ConnIdArray
43316>>>>>>>        Integer iCount iSize iConnectionIDCounter
43316>>>>>>>        Boolean bEnabled bFound
43316>>>>>>>        String sConnectionID2 sDriverID sDriverConn
43316>>>>>>>
43316>>>>>>>        Move False to bFound
43317>>>>>>>        If (ghoConnection > 0) Begin
43319>>>>>>>
43319>>>>>>>            // The property of the cDbUpdateHandler container object
43319>>>>>>>            Get psDriverID to sDriverID
43320>>>>>>>
43320>>>>>>>            Move 0 to iConnectionIDCounter
43321>>>>>>>            // This is the the DAW cConnect array with all registered connection id's.
43321>>>>>>>            Move (SizeOfArray(ConnIdArray)) to iSize
43322>>>>>>>            Decrement iSize
43323>>>>>>>            For iCount from 0 to iSize
43329>>>>>>>>
43329>>>>>>>                Move ConnIdArray[iCount].sDriver to sDriverConn
43330>>>>>>>                Move ConnIdArray[iCount].sId to sConnectionID2
43331>>>>>>>                Move (ConnIdArray[iCount].bDisabled = False) to bEnabled
43332>>>>>>>                // If no psConnectionID specified in the cDbUpdateHandler, we check if there is a driver
43332>>>>>>>                // connection in the DAW cConnect object _and_ that there is only one!
43332>>>>>>>                If (sConnectionID = "") Begin
43334>>>>>>>                    Move (sDriverID = sDriverConn and bEnabled = True) to bFound
43335>>>>>>>                End
43335>>>>>>>>
43335>>>>>>>                Else Begin
43336>>>>>>>                    If (Uppercase(sConnectionID) = Uppercase(sConnectionID2)) Begin
43338>>>>>>>                        Move iSize to iCount // Then we've found what we were looking for and we're out of here...
43339>>>>>>>                    End
43339>>>>>>>>
43339>>>>>>>                End
43339>>>>>>>>
43339>>>>>>>
43339>>>>>>>                If (bFound = True) Begin
43341>>>>>>>                    Increment iConnectionIDCounter
43342>>>>>>>                End
43342>>>>>>>>
43342>>>>>>>            Loop
43343>>>>>>>>
43343>>>>>>>            Move (iConnectionIDCounter <= 1 and sDriverConn <> "" and sConnectionID2 <> "") to bFound
43344>>>>>>>            If (bFound = True) Begin
43346>>>>>>>                Move sConnectionID2 to sConnectionID
43347>>>>>>>            End
43347>>>>>>>>
43347>>>>>>>        End
43347>>>>>>>>
43347>>>>>>>
43347>>>>>>>        // Special case; a cConnection object has been setup in the cApplication,
43347>>>>>>>        // but no DFConn.ini record has been created.
43347>>>>>>>        If (iSize = -1) Begin
43349>>>>>>>            Move True to bFound
43350>>>>>>>        End
43350>>>>>>>>
43350>>>>>>>
43350>>>>>>>        Function_Return bFound
43351>>>>>>>    End_Function
43352>>>>>>>
43352>>>>>>>    // Send on object creation to read the default connection string settings, and
43352>>>>>>>    // create a connection to the server.
43352>>>>>>>    Function ReadSQLConnectionsIniSettings Returns tSQLConnection
43354>>>>>>>        String sPath sFileName
43354>>>>>>>        Boolean bExists bActive
43354>>>>>>>        tSQLConnection[] SQLConnectionArray
43354>>>>>>>        tSQLConnection[] SQLConnectionArray
43355>>>>>>>        tSQLConnection SQLConnection SQLConnectionEmpty
43355>>>>>>>        tSQLConnection SQLConnection SQLConnectionEmpty
43355>>>>>>>        Handle hoIniFile
43355>>>>>>>        Integer iSize iCount iRetval
43355>>>>>>>
43355>>>>>>>        Get psIniFilePath to sPath
43356>>>>>>>        Get phoSQLConnectionIniFile to hoIniFile
43357>>>>>>>        If (sPath = "") Begin
43359>>>>>>>            Get ApplicationPath of hoIniFile to sPath
43360>>>>>>>            Set psIniFilePath   of hoIniFile to sPath
43361>>>>>>>        End
43361>>>>>>>>
43361>>>>>>>        Get vFolderFormat sPath to sPath
43362>>>>>>>        Get psIniFileName to sFileName
43363>>>>>>>        Get vFilePathExists (sPath + sFileName) to bExists
43364>>>>>>>
43364>>>>>>>        Get SQLIniFileReadConnections of hoIniFile to SQLConnectionArray
43365>>>>>>>        Move (SizeOfArray(SQLConnectionArray)) to iSize
43366>>>>>>>        If (iSize = 0) Begin
43368>>>>>>>            // This may have been set by the "ReadcConnections" function,
43368>>>>>>>            // if a cConnection object has been setup for DataFlex 19 or later
43368>>>>>>>            // in the cApplication object.
43368>>>>>>>            Get pSQLConnection to SQLConnection
43369>>>>>>>            If (SQLConnection.sConnectionID = "") Begin
43371>>>>>>>                Function_Return SQLConnectionEmpty
43372>>>>>>>            End
43372>>>>>>>>
43372>>>>>>>            Move SQLConnection to SQLConnectionArray[0] 
43373>>>>>>>            Move 1 to iSize
43374>>>>>>>        End
43374>>>>>>>>
43374>>>>>>>
43374>>>>>>>        Move False to bActive
43375>>>>>>>        // The first connection should be the one that is active, but all connections might have been disabled.
43375>>>>>>>        Decrement iSize
43376>>>>>>>        For iCount from 0 to iSize
43382>>>>>>>>
43382>>>>>>>            Move SQLConnectionArray[iCount] to SQLConnection
43383>>>>>>>            If (SQLConnection.bEnabled = True) Begin
43385>>>>>>>                Move True to bActive
43386>>>>>>>                Move iSize to iCount // We've found the enabled item, so we're out of here.
43387>>>>>>>            End
43387>>>>>>>>
43387>>>>>>>        Loop
43388>>>>>>>>
43388>>>>>>>
43388>>>>>>>        // In case all connections have been disabled, we're out of here.
43388>>>>>>>        If (bActive = False) Begin
43390>>>>>>>            Function_Return SQLConnectionEmpty
43391>>>>>>>        End
43391>>>>>>>>
43391>>>>>>>
43391>>>>>>>        Send CreateSQLConnection SQLConnection.sDriverID SQLConnection.sConnectionID ;             SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted ;             SQLConnection.sUserID SQLConnection.sPassword SQLConnection.bSilentLogin False
43392>>>>>>>
43392>>>>>>>        Set pSQLConnection to SQLConnection
43393>>>>>>>        Get AutoSetConnectionID to iRetval
43394>>>>>>>
43394>>>>>>>        Function_Return SQLConnection
43395>>>>>>>    End_Function
43396>>>>>>>
43396>>>>>>>    Procedure Set psIniFilePath String sPath
43398>>>>>>>        Set psIniFilePath of (phoSQLConnectionIniFile(Self)) to sPath
43399>>>>>>>    End_Procedure
43400>>>>>>>
43400>>>>>>>    Function psIniFilePath Returns String
43402>>>>>>>        String sRetval
43402>>>>>>>        Get psIniFilePath of (phoSQLConnectionIniFile(Self)) to sRetval
43403>>>>>>>        Function_Return sRetval
43404>>>>>>>    End_Function
43405>>>>>>>
43405>>>>>>>    Procedure Set psIniFileName String sFileName
43407>>>>>>>        Set psIniFileName of (phoSQLConnectionIniFile(Self)) to sFileName
43408>>>>>>>    End_Procedure
43409>>>>>>>
43409>>>>>>>    Function psIniFileName Returns String
43411>>>>>>>        String sRetval
43411>>>>>>>        Get psIniFileName of (phoSQLConnectionIniFile(Self)) to sRetval
43412>>>>>>>        Function_Return sRetval
43413>>>>>>>    End_Function
43414>>>>>>>
43414>>>>>>>    Procedure Set psIniSectionName String sSection
43416>>>>>>>        Set psIniSectionName of (phoSQLConnectionIniFile(Self)) to sSection
43417>>>>>>>    End_Procedure
43418>>>>>>>
43418>>>>>>>    Function psIniSectionName Returns String
43420>>>>>>>        String sRetval
43420>>>>>>>        Get psIniSectionName of (phoSQLConnectionIniFile(Self)) to sRetval
43421>>>>>>>        Function_Return sRetval
43422>>>>>>>    End_Function
43423>>>>>>>
43423>>>>>>>    Procedure Set IniFileValue String sSection String sValueName String sValue
43425>>>>>>>        Handle ho
43425>>>>>>>        Get phoSQLConnectionIniFile to ho
43426>>>>>>>        Set IniFileValue of ho to sSection sValueName sValue
43427>>>>>>>    End_Procedure
43428>>>>>>>
43428>>>>>>>    Function IniFileValue String sSection String sValueName String sDefaultValue Returns String
43430>>>>>>>        Handle ho
43430>>>>>>>        String sRetval
43430>>>>>>>        Get phoSQLConnectionIniFile to ho
43431>>>>>>>        Get IniFileValue of ho sSection sValueName sDefaultValue to sRetval
43432>>>>>>>        Function_Return sRetval
43433>>>>>>>    End_Function
43434>>>>>>>
43434>>>>>>>    Function SectionExists String sSection Returns Boolean
43436>>>>>>>        Handle ho
43436>>>>>>>        Boolean bRetval
43436>>>>>>>        Get phoSQLConnectionIniFile to ho
43437>>>>>>>        Get SectionExists of ho sSection to bRetval
43438>>>>>>>        Function_Return bRetval
43439>>>>>>>    End_Function
43440>>>>>>>
43440>>>>>>>    Function KeyExists String sSection String sKey Returns Boolean
43442>>>>>>>        Handle ho
43442>>>>>>>        Boolean bRetval
43442>>>>>>>        Get phoSQLConnectionIniFile to ho
43443>>>>>>>        Get KeyExists of ho sSection sKey to bRetval
43444>>>>>>>        Function_Return bRetval
43445>>>>>>>    End_Function
43446>>>>>>>
43446>>>>>>>    Function EncryptPassword String sPassword Returns String
43448>>>>>>>        Handle ho
43448>>>>>>>        String sRetval
43448>>>>>>>        Get phoSQLConnectionIniFile to ho
43449>>>>>>>        Get EncryptPassword of ho sPassword to sRetval
43450>>>>>>>        Function_Return sRetval
43451>>>>>>>    End_Function
43452>>>>>>>
43452>>>>>>>    Function DecryptPassword String sPassword Returns String
43454>>>>>>>        Handle ho
43454>>>>>>>        String sRetval
43454>>>>>>>        Get phoSQLConnectionIniFile to ho
43455>>>>>>>        Get DecryptPassword of ho sPassword to sRetval
43456>>>>>>>        Function_Return sRetval
43457>>>>>>>    End_Function
43458>>>>>>>
43458>>>>>>>    // *** Main Connection Message ***
43458>>>>>>>    Procedure CreateSQLConnection String sDriverID String sConnectionID String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Boolean bSilent Boolean bExitProgram
43460>>>>>>>        Handle hoDriver
43460>>>>>>>        String sConnectionString sError
43460>>>>>>>        Boolean bLoginSuccessful
43460>>>>>>>
43460>>>>>>>        Get ConstructConnectionString sDriverID sServer sDatabase bTrusted sUserID sPassword to sConnectionString
43461>>>>>>>        Get Create (RefClass(cDbUpdateDatabaseDriver)) to hoDriver
43462>>>>>>>        Set psDriverID of hoDriver to sDriverID
43463>>>>>>>        Get DbLogin of hoDriver sConnectionString sServer sDatabase bTrusted sUserID sPassword to bLoginSuccessful
43464>>>>>>>        If (bLoginSuccessful = False) Begin
43466>>>>>>>            Error DFERR_PROGRAM (CS_DUF_CannotLoginToServer * CS_DUF_ErrorText * String(sError) + "\nConnectionID = " * sConnectionID + "\nConnection String = " * sConnectionString)   
43467>>>>>>>>
43467>>>>>>>            If (bExitProgram = True) Begin
43469>>>>>>>                Send Exit_Application
43470>>>>>>>            End
43470>>>>>>>>
43470>>>>>>>        End
43470>>>>>>>>
43470>>>>>>>        Send Destroy of hoDriver
43471>>>>>>>    End_Procedure
43472>>>>>>>
43472>>>>>>>    Function RedirectConnection String sOldConnection String sNewConnection Returns Integer
43474>>>>>>>        Integer iRetval
43474>>>>>>>        Handle hoCLI
43474>>>>>>>        String sDriverID
43474>>>>>>>
43474>>>>>>>        Get psDriverID to sDriverID
43475>>>>>>>        Get Create (Refclass(cCLIHandler)) to hoCLI
43476>>>>>>>        If (hoCLI <> 0) Begin
43478>>>>>>>            Set psDriverID of hoCLI to sDriverID
43479>>>>>>>            Get RedirectConnection of hoCLI sOldConnection sNewConnection to iRetval
43480>>>>>>>            Send Destroy of hoCLI
43481>>>>>>>        End
43481>>>>>>>>
43481>>>>>>>
43481>>>>>>>        Function_Return iRetval
43482>>>>>>>    End_Function
43483>>>>>>>
43483>>>>>>>    Procedure CreateConnParamsFromConnectionString String sDriverID String sConnectionString
43485>>>>>>>        tSQLConnection SQLConnection
43485>>>>>>>        tSQLConnection SQLConnection
43485>>>>>>>
43485>>>>>>>        Set psDriverID to sDriverID
43486>>>>>>>        Get DeComposeConnectionString sDriverID sConnectionString to SQLConnection
43487>>>>>>>        Send CreateSQLConnection SQLConnection.sDriverID SQLConnection.sConnectionID SQLConnection.sServer;                                 SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword SQLConnection.bTrusted False
43488>>>>>>>    End_Procedure
43489>>>>>>>
43489>>>>>>>    // This is needed when e.g. the connection id we have specified in the program code
43489>>>>>>>    // also exists in e.g. the MSSQLDRV.ini file (can either be local in the Data folder
43489>>>>>>>    // or the one in the DataFlex Bin folder.)
43489>>>>>>>    // We then need to delete the current one before creating a new one.
43489>>>>>>>    // This is because the parameters may differ between the program code and the
43489>>>>>>>    // MSSQLDRV.ini file in a deployed environment. Also DataFlex will generate an error
43489>>>>>>>    // when one tries to create a Connection ID that already exists.
43489>>>>>>>    Procedure RemoveExistingConnectionID String sDriverID String sConnectionID
43491>>>>>>>        Integer iResult iDriver iNumConn iConn
43491>>>>>>>        Handle hoCLI
43491>>>>>>>        String sID
43491>>>>>>>
43491>>>>>>>        If (sDriverID = "" or sConnectionID = "") Begin
43493>>>>>>>            Procedure_Return
43494>>>>>>>        End
43494>>>>>>>>
43494>>>>>>>
43494>>>>>>>        Move 0 to iResult
43495>>>>>>>        Get Create (RefClass(cCLIHandler)) to hoCLI
43496>>>>>>>        If (hoCLI <> 0) Begin
43498>>>>>>>            Set psDriverID of hoCLI to sDriverID
43499>>>>>>>            Get DriverIndex sDriverID to iDriver
43500>>>>>>>            Get_Attribute DF_DRIVER_NUMBER_CONNECTION_IDS of iDriver to iNumConn
43503>>>>>>>            Decrement iNumConn
43504>>>>>>>            For iConn from 0 to iNumConn
43510>>>>>>>>
43510>>>>>>>                Get_Attribute DF_DRIVER_CONNECTION_ID of iDriver iConn to sID
43513>>>>>>>                If (Uppercase(sID) = Uppercase(sConnectionID)) Begin
43515>>>>>>>                    Get DeleteConnectionID of hoCLI sConnectionID -1 to iResult
43516>>>>>>>                End
43516>>>>>>>>
43516>>>>>>>            Loop
43517>>>>>>>>
43517>>>>>>>            Send Destroy of hoCLI
43518>>>>>>>        End
43518>>>>>>>>
43518>>>>>>>
43518>>>>>>>    End_Procedure
43519>>>>>>>
43519>>>>>>>    Function ExistingConnectionSettings String sDriverID String sConnectionID Returns tSQLConnection
43521>>>>>>>        Integer iResult iDriver iNumConn iConn
43521>>>>>>>        Handle hoCLI
43521>>>>>>>        String sID sConnectionString sVal sDatabase
43521>>>>>>>        tSQLConnection SQLConnection
43521>>>>>>>        tSQLConnection SQLConnection
43521>>>>>>>        Boolean bTrusted
43521>>>>>>>
43521>>>>>>>        Move 0 to iResult
43522>>>>>>>        Get Create (RefClass(cCLIHandler)) to hoCLI
43523>>>>>>>        If (hoCLI <> 0) Begin
43525>>>>>>>            Set psDriverID of hoCLI to sDriverID
43526>>>>>>>            Get DriverIndex sDriverID to iDriver
43527>>>>>>>            Get_Attribute DF_DRIVER_NUMBER_CONNECTION_IDS of iDriver to iNumConn
43530>>>>>>>            Decrement iNumConn
43531>>>>>>>            For iConn from 0 to iNumConn
43537>>>>>>>>
43537>>>>>>>                Get_Attribute DF_DRIVER_CONNECTION_ID of iDriver iConn to sID
43540>>>>>>>                If (Uppercase(sID) = Uppercase(sConnectionID)) Begin
43542>>>>>>>                    Move sDriverID                                                      to SQLConnection.sDriverID      // For completeness only...
43543>>>>>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID of iDriver iConn              to SQLConnection.sConnectionID  // For completeness only...
43546>>>>>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID_STRING of iDriver iConn       to sConnectionString
43549>>>>>>>                    Move sConnectionString                                              to SQLConnection.sConnectionString
43550>>>>>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID_OPTIONS of iDriver iConn      to SQLConnection.bSilentLogin
43553>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniServerKeyword + "=")   to SQLConnection.sServer
43554>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniDatabaseKeyword + "=") to SQLConnection.sDatabase
43555>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")      to SQLConnection.sUserID
43556>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")      to SQLConnection.sPassword
43557>>>>>>>
43557>>>>>>>                    Case Begin
43557>>>>>>>                        Case (sDriverID = MSSQLDRV_ID)
43559>>>>>>>                            Get ParseKeyWord sConnectionString (CS_SQLIniTrustedKeyword + "=") to sVal
43560>>>>>>>                            Move (If(Uppercase(sVal) = Uppercase(CS_SQLIniConnectionYes), True, False)) to bTrusted
43561>>>>>>>                            Move bTrusted                                               to SQLConnection.bTrusted
43562>>>>>>>                            Case Break
43563>>>>>>>                        Case (sDriverID = DB2_DRV_ID)
43566>>>>>>>                            Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=") to SQLConnection.sServer
43567>>>>>>>                            Case Break
43568>>>>>>>                        Case (sDriverID = ODBC_DRV_ID)
43571>>>>>>>                            Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=") to SQLConnection.sServer
43572>>>>>>>                            If (SQLConnection.sServer = "") Begin
43574>>>>>>>                                Get ParseKeyWord sConnectionString (CS_SQLIniFileDSNKeyword  + "=") to SQLConnection.sServer
43575>>>>>>>                            End
43575>>>>>>>>
43575>>>>>>>                            Case Break
43576>>>>>>>                        Case Else
43576>>>>>>>                            Error ("Wrong driver ID passed:" * sDriverID)
43577>>>>>>>>
43577>>>>>>>                            Case Break
43578>>>>>>>                    Case End
43578>>>>>>>                End
43578>>>>>>>>
43578>>>>>>>            Loop
43579>>>>>>>>
43579>>>>>>>            Send Destroy of hoCLI
43580>>>>>>>        End
43580>>>>>>>>
43580>>>>>>>
43580>>>>>>>        Function_Return SQLConnection
43581>>>>>>>    End_Function
43582>>>>>>>
43582>>>>>>>    Function DriverIndex String sDriverID Returns Integer
43584>>>>>>>        String  sCurrentDriver
43584>>>>>>>        Integer iNumberOfDrivers iDriver iCount
43584>>>>>>>
43584>>>>>>>        Move 0 to iDriver
43585>>>>>>>        Move 0 to iCount
43586>>>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
43589>>>>>>>        For iCount from 1 to iNumberOfDrivers
43595>>>>>>>>
43595>>>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
43598>>>>>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriverID) ) Begin
43600>>>>>>>                Function_Return iCount
43601>>>>>>>            End
43601>>>>>>>>
43601>>>>>>>        Loop
43602>>>>>>>>
43602>>>>>>>
43602>>>>>>>        // If driver not previously loaded; attempt to do so now.
43602>>>>>>>        If (iDriver = 0) Begin
43604>>>>>>>            Move 0 to LastErr
43605>>>>>>>            Load_Driver sDriverID
43606>>>>>>>            // If driver could not be loaded.
43606>>>>>>>            If (LastErr = DFERR_CANT_LOAD_DLL) Begin
43608>>>>>>>                Move -1 to iCount
43609>>>>>>>            End
43609>>>>>>>>
43609>>>>>>>        End
43609>>>>>>>>
43609>>>>>>>        Function_Return iCount
43610>>>>>>>    End_Function
43611>>>>>>>
43611>>>>>>>    // This will update connection settings of the cCLIHandler object with that passed struct values.
43611>>>>>>>    Procedure UpdateConnectionString tSQLConnection SQLConnection
43613>>>>>>>        String sDriverID sConnectionID sServer sDatabase sUserID sPassword
43613>>>>>>>        Boolean bTrusted bSilent
43613>>>>>>>        Integer iRetval
43613>>>>>>>
43613>>>>>>>        Move SQLConnection.sDriverID     to sDriverID
43614>>>>>>>        Move SQLConnection.sConnectionID to sConnectionID
43615>>>>>>>        Move SQLConnection.sServer       to sServer
43616>>>>>>>        Move SQLConnection.sDatabase     to sDatabase
43617>>>>>>>        Move SQLConnection.bTrusted      to bTrusted
43618>>>>>>>        Move SQLConnection.sUserID       to sUserID
43619>>>>>>>        Move SQLConnection.sPassword     to sPassword
43620>>>>>>>        Move SQLConnection.bSilentLogin  to bSilent
43621>>>>>>>
43621>>>>>>>        Send CreateSQLConnection sDriverID sConnectionID sServer sDatabase bTrusted sUserID sPassword bSilent False
43622>>>>>>>        // Note that this message will first delete the current ConnectionID if it exists; which is needed by the cCLIHandler logic.
43622>>>>>>>        Get AutoSetConnectionID to iRetval
43623>>>>>>>    End_Procedure
43624>>>>>>>
43624>>>>>>>    // Called when the object is constructed.
43624>>>>>>>    // It will check the psDriverID for a ConnectionID and save it
43624>>>>>>>    // as psConnectionID property. It is later used whenever a login to
43624>>>>>>>    // the database is needed.
43624>>>>>>>    Function AutoSetConnectionID Returns Boolean
43626>>>>>>>        String sConnectionID sDriverID sConnectionString
43626>>>>>>>        Integer iDriver iRetval
43626>>>>>>>        Handle hoCLI
43626>>>>>>>        Boolean bOK bSilent
43626>>>>>>>
43626>>>>>>>        Get pbSilentLogin      to bSilent
43627>>>>>>>        Get psConnectionID     to sConnectionID
43628>>>>>>>        Get psConnectionString to sConnectionString
43629>>>>>>>        // Get the driver Connection ID string & set the psConnectionString property.
43629>>>>>>>        Get psDriverID to sDriverID
43630>>>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
43631>>>>>>>        If (bOK = False) Begin
43633>>>>>>>            Function_Return False
43634>>>>>>>        End
43634>>>>>>>>
43634>>>>>>>
43634>>>>>>>        Get DriverIndex sDriverID          to iDriver
43635>>>>>>>        // If driver not loaded; load it.
43635>>>>>>>        If (iDriver = 0) Begin
43637>>>>>>>            Load_Driver sDriverID
43638>>>>>>>            Get DriverIndex sDriverID      to iDriver
43639>>>>>>>        End
43639>>>>>>>>
43639>>>>>>>        // This shouldn't be possible; unless the driver.dll file is missing or something...
43639>>>>>>>        If (iDriver = 0) Begin
43641>>>>>>>            Error DFERR_PROGRAM ("The database driver could not be loaded! Connection to database failed." * sDriverID)
43642>>>>>>>>
43642>>>>>>>            Function_Return False
43643>>>>>>>        End           
43643>>>>>>>>
43643>>>>>>>            Set_Attribute DF_DRIVER_LOGIN_ON_OPEN of iDriver to True
43646>>>>>>>        
43646>>>>>>>        Get Create (RefClass(cCLIHandler)) to hoCLI
43647>>>>>>>        Set psDriverID of hoCLI            to sDriverID
43648>>>>>>>        // Delete the connection first; in case it exists
43648>>>>>>>        Get DeleteConnectionID of hoCLI sConnectionID -1 to iRetval
43649>>>>>>>        Get CreateConnectionID of hoCLI sConnectionID sConnectionString bSilent to iRetval 
43650>>>>>>>        Send Destroy of hoCLI
43651>>>>>>>
43651>>>>>>>        Function_Return (iRetval = 0)
43652>>>>>>>    End_Function
43653>>>>>>>
43653>>>>>>>    Function _SqlCheckCurrentDriver String sDriverID Returns Boolean
43655>>>>>>>        Boolean bOK
43655>>>>>>>
43655>>>>>>>        Get IsDAWSQLDriver sDriverID to bOK
43656>>>>>>>
43656>>>>>>>        If (bOK = False) Begin
43658>>>>>>>            Error DFERR_PROGRAM "Driver needs to be one of MSSQLDRV_ID, DB2_DRV_ID or ODBC_DRV_ID"
43659>>>>>>>>
43659>>>>>>>            Function_Return False
43660>>>>>>>        End
43660>>>>>>>>
43660>>>>>>>
43660>>>>>>>        Function_Return True
43661>>>>>>>    End_Function
43662>>>>>>>
43662>>>>>>>    Function IsDAWSQLDriver String sDriverID Returns Boolean
43664>>>>>>>        Boolean bOK
43664>>>>>>>        Move (sDriverID = MSSQLDRV_ID or sDriverID = DB2_DRV_ID or sDriverID = ODBC_DRV_ID) to bOK
43665>>>>>>>        Function_Return bOK
43666>>>>>>>    End_Function
43667>>>>>>>
43667>>>>>>>    Function ConstructConnectionString String sDriverID String sServer String sDatabase Boolean bTrusted String sUserID String sPassword Returns String
43669>>>>>>>        Handle hoIniFile
43669>>>>>>>        String sConnect
43669>>>>>>>
43669>>>>>>>        Get phoSQLConnectionIniFile to hoIniFile
43670>>>>>>>        Get ConstructConnectionString of hoIniFile sDriverID sServer sDatabase bTrusted sUserID sPassword to sConnect
43671>>>>>>>
43671>>>>>>>        Function_Return sConnect
43672>>>>>>>    End_Function
43673>>>>>>>
43673>>>>>>>    // Sample sConnString: "SERVER=(local)\SQLEXPRESS;UID=dbuser;PWD=secret;DATABASE=OrderEntry;, 0"
43673>>>>>>>    // Pass a complete driver connection string
43673>>>>>>>    // Returns the following as a struct:
43673>>>>>>>    //   sServer, sDatabase, sUser, sPassword & True if Trusted_Connection is used.
43673>>>>>>>    // Finally also returns a boolean TRUE if trusted_connection=yes, else false is returned.
43673>>>>>>>    //
43673>>>>>>>    Function DeComposeConnectionString String sDriverID String sConnectionString Returns tSQLConnection
43675>>>>>>>        tSQLConnection SQLConnection
43675>>>>>>>        tSQLConnection SQLConnection
43675>>>>>>>        String sValue sConnectionID sServer sDatabase sUserID sPassword
43675>>>>>>>        Boolean bTrusted bSilent bOK
43675>>>>>>>        Integer iPos
43675>>>>>>>
43675>>>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
43676>>>>>>>        If (bOK = False) Begin
43678>>>>>>>            Function_Return SQLConnection
43679>>>>>>>        End
43679>>>>>>>>
43679>>>>>>>
43679>>>>>>>        Move False to bTrusted
43680>>>>>>>        Move False to bSilent
43681>>>>>>>
43681>>>>>>>        Case Begin
43681>>>>>>>            Case (sDriverID = MSSQLDRV_ID)
43683>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniServerKeyword + "=")   to sServer
43684>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniDatabaseKeyword + "=") to sDatabase
43685>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniTrustedKeyword + "=")  to sValue
43686>>>>>>>                Move (If(Uppercase(sValue) = "YES", True, False))                   to bTrusted
43687>>>>>>>                If (bTrusted = False) Begin
43689>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")  to sUserID
43690>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")  to sPassword
43691>>>>>>>                End
43691>>>>>>>>
43691>>>>>>>                Case Break
43692>>>>>>>
43692>>>>>>>            Case (sDriverID = ODBC_DRV_ID)
43695>>>>>>>                If (uppercase(sConnectionString) contains ("." + CS_SQLIniDSNKeyword)) Begin
43697>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniFileDSNKeyword + "=")  to sServer
43698>>>>>>>                End
43698>>>>>>>>
43698>>>>>>>                Else Begin
43699>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=")      to sServer
43700>>>>>>>                End
43700>>>>>>>>
43700>>>>>>>
43700>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniTrustedKeyword + "=")  to sValue
43701>>>>>>>                Move (If(Uppercase(sValue) = "YES", True, False))                   to bTrusted
43702>>>>>>>                If (bTrusted = False) Begin
43704>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")  to sUserID
43705>>>>>>>                    Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")  to sPassword
43706>>>>>>>                End
43706>>>>>>>>
43706>>>>>>>                Case Break
43707>>>>>>>
43707>>>>>>>            Case (sDriverID = DB2_DRV_ID)
43710>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniDSNKeyword + "=")      to sServer
43711>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniUIDKeyword + "=")      to sUserID
43712>>>>>>>                Get ParseKeyWord sConnectionString (CS_SQLIniPWDKeyword + "=")      to sPassword
43713>>>>>>>                Case Break
43714>>>>>>>
43714>>>>>>>            Case (sDriverID = DATAFLEX_ID)    // Dummy stub.
43717>>>>>>>                Break
43718>>>>>>>        Case End
43718>>>>>>>
43718>>>>>>>        Get ParseKeyWord sConnectionString (Uppercase(CS_SQLConnectionIDText))  to sConnectionID
43719>>>>>>>
43719>>>>>>>        // bSilent?
43719>>>>>>>        Move (Pos(",0", sConnectionString))                                     to iPos
43720>>>>>>>        If (iPos = 0) Begin
43722>>>>>>>            Move (Pos(",1", sConnectionString))                                 to iPos
43723>>>>>>>        End
43723>>>>>>>>
43723>>>>>>>        If (iPos = 0) Begin
43725>>>>>>>            Move "0"                                                            to sValue
43726>>>>>>>        End
43726>>>>>>>>
43726>>>>>>>        Else Begin
43727>>>>>>>            Move (Mid(sConnectionString, 1, (iPos +1)))                         to sValue
43728>>>>>>>        End
43728>>>>>>>>
43728>>>>>>>        Move (If(sValue = 1, True, False))                                      to bSilent
43729>>>>>>>
43729>>>>>>>        Move (Trim(sDriverID))                                                  to SQLConnection.sDriverID
43730>>>>>>>        Move (Trim(sConnectionID))                                              to SQLConnection.sConnectionID
43731>>>>>>>        Move (Trim(sConnectionString))                                          to SQLConnection.sConnectionString
43732>>>>>>>        Move (Trim(sServer))                                                    to SQLConnection.sServer
43733>>>>>>>        Move (Trim(sDatabase))                                                  to SQLConnection.sDatabase
43734>>>>>>>        Move bTrusted                                                           to SQLConnection.bTrusted
43735>>>>>>>        Move (Trim(sUserID))                                                    to SQLConnection.sUserID
43736>>>>>>>        Move (Trim(sPassword))                                                  to SQLConnection.sPassword
43737>>>>>>>        Move bSilent                                                            to SQLConnection.bSilentLogin
43738>>>>>>>
43738>>>>>>>        Function_Return SQLConnection
43739>>>>>>>    End_Function
43740>>>>>>>
Including file: ParseKeyWord.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ParseKeyWord.pkg)
43740>>>>>>>>
43740>>>>>>>>Function ParseKeyWord String sConnect String sKeyWord Returns String
43742>>>>>>>>    Integer iStart iEnd
43742>>>>>>>>    String sRetval
43742>>>>>>>>
43742>>>>>>>>    Move (Trim(sConnect)) to sConnect
43743>>>>>>>>    Move (Pos(Uppercase(sKeyWord), Uppercase(sConnect)))  to iStart
43744>>>>>>>>    If (iStart = 0) Begin
43746>>>>>>>>        Function_Return ""
43747>>>>>>>>    End
43747>>>>>>>>>
43747>>>>>>>>    Move (Left(sConnect, (iStart -1 + Length(sKeyWord)))) to sRetval
43748>>>>>>>>    Move (Replace(sRetval, sConnect, "")) to sRetval
43749>>>>>>>>    If (sKeyWord = Uppercase(CS_SQLConnectionIDText)) Begin
43751>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
43752>>>>>>>>    End
43752>>>>>>>>>
43752>>>>>>>>    Else Begin
43753>>>>>>>>        Move (Pos(";", sRetval))          to iEnd
43754>>>>>>>>    End
43754>>>>>>>>>
43754>>>>>>>>    If (iEnd = 0 and (sRetval contains ",")) Begin
43756>>>>>>>>        Move (Pos(",", sRetval))          to iEnd
43757>>>>>>>>        Decrement iEnd
43758>>>>>>>>    End
43758>>>>>>>>>
43758>>>>>>>>    If (iEnd <> 0) Begin
43760>>>>>>>>        Move (Left(sRetval, (iEnd -1)))   to sRetval
43761>>>>>>>>    End
43761>>>>>>>>>
43761>>>>>>>>    Move (Replace("=", sRetval, ""))      to sRetval
43762>>>>>>>>
43762>>>>>>>>    Function_Return (Trim(sRetval))
43763>>>>>>>>End_Function
43764>>>>>>>>
43764>>>>>>>>
43764>>>>>>>
43764>>>>>>>    // To update the SQLSettings.ini file with updated connection data (SQLConnection struct data).
43764>>>>>>>    Function SQLIniFileSetDefaultConnection String sConnectionID Returns Boolean
43766>>>>>>>        Handle ho
43766>>>>>>>        Integer iIndex
43766>>>>>>>        Boolean bRetval bOK
43766>>>>>>>        tSQLConnection SQLConnection
43766>>>>>>>        tSQLConnection SQLConnection
43766>>>>>>>
43766>>>>>>>        Get pSQLConnection to SQLConnection
43767>>>>>>>        Get phoSQLConnectionIniFile to ho
43768>>>>>>>        Get SQLIniFileConnectionIDIndex of ho sConnectionID to iIndex
43769>>>>>>>        If (iIndex = -1) Begin
43771>>>>>>>            Function_Return False
43772>>>>>>>        End
43772>>>>>>>>
43772>>>>>>>
43772>>>>>>>        Get SQLIniFileUpdateConnection of ho SQLConnection to bRetval
43773>>>>>>>        Send UpdateConnectionString SQLConnection
43774>>>>>>>        If (ghoConnection > 0) Begin
43776>>>>>>>            Get ConnectionIdIndex of ghoConnection SQLConnection.sConnectionID to iIndex
43777>>>>>>>            If (iIndex <> -1) Begin
43779>>>>>>>                Get RedirectConnectionId of ghoConnection SQLConnection.sConnectionID (SQLConnection.sServer + ";" + CS_SQLIniDatabaseKeyword + "=" + SQLConnection.sDatabase) SQLConnection.sUserID SQLConnection.sPassword SQLConnection.bTrusted True to bOK
43780>>>>>>>            End
43780>>>>>>>>
43780>>>>>>>        End
43780>>>>>>>>
43780>>>>>>>
43780>>>>>>>        Function_Return bRetval
43781>>>>>>>    End_Function
43782>>>>>>>
43782>>>>>>>End_Class
43783>>>>>Use vWin32fh.pkg
43783>>>>>Use Dfabout.pkg
Including file: DfAbout.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\DFAbout20\DfAbout.pkg)
43783>>>>>>>Use LanguageText.pkg
43783>>>>>>>Use Windows.pkg
43783>>>>>>>Use Dfclient.pkg
Including file: Dfclient.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Dfclient.pkg)
43783>>>>>>>>>Use Windows.pkg
43783>>>>>>>>>Use DfPanel.pkg
43783>>>>>>>>>Use EnClient.pkg
Including file: Enclient.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Enclient.pkg)
43783>>>>>>>>>>>Use windows.pkg
43783>>>>>>>>>>>Use NESTING.pkg       //include DEO nesting standard support module
Including file: nesting.pkg    (C:\Program Files\DataFlex 23.0\Pkg\nesting.pkg)
43783>>>>>>>>>>>>>Use VDFBase.pkg
43783>>>>>>>>>>>>>
43783>>>>>>>>>>>>>Class nesting_mixin is a mixin
43784>>>>>>>>>>>>>    
43784>>>>>>>>>>>>>    //   Component_State indicates if this object has a parent object which is
43784>>>>>>>>>>>>>    //   also a data-entry object.
43784>>>>>>>>>>>>>    //
43784>>>>>>>>>>>>>    //   Has_Components_State indicates if this object has at least one child-
43784>>>>>>>>>>>>>    //   object which is also a data-entry object.
43784>>>>>>>>>>>>>    //
43784>>>>>>>>>>>>>    //   First_DEO and Last_DEO are used temporarily during the searches for
43784>>>>>>>>>>>>>    //   the first and last data-entry object children of this object (see
43784>>>>>>>>>>>>>    //   Find_First_DEO, Find_Last_DEO, Inquire_First_DEO and Inquire_Last_DEO).
43784>>>>>>>>>>>>>    //
43784>>>>>>>>>>>>>    Procedure define_nesting
43786>>>>>>>>>>>>>        Property Integer Component_State        0
43787>>>>>>>>>>>>>        Property Integer Has_Components_State   0
43788>>>>>>>>>>>>>        Property Integer First_DEO              0
43789>>>>>>>>>>>>>        Property Integer Last_DEO               0
43790>>>>>>>>>>>>>        
43790>>>>>>>>>>>>>        // Stop_ui support - Moved from its own mixin package.
43790>>>>>>>>>>>>>        Property Integer Stop_UI_State False
43791>>>>>>>>>>>>>        
43791>>>>>>>>>>>>>    End_Procedure
43792>>>>>>>>>>>>>    
43792>>>>>>>>>>>>>    
43792>>>>>>>>>>>>>    //   This procedure is used to locate the first data-entry object among
43792>>>>>>>>>>>>>    //   this object's siblings (its parent's children).
43792>>>>>>>>>>>>>    //
43792>>>>>>>>>>>>>    //   This procedure is typically invoked via the BROADCAST command from
43792>>>>>>>>>>>>>    //   the Find_First_DEO function of this object's parent.
43792>>>>>>>>>>>>>    //
43792>>>>>>>>>>>>>    Procedure inquire_first_DEO Integer obj# Integer recurseClients
43794>>>>>>>>>>>>>        If (focus_mode(Self) = FOCUSABLE) Begin
43796>>>>>>>>>>>>>            If (recurseClients and client_area_state(Self)) ;                Broadcast_Focus Send inquire_first_DEO obj# recurseClients
43800>>>>>>>>>>>>>            Else Begin
43801>>>>>>>>>>>>>                Set first_DEO of obj# to Self
43802>>>>>>>>>>>>>                Procedure_Return 1  //to stop broadcast, since this object answered
43803>>>>>>>>>>>>>            End
43803>>>>>>>>>>>>>>
43803>>>>>>>>>>>>>        End
43803>>>>>>>>>>>>>>
43803>>>>>>>>>>>>>    End_Procedure
43804>>>>>>>>>>>>>    
43804>>>>>>>>>>>>>    //   If this object is focusable, set Lastt_DEO to this object's id.
43804>>>>>>>>>>>>>    //
43804>>>>>>>>>>>>>    //   This procedure is used to locate the last data-entry object among
43804>>>>>>>>>>>>>    //   this object's siblings (its parent's children).
43804>>>>>>>>>>>>>    //
43804>>>>>>>>>>>>>    //   This procedure is typically invoked via the BROADCAST command from
43804>>>>>>>>>>>>>    //   the Find_Last_DEO function of this object's parent.
43804>>>>>>>>>>>>>    //
43804>>>>>>>>>>>>>    Procedure inquire_last_DEO Integer obj# Integer recurseClients
43806>>>>>>>>>>>>>        If (focus_mode(Self) = FOCUSABLE) Begin
43808>>>>>>>>>>>>>            If (recurseClients and client_area_state(Self)) ;                Broadcast_Focus Send inquire_last_DEO obj# recurseClients
43812>>>>>>>>>>>>>            Else ;                Set last_DEO of obj# to Self
43814>>>>>>>>>>>>>        End
43814>>>>>>>>>>>>>>
43814>>>>>>>>>>>>>    End_Procedure
43815>>>>>>>>>>>>>    
43815>>>>>>>>>>>>>    //   This function returns the object id of the first data-entry object
43815>>>>>>>>>>>>>    //   which is a child of this object, or 0.
43815>>>>>>>>>>>>>    //
43815>>>>>>>>>>>>>    //   This function 'searches' by broadcasting Inquire_First_DEO, which
43815>>>>>>>>>>>>>    //   returns a 1 to terminate the broadcast after the first data-entry
43815>>>>>>>>>>>>>    //   object has been located.
43815>>>>>>>>>>>>>    //
43815>>>>>>>>>>>>>    Function find_first_DEO Returns Integer
43817>>>>>>>>>>>>>        Set First_DEO to 0
43818>>>>>>>>>>>>>        Broadcast_Focus Send inquire_first_DEO Self False //sets First_DEO property
43820>>>>>>>>>>>>>        Function_Return (first_deo(Self))
43821>>>>>>>>>>>>>    End_Function
43822>>>>>>>>>>>>>    
43822>>>>>>>>>>>>>    
43822>>>>>>>>>>>>>    //   This function returns the object id of the last data-entry object
43822>>>>>>>>>>>>>    //   which is a child of this object, or 0.
43822>>>>>>>>>>>>>    //
43822>>>>>>>>>>>>>    //   This function 'searches' by broadcasting Inquire_Last_DEO, which sets
43822>>>>>>>>>>>>>    //   the property Last_DEO.  Thus, the last object reached by the broadcast
43822>>>>>>>>>>>>>    //   is the last value to be set into Last_DEO.
43822>>>>>>>>>>>>>    //
43822>>>>>>>>>>>>>    Function find_last_DEO Returns Integer
43824>>>>>>>>>>>>>        Set Last_DEO to 0
43825>>>>>>>>>>>>>        Broadcast_Focus Send inquire_last_DEO Self False //sets Last_DEO property
43827>>>>>>>>>>>>>        Function_Return (Last_DEO(Self))
43828>>>>>>>>>>>>>    End_Function
43829>>>>>>>>>>>>>    
43829>>>>>>>>>>>>>    //   Removes this object from the screen and focus-tree, and also removes
43829>>>>>>>>>>>>>    //   this object's children from the screen and focus-tree.
43829>>>>>>>>>>>>>    //
43829>>>>>>>>>>>>>    //   If no flag argument was passed, AREA_TYPE becomes the flag parameter.
43829>>>>>>>>>>>>>    //
43829>>>>>>>>>>>>>    //   Client-objects already automatically remove their children from the
43829>>>>>>>>>>>>>    //   focus-tree.
43829>>>>>>>>>>>>>    //
43829>>>>>>>>>>>>>    Procedure Deactivate Integer eDeactivateScope Returns Integer
43831>>>>>>>>>>>>>        Integer retval Fg
43831>>>>>>>>>>>>>        If (num_arguments > 0) ;            Move eDeactivateScope to Fg
43834>>>>>>>>>>>>>        Else ;            Move AREA_TYPE to Fg
43836>>>>>>>>>>>>>        Forward Get msg_deactivate fg to retval
43838>>>>>>>>>>>>>        
43838>>>>>>>>>>>>>        If ( not(retval) and (fg = 0) ) Begin
43840>>>>>>>>>>>>>            
43840>>>>>>>>>>>>>            // This broadcast no_stop is probably not ever used, but would be if a
43840>>>>>>>>>>>>>            // child was in the focus tree, but not as a focus-child. weird, but needs be here.
43840>>>>>>>>>>>>>            If ( client_Area_state(Self)=0) ;                Broadcast NO_STOP Send deactivate 0
43845>>>>>>>>>>>>>            
43845>>>>>>>>>>>>>            If ( Stop_UI_State(Self) ) ;                Send Stop_Ui
43848>>>>>>>>>>>>>        End
43848>>>>>>>>>>>>>>
43848>>>>>>>>>>>>>        Procedure_Return retval
43849>>>>>>>>>>>>>    End_Procedure
43850>>>>>>>>>>>>>    
43850>>>>>>>>>>>>>    //   This procedure marks an object as a child data-entry object, and
43850>>>>>>>>>>>>>    //   attempts to use its parent's Server if this object has no Server.
43850>>>>>>>>>>>>>    //   Typically sent via broadcast from parent DEO.
43850>>>>>>>>>>>>>    //
43850>>>>>>>>>>>>>    Procedure Mark_As_Component
43852>>>>>>>>>>>>>        Set Component_State to True
43853>>>>>>>>>>>>>        Delegate Set Has_Components_State to True
43855>>>>>>>>>>>>>    End_Procedure
43856>>>>>>>>>>>>>    
43856>>>>>>>>>>>>>    
43856>>>>>>>>>>>>>    //   This procedure marks child data-entry objects as components.
43856>>>>>>>>>>>>>    //
43856>>>>>>>>>>>>>    //   The child data-entry objects must understand Mark_As_Component as a
43856>>>>>>>>>>>>>    //   method of setting their Component_State to TRUE.
43856>>>>>>>>>>>>>    Procedure Mark_Components
43858>>>>>>>>>>>>>        Set Component_State to False
43859>>>>>>>>>>>>>        Broadcast Send Mark_As_Component
43861>>>>>>>>>>>>>    End_Procedure
43862>>>>>>>>>>>>>End_Class
43863>>>>>>>>>>>>>
43863>>>>>>>>>>>Use NAVIGATE.pkg      //include DEO navigation standard support module
Including file: navigate.pkg    (C:\Program Files\DataFlex 23.0\Pkg\navigate.pkg)
43863>>>>>>>>>>>>>
43863>>>>>>>>>>>>>
43863>>>>>>>>>>>>>
43863>>>>>>>>>>>>>Use VDFBase.pkg
43863>>>>>>>>>>>>>
43863>>>>>>>>>>>>>
43863>>>>>>>>>>>>>Register_Function verify_data_loss Returns Integer
43863>>>>>>>>>>>>>
43863>>>>>>>>>>>>>Class navigate_mixin is a mixin
43864>>>>>>>>>>>>>    
43864>>>>>>>>>>>>>    Procedure define_navigation
43866>>>>>>>>>>>>>        On_Key kBegin_of_Panel    Send Beginning_of_Panel PRIVATE
43867>>>>>>>>>>>>>        On_Key kCancel            Send Request_Cancel     PRIVATE
43868>>>>>>>>>>>>>        On_Key kEnd_of_Panel      Send End_of_Panel       PRIVATE
43869>>>>>>>>>>>>>        On_Key kExit_Function     Send Exit_Function      PRIVATE
43870>>>>>>>>>>>>>        On_Key kSwitch            Send Switch             PRIVATE
43871>>>>>>>>>>>>>        On_Key kSwitch_Back       Send Switch_Back        PRIVATE
43872>>>>>>>>>>>>>        Property Integer Auto_Top_Panel_State             True
43873>>>>>>>>>>>>>        Property Integer private.Verify_Exit_Msg          0
43874>>>>>>>>>>>>>    End_Procedure
43875>>>>>>>>>>>>>    
43875>>>>>>>>>>>>>    Function Verify_Exit_msg Returns Integer
43877>>>>>>>>>>>>>        Integer msg#
43877>>>>>>>>>>>>>        Get private.verify_exit_msg to msg#
43878>>>>>>>>>>>>>        If (msg# = 0 and Component_State(Self)) ;            Delegate Get verify_exit_msg to msg#
43882>>>>>>>>>>>>>        Function_Return msg#
43883>>>>>>>>>>>>>    End_Function
43884>>>>>>>>>>>>>    
43884>>>>>>>>>>>>>    
43884>>>>>>>>>>>>>    Procedure Set Verify_Exit_msg Integer msg#
43886>>>>>>>>>>>>>        Set private.verify_Exit_Msg to msg#
43887>>>>>>>>>>>>>    End_Procedure
43888>>>>>>>>>>>>>    
43888>>>>>>>>>>>>>    
43888>>>>>>>>>>>>>    Function Verify_Exit Returns Integer
43890>>>>>>>>>>>>>        Integer msg#
43890>>>>>>>>>>>>>        Get verify_Exit_msg to msg#
43891>>>>>>>>>>>>>        If (msg# <> 0) ;            Get msg# to msg#
43894>>>>>>>>>>>>>        Function_Return msg#
43895>>>>>>>>>>>>>    End_Function
43896>>>>>>>>>>>>>    
43896>>>>>>>>>>>>>    
43896>>>>>>>>>>>>>    
43896>>>>>>>>>>>>>    
43896>>>>>>>>>>>>>    //   The deactivate message-send passes AREA_FLAG, which means that we want
43896>>>>>>>>>>>>>    //   to deactivate the object in the focus tree which is either a scope
43896>>>>>>>>>>>>>    //   (i.e. Scope_State = TRUE) or a pop-up (i.e. PopUp_State = TRUE), and
43896>>>>>>>>>>>>>    //   which is closest to this object in an 'upward' direction (i.e.
43896>>>>>>>>>>>>>    //   client/parent, not child or sibling).
43896>>>>>>>>>>>>>    //
43896>>>>>>>>>>>>>    Procedure Request_Cancel
43898>>>>>>>>>>>>>        Integer foc#
43898>>>>>>>>>>>>>        If (verify_exit(Self) = 0) Begin
43900>>>>>>>>>>>>>            Send deactivate AREA_FLAG
43901>>>>>>>>>>>>>            Get focus of desktop to foc#
43902>>>>>>>>>>>>>            If (foc# and skip_State(foc#)) ;                Send switch to foc#
43905>>>>>>>>>>>>>        End
43905>>>>>>>>>>>>>>
43905>>>>>>>>>>>>>    End_Procedure
43906>>>>>>>>>>>>>    
43906>>>>>>>>>>>>>    
43906>>>>>>>>>>>>>    
43906>>>>>>>>>>>>>    Procedure Exit_Function
43908>>>>>>>>>>>>>        Send request_cancel
43909>>>>>>>>>>>>>    End_Procedure
43910>>>>>>>>>>>>>    
43910>>>>>>>>>>>>>End_Class
43911>>>>>>>>>>>>>
43911>>>>>>>>>>>>>
43911>>>>>>>>>>>>>
43911>>>>>>>>>>>Use SERVER.pkg        //include Server support module
Including file: Server.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Server.pkg)
43911>>>>>>>>>>>>>
43911>>>>>>>>>>>>>Use VDFBase.pkg
43911>>>>>>>>>>>>>Use brdcster.pkg
Including file: brdcster.pkg    (C:\Program Files\DataFlex 23.0\Pkg\brdcster.pkg)
43911>>>>>>>>>>>>>>>Use Set.pkg
43911>>>>>>>>>>>>>>>
43911>>>>>>>>>>>>>>>//   This class is defined as a subclass of Set with a C language handler
43911>>>>>>>>>>>>>>>//   providing additional behavior.
43911>>>>>>>>>>>>>>>//
43911>>>>>>>>>>>>>>>Class Broadcaster is a Set 0 0 Broadcast_Handler
43912>>>>>>>>>>>>>>>End_Class
43913>>>>>>>>>>>>>>>
43913>>>>>>>>>>>>>>>
43913>>>>>>>>>>>>>>>Function make_broadcaster for cDesktop Returns Integer
43915>>>>>>>>>>>>>>>    Integer obj#
43915>>>>>>>>>>>>>>>    Object broadcasterTemplate is a broadcaster
43917>>>>>>>>>>>>>>>        Move Self to obj#
43918>>>>>>>>>>>>>>>    End_Object
43919>>>>>>>>>>>>>>>    Function_Return obj#
43920>>>>>>>>>>>>>>>End_Function
43921>>>>>>>>>>>>>>>
43921>>>>>>>>>>>>>>>
43921>>>>>>>>>>>>>
43921>>>>>>>>>>>>>Register_Procedure Item_Find Integer mode Integer datafile Integer datafield ;    Integer entUpdtFlag Integer errFlag Integer dfrdFlag
43921>>>>>>>>>>>>>Register_Procedure Add_User_Interface Integer obj#
43921>>>>>>>>>>>>>Register_Procedure Remove_User_Interface Integer obj#
43921>>>>>>>>>>>>>Register_Procedure Clear
43921>>>>>>>>>>>>>Register_Function  Component_State Returns Integer
43921>>>>>>>>>>>>>Register_Function  Can_Delete Returns Integer
43921>>>>>>>>>>>>>Register_Object Element
43921>>>>>>>>>>>>>
43921>>>>>>>>>>>>>// Values for DSO_Detach_Mode
43921>>>>>>>>>>>>>//   DETACH_NEVER        = Never
43921>>>>>>>>>>>>>//   DETACH_IF_ALLOWED   = do if changed_state=F and DEO Static_Server
43921>>>>>>>>>>>>>//   DETACH_IF_NO_CHANGE = do if changed_state=F
43921>>>>>>>>>>>>>//   DETACH_ALWAYS       = do it no matter what
43921>>>>>>>>>>>>>
43921>>>>>>>>>>>>>Enumeration_List
43921>>>>>>>>>>>>>    Define Detach_Never
43921>>>>>>>>>>>>>    Define Detach_If_No_Change
43921>>>>>>>>>>>>>    Define Detach_Always
43921>>>>>>>>>>>>>    Define Detach_If_Allowed
43921>>>>>>>>>>>>>End_Enumeration_List
43921>>>>>>>>>>>>>
43921>>>>>>>>>>>>>
43921>>>>>>>>>>>>>Class server_mixin is a mixin
43922>>>>>>>>>>>>>    
43922>>>>>>>>>>>>>    //   Server is the object id of the database agent for this object.
43922>>>>>>>>>>>>>    //
43922>>>>>>>>>>>>>    //   Watched_Servers is a set of object ids for database agents whose state
43922>>>>>>>>>>>>>    //   must also be monitored by this object (but which never receive requests
43922>>>>>>>>>>>>>    //   directly from this object, unlike the Server).
43922>>>>>>>>>>>>>    //
43922>>>>>>>>>>>>>    //   Servers_Scanned determines if the items of this object have been
43922>>>>>>>>>>>>>    //   scanned to see if this object should be connected to other database
43922>>>>>>>>>>>>>    //   agents as 'just watching' (see Watched_Servers, above).
43922>>>>>>>>>>>>>    //
43922>>>>>>>>>>>>>    //   Auto_Fill_State determines if this object should always automatically
43922>>>>>>>>>>>>>    //   fill itself with data when it is activated.
43922>>>>>>>>>>>>>    //
43922>>>>>>>>>>>>>    //   Deferred_State determines if this object's browsing in database files
43922>>>>>>>>>>>>>    //   should be reflected immediately in this object's database agent (and
43922>>>>>>>>>>>>>    //   the agents' agents, etc.), or not.
43922>>>>>>>>>>>>>    //
43922>>>>>>>>>>>>>    //
43922>>>>>>>>>>>>>    Procedure define_server
43924>>>>>>>>>>>>>        Integer obj#
43924>>>>>>>>>>>>>        Property Integer private.Server           0
43925>>>>>>>>>>>>>        Property Integer Watched_Servers          0
43926>>>>>>>>>>>>>        // used to send Set Changed_State to "foreign" servers, while Watched_Servers
43926>>>>>>>>>>>>>        // is used for sending messages from the DDO to DEOs (there are more of them)
43926>>>>>>>>>>>>>        Property Integer ChangedStateWatched_Servers     0
43927>>>>>>>>>>>>>        Property Integer private.Servers_Scanned  0
43928>>>>>>>>>>>>>        
43928>>>>>>>>>>>>>        Property Integer Auto_Fill_State False
43929>>>>>>>>>>>>>        Property Integer Deferred_State  False
43930>>>>>>>>>>>>>        
43930>>>>>>>>>>>>>        // added to support DEO request-delegation. This is set true
43930>>>>>>>>>>>>>        // if the server is explicitly set in this DEO (normally via a
43930>>>>>>>>>>>>>        // USING parameter).
43930>>>>>>>>>>>>>        Property Integer explicit_server_state False
43931>>>>>>>>>>>>>        
43931>>>>>>>>>>>>>        // Since this package's SET changed_state is using change_
43931>>>>>>>>>>>>>        // disabled_state we might as well define it here. This gets changed
43931>>>>>>>>>>>>>        // by Clear_mx to support setting of defaults without changing the
43931>>>>>>>>>>>>>        // objects changed_state.
43931>>>>>>>>>>>>>        
43931>>>>>>>>>>>>>        // This stops changed_state from getting changed. It allows item_changed_
43931>>>>>>>>>>>>>        // state to chagne without the object's changed_state getting changed.
43931>>>>>>>>>>>>>        // This should be considered protected (i.e., likely to change). The new
43931>>>>>>>>>>>>>        // messages Entry_Defaults and Set Default_Value are both public and use
43931>>>>>>>>>>>>>        // this. Try to use these messages instead of this property.
43931>>>>>>>>>>>>>        Property Integer Change_Disabled_State  False
43932>>>>>>>>>>>>>        
43932>>>>>>>>>>>>>        // If true DEO will not disconnect from server when deactivating.
43932>>>>>>>>>>>>>        // If true View should handles attaching and detaching.
43932>>>>>>>>>>>>>        Register_Function Default_static_server_state Returns Integer
43932>>>>>>>>>>>>>        Property Integer Static_Server_State  (Default_Static_Server_State(Self))
43933>>>>>>>>>>>>>        
43933>>>>>>>>>>>>>        // Properties to better support tables. If Refresh_dirty_state
43933>>>>>>>>>>>>>        // is true then the list object needs refreshing (because it was inactive
43933>>>>>>>>>>>>>        // and changes were made that were not updated). After add_focus is
43933>>>>>>>>>>>>>        // complete the add_focus_msg is sent (allows tables to initialize the
43933>>>>>>>>>>>>>        // list).
43933>>>>>>>>>>>>>        Property Integer Refresh_dirty_state  True // when not active/dirty
43934>>>>>>>>>>>>>        Property Integer Add_focus_msg        0    // by dflt no message
43935>>>>>>>>>>>>>        
43935>>>>>>>>>>>>>        // This will call a stub procedure which will be augmented (or replaced)
43935>>>>>>>>>>>>>        // by the xdeo mixins
43935>>>>>>>>>>>>>        Send Define_Extended_DEO_Mixin
43936>>>>>>>>>>>>>        
43936>>>>>>>>>>>>>    End_Procedure
43937>>>>>>>>>>>>>    
43937>>>>>>>>>>>>>    
43937>>>>>>>>>>>>>    Procedure remove_deo_from_server
43939>>>>>>>>>>>>>        Integer obj# isclient wsrvr
43939>>>>>>>>>>>>>        Get Server to obj#
43940>>>>>>>>>>>>>        // as of 17.0, containers will be added as a DEO so it receives the Refresh message
43940>>>>>>>>>>>>>        If (obj# <> 0) ;            Send remove_user_interface to obj# Self
43943>>>>>>>>>>>>>        Get Watched_Servers to wsrvr
43944>>>>>>>>>>>>>        If wsrvr ;            Send remove_user_interface to wsrvr Self True // TRUE for watchers
43947>>>>>>>>>>>>>        Set Refresh_dirty_state to True
43948>>>>>>>>>>>>>    End_Procedure
43949>>>>>>>>>>>>>    
43949>>>>>>>>>>>>>    
43949>>>>>>>>>>>>>    //   This function returns the object id of the database server which
43949>>>>>>>>>>>>>    //   encloses this object, if any.  Note that only the Data_Set class
43949>>>>>>>>>>>>>    //   defines this function to return anything other than 0.
43949>>>>>>>>>>>>>    //
43949>>>>>>>>>>>>>    //   This function is used with delegation to locate the Data_Set
43949>>>>>>>>>>>>>    //   which is the closest parent of this object.
43949>>>>>>>>>>>>>    //
43949>>>>>>>>>>>>>    Function Find_Server Returns Integer
43951>>>>>>>>>>>>>    End_Function
43952>>>>>>>>>>>>>    
43952>>>>>>>>>>>>>    Register_Function Server Returns Integer
43952>>>>>>>>>>>>>    
43952>>>>>>>>>>>>>    
43952>>>>>>>>>>>>>    //   This function returns the object id of the database agent of this object,
43952>>>>>>>>>>>>>    //   or 0.
43952>>>>>>>>>>>>>    Function Locate_Server Returns Integer
43954>>>>>>>>>>>>>        Function_Return (Server(Self))
43955>>>>>>>>>>>>>    End_Function
43956>>>>>>>>>>>>>    
43956>>>>>>>>>>>>>    
43956>>>>>>>>>>>>>    //   This function returns the object id of the database agent of this
43956>>>>>>>>>>>>>    //   object, or 0.
43956>>>>>>>>>>>>>    //   If this object's Server is 0, this object's parent's Server is
43956>>>>>>>>>>>>>    //   returned, if any.
43956>>>>>>>>>>>>>    //
43956>>>>>>>>>>>>>    // Notes
43956>>>>>>>>>>>>>    //
43956>>>>>>>>>>>>>    //   This function is used to allow nested data-entry objects to use the
43956>>>>>>>>>>>>>    //   database agent defined by their parent object.
43956>>>>>>>>>>>>>    //
43956>>>>>>>>>>>>>    Function Server Returns Integer
43958>>>>>>>>>>>>>        Integer obj#
43958>>>>>>>>>>>>>        Get private.Server to obj#
43959>>>>>>>>>>>>>        If (obj# = 0 and Component_State(Self)) ;            Function_Return (Locate_Server(parent(Self)))
43962>>>>>>>>>>>>>        Function_Return obj#
43963>>>>>>>>>>>>>    End_Function
43964>>>>>>>>>>>>>    
43964>>>>>>>>>>>>>    
43964>>>>>>>>>>>>>    //   This procedure sets the value of the Server property of this object,
43964>>>>>>>>>>>>>    //   notifying child-objects of the change, and destroying and creating
43964>>>>>>>>>>>>>    //   connections with database agents, as required.
43964>>>>>>>>>>>>>    //
43964>>>>>>>>>>>>>    //   If the Server of this object is changed while this object is inactive,
43964>>>>>>>>>>>>>    //   no notification of child-objects is required or performed.
43964>>>>>>>>>>>>>    Procedure Set Server Integer newVal
43966>>>>>>>>>>>>>        Integer oldVal
43966>>>>>>>>>>>>>        Set explicit_server_state to (newVal <> 0)
43967>>>>>>>>>>>>>        Get Server to oldVal
43968>>>>>>>>>>>>>        If (newVal <> 0) ;            Set private.Server to (object_id(newVal))
43971>>>>>>>>>>>>>        Else ;            Set private.Server to newVal
43973>>>>>>>>>>>>>        If (active_state(Self)) Begin
43975>>>>>>>>>>>>>            Broadcast Send server_changed oldVal newVal
43977>>>>>>>>>>>>>            If (oldVal <> 0) ;                Send remove_deo_from_server  //detach from current server
43980>>>>>>>>>>>>>            If (newval <> 0) ;                Send attach_deo_to_server    //attach to new server
43983>>>>>>>>>>>>>        End
43983>>>>>>>>>>>>>>
43983>>>>>>>>>>>>>    End_Procedure
43984>>>>>>>>>>>>>    
43984>>>>>>>>>>>>>    //   This procedure servers as notification of a change in the connection
43984>>>>>>>>>>>>>    //   of this object's parent to its database agent.  If this object uses
43984>>>>>>>>>>>>>    //   its parent's database agent by default (see the Server and Find_Server
43984>>>>>>>>>>>>>    //   functions, above), it must disconnect from the old agent and connect
43984>>>>>>>>>>>>>    //   with the new agent.
43984>>>>>>>>>>>>>    Procedure server_changed Integer oldVal Integer newVal
43986>>>>>>>>>>>>>        Integer oldSrvr
43986>>>>>>>>>>>>>        // as of 17.0, containers will be added as a DEO so it receives the Refresh message
43986>>>>>>>>>>>>>        Get private.Server to oldSrvr
43987>>>>>>>>>>>>>        If (oldSrvr = 0) Begin  //assumes Server(self) = oldVal by deleg
43989>>>>>>>>>>>>>            If (oldVal <> 0) ;                Send remove_user_interface to oldVal Self
43992>>>>>>>>>>>>>            If (newVal <> 0) ;                Send add_user_interface to newVal Self
43995>>>>>>>>>>>>>        End
43995>>>>>>>>>>>>>>
43995>>>>>>>>>>>>>    End_Procedure
43996>>>>>>>>>>>>>    
43996>>>>>>>>>>>>>    
43996>>>>>>>>>>>>>    //   This procedure empties the Watched_Servers broadcaster, after
43996>>>>>>>>>>>>>    //   detaching this object from all of the broadcaster's elements.
43996>>>>>>>>>>>>>    //   This procedure is invoked by Find_Servers_to_Watch, in preparation
43996>>>>>>>>>>>>>    //   for a scan. Deletes both sets of watched servers
43996>>>>>>>>>>>>>    //
43996>>>>>>>>>>>>>    Procedure delete_watched_servers
43998>>>>>>>>>>>>>        Integer vis#
43998>>>>>>>>>>>>>        
43998>>>>>>>>>>>>>        Get watched_servers to vis#
43999>>>>>>>>>>>>>        If vis# Begin
44001>>>>>>>>>>>>>            Send Remove_User_Interface to vis# Self True //detach from all, TRUE for watchers
44002>>>>>>>>>>>>>            Set broadcast_state of vis# to False
44003>>>>>>>>>>>>>            Send delete_Data to vis#                    //empty it
44004>>>>>>>>>>>>>            Set broadcast_state of vis# to True
44005>>>>>>>>>>>>>        End
44005>>>>>>>>>>>>>>
44005>>>>>>>>>>>>>        
44005>>>>>>>>>>>>>        Get ChangedStateWatched_Servers to vis#
44006>>>>>>>>>>>>>        If vis# Begin
44008>>>>>>>>>>>>>            Set broadcast_state of vis# to False
44009>>>>>>>>>>>>>            Send delete_Data to vis#                    //empty it
44010>>>>>>>>>>>>>            Set broadcast_state of vis# to True
44011>>>>>>>>>>>>>        End
44011>>>>>>>>>>>>>>
44011>>>>>>>>>>>>>    End_Procedure
44012>>>>>>>>>>>>>    
44012>>>>>>>>>>>>>    //   This procedure adds the specified object id (obj#) to this object's
44012>>>>>>>>>>>>>    //   set of database agents who are merely 'watched', and establishes a
44012>>>>>>>>>>>>>    //   connection between the database agent and this object.
44012>>>>>>>>>>>>>    Procedure add_watched_server Integer obj#
44014>>>>>>>>>>>>>        Integer vis# ndx
44014>>>>>>>>>>>>>        Get watched_servers to vis#
44015>>>>>>>>>>>>>        // if w server does not exist, first create it
44015>>>>>>>>>>>>>        If (Vis# = 0) Begin
44017>>>>>>>>>>>>>            Get Create of Desktop U_Broadcaster to Vis#
44018>>>>>>>>>>>>>            Set Watched_Servers to Vis#
44019>>>>>>>>>>>>>        End
44019>>>>>>>>>>>>>>
44019>>>>>>>>>>>>>        //
44019>>>>>>>>>>>>>        Set broadcast_state of vis# to False
44020>>>>>>>>>>>>>        Get find_element of vis# obj# to ndx
44021>>>>>>>>>>>>>        If (ndx < 0) ;            Send add_element to vis# obj#
44024>>>>>>>>>>>>>        Set broadcast_state of vis# to True
44025>>>>>>>>>>>>>        If (ndx lt 0 and active_State(Self)) ;            Send add_user_interface to obj# Self True // TRUE for watchers
44028>>>>>>>>>>>>>    End_Procedure
44029>>>>>>>>>>>>>    
44029>>>>>>>>>>>>>    Procedure add_ChangedStateWatched_Servers Integer obj#
44031>>>>>>>>>>>>>        Integer vis# ndx
44031>>>>>>>>>>>>>        Get ChangedStateWatched_Servers to vis#
44032>>>>>>>>>>>>>        If (Vis# = 0) Begin
44034>>>>>>>>>>>>>            Get Create of Desktop U_Broadcaster to Vis#
44035>>>>>>>>>>>>>            Set ChangedStateWatched_Servers to Vis#
44036>>>>>>>>>>>>>        End
44036>>>>>>>>>>>>>>
44036>>>>>>>>>>>>>        //
44036>>>>>>>>>>>>>        Set broadcast_state of vis# to False
44037>>>>>>>>>>>>>        Get find_element of vis# obj# to ndx
44038>>>>>>>>>>>>>        If (ndx < 0) ;            Send add_element to vis# obj#
44041>>>>>>>>>>>>>        Set broadcast_state of vis# to True
44042>>>>>>>>>>>>>    End_Procedure
44043>>>>>>>>>>>>>    
44043>>>>>>>>>>>>>    
44043>>>>>>>>>>>>>    //   This procedure removes the specified object id (obj#) from this object's
44043>>>>>>>>>>>>>    //   set of database agents who are merely 'watched', and destroys the
44043>>>>>>>>>>>>>    //   connection between the database agent and this object.
44043>>>>>>>>>>>>>    Procedure remove_watched_server Integer obj#
44045>>>>>>>>>>>>>        Integer vis# ndx
44045>>>>>>>>>>>>>        Get watched_servers to vis#
44046>>>>>>>>>>>>>        // Only if w server exists
44046>>>>>>>>>>>>>        If vis# Begin
44048>>>>>>>>>>>>>            Set broadcast_state of vis# to False
44049>>>>>>>>>>>>>            Get find_element of vis# obj# to ndx
44050>>>>>>>>>>>>>            If (ndx >= 0) ;                Send remove_element to vis# obj#
44053>>>>>>>>>>>>>            Set broadcast_state of vis# to True
44054>>>>>>>>>>>>>            If (ndx >= 0 and active_State(Self)) ;                Send remove_user_interface to obj# Self True // TRUE for watchers
44057>>>>>>>>>>>>>        End
44057>>>>>>>>>>>>>>
44057>>>>>>>>>>>>>    End_Procedure
44058>>>>>>>>>>>>>    
44058>>>>>>>>>>>>>    //   This procedure causes the scanning of this object's items' fields,
44058>>>>>>>>>>>>>    //   and the production of a set of database agents who should be 'watched'.
44058>>>>>>>>>>>>>    //   This procedure depends completely upon Find_Servers_To_Watch, below.
44058>>>>>>>>>>>>>    //
44058>>>>>>>>>>>>>    Procedure Scan_Servers
44060>>>>>>>>>>>>>        Send find_servers_to_watch False
44061>>>>>>>>>>>>>    End_Procedure
44062>>>>>>>>>>>>>    
44062>>>>>>>>>>>>>    //   This procedure scans the fields of this object's items to determine
44062>>>>>>>>>>>>>    //   what other database agents (data_sets) other than this object's Server
44062>>>>>>>>>>>>>    //   should be 'watched' (for data changes).
44062>>>>>>>>>>>>>    //   This procedure is invoked once per object, the first time the object
44062>>>>>>>>>>>>>    //   is activated.  If the data_file, data_field, and/or main_file of this
44062>>>>>>>>>>>>>    //   object are changed (don't change them while this object is active!),
44062>>>>>>>>>>>>>    //   set Private.Servers_Scanned to FALSE to force this object to scan
44062>>>>>>>>>>>>>    //   again (when it is next activated).
44062>>>>>>>>>>>>>    //
44062>>>>>>>>>>>>>    
44062>>>>>>>>>>>>>    // 17.0: The logic has been retooled to add more watched servers to the DDOs. This is done so
44062>>>>>>>>>>>>>    // DD operations will send Refresh to these additional watched-servers. There are two changes:
44062>>>>>>>>>>>>>    // 1. Containers are now made watched servers for the Server and all parent servers
44062>>>>>>>>>>>>>    // 2. Non-file.field DEOs (e.g., expressions) are made watched servers for the server (which it
44062>>>>>>>>>>>>>    //    already did and for all parent servers. Without this, parent entry_item expressions were not
44062>>>>>>>>>>>>>    //    getting updated
44062>>>>>>>>>>>>>    // Here is how watched-servers works.
44062>>>>>>>>>>>>>    // Each DEO attaches and detaches from its Server by sending Add_User_interface and Remove_User_interface
44062>>>>>>>>>>>>>    // to the server DD. Once attached, the DD knows about this DEO and sends messages to it as needed (Refresh,
44062>>>>>>>>>>>>>    // Entry_Update, etc.). In addition, a DEO may need to attach a parent DDO so that changes in that parent DD
44062>>>>>>>>>>>>>    // results in those messages being sent. This is needed if the binding table in entry_item refers to a parent
44062>>>>>>>>>>>>>    // table. So we need to send Add_User_interface and Remove_User_interface to that parent server as well. If a DEO
44062>>>>>>>>>>>>>    // has multiple, there could be multiple parent servers. As of 17.0, we are also attaching to parent servers if
44062>>>>>>>>>>>>>    // we are unsure about how the DEO is being used. If an expression is used, it might need to be updated when
44062>>>>>>>>>>>>>    // a parent (or any ancestor) changes. Each DEO keeps track of servers that it attaches to and this is referred
44062>>>>>>>>>>>>>    // to as the watched_server list. This list is maintained so the DEO knows which DDOs to attach and detach to.
44062>>>>>>>>>>>>>    
44062>>>>>>>>>>>>>    
44062>>>>>>>>>>>>>    Procedure find_servers_to_watch Integer tableFlag
44064>>>>>>>>>>>>>        Integer i file# obj# maxitems count p srvr# self# srvrfile
44064>>>>>>>>>>>>>        String fileStr fStr
44064>>>>>>>>>>>>>        Boolean bContainer bDoAll
44064>>>>>>>>>>>>>        
44064>>>>>>>>>>>>>        Get Client_Area_State to bContainer
44065>>>>>>>>>>>>>        Set private.Servers_Scanned to True
44066>>>>>>>>>>>>>        
44066>>>>>>>>>>>>>        Get Server to srvr#
44067>>>>>>>>>>>>>        
44067>>>>>>>>>>>>>        If (srvr#=0) Begin
44069>>>>>>>>>>>>>            Procedure_Return
44070>>>>>>>>>>>>>        End
44070>>>>>>>>>>>>>>
44070>>>>>>>>>>>>>        
44070>>>>>>>>>>>>>        Send delete_watched_servers  //empty Watched_Servers broadcaster first
44071>>>>>>>>>>>>>        
44071>>>>>>>>>>>>>        Get main_file of srvr# to srvrfile  // data-set's main-file
44072>>>>>>>>>>>>>        
44072>>>>>>>>>>>>>        If bContainer Begin
44074>>>>>>>>>>>>>            // containers should get added to all parent DDOs
44074>>>>>>>>>>>>>            Send WatchAllParentServers srvr#
44075>>>>>>>>>>>>>            Procedure_Return
44076>>>>>>>>>>>>>        End
44076>>>>>>>>>>>>>>
44076>>>>>>>>>>>>>        
44076>>>>>>>>>>>>>        If (tableFlag <> 0) ;            Get Prototype_Object to self# // tables
44079>>>>>>>>>>>>>        Else ;            Move Self to self# // forms and text windows
44081>>>>>>>>>>>>>        
44081>>>>>>>>>>>>>        Get item_count of self# to maxitems
44082>>>>>>>>>>>>>        Decrement maxitems
44083>>>>>>>>>>>>>        
44083>>>>>>>>>>>>>        // if no items do nothing
44083>>>>>>>>>>>>>        // if one item do quick check
44083>>>>>>>>>>>>>        // if multiple items do it the hard way
44083>>>>>>>>>>>>>        
44083>>>>>>>>>>>>>        If (maxitems<0) Begin
44085>>>>>>>>>>>>>            // if no items, which is unusual, we don't know what this DEO is so we will treat it like a container
44085>>>>>>>>>>>>>            // and add it as a watched server for all DDOs
44085>>>>>>>>>>>>>            Send WatchAllParentServers srvr#
44086>>>>>>>>>>>>>            Procedure_Return  // no items
44087>>>>>>>>>>>>>        End
44087>>>>>>>>>>>>>>
44087>>>>>>>>>>>>>        
44087>>>>>>>>>>>>>        If (maxitems=0) Begin // only 1 item - skip most of the nonsense
44089>>>>>>>>>>>>>            Get data_file of self# 0 to file#
44090>>>>>>>>>>>>>            // we need watched server if file exists, it is not the main file
44090>>>>>>>>>>>>>            // and is not an updating file (as opposed to updating data-set).
44090>>>>>>>>>>>>>            If (file#>0 and file#<>srvrfile) Begin
44092>>>>>>>>>>>>>                Get which_data_set of srvr# file# to obj#
44093>>>>>>>>>>>>>                If (obj# <> 0 and obj# <> srvr#) Begin
44095>>>>>>>>>>>>>                    Send add_Watched_server obj#
44096>>>>>>>>>>>>>                    Send add_ChangedStateWatched_Servers obj#
44097>>>>>>>>>>>>>                End
44097>>>>>>>>>>>>>>
44097>>>>>>>>>>>>>            End
44097>>>>>>>>>>>>>>
44097>>>>>>>>>>>>>            Else If (file#=0) Begin
44100>>>>>>>>>>>>>                // if no file (e.g., expression) we don't know when it changes so we tell all servers
44100>>>>>>>>>>>>>                // that this is a watcher
44100>>>>>>>>>>>>>                Send WatchAllParentServers srvr#
44101>>>>>>>>>>>>>            End
44101>>>>>>>>>>>>>>
44101>>>>>>>>>>>>>            If File# ;                Send Copy_Item_Options Srvr# file# (Data_Field(Self#,0)) Self# 0
44104>>>>>>>>>>>>>        End
44104>>>>>>>>>>>>>>
44104>>>>>>>>>>>>>        Else Begin  // multiple items - do what you must
44105>>>>>>>>>>>>>            Move -1 to count
44106>>>>>>>>>>>>>            Move "," to fileStr
44107>>>>>>>>>>>>>            If tableFlag Begin
44109>>>>>>>>>>>>>                Get main_file to file#
44110>>>>>>>>>>>>>                If (file# <> srvrfile) Begin    // only do this if mainfile is not the srvr file
44112>>>>>>>>>>>>>                    Append fileStr file# ","   //insert mainfile to be sure it's watched
44114>>>>>>>>>>>>>                    Increment count
44115>>>>>>>>>>>>>                End
44115>>>>>>>>>>>>>>
44115>>>>>>>>>>>>>            End
44115>>>>>>>>>>>>>>
44115>>>>>>>>>>>>>            For i from 0 to maxitems
44121>>>>>>>>>>>>>>
44121>>>>>>>>>>>>>                Get data_file of self# i to file#
44122>>>>>>>>>>>>>                If (file#=0) Begin
44124>>>>>>>>>>>>>                    // as soon as we don't know what the item is used for we will have
44124>>>>>>>>>>>>>                    // to attach to all parent DDOs.
44124>>>>>>>>>>>>>                    Move True to bDoAll
44125>>>>>>>>>>>>>                End
44125>>>>>>>>>>>>>>
44125>>>>>>>>>>>>>                If (file# > 0 and file#<>srvrfile and ;                    not(fileStr contains (","+String(file#)+",")) ) Begin
44127>>>>>>>>>>>>>                    Move (fileStr+String(file#) + ",") to fileStr
44128>>>>>>>>>>>>>                    Increment count
44129>>>>>>>>>>>>>                End
44129>>>>>>>>>>>>>>
44129>>>>>>>>>>>>>                If File# ;                    Send Copy_Item_Options Srvr# file# (Data_Field(Self#,i)) Self# i
44132>>>>>>>>>>>>>            Loop
44133>>>>>>>>>>>>>>
44133>>>>>>>>>>>>>            
44133>>>>>>>>>>>>>            // if an item's binding table is unknown, we watch all parent DDOs.
44133>>>>>>>>>>>>>            If bDoAll Begin
44135>>>>>>>>>>>>>                Send WatchAllParentServers srvr#
44136>>>>>>>>>>>>>            End
44136>>>>>>>>>>>>>>
44136>>>>>>>>>>>>>            Else Begin
44137>>>>>>>>>>>>>                If (count >= 0) Begin // any watched items?
44139>>>>>>>>>>>>>                    Move (Right(fileStr, length(fileStr) - 1))  to fileStr  //remove leading comma
44140>>>>>>>>>>>>>                    For i from 0 to count
44146>>>>>>>>>>>>>>
44146>>>>>>>>>>>>>                        Move (Pos( "," ,fileStr)) to p
44147>>>>>>>>>>>>>                        If (p > 1) Begin
44149>>>>>>>>>>>>>                            Move (Left( fileStr , p-1)) to fStr
44150>>>>>>>>>>>>>                            Move (Right( fileStr, length(fileStr) - p)) to fileStr
44151>>>>>>>>>>>>>                            Move fStr to file#
44152>>>>>>>>>>>>>                            Get which_data_set of srvr# file# to obj#
44153>>>>>>>>>>>>>                            If (obj# <> 0 and obj# <> srvr#) Begin
44155>>>>>>>>>>>>>                                Send add_Watched_server obj#
44156>>>>>>>>>>>>>                                Send add_ChangedStateWatched_Servers obj#
44157>>>>>>>>>>>>>                            End
44157>>>>>>>>>>>>>>
44157>>>>>>>>>>>>>                        End
44157>>>>>>>>>>>>>>
44157>>>>>>>>>>>>>                    Loop
44158>>>>>>>>>>>>>>
44158>>>>>>>>>>>>>                End
44158>>>>>>>>>>>>>>
44158>>>>>>>>>>>>>            End
44158>>>>>>>>>>>>>>
44158>>>>>>>>>>>>>        End
44158>>>>>>>>>>>>>>
44158>>>>>>>>>>>>>    End_Procedure
44159>>>>>>>>>>>>>    
44159>>>>>>>>>>>>>    // This does nothing. Other sub-classes (or later mixins) should add
44159>>>>>>>>>>>>>    // logic to this.
44159>>>>>>>>>>>>>    Procedure Copy_Item_Options Integer iDSO Integer iFile Integer iField ;            Integer iDEO Integer iItem
44161>>>>>>>>>>>>>    End_Procedure
44162>>>>>>>>>>>>>    
44162>>>>>>>>>>>>>    // This does little. Other sub-classes (or later mixins) should add
44162>>>>>>>>>>>>>    // logic to this.
44162>>>>>>>>>>>>>    Procedure Define_Extended_DEO_Mixin
44164>>>>>>>>>>>>>    End_Procedure
44165>>>>>>>>>>>>>    
44165>>>>>>>>>>>>>    
44165>>>>>>>>>>>>>    // created for Nesting support
44165>>>>>>>>>>>>>    Procedure Mark_As_Component
44167>>>>>>>>>>>>>        Integer ser#
44167>>>>>>>>>>>>>        Set Component_State to True
44168>>>>>>>>>>>>>        Delegate Set Has_Components_State to True
44170>>>>>>>>>>>>>        Get private.Server to ser#
44171>>>>>>>>>>>>>        If (ser# = 0) Begin
44173>>>>>>>>>>>>>            Delegate Get Locate_Server to ser#
44175>>>>>>>>>>>>>            If (ser# <> 0) ;                Set private.Server to ser#
44178>>>>>>>>>>>>>        End
44178>>>>>>>>>>>>>>
44178>>>>>>>>>>>>>    End_Procedure
44179>>>>>>>>>>>>>    
44179>>>>>>>>>>>>>    // This only gets called when the developer is killing this object. During application
44179>>>>>>>>>>>>>    // shut-down, only destroy_object is called. This augmentation destroys the watched broadcaster
44179>>>>>>>>>>>>>    // (which is sitting on the desktop). During program shut down we don't care if this is called
44179>>>>>>>>>>>>>    // because it is getting destroyed anyway. We are making the assumption that a developer controlled
44179>>>>>>>>>>>>>    // destroy will always be called with the watcher still existing.
44179>>>>>>>>>>>>>    
44179>>>>>>>>>>>>>    Procedure Destroy
44181>>>>>>>>>>>>>        Handle hoWatched
44181>>>>>>>>>>>>>        Set Changed_State to False //   is this really needed anymore???
44182>>>>>>>>>>>>>        // if non 0, The watched server, must still exist.
44182>>>>>>>>>>>>>        Get Watched_Servers to hoWatched
44183>>>>>>>>>>>>>        If hoWatched Begin
44185>>>>>>>>>>>>>            Set Broadcast_State of hoWatched to False
44186>>>>>>>>>>>>>            Send Destroy of hoWatched     // destroy the bcaster
44187>>>>>>>>>>>>>        End
44187>>>>>>>>>>>>>>
44187>>>>>>>>>>>>>        // if non 0, The bound watched server, must still exist.
44187>>>>>>>>>>>>>        Get ChangedStateWatched_Servers to hoWatched
44188>>>>>>>>>>>>>        If hoWatched Begin
44190>>>>>>>>>>>>>            Set Broadcast_State of hoWatched to False
44191>>>>>>>>>>>>>            Send Destroy of hoWatched     // destroy the bcaster
44192>>>>>>>>>>>>>        End
44192>>>>>>>>>>>>>>
44192>>>>>>>>>>>>>        Forward Send Destroy
44194>>>>>>>>>>>>>    End_Procedure
44195>>>>>>>>>>>>>    
44195>>>>>>>>>>>>>    
44195>>>>>>>>>>>>>    Function Should_Save Returns Integer
44197>>>>>>>>>>>>>        Integer Obj# Chngd
44197>>>>>>>>>>>>>        Get Server to Obj#
44198>>>>>>>>>>>>>        Get Changed_state to Chngd
44199>>>>>>>>>>>>>        Function_Return ( Chngd or (obj# <> 0 and Should_Save(obj#)) )
44200>>>>>>>>>>>>>    End_Function
44201>>>>>>>>>>>>>    
44201>>>>>>>>>>>>>    // Added server scan logic here instead of add_focus.
44201>>>>>>>>>>>>>    Procedure Attach_Deo_To_Server
44203>>>>>>>>>>>>>        Integer obj# isclient srvscn wsrvr
44203>>>>>>>>>>>>>        Get Server to obj#
44204>>>>>>>>>>>>>        Get client_area_state to isclient
44205>>>>>>>>>>>>>        If (obj# <> 0) ;            Send add_user_interface to obj# Self
44208>>>>>>>>>>>>>        Get private.Servers_Scanned to srvscn
44209>>>>>>>>>>>>>        If (srvscn = 0) ;            Send scan_servers
44212>>>>>>>>>>>>>        Get Watched_Servers to wsrvr
44213>>>>>>>>>>>>>        If wsrvr Send add_user_interface ;            to wsrvr Self True // TRUE for watchers
44216>>>>>>>>>>>>>        If (obj# <> 0 and isclient = 0) ;            Send update_dependent_items
44219>>>>>>>>>>>>>    End_Procedure
44220>>>>>>>>>>>>>    
44220>>>>>>>>>>>>>    // Removed server scan logic and moved it to attach-deo_to_server
44220>>>>>>>>>>>>>    Procedure Add_Focus Handle hoParent Returns Integer
44222>>>>>>>>>>>>>        Integer srvscn retval msg
44222>>>>>>>>>>>>>        //
44222>>>>>>>>>>>>>        // standard DEO behavior
44222>>>>>>>>>>>>>        //
44222>>>>>>>>>>>>>        Forward Get msg_Add_Focus hoParent to retval
44224>>>>>>>>>>>>>        If retval ;            Procedure_Return retval
44227>>>>>>>>>>>>>        
44227>>>>>>>>>>>>>        If (client_area_State(Self) = 0) ; //clients already broadcast            Broadcast NO_STOP Send add_focus Self
44232>>>>>>>>>>>>>        //
44232>>>>>>>>>>>>>        // server augmentation
44232>>>>>>>>>>>>>        //
44232>>>>>>>>>>>>>        If (focus_mode(Self) <> NO_ACTIVATE and Active_State(Self)) ;            Send attach_DEO_to_server
44235>>>>>>>>>>>>>        
44235>>>>>>>>>>>>>        // last thing to do is send custom message. With list deos
44235>>>>>>>>>>>>>        // msg is probably initialize_list. With non-list deos it
44235>>>>>>>>>>>>>        // is probably nothing
44235>>>>>>>>>>>>>        Get add_focus_msg to msg
44236>>>>>>>>>>>>>        If msg ;            Send msg
44239>>>>>>>>>>>>>    End_Procedure
44240>>>>>>>>>>>>>    
44240>>>>>>>>>>>>>    // Connect DEO to Server if Demanded (DoAllfg=t) or ;
44240>>>>>>>>>>>>>    // allowed  (static_server_State=t). Broadcast if children exist
44240>>>>>>>>>>>>>    Procedure Connect_DEOs_to_Servers Integer DoAllFg
44242>>>>>>>>>>>>>        If (DoAllfg or Static_Server_State(Self)) ;            Send Attach_Deo_to_Server
44245>>>>>>>>>>>>>        If (Has_Components_State(Self)) ;            Broadcast Send Connect_DEOs_to_Servers DoAllfg
44249>>>>>>>>>>>>>    End_Procedure
44250>>>>>>>>>>>>>    
44250>>>>>>>>>>>>>    // Disconnect DEOs from Servers according to rules. Broadcast
44250>>>>>>>>>>>>>    // to child components.
44250>>>>>>>>>>>>>    //
44250>>>>>>>>>>>>>    // Pass: DoAllMode
44250>>>>>>>>>>>>>    //    DETACH_NEVER        Never
44250>>>>>>>>>>>>>    //    DETACH_IF_NO_CHANGE Do if changed_state=F
44250>>>>>>>>>>>>>    //    DETACH_ALWAYS       Do it no matter what
44250>>>>>>>>>>>>>    //    DETACH_IF_ALLOWED   Do if changed_state=F and auto_attach
44250>>>>>>>>>>>>>    //                        (I don't think this will be needed!)
44250>>>>>>>>>>>>>    //
44250>>>>>>>>>>>>>    Procedure Disconnect_DEOs_from_Servers Integer DoAllMode
44252>>>>>>>>>>>>>        If (DoAllMode <> DETACH_NEVER) Begin
44254>>>>>>>>>>>>>            If ( DoAllMode=DETACH_ALWAYS or ; // do all no matter what                ( (Changed_state(Self)=0) and ;                ( (DoAllMode=DETACH_IF_NO_CHANGE) or  ;                (Static_Server_State(Self)) ) ) ) ;                Send Remove_deo_from_server
44257>>>>>>>>>>>>>            If (Has_Components_State(Self)) ;                Broadcast Send Disconnect_DEOs_from_Servers DoAllMode
44261>>>>>>>>>>>>>        End
44261>>>>>>>>>>>>>>
44261>>>>>>>>>>>>>    End_Procedure
44262>>>>>>>>>>>>>    
44262>>>>>>>>>>>>>    // Changed to not remove from server if static.
44262>>>>>>>>>>>>>    Procedure Remove_Object
44264>>>>>>>>>>>>>        Forward Send remove_object
44266>>>>>>>>>>>>>        // remove if not static and no changes
44266>>>>>>>>>>>>>        If ( Static_Server_State(Self)=0 and ;            Changed_State(Self)=0 ) ;  // only detach if unchanged!            Send remove_DEO_from_server
44269>>>>>>>>>>>>>    End_Procedure
44270>>>>>>>>>>>>>    
44270>>>>>>>>>>>>>    
44270>>>>>>>>>>>>>    // (JJT) Changed so that this respects Change_disabled_state. I don't
44270>>>>>>>>>>>>>    //       like this here but its the best I can think of. Therefore, all
44270>>>>>>>>>>>>>    //       objects using server.pkg must understand Change_disabled_state.
44270>>>>>>>>>>>>>    //
44270>>>>>>>>>>>>>    // (JJT) Checks deferred_state and if set do not change the
44270>>>>>>>>>>>>>    // changed state of the server object. This had been in datalist and is
44270>>>>>>>>>>>>>    // required to make deferred_state work right. Deferred_state was created
44270>>>>>>>>>>>>>    // to make selection-lists work correctly and as far as I am concerned it
44270>>>>>>>>>>>>>    // should be the only supported use of this. Therefore, I would not *ever*
44270>>>>>>>>>>>>>    // expect deferred_state to be set true in tables, entry_forms, or text_
44270>>>>>>>>>>>>>    // windows. Since deferred-state is known to this mixin the change
44270>>>>>>>>>>>>>    // belongs here - but I expect it to only ever change behaviors in
44270>>>>>>>>>>>>>    // selection-lists.
44270>>>>>>>>>>>>>    
44270>>>>>>>>>>>>>    
44270>>>>>>>>>>>>>    // Changed to not remove from server if static.
44270>>>>>>>>>>>>>    Procedure Set Changed_State Integer newVal
44272>>>>>>>>>>>>>        Integer srvr# wsrvr
44272>>>>>>>>>>>>>        If not (Change_Disabled_State(Self)) Begin
44274>>>>>>>>>>>>>            Forward Set Changed_State to newVal
44276>>>>>>>>>>>>>            Get server to srvr#
44277>>>>>>>>>>>>>            
44277>>>>>>>>>>>>>            // if deferred keep the server out of it.
44277>>>>>>>>>>>>>            If not (deferred_State(Self)) Begin
44279>>>>>>>>>>>>>                If (newVal and srvr#) Begin
44281>>>>>>>>>>>>>                    Set Changed_State of srvr# to True
44282>>>>>>>>>>>>>                    // We also set changed_state of all "foreign" servers. These
44282>>>>>>>>>>>>>                    // are the ones whose Data_File is a parent File
44282>>>>>>>>>>>>>                    Get ChangedStateWatched_Servers to wsrvr
44283>>>>>>>>>>>>>                    If wsrvr ;                        Set Changed_State of wSrvr to True
44286>>>>>>>>>>>>>                End
44286>>>>>>>>>>>>>>
44286>>>>>>>>>>>>>                
44286>>>>>>>>>>>>>                // Remove is changed-state=false, not active and not static
44286>>>>>>>>>>>>>                If ( not(newVal) and not(Active_State(Self)) and ;                    not(Static_Server_State(Self)) ) ;                    Send remove_DEO_from_Server
44289>>>>>>>>>>>>>            End
44289>>>>>>>>>>>>>>
44289>>>>>>>>>>>>>        End
44289>>>>>>>>>>>>>>
44289>>>>>>>>>>>>>    End_Procedure
44290>>>>>>>>>>>>>    
44290>>>>>>>>>>>>>    // When an object is created this sets the default value for
44290>>>>>>>>>>>>>    // Static_Server_state. If a parent DEO exists it will use its
44290>>>>>>>>>>>>>    // static_server_state property. An Entry_view_Client0 object sets
44290>>>>>>>>>>>>>    // this - this way view based daf programs will use the new behavior
44290>>>>>>>>>>>>>    // (although it can be disabled)  but non-daf programs will work like
44290>>>>>>>>>>>>>    // they always did.
44290>>>>>>>>>>>>>    Function Default_Static_Server_State Returns Integer
44292>>>>>>>>>>>>>        Integer rVal
44292>>>>>>>>>>>>>        // We delegate to get the actual (not default) static state
44292>>>>>>>>>>>>>        // Note: Can't check with component_state - it not defined yet
44292>>>>>>>>>>>>>        Delegate Get Static_Server_State to rVal
44294>>>>>>>>>>>>>        Function_Return rVal
44295>>>>>>>>>>>>>    End_Function
44296>>>>>>>>>>>>>    
44296>>>>>>>>>>>>>    // This adds every parent DDO for the passed DDO to the DEO's list of DDOs to watch.
44296>>>>>>>>>>>>>    // It adds the parents and then does this recursively up the DDO tree.
44296>>>>>>>>>>>>>    // This means that this DEO will respond to any DD change for any server. This does not
44296>>>>>>>>>>>>>    Procedure WatchAllParentServers Handle hoDDO
44298>>>>>>>>>>>>>        Handle hoSrvr
44298>>>>>>>>>>>>>        Integer iServer iServers
44298>>>>>>>>>>>>>        Get Data_Set_Server_Count of hoDDO to iServers
44299>>>>>>>>>>>>>        For iServer from 0 to (iServers-1)
44305>>>>>>>>>>>>>>
44305>>>>>>>>>>>>>            Get Data_Set_Server of hoDDO iServer to hoSrvr
44306>>>>>>>>>>>>>            Send Add_Watched_Server hoSrvr
44307>>>>>>>>>>>>>            Send WatchAllParentServers hoSrvr
44308>>>>>>>>>>>>>        Loop
44309>>>>>>>>>>>>>>
44309>>>>>>>>>>>>>    End_Procedure
44310>>>>>>>>>>>>>    
44310>>>>>>>>>>>>>    
44310>>>>>>>>>>>>>End_Class
44311>>>>>>>>>>>>>
44311>>>>>>>>>>>>>//
44311>>>>>>>>>>>>>// The use of using on an object name is no longer supported. We will check for it's usage in case
44311>>>>>>>>>>>>>// developer's use this in old code.
44311>>>>>>>>>>>>>// Insetad of using, one should use "Set Server"
44311>>>>>>>>>>>>>//
44311>>>>>>>>>>>>>
44311>>>>>>>>>>>Use VERIFY.pkg        //include Verification support module
Including file: verify.pkg    (C:\Program Files\DataFlex 23.0\Pkg\verify.pkg)
44311>>>>>>>>>>>>>Use VDFBase.pkg
44311>>>>>>>>>>>>>
44311>>>>>>>>>>>>>Register_Function Component_State Returns Integer
44311>>>>>>>>>>>>>
44311>>>>>>>>>>>>>
44311>>>>>>>>>>>>>Class verify_mixin is a mixin
44312>>>>>>>>>>>>>    Procedure define_verify
44314>>>>>>>>>>>>>        Property Integer private.Verify_Save_Msg      0
44315>>>>>>>>>>>>>        Property Integer private.Verify_Delete_Msg    0
44316>>>>>>>>>>>>>        Property Integer private.Verify_Data_Loss_Msg 0
44317>>>>>>>>>>>>>    End_Procedure
44318>>>>>>>>>>>>>    
44318>>>>>>>>>>>>>    
44318>>>>>>>>>>>>>    Procedure Set Verify_Save_msg Integer val
44320>>>>>>>>>>>>>        Set private.Verify_Save_Msg to val
44321>>>>>>>>>>>>>    End_Procedure
44322>>>>>>>>>>>>>    
44322>>>>>>>>>>>>>    Procedure Set Verify_Delete_msg Integer val
44324>>>>>>>>>>>>>        Set private.Verify_Delete_Msg to val
44325>>>>>>>>>>>>>    End_Procedure
44326>>>>>>>>>>>>>    
44326>>>>>>>>>>>>>    Procedure Set Verify_Data_Loss_msg Integer val
44328>>>>>>>>>>>>>        Set private.Verify_Data_Loss_Msg to val
44329>>>>>>>>>>>>>    End_Procedure
44330>>>>>>>>>>>>>    
44330>>>>>>>>>>>>>    Function Verify_Save_msg Returns Integer
44332>>>>>>>>>>>>>        Integer retval
44332>>>>>>>>>>>>>        Get private.Verify_Save_Msg to retval
44333>>>>>>>>>>>>>        If (retval = 0 and Component_State(Self)) ;            Delegate Get Verify_Save_Msg to retval
44337>>>>>>>>>>>>>        Function_Return retval
44338>>>>>>>>>>>>>    End_Function
44339>>>>>>>>>>>>>    
44339>>>>>>>>>>>>>    Function Verify_Delete_msg Returns Integer
44341>>>>>>>>>>>>>        Integer retval
44341>>>>>>>>>>>>>        Get private.Verify_Delete_Msg to retval
44342>>>>>>>>>>>>>        If (retval = 0 and Component_State(Self)) ;            Delegate Get Verify_Delete_Msg to retval
44346>>>>>>>>>>>>>        Function_Return retval
44347>>>>>>>>>>>>>    End_Function
44348>>>>>>>>>>>>>    
44348>>>>>>>>>>>>>    
44348>>>>>>>>>>>>>    Function Verify_Data_Loss_msg Returns Integer
44350>>>>>>>>>>>>>        Integer retval
44350>>>>>>>>>>>>>        Get private.Verify_Data_Loss_Msg to retval
44351>>>>>>>>>>>>>        If (retval = 0 and Component_State(Self)) ;            Delegate Get Verify_Data_Loss_Msg to retval
44355>>>>>>>>>>>>>        Function_Return retval
44356>>>>>>>>>>>>>    End_Function
44357>>>>>>>>>>>>>    
44357>>>>>>>>>>>>>    Function Verify_Save Returns Integer
44359>>>>>>>>>>>>>        Integer msg# retval
44359>>>>>>>>>>>>>        Get Verify_Save_Msg to msg#
44360>>>>>>>>>>>>>        If (msg# <> 0) Begin
44362>>>>>>>>>>>>>            Get msg# to retval
44363>>>>>>>>>>>>>            Function_Return retval
44364>>>>>>>>>>>>>        End
44364>>>>>>>>>>>>>>
44364>>>>>>>>>>>>>    End_Function
44365>>>>>>>>>>>>>    
44365>>>>>>>>>>>>>    Function Verify_Delete Returns Integer
44367>>>>>>>>>>>>>        Integer msg# retval
44367>>>>>>>>>>>>>        Get Verify_Delete_Msg to msg#
44368>>>>>>>>>>>>>        If (msg# <> 0) Begin
44370>>>>>>>>>>>>>            Get msg# to retval
44371>>>>>>>>>>>>>            Function_Return retval
44372>>>>>>>>>>>>>        End
44372>>>>>>>>>>>>>>
44372>>>>>>>>>>>>>    End_Function
44373>>>>>>>>>>>>>    
44373>>>>>>>>>>>>>    Function Verify_Data_Loss Returns Integer
44375>>>>>>>>>>>>>        Integer msg# retval
44375>>>>>>>>>>>>>        Get Verify_Data_Loss_Msg to msg#
44376>>>>>>>>>>>>>        If (msg# <> 0) Begin
44378>>>>>>>>>>>>>            Get msg# to retval
44379>>>>>>>>>>>>>            Function_Return retval
44380>>>>>>>>>>>>>        End
44380>>>>>>>>>>>>>>
44380>>>>>>>>>>>>>    End_Function
44381>>>>>>>>>>>>>    
44381>>>>>>>>>>>>>End_Class
44382>>>>>>>>>>>Use ACTIONBR.pkg      //include action-bar support module
Including file: Actionbr.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Actionbr.pkg)
44382>>>>>>>>>>>>>Use VDFBase.pkg
44382>>>>>>>>>>>>>
44382>>>>>>>>>>>>>Class Action_Bar_Mixin is a mixin
44383>>>>>>>>>>>>>    Procedure Define_Action_bar
44385>>>>>>>>>>>>>    End_Procedure
44386>>>>>>>>>>>>>    
44386>>>>>>>>>>>>>    Procedure Define_Access_Keys
44388>>>>>>>>>>>>>    End_Procedure
44389>>>>>>>>>>>>>    
44389>>>>>>>>>>>>>    Procedure Add_Action_bar
44391>>>>>>>>>>>>>    End_Procedure
44392>>>>>>>>>>>>>End_Class
44393>>>>>>>>>>>>>
44393>>>>>>>>>>>>>
44393>>>>>>>>>>>>>
44393>>>>>>>>>>>Use AutoLcMx.pkg   // Auto locate of popup mixin
44393>>>>>>>>>>>Use DEODlgMx.pkg   // DEO delegation support
Including file: deodlgmx.pkg    (C:\Program Files\DataFlex 23.0\Pkg\deodlgmx.pkg)
44393>>>>>>>>>>>>>Use VDFBase.pkg
44393>>>>>>>>>>>>>
44393>>>>>>>>>>>>>Enum_List
44393>>>>>>>>>>>>>    Define DELEGATE_NEVER
44393>>>>>>>>>>>>>    Define DELEGATE_SERVER
44393>>>>>>>>>>>>>    Define DELEGATE_ALWAYS
44393>>>>>>>>>>>>>End_Enum_List
44393>>>>>>>>>>>>>
44393>>>>>>>>>>>>>
44393>>>>>>>>>>>>>Register_Function component_state Returns Integer
44393>>>>>>>>>>>>>
44393>>>>>>>>>>>>>Class deo_delegate_mixin is a mixin
44394>>>>>>>>>>>>>    Procedure define_deo_delegate
44396>>>>>>>>>>>>>        
44396>>>>>>>>>>>>>        Property Integer DEO_Delegate_Mode     Delegate_Server
44397>>>>>>>>>>>>>        
44397>>>>>>>>>>>>>        Property Integer delegate_clear_state  True
44398>>>>>>>>>>>>>        
44398>>>>>>>>>>>>>        Property Integer delegate_delete_state True
44399>>>>>>>>>>>>>        
44399>>>>>>>>>>>>>        Property Integer delegate_find_state   False
44400>>>>>>>>>>>>>        
44400>>>>>>>>>>>>>        Property Integer delegate_save_state   True
44401>>>>>>>>>>>>>    End_Procedure
44402>>>>>>>>>>>>>    
44402>>>>>>>>>>>>>    Function should_delegate Returns Integer
44404>>>>>>>>>>>>>        Integer Mode Dlg_Obj
44404>>>>>>>>>>>>>        
44404>>>>>>>>>>>>>        Delegate Get Object_Id to Dlg_Obj
44406>>>>>>>>>>>>>        Get Deo_Delegate_Mode to Mode
44407>>>>>>>>>>>>>        Function_Return ( (((Mode = DELEGATE_SERVER) and ;            not(Explicit_Server_State(Self)) and ;            (Locate_Server(Self) <> Dlg_Obj)) or ; // don't delegate if the object to delegate to is a server.            (Mode = DELEGATE_ALWAYS)) and Component_State(Self))
44408>>>>>>>>>>>>>    End_Function
44409>>>>>>>>>>>>>    
44409>>>>>>>>>>>>>    Function Should_delegate_Clear Returns Integer
44411>>>>>>>>>>>>>        Function_Return (should_delegate(Self) and ;            delegate_clear_state(Self))
44412>>>>>>>>>>>>>    End_Function
44413>>>>>>>>>>>>>    
44413>>>>>>>>>>>>>    Function Should_delegate_Save Returns Integer
44415>>>>>>>>>>>>>        Function_Return (should_delegate(Self) and ;            delegate_Save_state(Self))
44416>>>>>>>>>>>>>    End_Function
44417>>>>>>>>>>>>>    
44417>>>>>>>>>>>>>    Function Should_delegate_Delete Returns Integer
44419>>>>>>>>>>>>>        Function_Return (should_delegate(Self) and ;            delegate_delete_state(Self))
44420>>>>>>>>>>>>>    End_Function
44421>>>>>>>>>>>>>    
44421>>>>>>>>>>>>>    Function Should_delegate_Find Returns Integer
44423>>>>>>>>>>>>>        Function_Return (should_delegate(Self) and ;            delegate_Find_state(Self))
44424>>>>>>>>>>>>>    End_Function
44425>>>>>>>>>>>>>    
44425>>>>>>>>>>>>>End_Class
44426>>>>>>>>>>>>>
44426>>>>>>>>>>>>>//  During a clear (or a save/delete which sends clear) object-validation is
44426>>>>>>>>>>>>>//  properly shut off. However, the false assumption had been made that the
44426>>>>>>>>>>>>>//  DEO request_clear/clear_all messages originated with the object that had
44426>>>>>>>>>>>>>//  the focus. This was never true and is now even less likely to be true
44426>>>>>>>>>>>>>//  with the request_??? delegation method. The proper solution is to shut
44426>>>>>>>>>>>>>//  off object-validation in the focus object. The problem here is that
44426>>>>>>>>>>>>>//  the focus object may not understand this message (text_windows, buttons,
44426>>>>>>>>>>>>>//  etc). The work-around for now is to make sure that all objects understand
44426>>>>>>>>>>>>>//  these message. We can not directly add an Object_Validation message to the
44426>>>>>>>>>>>>>//  desktop (Object class). Because this message is internal this didn't work.
44426>>>>>>>>>>>>>//  By default this does nothing. Objects using val_mx actually pass this on
44426>>>>>>>>>>>>>//  object_validation.
44426>>>>>>>>>>>>>
44426>>>>>>>>>>>>>Procedure Set Object_Item_validation for cUIObject Integer fg
44428>>>>>>>>>>>>>End_Procedure
44429>>>>>>>>>>>>>
44429>>>>>>>>>>>>>Function Object_Item_Validation for cUIObject Returns Integer
44431>>>>>>>>>>>>>End_Function
44432>>>>>>>>>>>
44432>>>>>>>>>>>Register_Procedure Refind_DD_Records
44432>>>>>>>>>>>
44432>>>>>>>>>>>Class Entry_Client_mixin is a mixin
44433>>>>>>>>>>>
44433>>>>>>>>>>>    Procedure Construct_Object Integer myImg
44435>>>>>>>>>>>        Forward Send construct_object myImg
44437>>>>>>>>>>>        Set Ring_State to False
44438>>>>>>>>>>>        Property Integer private.Changed_State 0
44439>>>>>>>>>>>        
44439>>>>>>>>>>>        // We need this property to fully emulate a DEO
44439>>>>>>>>>>>        // (Actually, entry_clients should realy support ALL the DEO messages!)
44439>>>>>>>>>>>        Property Integer Auto_Clear_DEO_State True
44440>>>>>>>>>>>        
44440>>>>>>>>>>>        Send define_nesting      //invoke DEO nesting standard support constructor
44441>>>>>>>>>>>        Send define_navigation   //invoke DEO navigation standard support constructor
44442>>>>>>>>>>>        Send define_server       //invoke Server support constructor
44443>>>>>>>>>>>        Send define_action_bar   //invoke action-bar support constructor
44444>>>>>>>>>>>        Send define_verify       //invoke Verification support constructor
44445>>>>>>>>>>>        Send define_DEO_Delegate
44446>>>>>>>>>>>        Send Define_Auto_Locate
44447>>>>>>>>>>>        
44447>>>>>>>>>>>    End_Procedure
44448>>>>>>>>>>>    
44448>>>>>>>>>>>    Import_Class_Protocol NESTING_Mixin
44449>>>>>>>>>>>    Import_Class_Protocol NAVIGATE_Mixin
44450>>>>>>>>>>>    Import_Class_Protocol SERVER_Mixin
44451>>>>>>>>>>>    Import_Class_Protocol VERIFY_Mixin
44452>>>>>>>>>>>    Import_Class_Protocol ACTION_BAR_Mixin
44453>>>>>>>>>>>    Import_Class_Protocol Auto_Locate_Mixin
44454>>>>>>>>>>>    Import_Class_Protocol Deo_Delegate_Mixin
44455>>>>>>>>>>>    
44455>>>>>>>>>>>    
44455>>>>>>>>>>>    //
44455>>>>>>>>>>>    // created for Server support
44455>>>>>>>>>>>    //
44455>>>>>>>>>>>    Procedure Display
44457>>>>>>>>>>>        Broadcast Send display
44459>>>>>>>>>>>    End_Procedure
44460>>>>>>>>>>>    
44460>>>>>>>>>>>    //
44460>>>>>>>>>>>    // created for Server support
44460>>>>>>>>>>>    //
44460>>>>>>>>>>>    Procedure Clear
44462>>>>>>>>>>>        Broadcast Send Clear
44464>>>>>>>>>>>    End_Procedure
44465>>>>>>>>>>>    
44465>>>>>>>>>>>    //
44465>>>>>>>>>>>    // created for Server support
44465>>>>>>>>>>>    //
44465>>>>>>>>>>>    Procedure Clear_Set
44467>>>>>>>>>>>        Broadcast Send clear_set
44469>>>>>>>>>>>    End_Procedure
44470>>>>>>>>>>>    
44470>>>>>>>>>>>    //
44470>>>>>>>>>>>    // created for property support
44470>>>>>>>>>>>    //
44470>>>>>>>>>>>    Function Changed_State Returns Integer
44472>>>>>>>>>>>        Integer retval
44472>>>>>>>>>>>        Get Private.Changed_State to retval
44473>>>>>>>>>>>        Function_Return retval
44474>>>>>>>>>>>    End_Function
44475>>>>>>>>>>>    
44475>>>>>>>>>>>    //
44475>>>>>>>>>>>    // cancelled from Server mixin
44475>>>>>>>>>>>    //
44475>>>>>>>>>>>    Procedure Set Changed_State Integer newVal
44477>>>>>>>>>>>    End_Procedure
44478>>>>>>>>>>>    
44478>>>>>>>>>>>    //
44478>>>>>>>>>>>    // created for EntItem convenience
44478>>>>>>>>>>>    //
44478>>>>>>>>>>>    Procedure Entry_Clear Integer file#
44480>>>>>>>>>>>        If (Has_Components_State(Self)) ;            Broadcast Send Entry_Clear file#
44484>>>>>>>>>>>    End_Procedure
44485>>>>>>>>>>>    
44485>>>>>>>>>>>    //
44485>>>>>>>>>>>    // created for EntItem convenience
44485>>>>>>>>>>>    //
44485>>>>>>>>>>>    Procedure Entry_Clear_All Integer file#
44487>>>>>>>>>>>        If (Has_Components_State(Self)) ;            Broadcast Send Entry_Clear_All file#
44491>>>>>>>>>>>    End_Procedure
44492>>>>>>>>>>>    
44492>>>>>>>>>>>    //
44492>>>>>>>>>>>    // created for EntItem convenience
44492>>>>>>>>>>>    //
44492>>>>>>>>>>>    Procedure Entry_Display Integer file# Integer flag
44494>>>>>>>>>>>        If (Has_Components_State(Self)) ;            Broadcast Send Entry_Display file# flag
44498>>>>>>>>>>>    End_Procedure
44499>>>>>>>>>>>    
44499>>>>>>>>>>>    Procedure End_Construct_Object
44501>>>>>>>>>>>        Send Mark_Components      // nesting
44502>>>>>>>>>>>        Send Define_Access_Keys 0 // action_bar_keys
44503>>>>>>>>>>>        Forward Send End_Construct_Object
44505>>>>>>>>>>>    End_Procedure
44506>>>>>>>>>>>    
44506>>>>>>>>>>>    // Added for deo delegate support
44506>>>>>>>>>>>    Procedure Request_Clear
44508>>>>>>>>>>>        Integer obj# retval foc
44508>>>>>>>>>>>        If (should_delegate_clear(Self)) ;            Delegate Send request_clear
44512>>>>>>>>>>>        Else Begin
44513>>>>>>>>>>>            Get Locate_Server to obj# // locate needed in case this is a DSO
44514>>>>>>>>>>>            If (should_save(Self) and ;                (Verify_Data_Loss(Self) <> 0)) ;                Procedure_Return
44517>>>>>>>>>>>            
44517>>>>>>>>>>>            Get Focus of desktop to Foc
44518>>>>>>>>>>>            Get Object_Item_Validation of Foc to retval
44519>>>>>>>>>>>            Set Object_Item_Validation of Foc to False
44520>>>>>>>>>>>            
44520>>>>>>>>>>>            If (obj# <> 0) ;                Send Clear to obj#
44523>>>>>>>>>>>            Else ;                Send entry_clear 0
44525>>>>>>>>>>>            If (Auto_Top_Panel_State(Self)) ;                Send beginning_of_panel
44528>>>>>>>>>>>            Set Object_Item_Validation of Foc to retval
44529>>>>>>>>>>>        End
44529>>>>>>>>>>>>
44529>>>>>>>>>>>    End_Procedure
44530>>>>>>>>>>>    
44530>>>>>>>>>>>    Procedure Request_Clear_All
44532>>>>>>>>>>>        Integer obj# retval foc
44532>>>>>>>>>>>        If (should_delegate_clear(Self)) ;            Delegate Send request_clear_all
44536>>>>>>>>>>>        Else Begin
44537>>>>>>>>>>>            Get Locate_Server to obj#
44538>>>>>>>>>>>            If (Should_Save(Self) and ;                (Verify_Data_Loss(Self) <> 0)) ;                Procedure_Return
44541>>>>>>>>>>>            
44541>>>>>>>>>>>            Get Focus of desktop to Foc
44542>>>>>>>>>>>            Get Object_Item_Validation of Foc to retval
44543>>>>>>>>>>>            Set Object_Item_Validation of Foc to False
44544>>>>>>>>>>>            
44544>>>>>>>>>>>            If (obj# <> 0) ;                Send clear_all to obj#
44547>>>>>>>>>>>            Else ;                Send entry_clear_all 0
44549>>>>>>>>>>>            If (Auto_Top_Panel_State(Self)) ;                Send beginning_of_panel
44552>>>>>>>>>>>            Set Object_Item_Validation of Foc to retval
44553>>>>>>>>>>>        End
44553>>>>>>>>>>>>
44553>>>>>>>>>>>    End_Procedure
44554>>>>>>>>>>>    
44554>>>>>>>>>>>    Procedure Request_Delete
44556>>>>>>>>>>>        Integer obj#
44556>>>>>>>>>>>        
44556>>>>>>>>>>>        If (should_delegate_delete(Self)) ;            Delegate Send request_delete
44560>>>>>>>>>>>        Else Begin
44561>>>>>>>>>>>            Move False to Err
44562>>>>>>>>>>>            Get Locate_Server to obj#
44563>>>>>>>>>>>            If (obj# <> 0 and can_delete(obj#) <> 0) Begin
44565>>>>>>>>>>>                If (Verify_Delete(Self) <> 0) ;                    Procedure_Return
44568>>>>>>>>>>>                Set changed_State to False
44569>>>>>>>>>>>                If (Deferred_State(Self)) ;                    Send Request_Assign to obj# 0  //0 means main_file of Server
44572>>>>>>>>>>>                Send Request_Delete to obj#
44573>>>>>>>>>>>                // ignore auto_clear_deo_state in deletes. Always clear deleted record
44573>>>>>>>>>>>                If (not(err)) ;                    Send Request_Clear
44576>>>>>>>>>>>            End
44576>>>>>>>>>>>>
44576>>>>>>>>>>>        End
44576>>>>>>>>>>>>
44576>>>>>>>>>>>    End_Procedure
44577>>>>>>>>>>>    
44577>>>>>>>>>>>    Procedure Request_Find Integer mode Integer entUpdtFlag
44579>>>>>>>>>>>        If (should_delegate_find(Self)) ;            Delegate Send request_find mode entUpdtFlag
44583>>>>>>>>>>>        Else Begin // for now don't support any default find behavior
44584>>>>>>>>>>>            // in clients
44584>>>>>>>>>>>            Procedure_Return
44585>>>>>>>>>>>        End
44585>>>>>>>>>>>>
44585>>>>>>>>>>>    End_Procedure
44586>>>>>>>>>>>    
44586>>>>>>>>>>>    Procedure Request_Save
44588>>>>>>>>>>>        Integer obj# retval
44588>>>>>>>>>>>        
44588>>>>>>>>>>>        If (should_delegate_save(Self)) ;            Delegate Send request_save
44592>>>>>>>>>>>        Else Begin
44593>>>>>>>>>>>            Get Locate_Server to obj#
44594>>>>>>>>>>>            
44594>>>>>>>>>>>            If (obj# <> 0 and not(Read_Only_State(obj#))) Begin
44596>>>>>>>>>>>                Move False to Err
44597>>>>>>>>>>>                
44597>>>>>>>>>>>                If (Should_Save(Self)) Begin
44599>>>>>>>>>>>                    Get Request_Validate of obj# to retval
44600>>>>>>>>>>>                    If (retval <> 0) ;                        Procedure_Return
44603>>>>>>>>>>>                    //
44603>>>>>>>>>>>                    // modification for Verify support
44603>>>>>>>>>>>                    //
44603>>>>>>>>>>>                    If (Verify_Save(Self) <> 0) ;                        Procedure_Return
44606>>>>>>>>>>>                    //
44606>>>>>>>>>>>                    // modification for Save support
44606>>>>>>>>>>>                    //
44606>>>>>>>>>>>                    If (Deferred_State(Self)) ;                        Send Request_Assign to obj# 0  //0 means main_file of server
44609>>>>>>>>>>>                    
44609>>>>>>>>>>>                    Send Request_Save to obj#
44610>>>>>>>>>>>                End
44610>>>>>>>>>>>>
44610>>>>>>>>>>>                //
44610>>>>>>>>>>>                If (not(err) and Auto_Clear_DEO_State(Self)) ;                    Send Request_Clear
44613>>>>>>>>>>>            End
44613>>>>>>>>>>>>
44613>>>>>>>>>>>        End
44613>>>>>>>>>>>>
44613>>>>>>>>>>>    End_Procedure
44614>>>>>>>>>>>    
44614>>>>>>>>>>>    // this allows us to save a record without it clearing regardless of
44614>>>>>>>>>>>    // the Auto_Clear_DEO_State value
44614>>>>>>>>>>>    //
44614>>>>>>>>>>>    Procedure Request_Save_No_Clear
44616>>>>>>>>>>>        Integer oldclr
44616>>>>>>>>>>>        If (should_delegate_save(Self)) ;            Delegate Send request_save_no_clear
44620>>>>>>>>>>>        Else Begin
44621>>>>>>>>>>>            Get Auto_Clear_DEO_State to OldClr  // whatever it was
44622>>>>>>>>>>>            Set Auto_Clear_DEO_State to False   // it is no NO!
44623>>>>>>>>>>>            Send request_save                   // do your magic
44624>>>>>>>>>>>            Set Auto_Clear_DEO_State to OldClr  // back to whatever it was
44625>>>>>>>>>>>        End
44625>>>>>>>>>>>>
44625>>>>>>>>>>>    End_Procedure
44626>>>>>>>>>>>    
44626>>>>>>>>>>>    Procedure Request_Superfind Integer mode
44628>>>>>>>>>>>        Integer ser# datafile
44628>>>>>>>>>>>        
44628>>>>>>>>>>>        If (should_delegate_find(Self)) ;            Delegate Send request_superfind mode
44632>>>>>>>>>>>        Else Begin
44633>>>>>>>>>>>            Procedure_Return
44634>>>>>>>>>>>        End
44634>>>>>>>>>>>>
44634>>>>>>>>>>>    End_Procedure
44635>>>>>>>>>>>    
44635>>>>>>>>>>>    //  Augment to Support AutoLocate.
44635>>>>>>>>>>>    //  This replaces (not augments) the procedure in actionbr. We need
44635>>>>>>>>>>>    //  to look into this (activating is very risky to augment activating
44635>>>>>>>>>>>    //  in mixins).
44635>>>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
44635>>>>>>>>>>>    Procedure Activating // Returns Integer
44637>>>>>>>>>>>        Integer InvokingId RVal
44637>>>>>>>>>>>        Get Focus of desktop to InvokingId
44638>>>>>>>>>>>        //
44638>>>>>>>>>>>        Forward Get MSG_activating to rVal   //  This is the standard
44640>>>>>>>>>>>        If rVal ;            Procedure_Return rVal        //  actionbr activating
44643>>>>>>>>>>>        Send Add_action_bar                  //  logic
44644>>>>>>>>>>>        If (Auto_Locate_State(Self) ) ;            Send Auto_Locate InvokingId
44647>>>>>>>>>>>    End_Procedure
44648>>>>>>>>>>>    
44648>>>>>>>>>>>    // add this so that all db clients delegate this message.
44648>>>>>>>>>>>    // this is used to catch sub-views (tabview). Tab views (sub
44648>>>>>>>>>>>    // views) will augment this to do something useful
44648>>>>>>>>>>>    Function SubView_Changed Returns Integer
44650>>>>>>>>>>>        Integer hObj
44650>>>>>>>>>>>        Broadcast Get SubView_Changed to hObj
44652>>>>>>>>>>>        Function_Return hObj
44653>>>>>>>>>>>    End_Function
44654>>>>>>>>>>>    
44654>>>>>>>>>>>    // these are needed to pass these on to possible tabview.
44654>>>>>>>>>>>    Function Opening_view_Recursive Returns Integer
44656>>>>>>>>>>>        Integer bFail
44656>>>>>>>>>>>        Broadcast Get Opening_View_Recursive to bFail
44658>>>>>>>>>>>        Function_Return bFail
44659>>>>>>>>>>>    End_Function
44660>>>>>>>>>>>    
44660>>>>>>>>>>>    // these are needed to pass these on to possible tabview.
44660>>>>>>>>>>>    Procedure Seed_Data_Sets_Recursive
44662>>>>>>>>>>>        Broadcast Send Seed_Data_Sets_Recursive
44664>>>>>>>>>>>    End_Procedure
44665>>>>>>>>>>>    
44665>>>>>>>>>>>    // as of 17.0, clients are added to a DDOs DEO list, which means they receive the messages
44665>>>>>>>>>>>    // Refresh, Validate_Items and Entry_Update. These are stubs. The Refresh message is the one
44665>>>>>>>>>>>    // that will be useful. A developer can use this to process DD changes within a view or other
44665>>>>>>>>>>>    // container
44665>>>>>>>>>>>    
44665>>>>>>>>>>>    Procedure Refresh Integer eMode
44667>>>>>>>>>>>    End_Procedure
44668>>>>>>>>>>>    
44668>>>>>>>>>>>    Function Validate_Items Returns Integer
44670>>>>>>>>>>>    End_Function
44671>>>>>>>>>>>    
44671>>>>>>>>>>>    Procedure Entry_Update Integer file# Integer flag
44673>>>>>>>>>>>    End_Procedure
44674>>>>>>>>>>>    
44674>>>>>>>>>>>    Function Data_File Integer iItem Returns Integer
44676>>>>>>>>>>>        Function_Return 0
44677>>>>>>>>>>>    End_Function
44678>>>>>>>>>>>    
44678>>>>>>>>>>>    Function Data_Field Integer iItem Returns Integer
44680>>>>>>>>>>>        Function_Return 0
44681>>>>>>>>>>>    End_Function
44682>>>>>>>>>>>    
44682>>>>>>>>>>>    
44682>>>>>>>>>>>End_Class
44683>>>>>>>>>>>
44683>>>>>>>>>>>
44683>>>>>>>>>>>Define DEFAULT_VIEW_LATCH_STATE         for 1
44683>>>>>>>>>>>Define DEFAULT_VIEW_STATIC_SERVER_STATE for 1
44683>>>>>>>>>>>Define DEFAULT_DSO_DETACH_MODE          for DETACH_IF_NO_CHANGE
44683>>>>>>>>>>>
44683>>>>>>>>>>>Class Entry_View_Client_mixin is a mixin
44684>>>>>>>>>>>    Procedure Construct_Object Integer img#
44686>>>>>>>>>>>        Forward Send construct_object img#
44688>>>>>>>>>>>        Property String View_Name ''  // default name...could be useful
44689>>>>>>>>>>>        Set scope_State to True         // defaults to a Scope
44690>>>>>>>>>>>        Set Attach_Parent_State to True // default...controls parentage better
44691>>>>>>>>>>>        Set Ring_State to True          // default to Ring...makes sense
44692>>>>>>>>>>>        
44692>>>>>>>>>>>        Property Integer DSO_Detach_Mode          Default_DSO_Detach_Mode
44693>>>>>>>>>>>        Property Integer DEO_Attach_All_State     False
44694>>>>>>>>>>>        
44694>>>>>>>>>>>        Property Integer View_Latch_State         True  // Default_View_Latch_State
44695>>>>>>>>>>>        Property Integer Main_DD                  0
44696>>>>>>>>>>>        // keeps track of main-file record when new view is entered!
44696>>>>>>>>>>>        
44696>>>>>>>>>>>        Property RowID priInitialRowId
44697>>>>>>>>>>>        
44697>>>>>>>>>>>        // when false activate will attempt to activate the scope_focus
44697>>>>>>>>>>>        // when true, activate activates first object.
44697>>>>>>>>>>>        Property Integer Auto_Top_View_State      False
44698>>>>>>>>>>>
44698>>>>>>>>>>>        // When activate is performed (as opposed to set current_scope) the
44698>>>>>>>>>>>        // first focusable object is activated. Should the first item of the
44698>>>>>>>>>>>        // first object become the current_item?
44698>>>>>>>>>>>        // If Top_View is true and Top_Item is false you get the old dac
44698>>>>>>>>>>>        // behaviors.
44698>>>>>>>>>>>        Property Integer Auto_Top_Item_State      True
44699>>>>>>>>>>>        
44699>>>>>>>>>>>        // When changing views this will keep track of the object that had
44699>>>>>>>>>>>        // the focus when this view (scope) was exited. This manages nested
44699>>>>>>>>>>>        // scopes within a view.
44699>>>>>>>>>>>        Property Integer private.Last_View_Focus  0
44700>>>>>>>>>>>        Property Integer wasNotinUse_State        False // internal use
44701>>>>>>>>>>>    End_Procedure
44702>>>>>>>>>>>    
44702>>>>>>>>>>>    // Augment exit_application_check. If a change
44702>>>>>>>>>>>    // is detected activate the changed view. This way the user sees what
44702>>>>>>>>>>>    // has been changed.
44702>>>>>>>>>>>    //
44702>>>>>>>>>>>    Function Exit_Application_Check Returns Integer
44704>>>>>>>>>>>        Integer rVal Obj
44704>>>>>>>>>>>        
44704>>>>>>>>>>>        Get Should_Save to Rval // changes in this object???
44705>>>>>>>>>>>        If (rVal = 0) ;            Broadcast Get Exit_Application_Check to Rval // check w/ kids
44709>>>>>>>>>>>        
44709>>>>>>>>>>>        If (rVal <> 0) Begin  // ok a change exist...activate changed view.
44711>>>>>>>>>>>            //
44711>>>>>>>>>>>            // before activating the changed view make sure that we are not
44711>>>>>>>>>>>            // trying to activate this on top of a modal object. Check the current
44711>>>>>>>>>>>            // focus and all of its parent record up to (but not including) the
44711>>>>>>>>>>>            // desktop. If any of these object are modal (have block_mouse_state
44711>>>>>>>>>>>            // set to true) then do not display the changed view.
44711>>>>>>>>>>>            //
44711>>>>>>>>>>>            Get Focus of desktop to Obj
44712>>>>>>>>>>>            While Obj Gt DESKTOP
44716>>>>>>>>>>>                If (Block_Mouse_State(Obj)) ;                    Function_Return rVal // if modal..exit
44719>>>>>>>>>>>                Get Parent of Obj to Obj
44720>>>>>>>>>>>            Loop
44721>>>>>>>>>>>>
44721>>>>>>>>>>>            Send Activate
44722>>>>>>>>>>>        End
44722>>>>>>>>>>>>
44722>>>>>>>>>>>        Function_Return rVal
44723>>>>>>>>>>>    End_Function
44724>>>>>>>>>>>    
44724>>>>>>>>>>>    Function Opening_view_Recursive Returns Integer
44726>>>>>>>>>>>        Integer main bFail
44726>>>>>>>>>>>        Set delegation_mode to delegate_to_parent
44727>>>>>>>>>>>        Get Main_DD to Main
44728>>>>>>>>>>>        Set WasNotInUse_State to ( Main and In_use_State(Main)=0 )
44729>>>>>>>>>>>        Get Opening_View to bFail
44730>>>>>>>>>>>        If not bFail ;            Broadcast Get Opening_View_Recursive to bFail
44734>>>>>>>>>>>        Function_Return bFail
44735>>>>>>>>>>>    End_Function
44736>>>>>>>>>>>    
44736>>>>>>>>>>>    Procedure Seed_Data_Sets_Recursive
44738>>>>>>>>>>>        Integer NotInUse
44738>>>>>>>>>>>        Set delegation_mode to delegate_to_parent
44739>>>>>>>>>>>        Get WasNotInUse_State to NotInUse
44740>>>>>>>>>>>        If NotInUse ;            Send Seed_Data_Sets  // if ok, we've got blank in-use DSO.
44743>>>>>>>>>>>        Set WasNotInUse_State to False
44744>>>>>>>>>>>        Broadcast Send Seed_Data_Sets_Recursive
44746>>>>>>>>>>>    End_Procedure
44747>>>>>>>>>>>    
44747>>>>>>>>>>>    
44747>>>>>>>>>>>    //  Augmented to send Opening_view. If add_focus fails it sends
44747>>>>>>>>>>>    //  closing_view to reverse effects of Opening_view
44747>>>>>>>>>>>    Procedure Add_Focus Handle hoParent Returns Integer
44749>>>>>>>>>>>        Integer rVal Main NotInUse
44749>>>>>>>>>>>        Get Opening_View_Recursive to rval
44750>>>>>>>>>>>        //
44750>>>>>>>>>>>        If (rVal = 0) Begin
44752>>>>>>>>>>>            // Connect DEOs and DSOs as required.
44752>>>>>>>>>>>            Send Connect_DEOs_to_Servers (DEO_Attach_All_State(Self))
44753>>>>>>>>>>>            Forward Get MSG_add_focus hoParent to rVal
44755>>>>>>>>>>>            Send Seed_Data_Sets_Recursive
44756>>>>>>>>>>>        End
44756>>>>>>>>>>>>
44756>>>>>>>>>>>        Procedure_Return rVal
44757>>>>>>>>>>>    End_Procedure
44758>>>>>>>>>>>    
44758>>>>>>>>>>>    // Augmented to Send Closing view
44758>>>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
44758>>>>>>>>>>>    Procedure Deactivating //Returns Integer
44760>>>>>>>>>>>        Integer rVal
44760>>>>>>>>>>>        Forward Get MSG_Deactivating to rVal
44762>>>>>>>>>>>        If (rVal = 0) ;            Send closing_View
44765>>>>>>>>>>>    End_Procedure
44766>>>>>>>>>>>    
44766>>>>>>>>>>>    //  Disconnect servers from deos according to rules.
44766>>>>>>>>>>>    //
44766>>>>>>>>>>>    Procedure Closing_View
44768>>>>>>>>>>>        Integer Mode
44768>>>>>>>>>>>        Get DSO_Detach_Mode to Mode
44769>>>>>>>>>>>        // If we had a View with no DEOs the DSOs would remain in use. We
44769>>>>>>>>>>>        // will take the extra step to set all DSOs in-use-states to false.
44769>>>>>>>>>>>        Send Disconnect_DEOs_from_Servers Mode
44770>>>>>>>>>>>        // we assume that only DSOs understand Set In_Use_State and that
44770>>>>>>>>>>>        // no delegation occurs as part of setting this to false.
44770>>>>>>>>>>>        If (Mode = DETACH_ALWAYS) ;            Broadcast Recursive Set In_use_State to False
44774>>>>>>>>>>>    End_Procedure
44775>>>>>>>>>>>    
44775>>>>>>>>>>>    // use to preload anything into DSOs. By default, if a Main_DD is
44775>>>>>>>>>>>    // defined, we will attempt to latch on
44775>>>>>>>>>>>    // the record that was in the buffer when the view was entered!
44775>>>>>>>>>>>    Procedure Seed_Data_Sets
44777>>>>>>>>>>>        Integer srvr# File#
44777>>>>>>>>>>>        Integer bFill
44777>>>>>>>>>>>        RowID   riInitalRowId
44777>>>>>>>>>>>        Boolean bFound
44777>>>>>>>>>>>        Get Main_DD to srvr#
44778>>>>>>>>>>>        // If no Main-dd we don't do anything automatically, you are on your
44778>>>>>>>>>>>        // own to seed the data-sets any way you want.
44778>>>>>>>>>>>        If Srvr# Begin
44780>>>>>>>>>>>            Get auto_fill_State of srvr# to bFill
44781>>>>>>>>>>>            // if not auto-fill and we've got a record, someone went to a lot of
44781>>>>>>>>>>>            // trouble to set up a record. Don't change it. Normally this would
44781>>>>>>>>>>>            // occur w/ selection lists (which are not auto-fill) that seed the
44781>>>>>>>>>>>            // list in advance.
44781>>>>>>>>>>>            If ( bFill=0 and HasRecord(srvr#) ) ;                Procedure_Return
44784>>>>>>>>>>>            Get priInitialRowId to riInitalRowId
44785>>>>>>>>>>>            If ( not(IsNullRowId(riInitalRowId)) and View_Latch_State(Self) ) Begin
44787>>>>>>>>>>>                // if initial record and we latch, refind it via DSO
44787>>>>>>>>>>>                // Find & relate record manually and then perform
44787>>>>>>>>>>>                // a request_assign. This will not work if the finding file is
44787>>>>>>>>>>>                // a constrained child file
44787>>>>>>>>>>>                Get Main_file of Srvr# to File#
44788>>>>>>>>>>>                // we can now do this in a single step
44788>>>>>>>>>>>                Get FindByRowIdEx of srvr# File# riInitalRowId to bFound
44789>>>>>>>>>>>            End
44789>>>>>>>>>>>>
44789>>>>>>>>>>>            Else ;                 // if no initial record, do a formal                If not bFill ;                Send Clear to Srvr# // clear
44793>>>>>>>>>>>            // If the srvr is auto-fill and there was no initial record we
44793>>>>>>>>>>>            // will chose to do nothing under the assumption that the server
44793>>>>>>>>>>>            // has already done an auto-fill and its guess is as good as
44793>>>>>>>>>>>            // anything we could come up with.
44793>>>>>>>>>>>        End
44793>>>>>>>>>>>>
44793>>>>>>>>>>>    End_Procedure
44794>>>>>>>>>>>    
44794>>>>>>>>>>>    //  Needed by view. Find the record number of the requested file.
44794>>>>>>>>>>>    //  If file = 0 use the main_file of Main_DD (if it exists).
44794>>>>>>>>>>>    Function FileRowId Integer iFile Returns RowID
44796>>>>>>>>>>>        Handle hoMain
44796>>>>>>>>>>>        RowID  riID
44796>>>>>>>>>>>        // if file not passed use main-file of main data set
44796>>>>>>>>>>>        If (iFile=0) Begin
44798>>>>>>>>>>>            Get Main_DD to hoMain
44799>>>>>>>>>>>            If hoMain Begin
44801>>>>>>>>>>>                Get main_file of hoMain to iFile
44802>>>>>>>>>>>            End
44802>>>>>>>>>>>>
44802>>>>>>>>>>>        End
44802>>>>>>>>>>>>
44802>>>>>>>>>>>        If iFile Begin
44804>>>>>>>>>>>            Move (GetRowId(iFile)) to riId
44805>>>>>>>>>>>        End
44805>>>>>>>>>>>>
44805>>>>>>>>>>>        Function_Return riId
44806>>>>>>>>>>>    End_Function
44807>>>>>>>>>>>    
44807>>>>>>>>>>>    // We maintain Last_View_Focus to control for nested scopes. A normal
44807>>>>>>>>>>>    // will have its scope_state true and no scoped children. However, a
44807>>>>>>>>>>>    // zoom might be scoped. We control this by keeping track of the scope when
44807>>>>>>>>>>>    // a scope is exited.
44807>>>>>>>>>>>    
44807>>>>>>>>>>>    Procedure Set Last_View_Focus Integer Foc
44809>>>>>>>>>>>        Set private.Last_View_Focus to Foc
44810>>>>>>>>>>>    End_Procedure
44811>>>>>>>>>>>    
44811>>>>>>>>>>>    // Returns The last scope in the view to have the focus. Before returning
44811>>>>>>>>>>>    // the value make sure that the scope object is active, else return 0
44811>>>>>>>>>>>    Function Last_View_Focus Returns Integer
44813>>>>>>>>>>>        Integer foc
44813>>>>>>>>>>>        Get private.Last_View_Focus to Foc
44814>>>>>>>>>>>        // if not a valid object or this object is not active make it 0
44814>>>>>>>>>>>        If (Foc<=DESKTOP or Active_state(Self)=0 or Active_State(Foc)=0) ;            Move 0 to Foc
44817>>>>>>>>>>>        Function_Return Foc
44818>>>>>>>>>>>    End_Function
44819>>>>>>>>>>>    
44819>>>>>>>>>>>    // Take care of any buffer initialization
44819>>>>>>>>>>>    Function Opening_View Returns Integer
44821>>>>>>>>>>>        Integer main
44821>>>>>>>>>>>        RowID riId
44821>>>>>>>>>>>        
44821>>>>>>>>>>>        // if a main DSO exists and it is not in use we must perform
44821>>>>>>>>>>>        // any required pre-seeding logic.
44821>>>>>>>>>>>        //Get Main_DD to Main
44821>>>>>>>>>>>        //If ( Main AND In_use_State(Main)=0 ) Begin
44821>>>>>>>>>>>        If ( wasNotinUse_State(Self))  Begin
44823>>>>>>>>>>>            // Always clear all file buffers and keep track of the record number
44823>>>>>>>>>>>            // that was in the main-dso's file-buffer.
44823>>>>>>>>>>>            // This is used by seed_data_sets to seed as required.
44823>>>>>>>>>>>            Get FileRowId 0 to riId
44824>>>>>>>>>>>            Set priInitialRowId to riId
44825>>>>>>>>>>>            //Set Initial_Main_record to Rec#
44825>>>>>>>>>>>            Send Prepare_Data_Sets         // allow custom setting
44826>>>>>>>>>>>            Broadcast Send clear_main_file // Send refind_records to main
44828>>>>>>>>>>>        End
44828>>>>>>>>>>>>
44828>>>>>>>>>>>    End_Function
44829>>>>>>>>>>>    
44829>>>>>>>>>>>    // only called if Main_DD exists and it is not yet in-use
44829>>>>>>>>>>>    Procedure Prepare_Data_Sets
44831>>>>>>>>>>>    End_Procedure
44832>>>>>>>>>>>    
44832>>>>>>>>>>>    // added to make the file buffers more reliable
44832>>>>>>>>>>>    Procedure Entering_Scope Returns Integer
44834>>>>>>>>>>>        Integer rVal
44834>>>>>>>>>>>        Forward Get MSG_entering_scope to rVal
44836>>>>>>>>>>>        // The refind is probably a feature that should always happen.
44836>>>>>>>>>>>        // The main-data-set was a way to make this backwards compatable.
44836>>>>>>>>>>>        // Maybe that made no sense.
44836>>>>>>>>>>>        If (rVal = 0) ;            Broadcast Send refind_DD_records // only refinds in-use DDs.
44840>>>>>>>>>>>        Procedure_Return rVal
44841>>>>>>>>>>>    End_Procedure
44842>>>>>>>>>>>    
44842>>>>>>>>>>>    // Augment to keep track of the scope that had the focus when this
44842>>>>>>>>>>>    // view was exited. Exiting_Scope seems to get called at the right
44842>>>>>>>>>>>    // times - only when focus is moved to an object outside of view's focus.
44842>>>>>>>>>>>    Procedure Exiting_Scope Handle hoNewScope
44844>>>>>>>>>>>        Integer rVal
44844>>>>>>>>>>>        Forward Get MSG_Exiting_Scope hoNewScope to rVal
44846>>>>>>>>>>>        If (rVal = 0) ;            Set Last_View_Focus to (Current_Scope(Self))
44849>>>>>>>>>>>    End_Procedure
44850>>>>>>>>>>>    
44850>>>>>>>>>>>    //  Augmented to allow views to take the focus without changing the
44850>>>>>>>>>>>    //  focus within the object. The property Auto_top_View_State controls
44850>>>>>>>>>>>    //  this. If true, always return to first object, first item. If false
44850>>>>>>>>>>>    //  return to current-item of scope focus (when possible).
44850>>>>>>>>>>>    //
44850>>>>>>>>>>>    Procedure Activate Returns Integer
44852>>>>>>>>>>>        Integer rVal Foc
44852>>>>>>>>>>>        If ( Auto_Top_View_State(Self)=0 and ; // Do we want behavior?            scope_state(Self) and ;           // s/b true.            Active_state(Self) ) Begin        // Only if active.
44854>>>>>>>>>>>            // Last_View_Focus is the last scope to have the focus.
44854>>>>>>>>>>>            // It should be active (if not the prop is 0).
44854>>>>>>>>>>>            // If for some reason the focus is 0, do a vanilla activate.
44854>>>>>>>>>>>            Get Last_View_Focus to Foc
44855>>>>>>>>>>>            If Foc ;                Set Current_Scope to Foc
44858>>>>>>>>>>>            Else ;                Forward Get Msg_Activate to rVal
44861>>>>>>>>>>>        End
44861>>>>>>>>>>>>
44861>>>>>>>>>>>        Else Begin
44862>>>>>>>>>>>            Forward Get Msg_Activate to rVal
44864>>>>>>>>>>>            // first Item of first object.
44864>>>>>>>>>>>            If ( Rval=0 and Auto_Top_Item_State(Self) ) ;                Send Beginning_of_Panel
44867>>>>>>>>>>>        End
44867>>>>>>>>>>>>
44867>>>>>>>>>>>        Procedure_Return rVal
44868>>>>>>>>>>>    End_Procedure
44869>>>>>>>>>>>    
44869>>>>>>>>>>>    // Views don't delegate to get this property. It uses system default
44869>>>>>>>>>>>    Function Default_Static_Server_State Returns Integer
44871>>>>>>>>>>>        Function_Return DEFAULT_VIEW_STATIC_SERVER_STATE
44872>>>>>>>>>>>    End_Function
44873>>>>>>>>>>>    
44873>>>>>>>>>>>End_Class
44874>>>>>>>>>>>
44874>>>>>>>>>>>//
44874>>>>>>>>>>>//  Client for Selection Lists.
44874>>>>>>>>>>>//
44874>>>>>>>>>>>//  Selection_lists and Pick_lists need to know if they should
44874>>>>>>>>>>>//  move their values out. With simple sel/pick lists it figures this
44874>>>>>>>>>>>//  out if the list is a popup object. (POPUP sets the property
44874>>>>>>>>>>>//  move_value_out_state to TRUE. If the sel\pick list needs to be
44874>>>>>>>>>>>//  encapulsated by a client the actual list object is no longer a
44874>>>>>>>>>>>//  popup (the client is). We need this special client to set the
44874>>>>>>>>>>>//  move_value_out_state of the list. It does this by broadcasting
44874>>>>>>>>>>>//  this to all objects. This only works if the sel/pick list object is
44874>>>>>>>>>>>//  a direct child of the client (which it always will be).
44874>>>>>>>>>>>//
44874>>>>>>>>>>>//  Also note that this class supports movable objects
44874>>>>>>>>>>>
44874>>>>>>>>>>>Register_Procedure Set Move_Value_Out_State Integer State
44874>>>>>>>>>>>
44874>>>>>>>>>>>// used to catch old obsolete syntax
44874>>>>>>>>>Use DFNav_mx.pkg // Navigation changes for DF DEOs
Including file: Dfnav_mx.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Dfnav_mx.pkg)
44874>>>>>>>>>>>Use VDFBase.pkg
44874>>>>>>>>>>>
44874>>>>>>>>>>>Class DFnavigate_mixin is a Mixin
44875>>>>>>>>>>>    
44875>>>>>>>>>>>    Procedure define_DFNavigation
44877>>>>>>>>>>>        
44877>>>>>>>>>>>        On_Key kSwitch            Send Switch_Next_Area   PRIVATE
44878>>>>>>>>>>>        On_Key kSwitch_Back       Send Switch_Prior_Area  PRIVATE
44879>>>>>>>>>>>        
44879>>>>>>>>>>>        //  Change Panel switching to view switching.
44879>>>>>>>>>>>        //  The messages Switch_next_view and Switch_Prior_View
44879>>>>>>>>>>>        //  need to be resolved (via delegation) in the view object.
44879>>>>>>>>>>>        //  This means that all dfentry object must be placed inside
44879>>>>>>>>>>>        //  of a view object. This might cause problems ... we will see.
44879>>>>>>>>>>>        
44879>>>>>>>>>>>    End_Procedure
44880>>>>>>>>>>>    
44880>>>>>>>>>>>    Procedure Close_Panel
44882>>>>>>>>>>>        Send Exit_Function
44883>>>>>>>>>>>    End_Procedure
44884>>>>>>>>>>>    
44884>>>>>>>>>>>End_Class
44885>>>>>>>>>Use dfConfrm.pkg
44885>>>>>>>>>Use Dfdbmdpn.pkg // adds obsolete pointerButton for dbModalPanel
Including file: Dfdbmdpn.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Dfdbmdpn.pkg)
44885>>>>>>>>>>>Use Windows.pkg
44885>>>>>>>>>>>
44885>>>>>>>>>>>Class PointerButton is a Button
44886>>>>>>>>>>>    
44886>>>>>>>>>>>    Procedure Construct_Object
44888>>>>>>>>>>>        Forward Send Construct_Object
44890>>>>>>>>>>>        Set focus_mode to pointer_Only
44891>>>>>>>>>>>    End_Procedure
44892>>>>>>>>>>>    
44892>>>>>>>>>>>    Procedure Command Integer i1 Integer i2
44894>>>>>>>>>>>        Send Redirect_Message
44895>>>>>>>>>>>    End_Procedure
44896>>>>>>>>>>>    
44896>>>>>>>>>>>    Procedure Redirect_Message Returns Integer
44898>>>>>>>>>>>        Integer msg obj rval
44898>>>>>>>>>>>        Get message 0 to Msg
44899>>>>>>>>>>>        Get Aux_Value 0 to obj
44900>>>>>>>>>>>        If Msg ;            Get Msg of ( If(obj, obj, Focus(desktop)) ) to rval
44903>>>>>>>>>>>        Procedure_Return rval
44904>>>>>>>>>>>    End_Procedure
44905>>>>>>>>>>>    
44905>>>>>>>>>>>End_Class
44906>>>>>>>>>Use Dfdafmac.pkg
Including file: Dfdafmac.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Dfdafmac.pkg)
44906>>>>>>>>>>>Use Windows.pkg
44906>>>>>>>>>>>Use dfcursor.pkg
44906>>>>>>>>>>>
44906>>>>>>>>>>>
44906>>>>>>>>>>>//  This expects to create a view INSIDE of another object
44906>>>>>>>>>>>//  (Like a panel)
44906>>>>>>>>>>>//
44906>>>>>>>>>>>
44906>>>>>>>>>>>
44906>>>>>>>>>>>Define DEFERRED_OBJECT for Deferred_View
44906>>>>>>>>>>>
44906>>>>>>>>>>>Class CD_Client is a Container
44907>>>>>>>>>>>    
44907>>>>>>>>>>>    Procedure Construct_Object
44909>>>>>>>>>>>        Forward Send Construct_Object
44911>>>>>>>>>>>        
44911>>>>>>>>>>>        Property Integer Created_object_id 0
44912>>>>>>>>>>>        
44912>>>>>>>>>>>        Set focus_mode to nonfocusable
44913>>>>>>>>>>>    End_Procedure
44914>>>>>>>>>>>    
44914>>>>>>>>>>>    Procedure Popup
44916>>>>>>>>>>>        Send Popup_Modal
44917>>>>>>>>>>>    End_Procedure
44918>>>>>>>>>>>    
44918>>>>>>>>>>>    Register_Function Destroy_Object_State Returns Integer
44918>>>>>>>>>>>    
44918>>>>>>>>>>>    // is augmented by object instance. Should never
44918>>>>>>>>>>>    // be called.
44918>>>>>>>>>>>    Function Popup_Handle Returns Handle
44920>>>>>>>>>>>        Error DFERR_PROGRAM "Improper use of CD_Popup_Object command"
44921>>>>>>>>>>>>
44921>>>>>>>>>>>    End_Function
44922>>>>>>>>>>>    
44922>>>>>>>>>>>    Procedure Popup_Modal Returns Integer
44924>>>>>>>>>>>        Integer iRet
44924>>>>>>>>>>>        Handle hoId
44924>>>>>>>>>>>        Boolean bDestroy
44924>>>>>>>>>>>        Get Popup_Handle to hoId
44925>>>>>>>>>>>        If hoId Begin
44927>>>>>>>>>>>            Get msg_Popup_Modal of hoId to iRet
44928>>>>>>>>>>>            Get Destroy_Object_State of hoId to bDestroy
44929>>>>>>>>>>>            If bDestroy Begin
44931>>>>>>>>>>>                Send Destroy of hoId
44932>>>>>>>>>>>                Set Created_Object_Id to 0
44933>>>>>>>>>>>            End
44933>>>>>>>>>>>>
44933>>>>>>>>>>>            Procedure_Return iRet
44934>>>>>>>>>>>        End
44934>>>>>>>>>>>>
44934>>>>>>>>>>>    End_Procedure
44935>>>>>>>>>>>    
44935>>>>>>>>>>>End_Class
44936>>>>>>>>>>>
44936>>>>>>>>>>>
44936>>>>>>>>>>>
44936>>>>>>>>>
44936>>>>>>>>>Register_Procedure DoSaveEnvironment Handle hoContainer Boolean bProgram
44936>>>>>>>>>Register_Procedure DoLoadEnvironment Handle hoContainer Boolean bProgram
44936>>>>>>>>>
44936>>>>>>>>>Register_Function Data_Set_Should_Save Returns Integer
44936>>>>>>>>>
44936>>>>>>>>>//
44936>>>>>>>>>//  Grouping classes: Used within views to group objects
44936>>>>>>>>>//
44936>>>>>>>>>//  dbContainer3d_
44936>>>>>>>>>//     dbContainer3d
44936>>>>>>>>>//
44936>>>>>>>>>Class dbContainer3d_ is a Container3d STARTMAC ECstart
44937>>>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
44937>>>>>>>>>    Import_Class_Protocol Entry_Client_mixin // mixin in CM DEO behaviors
44938>>>>>>>>>    
44938>>>>>>>>>    //  Defeat the activating augmentation for auto-locate
44938>>>>>>>>>    //
44938>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
44938>>>>>>>>>    Procedure Activating //Returns Integer
44940>>>>>>>>>        Integer RVal
44940>>>>>>>>>        Forward Get MSG_activating to rVal
44942>>>>>>>>>        Procedure_Return rVal
44943>>>>>>>>>    End_Procedure
44944>>>>>>>>>End_Class
44945>>>>>>>>>
44945>>>>>>>>>Class dbContainer3d is a dbContainer3d_
44946>>>>>>>>>    Procedure Construct_Object
44948>>>>>>>>>        Forward Send Construct_Object No_Image
44950>>>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
44951>>>>>>>>>    End_Procedure
44952>>>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
44953>>>>>>>>>End_Class
44954>>>>>>>>>
44954>>>>>>>>>//
44954>>>>>>>>>// Group Based containers
44954>>>>>>>>>//
44954>>>>>>>>>//  dbGroup_
44954>>>>>>>>>//     dbGroup
44954>>>>>>>>>//
44954>>>>>>>>>Class dbGroup_ is a Group STARTMAC ECstart
44955>>>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
44955>>>>>>>>>    
44955>>>>>>>>>    Import_Class_Protocol Entry_Client_mixin
44956>>>>>>>>>    
44956>>>>>>>>>    //  Defeat the activating augmentation for auto-locate
44956>>>>>>>>>    //
44956>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
44956>>>>>>>>>    Procedure Activating //Returns Integer
44958>>>>>>>>>        Integer RVal
44958>>>>>>>>>        Forward Get MSG_activating to rVal
44960>>>>>>>>>        Procedure_Return rVal
44961>>>>>>>>>    End_Procedure
44962>>>>>>>>>End_Class
44963>>>>>>>>>
44963>>>>>>>>>Class dbGroup is a dbGroup_
44964>>>>>>>>>    Procedure Construct_Object
44966>>>>>>>>>        Forward Send Construct_Object No_Image
44968>>>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
44969>>>>>>>>>    End_Procedure
44970>>>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
44971>>>>>>>>>End_Class
44972>>>>>>>>>
44972>>>>>>>>>
44972>>>>>>>>>//
44972>>>>>>>>>// Invisible Grouping object
44972>>>>>>>>>//
44972>>>>>>>>>//   dbContainer - invisible container
44972>>>>>>>>>//
44972>>>>>>>>>Class dbContainer is an dbContainer3d
44973>>>>>>>>>    Import_Class_Protocol NonVisual_Container_Mixin
44974>>>>>>>>>End_Class
44975>>>>>>>>>
44975>>>>>>>>>//
44975>>>>>>>>>// View Support (views are mdi dialogs)
44975>>>>>>>>>//
44975>>>>>>>>>//   dbAppClient_
44975>>>>>>>>>//     dbAppView_
44975>>>>>>>>>//       dbView
44975>>>>>>>>>//
44975>>>>>>>>>Class dbAppClient_ is a View  STARTMAC ECstart
44976>>>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
44976>>>>>>>>>    
44976>>>>>>>>>    Import_Class_Protocol Entry_Client_mixin
44977>>>>>>>>>    
44977>>>>>>>>>    //  Defeat the activating augmentation for auto-locate
44977>>>>>>>>>    //
44977>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
44977>>>>>>>>>    Procedure Activating //Returns Integer
44979>>>>>>>>>        Integer RVal
44979>>>>>>>>>        Forward Get MSG_activating to rVal
44981>>>>>>>>>        Procedure_Return rVal
44982>>>>>>>>>    End_Procedure
44983>>>>>>>>>End_Class
44984>>>>>>>>>
44984>>>>>>>>>Class dbAppView_ is a dbAppClient_
44985>>>>>>>>>    Import_Class_Protocol entry_view_Client_mixin
44986>>>>>>>>>End_Class
44987>>>>>>>>>
44987>>>>>>>>>Class dbView is a dbAppView_
44988>>>>>>>>>    
44988>>>>>>>>>    Procedure Construct_Object
44990>>>>>>>>>        Forward Send Construct_Object No_Image
44992>>>>>>>>>        
44992>>>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
44993>>>>>>>>>        // dialog views get activated as popup objects.
44993>>>>>>>>>        Set Dso_Detach_Mode to Detach_Always
44994>>>>>>>>>        
44994>>>>>>>>>        // set default verify messages. These are good defaults. The
44994>>>>>>>>>        // developer may wish to change these in their object or sub-class.
44994>>>>>>>>>        // Note: these messsages are defined in dfconfrm.pkg
44994>>>>>>>>>        Set Verify_Data_Loss_Msg   to (RefFunc(Data_Loss_Confirmation))
44995>>>>>>>>>        Set Verify_Delete_Msg      to (RefFunc(Delete_Confirmation))
44996>>>>>>>>>        Set Verify_Save_Msg        to (RefFunc(Save_Confirmation))
44997>>>>>>>>>        Set Verify_Exit_Msg        to (RefFunc(Exit_Loss_Confirmation))
44998>>>>>>>>>        //
44998>>>>>>>>>    End_Procedure
44999>>>>>>>>>    
44999>>>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
45000>>>>>>>>>    
45000>>>>>>>>>    //  Returns TRUE to indicate that this is a DEO. This is used by
45000>>>>>>>>>    //  delegation to figure out if you are within a DEO and should therefore
45000>>>>>>>>>    //  send a DEO message. DEO clients set this true
45000>>>>>>>>>    //
45000>>>>>>>>>    Function DEO_Object Returns Integer
45002>>>>>>>>>        Function_Return 1
45003>>>>>>>>>    End_Function
45004>>>>>>>>>    
45004>>>>>>>>>    //
45004>>>>>>>>>    //  Activate message for views that:
45004>>>>>>>>>    //  1. restores the view if it is minimized
45004>>>>>>>>>    //  2. Maintains the current scope's focus.
45004>>>>>>>>>    //
45004>>>>>>>>>    Procedure Activate_current_scope
45006>>>>>>>>>        If ( View_mode(Self)=VIEWMODE_ICONIZE ) ;            Set view_mode to viewmode_normal
45009>>>>>>>>>        Set Current_Scope to Self
45010>>>>>>>>>    End_Procedure
45011>>>>>>>>>    
45011>>>>>>>>>    // ------------deprecated....Use Object_label.
45011>>>>>>>>>    //  Pass full object name - return the relative name
45011>>>>>>>>>    //  e.g.,  Main.View.Obj1 --> Obj1
45011>>>>>>>>>    Function Local_Object_name String nm Returns String
45013>>>>>>>>>        Integer ps
45013>>>>>>>>>        Repeat
45013>>>>>>>>>>
45013>>>>>>>>>            Move (Pos( ".", nm)) to ps
45014>>>>>>>>>            If (ps = 0) ;                Function_Return nm
45017>>>>>>>>>            Increment ps
45018>>>>>>>>>            Move (Mid( Nm, 255, ps)) to Nm
45019>>>>>>>>>        Loop
45020>>>>>>>>>>
45020>>>>>>>>>    End_Function
45021>>>>>>>>>    
45021>>>>>>>>>    Function View_Changed Returns Integer
45023>>>>>>>>>        Integer Changed
45023>>>>>>>>>        // first see if any DDOs at this level are changed.
45023>>>>>>>>>        Broadcast Get Data_Set_Should_Save to Changed // Ask for changes in Data-sets
45025>>>>>>>>>        // if no changes, see if we have any sub-views that are changed
45025>>>>>>>>>        // This is used to catch tab-view pages.
45025>>>>>>>>>        If not Changed ;            Broadcast Get SubView_Changed to Changed
45029>>>>>>>>>        Function_Return Changed
45030>>>>>>>>>    End_Function
45031>>>>>>>>>    
45031>>>>>>>>>    Procedure Close_Client
45033>>>>>>>>>        Send Exit_Function
45034>>>>>>>>>    End_Procedure
45035>>>>>>>>>    
45035>>>>>>>>>End_Class
45036>>>>>>>>>
45036>>>>>>>>>
45036>>>>>>>>>
45036>>>>>>>>>//
45036>>>>>>>>>// ToolPanel Based Classes
45036>>>>>>>>>//
45036>>>>>>>>>//  dbFloatingPanel_
45036>>>>>>>>>//     dbFloatingPanel
45036>>>>>>>>>//        dbViewFloatingPanel
45036>>>>>>>>>//           dbViewToolPanel
45036>>>>>>>>>//           dbModalPanel <---this will get used
45036>>>>>>>>>//
45036>>>>>>>>>Class dbFloatingPanel_ is a FloatingPanel STARTMAC ECstart
45037>>>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
45037>>>>>>>>>    
45037>>>>>>>>>    Import_Class_Protocol Entry_Client_mixin
45038>>>>>>>>>    
45038>>>>>>>>>    //  Defeat the activating augmentation for auto-locate
45038>>>>>>>>>    //
45038>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
45038>>>>>>>>>    Procedure Activating //Returns Integer
45040>>>>>>>>>        Integer RVal
45040>>>>>>>>>        Forward Get MSG_activating to rVal
45042>>>>>>>>>        Procedure_Return rVal
45043>>>>>>>>>    End_Procedure
45044>>>>>>>>>End_Class
45045>>>>>>>>>
45045>>>>>>>>>Class dbFloatingPanel is a dbFloatingPanel_
45046>>>>>>>>>    Procedure Construct_Object
45048>>>>>>>>>        Forward Send Construct_Object No_Image
45050>>>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
45051>>>>>>>>>        Set Minimize_Icon to False
45052>>>>>>>>>        Set Maximize_Icon to False
45053>>>>>>>>>    End_Procedure
45054>>>>>>>>>    
45054>>>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
45055>>>>>>>>>    
45055>>>>>>>>>    //  Returns TRUE to indicate that this is a DEO. This is used by
45055>>>>>>>>>    //  delegation to figure out if you are within a DEO and should therefore
45055>>>>>>>>>    //  send a DEO message. DEO clients set this true
45055>>>>>>>>>    //
45055>>>>>>>>>    Function DEO_Object Returns Integer
45057>>>>>>>>>        Function_Return 1
45058>>>>>>>>>    End_Function
45059>>>>>>>>>    
45059>>>>>>>>>    // we Modify this not delegate and look for a parent verify exit msg if this msg is 0.
45059>>>>>>>>>    // We assume that toolpanels and dbModalPanels are self contained in terms of opening and closing
45059>>>>>>>>>    // and therefore should only use themselves to figure out if there is a verify exit msg. This is needed
45059>>>>>>>>>    // in case a db modal panel physically placed inside of another DEO.
45059>>>>>>>>>    Function Verify_Exit_msg Returns Integer
45061>>>>>>>>>        Integer msg#
45061>>>>>>>>>        Get private.verify_exit_msg to msg#
45062>>>>>>>>>        // don't look at parent DEOs like we do elsewhere.
45062>>>>>>>>>        //if (msg# = 0 AND Component_State(self)) ;
45062>>>>>>>>>        //    delegate get verify_exit_msg to msg#
45062>>>>>>>>>        Function_Return msg#
45063>>>>>>>>>    End_Function
45064>>>>>>>>>    
45064>>>>>>>>>End_Class
45065>>>>>>>>>
45065>>>>>>>>>Class dbViewFloatingPanel is a dbFloatingPanel
45066>>>>>>>>>    Import_Class_Protocol entry_view_Client_mixin
45067>>>>>>>>>End_Class
45068>>>>>>>>>
45068>>>>>>>>>Class dbViewToolPanel is a dbViewFloatingPanel
45069>>>>>>>>>    
45069>>>>>>>>>    Procedure Construct_Object
45071>>>>>>>>>        Forward Send Construct_Object No_Image
45073>>>>>>>>>        Set Extended_Window_Style to WS_EX_TOOLWINDOW True
45074>>>>>>>>>    End_Procedure
45075>>>>>>>>>    
45075>>>>>>>>>End_Class
45076>>>>>>>>>
45076>>>>>>>>>//  EntryModalPanel
45076>>>>>>>>>
45076>>>>>>>>>Class dbModalPanel is a dbViewFloatingPanel
45077>>>>>>>>>    Procedure Construct_Object
45079>>>>>>>>>        Forward Send Construct_Object No_Image
45081>>>>>>>>>        
45081>>>>>>>>>        Set Extended_Window_Style to WS_EX_DLGMODALFRAME True
45082>>>>>>>>>        Set Modal_State to True
45083>>>>>>>>>        
45083>>>>>>>>>        Property Integer List_Object  0
45084>>>>>>>>>        
45084>>>>>>>>>        Property Integer Button_Height     14
45085>>>>>>>>>        Property Integer Button_Width      50
45086>>>>>>>>>        
45086>>>>>>>>>        Property Integer Max_Text_Extent   0
45087>>>>>>>>>        
45087>>>>>>>>>        Object Button_Ids is an array
45089>>>>>>>>>        End_Object
45090>>>>>>>>>    End_Procedure
45091>>>>>>>>>    
45091>>>>>>>>>    Function Button_Count Returns Integer
45093>>>>>>>>>        Function_Return (Item_count(Button_Ids))
45094>>>>>>>>>    End_Function
45095>>>>>>>>>    
45095>>>>>>>>>    Procedure Add_Button String sLabel Integer hMsg Integer hoTo
45097>>>>>>>>>        Integer hoBtn tx
45097>>>>>>>>>        // 8.2 - use newer syntax for creating dynamic objects
45097>>>>>>>>>        Get Create U_PointerButton to hoBtn
45098>>>>>>>>>        Set peAnchors of hoBtn to anBottomRight
45099>>>>>>>>>        Set Value of hoBtn 0 to sLabel
45100>>>>>>>>>        Set Message of hoBtn 0 to hMsg
45101>>>>>>>>>        If (Num_Arguments>2) ;            Set aux_value of hoBtn 0 to hoTo
45104>>>>>>>>>        Get Text_Extent of hoBtn sLabel to tx
45105>>>>>>>>>        Move (low(tx)) to tx
45106>>>>>>>>>        Set Array_Value of Button_Ids (Button_Count(Self)) to hoBtn
45107>>>>>>>>>        If (tx > Max_Text_Extent(Self));            Set Max_Text_Extent to tx
45110>>>>>>>>>    End_Procedure
45111>>>>>>>>>    
45111>>>>>>>>>    Procedure Size_Buttons
45113>>>>>>>>>        Integer bheight bwidth nb obj Bobj bt mt gsiz gwd
45113>>>>>>>>>        
45113>>>>>>>>>        Get button_height to bheight
45114>>>>>>>>>        Get button_width  to bwidth
45115>>>>>>>>>        Get Button_count to nb
45116>>>>>>>>>        Decrement nb
45117>>>>>>>>>        
45117>>>>>>>>>        Move Button_ids to obj
45118>>>>>>>>>        
45118>>>>>>>>>        For bt from 0 to nb
45124>>>>>>>>>>
45124>>>>>>>>>            Get integer_value of obj bt to bobj // button id
45125>>>>>>>>>            Set Size of bobj to bheight bwidth       // set dflt size
45126>>>>>>>>>            If (bt = 0) Begin
45128>>>>>>>>>                Get Max_Text_Extent to mt
45129>>>>>>>>>                Add 8 to mt
45130>>>>>>>>>                Get guisize of bobj to gsiz
45131>>>>>>>>>                Move (low(gsiz)) to gwd
45132>>>>>>>>>                If (gwd < mt) Begin
45134>>>>>>>>>                    Set guisize of bobj to (hi(gsiz)) mt
45135>>>>>>>>>                    Send adjust_logicals to bobj
45136>>>>>>>>>                    Move (low(size(bobj))) to bwidth
45137>>>>>>>>>                    Set Button_width to bwidth
45138>>>>>>>>>                End
45138>>>>>>>>>>
45138>>>>>>>>>            End
45138>>>>>>>>>>
45138>>>>>>>>>        Loop
45139>>>>>>>>>>
45139>>>>>>>>>    End_Procedure
45140>>>>>>>>>    
45140>>>>>>>>>    Procedure Position_Child_Objects
45142>>>>>>>>>        Integer lsz psz wd pwd ht llc nb mt bobj obj cht col bt list_obj
45142>>>>>>>>>        Integer rmrgn swd
45142>>>>>>>>>        
45142>>>>>>>>>        If (not(pbSizeToClientArea(Self))) Begin
45144>>>>>>>>>            // if using old sizing, we have not changed anything for 14.0
45144>>>>>>>>>            If (caption_bar(Self)) ;                Move (Hi(Physical_fontsize(Self))+4+6) to cht
45147>>>>>>>>>            Else ;                Move 0 to cht
45149>>>>>>>>>            
45149>>>>>>>>>            Get GUISize to psz               // size of panel
45150>>>>>>>>>            Get List_Object to List_obj      // id of the list object
45151>>>>>>>>>            If list_obj Begin
45153>>>>>>>>>                Get GUISize of list_obj to lSz
45154>>>>>>>>>                Get GUIlocation of list_obj to llc
45155>>>>>>>>>                Move (low(llc)+low(lsz)+2) to rmrgn
45156>>>>>>>>>            End
45156>>>>>>>>>>
45156>>>>>>>>>            Else ;                Move (low(psz)-8) to rmrgn
45158>>>>>>>>>            
45158>>>>>>>>>            Get Button_count to nb        // number of buttons
45159>>>>>>>>>            
45159>>>>>>>>>            If (nb = 0) ;                Move ( hi(psz) - 4 - cht - 8) to ht
45162>>>>>>>>>            Else Begin
45163>>>>>>>>>                Move Button_ids to obj
45164>>>>>>>>>                Get integer_value of obj 0 to bobj
45165>>>>>>>>>                Get guisize of bobj to ht
45166>>>>>>>>>                Move (low(ht)) to wd
45167>>>>>>>>>                Move ( hi(ht)) to ht
45168>>>>>>>>>                Move 8 to swd // width of each space
45169>>>>>>>>>                If ( (rmrgn - ((wd+swd)*nb-swd)) < 0 ) ;                    Move 2 to swd
45172>>>>>>>>>                Move ( hi(psz) - ht - 4 - cht - 8) to ht
45173>>>>>>>>>                
45173>>>>>>>>>                Move (rmrgn-wd) to col
45174>>>>>>>>>                Decrement nb
45175>>>>>>>>>                While nb ge 0
45179>>>>>>>>>                    Get integer_value of obj nb to bobj
45180>>>>>>>>>                    Set GUIlocation of bobj to ht col
45181>>>>>>>>>                    Send Adjust_Logicals to bobj
45182>>>>>>>>>                    Move (col - swd - wd) to col
45183>>>>>>>>>                    Decrement nb
45184>>>>>>>>>                End
45185>>>>>>>>>>
45185>>>>>>>>>            End
45185>>>>>>>>>>
45185>>>>>>>>>            
45185>>>>>>>>>            If list_obj Begin
45187>>>>>>>>>                Get GUISize of list_obj to lSz
45188>>>>>>>>>                Get GUIlocation of list_obj to llc
45189>>>>>>>>>                Move ( ht - Hi(llc) - 12 ) to ht
45190>>>>>>>>>                Set GUIsize of list_obj to ht (low(lsz))
45191>>>>>>>>>                Send Adjust_Logicals to list_obj
45192>>>>>>>>>            End
45192>>>>>>>>>>
45192>>>>>>>>>        End
45192>>>>>>>>>>
45192>>>>>>>>>        Else Begin
45193>>>>>>>>>            
45193>>>>>>>>>            // this is still obsolete, but we will make it work with client sizing, which makes it simpler actually
45193>>>>>>>>>            // bote that 8 is used through out as the GUI spacing amount. This is legacy and will not be changed
45193>>>>>>>>>            
45193>>>>>>>>>            Get GUISize to psz               // size of panel
45194>>>>>>>>>            Get List_Object to List_obj      // id of the list object
45195>>>>>>>>>            If list_obj Begin
45197>>>>>>>>>                Get GUISize of list_obj to lSz
45198>>>>>>>>>                Get GUIlocation of list_obj to llc
45199>>>>>>>>>                Move (low(llc)+low(lsz)) to rmrgn
45200>>>>>>>>>            End
45200>>>>>>>>>>
45200>>>>>>>>>            Else Begin
45201>>>>>>>>>                Move (low(psz)-8) to rmrgn
45202>>>>>>>>>            End
45202>>>>>>>>>>
45202>>>>>>>>>            
45202>>>>>>>>>            Get Button_count to nb        // number of buttons
45203>>>>>>>>>            
45203>>>>>>>>>            If (nb = 0) ;                Move ( hi(psz) ) to ht
45206>>>>>>>>>            Else Begin
45207>>>>>>>>>                Move Button_ids to obj
45208>>>>>>>>>                Get integer_value of obj 0 to bobj
45209>>>>>>>>>                Get guisize of bobj to ht
45210>>>>>>>>>                Move (low(ht)) to wd
45211>>>>>>>>>                Move ( hi(ht)) to ht
45212>>>>>>>>>                Move 8 to swd // width of each space
45213>>>>>>>>>                Move ( hi(psz) - ht - 8) to ht
45214>>>>>>>>>                
45214>>>>>>>>>                Move (rmrgn-wd) to col
45215>>>>>>>>>                Decrement nb
45216>>>>>>>>>                While (nb>=0)
45220>>>>>>>>>                    Get integer_value of obj nb to bobj
45221>>>>>>>>>                    Set GUIlocation of bobj to ht col
45222>>>>>>>>>                    Send Adjust_Logicals to bobj
45223>>>>>>>>>                    Move (col - swd - wd) to col
45224>>>>>>>>>                    Decrement nb
45225>>>>>>>>>                End
45226>>>>>>>>>>
45226>>>>>>>>>            End
45226>>>>>>>>>>
45226>>>>>>>>>            
45226>>>>>>>>>            If list_obj Begin
45228>>>>>>>>>                Get GUISize of list_obj to lSz
45229>>>>>>>>>                Get GUIlocation of list_obj to llc
45230>>>>>>>>>                Move ( ht - Hi(llc) - 8 ) to ht
45231>>>>>>>>>                Set GUIsize of list_obj to ht (low(lsz))
45232>>>>>>>>>                Send Adjust_Logicals of list_obj
45233>>>>>>>>>            End
45233>>>>>>>>>>
45233>>>>>>>>>        End
45233>>>>>>>>>>
45233>>>>>>>>>    End_Procedure
45234>>>>>>>>>    
45234>>>>>>>>>    Procedure End_Construct_Object
45236>>>>>>>>>        Send Size_Buttons
45237>>>>>>>>>        Send Position_Child_Objects
45238>>>>>>>>>        Forward Send end_construct_object
45240>>>>>>>>>    End_Procedure
45241>>>>>>>>>    
45241>>>>>>>>>    Procedure Search
45243>>>>>>>>>        Integer Obj#
45243>>>>>>>>>        Get List_Object to obj#
45244>>>>>>>>>        If Obj# ;            Send Search to Obj#
45247>>>>>>>>>    End_Procedure
45248>>>>>>>>>    
45248>>>>>>>>>    // created for advanced CD_popup_object support. Returns the true handle of the
45248>>>>>>>>>    // popup object whether it is a regular object or a CD popup object.
45248>>>>>>>>>    Function Popup_Handle Returns Handle
45250>>>>>>>>>        Function_Return Self
45251>>>>>>>>>    End_Function
45252>>>>>>>>>    
45252>>>>>>>>>End_Class
45253>>>>>>>>>
45253>>>>>>>>>//
45253>>>>>>>>>// Panel Based Classes
45253>>>>>>>>>//
45253>>>>>>>>>//  dbPanel_
45253>>>>>>>>>//     dbPanel
45253>>>>>>>>>//        dbViewPanel_
45253>>>>>>>>>//           dbViewPanel
45253>>>>>>>>>//
45253>>>>>>>>>// None of these are likely to be used
45253>>>>>>>>>//
45253>>>>>>>>>
45253>>>>>>>>>Class dbPanel_ is a BasicPanel STARTMAC ECstart
45254>>>>>>>>>    // the startmac is used to catch old obsolete code at compiletime
45254>>>>>>>>>    
45254>>>>>>>>>    Import_Class_Protocol Entry_Client_mixin
45255>>>>>>>>>    
45255>>>>>>>>>    //  Defeat the activating augmentation for auto-locate
45255>>>>>>>>>    //
45255>>>>>>>>>    // as of 15.1 we changed all deactivating/activating signatures to not return values (see windows.pkg / ComboForm / Activating for more)
45255>>>>>>>>>    Procedure Activating //Returns Integer
45257>>>>>>>>>        Integer RVal
45257>>>>>>>>>        Forward Get MSG_activating to rVal
45259>>>>>>>>>        Procedure_Return rVal
45260>>>>>>>>>    End_Procedure
45261>>>>>>>>>End_Class
45262>>>>>>>>>
45262>>>>>>>>>Class dbPanel is a dbPanel_
45263>>>>>>>>>    Procedure Construct_Object
45265>>>>>>>>>        Forward Send Construct_Object No_Image
45267>>>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
45268>>>>>>>>>    End_Procedure
45269>>>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
45270>>>>>>>>>End_Class
45271>>>>>>>>>
45271>>>>>>>>>Class dbViewPanel_ is a dbPanel
45272>>>>>>>>>    Import_Class_Protocol entry_view_Client_mixin
45273>>>>>>>>>End_Class
45274>>>>>>>>>
45274>>>>>>>>>Class dbViewPanel is a dbViewPanel_
45275>>>>>>>>>    Procedure Construct_Object
45277>>>>>>>>>        Forward Send Construct_Object No_Image
45279>>>>>>>>>    End_Procedure
45280>>>>>>>>>    
45280>>>>>>>>>    //  Returns TRUE to indicate that this is a DEO. This is used by
45280>>>>>>>>>    //  delegation to figure out if you are within a DEO and should therefore
45280>>>>>>>>>    //  send a DEO message. DEO clients set this true
45280>>>>>>>>>    //
45280>>>>>>>>>    Function DEO_Object Returns Integer
45282>>>>>>>>>        Function_Return 1
45283>>>>>>>>>    End_Function
45284>>>>>>>>>End_Class
45285>>>>>>>Use DFbitmap.pkg
Including file: Dfbitmap.pkg    (C:\Program Files\DataFlex 23.0\Pkg\Dfbitmap.pkg)
45285>>>>>>>>>Use LanguageText.pkg
45285>>>>>>>>>Use Windows.pkg
45285>>>>>>>>>Use File_Dlg.pkg
45285>>>>>>>>>
45285>>>>>>>>>Class BitmapContainer is a Container3D
45286>>>>>>>>>    
45286>>>>>>>>>    Procedure Construct_Object
45288>>>>>>>>>        Forward Send Construct_Object
45290>>>>>>>>>        
45290>>>>>>>>>        Property Integer Changed_State False
45291>>>>>>>>>        
45291>>>>>>>>>        // If true, double click sends Get Select_Bitmap which invokes
45291>>>>>>>>>        // an open file dialog
45291>>>>>>>>>        Property Integer Allow_Select_Bitmap_State  False
45292>>>>>>>>>        
45292>>>>>>>>>        // title for common file dialog
45292>>>>>>>>>        Property String Dialog_Caption C_$SelectBitmapFile
45293>>>>>>>>>        
45293>>>>>>>>>        // start-up directory for common file dialog
45293>>>>>>>>>        Property String Initial_Folder ""
45294>>>>>>>>>        
45294>>>>>>>>>        Send Define_ToolTip_Support_Mixin
45295>>>>>>>>>        
45295>>>>>>>>>        // this object should not take the focus
45295>>>>>>>>>        Set Focus_Mode to NonFocusable
45296>>>>>>>>>        Set Client_Area_State to False
45297>>>>>>>>>        Set pbUseFormWindowHandle to False   // must come after Define_ToolTip_Support_Mixin
45298>>>>>>>>>    End_Procedure
45299>>>>>>>>>    
45299>>>>>>>>>    Import_Class_Protocol ToolTip_Support_Mixin
45300>>>>>>>>>    
45300>>>>>>>>>    // Although this is not a client it should add child objects to
45300>>>>>>>>>    // the focus tree. Should only be textboxes!
45300>>>>>>>>>    //
45300>>>>>>>>>    Procedure Add_Focus Integer Obj
45302>>>>>>>>>        Forward Send Add_Focus Obj
45304>>>>>>>>>        Broadcast Send Add_Focus Self
45306>>>>>>>>>    End_Procedure
45307>>>>>>>>>    
45307>>>>>>>>>    // Popup an open file dialog and select a bitmap file. Returns file
45307>>>>>>>>>    // name
45307>>>>>>>>>    //
45307>>>>>>>>>    Function Select_Bitmap Returns String
45309>>>>>>>>>        String sFileName
45309>>>>>>>>>        String sPropVal
45309>>>>>>>>>        Integer iRet
45309>>>>>>>>>        Handle hoOpenFile
45309>>>>>>>>>        
45309>>>>>>>>>        Get Create U_OpenDialog to  hoOpenFile
45310>>>>>>>>>        // Mask will look like this: "Bitmaps (.bmp;*.rle)|*.bmp;*.rle|All Files (*.*)|*.*"
45310>>>>>>>>>        Set Filter_String  of hoOpenFile to (C_$Bitmaps * "(.bmp;*.rle)|*.bmp;*.rle|" + C_$AllFiles * "(*.*)|*.*")
45311>>>>>>>>>        Get Dialog_Caption to sPropVal
45312>>>>>>>>>        Set Dialog_Caption of hoOpenFile to sPropVal
45313>>>>>>>>>        Get Initial_Folder to sPropVal
45314>>>>>>>>>        Set Initial_Folder of hoOpenFile to sPropVal
45315>>>>>>>>>        Get Show_Dialog    of hoOpenFile  to iRet
45316>>>>>>>>>        If iRet ;            Get File_Name of hoOpenFile  to sFileName
45319>>>>>>>>>        Send Destroy of hoOpenFile
45320>>>>>>>>>        Function_Return sFileName
45321>>>>>>>>>    End_Function
45322>>>>>>>>>    
45322>>>>>>>>>    Procedure Invoke_Select_Bitmap
45324>>>>>>>>>        String sFileName
45324>>>>>>>>>        Get Select_Bitmap to sFileName
45325>>>>>>>>>        If (sFileName<>"") Begin
45327>>>>>>>>>            Set Bitmap to sFileName
45328>>>>>>>>>            Set Changed_State to True
45329>>>>>>>>>        End
45329>>>>>>>>>>
45329>>>>>>>>>    End_Procedure
45330>>>>>>>>>    
45330>>>>>>>>>    
45330>>>>>>>>>    // Augmented to invoke the filedialog to retrieve a new bitmap
45330>>>>>>>>>    Procedure Mouse_Click Integer i1 Integer i2
45332>>>>>>>>>        Forward Send Mouse_Click i1 i2
45334>>>>>>>>>        If (Allow_Select_Bitmap_State(Self)) Begin
45336>>>>>>>>>            Send Invoke_Select_Bitmap
45337>>>>>>>>>        End
45337>>>>>>>>>>
45337>>>>>>>>>    End_Procedure
45338>>>>>>>>>    
45338>>>>>>>>>    Procedure Page_Object Integer iState
45340>>>>>>>>>        Forward Send Page_Object iState
45342>>>>>>>>>        
45342>>>>>>>>>        // Handle tooltip support....
45342>>>>>>>>>        If (iState = 0) Begin
45344>>>>>>>>>            Send RequestDeleteToolTip
45345>>>>>>>>>        End
45345>>>>>>>>>>
45345>>>>>>>>>        Else Begin
45346>>>>>>>>>            Send RequestAddToolTip
45347>>>>>>>>>        End
45347>>>>>>>>>>
45347>>>>>>>>>    End_Procedure
45348>>>>>>>>>    
45348>>>>>>>>>    
45348>>>>>>>>>    // Called by Page_Object. Handles tooltip creation. We use a dedicated
45348>>>>>>>>>    // method to perform AddToolTip because it is often the case that Page_Object
45348>>>>>>>>>    // is implemented in a mixin class.
45348>>>>>>>>>    Procedure RequestAddToolTip
45350>>>>>>>>>        Send AddToolTip
45351>>>>>>>>>    End_Procedure
45352>>>>>>>>>    
45352>>>>>>>>>    
45352>>>>>>>>>    // Called by Page_Object. Handles tooltip removal.
45352>>>>>>>>>    Procedure RequestDeleteToolTip
45354>>>>>>>>>        Send DeleteToolTip
45355>>>>>>>>>    End_Procedure
45356>>>>>>>>>End_Class
45357>>>>>>>Use GlobalFunctionsProcedures.pkg
45357>>>>>>>Use cRichEdit.pkg
Including file: cRichEdit.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cRichEdit.pkg)
45357>>>>>>>>>Use Windows.pkg
45357>>>>>>>>>Use cEdit_Mixin.pkg
Including file: cEdit_mixin.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cEdit_mixin.pkg)
45357>>>>>>>>>>>// mixin used by both cRichEdit and cTextEdit
45357>>>>>>>>>>>Use Windows.pkg
45357>>>>>>>>>>>
45357>>>>>>>>>>>// for undoType and RedoType
45357>>>>>>>>>>>Enum_List
45357>>>>>>>>>>>    Define utUnknown
45357>>>>>>>>>>>    Define utTyping
45357>>>>>>>>>>>    Define utDelete
45357>>>>>>>>>>>    Define utDragDrop
45357>>>>>>>>>>>    Define utCut
45357>>>>>>>>>>>    Define utPaste
45357>>>>>>>>>>>End_Enum_List
45357>>>>>>>>>>>
45357>>>>>>>>>>>Class cEdit_Mixin is a Mixin
45358>>>>>>>>>>>    
45358>>>>>>>>>>>    Procedure Define_cEdit_Mixin
45360>>>>>>>>>>>        Send Define_Standard_Object_Mixin
45361>>>>>>>>>>>        Send Define_Dflabel_Mixin
45362>>>>>>>>>>>        Send Define_ToolTip_Support_Mixin
45363>>>>>>>>>>>        
45363>>>>>>>>>>>        Set Label_Offset to 1 0
45364>>>>>>>>>>>        Set Label_Justification_Mode to Jmode_Top
45365>>>>>>>>>>>        Set pbUseFormWindowHandle to False     // Must come after Define_ToolTip_Support_Mixin
45366>>>>>>>>>>>        Set Color     to clWindow      // should be the default...also system colors don't work
45367>>>>>>>>>>>        Set TextColor to clWindowText  // should be the default
45368>>>>>>>>>>>        
45368>>>>>>>>>>>        Property Boolean Changed_State False
45369>>>>>>>>>>>        
45369>>>>>>>>>>>        Property Integer pbSuppressChange False
45370>>>>>>>>>>>        
45370>>>>>>>>>>>        Property Integer piPriorEnabledColor 0 // private, used by shadow_display
45371>>>>>>>>>>>        
45371>>>>>>>>>>>        Send Define_Shadow_Mixin
45372>>>>>>>>>>>        
45372>>>>>>>>>>>        Property Integer Floating_Menu_Object Default_Form_Floating_Menu_Id
45373>>>>>>>>>>>        
45373>>>>>>>>>>>        On_Key kEnter Send default_key
45374>>>>>>>>>>>        
45374>>>>>>>>>>>        Set Disable_default_action_button_state to True
45375>>>>>>>>>>>        
45375>>>>>>>>>>>    End_Procedure
45376>>>>>>>>>>>    
45376>>>>>>>>>>>    Import_Class_Protocol Standard_Object_Mixin
45377>>>>>>>>>>>    Import_Class_Protocol Dflabel_Mixin
45378>>>>>>>>>>>    Import_Class_Protocol Shadow_Mixin
45379>>>>>>>>>>>    Import_Class_Protocol ToolTip_Support_Mixin
45380>>>>>>>>>>>    
45380>>>>>>>>>>>    // currently there is no built in context menu support (old edit has one).
45380>>>>>>>>>>>    Procedure Mouse_Down2 Integer iWindowNumber Integer iPosition
45382>>>>>>>>>>>        Integer obj rval
45382>>>>>>>>>>>        Forward Send mouse_down2 iWindowNumber iPosition
45384>>>>>>>>>>>        Get Floating_Menu_object to obj
45385>>>>>>>>>>>        If obj Begin
45387>>>>>>>>>>>            If (Focus(desktop)<>Self) Begin
45389>>>>>>>>>>>                Get msg_Activate to rval
45390>>>>>>>>>>>            End
45390>>>>>>>>>>>>
45390>>>>>>>>>>>            If (Focus(desktop)=Self) Begin
45392>>>>>>>>>>>                Send Popup to obj
45393>>>>>>>>>>>            End
45393>>>>>>>>>>>>
45393>>>>>>>>>>>        End
45393>>>>>>>>>>>>
45393>>>>>>>>>>>    End_Procedure
45394>>>>>>>>>>>    
45394>>>>>>>>>>>    Function Object_Shadow_State Returns Integer
45396>>>>>>>>>>>        Function_Return (Private.Shadow_State(Self))
45397>>>>>>>>>>>    End_Function
45398>>>>>>>>>>>    
45398>>>>>>>>>>>    // enables or disables an active window. Allows enabled_state to be used after object is paged
45398>>>>>>>>>>>    Procedure Enable_Window Integer iState
45400>>>>>>>>>>>        Handle hWnd
45400>>>>>>>>>>>        Get Window_Handle to hWnd
45401>>>>>>>>>>>        If hWnd ;            Move (EnableWindow(hWnd,iState)) to hWnd
45404>>>>>>>>>>>    End_Procedure
45405>>>>>>>>>>>    
45405>>>>>>>>>>>    Procedure Set Current_Shadow_State Integer iState
45407>>>>>>>>>>>        Set Private.Shadow_State to iState     // used by get object_shadow_state/enabled_state
45408>>>>>>>>>>>        Set Window_Style to WS_DISABLED iState // used to set style before the object is paged
45409>>>>>>>>>>>        Send Enable_Window (not(iState))       // used to enable/disable after object is paged
45410>>>>>>>>>>>    End_Procedure
45411>>>>>>>>>>>    
45411>>>>>>>>>>>    
45411>>>>>>>>>>>    Procedure Shadow_Display
45413>>>>>>>>>>>        // control will take care of shadowing itself
45413>>>>>>>>>>>        Send Label_Shadow_Display // if object has a label text box, handle disabling this
45414>>>>>>>>>>>    End_Procedure
45415>>>>>>>>>>>    
45415>>>>>>>>>>>    Procedure Set Item_Shadow_State Integer iItem Integer iState
45417>>>>>>>>>>>    End_Procedure
45418>>>>>>>>>>>    
45418>>>>>>>>>>>    Function Item_Shadow_State Integer iItem Returns Integer
45420>>>>>>>>>>>    End_Function
45421>>>>>>>>>>>    
45421>>>>>>>>>>>    Procedure OnChange
45423>>>>>>>>>>>    End_Procedure
45424>>>>>>>>>>>    
45424>>>>>>>>>>>    Procedure OnMaxText
45426>>>>>>>>>>>    End_Procedure
45427>>>>>>>>>>>    
45427>>>>>>>>>>>    Procedure Command Longptr wParam Longptr lParam
45429>>>>>>>>>>>        Integer iParam
45429>>>>>>>>>>>        Forward Send Command wParam lParam
45431>>>>>>>>>>>        Move (hi(wParam)) to iParam
45432>>>>>>>>>>>        If (iParam=EN_CHANGE) Begin
45434>>>>>>>>>>>            // if we are supressing change notification, do nothing.
45434>>>>>>>>>>>            If (pbSuppressChange(Self)) ;                Procedure_Return
45437>>>>>>>>>>>            If not (changed_state(Self)) Begin
45439>>>>>>>>>>>                Set Changed_state to True
45440>>>>>>>>>>>            End
45440>>>>>>>>>>>>
45440>>>>>>>>>>>            Send OnChange
45441>>>>>>>>>>>        End
45441>>>>>>>>>>>>
45441>>>>>>>>>>>        Else If (iParam=EN_MAXTEXT) Begin
45444>>>>>>>>>>>            Send OnMaxText
45445>>>>>>>>>>>        End
45445>>>>>>>>>>>>
45445>>>>>>>>>>>    End_Procedure
45446>>>>>>>>>>>    
45446>>>>>>>>>>>    // Some messages trigger the command message with a change event. In some circumstances we must suppress this.
45446>>>>>>>>>>>    // The delete_data message and the page message both do this.
45446>>>>>>>>>>>    
45446>>>>>>>>>>>    Procedure Delete_Data
45448>>>>>>>>>>>        Boolean bWas
45448>>>>>>>>>>>        Get pbSuppressChange to bWas
45449>>>>>>>>>>>        Set pbSuppressChange to True // Delete_Data sends command which triggers change. We suppress that here
45450>>>>>>>>>>>        Forward Send delete_data
45452>>>>>>>>>>>        Set changed_state to False
45453>>>>>>>>>>>        Send OnChange
45454>>>>>>>>>>>        Set pbSuppressChange to bWas
45455>>>>>>>>>>>    End_Procedure
45456>>>>>>>>>>>    
45456>>>>>>>>>>>    Procedure Page Integer iState
45458>>>>>>>>>>>        Boolean bWas
45458>>>>>>>>>>>        Get pbSuppressChange to bWas
45459>>>>>>>>>>>        Set pbSuppressChange to True  // Page sends command which triggers change. We suppress that here
45460>>>>>>>>>>>        Forward Send Page iState
45462>>>>>>>>>>>        Set pbSuppressChange to bWas
45463>>>>>>>>>>>    End_Procedure
45464>>>>>>>>>>>    
45464>>>>>>>>>>>    
45464>>>>>>>>>>>    Procedure AppendTextLn String sText
45466>>>>>>>>>>>        Send AppendText sText
45467>>>>>>>>>>>        Send AppendText (character(10))
45468>>>>>>>>>>>    End_Procedure
45469>>>>>>>>>>>    
45469>>>>>>>>>>>    // Called by Page_Object. Handles tooltip creation. We use a dedicated
45469>>>>>>>>>>>    // method to perform AddToolTip because it is often the case that Page_Object
45469>>>>>>>>>>>    // is implemented in a mixin class.
45469>>>>>>>>>>>    Procedure RequestAddToolTip
45471>>>>>>>>>>>        Send AddToolTip
45472>>>>>>>>>>>    End_Procedure
45473>>>>>>>>>>>    
45473>>>>>>>>>>>    
45473>>>>>>>>>>>    // Called by Page_Object. Handles tooltip removal.
45473>>>>>>>>>>>    Procedure RequestDeleteToolTip
45475>>>>>>>>>>>        Send DeleteToolTip
45476>>>>>>>>>>>    End_Procedure
45477>>>>>>>>>>>End_Class
45478>>>>>>>>>
45478>>>>>>>>>// constants used for RichEdit Properties
45478>>>>>>>>>// peAlignment
45478>>>>>>>>>Enum_List
45478>>>>>>>>>    Define alLeft   for 1
45478>>>>>>>>>    Define alRight  for 2
45478>>>>>>>>>    Define alCenter for 3
45478>>>>>>>>>End_Enum_List
45478>>>>>>>>>
45478>>>>>>>>>// peBullets
45478>>>>>>>>>Enum_List
45478>>>>>>>>>    Define buNone
45478>>>>>>>>>    Define buBullets
45478>>>>>>>>>    Define buArabicNumbers
45478>>>>>>>>>    Define buLowerLetters
45478>>>>>>>>>    Define buUpperLetters
45478>>>>>>>>>    Define buLowerRomans
45478>>>>>>>>>    Define buUpperRomans
45478>>>>>>>>>End_Enum_List
45478>>>>>>>>>
45478>>>>>>>>>// peBulletStyle
45478>>>>>>>>>Enum_List
45478>>>>>>>>>    Define busRightParen   for 0
45478>>>>>>>>>    Define busEncloseParen for 256
45478>>>>>>>>>    Define busPeriod       for 512
45478>>>>>>>>>    Define busNumberOnly   for 768
45478>>>>>>>>>    Define busNoDisplay    for 1024
45478>>>>>>>>>End_Enum_List
45478>>>>>>>>>
45478>>>>>>>>>// peLineSpacingType
45478>>>>>>>>>Enum_List
45478>>>>>>>>>    Define lstSingle
45478>>>>>>>>>    Define lstSingleAndOneHalf
45478>>>>>>>>>    Define lstDouble
45478>>>>>>>>>End_Enum_List
45478>>>>>>>>>
45478>>>>>>>>>Class cRichEdit is a DFBaseRichEdit
45479>>>>>>>>>    
45479>>>>>>>>>    Procedure Construct_Object
45481>>>>>>>>>        Forward Send Construct_Object
45483>>>>>>>>>        Send Define_cEdit_Mixin
45484>>>>>>>>>        
45484>>>>>>>>>        On_Key Key_Ctrl+Key_B Send ToggleBold
45485>>>>>>>>>        On_Key Key_Ctrl+Key_I Send ToggleItalics
45486>>>>>>>>>        On_Key Key_Ctrl+Key_U Send ToggleUnderline
45487>>>>>>>>>        
45487>>>>>>>>>    End_Procedure
45488>>>>>>>>>    
45488>>>>>>>>>    Import_Class_Protocol cEdit_Mixin
45489>>>>>>>>>    
45489>>>>>>>>>    Procedure ToggleBold
45491>>>>>>>>>        Set pbBold to (not(pbBold(Self)))
45492>>>>>>>>>    End_Procedure
45493>>>>>>>>>    
45493>>>>>>>>>    Procedure ToggleItalics
45495>>>>>>>>>        Set pbItalics to (not(pbItalics(Self)))
45496>>>>>>>>>    End_Procedure
45497>>>>>>>>>    
45497>>>>>>>>>    Procedure ToggleUnderline
45499>>>>>>>>>        Set pbUnderLine to (not(pbUnderLine(Self)))
45500>>>>>>>>>    End_Procedure
45501>>>>>>>>>    
45501>>>>>>>>>End_Class
45502>>>>>>>>>
45502>>>>>>>>>
45502>>>>>>>Use cTextEdit.pkg
Including file: cTextEdit.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cTextEdit.pkg)
45502>>>>>>>>>use Windows.pkg
45502>>>>>>>>>Use cEdit_Mixin.pkg
45502>>>>>>>>>
45502>>>>>>>>>Class cTextEdit is a DFBaseTextEdit
45503>>>>>>>>>    
45503>>>>>>>>>    Procedure Construct_Object
45505>>>>>>>>>        Forward Send Construct_Object
45507>>>>>>>>>        Send Define_cEdit_Mixin
45508>>>>>>>>>    End_Procedure
45509>>>>>>>>>    
45509>>>>>>>>>    Import_Class_Protocol cEdit_Mixin
45510>>>>>>>>>    
45510>>>>>>>>>End_Class
45511>>>>>>>>>
45511>>>>>>>>>
45511>>>>>>>>>
45511>>>>>>>Use cRichEdit.pkg
45511>>>>>>>Use gFormatNumbers.pkg
Including file: gFormatNumbers.pkg    (C:\Program Files\DataFlex 23.0\Pkg\gFormatNumbers.pkg)
45511>>>>>>>>>Use cFormatter.pkg
Including file: cFormatter.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cFormatter.pkg)
45511>>>>>>>>>>>Use VDFBase.pkg
45511>>>>>>>>>>>
45511>>>>>>>>>>>Class cFormatter is an cObject
45512>>>>>>>>>>>    
45512>>>>>>>>>>>    Procedure Construct_object
45514>>>>>>>>>>>        Integer iCh
45514>>>>>>>>>>>        Forward Send construct_object
45516>>>>>>>>>>>        Property String  psCurrencySymbol
45517>>>>>>>>>>>        Set psCurrencySymbol to (Default_Currency_Symbol())
45518>>>>>>>>>>>        
45518>>>>>>>>>>>        Property String  psLeft
45519>>>>>>>>>>>        Property String  psright
45520>>>>>>>>>>>        Property Integer pbThousandsSep
45521>>>>>>>>>>>        Property Integer piPoints
45522>>>>>>>>>>>        
45522>>>>>>>>>>>        Property String  psCurPosLeft
45523>>>>>>>>>>>        Property String  psCurPosright
45524>>>>>>>>>>>        Property Integer pbCurPosThousandsSep
45525>>>>>>>>>>>        Property Integer piCurPosPoints
45526>>>>>>>>>>>        
45526>>>>>>>>>>>        Property String  psCurNegLeft
45527>>>>>>>>>>>        Property String  psCurNegright
45528>>>>>>>>>>>        Property Integer pbCurNegThousandsSep
45529>>>>>>>>>>>        Property Integer piCurNegPoints
45530>>>>>>>>>>>        
45530>>>>>>>>>>>        Property String  psNumPosLeft
45531>>>>>>>>>>>        Property String  psNumPosright
45532>>>>>>>>>>>        Property Integer pbNumPosThousandsSep
45533>>>>>>>>>>>        Property Integer piNumPosPoints
45534>>>>>>>>>>>        
45534>>>>>>>>>>>        Property String  psNumNegLeft
45535>>>>>>>>>>>        Property String  psNumNegright
45536>>>>>>>>>>>        Property Integer pbNumNegThousandsSep
45537>>>>>>>>>>>        Property Integer piNumNegPoints
45538>>>>>>>>>>>        
45538>>>>>>>>>>>        Send SetFormat "$,#.##;($,#.##)" True  // currency
45539>>>>>>>>>>>        Send SetFormat  ",#.*"           False // numeric
45540>>>>>>>>>>>        
45540>>>>>>>>>>>    End_Procedure
45541>>>>>>>>>>>    
45541>>>>>>>>>>>    // internal
45541>>>>>>>>>>>    // parse passed format string and set temporary properties with result
45541>>>>>>>>>>>    Procedure ParseFormat String sFmt
45543>>>>>>>>>>>        
45543>>>>>>>>>>>        String sLeft sRight sDigit
45543>>>>>>>>>>>        Integer bSep iPos i iDigits
45543>>>>>>>>>>>        
45543>>>>>>>>>>>        // replace any literals. A "/" followed by anything.
45543>>>>>>>>>>>        // some literals are special. $ . , / #
45543>>>>>>>>>>>        Move (Replaces("/$",sFmt,Character(1)))    to sFmt
45544>>>>>>>>>>>        Move (Replaces("/.",sFmt,Character(2)))    to sFmt
45545>>>>>>>>>>>        Move (Replaces("/,",sFmt,Character(3)))    to sFmt
45546>>>>>>>>>>>        Move (Replaces("/"+"/",sFmt,Character(4))) to sFmt
45547>>>>>>>>>>>        Move (Replaces("/#",sFmt,Character(5)))    to sFmt
45548>>>>>>>>>>>        Move (Character(9)) to sDigit
45549>>>>>>>>>>>        Move (Replaces("#",sFmt,sDigit))           to sFmt
45550>>>>>>>>>>>        Move (Replaces("/",sFmt,""))               to sFmt // replace all others
45551>>>>>>>>>>>        
45551>>>>>>>>>>>        Move (Pos(",",sFmt))                 to bSep // if we have any , we use thousand seps
45552>>>>>>>>>>>        If bSep ;            Move (Replaces(",",sFmt,"")) to sFmt // remove all ,
45555>>>>>>>>>>>        
45555>>>>>>>>>>>        Move (Replaces("$",sFmt,psCurrencySymbol(Self))) to sFmt // replace any $ with currency symbol
45556>>>>>>>>>>>        
45556>>>>>>>>>>>        Move (Pos(".",sFmt)) to iPos                 // position of decimal
45557>>>>>>>>>>>        
45557>>>>>>>>>>>        // Move all the special literals back into place before parsing
45557>>>>>>>>>>>        Move (Replaces(Character(1),sFmt,"$")) to sFmt
45558>>>>>>>>>>>        Move (Replaces(Character(2),sFmt,".")) to sFmt
45559>>>>>>>>>>>        Move (Replaces(Character(3),sFmt,",")) to sFmt
45560>>>>>>>>>>>        Move (Replaces(Character(4),sFmt,"/")) to sFmt
45561>>>>>>>>>>>        Move (Replaces(Character(5),sFmt,"#")) to sFmt
45562>>>>>>>>>>>        
45562>>>>>>>>>>>        If (iPos>0) Begin                      // if we have a decimanl point
45564>>>>>>>>>>>            Move 1 to i                        // look for first non # to right and count the #s
45565>>>>>>>>>>>            If (mid(sFmt,1,iPos+i)="*") Begin  // the "*" is special. It means as many as you want
45567>>>>>>>>>>>                Move -2 to iDigits
45568>>>>>>>>>>>                Increment i
45569>>>>>>>>>>>            End
45569>>>>>>>>>>>>
45569>>>>>>>>>>>            While (mid(sFmt,1,iPos+i)=sDigit)
45573>>>>>>>>>>>                Increment i
45574>>>>>>>>>>>            Loop
45575>>>>>>>>>>>>
45575>>>>>>>>>>>            Move (Mid(sFmt,255,iPos+i)) to sRight // everything to the right of the last # is format stuff
45576>>>>>>>>>>>            If (iDigits=0) ;                Move (i-1) to iDigits
45579>>>>>>>>>>>            //
45579>>>>>>>>>>>            Move 1 to i                           // find the first non-# to the left of the point
45580>>>>>>>>>>>            While (mid(sFmt,1,iPos-i)=sDigit)     // everything to the left is format stuff
45584>>>>>>>>>>>                Increment i
45585>>>>>>>>>>>            Loop
45586>>>>>>>>>>>>
45586>>>>>>>>>>>            Move (left(sFmt,iPos-i)) to sLeft
45587>>>>>>>>>>>        End
45587>>>>>>>>>>>>
45587>>>>>>>>>>>        Else Begin                             // we have no decinal
45588>>>>>>>>>>>            Move 0 to iDigits                  // so points is none
45589>>>>>>>>>>>            Move (Pos(sDigit,sFmt)) to iPos    // find first #.
45590>>>>>>>>>>>            If (iPos=0) Begin                  // if none, entire string is left format stuff..wierd!
45592>>>>>>>>>>>                Move sFmt to sLeft
45593>>>>>>>>>>>                Move ""   to sRight
45594>>>>>>>>>>>            End
45594>>>>>>>>>>>>
45594>>>>>>>>>>>            Else Begin
45595>>>>>>>>>>>                Move (left(sFmt,iPos-1)) to sLeft // all char to left of first # is left format stuff
45596>>>>>>>>>>>                Move 1 to i
45597>>>>>>>>>>>                While (mid(sFmt,1,iPos+i)=sDigit) // find last #, all char to right is right format
45601>>>>>>>>>>>                    Increment i
45602>>>>>>>>>>>                Loop
45603>>>>>>>>>>>>
45603>>>>>>>>>>>                Move (Mid(sFmt,255,i+iPos)) to sRight
45604>>>>>>>>>>>            End
45604>>>>>>>>>>>>
45604>>>>>>>>>>>        End
45604>>>>>>>>>>>>
45604>>>>>>>>>>>        // set temporary format properties and exit
45604>>>>>>>>>>>        Set pbThousandsSep to bSep
45605>>>>>>>>>>>        Set psLeft         to sLeft
45606>>>>>>>>>>>        Set psRight        to sRight
45607>>>>>>>>>>>        Set piPoints       to iDigits
45608>>>>>>>>>>>    End_Procedure
45609>>>>>>>>>>>    
45609>>>>>>>>>>>    // Public: Sets a format string. Pass full format for Positve and negative in sFmt. Pass
45609>>>>>>>>>>>    //         bCurrency true is this is a currency format, false if a numeric format
45609>>>>>>>>>>>    //
45609>>>>>>>>>>>    //  e.g. Send SetFormat "$,#.##;($,#.##)" True
45609>>>>>>>>>>>    Procedure SetFormat String sFmt Integer bCurrency
45611>>>>>>>>>>>        String sPos sNeg
45611>>>>>>>>>>>        Integer iPos
45611>>>>>>>>>>>        
45611>>>>>>>>>>>        Move (Pos(";",sFmt)) to iPos
45612>>>>>>>>>>>        If iPos Begin
45614>>>>>>>>>>>            Move (left(sFmt,iPos-1))    to sPos
45615>>>>>>>>>>>            Move (mid(sFmt,255,iPos+1)) to sNeg
45616>>>>>>>>>>>        End
45616>>>>>>>>>>>>
45616>>>>>>>>>>>        Else Begin
45617>>>>>>>>>>>            Move sFmt         to sPos
45618>>>>>>>>>>>            Move ("-" + sFmt) to sNeg
45619>>>>>>>>>>>        End
45619>>>>>>>>>>>>
45619>>>>>>>>>>>        Send ParseFormat sPos
45620>>>>>>>>>>>        If bCurrency Begin
45622>>>>>>>>>>>            Set pbCurPosThousandsSep to (pbThousandsSep(Self))
45623>>>>>>>>>>>            Set psCurPosLeft         to (psLeft(Self))
45624>>>>>>>>>>>            Set psCurPosRight        to (psRight(Self))
45625>>>>>>>>>>>            Set piCurPosPoints       to (piPoints(Self))
45626>>>>>>>>>>>        End
45626>>>>>>>>>>>>
45626>>>>>>>>>>>        Else Begin
45627>>>>>>>>>>>            Set pbNumPosThousandsSep to (pbThousandsSep(Self))
45628>>>>>>>>>>>            Set psNumPosLeft         to (psLeft(Self))
45629>>>>>>>>>>>            Set psNumPosRight        to (psRight(Self))
45630>>>>>>>>>>>            Set piNumPosPoints       to (piPoints(Self))
45631>>>>>>>>>>>        End
45631>>>>>>>>>>>>
45631>>>>>>>>>>>        
45631>>>>>>>>>>>        Send ParseFormat sNeg
45632>>>>>>>>>>>        If bCurrency Begin
45634>>>>>>>>>>>            Set pbCurNegThousandsSep to (pbThousandsSep(Self))
45635>>>>>>>>>>>            Set psCurNegLeft         to (psLeft(Self))
45636>>>>>>>>>>>            Set psCurNegRight        to (psRight(Self))
45637>>>>>>>>>>>            Set piCurNegPoints       to (piPoints(Self))
45638>>>>>>>>>>>        End
45638>>>>>>>>>>>>
45638>>>>>>>>>>>        Else Begin
45639>>>>>>>>>>>            Set pbNumNegThousandsSep to (pbThousandsSep(Self))
45640>>>>>>>>>>>            Set psNumNegLeft         to (psLeft(Self))
45641>>>>>>>>>>>            Set psNumNegRight        to (psRight(Self))
45642>>>>>>>>>>>            Set piNumNegPoints       to (piPoints(Self))
45643>>>>>>>>>>>        End
45643>>>>>>>>>>>>
45643>>>>>>>>>>>    End_Procedure
45644>>>>>>>>>>>    
45644>>>>>>>>>>>    // low level formatting. Pass parameters
45644>>>>>>>>>>>    Function Format_Num Number nNumber Integer iPoints Integer bSep ;            String sPrefix String sSuffix Returns String
45646>>>>>>>>>>>        String  sLeft sRight sNumber sSep sDec
45646>>>>>>>>>>>        Integer bIsNegative iDec iLen iCh
45646>>>>>>>>>>>        
45646>>>>>>>>>>>        Get_Attribute DF_DECIMAL_SEPARATOR to iCh
45649>>>>>>>>>>>        Move (Character(iCh)) to sDec
45650>>>>>>>>>>>        
45650>>>>>>>>>>>        Move (abs(nNumber)) to sNumber
45651>>>>>>>>>>>        Move (Pos(sDec,sNumber)) to iDec
45652>>>>>>>>>>>        Move (If(iDec=0, sNumber, left(sNumber,iDec-1))) to sLeft
45653>>>>>>>>>>>        Move (If(iDec=0, "", mid(sNumber,255,iDec+1)))   to sRight
45654>>>>>>>>>>>        // format for decimal separator
45654>>>>>>>>>>>        If (iPoints>=0) ; // if -2, leave it alone, it should not be -1            Move (left(sRight+Repeat("0",iPoints),iPoints)) to sRight
45657>>>>>>>>>>>        
45657>>>>>>>>>>>        // format for thousand sep.
45657>>>>>>>>>>>        If bSep Begin
45659>>>>>>>>>>>            Get_Attribute DF_THOUSANDS_SEPARATOR to iCh
45662>>>>>>>>>>>            Move (Character(iCh)) to sSep
45663>>>>>>>>>>>            Move (Length(sLeft)) to iLen
45664>>>>>>>>>>>            While (iLen>3)
45668>>>>>>>>>>>                Move (insert(sSep,sLeft,iLen-2)) to sLeft
45669>>>>>>>>>>>                Move (iLen-3) to iLen
45670>>>>>>>>>>>            Loop
45671>>>>>>>>>>>>
45671>>>>>>>>>>>        End
45671>>>>>>>>>>>>
45671>>>>>>>>>>>        // if decimal points or -2 (allow anything) and there are points to show
45671>>>>>>>>>>>        If (iPoints>0 or (iPoints=-2 and sRight<>"")) ;            Move (sLeft + sDec + sright) to sLeft
45674>>>>>>>>>>>        Function_Return (sPrefix + sLeft+ sSuffix)
45675>>>>>>>>>>>    End_Function
45676>>>>>>>>>>>    
45676>>>>>>>>>>>    // Public: Format for currency
45676>>>>>>>>>>>    Function FormatCur Number nNumber Integer iPoints Returns String
45678>>>>>>>>>>>        String  sLeft sRight
45678>>>>>>>>>>>        Integer bSep
45678>>>>>>>>>>>        If (nNumber<0) Begin
45680>>>>>>>>>>>            Get pbCurNegThousandsSep to bSep
45681>>>>>>>>>>>            Get psCurNegLeft         to sLeft
45682>>>>>>>>>>>            Get psCurNegRight        to sRight
45683>>>>>>>>>>>            If (iPoints=-1) ;                Get piCurNegPoints       to iPoints
45686>>>>>>>>>>>        End
45686>>>>>>>>>>>>
45686>>>>>>>>>>>        Else Begin
45687>>>>>>>>>>>            Get pbCurPosThousandsSep to bSep
45688>>>>>>>>>>>            Get psCurPosLeft         to sLeft
45689>>>>>>>>>>>            Get psCurPosRight        to sRight
45690>>>>>>>>>>>            If (iPoints=-1) ;                Get piCurPosPoints       to iPoints
45693>>>>>>>>>>>        End
45693>>>>>>>>>>>>
45693>>>>>>>>>>>        Function_Return (Format_Num(Self, nNumber,iPoints,bSep,sLeft,sRight))
45694>>>>>>>>>>>    End_Function
45695>>>>>>>>>>>    
45695>>>>>>>>>>>    // Public: Format for numeric
45695>>>>>>>>>>>    Function FormatNum Number nNumber Integer iPoints Returns String
45697>>>>>>>>>>>        String  sLeft sRight
45697>>>>>>>>>>>        Integer bSep
45697>>>>>>>>>>>        If (nNumber<0) Begin
45699>>>>>>>>>>>            Get pbNumNegThousandsSep to bSep
45700>>>>>>>>>>>            Get psNumNegLeft         to sLeft
45701>>>>>>>>>>>            Get psNumNegRight        to sRight
45702>>>>>>>>>>>            If (iPoints=-1) ;                Get piNumNegPoints       to iPoints
45705>>>>>>>>>>>        End
45705>>>>>>>>>>>>
45705>>>>>>>>>>>        Else Begin
45706>>>>>>>>>>>            Get pbNumPosThousandsSep to bSep
45707>>>>>>>>>>>            Get psNumPosLeft         to sLeft
45708>>>>>>>>>>>            Get psNumPosRight        to sRight
45709>>>>>>>>>>>            If (iPoints=-1) ;                Get piNumPosPoints       to iPoints
45712>>>>>>>>>>>        End
45712>>>>>>>>>>>>
45712>>>>>>>>>>>        Function_Return (Format_Num(Self, nNumber,iPoints,bSep,sLeft,sRight))
45713>>>>>>>>>>>    End_Function
45714>>>>>>>>>>>    
45714>>>>>>>>>>>    
45714>>>>>>>>>>>    // Public: Format passing format string
45714>>>>>>>>>>>    Function FormatVal Number nNumber String sFmt Returns String
45716>>>>>>>>>>>        Integer iPos bIsNeg
45716>>>>>>>>>>>        String  sLeft sRight
45716>>>>>>>>>>>        Integer iPoints bSep
45716>>>>>>>>>>>        Move (nNumber<0) to bIsNeg
45717>>>>>>>>>>>        Move (Pos(";",sFmt)) to iPos
45718>>>>>>>>>>>        Case Begin
45718>>>>>>>>>>>            Case (iPos and not(bIsNeg)) ;                Move (left(sFmt,iPos-1))    to sFmt
45721>>>>>>>>>>>            Case (iPos and bIsNeg) ;                Move (mid(sFmt,255,iPos+1)) to sFmt
45725>>>>>>>>>>>            Case (not(iPos) and not(bIsNeg)) ;                Move sFmt                   to sFmt
45729>>>>>>>>>>>            Case Else ;                Move ("-" + sFmt)           to sFmt
45731>>>>>>>>>>>        Case End
45731>>>>>>>>>>>        Send ParseFormat sFmt
45732>>>>>>>>>>>        Get pbThousandsSep to bSep
45733>>>>>>>>>>>        Get psLeft         to sLeft
45734>>>>>>>>>>>        Get psRight        to sRight
45735>>>>>>>>>>>        Get piPoints       to iPoints
45736>>>>>>>>>>>        Function_Return (Format_Num(Self, nNumber,iPoints,bSep,sLeft,sRight))
45737>>>>>>>>>>>    End_Function
45738>>>>>>>>>>>    
45738>>>>>>>>>>>End_Class
45739>>>>>>>>>
45739>>>>>>>>>Global_Variable Handle ghoFormatter
45739>>>>>>>>>Get Create of desktop U_cFormatter to ghoFormatter
45740>>>>>>>>>
45740>>>>>>>>>Function FormatNumber Global Number nNum Integer iPoints Returns String
45742>>>>>>>>>    Function_Return (FormatNum(ghoFormatter, nNum,iPoints))
45743>>>>>>>>>End_Function
45744>>>>>>>>>
45744>>>>>>>>>Function FormatCurrency Global Number nNum Integer iPoints Returns String
45746>>>>>>>>>    Function_Return (FormatCur(ghoFormatter, nNum,iPoints))
45747>>>>>>>>>End_Function
45748>>>>>>>>>
45748>>>>>>>>>Function FormatValue Global Number nNum String sFmt Returns String
45750>>>>>>>>>    Function_Return (FormatVal(ghoFormatter, nNum,sFmt))
45751>>>>>>>>>End_Function
45752>>>>>>>>>
45752>>>>>>>>>Procedure SetCurrencyFormat Global String sFmt
45754>>>>>>>>>    Send SetFormat of ghoFormatter sFmt True
45755>>>>>>>>>End_Procedure
45756>>>>>>>>>
45756>>>>>>>>>Procedure SetNumberFormat Global String sFmt
45758>>>>>>>>>    Send SetFormat of ghoFormatter sFmt False
45759>>>>>>>>>End_Procedure
45760>>>>>>>>>
45760>>>>>>>>>
45760>>>>>>>Use tWinStructs.pkg
45760>>>>>>>
45760>>>>>>>Use cli.pkg
45760>>>>>>>Use DFBTRDRV.PKG
45760>>>>>>>Use MSSqldrv.pkg
45760>>>>>>>Use db2_drv.pkg
45760>>>>>>>Use odbc_drv.pkg
45760>>>>>>>Use seq_chnl.pkg
45760>>>>>>>
45760>>>>>>>Register_Function phoWorkspace Returns Handle
45760>>>>>>>Register_Function Help_filename Returns String
45760>>>>>>>Register_Function GetHelpFile Returns String
45760>>>>>>>Register_Function pbEnterKeyAsTabKey Returns Boolean
45760>>>>>>>
45760>>>>>>>// *** Constant Declarations: ***
45760>>>>>>>//
45760>>>>>>>
45760>>>>>>>
45760>>>>>>>
45760>>>>>>>
45760>>>>>>>
45760>>>>>>>
45760>>>>>>>// 2016-12-12, Samuel:  Added section for Portuguese
45760>>>>>>>
45760>>>>>>>
45760>>>>>>>
45760>>>>>>>
45760>>>>>>>
45760>>>>>>>
45760>>>>>>>
45760>>>>>>>
45760>>>>>>>
45760>>>>>>>// System icon menu constants. If the upper left hand
45760>>>>>>>// icon in dialogs is clicked, shadow all menu items except Move & Close.
45760>>>>>>>    Define SC_RESTORE  for |CI$F120
45760>>>>>>>    Define SC_MOVE     for |CI$F010
45760>>>>>>>    Define SC_SIZE     for |CI$F000
45760>>>>>>>    Define SC_MINIMIZE for |CI$F020
45760>>>>>>>    Define SC_MAXIMIZE for |CI$F030
45760>>>>>>>    Define SC_CLOSE    for |CI$F060
45760>>>>>>>    Define SC_KEYMENU  for |CI$F100
45760>>>>>>>    Define SC_NEXTWINDOW for |CI$F040
45760>>>>>>>    Define SC_PREVWINDOW for |CI$F050
45760>>>>>>>
45760>>>>>>>Define CS_SignProgram        for "signtool.exe"
45760>>>>>>>Define CS_TempCertBatchFile  for "certinfo.bat"
45760>>>>>>>Define CS_VerifyCredentials  for "verify"
45760>>>>>>>Define CS_VerifyFileParam    for "/a"
45760>>>>>>>Define CS_DefAuthVerPolicy   for "/pa"
45760>>>>>>>Define SEE_MASK_NOCLOSEPROCESS for 64 //(0x00000040)
45760>>>>>>>
45760>>>>>>>// *** Struct Declarations: ***
45760>>>>>>>Struct AboutSHELLEXECUTEINFO
45760>>>>>>>    DWord   cbSize
45760>>>>>>>    Integer fMask
45760>>>>>>>    Handle  hwnd
45760>>>>>>>    Pointer lpVerb
45760>>>>>>>    Pointer lpFile
45760>>>>>>>    Pointer lpParameters
45760>>>>>>>    Pointer lpDirectory
45760>>>>>>>    Integer nShow
45760>>>>>>>    Pointer hInstApp
45760>>>>>>>    Pointer lpIDList
45760>>>>>>>    Pointer lpClass
45760>>>>>>>    Handle  hkeyClass
45760>>>>>>>    DWord   dwHotKey
45760>>>>>>>    Handle  hIconMonitor // Union
45760>>>>>>>    //Handle  hMonitor     // Union
45760>>>>>>>    Handle  hProcess
45760>>>>>>>End_Struct
45760>>>>>>>
45760>>>>>>>
45760>>>>>>>// OBSOLETE STRUCTURE AND WINDOWS API CALL. KEPT FOR BACKWARDS COMPATIBILITY
45760>>>>>>>//Type MEMORYSTATUS
45760>>>>>>>//   Field MEMORYSTATUS.dwLength         as DWord // sizeof(MEMORYSTATUS)
45760>>>>>>>//   Field MEMORYSTATUS.dwMemoryLoad     as DWord // percent Of memory in use
45760>>>>>>>//   Field MEMORYSTATUS.dwTotalPhys      as DWord // bytes Of physical memory
45760>>>>>>>//   Field MEMORYSTATUS.dwAvailPhys      as DWord // free physical memory bytes
45760>>>>>>>//   Field MEMORYSTATUS.dwTotalPageFile  as DWord // bytes Of paging file
45760>>>>>>>//   Field MEMORYSTATUS.dwAvailPageFile  as DWord // free bytes Of paging file
45760>>>>>>>//   Field MEMORYSTATUS.dwTotalVirtual   as DWord // user bytes Of address space
45760>>>>>>>//   Field MEMORYSTATUS.dwAvailVirtual   as DWord // free user bytes
45760>>>>>>>//End_Type
45760>>>>>>>
45760>>>>>>>// *** External Function calls: ***
45760>>>>>>>//
45760>>>>>>>    External_Function GetSystemMenu "GetSystemMenu" User32.dll Handle hWnd Boolean bRevert Returns Handle
45761>>>>>>>
45761>>>>>>>    External_Function GetRemoveMenu "RemoveMenu" user32.dll Handle hWnd UInteger uPosition UInteger uFlags Returns Handle
45762>>>>>>>
45762>>>>>>>// Do not call directly, use the wrapper function instead
45762>>>>>>>External_Function WNetGetUserW "WNetGetUserW" MPR.DLL ;    Pointer lpName ;    Pointer lpUser_Name ;    Pointer lpLength ;    Returns DWord
45763>>>>>>>
45763>>>>>>>    // Wrapper Function WNetGetUser
45763>>>>>>>    Function WNetGetUser Global ;        Pointer lpName ;        Pointer lpUser_Name ;        Pointer lpLength ;        Returns DWord
45765>>>>>>>
45765>>>>>>>        DWord   dwResult
45765>>>>>>>        UWide   uwName uwUserName
45765>>>>>>>        UWide   uwName uwUserName
45765>>>>>>>
45765>>>>>>>        Send StringToWide lpName (&uwName)
45766>>>>>>>
45766>>>>>>>        Send WideSetBuffer lpUser_Name lpLength (&uwUserName)
45767>>>>>>>
45767>>>>>>>        Move (WNetGetUserW (uwName.lpUText, uwUserName.lpUText, lpLength)) to dwResult
45768>>>>>>>
45768>>>>>>>        Send WideToString (&uwUserName) lpUser_Name
45769>>>>>>>
45769>>>>>>>        Function_Return dwResult
45770>>>>>>>    End_Function
45771>>>>>>>
45771>>>>>>>
45771>>>>>>>    External_Function GlobalMemoryStatus "GlobalMemoryStatus" Kernel32.Dll Pointer lpsMemoryStatus Returns Integer
45772>>>>>>>
45772>>>>>>>    External_Function GlobalMemoryStatusEx "GlobalMemoryStatusEx" Kernel32.Dll Pointer lpMemoryStatus Returns Integer
45773>>>>>>>
45773>>>>>>>External_Function AboutShellExecuteEx "ShellExecuteEx" Shell32.dll Pointer pExecInfo Returns Integer
45774>>>>>>>
45774>>>>>>>External_Function AboutWaitForSingleObject "WaitForSingleObject" Kernel32.dll ;  Handle hHandle ;  DWord dwMilliseconds ;  Returns DWord
45775>>>>>>>
45775>>>>>>>External_Function AboutCloseHandle "CloseHandle" Kernel32.dll Handle hHandle Returns Integer
45776>>>>>>>
45776>>>>>>>// *** Global/Desktop Function Declarations: ***
45776>>>>>>>
45776>>>>>>>Function ComputerName Desktop Returns String
45778>>>>>>>    String sName
45778>>>>>>>    Get_Environment "COMPUTERNAME" to sName
45779>>>>>>>>
45779>>>>>>>    Function_Return sName
45780>>>>>>>End_Function
45781>>>>>>>
45781>>>>>>>Function Network_User_Name Desktop Returns String
45783>>>>>>>    WString wName
45783>>>>>>>    Integer iRetval iLength
45783>>>>>>>
45783>>>>>>>    Move 0 to iLength
45784>>>>>>>    Move (WNetGetUserW (0, 0, AddressOf (iLength))) to iRetval
45785>>>>>>>    Move (ZeroString(iLength)) to wName
45786>>>>>>>    Move (WNetGetUserW (0, AddressOf (wName), AddressOf (iLength))) to iRetval
45787>>>>>>>
45787>>>>>>>    If (iRetval = NO_ERROR) Begin
45789>>>>>>>        Function_Return (CString (wName))
45790>>>>>>>    End
45790>>>>>>>>
45790>>>>>>>
45790>>>>>>>    Function_Return "User Unknown"
45791>>>>>>>End_Function
45792>>>>>>>
45792>>>>>>>Function SQLClientVersion Desktop String sDriverID Integer iClient Returns String
45794>>>>>>>    String sClient sDriver sClientDriver
45794>>>>>>>    Integer iNumberOfDrivers iDriver iCount iClientVersion
45794>>>>>>>    Handle hoMsqlDrv
45794>>>>>>>
45794>>>>>>>    Move 0 to iDriver
45795>>>>>>>    Move "" to sClient
45796>>>>>>>    Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
45799>>>>>>>    For iCount from 1 to iNumberOfDrivers
45805>>>>>>>>
45805>>>>>>>        Get_Attribute DF_DRIVER_NAME of iCount to sDriver
45808>>>>>>>        If (Uppercase(sDriver) = Uppercase(sDriverID)) Begin
45810>>>>>>>            Move iCount to iDriver
45811>>>>>>>            Move iNumberOfDrivers to iCount // We're done.
45812>>>>>>>        End
45812>>>>>>>>
45812>>>>>>>    Loop
45813>>>>>>>>
45813>>>>>>>
45813>>>>>>>    // This info is (at current) only available for the MS SQL driver:
45813>>>>>>>    If (sDriverID = MSSQLDRV_ID) Begin
45815>>>>>>>        Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
45818>>>>>>>        Get Create (RefClass(cMSSQLHandler)) to hoMsqlDrv
45819>>>>>>>        Get SqlServerClientVersionName of hoMsqlDrv iClientVersion to sClientDriver
45820>>>>>>>        Send Destroy of hoMsqlDrv
45821>>>>>>>        Move (SFormat("MSSQLDRV Client Version: %1", sClientDriver)) to sClient
45822>>>>>>>    End
45822>>>>>>>>
45822>>>>>>>
45822>>>>>>>    Function_Return sClient
45823>>>>>>>End_Function
45824>>>>>>>
45824>>>>>>>// *** Class Declarations: ***
45824>>>>>>>//
45824>>>>>>>Class cBitmapContainerDFLink is a BitmapContainer
45825>>>>>>>    Procedure Mouse_Click Integer iWindowNumber Integer iPosition
45827>>>>>>>        Send Mouse_Up iWindowNumber iPosition
45828>>>>>>>    End_Procedure
45829>>>>>>>    Procedure Mouse_Up Integer iWindowNumber Integer iPosition
45831>>>>>>>        Forward Send Mouse_Up iWindowNumber iPosition
45833>>>>>>>        Send Show_HomePage "http://www.dataaccess.com/"
45834>>>>>>>    End_Procedure
45835>>>>>>>End_Class
45836>>>>>>>
45836>>>>>>>Class cCopyEditorContentButton is a Button
45837>>>>>>>    Procedure Construct_Object
45839>>>>>>>        Forward Send Construct_Object
45841>>>>>>>        Property Handle phoEditorHandle
45842>>>>>>>        Set psToolTip to C_$DescCopy
45843>>>>>>>    End_Procedure
45844>>>>>>>
45844>>>>>>>    Procedure CopyToWindowsClipboard
45846>>>>>>>        Handle hoEditor
45846>>>>>>>        Boolean bCanCopy
45846>>>>>>>        Address aEditorAddress
45846>>>>>>>
45846>>>>>>>        Get phoEditorHandle to hoEditor
45847>>>>>>>        Send Select_All of hoEditor
45848>>>>>>>        Get CanCopy of hoEditor to bCanCopy
45849>>>>>>>        If (bCanCopy = True) Begin
45851>>>>>>>            Get paValue of hoEditor to aEditorAddress
45852>>>>>>>            Send Copy   of hoEditor
45853>>>>>>>            // Remove the selection after text is copied to the clipboard.
45853>>>>>>>            Send Beginning_of_Data of hoEditor
45854>>>>>>>            Send Info_Box C_$CopyToClipboard_Text
45855>>>>>>>        End
45855>>>>>>>>
45855>>>>>>>    End_Procedure
45856>>>>>>>End_Class
45857>>>>>>>
45857>>>>>>>Class SysinfoDisplay is a cTextEdit
45858>>>>>>>    Procedure Construct_Object
45860>>>>>>>        Forward Send Construct_Object
45862>>>>>>>
45862>>>>>>>        Set Size to 100 245
45863>>>>>>>        Set Location to 6 6
45864>>>>>>>        Set Border_Style to Border_None
45865>>>>>>>        Set Read_Only_State to True
45866>>>>>>>        Set pbWrap to True
45867>>>>>>>        Set peAnchors to anAll
45868>>>>>>>    End_Procedure
45869>>>>>>>
45869>>>>>>>    // Augmented class message to adjust certain text strings that are wrong...
45869>>>>>>>
45869>>>>>>>    Procedure AppendTextLn String sText
45871>>>>>>>        String sWorkspaceWSFile
45871>>>>>>>
45871>>>>>>>        // Only works for English:
45871>>>>>>>        If (ghoApplication > 0) Begin
45873>>>>>>>            If (sText contains "Workspace Name") Begin
45875>>>>>>>                Move "Workspace Config Filename:" to sText
45876>>>>>>>                Get psWorkspaceWSFile of (phoWorkspace(ghoApplication)) to sWorkspaceWSFile
45877>>>>>>>                Move (sText * sWorkspaceWSFile) to sText
45878>>>>>>>            End
45878>>>>>>>>
45878>>>>>>>        End
45878>>>>>>>>
45878>>>>>>>        Send AppendText sText
45879>>>>>>>        Send AppendText (character(10))
45880>>>>>>>    End_Procedure
45881>>>>>>>
45881>>>>>>>    //    This method will show the name Of the current directory in the system
45881>>>>>>>    //    information box
45881>>>>>>>    Procedure Show_Current_Directory
45883>>>>>>>        String sDir
45883>>>>>>>
45883>>>>>>>        Get_Current_Directory To sDir
45884>>>>>>>
45884>>>>>>>        Send AppendTextLn (SFormat (C_$CurrentDirectory, sDir))
45885>>>>>>>    End_Procedure
45886>>>>>>>
45886>>>>>>>    Procedure Show_Windows_Directory
45888>>>>>>>        String sWindir
45888>>>>>>>
45888>>>>>>>        Get_Windows_Directory To sWindir
45889>>>>>>>
45889>>>>>>>        Send AppendTextLn (SFormat (C_$WindowsDirectory, sWindir))
45890>>>>>>>    End_Procedure
45891>>>>>>>
45891>>>>>>>    Procedure Show_Current_User
45893>>>>>>>        Send AppendTextLn (SFormat (C_$Computer_Name, ComputerName (Self)))
45894>>>>>>>        Send AppendTextLn (SFormat (C_$NetworkUserName, Network_User_Name (Self)))
45895>>>>>>>    End_Procedure
45896>>>>>>>
45896>>>>>>>    Procedure Show_Number_Format
45898>>>>>>>        Integer iFormat
45898>>>>>>>        String sFormatText
45898>>>>>>>
45898>>>>>>>        Get_Attribute DF_THOUSANDS_SEPARATOR to iFormat
45901>>>>>>>        Move (Character (iFormat)) To sFormatText
45902>>>>>>>        Send AppendTextLn (SFormat (C_$ThousandsSeparator, sFormatText, iFormat))
45903>>>>>>>
45903>>>>>>>        Get_Attribute DF_DECIMAL_SEPARATOR to iFormat
45906>>>>>>>        Move (Character (iFormat)) to sFormatText
45907>>>>>>>        Send AppendTextLn (SFormat (C_$DecimalSeparator, sFormatText))
45908>>>>>>>    End_Procedure
45909>>>>>>>
45909>>>>>>>    Procedure Show_Filelist_Name
45911>>>>>>>        String sFilename
45911>>>>>>>
45911>>>>>>>        Get_Attribute DF_FILELIST_NAME to sFilename
45914>>>>>>>
45914>>>>>>>        Send AppendTextLn (SFormat (C_$CurrentFilelist, sFilename))
45915>>>>>>>    End_Procedure
45916>>>>>>>
45916>>>>>>>    Procedure Show_Lock_Delay
45918>>>>>>>        Integer iLockdelay
45918>>>>>>>
45918>>>>>>>        Get_Attribute DF_LOCK_DELAY to iLockdelay
45921>>>>>>>
45921>>>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingDelay, iLockDelay))
45922>>>>>>>    End_Procedure
45923>>>>>>>
45923>>>>>>>    Procedure Show_Lock_Timeout
45925>>>>>>>        Integer iLockTimeout
45925>>>>>>>
45925>>>>>>>        Get_Attribute DF_LOCK_TIMEOUT to iLockTimeout
45928>>>>>>>
45928>>>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingTimeout, iLockTimeOut))
45929>>>>>>>    End_Procedure
45930>>>>>>>
45930>>>>>>>    Procedure Show_Screen_Size
45932>>>>>>>        Integer iYscreensize iXscreensize
45932>>>>>>>
45932>>>>>>>        Move (GetSystemMetrics (SM_CXSCREEN)) To iXscreensize
45933>>>>>>>        Move (GetSystemMetrics (SM_CYSCREEN)) To iYscreensize
45934>>>>>>>
45934>>>>>>>        Send AppendTextLn (SFormat (C_$VideoResolution, iXscreensize, iYscreensize))
45935>>>>>>>    End_Procedure
45936>>>>>>>
45936>>>>>>>    Procedure Show_Page_Size
45938>>>>>>>        Send AppendTextLn (SFormat (C_$PageEndFormFeed, Pageend, Pagefeed))
45939>>>>>>>    End_procedure
45940>>>>>>>
45940>>>>>>>    Procedure Show_Date
45942>>>>>>>        Date dToday
45942>>>>>>>
45942>>>>>>>        Move (CurrentDateTime()) to dToday
45943>>>>>>>
45943>>>>>>>        Send AppendTextLn (SFormat (C_$CurrentSystemDate, String (dToday)))
45944>>>>>>>    End_procedure
45945>>>>>>>
45945>>>>>>>    Procedure Show_Date_Format
45947>>>>>>>        Integer iDateFormat
45947>>>>>>>        String sDateFormat
45947>>>>>>>
45947>>>>>>>        Get_Attribute DF_DATE_FORMAT to iDateFormat
45950>>>>>>>        Case Begin
45950>>>>>>>            Case (iDateFormat = DF_DATE_USA)
45952>>>>>>>                Move C_$USA To sDateFormat
45953>>>>>>>                Case Break
45954>>>>>>>            Case (iDateFormat = DF_DATE_EUROPEAN)
45957>>>>>>>                Move C_$European To sDateFormat
45958>>>>>>>                Case Break
45959>>>>>>>            Case (iDateFormat = DF_DATE_MILITARY)
45962>>>>>>>                Move C_$Military To sDateFormat
45963>>>>>>>                Case Break
45964>>>>>>>            Case Else
45964>>>>>>>                Move C_$UnknownDateType To sDateFormat
45965>>>>>>>                Case Break
45966>>>>>>>        Case End
45966>>>>>>>
45966>>>>>>>        Send AppendTextLn (SFormat (C_$DateFormat, sDateformat))
45967>>>>>>>    End_Procedure
45968>>>>>>>
45968>>>>>>>    // 2013-08-14 NGS
45968>>>>>>>    // Unformatted numeric values shown doesn't look good. These looks much better.
45968>>>>>>>    Procedure Show_Systemresources
45970>>>>>>>        tWinMemoryStatusEx MemoryStatusInfo
45970>>>>>>>        tWinMemoryStatusEx MemoryStatusInfo
45970>>>>>>>        Integer iRetval
45970>>>>>>>        Number nValue
45970>>>>>>>        String sValue
45970>>>>>>>
45970>>>>>>>        Move (SizeOfType (tWinMemoryStatusEx)) to MemoryStatusInfo.dwLength
45971>>>>>>>        Move (GlobalMemoryStatusEx (AddressOf (MemoryStatusInfo))) to iRetval
45972>>>>>>>        If (iRetval = 0) Begin
45974>>>>>>>            Move (ShowLastError ()) to iRetval
45975>>>>>>>            Procedure_Return
45976>>>>>>>        End
45976>>>>>>>>
45976>>>>>>>
45976>>>>>>>        Send AppendTextLn ""
45977>>>>>>>        Move MemoryStatusInfo.ullTotalPhys to nValue
45978>>>>>>>
45978>>>>>>>        // Show memory in Gigabytes:
45978>>>>>>>        Move (nValue/1024/1024/1024) to nValue
45979>>>>>>>        Move (Round(nValue)) to nValue
45980>>>>>>>        Get FormatNumber nValue 2 to sValue
45981>>>>>>>        Send AppendTextLn (SFormat (C_$AvailableMemory, (sValue * "GB")))
45982>>>>>>>        Send AppendTextLn (SFormat (C_$MemoryUtilization, String(MemoryStatusInfo.dwMemoryLoad) * "%"))
45983>>>>>>>
45983>>>>>>>//        Send AppendTextLn (SFormat (C_$AvailablePhysicalMemory, Real (MemoryStatusInfo.ullAvailPhys) / Real (MemoryStatusInfo.ullTotalPhys) * 100.0))
45983>>>>>>>        Move (Real(MemoryStatusInfo.ullAvailPhys) / Real(MemoryStatusInfo.ullTotalPhys) * 100.0) to nValue
45984>>>>>>>        Move (Round(nValue)) to nValue
45985>>>>>>>        Get FormatNumber nValue 0 to sValue
45986>>>>>>>        Send AppendTextLn (SFormat (C_$AvailablePhysicalMemory, (sValue * "%")))
45987>>>>>>>
45987>>>>>>>//        Send AppendTextLn (SFormat (C_$AvailablePagefileSpace, Real (MemoryStatusInfo.ullAvailPageFile) / Real (MemoryStatusInfo.ullTotalPageFile) * 100.0))
45987>>>>>>>        Move (Real(MemoryStatusInfo.ullAvailPageFile) / Real(MemoryStatusInfo.ullTotalPageFile) * 100.0) to nValue
45988>>>>>>>        Move (Round(nValue)) to nValue
45989>>>>>>>        Get FormatNumber nValue 0 to sValue
45990>>>>>>>        Send AppendTextLn (SFormat (C_$AvailablePagefileSpace, (sValue * "%")))
45991>>>>>>>
45991>>>>>>>//        Send AppendTextLn (SFormat (C_$AvailableVirtualMemory, Real (MemoryStatusInfo.ullAvailVirtual) / Real (MemoryStatusInfo.ullTotalVirtual) * 100.0))
45991>>>>>>>        Move (Real(MemoryStatusInfo.ullAvailVirtual) / Real(MemoryStatusInfo.ullTotalVirtual) * 100.0) to nValue
45992>>>>>>>        Move (Round(nValue)) to nValue
45993>>>>>>>        Get FormatNumber nValue 0 to sValue
45994>>>>>>>        Send AppendTextLn (SFormat (C_$AvailableVirtualMemory, (sValue * "%")))
45995>>>>>>>
45995>>>>>>>        // Add an empty row after the memory information:
45995>>>>>>>        Send AppendTextLn ""
45996>>>>>>>    End_Procedure
45997>>>>>>>
45997>>>>>>>    Procedure Show_Registration
45999>>>>>>>        String sRegName
45999>>>>>>>        Integer iSN iUsersMax iUserCount
45999>>>>>>>
45999>>>>>>>        Registration sRegName iSN
46000>>>>>>>>
46000>>>>>>>        Get_Licensed_Max_Users to iUsersMax
46001>>>>>>>        Get_Current_User_Count to iUserCount
46002>>>>>>>
46002>>>>>>>        Send AppendTextLn (SFormat (C_$Serial, iSN))
46003>>>>>>>        Send AppendTextLn (SFormat (C_$RegName, sRegName))
46004>>>>>>>        Send AppendTextLn (SFormat (C_$Current_User_Count, iUserCount))
46005>>>>>>>        Send AppendTextLn (SFormat (C_$Max_Licensed_User_Count, iUsersMax))
46006>>>>>>>    End_Procedure
46007>>>>>>>
46007>>>>>>>    //****************************************************************************
46007>>>>>>>    // If workspaces are used, we will send the message EnumerateWorkspaceData
46007>>>>>>>    // To the workspace object passing the an object and message To send back
46007>>>>>>>    // To this object. It is expected that the workspace object will send this
46007>>>>>>>    // message for every line Of information it wants displayed (passing the
46007>>>>>>>    // information To be displayed
46007>>>>>>>    //****************************************************************************
46007>>>>>>>    Register_Procedure EnumerateWorkspaceData Integer hObjId Integer hmMessId
46007>>>>>>>
46007>>>>>>>    Procedure Show_ServicePack
46009>>>>>>>        String sKey sVersion sDataFlex
46009>>>>>>>        Handle hoRegistry
46009>>>>>>>        Boolean bExists bOpened
46009>>>>>>>
46009>>>>>>>        Move "DataFlex"        to sDataFlex
46010>>>>>>>
46010>>>>>>>        Get Create (RefClass(cRegistry)) to hoRegistry
46011>>>>>>>        Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
46012>>>>>>>        Set pfAccessRights of hoRegistry to KEY_READ
46013>>>>>>>        Get KeyExists of hoRegistry "SOFTWARE\Wow6432Node" to bExists
46014>>>>>>>
46014>>>>>>>        If (bExists) Begin
46016>>>>>>>            Move ("SOFTWARE\Wow6432Node\Data Access Worldwide\" + sDataFlex + "\" + SysConf (SYSCONF_DATAFLEX_REV)) to sKey
46017>>>>>>>        End
46017>>>>>>>>
46017>>>>>>>        Else Begin
46018>>>>>>>            Move ("SOFTWARE\Data Access Worldwide\"             + sDataFlex + "\" + SysConf (SYSCONF_DATAFLEX_REV)) to sKey
46019>>>>>>>        End
46019>>>>>>>>
46019>>>>>>>        Get KeyExists of hoRegistry sKey to bExists
46020>>>>>>>        If (bExists) Begin
46022>>>>>>>            Get OpenKey of hoRegistry sKey to bOpened
46023>>>>>>>            If (bOpened) Begin
46025>>>>>>>                Get ValueExists of hoRegistry "CurrentVersionDescription" to bExists
46026>>>>>>>                If (bExists) Begin
46028>>>>>>>                    Get ReadString of hoRegistry "CurrentVersionDescription" to sVersion
46029>>>>>>>                End
46029>>>>>>>>
46029>>>>>>>                Send CloseKey of hoRegistry
46030>>>>>>>            End
46030>>>>>>>>
46030>>>>>>>        End
46030>>>>>>>>
46030>>>>>>>        Send Destroy of hoRegistry
46031>>>>>>>
46031>>>>>>>        If (sVersion <> "") Begin
46033>>>>>>>           Send AppendTextLn sVersion
46034>>>>>>>           Send AppendTextLn ""
46035>>>>>>>        End
46035>>>>>>>>
46035>>>>>>>    End_Procedure
46036>>>>>>>
46036>>>>>>>    Procedure Show_WorkspaceInformation
46038>>>>>>>        Integer hoWorkspace
46038>>>>>>>
46038>>>>>>>        If (ghoApplication <> 0) Begin
46040>>>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
46041>>>>>>>            If (hoWorkspace <> 0) Begin
46043>>>>>>>                Send EnumerateWorkspaceData of hoWorkspace Self msg_AppendTextLn
46044>>>>>>>            End
46044>>>>>>>>
46044>>>>>>>        End
46044>>>>>>>>
46044>>>>>>>    End_Procedure
46045>>>>>>>
46045>>>>>>>    //****************************************************************************
46045>>>>>>>    // If connection ids are used, we will send the message EnumerateConnections
46045>>>>>>>    // to the connection manager object passing the an object and message to send
46045>>>>>>>    // back to this object. It is expected that the connection manager object will
46045>>>>>>>    // send this message for every line Of information it wants displayed (passing
46045>>>>>>>    // the information To be displayed
46045>>>>>>>    //****************************************************************************
46045>>>>>>>    Register_Procedure EnumerateConnections Integer hObjId Integer hmMessId
46045>>>>>>>
46045>>>>>>>    Procedure Show_ConnectionIdInformation
46047>>>>>>>        If (ghoConnection > 0) Begin
46049>>>>>>>            Send EnumerateConnections of ghoConnection Self (RefProc(AppendTextLn))
46050>>>>>>>            Send AppendTextLn ""
46051>>>>>>>        End
46051>>>>>>>>
46051>>>>>>>    End_Procedure
46052>>>>>>>
46052>>>>>>>    Function VersionStr Integer iVer Integer iRev Integer iBld Returns String
46054>>>>>>>        Function_Return (String (iVer) - "." - String (iRev) - "." - String (iBld))
46055>>>>>>>    End_Function
46056>>>>>>>
46056>>>>>>>    Procedure Show_Versions
46058>>>>>>>        Integer iVersion iRevision iBuild
46058>>>>>>>
46058>>>>>>>        Version_information iVersion iRevision iBuild
46060>>>>>>>
46060>>>>>>>        Send AppendTextLn (SFormat (C_$RuntimeVersion, VersionStr(self,iVersion,iRevision,iBuild) ))
46061>>>>>>>        Send AppendTextLn (SFormat (C_$PackageVersion, VersionStr(self,PKG_VERSION, PKG_REVISION, PKG_BUILD) ))
46062>>>>>>>        Send AppendTextLn (SFormat (C_$FMACVersion, VersionStr(self,FMAC_VERSION, FMAC_REVISION, FMAC_BUILD) ))
46063>>>>>>>        Send AppendTextLn "This is a 32-bit exe file"
46064>>>>>>>    End_Procedure
46065>>>>>>>
46065>>>>>>>    Function IsDAWSQLDriver String sDriverID Returns Boolean
46067>>>>>>>        Boolean bOK
46067>>>>>>>        Move (sDriverID = MSSQLDRV_ID or sDriverID = DB2_DRV_ID or sDriverID = ODBC_DRV_ID) to bOK
46068>>>>>>>        Function_Return bOK
46069>>>>>>>    End_Function
46070>>>>>>>
46070>>>>>>>    //***
46070>>>>>>>    //*** BW
46070>>>>>>>    //*** Procedure: Show_Drivers
46070>>>>>>>    //*** Purpose  : Show loaded database drivers
46070>>>>>>>    //***
46070>>>>>>>
46070>>>>>>>//#IF (Required_FMAC_Build > 106)
46070>>>>>>>//    #Warning -3
46070>>>>>>>//#ENDIF
46070>>>>>>>    Procedure Show_Drivers
46072>>>>>>>        String sDriverID sVersion sClient sValue
46072>>>>>>>        Integer iNumberOfDrivers iDriver iClient iUsersMax iSerialNo iNumServers iCount
46072>>>>>>>        Handle hoCLIHandler hoBtrvHandler
46072>>>>>>>        Boolean bStudioLicense bIsDAWDriver
46072>>>>>>>
46072>>>>>>>        Move False to bStudioLicense
46073>>>>>>>
46073>>>>>>>        Get Create (RefClass(cCLIHandler))      to hoCLIHandler
46074>>>>>>>        Get Create (RefClass(cDFBtrDrvHandler)) to hoBtrvHandler
46075>>>>>>>
46075>>>>>>>        // For testing purposes:
46075>>>>>>>//        Send Ignore_Error of Error_Object_Id DFERR_CANT_LOAD_DLL
46075>>>>>>>//        Load_Driver MSSQLDRV_ID
46075>>>>>>>//        Load_Driver ODBC_DRV_ID
46075>>>>>>>//        Load_Driver DB2_DRV_ID
46075>>>>>>>//        Send Trap_Error of Error_Object_Id DFERR_CANT_LOAD_DLL
46075>>>>>>>//
46075>>>>>>>        Move False to Err
46076>>>>>>>
46076>>>>>>>        // Loop through all loaded drivers.
46076>>>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
46079>>>>>>>        If (iNumberOfDrivers > 1) Begin
46081>>>>>>>            Send AppendTextLn ""
46082>>>>>>>        End
46082>>>>>>>>
46082>>>>>>>        For iDriver from 1 to iNumberOfDrivers
46088>>>>>>>>
46088>>>>>>>            Send Ignore_Error of Error_Object_Id DFERR_BAD_PARAMETER
46089>>>>>>>            Get_Attribute DF_DRIVER_NAME of iDriver to sDriverID
46092>>>>>>>            Send Trap_Error of Error_Object_Id DFERR_BAD_PARAMETER
46093>>>>>>>            Get IsDAWSQLDriver  sDriverID to bIsDAWDriver
46094>>>>>>>
46094>>>>>>>            If (sDriverID = DFBTRDRV_ID or bIsDAWDriver = True) Begin
46096>>>>>>>
46096>>>>>>>                // Pervasive/Btrieve database
46096>>>>>>>                If (sDriverID = DFBTRDRV_ID) Begin
46098>>>>>>>                    Get CKRevision of hoBtrvHandler to sVersion
46099>>>>>>>                    Get PSQLLocalEngineVersionInfo of hoBtrvHandler 0 to sClient
46100>>>>>>>                    If (sClient <> "0.0.0") Begin
46102>>>>>>>                        Send AppendTextLn (SFormat (C_$Pervasive_Local_Engine_Version, sClient))
46103>>>>>>>                    End
46103>>>>>>>>
46103>>>>>>>                    Get PSQLServerEngineVersionInfo of hoBtrvHandler 0 to sClient
46104>>>>>>>                    If (sClient <> "0.0.0") Begin
46106>>>>>>>                        Send AppendTextLn (SFormat (C_$Pervasive_Server_Engine_Version, sClient))
46107>>>>>>>                    End
46107>>>>>>>>
46107>>>>>>>                End
46107>>>>>>>>
46107>>>>>>>
46107>>>>>>>                Else Begin
46108>>>>>>>                    Set psDriverID of hoCLIHandler to sDriverID
46109>>>>>>>                    Move 0 to iNumServers
46110>>>>>>>                    If (sDriverID <> DATAFLEX_ID) Begin
46112>>>>>>>                        Get_Attribute DF_DRIVER_NUMBER_SERVERS of iDriver to iNumServers
46115>>>>>>>                    End
46115>>>>>>>>
46115>>>>>>>
46115>>>>>>>                    If (bIsDAWDriver = True) Begin
46117>>>>>>>                        If (sDriverID = MSSQLDRV_ID) Begin
46119>>>>>>>                            Get SQLClientVersion sDriverID iClient to sClient
46120>>>>>>>                        End
46120>>>>>>>>
46120>>>>>>>                        Get CKRevision of hoCLIHandler to sVersion
46121>>>>>>>                    End
46121>>>>>>>>
46121>>>>>>>
46121>>>>>>>                    // If the serialnumber is = 0, it means that the
46121>>>>>>>                    // Studio licens is in use and there is no
46121>>>>>>>                    // number of max users defined because the driver is
46121>>>>>>>                    // relying on the info from the VDF license.
46121>>>>>>>                    If (bStudioLicense = False) Begin
46123>>>>>>>                        Get SerialNumber of hoCLIHandler to iSerialNo
46124>>>>>>>                        Move (iSerialNo = 0) to bStudioLicense
46125>>>>>>>                    End
46125>>>>>>>>
46125>>>>>>>                End
46125>>>>>>>>
46125>>>>>>>                Send AppendTextLn (SFormat (C_$DatabaseDriver, (sDriverID * "-" * (C_$Version + ": " + sVersion))))
46126>>>>>>>                If (sClient <> "" and sDriverID = MSSQLDRV_ID) Begin
46128>>>>>>>                    Send AppendTextLn (C_$SQL_Client_Text * sClient)
46129>>>>>>>                End
46129>>>>>>>>
46129>>>>>>>                If (iNumServers <> 0) Begin
46131>>>>>>>                    For iCount from 1 to iNumServers
46137>>>>>>>>
46137>>>>>>>                        Get_Attribute DF_DRIVER_SERVER_NAME of iDriver iCount to sValue
46140>>>>>>>                        If (not(sValue contains ";PWD=")) Begin
46142>>>>>>>                            Send AppendTextLn ("    " + C_$SQLServerText * sValue)
46143>>>>>>>                        End
46143>>>>>>>>
46143>>>>>>>                    Loop
46144>>>>>>>>
46144>>>>>>>                End
46144>>>>>>>>
46144>>>>>>>            End
46144>>>>>>>>
46144>>>>>>>        Loop
46145>>>>>>>>
46145>>>>>>>
46145>>>>>>>        Send AppendTextLn ""
46146>>>>>>>        If (bStudioLicense = False) Begin
46148>>>>>>>            Get MaxUsers of hoCLIHandler to iUsersMax
46149>>>>>>>            Send AppendTextLn (SFormat (C_$Max_DbDriver_Licensed_User_Count, iUsersMax))
46150>>>>>>>        End
46150>>>>>>>>
46150>>>>>>>        Else Begin
46151>>>>>>>            Send AppendTextLn C_$DF_Studio_License_Text
46152>>>>>>>        End
46152>>>>>>>>
46152>>>>>>>        Send Destroy of hoCLIHandler
46153>>>>>>>        Send Destroy of hoBtrvHandler
46154>>>>>>>    End_Procedure
46155>>>>>>>
46155>>>>>>>    Procedure Show_HelpFile
46157>>>>>>>        String sHelpFile
46157>>>>>>>        Integer eHelpType
46157>>>>>>>
46157>>>>>>>        If (ghoApplication <> 0) Begin
46159>>>>>>>            Get peHelpType Of ghoApplication To eHelpType
46160>>>>>>>            If (eHelpType = htHtmlHelp and ghoHtmlHelp) Begin
46162>>>>>>>                Get GetHelpFile Of ghoHtmlHelp To sHelpFile
46163>>>>>>>            End
46163>>>>>>>>
46163>>>>>>>            Else If (eHelpType = htWinHelp and Help_object_id) Begin
46166>>>>>>>                Get Help_filename Of Help_object_id To sHelpFile
46167>>>>>>>            End
46167>>>>>>>>
46167>>>>>>>            Else Begin
46168>>>>>>>                Move C_$ThereIsNoHelpfileDefined To sHelpFile
46169>>>>>>>            End
46169>>>>>>>>
46169>>>>>>>
46169>>>>>>>            Send AppendTextLn (SFormat (C_$HelpFile, sHelpFile))
46170>>>>>>>        End
46170>>>>>>>>
46170>>>>>>>    End_Procedure
46171>>>>>>>
46171>>>>>>>    Procedure Show_EnterAsTab
46173>>>>>>>        Boolean bEnterKeyAsTabKey
46173>>>>>>>        String sText
46173>>>>>>>
46173>>>>>>>        If (ghoApplication <> 0) Begin
46175>>>>>>>            Get pbEnterKeyAsTabKey Of ghoApplication To bEnterKeyAsTabKey
46176>>>>>>>            If (bEnterKeyAsTabKey) Begin
46178>>>>>>>                Move "True" To sText
46179>>>>>>>            End
46179>>>>>>>>
46179>>>>>>>            Else Begin
46180>>>>>>>                Move "False" To sText
46181>>>>>>>            End
46181>>>>>>>>
46181>>>>>>>            Send AppendTextLn (SFormat (C_$EnterKeyNavForward, sText))
46182>>>>>>>        End
46182>>>>>>>>
46182>>>>>>>    End_Procedure
46183>>>>>>>
46183>>>>>>>    //    During activation we will remove the old information and add the newly
46183>>>>>>>    //    found systeminformation
46183>>>>>>>    Procedure Add_Focus Integer hoRoot
46185>>>>>>>        Forward Send Add_Focus hoRoot
46187>>>>>>>
46187>>>>>>>        Send Delete_Data
46188>>>>>>>
46188>>>>>>>        Set Changed_State To False
46189>>>>>>>        Set Read_Only_State To True
46190>>>>>>>
46190>>>>>>>        Send Show_Registration
46191>>>>>>>        Send Show_Drivers
46192>>>>>>>        Send Show_ServicePack
46193>>>>>>>        Send Show_Versions
46194>>>>>>>        Send AppendTextLn ""
46195>>>>>>>
46195>>>>>>>        If (ghoApplication <> 0) Begin
46197>>>>>>>            Send Show_WorkSpaceInformation
46198>>>>>>>            Send Show_HelpFile
46199>>>>>>>            Send AppendTextLn ""
46200>>>>>>>        End
46200>>>>>>>>
46200>>>>>>>        Else Begin
46201>>>>>>>            Send AppendTextLn ""
46202>>>>>>>        End
46202>>>>>>>>
46202>>>>>>>
46202>>>>>>>        If (ghoConnection <> 0) Begin
46204>>>>>>>            Send Show_ConnectionIdInformation
46205>>>>>>>        End
46205>>>>>>>>
46205>>>>>>>
46205>>>>>>>        Send Show_Current_User
46206>>>>>>>        Send Show_Windows_Directory
46207>>>>>>>        Send Show_Current_Directory
46208>>>>>>>
46208>>>>>>>        // This is already shown in the workspace details,
46208>>>>>>>        // unless no workspace object is present:
46208>>>>>>>        If (ghoApplication = 0) Begin
46210>>>>>>>            Send Show_Filelist_Name
46211>>>>>>>        End
46211>>>>>>>>
46211>>>>>>>
46211>>>>>>>        If (ghoApplication <> 0) Begin
46213>>>>>>>            Send AppendTextLn ""
46214>>>>>>>            Send Show_EnterAsTab
46215>>>>>>>        End
46215>>>>>>>>
46215>>>>>>>
46215>>>>>>>        Send Show_Screen_Size
46216>>>>>>>        Send Show_Page_Size
46217>>>>>>>        Send Show_Number_Format
46218>>>>>>>        Send Show_Date_Format
46219>>>>>>>        Send Show_Lock_Delay
46220>>>>>>>        Send Show_Lock_Timeout
46221>>>>>>>        Send Show_Date
46222>>>>>>>        Send Show_Systemresources
46223>>>>>>>        Send Beginning_of_Data
46224>>>>>>>
46224>>>>>>>        Set Icon to 'default.ico'
46225>>>>>>>    End_Procedure
46226>>>>>>>End_Class
46227>>>>>>>
46227>>>>>>>Class SysInfoDialog is a ModalPanel
46228>>>>>>>    Procedure Construct_Object
46230>>>>>>>        Forward Send Construct_Object
46232>>>>>>>
46232>>>>>>>        Set Label to C_$SystemInformation
46233>>>>>>>        Set Size to 140 267
46234>>>>>>>        Set Locate_Mode to CENTER_ON_PARENT
46235>>>>>>>        Set Border_Style to Border_Thick
46236>>>>>>>        Set Sysmenu_Icon to False
46237>>>>>>>
46237>>>>>>>        // "+1" will make the panel to paint correctly.
46237>>>>>>>        Set piMinSize to (Hi(Size(Self))) (Low(Size(Self)) +1)
46238>>>>>>>
46238>>>>>>>        // 2014-09-14 NGS
46238>>>>>>>        // Added a container object around the cTexteditor
46238>>>>>>>        // object to get a border around the text.
46238>>>>>>>        Object oSysinfoDisplayContainer is a Container3d
46240>>>>>>>            Set Location to 2 4
46241>>>>>>>            Set Size to 110 255
46242>>>>>>>            Set Border_Style to Border_ClientEdge
46243>>>>>>>            Set Color to clWhite
46244>>>>>>>            Set peAnchors to anAll
46245>>>>>>>
46245>>>>>>>            Object oSysinfoDisplay is a SysInfoDisplay
46247>>>>>>>            End_Object
46248>>>>>>>
46248>>>>>>>        End_Object
46249>>>>>>>
46249>>>>>>>        Object oCloseButton is a Button
46251>>>>>>>            Set Label to C_$Close
46252>>>>>>>            Set Location to 120 210
46253>>>>>>>            CompilerWarnings Off
46253>>>>>>>            Set Message Item 0 to msg_Close_Panel
46254>>>>>>>            CompilerWarnings On
46254>>>>>>>            Set Default_State To True
46255>>>>>>>            // In case someone likes to make the AboutDialog's Border_Style to thick,
46255>>>>>>>            // and changes its peAnchors, we might as well prepare this object
46255>>>>>>>            // for that situation.
46255>>>>>>>            Set peAnchors to anBottomRight
46256>>>>>>>        End_Object
46257>>>>>>>
46257>>>>>>>        Object oCopyButton is a cCopyEditorContentButton
46259>>>>>>>            On_Item C_$Copy Send CopyToWindowsClipboard
46260>>>>>>>            Set Size to 14 50
46261>>>>>>>            Set Location to 120 158
46262>>>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46262>>>>>>>            // we might as well prepare the object for it.
46262>>>>>>>            Set peAnchors to anBottomRight
46263>>>>>>>            Set phoEditorHandle to (oSysinfoDisplay(Self))
46264>>>>>>>        End_Object
46265>>>>>>>
46265>>>>>>>        On_Key kCancel Send Close_Panel
46266>>>>>>>    End_Procedure
46267>>>>>>>
46267>>>>>>>    Procedure Page Integer iPageObject
46269>>>>>>>        Handle hMenu
46269>>>>>>>        Integer iPrevState
46269>>>>>>>
46269>>>>>>>        Forward Send Page iPageObject
46271>>>>>>>
46271>>>>>>>        // Ok, this seems to have been fixed in VDF 17.1!
46271>>>>>>>        //
46271>>>>>>>    End_Procedure
46272>>>>>>>
46272>>>>>>>End_Class
46273>>>>>>>
46273>>>>>>>Class cAboutEdit is an cRichEdit
46274>>>>>>>    Procedure Construct_Object
46276>>>>>>>        Forward Send Construct_Object
46278>>>>>>>
46278>>>>>>>        Property String psContentText
46279>>>>>>>
46279>>>>>>>        Set Size to 77 153
46280>>>>>>>        Set Location to 8 60
46281>>>>>>>        Set Read_Only_State to True
46282>>>>>>>        Set Skip_State to True
46283>>>>>>>        // Font size is calculated in "Twips", which are 1/1440 of an inch,
46283>>>>>>>        // or 1/20 of a printer's point.
46283>>>>>>>        Set piRightMargin to (0.1 * 1440)
46284>>>>>>>        Set Border_Style  to Border_None
46285>>>>>>>    End_Procedure
46286>>>>>>>
46286>>>>>>>    // Adds a line of text to the edit object
46286>>>>>>>    Procedure Add_Line String sText
46288>>>>>>>        String sContentText
46288>>>>>>>        Get psContentText to sContentText
46289>>>>>>>        Move (sContentText + String(sText)) to sContentText
46290>>>>>>>        Set psContentText to sContentText
46291>>>>>>>    End_Procedure
46292>>>>>>>
46292>>>>>>>    // Compared to Add_Line above, this adds an extra empty line after the passed value.
46292>>>>>>>    // Note that we use a property psContentText and add to it,
46292>>>>>>>    // because the object isn't paged yet when we add these
46292>>>>>>>    // values and the COM edit object needs to be paged
46292>>>>>>>    // for the text to become visible. See Also: Procedure Page below.
46292>>>>>>>    Procedure Add_LineLn String sText
46294>>>>>>>        String sContentText sCR
46294>>>>>>>
46294>>>>>>>        Move (Character(10) + String(Character(13))) to sCR
46295>>>>>>>        Get psContentText to sContentText
46296>>>>>>>        Move (sContentText + String(sText) + sCR) to sContentText
46297>>>>>>>        Set psContentText to sContentText
46298>>>>>>>    End_Procedure
46299>>>>>>>
46299>>>>>>>    Procedure OnLinkClicked Integer iPositionStart Integer iPositionEnd
46301>>>>>>>        String sLinkText
46301>>>>>>>        Get TextRange iPositionStart iPositionEnd to sLinkText
46302>>>>>>>        Send Show_HomePage sLinkText
46303>>>>>>>    End_Procedure
46304>>>>>>>
46304>>>>>>>    Procedure Page Integer iPageObject
46306>>>>>>>        String sContentText
46306>>>>>>>
46306>>>>>>>        Forward Send Page iPageObject
46308>>>>>>>        Get psContentText to sContentText
46309>>>>>>>        Send AppendText sContentText
46310>>>>>>>        send Beginning_of_Data
46311>>>>>>>    End_Procedure
46312>>>>>>>
46312>>>>>>>End_Class
46313>>>>>>>
46313>>>>>>>Class AboutDialog is a ModalPanel
46314>>>>>>>    Procedure Construct_Object
46316>>>>>>>
46316>>>>>>>        Forward Send Construct_Object
46318>>>>>>>
46318>>>>>>>        Set Label to C_$About
46319>>>>>>>        Set Size to 118 230
46320>>>>>>>        Set Locate_Mode to CENTER_ON_PARENT
46321>>>>>>>        Set Border_Style to Border_Thick
46322>>>>>>>        Set piMinSize to (Hi(Size(Self))) (Low(Size(Self)))
46323>>>>>>>
46323>>>>>>>        Object oSysInfoDialog is a SysInfoDialog
46325>>>>>>>        End_Object
46326>>>>>>>
46326>>>>>>>        Object oBox is a Container3d
46328>>>>>>>            Set Border_Style to Border_Normal
46329>>>>>>>            Set Size to 90 220
46330>>>>>>>            Set Location to 4 5
46331>>>>>>>            Set Color to clWhite
46332>>>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46332>>>>>>>            // we might as well prepare the object for it.
46332>>>>>>>            Set peAnchors to anAll
46333>>>>>>>
46333>>>>>>>            Object oAboutGraphic is a BitmapContainer
46335>>>>>>>                Set Border_Style To Border_None
46336>>>>>>>                Set Bitmap_Style to Bitmap_Center
46337>>>>>>>                Set Color to clWhite
46338>>>>>>>                Set Size to 45 50
46339>>>>>>>                Set Location to 0 3
46340>>>>>>>            End_Object
46341>>>>>>>
46341>>>>>>>            Object oPoweredByDFGraphic is a cBitmapContainerDFLink
46343>>>>>>>                Set Border_Style to Border_None
46344>>>>>>>                Set Bitmap_Style to Bitmap_Center
46345>>>>>>>                Set Color to clWhite
46346>>>>>>>                Set Size to 30 55
46347>>>>>>>                Set Location to 50 3
46348>>>>>>>            End_Object
46349>>>>>>>
46349>>>>>>>            Object oInfoList_Editor is an cAboutEdit
46351>>>>>>>                // In case someone wants to set the AboutDialog's Border_Style to thick,
46351>>>>>>>                // we might as well prepare the object for it.
46351>>>>>>>                Set peAnchors to anAll
46352>>>>>>>            End_Object
46353>>>>>>>
46353>>>>>>>            // These objects are here for backwards compatability only.
46353>>>>>>>            // They are not used.
46353>>>>>>>            Object oProductName is a TextBox
46355>>>>>>>                Set Label To C_$ProductName
46356>>>>>>>                Set Size To 10 45
46357>>>>>>>                Set Location To 8 53
46358>>>>>>>                Set Visible_State to False
46359>>>>>>>                Set Focus_Mode to NonFocusable
46360>>>>>>>            End_Object
46361>>>>>>>
46361>>>>>>>            Object oVersion is a TextBox
46363>>>>>>>                Set Label To C_$Version
46364>>>>>>>                Set Size To 10 25
46365>>>>>>>                Set Location To 21 53
46366>>>>>>>                Set Visible_State to False
46367>>>>>>>                Set Focus_Mode to NonFocusable
46368>>>>>>>            End_Object
46369>>>>>>>
46369>>>>>>>            Object oCopyright is a TextBox
46371>>>>>>>                Set Label To C_$Copyright
46372>>>>>>>                Set Size To 10 31
46373>>>>>>>                Set Location To 34 53
46374>>>>>>>                Set Visible_State to False
46375>>>>>>>                Set Focus_Mode to NonFocusable
46376>>>>>>>            End_Object
46377>>>>>>>
46377>>>>>>>            Object oAuthor is a TextBox
46379>>>>>>>                Set Label To C_$Author
46380>>>>>>>                Set Size To 10 22
46381>>>>>>>                Set Location To 46 53
46382>>>>>>>                Set Visible_State to False
46383>>>>>>>                Set Focus_Mode to NonFocusable
46384>>>>>>>            End_Object
46385>>>>>>>
46385>>>>>>>        End_Object
46386>>>>>>>
46386>>>>>>>        Object oOKButton is a Button
46388>>>>>>>            On_Item C_$Close Send Close_Panel
46389>>>>>>>            Set Location to 98 176
46390>>>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46390>>>>>>>            // we might as well prepare the object for it.
46390>>>>>>>            Set peAnchors to anBottomRight
46391>>>>>>>        End_Object
46392>>>>>>>
46392>>>>>>>        Object oSysInfoButton is a Button
46394>>>>>>>            On_Item C_$SystemInfo Send Show_Sysinfo
46395>>>>>>>            Set Location to 98 123
46396>>>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46396>>>>>>>            // we might as well prepare the object for it.
46396>>>>>>>            Set peAnchors to anBottomRight
46397>>>>>>>        End_Object
46398>>>>>>>
46398>>>>>>>        Object oCopyButton is a cCopyEditorContentButton
46400>>>>>>>            On_Item C_$Copy Send CopyToWindowsClipboard
46401>>>>>>>            Set Size to 14 50
46402>>>>>>>            Set Location to 98 70
46403>>>>>>>            // In case someone wants to set the AboutDialog's Border_Style to thick,
46403>>>>>>>            // we might as well prepare the object for it.
46403>>>>>>>            Set peAnchors to anBottomRight
46404>>>>>>>            Set phoEditorHandle to (oInfoList_Editor(Self))
46405>>>>>>>        End_Object
46406>>>>>>>
46406>>>>>>>        On_Key Kcancel Send KeyAction of oOKButton
46407>>>>>>>        Set Logo   to "DacAbout.bmp"  // Square bitmaps of 80x80 work best
46408>>>>>>>        Set LogoDF to "DF32.bmp"
46409>>>>>>>//        Set LogoVDF to "PoweredByOrange.bmp"
46409>>>>>>>    End_Procedure
46410>>>>>>>
46410>>>>>>>    Procedure Page Integer iPageObject
46412>>>>>>>        Handle hMenu
46412>>>>>>>        Integer iPrevState
46412>>>>>>>
46412>>>>>>>        Forward Send Page iPageObject
46414>>>>>>>        // Due to a bug in the ModalPanel class, we need to set the icon here:
46414>>>>>>>        Set Icon to "Default.ico"
46415>>>>>>>
46415>>>>>>>        // Shadow upper left corner menu items: (icon menu items)
46415>>>>>>>        Move (GetSystemMenu(Window_Handle(Self), False)) to hMenu
46416>>>>>>>        Move (EnableMenuItem(hMenu, SC_RESTORE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46417>>>>>>>        // The "Move" menu command may come in handy to have.
46417>>>>>>>        // Move (EnableMenuItem(hMenu, SC_MOVE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46417>>>>>>>        Move (EnableMenuItem(hMenu, SC_SIZE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46418>>>>>>>        Move (EnableMenuItem(hMenu, SC_MINIMIZE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46419>>>>>>>        Move (EnableMenuItem(hMenu, SC_MAXIMIZE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46420>>>>>>>        // The "Close" menu command may be good to have.
46420>>>>>>>        // Move (EnableMenuItem(hMenu, SC_CLOSE, MF_BYCOMMAND ior MF_GRAYED)) to iPrevState
46420>>>>>>>    End_Procedure
46421>>>>>>>
46421>>>>>>>    Procedure Set ProductName String sText
46423>>>>>>>        Set Value of oProductName to sText
46424>>>>>>>    End_Procedure
46425>>>>>>>
46425>>>>>>>    Procedure Set Copyright String sText
46427>>>>>>>        Set Value of oCopyright to sText
46428>>>>>>>    End_Procedure
46429>>>>>>>
46429>>>>>>>    Procedure Set Author String sText
46431>>>>>>>        Set Value of oAuthor to sText
46432>>>>>>>    End_Procedure
46433>>>>>>>
46433>>>>>>>    Procedure Set Version String sVersion
46435>>>>>>>        Handle hoVersionInfo
46435>>>>>>>        Boolean bIncluded
46435>>>>>>>        Integer iMajor iMinor iRelease iBuild
46435>>>>>>>//        Date dCompileDate
46435>>>>>>>        String sCertInfo sCompileDateAndTime
46435>>>>>>>
46435>>>>>>>        If (sVersion = "") Begin
46437>>>>>>>            // This automatically shows the program version of the program, if available.
46437>>>>>>>            // It will be displayed as the second item in the edit object.
46437>>>>>>>            If (ghoApplication <> 0) Begin
46439>>>>>>>                Get phoVersionInfo of ghoApplication to hoVersionInfo
46440>>>>>>>                If (hoVersionInfo <> 0) Begin
46442>>>>>>>                    Get pbIncluded of hoVersionInfo to bIncluded
46443>>>>>>>                    If (bIncluded) Begin
46445>>>>>>>                        Get piVersionMajor of hoVersionInfo to iMajor
46446>>>>>>>                        Get piVersionMinor of hoVersionInfo to iMinor
46447>>>>>>>                        Get piVersionRelease of hoVersionInfo to iRelease
46448>>>>>>>                        Get piVersionBuild of hoVersionInfo to iBuild
46449>>>>>>>                        Move (SFormat (C_$VERSION + ": %1.%2.%3.%4", iMajor, iMinor, iRelease, iBuild)) to sVersion
46450>>>>>>>                    End
46450>>>>>>>>
46450>>>>>>>                End
46450>>>>>>>>
46450>>>>>>>            End
46450>>>>>>>>
46450>>>>>>>        End
46450>>>>>>>>
46450>>>>>>>
46450>>>>>>>        // Display the compiled date as the next row in the edit object, after the program version.
46450>>>>>>>        Get psCompileDateAndTime of ghoApplication to sCompileDateAndTime
46451>>>>>>>        If (sCompileDateAndTime <> "") Begin
46453>>>>>>>            Send Add_Lineln (sVersion + (Character(13)) + C_$Compile_Date * String(sCompileDateAndTime))
46454>>>>>>>        End
46454>>>>>>>>
46454>>>>>>>//        Get GetCompileDate to dCompileDate
46454>>>>>>>//        If (sVersion <> "") Begin
46454>>>>>>>//            Send Add_Lineln (sVersion + (Character(13)) + C_$Compile_Date * String(dCompileDate))
46454>>>>>>>//        End
46454>>>>>>>
46454>>>>>>>        Get IsProgramDigitallySigned to sCertInfo
46455>>>>>>>        If (sCertInfo <> "-1") Begin
46457>>>>>>>            If (sCertInfo <> "") Begin
46459>>>>>>>                Send Add_LineLn sCertInfo
46460>>>>>>>            End
46460>>>>>>>>
46460>>>>>>>            Else Begin
46461>>>>>>>                Send Add_LineLn "The program has NOT been digitally signed, or there is a problem with the digical certificate."
46462>>>>>>>            End
46462>>>>>>>>
46462>>>>>>>        End
46462>>>>>>>>
46462>>>>>>>    End_Procedure
46463>>>>>>>
46463>>>>>>>    Function IsDate String sDate Returns Boolean
46465>>>>>>>        Boolean bIsDate
46465>>>>>>>        String sGoodCharacters sChar
46465>>>>>>>        Integer iCount iLength
46465>>>>>>>
46465>>>>>>>        Move True to bIsDate
46466>>>>>>>        Move "0123456789-/" to sGoodCharacters
46467>>>>>>>        Move (Length(sDate)) to iLength
46468>>>>>>>        For iCount from 1 to iLength
46474>>>>>>>>
46474>>>>>>>            Move (Left(sDate, 1)) to sChar
46475>>>>>>>            Move (Mid(sDate, 12, 2)) to sDate
46476>>>>>>>            Move (sGoodCharacters contains sChar) to bIsDate
46477>>>>>>>            If (bIsDate = False) Begin
46479>>>>>>>                Move iLength to iCount
46480>>>>>>>            End
46480>>>>>>>>
46480>>>>>>>        Loop
46481>>>>>>>>
46481>>>>>>>        Function_Return bIsDate
46482>>>>>>>    End_Function
46483>>>>>>>
46483>>>>>>>    Function GetCompileDate Returns Date
46485>>>>>>>        Date dCompileDate
46485>>>>>>>        String sAppFilename sProgram sData sCompileDate
46485>>>>>>>        Integer iChannel iPos iDateFormat iCount iSize
46485>>>>>>>        Boolean bIsValid   
46485>>>>>>>        
46485>>>>>>>        Move 0 to dCompileDate
46486>>>>>>>        // Get full path to the current running executable
46486>>>>>>>        Get GetApplicationFileName of ghoApplication to sAppFilename
46487>>>>>>>        Get GetApplicationName     of ghoApplication to sProgram
46488>>>>>>>
46488>>>>>>>        //Read the current file  up to where the data we're interesting in is (this was hand calced and so could vary)
46488>>>>>>>        Get Seq_Open_Input_Channel ("binary:" * sAppFilename) to iChannel
46489>>>>>>>
46489>>>>>>>        Read_Block channel iChannel sData 9000000   // This must be big enough to reach the compile date location
46491>>>>>>>        Move (Pos(sProgram, sData)) to iPos
46492>>>>>>>        If (iPos > 0) Begin
46494>>>>>>>            // The compile date is 10 characters long and starts 3 characters after the program name
46494>>>>>>>            Move (Mid(sData, 10, iPos + Length(sProgram) + 3)) to sCompileDate  // In US format
46495>>>>>>>
46495>>>>>>>            // If the current date format is non US, we need to temporary
46495>>>>>>>            // change the format and then move the string to the date variable.
46495>>>>>>>            Get_Attribute DF_DATE_FORMAT to iDateFormat
46498>>>>>>>            Set_Attribute DF_DATE_FORMAT to DF_DATE_USA  
46501>>>>>>>            Send Ignore_Error of Error_Object_Id 16 
46502>>>>>>>            If (Left(sCompileDate, 1) = "0") Begin
46504>>>>>>>                Move ("1" + String(sCompileDate)) to sCompileDate
46505>>>>>>>            End
46505>>>>>>>>
46505>>>>>>>            Move (Date(sCompileDate))    to dCompileDate
46506>>>>>>>            Send Trap_Error of Error_Object_Id 16
46507>>>>>>>            Set_Attribute DF_DATE_FORMAT to iDateFormat // Reset date format
46510>>>>>>>        End
46510>>>>>>>>
46510>>>>>>>        Else Begin
46511>>>>>>>            Error DFERR_PROGRAM "Compile Date location in .exe not found"
46512>>>>>>>>
46512>>>>>>>        End
46512>>>>>>>>
46512>>>>>>>
46512>>>>>>>        Send Seq_Close_Channel iChannel
46513>>>>>>>
46513>>>>>>>        Function_Return dCompileDate
46514>>>>>>>    End_Function
46515>>>>>>>
46515>>>>>>>    // A variant of the ShellExecute Win API, but it waits until the process that is started
46515>>>>>>>    // (the passed program), has been finished
46515>>>>>>>    // The DOS box does also _not_ flash briefly.
46515>>>>>>>    Procedure RunProgramWait String sProgram String sParameter
46517>>>>>>>        Handle hProcess
46517>>>>>>>        Integer iVoid
46517>>>>>>>        AboutSHELLEXECUTEINFO sInfo
46517>>>>>>>        AboutSHELLEXECUTEINFO sInfo
46517>>>>>>>
46517>>>>>>>        Move (SizeOfType(AboutSHELLEXECUTEINFO)) to sInfo.cbSize
46518>>>>>>>
46518>>>>>>>        Move SEE_MASK_NOCLOSEPROCESS to sInfo.fMask
46519>>>>>>>        Move SW_SHOW                 to sInfo.nShow
46520>>>>>>>
46520>>>>>>>        Move (AddressOf(sProgram))   to sInfo.lpFile
46521>>>>>>>        Move (AddressOf(sParameter)) to sInfo.lpParameters
46522>>>>>>>        // This will "hide" the DOS box from showing (no flasing box):
46522>>>>>>>        Move 0                       to sInfo.nShow
46523>>>>>>>
46523>>>>>>>        Move (AboutShellExecuteEx(AddressOf(sInfo))) to iVoid
46524>>>>>>>        Move sInfo.hProcess to hProcess
46525>>>>>>>        If (hProcess) Begin
46527>>>>>>>            Move (AboutWaitForSingleObject(hProcess, -1)) to iVoid
46528>>>>>>>            Move (AboutCloseHandle(hProcess)) to iVoid
46529>>>>>>>        End
46529>>>>>>>>
46529>>>>>>>    End_Procedure
46530>>>>>>>
46530>>>>>>>    Function AddFolderDelimiter String sPath Returns String
46532>>>>>>>        String sDirSep
46532>>>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
46533>>>>>>>        Move (Trim(sPath)) to sPath
46534>>>>>>>        If (Right(sPath, 1) <> sDirSep) Begin
46536>>>>>>>            Move (sPath + sDirSep) to sPath
46537>>>>>>>        End
46537>>>>>>>>
46537>>>>>>>        Function_Return sPath
46538>>>>>>>    End_Function
46539>>>>>>>
46539>>>>>>>    // Returns an empty string if the current program is not digitally signed,
46539>>>>>>>    // or there is a problem with the certificate.
46539>>>>>>>    // Note: A copy of the Microsoft signtool.exe program must reside in the Programs folder,
46539>>>>>>>    //       else nothing is shown in the About object. (Size 355 KB)
46539>>>>>>>    Function IsProgramDigitallySigned Returns String
46541>>>>>>>        Boolean bExists
46541>>>>>>>        String sPath sProgram sParams sRetval
46541>>>>>>>        Integer iCh
46541>>>>>>>
46541>>>>>>>        Move "" to sRetval
46542>>>>>>>        Get psProgramPath of (phoWorkspace(ghoApplication)) to sPath
46543>>>>>>>        Get AddFolderDelimiter sPath to sPath
46544>>>>>>>        File_Exist (sPath + CS_SignProgram) bExists
46545>>>>>>>        If (bExists = False) Begin
46547>>>>>>>            Function_Return "-1"
46548>>>>>>>        End
46548>>>>>>>>
46548>>>>>>>
46548>>>>>>>        Get GetApplicationFileName of ghoApplication to sProgram
46549>>>>>>>        Move (CS_VerifyCredentials * CS_DefAuthVerPolicy) to sParams
46550>>>>>>>        Move (sParams * '"' + sProgram + '"') to sParams
46551>>>>>>>        Move (sParams * String("| clip"))    to sParams
46552>>>>>>>        Get Seq_New_Channel to iCh
46553>>>>>>>        Direct_Output channel iCh (sPath + CS_TempCertBatchFile)
46555>>>>>>>            Writeln channel iCh ('"' + sPath + CS_SignProgram + '"' * sParams)
46558>>>>>>>        Close_Output channel iCh
46560>>>>>>>        // New ShellExecute based message that waits for the passed process to end.
46560>>>>>>>        Send RunProgramWait (sPath + CS_TempCertBatchFile) ""
46561>>>>>>>        Direct_Input channel iCh "CLIPBOARD:"
46563>>>>>>>            Readln channel iCh sRetval
46565>>>>>>>            Readln channel iCh sRetval
46567>>>>>>>            Readln channel iCh sRetval
46569>>>>>>>            Readln channel iCh sRetval
46571>>>>>>>        Close_Input channel iCh
46573>>>>>>>        Send Seq_Release_Channel iCh
46574>>>>>>>        If (Lowercase(sRetval) contains "authenticode") Begin
46576>>>>>>>            Move "This program has been digitally signed and the certificate is valid." to sRetval
46577>>>>>>>        End
46577>>>>>>>>
46577>>>>>>>        Else Begin
46578>>>>>>>            Move "" to sRetval
46579>>>>>>>        End
46579>>>>>>>>
46579>>>>>>>//        Get DeleteFile (sPath + CS_TempCertBatchFile) to iRetval
46579>>>>>>>        EraseFile (sPath + CS_TempCertBatchFile)
46580>>>>>>>>
46580>>>>>>>        Function_Return sRetval
46581>>>>>>>    End_Function
46582>>>>>>>
46582>>>>>>>    Procedure Add_LineLn String sValue
46584>>>>>>>        Send Add_LineLn of oInfoList_Editor sValue
46585>>>>>>>    End_Procedure
46586>>>>>>>
46586>>>>>>>    Procedure Add_Line String sValue
46588>>>>>>>        Send Add_Line of oInfoList_Editor sValue
46589>>>>>>>    End_Procedure
46590>>>>>>>
46590>>>>>>>    Procedure Set Logo string sLogo
46592>>>>>>>        // Square bitmaps of 80x80 work best
46592>>>>>>>        Set Bitmap of oAboutGraphic to sLogo
46593>>>>>>>    End_Procedure
46594>>>>>>>
46594>>>>>>>    Procedure Set LogoDF String sLogo
46596>>>>>>>        Set Bitmap of oPoweredByDFGraphic to sLogo
46597>>>>>>>    End_Procedure
46598>>>>>>>
46598>>>>>>>    Procedure Show_Sysinfo
46600>>>>>>>        Send Popup_Modal of oSysinfoDialog
46601>>>>>>>    End_Procedure
46602>>>>>>>
46602>>>>>>>    Procedure Show_HomePage String sWebpage
46604>>>>>>>        Handle hWnd
46604>>>>>>>        Get Window_Handle to hWnd
46605>>>>>>>        Runprogram Shell Background (Trim(sWebpage))
46606>>>>>>>    End_Procedure
46607>>>>>>>
46607>>>>>>>End_Class
46608>>>>>
46608>>>>>    Function piOrgErrorHandlerID Returns Integer
46610>>>>>    End_Function
46611>>>>>
46611>>>>>Class cBaseDbUpdateFuncLib is a cObject
46612>>>>>    Import_Class_Protocol cDbUpdateFunctionLibrary_Mixin
Including file: ParseKeyWord.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ParseKeyWord.pkg)
46613>>>>>>
46613>>>>>>Function ParseKeyWord String sConnect String sKeyWord Returns String
46615>>>>>>    Integer iStart iEnd
46615>>>>>>    String sRetval
46615>>>>>>
46615>>>>>>    Move (Trim(sConnect)) to sConnect
46616>>>>>>    Move (Pos(Uppercase(sKeyWord), Uppercase(sConnect)))  to iStart
46617>>>>>>    If (iStart = 0) Begin
46619>>>>>>        Function_Return ""
46620>>>>>>    End
46620>>>>>>>
46620>>>>>>    Move (Left(sConnect, (iStart -1 + Length(sKeyWord)))) to sRetval
46621>>>>>>    Move (Replace(sRetval, sConnect, "")) to sRetval
46622>>>>>>    If (sKeyWord = Uppercase(CS_SQLConnectionIDText)) Begin
46624>>>>>>        Move (Pos(",", sRetval))          to iEnd
46625>>>>>>    End
46625>>>>>>>
46625>>>>>>    Else Begin
46626>>>>>>        Move (Pos(";", sRetval))          to iEnd
46627>>>>>>    End
46627>>>>>>>
46627>>>>>>    If (iEnd = 0 and (sRetval contains ",")) Begin
46629>>>>>>        Move (Pos(",", sRetval))          to iEnd
46630>>>>>>        Decrement iEnd
46631>>>>>>    End
46631>>>>>>>
46631>>>>>>    If (iEnd <> 0) Begin
46633>>>>>>        Move (Left(sRetval, (iEnd -1)))   to sRetval
46634>>>>>>    End
46634>>>>>>>
46634>>>>>>    Move (Replace("=", sRetval, ""))      to sRetval
46635>>>>>>
46635>>>>>>    Function_Return (Trim(sRetval))
46636>>>>>>End_Function
46637>>>>>>
46637>>>>>>
46637>>>>>    
46637>>>>>    Procedure Construct_Object
46639>>>>>        Handle ho
46639>>>>>        Forward Send Construct_Object
46641>>>>>        Move Self to ghoDbUpdateFunctionLibrary
46642>>>>>        
46642>>>>>        Send CreateDbUpdateLibraryProperties
46643>>>>>        Property String private.psCollation "Latin1_General_CS_AS"
46644>>>>>
46644>>>>>        // If no ghoSQLConnectionHandler object has been created prior to this object,
46644>>>>>        // we will create one as it is used for all ConnectionID, ConnectionString
46644>>>>>        // etc settings.
46644>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46646>>>>>            Get Create (RefClass(cSQLConnectionHandler)) to ho
46647>>>>>            Set phoSQLConnectionHandler to ho
46648>>>>>        End
46648>>>>>>
46648>>>>>
46648>>>>>    End_Procedure
46649>>>>>
46649>>>>>    Procedure End_Construct_Object
46651>>>>>        Forward Send End_Construct_Object
46653>>>>>
46653>>>>>    End_Procedure
46654>>>>>
46654>>>>>    // Latin1_General_CI_AS = General Insensitive collation
46654>>>>>    // Latin1_General_CS_AS = General Case Sensitive collation, AS= Accent Sensitive.
46654>>>>>    // For MS-SQL See: https://docs.microsoft.com/en-us/sql/t-sql/statements/windows-collation-name-transact-sql?view=sql-server-2017
46654>>>>>    // Good read about which collation to select:
46654>>>>>    // https://social.msdn.microsoft.com/Forums/sqlserver/en-US/bfdc32d3-3d36-4d63-8d87-6ee972fd8130/on-sqllatin1generalcp1cias-sql-server-2008-default-collation?forum=transactsql
46654>>>>>    Procedure Set psCollation String sCollation
46656>>>>>        Set private.psCollation to sCollation
46657>>>>>        If (ghoDbUpdateHandler > 0) Begin
46659>>>>>            Set psCollation of ghoDbUpdateHandler to sCollation
46660>>>>>        End
46660>>>>>>
46660>>>>>    End_Procedure
46661>>>>>
46661>>>>>    Function psCollation Returns String
46663>>>>>        String sCollation
46663>>>>>        If (ghoDbUpdateHandler > 0) Begin
46665>>>>>            Get psCollation of ghoDbUpdateHandler to sCollation
46666>>>>>        End   
46666>>>>>>
46666>>>>>        Else Begin
46667>>>>>            Get private.psCollation to sCollation
46668>>>>>        End
46668>>>>>>
46668>>>>>        Function_Return sCollation
46669>>>>>    End_Function
46670>>>>>
46670>>>>>    // Array sorting helper functions:
46670>>>>>    Function __UtilRelationArrayCompare tAPIRelation RelationCurrent tAPIRelation RelationNew Returns Integer
46672>>>>>        If (RelationCurrent.hTableFrom  = RelationNew.hTableFrom and ;            RelationCurrent.iColumnFrom = RelationNew.iColumnFrom and ;            RelationCurrent.hTableTo    = RelationNew.hTableTo and ;            RelationCurrent.iColumnTo   = RelationNew.iColumnTo) Begin
46674>>>>>            Function_Return (EQ)
46675>>>>>        End
46675>>>>>>
46675>>>>>
46675>>>>>        Function_Return (GT)
46676>>>>>    End_Function
46677>>>>>
46677>>>>>    Function __SearchRelationCompare tAPIRelationCompare RelationCompareCurrent tAPIRelationCompare RelationCompareNew Returns Integer
46679>>>>>        If (RelationCompareCurrent.hTableFrom  = RelationCompareNew.hTableFrom and ;            RelationCompareCurrent.iColumnFrom = RelationCompareNew.iColumnFrom and ;            RelationCompareCurrent.hTableTo    = RelationCompareNew.hTableTo and ;            RelationCompareCurrent.iColumnTo   = RelationCompareNew.iColumnTo) ;            Function_Return (EQ)
46682>>>>>
46682>>>>>        Function_Return (GT)
46683>>>>>    End_Function
46684>>>>>
46684>>>>>    // Compares the RootName, LogicalName & DisplayName and returns True if they are equal.
46684>>>>>    // Note that it first removes any driver prefixes in the rootname.
46684>>>>>    Function _ApiTableFilelistNamesCompare Boolean bCompareFilelistUppercase tAPITableNameInfo APITableInfo Returns Boolean
46686>>>>>        String sRootNameFrom sRootNameTo sDisplayNameTo sLogicalNameTo
46686>>>>>        Handle hTable
46686>>>>>        Boolean bIsSame
46686>>>>>
46686>>>>>        Move APITableInfo.iTableNumber      to hTable
46687>>>>>        Get _TableNameOnly APITableInfo.sRootName     to sRootNameFrom
46688>>>>>        Get_Attribute DF_FILE_ROOT_NAME     of hTable to sRootNameTo
46691>>>>>        Get _TableNoPrefix sRootNameTo                to sRootNameTo
46692>>>>>        Get_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalNameTo
46695>>>>>        Get_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayNameTo
46698>>>>>        Get _TableNoPrefix sDisplayNameTo             to sDisplayNameTo
46699>>>>>
46699>>>>>        If (bCompareFilelistUppercase = True) Begin
46701>>>>>            Move (Uppercase(sRootNameFrom) = Uppercase(sRootNameTo) and Uppercase(APITableInfo.sLogicalName) = Uppercase(sLogicalNameTo) and ;                  Uppercase(APITableInfo.sDisplayName) = Uppercase(sDisplayNameTo)) to bIsSame
46702>>>>>        End
46702>>>>>>
46702>>>>>        Else Begin
46703>>>>>            Move (sRootNameFrom = sRootNameTo and APITableInfo.sLogicalName = sLogicalNameTo and APITableInfo.sDisplayName = sDisplayNameTo) to bIsSame
46704>>>>>        End
46704>>>>>>
46704>>>>>
46704>>>>>        Function_Return bIsSame
46705>>>>>    End_Function
46706>>>>>
46706>>>>>    Function AutoSetConnectionID String sConnectionID Returns Boolean
46708>>>>>        Integer iRetval
46708>>>>>        Move 1 to iRetval
46709>>>>>        If (ghoSQLConnectionHandler <> 0) Begin
46711>>>>>            Set psConnectionID of ghoSQLConnectionHandler to sConnectionID
46712>>>>>            Get AutoSetConnectionID of ghoSQLConnectionHandler to iRetval
46713>>>>>        End
46713>>>>>>
46713>>>>>        Function_Return (iRetval = 0)
46714>>>>>    End_Function
46715>>>>>
46715>>>>>    Function _AddFolderDelimiter String sPath Returns String
46717>>>>>        String sDirSep
46717>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
46718>>>>>        Move (Trim(sPath)) to sPath
46719>>>>>        If (Right(sPath, 1) <> sDirSep) Begin
46721>>>>>            Move (sPath + sDirSep) to sPath
46722>>>>>        End
46722>>>>>>
46722>>>>>        Function_Return sPath
46723>>>>>    End_Function
46724>>>>>
46724>>>>>    Procedure _SqlColumnInfo Handle hoStmt
46726>>>>>        Integer i iCols iItem
46726>>>>>        tSqlColumnNew[] aQueryColumns
46726>>>>>        tSqlColumnNew[] aQueryColumns
46727>>>>>
46727>>>>>        Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_COLUMNCOUNT to iCols
46728>>>>>        For i from 1 to iCols
46734>>>>>>
46734>>>>>            Move (SizeOfArray(aQueryColumns)) to iItem
46735>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_BASECOLUMNNAME to aQueryColumns[iItem].sBaseColumnName
46736>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_BASETABLENAME  to aQueryColumns[iItem].sBaseTableName
46737>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_LABEL          to aQueryColumns[iItem].sLabel
46738>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_SQLTYPE        to aQueryColumns[iItem].iSqlType
46739>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_DFTYPE         to aQueryColumns[iItem].iDFType
46740>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_SIZE           to aQueryColumns[iItem].iSize
46741>>>>>            Get SqlColAttribute of hoStmt i SqlCOLATTRIB_PRECISION      to aQueryColumns[iItem].iPrecision
46742>>>>>        Loop
46743>>>>>>
46743>>>>>        Set piColumns to iCols
46744>>>>>        Set paQueryColumns to aQueryColumns
46745>>>>>    End_Procedure
46746>>>>>
46746>>>>>    // *** Property Messages ***
46746>>>>>    //
46746>>>>>    // These "properties" are settings for the cSQLConnectionHandler class, but have been
46746>>>>>    // "duplicated" here so connection properties can be relayed to the ghoSQLConnectionHandler object
46746>>>>>    //
46746>>>>>    Function pSQLConnection Returns tSQLConnection
46748>>>>>        tSQLConnection SQLConnection
46748>>>>>        tSQLConnection SQLConnection
46748>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46750>>>>>            // Note: No point in translating as the programmer will see this immediately after compiling the program...
46750>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46751>>>>>>
46751>>>>>            Function_Return
46752>>>>>        End
46752>>>>>>
46752>>>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
46753>>>>>        Function_Return SQLConnection
46754>>>>>    End_Function
46755>>>>>
46755>>>>>    // * Dummy function for the Studio's Code Explorer *
46755>>>>>    Function OTHER_CLASS_PROPERTIES Returns Boolean
46757>>>>>        Function_Return False
46758>>>>>    End_Function
46759>>>>>
46759>>>>>    Procedure Set psServer String sValue
46761>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46763>>>>>            // Note: No point in translating as the programmer will see this immediately after compiling the program...
46763>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46764>>>>>>
46764>>>>>            Procedure_Return
46765>>>>>        End
46765>>>>>>
46765>>>>>        Set psServer of ghoSQLConnectionHandler to sValue
46766>>>>>    End_Procedure
46767>>>>>
46767>>>>>    Function psServer Returns String
46769>>>>>        String sValue
46769>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46771>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46772>>>>>>
46772>>>>>            Function_Return
46773>>>>>        End
46773>>>>>>
46773>>>>>        Get psServer of ghoSQLConnectionHandler to sValue
46774>>>>>        Function_Return sValue
46775>>>>>    End_Function
46776>>>>>
46776>>>>>    Procedure Set psDatabase String sValue
46778>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46780>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46781>>>>>>
46781>>>>>            Procedure_Return
46782>>>>>        End
46782>>>>>>
46782>>>>>        Set psDatabase of ghoSQLConnectionHandler to sValue
46783>>>>>    End_Procedure
46784>>>>>
46784>>>>>    Function psDatabase Returns String
46786>>>>>        String sValue
46786>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46788>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46789>>>>>>
46789>>>>>            Function_Return
46790>>>>>        End
46790>>>>>>
46790>>>>>        Get psDatabase of ghoSQLConnectionHandler to sValue
46791>>>>>        Function_Return sValue
46792>>>>>    End_Function
46793>>>>>
46793>>>>>    Procedure Set psUserID String sValue
46795>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46797>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46798>>>>>>
46798>>>>>            Procedure_Return
46799>>>>>        End
46799>>>>>>
46799>>>>>        Set psUserID of ghoSQLConnectionHandler to sValue
46800>>>>>    End_Procedure
46801>>>>>
46801>>>>>    Function psUserID Returns String
46803>>>>>        String sValue
46803>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46805>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46806>>>>>>
46806>>>>>            Function_Return
46807>>>>>        End
46807>>>>>>
46807>>>>>        Get psUserID of ghoSQLConnectionHandler to sValue
46808>>>>>        Function_Return sValue
46809>>>>>    End_Function
46810>>>>>
46810>>>>>    Procedure Set psPassword String sValue
46812>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46814>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46815>>>>>>
46815>>>>>            Procedure_Return
46816>>>>>        End
46816>>>>>>
46816>>>>>        Set psPassword of ghoSQLConnectionHandler to sValue
46817>>>>>    End_Procedure
46818>>>>>
46818>>>>>    Function psPassword Returns String
46820>>>>>        String sValue
46820>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46822>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46823>>>>>>
46823>>>>>            Function_Return
46824>>>>>        End
46824>>>>>>
46824>>>>>        Get psPassword of ghoSQLConnectionHandler to sValue
46825>>>>>        Function_Return sValue
46826>>>>>    End_Function
46827>>>>>
46827>>>>>    Procedure Set pbTrusted Boolean bValue
46829>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46831>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46832>>>>>>
46832>>>>>            Procedure_Return
46833>>>>>        End
46833>>>>>>
46833>>>>>        Set pbTrusted of ghoSQLConnectionHandler to bValue
46834>>>>>    End_Procedure
46835>>>>>
46835>>>>>    Function pbTrusted Returns Boolean
46837>>>>>        Boolean bValue
46837>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46839>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46840>>>>>>
46840>>>>>            Function_Return
46841>>>>>        End
46841>>>>>>
46841>>>>>        Get pbTrusted of ghoSQLConnectionHandler to bValue
46842>>>>>        Function_Return bValue
46843>>>>>    End_Function
46844>>>>>
46844>>>>>    Procedure Set pbSilentLogin Boolean bValue
46846>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46848>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46849>>>>>>
46849>>>>>            Procedure_Return
46850>>>>>        End
46850>>>>>>
46850>>>>>        Set pbSilentLogin of ghoSQLConnectionHandler to bValue
46851>>>>>    End_Procedure
46852>>>>>
46852>>>>>    Function pbSilentLogin Returns Boolean
46854>>>>>        Boolean bValue
46854>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46856>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46857>>>>>>
46857>>>>>            Function_Return
46858>>>>>        End
46858>>>>>>
46858>>>>>        Get pbSilentLogin of ghoSQLConnectionHandler to bValue
46859>>>>>        Function_Return bValue
46860>>>>>    End_Function
46861>>>>>
46861>>>>>    Procedure Set psConnectionID String sValue
46863>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46865>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46866>>>>>>
46866>>>>>            Procedure_Return
46867>>>>>        End
46867>>>>>>
46867>>>>>        Set psConnectionID of ghoSQLConnectionHandler to sValue
46868>>>>>    End_Procedure
46869>>>>>
46869>>>>>    Function psConnectionID Returns String
46871>>>>>        String sValue
46871>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46873>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46874>>>>>>
46874>>>>>            Function_Return
46875>>>>>        End
46875>>>>>>
46875>>>>>        Get psConnectionID of ghoSQLConnectionHandler to sValue
46876>>>>>        Function_Return sValue
46877>>>>>    End_Function
46878>>>>>
46878>>>>>    Procedure Set psConnectionString String sValue
46880>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46882>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46883>>>>>>
46883>>>>>            Procedure_Return
46884>>>>>        End
46884>>>>>>
46884>>>>>        Set psConnectionString of ghoSQLConnectionHandler to sValue
46885>>>>>    End_Procedure
46886>>>>>
46886>>>>>    Function psConnectionString Returns String
46888>>>>>        String sValue
46888>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46890>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46891>>>>>>
46891>>>>>            Function_Return
46892>>>>>        End
46892>>>>>>
46892>>>>>        Get psConnectionString of ghoSQLConnectionHandler to sValue
46893>>>>>        Function_Return sValue
46894>>>>>    End_Function
46895>>>>>
46895>>>>>    // The normal connection string looks something like this;
46895>>>>>    // SERVER=.\SQLEXPRESS; DATABASE=OrderEntry; TRUSTED_CONNECTION=Yes; ,0
46895>>>>>    // ...and the full connection string looks like this;
46895>>>>>    // DFConnectionId OrderEntry, SERVER=.\SQLEXPRESS; DATABASE=OrderEntry; TRUSTED_CONNECTION=Yes; ,0
46895>>>>>    Function psFullConnectionString Returns String
46897>>>>>        String sConnectionID sConnectionString
46897>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46899>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46900>>>>>>
46900>>>>>            Function_Return
46901>>>>>        End
46901>>>>>>
46901>>>>>        Get psConnectionID     of ghoSQLConnectionHandler to sConnectionID
46902>>>>>        Move (Trim(sConnectionID)) to sConnectionID
46903>>>>>        Get psConnectionString of ghoSQLConnectionHandler to sConnectionString
46904>>>>>        Function_Return (CS_SQLConnectionIDText * sConnectionID + "," * String(sConnectionString))
46905>>>>>    End_Function
46906>>>>>
46906>>>>>    Function piConnectionOptions Returns Integer
46908>>>>>        Integer iValue
46908>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46910>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46911>>>>>>
46911>>>>>            Function_Return
46912>>>>>        End
46912>>>>>>
46912>>>>>        Get piConnectionOptions of ghoSQLConnectionHandler to iValue
46913>>>>>        Function_Return iValue
46914>>>>>    End_Function
46915>>>>>
46915>>>>>    Procedure Set psSchema String sValue
46917>>>>>        tSQLConnection SQLConnection
46917>>>>>        tSQLConnection SQLConnection
46917>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46919>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46920>>>>>>
46920>>>>>            Procedure_Return
46921>>>>>        End
46921>>>>>>
46921>>>>>        Set psSchema of ghoSQLConnectionHandler to sValue
46922>>>>>    End_Procedure
46923>>>>>
46923>>>>>    Function psSchema Returns String
46925>>>>>        String sRetval
46925>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46927>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46928>>>>>>
46928>>>>>            Function_Return
46929>>>>>        End
46929>>>>>>
46929>>>>>        Get psSchema of ghoSQLConnectionHandler to sRetval
46930>>>>>        Function_Return sRetval
46931>>>>>    End_Function
46932>>>>>
46932>>>>>    Procedure Set psBaseTableSpace String sValue
46934>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46936>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46937>>>>>>
46937>>>>>            Procedure_Return
46938>>>>>        End
46938>>>>>>
46938>>>>>        Set psBaseTableSpace of ghoSQLConnectionHandler to sValue
46939>>>>>    End_Procedure
46940>>>>>
46940>>>>>    Function psBaseTableSpace Returns String
46942>>>>>        String sRetval
46942>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46944>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46945>>>>>>
46945>>>>>            Function_Return
46946>>>>>        End
46946>>>>>>
46946>>>>>        Get psBaseTableSpace of ghoSQLConnectionHandler to sRetval
46947>>>>>        Function_Return sRetval
46948>>>>>    End_Function
46949>>>>>
46949>>>>>    Procedure Set psLongTableSpace String sValue
46951>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46953>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46954>>>>>>
46954>>>>>            Procedure_Return
46955>>>>>        End
46955>>>>>>
46955>>>>>        Set psLongTableSpace of ghoSQLConnectionHandler to sValue
46956>>>>>    End_Procedure
46957>>>>>
46957>>>>>    Function psLongTableSpace Returns String
46959>>>>>        String sRetval
46959>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46961>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46962>>>>>>
46962>>>>>            Function_Return
46963>>>>>        End
46963>>>>>>
46963>>>>>        Get psLongTableSpace of ghoSQLConnectionHandler to sRetval
46964>>>>>        Function_Return sRetval
46965>>>>>    End_Function
46966>>>>>
46966>>>>>    Procedure Set psIndexTableSpace String sValue
46968>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46970>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46971>>>>>>
46971>>>>>            Procedure_Return
46972>>>>>        End
46972>>>>>>
46972>>>>>        Set psIndexTableSpace of ghoSQLConnectionHandler to sValue
46973>>>>>    End_Procedure
46974>>>>>
46974>>>>>    Function psIndexTableSpace Returns String
46976>>>>>        String sRetval
46976>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46978>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46979>>>>>>
46979>>>>>            Function_Return
46980>>>>>        End
46980>>>>>>
46980>>>>>        Get psIndexTableSpace of ghoSQLConnectionHandler to sRetval
46981>>>>>        Function_Return sRetval
46982>>>>>    End_Function
46983>>>>>
46983>>>>>    Procedure Set pbUseConnectionID Boolean bState
46985>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46987>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46988>>>>>>
46988>>>>>            Procedure_Return
46989>>>>>        End
46989>>>>>>
46989>>>>>        Set pbUseConnectionID of ghoSQLConnectionHandler to bState
46990>>>>>    End_Procedure
46991>>>>>
46991>>>>>    Function pbUseConnectionID Returns Boolean
46993>>>>>        Boolean bState
46993>>>>>        If (ghoSQLConnectionHandler = 0) Begin
46995>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
46996>>>>>>
46996>>>>>            Function_Return
46997>>>>>        End
46997>>>>>>
46997>>>>>        Get pbUseConnectionID of ghoSQLConnectionHandler to bState
46998>>>>>        Function_Return bState
46999>>>>>    End_Function
47000>>>>>
47000>>>>>    Procedure Set pbToANSI Boolean bState
47002>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47004>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47005>>>>>>
47005>>>>>            Procedure_Return
47006>>>>>        End
47006>>>>>>
47006>>>>>        Set pbToANSI of ghoSQLConnectionHandler to bState
47007>>>>>    End_Procedure
47008>>>>>
47008>>>>>    Function pbToANSI Returns Boolean
47010>>>>>        Boolean bState
47010>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47012>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47013>>>>>>
47013>>>>>            Function_Return
47014>>>>>        End
47014>>>>>>
47014>>>>>        Get pbToANSI of ghoSQLConnectionHandler to bState
47015>>>>>        Function_Return bState
47016>>>>>    End_Function
47017>>>>>
47017>>>>>    Procedure Set pbRecnum Boolean bState
47019>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47021>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47022>>>>>>
47022>>>>>            Procedure_Return
47023>>>>>        End
47023>>>>>>
47023>>>>>        Set pbRecnum of ghoSQLConnectionHandler to bState
47024>>>>>    End_Procedure
47025>>>>>
47025>>>>>    Function pbRecnum Returns Boolean
47027>>>>>        Boolean bState
47027>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47029>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47030>>>>>>
47030>>>>>            Function_Return
47031>>>>>        End
47031>>>>>>
47031>>>>>        Get pbRecnum of ghoSQLConnectionHandler to bState
47032>>>>>        Function_Return bState
47033>>>>>    End_Function
47034>>>>>
47034>>>>>    Procedure Set pbCopyData Boolean bState
47036>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47038>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47039>>>>>>
47039>>>>>            Procedure_Return
47040>>>>>        End
47040>>>>>>
47040>>>>>        Set pbCopyData of ghoSQLConnectionHandler to bState
47041>>>>>    End_Procedure
47042>>>>>
47042>>>>>    Function pbCopyData Returns Boolean
47044>>>>>        Boolean bState
47044>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47046>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47047>>>>>>
47047>>>>>            Function_Return
47048>>>>>        End
47048>>>>>>
47048>>>>>        Get pbCopyData of ghoSQLConnectionHandler to bState
47049>>>>>        Function_Return bState
47050>>>>>    End_Function
47051>>>>>
47051>>>>>    Procedure Set pbApiTableUpdateAuto Boolean bState
47053>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47055>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47056>>>>>>
47056>>>>>            Procedure_Return
47057>>>>>        End
47057>>>>>>
47057>>>>>        Set pbApiTableUpdateAuto of ghoSQLConnectionHandler to bState
47058>>>>>    End_Procedure
47059>>>>>
47059>>>>>    Function pbApiTableUpdateAuto Returns Boolean
47061>>>>>        Boolean bState
47061>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47063>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47064>>>>>>
47064>>>>>            Function_Return
47065>>>>>        End
47065>>>>>>
47065>>>>>        Get pbApiTableUpdateAuto of ghoSQLConnectionHandler to bState
47066>>>>>        Function_Return bState
47067>>>>>    End_Function
47068>>>>>
47068>>>>>    Procedure Set pbCompareDate_DateTime Boolean bState
47070>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47072>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47073>>>>>>
47073>>>>>            Procedure_Return
47074>>>>>        End
47074>>>>>>
47074>>>>>        Set pbCompareDate_DateTime of ghoSQLConnectionHandler to bState
47075>>>>>    End_Procedure
47076>>>>>
47076>>>>>    Function pbCompareDate_DateTime Returns Boolean
47078>>>>>        Boolean bState
47078>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47080>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47081>>>>>>
47081>>>>>            Function_Return
47082>>>>>        End
47082>>>>>>
47082>>>>>        Get pbCompareDate_DateTime of ghoSQLConnectionHandler to bState
47083>>>>>        Function_Return bState
47084>>>>>    End_Function
47085>>>>>
47085>>>>>    Procedure Set pbCompareIndexAscending Boolean bState
47087>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47089>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47090>>>>>>
47090>>>>>            Procedure_Return
47091>>>>>        End
47091>>>>>>
47091>>>>>        Set pbCompareIndexAscending of ghoSQLConnectionHandler to bState
47092>>>>>    End_Procedure
47093>>>>>
47093>>>>>    Function pbCompareIndexAscending Returns Boolean
47095>>>>>        Boolean bState
47095>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47097>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47098>>>>>>
47098>>>>>            Function_Return
47099>>>>>        End
47099>>>>>>
47099>>>>>        Get pbCompareIndexAscending of ghoSQLConnectionHandler to bState
47100>>>>>        Function_Return bState
47101>>>>>    End_Function
47102>>>>>
47102>>>>>    Procedure Set pbCompareIndexUppercase Boolean bState
47104>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47106>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47107>>>>>>
47107>>>>>            Procedure_Return
47108>>>>>        End
47108>>>>>>
47108>>>>>        Set pbCompareIndexUppercase of ghoSQLConnectionHandler to bState
47109>>>>>    End_Procedure
47110>>>>>
47110>>>>>    Function pbCompareIndexUppercase Returns Boolean
47112>>>>>        Boolean bState
47112>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47114>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO ConnectionID has been setup by the programmer."
47115>>>>>>
47115>>>>>            Function_Return
47116>>>>>        End
47116>>>>>>
47116>>>>>        Get pbCompareIndexUppercase of ghoSQLConnectionHandler to bState
47117>>>>>        Function_Return bState
47118>>>>>    End_Function
47119>>>>>
47119>>>>>    Procedure Set psDriverDefaultValueASCII String sValue
47121>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47123>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47124>>>>>>
47124>>>>>            Procedure_Return
47125>>>>>        End
47125>>>>>>
47125>>>>>        Set psDriverDefaultValueASCII of ghoSQLConnectionHandler to sValue
47126>>>>>    End_Procedure
47127>>>>>
47127>>>>>    Function psDriverDefaultValueASCII Returns String
47129>>>>>        String sRetval
47129>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47131>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47132>>>>>>
47132>>>>>            Function_Return
47133>>>>>        End
47133>>>>>>
47133>>>>>        Get psDriverDefaultValueASCII of ghoSQLConnectionHandler to sRetval
47134>>>>>        Function_Return sRetval
47135>>>>>    End_Function
47136>>>>>
47136>>>>>    Procedure Set psDriverDefaultValueBinary String sValue
47138>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47140>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47141>>>>>>
47141>>>>>            Procedure_Return
47142>>>>>        End
47142>>>>>>
47142>>>>>        Set psDriverDefaultValueBinary of ghoSQLConnectionHandler to sValue
47143>>>>>    End_Procedure
47144>>>>>
47144>>>>>    Function psDriverDefaultValueBinary Returns String
47146>>>>>        String sRetval
47146>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47148>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47149>>>>>>
47149>>>>>            Function_Return
47150>>>>>        End
47150>>>>>>
47150>>>>>        Get psDriverDefaultValueBinary of ghoSQLConnectionHandler to sRetval
47151>>>>>        Function_Return sRetval
47152>>>>>    End_Function
47153>>>>>
47153>>>>>    Procedure Set psDriverDefaultValueDate String sValue
47155>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47157>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47158>>>>>>
47158>>>>>            Procedure_Return
47159>>>>>        End
47159>>>>>>
47159>>>>>        Set psDriverDefaultValueDate of ghoSQLConnectionHandler to sValue
47160>>>>>    End_Procedure
47161>>>>>
47161>>>>>    Function psDriverDefaultValueDate Returns String
47163>>>>>        String sRetval
47163>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47165>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47166>>>>>>
47166>>>>>            Function_Return
47167>>>>>        End
47167>>>>>>
47167>>>>>        Get psDriverDefaultValueDate of ghoSQLConnectionHandler to sRetval
47168>>>>>        Function_Return sRetval
47169>>>>>    End_Function
47170>>>>>
47170>>>>>    Procedure Set psDriverDefaultValueDateTime String sValue
47172>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47174>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47175>>>>>>
47175>>>>>            Procedure_Return
47176>>>>>        End
47176>>>>>>
47176>>>>>        Set psDriverDefaultValueDateTime of ghoSQLConnectionHandler to sValue
47177>>>>>    End_Procedure
47178>>>>>
47178>>>>>    Function psDriverDefaultValueDateTime Returns String
47180>>>>>        String sRetval
47180>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47182>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47183>>>>>>
47183>>>>>            Function_Return
47184>>>>>        End
47184>>>>>>
47184>>>>>        Get psDriverDefaultValueDateTime of ghoSQLConnectionHandler to sRetval
47185>>>>>        Function_Return sRetval
47186>>>>>    End_Function
47187>>>>>
47187>>>>>    Procedure Set psDriverDefaultValueNumeric String sValue
47189>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47191>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47192>>>>>>
47192>>>>>            Procedure_Return
47193>>>>>        End
47193>>>>>>
47193>>>>>        Set psDriverDefaultValueNumeric of ghoSQLConnectionHandler to sValue
47194>>>>>    End_Procedure
47195>>>>>
47195>>>>>    Function psDriverDefaultValueNumeric Returns String
47197>>>>>        String sRetval
47197>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47199>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47200>>>>>>
47200>>>>>            Function_Return
47201>>>>>        End
47201>>>>>>
47201>>>>>        Get psDriverDefaultValueNumeric of ghoSQLConnectionHandler to sRetval
47202>>>>>        Function_Return sRetval
47203>>>>>    End_Function
47204>>>>>
47204>>>>>    Procedure Set psDriverDefaultValueText String sValue
47206>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47208>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47209>>>>>>
47209>>>>>            Procedure_Return
47210>>>>>        End
47210>>>>>>
47210>>>>>        Set psDriverDefaultValueText of ghoSQLConnectionHandler to sValue
47211>>>>>    End_Procedure
47212>>>>>
47212>>>>>    Function psDriverDefaultValueText Returns String
47214>>>>>        String sRetval
47214>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47216>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47217>>>>>>
47217>>>>>            Function_Return
47218>>>>>        End
47218>>>>>>
47218>>>>>        Get psDriverDefaultValueText of ghoSQLConnectionHandler to sRetval
47219>>>>>        Function_Return sRetval
47220>>>>>    End_Function
47221>>>>>
47221>>>>>    Procedure Set pbDriverDefaultNullableASCII Boolean bState
47223>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47225>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47226>>>>>>
47226>>>>>            Procedure_Return
47227>>>>>        End
47227>>>>>>
47227>>>>>        Set pbDriverDefaultNullableASCII of ghoSQLConnectionHandler to bState
47228>>>>>    End_Procedure
47229>>>>>
47229>>>>>    Function pbDriverDefaultNullableASCII Returns Boolean
47231>>>>>        Boolean bState
47231>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47233>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47234>>>>>>
47234>>>>>            Function_Return
47235>>>>>        End
47235>>>>>>
47235>>>>>        Get pbDriverDefaultNullableASCII of ghoSQLConnectionHandler to bState
47236>>>>>        Function_Return bState
47237>>>>>    End_Function
47238>>>>>
47238>>>>>    Procedure Set pbDriverDefaultNullableBinary Boolean bState
47240>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47242>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47243>>>>>>
47243>>>>>            Procedure_Return
47244>>>>>        End
47244>>>>>>
47244>>>>>        Set pbDriverDefaultNullableBinary of ghoSQLConnectionHandler to bState
47245>>>>>    End_Procedure
47246>>>>>
47246>>>>>    Function pbDriverDefaultNullableBinary Returns Boolean
47248>>>>>        Boolean bState
47248>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47250>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47251>>>>>>
47251>>>>>            Function_Return
47252>>>>>        End
47252>>>>>>
47252>>>>>        Get pbDriverDefaultNullableBinary of ghoSQLConnectionHandler to bState
47253>>>>>        Function_Return bState
47254>>>>>    End_Function
47255>>>>>
47255>>>>>    Procedure Set pbDriverDefaultNullableDate Boolean bState
47257>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47259>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47260>>>>>>
47260>>>>>            Procedure_Return
47261>>>>>        End
47261>>>>>>
47261>>>>>        Set pbDriverDefaultNullableDate of ghoSQLConnectionHandler to bState
47262>>>>>    End_Procedure
47263>>>>>
47263>>>>>    Function pbDriverDefaultNullableDate Returns Boolean
47265>>>>>        Boolean bState
47265>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47267>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47268>>>>>>
47268>>>>>            Function_Return
47269>>>>>        End
47269>>>>>>
47269>>>>>        Get pbDriverDefaultNullableDate of ghoSQLConnectionHandler to bState
47270>>>>>        Function_Return bState
47271>>>>>    End_Function
47272>>>>>
47272>>>>>    Procedure Set pbDriverDefaultNullableDateTime Boolean bState
47274>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47276>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47277>>>>>>
47277>>>>>            Procedure_Return
47278>>>>>        End
47278>>>>>>
47278>>>>>        Set pbDriverDefaultNullableDateTime of ghoSQLConnectionHandler to bState
47279>>>>>    End_Procedure
47280>>>>>
47280>>>>>    Function pbDriverDefaultNullableDateTime Returns Boolean
47282>>>>>        Boolean bState
47282>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47284>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47285>>>>>>
47285>>>>>            Function_Return
47286>>>>>        End
47286>>>>>>
47286>>>>>        Get pbDriverDefaultNullableDateTime of ghoSQLConnectionHandler to bState
47287>>>>>        Function_Return bState
47288>>>>>    End_Function
47289>>>>>
47289>>>>>    Procedure Set pbDriverDefaultNullableNumeric Boolean bState
47291>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47293>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47294>>>>>>
47294>>>>>            Procedure_Return
47295>>>>>        End
47295>>>>>>
47295>>>>>        Set pbDriverDefaultNullableNumeric of ghoSQLConnectionHandler to bState
47296>>>>>    End_Procedure
47297>>>>>
47297>>>>>    Function pbDriverDefaultNullableNumeric Returns Boolean
47299>>>>>        Boolean bState
47299>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47301>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47302>>>>>>
47302>>>>>            Function_Return
47303>>>>>        End
47303>>>>>>
47303>>>>>        Get pbDriverDefaultNullableNumeric of ghoSQLConnectionHandler to bState
47304>>>>>        Function_Return bState
47305>>>>>    End_Function
47306>>>>>
47306>>>>>    Procedure Set pbDriverDefaultNullableText Boolean bState
47308>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47310>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47311>>>>>>
47311>>>>>            Procedure_Return
47312>>>>>        End
47312>>>>>>
47312>>>>>        Set pbDriverDefaultNullableText of ghoSQLConnectionHandler to bState
47313>>>>>    End_Procedure
47314>>>>>
47314>>>>>    Function pbDriverDefaultNullableText Returns Boolean
47316>>>>>        Boolean bState
47316>>>>>        If (ghoSQLConnectionHandler = 0) Begin
47318>>>>>            Error DFERR_PROGRAM "ghoSQLConnectionHandler = 0! This indicates that NO SQL connection has been setup by the programmer."
47319>>>>>>
47319>>>>>            Function_Return
47320>>>>>        End
47320>>>>>>
47320>>>>>        Get pbDriverDefaultNullableText of ghoSQLConnectionHandler to bState
47321>>>>>        Function_Return bState
47322>>>>>    End_Function
47323>>>>>
47323>>>>>    // Note: If the psDriverID + other connection properties are to be changed,
47323>>>>>    //       the psDriverID *must* be the first property that gets changed!
47323>>>>>    //       Otherwise errors might be raised by the driver when e.g. the format
47323>>>>>    //       for a connection string has the wrong format for that driver.
47323>>>>>    Procedure Set psDriverID String sValue
47325>>>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
47326>>>>>        Delegate Set psDriverID to sValue
47328>>>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
47329>>>>>        Set psDriverID of ghoSQLConnectionHandler to sValue
47330>>>>>    End_Procedure
47331>>>>>
47331>>>>>    Function psDriverID Returns String
47333>>>>>        String sDriverID
47333>>>>>
47333>>>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
47334>>>>>        // This should get it from the parent object (when using the cDbUpdateHandler class)
47334>>>>>        Delegate Get psDriverID to sDriverID
47336>>>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
47337>>>>>        Move False to Err
47338>>>>>
47338>>>>>        // ...and in case it didn't use property of this class. Then the library is
47338>>>>>        // probably used as "utilites" from a special made program and
47338>>>>>        // the ghoSQLConnectionHandler must have been setup
47338>>>>>        If (sDriverID = "") Begin
47340>>>>>            Get psDriverID of ghoSQLConnectionHandler to sDriverID
47341>>>>>        End
47341>>>>>>
47341>>>>>        Function_Return sDriverID
47342>>>>>    End_Function
47343>>>>>
47343>>>>>    Procedure Set piDbType Integer iValue
47345>>>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
47346>>>>>        Delegate Set piDbType to iValue
47348>>>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
47349>>>>>        Set piDbType of ghoSQLConnectionHandler to iValue
47350>>>>>    End_Procedure
47351>>>>>
47351>>>>>    Function piDbType Returns Integer
47353>>>>>        Integer iRetval
47353>>>>>        Get piDbType of ghoSQLConnectionHandler to iRetval
47354>>>>>        Function_Return iRetval
47355>>>>>    End_Function
47356>>>>>
47356>>>>>    // Returns the index for the passed sTableName
47356>>>>>    // Returns >= 0 if successful. It is e.g. needed to get the SchemaName for a table.
47356>>>>>    Function _SqlUtilEnumerateTableIndex String sTableName String sDriverID Returns Integer
47358>>>>>        Integer iIndex iSize iCount
47358>>>>>        String[] sTablesArray
47359>>>>>        String sDatabase sSchema sVal sConnectionString
47359>>>>>
47359>>>>>        Move -1 to iIndex
47360>>>>>        Get psConnectionString to sConnectionString
47361>>>>>        Get psDatabase to sDatabase
47362>>>>>        Get psSchema   to sSchema
47363>>>>>        Get _SqlUtilEnumerateTables sDriverID sDatabase sSchema to sTablesArray
47364>>>>>        Move (SizeOfArray(sTablesArray)) to iSize
47365>>>>>        Decrement iSize
47366>>>>>        For iCount from 0 to iSize
47372>>>>>>
47372>>>>>            Move sTablesArray[iCount] to sVal
47373>>>>>            If (Uppercase(sVal) = Uppercase(sTableName)) Begin
47375>>>>>                Move iCount to iIndex // We found it!
47376>>>>>                Move iSize to iCount  // End the loop
47377>>>>>            End
47377>>>>>>
47377>>>>>        Loop
47378>>>>>>
47378>>>>>
47378>>>>>        Function_Return iIndex
47379>>>>>    End_Function
47380>>>>>
47380>>>>>    // Returns all schemas as a string array for the passed driver id.
47380>>>>>    Function SqlUtilEnumerateSchemas String sDriverID Returns String[]
47382>>>>>        String[] sReturnArray
47383>>>>>        Boolean bOK
47383>>>>>
47383>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47384>>>>>        If (bOK = False) Begin
47386>>>>>            Function_Return sReturnArray
47387>>>>>        End
47387>>>>>>
47387>>>>>
47387>>>>>        Case Begin
47387>>>>>            Case (sDriverID = DB2_DRV_ID)
47389>>>>>                Get _SqlEnumerateEsqlDAW "select schemaname from syscat.schemata" 1 to sReturnArray
47390>>>>>                Case Break
47391>>>>>
47391>>>>>            Case Else
47391>>>>>                Error DFERR_PROGRAM "Unsupported driver passed to SqlUtilEnumerateSchemas function."
47392>>>>>>
47392>>>>>                Case Break
47393>>>>>        Case End
47393>>>>>
47393>>>>>        Function_Return sReturnArray
47394>>>>>    End_Function
47395>>>>>
47395>>>>>    // Returns a string array with all tables for the current database.
47395>>>>>    Function _SqlUtilEnumerateTables String sDriverID String sDatabase String sSchema Returns String[]
47397>>>>>        String[] sReturnArray sArray
47399>>>>>        String sConnectionString sSelect
47399>>>>>        Integer iSize iCount iDbType
47399>>>>>        Boolean bOK
47399>>>>>
47399>>>>>        If (sDriverID = DATAFLEX_ID) Begin
47401>>>>>            Function_Return sArray
47402>>>>>        End
47402>>>>>>
47402>>>>>
47402>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47403>>>>>        If (bOK = False) Begin
47405>>>>>            Function_Return sReturnArray
47406>>>>>        End
47406>>>>>>
47406>>>>>        If (sSchema = "") Begin
47408>>>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
47409>>>>>        End
47409>>>>>>
47409>>>>>
47409>>>>>        Get psConnectionString to sConnectionString
47410>>>>>
47410>>>>>        // We need to treat DAW's ODBC driver a bit different, as the output depends on
47410>>>>>        // the dbType.
47410>>>>>        Get piDbType to iDbType
47411>>>>>        If (sDriverID = ODBC_DRV_ID) Begin
47413>>>>>            If (iDbType = EN_DbTypeMSSQL) Begin
47415>>>>>                Move MSSQLDRV_ID to sDriverID
47416>>>>>            End
47416>>>>>>
47416>>>>>            If (iDbType = EN_DbTypeDB2) Begin
47418>>>>>                Move DB2_DRV_ID to sDriverID
47419>>>>>            End
47419>>>>>>
47419>>>>>            If (iDbType = EN_DbTypePostgre) Begin
47421>>>>>                Move ODBC_DRV_ID to sDriverID
47422>>>>>            End
47422>>>>>>
47422>>>>>        End
47422>>>>>>
47422>>>>>
47422>>>>>        Case Begin
47422>>>>>            Case (sDriverID = MSSQLDRV_ID)
47424>>>>>                Get _SqlTableArrayDAW to sReturnArray
47425>>>>>                Case Break
47426>>>>>
47426>>>>>            Case (sDriverID = DB2_DRV_ID)
47429>>>>>                Get _SqlTableArrayDAW to sReturnArray
47430>>>>>                Case Break
47431>>>>>
47431>>>>>            Case (sDriverID = ODBC_DRV_ID)
47434>>>>>                Get _SqlTableArrayDAW to sReturnArray
47435>>>>>                Case Break
47436>>>>>
47436>>>>>            Case Else
47436>>>>>                Error DFERR_PROGRAM "Unsupported driver passed to _SqlUtilEnumerateTables function."
47437>>>>>>
47437>>>>>                Case Break
47438>>>>>        Case End
47438>>>>>
47438>>>>>        Function_Return sReturnArray
47439>>>>>    End_Function
47440>>>>>
47440>>>>>    // Returns all table spaces as a string array for the passed driver id.
47440>>>>>    Function _SqlUtilEnumerateTablespaces String sDriverID Returns String[]
47442>>>>>        String[] sReturnArray
47443>>>>>        Boolean bOK
47443>>>>>
47443>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47444>>>>>        If (bOK = False) Begin
47446>>>>>            Function_Return sReturnArray
47447>>>>>        End
47447>>>>>>
47447>>>>>
47447>>>>>        Case Begin
47447>>>>>            Case (sDriverID = DB2_DRV_ID)
47449>>>>>                Get _SqlEnumerateEsqlDAW "select tablespace_name from dba_tablespaces" 1 to sReturnArray
47450>>>>>                Case Break
47451>>>>>
47451>>>>>            Case Else
47451>>>>>                Error DFERR_PROGRAM "Unsupported driver passed to _SqlUtilEnumerateTablespaces function."
47452>>>>>>
47452>>>>>                Case Break
47453>>>>>        Case End
47453>>>>>
47453>>>>>        Function_Return sReturnArray
47454>>>>>    End_Function
47455>>>>>
47455>>>>>    // Returns a string array with all table columns/fields for the passed table handle and driver id.
47455>>>>>    Function _SqlUtilEnumerateColumns String sDriverID String sTableName Returns String[]
47457>>>>>        String[] sReturnArray
47458>>>>>        String sConnectionString sSelect sSchema
47458>>>>>        Boolean bOK
47458>>>>>        Integer iDbType
47458>>>>>
47458>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47459>>>>>        If (bOK = False) Begin
47461>>>>>            Error DFERR_PROGRAM ("Unsupported driver. A list of table columns could not be retrieved for:" * sDriverID + ".")
47462>>>>>>
47462>>>>>            Function_Return sReturnArray
47463>>>>>        End
47463>>>>>>
47463>>>>>
47463>>>>>        Get psConnectionString to sConnectionString
47464>>>>>        Get psSchema to sSchema
47465>>>>>
47465>>>>>        // We need to treat DAW's ODBC driver a bit different, as the output depends on
47465>>>>>        // the dbType.
47465>>>>>        Get piDbType to iDbType
47466>>>>>
47466>>>>>        Case Begin
47466>>>>>            Case (sDriverID = ODBC_DRV_ID)
47468>>>>>                If (iDbType = EN_DbTypeMySQL) Begin
47470>>>>>                    Move ("SHOW COLUMNS FROM" * sTableName) to sSelect
47471>>>>>                End
47471>>>>>>
47471>>>>>                If (iDbType = EN_DbTypePostgre) Begin
47473>>>>>                    Move ("select column_name, data_type, character_maximum_length from INFORMATION_SCHEMA.COLUMNS where table_name = '" +sTableName + "'") to sSelect
47474>>>>>                End
47474>>>>>>
47474>>>>>                If (iDbType = EN_DbTypeMSSQL) Begin
47476>>>>>                    Move ("select name from sys.columns where [object_id] = object_id('dbo." + sTableName + "')") to sSelect
47477>>>>>                End
47477>>>>>>
47477>>>>>
47477>>>>>                Get _SqlEnumerateEsqlDAW sSelect 1 to sReturnArray
47478>>>>>                Case Break
47479>>>>>
47479>>>>>            Case (sDriverID = MSSQLDRV_ID)
47482>>>>>                Move ("select name from sys.columns where [object_id] = object_id('dbo." + sTableName + "')") to sSelect
47483>>>>>                Get _SqlEnumerateEsqlDAW sSelect 1 to sReturnArray
47484>>>>>                Case Break
47485>>>>>
47485>>>>>            Case (sDriverID = DB2_DRV_ID)
47488>>>>>                Move ("SELECT colname from syscat.columns WHERE tabschema = '" + sSchema + "'" * "AND tabname = '" + sTableName + "'") to sSelect
47489>>>>>                Get _SqlEnumerateEsqlDAW sSelect 1 to sReturnArray
47490>>>>>                Case Break
47491>>>>>
47491>>>>>            Case Else
47491>>>>>                Error DFERR_PROGRAM "Unsupported driver passed to _SqlUtilEnumerateColumns function."
47492>>>>>>
47492>>>>>                Case Break
47493>>>>>        Case End
47493>>>>>
47493>>>>>        Function_Return sReturnArray
47494>>>>>    End_Function
47495>>>>>
47495>>>>>
47495>>>>>    // Returns a string array with all table indexes for the passed table handle and driver id.
47495>>>>>    Function _SqlUtilEnumerateIndexes String sTableName String sDriverID Returns String[]
47497>>>>>        String[] sReturnArray sReturnArray2
47499>>>>>        String sConnectionString sSelect sSchema
47499>>>>>        Boolean bOK
47499>>>>>        Integer iCount iSize
47499>>>>>
47499>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47500>>>>>        If (bOK = False) Begin
47502>>>>>            Error DFERR_PROGRAM ("Unsupported driver. A list of table columns could not be retrieved for:" * sDriverID + ".")
47503>>>>>>
47503>>>>>            Function_Return sReturnArray
47504>>>>>        End
47504>>>>>>
47504>>>>>
47504>>>>>        Get psConnectionString to sConnectionString
47505>>>>>        Get psSchema to sSchema
47506>>>>>
47506>>>>>        Case Begin
47506>>>>>            Case (sDriverID = MSSQLDRV_ID)
47508>>>>>                Move ("select * from sys.indexes where object_id = (select object_id from sys.objects where name = '" + sTableName + "')") to sSelect
47509>>>>>                Get _SqlEnumerateEsqlDAW sSelect 2 to sReturnArray
47510>>>>>                Case Break
47511>>>>>
47511>>>>>            Case (sDriverID = DB2_DRV_ID)
47514>>>>>                Error "Not implemented yet! The select statement has not been finalized."
47515>>>>>>
47515>>>>>//                Move () to sSelect
47515>>>>>//                Get _SqlEnumerateEsqlDAW sSelect 2 to sReturnArray
47515>>>>>                Case Break
47516>>>>>
47516>>>>>            Case Else
47516>>>>>                Error DFERR_PROGRAM "Unsupported driver passed to _SqlUtilEnumerateIndexes function."
47517>>>>>>
47517>>>>>                Case Break
47518>>>>>        Case End
47518>>>>>
47518>>>>>        Move (SizeOfArray(sReturnArray)) to iSize
47519>>>>>        Decrement iSize
47520>>>>>        For iCount from 0 to iSize
47526>>>>>>
47526>>>>>            If (Trim(sReturnArray[iCount]) <> "") Begin
47528>>>>>                Move sReturnArray[iCount] to sReturnArray2[SizeOfArray(sReturnArray2)]
47529>>>>>            End
47529>>>>>>
47529>>>>>        Loop
47530>>>>>>
47530>>>>>
47530>>>>>        Function_Return sReturnArray2
47531>>>>>    End_Function
47532>>>>>
47532>>>>>    // Returns a string array with all table names the passed table handle has relation ships with.
47532>>>>>    // The format of the array is "TableName.FieldName"
47532>>>>>    Function _SqlUtilEnumerateRelations String sTableName String sDriverID Returns tSQLRelation[]
47534>>>>>        String[] sFileNameArray sFieldNameArray
47536>>>>>        tSQLRelation[] sRelationsArray
47536>>>>>        tSQLRelation[] sRelationsArray
47537>>>>>        String sConnectionString sSelect sSchema sFileName sFieldName
47537>>>>>        Boolean bOK
47537>>>>>        Integer iCount iSize iLength
47537>>>>>
47537>>>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
47538>>>>>        If (bOK = False) Begin
47540>>>>>            Error DFERR_PROGRAM ("Unsupported driver. A list of table columns could not be retrieved for:" * sDriverID + ".")
47541>>>>>>
47541>>>>>            Function_Return sRelationsArray
47542>>>>>        End
47542>>>>>>
47542>>>>>
47542>>>>>        Get psConnectionString to sConnectionString
47543>>>>>        Get psSchema to sSchema
47544>>>>>
47544>>>>>        Case Begin
47544>>>>>            Case (sDriverID = MSSQLDRV_ID)
47546>>>>>                Move ("SELECT object_name(parent_object_id), object_name(referenced_object_id), name from sys.foreign_keys WHERE parent_object_id = object_id( '" + sTableName + "')") to sSelect
47547>>>>>                Get _SqlEnumerateEsqlDAW sSelect 2 to sFileNameArray
47548>>>>>                Get _SqlEnumerateEsqlDAW sSelect 3 to sFieldNameArray
47549>>>>>                Case Break
47550>>>>>
47550>>>>>            Case (sDriverID = DB2_DRV_ID)
47553>>>>>                Error "Not implemented yet! The select statement has not been finalized."
47554>>>>>>
47554>>>>>//                Move () to sSelect
47554>>>>>//                Get _SqlEnumerateEsqlDAW sSelect 2 to sReturnArray
47554>>>>>//                Get _SqlEnumerateEsqlDAW sSelect 3 to sFieldNameArray
47554>>>>>                Case Break
47555>>>>>
47555>>>>>            Case Else
47555>>>>>                Error DFERR_PROGRAM "Unsupported driver passed to the _SqlUtilEnumerateRelations function."
47556>>>>>>
47556>>>>>                Case Break
47557>>>>>        Case End
47557>>>>>
47557>>>>>        Move (Length(sTableName)) to iLength
47558>>>>>        Move (iLength + 4)        to iLength // The related to field key has the format "FK_TableName + FieldName"
47559>>>>>        Move (SizeOfArray(sFileNameArray)) to iSize
47560>>>>>        Decrement iSize
47561>>>>>        For iCount from 0 to iSize
47567>>>>>>
47567>>>>>            If (Trim(sFileNameArray[iCount]) <> "") Begin
47569>>>>>                Move sFileNameArray[iCount]         to sFileName
47570>>>>>                Move sFieldNameArray[iCount]        to sFieldName
47571>>>>>                Move (Mid(sFieldName, 99, iLength)) to sFieldName
47572>>>>>                Move sFileName  to sRelationsArray[iCount].sFileName
47573>>>>>                Move sFieldName to sRelationsArray[iCount].sFieldName
47574>>>>>            End
47574>>>>>>
47574>>>>>        Loop
47575>>>>>>
47575>>>>>
47575>>>>>        Function_Return sRelationsArray
47576>>>>>    End_Function
47577>>>>>
47577>>>>>    Function SqlUtilEnumerateLoggedInUsers String sDriverID String sDatabase Returns tSQLLoggedInUser[]
47579>>>>>        tSQLLoggedInUser[] SQLLoggedInUser
47579>>>>>        tSQLLoggedInUser[] SQLLoggedInUser
47580>>>>>        String[] sUsers sPrograms
47582>>>>>        String sSelect
47582>>>>>        Integer iSize iCount
47582>>>>>
47582>>>>>        Case Begin
47582>>>>>            Case (sDriverID = MSSQLDRV_ID)
47584>>>>>                Move ("SELECT RTRIM(SP.nt_username) AS Inlog, RTRIM(SP.program_name) as Programma from master.dbo.sysprocesses SP INNER JOIN master.dbo.sysdatabases SD ON SP.dbid = SD.dbid WHERE (SP.nt_username <> '') and (SP.nt_username <> 'SYSTEM') and (SD.name = '" ;                + sDatabase + "') ORDER by Inlog") to sSelect
47585>>>>>                Get _SqlEnumerateEsqlDAW sSelect 1 to sUsers
47586>>>>>                Get _SqlEnumerateEsqlDAW sSelect 2 to sPrograms
47587>>>>>                Case Break
47588>>>>>            Case Else
47588>>>>>                Error DFERR_PROGRAM ("Not implemented yet for this driver (" + sDriverID + ")")
47589>>>>>>
47589>>>>>        Case End
47589>>>>>
47589>>>>>        Move (SizeOfArray(sUsers)) to iSize
47590>>>>>        Decrement iSize
47591>>>>>        For iCount from 0 to iSize
47597>>>>>>
47597>>>>>            Move sUsers[iCount]    to SQLLoggedInUser[iCount].sUser
47598>>>>>            Move sPrograms[iCount] to SQLLoggedInUser[iCount].sProgram
47599>>>>>        Loop
47600>>>>>>
47600>>>>>
47600>>>>>        Function_Return SQLLoggedInUser
47601>>>>>    End_Function
47602>>>>>
47602>>>>>    // Returns an array with all ".int" files for the passed sDataPath, _except_ for the driver .int files;
47602>>>>>    // "MSSQLDRV.int", "DB2_DRV.int" & "ODBC_DRV.int".
47602>>>>>    Function SqlUtilEnumerateIntFiles String sDataPath Returns String[]
47604>>>>>        String[] sFilesData
47605>>>>>        Boolean bExists
47605>>>>>        Integer iCh
47605>>>>>        String sFileName sExt
47605>>>>>
47605>>>>>        Get vFolderExists sDataPath to bExists
47606>>>>>        If (bExists = True) Begin
47608>>>>>            Move (Utf8ToAnsi(Trim(sDataPath))) to sDataPath
47609>>>>>            Move ("dir:" + sDataPath)      to sDataPath
47610>>>>>            Get Seq_New_Channel to iCh  // get free channel for input
47611>>>>>            Direct_Input channel iCh sDataPath
47613>>>>>                Repeat
47613>>>>>>
47613>>>>>                    Readln channel iCh sFileName
47615>>>>>                    Get ParseFileExtension sFileName to sExt
47616>>>>>                    If (Uppercase(sExt) = "INT") Begin
47618>>>>>                        If (not(Uppercase(sFileName) contains "MSSQLDRV" and Uppercase(sFileName) contains "DB2_DRV" and Uppercase(sFileName) contains "ODBC_DRV")) Begin
47620>>>>>                            Move sFileName to sFilesData[SizeOfArray(sFilesData)]
47621>>>>>                        End
47621>>>>>>
47621>>>>>                    End
47621>>>>>>
47621>>>>>                Until (SeqEof = True)
47623>>>>>            Close_Input channel iCh
47625>>>>>            Send Seq_Release_Channel iCh
47626>>>>>        End
47626>>>>>>
47626>>>>>        Function_Return sFilesData
47627>>>>>    End_Function
47628>>>>>
47628>>>>>    // Only done for MSSQLDRV_ID so far...
47628>>>>>    Function _SqlEnumerateDatabaseCollations String sDriverID Returns String[]
47630>>>>>        String sSQL sConnectionID sConnectionString sSelect sName sPre
47630>>>>>        String sDescription sFrom sSys sValue sPrevious
47630>>>>>        Handle hStmt hoSQLManager hoSQLConnect
47630>>>>>        Integer iFetchResult iRows iColumn iPos
47630>>>>>        tSQLConnection SQLConnection
47630>>>>>        tSQLConnection SQLConnection
47630>>>>>        String[] asCollations
47631>>>>>        
47631>>>>>        If (sDriverID = "") Begin
47633>>>>>            Error DFERR_PROGRAM "The database driver ID was not passed as a parameter to the 'SqlDatabaseCollationChange' function"
47634>>>>>>
47634>>>>>            Function_Return asCollations
47635>>>>>        End
47635>>>>>>
47635>>>>>
47635>>>>>        // Only done for MSSQLDRV_ID so far...
47635>>>>>        If (sDriverID <> MSSQLDRV_ID) Begin
47637>>>>>            Function_Return asCollations
47638>>>>>        End                 
47638>>>>>>
47638>>>>>
47638>>>>>        Get phoSQLManager to hoSQLManager
47639>>>>>        Get psConnectionID     to sConnectionID
47640>>>>>        Get psConnectionString to sConnectionString
47641>>>>>        Move 0 to LastErr
47642>>>>>
47642>>>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
47643>>>>>        Get SqlConnect of hoSQLManager sDriverID sConnectionString to hoSQLConnect
47644>>>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
47645>>>>>        If (LastErr = CLIERR_LOGIN_UNSUCCESSFUL) Begin
47647>>>>>            Error DFERR_PROGRAM ("Login failed to the database server. The following connect string was used:\n" + sConnectionString)
47648>>>>>>
47648>>>>>            Function_Return asCollations
47649>>>>>        End
47649>>>>>>
47649>>>>>
47649>>>>>        Get SqlOpen of hoSQLConnect to hStmt
47650>>>>>
47650>>>>>        If (hStmt = 0) Begin
47652>>>>>            Send SqlDisconnect of hoSQLManager
47653>>>>>            Error DFERR_PROGRAM CS_DUF_ConnectError
47654>>>>>>
47654>>>>>            Function_Return asCollations
47655>>>>>        End
47655>>>>>>
47655>>>>>
47655>>>>>        Get _SqlFindKeyWord CI_SQLSelect      to sSelect
47656>>>>>        Get _SqlFindKeyWord CI_SQLName        to sName
47657>>>>>        Get _SqlFindKeyWord CI_SQLDescription to sDescription
47658>>>>>        Get _SqlFindKeyWord CI_SQLFrom        to sFrom
47659>>>>>        Get _SqlFindKeyWord CI_SQLSys         to sSys
47660>>>>>
47660>>>>>        // MS-SQL Syntax:  
47660>>>>>        // SELECT name, description
47660>>>>>        //   from sys.fn_helpcollations();
47660>>>>>        Move (sSelect  * String(sName) * String(",") * String(sDescription) * String(sFrom) * String(sSys) * String(".fn_helpcollations();")) to sSQL
47661>>>>>
47661>>>>>        Move 1 to iColumn
47662>>>>>        Send SqlExecDirect of hStmt sSQL
47663>>>>>        Get SqlStmtAttribute of hStmt SqlSTMTATTRIB_ROWCOUNT to iRows
47664>>>>>        Repeat
47664>>>>>>
47664>>>>>            Get SQLFetch of hStmt to iFetchResult
47665>>>>>            If (iFetchResult <> 0) Begin
47667>>>>>                Get SQLColumnValue of hStmt iColumn to sValue 
47668>>>>>                If (sValue <> sPrevious) Begin         
47670>>>>>                    // We need to skip all collations starting with "SQL" because they
47670>>>>>                    // are obsolete and for pre-SQL Server 2000.
47670>>>>>                    Move (Pos("SQL", Uppercase(sValue))) to iPos
47671>>>>>                    If (iPos <> 1) Begin
47673>>>>>                        Move (Trim(sValue)) to asCollations[SizeOfArray(asCollations)
47674>>>>>                    End
47674>>>>>>
47674>>>>>                End
47674>>>>>>
47674>>>>>                Move sValue to sPrevious
47675>>>>>            End
47675>>>>>>
47675>>>>>        Until (iFetchResult = 0)
47677>>>>>        Send SQLClose of hStmt
47678>>>>>        Send SQLDisconnect of hoSQLConnect
47679>>>>>
47679>>>>>        Function_Return asCollations
47680>>>>>    End_Function
47681>>>>>
47681>>>>>    // To enumerate SQL database resources with ESQL and return the result as a string array,
47681>>>>>    // for DAW drivers.
47681>>>>>    // Returns: A string array.
47681>>>>>    Function _SqlEnumerateEsqlDAW String sStmt Integer iColumn Returns String[]
47683>>>>>        String[] sReturnArray
47684>>>>>        String sValue sPrevious
47684>>>>>        Handle hoSQLHandler hoSQLConnect hstmt
47684>>>>>        Integer iFetchResult iRows
47684>>>>>        tSQLConnection SQLConnection
47684>>>>>        tSQLConnection SQLConnection
47684>>>>>
47684>>>>>        Get phoSQLManager to hoSQLHandler
47685>>>>>
47685>>>>>        If (hoSQLHandler <> 0) Begin
47687>>>>>            Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
47688>>>>>            Get SQLConnect of hoSQLHandler SQLConnection.sDriverID SQLConnection.sConnectionString to hoSQLConnect
47689>>>>>
47689>>>>>            If (hoSQLConnect <> 0) Begin
47691>>>>>                Get SQLOpen of hoSQLConnect to hstmt
47692>>>>>                If (hstmt <> 0) Begin
47694>>>>>                    Send SqlExecDirect of hstmt sStmt
47695>>>>>                    Get SqlStmtAttribute of hstmt SqlSTMTATTRIB_ROWCOUNT to iRows
47696>>>>>                    Repeat
47696>>>>>>
47696>>>>>                        Get SQLFetch of hstmt to iFetchResult
47697>>>>>                        If (iFetchResult <> 0) Begin
47699>>>>>                            Get SQLColumnValue of hstmt iColumn to sValue
47700>>>>>                            If (sValue <> sPrevious) Begin
47702>>>>>                                Move (Trim(sValue)) to sReturnArray[SizeOfArray(sReturnArray)
47703>>>>>                            End
47703>>>>>>
47703>>>>>                            Move sValue to sPrevious
47704>>>>>                        End
47704>>>>>>
47704>>>>>                    Until (iFetchResult = 0)
47706>>>>>                    Send SQLClose of hstmt
47707>>>>>                End
47707>>>>>>
47707>>>>>                Send SQLDisconnect of hoSQLConnect
47708>>>>>            End
47708>>>>>>
47708>>>>>        End
47708>>>>>>
47708>>>>>
47708>>>>>        Function_Return sReturnArray
47709>>>>>    End_Function
47710>>>>>
47710>>>>>    Function _SqlDatabasesArrayDB2 Returns String[]
47712>>>>>        String[] sReturnArray
47713>>>>>        String sDataSource
47713>>>>>        Handle hoSQLHandler
47713>>>>>        Integer iItem
47713>>>>>
47713>>>>>        Get phoDB2SQLHandler to hoSQLHandler
47714>>>>>        Send SeedDataSources of hoSQLHandler
47715>>>>>
47715>>>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
47716>>>>>
47716>>>>>        Repeat
47716>>>>>>
47716>>>>>            Get DataSources of hoSQLHandler to sDataSource
47717>>>>>            Move (Replaces(",", sDataSource, "")) to sDataSource
47718>>>>>            Move (Trim(sDataSource)) to sReturnArray[iItem]
47719>>>>>            Increment iItem
47720>>>>>        Until (sDataSource = "")
47722>>>>>
47722>>>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
47723>>>>>
47723>>>>>        Function_Return sReturnArray
47724>>>>>    End_Function
47725>>>>>
47725>>>>>    Function _SqlDatabaseSourcesArrayODBC Returns String[]
47727>>>>>        String[] sReturnArray
47728>>>>>        String sDataSource
47728>>>>>        Handle hoSQLHandler
47728>>>>>        Integer iItem
47728>>>>>
47728>>>>>        Get phoODBCSQLHandler to hoSQLHandler
47729>>>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
47730>>>>>
47730>>>>>        Send SeedDataSources of hoSQLHandler
47731>>>>>
47731>>>>>        Repeat
47731>>>>>>
47731>>>>>            Get DataSources of hoSQLHandler to sDataSource
47732>>>>>            If (Trim(sDataSource) <> "" and not(sDataSource contains "*.")) Begin
47734>>>>>                Move (Trim(sDataSource)) to sReturnArray[iItem]
47735>>>>>                Increment iItem
47736>>>>>            End
47736>>>>>>
47736>>>>>        Until (sDataSource = "")
47738>>>>>
47738>>>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
47739>>>>>
47739>>>>>        Function_Return sReturnArray
47740>>>>>    End_Function
47741>>>>>
47741>>>>>    Function _SqlDatabasesArrayODBC Returns tSQLIntTableInfo[]
47743>>>>>        String[] sDataSources
47744>>>>>        tSQLConnection SQLConnection
47744>>>>>        tSQLConnection SQLConnection
47744>>>>>        tSQLIntTableInfo[] sReturnArray
47744>>>>>        tSQLIntTableInfo[] sReturnArray
47745>>>>>        Integer iDataSources iCount iItem
47745>>>>>        String sConnection sServer sDatabase sKey sSubKey
47745>>>>>        Handle hoIniFile hoRegistry hoODBCDataSources
47745>>>>>        Boolean bExists bKeyOpened
47745>>>>>
47745>>>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
47746>>>>>        Move SQLConnection.sConnectionString to sConnection
47747>>>>>        Move SQLConnection.sServer           to sServer
47748>>>>>
47748>>>>>        // FileDSN - read DATABASE name from DSN ini-file
47748>>>>>        If (Uppercase(sServer) contains ("." + String(CS_SQLIniDSNKeyword))) Begin
47750>>>>>            Get Create (RefClass(cIniFile)) to hoIniFile
47751>>>>>            Set psFileName of hoIniFile to sServer
47752>>>>>            Get ReadString of hoIniFile CS_SQLODBCIniSectionName CS_SQLIniDatabaseKeyword "" to sDatabase
47753>>>>>            Move sDatabase to sReturnArray[0].sDatabaseName
47754>>>>>            Send Destroy of hoIniFile
47755>>>>>        End
47755>>>>>>
47755>>>>>
47755>>>>>        // DSN - read DATABASE name from the registry
47755>>>>>        Else Begin
47756>>>>>            Get Create (RefClass(cRegistry)) to hoRegistry
47757>>>>>
47757>>>>>            // We start with checking the "System DNS" area in the registry as it is the
47757>>>>>            // most probably place the info is kept that we're after.
47757>>>>>            Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
47758>>>>>            Set pfAccessRights of hoRegistry to Key_Read
47759>>>>>            Get KeyExists of hoRegistry "SOFTWARE\Wow6432Node" to bExists
47760>>>>>            If (bExists = True) Begin
47762>>>>>                Move "SOFTWARE\Wow6432Node\ODBC\ODBC.INI" to sKey
47763>>>>>            End
47763>>>>>>
47763>>>>>            Else Begin
47764>>>>>                Move "SOFTWARE\ODBC\ODBC.INI" to sKey
47765>>>>>            End
47765>>>>>>
47765>>>>>
47765>>>>>            Get KeyExists of hoRegistry sKey to bExists
47766>>>>>            If (bExists) Begin
47768>>>>>                Get OpenKey of hoRegistry sKey to bKeyOpened
47769>>>>>                If (bKeyOpened) Begin
47771>>>>>                    Get Create (RefClass(Array)) to hoODBCDataSources
47772>>>>>                    Get GetSubkeys of hoRegistry hoODBCDataSources to iDataSources
47773>>>>>                    If (iDataSources > 0) Begin
47775>>>>>                        Move (ResizeArray(sDataSources, iDataSources)) to sDataSources
47776>>>>>                        Decrement iDataSources
47777>>>>>                        for iCount from 0 to iDataSources
47783>>>>>>
47783>>>>>                            Get Value of hoODBCDataSources iCount to sDataSources[iCount]
47784>>>>>                        Loop
47785>>>>>>
47785>>>>>                        Move 0 to iItem
47786>>>>>                        for iCount from 0 to iDataSources
47792>>>>>>
47792>>>>>                            Move sDataSources[iCount] to sSubKey
47793>>>>>                            Get OpenKey of hoRegistry (sKey + "\" + String(sSubKey)) to bKeyOpened
47794>>>>>                            If (bKeyOpened = True) Begin
47796>>>>>                                Get ValueExists of hoRegistry CS_SQLIniDatabaseKeyword to bExists
47797>>>>>                                If (bExists = True) Begin
47799>>>>>                                    Move sSubKey to sReturnArray[iItem].sServerName
47800>>>>>                                    Get ReadString of hoRegistry CS_SQLIniDatabaseKeyword to sReturnArray[iItem].sDatabaseName
47801>>>>>                                    Increment iItem
47802>>>>>                                End
47802>>>>>>
47802>>>>>                            End
47802>>>>>>
47802>>>>>                        Loop
47803>>>>>>
47803>>>>>                    End
47803>>>>>>
47803>>>>>                    Send CloseKey of hoRegistry
47804>>>>>                    Send Destroy of hoODBCDataSources
47805>>>>>                End
47805>>>>>>
47805>>>>>            End
47805>>>>>>
47805>>>>>
47805>>>>>            // We then check the "User DNS" area in the registry.
47805>>>>>            Set phRootKey of hoRegistry to HKEY_CURRENT_USER
47806>>>>>            Set pfAccessRights of hoRegistry to Key_Read
47807>>>>>            Move "SOFTWARE\ODBC\ODBC.INI" to sKey
47808>>>>>            Get KeyExists of hoRegistry sKey to bExists
47809>>>>>
47809>>>>>            If (bExists) Begin
47811>>>>>                Get OpenKey of hoRegistry sKey to bKeyOpened
47812>>>>>                If (bKeyOpened) Begin
47814>>>>>                    Get Create (RefClass(Array)) to hoODBCDataSources
47815>>>>>                    Get GetSubkeys of hoRegistry hoODBCDataSources to iDataSources
47816>>>>>                    If (iDataSources > 0) Begin
47818>>>>>                        Move (ResizeArray(sDataSources, iDataSources)) to sDataSources
47819>>>>>                        Decrement iDataSources
47820>>>>>                        for iCount from 0 to iDataSources
47826>>>>>>
47826>>>>>                            Get Value of hoODBCDataSources iCount to sDataSources[iCount]
47827>>>>>                        Loop
47828>>>>>>
47828>>>>>                        for iCount from 0 to iDataSources
47834>>>>>>
47834>>>>>                            Move sDataSources[iCount] to sSubKey
47835>>>>>                            Get OpenKey of hoRegistry (sKey + "\" + String(sSubKey)) to bKeyOpened
47836>>>>>                            If (bKeyOpened = True) Begin
47838>>>>>                                Get ValueExists of hoRegistry CS_SQLIniDatabaseKeyword to bExists
47839>>>>>                                If (bExists = True) Begin
47841>>>>>                                    Move sSubKey to sReturnArray[iItem].sServerName
47842>>>>>                                    Get ReadString of hoRegistry CS_SQLIniDatabaseKeyword to sReturnArray[iItem].sDatabaseName
47843>>>>>                                    Increment iItem
47844>>>>>                                End
47844>>>>>>
47844>>>>>                            End
47844>>>>>>
47844>>>>>                        Loop
47845>>>>>>
47845>>>>>                    End
47845>>>>>>
47845>>>>>                    Send CloseKey of hoRegistry
47846>>>>>                    Send Destroy of hoODBCDataSources
47847>>>>>                End
47847>>>>>>
47847>>>>>            End
47847>>>>>>
47847>>>>>
47847>>>>>            Send Destroy of hoRegistry
47848>>>>>        End
47848>>>>>>
47848>>>>>
47848>>>>>        Function_Return sReturnArray
47849>>>>>    End_Function
47850>>>>>
47850>>>>>    // We might have a split Sql script where the info about which database to use is
47850>>>>>    // put on top of the Sql script, we then need to save it to be able to retrieve it later and
47850>>>>>    // insert it for scriplets to come after the first one.
47850>>>>>    Function _SqlFormatStatement String sStmt Returns String
47852>>>>>        String sUseDatabase sTmp sUseKeyWord sCreateViewKeyWord sDBOKeyWord sNoCountKeyWord sDriverID
47852>>>>>        Integer iStart iEnd iDbType
47852>>>>>        Boolean bOK
47852>>>>>
47852>>>>>        Get piDbType to iDbType
47853>>>>>        Get psDriverID to sDriverID
47854>>>>>        Get _SqlFindKeyWord CI_SQLUse          to sUseKeyWord
47855>>>>>        Get _SqlFindKeyWord CI_SQLSetNoCountOn to sNoCountKeyWord
47856>>>>>        Get _SqlFindKeyWord CI_SQLCreateView   to sCreateViewKeyWord
47857>>>>>        Get _SqlFindKeyWord CI_SQLDBO          to sDBOKeyWord
47858>>>>>        Move (Replaces(" ", sStmt, "")) to sTmp
47859>>>>>        If (Uppercase(sTmp) contains (sUseKeyWord +"[")) Begin
47861>>>>>            Move (Pos("[", (Uppercase(sTmp)))) to iStart
47862>>>>>            Move (Pos("]", sTmp)) to iEnd
47863>>>>>            Move (Mid(sTmp, (iEnd -iStart +1), iStart)) to sUseDatabase
47864>>>>>            Move (sUseKeyWord * sUseDatabase + " ") to sUseDatabase
47865>>>>>            Set Private.psUseDatabase to sUseDatabase
47866>>>>>        End
47866>>>>>>
47866>>>>>        Else Begin
47867>>>>>            Move (Uppercase(sStmt)) to sTmp
47868>>>>>
47868>>>>>            // A "Create View" statement _must_ be the very first words in a Sql statement.
47868>>>>>            If (not(sTmp contains sCreateViewKeyWord)) Begin
47870>>>>>                Get Private.psUseDatabase to sUseDatabase
47871>>>>>                Move (Insert(sUseDatabase, sStmt, 1)) to sStmt
47872>>>>>            End
47872>>>>>>
47872>>>>>
47872>>>>>            // This is a bit special to place here but was done so because it was easier that way.
47872>>>>>            // We will get an error when trying to create a view if it already exists.
47872>>>>>            // So to avoid such errors; we first remove it & then recreate it.
47872>>>>>            Else If (sTmp contains sCreateViewKeyWord) Begin
47875>>>>>                // Make sure we only have one space between statements/words.
47875>>>>>                Move (Replaces("  ", sTmp, " ")) to sTmp
47876>>>>>                Move (Replace(sCreateViewKeyWord, sTmp, "")) to sTmp
47877>>>>>                Move (Trim(sTmp)) to sTmp
47878>>>>>                Move (Pos(" ", sTmp)) to iEnd
47879>>>>>                Move (Left(sTmp, iEnd)) to sTmp
47880>>>>>                If ((not(sTmp contains ("[" + sDBOKeyWord + "]."))) and (not(sTmp contains (sDBOKeyWord + ".")))) Begin
47882>>>>>                    Move (sDBOKeyWord + "." + Trim(sTmp)) to sTmp
47883>>>>>                End
47883>>>>>>
47883>>>>>                Move (Trim(sTmp)) to sTmp
47884>>>>>                // Remove data view as it already exists!
47884>>>>>                Get _SqlViewRemove sDriverID sTmp to bOK
47885>>>>>            End
47885>>>>>>
47885>>>>>        End
47885>>>>>>
47885>>>>>
47885>>>>>        Function_Return sStmt
47886>>>>>    End_Function
47887>>>>>
47887>>>>>    // First deletes the data cache file and then drops the passed Sql data view.
47887>>>>>    Function _SqlViewRemove String sDataView Returns Boolean
47889>>>>>        String sDriverID sSQLString sDropViewKeyWord
47889>>>>>        Integer iRetval
47889>>>>>        Boolean bOK
47889>>>>>
47889>>>>>        Get psDriverID to sDriverID
47890>>>>>        Get _UtilDeleteCacheFile sDataView to iRetval
47891>>>>>
47891>>>>>        Get _SqlFindKeyWord CI_SQLDropView to sDropViewKeyWord
47892>>>>>        Move (sDropViewKeyWord * String(sDataView)) to sSQLString
47893>>>>>        Set psSQLStatementString to sSQLString
47894>>>>>
47894>>>>>        // As we don't check if the view exist or not, it might happen
47894>>>>>        // that it doesn't and that would through an error, so guard for that eventuality (just ignore it).
47894>>>>>        Move False to Err
47895>>>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
47896>>>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
47897>>>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
47898>>>>>        Move 0 to LastErr
47899>>>>>
47899>>>>>        // We also need to remove the cache-file since the table has been changed
47899>>>>>        Get _UtilDeleteCacheFile sDataView to bOK
47900>>>>>
47900>>>>>        Function_Return (Err = False)
47901>>>>>    End_Function
47902>>>>>
47902>>>>>    // Returns the proper Sql language key word(s) for the passed SQL key-word constant
47902>>>>>    Function _SqlFindKeyWord Integer iSQLKeywordConstant Returns String
47904>>>>>        String sRetval
47904>>>>>        Integer iDbType iIndex
47904>>>>>        tSQLKeyWords[] SQLKeywordArray
47904>>>>>        tSQLKeyWords[] SQLKeywordArray
47905>>>>>        tSQLKeyWords   SQLKeyWords
47905>>>>>        tSQLKeyWords   SQLKeyWords
47905>>>>>
47905>>>>>        // Sql back-end type. E.g. MS-SQL, MySQL, Oracle, DB2...
47905>>>>>        Move "" to sRetval
47906>>>>>        Get piDbType to iDbType
47907>>>>>        Move iDbType             to SQLKeyWords.iSQLDbType
47908>>>>>        Move iSQLKeywordConstant to SQLKeyWords.iSQLWord
47909>>>>>
47909>>>>>        Get paSQLKeywordArray to SQLKeywordArray
47910>>>>>        Move (SearchArray(SQLKeyWords, SQLKeywordArray, Self, RefFunc(CompareFindSQLKeyWords))) to iIndex
47911>>>>>        If (iIndex >= 0) Begin
47913>>>>>            Move SQLKeywordArray[iIndex].sSQLPhrase to sRetval
47914>>>>>        End
47914>>>>>>
47914>>>>>
47914>>>>>        Function_Return sRetval
47915>>>>>    End_Function
47916>>>>>
47916>>>>>    // Function will "clean/sanitize" the script by removing all comments and blank lines.
47916>>>>>    Function _SqlUtilSanitizeScript tSQLScriptArray SqlScriptArray Returns tSQLScriptArray[]
47918>>>>>        String[] sSQLScriptArray
47919>>>>>        String sText sLine sTmp sCommentStart sCommentEnd sDashComment
47919>>>>>        Integer iSize iCount
47919>>>>>        Boolean bCommentStart bCommentEnd bDashComment
47919>>>>>
47919>>>>>        Move False to bCommentStart
47920>>>>>        Move False to bCommentEnd
47921>>>>>        Move False to bDashComment
47922>>>>>        Move "/*"  to sCommentStart   // These are the standard comment start & stop tokens...
47923>>>>>        Move "*/"  to sCommentEnd
47924>>>>>        Move "--"  to sDashComment    // ...but a comment can also start with two dashes "--".
47925>>>>>
47925>>>>>        Move (SizeOfArray(SqlScriptArray.sSQLScriptArray)) to iSize
47926>>>>>        Decrement iSize
47927>>>>>        Move "" to sText
47928>>>>>
47928>>>>>        for iCount from 0 to iSize
47934>>>>>>
47934>>>>>            Move SqlScriptArray.sSQLScriptArray[iCount] to sLine
47935>>>>>            Move (Trim(sLine)) to sTmp
47936>>>>>            If (sTmp <> "") Begin
47938>>>>>                Move (Left(sTmp, 2) = sDashComment) to bDashComment
47939>>>>>                If (bCommentStart = False) Begin
47941>>>>>                    Move (Left(sTmp, 2) = sCommentStart) to bCommentStart
47942>>>>>                    If (bCommentStart = False) Begin
47944>>>>>                    End
47944>>>>>>
47944>>>>>                End
47944>>>>>>
47944>>>>>                Move (sTmp contains sCommentEnd) to bCommentEnd
47945>>>>>                If (bCommentEnd = True) Begin
47947>>>>>                    Move False to bCommentStart
47948>>>>>                End
47948>>>>>>
47948>>>>>                If (bDashComment = False and bCommentStart = False and bCommentEnd = False) Begin
47950>>>>>                    Move sLine to sSQLScriptArray[SizeOfArray(sSQLScriptArray)]
47951>>>>>                End
47951>>>>>>
47951>>>>>            End
47951>>>>>>
47951>>>>>        Loop
47952>>>>>>
47952>>>>>
47952>>>>>        // Update the retval struct array:
47952>>>>>        Move sSQLScriptArray to SqlScriptArray.sSQLScriptArray
47953>>>>>        Function_Return SqlScriptArray
47954>>>>>    End_Function
47955>>>>>
47955>>>>>    // Helper function that builds a string like;
47955>>>>>    // "SELECT name from [Master].[sys].[databases] where name"
47955>>>>>    Function _SqlSelectFromWhereName Returns String
47957>>>>>        String sRetval sSelect sName sFrom sMaster sSys sDatabases sWhere sDBO
47957>>>>>
47957>>>>>        Get _SqlFindKeyWord CI_SQLSelect       to sSelect
47958>>>>>        Get _SqlFindKeyWord CI_SQLName         to sName
47959>>>>>        Get _SqlFindKeyWord CI_SQLDBO          to sDBO
47960>>>>>        Get _SqlFindKeyWord CI_SQLFrom         to sFrom
47961>>>>>        Get _SqlFindKeyWord CI_SQLMaster       to sMaster
47962>>>>>        Get _SqlFindKeyWord CI_SQLSys          to sSys
47963>>>>>        Get _SqlFindKeyWord CI_SQLDatabases    to sDatabases
47964>>>>>        Get _SqlFindKeyWord CI_SQLWhere        to sWhere
47965>>>>>        Move (sSelect * sName * sFrom * "[" + sMaster + "].[" + sDBO + "].[" + sSys + sDatabases + "]" * sWhere * sName) to sRetval
47966>>>>>        Function_Return sRetval
47967>>>>>    End_Function
47968>>>>>
47968>>>>>    // Helper function to create a SQL statement like;
47968>>>>>    // "SELECT * FROM SYS.INDEXES WHERE NAME = MyIndexName AND OBJECT_ID = OBJECT_ID([MySchmaName].[MyTableName])"
47968>>>>>    // Used for checking if an index exists.
47968>>>>>    Function _SqlQueryIfIndexExists String sSchemaName String sTableName String sIndexName Returns String
47970>>>>>        String sRetval sSelect sFrom sSysIndexes sWhere sObjectID sAnd sName
47970>>>>>
47970>>>>>        Get _SqlFindKeyWord CI_SQLSelect to sSelect
47971>>>>>        Get _SqlFindKeyWord CI_SQLFrom to sFrom
47972>>>>>        Get _SqlFindKeyWord CI_SQLSysIndexes to sSysIndexes
47973>>>>>        Get _SqlFindKeyWord CI_SQLWhere to sWhere
47974>>>>>        Get _SqlFindKeyWord CI_SQLObjectID to sObjectID
47975>>>>>        Get _SqlFindKeyWord CI_SQLAND to sAnd
47976>>>>>        Get _SqlFindKeyWord CI_SQLName to sName
47977>>>>>
47977>>>>>        Move (sSelect * String("*") * sFrom * sSysIndexes * sWhere * sName * "=" * sIndexName * sAnd * sObjectID * "=([" + sSchemaName + "].[" + sTableName + "])") to sRetval
47978>>>>>
47978>>>>>        Function_Return sRetval
47979>>>>>    End_Function
47980>>>>>
47980>>>>>    // Formats a columns iLenght & iDecimal parameters as SQL expects them in a string.
47980>>>>>    // E.g. (4,2), where 4 is the iLength and 2 the iDecimals param.
47980>>>>>    Function _SqlFormatLengthAndDecimalAsString Integer iLength Integer iDecimals Returns String
47982>>>>>        String sRetval
47982>>>>>        If (iLength <> 0) Begin
47984>>>>>            Move ("(" + String(iLength)) to sRetval
47985>>>>>            If (iDecimals <> 0) Begin
47987>>>>>                Move (sRetval + "," + String(iDecimals)) to sRetval
47988>>>>>            End
47988>>>>>>
47988>>>>>            Move (sRetval + ")") to sRetval
47989>>>>>        End
47989>>>>>>
47989>>>>>        Function_Return sRetval
47990>>>>>    End_Function
47991>>>>>
47991>>>>>    // Checks that the passed sDriverID is defined.
47991>>>>>    // Also checks if the driver has been loaded; else it gets loaded.
47991>>>>>    Function _SqlCheckCurrentDriver String sDriverID Returns Boolean
47993>>>>>        Boolean bOK
47993>>>>>        Integer iDriver
47993>>>>>
47993>>>>>        If (sDriverID = DATAFLEX_ID) Begin
47995>>>>>            Function_Return False
47996>>>>>        End
47996>>>>>>
47996>>>>>
47996>>>>>        Get IsDAWSQLDriver sDriverID to bOK
47997>>>>>
47997>>>>>        If (bOK = False) Begin
47999>>>>>            Error DFERR_PROGRAM "Driver needs to be one of MSSQLDRV, DB2_DRV, or ODBC_DRV"
48000>>>>>>
48000>>>>>            Function_Return False
48001>>>>>        End
48001>>>>>>
48001>>>>>
48001>>>>>        Get DriverIndex sDriverID to iDriver
48002>>>>>        If (iDriver = 0) Begin
48004>>>>>            Load_Driver sDriverID
48005>>>>>        End
48005>>>>>>
48005>>>>>
48005>>>>>        Function_Return True
48006>>>>>    End_Function
48007>>>>>
48007>>>>>    // Checks that the length parameter has been passed correctly.
48007>>>>>    // This is only of concern for certain SQL data types.
48007>>>>>    Function _SqlCheckLengthParamForDataType Integer iDataType Integer iLen Returns Boolean
48009>>>>>        Integer iLength
48009>>>>>        Boolean bOK bCheckTypeLength
48009>>>>>
48009>>>>>        If (num_arguments > 1) Begin
48011>>>>>            Move iLen to iLength
48012>>>>>        End
48012>>>>>>
48012>>>>>        Move (iDataType = SQL_DECIMAL   or iDataType = SQL_NUMERIC or iDataType = SQL_FLOAT   or iDataType = SQL_INTEGER or;              iDataType = SQL_VARBINARY or iDataType = SQL_BINARY  or iDataType = SQL_VARCHAR or iDataType = SQL_CHAR or;              iDataType = SQL_BIGINT    or iDataType = SQL_REAL) to bCheckTypeLength
48013>>>>>
48013>>>>>        If (bCheckTypeLength = True) Begin
48015>>>>>            Move (iLength > 0) to bOK
48016>>>>>        End
48016>>>>>>
48016>>>>>
48016>>>>>        Function_Return (bOK = True)
48017>>>>>    End_Function
48018>>>>>
48018>>>>>    Function _SqlProperTableName String sTableName Returns String
48020>>>>>        String sVal sSchema sDriverID
48020>>>>>        Integer iDbType
48020>>>>>
48020>>>>>        If (Trim(sTableName) = "") Begin
48022>>>>>            Function_Return ""
48023>>>>>        End
48023>>>>>>
48023>>>>>
48023>>>>>        Get psDriverID to sDriverID
48024>>>>>        Get piDbType   to iDbType
48025>>>>>        If (iDbType = EN_dbTypeOracle) Begin
48027>>>>>            Get psUserID to sSchema
48028>>>>>            // Not sure about this uppercasing but it seems like Oracle wants that?
48028>>>>>            Move (Uppercase(sSchema)) to sSchema
48029>>>>>            Move ('"' + sSchema + '"."' + sTableName + '"') to sTableName
48030>>>>>            Function_Return sTableName
48031>>>>>        End
48031>>>>>>
48031>>>>>        If (iDbType = EN_DbTypeMySQL) Begin
48033>>>>>            Get psDatabase to sVal
48034>>>>>            Move (sVal + "." + sTableName) to sTableName
48035>>>>>            Function_Return sTableName
48036>>>>>        End
48036>>>>>>
48036>>>>>        If (iDbType = EN_DbTypePostgre) Begin
48038>>>>>            Move ('"' + sTableName + '"') to sTableName
48039>>>>>            Function_Return sTableName
48040>>>>>        End
48040>>>>>>
48040>>>>>
48040>>>>>        Get psSchema to sSchema
48041>>>>>        If (sSchema = "") Begin
48043>>>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
48044>>>>>        End
48044>>>>>>
48044>>>>>
48044>>>>>        Move (Uppercase(sTableName)) to sVal
48045>>>>>        If (not(sVal contains (sSchema + "."))) Begin
48047>>>>>            If (iDbType = EN_dbTypeDB2) Begin
48049>>>>>                Move (Lowercase(sSchema) + "." + sTableName) to sTableName
48050>>>>>            End
48050>>>>>>
48050>>>>>            Else Begin
48051>>>>>                Move (sSchema + "." + sTableName) to sTableName
48052>>>>>            End
48052>>>>>>
48052>>>>>        End
48052>>>>>>
48052>>>>>
48052>>>>>        Function_Return sTableName
48053>>>>>    End_Function
48054>>>>>
48054>>>>>    // SQL column names can be case-sensitive. This function is used to check that
48054>>>>>    // the passed sFieldName has the correct spelling.
48054>>>>>    // Used with Embedded SQL statement calls.
48054>>>>>    // If the spelling or fieldname doesn't exist, the return value is "" (blank).
48054>>>>>    Function _SqlFindColumnName String sTableName String sColumnName Returns String
48056>>>>>        String sRetval sValue sDriverID
48056>>>>>        String[] sColumnNamesArray
48057>>>>>        Integer iCount iColumns
48057>>>>>
48057>>>>>        Move "" to sRetval
48058>>>>>        Get psDriverID to sDriverID
48059>>>>>        Get _SqlUtilEnumerateColumns sDriverID sTableName to sColumnNamesArray
48060>>>>>        Move (SizeOfArray(sColumnNamesArray)) to iColumns
48061>>>>>        Decrement iColumns
48062>>>>>
48062>>>>>        For iCount from 0 to iColumns
48068>>>>>>
48068>>>>>            Move sColumnNamesArray[iCount] to sValue
48069>>>>>            If (Uppercase(sColumnName) = Uppercase(sValue)) Begin
48071>>>>>                Move sValue to sRetval
48072>>>>>                Move iColumns to iCount // We're done.
48073>>>>>            End
48073>>>>>>
48073>>>>>        Loop
48074>>>>>>
48074>>>>>
48074>>>>>        Function_Return sRetval
48075>>>>>    End_Function
48076>>>>>
48076>>>>>    Function _SqlDatabasesArrayMSSQL Returns String[]
48078>>>>>        String[] sReturnArray
48079>>>>>        Handle hoSQLHandler
48079>>>>>        Integer iCount iSize iItem
48079>>>>>        String sServer
48079>>>>>        tSQLConnection SQLConnection
48079>>>>>        tSQLConnection SQLConnection
48079>>>>>
48079>>>>>        Get phoMSSQLHandler to hoSQLHandler
48080>>>>>        Send Delete_Data    of hoSQLHandler
48081>>>>>        Get pSQLConnection  of ghoSQLConnectionHandler to SQLConnection
48082>>>>>
48082>>>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
48083>>>>>        Get EnumerateDatabases of hoSQLHandler SQLConnection.sServer SQLConnection.sUserID SQLConnection.sPassword to iSize
48084>>>>>        Decrement iSize
48085>>>>>
48085>>>>>        For iCount from 0 to iSize
48091>>>>>>
48091>>>>>            Get String_Value of hoSQLHandler iCount to sServer
48092>>>>>            Move (Trim(sServer)) to sReturnArray[iItem]
48093>>>>>            Increment iItem
48094>>>>>        Loop
48095>>>>>>
48095>>>>>
48095>>>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
48096>>>>>
48096>>>>>        Function_Return sReturnArray
48097>>>>>    End_Function
48098>>>>>
48098>>>>>    Function _SqlTableArrayDAW Returns String[]
48100>>>>>        String[] sReturnArray
48101>>>>>        String sTable sTableType sSchema sDefSchema sComment sTableKeyWord sSysKeyWord sConnectionString
48101>>>>>        Handle hoSQLHandler
48101>>>>>        Integer iCount iSize iItem iPos
48101>>>>>        Boolean bOK
48101>>>>>        tSQLConnection SQLConnection
48101>>>>>        tSQLConnection SQLConnection
48101>>>>>
48101>>>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
48102>>>>>        If (SQLConnection.sConnectionString = "") Begin
48104>>>>>            Function_Return sReturnArray
48105>>>>>        End
48105>>>>>>
48105>>>>>
48105>>>>>        Move SQLConnection.sSchema      to sDefSchema
48106>>>>>        Move (Uppercase(sDefSchema))    to sDefSchema
48107>>>>>        Get _SqlFindKeyWord CI_SQLTable to sTableKeyWord
48108>>>>>        Get _SqlFindKeyWord CI_SQLSys   to sSysKeyWord
48109>>>>>
48109>>>>>        Get phoCLIHandler to hoSQLHandler
48110>>>>>        Set psDriverID    of hoSQLHandler to SQLConnection.sDriverID
48111>>>>>        Send Delete_Data  of hoSQLHandler
48112>>>>>
48112>>>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
48113>>>>>        Move SQLConnection.sConnectionString to sConnectionString
48114>>>>>        // 2020-03-14 This was not correct when testing a MS-SQL ODBC driver connection from CMOS.
48114>>>>>//        If (SQLConnection.sDriverID = ODBC_DRV_ID) Begin
48114>>>>>//            If (Uppercase(sConnectionString) contains CS_SQLIniDSNKeyword) Begin
48114>>>>>//                Move (Pos(";", sConnectionString)) to iPos
48114>>>>>//                If (iPos > 0) Begin
48114>>>>>//                    Move (Left(sConnectionString, (iPos - 1))) to sConnectionString
48114>>>>>//                    Move (Trim(sConnectionString)) to sConnectionString
48114>>>>>//                End
48114>>>>>//            End
48114>>>>>//        End
48114>>>>>
48114>>>>>        Get EnumerateTables of hoSQLHandler sConnectionString to iSize
48115>>>>>        Move False to Err
48116>>>>>        Move 0 to iItem
48117>>>>>
48117>>>>>        // Note that the enumeration starts from table no 1. (not zero)
48117>>>>>        For iCount from 1 to iSize
48123>>>>>>
48123>>>>>            Get TableName    of hoSQLHandler iCount to sTable
48124>>>>>            Get TableType    of hoSQLHandler iCount to sTableType
48125>>>>>            Get SchemaName   of hoSQLHandler iCount to sSchema
48126>>>>>            If (sSchema = "") Begin
48128>>>>>                Get _SqlFindKeyWord CI_SQLDBO to sSchema
48129>>>>>            End
48129>>>>>>
48129>>>>>            Get TableComment of hoSQLHandler iCount to sComment
48130>>>>>            Move (Trim(sTable)) to sTable
48131>>>>>            If (SQLConnection.sDriverID = DB2_DRV_ID) Begin
48133>>>>>                Move (sTable <> "" and Uppercase(sTableType) = sTableKeyWord and Uppercase(sSchema) = sDefSchema) to bOK
48134>>>>>            End
48134>>>>>>
48134>>>>>            Else Begin
48135>>>>>                Move (sTable <> "" and Uppercase(sTableType) = sTableKeyWord and Uppercase(sSchema) <> sSysKeyWord and Uppercase(sSchema) <> "SYSTOOLS") to bOK
48136>>>>>            End
48136>>>>>>
48136>>>>>            If (bOK = True) Begin
48138>>>>>                Move sTable to sReturnArray[iItem]
48139>>>>>                Increment iItem
48140>>>>>            End
48140>>>>>>
48140>>>>>        Loop
48141>>>>>>
48141>>>>>
48141>>>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
48142>>>>>
48142>>>>>        Function_Return sReturnArray
48143>>>>>    End_Function
48144>>>>>
48144>>>>>    Function _SqlProcedureArrayDAW String sStmt String sArgument Returns String[]
48146>>>>>        String[] sReturnArray
48147>>>>>        String sValue
48147>>>>>        Handle hoSQLHandler hoSQLConnect hStmt
48147>>>>>        Integer iRetval iCols iFetchResult
48147>>>>>        tSQLConnection SQLConnection
48147>>>>>        tSQLConnection SQLConnection
48147>>>>>
48147>>>>>        Get phoSQLManager to hoSQLHandler
48148>>>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
48149>>>>>        Get SqlConnect of hoSQLHandler SQLConnection.sDriverID SQLConnection.sConnectionString to hoSQLConnect
48150>>>>>
48150>>>>>        If (hoSQLConnect <> 0) Begin
48152>>>>>            Get SqlOpen of hoSQLConnect to hStmt
48153>>>>>            If (hStmt <> 0) Begin
48155>>>>>                Send SqlSetProcedurename of hStmt sStmt
48156>>>>>                If (sArgument <> "") Begin
48158>>>>>                    Send SqlSetArgument  of hStmt 1 sArgument
48159>>>>>                End
48159>>>>>>
48159>>>>>
48159>>>>>                Send SqlCall             of hStmt
48160>>>>>                Get SqlReturnValue       of hStmt to iRetval
48161>>>>>                If (iRetval = 0) Begin
48163>>>>>                    Repeat
48163>>>>>>
48163>>>>>                        Get SqlStmtAttribute of hStmt SqlSTMTATTRIB_COLUMNCOUNT to iCols
48164>>>>>                        If (iCols > 0) Begin
48166>>>>>                            Repeat
48166>>>>>>
48166>>>>>                                Get SqlFetch of hStmt to iFetchResult
48167>>>>>                                If (iFetchResult <> 0) Begin
48169>>>>>                                    Get SqlColumnValue of hStmt 1 to sValue
48170>>>>>                                    Move (Trim(sValue)) to sReturnArray[SizeOfArray(sReturnArray)]
48171>>>>>                                End
48171>>>>>>
48171>>>>>                            Until (iFetchResult = 0)
48173>>>>>                        End
48173>>>>>>
48173>>>>>                        Get SqlNextResultSet of hStmt to iRetval
48174>>>>>                    Until (iRetval = 0)
48176>>>>>                    Send SqlClose of hStmt
48177>>>>>                End
48177>>>>>>
48177>>>>>            End
48177>>>>>>
48177>>>>>            Send SqlDisconnect of hoSQLConnect
48178>>>>>        End
48178>>>>>>
48178>>>>>        Function_Return sReturnArray
48179>>>>>    End_Function
48180>>>>>
48180>>>>>    Function _SqlUtilUpdateIntFile Integer hTable Returns Boolean
48182>>>>>        String sOrgFormat sNewFormat sRootName sDatabaseName sPhysicalFileName sDriverID sDataPath
48182>>>>>        Boolean bOpened bOK
48182>>>>>
48182>>>>>        // For some reason this .int file update screws up of CodeMast & CodeType .int files
48182>>>>>        // which makes the program unable to run because they can't be opened.
48182>>>>>        // ToDo: This needs further investigation but for now we just skip CodeMast & CodeType .int files update...
48182>>>>>        // Also note that there is another helper function "UtilTableCreateCodeMastCodeTypeIntFiles" to create
48182>>>>>        // proper .int files for the two tables.
48182>>>>>        If (Uppercase(sDatabaseName) = "CODETYPE" or Uppercase(sDatabaseName) = "CODEMAST") Begin
48184>>>>>            Function_Return True
48185>>>>>        End
48185>>>>>>
48185>>>>>
48185>>>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
48188>>>>>        Get _TableNameOnly sRootName to sDatabaseName
48189>>>>>        Move CS_OEM_Txt  to sOrgFormat
48190>>>>>        Move CS_ANSI_Txt to sNewFormat
48191>>>>>        Get AutoConnectionIDLogin to bOK
48192>>>>>
48192>>>>>        // It seems this can be called to quickly; causing a 13001 error "Cannot open cache file for write"
48192>>>>>        Sleep 1
48193>>>>>
48193>>>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
48196>>>>>        If (bOpened = False) Begin
48198>>>>>            Open hTable
48200>>>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpened
48203>>>>>        End
48203>>>>>>
48203>>>>>        If (bOpened = False) Begin
48205>>>>>            Function_Return False
48206>>>>>        End
48206>>>>>>
48206>>>>>
48206>>>>>        Get psDriverID to sDriverID
48207>>>>>
48207>>>>>        Move False to Err
48208>>>>>        Get_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sOrgFormat
48211>>>>>        Move (Uppercase(sOrgFormat)) to sOrgFormat
48212>>>>>        // Lets swap the OEM/ANSI format, just to make a change in Structure_Start below (and back),
48212>>>>>        // to "touch" the table so the driver feels there has been a change and updates the .int file.
48212>>>>>        Move (If(sOrgFormat = CS_OEM_Txt, CS_ANSI_Txt, CS_OEM_Txt)) to sNewFormat
48213>>>>>
48213>>>>>        Move False to Err
48214>>>>>
48214>>>>>        If (hTable > 0) Begin
48216>>>>>            Structure_Start hTable
48217>>>>>                Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sNewFormat
48220>>>>>                Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sOrgFormat
48223>>>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
48225>>>>>        End
48225>>>>>>
48225>>>>>        Else Begin
48226>>>>>            Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sNewFormat
48229>>>>>            Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT of hTable to sOrgFormat
48232>>>>>        End
48232>>>>>>
48232>>>>>        Function_Return (Err = False)
48233>>>>>    End_Function
48234>>>>>
48234>>>>>    // Subfunction to the ApiTableUpdate function (et al)
48234>>>>>    Function _UtilTableCheckChangeFilelistNames tAPITableNameInfo APITableNameInfoFrom Boolean bIsSQLTableTo Returns Boolean
48236>>>>>        Handle hTable
48236>>>>>        String sConnectionID
48236>>>>>        Boolean bTableExists bSameTableNames bANSI bOK
48236>>>>>
48236>>>>>        Get _ApiTableFilelistNamesCompare True APITableNameInfoFrom to bSameTableNames
48237>>>>>        If (bSameTableNames = True) Begin
48239>>>>>            Function_Return True
48240>>>>>        End
48240>>>>>>
48240>>>>>
48240>>>>>        Move True to bOK
48241>>>>>        Move APITableNameInfoFrom.iTableNumber  to hTable
48242>>>>>        Set Private.phCurrentTable              to hTable
48243>>>>>        Set_Attribute DF_FILE_ROOT_NAME         of hTable to APITableNameInfoFrom.sRootName
48246>>>>>        Set_Attribute DF_FILE_LOGICAL_NAME      of hTable to APITableNameInfoFrom.sLogicalName
48249>>>>>        Set_Attribute DF_FILE_DISPLAY_NAME      of hTable to APITableNameInfoFrom.sDisplayName
48252>>>>>
48252>>>>>        If (APITableNameInfoFrom.bIsSQL = True) Begin
48254>>>>>            Get psConnectionID to sConnectionID
48255>>>>>            Get _UtilTableExists hTable to bTableExists
48256>>>>>            If (bTableExists = True) Begin
48258>>>>>                Get _SqlUtilUpdateIntFile hTable to bOK
48259>>>>>            End
48259>>>>>>
48259>>>>>            Else Begin
48260>>>>>                Get pbToANSI to bANSI
48261>>>>>                Get _SqlUtilCreateIntFile hTable APITableNameInfoFrom.sDriverID sConnectionID bANSI False to bOK
48262>>>>>            End
48262>>>>>>
48262>>>>>        End
48262>>>>>>
48262>>>>>
48262>>>>>        Function_Return bOK
48263>>>>>    End_Function
48264>>>>>
48264>>>>>    // The table must already exist in the filelist for this function to work.
48264>>>>>    // It creates a rudimentary .int file in the first Data folder of the psDataPath property.
48264>>>>>    Function _SqlUtilCreateIntFile Handle hTable String sDriverID String sConnectionID Boolean bAnsi Boolean bSysFile Returns Boolean
48266>>>>>        Boolean bOK bExists bUseConnectionID 
48266>>>>>        String sDataPath sRootName sLogicalName sPhysicalFileName sConnectionString sDatabaseName sSchemaName sANSI_OEM
48266>>>>>        String[] sIndexArray
48267>>>>>        Integer iCount iCh iSize
48267>>>>>
48267>>>>>        Move (Trim(sConnectionID) <> "") to bUseConnectionID
48268>>>>>        Get psConnectionString to sConnectionString
48269>>>>>
48269>>>>>        Move CS_ANSI_Txt to sANSI_OEM
48270>>>>>        If (bANSI = False) Begin
48272>>>>>            Move CS_OEM_Txt to sANSI_OEM
48273>>>>>        End
48273>>>>>>
48273>>>>>
48273>>>>>        Get psDataPathFirstPart to sDataPath
48274>>>>>        Get vFolderExists sDataPath to bOK
48275>>>>>        If (bOK = False) Begin
48277>>>>>            Error DFERR_PROGRAM "Function _SqlUtilCreateIntFile; psDataPath not found!"
48278>>>>>>
48278>>>>>            Function_Return False
48279>>>>>        End
48279>>>>>>
48279>>>>>        Get vFolderFormat sDataPath to sDataPath
48280>>>>>
48280>>>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
48283>>>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
48286>>>>>        Get _TableNameOnly sRootName to sDatabaseName
48287>>>>>        Move sLogicalName  to sPhysicalFileName
48288>>>>>        Move (sPhysicalFileName + ".int") to sPhysicalFileName
48289>>>>>
48289>>>>>        Get psSchema hTable to sSchemaName
48290>>>>>        If (sSchemaName = "") Begin
48292>>>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchemaName
48293>>>>>        End
48293>>>>>>
48293>>>>>
48293>>>>>        // If the .int file already exists; we rename it to "FileName" + ".bak"
48293>>>>>        Get vFilePathExists (sDataPath + sPhysicalFileName) to bExists
48294>>>>>        If (bExists = True) Begin
48296>>>>>            Get vRenameFile (sDataPath + sPhysicalFileName) (sDataPath + sPhysicalFileName + ".bak") to bOK
48297>>>>>        End
48297>>>>>>
48297>>>>>
48297>>>>>        Get _UtilDeleteCacheFile sRootName to bOK
48298>>>>>        Get _SqlUtilEnumerateIndexes sRootName sDriverID to sIndexArray
48299>>>>>
48299>>>>>        Get Seq_Open_Output_Channel (sDataPath + sPhysicalFileName) to iCh
48300>>>>>            Writeln channel iCh CS_DRIVER_NAME     " " sDriverID
48305>>>>>            If (bUseConnectionID = True) Begin
48307>>>>>                Writeln channel iCh CS_SERVER_NAME " " CS_DFCONNID "=" sConnectionID
48314>>>>>            End
48314>>>>>>
48314>>>>>            Else Begin
48315>>>>>                Writeln channel iCh CS_SERVER_NAME " " CS_SERVER "=" sConnectionString
48322>>>>>            End
48322>>>>>>
48322>>>>>            Writeln channel iCh CS_DATABASE_NAME          " " sDatabaseName
48327>>>>>            Writeln channel iCh CS_SCHEMA_NAME            " " (Lowercase(sSchemaName))
48332>>>>>            // There seems to be a new order how these are set from DF19.
48332>>>>>            If (bSysFile = True) Begin
48334>>>>>                Writeln channel iCh CS_RECNUM_TABLE       " " "NO"
48339>>>>>            End
48339>>>>>>
48339>>>>>            Writeln channel iCh CS_TABLE_CHARACTER_FORMAT " " sANSI_OEM
48344>>>>>            Writeln channel iCh CS_USE_DUMMY_ZERO_DATE    " " "YES" // ToDo: We maybe need to paramerize this setting?
48349>>>>>            If (bSysFile = True) Begin
48351>>>>>                Writeln channel iCh CS_SYSTEM_FILE        " " "YES"
48356>>>>>            End
48356>>>>>>
48356>>>>>
48356>>>>>            If (bSysFile = False) Begin
48358>>>>>                Move (SizeOfArray(sIndexArray)) to iSize
48359>>>>>                Move (SortArray(sIndexArray)) to sIndexArray
48360>>>>>                If (iSize > 0) Begin
48362>>>>>                    Writeln channel iCh (CS_PRIMARY_INDEX * String("0"))
48365>>>>>                    Writeln channel iCh // Just an empty line
48367>>>>>                End
48367>>>>>>
48367>>>>>                Decrement iSize
48368>>>>>                for iCount from 0 to iSize
48374>>>>>>
48374>>>>>                    Writeln channel iCh (CS_INDEX_NUMBER * String(iCount))
48377>>>>>                    Writeln channel iCh (CS_INDEX_NAME   * String(sIndexArray[iCount]))
48380>>>>>                    Writeln channel iCh
48382>>>>>                Loop
48383>>>>>>
48383>>>>>            End
48383>>>>>>
48383>>>>>        Send Seq_Close_Channel iCh
48384>>>>>
48384>>>>>        // Wait a sec for Windows to finish writing the file:
48384>>>>>        Sleep 1
48385>>>>>
48385>>>>>        Function_Return (bOK = True)
48386>>>>>    End_Function
48387>>>>>
48387>>>>>    Function _UtilDeleteCacheFile String sTableName Returns Boolean
48389>>>>>        String sDataPath sDriverID
48389>>>>>        Boolean bOK
48389>>>>>        Integer iPos
48389>>>>>
48389>>>>>        If (sTableName contains ".") Begin
48391>>>>>            Move (Pos(".", sTableName)) to iPos
48392>>>>>            Move (Mid(sTableName, 999, (iPos +1))) to sTableName
48393>>>>>        End
48393>>>>>>
48393>>>>>
48393>>>>>        Get psDriverID to sDriverID
48394>>>>>        Get psDataPathFirstPart to sDataPath
48395>>>>>        // First delete the cache file:
48395>>>>>        Get vDeleteFile (sDataPath + sTableName + ".cch") to bOK
48396>>>>>
48396>>>>>        Function_Return bOK
48397>>>>>    End_Function
48398>>>>>
48398>>>>>    // Checks that the passed hTable number both exists in Filelist.cfg and
48398>>>>>    // that the embedded .dat file exists on disk _or_ that the SQL table exists
48398>>>>>    // if it is an SQL table
48398>>>>>    Function _UtilTableExists Handle hTable Returns Boolean
48400>>>>>        Boolean bExists bIsSQLTable
48400>>>>>        String sDataPath sRootName
48400>>>>>
48400>>>>>        Get _UtilTableNumberIsInUse hTable to bExists
48401>>>>>        If (bExists = False) Begin
48403>>>>>            Function_Return False
48404>>>>>        End
48404>>>>>>
48404>>>>>
48404>>>>>        Move False to bIsSQLTable
48405>>>>>        If (hTable > 0) Begin
48407>>>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
48410>>>>>            Move (sRootName contains ":") to bIsSQLTable
48411>>>>>        End
48411>>>>>>
48411>>>>>        If (bIsSQLTable = True) Begin
48413>>>>>            Get _UtilTableIsSql hTable to bExists
48414>>>>>            Function_Return bExists
48415>>>>>        End
48415>>>>>>
48415>>>>>        Else Begin
48416>>>>>            Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
48417>>>>>            Get vFolderFormat sDataPath to sDataPath
48418>>>>>            Get vFilePathExists (sDataPath + sRootName + ".dat") to bExists
48419>>>>>        End
48419>>>>>>
48419>>>>>
48419>>>>>        Function_Return bExists
48420>>>>>    End_Function
48421>>>>>
48421>>>>>    // Pass a table handle
48421>>>>>    // Returns True if the table exists in filelist.cfg.
48421>>>>>    Function _UtilTableNumberIsInUse Handle hCheckTable Returns Boolean
48423>>>>>        Handle hTable
48423>>>>>        Boolean bFound
48423>>>>>
48423>>>>>        Move False to bFound
48424>>>>>        Move 0 to hTable
48425>>>>>        Repeat
48425>>>>>>
48425>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
48428>>>>>            If (hTable > 0) Begin
48430>>>>>                If (hTable = hCheckTable) Begin
48432>>>>>                    Move True to bFound
48433>>>>>                End
48433>>>>>>
48433>>>>>            End
48433>>>>>>
48433>>>>>            If (bFound = True) ;                Break
48436>>>>>        Until (hTable = 0)
48438>>>>>
48438>>>>>        Function_Return (bFound = True)
48439>>>>>    End_Function
48440>>>>>
48440>>>>>    // DataFlex Embedded Database Data Types:
48440>>>>>    // Helper function for _UtilEnumerateColumnTypes
48440>>>>>    Function _UtilEnumerateDataFlexTypes Returns tColumnType[]
48442>>>>>        tColumnType[] ColumnType
48442>>>>>        tColumnType[] ColumnType
48443>>>>>        Integer i
48443>>>>>
48443>>>>>        Move DF_ASCII           to ColumnType[i].iSQLType
48444>>>>>        Move "ASCII"            to ColumnType[i].sSQLType
48445>>>>>        Move DF_ASCII           to ColumnType[i].iDataFlexType
48446>>>>>        Move "ASCII"            to ColumnType[i].sDataFlexType
48447>>>>>        Move "254"              to ColumnType[i].sPrecision
48448>>>>>        Increment i
48449>>>>>
48449>>>>>        Move DF_BCD             to ColumnType[i].iSQLType
48450>>>>>        Move "Numeric"          to ColumnType[i].sSQLType
48451>>>>>        Move DF_BCD             to ColumnType[i].iDataFlexType
48452>>>>>        Move "Numeric"          to ColumnType[i].sDataFlexType
48453>>>>>        Move "14.8"             to ColumnType[i].sPrecision
48454>>>>>        Increment i
48455>>>>>
48455>>>>>        Move DF_DATE            to ColumnType[i].iSQLType
48456>>>>>        Move "Date"             to ColumnType[i].sSQLType
48457>>>>>        Move DF_DATE            to ColumnType[i].iDataFlexType
48458>>>>>        Move "Date"             to ColumnType[i].sDataFlexType
48459>>>>>        Move "6.0"              to ColumnType[i].sPrecision
48460>>>>>        Move True               to ColumnType[i].bCanEditSize
48461>>>>>        Increment i
48462>>>>>
48462>>>>>        Move DF_TEXT            to ColumnType[i].iSQLType
48463>>>>>        Move "Text"             to ColumnType[i].sSQLType
48464>>>>>        Move DF_TEXT            to ColumnType[i].iDataFlexType
48465>>>>>        Move "Text"             to ColumnType[i].sDataFlexType
48466>>>>>        Move "16384"            to ColumnType[i].sPrecision
48467>>>>>        Increment i
48468>>>>>
48468>>>>>        Move DF_BINARY          to ColumnType[i].iSQLType
48469>>>>>        Move "Binary"           to ColumnType[i].sSQLType
48470>>>>>        Move DF_BINARY          to ColumnType[i].iDataFlexType
48471>>>>>        Move "Binary"           to ColumnType[i].sDataFlexType
48472>>>>>        Move "16384"            to ColumnType[i].sPrecision
48473>>>>>        Increment i
48474>>>>>
48474>>>>>        Move DF_DATETIME        to ColumnType[i].iSQLType
48475>>>>>        Move "DateTime"         to ColumnType[i].sSQLType
48476>>>>>        Move DF_DATETIME        to ColumnType[i].iDataFlexType
48477>>>>>        Move "DateTime"         to ColumnType[i].sDataFlexType
48478>>>>>        Move "23"               to ColumnType[i].sPrecision
48479>>>>>        Move True               to ColumnType[i].bCanEditSize
48480>>>>>        Increment i
48481>>>>>
48481>>>>>        Move DF_OVERLAP         to ColumnType[i].iSQLType
48482>>>>>        Move "Overlap"          to ColumnType[i].sSQLType
48483>>>>>        Move DF_OVERLAP         to ColumnType[i].iDataFlexType
48484>>>>>        Move "Overlap"          to ColumnType[i].sDataFlexType
48485>>>>>        Move "0.0"              to ColumnType[i].sPrecision
48486>>>>>
48486>>>>>        Function_Return ColumnType
48487>>>>>    End_Function
48488>>>>>
48488>>>>>    Function _UtilEnumerateDB2Types Returns tColumnType[]
48490>>>>>        tColumnType[] aColumnType
48490>>>>>        tColumnType[] aColumnType
48491>>>>>        Integer i
48491>>>>>
Including file: DB2_DRV_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\DB2_DRV_DriverDef.inc)
48491>>>>>>// Generated By The Database Update Framework
48491>>>>>>// Driver XML File: C:\Program Files (x86)\DataFlex 19.1\bin\MSSQLDRV_DriverDef.xml
48491>>>>>>// Driver COLUMN DATA TYPES
48491>>>>>>//
48491>>>>>>// Created: 2019-07-18 18:57:13.935
48491>>>>>>
48491>>>>>>            Move "bigint"                                to aColumnType[i].sSQLType
48492>>>>>>            Move -5                                      to aColumnType[i].iSQLType
48493>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48494>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48495>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
48496>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48497>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
48498>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
48499>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
48500>>>>>>            Move 14                                      to aColumnType[i].sPrecision
48501>>>>>>            Increment i
48502>>>>>>
48502>>>>>>            Move "binary"                                to aColumnType[i].sSQLType
48503>>>>>>            Move -2                                      to aColumnType[i].iSQLType
48504>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48505>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48506>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48507>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48508>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
48509>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48510>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48511>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
48512>>>>>>            Increment i
48513>>>>>>
48513>>>>>>            Move "bit"                                   to aColumnType[i].sSQLType
48514>>>>>>            Move -7                                      to aColumnType[i].iSQLType
48515>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
48516>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48517>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
48518>>>>>>            Move 0                                       to aColumnType[i].iMinSize
48519>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
48520>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48521>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48522>>>>>>            Move 1                                       to aColumnType[i].sPrecision
48523>>>>>>            Increment i
48524>>>>>>
48524>>>>>>            Move "char"                                  to aColumnType[i].sSQLType
48525>>>>>>            Move 1                                       to aColumnType[i].iSQLType
48526>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48527>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48528>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48529>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48530>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
48531>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48532>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48533>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
48534>>>>>>            Increment i
48535>>>>>>
48535>>>>>>            Move "date"                                  to aColumnType[i].sSQLType
48536>>>>>>            Move 91                                      to aColumnType[i].iSQLType
48537>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
48538>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48539>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
48540>>>>>>            Move 0                                       to aColumnType[i].iMinSize
48541>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
48542>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48543>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48544>>>>>>            Move 1                                       to aColumnType[i].sPrecision
48545>>>>>>            Increment i
48546>>>>>>
48546>>>>>>            Move "datetime"                              to aColumnType[i].sSQLType
48547>>>>>>            Move 93                                      to aColumnType[i].iSQLType
48548>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
48549>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48550>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48551>>>>>>            Move -1                                      to aColumnType[i].iMinSize
48552>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
48553>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48554>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48555>>>>>>            Move 23                                      to aColumnType[i].sPrecision
48556>>>>>>            Increment i
48557>>>>>>
48557>>>>>>            Move "datetime2"                             to aColumnType[i].sSQLType
48558>>>>>>            Move -200                                    to aColumnType[i].iSQLType
48559>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48560>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48561>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
48562>>>>>>            Move 23                                      to aColumnType[i].iMinSize
48563>>>>>>            Move 23                                      to aColumnType[i].nMaxSize
48564>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48565>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48566>>>>>>            Move 23                                      to aColumnType[i].sPrecision
48567>>>>>>            Increment i
48568>>>>>>
48568>>>>>>            Move "datetimeoffset"                        to aColumnType[i].sSQLType
48569>>>>>>            Move -155                                    to aColumnType[i].iSQLType
48570>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48571>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48572>>>>>>            Move 34                                      to aColumnType[i].iDefaultSize
48573>>>>>>            Move 34                                      to aColumnType[i].iMinSize
48574>>>>>>            Move 34                                      to aColumnType[i].nMaxSize
48575>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48576>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48577>>>>>>            Move 34                                      to aColumnType[i].sPrecision
48578>>>>>>            Increment i
48579>>>>>>
48579>>>>>>            Move "decimal"                               to aColumnType[i].sSQLType
48580>>>>>>            Move 3                                       to aColumnType[i].iSQLType
48581>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48582>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48583>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48584>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48585>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
48586>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
48587>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
48588>>>>>>            Move 14                                      to aColumnType[i].sPrecision
48589>>>>>>            Increment i
48590>>>>>>
48590>>>>>>            Move "float"                                 to aColumnType[i].sSQLType
48591>>>>>>            Move 6                                       to aColumnType[i].iSQLType
48592>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48593>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48594>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
48595>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48596>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
48597>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
48598>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
48599>>>>>>            Move 14                                      to aColumnType[i].sPrecision
48600>>>>>>            Increment i
48601>>>>>>
48601>>>>>>            Move "image"                                 to aColumnType[i].sSQLType
48602>>>>>>            Move -4                                      to aColumnType[i].iSQLType
48603>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48604>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48605>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
48606>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48607>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
48608>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48609>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48610>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
48611>>>>>>            Increment i
48612>>>>>>
48612>>>>>>            Move "int"                                   to aColumnType[i].sSQLType
48613>>>>>>            Move 4                                       to aColumnType[i].iSQLType
48614>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48615>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48616>>>>>>            Move 10                                      to aColumnType[i].iDefaultSize
48617>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48618>>>>>>            Move 10                                      to aColumnType[i].nMaxSize
48619>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
48620>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
48621>>>>>>            Move 10                                      to aColumnType[i].sPrecision
48622>>>>>>            Increment i
48623>>>>>>
48623>>>>>>            Move "money"                                 to aColumnType[i].sSQLType
48624>>>>>>            Move -204                                    to aColumnType[i].iSQLType
48625>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
48626>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48627>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
48628>>>>>>            Move 0                                       to aColumnType[i].iMinSize
48629>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
48630>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48631>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48632>>>>>>            Move 1                                       to aColumnType[i].sPrecision
48633>>>>>>            Increment i
48634>>>>>>
48634>>>>>>            Move "nchar"                                 to aColumnType[i].sSQLType
48635>>>>>>            Move -8                                      to aColumnType[i].iSQLType
48636>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48637>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48638>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48639>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48640>>>>>>            Move 4000                                    to aColumnType[i].nMaxSize
48641>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48642>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48643>>>>>>            Move 4000                                    to aColumnType[i].sPrecision
48644>>>>>>            Increment i
48645>>>>>>
48645>>>>>>            Move "ntext"                                 to aColumnType[i].sSQLType
48646>>>>>>            Move -10                                     to aColumnType[i].iSQLType
48647>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48648>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48649>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
48650>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48651>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
48652>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48653>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48654>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
48655>>>>>>            Increment i
48656>>>>>>
48656>>>>>>            Move "numeric"                               to aColumnType[i].sSQLType
48657>>>>>>            Move 2                                       to aColumnType[i].iSQLType
48658>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48659>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48660>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48661>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48662>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
48663>>>>>>            Move "DF_DATE"                               to aColumnType[i].sDataFlexType
48664>>>>>>            Move DF_DATE                                 to aColumnType[i].iDataFlexType
48665>>>>>>            Move 6                                       to aColumnType[i].sPrecision
48666>>>>>>            Increment i
48667>>>>>>
48667>>>>>>            Move "nvarchar"                              to aColumnType[i].sSQLType
48668>>>>>>            Move -9                                      to aColumnType[i].iSQLType
48669>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48670>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48671>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48672>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48673>>>>>>            Move 4000                                    to aColumnType[i].nMaxSize
48674>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48675>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48676>>>>>>            Move 4000                                    to aColumnType[i].sPrecision
48677>>>>>>            Increment i
48678>>>>>>
48678>>>>>>            Move "nvarchar(max)"                         to aColumnType[i].sSQLType
48679>>>>>>            Move -202                                    to aColumnType[i].iSQLType
48680>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48681>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48682>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
48683>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48684>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
48685>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48686>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48687>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
48688>>>>>>            Increment i
48689>>>>>>
48689>>>>>>            Move "real"                                  to aColumnType[i].sSQLType
48690>>>>>>            Move 7                                       to aColumnType[i].iSQLType
48691>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48692>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48693>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
48694>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48695>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
48696>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
48697>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
48698>>>>>>            Move 14                                      to aColumnType[i].sPrecision
48699>>>>>>            Increment i
48700>>>>>>
48700>>>>>>            Move "smalldatetime"                         to aColumnType[i].sSQLType
48701>>>>>>            Move -206                                    to aColumnType[i].iSQLType
48702>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
48703>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48704>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
48705>>>>>>            Move 0                                       to aColumnType[i].iMinSize
48706>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
48707>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48708>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48709>>>>>>            Move 1                                       to aColumnType[i].sPrecision
48710>>>>>>            Increment i
48711>>>>>>
48711>>>>>>            Move "smallint"                              to aColumnType[i].sSQLType
48712>>>>>>            Move 5                                       to aColumnType[i].iSQLType
48713>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48714>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48715>>>>>>            Move 5                                       to aColumnType[i].iDefaultSize
48716>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48717>>>>>>            Move 5                                       to aColumnType[i].nMaxSize
48718>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
48719>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
48720>>>>>>            Move 5                                       to aColumnType[i].sPrecision
48721>>>>>>            Increment i
48722>>>>>>
48722>>>>>>            Move "smallmoney"                            to aColumnType[i].sSQLType
48723>>>>>>            Move -205                                    to aColumnType[i].iSQLType
48724>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
48725>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48726>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
48727>>>>>>            Move 0                                       to aColumnType[i].iMinSize
48728>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
48729>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48730>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48731>>>>>>            Move 1                                       to aColumnType[i].sPrecision
48732>>>>>>            Increment i
48733>>>>>>
48733>>>>>>            Move "text"                                  to aColumnType[i].sSQLType
48734>>>>>>            Move -1                                      to aColumnType[i].iSQLType
48735>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48736>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48737>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
48738>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48739>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
48740>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48741>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48742>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
48743>>>>>>            Increment i
48744>>>>>>
48744>>>>>>            Move "time"                                  to aColumnType[i].sSQLType
48745>>>>>>            Move -154                                    to aColumnType[i].iSQLType
48746>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48747>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48748>>>>>>            Move 10                                      to aColumnType[i].iDefaultSize
48749>>>>>>            Move 10                                      to aColumnType[i].iMinSize
48750>>>>>>            Move 19                                      to aColumnType[i].nMaxSize
48751>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48752>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48753>>>>>>            Move 19                                      to aColumnType[i].sPrecision
48754>>>>>>            Increment i
48755>>>>>>
48755>>>>>>            Move "tinyint"                               to aColumnType[i].sSQLType
48756>>>>>>            Move -6                                      to aColumnType[i].iSQLType
48757>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48758>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48759>>>>>>            Move 3                                       to aColumnType[i].iDefaultSize
48760>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48761>>>>>>            Move 3                                       to aColumnType[i].nMaxSize
48762>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48763>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48764>>>>>>            Move 3                                       to aColumnType[i].sPrecision
48765>>>>>>            Increment i
48766>>>>>>
48766>>>>>>            Move "uniqueidentifier"                      to aColumnType[i].sSQLType
48767>>>>>>            Move -11                                     to aColumnType[i].iSQLType
48768>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
48769>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48770>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
48771>>>>>>            Move 0                                       to aColumnType[i].iMinSize
48772>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
48773>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48774>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48775>>>>>>            Move 1                                       to aColumnType[i].sPrecision
48776>>>>>>            Increment i
48777>>>>>>
48777>>>>>>            Move "varbinary"                             to aColumnType[i].sSQLType
48778>>>>>>            Move -3                                      to aColumnType[i].iSQLType
48779>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48780>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48781>>>>>>            Move 8000                                    to aColumnType[i].iDefaultSize
48782>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48783>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
48784>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48785>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48786>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
48787>>>>>>            Increment i
48788>>>>>>
48788>>>>>>            Move "varbinary(max)"                        to aColumnType[i].sSQLType
48789>>>>>>            Move -203                                    to aColumnType[i].iSQLType
48790>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48791>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48792>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
48793>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48794>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
48795>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48796>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48797>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
48798>>>>>>            Increment i
48799>>>>>>
48799>>>>>>            Move "varchar"                               to aColumnType[i].sSQLType
48800>>>>>>            Move 12                                      to aColumnType[i].iSQLType
48801>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48802>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48803>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48804>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48805>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
48806>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48807>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48808>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
48809>>>>>>            Increment i
48810>>>>>>
48810>>>>>>            Move "varchar(max)"                          to aColumnType[i].sSQLType
48811>>>>>>            Move -201                                    to aColumnType[i].iSQLType
48812>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48813>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48814>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
48815>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48816>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
48817>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48818>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48819>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
48820>>>>>>            Increment i
48821>>>>>>
48821>>>>>>            Move "xml"                                   to aColumnType[i].sSQLType
48822>>>>>>            Move -152                                    to aColumnType[i].iSQLType
48823>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48824>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48825>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
48826>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48827>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
48828>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48829>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48830>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
48831>>>>>>            Increment i
48832>>>>>>
48832>>>>>>
48832>>>>>//        Move SQL_DBCLOB         to ColumnType[i].iSQLType
48832>>>>>//        Move "DBCLOB"           to ColumnType[i].sSQLType
48832>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
48832>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
48832>>>>>//        Move "16384"            to ColumnType[i].sPrecision
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_BIGINT         to ColumnType[i].iSQLType
48832>>>>>//        Move "BIGINT"           to ColumnType[i].sSQLType
48832>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
48832>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
48832>>>>>//        Move "14.0"             to ColumnType[i].sPrecision
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_BLOB           to ColumnType[i].iSQLType
48832>>>>>//        Move "BLOB"             to ColumnType[i].sSQLType
48832>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
48832>>>>>//        Move "BINARY"           to ColumnType[i].sDataFlexType
48832>>>>>//        Move "16384"            to ColumnType[i].sPrecision
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_CHAR           to ColumnType[i].iSQLType
48832>>>>>//        Move "CHAR"             to ColumnType[i].sSQLType
48832>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
48832>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
48832>>>>>//        Move "254"              to ColumnType[i].sPrecision
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        // ToDo: We need to change the sType when using this!
48832>>>>>//        Move SQL_CHARBIT            to ColumnType[i].iSQLType
48832>>>>>//        Move "CHAR FOR BIT DATA"    to ColumnType[i].sSQLType
48832>>>>>//        Move DF_BINARY              to ColumnType[i].iDataFlexType
48832>>>>>//        Move "Binary"               to ColumnType[i].sDataFlexType
48832>>>>>//        Move "254"                  to ColumnType[i].sPrecision
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_DATE           to ColumnType[i].iSQLType
48832>>>>>//        Move "DATE"             to ColumnType[i].sSQLType
48832>>>>>//        Move DF_DATE            to ColumnType[i].iDataFlexType
48832>>>>>//        Move "Date"             to ColumnType[i].sDataFlexType
48832>>>>>//        Move "6.0"              to ColumnType[i].sPrecision
48832>>>>>//        Move True               to ColumnType[i].bCanEditSize
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_CLOB           to ColumnType[i].iSQLType
48832>>>>>//        Move "CLOB"             to ColumnType[i].sSQLType
48832>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
48832>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
48832>>>>>//        Move "16384"            to ColumnType[i].sPrecision
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_DECIMAL        to ColumnType[i].iSQLType
48832>>>>>//        Move "DECIMAL"          to ColumnType[i].sSQLType
48832>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
48832>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
48832>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_DOUBLE         to ColumnType[i].iSQLType
48832>>>>>//        Move "DOUBLE"           to ColumnType[i].sSQLType
48832>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
48832>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
48832>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_FLOAT          to ColumnType[i].iSQLType
48832>>>>>//        Move "FLOAT"            to ColumnType[i].sSQLType
48832>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
48832>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
48832>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_GRAPHIC        to ColumnType[i].iSQLType
48832>>>>>//        Move "GRAPHIC"          to ColumnType[i].sSQLType
48832>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
48832>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
48832>>>>>//        Move "255"              to ColumnType[i].sPrecision
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_INTEGER        to ColumnType[i].iSQLType
48832>>>>>//        Move "INTEGER"          to ColumnType[i].sSQLType
48832>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
48832>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
48832>>>>>//        Move "9.0"              to ColumnType[i].sPrecision
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_LONGVARCHAR    to ColumnType[i].iSQLType
48832>>>>>//        Move "LONG VARCHAR"     to ColumnType[i].sSQLType
48832>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
48832>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
48832>>>>>//        Move "32000"            to ColumnType[i].sPrecision
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_LONGVARCHARBIT to ColumnType[i].iSQLType
48832>>>>>//        Move "LONG VARCHAR BIT" to ColumnType[i].sSQLType
48832>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
48832>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
48832>>>>>//        Move "32000"            to ColumnType[i].sPrecision
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_LONGVARGRAPHIC to ColumnType[i].iSQLType
48832>>>>>//        Move "LONG VARGRAPHIC"  to ColumnType[i].sSQLType
48832>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
48832>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
48832>>>>>//        Move "32000"            to ColumnType[i].sPrecision
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_NUMERIC        to ColumnType[i].iSQLType
48832>>>>>//        Move "NUMERIC"          to ColumnType[i].sSQLType
48832>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
48832>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
48832>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_REAL           to ColumnType[i].iSQLType
48832>>>>>//        Move "REAL"             to ColumnType[i].sSQLType
48832>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
48832>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
48832>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_SMALLINT       to ColumnType[i].iSQLType
48832>>>>>//        Move "SMALLINT"         to ColumnType[i].sSQLType
48832>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
48832>>>>>//        Move "NUMERIC"          to ColumnType[i].sDataFlexType
48832>>>>>//        Move "5.0"              to ColumnType[i].sPrecision
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_TIME           to ColumnType[i].iSQLType
48832>>>>>//        Move "TIME"             to ColumnType[i].sSQLType
48832>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
48832>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
48832>>>>>//        Move "19.0"             to ColumnType[i].sPrecision
48832>>>>>//        Move True               to ColumnType[i].bCanEditSize
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_TIMESTAMP      to ColumnType[i].iSQLType
48832>>>>>//        Move "TIMESTAMP"        to ColumnType[i].sSQLType
48832>>>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
48832>>>>>//        Move "DATETIME"         to ColumnType[i].sDataFlexType
48832>>>>>//        Move "23.6"             to ColumnType[i].sPrecision
48832>>>>>//        Move True               to ColumnType[i].bCanEditSize
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_VARCHAR        to ColumnType[i].iSQLType
48832>>>>>//        Move "VARCHAR"          to ColumnType[i].sSQLType
48832>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
48832>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
48832>>>>>//        Move "16384"            to ColumnType[i].sPrecision
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        // ToDo: We need to change the sType when using this!
48832>>>>>//        Move SQL_VARCHARBIT         to ColumnType[i].iSQLType
48832>>>>>//        Move "VARCHAR FOR BIT DATA" to ColumnType[i].sSQLType
48832>>>>>//        Move DF_TEXT                to ColumnType[i].iDataFlexType
48832>>>>>//        Move "TEXT"                 to ColumnType[i].sDataFlexType
48832>>>>>//        Move "16384"                to ColumnType[i].sPrecision
48832>>>>>//        Increment i
48832>>>>>//
48832>>>>>//        Move SQL_VARGRAPHIC     to ColumnType[i].iSQLType
48832>>>>>//        Move "VARGRAPHIC"       to ColumnType[i].sSQLType
48832>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
48832>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
48832>>>>>//        Move "16384"            to ColumnType[i].sPrecision
48832>>>>>//
48832>>>>>//        Move SQL_XML            to ColumnType[i].iSQLType
48832>>>>>//        Move "XML"              to ColumnType[i].sSQLType
48832>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
48832>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
48832>>>>>//        Move "16384"            to ColumnType[i].sPrecision
48832>>>>>
48832>>>>>        Function_Return aColumnType
48833>>>>>    End_Function
48834>>>>>
48834>>>>>    // Microsoft SQL Server Database Data Types:
48834>>>>>    // Helper function for _UtilEnumerateColumnTypes
48834>>>>>    Function _UtilEnumerateMSSQLTypes String sDriverID Returns tColumnType[]
48836>>>>>        tColumnType[] aColumnType
48836>>>>>        tColumnType[] aColumnType
48837>>>>>        Integer i
48837>>>>>
48837>>>>>        If (sDriverID = MSSQLDRV_ID) Begin
Including file: MSSQLDRV_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\MSSQLDRV_DriverDef.inc)
48839>>>>>>// Generated By The Database Update Framework
48839>>>>>>// Driver XML File: C:\Program Files\DataFlex 20.0\Lib\MSSQLDRV_DriverDef.xml
48839>>>>>>// Driver COLUMN DATA TYPES
48839>>>>>>//
48839>>>>>>// Created: 2019-11-15 21:57:51.001
48839>>>>>>
48839>>>>>>            Move "bigint"                                to aColumnType[i].sSQLType
48840>>>>>>            Move -5                                      to aColumnType[i].iSQLType
48841>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48842>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48843>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
48844>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48845>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
48846>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
48847>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
48848>>>>>>            Move 14                                      to aColumnType[i].sPrecision
48849>>>>>>            Increment i
48850>>>>>>
48850>>>>>>            Move "binary"                                to aColumnType[i].sSQLType
48851>>>>>>            Move -2                                      to aColumnType[i].iSQLType
48852>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48853>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48854>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48855>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48856>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
48857>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
48858>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
48859>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
48860>>>>>>            Increment i
48861>>>>>>
48861>>>>>>            Move "bit"                                   to aColumnType[i].sSQLType
48862>>>>>>            Move -7                                      to aColumnType[i].iSQLType
48863>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
48864>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48865>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
48866>>>>>>            Move 0                                       to aColumnType[i].iMinSize
48867>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
48868>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48869>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48870>>>>>>            Move 1                                       to aColumnType[i].sPrecision
48871>>>>>>            Increment i
48872>>>>>>
48872>>>>>>            Move "char"                                  to aColumnType[i].sSQLType
48873>>>>>>            Move 1                                       to aColumnType[i].iSQLType
48874>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48875>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48876>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48877>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48878>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
48879>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48880>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48881>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
48882>>>>>>            Increment i
48883>>>>>>
48883>>>>>>            Move "date"                                  to aColumnType[i].sSQLType
48884>>>>>>            Move 91                                      to aColumnType[i].iSQLType
48885>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
48886>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48887>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
48888>>>>>>            Move 0                                       to aColumnType[i].iMinSize
48889>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
48890>>>>>>            Move "DF_DATE"                               to aColumnType[i].sDataFlexType
48891>>>>>>            Move DF_DATE                                 to aColumnType[i].iDataFlexType
48892>>>>>>            Move 6                                       to aColumnType[i].sPrecision
48893>>>>>>            Increment i
48894>>>>>>
48894>>>>>>            Move "datetime"                              to aColumnType[i].sSQLType
48895>>>>>>            Move 93                                      to aColumnType[i].iSQLType
48896>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
48897>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48898>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48899>>>>>>            Move -1                                      to aColumnType[i].iMinSize
48900>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
48901>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
48902>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
48903>>>>>>            Move 23                                      to aColumnType[i].sPrecision
48904>>>>>>            Increment i
48905>>>>>>
48905>>>>>>            Move "datetime2"                             to aColumnType[i].sSQLType
48906>>>>>>            Move -200                                    to aColumnType[i].iSQLType
48907>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48908>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48909>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
48910>>>>>>            Move 23                                      to aColumnType[i].iMinSize
48911>>>>>>            Move 23                                      to aColumnType[i].nMaxSize
48912>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
48913>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
48914>>>>>>            Move 23                                      to aColumnType[i].sPrecision
48915>>>>>>            Increment i
48916>>>>>>
48916>>>>>>            Move "datetimeoffset"                        to aColumnType[i].sSQLType
48917>>>>>>            Move -155                                    to aColumnType[i].iSQLType
48918>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48919>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48920>>>>>>            Move 34                                      to aColumnType[i].iDefaultSize
48921>>>>>>            Move 34                                      to aColumnType[i].iMinSize
48922>>>>>>            Move 34                                      to aColumnType[i].nMaxSize
48923>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
48924>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
48925>>>>>>            Move 34                                      to aColumnType[i].sPrecision
48926>>>>>>            Increment i
48927>>>>>>
48927>>>>>>            Move "decimal"                               to aColumnType[i].sSQLType
48928>>>>>>            Move 3                                       to aColumnType[i].iSQLType
48929>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48930>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48931>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48932>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48933>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
48934>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
48935>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
48936>>>>>>            Move 14                                      to aColumnType[i].sPrecision
48937>>>>>>            Increment i
48938>>>>>>
48938>>>>>>            Move "float"                                 to aColumnType[i].sSQLType
48939>>>>>>            Move 6                                       to aColumnType[i].iSQLType
48940>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48941>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48942>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
48943>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48944>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
48945>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
48946>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
48947>>>>>>            Move 14                                      to aColumnType[i].sPrecision
48948>>>>>>            Increment i
48949>>>>>>
48949>>>>>>            Move "image"                                 to aColumnType[i].sSQLType
48950>>>>>>            Move -4                                      to aColumnType[i].iSQLType
48951>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48952>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48953>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
48954>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48955>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
48956>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
48957>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
48958>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
48959>>>>>>            Increment i
48960>>>>>>
48960>>>>>>            Move "int"                                   to aColumnType[i].sSQLType
48961>>>>>>            Move 4                                       to aColumnType[i].iSQLType
48962>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48963>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48964>>>>>>            Move 10                                      to aColumnType[i].iDefaultSize
48965>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48966>>>>>>            Move 10                                      to aColumnType[i].nMaxSize
48967>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
48968>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
48969>>>>>>            Move 10                                      to aColumnType[i].sPrecision
48970>>>>>>            Increment i
48971>>>>>>
48971>>>>>>            Move "money"                                 to aColumnType[i].sSQLType
48972>>>>>>            Move -204                                    to aColumnType[i].iSQLType
48973>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
48974>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48975>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
48976>>>>>>            Move 0                                       to aColumnType[i].iMinSize
48977>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
48978>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
48979>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
48980>>>>>>            Move 1                                       to aColumnType[i].sPrecision
48981>>>>>>            Increment i
48982>>>>>>
48982>>>>>>            Move "nchar"                                 to aColumnType[i].sSQLType
48983>>>>>>            Move -8                                      to aColumnType[i].iSQLType
48984>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48985>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48986>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
48987>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48988>>>>>>            Move 4000                                    to aColumnType[i].nMaxSize
48989>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
48990>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
48991>>>>>>            Move 4000                                    to aColumnType[i].sPrecision
48992>>>>>>            Increment i
48993>>>>>>
48993>>>>>>            Move "ntext"                                 to aColumnType[i].sSQLType
48994>>>>>>            Move -10                                     to aColumnType[i].iSQLType
48995>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
48996>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
48997>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
48998>>>>>>            Move 1                                       to aColumnType[i].iMinSize
48999>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49000>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49001>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49002>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49003>>>>>>            Increment i
49004>>>>>>
49004>>>>>>            Move "numeric"                               to aColumnType[i].sSQLType
49005>>>>>>            Move 2                                       to aColumnType[i].iSQLType
49006>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49007>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49008>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49009>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49010>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49011>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49012>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49013>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49014>>>>>>            Increment i
49015>>>>>>
49015>>>>>>            Move "nvarchar"                              to aColumnType[i].sSQLType
49016>>>>>>            Move -9                                      to aColumnType[i].iSQLType
49017>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49018>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49019>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49020>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49021>>>>>>            Move 4000                                    to aColumnType[i].nMaxSize
49022>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49023>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49024>>>>>>            Move 4000                                    to aColumnType[i].sPrecision
49025>>>>>>            Increment i
49026>>>>>>
49026>>>>>>            Move "nvarchar(max)"                         to aColumnType[i].sSQLType
49027>>>>>>            Move -202                                    to aColumnType[i].iSQLType
49028>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49029>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49030>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49031>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49032>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49033>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49034>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49035>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49036>>>>>>            Increment i
49037>>>>>>
49037>>>>>>            Move "real"                                  to aColumnType[i].sSQLType
49038>>>>>>            Move 7                                       to aColumnType[i].iSQLType
49039>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49040>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49041>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49042>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49043>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49044>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49045>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49046>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49047>>>>>>            Increment i
49048>>>>>>
49048>>>>>>            Move "smalldatetime"                         to aColumnType[i].sSQLType
49049>>>>>>            Move -206                                    to aColumnType[i].iSQLType
49050>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49051>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49052>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
49053>>>>>>            Move 0                                       to aColumnType[i].iMinSize
49054>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
49055>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49056>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49057>>>>>>            Move 1                                       to aColumnType[i].sPrecision
49058>>>>>>            Increment i
49059>>>>>>
49059>>>>>>            Move "smallint"                              to aColumnType[i].sSQLType
49060>>>>>>            Move 5                                       to aColumnType[i].iSQLType
49061>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49062>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49063>>>>>>            Move 5                                       to aColumnType[i].iDefaultSize
49064>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49065>>>>>>            Move 5                                       to aColumnType[i].nMaxSize
49066>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49067>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49068>>>>>>            Move 5                                       to aColumnType[i].sPrecision
49069>>>>>>            Increment i
49070>>>>>>
49070>>>>>>            Move "smallmoney"                            to aColumnType[i].sSQLType
49071>>>>>>            Move -205                                    to aColumnType[i].iSQLType
49072>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49073>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49074>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
49075>>>>>>            Move 0                                       to aColumnType[i].iMinSize
49076>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
49077>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49078>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49079>>>>>>            Move 1                                       to aColumnType[i].sPrecision
49080>>>>>>            Increment i
49081>>>>>>
49081>>>>>>            Move "text"                                  to aColumnType[i].sSQLType
49082>>>>>>            Move -1                                      to aColumnType[i].iSQLType
49083>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49084>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49085>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49086>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49087>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49088>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49089>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49090>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49091>>>>>>            Increment i
49092>>>>>>
49092>>>>>>            Move "time"                                  to aColumnType[i].sSQLType
49093>>>>>>            Move -154                                    to aColumnType[i].iSQLType
49094>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49095>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49096>>>>>>            Move 10                                      to aColumnType[i].iDefaultSize
49097>>>>>>            Move 10                                      to aColumnType[i].iMinSize
49098>>>>>>            Move 19                                      to aColumnType[i].nMaxSize
49099>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49100>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49101>>>>>>            Move 19                                      to aColumnType[i].sPrecision
49102>>>>>>            Increment i
49103>>>>>>
49103>>>>>>            Move "tinyint"                               to aColumnType[i].sSQLType
49104>>>>>>            Move -6                                      to aColumnType[i].iSQLType
49105>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49106>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49107>>>>>>            Move 3                                       to aColumnType[i].iDefaultSize
49108>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49109>>>>>>            Move 3                                       to aColumnType[i].nMaxSize
49110>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49111>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49112>>>>>>            Move 3                                       to aColumnType[i].sPrecision
49113>>>>>>            Increment i
49114>>>>>>
49114>>>>>>            Move "uniqueidentifier"                      to aColumnType[i].sSQLType
49115>>>>>>            Move -11                                     to aColumnType[i].iSQLType
49116>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49117>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49118>>>>>>            Move 0                                       to aColumnType[i].iDefaultSize
49119>>>>>>            Move 0                                       to aColumnType[i].iMinSize
49120>>>>>>            Move 0                                       to aColumnType[i].nMaxSize
49121>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49122>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49123>>>>>>            Move 1                                       to aColumnType[i].sPrecision
49124>>>>>>            Increment i
49125>>>>>>
49125>>>>>>            Move "varbinary"                             to aColumnType[i].sSQLType
49126>>>>>>            Move -3                                      to aColumnType[i].iSQLType
49127>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49128>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49129>>>>>>            Move 8000                                    to aColumnType[i].iDefaultSize
49130>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49131>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
49132>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49133>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49134>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
49135>>>>>>            Increment i
49136>>>>>>
49136>>>>>>            Move "varbinary(max)"                        to aColumnType[i].sSQLType
49137>>>>>>            Move -203                                    to aColumnType[i].iSQLType
49138>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49139>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49140>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49141>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49142>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49143>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49144>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49145>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49146>>>>>>            Increment i
49147>>>>>>
49147>>>>>>            Move "varchar"                               to aColumnType[i].sSQLType
49148>>>>>>            Move 12                                      to aColumnType[i].iSQLType
49149>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49150>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49151>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49152>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49153>>>>>>            Move 8000                                    to aColumnType[i].nMaxSize
49154>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49155>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49156>>>>>>            Move 8000                                    to aColumnType[i].sPrecision
49157>>>>>>            Increment i
49158>>>>>>
49158>>>>>>            Move "varchar(max)"                          to aColumnType[i].sSQLType
49159>>>>>>            Move -201                                    to aColumnType[i].iSQLType
49160>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49161>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49162>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49163>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49164>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49165>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49166>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49167>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49168>>>>>>            Increment i
49169>>>>>>
49169>>>>>>            Move "xml"                                   to aColumnType[i].sSQLType
49170>>>>>>            Move -152                                    to aColumnType[i].iSQLType
49171>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49172>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49173>>>>>>            Move 16383                                   to aColumnType[i].iDefaultSize
49174>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49175>>>>>>            Move 2000000000                              to aColumnType[i].nMaxSize
49176>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49177>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49178>>>>>>            Move 2000000000                              to aColumnType[i].sPrecision
49179>>>>>>            Increment i
49180>>>>>>
49180>>>>>>
49180>>>>>
49180>>>>>//            Move SQL_BIGINT         to ColumnType[i].iSQLType
49180>>>>>//            Move "bigint"           to ColumnType[i].sSQLType
49180>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49180>>>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
49180>>>>>//            Move "14.0"             to ColumnType[i].sPrecision
49180>>>>>//            Move True               to ColumnType[i].bCanEditSize
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_BINARY         to ColumnType[i].iSQLType
49180>>>>>//            Move "binary"           to ColumnType[i].sSQLType
49180>>>>>//            Move DF_BINARY          to ColumnType[i].iDataFlexType
49180>>>>>//            Move "Binary"           to ColumnType[i].sDataFlexType
49180>>>>>//            Move "8000"             to ColumnType[i].sPrecision
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_BIT            to ColumnType[i].iSQLType
49180>>>>>//            Move "bit"              to ColumnType[i].sSQLType
49180>>>>>//            Move DF_ASCII           to ColumnType[i].iDataFlexType
49180>>>>>//            Move "ASCII"            to ColumnType[i].sDataFlexType
49180>>>>>//            Move "1.0"              to ColumnType[i].sPrecision // In SQL allows "1, 0, or NULL"
49180>>>>>//            Move True               to ColumnType[i].bCanEditSize
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_CHAR           to ColumnType[i].iSQLType
49180>>>>>//            Move "char"             to ColumnType[i].sSQLType
49180>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49180>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49180>>>>>//            Move "8000"             to ColumnType[i].sPrecision
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_DATE           to ColumnType[i].iSQLType
49180>>>>>//            Move "date"             to ColumnType[i].sSQLType
49180>>>>>//            Move DF_DATE            to ColumnType[i].iDataFlexType
49180>>>>>//            Move "Date"             to ColumnType[i].sDataFlexType
49180>>>>>//            Move "6.0"              to ColumnType[i].sPrecision
49180>>>>>//            Move True               to ColumnType[i].bCanEditSize
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_DATETIME       to ColumnType[i].iSQLType
49180>>>>>//            Move "datetime"         to ColumnType[i].sSQLType
49180>>>>>//            Move DF_DATETIME        to ColumnType[i].iDataFlexType
49180>>>>>//            Move "DateTime"         to ColumnType[i].sDataFlexType
49180>>>>>//            Move "23.3"             to ColumnType[i].sPrecision
49180>>>>>//            Move True               to ColumnType[i].bCanEditSize
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_TYPE_TIMESTAMP2 to ColumnType[i].iSQLType
49180>>>>>//            Move "datetime2"         to ColumnType[i].sSQLType
49180>>>>>//            Move DF_DATETIME         to ColumnType[i].iDataFlexType
49180>>>>>//            Move "DateTime"          to ColumnType[i].sDataFlexType
49180>>>>>//            Move "23.6"              to ColumnType[i].sPrecision
49180>>>>>//            Move True                to ColumnType[i].bCanEditSize
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_SS_TIMESTAMPOFFSET to ColumnType[i].iSQLType
49180>>>>>//            Move "datetimeoffset"       to ColumnType[i].sSQLType
49180>>>>>//            Move DF_DATETIME            to ColumnType[i].iDataFlexType
49180>>>>>//            Move "DateTime"             to ColumnType[i].sDataFlexType
49180>>>>>//            Move "34.0"                 to ColumnType[i].sPrecision
49180>>>>>//            Move True                   to ColumnType[i].bCanEditSize
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_DECIMAL        to ColumnType[i].iSQLType
49180>>>>>//            Move "decimal"          to ColumnType[i].sSQLType
49180>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49180>>>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
49180>>>>>//            Move "14.8"             to ColumnType[i].sPrecision
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_FLOAT          to ColumnType[i].iSQLType
49180>>>>>//            Move "float"            to ColumnType[i].sSQLType
49180>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49180>>>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
49180>>>>>//            Move "14.8"             to ColumnType[i].sPrecision
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_INTEGER        to ColumnType[i].iSQLType
49180>>>>>//            Move "int"              to ColumnType[i].sSQLType
49180>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49180>>>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
49180>>>>>//            Move "8.0"              to ColumnType[i].sPrecision
49180>>>>>//            Move True               to ColumnType[i].bCanEditSize
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_TYPE_MONEY     to ColumnType[i].iSQLType
49180>>>>>//            Move "money"            to ColumnType[i].sSQLType
49180>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49180>>>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
49180>>>>>//            Move "15.4"             to ColumnType[i].sPrecision // Studio 18.0 (!)
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_WCHAR          to ColumnType[i].iSQLType
49180>>>>>//            Move "nchar"            to ColumnType[i].sSQLType
49180>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49180>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49180>>>>>//            Move "4000"             to ColumnType[i].sPrecision
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_WLONGVARCHAR   to ColumnType[i].iSQLType
49180>>>>>//            Move "ntext"            to ColumnType[i].sSQLType
49180>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49180>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49180>>>>>//            Move "16384"            to ColumnType[i].sPrecision
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_NUMERIC        to ColumnType[i].iSQLType
49180>>>>>//            Move "numeric"          to ColumnType[i].sSQLType
49180>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49180>>>>>//            Move "Numeric"          to ColumnType[i].sDataFlexType
49180>>>>>//            Move "14.8"             to ColumnType[i].sPrecision
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_WVARCHAR       to ColumnType[i].iSQLType
49180>>>>>//            Move "nvarchar"         to ColumnType[i].sSQLType
49180>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49180>>>>>//            Move "Text"             to ColumnType[i].sDataFlexType
49180>>>>>//            Move "4000"             to ColumnType[i].sPrecision
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_VARCHARMAX     to ColumnType[i].iSQLType
49180>>>>>//            Move "nvarchar(max)"    to ColumnType[i].sSQLType
49180>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49180>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49180>>>>>//            Move "16384"            to ColumnType[i].sPrecision
49180>>>>>//            Move True               to ColumnType[i].bCanEditSize
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_REAL           to ColumnType[i].iSQLType
49180>>>>>//            Move "real"             to ColumnType[i].sSQLType
49180>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49180>>>>>//            Move "NUMERIC"          to ColumnType[i].sDataFlexType
49180>>>>>//            Move "14.8"             to ColumnType[i].sPrecision
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_TYPE_SMALLDATETIME to ColumnType[i].iSQLType
49180>>>>>//            Move "smalldatetime"        to ColumnType[i].sSQLType
49180>>>>>//            Move DF_DATETIME            to ColumnType[i].iDataFlexType
49180>>>>>//            Move "DATETIME"             to ColumnType[i].sDataFlexType
49180>>>>>//            Move "23.0"                 to ColumnType[i].sPrecision
49180>>>>>//            Move True                   to ColumnType[i].bCanEditSize
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_SMALLINT       to ColumnType[i].iSQLType
49180>>>>>//            Move "smallint"         to ColumnType[i].sSQLType
49180>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49180>>>>>//            Move "NUMERIC"          to ColumnType[i].sDataFlexType
49180>>>>>//            Move "4.0"              to ColumnType[i].sPrecision
49180>>>>>//            Move True               to ColumnType[i].bCanEditSize
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_TYPE_SMALLMONEY to ColumnType[i].iSQLType
49180>>>>>//            Move "smallmoney"        to ColumnType[i].sSQLType
49180>>>>>//            Move DF_BCD              to ColumnType[i].iDataFlexType
49180>>>>>//            Move "NUMERIC"           to ColumnType[i].sDataFlexType
49180>>>>>//            Move "10.0"              to ColumnType[i].sPrecision
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_TEXT           to ColumnType[i].iSQLType
49180>>>>>//            Move "text"             to ColumnType[i].sSQLType
49180>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49180>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49180>>>>>//            Move "8000"             to ColumnType[i].sPrecision
49180>>>>>//            Move True               to ColumnType[i].bCanEditSize
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_TIME           to ColumnType[i].iSQLType
49180>>>>>//            Move "time"             to ColumnType[i].sSQLType
49180>>>>>//            Move DF_ASCII           to ColumnType[i].iDataFlexType
49180>>>>>//            Move "ASCII"            to ColumnType[i].sDataFlexType
49180>>>>>//            Move "19.0"             to ColumnType[i].sPrecision
49180>>>>>//            Move True               to ColumnType[i].bCanEditSize
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_TINYINT        to ColumnType[i].iSQLType
49180>>>>>//            Move "tinyint"          to ColumnType[i].sSQLType
49180>>>>>//            Move DF_BCD             to ColumnType[i].iDataFlexType
49180>>>>>//            Move "NUMERIC"          to ColumnType[i].sDataFlexType
49180>>>>>//            Move "2.0"              to ColumnType[i].sPrecision
49180>>>>>//            Move True               to ColumnType[i].bCanEditSize
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_GUID           to ColumnType[i].iSQLType
49180>>>>>//            Move "uniqueidentifier" to ColumnType[i].sSQLType
49180>>>>>//            Move DF_ASCII           to ColumnType[i].iDataFlexType
49180>>>>>//            Move "ASCII"            to ColumnType[i].sDataFlexType
49180>>>>>//            Move "36"               to ColumnType[i].sPrecision
49180>>>>>//            Move True               to ColumnType[i].bCanEditSize
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_VARBINARY      to ColumnType[i].iSQLType
49180>>>>>//            Move "varbinary"        to ColumnType[i].sSQLType
49180>>>>>//            Move DF_BINARY          to ColumnType[i].iDataFlexType
49180>>>>>//            Move "BINARY"           to ColumnType[i].sDataFlexType
49180>>>>>//            Move "16384"            to ColumnType[i].sPrecision
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_LONGVARBINARY  to ColumnType[i].iSQLType
49180>>>>>//            Move "varbinary(max)"   to ColumnType[i].sSQLType
49180>>>>>//            Move DF_BINARY          to ColumnType[i].iDataFlexType
49180>>>>>//            Move "BINARY"           to ColumnType[i].sDataFlexType
49180>>>>>//            Move "16384"            to ColumnType[i].sPrecision
49180>>>>>//            Move True               to ColumnType[i].bCanEditSize
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_VARCHAR        to ColumnType[i].iSQLType
49180>>>>>//            Move "varchar"          to ColumnType[i].sSQLType
49180>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType // ToDo: Under 255 = ASCII type! How to deal with this?
49180>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49180>>>>>//            Move "8000"             to ColumnType[i].sPrecision
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_LONGVARCHAR    to ColumnType[i].iSQLType
49180>>>>>//            Move "varchar(max)"     to ColumnType[i].sSQLType
49180>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49180>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49180>>>>>//            Move "16384"            to ColumnType[i].sPrecision
49180>>>>>//            Move True               to ColumnType[i].bCanEditSize
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_SS_XML         to ColumnType[i].iSQLType
49180>>>>>//            Move "xml"              to ColumnType[i].sSQLType
49180>>>>>//            Move DF_TEXT            to ColumnType[i].iDataFlexType
49180>>>>>//            Move "TEXT"             to ColumnType[i].sDataFlexType
49180>>>>>//            Move "16384"            to ColumnType[i].sPrecision
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_TYPE_DATE      to ColumnType[i].iSQLType
49180>>>>>//            Move "DATE"             to ColumnType[i].sSQLType
49180>>>>>//            Move DF_DATE            to ColumnType[i].iDataFlexType
49180>>>>>//            Move "date"             to ColumnType[i].sDataFlexType
49180>>>>>//            Move "6.0"              to ColumnType[i].sPrecision
49180>>>>>//            Move True               to ColumnType[i].bCanEditSize
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_TYPE_TIME      to ColumnType[i].iSQLType
49180>>>>>//            Move "time"             to ColumnType[i].sSQLType
49180>>>>>//            Move DF_ASCII           to ColumnType[i].iDataFlexType
49180>>>>>//            Move "ASCII"            to ColumnType[i].sDataFlexType
49180>>>>>//            Move "8.7"              to ColumnType[i].sPrecision
49180>>>>>//            Move True               to ColumnType[i].bCanEditSize
49180>>>>>//            Increment i
49180>>>>>//
49180>>>>>//            Move SQL_TYPE_TIMESTAMP to ColumnType[i].iSQLType
49180>>>>>//            Move "datetime"         to ColumnType[i].sSQLType
49180>>>>>//            Move DF_DATETIME        to ColumnType[i].iDataFlexType
49180>>>>>//            Move "DateTime"         to ColumnType[i].sDataFlexType
49180>>>>>//            Move "23.6"             to ColumnType[i].sPrecision
49180>>>>>//            Move True               to ColumnType[i].bCanEditSize
49180>>>>>//            Increment i
49180>>>>>
49180>>>>>        End
49180>>>>>>
49180>>>>>
49180>>>>>        Function_Return aColumnType
49181>>>>>    End_Function
49182>>>>>
49182>>>>>    // MySQL Data Types
49182>>>>>    Function _UtilEnumerateMySQLTypes Returns tColumnType[]
49184>>>>>        tColumnType[] aColumnType
49184>>>>>        tColumnType[] aColumnType
49185>>>>>        Integer i
49185>>>>>
Including file: mdsmysql_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\mdsmysql_DriverDef.inc)
49185>>>>>>// Generated By The Database Update Framework
49185>>>>>>// Driver XML File: C:\Program Files (x86)\DataFlex 19.0\Bin\mdsmysql_DriverDef.xml
49185>>>>>>// Driver COLUMN DATA TYPES
49185>>>>>>//
49185>>>>>>// Created: 2018-03-14 23:46:49.593
49185>>>>>>
49185>>>>>>            Move "bigint"                                to aColumnType[i].sSQLType
49186>>>>>>            Move 8                                       to aColumnType[i].iSQLType
49187>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49188>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49189>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49190>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49191>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49192>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49193>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49194>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49195>>>>>>            Increment i
49196>>>>>>
49196>>>>>>            Move "bit"                                   to aColumnType[i].sSQLType
49197>>>>>>            Move 16                                      to aColumnType[i].iSQLType
49198>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49199>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49200>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49201>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49202>>>>>>            Move 64                                      to aColumnType[i].nMaxSize
49203>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49204>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49205>>>>>>            Move 64                                      to aColumnType[i].sPrecision
49206>>>>>>            Increment i
49207>>>>>>
49207>>>>>>            Move "blob"                                  to aColumnType[i].sSQLType
49208>>>>>>            Move 252                                     to aColumnType[i].iSQLType
49209>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49210>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49211>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49212>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49213>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49214>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49215>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49216>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49217>>>>>>            Increment i
49218>>>>>>
49218>>>>>>            Move "char"                                  to aColumnType[i].sSQLType
49219>>>>>>            Move 254                                     to aColumnType[i].iSQLType
49220>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49221>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49222>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49223>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49224>>>>>>            Move 255                                     to aColumnType[i].nMaxSize
49225>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49226>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49227>>>>>>            Move 255                                     to aColumnType[i].sPrecision
49228>>>>>>            Increment i
49229>>>>>>
49229>>>>>>            Move "date"                                  to aColumnType[i].sSQLType
49230>>>>>>            Move 10                                      to aColumnType[i].iSQLType
49231>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49232>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49233>>>>>>            Move 6                                       to aColumnType[i].iDefaultSize
49234>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49235>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49236>>>>>>            Move "DF_DATE"                               to aColumnType[i].sDataFlexType
49237>>>>>>            Move DF_DATE                                 to aColumnType[i].iDataFlexType
49238>>>>>>            Move 6                                       to aColumnType[i].sPrecision
49239>>>>>>            Increment i
49240>>>>>>
49240>>>>>>            Move "datetime"                              to aColumnType[i].sSQLType
49241>>>>>>            Move 12                                      to aColumnType[i].iSQLType
49242>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49243>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49244>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
49245>>>>>>            Move 6                                       to aColumnType[i].iMinSize
49246>>>>>>            Move 23                                      to aColumnType[i].nMaxSize
49247>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49248>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49249>>>>>>            Move 23                                      to aColumnType[i].sPrecision
49250>>>>>>            Increment i
49251>>>>>>
49251>>>>>>            Move "decimal"                               to aColumnType[i].sSQLType
49252>>>>>>            Move 246                                     to aColumnType[i].iSQLType
49253>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49254>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49255>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49256>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49257>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49258>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49259>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49260>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49261>>>>>>            Increment i
49262>>>>>>
49262>>>>>>            Move "decimal-MySQL4"                        to aColumnType[i].sSQLType
49263>>>>>>            Move 0                                       to aColumnType[i].iSQLType
49264>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49265>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49266>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49267>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49268>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49269>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49270>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49271>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49272>>>>>>            Increment i
49273>>>>>>
49273>>>>>>            Move "double"                                to aColumnType[i].sSQLType
49274>>>>>>            Move 5                                       to aColumnType[i].iSQLType
49275>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49276>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49277>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49278>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49279>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49280>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49281>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49282>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49283>>>>>>            Increment i
49284>>>>>>
49284>>>>>>            Move "enum"                                  to aColumnType[i].sSQLType
49285>>>>>>            Move 247                                     to aColumnType[i].iSQLType
49286>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49287>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49288>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49289>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49290>>>>>>            Move 255                                     to aColumnType[i].nMaxSize
49291>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49292>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49293>>>>>>            Move 255                                     to aColumnType[i].sPrecision
49294>>>>>>            Increment i
49295>>>>>>
49295>>>>>>            Move "float"                                 to aColumnType[i].sSQLType
49296>>>>>>            Move 4                                       to aColumnType[i].iSQLType
49297>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49298>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49299>>>>>>            Move 4                                       to aColumnType[i].iDefaultSize
49300>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49301>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49302>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49303>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49304>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49305>>>>>>            Increment i
49306>>>>>>
49306>>>>>>            Move "int"                                   to aColumnType[i].sSQLType
49307>>>>>>            Move 3                                       to aColumnType[i].iSQLType
49308>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49309>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49310>>>>>>            Move 10                                      to aColumnType[i].iDefaultSize
49311>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49312>>>>>>            Move 11                                      to aColumnType[i].nMaxSize
49313>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49314>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49315>>>>>>            Move 11                                      to aColumnType[i].sPrecision
49316>>>>>>            Increment i
49317>>>>>>
49317>>>>>>            Move "longblob"                              to aColumnType[i].sSQLType
49318>>>>>>            Move 251                                     to aColumnType[i].iSQLType
49319>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49320>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49321>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49322>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49323>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49324>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49325>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49326>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49327>>>>>>            Increment i
49328>>>>>>
49328>>>>>>            Move "longtext"                              to aColumnType[i].sSQLType
49329>>>>>>            Move -251                                    to aColumnType[i].iSQLType
49330>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49331>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49332>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49333>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49334>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49335>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49336>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49337>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49338>>>>>>            Increment i
49339>>>>>>
49339>>>>>>            Move "mediumblob"                            to aColumnType[i].sSQLType
49340>>>>>>            Move 250                                     to aColumnType[i].iSQLType
49341>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49342>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49343>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49344>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49345>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49346>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49347>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49348>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49349>>>>>>            Increment i
49350>>>>>>
49350>>>>>>            Move "mediumint"                             to aColumnType[i].sSQLType
49351>>>>>>            Move 9                                       to aColumnType[i].iSQLType
49352>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49353>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49354>>>>>>            Move 8                                       to aColumnType[i].iDefaultSize
49355>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49356>>>>>>            Move 9                                       to aColumnType[i].nMaxSize
49357>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49358>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49359>>>>>>            Move 9                                       to aColumnType[i].sPrecision
49360>>>>>>            Increment i
49361>>>>>>
49361>>>>>>            Move "mediumtext"                            to aColumnType[i].sSQLType
49362>>>>>>            Move -250                                    to aColumnType[i].iSQLType
49363>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49364>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49365>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49366>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49367>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49368>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49369>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49370>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49371>>>>>>            Increment i
49372>>>>>>
49372>>>>>>            Move "set"                                   to aColumnType[i].sSQLType
49373>>>>>>            Move 248                                     to aColumnType[i].iSQLType
49374>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49375>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49376>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49377>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49378>>>>>>            Move 255                                     to aColumnType[i].nMaxSize
49379>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49380>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49381>>>>>>            Move 255                                     to aColumnType[i].sPrecision
49382>>>>>>            Increment i
49383>>>>>>
49383>>>>>>            Move "smallint"                              to aColumnType[i].sSQLType
49384>>>>>>            Move 2                                       to aColumnType[i].iSQLType
49385>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49386>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49387>>>>>>            Move 5                                       to aColumnType[i].iDefaultSize
49388>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49389>>>>>>            Move 6                                       to aColumnType[i].nMaxSize
49390>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49391>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49392>>>>>>            Move 6                                       to aColumnType[i].sPrecision
49393>>>>>>            Increment i
49394>>>>>>
49394>>>>>>            Move "text"                                  to aColumnType[i].sSQLType
49395>>>>>>            Move -252                                    to aColumnType[i].iSQLType
49396>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49397>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49398>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49399>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49400>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49401>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49402>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49403>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49404>>>>>>            Increment i
49405>>>>>>
49405>>>>>>            Move "time"                                  to aColumnType[i].sSQLType
49406>>>>>>            Move 11                                      to aColumnType[i].iSQLType
49407>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49408>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49409>>>>>>            Move 10                                      to aColumnType[i].iDefaultSize
49410>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49411>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49412>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49413>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49414>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49415>>>>>>            Increment i
49416>>>>>>
49416>>>>>>            Move "timestamp"                             to aColumnType[i].sSQLType
49417>>>>>>            Move 7                                       to aColumnType[i].iSQLType
49418>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49419>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49420>>>>>>            Move 6                                       to aColumnType[i].iDefaultSize
49421>>>>>>            Move 6                                       to aColumnType[i].iMinSize
49422>>>>>>            Move 23                                      to aColumnType[i].nMaxSize
49423>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49424>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49425>>>>>>            Move 23                                      to aColumnType[i].sPrecision
49426>>>>>>            Increment i
49427>>>>>>
49427>>>>>>            Move "tinyblob"                              to aColumnType[i].sSQLType
49428>>>>>>            Move 249                                     to aColumnType[i].iSQLType
49429>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49430>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49431>>>>>>            Move 255                                     to aColumnType[i].iDefaultSize
49432>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49433>>>>>>            Move 255                                     to aColumnType[i].nMaxSize
49434>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49435>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49436>>>>>>            Move 255                                     to aColumnType[i].sPrecision
49437>>>>>>            Increment i
49438>>>>>>
49438>>>>>>            Move "tinyint"                               to aColumnType[i].sSQLType
49439>>>>>>            Move 1                                       to aColumnType[i].iSQLType
49440>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49441>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49442>>>>>>            Move 4                                       to aColumnType[i].iDefaultSize
49443>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49444>>>>>>            Move 4                                       to aColumnType[i].nMaxSize
49445>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49446>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49447>>>>>>            Move 4                                       to aColumnType[i].sPrecision
49448>>>>>>            Increment i
49449>>>>>>
49449>>>>>>            Move "tinytext"                              to aColumnType[i].sSQLType
49450>>>>>>            Move -249                                    to aColumnType[i].iSQLType
49451>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49452>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49453>>>>>>            Move 255                                     to aColumnType[i].iDefaultSize
49454>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49455>>>>>>            Move 255                                     to aColumnType[i].nMaxSize
49456>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49457>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49458>>>>>>            Move 255                                     to aColumnType[i].sPrecision
49459>>>>>>            Increment i
49460>>>>>>
49460>>>>>>            Move "varchar"                               to aColumnType[i].sSQLType
49461>>>>>>            Move 253                                     to aColumnType[i].iSQLType
49462>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49463>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49464>>>>>>            Move -1                                      to aColumnType[i].iDefaultSize
49465>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49466>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49467>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49468>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49469>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49470>>>>>>            Increment i
49471>>>>>>
49471>>>>>>            Move "year"                                  to aColumnType[i].sSQLType
49472>>>>>>            Move 13                                      to aColumnType[i].iSQLType
49473>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49474>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49475>>>>>>            Move 4                                       to aColumnType[i].iDefaultSize
49476>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49477>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49478>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49479>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49480>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49481>>>>>>            Increment i
49482>>>>>>
49482>>>>>>
49482>>>>>
49482>>>>>//        Move eMySQL_LONGLONG    to ColumnType[i].iSQLType
49482>>>>>//        Move "bigint"           to ColumnType[i].sSQLType
49482>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49482>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49482>>>>>//        Move "14.0"             to ColumnType[i].sPrecision
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_BIT         to ColumnType[i].iSQLType
49482>>>>>//        Move "bit"              to ColumnType[i].sSQLType
49482>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49482>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49482>>>>>//        Move "4.0"              to ColumnType[i].sPrecision // In SQL allows "1, 0, or NULL"
49482>>>>>//        Move True               to ColumnType[i].bCanEditSize
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_BLOB        to ColumnType[i].iSQLType
49482>>>>>//        Move "blob"             to ColumnType[i].sSQLType
49482>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49482>>>>>//        Move "BINARY"           to ColumnType[i].sDataFlexType
49482>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_STRING      to ColumnType[i].iSQLType
49482>>>>>//        Move "char"             to ColumnType[i].sSQLType
49482>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49482>>>>>//        Move "TEXT"             to ColumnType[i].sDataFlexType
49482>>>>>//        Move "254"              to ColumnType[i].sPrecision
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_DATE        to ColumnType[i].iSQLType
49482>>>>>//        Move "date"             to ColumnType[i].sSQLType
49482>>>>>//        Move DF_DATE            to ColumnType[i].iDataFlexType
49482>>>>>//        Move "Date"             to ColumnType[i].sDataFlexType
49482>>>>>//        Move "6.0"              to ColumnType[i].sPrecision
49482>>>>>//        Move True               to ColumnType[i].bCanEditSize
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_DATETIME    to ColumnType[i].iSQLType
49482>>>>>//        Move "datetime"         to ColumnType[i].sSQLType
49482>>>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
49482>>>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
49482>>>>>//        Move "23.0"             to ColumnType[i].sPrecision
49482>>>>>//        Move True               to ColumnType[i].bCanEditSize
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_DECIMAL     to ColumnType[i].iSQLType
49482>>>>>//        Move "decimal"          to ColumnType[i].sSQLType
49482>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49482>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49482>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_DOUBLE      to ColumnType[i].iSQLType
49482>>>>>//        Move "double"           to ColumnType[i].sSQLType
49482>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49482>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49482>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_ENUM        to ColumnType[i].iSQLType
49482>>>>>//        Move "enum"             to ColumnType[i].sSQLType
49482>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49482>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49482>>>>>//        Move "254"              to ColumnType[i].sPrecision
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_FLOAT       to ColumnType[i].iSQLType
49482>>>>>//        Move "float"            to ColumnType[i].sSQLType
49482>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49482>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49482>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_INT24       to ColumnType[i].iSQLType
49482>>>>>//        Move "int"              to ColumnType[i].sSQLType
49482>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49482>>>>>//        Move "NUMERIC"          to ColumnType[i].sDataFlexType
49482>>>>>//        Move "11.0"             to ColumnType[i].sPrecision
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_LONG_BLOB   to ColumnType[i].iSQLType
49482>>>>>//        Move "longblob"         to ColumnType[i].sSQLType
49482>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49482>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
49482>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_LONG_TEXT   to ColumnType[i].iSQLType
49482>>>>>//        Move "longtext"         to ColumnType[i].sSQLType
49482>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49482>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49482>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_MEDIUM_BLOB to ColumnType[i].iSQLType
49482>>>>>//        Move "mediumblob"       to ColumnType[i].sSQLType
49482>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49482>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
49482>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_INT24       to ColumnType[i].iSQLType
49482>>>>>//        Move "mediumint"        to ColumnType[i].sSQLType
49482>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49482>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49482>>>>>//        Move "9.0"              to ColumnType[i].sPrecision
49482>>>>>//
49482>>>>>//        Move eMySQL_MEDIUM_TEXT to ColumnType[i].iSQLType
49482>>>>>//        Move "mediumtext"       to ColumnType[i].sSQLType
49482>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49482>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49482>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_SET         to ColumnType[i].iSQLType
49482>>>>>//        Move "set"              to ColumnType[i].sSQLType
49482>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49482>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49482>>>>>//        Move "254"              to ColumnType[i].sPrecision
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_SHORT       to ColumnType[i].iSQLType
49482>>>>>//        Move "smallint"         to ColumnType[i].sSQLType
49482>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49482>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49482>>>>>//        Move "6.0"              to ColumnType[i].sPrecision
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_TEXT        to ColumnType[i].iSQLType
49482>>>>>//        Move "text"             to ColumnType[i].sSQLType
49482>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49482>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49482>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_TIME        to ColumnType[i].iSQLType
49482>>>>>//        Move "time"             to ColumnType[i].sSQLType
49482>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49482>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49482>>>>>//        Move "10.0"             to ColumnType[i].sPrecision
49482>>>>>//        Move True               to ColumnType[i].bCanEditSize
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_TIMESTAMP   to ColumnType[i].iSQLType
49482>>>>>//        Move "timestamp"        to ColumnType[i].sSQLType
49482>>>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
49482>>>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
49482>>>>>//        Move "23.0"             to ColumnType[i].sPrecision
49482>>>>>//        Move True               to ColumnType[i].bCanEditSize
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_TINY_BLOB   to ColumnType[i].iSQLType
49482>>>>>//        Move "tinyblob"         to ColumnType[i].sSQLType
49482>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49482>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
49482>>>>>//        Move "254"              to ColumnType[i].sPrecision
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_TINY        to ColumnType[i].iSQLType
49482>>>>>//        Move "tinyint"          to ColumnType[i].sSQLType
49482>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49482>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49482>>>>>//        Move "4.0"              to ColumnType[i].sPrecision
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_TINY_TEXT   to ColumnType[i].iSQLType
49482>>>>>//        Move "tinytext"         to ColumnType[i].sSQLType
49482>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49482>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49482>>>>>//        Move "254"              to ColumnType[i].sPrecision
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_VAR_STRING  to ColumnType[i].iSQLType
49482>>>>>//        Move "varchar"          to ColumnType[i].sSQLType
49482>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49482>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49482>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49482>>>>>//        Increment i
49482>>>>>//
49482>>>>>//        Move eMySQL_YEAR        to ColumnType[i].iSQLType
49482>>>>>//        Move "year"             to ColumnType[i].sSQLType
49482>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49482>>>>>//        Move "NUMERIC"          to ColumnType[i].sDataFlexType
49482>>>>>//        Move "4.0"              to ColumnType[i].sPrecision
49482>>>>>//        Move True               to ColumnType[i].bCanEditSize
49482>>>>>//        Increment i
49482>>>>>
49482>>>>>        Function_Return aColumnType
49483>>>>>    End_Function
49484>>>>>
49484>>>>>    // Oracle Data Types
49484>>>>>    Function _UtilEnumerateOracleTypes Returns tColumnType[]
49486>>>>>        tColumnType[] aColumnType
49486>>>>>        tColumnType[] aColumnType
49487>>>>>        Integer i
49487>>>>>
Including file: ora_drv_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ora_drv_DriverDef.inc)
49487>>>>>>// Generated By The Database Update Framework
49487>>>>>>// Driver XML File: C:\Program Files (x86)\DataFlex 19.0\Bin\ora_drv_DriverDef.xml
49487>>>>>>// Driver COLUMN DATA TYPES
49487>>>>>>//
49487>>>>>>// Created: 2018-03-14 23:47:34.82
49487>>>>>>
49487>>>>>>            Move "blob"                                  to aColumnType[i].sSQLType
49488>>>>>>            Move 113                                     to aColumnType[i].iSQLType
49489>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49490>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49491>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49492>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49493>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49494>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49495>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49496>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49497>>>>>>            Increment i
49498>>>>>>
49498>>>>>>            Move "char"                                  to aColumnType[i].sSQLType
49499>>>>>>            Move 96                                      to aColumnType[i].iSQLType
49500>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49501>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49502>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49503>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49504>>>>>>            Move 2000                                    to aColumnType[i].nMaxSize
49505>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49506>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49507>>>>>>            Move 2000                                    to aColumnType[i].sPrecision
49508>>>>>>            Increment i
49509>>>>>>
49509>>>>>>            Move "clob"                                  to aColumnType[i].sSQLType
49510>>>>>>            Move 112                                     to aColumnType[i].iSQLType
49511>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49512>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49513>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49514>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49515>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49516>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49517>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49518>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49519>>>>>>            Increment i
49520>>>>>>
49520>>>>>>            Move "date"                                  to aColumnType[i].sSQLType
49521>>>>>>            Move 12                                      to aColumnType[i].iSQLType
49522>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49523>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49524>>>>>>            Move 6                                       to aColumnType[i].iDefaultSize
49525>>>>>>            Move 6                                       to aColumnType[i].iMinSize
49526>>>>>>            Move 23                                      to aColumnType[i].nMaxSize
49527>>>>>>            Move "DF_DATE"                               to aColumnType[i].sDataFlexType
49528>>>>>>            Move DF_DATE                                 to aColumnType[i].iDataFlexType
49529>>>>>>            Move 6                                       to aColumnType[i].sPrecision
49530>>>>>>            Increment i
49531>>>>>>
49531>>>>>>            Move "float"                                 to aColumnType[i].sSQLType
49532>>>>>>            Move 4                                       to aColumnType[i].iSQLType
49533>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49534>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49535>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49536>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49537>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49538>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49539>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49540>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49541>>>>>>            Increment i
49542>>>>>>
49542>>>>>>            Move "int"                                   to aColumnType[i].sSQLType
49543>>>>>>            Move 3                                       to aColumnType[i].iSQLType
49544>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49545>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49546>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49547>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49548>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49549>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49550>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49551>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49552>>>>>>            Increment i
49553>>>>>>
49553>>>>>>            Move "intervalds"                            to aColumnType[i].sSQLType
49554>>>>>>            Move 190                                     to aColumnType[i].iSQLType
49555>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49556>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49557>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
49558>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49559>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49560>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49561>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49562>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49563>>>>>>            Increment i
49564>>>>>>
49564>>>>>>            Move "intervalym"                            to aColumnType[i].sSQLType
49565>>>>>>            Move 189                                     to aColumnType[i].iSQLType
49566>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49567>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49568>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
49569>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49570>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49571>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49572>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49573>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49574>>>>>>            Increment i
49575>>>>>>
49575>>>>>>            Move "long"                                  to aColumnType[i].sSQLType
49576>>>>>>            Move 8                                       to aColumnType[i].iSQLType
49577>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49578>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49579>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49580>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49581>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49582>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49583>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49584>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49585>>>>>>            Increment i
49586>>>>>>
49586>>>>>>            Move "longraw"                               to aColumnType[i].sSQLType
49587>>>>>>            Move 24                                      to aColumnType[i].iSQLType
49588>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49589>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49590>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49591>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49592>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49593>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49594>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49595>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49596>>>>>>            Increment i
49597>>>>>>
49597>>>>>>            Move "nchar"                                 to aColumnType[i].sSQLType
49598>>>>>>            Move 286                                     to aColumnType[i].iSQLType
49599>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49600>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49601>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49602>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49603>>>>>>            Move 2000                                    to aColumnType[i].nMaxSize
49604>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49605>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49606>>>>>>            Move 2000                                    to aColumnType[i].sPrecision
49607>>>>>>            Increment i
49608>>>>>>
49608>>>>>>            Move "nclob"                                 to aColumnType[i].sSQLType
49609>>>>>>            Move 288                                     to aColumnType[i].iSQLType
49610>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49611>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49612>>>>>>            Move 16384                                   to aColumnType[i].iDefaultSize
49613>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49614>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49615>>>>>>            Move "DF_TEXT"                               to aColumnType[i].sDataFlexType
49616>>>>>>            Move DF_TEXT                                 to aColumnType[i].iDataFlexType
49617>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49618>>>>>>            Increment i
49619>>>>>>
49619>>>>>>            Move "number"                                to aColumnType[i].sSQLType
49620>>>>>>            Move 2                                       to aColumnType[i].iSQLType
49621>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49622>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49623>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49624>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49625>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49626>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49627>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49628>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49629>>>>>>            Increment i
49630>>>>>>
49630>>>>>>            Move "nvarchar2"                             to aColumnType[i].sSQLType
49631>>>>>>            Move 287                                     to aColumnType[i].iSQLType
49632>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49633>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49634>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49635>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49636>>>>>>            Move 4000                                    to aColumnType[i].nMaxSize
49637>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49638>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49639>>>>>>            Move 4000                                    to aColumnType[i].sPrecision
49640>>>>>>            Increment i
49641>>>>>>
49641>>>>>>            Move "raw"                                   to aColumnType[i].sSQLType
49642>>>>>>            Move 23                                      to aColumnType[i].iSQLType
49643>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49644>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49645>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49646>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49647>>>>>>            Move 2000                                    to aColumnType[i].nMaxSize
49648>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49649>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49650>>>>>>            Move 2000                                    to aColumnType[i].sPrecision
49651>>>>>>            Increment i
49652>>>>>>
49652>>>>>>            Move "timestamp"                             to aColumnType[i].sSQLType
49653>>>>>>            Move 187                                     to aColumnType[i].iSQLType
49654>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49655>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49656>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
49657>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49658>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49659>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49660>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49661>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49662>>>>>>            Increment i
49663>>>>>>
49663>>>>>>            Move "timestampltz"                          to aColumnType[i].sSQLType
49664>>>>>>            Move 232                                     to aColumnType[i].iSQLType
49665>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49666>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49667>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
49668>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49669>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49670>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49671>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49672>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49673>>>>>>            Increment i
49674>>>>>>
49674>>>>>>            Move "timestamptz"                           to aColumnType[i].sSQLType
49675>>>>>>            Move 188                                     to aColumnType[i].iSQLType
49676>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49677>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49678>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
49679>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49680>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49681>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49682>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49683>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49684>>>>>>            Increment i
49685>>>>>>
49685>>>>>>            Move "varchar2"                              to aColumnType[i].sSQLType
49686>>>>>>            Move 1                                       to aColumnType[i].iSQLType
49687>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49688>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49689>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49690>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49691>>>>>>            Move 4000                                    to aColumnType[i].nMaxSize
49692>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49693>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49694>>>>>>            Move 4000                                    to aColumnType[i].sPrecision
49695>>>>>>            Increment i
49696>>>>>>
49696>>>>>>
49696>>>>>
49696>>>>>//        Move eOracle_BLOB       to ColumnType[i].iSQLType
49696>>>>>//        Move "BLOB"             to ColumnType[i].sSQLType
49696>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49696>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
49696>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49696>>>>>//        Increment i
49696>>>>>//
49696>>>>>//        Move eOracle_CHAR       to ColumnType[i].iSQLType
49696>>>>>//        Move "CHAR"             to ColumnType[i].sSQLType
49696>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49696>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49696>>>>>//        Move "2000"             to ColumnType[i].sPrecision
49696>>>>>//        Increment i
49696>>>>>//
49696>>>>>//        Move eOracle_CLOB       to ColumnType[i].iSQLType
49696>>>>>//        Move "CLOB"             to ColumnType[i].sSQLType
49696>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49696>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49696>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49696>>>>>//        Increment i
49696>>>>>//
49696>>>>>//        Move eOracle_DATE       to ColumnType[i].iSQLType
49696>>>>>//        Move "DATE"             to ColumnType[i].sSQLType
49696>>>>>//        Move DF_Date            to ColumnType[i].iDataFlexType
49696>>>>>//        Move "Date"             to ColumnType[i].sDataFlexType
49696>>>>>//        Move "6.0"              to ColumnType[i].sPrecision
49696>>>>>//        Move True               to ColumnType[i].bCanEditSize
49696>>>>>//        Increment i
49696>>>>>//
49696>>>>>//        Move eOracle_FLOAT      to ColumnType[i].iSQLType
49696>>>>>//        Move "FLOAT"            to ColumnType[i].sSQLType
49696>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49696>>>>>//        Move "Number"           to ColumnType[i].sDataFlexType
49696>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49696>>>>>//        Increment i
49696>>>>>//
49696>>>>>//        Move eOracle_INT        to ColumnType[i].iSQLType
49696>>>>>//        Move "INT"              to ColumnType[i].sSQLType
49696>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49696>>>>>//        Move "Number"           to ColumnType[i].sDataFlexType
49696>>>>>//        Move "14.0"             to ColumnType[i].sPrecision
49696>>>>>//        Increment i
49696>>>>>//
49696>>>>>//        Move eOracle_INTERVALDS to ColumnType[i].iSQLType
49696>>>>>//        Move "INTERVALDAYTOSEC" to ColumnType[i].sSQLType
49696>>>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
49696>>>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
49696>>>>>//        Move "23.0"             to ColumnType[i].sPrecision
49696>>>>>//        Move True               to ColumnType[i].bCanEditSize
49696>>>>>//        Increment i
49696>>>>>//
49696>>>>>//        Move eOracle_INTERVALYM  to ColumnType[i].iSQLType
49696>>>>>//        Move "INTERVALYEARTOMON" to ColumnType[i].sSQLType
49696>>>>>//        Move DF_DATETIME         to ColumnType[i].iDataFlexType
49696>>>>>//        Move "DateTime"          to ColumnType[i].sDataFlexType
49696>>>>>//        Move "23.0"              to ColumnType[i].sPrecision
49696>>>>>//        Move True                to ColumnType[i].bCanEditSize
49696>>>>>//        Increment i
49696>>>>>//
49696>>>>>//        Move eOracle_RAW        to ColumnType[i].iSQLType
49696>>>>>//        Move "LONG"             to ColumnType[i].sSQLType
49696>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49696>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
49696>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49696>>>>>//        Increment i
49696>>>>>//
49696>>>>>//        Move eOracle_LONGRAW    to ColumnType[i].iSQLType
49696>>>>>//        Move "LONG RAW"         to ColumnType[i].sSQLType
49696>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49696>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
49696>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49696>>>>>//        Increment i
49696>>>>>//
49696>>>>>//        Move eOracle_NCHAR      to ColumnType[i].iSQLType
49696>>>>>//        Move "NCHAR"            to ColumnType[i].sSQLType
49696>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49696>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49696>>>>>//        Move "2000"             to ColumnType[i].sPrecision
49696>>>>>//        Increment i
49696>>>>>//
49696>>>>>//        Move eOracle_NCLOB      to ColumnType[i].iSQLType
49696>>>>>//        Move "NCLOB"            to ColumnType[i].sSQLType
49696>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49696>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49696>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49696>>>>>//        Increment i
49696>>>>>//
49696>>>>>//        Move eOracle_NUMBER     to ColumnType[i].iSQLType
49696>>>>>//        Move "NUMBER"           to ColumnType[i].sSQLType
49696>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49696>>>>>//        Move "Number"           to ColumnType[i].sDataFlexType
49696>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49696>>>>>//        Increment i
49696>>>>>//
49696>>>>>//        Move eOracle_NVARCHAR2  to ColumnType[i].iSQLType
49696>>>>>//        Move "NVARCHAR2"        to ColumnType[i].sSQLType
49696>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49696>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49696>>>>>//        Move "4000"             to ColumnType[i].sPrecision
49696>>>>>//        Increment i
49696>>>>>//
49696>>>>>//        Move eOracle_RAW        to ColumnType[i].iSQLType
49696>>>>>//        Move "RAW"              to ColumnType[i].sSQLType
49696>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49696>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
49696>>>>>//        Move "2000"             to ColumnType[i].sPrecision
49696>>>>>//        Increment i
49696>>>>>//
49696>>>>>//        Move eOracle_ROWID      to ColumnType[i].iSQLType
49696>>>>>//        Move "ROWID"            to ColumnType[i].sSQLType
49696>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49696>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49696>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49696>>>>>//        Increment i
49696>>>>>//
49696>>>>>//        Move eOracle_TIMESTAMP  to ColumnType[i].iSQLType
49696>>>>>//        Move "TimeStamp"        to ColumnType[i].sSQLType
49696>>>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
49696>>>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
49696>>>>>//        Move "11.0"             to ColumnType[i].sPrecision
49696>>>>>//        Move True               to ColumnType[i].bCanEditSize
49696>>>>>//        Increment i
49696>>>>>//
49696>>>>>//        Move eOracle_TIMESTAMPLTZ   to ColumnType[i].iSQLType
49696>>>>>//        Move "TIMESTAMPLOCALTZ"     to ColumnType[i].sSQLType
49696>>>>>//        Move DF_DATETIME            to ColumnType[i].iDataFlexType
49696>>>>>//        Move "DateTime"             to ColumnType[i].sDataFlexType
49696>>>>>//        Move "13.0"                 to ColumnType[i].sPrecision
49696>>>>>//        Move True                   to ColumnType[i].bCanEditSize
49696>>>>>//        Increment i
49696>>>>>//
49696>>>>>//        Move eOracle_TIMESTAMPTZ    to ColumnType[i].iSQLType
49696>>>>>//        Move "TIMEZONETIMEZONE"     to ColumnType[i].sSQLType
49696>>>>>//        Move DF_DATETIME            to ColumnType[i].iDataFlexType
49696>>>>>//        Move "DateTime"             to ColumnType[i].sDataFlexType
49696>>>>>//        Move "11.0"                 to ColumnType[i].sPrecision
49696>>>>>//        Move True                   to ColumnType[i].bCanEditSize
49696>>>>>//        Increment i
49696>>>>>//
49696>>>>>//        Move eOracle_VARCHAR2   to ColumnType[i].iSQLType
49696>>>>>//        Move "VARCHAR"          to ColumnType[i].sSQLType
49696>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49696>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49696>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49696>>>>>
49696>>>>>        Function_Return aColumnType
49697>>>>>    End_Function
49698>>>>>
49698>>>>>    // PostgreSQL Data Types
49698>>>>>    Function _UtilEnumeratePostgreSQLTypes Returns tColumnType[]
49700>>>>>        tColumnType[] aColumnType
49700>>>>>        tColumnType[] aColumnType
49701>>>>>        Integer i
49701>>>>>
Including file: mdspgsql_DriverDef.inc    (C:\Projects\DF20\DbUpdateFramework\AppSrc\mdspgsql_DriverDef.inc)
49701>>>>>>// Generated By The Database Update Framework
49701>>>>>>// Driver XML File: C:\Program Files (x86)\DataFlex 19.0\Bin\mdspgsql_DriverDef.xml
49701>>>>>>// Driver COLUMN DATA TYPES
49701>>>>>>//
49701>>>>>>// Created: 2018-03-14 23:47:02.984
49701>>>>>>
49701>>>>>>            Move "bigint"                                to aColumnType[i].sSQLType
49702>>>>>>            Move 20                                      to aColumnType[i].iSQLType
49703>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49704>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49705>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49706>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49707>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49708>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49709>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49710>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49711>>>>>>            Increment i
49712>>>>>>
49712>>>>>>            Move "bit"                                   to aColumnType[i].sSQLType
49713>>>>>>            Move 1560                                    to aColumnType[i].iSQLType
49714>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49715>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49716>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49717>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49718>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49719>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49720>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49721>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49722>>>>>>            Increment i
49723>>>>>>
49723>>>>>>            Move "boolean"                               to aColumnType[i].sSQLType
49724>>>>>>            Move 16                                      to aColumnType[i].iSQLType
49725>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49726>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49727>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49728>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49729>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49730>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49731>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49732>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49733>>>>>>            Increment i
49734>>>>>>
49734>>>>>>            Move "bytea"                                 to aColumnType[i].sSQLType
49735>>>>>>            Move 17                                      to aColumnType[i].iSQLType
49736>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49737>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49738>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49739>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49740>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49741>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49742>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49743>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49744>>>>>>            Increment i
49745>>>>>>
49745>>>>>>            Move "char"                                  to aColumnType[i].sSQLType
49746>>>>>>            Move 18                                      to aColumnType[i].iSQLType
49747>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49748>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49749>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49750>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49751>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49752>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49753>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49754>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49755>>>>>>            Increment i
49756>>>>>>
49756>>>>>>            Move "citext"                                to aColumnType[i].sSQLType
49757>>>>>>            Move -25                                     to aColumnType[i].iSQLType
49758>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49759>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49760>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49761>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49762>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49763>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49764>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49765>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49766>>>>>>            Increment i
49767>>>>>>
49767>>>>>>            Move "date"                                  to aColumnType[i].sSQLType
49768>>>>>>            Move 1082                                    to aColumnType[i].iSQLType
49769>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49770>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49771>>>>>>            Move 6                                       to aColumnType[i].iDefaultSize
49772>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49773>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49774>>>>>>            Move "DF_DATE"                               to aColumnType[i].sDataFlexType
49775>>>>>>            Move DF_DATE                                 to aColumnType[i].iDataFlexType
49776>>>>>>            Move 6                                       to aColumnType[i].sPrecision
49777>>>>>>            Increment i
49778>>>>>>
49778>>>>>>            Move "double"                                to aColumnType[i].sSQLType
49779>>>>>>            Move 701                                     to aColumnType[i].iSQLType
49780>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49781>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49782>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49783>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49784>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49785>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49786>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49787>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49788>>>>>>            Increment i
49789>>>>>>
49789>>>>>>            Move "integer"                               to aColumnType[i].sSQLType
49790>>>>>>            Move 23                                      to aColumnType[i].iSQLType
49791>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49792>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49793>>>>>>            Move 11                                      to aColumnType[i].iDefaultSize
49794>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49795>>>>>>            Move 11                                      to aColumnType[i].nMaxSize
49796>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49797>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49798>>>>>>            Move 11                                      to aColumnType[i].sPrecision
49799>>>>>>            Increment i
49800>>>>>>
49800>>>>>>            Move "money"                                 to aColumnType[i].sSQLType
49801>>>>>>            Move 790                                     to aColumnType[i].iSQLType
49802>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49803>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49804>>>>>>            Move 30                                      to aColumnType[i].iDefaultSize
49805>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49806>>>>>>            Move 30                                      to aColumnType[i].nMaxSize
49807>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49808>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49809>>>>>>            Move 30                                      to aColumnType[i].sPrecision
49810>>>>>>            Increment i
49811>>>>>>
49811>>>>>>            Move "numeric"                               to aColumnType[i].sSQLType
49812>>>>>>            Move 1700                                    to aColumnType[i].iSQLType
49813>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49814>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49815>>>>>>            Move 14                                      to aColumnType[i].iDefaultSize
49816>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49817>>>>>>            Move 14                                      to aColumnType[i].nMaxSize
49818>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49819>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49820>>>>>>            Move 14                                      to aColumnType[i].sPrecision
49821>>>>>>            Increment i
49822>>>>>>
49822>>>>>>            Move "oid"                                   to aColumnType[i].sSQLType
49823>>>>>>            Move 26                                      to aColumnType[i].iSQLType
49824>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49825>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49826>>>>>>            Move 20                                      to aColumnType[i].iDefaultSize
49827>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49828>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49829>>>>>>            Move "DF_BINARY"                             to aColumnType[i].sDataFlexType
49830>>>>>>            Move DF_BINARY                               to aColumnType[i].iDataFlexType
49831>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49832>>>>>>            Increment i
49833>>>>>>
49833>>>>>>            Move "real"                                  to aColumnType[i].sSQLType
49834>>>>>>            Move 700                                     to aColumnType[i].iSQLType
49835>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49836>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49837>>>>>>            Move 6                                       to aColumnType[i].iDefaultSize
49838>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49839>>>>>>            Move 6                                       to aColumnType[i].nMaxSize
49840>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49841>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49842>>>>>>            Move 6                                       to aColumnType[i].sPrecision
49843>>>>>>            Increment i
49844>>>>>>
49844>>>>>>            Move "regproc"                               to aColumnType[i].sSQLType
49845>>>>>>            Move 24                                      to aColumnType[i].iSQLType
49846>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49847>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49848>>>>>>            Move 64                                      to aColumnType[i].iDefaultSize
49849>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49850>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49851>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49852>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49853>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49854>>>>>>            Increment i
49855>>>>>>
49855>>>>>>            Move "smallint"                              to aColumnType[i].sSQLType
49856>>>>>>            Move 21                                      to aColumnType[i].iSQLType
49857>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49858>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49859>>>>>>            Move 6                                       to aColumnType[i].iDefaultSize
49860>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49861>>>>>>            Move 6                                       to aColumnType[i].nMaxSize
49862>>>>>>            Move "DF_BCD"                                to aColumnType[i].sDataFlexType
49863>>>>>>            Move DF_BCD                                  to aColumnType[i].iDataFlexType
49864>>>>>>            Move 6                                       to aColumnType[i].sPrecision
49865>>>>>>            Increment i
49866>>>>>>
49866>>>>>>            Move "text"                                  to aColumnType[i].sSQLType
49867>>>>>>            Move 25                                      to aColumnType[i].iSQLType
49868>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49869>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49870>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49871>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49872>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49873>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49874>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49875>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49876>>>>>>            Increment i
49877>>>>>>
49877>>>>>>            Move "time"                                  to aColumnType[i].sSQLType
49878>>>>>>            Move 1083                                    to aColumnType[i].iSQLType
49879>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49880>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49881>>>>>>            Move 8                                       to aColumnType[i].iDefaultSize
49882>>>>>>            Move 8                                       to aColumnType[i].iMinSize
49883>>>>>>            Move 15                                      to aColumnType[i].nMaxSize
49884>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49885>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49886>>>>>>            Move 15                                      to aColumnType[i].sPrecision
49887>>>>>>            Increment i
49888>>>>>>
49888>>>>>>            Move "timestamp"                             to aColumnType[i].sSQLType
49889>>>>>>            Move 1114                                    to aColumnType[i].iSQLType
49890>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49891>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49892>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
49893>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49894>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49895>>>>>>            Move "DF_DATETIME"                           to aColumnType[i].sDataFlexType
49896>>>>>>            Move DF_DATETIME                             to aColumnType[i].iDataFlexType
49897>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49898>>>>>>            Increment i
49899>>>>>>
49899>>>>>>            Move "timestamptz"                           to aColumnType[i].sSQLType
49900>>>>>>            Move 1184                                    to aColumnType[i].iSQLType
49901>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49902>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49903>>>>>>            Move 23                                      to aColumnType[i].iDefaultSize
49904>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49905>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49906>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49907>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49908>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49909>>>>>>            Increment i
49910>>>>>>
49910>>>>>>            Move "uuid"                                  to aColumnType[i].sSQLType
49911>>>>>>            Move 2950                                    to aColumnType[i].iSQLType
49912>>>>>>            Move False                                   to aColumnType[i].bCanEditSize
49913>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49914>>>>>>            Move 40                                      to aColumnType[i].iDefaultSize
49915>>>>>>            Move -1                                      to aColumnType[i].iMinSize
49916>>>>>>            Move -1                                      to aColumnType[i].nMaxSize
49917>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49918>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49919>>>>>>            Move -1                                      to aColumnType[i].sPrecision
49920>>>>>>            Increment i
49921>>>>>>
49921>>>>>>            Move "varbit"                                to aColumnType[i].sSQLType
49922>>>>>>            Move 1562                                    to aColumnType[i].iSQLType
49923>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49924>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49925>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49926>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49927>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49928>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49929>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49930>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49931>>>>>>            Increment i
49932>>>>>>
49932>>>>>>            Move "varchar"                               to aColumnType[i].sSQLType
49933>>>>>>            Move 1043                                    to aColumnType[i].iSQLType
49934>>>>>>            Move True                                    to aColumnType[i].bCanEditSize
49935>>>>>>            Move True                                    to aColumnType[i].bNativeDataType
49936>>>>>>            Move 1                                       to aColumnType[i].iDefaultSize
49937>>>>>>            Move 1                                       to aColumnType[i].iMinSize
49938>>>>>>            Move 16384                                   to aColumnType[i].nMaxSize
49939>>>>>>            Move "DF_ASCII"                              to aColumnType[i].sDataFlexType
49940>>>>>>            Move DF_ASCII                                to aColumnType[i].iDataFlexType
49941>>>>>>            Move 16384                                   to aColumnType[i].sPrecision
49942>>>>>>            Increment i
49943>>>>>>
49943>>>>>>
49943>>>>>
49943>>>>>//        Move ePgSQL_INT8        to ColumnType[i].iSQLType
49943>>>>>//        Move "bigint"           to ColumnType[i].sSQLType
49943>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49943>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49943>>>>>//        Move "14.0"             to ColumnType[i].sPrecision
49943>>>>>//        Move True               to ColumnType[i].bCanEditSize
49943>>>>>//        Increment i
49943>>>>>//
49943>>>>>//        Move ePgSQL_BIT         to ColumnType[i].iSQLType
49943>>>>>//        Move "bit"              to ColumnType[i].sSQLType
49943>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49943>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
49943>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49943>>>>>//        Increment i
49943>>>>>//
49943>>>>>//        Move ePgSQL_BOOL        to ColumnType[i].iSQLType
49943>>>>>//        Move "boolean"          to ColumnType[i].sSQLType
49943>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49943>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49943>>>>>//        Move "1"                to ColumnType[i].sPrecision
49943>>>>>//        Increment i
49943>>>>>//
49943>>>>>//        Move ePgSQL_BYTEA       to ColumnType[i].iSQLType
49943>>>>>//        Move "bytea"            to ColumnType[i].sSQLType
49943>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49943>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
49943>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49943>>>>>//        Increment i
49943>>>>>//
49943>>>>>//        Move ePgSQL_CHAR        to ColumnType[i].iSQLType
49943>>>>>//        Move "char"             to ColumnType[i].sSQLType
49943>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49943>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49943>>>>>//        Move "2000"             to ColumnType[i].sPrecision
49943>>>>>//        Increment i
49943>>>>>//
49943>>>>>//        Move ePgSQL_CITEXT      to ColumnType[i].iSQLType
49943>>>>>//        Move "citext"           to ColumnType[i].sSQLType
49943>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49943>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49943>>>>>//        Move "254"              to ColumnType[i].sPrecision
49943>>>>>//        Increment i
49943>>>>>//
49943>>>>>//        Move ePgSQL_DATE        to ColumnType[i].iSQLType
49943>>>>>//        Move "date"             to ColumnType[i].sSQLType
49943>>>>>//        Move DF_DATE            to ColumnType[i].iDataFlexType
49943>>>>>//        Move "Date"             to ColumnType[i].sDataFlexType
49943>>>>>//        Move "6.0"              to ColumnType[i].sPrecision
49943>>>>>//        Move True               to ColumnType[i].bCanEditSize
49943>>>>>//        Increment i
49943>>>>>//
49943>>>>>//        Move ePgSQL_FLOAT4      to ColumnType[i].iSQLType
49943>>>>>//        Move "decimal"          to ColumnType[i].sSQLType
49943>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49943>>>>>//        Move "Decimal"          to ColumnType[i].sDataFlexType
49943>>>>>//        Move "14.8"             to ColumnType[i].sPrecision
49943>>>>>//        Increment i
49943>>>>>//
49943>>>>>//        Move ePgSQL_FLOAT8      to ColumnType[i].iSQLType
49943>>>>>//        Move "double"           to ColumnType[i].sSQLType
49943>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49943>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49943>>>>>//        Move "22"               to ColumnType[i].sPrecision
49943>>>>>//        Increment i
49943>>>>>//
49943>>>>>//        Move ePgSQL_INT4        to ColumnType[i].iSQLType
49943>>>>>//        Move "integer"          to ColumnType[i].sSQLType
49943>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49943>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49943>>>>>//        Move "8.0"              to ColumnType[i].sPrecision
49943>>>>>//        Increment i
49943>>>>>//
49943>>>>>//        Move ePgSQL_MONEY       to ColumnType[i].iSQLType
49943>>>>>//        Move "money"            to ColumnType[i].sSQLType
49943>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49943>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49943>>>>>//        Move "8.0"              to ColumnType[i].sPrecision
49943>>>>>//        Increment i
49943>>>>>//
49943>>>>>//        Move ePgSQL_OID         to ColumnType[i].iSQLType
49943>>>>>//        Move "oid"              to ColumnType[i].sSQLType
49943>>>>>//        Move DF_BINARY          to ColumnType[i].iDataFlexType
49943>>>>>//        Move "Binary"           to ColumnType[i].sDataFlexType
49943>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49943>>>>>//        Increment i
49943>>>>>//
49943>>>>>//        Move ePgSQL_FLOAT4      to ColumnType[i].iSQLType
49943>>>>>//        Move "real"             to ColumnType[i].sSQLType
49943>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49943>>>>>//        Move "Real"             to ColumnType[i].sDataFlexType
49943>>>>>//        Move "6.6"              to ColumnType[i].sPrecision
49943>>>>>//        Increment i
49943>>>>>//
49943>>>>>//        Move ePgSQL_REGPROC     to ColumnType[i].iSQLType
49943>>>>>//        Move "regproc"          to ColumnType[i].sSQLType
49943>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49943>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49943>>>>>//        Move "64"               to ColumnType[i].sPrecision
49943>>>>>//        Increment i
49943>>>>>//
49943>>>>>//        Move ePgSQL_INT2        to ColumnType[i].iSQLType
49943>>>>>//        Move "smallint"         to ColumnType[i].sSQLType
49943>>>>>//        Move DF_BCD             to ColumnType[i].iDataFlexType
49943>>>>>//        Move "Numeric"          to ColumnType[i].sDataFlexType
49943>>>>>//        Move "6.0"              to ColumnType[i].sPrecision
49943>>>>>//        Increment i
49943>>>>>//
49943>>>>>//        Move ePgSQL_TEXT        to ColumnType[i].iSQLType
49943>>>>>//        Move "text"             to ColumnType[i].sSQLType
49943>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49943>>>>>//        Move "Text"             to ColumnType[i].sDataFlexType
49943>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49943>>>>>//        Increment i
49943>>>>>//
49943>>>>>//        Move ePgSQL_TIME        to ColumnType[i].iSQLType
49943>>>>>//        Move "time"             to ColumnType[i].sSQLType
49943>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49943>>>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
49943>>>>>//        Move "15.0"             to ColumnType[i].sPrecision
49943>>>>>//        Increment i
49943>>>>>//
49943>>>>>//        Move ePgSQL_TIMESTAMP   to ColumnType[i].iSQLType
49943>>>>>//        Move "timestamp"        to ColumnType[i].sSQLType
49943>>>>>//        Move DF_DATETIME        to ColumnType[i].iDataFlexType
49943>>>>>//        Move "DateTime"         to ColumnType[i].sDataFlexType
49943>>>>>//        Move "23.0"             to ColumnType[i].sPrecision
49943>>>>>//        Move True               to ColumnType[i].bCanEditSize
49943>>>>>//        Increment i
49943>>>>>//
49943>>>>>//        Move ePgSQL_UUID        to ColumnType[i].iSQLType
49943>>>>>//        Move "uuid"             to ColumnType[i].sSQLType
49943>>>>>//        Move DF_ASCII           to ColumnType[i].iDataFlexType
49943>>>>>//        Move "ASCII"            to ColumnType[i].sDataFlexType
49943>>>>>//        Move "40"               to ColumnType[i].sPrecision
49943>>>>>//        Move True               to ColumnType[i].bCanEditSize
49943>>>>>//        Increment i
49943>>>>>//
49943>>>>>//        Move ePgSQL_VARCHAR     to ColumnType[i].iSQLType
49943>>>>>//        Move "varchar"          to ColumnType[i].sSQLType
49943>>>>>//        Move DF_TEXT            to ColumnType[i].iDataFlexType
49943>>>>>//        Move "DF_TEXT"          to ColumnType[i].sDataFlexType
49943>>>>>//        Move "16384"            to ColumnType[i].sPrecision
49943>>>>>//        Increment i
49943>>>>>
49943>>>>>        Function_Return aColumnType
49944>>>>>    End_Function
49945>>>>>
49945>>>>>    // Internal usage. Use the UtilColumnTypeXXX functions instead.
49945>>>>>    Function _UtilColumnType String sDriverID Integer iDbType Integer iType String sType Boolean bIntegerInputType Returns tColumnType
49947>>>>>        Integer iValue iSize iCount iStart
49947>>>>>        tColumnType[] ColumnTypeArray
49947>>>>>        tColumnType[] ColumnTypeArray
49948>>>>>        tColumnType RetvalType
49948>>>>>        tColumnType RetvalType
49948>>>>>        String sValue
49948>>>>>        Boolean bFrameworkDataFlexType
49948>>>>>
49948>>>>>        Move "Undefined" to RetvalType.sSQLType
49949>>>>>        Move -1999       to RetvalType.iSQLType
49950>>>>>
49950>>>>>        Move 0 to iStart
49951>>>>>        Move (Uppercase(sType)) to sType
49952>>>>>        Move (iType <= -1490) to bFrameworkDataFlexType
49953>>>>>        If (bFrameworkDataFlexType = True) Begin
49955>>>>>            Get _UtilDUFDataTypeToSqlTypeMapping sDriverID iDbType iType to RetvalType
49956>>>>>            Function_Return RetvalType
49957>>>>>        End
49957>>>>>>
49957>>>>>
49957>>>>>        Get _UtilEnumerateColumnTypes sDriverID iDbType to ColumnTypeArray
49958>>>>>
49958>>>>>        Move (SizeOfArray(ColumnTypeArray)) to iSize
49959>>>>>        Decrement iSize
49960>>>>>
49960>>>>>        For iCount from iStart to iSize
49966>>>>>>
49966>>>>>            Move ColumnTypeArray[iCount].iSQLType to iValue
49967>>>>>            Move ColumnTypeArray[iCount].sSQLType to sValue
49968>>>>>            If (bIntegerInputType = True) Begin
49970>>>>>                If (iValue = iType) Begin
49972>>>>>                    Move ColumnTypeArray[iCount].sSQLType       to RetvalType.sSQLType
49973>>>>>                    Move iType                                  to RetvalType.iSQLType
49974>>>>>                    Move ColumnTypeArray[iCount].sDataFlexType  to RetvalType.sDataFlexType
49975>>>>>                    Move ColumnTypeArray[iCount].iDataFlexType  to RetvalType.iDataFlexType
49976>>>>>                    Move ColumnTypeArray[iCount].sPrecision     to RetvalType.sPrecision
49977>>>>>                    Move ColumnTypeArray[iCount].bCanEditSize   to RetvalType.bCanEditSize
49978>>>>>                    Move iSize to iCount // We're done!
49979>>>>>                End
49979>>>>>>
49979>>>>>            End
49979>>>>>>
49979>>>>>            Else Begin
49980>>>>>                Move (Uppercase(sValue)) to sValue
49981>>>>>                If (sValue = sType) Begin
49983>>>>>                    Move sType                                  to RetvalType.sSQLType
49984>>>>>                    Move ColumnTypeArray[iCount].iSQLType       to RetvalType.iSQLType
49985>>>>>                    Move ColumnTypeArray[iCount].sDataFlexType  to RetvalType.sDataFlexType
49986>>>>>                    Move ColumnTypeArray[iCount].iDataFlexType  to RetvalType.iDataFlexType
49987>>>>>                    Move ColumnTypeArray[iCount].sPrecision     to RetvalType.sPrecision
49988>>>>>                    Move ColumnTypeArray[iCount].bCanEditSize   to RetvalType.bCanEditSize
49989>>>>>                    Move iSize to iCount // We're done!
49990>>>>>                End
49990>>>>>>
49990>>>>>            End
49990>>>>>>
49990>>>>>        Loop
49991>>>>>>
49991>>>>>
49991>>>>>        // If no match was found it was probably because it was a DataFlex standard type that was passed.
49991>>>>>        // In which case we search for a match in DataFlex standard types:
49991>>>>>        If (RetvalType.sSQLType = "Undefined") Begin
49993>>>>>            Get _UtilEnumerateDataFlexTypes to ColumnTypeArray
49994>>>>>            Move (SizeOfArray(ColumnTypeArray)) to iSize
49995>>>>>            Decrement iSize
49996>>>>>
49996>>>>>            For iCount from iStart to iSize
50002>>>>>>
50002>>>>>                Move ColumnTypeArray[iCount].iSQLType to iValue
50003>>>>>                Move ColumnTypeArray[iCount].sSQLType to sValue
50004>>>>>                If (iValue = iType) Begin
50006>>>>>                    Move ColumnTypeArray[iCount].sSQLType       to RetvalType.sSQLType
50007>>>>>                    Move iType                                  to RetvalType.iSQLType
50008>>>>>                    Move ColumnTypeArray[iCount].sDataFlexType  to RetvalType.sDataFlexType
50009>>>>>                    Move ColumnTypeArray[iCount].iDataFlexType  to RetvalType.iDataFlexType
50010>>>>>                    Move ColumnTypeArray[iCount].sPrecision     to RetvalType.sPrecision
50011>>>>>                    Move ColumnTypeArray[iCount].bCanEditSize   to RetvalType.bCanEditSize
50012>>>>>                    Move iSize to iCount // We're done!
50013>>>>>                End
50013>>>>>>
50013>>>>>            Loop
50014>>>>>>
50014>>>>>        End
50014>>>>>>
50014>>>>>
50014>>>>>        Function_Return RetvalType
50015>>>>>    End_Function
50016>>>>>
50016>>>>>    // Returns a struct array with all data types for the passed driver & dbtype.
50016>>>>>    Function _UtilEnumerateColumnTypes String sDriverID Integer iDbType Returns tColumnType[]
50018>>>>>        tColumnType[] ColumnType
50018>>>>>        tColumnType[] ColumnType
50019>>>>>
50019>>>>>        // We need to treat DAW's ODBC driver a bit different, as the output depends on
50019>>>>>        // the dbType.
50019>>>>>        If (sDriverID = ODBC_DRV_ID) Begin
50021>>>>>            If (iDbType = EN_DbTypeMySQL) Begin
50023>>>>>                Move ODBC_DRV_ID to sDriverID
50024>>>>>            End
50024>>>>>>
50024>>>>>            If (iDbType = EN_DbTypeMSSQL) Begin
50026>>>>>                Move MSSQLDRV_ID to sDriverID
50027>>>>>            End
50027>>>>>>
50027>>>>>            If (iDbType = EN_DbTypeDB2) Begin
50029>>>>>                Move DB2_DRV_ID to sDriverID
50030>>>>>            End
50030>>>>>>
50030>>>>>            If (iDbType = EN_DbTypePostgre) Begin
50032>>>>>                Move ODBC_DRV_ID to sDriverID
50033>>>>>            End
50033>>>>>>
50033>>>>>        End
50033>>>>>>
50033>>>>>
50033>>>>>        Case Begin
50033>>>>>            Case (iDbType = EN_dbTypeDataFlex)
50035>>>>>                Get _UtilEnumerateDataFlexTypes to ColumnType
50036>>>>>                Case Break
50037>>>>>
50037>>>>>            Case (iDbType = EN_DbTypeDB2)
50040>>>>>                Get _UtilEnumerateDB2Types to ColumnType
50041>>>>>                Case Break
50042>>>>>
50042>>>>>            Case (iDbType = EN_DbTypeMSSQL)
50045>>>>>                Get _UtilEnumerateMSSQLTypes sDriverID to ColumnType
50046>>>>>                Case Break
50047>>>>>        Case End
50047>>>>>
50047>>>>>        Function_Return ColumnType
50048>>>>>    End_Function
50049>>>>>
50049>>>>>    // Returns a struct with the default column types for the SQL back-end and how they
50049>>>>>    // are mapped to a DUF data type.
50049>>>>>    Function _UtilDUFDataTypeToSqlTypeMapping String sDriverID Integer iDbType Integer iType Returns tColumnType
50051>>>>>        tColumnType ColumnType
50051>>>>>        tColumnType ColumnType
50051>>>>>        String sDataType
50051>>>>>        Integer iDriverID iCount
50051>>>>>
50051>>>>>        Move 0 to iCount
50052>>>>>        Get DriverIndex sDriverID to iDriverID
50053>>>>>
50053>>>>>        Case Begin
50053>>>>>            // DF_ASCII
50053>>>>>            Case (iType = DF_ASCII_DUF)
50055>>>>>                If (sDriverID = ODBC_DRV_ID) Begin
50057>>>>>                    Get_Attribute DF_DRIVER_MAP_DFASCII_TO_ODBCTYPE of iDriverID to sDataType
50060>>>>>                End
50060>>>>>>
50060>>>>>                Else Begin
50061>>>>>                    Get_Attribute DF_DRIVER_MAP_DFASCII_TO_SQLTYPE  of iDriverID to sDataType
50064>>>>>                End
50064>>>>>>
50064>>>>>                Move DF_ASCII    to ColumnType.iDataFlexType
50065>>>>>                Move "ASCII"     to ColumnType.sDataFlexType
50066>>>>>                Move sDataType   to ColumnType.sSQLType
50067>>>>>                Move DF_ASCII    to ColumnType.iSQLType
50068>>>>>                Move False       to ColumnType.bCanEditSize
50069>>>>>                Case Break
50070>>>>>
50070>>>>>            // DF_BINARY
50070>>>>>            Case (iType = DF_BINARY_DUF)
50073>>>>>                If (sDriverID = ODBC_DRV_ID) Begin
50075>>>>>                    Get_Attribute DF_DRIVER_MAP_DFBINARY_TO_ODBCTYPE of iDriverID to sDataType
50078>>>>>                End
50078>>>>>>
50078>>>>>                Else Begin
50079>>>>>                    Get_Attribute DF_DRIVER_MAP_DFBINARY_TO_SQLTYPE  of iDriverID to sDataType
50082>>>>>                End
50082>>>>>>
50082>>>>>                Move DF_BINARY   to ColumnType.iDataFlexType
50083>>>>>                Move "Binary"    to ColumnType.sDataFlexType
50084>>>>>                Move sDataType   to ColumnType.sSQLType
50085>>>>>                Move DF_BINARY   to ColumnType.iSQLType
50086>>>>>                Move False       to ColumnType.bCanEditSize
50087>>>>>                Case Break
50088>>>>>
50088>>>>>            // DF_DATE
50088>>>>>            Case (iType = DF_DATE_DUF)
50091>>>>>                If (sDriverID = ODBC_DRV_ID) Begin
50093>>>>>                    Get_Attribute DF_DRIVER_MAP_DFDATE_TO_ODBCTYPE of iDriverID to sDataType
50096>>>>>                End
50096>>>>>>
50096>>>>>                Else Begin
50097>>>>>                    Get_Attribute DF_DRIVER_MAP_DFDATE_TO_SQLTYPE  of iDriverID to sDataType
50100>>>>>                End
50100>>>>>>
50100>>>>>                Move DF_DATE     to ColumnType.iDataFlexType
50101>>>>>                Move "Date"      to ColumnType.sDataFlexType
50102>>>>>                Move sDataType   to ColumnType.sSQLType
50103>>>>>                Move DF_DATE     to ColumnType.iSQLType
50104>>>>>                Move True        to ColumnType.bCanEditSize
50105>>>>>                Case Break
50106>>>>>
50106>>>>>            // DF_DATETIME
50106>>>>>            Case (iType = DF_DATETIME_DUF)
50109>>>>>                If (sDriverID = ODBC_DRV_ID) Begin
50111>>>>>                    Get_Attribute DF_DRIVER_MAP_DFDATETIME_TO_ODBCTYPE of iDriverID to sDataType
50114>>>>>                End
50114>>>>>>
50114>>>>>                Else Begin
50115>>>>>                    Get_Attribute DF_DRIVER_MAP_DFDATETIME_TO_SQLTYPE  of iDriverID to sDataType
50118>>>>>                End
50118>>>>>>
50118>>>>>                Move DF_DATETIME to ColumnType.iDataFlexType
50119>>>>>                Move "DateTime"  to ColumnType.sDataFlexType
50120>>>>>                Move sDataType   to ColumnType.sSQLType
50121>>>>>                Move DF_DATETIME to ColumnType.iSQLType
50122>>>>>                Move True        to ColumnType.bCanEditSize
50123>>>>>                Case Break
50124>>>>>
50124>>>>>            // DF_NUMERIC
50124>>>>>            // *** Why is there no DF_DRIVER_MAP available for BCD/Numeric??? ***
50124>>>>>            // DF_BCD can in SQL be either of "SmallInt", "Int", or "Numeric", but
50124>>>>>            // we make them here all "Numeric"...
50124>>>>>            // If (sDriverID = ODBC_DRV_ID) Begin
50124>>>>>            //     Get_Attribute DF_DRIVER_MAP_DFDATE_TO_ODBCTYPE of iDriverID to sDataType
50124>>>>>            // End
50124>>>>>            // Else Begin
50124>>>>>            //     Get_Attribute DF_DRIVER_MAP_DFDATE_TO_SQLTYPE  of iDriverID to sDataType
50124>>>>>            // End
50124>>>>>            // ToDo: How should we find the best "Numeric" data type here?
50124>>>>>            Case (iType = DF_BCD_DUF)
50127>>>>>                Move DF_BCD      to ColumnType.iDataFlexType
50128>>>>>                Move "Numeric"   to ColumnType.sDataFlexType
50129>>>>>                Move "Numeric"   to ColumnType.sSQLType
50130>>>>>                Move SQL_NUMERIC to ColumnType.iSQLType
50131>>>>>                Move False       to ColumnType.bCanEditSize
50132>>>>>                Case Break
50133>>>>>
50133>>>>>            // DF_TEXT
50133>>>>>            Case (iType = DF_TEXT_DUF)
50136>>>>>                If (sDriverID = ODBC_DRV_ID) Begin
50138>>>>>                    Get_Attribute DF_DRIVER_MAP_DFTEXT_TO_ODBCTYPE of iDriverID to sDataType
50141>>>>>                End
50141>>>>>>
50141>>>>>                Else Begin
50142>>>>>                    Get_Attribute DF_DRIVER_MAP_DFTEXT_TO_SQLTYPE  of iDriverID to sDataType
50145>>>>>                End
50145>>>>>>
50145>>>>>                Move DF_TEXT     to ColumnType.iDataFlexType
50146>>>>>                Move "Text"      to ColumnType.sDataFlexType
50147>>>>>                Move sDataType   to ColumnType.sSQLType
50148>>>>>                Move DF_TEXT     to ColumnType.iSQLType
50149>>>>>                Move False       to ColumnType.bCanEditSize
50150>>>>>                Case Break
50151>>>>>
50151>>>>>            Case Else
50151>>>>>                Move -1999       to ColumnType.iDataFlexType
50152>>>>>                Move "Undefined" to ColumnType.sDataFlexType
50153>>>>>                Move "Undefined" to ColumnType.sSQLType
50154>>>>>                Move -1999       to ColumnType.iSQLType
50155>>>>>                Move True        to ColumnType.bCanEditSize
50156>>>>>
50156>>>>>        Case End
50156>>>>>
50156>>>>>        Function_Return ColumnType
50157>>>>>    End_Function
50158>>>>>
50158>>>>>    Function _AllTablesToConvert Returns Integer[]
50160>>>>>        Integer[] aTableConvertExceptions iTablesArray
50162>>>>>        Handle hTable
50162>>>>>        Integer iIndex
50162>>>>>        String sTableName
50162>>>>>        Boolean bFlexErrs
50162>>>>>
50162>>>>>        // a) Get the exception table array the developer has specified
50162>>>>>        Get paTableConvertExceptions to aTableConvertExceptions
50163>>>>>
50163>>>>>        // b) Add CodeMast, CodeType & DbVersion to exceptions
50163>>>>>        Repeat
50163>>>>>>
50163>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
50166>>>>>            If (hTable <> 0) Begin
50168>>>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
50171>>>>>                Move (Uppercase(sTableName) = "FLEXERRS")  to bFlexErrs
50172>>>>>                If (bFlexErrs = False) Begin
50174>>>>>                    If (Uppercase(sTableName) = "CODEMAST" or Uppercase(sTableName) = "CODETYPE" or Uppercase(sTableName) = "DBVERSION") Begin
50176>>>>>                        Move (SearchArray(hTable, aTableConvertExceptions)) to iIndex
50177>>>>>                        If (iIndex = -1) Begin
50179>>>>>                            Move hTable to aTableConvertExceptions[SizeOfArray(aTableConvertExceptions)]
50180>>>>>                        End
50180>>>>>>
50180>>>>>                    End
50180>>>>>>
50180>>>>>                End
50180>>>>>>
50180>>>>>            End
50180>>>>>>
50180>>>>>        Until (hTable = 0)
50182>>>>>
50182>>>>>        Move 0 to hTable
50183>>>>>
50183>>>>>        // c) Spin through filelist.cfg and add all tables except those from the exception array, to the return array.
50183>>>>>        Repeat
50183>>>>>>
50183>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
50186>>>>>            If (hTable > 0) Begin
50188>>>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
50191>>>>>                Move (Uppercase(sTableName) = "FLEXERRS")  to bFlexErrs
50192>>>>>                If (bFlexErrs = False) Begin
50194>>>>>                    Move (SearchArray(hTable, aTableConvertExceptions)) to iIndex
50195>>>>>                    If (iIndex = -1) Begin
50197>>>>>                        Move hTable to iTablesArray[SizeOfArray(iTablesArray)]
50198>>>>>                    End
50198>>>>>>
50198>>>>>                End
50198>>>>>>
50198>>>>>            End
50198>>>>>>
50198>>>>>        Until (hTable = 0)
50200>>>>>
50200>>>>>        Function_Return iTablesArray
50201>>>>>    End_Function
50202>>>>>
50202>>>>>    Function _AllTablesDateCorrections Returns Integer[]
50204>>>>>        Integer[] aTableDateCorrectionExceptions iTablesArray
50206>>>>>        Handle hTable
50206>>>>>        Integer iIndex
50206>>>>>        String sTableName
50206>>>>>        Boolean bFlexErrs
50206>>>>>
50206>>>>>        Get paTableDateCorrectionExceptions to aTableDateCorrectionExceptions
50207>>>>>        Move 0 to hTable
50208>>>>>
50208>>>>>        // Spin through filelist.cfg and add all tables except those from the exception array, to the return array.
50208>>>>>        Repeat
50208>>>>>>
50208>>>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
50211>>>>>            If (hTable > 0) Begin
50213>>>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
50216>>>>>                Move (Uppercase(sTableName) = "FLEXERRS")  to bFlexErrs
50217>>>>>                If (bFlexErrs = False) Begin
50219>>>>>                    Move (SearchArray(hTable, aTableDateCorrectionExceptions)) to iIndex
50220>>>>>                    If (iIndex = -1) Begin
50222>>>>>                        Move hTable to iTablesArray[SizeOfArray(iTablesArray)]
50223>>>>>                    End
50223>>>>>>
50223>>>>>                End
50223>>>>>>
50223>>>>>            End
50223>>>>>>
50223>>>>>        Until (hTable = 0)
50225>>>>>
50225>>>>>        Function_Return iTablesArray
50226>>>>>    End_Function
50227>>>>>
50227>>>>>    Function _AppendAPIColumn tAPIColumn[] aCurrent String sFieldName Integer iType Integer iLength Integer iPrecision Integer iOptions Returns tAPIColumn[]
50229>>>>>        tAPIColumn NewAPIColumn
50229>>>>>        tAPIColumn NewAPIColumn
50229>>>>>
50229>>>>>        Move sFieldName to NewAPIColumn.sFieldName
50230>>>>>        Move iType      to NewAPIColumn.iType
50231>>>>>        Move iLength    to NewAPIColumn.iLength
50232>>>>>        Move iPrecision to NewAPIColumn.iPrecision
50233>>>>>        Move iOptions   to NewAPIColumn.iOptions
50234>>>>>
50234>>>>>        Move NewAPIColumn to aCurrent[SizeOfArray(aCurrent)]
50235>>>>>
50235>>>>>        Function_Return aCurrent
50236>>>>>    End_Function
50237>>>>>
50237>>>>>    Function _UtilIndexAppendSegmentFieldNames tAPIIndexSegment[] APIIndexSegment Returns String
50239>>>>>        String sRetval sFieldName
50239>>>>>        Integer iCount iSize
50239>>>>>
50239>>>>>        Move (SizeOfArray(APIIndexSegment)) to iSize
50240>>>>>        Decrement iSize
50241>>>>>        For iCount from 0 to iSize
50247>>>>>>
50247>>>>>            Move APIIndexSegment[iCount].sFieldName to sFieldName
50248>>>>>            Move (sRetval * (String(sFieldName))) to sRetval
50249>>>>>        Loop
50250>>>>>>
50250>>>>>        Move (Trim(sRetval)) to sRetval
50251>>>>>
50251>>>>>        Function_Return sRetval
50252>>>>>    End_Function
50253>>>>>
50253>>>>>    // *** Miscellaneous other functions ***
50253>>>>>    // Some of which can be used by both "Sqlxxx" and "Apixxx" functions.
50253>>>>>    //
50253>>>>>
50253>>>>>    // Callback functionality used when e.g. calling driver functions directly.
50253>>>>>    Function Callback String sCallback_Text Integer iCallback_Type Returns Integer
50255>>>>>        Integer iPerc
50255>>>>>        Number nReady nTotal
50255>>>>>
50255>>>>>        Send DoAdvance of ghoProgressBar
50256>>>>>
50256>>>>>        If (sCallback_Text contains "Copy records") Begin
50258>>>>>            Move CS_DUF_CopyingData to sCallback_Text
50259>>>>>        End
50259>>>>>>
50259>>>>>        If (sCallback_Text contains "Dropping index" or sCallback_Text contains "Temporary delete of all indices of table") Begin
50261>>>>>            Move (Replace("Dropping index", sCallback_Text, CS_DUF_DeletingIndex)) to sCallback_Text
50262>>>>>            Move (Replace("Temporary delete of all indices of table", sCallback_Text, CS_DUF_DeletingIndex)) to sCallback_Text
50263>>>>>        End
50263>>>>>>
50263>>>>>        If (sCallback_Text contains "Creating index") Begin
50265>>>>>            Move (Replace("Creating index", sCallback_Text, CS_DUF_CreatingIndex)) to sCallback_Text
50266>>>>>        End
50266>>>>>>
50266>>>>>
50266>>>>>        Case Begin
50266>>>>>            Case (iCallback_Type = DF_Message_Text)
50268>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50269>>>>>                Set Action_Text  of ghoStatusPanel to ""
50270>>>>>                Case Break
50271>>>>>            Case (iCallback_Type = DF_Message_Heading_1)
50274>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50275>>>>>                Set Action_Text  of ghoStatusPanel to ""
50276>>>>>                Case Break
50277>>>>>            Case (iCallback_Type = DF_Message_Heading_2)
50280>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50281>>>>>                Set Action_Text  of ghoStatusPanel to ""
50282>>>>>                Case Break
50283>>>>>            Case (iCallback_Type = DF_Message_Heading_3)
50286>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50287>>>>>                Set Action_Text  of ghoStatusPanel to ""
50288>>>>>                Case Break
50289>>>>>            Case (iCallback_Type = DF_Message_Heading_4)
50292>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50293>>>>>                Set Action_Text  of ghoStatusPanel to ""
50294>>>>>                Case Break
50295>>>>>            Case (iCallback_Type = DF_Message_Heading_5)
50298>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50299>>>>>                Set Action_Text  of ghoStatusPanel to ""
50300>>>>>                Case Break
50301>>>>>            Case (iCallback_Type = DF_Message_Warning)
50304>>>>>                Send None
50305>>>>>                Case Break
50306>>>>>            Case (iCallback_Type = DF_Message_Progress_Title)
50309>>>>>                Set Message_Text of ghoStatusPanel to sCallback_Text
50310>>>>>                Set Action_Text  of ghoStatusPanel to ""
50311>>>>>                Case Break
50312>>>>>            Case (iCallback_Type = DF_Message_Progress_Value)
50315>>>>>                //*** Interpret numbers
50315>>>>>                Move (Left(sCallback_Text, (Pos(",", sCallback_Text) - 1)))                       to nReady
50316>>>>>                Move (Right(sCallback_Text, (Length(sCallback_Text) - Pos(",", sCallback_Text)))) to nTotal
50317>>>>>                Move ((nReady / nTotal) * 100)                                                    to iPerc
50318>>>>>                Set Action_Text of ghoStatusPanel to (String(iPerc) * String("% Done (Total Number of Records:") * String(nTotal) + ")")
50319>>>>>                Case Break
50320>>>>>            Case Else
50320>>>>>                Set Message_Text to ""
50321>>>>>                Set Action_Text  to ""
50322>>>>>        Case End
50322>>>>>
50322>>>>>        Send ProcessEvents of ghoStatusPanel
50323>>>>>        Function_Return False
50324>>>>>    End_Function
50325>>>>>
50325>>>>>    // * Dummy function for the Studio's Code Explorer *
50325>>>>>    Function PRIVATE_SUB_FUNCTIONS Returns Boolean
50327>>>>>        Function_Return False
50328>>>>>    End_Function
50329>>>>>
50329>>>>>    // *** Helper functions with compiled sql script code ***
50329>>>>>    //
50329>>>>>    // When dropping columns on some SQL back-ends they doesn't reclaim the space taken up by the columns dropped.
50329>>>>>    // For data types that are stored inline in the rows (int for example) it may even take up space on
50329>>>>>    // the new rows added after the alter statement. to get around this you need to create a clustered
50329>>>>>    // index on the table _or_ rebuild the clustered Index if it already has one. Rebuilding the index
50329>>>>>    // can be done with a REBUILD command after modifying the table. But be warned this can be slow on very big tables.
50329>>>>>    //   ALTER TABLE MyTable
50329>>>>>    //       REBUILD
50329>>>>>    Function _SqlUtilRemoveTableColumnMSSQL String sTableName String sColumnName Returns Boolean
50331>>>>>        Boolean bOK
50331>>>>>
50331>>>>>        If (Trim(sTableName) = "" or Trim(sColumnName) = "") Begin
50333>>>>>            Function_Return False
50334>>>>>        End
50334>>>>>>
50334>>>>>
50334>>>>>        SQLIncludeScriptFile ..\Scripts\DropConstraintAndColumnNameMSSQL.sql as DropConstraintAndColumnNameMSSQL.sql
50334>>>>>        Get _SqlUtilRemoveTableColumnByScript "DropConstraintAndColumnNameMSSQL.sql" sTableName sColumnName to bOK
50335>>>>>
50335>>>>>        Function_Return (bOK = True)
50336>>>>>    End_Function
50337>>>>>
50337>>>>>    // When dropping columns SQL Sever does not reclaim the space taken up by the columns dropped.
50337>>>>>    // For data types that are stored inline in the rows (int for example) it may even take up space on
50337>>>>>    // the new rows added after the alter statement. To get around this you need to create a clustered
50337>>>>>    // index on the table or rebuild the clustered Index if it already has one. Rebuilding the index
50337>>>>>    // can be done with a REBUILD command after modifying the table. But be warned this can be slow on very big tables.
50337>>>>>    //   ALTER TABLE MyTable
50337>>>>>    //       REBUILD
50337>>>>>    Function _SqlUtilRemoveTableColumnByScript String sMemScriptFile String sTableName String sColumnName Returns Boolean
50339>>>>>        tSQLScriptArray SQLScriptArray
50339>>>>>        tSQLScriptArray SQLScriptArray
50339>>>>>        String sDriverID
50339>>>>>        Boolean bOK
50339>>>>>        Integer iSize iCount
50339>>>>>
50339>>>>>        If (Trim(sTableName) = "" or Trim(sColumnName) = "") Begin
50341>>>>>            Function_Return False
50342>>>>>        End
50342>>>>>>
50342>>>>>
50342>>>>>        Get psDriverID to sDriverID
50343>>>>>        Get _SqlUtilReadResource sMemScriptFile to SQLScriptArray
50344>>>>>        If (SQLScriptArray.bError = True) Begin
50346>>>>>            Function_Return False
50347>>>>>        End
50347>>>>>>
50347>>>>>
50347>>>>>        Move (SizeOfArray(SQLScriptArray.sSQLScriptArray)) to iSize
50348>>>>>        Decrement iSize
50349>>>>>
50349>>>>>        For iCount from 0 to iSize
50355>>>>>>
50355>>>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "TABLE_NAME_XXX") Begin
50357>>>>>                Move (Replaces("TABLE_NAME_XXX",  SQLScriptArray.sSQLScriptArray[iCount], String(sTableName))) to SQLScriptArray.sSQLScriptArray[iCount]
50358>>>>>            End
50358>>>>>>
50358>>>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "COLUMN_NAME_XXX") Begin
50360>>>>>                Move (Replaces("COLUMN_NAME_XXX", SQLScriptArray.sSQLScriptArray[iCount], String(sColumnName))) to SQLScriptArray.sSQLScriptArray[iCount]
50361>>>>>            End
50361>>>>>>
50361>>>>>        Loop
50362>>>>>>
50362>>>>>
50362>>>>>        Get _SqlUtilExecuteEmbeddedScript SQLScriptArray sDriverID False "" to bOK
50363>>>>>
50363>>>>>        Function_Return (bOK = True)
50364>>>>>    End_Function
50365>>>>>
50365>>>>>    // Reads a SQL script file that has been compiled into the .exe program as a resource.
50365>>>>>    // Pass: The memory resource reference and a boolean True if you want to create the file on disk (in the Home folder).
50365>>>>>    // Returns: A tSQLScriptArray Struct with the Sql script as an uChar Array will be returned along with the a bError boolean.
50365>>>>>    Function _SqlUtilReadResource String sMemFileName Returns tSQLScriptArray
50367>>>>>        Integer iChannel iArgumentSize iCount
50367>>>>>        Number nByteCount
50367>>>>>        String sSQLScript
50367>>>>>        tSQLScriptArray SqlScriptArray
50367>>>>>        tSQLScriptArray SqlScriptArray
50367>>>>>        UChar[] uCharData
50368>>>>>
50368>>>>>        Move False to Err
50369>>>>>        Get Seq_New_Channel to iChannel
50370>>>>>        If (iChannel = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
50372>>>>>            Error DFERR_PROGRAM 'No channel available...'
50373>>>>>>
50373>>>>>            Move True to SqlScriptArray.bError
50374>>>>>            Function_Return SqlScriptArray
50375>>>>>        End
50375>>>>>>
50375>>>>>
50375>>>>>        // First decide the size of the script
50375>>>>>        Direct_Input channel iChannel ("Resource: " + sMemFileName)
50377>>>>>        Read_Block channel iChannel uCharData -1 // -1 means that all data should be read.
50379>>>>>        Close_Input channel iChannel
50381>>>>>
50381>>>>>        Move (SizeOfArray(uCharData)) to nByteCount
50382>>>>>        If (nByteCount  < 1) Begin
50384>>>>>            Send Seq_Release_Channel iChannel
50385>>>>>            Move True to SqlScriptArray.bError
50386>>>>>            Function_Return SqlScriptArray
50387>>>>>        End
50387>>>>>>
50387>>>>>
50387>>>>>        // If necessary change the string argument_size
50387>>>>>        // Read the script file from memory line-by-line
50387>>>>>        Direct_Input channel iChannel ("Resource: " + sMemFileName)
50389>>>>>            Move 0 to iCount
50390>>>>>            Repeat
50390>>>>>>
50390>>>>>                Readln channel iChannel sSQLScript
50392>>>>>                Move sSQLScript to SqlScriptArray.sSQLScriptArray[iCount]
50393>>>>>                Increment iCount
50394>>>>>            Until (SeqEof = True)
50396>>>>>        Close_Input channel iChannel
50398>>>>>        Send Seq_Release_Channel iChannel
50399>>>>>
50399>>>>>        // Finally "sanitize" the script by removing all comments.
50399>>>>>        Get _SqlUtilSanitizeScript SqlScriptArray to SqlScriptArray
50400>>>>>
50400>>>>>        Function_Return SqlScriptArray
50401>>>>>    End_Function
50402>>>>>
50402>>>>>    Function _SqlUtilExecuteEmbeddedScript tSQLScriptArray SQLScriptArray String sDriverID Boolean bCreateScriptFile String sMemFileName Boolean bShowProgr Returns Boolean
50404>>>>>        String sSQLVal sStmt sCR sGOKeyWord sNoCountKeyWord sMessage sExportFile
50404>>>>>        Handle hoSql hoSQLConnect hoStmt hoError
50404>>>>>        Integer i iMsgs iRows iRowType iCount iChunkCounter iChunkMax iOut iNextSet iMessage iPos
50404>>>>>        String[] sMsg aSQLQueryMessages
50406>>>>>        DateTime dtQueryExecStart dtQueryExecEnd
50406>>>>>        TimeSpan tsQuery
50406>>>>>        tSqlErrorArray aSqlErrorArray
50406>>>>>        tSqlErrorArray aSqlErrorArray
50406>>>>>        tSQLConnection SQLConnection
50406>>>>>        tSQLConnection SQLConnection
50406>>>>>        Boolean bShowProgress
50406>>>>>
50406>>>>>        If (num_arguments > 4) Begin
50408>>>>>            Move bShowProgr to bShowProgress
50409>>>>>        End
50409>>>>>>
50409>>>>>        Get phoSQLManager to hoSql
50410>>>>>
50410>>>>>        Get _SqlFindKeyWord CI_SQLGO to sGOKeyWord
50411>>>>>        // There seems to be a problem to pass strings when their value gets really big, aka
50411>>>>>        // above the argument_size level. It isn't clear when these problems starts but sooner
50411>>>>>        // or later SqlExecDirect stops working correctly with no error messages!
50411>>>>>        // To guard from this we set a max number of lines (iChunkMax) that can be processed
50411>>>>>        // at a time. Testing with the Create Chinook Database script; 500 seems like a number that works fine.
50411>>>>>        // A bonus of this is that it turns out that it is actually faster to run in chunks!
50411>>>>>        Get piChunkMax to iChunkMax
50412>>>>>        Move 0 to iChunkCounter
50413>>>>>        Move "" to sStmt
50414>>>>>
50414>>>>>        Get _SqlFindKeyWord CI_SQLSetNoCountOn to sNoCountKeyWord
50415>>>>>        Move (Character(13) + Character(10)) to sCR
50416>>>>>
50416>>>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
50417>>>>>
50417>>>>>        Get phoSQLManager  to hoSQL
50418>>>>>        If (sDriverID = ODBC_DRV_ID) Begin
50420>>>>>            If (Uppercase(SQLConnection.sConnectionString) contains CS_SQLIniDSNKeyword) Begin
50422>>>>>                Move (Pos(";", SQLConnection.sConnectionString)) to iPos
50423>>>>>                If (iPos > 0) Begin
50425>>>>>                    Move (Left(SQLConnection.sConnectionString, (iPos - 1))) to SQLConnection.sConnectionString
50426>>>>>                    Move (Trim(SQLConnection.sConnectionString)) to SQLConnection.sConnectionString
50427>>>>>                End
50427>>>>>>
50427>>>>>            End
50427>>>>>>
50427>>>>>        End
50427>>>>>>
50427>>>>>        Send SqlSetConnect of hoSQL sDriverID SQLConnection.sConnectionString
50428>>>>>        Get SqlConnect     of hoSQL "" "" to hoSQLConnect
50429>>>>>
50429>>>>>        If (hoSQLConnect <> 0) Begin
50431>>>>>            Move False to Err
50432>>>>>            Get SqlOpen of hoSQLConnect to hoStmt
50433>>>>>            If (hoStmt <> 0) Begin
50435>>>>>
50435>>>>>                // If the embedded resource should be written as a script file to disk:
50435>>>>>                If (bCreateScriptFile = True) Begin
50437>>>>>                    Get psHome of (phoWorkspace(ghoApplication)) to sExportFile
50438>>>>>                    Get vFolderFormat sExportFile to sExportFile
50439>>>>>                    Move (sExportFile + sMemFileName) to sExportFile
50440>>>>>                    Get Seq_New_Channel to iOut
50441>>>>>                    If (iOut <> DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
50443>>>>>                        Direct_Output channel iOut sExportFile
50445>>>>>                    End
50445>>>>>>
50445>>>>>                End
50445>>>>>>
50445>>>>>
50445>>>>>                // Record starting date/time stamp
50445>>>>>                Move (CurrentDateTime()) to dtQueryExecStart
50446>>>>>                // Turn on error handling if enabled
50446>>>>>                If (pbHandleQueryErrors(Self)) Begin
50448>>>>>                    Set pbSqlError to False
50449>>>>>                    Set paSqlErrorArray to aSqlErrorArray
50450>>>>>                    Move Error_Object_Id to hoError
50451>>>>>                    Move Self to Error_Object_Id
50452>>>>>                End
50452>>>>>>
50452>>>>>
50452>>>>>                Move (SizeOfArray(SQLScriptArray.sSQLScriptArray)) to iRows
50453>>>>>                Decrement iRows
50454>>>>>                If (sDriverID = MSSQLDRV_ID) Begin
50456>>>>>                    Move (sNoCountKeyWord + sCR) to sStmt
50457>>>>>                End
50457>>>>>>
50457>>>>>
50457>>>>>                for iCount from 0 to iRows
50463>>>>>>
50463>>>>>                    Move (SQLScriptArray.sSQLScriptArray[iCount]) to sSQLVal
50464>>>>>
50464>>>>>                    If (Uppercase(sSQLVal) <> sGOKeyWord) Begin
50466>>>>>                        If (sSQLVal <> "") Begin
50468>>>>>                            Move (sSQLVal + sCR) to sSQLVal
50469>>>>>                        End
50469>>>>>>
50469>>>>>                        Move (Append(sStmt, (sSQLVal))) to sStmt
50470>>>>>                    End
50470>>>>>>
50470>>>>>
50470>>>>>                    // - Each time we encounter a "GO" statement we execute it,
50470>>>>>                    // or if at the very end of the script.
50470>>>>>                    If (Uppercase(sSQLVal) = sGOKeyWord or iChunkCounter >= iChunkMax or iCount = iRows) Begin
50472>>>>>
50472>>>>>                        // - It turns out it can be at least 10 times faster to execute SQL statements in chunks,
50472>>>>>                        // instead of all in one go.
50472>>>>>                        Send SqlExecDirect of hoStmt sStmt
50473>>>>>
50473>>>>>                        If (bCreateScriptFile = True) Begin
50475>>>>>                            Write channel iOut sStmt
50477>>>>>                        End
50477>>>>>>
50477>>>>>                        Move "" to sStmt
50478>>>>>                        Move 0 to iChunkCounter
50479>>>>>                    End
50479>>>>>>
50479>>>>>                    Increment iChunkCounter
50480>>>>>                Loop
50481>>>>>>
50481>>>>>
50481>>>>>                Repeat
50481>>>>>>
50481>>>>>                    If (pbHandleQueryErrors(Self)) Begin
50483>>>>>                        Move hoError to Error_Object_Id
50484>>>>>                    End
50484>>>>>>
50484>>>>>                    Move (CurrentDateTime()) to dtQueryExecEnd
50485>>>>>
50485>>>>>                    Send _SqlColumnInfo hoStmt
50486>>>>>                    Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_ROWCOUNT to iRows
50487>>>>>                    Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_ROWCOUNT_TYPE to iRowType
50488>>>>>                    Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_NUMMESSAGES to iMsgs
50489>>>>>                    Set piRows    to iRows
50490>>>>>                    Set piRowType to iRowType
50491>>>>>
50491>>>>>                    If (iMsgs <> 0) Begin
50493>>>>>                        If (ghoDbUpdateHandler > 0) Begin
50495>>>>>                            Get paSQLQueryMessages of ghoDbUpdateHandler to aSQLQueryMessages
50496>>>>>                        End
50496>>>>>>
50496>>>>>                        for i from 1 to iMsgs
50502>>>>>>
50502>>>>>                            Get SqlGetMessage of hoStmt i to sMessage
50503>>>>>                            Get RemoveComponentIdentifier of hoStmt sMessage to sMessage
50504>>>>>                            If (bShowProgress = True) Begin
50506>>>>>                                If (Active_State(ghoStatusPanel)) Begin
50508>>>>>                                    Send Update_StatusPanel of ghoStatusPanel (Sformat("  SQLGetMessage iMessage %1 returned [%2]", iMessage, sMessage))
50509>>>>>                                End
50509>>>>>>
50509>>>>>                                Else Begin
50510>>>>>                                    Showln (Sformat("  SQLGetMessage iMessage %1 returned [%2]", iMessage, sMessage))
50512>>>>>                                End
50512>>>>>>
50512>>>>>                            End
50512>>>>>>
50512>>>>>                            Move sMessage to sMsg[SizeOfArray(sMsg)]
50513>>>>>                            Move sMessage to aSQLQueryMessages[SizeOfArray(aSQLQueryMessages)]
50514>>>>>                        Loop
50515>>>>>>
50515>>>>>
50515>>>>>
50515>>>>>                        If (ghoDbUpdateHandler > 0) Begin
50517>>>>>                            Set paSQLQueryMessages of ghoDbUpdateHandler to aSQLQueryMessages
50518>>>>>                        End
50518>>>>>>
50518>>>>>                        Set paQueryMessages to sMsg
50519>>>>>                    End
50519>>>>>>
50519>>>>>
50519>>>>>                    Get SQLNextResultSet of hoStmt to iNextSet
50520>>>>>                Until (iNextSet = 0)
50522>>>>>
50522>>>>>                Move (CurrentDateTime()) to dtQueryExecEnd
50523>>>>>            End
50523>>>>>>
50523>>>>>
50523>>>>>            Move (dtQueryExecEnd - dtQueryExecStart) to tsQuery
50524>>>>>            Set ptsQueryExec to tsQuery
50525>>>>>            Send SqlClose of hoStmt
50526>>>>>
50526>>>>>            If (bCreateScriptFile = True) Begin
50528>>>>>                Close_Output channel iOut
50530>>>>>                Send Seq_Release_Channel iOut
50531>>>>>            End
50531>>>>>>
50531>>>>>        End
50531>>>>>>
50531>>>>>        Send SqlDisconnect of hoSQLConnect
50532>>>>>
50532>>>>>        Function_Return (hoSQLConnect <> 0 and Err = False)
50533>>>>>    End_Function
50534>>>>>
50534>>>>>    Function _SqlUtilCreatePostGreSQLDatabaseByScript String sMemScriptFile String sDatabaseName Returns Boolean
50536>>>>>        tSQLScriptArray SQLScriptArray
50536>>>>>        tSQLScriptArray SQLScriptArray
50536>>>>>        String sDriverID sCollation
50536>>>>>        Boolean bOK
50536>>>>>        Integer iSize iCount
50536>>>>>
50536>>>>>        If (Trim(sDatabaseName) = "") Begin
50538>>>>>            Function_Return False
50539>>>>>        End
50539>>>>>>
50539>>>>>
50539>>>>>        Get psDriverID  to sDriverID
50540>>>>>        Get psCollation to sCollation
50541>>>>>        Get _SqlUtilReadResource sMemScriptFile to SQLScriptArray
50542>>>>>        If (SQLScriptArray.bError = True) Begin
50544>>>>>            Function_Return False
50545>>>>>        End
50545>>>>>>
50545>>>>>
50545>>>>>        Move (SizeOfArray(SQLScriptArray.sSQLScriptArray)) to iSize
50546>>>>>        Decrement iSize
50547>>>>>
50547>>>>>        For iCount from 0 to iSize
50553>>>>>>
50553>>>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "DATABASE_NAME_XXX") Begin
50555>>>>>                Move (Replaces("DATABASE_NAME_XXX",  SQLScriptArray.sSQLScriptArray[iCount], String(sDatabaseName))) to SQLScriptArray.sSQLScriptArray[iCount]
50556>>>>>            End
50556>>>>>>
50556>>>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "COLLATION_NAME_XXX") Begin
50558>>>>>                Move (Replaces("COLLATION_NAME_XXX", SQLScriptArray.sSQLScriptArray[iCount], String(sCollation))) to SQLScriptArray.sSQLScriptArray[iCount]
50559>>>>>            End
50559>>>>>>
50559>>>>>        Loop
50560>>>>>>
50560>>>>>
50560>>>>>        Get _SqlUtilExecuteEmbeddedScript SQLScriptArray sDriverID False "" to bOK
50561>>>>>
50561>>>>>        Function_Return (bOK = True)
50562>>>>>    End_Function
50563>>>>>
50563>>>>>    Function _SqlUtilCreateMySQLDatabaseByScript String sMemScriptFile String sDatabaseName Returns Boolean
50565>>>>>        tSQLScriptArray SQLScriptArray
50565>>>>>        tSQLScriptArray SQLScriptArray
50565>>>>>        String sDriverID sCollation
50565>>>>>        Boolean bOK
50565>>>>>        Integer iSize iCount
50565>>>>>
50565>>>>>        If (Trim(sDatabaseName) = "") Begin
50567>>>>>            Function_Return False
50568>>>>>        End
50568>>>>>>
50568>>>>>
50568>>>>>        Get psDriverID  to sDriverID
50569>>>>>        Get psCollation to sCollation
50570>>>>>        Get _SqlUtilReadResource sMemScriptFile to SQLScriptArray
50571>>>>>        If (SQLScriptArray.bError = True) Begin
50573>>>>>            Function_Return False
50574>>>>>        End
50574>>>>>>
50574>>>>>
50574>>>>>        Move (SizeOfArray(SQLScriptArray.sSQLScriptArray)) to iSize
50575>>>>>        Decrement iSize
50576>>>>>
50576>>>>>        For iCount from 0 to iSize
50582>>>>>>
50582>>>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "DATABASE_NAME_XXX") Begin
50584>>>>>                Move (Replaces("DATABASE_NAME_XXX",  SQLScriptArray.sSQLScriptArray[iCount], String(sDatabaseName))) to SQLScriptArray.sSQLScriptArray[iCount]
50585>>>>>            End
50585>>>>>>
50585>>>>>            If (SQLScriptArray.sSQLScriptArray[iCount] contains "COLLATION_NAME_XXX") Begin
50587>>>>>                Move (Replaces("COLLATION_NAME_XXX", SQLScriptArray.sSQLScriptArray[iCount], String(sCollation))) to SQLScriptArray.sSQLScriptArray[iCount]
50588>>>>>            End
50588>>>>>>
50588>>>>>        Loop
50589>>>>>>
50589>>>>>        // ToDo: THIS FAILS BUT THE SQL SCRIPT WORKS IN MYSQL!
50589>>>>>        Get _SqlUtilExecuteEmbeddedScript SQLScriptArray sDriverID False "" to bOK
50590>>>>>
50590>>>>>        Function_Return (bOK = True)
50591>>>>>    End_Function
50592>>>>>
50592>>>>>    Function _StrToFieldNumber Integer iFile String sField Returns Integer
50594>>>>>        Integer iMax iPos
50594>>>>>        String sName
50594>>>>>
50594>>>>>        Move (Lowercase(sField)) to sField
50595>>>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iFile to iMax
50598>>>>>        For iPos from 0 to iMax
50604>>>>>>
50604>>>>>            Get_Attribute DF_FIELD_NAME of iFile iPos to sName
50607>>>>>            Move (Lowercase(sName)) to sName
50608>>>>>            If (sName = sField) Begin
50610>>>>>                Function_Return iPos
50611>>>>>            End
50611>>>>>>
50611>>>>>        Loop
50612>>>>>>
50612>>>>>        Function_Return -1
50613>>>>>    End_Function
50614>>>>>
50614>>>>>    // Checks if the passed connection id exists in the CLI interface.
50614>>>>>    // This might be needed by API-methods when a connection id is to be used and
50614>>>>>    // the connection id hasn't been established with the driver's CLI interface.
50614>>>>>    // NOTE: Only applicable for DAW drivers.
50614>>>>>    Function IsConnectionID String sConnectionID String sDriverID Returns Boolean
50616>>>>>        String sID sConnString
50616>>>>>        Integer iDriver iNumConn iCount
50616>>>>>        Handle hoCLI
50616>>>>>        Boolean bOK
50616>>>>>
50616>>>>>        Get IsDAWSQLDriver sDriverID to bOK
50617>>>>>        If (bOK = False) Begin
50619>>>>>            Error DFERR_PROGRAM "Connection ID's can only be used with DAW drivers."
50620>>>>>>
50620>>>>>            Function_Return False
50621>>>>>        End
50621>>>>>>
50621>>>>>
50621>>>>>        Move False to bOK
50622>>>>>        Get phoCLIHandler to hoCLI
50623>>>>>        If (hoCLI <> 0) Begin
50625>>>>>            Set psDriverID of hoCLI to sDriverID
50626>>>>>            Get DriverIndex of hoCLI sDriverID to iDriver
50627>>>>>
50627>>>>>            // If driver not loaded; load it.
50627>>>>>            If (iDriver = 0) Begin
50629>>>>>                Load_Driver sDriverID
50630>>>>>                Get DriverIndex sDriverID to iDriver
50631>>>>>            End
50631>>>>>>
50631>>>>>            If (iDriver <> 0) Begin
50633>>>>>                Get_Attribute DF_DRIVER_NUMBER_CONNECTION_IDS of iDriver to iNumConn
50636>>>>>                Decrement iNumConn
50637>>>>>                For iCount from 0 to iNumConn
50643>>>>>>
50643>>>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID_STRING of iDriver iCount to sConnString
50646>>>>>                    Get_Attribute DF_DRIVER_CONNECTION_ID of iDriver iCount to sID
50649>>>>>                    If (sID = sConnectionID) Begin
50651>>>>>                        Move True to bOK
50652>>>>>                    End
50652>>>>>>
50652>>>>>                Loop
50653>>>>>>
50653>>>>>            End
50653>>>>>>
50653>>>>>        End
50653>>>>>>
50653>>>>>
50653>>>>>        Function_Return bOK
50654>>>>>    End_Function
50655>>>>>
50655>>>>>    Function IsDAWSQLDriver String sDriverID Returns Boolean
50657>>>>>        Boolean bOK
50657>>>>>        Move (sDriverID = MSSQLDRV_ID or sDriverID = DB2_DRV_ID or sDriverID = ODBC_DRV_ID or sDriverID = DFBTRDRV_ID) to bOK
50658>>>>>        Function_Return bOK
50659>>>>>    End_Function
50660>>>>>
50660>>>>>    Function IsMSSQLDriver Returns Boolean
50662>>>>>        Integer iDriverIndex
50662>>>>>        Get DriverIndex MSSQLDRV_ID to iDriverIndex
50663>>>>>        Function_Return (iDriverIndex <> 0)
50664>>>>>    End_Function
50665>>>>>
50665>>>>>    // Similar to _SqlCheckCurrentDriver but generates no error and it doesn't
50665>>>>>    // attempt to load the driver.
50665>>>>>    // Returns true if the passed driver is SQL based.
50665>>>>>    Function IsSQLDriver String sDriverID Returns Boolean
50667>>>>>        Boolean bOK
50667>>>>>        Get IsDAWSQLDriver sDriverID to bOK
50668>>>>>        Function_Return bOK
50669>>>>>    End_Function
50670>>>>>
50670>>>>>    // *** Error Handler ***
50670>>>>>    //
50670>>>>>    // Note: If the cDbUpdateHandler & cDbUpdateVersion classes are used this error handler is _not_
50670>>>>>    //       used. Instead the Error_Report in the cDbUpdateHandler i used.
50670>>>>>    Procedure Error_Report Integer iErrorNumber Integer iErrorLine String sErrorText
50672>>>>>        Integer iSize iErrorMode
50672>>>>>        tSqlErrorArray aSqlErrorArray
50672>>>>>        tSqlErrorArray aSqlErrorArray
50672>>>>>
50672>>>>>        If (pbProcessingError(Self)) Begin
50674>>>>>            Procedure_Return
50675>>>>>        End
50675>>>>>>
50675>>>>>
50675>>>>>        Get Error_Report_Mode to iErrorMode
50676>>>>>        If (iErrorMode = DUF_ERROR_NO_REPORT) Begin
50678>>>>>            Procedure_Return
50679>>>>>        End
50679>>>>>>
50679>>>>>
50679>>>>>        Set pbProcessingError to True
50680>>>>>        Set pbSqlError to True
50681>>>>>        Get paSqlErrorArray      to aSqlErrorArray
50682>>>>>        Move (SizeOfArray(aSqlErrorArray.sSqlErrorArray)) to iSize
50683>>>>>        Move sErrorText          to aSqlErrorArray.sSqlErrorArray[iSize]
50684>>>>>        Get psSQLStatementString to aSqlErrorArray.sSqlStatementArray[iSize]
50685>>>>>        Move iErrorNumber        to aSqlErrorArray.iSqlErrorArray[iSize]
50686>>>>>        Set paSqlErrorArray      to aSqlErrorArray
50687>>>>>        Set pbProcessingError to False
50688>>>>>    End_Procedure
50689>>>>>
50689>>>>>    // *** Miscellanous Helper Functions ***
50689>>>>>    //
50689>>>>>    // Helper function. Takes a DF_FILE_XXXX_NAME value as parameter and
50689>>>>>    // returns the table name only; stripped of any path or filename extension.
50689>>>>>    Function _TableNameOnly String sName Returns String
50691>>>>>        String sPath sExt
50691>>>>>
50691>>>>>        Get ParseFolderName sName to sPath
50692>>>>>        If (sPath <> "") Begin
50694>>>>>            Move (Replace(sPath, sName, "")) to sName
50695>>>>>        End
50695>>>>>>
50695>>>>>        Get ParseFileExtension sName to sExt
50696>>>>>        If (sExt <> "") Begin
50698>>>>>            Move (Replace(("." + sExt), sName, "")) to sName
50699>>>>>        End
50699>>>>>>
50699>>>>>
50699>>>>>        Function_Return sName
50700>>>>>    End_Function
50701>>>>>
50701>>>>>    // Removes any prefix to a table name.
50701>>>>>    // Example mssqldrv:mytable returns mytable
50701>>>>>    //         dbo.mytable returns mytable
50701>>>>>    Function _TableNoPrefix String sName Returns String
50703>>>>>        Integer iPos
50703>>>>>
50703>>>>>        Move (Pos(":", sName)) to iPos
50704>>>>>        If (iPos <> 0) Begin
50706>>>>>            Move (Mid(sName, 999, (iPos + 1))) to sName
50707>>>>>        End
50707>>>>>>
50707>>>>>        Move (Pos(".", sName)) to iPos
50708>>>>>        If (iPos <> 0) Begin
50710>>>>>            Move (Mid(sName, 999, (iPos + 1))) to sName
50711>>>>>        End
50711>>>>>>
50711>>>>>
50711>>>>>        Function_Return sName
50712>>>>>    End_Function
50713>>>>>
50713>>>>>    // Returns the first datapath found in the psDataPath property.
50713>>>>>    // The returned path always ends with a "\"
50713>>>>>    Function psDataPathFirstPart Returns String
50715>>>>>        String sDataPath
50715>>>>>        Integer iCount
50715>>>>>
50715>>>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
50716>>>>>        Get CountOfPaths of (phoWorkspace(ghoApplication)) sDataPath to iCount
50717>>>>>        If (iCount > 1) Begin
50719>>>>>            Get PathAtIndex of (phoWorkspace(ghoApplication)) sDataPath 1 to sDataPath
50720>>>>>        End
50720>>>>>>
50720>>>>>        If (sDataPath <> "") Begin
50722>>>>>            Get vFolderFormat sDataPath to sDataPath
50723>>>>>        End
50723>>>>>>
50723>>>>>
50723>>>>>        Function_Return sDataPath
50724>>>>>    End_Function
50725>>>>>
50725>>>>>    Function psLogTextFileWithPath Returns String
50727>>>>>        String sFileName
50727>>>>>        Handle hoLogFile
50727>>>>>        Get phoLogFile to hoLogFile
50728>>>>>        Get psLogTextFileWithPath of hoLogFile to sFileName
50729>>>>>        Function_Return sFileName
50730>>>>>    End_Function
50731>>>>>
50731>>>>>    Function phoLogFile Returns Handle
50733>>>>>        Handle hoLogFile   
50733>>>>>        Boolean bErr
50733>>>>>        
50733>>>>>        Move Err to bErr
50734>>>>>        Move 0 to hoLogFile
50735>>>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT  
50736>>>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
50737>>>>>        Delegate Get phoLogFile to hoLogFile
50739>>>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
50740>>>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
50741>>>>>        Move bErr to Err
50742>>>>>        
50742>>>>>        Function_Return hoLogFile
50743>>>>>    End_Function
50744>>>>>
50744>>>>>    Function pnCurrentVersionUpdate Returns Number
50746>>>>>        Number nCurrentVersionUpdate
50746>>>>>
50746>>>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
50747>>>>>        Delegate Get pnCurrentVersionUpdate to nCurrentVersionUpdate
50749>>>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
50750>>>>>
50750>>>>>        Function_Return nCurrentVersionUpdate
50751>>>>>    End_Function
50752>>>>>
50752>>>>>    Procedure LogError String sText Boolean bError
50754>>>>>        Handle hoLogFile
50754>>>>>        Number nCurrentVersionUpdate
50754>>>>>
50754>>>>>        Get phoLogFile to hoLogFile
50755>>>>>        If (hoLogFile = 0) Begin
50757>>>>>            Procedure_Return
50758>>>>>        End
50758>>>>>>
50758>>>>>        Get pnCurrentVersionUpdate to nCurrentVersionUpdate
50759>>>>>
50759>>>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
50760>>>>>        Send LogError of hoLogFile nCurrentVersionUpdate 0 sText 0 bError
50761>>>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
50762>>>>>    End_Procedure
50763>>>>>
50763>>>>>    Function pbContinueOnError Returns Boolean
50765>>>>>        Boolean bContinueOnError
50765>>>>>        If (ghoDbUpdateHandler > 0) Begin
50767>>>>>            Get pbContinueOnError of ghoDbUpdateHandler to bContinueOnError
50768>>>>>        End
50768>>>>>>
50768>>>>>        Function_Return bContinueOnError
50769>>>>>    End_Function
50770>>>>>
50770>>>>>
50770>>>>>    Function _UtilUpdateTAGFile String sFullTAGFileName String sColumnName Returns Boolean
50772>>>>>        Integer iChIn iChOut // iCount
50772>>>>>        Boolean bExists
50772>>>>>        String sExistingColumn
50772>>>>>
50772>>>>>        Move False to bExists
50773>>>>>        Get Seq_New_Channel to iChIn
50774>>>>>        Get Seq_New_Channel to iChOut
50775>>>>>        If (iChIn = DF_SEQ_CHANNEL_NOT_AVAILABLE or iChOut = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
50777>>>>>            Function_Return True
50778>>>>>        End
50778>>>>>>
50778>>>>>
50778>>>>>        Move False to Err
50779>>>>>        // The following line should also use the channel attribute. (Thank you, Hans van de Laar)
50779>>>>>        Direct_Input channel iChIn ("'" + sFullTAGFileName + "'")
50781>>>>>        While (not(SeqEof))
50785>>>>>            Readln channel iChIn sExistingColumn
50787>>>>>            If (Uppercase(sExistingColumn) = Uppercase(sColumnName)) Begin
50789>>>>>                Move True to bExists
50790>>>>>            End
50790>>>>>>
50790>>>>>            If (Trim(sExistingColumn) = "") Begin
50792>>>>>                Move True to SeqEof
50793>>>>>            End
50793>>>>>>
50793>>>>>        Loop
50794>>>>>>
50794>>>>>        Close_Input channel iChIn
50796>>>>>        Send Seq_Release_Channel iChIn
50797>>>>>
50797>>>>>        If (bExists = False) Begin
50799>>>>>            Append_Output channel iChOut sFullTAGFileName
50801>>>>>            Writeln channel iChOut sColumnName
50804>>>>>            Close_Output channel iChOut
50806>>>>>            Send Seq_Release_Channel iChOut
50807>>>>>        End
50807>>>>>>
50807>>>>>
50807>>>>>        Function_Return (Err = False)
50808>>>>>    End_Function
50809>>>>>
50809>>>>>    // Changes source code files.
50809>>>>>    // Pass a file name with full path and a value to search for, together with the value
50809>>>>>    // to change to. Can e.g. be used for changing all .int files from using a fixed server name,
50809>>>>>    // to use a Connection ID.
50809>>>>>    // Sample: Get _UtilChangeSourceCodeLine "C:\DataFlex 18.2 Examples\Order Entry\Data\Order.int" "SERVER_NAME SERVER=(local)\SQLEXPRESS1" "SERVER_NAME DFCONNID=ChinookDb"
50809>>>>>    // Pass "True" for the bShowResult if you want to see the result while it works. Showln will then be used for output
50809>>>>>    // Returns True if no errors occured.
50809>>>>>    Function _UtilChangeSourceCodeLine String sFileName String sChangeFrom String sChangeTo Boolean bShowResult Returns Boolean
50811>>>>>        Integer iCh iRow iItems iCount
50811>>>>>        String sValue sRow
50811>>>>>        String[] sFileArray
50812>>>>>        Boolean bExists bIsActive
50812>>>>>
50812>>>>>        Move False to Err
50813>>>>>        Move 0 to iRow
50814>>>>>
50814>>>>>        If (ghoStatusPanel <> 0) Begin
50816>>>>>            Get Active_state of ghoStatusPanel to bIsActive
50817>>>>>        End
50817>>>>>>
50817>>>>>
50817>>>>>        Get vFilePathExists sFileName to bExists
50818>>>>>        If (bExists = False) Begin
50820>>>>>            If (bShowResult = True) Begin
50822>>>>>                If (bIsActive = True) Begin
50824>>>>>                    Send Update_StatusPanel of ghoStatusPanel ("File does not exist:" * String(sFileName))
50825>>>>>                End
50825>>>>>>
50825>>>>>                Else Begin
50826>>>>>                    Showln "File does not exist: " sFileName
50829>>>>>                End
50829>>>>>>
50829>>>>>            End
50829>>>>>>
50829>>>>>            Function_Return False
50830>>>>>        End
50830>>>>>>
50830>>>>>
50830>>>>>        Get Seq_Open_Input_Channel sFileName to iCh
50831>>>>>        If (iCh < 1) Begin
50833>>>>>            Function_Return False
50834>>>>>        End
50834>>>>>>
50834>>>>>
50834>>>>>        If (bShowResult = True) Begin
50836>>>>>            If (ghoStatusPanel <> 0) Begin
50838>>>>>                Get Active_state of ghoStatusPanel to bIsActive
50839>>>>>                If (bIsActive = True) Begin
50841>>>>>                    Set Message_Text of ghoStatusPanel to sFileName
50842>>>>>                    Send Update_StatusPanel of ghoStatusPanel ("sChangeFrom =" * String(sChangeFrom) * "sChangeTo =" * String(sChangeTo))
50843>>>>>                    Send DoAdvance of ghoProgressBar
50844>>>>>                End
50844>>>>>>
50844>>>>>            End
50844>>>>>>
50844>>>>>            Else Begin
50845>>>>>                Showln ""
50847>>>>>                Showln "sFileName = " sFileName
50850>>>>>                Showln "sChangeFrom = " sChangeFrom " sChangeTo = " sChangeTo
50855>>>>>            End
50855>>>>>>
50855>>>>>        End
50855>>>>>>
50855>>>>>
50855>>>>>        While (not(SeqEof))
50859>>>>>            Readln channel iCh sRow
50861>>>>>            If (Uppercase(sRow) contains Uppercase(sChangeFrom)) Begin
50863>>>>>//                If (bShowResult = True) Begin
50863>>>>>//                    If (bIsActive = True) Begin
50863>>>>>//                        Send Update_StatusPanel of ghoStatusPanel ("Changed from:" * String(sRow) * "to:" * String(sChangeTo))
50863>>>>>//                    End
50863>>>>>//                    Else Begin
50863>>>>>//                        Showln "Changed from: " sRow " to: " sChangeTo
50863>>>>>//                    End
50863>>>>>//                End
50863>>>>>                // Change the whole line to the new connection id:
50863>>>>>                Move sChangeTo to sRow
50864>>>>>                // Move (Replaces(sChangeFrom, sRow, sChangeTo)) to sValue
50864>>>>>            End
50864>>>>>>
50864>>>>>            Move sRow to sFileArray[iRow]
50865>>>>>            Increment iRow
50866>>>>>        Loop
50867>>>>>>
50867>>>>>        Send Seq_Close_Channel iCh
50868>>>>>
50868>>>>>        Sleep 1 // Wait for Windows to close the file
50869>>>>>
50869>>>>>        Get Seq_Open_Output_Channel sFileName to iCh
50870>>>>>        If (iCh < 1) Begin
50872>>>>>            Function_Return False
50873>>>>>        End
50873>>>>>>
50873>>>>>        Move (SizeOfArray(sFileArray)) to iItems
50874>>>>>        Decrement iItems
50875>>>>>
50875>>>>>        for iCount from 0 to iItems
50881>>>>>>
50881>>>>>            Move sFileArray[iCount] to sValue
50882>>>>>            Writeln channel iCh sValue
50885>>>>>        Loop
50886>>>>>>
50886>>>>>        Send Seq_Close_Channel iCh
50887>>>>>
50887>>>>>        Function_Return (Err = False)
50888>>>>>    End_Function
50889>>>>>
50889>>>>>    // This message creates an error log in the "Home" folder named "SQLErrorLog.txt",
50889>>>>>    // and opens it in "notepad.exe".
50889>>>>>    // Note: This is _not_ used by the cDbUpdateHandler & cDbUpdateVersion classes!
50889>>>>>    //       Instead the cDbUpdateLogFile's WriteErrorLog & ShowErrorLog are used.
50889>>>>>    Procedure _UtilShowErrorList
50891>>>>>        tSqlErrorArray aSqlErrorArray
50891>>>>>        tSqlErrorArray aSqlErrorArray
50891>>>>>        Integer iRows iCount iCh iErrorNum
50891>>>>>        String sPath sFileName sErrorTxt sStatement
50891>>>>>
50891>>>>>        Get psHome of (phoWorkspace(ghoApplication)) to sPath
50892>>>>>        Get vFolderFormat sPath to sPath
50893>>>>>        Move "SQLErrorLog.txt"  to sFileName
50894>>>>>        Get Seq_Open_Output_Channel (sPath + sFileName) to iCh
50895>>>>>            Get paSqlErrorArray to aSqlErrorArray
50896>>>>>            Move (SizeOfArray(aSqlErrorArray.sSqlErrorArray)) to iRows
50897>>>>>            If (iRows > 0) Begin
50899>>>>>                Decrement iRows
50900>>>>>                for iCount from 0 to iRows
50906>>>>>>
50906>>>>>                    Move aSqlErrorArray.sSqlErrorArray[iCount]      to sErrorTxt
50907>>>>>                    Move aSqlErrorArray.sSqlStatementArray[iCount]  to sStatement
50908>>>>>                    Move aSqlErrorArray.iSqlErrorArray[iCount]      to iErrorNum
50909>>>>>                    Writeln channel iCh "Error No: " iErrorNum " Error Text: " sErrorTxt
50915>>>>>                    Writeln channel iCh "SQL Statement: " sStatement
50919>>>>>                Loop
50920>>>>>>
50920>>>>>            End
50920>>>>>>
50920>>>>>        Send Seq_Close_Channel iCh
50921>>>>>
50921>>>>>        If (iRows > 0) Begin
50923>>>>>            Runprogram Shell Background (sPath + sFileName)
50924>>>>>        End
50924>>>>>>
50924>>>>>    End_Procedure
50925>>>>>
50925>>>>>    // For this to be returning a True value, the table number needs to be in the Filelist.cfg,
50925>>>>>    // and the table needs to exist as an SQL table.
50925>>>>>    Function _UtilTableIsSql Handle hTable Returns Boolean
50927>>>>>        String sRootName sDriverID
50927>>>>>        Boolean bIsSQL
50927>>>>>
50927>>>>>        Move False to bIsSQL
50928>>>>>        If (hTable > 0) Begin
50930>>>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
50933>>>>>            Get _UtilTableIsSqlByRootName sRootName to bIsSQL
50934>>>>>            If (bIsSQL = True) Begin
50936>>>>>                Get psDriverID to sDriverID
50937>>>>>                Get _TableNameOnly sRootName to sRootName
50938>>>>>                Get _SqlUtilCheckIfTableNameExists sRootName sDriverID to bIsSQL
50939>>>>>            End
50939>>>>>>
50939>>>>>        End
50939>>>>>>
50939>>>>>
50939>>>>>        Function_Return bIsSQL
50940>>>>>    End_Function
50941>>>>>
50941>>>>>    Function _UtilTableIsSqlByRootName String sRootName Returns Boolean
50943>>>>>        Boolean bIsSQL
50943>>>>>        Move (sRootName contains ":") to bIsSQL
50944>>>>>        Function_Return bIsSQL
50945>>>>>    End_Function
50946>>>>>
50946>>>>>    // Checks if a table exists as an SQL table. Returns = True if it does.
50946>>>>>    Function _SqlUtilCheckIfTableNameExists String sTableName String sDriverID Returns Boolean
50948>>>>>        String sDatabase sSchema sVal
50948>>>>>        Boolean bExists
50948>>>>>        String[] sTablesArray
50949>>>>>        Integer iSize iCount
50949>>>>>
50949>>>>>        Move False to bExists
50950>>>>>        Get psDatabase to sDatabase
50951>>>>>        Get psSchema   to sSchema
50952>>>>>        Get _SqlUtilEnumerateTables sDriverID sDatabase sSchema to sTablesArray
50953>>>>>        Move (SizeOfArray(sTablesArray)) to iSize
50954>>>>>        Decrement iSize
50955>>>>>        for iCount from 0 to iSize
50961>>>>>>
50961>>>>>            Move sTablesArray[iCount] to sVal
50962>>>>>            If (Uppercase(sVal) = Uppercase(sTableName)) Begin
50964>>>>>                Move True to bExists
50965>>>>>                Move iSize to iCount // We're done!
50966>>>>>            End
50966>>>>>>
50966>>>>>        Loop
50967>>>>>>
50967>>>>>
50967>>>>>        Function_Return bExists
50968>>>>>    End_Function
50969>>>>>
50969>>>>>    // Checks that the passed hTable number both exists in Filelist.cfg and
50969>>>>>    // that the embedded .dat file exists on disk.
50969>>>>>    Function _UtilTableIsEmbedded Handle hTable Returns Boolean
50971>>>>>        Boolean bExists bIsEmbedded
50971>>>>>        String sDataPath sRootName
50971>>>>>
50971>>>>>        Get _UtilTableNumberIsInUse hTable to bExists
50972>>>>>        If (bExists = False) Begin
50974>>>>>            Function_Return False
50975>>>>>        End
50975>>>>>>
50975>>>>>
50975>>>>>        Move False to bIsEmbedded
50976>>>>>        If (hTable > 0) Begin
50978>>>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
50981>>>>>            Move (not(sRootName contains ":")) to bIsEmbedded
50982>>>>>        End
50982>>>>>>
50982>>>>>        If (bIsEmbedded = True) Begin
50984>>>>>            Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
50985>>>>>            Get vFolderFormat sDataPath to sDataPath
50986>>>>>            Get vFilePathExists (sDataPath + sRootName + ".dat") to bIsEmbedded
50987>>>>>        End
50987>>>>>>
50987>>>>>
50987>>>>>        Function_Return bIsEmbedded
50988>>>>>    End_Function
50989>>>>>
50989>>>>>End_Class
50990>>>
50990>>>Class cDbUpdateFunctionLibrary is a cBaseDbUpdateFuncLib
50991>>>
50991>>>    Procedure Construct_Object
50993>>>        Forward Send Construct_Object
50995>>>        Move Self to ghoDbUpdateFunctionLibrary
50996>>>    End_Procedure
50997>>>
50997>>>    Procedure End_Construct_Object
50999>>>        Forward Send End_Construct_Object
51001>>>    End_Procedure
51002>>>
51002>>>    // *** SQL Messages for making changes to the SQL back-end ***
51002>>>    //
51002>>>    // * Dummy function for the Studio's Code Explorer *
51002>>>    Function SQL_DATABASE_FUNCTIONS Returns Boolean
51004>>>        Function_Return False
51005>>>    End_Function
51006>>>
51006>>>    // Function for creating a new *Database*.
51006>>>    // Note: This is for creating SQL DATABASES - not tables!
51006>>>    // Returns True if successful.
51006>>>    // ToDo: Currently only works for MS-SQL...
51006>>>    Function SqlDatabaseCreate String sDriverID String sDatabase Boolean bUpdateConnectionString Boolean bPermanantly Returns Boolean
51008>>>        String sSQL sSQL1 sConnectionID sConnectionString
51008>>>        String sCreateDatabaseKeyWord sSelectFromWhereName sCollation sCollateKeyWord
51008>>>        Handle hConnection hStmt hoSQLManager
51008>>>        Integer iFetchResult iDbType
51008>>>        Boolean bOK bExists
51008>>>
51008>>>        Get piDbType to iDbType
51009>>>        If (iDbType <> EN_DbTypeMSSQL and iDbType <> EN_DbTypeDB2 and iDbType <> EN_DbTypeMySQL and iDbType <> EN_DbTypePostgre) Begin
51011>>>            Error DFERR_PROGRAM "Sorry, the SqlDatabaseCreate function is currently only supported for MS-SQL, MySQL & PostGre and DB2 drivers"
51012>>>>
51012>>>            Function_Return False
51013>>>        End
51013>>>>
51013>>>
51013>>>        Get SqlUtilCheckIfDatabaseExists sDatabase to bExists
51014>>>        If (bExists = True) Begin
51016>>>            Function_Return True
51017>>>        End
51017>>>>
51017>>>
51017>>>        Get phoSQLManager to hoSQLManager
51018>>>
51018>>>        Get psConnectionID     to sConnectionID
51019>>>        Get psConnectionString to sConnectionString
51020>>>        Move 0 to LastErr
51021>>>
51021>>>        If (sDriverID = ODBC_DRV_ID) Begin
51023>>>            // If an ODBC data source (DSN) we cannot pass the UID & PWD; so strip them from the connection string.
51023>>>            // ToDo: 2018-08-11 I think this is wrong and the uid & pw should be there.
51023>>>//            If (Uppercase(sConnectionString) contains CS_SQLIniDSNKeyword) Begin
51023>>>//                Move (Pos(";", sConnectionString)) to iPos
51023>>>//                If (iPos > 0) Begin
51023>>>//                    Move (Left(sConnectionString, (iPos - 1))) to sConnectionString
51023>>>//                    Move (Trim(sConnectionString)) to sConnectionString
51023>>>//                End
51023>>>//            End
51023>>>        End
51023>>>>
51023>>>
51023>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
51024>>>        Get SqlConnect of hoSQLManager sDriverID sConnectionString to hConnection
51025>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
51026>>>        If (LastErr = CLIERR_LOGIN_UNSUCCESSFUL) Begin
51028>>>            Error DFERR_PROGRAM (CS_DUF_LoginToDbServerFailed + "\n" + sConnectionString)
51029>>>>
51029>>>            Function_Return False
51030>>>        End
51030>>>>
51030>>>
51030>>>        Get SqlOpen of hConnection to hStmt
51031>>>
51031>>>        If (hStmt = 0) Begin
51033>>>            Send SqlDisconnect of hoSQLManager
51034>>>            Error DFERR_PROGRAM CS_DUF_ConnectError
51035>>>>
51035>>>            Function_Return False
51036>>>        End
51036>>>>
51036>>>
51036>>>        Get psCollation to sCollation
51037>>>
51037>>>        Case Begin
51037>>>            Case (sDriverID = MSSQLDRV_ID)
51039>>>                Get _SqlFindKeyWord CI_SQLCreateDatabase to sCreateDatabaseKeyWord
51040>>>                Get _SqlSelectFromWhereName to sSelectFromWhereName
51041>>>                Move (sSelectFromWhereName + "='" + sDatabase + "'") to sSQL
51042>>>
51042>>>                // Check if database exists
51042>>>                Send SqlExecDirect of hStmt sSQL
51043>>>                Get SqlFetch of hStmt to iFetchResult
51044>>>                Send SqlClose of hStmt
51045>>>                Send SqlDisconnect of hConnection
51046>>>                // If database already exists we're out of here!
51046>>>                // Note that we return True as this is not an error.
51046>>>                If (iFetchResult > 0) Begin
51048>>>                    Function_Return True
51049>>>                End
51049>>>>
51049>>>                // Database doesn't exist, create it.
51049>>>                If (iFetchResult = 0) Begin
51051>>>                    Move (sCreateDatabaseKeyWord + " [" + sDatabase + "]") to sSQL1
51052>>>                    Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
51053>>>                    If (sCollation <> "") Begin
51055>>>                        Get _SqlFindKeyWord CI_SQLDatabaseCollation to sCollateKeyWord
51056>>>                        Move (sSQL1 * String(sCollateKeyWord) * String(sCollation)) to sSQL1
51057>>>                    End
51057>>>>
51057>>>                    Send SqlUtilExecuteQuery sSQL1 sDriverID
51058>>>                    Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
51059>>>                    If (LastErr = CLIERR_GENERAL_ERROR) Begin
51061>>>                        Function_Return False
51062>>>                    End
51062>>>>
51062>>>                    // We need to wait a short time for Sql to finish, especially Windows to write the new file to disk.
51062>>>                    Sleep 1
51063>>>                    Send SqlUtilExecuteQuery sSQL sDriverID
51064>>>                End
51064>>>>
51064>>>                Case Break
51065>>>
51065>>>            Case (iDbType = EN_DbTypeMySQL and sDriverID = ODBC_DRV_ID)
51068>>>                // ToDo: How should this be set/checked?
51068>>>//                If (Lowercase(Left(sCollation, 3)) <> "utf") Begin
51068>>>//                    Set psCollation to "utf8"
51068>>>//                End
51068>>>                SQLIncludeScriptFile ..\Scripts\CreateMySQLDatabase.sql as CreateMySQLDatabase.sql
51068>>>                Get _SqlUtilCreateMySQLDatabaseByScript "CreateMySQLDatabase.sql" sDatabase to bOK
51069>>>                Case Break
51070>>>
51070>>>            Case Else
51070>>>                Error DFERR_PROGRAM "Unsupported database type"
51071>>>>
51071>>>        Case End
51071>>>
51071>>>        If (Err = False) Begin
51073>>>            Send LogError ("The Database:" * String(sDatabase) * "was created successfully for driver:" * String(sDriverID)) False
51074>>>        End
51074>>>>
51074>>>        // If used in e.g. the cDbUpdateHandler we want to change the login database name to
51074>>>        // the one we just created.
51074>>>        If (bUpdateConnectionString = True and Err = False) Begin
51076>>>            Set psDatabase to sDatabase
51077>>>            //...and perhaps also the SQLConnections.ini file setting.
51077>>>            If (bPermanantly = True) Begin
51079>>>                If (ghoSQLConnectionHandler <> 0) Begin
51081>>>                    Get SQLIniFileSetDefaultConnection of ghoSQLConnectionHandler sConnectionID to bOK
51082>>>                End
51082>>>>
51082>>>            End
51082>>>>
51082>>>        End
51082>>>>
51082>>>
51082>>>        Function_Return (Err = False)
51083>>>    End_Function
51084>>>
51084>>>    // Backs up an SQL database to a folder of choice. If no path is passed the SQL default backup folder
51084>>>    // will be used.
51084>>>    Function SqlDatabaseBackupToDisk String sDatabase String sBackupName String sPath Boolean bShowProg Returns Boolean
51086>>>        Boolean bOK bExists bShowProgress bErr
51086>>>        String sStatement sDriverID
51086>>>        tSQLScriptArray SQLScriptArray SQLScriptArrayPercentReady
51086>>>        tSQLScriptArray SQLScriptArray SQLScriptArrayPercentReady
51086>>>        Integer iDbType
51086>>>
51086>>>        If (sDatabase = "") Begin
51088>>>            Error DFERR_PROGRAM "The database name was not passed as a parameter to the 'SqlUtilBackupDatabaseToDisk' function"
51089>>>>
51089>>>            Function_Return False
51090>>>        End
51090>>>>
51090>>>        If (sBackupName = "") Begin
51092>>>            Error DFERR_PROGRAM "The database backup name was not passed as a parameter to the 'SqlUtilBackupDatabaseToDisk' function"
51093>>>>
51093>>>            Function_Return False
51094>>>        End
51094>>>>
51094>>>
51094>>>        // Create backup-folder if it doesn't exist
51094>>>        Get vFolderExists sPath to bExists
51095>>>        If (bExists = False) Begin
51097>>>            Get vCreateDirectory sPath to bErr
51098>>>            If (bErr = True) Begin
51100>>>                Error DFERR_PROGRAM ("Could not create database backup folder:" * sPath)
51101>>>>
51101>>>                Function_Return False
51102>>>            End
51102>>>>
51102>>>        End
51102>>>>
51102>>>        // Make sure the path ends with a back-slash
51102>>>        If (sPath <> "") Begin
51104>>>            Get vFolderFormat sPath to sPath
51105>>>        End
51105>>>>
51105>>>
51105>>>        Get psDriverID to sDriverID
51106>>>        Get piDbType   to iDbType
51107>>>        If (num_arguments > 3) Begin
51109>>>            Move bShowProg to bShowProgress
51110>>>        End
51110>>>>
51110>>>
51110>>>        Case Begin
51110>>>            Case (iDbType = EN_DbTypeMSSQL)
51112>>>                SQLIncludeScriptFile ..\Scripts\BackupMSSQLDatabase.sql as BackupMSSQLDatabase.sql
51112>>>                SQLIncludeScriptFile ..\Scripts\GetPercentageBackupCompletionMSSQL.sql as GetPercentageBackupCompletionMSSQL.sql
51112>>>                Get _SqlUtilReadResource  "BackupMSSQLDatabase.sql" sDriverID False to SQLScriptArray
51113>>>                Get _SqlUtilReadResource "GetPercentageBackupCompletionMSSQL.sql" sDriverID False to SQLScriptArrayPercentReady
51114>>>
51114>>>                Move SQLScriptArray.sSQLScriptArray[0] to sStatement
51115>>>                Move (Replaces("DATABASE_NAME_XXX", sStatement, sDatabase))   to sStatement
51116>>>                Move (Replaces("BACKUP_PATH_XXX",   sStatement, sPath))       to sStatement
51117>>>                Move (Replaces("BACKUP_NAME_XXX",   sStatement, sBackupName)) to sStatement
51118>>>                Move sStatement to SQLScriptArray.sSQLScriptArray[0]
51119>>>                Get _SqlUtilExecuteEmbeddedScript SQLScriptArray sDriverID False "" bShowProgress to bOK
51120>>>                Case Break
51121>>>            Case Else
51121>>>                Send Info_Box ("The SqlUtilBackupDatabaseToDisk function is currently not implemented for the driver:" * sDriverID + ". It would be great if you could spend a couple of minutes and add a little ESQL code snippet to make it work for that driver! Thanks for helping out.")
51122>>>        Case End
51122>>>
51122>>>        Function_Return bOK
51123>>>    End_Function
51124>>>
51124>>>    Function SqlDatabaseCollationQuery String sDatabase Boolean bSilent Returns String
51126>>>        String sStatement sDriverID sRetval //sPrevious
51126>>>        tSQLScriptArray SQLScriptArray SQLScriptArrayPercentReady
51126>>>        tSQLScriptArray SQLScriptArray SQLScriptArrayPercentReady
51126>>>        Integer iDbType iRows iFetchResult //iColumn
51126>>>        Handle hoSQLHandler hoSQLConnect hstmt
51126>>>        tSQLConnection SQLConnection
51126>>>        tSQLConnection SQLConnection
51126>>>
51126>>>        If (sDatabase = "") Begin
51128>>>            Error DFERR_PROGRAM "The database name was not passed as a parameter to the 'SqlUtilDatabaseCollation' function"
51129>>>>
51129>>>            Function_Return ""
51130>>>        End
51130>>>>
51130>>>
51130>>>        Move "" to sRetval
51131>>>        Get psDriverID to sDriverID
51132>>>        Get piDbType   to iDbType
51133>>>
51133>>>        Case Begin
51133>>>            Case (iDbType = EN_DbTypeMSSQL)
51135>>>                SQLIncludeScriptFile ..\Scripts\QueryMSSQLCollation.sql as QueryMSSQLCollation.sql
51135>>>                Get _SqlUtilReadResource "QueryMSSQLCollation.sql" sDriverID False to SQLScriptArray
51136>>>
51136>>>                Move SQLScriptArray.sSQLScriptArray[0] to sStatement
51137>>>                Move (Replaces("DATABASE_NAME_XXX", sStatement, sDatabase)) to sStatement
51138>>>                Get phoSQLManager to hoSQLHandler
51139>>>
51139>>>                If (hoSQLHandler <> 0) Begin
51141>>>                    Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
51142>>>                    Get SQLConnect of hoSQLHandler SQLConnection.sDriverID SQLConnection.sConnectionString to hoSQLConnect
51143>>>
51143>>>                    If (hoSQLConnect <> 0) Begin
51145>>>                        Get SQLOpen of hoSQLConnect to hstmt
51146>>>                        If (hstmt <> 0) Begin
51148>>>                            Send SqlExecDirect of hstmt sStatement
51149>>>                            Get SqlStmtAttribute of hstmt SqlSTMTATTRIB_ROWCOUNT to iRows
51150>>>                            Get SQLFetch of hstmt to iFetchResult
51151>>>                            If (iFetchResult <> 0) Begin
51153>>>                                Get SQLColumnValue of hstmt 2 to sRetval // Column 1 = Database Name, 2 = Collation Name.
51154>>>                            End
51154>>>>
51154>>>                            Send SQLClose of hstmt
51155>>>                        End
51155>>>>
51155>>>                        Send SQLDisconnect of hoSQLConnect
51156>>>                    End
51156>>>>
51156>>>                End
51156>>>>
51156>>>                Case Break
51157>>>            Case Else
51157>>>                If (bSilent = False) Begin
51159>>>                    Send Info_Box ("The SqlDatabaseCollationQuery function is currently not implemented for this driver:" * sDriverID + ". It would be great if you could spend a couple of minutes and create a little SQL code snippet and send it to RDC Tools to make this routine work for this driver! Thanks for helping out.")
51160>>>                End
51160>>>>
51160>>>        Case End
51160>>>
51160>>>        Function_Return sRetval
51161>>>    End_Function
51162>>>
51162>>>    Function SqlDatabaseCollationChange String sDatabase String sSQLCollation Returns Boolean
51164>>>        String sDriverID sSQL sConnectionID sConnectionString sSet sWith // sSQL1 
51164>>>        String sAlterDatabaseKeyWord sCollateKeyWord sSQLCollationCheck sSingle_User sMulti_User sRollback sImmediate
51164>>>        Handle hConnection hStmt hoSQLManager
51164>>>        Integer iDbType // iFetchResult
51164>>>
51164>>>        If (sDatabase = "") Begin
51166>>>            Error DFERR_PROGRAM "The database name was not passed as a parameter to the 'SqlDatabaseCollationChange' function"
51167>>>>
51167>>>            Function_Return False
51168>>>        End
51168>>>>
51168>>>
51168>>>        If (sSQLCollation = "") Begin
51170>>>            Error DFERR_PROGRAM "The SQL Collation name was not passed as a parameter to the 'SqlDatabaseCollationChange' function"
51171>>>>
51171>>>            Function_Return False
51172>>>        End
51172>>>>
51172>>>
51172>>>        Get psDriverID to sDriverID
51173>>>        Get piDbType   to iDbType
51174>>>
51174>>>        Get phoSQLManager to hoSQLManager
51175>>>        Get psConnectionID     to sConnectionID
51176>>>        Get psConnectionString to sConnectionString
51177>>>        Move 0 to LastErr
51178>>>
51178>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
51179>>>        Get SqlConnect of hoSQLManager sDriverID sConnectionString to hConnection
51180>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
51181>>>        If (LastErr = CLIERR_LOGIN_UNSUCCESSFUL) Begin
51183>>>            Error DFERR_PROGRAM ("Login failed to the database server. The following connect string was used:\n" + sConnectionString)
51184>>>>
51184>>>            Function_Return False
51185>>>        End
51185>>>>
51185>>>
51185>>>        Get SqlOpen of hConnection to hStmt
51186>>>
51186>>>        If (hStmt = 0) Begin
51188>>>            Send SqlDisconnect of hoSQLManager
51189>>>            Error DFERR_PROGRAM CS_DUF_ConnectError
51190>>>>
51190>>>            Function_Return False
51191>>>        End
51191>>>>
51191>>>
51191>>>        // Check if collation already exists
51191>>>        Get SqlDatabaseCollationQuery sDatabase False to sSQLCollationCheck
51192>>>        // If the current collate is the same as the new; do nothing.
51192>>>        If (sSQLCollation = sSQLCollationCheck) Begin
51194>>>            Function_Return True
51195>>>        End
51195>>>>
51195>>>
51195>>>        Get _SqlFindKeyWord CI_SQLSet               to sSet
51196>>>        Get _SqlFindKeyWord CI_SQLWith              to sWith
51197>>>        Get _SqlFindKeyWord CI_SQLSingle_User       to sSingle_User
51198>>>        Get _SqlFindKeyWord CI_SQLMulti_User        to sMulti_User
51199>>>        Get _SqlFindKeyWord CI_SQLRollback          to sRollback
51200>>>        Get _SqlFindKeyWord CI_SQLIMMEDIATE         to sImmediate
51201>>>        Get _SqlFindKeyWord CI_SQLAlterDatabase     to sAlterDatabaseKeyWord
51202>>>        Get _SqlFindKeyWord CI_SQLDatabaseCollation to sCollateKeyWord
51203>>>
51203>>>        // MS-SQL Syntax:
51203>>>        // ALTER DATABASE [database] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
51203>>>        // ALTER DATABASE [database] COLLATE SQL_1xCompat_CP850_CI_AS;
51203>>>        // ALTER DATABASE [database] SET MULTI_USER;
51203>>>        Move (              sAlterDatabaseKeyWord  * String(sDatabase) * String(sSet) * String(sSingle_User) * String(sWith) * String(sRollback) * String(sImmediate)) to sSQL
51204>>>        Move (sSQL * String(sAlterDatabaseKeyWord) * String(sDatabase) * String(sCollateKeyWord) * String(sSQLCollation)) to sSQL
51205>>>        Move (sSQL * String(sAlterDatabaseKeyWord) * String(sDatabase) * String(sSet) * String(sMulti_User)) to sSQL
51206>>>//        Move (sAlterDatabaseKeyWord * String(sDatabase) * String(sCollateKeyWord) * String(sSQLCollation)) to sSQL
51206>>>
51206>>>        Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
51207>>>        Send SqlUtilExecuteQuery sSQL sDriverID False
51208>>>        Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
51209>>>        If (LastErr = CLIERR_GENERAL_ERROR) Begin
51211>>>           Function_Return False
51212>>>        End
51212>>>>
51212>>>
51212>>>        Function_Return (Err = False)
51213>>>    End_Function
51214>>>
51214>>>
51214>>>    // * Dummy function for the Studio's Code Explorer *
51214>>>    Function SQL_TABLE_FUNCTIONS Returns Boolean
51216>>>        Function_Return False
51217>>>    End_Function
51218>>>
51218>>>    // Converts from SQL to Embedded (DataFlex .dat files).
51218>>>    // To convert from SQL -> SQL (e.g. from Oracle - > MS SQL)
51218>>>    //   first use SQLTableConvertToEmbedded in one cDbUpdateVersion object,
51218>>>    //   and then use the ApiTableConvertToSQL method in a second cDbUpdateVersion object.
51218>>>    // Note: To convert an embedded table to SQL use ApiTableConvertToSQL.
51218>>>    Function SqlTableConvertToEmbedded Handle hTable Boolean bCpyDat Returns Boolean
51220>>>        Handle hToTable
51220>>>        Boolean bOK bExists bOpened bCopyData
51220>>>        String sDriverID sPhysicalName sRootName sDisplayName
51220>>>        tSQLConnection SQLConnection
51220>>>        tSQLConnection SQLConnection
51220>>>        Integer iPos iMaxRecords
51220>>>
51220>>>        Get psDriverID to sDriverID
51221>>>        Get SqlUtilCheckIfTableHandleExists hTable sDriverID to bExists
51222>>>        If (bExists = False) Begin
51224>>>            Function_Return False
51225>>>        End
51225>>>>
51225>>>
51225>>>        If (num_arguments > 1) Begin
51227>>>            Move bCpyDat to bCopyData
51228>>>        End
51228>>>>
51228>>>        Else Begin
51229>>>            Move False to bCopyData
51230>>>        End
51230>>>>
51230>>>
51230>>>        Open hTable
51232>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
51235>>>        If (bOpened = False) Begin
51237>>>            Error DFERR_PROGRAM ("Could not open table number:" * String(hTable))
51238>>>>
51238>>>            Function_Return False
51239>>>        End
51239>>>>
51239>>>        Move 0 to hToTable
51240>>>
51240>>>        Move 16711679 to iMaxRecords
51241>>>        Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
51244>>>        Move (Pos(".", sDisplayName)) to iPos
51245>>>        If (iPos > 0) Begin
51247>>>            Move (Mid(sDisplayName, 200, (iPos +1))) to sDisplayName
51248>>>        End
51248>>>>
51248>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
51251>>>        Get _TableNameOnly sRootName                 to sRootName
51252>>>        Move (sRootName + ".dat")                    to sPhysicalName
51253>>>
51253>>>        If (ghoProgressBar <> 0) Begin
51255>>>            Send DoAdvance of ghoProgressBar
51256>>>            Set TableName_Text of ghoStatusPanel to ("Converting to Embedded - Table:" * String(sRootName) * "Number:" * String(hTable))
51257>>>        End
51257>>>>
51257>>>
51257>>>        Move False to Err
51258>>>
51258>>>        Structure_Start hToTable DATAFLEX_ID
51259>>>            Structure_Copy hTable to hToTable
51260>>>
51260>>>            Set_Attribute DF_FILE_PHYSICAL_NAME of hToTable to sPhysicalName
51263>>>            Set_Attribute DF_FILE_REUSE_DELETED of hToTable to DF_FILE_DELETED_REUSE
51266>>>            Set_Attribute DF_FILE_MULTIUSER     of hToTable to DF_FILE_USER_MULTI
51269>>>            Set_Attribute DF_FILE_TRANSACTION   of hToTable to DF_FILE_TRANSACTION_CLIENT_ATOMIC
51272>>>            Set_Attribute DF_FILE_MAX_RECORDS   of hToTable to iMaxRecords
51275>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
51276>>>
51276>>>        Structure_End hToTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
51278>>>
51278>>>        Set Action_Text of ghoStatusPanel to ""
51279>>>        Move (not(Err)) to bOK
51280>>>        If (bOK = True and bCopyData = True) Begin
51282>>>            Get ApiTableCopyData hTable sPhysicalName sRootName DATAFLEX_ID to bOK
51283>>>        End
51283>>>>
51283>>>
51283>>>        // This must be after copying data...
51283>>>        If (Err = False) Begin
51285>>>            Set_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
51288>>>            Set_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
51291>>>        End
51291>>>>
51291>>>        Move (not(Err)) to bOK
51292>>>
51292>>>        Function_Return (bOK = True)
51293>>>    End_Function
51294>>>
51294>>>    // Creates an SQL Table at the SQL end by its filelist number;
51294>>>    // Also creates a 'DUMMY' column because SQL doesn't like to create a table with no columns!
51294>>>    Function SqlTableCreate Integer hTable Returns Boolean
51296>>>        String sTableName sSQLString sPath sCreateTable sDriverID
51296>>>        Integer iDbType
51296>>>        Boolean bExists
51296>>>
51296>>>        Get psDriverID to sDriverID
51297>>>        Get UtilTableHandleToString hTable to sTableName
51298>>>        Get _SqlUtilCheckIfTableNameExists sTableName sDriverID to bExists
51299>>>        If (bExists = True) Begin
51301>>>            Function_Return False
51302>>>        End
51302>>>>
51302>>>
51302>>>        Get psDataPathFirstPart to sPath
51303>>>        Get vFilePathExists (sPath + String(sTableName) + ".int") to bExists
51304>>>
51304>>>        Get piDbType to iDbType
51305>>>        Get _SqlProperTableName sTableName to sTableName
51306>>>        Get _SqlFindKeyWord CI_SQLCreateTable iDbType to sCreateTable
51307>>>        Move (sCreateTable * String(sTableName) * "(Dummy Decimal(2,0))") to sSQLString
51308>>>
51308>>>        Move False to Err
51309>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
51310>>>
51310>>>        Function_Return (Err = False)
51311>>>    End_Function
51312>>>
51312>>>    // Same as SqlTableCreate but creates an SQL Table at the SQL end by a table name;
51312>>>    // Also creates a 'DUMMY' column because SQL doesn't like to create a table with no columns!
51312>>>    Function SqlTableCreateByTableName String sTableName  Returns Boolean
51314>>>        String sSQLString sPath sCreateTable sDriverID
51314>>>        Integer iDbType
51314>>>        Boolean bExists
51314>>>
51314>>>        Get psDriverID to sDriverID
51315>>>        Get _SqlUtilCheckIfTableNameExists sTableName sDriverID to bExists
51316>>>        If (bExists = True) Begin
51318>>>            Function_Return False
51319>>>        End
51319>>>>
51319>>>
51319>>>        Get psDataPathFirstPart to sPath
51320>>>        Get vFilePathExists (sPath + String(sTableName) + ".int") to bExists
51321>>>        If (bExists = True) Begin
51323>>>            // ToDo: What should we do if an .int file already exists?
51323>>>        End
51323>>>>
51323>>>
51323>>>        Get piDbType to iDbType
51324>>>        Get _SqlProperTableName sTableName to sTableName
51325>>>        Get _SqlFindKeyWord CI_SQLCreateTable iDbType to sCreateTable
51326>>>        Move (sCreateTable * String(sTableName) * "(Dummy Decimal(2,0))") to sSQLString
51327>>>
51327>>>        Move False to Err
51328>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
51329>>>
51329>>>        Function_Return (Err = False)
51330>>>    End_Function
51331>>>    
51331>>>    // ToDo: 2019-09-23 This needs to be finilized 
51331>>>    // It resets SQL constraints after a Structure_End, if necessary.
51331>>>    Function SqlTableRecreateConstraints Handle hTable Returns Boolean
51333>>>        Boolean bOK                                                            
51333>>>        String sStatement
51333>>>        Move "ALTER TABLE [dbo].[THREADS] ADD  DEFAULT ((0)) FOR [SEGMENTS]" to sStatement
51334>>>        Function_Return bOK
51335>>>    End_Function
51336>>>    
51336>>>    // First deletes the data cache file and then drops the passed SQL table.
51336>>>    // Note: The table needs to exist in filelist.cfg, and it must be possible to open it,
51336>>>    //       else try using the SqlTableRemoveByTableName message.
51336>>>    Function SqlTableRemove Handle hTable Returns Boolean
51338>>>        String sSQLString sPath sDropTable sTableName sDriverID
51338>>>        Integer iRetval iDbType
51338>>>        Boolean bExists bOK
51338>>>
51338>>>        Get psDriverID to sDriverID
51339>>>        Get UtilTableHandleToString hTable to sTableName
51340>>>        Get _SqlUtilCheckIfTableNameExists sTableName sDriverID to bExists
51341>>>        If (bExists = False) Begin
51343>>>            Function_Return False
51344>>>        End
51344>>>>
51344>>>
51344>>>        Get psDataPathFirstPart to sPath
51345>>>        Get _UtilDeleteCacheFile sTableName to iRetval
51346>>>
51346>>>        Get piDbType to iDbType
51347>>>        Get _SqlProperTableName sTableName to sTableName
51348>>>        Get _SqlFindKeyWord CI_SQLDropTable iDbType to sDropTable
51349>>>        Move (sDropTable * String(sTableName)) to sSQLString
51350>>>
51350>>>        Move False to Err
51351>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
51352>>>
51352>>>        // We also need to remove the cache-file since the table has been changed
51352>>>        Get _UtilDeleteCacheFile sTableName to bOK
51353>>>
51353>>>        Function_Return (Err = False)
51354>>>    End_Function
51355>>>
51355>>>    // First deletes the data cache file and then drops the passed data table.
51355>>>    Function SqlTableRemoveByTableName String sTableName Returns Boolean
51357>>>        String sSQLString sPath sDropTable sVal sSchema sDriverID
51357>>>        Integer iRetval iDbType
51357>>>        Boolean bOK
51357>>>
51357>>>        Get psDriverID to sDriverID
51358>>>        Get psDataPathFirstPart to sPath
51359>>>        Get _UtilDeleteCacheFile sTableName to iRetval
51360>>>
51360>>>        Get piDbType to iDbType
51361>>>        Get _SqlFindKeyWord CI_SQLDropTable iDbType to sDropTable
51362>>>        Get psSchema to sSchema
51363>>>        If (sSchema = "") Begin
51365>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
51366>>>        End
51366>>>>
51366>>>        Move (Uppercase(sTableName)) to sVal
51367>>>        If (not(sVal contains (sSchema + "."))) Begin
51369>>>            Move (Lowercase(sSchema) + "." + sTableName) to sTableName
51370>>>        End
51370>>>>
51370>>>        Move (sDropTable * String(sTableName)) to sSQLString
51371>>>
51371>>>        Move False to Err
51372>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
51373>>>
51373>>>        // We also need to remove the cache-file since the table has been changed
51373>>>        Get _UtilDeleteCacheFile sTableName to bOK
51374>>>
51374>>>        Function_Return (Err = False)
51375>>>    End_Function
51376>>>
51376>>>    // *** Sql View Messages ***
51376>>>
51376>>>    Function SqlTableRename Handle hTable String sCurrentTableName String sNewtTableName Returns Boolean
51378>>>        Boolean bOK
51378>>>        Integer iDbType
51378>>>        String sDriverID sAlterTable sRenameTable sSQLTo sSQLString
51378>>>
51378>>>        Get psDriverID to sDriverID
51379>>>        Get piDbType   to iDbType
51380>>>
51380>>>        Case Begin
51380>>>            Case (iDbType = EN_DbTypeDB2)
51382>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
51383>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
51384>>>                Move (sRenameTable * sCurrentTableName * sSQLTo * String(sNewtTableName)) to sSQLString
51385>>>            Break
51386>>>
51386>>>            Case (iDbType = EN_DbTypeMSSQL)
51389>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
51390>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
51391>>>                Move (sRenameTable * "'" - sCurrentTableName - "', '" - String(sNewtTableName) - "'") to sSQLString
51392>>>            Break
51393>>>
51393>>>            Case (iDbType = EN_DbTypeOracle)
51396>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
51397>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
51398>>>                Move (sRenameTable * sCurrentTableName * sSQLTo * String(sNewtTableName)) to sSQLString
51399>>>            Break
51400>>>
51400>>>            Case (iDbType = EN_DbTypePostgre)
51403>>>                Get _SqlFindKeyWord CI_SQLAlterTable  to sAlterTable
51404>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
51405>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
51406>>>                Move (sAlterTable * sCurrentTableName * sRenameTable * sSQLTo * String(sNewtTableName)) to sSQLString
51407>>>            Break
51408>>>
51408>>>            Case (iDbType = EN_DbTypeMySQL)
51411>>>                Get _SqlFindKeyWord CI_SQLRenameTable to sRenameTable
51412>>>                Get _SqlFindKeyWord CI_SQLTo          to sSQLTo
51413>>>                Move (Replaces("-", sNewtTableName, "_")) to sNewtTableName
51414>>>                Move (sRenameTable * sCurrentTableName * sSQLTo * String(sNewtTableName)) to sSQLString
51415>>>            Break
51416>>>        Case End
51416>>>
51416>>>        Move False to Err
51417>>>        Send SqlUtilExecuteQuery sSQLString sDriverID
51418>>>        Move (Err = False) to bOK
51419>>>
51419>>>        Function_Return bOK
51420>>>    End_Function
51421>>>
51421>>>    // * Dummy function for the Studio's Code Explorer *
51421>>>    Function SQL_COLUMN_FUNCTIONS Returns Boolean
51423>>>        Function_Return False
51424>>>    End_Function
51425>>>
51425>>>    // Sample: Get SqlColumnAdd MyTable.File_Number "NewColumnName" True "InitValue" DF_ASCII_DUF 35
51425>>>    Function SqlColumnAdd Integer hTable String sColumnName Integer iDataType Integer iLen Integer iDec Boolean bInitVal String sColVal Returns Boolean
51427>>>        Integer iLength iDecimals
51427>>>        String sColumnValue
51427>>>        String sTableName sDriverID
51427>>>        Boolean bOK bInitializeValue
51427>>>
51427>>>        Get psDriverID to sDriverID
51428>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
51429>>>        If (bOK = False) Begin
51431>>>            Function_Return False
51432>>>        End
51432>>>>
51432>>>
51432>>>        Get UtilTableHandleToString hTable to sTableName
51433>>>        If (sTableName = "") Begin
51435>>>            Function_Return False
51436>>>        End
51436>>>>
51436>>>
51436>>>        If (num_arguments > 3) Begin
51438>>>            Move iLen     to iLength
51439>>>            Move iDec     to iDecimals
51440>>>            Move bInitVal to bInitializeValue
51441>>>            Move sColVal  to sColumnValue
51442>>>        End
51442>>>>
51442>>>
51442>>>        Get SqlColumnAddByTableName sTableName sColumnName iDataType iLen iDecimals bInitializeValue sColumnValue to bOK
51443>>>
51443>>>        Function_Return (bOK = True)
51444>>>    End_Function
51445>>>
51445>>>    // Sample: Get SqlColumnAddByTableName "MyTable" "NewColumnName" DF_ASCII_DUF 35 0 True "InitValue"
51445>>>    Function SqlColumnAddByTableName String sTableName String sColumnName Integer iDataType Integer iLen Integer iDec Boolean bInitVal String sColVal Returns Boolean
51447>>>        Integer iDbType iLength iDecimals iDriver
51447>>>        String sStmt sAlterTable sAddColumn sVal sDataType sLengthAndDecimals sColumnValue
51447>>>        String sDriverID sNotNull
51447>>>        Boolean bOK bInitializeValue bRetval bFixed bDriverIgnoreErrorState
51447>>>        Handle hTable
51447>>>
51447>>>        Get psDriverID to sDriverID
51448>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
51449>>>        If (bOK = False) Begin
51451>>>            Function_Return True
51452>>>        End
51452>>>>
51452>>>
51452>>>        Get UtilTableNameToHandle sTableName to hTable
51453>>>        If (hTable = 0) Begin
51455>>>            Get NextFreeFilelistSlot to hTable
51456>>>        End
51456>>>>
51456>>>
51456>>>        Get piDbType to iDbType
51457>>>        // If a field/column already exists; we just ignore the request to not add unneccesary errors to the log.
51457>>>        Get _SqlFindColumnName sTableName sColumnName to sVal
51458>>>        If (Uppercase(sVal) = Uppercase(sColumnName)) Begin
51460>>>            Function_Return True
51461>>>        End
51461>>>>
51461>>>
51461>>>        Get DriverIndex sDriverID to iDriver
51462>>>        Get_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
51465>>>        Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to True
51468>>>
51468>>>        Get UtilColumnTypeToString sDriverID iDbType iDataType to sDataType
51469>>>        If (num_arguments > 3) Begin
51471>>>            Move iLen     to iLength
51472>>>            Move iDec     to iDecimals
51473>>>            Move bInitVal to bInitializeValue
51474>>>            Move sColVal  to sColumnValue
51475>>>        End
51475>>>>
51475>>>
51475>>>        Get _SqlProperTableName sTableName   to sTableName
51476>>>        Get _SqlFindKeyWord CI_SQLAlterTable to sAlterTable
51477>>>        Get _SqlFindKeyWord CI_SQLAdd        to sAddColumn
51478>>>        Get SQLUtilDefaultNullValue sDriverID iDbType iDataType to sNotNull
51479>>>
51479>>>        Get UtilColumnTypeFixed sDriverID iDbType iDataType to bFixed
51480>>>        If (bFixed = False) Begin
51482>>>            Get _SqlFormatLengthAndDecimalAsString iLength iDecimals to sLengthAndDecimals
51483>>>        End
51483>>>>
51483>>>        Move (sAlterTable * sTableName * sAddColumn * sColumnName * sDataType + sLengthAndDecimals * sNotNull) to sStmt
51484>>>
51484>>>        Move False to Err
51485>>>        Send SqlUtilExecuteQuery sStmt sDriverID
51486>>>
51486>>>        If (bInitializeValue = True and Err = False) Begin
51488>>>            Get SQLColumnUpdateValue hTable sColumnName sColumnValue to bRetval
51489>>>        End
51489>>>>
51489>>>
51489>>>        If (Err = False) Begin
51491>>>            Get SqlUtilAdjustAuxFiles hTable sTableName sColumnName to bOK
51492>>>        End
51492>>>>
51492>>>
51492>>>        Move (not(Err)) to bRetval
51493>>>
51493>>>        // We also need to remove the cache-file since the table has been changed
51493>>>        Get _UtilDeleteCacheFile sTableName to bOK
51494>>>        Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
51497>>>
51497>>>        Function_Return bRetval
51498>>>    End_Function
51499>>>
51499>>>    // To update all current rows for a table column with a common value.
51499>>>    Function SqlColumnUpdateValue Handle hTable String sColumnName String sColumnValue Returns Boolean
51501>>>        String sDriverID sTableName sUpdate sSet sNoCountOn sSqlSafe_Updates sStmt
51501>>>        Boolean bRetval bSQLDriver
51501>>>        Integer iCurrErr iDbType
51501>>>
51501>>>        Move False to bRetval
51502>>>        Get piDbType to iDbType
51503>>>        Get psDriverID to sDriverID
51504>>>        Get IsSQLDriver sDriverID to bSQLDriver
51505>>>        If (bSQLDriver = False) Begin
51507>>>            Function_Return bRetval
51508>>>        End
51508>>>>
51508>>>        Get UtilTableHandleToString hTable to sTableName
51509>>>
51509>>>        Move Err to iCurrErr
51510>>>        Move False to Err
51511>>>        Get _SqlFindKeyWord CI_SQLUpdate       to sUpdate
51512>>>        Get _SqlFindKeyWord CI_SQLSet          to sSet
51513>>>        Get _SqlFindKeyWord CI_SQLSetNoCountOn to sNoCountOn
51514>>>        // If MySQL and DAW's ODBC driver is used we need to do it slightly different.
51514>>>        If (iDbType = EN_DbTypeMySQL) Begin
51516>>>            Get _SqlFindKeyWord CI_SQL_SAFE_UPDATES to sSqlSafe_Updates
51517>>>            Move (sSet * sSqlSafe_Updates + "=0;" * sUpdate * sTableName * sSet * sColumnName + "='" + sColumnValue + "'") to sStmt
51518>>>        End
51518>>>>
51518>>>        Else Begin
51519>>>            Move (sNoCountOn * sUpdate * sTableName * sSet * sColumnName + "='" + sColumnValue + "'") to sStmt
51520>>>        End
51520>>>>
51520>>>
51520>>>        Send SqlUtilExecuteQuery sStmt sDriverID
51521>>>        Move (Err = False) to bRetval
51522>>>        Move iCurrErr to Err
51523>>>
51523>>>        Function_Return bRetval
51524>>>    End_Function
51525>>>
51525>>>    // The fourth & fifth arguments are optional, depending on the iDataType
51525>>>    // passed. For e.g. a DF_ASCII the iLen must be passed.                     // Optional: // Optional:
51525>>>    Function SqlColumnChange Handle hTable String sColumnName Integer iDataType Integer iLen Integer iDec Returns Boolean
51527>>>        String sDriverID sTableName
51527>>>        Boolean bOK
51527>>>
51527>>>        Get psDriverID to sDriverID
51528>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
51529>>>        If (bOK = False) Begin
51531>>>            Function_Return False
51532>>>        End
51532>>>>
51532>>>
51532>>>        Get UtilTableHandleToString hTable to sTableName
51533>>>        Get SqlColumnChangeByTableName sTableName sColumnName iDataType iLen iDec to bOK
51534>>>
51534>>>        Function_Return (Err = False)
51535>>>    End_Function
51536>>>
51536>>>    // Same as SqlColumnChange but instead of passing a filelist number; pass the table name as a string.
51536>>>    // The fourth & fifth arguments are optional, depending on the iDataType
51536>>>    // passed. For e.g. a DF_ASCII the iLen must be passed.                     // Optional: // Optional:
51536>>>    Function SqlColumnChangeByTableName String sTableName String sColumnName Integer iDataType Integer iLen Integer iDec Returns Boolean
51538>>>        Integer iDbType iLength iDecimals
51538>>>        String sDriverID sStmt sAlterTable sAlterColumn sDataType sLengthAndDecimals sNotNull
51538>>>        Boolean bExists bOK bFixed
51538>>>        Handle hTable
51538>>>
51538>>>        Get psDriverID to sDriverID
51539>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
51540>>>        If (bOK = False) Begin
51542>>>            Function_Return False
51543>>>        End
51543>>>>
51543>>>
51543>>>        Get UtilTableNameToHandle sTableName to hTable
51544>>>        If (hTable = 0) Begin
51546>>>            Get NextFreeFilelistSlot to hTable
51547>>>        End
51547>>>>
51547>>>        Get SQLUtilColumnExists sTableName sColumnName to bExists
51548>>>        If (bExists = False) Begin
51550>>>            Function_Return False
51551>>>        End
51551>>>>
51551>>>
51551>>>        If (num_arguments > 3) Begin
51553>>>            Move iLen to iLength
51554>>>        End
51554>>>>
51554>>>        If (num_arguments > 4) Begin
51556>>>            Move iDec to iDecimals
51557>>>        End
51557>>>>
51557>>>
51557>>>        Get piDbType to iDbType
51558>>>        Get UtilColumnTypeToString sDriverID iDbType iDataType to sDataType
51559>>>
51559>>>        Move False to Err
51560>>>        Get _SqlProperTableName sTableName    to sTableName
51561>>>        Get _SqlFindKeyWord CI_SQLAlterTable  to sAlterTable
51562>>>        Get _SqlFindKeyWord CI_SQLAlterColumn to sAlterColumn
51563>>>        Get SQLUtilDefaultNullValue sDriverID iDbType iDataType to sNotNull
51564>>>
51564>>>        Get UtilColumnTypeFixed sDriverID iDbType iDataType to bFixed
51565>>>        If (bFixed = False) Begin
51567>>>            Get _SqlFormatLengthAndDecimalAsString iLength iDecimals to sLengthAndDecimals
51568>>>        End
51568>>>>
51568>>>
51568>>>        Move (sAlterTable * sTableName * sAlterColumn * sColumnName * sDataType + sLengthAndDecimals * sNotNull) to sStmt
51569>>>        Send SqlUtilExecuteQuery sStmt sDriverID
51570>>>
51570>>>        // We also need to remove the cache-file since the table has been changed
51570>>>        Get _UtilDeleteCacheFile sTableName to bOK
51571>>>
51571>>>        Function_Return (Err = False)
51572>>>    End_Function
51573>>>
51573>>>    Function SqlColumnDefaultValue Handle hTable Integer iColumn String sValue Returns Boolean
51575>>>        Boolean bOK bErr bIsSQLDriver
51575>>>        String sDriverID
51575>>>        Integer iDataType
51575>>>
51575>>>        Get psDriverID to sDriverID
51576>>>        Get IsSQLDriver sDriverID to bIsSQLDriver
51577>>>        If (bIsSQLDriver = False) Begin
51579>>>            Function_Return False
51580>>>        End
51580>>>>
51580>>>
51580>>>        Move Err to bErr
51581>>>        Move False to bErr
51582>>>
51582>>>        // There seems to be a problem with the ODBC_DRV driver that sometimes
51582>>>        // inserts randomly character(10) and spaces, so we correct from that here:
51582>>>        Move (Replaces(Character(10), Trim(sValue), "")) to sValue
51583>>>        Get_Attribute DF_FIELD_TYPE of hTable iColumn to iDataType
51586>>>        If (iDataType = DF_BCD and Left(sValue, 1 <> "[")) Begin
51588>>>            Move ("[" + String(sValue) + "]") to sValue
51589>>>        End
51589>>>>
51589>>>
51589>>>        Set_Attribute DF_FIELD_DEFAULT_VALUE of hTable iColumn to sValue
51592>>>        Move (not(Err)) to bOK
51593>>>        Move bErr to Err
51594>>>
51594>>>        Function_Return bOK
51595>>>    End_Function
51596>>>
51596>>>    Function SqlColumnNullable Handle hTable Integer iColumn Boolean bNullable Returns Boolean
51598>>>        Boolean bOK bErr bCurrentState bOpen bIsSQLDriver
51598>>>        String sDriverID
51598>>>
51598>>>        Get psDriverID to sDriverID
51599>>>        Get IsSQLDriver sDriverID to bIsSQLDriver
51600>>>        If (bIsSQLDriver = False) Begin
51602>>>            Function_Return False
51603>>>        End
51603>>>>
51603>>>
51603>>>        Move Err to bErr
51604>>>        Move False to bErr
51605>>>        Get_Attribute DF_FIELD_NULL_ALLOWED of hTable iColumn to bCurrentState
51608>>>        If (bNullable = bCurrentState) Begin
51610>>>            Function_Return True
51611>>>        End
51611>>>>
51611>>>
51611>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
51614>>>        If (bOpen = False) Begin
51616>>>            Get AutoConnectionIDLogin to bOK
51617>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
51618>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_INTERMEDIATE_FILE
51619>>>            Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
51620>>>            Open hTable
51622>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
51623>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_INTERMEDIATE_FILE
51624>>>            Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
51625>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
51628>>>        End
51628>>>>
51628>>>        If (bOpen = True) Begin
51630>>>            Structure_Start hTable sDriverID
51631>>>                Set_Attribute DF_FIELD_NULL_ALLOWED of hTable iColumn to bNullable
51634>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
51635>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
51637>>>            Set Action_Text of ghoStatusPanel to ""
51638>>>        End
51638>>>>
51638>>>
51638>>>        Move (not(Err)) to bOK
51639>>>        Move bErr to Err
51640>>>
51640>>>        Function_Return bOK
51641>>>    End_Function
51642>>>
51642>>>    // Drop column by its table handle
51642>>>    Function SqlColumnRemove Handle hTable String sColumnName Returns Boolean
51644>>>        String sDriverID sTableName
51644>>>        Boolean bOK
51644>>>
51644>>>        Get psDriverID to sDriverID
51645>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
51646>>>        If (bOK = False) Begin
51648>>>            Function_Return False
51649>>>        End
51649>>>>
51649>>>
51649>>>        Get UtilTableHandleToString hTable to sTableName
51650>>>        If (sTableName = "") Begin
51652>>>            Function_Return False
51653>>>        End
51653>>>>
51653>>>
51653>>>        Get SqlColumnRemoveByTableName sTableName sColumnName to bOK
51654>>>
51654>>>        Function_Return (bOK = True)
51655>>>    End_Function
51656>>>
51656>>>    // Drop column by its table name as a string.
51656>>>    Function SqlColumnRemoveByTableName String sTableName String sColumnName Returns Boolean
51658>>>        Integer iDbType iDriver
51658>>>        String sDriverID sStmt sAlterTable sDropColumn
51658>>>        Boolean bExists bOK bRetval bDriverIgnoreErrorState
51658>>>        Handle hTable
51658>>>
51658>>>        Get psDriverID to sDriverID
51659>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
51660>>>        If (bOK = False) Begin
51662>>>            Function_Return False
51663>>>        End
51663>>>>
51663>>>
51663>>>        Get DriverIndex sDriverID to iDriver
51664>>>        Get_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
51667>>>        Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to True
51670>>>
51670>>>        Get UtilTableNameToHandle sTableName to hTable
51671>>>        If (hTable <> 0) Begin
51673>>>            Get SQLUtilColumnExists sTableName sColumnName to bExists
51674>>>            If (bExists = False) Begin
51676>>>                Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
51679>>>                Function_Return False
51680>>>            End
51680>>>>
51680>>>        End
51680>>>>
51680>>>
51680>>>        Get piDbType to iDbType
51681>>>        If (iDbType = EN_DbTypeMSSQL) Begin
51683>>>            Get _SqlUtilRemoveTableColumnMSSQL sTableName sColumnName to bOK
51684>>>            Get _UtilDeleteCacheFile sTableName to bOK
51685>>>            Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
51688>>>            Function_Return bOK
51689>>>        End
51689>>>>
51689>>>
51689>>>        Move False to Err
51690>>>        Get _SqlProperTableName sTableName    to sTableName
51691>>>        Get _SqlFindKeyWord CI_SQLAlterTable  to sAlterTable
51692>>>        Get _SqlFindKeyWord CI_SQLDropColumn  to sDropColumn
51693>>>
51693>>>        Move (sAlterTable * sTableName * sDropColumn * sColumnName) to sStmt
51694>>>        Send SqlUtilExecuteQuery sStmt sDriverID
51695>>>        Move (not(Err)) to bRetval
51696>>>
51696>>>        // We also need to remove the cache-file since the table has been changed
51696>>>        Get _UtilDeleteCacheFile sTableName to bOK
51697>>>        Set_Attribute DF_DRIVER_IGNORE_WARNINGS of iDriver to bDriverIgnoreErrorState
51700>>>
51700>>>        Function_Return bRetval
51701>>>    End_Function
51702>>>
51702>>>    // Rename a field/column by table handle (filelist number)
51702>>>    Function SqlColumnRename Integer hTable String sColumnName String sNewColumnName Returns Boolean
51704>>>        String sDriverID sTableName
51704>>>        Boolean bOK
51704>>>
51704>>>        Get psDriverID to sDriverID
51705>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
51706>>>        If (bOK = False) Begin
51708>>>            Function_Return False
51709>>>        End
51709>>>>
51709>>>
51709>>>        Get UtilTableHandleToString hTable to sTableName
51710>>>        Get SqlColumnRenameByTableName sTableName sColumnName sNewColumnName to bOK
51711>>>
51711>>>        Function_Return (Err = False)
51712>>>    End_Function
51713>>>
51713>>>    // Rename a field/column by table name.
51713>>>    Function SqlColumnRenameByTableName String sTableName String sColumnName String sNewColumnName Returns Boolean
51715>>>        Integer iDbType iDataType
51715>>>        String sDriverID sStmt sAlterTable sRenameColumn sVal sColumnKeyWord sOrgTableName sDatabase sDataType
51715>>>        Boolean bOK bRetval
51715>>>        Handle hTable
51715>>>
51715>>>        Move sTableName to sOrgTableName
51716>>>        Get psDriverID to sDriverID
51717>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
51718>>>        If (bOK = False) Begin
51720>>>            Function_Return False
51721>>>        End
51721>>>>
51721>>>
51721>>>        Get _SqlFindColumnName sTableName sColumnName to sVal
51722>>>        If (sVal = "") Begin
51724>>>            Function_Return False
51725>>>        End
51725>>>>
51725>>>
51725>>>        Get piDbType to iDbType
51726>>>        Get _SqlFindKeyWord CI_SQLColumn       to sColumnKeyWord
51727>>>        Get _SqlProperTableName sTableName     to sTableName
51728>>>        Get _SqlFindKeyWord CI_SQLAlterTable   to sAlterTable
51729>>>        Get _SqlFindKeyWord CI_SQLRenameColumn to sRenameColumn
51730>>>
51730>>>        Case Begin
51730>>>            Case (iDbType = EN_dbTypeMSSQL)
51732>>>                Move (sRenameColumn * "'" + sTableName + "." + sColumnName + "'," * "'" + sNewColumnName + "'," * "'" + sColumnKeyWord + "'") to sStmt
51733>>>                Case Break
51734>>>            // Alter table "SYS"."Customer" rename column "Comments" to "NewColumnName"
51734>>>            Case (iDbType = EN_dbTypeOracle)
51737>>>                Move (sAlterTable * '"' + sTableName + '"' * sRenameColumn * '"' + sColumnName + '"' * "TO" * '"' + sNewColumnName + '"') to sStmt
51738>>>                Case Break
51739>>>            // ALTER TABLE Schema.TableName RENAME COLUMN "deptnumb" TO "deptnum"
51739>>>            Case (iDbType = EN_dbTypeDB2)
51742>>>                Move (sAlterTable *  sTableName * sRenameColumn * '"' + sColumnName + '"' * "TO" * '"' + sNewColumnName + '"') to sStmt
51743>>>                Case Break
51744>>>            // ALTER TABLE "Customer" RENAME COLUMN "Comments" TO "NewColumnName"
51744>>>            Case (iDbType = EN_dbTypePostgre)
51747>>>                Move sOrgTableName to sTableName
51748>>>                Move (sAlterTable * '"' + sTableName + '"' * sRenameColumn * '"' + sColumnName + '"' * "TO" * '"' + sNewColumnName + '"') to sStmt
51749>>>                Case Break
51750>>>            Case (iDbType = EN_dbTypeMySQL)
51753>>>                // ALTER TABLE orderentry.customer CHANGE Comments NewColumnName text // Note: The last token is the column type!
51753>>>                Move sOrgTableName to sTableName
51754>>>                Get psDatabase to sDatabase
51755>>>                Get UtilTableNameToHandle sTableName to hTable
51756>>>                If (hTable = 0) Begin
51758>>>                    Get UtilTableOpen hTable sTableName DF_SHARE to bOK
51759>>>                    If (bOK = False) Begin
51761>>>                        Function_Return False
51762>>>                    End
51762>>>>
51762>>>                    Get NextFreeFilelistSlot to hTable
51763>>>                End
51763>>>>
51763>>>                Else Begin
51764>>>                    Open hTable
51766>>>                End
51766>>>>
51766>>>                Get SQLColumnType sDriverID hTable sTableName sColumnName to iDataType
51767>>>                Get UtilColumnTypeToString sDriverID iDbType iDataType    to sDataType
51768>>>                Move (sAlterTable * sDatabase + "." + sTableName * sRenameColumn * sColumnName * sNewColumnName * sDataType) to sStmt
51769>>>                Case Break
51770>>>            Case Else
51770>>>                Move (sAlterTable * "'" + sTableName + "'" * sRenameColumn * "'" + sTableName + "." + sColumnName + "'" * "TO" * "'" + sNewColumnName + "'") to sStmt
51771>>>        Case End
51771>>>
51771>>>        Move False to Err
51772>>>        Send SqlUtilExecuteQuery sStmt sDriverID
51773>>>        Move (Err = False) to bRetval
51774>>>        // We also need to remove the cache-file since the table has been changed
51774>>>        Get _UtilDeleteCacheFile sTableName to bOK
51775>>>
51775>>>        Function_Return bRetval
51776>>>    End_Function
51777>>>
51777>>>    Function SqlColumnType String sDriverID Handle hTable String sTableName String sColumnName Returns Integer
51779>>>        Handle hoSQLHandler hSQLConnect hStmt
51779>>>        Integer iNumCols iCount iDataType
51779>>>        String sValue
51779>>>
51779>>>        Get phoSQLManager to hoSQLHandler
51780>>>        Get SQLFileConnect of hoSQLHandler hTable to hSQLConnect
51781>>>        If (hSQLConnect <> 0) Begin
51783>>>            Get SQLOpen of hSQLConnect to hStmt
51784>>>            If (hStmt <> 0) Begin
51786>>>                Send SQLExecDirect of hStmt ("select * from" * sTableName)
51787>>>
51787>>>                Get SQLStmtAttribute of hStmt SQLSTMTATTRIB_COLUMNCOUNT to iNumCols
51788>>>                For iCount from 1 to iNumCols
51794>>>>
51794>>>                    Get SQLColAttribute of hStmt iCount SQLCOLATTRIB_LABEL to sValue
51795>>>                    If (Lowercase(sValue) = Lowercase(sColumnName)) Begin
51797>>>                        Get SQLColAttribute of hStmt iCount SQLCOLATTRIB_SQLTYPE to iDataType
51798>>>                        Move iNumCols to iCount // We're out of here
51799>>>                    End
51799>>>>
51799>>>                Loop
51800>>>>
51800>>>
51800>>>                Send SQLClose of hStmt
51801>>>            End
51801>>>>
51801>>>            Send SQLDisconnect of hSQLConnect
51802>>>        End
51802>>>>
51802>>>
51802>>>        Function_Return iDataType
51803>>>    End_Function
51804>>>
51804>>>    // * Dummy function for the Studio's Code Explorer *
51804>>>    Function SQL_EXECUTE_FUNCTIONS Returns Boolean
51806>>>        Function_Return False
51807>>>    End_Function
51808>>>
51808>>>    Procedure SqlUtilExecuteQuery String sStmt String sDriverID Boolean bShowProgr
51810>>>        String sMessage // sConnectionString
51810>>>        Handle hoSqlHandler hoSQLConnect hoStmt hoError
51810>>>        Integer i iMsgs iFetchResult iRowType iRows iErr iMessage iLastErr
51810>>>        String[] sMsg aSQLQueryMessages aSQLFetchResults
51813>>>        DateTime dtQueryExecStart dtQueryExecEnd dtFetchStart dtFetchEnd
51813>>>        TimeSpan tsQuery tsFetch
51813>>>        tSqlErrorArray aSqlErrorArray
51813>>>        tSqlErrorArray aSqlErrorArray
51813>>>        Boolean bOK bShowProgress
51813>>>        tSQLConnection SQLConnection
51813>>>        tSQLConnection SQLConnection
51813>>>
51813>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
51814>>>        If (bOK = False) Begin
51816>>>            Procedure_Return
51817>>>        End
51817>>>>
51817>>>
51817>>>        If (num_arguments > 2) Begin
51819>>>            Move bShowProgr to bShowProgress
51820>>>        End
51820>>>>
51820>>>
51820>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
51821>>>        Get phoSQLManager to hoSqlHandler
51822>>>        Send SqlSetConnect of hoSqlHandler sDriverID SQLConnection.sConnectionString
51823>>>        Get SqlConnect     of hoSqlHandler "" "" to hoSQLConnect
51824>>>
51824>>>        If (hoSQLConnect <> 0) Begin
51826>>>            Get SqlOpen of hoSQLConnect to hoStmt
51827>>>            If (hoStmt <> 0) Begin
51829>>>                // record starting date/time stamp
51829>>>                Move (CurrentDateTime()) to dtQueryExecStart
51830>>>                // turn on error handling if enabled
51830>>>                If (pbHandleQueryErrors(Self)) Begin
51832>>>                    Set pbSqlError to False
51833>>>                    Set paSqlErrorArray to aSqlErrorArray
51834>>>                    Move Error_Object_Id to hoError
51835>>>                    If (ghoDbUpdateHandler <> 0) Begin
51837>>>                        Move ghoDbUpdateHandler to Error_Object_Id
51838>>>                    End
51838>>>>
51838>>>                    Else Begin
51839>>>                        Move Self to Error_Object_Id
51840>>>                    End
51840>>>>
51840>>>                End
51840>>>>
51840>>>
51840>>>                // Before we execute the statement; save it so we can display the faulty statement in the error log.
51840>>>                Set psSQLStatementString to sStmt
51841>>>                Send Cursor_Wait of Cursor_Control
51842>>>                Send SqlExecDirect of hoStmt sStmt
51843>>>                Send Cursor_Ready of Cursor_Control
51844>>>
51844>>>                If (pbHandleQueryErrors(Self)) Begin
51846>>>                    Move hoError to Error_Object_Id
51847>>>                End
51847>>>>
51847>>>
51847>>>                Move 0 to iMsgs
51848>>>                Move Err to iErr
51849>>>                Move LastErr to iLastErr
51850>>>                Get SqlStmtAttribute of hoStmt SQLSTMTATTRIB_NUMMESSAGES   to iMsgs
51851>>>                Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_ROWCOUNT      to iRows
51852>>>                Get SqlStmtAttribute of hoStmt SqlSTMTATTRIB_ROWCOUNT_TYPE to iRowType
51853>>>                Send _SqlColumnInfo hoStmt
51854>>>                Send Ignore_Error of Error_Object_Id 12289
51855>>>                Set Error_Report_Mode to DUF_ERROR_NO_REPORT
51856>>>                Repeat
51856>>>>
51856>>>                    Get SqlFetch of hoStmt to iFetchResult
51857>>>                    If (iFetchResult <> 0) Begin
51859>>>                        Get SQLColumnValue of hoStmt 1 to aSQLFetchResults[SizeOfArray(aSQLFetchResults)]
51860>>>                    End
51860>>>>
51860>>>                Until (iFetchResult = 0)
51862>>>                Send Trap_Error of Error_Object_Id 12289
51863>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
51864>>>                Move iErr to Err
51865>>>                Move iLastErr to LastErr
51866>>>                Set paSQLFetchResults to aSQLFetchResults
51867>>>
51867>>>                Set piRows    to iRows
51868>>>                Set piRowType to iRowType
51869>>>                Move (CurrentDateTime()) to dtQueryExecEnd
51870>>>                Move (CurrentDateTime()) to dtFetchStart
51871>>>
51871>>>                If (iMsgs <> 0) Begin
51873>>>                    If (ghoDbUpdateHandler > 0) Begin
51875>>>                        Get paSQLQueryMessages of ghoDbUpdateHandler to aSQLQueryMessages
51876>>>                    End
51876>>>>
51876>>>                    For i from 1 to iMsgs
51882>>>>
51882>>>                        Get SqlGetMessage of hoStmt i to sMessage
51883>>>                        Get RemoveComponentIdentifier of hoStmt sMessage to sMessage
51884>>>                        If (bShowProgress = True) Begin
51886>>>                            If (Active_State(ghoStatusPanel)) Begin
51888>>>                                Send Update_StatusPanel of ghoStatusPanel (Sformat("  SQLGetMessage iMessage %1 returned [%2]",iMessage,sMessage))
51889>>>                            End
51889>>>>
51889>>>                            Else Begin
51890>>>                                Showln (Sformat("  SQLGetMessage iMessage %1 returned [%2]",iMessage,sMessage))
51892>>>                            End
51892>>>>
51892>>>                        End
51892>>>>
51892>>>                        Move sMessage to sMsg[SizeOfArray(sMsg)]
51893>>>                        Move sMessage to aSQLQueryMessages[SizeOfArray(aSQLQueryMessages)]
51894>>>                    Loop
51895>>>>
51895>>>                    If (ghoDbUpdateHandler > 0) Begin
51897>>>                        Set paSQLQueryMessages of ghoDbUpdateHandler to aSQLQueryMessages
51898>>>                    End
51898>>>>
51898>>>                    Set paQueryMessages to sMsg
51899>>>                End
51899>>>>
51899>>>                Else Begin
51900>>>                    If (bShowProgress = True) Begin
51902>>>                        Get paSqlErrorArray to aSqlErrorArray
51903>>>                        If (SizeOfArray(aSqlErrorArray.iSqlErrorArray)) Begin
51905>>>                            Move (SizeOfArray(aSqlErrorArray.iSqlErrorArray)) to iMsgs
51906>>>                            Decrement iMsgs
51907>>>                            For i from 0 to iMsgs
51913>>>>
51913>>>                                Showln "Embedded SQL Statement: " aSqlErrorArray.sSqlStatementArray[i]
51916>>>                                Showln "SQL Error Message     : " aSqlErrorArray.sSqlErrorArray[i]
51919>>>                            Loop
51920>>>>
51920>>>                        End
51920>>>>
51920>>>                    End
51920>>>>
51920>>>                End
51920>>>>
51920>>>                Move (CurrentDateTime()) to dtFetchEnd
51921>>>            End
51921>>>>
51921>>>            Move (dtQueryExecEnd - dtQueryExecStart) to tsQuery
51922>>>            Move (dtFetchStart - dtFetchEnd) to tsFetch
51923>>>            Set ptsQueryExec to tsQuery
51924>>>            Set ptsFetchResults to tsFetch
51925>>>            Send SqlClose of hoStmt
51926>>>        End
51926>>>>
51926>>>
51926>>>        Send SqlDisconnect of hoSQLConnect
51927>>>    End_Procedure
51928>>>
51928>>>    // *** Main message for executing an SQL script that has been compiled into the program as a resource ***
51928>>>    // Use the SQLIncludeScriptFile command to include an SQL script into the program.
51928>>>    // Returns False if no error occured.
51928>>>    Function SqlUtilExecuteResource String sMemFileName String sDriverID Boolean bCreateScriptFile Boolean bShowProgr Returns Boolean
51930>>>        Boolean bOK bShowProgress
51930>>>        tSQLScriptArray SQLScriptArray
51930>>>        tSQLScriptArray SQLScriptArray
51930>>>        DateTime dtTotalQueryStart dtTotalQueryEnd
51930>>>        TimeSpan tsTotalTime
51930>>>
51930>>>        Move (CurrentDateTime()) to dtTotalQueryStart
51931>>>        Get _SqlUtilReadResource sMemFileName to SQLScriptArray
51932>>>        If (SQLScriptArray.bError = True) Begin
51934>>>            Function_Return False
51935>>>        End
51935>>>>
51935>>>
51935>>>        If (num_arguments > 3) Begin
51937>>>            Move bShowProgr to bShowProgress
51938>>>        End
51938>>>>
51938>>>
51938>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
51939>>>        Get _SqlUtilExecuteEmbeddedScript SQLScriptArray sDriverID bCreateScriptFile sMemFileName bShowProgress to bOK
51940>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
51941>>>
51941>>>        Move (CurrentDateTime()) to dtTotalQueryEnd
51942>>>        Move (dtTotalQueryEnd - dtTotalQueryStart) to tsTotalTime
51943>>>        Set ptsTotalQueryTime to tsTotalTime
51944>>>
51944>>>        Function_Return bOK
51945>>>    End_Function
51946>>>
51946>>>    // * Dummy function for the Studio's Code Explorer *
51946>>>    Function SQL_UTILITY_FUNCTIONS Returns Boolean
51948>>>        Function_Return False
51949>>>    End_Function
51950>>>
51950>>>    // Does three things with auxilirary files;
51950>>>    // 1) Deletes the cache file in the first Data folder of the psDataPath property as the table at the SQL end has been changed.
51950>>>    // 2) Adds the sColumnName to the TableName.tag file in the first Data folder of the psDataPath property
51950>>>    // 3) Creates a new TableName.fd file if the DdSrc folder is available (if this is a development environment)
51950>>>    Function SqlUtilAdjustAuxFiles Handle hTable String sTableName String sColumnName Returns Boolean
51952>>>        String sDataPath sDDSrcPath sDriverID
51952>>>        Boolean bOK bExists
51952>>>        Integer iCount iCh iPos
51952>>>
51952>>>        // If table name equals e.g. "dbo.MyTable" we need to remove the prefix.
51952>>>        If (sTableName contains ".") Begin
51954>>>            Move (Pos(".", sTableName)) to iPos
51955>>>            Move (Mid(sTableName, 999, (iPos +1))) to sTableName
51956>>>        End
51956>>>>
51956>>>
51956>>>        Get psDriverID to sDriverID
51957>>>        Get psDataPathFirstPart to sDataPath
51958>>>        Get vFolderExists sDataPath to bOK
51959>>>        If (bOK = False) Begin
51961>>>            Error DFERR_PROGRAM "Function SqlUtilAdjustAuxFiles; psDataPath not found!"
51962>>>>
51962>>>            Function_Return False
51963>>>        End
51963>>>>
51963>>>
51963>>>        // First delete the cache file:
51963>>>        Get _UtilDeleteCacheFile sTableName to bOK
51964>>>
51964>>>        Get Seq_New_Channel to iCh
51965>>>        If (iCh = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
51967>>>            Function_Return False
51968>>>        End
51968>>>>
51968>>>
51968>>>        Get vFilePathExists (sDataPath + sTableName + ".tag") to bExists
51969>>>        If (bExists = False) Begin
51971>>>            Function_Return False
51972>>>        End
51972>>>>
51972>>>
51972>>>        Get _SqlUtilUpdateIntFile hTable to bOK
51973>>>        // Add the new column name to the .tag filen (if it doesn't exist):
51973>>>        Get _UtilUpdateTAGFile (sDataPath + sTableName + ".tag") sColumnName to bOK
51974>>>
51974>>>        // If in development environment; output new .fd file:
51974>>>        Get psDdSrcPath of (phoWorkspace(ghoApplication)) to sDDSrcPath
51975>>>        Get CountOfPaths of (phoWorkspace(ghoApplication)) sDDSrcPath to iCount
51976>>>        If (iCount > 1) Begin
51978>>>            Get PathAtIndex of (phoWorkspace(ghoApplication)) sDDSrcPath 1 to sDDSrcPath
51979>>>        End
51979>>>>
51979>>>        Get vFolderExists sDDSrcPath to bExists
51980>>>        If (bExists = True) Begin
51982>>>            Get vFolderFormat sDDSrcPath to sDDSrcPath
51983>>>            Move False to Err
51984>>>            Get AutoConnectionIDLogin to bOK
51985>>>            If (hTable <> 0) Begin
51987>>>                Open hTable
51989>>>            End
51989>>>>
51989>>>            Else Begin
51990>>>                Get UtilTableOpen hTable sTableName DF_SHARE to bOK
51991>>>            End
51991>>>>
51991>>>
51991>>>            Get_Attribute DF_FILE_OPENED of hTable to bOK
51994>>>            If (bOK = True) Begin
51996>>>                Output_Aux_File DF_AUX_FILE_FD for hTable to (sDDSrcPath + sTableName + ".fd")
51998>>>            End
51998>>>>
51998>>>            If (Err = True) Begin
52000>>>                Move False to bOK
52001>>>            End
52001>>>>
52001>>>        End
52001>>>>
52001>>>
52001>>>        Function_Return (bOK = True)
52002>>>    End_Function
52003>>>
52003>>>    // Message for changing .int files to use connection ID's
52003>>>    //
52003>>>    // Changes all ".int" files for the passed sDataPath to use a sConnectionID,
52003>>>    // OR changes an existing connection id to a new id.
52003>>>    // Pass the full path to the data folder and the name of the connection id (string value).
52003>>>    // Pass a True for the bShowResult parameter to show work in progress (showln's).
52003>>>    Procedure SqlUtilChangeIntFilesToConnectionIDs String sDataPath String sConnectionID Boolean bShowResult
52005>>>        String sFileName sDriverID sDriverFile sConnectionString
52005>>>        String[] sFilesData
52006>>>        Boolean bOK bCancel
52006>>>        Integer iSize iCount
52006>>>
52006>>>        Get SqlUtilEnumerateIntFiles sDataPath to sFilesData
52007>>>        Move (SizeOfArray(sFilesData))    to iSize
52008>>>        If (iSize = 0) Begin
52010>>>            If (ghoStatusPanel <> 0) Begin
52012>>>                If (Active_State(ghoStatusPanel)) Begin
52014>>>                    Send Stop_StatusPanel of ghoStatusPanel
52015>>>                End
52015>>>>
52015>>>            End
52015>>>>
52015>>>            Send Info_Box CS_DUF_NoIntFilesFound
52016>>>            Procedure_Return
52017>>>        End
52017>>>>
52017>>>
52017>>>        Move (Trim(sConnectionID)) to sConnectionID
52018>>>        Get vFolderFormat sDataPath to sDataPath
52019>>>        Decrement iSize
52020>>>        For iCount from 0 to iSize
52026>>>>
52026>>>            Move sFilesData[iCount] to sFileName
52027>>>            // This makes sure that we also can change an existing connection id to something new:
52027>>>            Get _UtilChangeSourceCodeLine (sDataPath + sFileName) CS_SERVER_NAME (CS_SERVER_NAME * CS_DFCONNID + "=" + sConnectionID) bShowResult to bOK
52028>>>            If (ghoStatusPanel <> 0) Begin
52030>>>                If (Active_State(ghoStatusPanel)) Begin
52032>>>                    Get Check_StatusPanel of ghoStatusPanel to bCancel
52033>>>                    If (bCancel = True) Begin
52035>>>                        Send Deactivate of ghoStatusPanel
52036>>>                        Procedure_Return
52037>>>                    End
52037>>>>
52037>>>                End
52037>>>>
52037>>>            End
52037>>>>
52037>>>        Loop
52038>>>>
52038>>>
52038>>>        Get psDriverID to sDriverID
52039>>>
52039>>>         // Finally also change the driver file e.g. MSSQLDRV.int file in the Data folder in case it has a "DFconnectionID xxxxID,SERVER..."
52039>>>        Move "" to sFileName
52040>>>        If (sDriverID = MSSQLDRV_ID) Begin
52042>>>            Move "MSSQLDrv.int" to sFileName
52043>>>        End
52043>>>>
52043>>>        If (sDriverID = DB2_DRV_ID) Begin
52045>>>            Move "DB2_Drv.int" to sFileName
52046>>>        End
52046>>>>
52046>>>        If (sDriverID = ODBC_DRV_ID) Begin
52048>>>            Move "ODBC_Drv.int" to sFileName
52049>>>        End
52049>>>>
52049>>>        If (sFileName <> "") Begin
52051>>>            Move "" to sDriverFile
52052>>>            Get_File_Path sFileName to sDriverFile
52053>>>            If (sDriverFile <> "") Begin
52055>>>                Get psConnectionString to sConnectionString
52056>>>                Get _UtilChangeSourceCodeLine sDriverFile CS_SQLConnectionIDText (CS_SQLConnectionIDText * String(sConnectionID) + "," * String(sConnectionString) * String(",0")) bShowResult to bOK
52057>>>            End
52057>>>>
52057>>>        End
52057>>>>
52057>>>    End_Procedure
52058>>>
52058>>>    // Checks if the database exists in SQL. Returns = True if it does.
52058>>>    Function SqlUtilCheckIfDatabaseExists String sDatabase Returns Boolean
52060>>>        String[] sDatabaseArray
52061>>>        String sVal sServer sDriverID
52061>>>        Integer iCount iSize iPos
52061>>>        Boolean bExists
52061>>>        tSQLConnection SQLConnection
52061>>>        tSQLConnection SQLConnection
52061>>>
52061>>>        Move False to bExists
52062>>>        Get psDriverID to sDriverID
52063>>>        // DB2 doesn't have a "Database" name, so we always return True.
52063>>>        If (sDriverID = DB2_DRV_ID) Begin
52065>>>            Function_Return bExists
52066>>>        End
52066>>>>
52066>>>
52066>>>        Get SqlUtilEnumerateDatabases sDriverID to sDatabaseArray
52067>>>        If (SizeOfArray(sDatabaseArray) = 0) Begin
52069>>>            Function_Return False
52070>>>        End
52070>>>>
52070>>>
52070>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
52071>>>        Move SQLConnection.sServer to sServer
52072>>>
52072>>>        // Special code to handle a FILEDSN that also can contain "/"
52072>>>        If (Uppercase(sServer) contains ("." + CS_SQLIniDSNKeyword)) Begin
52074>>>            Move sDatabaseArray[0] to sVal  // Dummy!
52075>>>        End
52075>>>>
52075>>>        Else If (sServer contains "/") Begin
52078>>>            Move (Pos("/", sServer)) to iPos
52079>>>            Move (Mid(sServer, 999, (iPos +1))) to sDatabase
52080>>>        End
52080>>>>
52080>>>
52080>>>        Move (SizeOfArray(sDatabaseArray)) to iSize
52081>>>        Decrement iSize
52082>>>        For iCount from 0 to iSize
52088>>>>
52088>>>            Move sDatabaseArray[iCount] to sVal
52089>>>            If (Uppercase(sVal) = Uppercase(sDatabase)) Begin
52091>>>                Move True to bExists
52092>>>                If (bExists = True) Begin
52094>>>                    Move iSize to iCount // We're done.
52095>>>                End
52095>>>>
52095>>>            End
52095>>>>
52095>>>        Loop
52096>>>>
52096>>>
52096>>>        Function_Return bExists
52097>>>    End_Function
52098>>>
52098>>>    // Checks if a table exists as an SQL table. Returns = True if it does.
52098>>>    Function SqlUtilCheckIfTableHandleExists Handle hTable String sDriverID Returns Boolean
52100>>>        String sDatabase sSchema sTableName sVal
52100>>>        Boolean bExists
52100>>>        String[] sTablesArray
52101>>>        Integer iSize iCount
52101>>>
52101>>>        Move False to bExists
52102>>>        Get UtilTableHandleToString hTable to sTableName
52103>>>        Get psDatabase to sDatabase
52104>>>        Get psSchema   to sSchema
52105>>>        Get _SqlUtilEnumerateTables sDriverID sDatabase sSchema to sTablesArray
52106>>>        Move (SizeOfArray(sTablesArray)) to iSize
52107>>>        Decrement iSize
52108>>>        For iCount from 0 to iSize
52114>>>>
52114>>>            Move sTablesArray[iCount] to sVal
52115>>>            If (Uppercase(sVal) = Uppercase(sTableName)) Begin
52117>>>                Move True to bExists
52118>>>                Move iSize to iCount // We're done!
52119>>>            End
52119>>>>
52119>>>        Loop
52120>>>>
52120>>>
52120>>>        Function_Return bExists
52121>>>    End_Function
52122>>>
52122>>>    Function SqlUtilCheckIfTableNameSpelling String sDriverID String sDatabase String sTableName String sSchema Returns String
52124>>>        String sVal sTableSpelledCorrectly
52124>>>        Boolean bExists
52124>>>        String[] sTablesArray
52125>>>        Integer iSize iCount
52125>>>
52125>>>        Move False to bExists
52126>>>        Move sTableName to sTableSpelledCorrectly
52127>>>        Get _SqlUtilEnumerateTables sDriverID sDatabase sSchema to sTablesArray
52128>>>        Move (SizeOfArray(sTablesArray)) to iSize
52129>>>        Decrement iSize
52130>>>        For iCount from 0 to iSize
52136>>>>
52136>>>            Move sTablesArray[iCount] to sVal
52137>>>            If (Uppercase(sVal) = Uppercase(sTableName)) Begin
52139>>>                Move sVal to sTableSpelledCorrectly
52140>>>                Move iSize to iCount // We're done!
52141>>>            End
52141>>>>
52141>>>        Loop
52142>>>>
52142>>>
52142>>>        Function_Return sTableSpelledCorrectly
52143>>>    End_Function
52144>>>
52144>>>    // ToDo: This index name function needs to be finished...
52144>>>    Function SqlUtilCheckIfIndexNameExists Handle hTable String sIndexName Returns Boolean
52146>>>        String sSchema sTableName sDriverID
52146>>>        Boolean bExists
52146>>>
52146>>>        Get psDriverID to sDriverID
52147>>>        Get psSchema to sSchema
52148>>>        Get UtilTableHandleToString hTable to sTableName
52149>>>
52149>>>        Function_Return bExists
52150>>>    End_Function
52151>>>
52151>>>    // Checks if a column/field name exists in a SQL table definition
52151>>>    // Returns True if it does
52151>>>    // Sample:
52151>>>    //   Get SQLUtilColumnExists "MySQLTable" "MyColumnName" to bExists
52151>>>    Function SqlUtilColumnExists String sTableName String sFieldName Returns Boolean
52153>>>        Integer iNumColumns iColumn
52153>>>        String sColumn sDriverID
52153>>>        String[] sColumnsArray
52154>>>        Boolean bExists bOK
52154>>>
52154>>>        Move False to bExists
52155>>>        Get AutoConnectionIDLogin to bOK
52156>>>        Get psDriverID to sDriverID
52157>>>
52157>>>        Get _SqlUtilEnumerateColumns sDriverID sTableName to sColumnsArray
52158>>>        Move (SizeOfArray(sColumnsArray)) to iNumColumns
52159>>>        Decrement iNumColumns
52160>>>        For iColumn from 0 to iNumColumns
52166>>>>
52166>>>            Move sColumnsArray[iColumn] to sColumn
52167>>>            If (Uppercase(sFieldName) = Uppercase(sColumn)) Begin
52169>>>                Move True to bExists
52170>>>                Move iNumColumns to iColumn // We're out of here
52171>>>            End
52171>>>>
52171>>>        Loop
52172>>>>
52172>>>
52172>>>        Function_Return bExists
52173>>>    End_Function
52174>>>
52174>>>    Function SqlUtilConvertColumnTypesToSQL2008 Handle hTable Returns Boolean
52176>>>        Integer iNumColumns iColumn iDFType iNativeType
52176>>>        Boolean bOpened bOK
52176>>>        String sColumnName sNativeTypeName
52176>>>
52176>>>        Get AutoConnectionIDLogin to bOK
52177>>>        Get OpenTableExclusive hTable to bOK
52178>>>        If (bOK = False) Begin
52180>>>            Function_Return False
52181>>>        End
52181>>>>
52181>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
52184>>>        If (bOpened = False) Begin
52186>>>            Error DFERR_PROGRAM ("Function SQLUtilConvertColumnTypesToSQL2008; Could not open table" * String(hTable))
52187>>>>
52187>>>            Function_Return False
52188>>>        End
52188>>>>
52188>>>
52188>>>        Move False to Err
52189>>>
52189>>>        Structure_Start hTable
52190>>>            Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
52193>>>
52193>>>            For iColumn from 1 to iNumColumns
52199>>>>
52199>>>                Get_Attribute DF_FIELD_TYPE             of hTable iColumn to iDfType
52202>>>                Get_Attribute DF_FIELD_NAME             of hTable iColumn to sColumnName
52205>>>                Get_Attribute DF_FIELD_NATIVE_TYPE      of hTable iColumn to iNativeType
52208>>>                Get_Attribute DF_FIELD_NATIVE_TYPE_Name of hTable iColumn to sNativeTypeName
52211>>>
52211>>>                Case Begin
52211>>>                    Case (iDFType = DF_DATE)
52213>>>                        If (iNativeType = SQL_TYPE_TIMESTAMP) Begin
52215>>>                            // Convert datetime to date
52215>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_TYPE_DATE
52218>>>                        End
52218>>>>
52218>>>                        Case Break
52219>>>                    Case (iDFType = DF_DATETIME)
52222>>>                        If (iNativeType = SQL_TYPE_TIMESTAMP) Begin
52224>>>                            // Convert datetime to datetime2
52224>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_TYPE_TIMESTAMP2
52227>>>                        End
52227>>>>
52227>>>                        Case Break
52228>>>                    Case (iDFType = DF_ASCII)
52231>>>                        If (iNativeType = SQL_CHAR) Begin
52233>>>                            // Convert char to varchar
52233>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_VARCHAR
52236>>>                        End
52236>>>>
52236>>>                        Case Break
52237>>>                    Case (iDFType = DF_TEXT)
52240>>>                        If (iNativeType = SQL_LONGVARCHAR) Begin
52242>>>                            // Convert text to varchar(max)
52242>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_VARCHAR
52245>>>                        End
52245>>>>
52245>>>                        Case Break
52246>>>                    Case (iDFType = DF_BINARY)
52249>>>                        If (iNativeType = SQL_LONGVARBINARY) Begin
52251>>>                            // Convert image to varbinary(max)
52251>>>                            Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to SQL_VARBINARY
52254>>>                        End
52254>>>>
52254>>>                        Case Break
52255>>>                Case End
52255>>>            Loop
52256>>>>
52256>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
52257>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
52259>>>
52259>>>        Set Action_Text of ghoStatusPanel to ""
52260>>>        Function_Return (Err = False)
52261>>>    End_Function
52262>>>
52262>>>
52262>>>    // Will create an SQL table with the passed sTableName & sColumnName as Numeric 4.2 to keep
52262>>>    // the DbUpdateVersion database revision in.
52262>>>    // Also pass the file number of the current (embedded?) table number used in development.
52262>>>    // It will first create the SQL Table & column, then create the .int file and change Filelist.cfg
52262>>>    Function SqlUtilCreateDbVersionTable Handle hTable String sColumnName String sDriverID Returns Boolean
52264>>>        Boolean bOK bOpened
52264>>>        String sTableName sDataType sAlterTable sAddColumn sLengthAndDecimals sStmt
52264>>>
52264>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sTableName
52267>>>        Get _TableNameOnly sTableName to sTableName
52268>>>        If (sTableName = "") Begin
52270>>>            Function_Return False
52271>>>        End
52271>>>>
52271>>>
52271>>>        // This just creates the table and a "dummy" column.
52271>>>        Get SqlTableCreate hTable sDriverID to bOK
52272>>>        If (bOK = False) Begin
52274>>>            Function_Return False
52275>>>        End
52275>>>>
52275>>>
52275>>>        Close hTable
52276>>>        Move False to Err
52277>>>
52277>>>        Get _SqlFindKeyWord CI_SQLAlterTable to sAlterTable
52278>>>        Get _SqlFindKeyWord CI_SQLAdd        to sAddColumn
52279>>>        Move "Decimal" to sDataType
52280>>>        Get _SqlFormatLengthAndDecimalAsString 4 2 to sLengthAndDecimals
52281>>>
52281>>>        // Adds the "sColumnName" passed to the function
52281>>>        Move (sAlterTable * sTableName * sAddColumn * sColumnName * sDataType + sLengthAndDecimals) to sStmt
52282>>>        Send SqlUtilExecuteQuery sStmt sDriverID
52283>>>
52283>>>        // Now we can delete the dummy column:
52283>>>        Get SqlColumnRemoveByTableName sTableName "Dummy" to bOK
52284>>>
52284>>>        // Finally, we attach to the newly created table.
52284>>>        If (Err = False) Begin
52286>>>            Get ApiTableAttachToSQL hTable True to bOK
52287>>>        End
52287>>>>
52287>>>        Open hTable
52289>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
52292>>>
52292>>>        Function_Return (Err = False and bOK = True and bOpened = True)
52293>>>    End_Function
52294>>>
52294>>>    // Returns a handle to the SQL server associated with the passed driver ID.
52294>>>    // Pass e.g. the psServer property to determine the current connection server.
52294>>>    // Returns a handle to the database connection, or a zero (0) if it fails.
52294>>>    // This handle can be used to obtain attributes about the server, such as default
52294>>>    // column types.
52294>>>    Function SqlUtilDatabaseHandle String sDriverID String sServer Returns Handle
52296>>>        Handle hDatabase
52296>>>        Integer iDriver iServers iCount
52296>>>        String sValue
52296>>>
52296>>>        If (sServer = "") Begin
52298>>>            Function_Return 0
52299>>>        End
52299>>>>
52299>>>
52299>>>        Get DriverIndex sDriverID to iDriver
52300>>>        If (iDriver = 0) Begin
52302>>>            Function_Return 0
52303>>>        End
52303>>>>
52303>>>
52303>>>        Get_Attribute DF_DRIVER_NUMBER_SERVERS of iDriver to iServers
52306>>>        For iCount from 1 to iServers
52312>>>>
52312>>>            Get_Attribute DF_DRIVER_SERVER_NAME of iDriver iCount to sValue
52315>>>            If (Uppercase(sValue) contains Uppercase(sServer)) Begin
52317>>>                Get_Attribute DF_DATABASE_ID of iDriver iCount to hDatabase
52320>>>            End
52320>>>>
52320>>>        Loop
52321>>>>
52321>>>
52321>>>        Function_Return hDatabase
52322>>>    End_Function
52323>>>
52323>>>//    Function UtilIsFilelistEntryDriverBased Integer hTable String sDriverID Returns Boolean
52323>>>//        String sRootName
52323>>>//        Boolean bOK
52323>>>//
52323>>>//        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
52323>>>//        Move (sRootName contains sDriverID) to bOK
52323>>>//
52323>>>//        Function_Return bOK
52323>>>//    End_Function
52323>>>
52323>>>//    Function UtilFilelistAddDriverInfo Integer hTable Returns Boolean
52323>>>//        String sDriverID sRootName sDisplayName sSchema sVal
52323>>>//        Integer iDbType
52323>>>//        Boolean bOK
52323>>>//
52323>>>//        Get UtilIsFilelistEntryDriverBased to bOK
52323>>>//        If (bOK = True) Begin
52323>>>//            Function_Return False
52323>>>//        End
52323>>>//
52323>>>//        Get psDriverID to sDriverID
52323>>>//        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
52323>>>//        Move (sDriverID + ":" + sRootName)           to sRootName
52323>>>//        Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
52323>>>//
52323>>>//        Get psDriverID to sDriverID
52323>>>//        Get piDbType   to iDbType
52323>>>//        Get psSchema   to sSchema
52323>>>//        If (sSchema = "") Begin
52323>>>//            Get _SqlFindKeyWord CI_SQLDBO to sSchema
52323>>>//        End
52323>>>//
52323>>>//        Move (Uppercase(sDisplayName)) to sVal
52323>>>//        If (not(sVal contains (sSchema + "."))) Begin
52323>>>//            If (iDbType = EN_dbTypeDB2) Begin
52323>>>//                Move (Lowercase(sSchema) + "." + sDisplayName) to sDisplayName
52323>>>//            End
52323>>>//            Else Begin
52323>>>//                Move (sSchema + "." + sDisplayName) to sDisplayName
52323>>>//            End
52323>>>//        End
52323>>>//
52323>>>//        Set_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
52323>>>//        Set_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
52323>>>//
52323>>>//        Function_Return True
52323>>>//    End_Function
52323>>>
52323>>>    // Removes all driver identifications (e.g. "MSSQLDRV:MyTable")
52323>>>    // from the passed filelist.
52323>>>    // Returns the number of tables affected.
52323>>>    Function SqlUtilFilelistRemoveDriverInfo String sFilelist Returns Integer
52325>>>        String sCurrentFileList sRootName sDisplayName sLogicalName sVal
52325>>>        Integer iRetval
52325>>>        Handle hTable
52325>>>
52325>>>        // We first save the current filelist as the passed filelist name
52325>>>        // may come from another workspace, to restore it when we're ready.
52325>>>        Get_Attribute DF_FILELIST_NAME to sCurrentFileList
52328>>>        Set_Attribute DF_FILELIST_NAME to sFilelist
52331>>>        Move 0 to hTable
52332>>>        Move 0 to iRetval
52333>>>
52333>>>        Repeat
52333>>>>
52333>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
52336>>>            If (hTable <> 0) Begin
52338>>>                Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
52341>>>                Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
52344>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
52347>>>                Move (Uppercase(sRootName)) to sVal
52348>>>                If (sVal contains MSSQLDRV_ID or sVal contains DB2_DRV_ID or sVal contains ODBC_DRV_ID) Begin
52350>>>                    // Prefixes:
52350>>>                    Move (Replace((MSSQLDRV_ID + ":"), sRootName, "")) to sRootName
52351>>>                    Move (Replace((DB2_DRV_ID  + ":"), sRootName, "")) to sRootName
52352>>>                    Move (Replace((ODBC_DRV_ID + ":"), sRootName, "")) to sRootName
52353>>>                    // Suffixes:
52353>>>                    Move (Replace(("." + MSSQLDRV_ID), sRootName, "")) to sRootName
52354>>>                    Move (Replace(("." + DB2_DRV_ID),  sRootName, "")) to sRootName
52355>>>                    Move (Replace(("." + ODBC_DRV_ID), sRootName, "")) to sRootName
52356>>>
52356>>>                    // Change Filelist entry:
52356>>>                    Set_Attribute DF_FILE_ROOT_NAME of hTable          to sRootName
52359>>>
52359>>>                    Move (Lowercase(sDisplayName)) to sVal
52360>>>                    If (sVal contains "dbo.") Begin
52362>>>                        Move (Replace("dbo.", sDisplayName, ""))       to sDisplayName
52363>>>
52363>>>                        // Change Filelist entry:
52363>>>                        Set_Attribute DF_FILE_DISPLAY_NAME of hTable   to sDisplayName
52366>>>                    End
52366>>>>
52366>>>                    Increment iRetval
52367>>>                End
52367>>>>
52367>>>            End
52367>>>>
52367>>>        Until (hTable = 0)
52369>>>
52369>>>        Set_Attribute DF_FILELIST_NAME to sCurrentFileList
52372>>>
52372>>>        Function_Return iRetval
52373>>>    End_Function
52374>>>
52374>>>    // To open all Sql based tables in Filelist.cfg
52374>>>    Procedure SqlUtilOpenAllTables
52376>>>        Handle hTable
52376>>>        String sRoot sDriverID
52376>>>        Boolean bOK
52376>>>
52376>>>        Move 0 to hTable
52377>>>        Move "" to sDriverID
52378>>>        Get AutoConnectionIDLogin to bOK
52379>>>
52379>>>        Repeat
52379>>>>
52379>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
52382>>>            If (hTable > 0) Begin
52384>>>                Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
52387>>>                If (sDriverID = MSSQLDRV_ID or sDriverID = DB2_DRV_ID or sDriverID = ODBC_DRV_ID) Begin
52389>>>                    Get_Attribute DF_FILE_ROOT_NAME of hTable to sRoot
52392>>>                    If (Uppercase(sRoot) contains ".INT" or Uppercase(sRoot) contains MSSQLDRV_ID or Uppercase(sRoot) contains DB2_DRV_ID or Uppercase(sRoot) contains ODBC_DRV_ID) Begin
52394>>>                        Open hTable
52396>>>                    End
52396>>>>
52396>>>                End
52396>>>>
52396>>>            End
52396>>>>
52396>>>
52396>>>        Until (hTable = 0)
52398>>>    End_Procedure
52399>>>
52399>>>//    Function SqlUtilSchemaName Handle hTable Returns String
52399>>>//        String sRetval sDriverID
52399>>>//        String sTableName
52399>>>//        Integer iDbType iIndex
52399>>>//        Boolean bOK
52399>>>//
52399>>>//        Get psDriverID to sDriverID
52399>>>//        Get _SqlCheckCurrentDriver sDriverID to bOK
52399>>>//        If (hTable = 0 or bOK = False) Begin
52399>>>//            Function_Return ""
52399>>>//        End
52399>>>//
52399>>>//        Move False to Err
52399>>>//        Get UtilTableHandleToString hTable to sTableName
52399>>>//        Get piDbType to iDbType
52399>>>//        Get _SqlUtilEnumerateTableIndex sTableName sDriverID to iIndex
52399>>>//        If (iIndex = -1) Begin
52399>>>//            Function_Return ""
52399>>>//        End
52399>>>//
52399>>>//        Function_Return sRetval
52399>>>//    End_Function
52399>>>
52399>>>    // Checks if the passed Table;
52399>>>    // 1) Already has a Filelist entry that points to SQL and
52399>>>    // 2) It has an .int file.
52399>>>    // If both is True it should already be connected to SQL
52399>>>    Function SqlUtilTableIsAttached String sDriverID Handle hTable Returns Boolean
52401>>>        Boolean bExists bRootName
52401>>>        String sRootName sDataPath
52401>>>
52401>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
52404>>>        Move (sRootName contains sDriverID) to bRootName
52405>>>
52405>>>        Get psDataPathFirstPart to sDataPath
52406>>>        Get vFolderExists sDataPath to bExists
52407>>>        If (bExists = False) Begin
52409>>>            // If the path doesn't exist it cannot have an .int file and we're done, although it shouldn't happen.
52409>>>            Function_Return False
52410>>>        End
52410>>>>
52410>>>
52410>>>        Get vFolderFormat sDataPath to sDataPath
52411>>>        Get _TableNameOnly sRootName to sRootName
52412>>>        Get vFilePathExists (sDataPath + sRootName + ".int") to bExists
52413>>>
52413>>>        Function_Return (bRootName = True and bExists = True)
52414>>>    End_Function
52415>>>
52415>>>    Function SqlUtilTableIsViewType String sDriverID Handle hTable Returns Boolean
52417>>>        Boolean bViewTableType bOpen bOK
52417>>>        Integer iTableCount iNumTables
52417>>>        String sTableName sOwner sTableType sEnumTableName sEnumSchemaName
52417>>>        Handle hoCliHandler
52417>>>        tSQLConnection SQLConnection
52417>>>        tSQLConnection SQLConnection
52417>>>
52417>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
52420>>>        If (bOpen = False) Begin
52422>>>            Get AutoConnectionIDLogin to bOK
52423>>>            Open hTable
52425>>>        End
52425>>>>
52425>>>
52425>>>        Get pSQLConnection to SQLConnection
52426>>>        Get phoCLIHandler to hoCliHandler
52427>>>        Set psDriverID of hoCliHandler to sDriverID
52428>>>
52428>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sTableName
52431>>>        Get _TableNameOnly sTableName to sTableName
52432>>>        Get_Attribute DF_FILE_OWNER     of hTable to sOwner
52435>>>        Get EnumerateTables of hoCliHandler SQLConnection.sConnectionString to iNumTables
52436>>>
52436>>>        For iTableCount from 1 to iNumTables
52442>>>>
52442>>>            Get TableName  of hoCliHandler iTableCount to sEnumTableName
52443>>>            Get SchemaName of hoCliHandler iTableCount to sEnumSchemaName
52444>>>            If ((Uppercase(sEnumTableName)  = Uppercase(sTableName)) and (Uppercase(sEnumSchemaName) = Uppercase(sOwner))) Begin
52446>>>                Get TableType of hoCliHandler iTableCount to sTableType
52447>>>                Move iNumTables to iTableCount // We're done.
52448>>>            End
52448>>>>
52448>>>        Loop
52449>>>>
52449>>>
52449>>>        Move (sTableType = "VIEW") to bViewTableType
52450>>>        If (bOpen = False) Begin
52452>>>            Close hTable
52453>>>        End
52453>>>>
52453>>>
52453>>>        Function_Return bViewTableType
52454>>>    End_Function
52455>>>
52455>>>    // *** DbType conversion routines - Converts between string/integer and driver ID values ***
52455>>>    //
52455>>>    // SQL utility function that returns a database type (string) constant
52455>>>    // corresponding to the passed iDbType.
52455>>>    Function SqlUtilDbTypeToString Integer iDbType Returns String
52457>>>        String sRetval
52457>>>        Get SqlUtilDbTypeToString of (phoSQLConnectionIniFile(ghoSQLConnectionHandler)) iDbType to sRetval
52458>>>        Function_Return sRetval
52459>>>    End_Function
52460>>>
52460>>>    // SQL utility function that returns a database type constant (integer)
52460>>>    // corresponding to the passed sDbType string constant.
52460>>>    Function SqlUtilDbTypeToInteger String sDbType Returns Integer
52462>>>        Integer iRetval
52462>>>        Get SqlUtilDbTypeToInteger of (phoSQLConnectionIniFile(ghoSQLConnectionHandler)) sDbType to iRetval
52463>>>        Function_Return iRetval
52464>>>    End_Function
52465>>>
52465>>>    // Pass an integer DbType and function returns the database type integer as a string value.
52465>>>    // Used e.g. when reading a connection ini-file to display the database type in
52465>>>    // the SQL Connection program's grid.
52465>>>    Function SqlUtilDbTypeIntegerToStringConstant Integer iDbType Returns String
52467>>>        String sRetval
52467>>>        Get SqlUtilDbTypeIntegerToStringConstant of (phoSQLConnectionIniFile(ghoSQLConnectionHandler)) iDbType to sRetval
52468>>>        Function_Return sRetval
52469>>>    End_Function
52470>>>
52470>>>    // Pass a driver name as a string and the function will return
52470>>>    // a dbType as an integer. Obviously for the ODBC_DRV this doesn't
52470>>>    // quite work and always returns "MS SQL Server"
52470>>>    Function SqlUtilDbTypeFromDriver String sDriverID Returns Integer
52472>>>        Integer iRetval
52472>>>        Get SqlUtilDbTypeFromDriver of (phoSQLConnectionIniFile(ghoSQLConnectionHandler)) sDriverID to iRetval
52473>>>        Function_Return iRetval
52474>>>    End_Function
52475>>>
52475>>>    // Returns a temp table name that consists of the RootName, an underscore and as much of a GUID
52475>>>    // that "fits" in the max allowed length for table names.
52475>>>    // Max number of characters allowed for table names;
52475>>>    // IBM DB2      = 128
52475>>>    // MS-SQL       = 128
52475>>>    // Oracle       = 128 (Version 12.2 and later. 30 characters for earlier versions)
52475>>>    // MySQL        = 64
52475>>>    // PostgreSQL   = 64
52475>>>    Function SqlUtilGUIDTempTableName String sRootName Returns String
52477>>>        String sGUIDName
52477>>>        Integer iDbType iLength
52477>>>
52477>>>        Get piDbType to iDbType
52478>>>        Move (RandomHexUUID()) to sGUIDName
52479>>>        Move (sRootName + "_" + sGUIDName) to sGUIDName
52480>>>        Move (Length(sGUIDName)) to iLength
52481>>>
52481>>>        Case Begin
52481>>>            Case (iDbType = EN_DbTypeDB2)
52483>>>            If (iLength > 128) Begin
52485>>>                Move (Left(sGUIDName, 128)) to sGUIDName
52486>>>            End
52486>>>>
52486>>>            Case Break
52487>>>
52487>>>            Case (iDbType = EN_DbTypeMSSQL)
52490>>>            If (iLength > 128) Begin
52492>>>                Move (Left(sGUIDName, 128)) to sGUIDName
52493>>>            End
52493>>>>
52493>>>            Case Break
52494>>>
52494>>>            Case (iDbType = EN_DbTypeOracle) // Note: We assume an Oracle version of 12.2 or later.
52497>>>            If (iLength > 128) Begin
52499>>>                Move (Left(sGUIDName, 128)) to sGUIDName
52500>>>            End
52500>>>>
52500>>>            Case Break
52501>>>
52501>>>            Case (iDbType = EN_DbTypeMySQL)
52504>>>            If (iLength > 64) Begin
52506>>>                Move (Left(sGUIDName, 64)) to sGUIDName
52507>>>            End
52507>>>>
52507>>>            Case Break
52508>>>
52508>>>            Case (iDbType = EN_DbTypePostgre)
52511>>>            If (iLength > 64) Begin
52513>>>                Move (Left(sGUIDName, 64)) to sGUIDName
52514>>>            End
52514>>>>
52514>>>        Case End
52514>>>
52514>>>        Function_Return sGUIDName
52515>>>    End_Function
52516>>>
52516>>>    // Reads a resource that has been embedded by the compiler and writes it to disk.
52516>>>    // Pass the memory resource file reference and the filename to be created,
52516>>>    // including full path.
52516>>>    Procedure SqlUtilCreateFileFromMemory String sMemFileName String sFileName
52518>>>        String sText
52518>>>        Integer iCh iSize iArgSize
52518>>>
52518>>>        Move ("Resource:" + sMemFileName) to sMemFileName
52519>>>        Get Seq_Open_Input_Channel sMemFileName to iCh
52520>>>        Get_Channel_Size iCh to iSize
52521>>>        Read_Block channel iCh sText iSize
52523>>>        Send Seq_Close_Channel iCh
52524>>>
52524>>>        Get Seq_Open_Output_Channel sFileName to iCh
52525>>>            Write channel iCh sText
52527>>>        Send Seq_Close_Channel iCh
52528>>>
52528>>>        // Wait for file to be written to disk.
52528>>>        Sleep 2
52529>>>    End_Procedure
52530>>>
52530>>>    Function SqlUtilDefaultNullValue String sDriverID Integer iDbType Integer iDataType Returns String
52532>>>        String sNotNull sRetval sDefaultValue
52532>>>        Boolean bOK
52532>>>
52532>>>        Get IsSQLDriver sDriverID to bOK
52533>>>        If (bOK = False) Begin
52535>>>            Function_Return ""
52536>>>        End
52536>>>>
52536>>>
52536>>>        Get UtilDataTypeDefaultValue sDriverID iDbType iDataType to sDefaultValue
52537>>>        Get _SqlFindKeyWord CI_SQLNotNull to sNotNull
52538>>>
52538>>>        Case Begin
52538>>>            Case (iDbType = EN_dbTypeMSSQL)
52540>>>                Move ("DEFAULT" * String(sDefaultValue) * String(sNotNull)) to sRetval
52541>>>                Case Break
52542>>>            Case (iDbType = EN_dbTypeMySQL)
52545>>>                Move (String(sNotNull) * "DEFAULT" * String(sDefaultValue)) to sRetval
52546>>>                Case Break
52547>>>            Case (iDbType = EN_dbTypePostgre)
52550>>>                Move (String(sNotNull) * "DEFAULT" * String(sDefaultValue)) to sRetval
52551>>>                Case Break
52552>>>            Case (iDbType = EN_dbTypeDB2)
52555>>>                Move (String(sNotNull))                                     to sRetval
52556>>>                Case Break
52557>>>
52557>>>            // Seems like Oracle can't handle setting a new column to 'NOT NULL' if the table exists with data(!)
52557>>>            // ToDo: We need to look deeper into how Oracle handles NULL
52557>>>            Case (iDbType = EN_dbTypeOracle)
52560>>>                Move  ""                                                    to sRetval
52561>>>                Case Break
52562>>>
52562>>>            Case Else
52562>>>                Move  ""                                                    to sRetval
52563>>>        Case End
52563>>>
52563>>>        Function_Return sRetval
52564>>>    End_Function
52565>>>
52565>>>    // * Dummy function for the Studio's Code Explorer *
52565>>>    Function SQL_ENUMERATION_FUNCTIONS Returns Boolean
52567>>>        Function_Return False
52568>>>    End_Function
52569>>>
52569>>>    // Enumerate SQL Servers.
52569>>>    // Pass a driver id. Returns a string array.
52569>>>    // The iDataSourceType (iDatSrcType) parameter is optional and is for the ODBC driver only.
52569>>>    // Note: Returns servers for MSSQLDRV; else data-sources on the machine.
52569>>>    Function SqlUtilEnumerateServers String sDriverID Integer iDatSrcType Returns String[]
52571>>>        String[] sReturnArray
52572>>>        Handle hoSQLHandler
52572>>>        String sServer
52572>>>        Integer iCount iNumItems iDataSourceType
52572>>>
52572>>>        If (num_arguments > 1) Begin
52574>>>            Move iDatSrcType to iDataSourceType
52575>>>        End
52575>>>>
52575>>>
52575>>>        Case Begin
52575>>>            Case (sDriverID = MSSQLDRV_ID)
52577>>>                Get phoMSSQLHandler to hoSQLHandler
52578>>>                Get EnumerateServers of hoSQLHandler to iNumItems
52579>>>                For iCount from 0 to (iNumItems - 1)
52585>>>>
52585>>>                    Get String_Value of hoSQLHandler iCount to sServer
52586>>>                    Move (Trim(sServer)) to sReturnArray[iCount]
52587>>>                Loop
52588>>>>
52588>>>                Case Break
52589>>>
52589>>>            Case (sDriverID = DB2_DRV_ID)
52592>>>                Get phoDB2SQLHandler to hoSQLHandler
52593>>>                Send SeedDataSources of hoSQLHandler
52594>>>                Move 0 to iCount
52595>>>                Repeat
52595>>>>
52595>>>                    Get DataSources of hoSQLHandler to sServer
52596>>>                    If (sServer <> "") Begin
52598>>>                        Move (Replace(",", sServer, "")) to sServer
52599>>>                        Move sServer to sReturnArray[iCount]
52600>>>                    End
52600>>>>
52600>>>                    Increment iCount
52601>>>                Until (sServer = "")
52603>>>                Case Break
52604>>>
52604>>>            Case (sDriverID = ODBC_DRV_ID)
52607>>>                Get phoODBCSQLHandler to hoSQLHandler
52608>>>                Set DataSourceType of hoSQLHandler to iDataSourceType
52609>>>                Move 0 to iCount
52610>>>                Repeat
52610>>>>
52610>>>                    Get DataSources of hoSQLHandler to sServer
52611>>>                    If (sServer <> "") Begin
52613>>>                        Move (Replace(",", sServer, ", ")) to sServer
52614>>>                        Move sServer to sReturnArray[iCount]
52615>>>                    End
52615>>>>
52615>>>                    Increment iCount
52616>>>                Until (sServer = "")
52618>>>                Case Break
52619>>>
52619>>>            Case Else
52619>>>                Error DFERR_PROGRAM "Unsupported DriverID passed to SqlUtilEnumerateServers function"
52620>>>>
52620>>>        Case End
52620>>>
52620>>>        Function_Return sReturnArray
52621>>>    End_Function
52622>>>
52622>>>    // Returns all databases as a string array for the passed driver id.
52622>>>    Function SqlUtilEnumerateDatabases String sDriverID Returns String[]
52624>>>        String[] sReturnArray
52625>>>        String sServer sVal
52625>>>        tSQLIntTableInfo[] sReturnStructArray
52625>>>        tSQLIntTableInfo[] sReturnStructArray
52626>>>        tSQLConnection SQLConnection
52626>>>        tSQLConnection SQLConnection
52626>>>        Boolean bOK
52626>>>        Integer iCount iSize
52626>>>
52626>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52627>>>        If (bOK = False) Begin
52629>>>            Function_Return sReturnArray
52630>>>        End
52630>>>>
52630>>>
52630>>>        Case Begin
52630>>>            Case (sDriverID = MSSQLDRV_ID)
52632>>>                Get _SqlDatabasesArrayMSSQL to sReturnArray
52633>>>                Case Break
52634>>>            Case (sDriverID = DB2_DRV_ID)
52637>>>                Get _SqlDatabasesArrayDB2 to sReturnArray
52638>>>                Case Break
52639>>>
52639>>>            // This is needed to be able to check if a database exists or not.
52639>>>            Case (sDriverID = ODBC_DRV_ID)
52642>>>                Get _SqlDatabasesArrayODBC to sReturnStructArray
52643>>>                If (SizeOfArray(sReturnStructArray)) Begin
52645>>>                    If (SizeOfArray(sReturnStructArray) = 1 and sReturnStructArray[0].sServerName = "") Begin
52647>>>                        // If a FILEDSN: (can only be one database name)
52647>>>                        Move sReturnStructArray[0].sDatabaseName to sReturnArray[0]
52648>>>                    End
52648>>>>
52648>>>                    Else Begin
52649>>>                        // Else the DSN's were read from the registry.
52649>>>                        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
52650>>>                        Move SQLConnection.sServer to sServer
52651>>>                        Move (SizeOfArray(sReturnStructArray)) to iSize
52652>>>                        Decrement iSize
52653>>>                        for iCount from 0 to iSize
52659>>>>
52659>>>                            Move (sReturnStructArray[iCount].sServerName) to sVal
52660>>>                            If (Uppercase(sServer) = Uppercase(sVal)) Begin
52662>>>                                Move sReturnStructArray[iCount].sDatabaseName to sReturnArray[0]
52663>>>                                Move iSize to iCount // We're done.
52664>>>                            End
52664>>>>
52664>>>                        Loop
52665>>>>
52665>>>                    End
52665>>>>
52665>>>                End
52665>>>>
52665>>>                Case Break
52666>>>
52666>>>            Case Else
52666>>>//                Error DFERR_PROGRAM "Unsupported DriverID passed to SqlUtilEnumerateDatabases function"
52666>>>        Case End
52666>>>
52666>>>        Function_Return sReturnArray
52667>>>    End_Function
52668>>>
52668>>>    
52668>>>    // *** Database API Functions: ***
52668>>>    // Instead of using Sql Scripts (ESQL), we can opt to use the DataFlex Database API's to
52668>>>    // make changes/updates to the database.
52668>>>
52668>>>    // * Dummy function for the Studio's Code Explorer *
52668>>>    Function API_TABLE_FUNCTIONS Returns Boolean
52670>>>        Function_Return False
52671>>>    End_Function
52672>>>
52672>>>    // This might not do what you think - Here's what it does:
52672>>>    // It checks that the passed hTable TableName in filelist.cfg is exactly the same as at the SQL back-end.
52672>>>    // If that is True; it creates an .int file for it and changes Filelist.cfg to point
52672>>>    // to the SQL table.
52672>>>    // Typical usage for this function is when an entry exists in the Filelist for a table and the table
52672>>>    // already exists in SQL.
52672>>>    // This is a bit fiddly as the DF_FILE_PHYSICAL_NAME attribute can only be set inside a
52672>>>    // Structure_Start ... Structure_End operation when creating a NEW table. Thus it cannot be set when
52672>>>    // restructuring an existing table.
52672>>>    Function ApiTableAttachToSql Handle hTable Boolean bUseConnID Returns Boolean
52674>>>        Boolean bExists bOpened bOK bSystemFile bUseConnectionID bIsAlias
52674>>>        String sDriverID sConnectionID sConnectionString sDisplayName sRootName sLogicalName sPhysicalName sSchema
52674>>>        Handle hToTable
52674>>>
52674>>>        Move True to bUseConnectionID
52675>>>        If (num_arguments > 1) Begin
52677>>>            Move bUseConnID to bUseConnectionID
52678>>>        End
52678>>>>
52678>>>
52678>>>        Get psDriverID to sDriverID
52679>>>        // If the table doesn't exist on the SQL back-end we do nothing.
52679>>>        Get SqlUtilCheckIfTableHandleExists hTable sDriverID to bExists
52680>>>        If (bExists = False) Begin
52682>>>            Function_Return False
52683>>>        End
52683>>>>
52683>>>
52683>>>        Get UtilTableIsAlias hTable to bIsAlias
52684>>>
52684>>>        Get _SqlCheckCurrentDriver sDriverID to bOK
52685>>>        If (bOK = False) Begin
52687>>>            Function_Return False
52688>>>        End
52688>>>>
52688>>>
52688>>>        // Then we need to check that the function hasn't been called before; which in case
52688>>>        // we do nothing
52688>>>        Get SQLUtilTableIsAttached sDriverID hTable to bExists
52689>>>        If (bExists = True) Begin
52691>>>            Function_Return False
52692>>>        End
52692>>>>
52692>>>
52692>>>        Get psConnectionID     to sConnectionID
52693>>>        Get psConnectionString to sConnectionString
52694>>>        If (sConnectionID = "" or sConnectionString = "") Begin
52696>>>            Error DFERR_PROGRAM ("An SQL connection has NOT been setup correctly. Could not attach table:" * String(hTable) * "to SQL")
52697>>>>
52697>>>            Function_Return False
52698>>>        End
52698>>>>
52698>>>
52698>>>        Set Private.phCurrentTable to hTable
52699>>>        Get psSchema to sSchema
52700>>>        If (sSchema = "") Begin
52702>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
52703>>>        End
52703>>>>
52703>>>
52703>>>        // If we should use a connection id we need to check it exists;
52703>>>        // else we create it before attempting creating the table
52703>>>        If (bUseConnectionID = True) Begin
52705>>>            Get AutoConnectionIDLogin to bOK
52706>>>            If (bOk = False) Begin
52708>>>                Error DFERR_PROGRAM ("The Connection ID:" * sConnectionID * "could not be created and therefor the table can't be created.")
52709>>>>
52709>>>                Function_Return False
52710>>>            End
52710>>>>
52710>>>        End
52710>>>>
52710>>>
52710>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
52713>>>        Get _TableNameOnly sRootName to sRootName
52714>>>        If (sRootName = "") Begin
52716>>>            Function_Return False
52717>>>        End
52717>>>>
52717>>>        Move (sRootName + ".int")                    to sPhysicalName
52718>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
52721>>>        Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
52724>>>
52724>>>        // The Studio no longer adds the schema to the DISPLAY_NAME, so commented out.
52724>>>        //
52724>>>        // We don't want to change the display name if it starts with an ampersand ("@"),
52724>>>        // because then the table should not be visible to users.
52724>>>//        Move (Pos("@", sDisplayName)) to iPos
52724>>>//        If (iPos <> 1) Begin
52724>>>//            If (sDisplayName contains ".") Begin
52724>>>//                Move (Pos(".", sDisplayName)) to iPos
52724>>>//                Move (Mid(sDisplayName, 200 ,(iPos + 1))) to sDisplayName
52724>>>//                Move (sSchema + "." + sDisplayName)       to sDisplayName
52724>>>//            End
52724>>>//            If (not(Lowercase(sDisplayName) contains Lowercase(sSchema + "."))) Begin
52724>>>//                Move (Lowercase(sSchema) + "." + sDisplayName) to sDisplayName
52724>>>//            End
52724>>>//        End
52724>>>
52724>>>        If (bIsAlias = False) Begin
52726>>>            Get OpenTableExclusive hTable to bOpened
52727>>>            If (bOpened = False) Begin
52729>>>                Error DFERR_PROGRAM ("Function ApiTableAttachToSQL - Could not open table number:" * String(hTable) * sLogicalName)
52730>>>>
52730>>>                Function_Return False
52731>>>            End
52731>>>>
52731>>>        End
52731>>>>
52731>>>
52731>>>        If (ghoProgressBar <> 0) Begin
52733>>>            Send DoAdvance of ghoProgressBar
52734>>>            Set Message_Text of ghoStatusPanel to ""
52735>>>            Set TableName_Text of ghoStatusPanel to ("Attaching to SQL - Table:" * String(sLogicalName) * "Number:" * String(hTable) * "to SQL")
52736>>>        End
52736>>>>
52736>>>        // Note: The hToTable will get changed by the Structure_xxx command...
52736>>>        Move hTable to hToTable
52737>>>        Move False to Err
52738>>>
52738>>>        // We now create a stub .int file and after Structure_end and also change the Filelist.cfg,
52738>>>        // then we do a pseudo .int file change with the "_SqlUtilUpdateIntFile" function. After that we have
52738>>>        // a proper and updated .int file.
52738>>>        Get_Attribute DF_FILE_IS_SYSTEM_FILE of hTable to bSystemFile
52741>>>        Get _SqlUtilCreateIntFile hTable sDriverID sConnectionID True bSystemFile to bOK
52742>>>
52742>>>        If (bIsAlias = False) Begin
52744>>>            Structure_Start hToTable sDriverID
52745>>>                Set Private.phCurrentTable to hTable
52746>>>                If (bUseConnectionID = True) Begin
52748>>>                    Set_Attribute DF_FILE_LOGIN     of hToTable to (CS_DFCONNID + "=" + sConnectionID)
52751>>>                End
52751>>>>
52751>>>                Else Begin
52752>>>                    Set_Attribute DF_FILE_LOGIN     of hToTable to sConnectionString
52755>>>                End
52755>>>>
52755>>>                Set_Attribute DF_FILE_OWNER         of hToTable to (Lowercase(sSchema))
52758>>>                // For unknown reason the above sometimes triggers an error and it doesn't help to try to trap the error; so we cheat...
52758>>>                Move False to Err
52759>>>                Move 0 to LastErr
52760>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
52761>>>            Structure_End hToTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
52763>>>            Set Action_Text of ghoStatusPanel to ""
52764>>>        End
52764>>>>
52764>>>
52764>>>        Move (not(Err)) to bOK
52765>>>        If (bOK = True) Begin
52767>>>            // The attributes set above will always trigger an error
52767>>>            // We also adjust the Filelist entries
52767>>>            Set_Attribute DF_FILE_ROOT_NAME    of hTable to (sDriverID + ":" + sRootName)
52770>>>            Set_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
52773>>>            Set_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
52776>>>
52776>>>            // This updates the .int file to make it up-to-date with the SQL back-end.
52776>>>            Get _SqlUtilUpdateIntFile hTable to bOK
52777>>>        End
52777>>>>
52777>>>
52777>>>        Function_Return (bOK = True)
52778>>>    End_Function
52779>>>
52779>>>    // Sample usage:
52779>>>    //    Get ApiTableChangeAttribute SysInfo.File_Number DF_FILE_IS_SYSTEM_FILE True to bOK
52779>>>    //    Get ApiTableChangeAttribute OrderHea.File_Number DF_FILE_REUSE_DELETED DF_FILE_DELETED_NOREUSE to bOK
52779>>>    Function ApiTableChangeAttribute Handle hTable Integer iAttribute Integer iValue Returns Boolean
52781>>>        Boolean bOK bIsSQLTable
52781>>>
52781>>>        Get AutoConnectionIDLogin to bOK
52782>>>        Move False to Err
52783>>>        Get OpenTableExclusive hTable to bOK
52784>>>        If (bOK = False) Begin
52786>>>            Function_Return False
52787>>>        End
52787>>>>
52787>>>
52787>>>        // ToDo: Add to all table change functions!
52787>>>            Get _UtilTableIsSql hTable to bIsSQLTable
52788>>>            If (bIsSQLTable = True) Begin
52790>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
52793>>>            End
52793>>>>
52793>>>
52793>>>        Set Private.phCurrentTable to hTable
52794>>>        Structure_Start hTable
52795>>>            Set_Attribute iAttribute of hTable to iValue
52798>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
52799>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
52801>>>
52801>>>        Set Action_Text of ghoStatusPanel to ""
52802>>>        Function_Return (Err = False)
52803>>>    End_Function
52804>>>
52804>>>    Function ApiTableMoveFileListEntry String sRootName String sLogicalName String sDisplayName Handle hFromSlot Handle hToSlot String sDriverID Returns Boolean
52806>>>        Boolean bOK
52806>>>        
52806>>>        Get ApiTableChangeFileListSlot sRootName sLogicalName sDisplayName hToSlot sDriverID to bOK
52807>>>        If (bOK = True) Begin
52809>>>            Get ApiTableChangeFileListSlot "" "" "" hFromSlot sDriverID to bOK
52810>>>        End
52810>>>>
52810>>>        
52810>>>        Function_Return (bOK = True)
52811>>>    End_Function
52812>>>    
52812>>>    // To use a filelist slot for the passed FileName, TableName & DisplayName,
52812>>>    // or to change the filelist slot names.
52812>>>    Function ApiTableChangeFileListSlot String sRootName String sLogicalName String sDisplayName Handle hTable String sDriverID Returns Boolean
52814>>>        String sFileListName
52814>>>        
52814>>>        Move False to Err
52815>>>
52815>>>        If (ghoProgressBar <> 0) Begin
52817>>>            Send DoAdvance of ghoProgressBar
52818>>>            Set TableName_Text of ghoStatusPanel to ("Changing Filelist slot for Table:" * String(sLogicalName) * "Number:" * String(hTable))
52819>>>        End
52819>>>>
52819>>>        // If all strings are empty it means that we should remove this entry from filelist.
52819>>>        If (sRootName = "" and sLogicalName = "" and sDisplayName = "") Begin
52821>>>            Set_Attribute DF_FILE_ROOT_NAME     of hTable to ""
52824>>>            Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to ""
52827>>>            Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to ""
52830>>>            Function_Return (Err = False) // And we're done.
52831>>>        End
52831>>>>
52831>>>
52831>>>        If (sDriverID <> DATAFLEX_ID) Begin
52833>>>//            Set_Attribute DF_FILE_ROOT_NAME of hTable to (sDriverID + ":" + sRootName)
52833>>>            Move (sDriverID + ":" + sRootName) to sRootName
52834>>>        End
52834>>>>
52834>>>//        Else Begin
52834>>>//            Set_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
52834>>>//        End
52834>>>//
52834>>>//        Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
52834>>>//        Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
52834>>>
52834>>>        Set_Attribute DF_FILE_ROOT_NAME     of hTable to sRootName
52837>>>        Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
52840>>>        Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
52843>>>        
52843>>>        Function_Return (Err = False)
52844>>>    End_Function
52845>>>
52845>>>    Function ApiTableChangeRecordLength Handle hTable Integer iRecordLength Returns Boolean
52847>>>        Boolean bOK
52847>>>
52847>>>        Get AutoConnectionIDLogin to bOK
52848>>>        Move False to Err
52849>>>        Get OpenTableExclusive hTable to bOK
52850>>>        If (bOK = False) Begin
52852>>>            Function_Return False
52853>>>        End
52853>>>>
52853>>>
52853>>>        Set Private.phCurrentTable to hTable
52854>>>        Structure_Start hTable
52855>>>            Set_Attribute DF_FILE_RECORD_LENGTH of hTable to iRecordLength
52858>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
52859>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
52861>>>
52861>>>        Set Action_Text of ghoStatusPanel to ""
52862>>>        Function_Return (Err = False)
52863>>>    End_Function
52864>>>
52864>>>    Function ApiTableChangeRelation Handle hTable Handle hToTable Integer iFromField Integer iToField Returns Boolean
52866>>>        Boolean bOK bIsSQLTable
52866>>>
52866>>>        Move False to Err
52867>>>        Get AutoConnectionIDLogin to bOK
52868>>>        Open hToTable
52870>>>        Get OpenTableExclusive hTable to bOK
52871>>>        If (bOK = False) Begin
52873>>>            Function_Return False
52874>>>        End
52874>>>>
52874>>>
52874>>>            Get _UtilTableIsSql hTable to bIsSQLTable
52875>>>            If (bIsSQLTable = True) Begin
52877>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
52880>>>            End
52880>>>>
52880>>>
52880>>>        Set Private.phCurrentTable to hTable
52881>>>        Structure_Start hTable
52882>>>            Set_Attribute DF_FIELD_RELATED_FILE  of hTable iFromField to hToTable
52885>>>            Set_Attribute DF_FIELD_RELATED_FIELD of hTable iFromField to iToField
52888>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
52889>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
52891>>>
52891>>>        Set Action_Text of ghoStatusPanel to ""
52892>>>        Function_Return (Err = False)
52893>>>    End_Function
52894>>>
52894>>>    Procedure ApiTableConvertAllAddException Integer hTable
52896>>>        Integer[] aTableConvertExceptions
52897>>>        Get paTableConvertExceptions to aTableConvertExceptions
52898>>>        Move hTable to aTableConvertExceptions[SizeOfArray(aTableConvertExceptions)]
52899>>>        Set paTableConvertExceptions to aTableConvertExceptions
52900>>>    End_Procedure
52901>>>
52901>>>    Procedure ApiTableDateCorrectionAddException Integer hTable
52903>>>        Integer[] aTableDateCorrectionExceptions
52904>>>        Get paTableDateCorrectionExceptions to aTableDateCorrectionExceptions
52905>>>        Move hTable to aTableDateCorrectionExceptions[SizeOfArray(aTableDateCorrectionExceptions)]
52906>>>        Set paTableDateCorrectionExceptions to aTableDateCorrectionExceptions
52907>>>    End_Procedure
52908>>>
52908>>>    Procedure ApiTableConvertALLToSql
52910>>>        Integer[] iTablesArray
52911>>>        Integer iSize iCount
52911>>>        Boolean bUseConnectionID bToANSI bRecnum bCopyData bOK bContinueOnError
52911>>>        String sDriverID
52911>>>
52911>>>        Get psDriverID to sDriverID
52912>>>        Get pbUseConnectionID to bUseConnectionID
52913>>>        Get pbToANSI          to bToANSI
52914>>>        Get pbRecnum          to bRecnum
52915>>>        Get pbCopyData        to bCopyData
52916>>>        If (ghoDbUpdateHandler > 0) Begin
52918>>>            Get pbContinueOnError to bContinueOnError
52919>>>        End
52919>>>>
52919>>>
52919>>>        Get _AllTablesToConvert to iTablesArray
52920>>>        Move (SizeOfArray(iTablesArray)) to iSize
52921>>>        Set pbVisible   of ghoProgressBarOverall to True
52922>>>        Set piPosition  of ghoProgressBarOverall to 0
52923>>>        Set piAdvanceBy of ghoProgressBarOverall to 1
52924>>>        Set piMaximum   of ghoProgressBarOverall to iSize
52925>>>
52925>>>        Decrement iSize
52926>>>        For iCount from 0 to iSize
52932>>>>
52932>>>            Set piPosition of ghoProgressBarOverall to iCount
52933>>>            Get ApiTableConvertToSQL_Ex iTablesArray[iCount] sDriverID bUseConnectionID bToANSI bRecnum bCopyData to bOK
52934>>>            // Probably the right logic here is to just continue trying to convert every table even
52934>>>            // if there was an error converting one table...
52934>>>            //If (bContinueOnError = False and bOK = False) Break
52934>>>        Loop
52935>>>>
52935>>>
52935>>>    End_Procedure
52936>>>
52936>>>    Procedure ApiTableAttachALLToSql
52938>>>        Integer[] iTablesArray
52939>>>        Integer iSize iCount
52939>>>        Boolean bUseConnectionID bToANSI bRecnum bCopyData bOK bContinueOnError
52939>>>        String sDriverID
52939>>>
52939>>>        Get psDriverID to sDriverID
52940>>>        Get pbUseConnectionID to bUseConnectionID
52941>>>        Get pbToANSI          to bToANSI
52942>>>        Get pbRecnum          to bRecnum
52943>>>        Get pbCopyData        to bCopyData
52944>>>        If (ghoDbUpdateHandler > 0) Begin
52946>>>            Get pbContinueOnError to bContinueOnError
52947>>>        End
52947>>>>
52947>>>
52947>>>        Get _AllTablesToConvert to iTablesArray
52948>>>        Move (SizeOfArray(iTablesArray)) to iSize
52949>>>        Decrement iSize
52950>>>        For iCount from 0 to iSize
52956>>>>
52956>>>            Get ApiTableAttachToSQL iTablesArray[iCount] bUseConnectionID to bOK
52957>>>        Loop
52958>>>>
52958>>>
52958>>>    End_Procedure
52959>>>
52959>>>    Function ApiTableConvertToSql_Ex Handle hTable String sDriverID Boolean bUseConnectionID Boolean bToAnsi Boolean bRecnum Boolean bCopyData Returns Boolean
52961>>>        Handle hToTable hoLogFile
52961>>>        Boolean bOK bExists bOpened bDAWDriver bContinueOnError bIsAlias
52961>>>        String sPhysicalName sRootName sLogicalName sDisplayName sConnectionID sConnectionString
52961>>>        String sANSI_OEM sSchema sBaseTableSpace sLongTableSpace sIndexTableSpace sDatabase sGUIDName sWarning
52961>>>        tSQLConnection SQLConnection
52961>>>        tSQLConnection SQLConnection
52961>>>
52961>>>        Get _UtilTableExists hTable to bExists
52962>>>        If (bExists = False) Begin
52964>>>            Set Private.phCurrentTable to hTable
52965>>>            Error DFERR_PROGRAM "Table exists in Filelist.cfg but not on disk or SQL back-end.(Or Filelist.cfg contains a driver but the table doesn't exists on the SQL back-end)"
52966>>>>
52966>>>            Function_Return False
52967>>>        End
52967>>>>
52967>>>
52967>>>        Get UtilTableIsAlias hTable to bIsAlias
52968>>>        // If this is an Alias file there is nothing to convert to SQL.
52968>>>        // Instead we change the Filelist.cfg by adding the driver id to the rootname and create an .int file
52968>>>        If (bIsAlias = True) Begin
52970>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
52973>>>            If (sDriverID <> DATAFLEX_ID and not(sRootName contains ":")) Begin
52975>>>                Set_Attribute DF_FILE_ROOT_NAME of hTable to (sDriverID + ":" + sRootName)
52978>>>                Get psConnectionID to sConnectionID
52979>>>                Get _SqlUtilCreateIntFile hTable sDriverID sConnectionID True False to bOK
52980>>>            End
52980>>>>
52980>>>            Function_Return True
52981>>>        End
52981>>>>
52981>>>
52981>>>        Set Private.phCurrentTable to hTable
52982>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
52985>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
52988>>>        Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
52991>>>
52991>>>        If (ghoProgressBar <> 0) Begin
52993>>>            Send DoAdvance of ghoProgressBar
52994>>>            Set TableName_Text of ghoStatusPanel to ("Checking Table:" * "Number:" * String(hTable) * String(sLogicalName))
52995>>>            Set Message_Text   of ghoStatusPanel to ""
52996>>>            Set Action_Text    of ghoStatusPanel to ""
52997>>>        End
52997>>>>
52997>>>
52997>>>        // Marco Kuipers suggestion;
52997>>>        // If Filelist.cfg points to an embedded .dat table and the table already exists as
52997>>>        // an SQL table; Instead of creating the table in SQL, attach it to the existing
52997>>>        // SQL table.
52997>>>        Get _UtilTableIsSql hTable to bOK
52998>>>        If (bOK = False) Begin
53000>>>            Get _SqlUtilCheckIfTableNameExists sLogicalName sDriverID to bExists
53001>>>            If (bExists = True) Begin
53003>>>//                Get SQLUtilGUIDTempTableName sLogicalName to sGUIDName
53003>>>//                Get SqlTableRename hTable sLogicalName sGUIDName to bOK
53003>>>                Get phoLogFile to hoLogFile
53004>>>                If (hoLogFile <> 0) Begin          
53006>>>                    Move ("WARNING! Function: ApiTableConvertToSQL_Ex. The table" * sLogicalName * "pointed to an embedded table in Filelist.cfg that already existed as an SQL table! The table was NOT converted to SQL but instead ATTACHED to the existing SQL table.") to sWarning
53007>>>//                    Move ("WARNING! Function: ApiTableConvertToSQL_Ex. The table" * sLogicalName * "pointed to an embedded table in Filelist.cfg that already existed as an SQL table! The existing SQL table was renamed to:" * String(sGUIDName) * "and then converted again.") to sWarning
53007>>>                    Send LogError sWarning False
53008>>>                End
53008>>>>
53008>>>                Else Begin
53009>>>                    Error DFERR_PROGRAM sWarning
53010>>>>
53010>>>                End                                                       
53010>>>>
53010>>>                Get ApiTableAttachToSql hTable bUseConnectionID to bOK
53011>>>                Function_Return bOK // We're done (We have attached to an existing SQL table instead of converting it.
53012>>>            End
53012>>>>
53012>>>        End
53012>>>>
53012>>>
53012>>>        // Does the rootname contain a driver?
53012>>>        If (sDriverID <> DATAFLEX_ID and (Uppercase(sRootName) contains sDriverID)) Begin
53014>>>            // Does the table already exist as an SQL table?
53014>>>            Get SqlUtilCheckIfTableHandleExists hTable sDriverID to bExists
53015>>>            // It can happen that the table is missing from Filelist.cfg but still
53015>>>            // exist on the SQL side, in case we want to search for the table by its name.
53015>>>            If (bExists = False) Begin
53017>>>                Get _SqlUtilCheckIfTableNameExists sLogicalName sDriverID to bExists
53018>>>            End
53018>>>>
53018>>>            If (bExists = True) Begin
53020>>>                Set TableName_Text of ghoStatusPanel to ""
53021>>>                Function_Return False
53022>>>            End
53022>>>>
53022>>>        End
53022>>>>
53022>>>        Move (If(bToAnsi = True, CS_ANSI_Txt, CS_OEM_Txt)) to sANSI_OEM
53023>>>
53023>>>        Get IsDAWSQLDriver sDriverID to bDAWDriver
53024>>>        If (bUseConnectionID = True) Begin
53026>>>            Move False to bUseConnectionID
53027>>>        End
53027>>>>
53027>>>
53027>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
53028>>>        Move SQLConnection.sSchema           to sSchema
53029>>>        If (sSchema = "") Begin
53031>>>            Get _SqlFindKeyWord CI_SQLDBO    to sSchema
53032>>>            Move (Lowercase(sSchema))        to sSchema
53033>>>        End
53033>>>>
53033>>>
53033>>>        Move SQLConnection.sDatabase         to sDatabase
53034>>>        Move SQLConnection.sConnectionID     to sConnectionID
53035>>>        Move SQLConnection.sConnectionString to sConnectionString
53036>>>        If (sConnectionID = "" or sConnectionString = "") Begin
53038>>>            Error DFERR_PROGRAM ("The SQL connection info has NOT been setup. Could not convert table:" * String(hTable) * "to SQL")
53039>>>>
53039>>>            Function_Return False
53040>>>        End
53040>>>>
53040>>>
53040>>>        Get AutoConnectionIDLogin to bOK
53041>>>        Open hTable
53043>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
53046>>>        If (bOpened = False) Begin
53048>>>            Error DFERR_PROGRAM ("Could not open table number:" * String(hTable))
53049>>>>
53049>>>            Function_Return False
53050>>>        End
53050>>>>
53050>>>
53050>>>        If (ghoProgressBar <> 0) Begin
53052>>>            Send DoAdvance of ghoProgressBar
53053>>>            Set TableName_Text of ghoStatusPanel to ("Converting to SQL - Table:" * String(sLogicalName) * "Number:" * String(hTable))
53054>>>        End
53054>>>>
53054>>>
53054>>>        Move 0 to hToTable
53055>>>        Get _TableNameOnly sRootName                 to sRootName
53056>>>        Move (sRootName + ".int")                    to sPhysicalName
53057>>>
53057>>>        Case Begin
53057>>>            Case (sDriverID = MSSQLDRV_ID)
53059>>>                Case Break
53060>>>            Case (sDriverID = ODBC_DRV_ID)
53063>>>                Case Break
53064>>>            Case (sDriverID = DB2_DRV_ID)
53067>>>                Move SQLConnection.sBaseTableSpace  to sBaseTableSpace
53068>>>                Move SQLConnection.sLongTableSpace  to sLongTableSpace
53069>>>                Move SQLConnection.sIndexTableSpace to sIndexTableSpace
53070>>>                Case Break
53071>>>            Case (sDriverID = DATAFLEX_ID)
53074>>>                Case Break
53075>>>            Case Else
53075>>>                Error DFERR_PROGRAM "Wrong database driver passed to the 'ApiTableConvertToSQL_Ex' function."
53076>>>>
53076>>>                Case Break
53077>>>        Case End
53077>>>
53077>>>        Move False to Err
53078>>>
53078>>>        Structure_Start hToTable sDriverID
53079>>>            Structure_Copy hTable to hToTable
53080>>>            Set_Attribute DF_FILE_PHYSICAL_NAME of hToTable to sPhysicalName
53083>>>
53083>>>            If (sDriverID <> DATAFLEX_ID) Begin
53085>>>                If (bUseConnectionID = True) Begin
53087>>>                    Set_Attribute DF_FILE_LOGIN of hToTable to (CS_DFCONNID + "=" + sConnectionID)
53090>>>                End
53090>>>>
53090>>>                Else Begin
53091>>>                    Set_Attribute DF_FILE_LOGIN of hToTable to sConnectionString
53094>>>                End
53094>>>>
53094>>>
53094>>>                Set_Attribute DF_FILE_RECNUM_TABLE of hToTable to bRecnum
53097>>>
53097>>>                If (sSchema <> "") Begin
53099>>>                    Set_Attribute DF_FILE_OWNER of hToTable to sSchema
53102>>>                End
53102>>>>
53102>>>
53102>>>                If (sDriverID = DB2_DRV_ID) Begin
53104>>>                    If (sLongTableSpace <> "") Begin
53106>>>                        Set_Attribute DF_FILE_LONG_TABLESPACE  of hToTable to sLongTableSpace
53109>>>                    End
53109>>>>
53109>>>                    If (sBaseTableSpace <> "") Begin
53111>>>                        Set_Attribute DF_FILE_TABLE_TABLESPACE of hToTable to sBaseTableSpace
53114>>>                    End
53114>>>>
53114>>>                    If (sIndexTableSpace <> "") Begin
53116>>>                        Set_Attribute DF_FILE_INDEX_TABLESPACE of hToTable to sIndexTableSpace
53119>>>                    End
53119>>>>
53119>>>                End
53119>>>>
53119>>>            End
53119>>>>
53119>>>
53119>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
53120>>>        Structure_End hToTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
53122>>>        Set Action_Text of ghoStatusPanel to ""
53123>>>
53123>>>        Move (not(Err)) to bOK
53124>>>
53124>>>        If (bOK = True and bCopyData = True) Begin
53126>>>            Get ApiTableCopyData hTable sPhysicalName sRootName sDriverID to bOK
53127>>>
53127>>>            If (ghoDbUpdateHandler > 0) Begin
53129>>>                Get pbContinueOnError to bContinueOnError
53130>>>            End
53130>>>>
53130>>>            // If the data copy failed we will keep the newly created SQL table but
53130>>>            // rename it by adding a GUID to the end of the table name
53130>>>            // - or as much as "fit" because different SQL back-ends have
53130>>>            // different rules how long a table name can be.
53130>>>            // The new table will probably contain data but something went
53130>>>            // wrong while converting the data from embedded to SQL.
53130>>>            If (bOK = False and bContinueOnError = False) Begin
53132>>>                Get SQLUtilGUIDTempTableName sLogicalName to sGUIDName
53133>>>                Get SqlTableRename hTable sLogicalName sGUIDName to bOK
53134>>>                Error DFERR_PROGRAM ("Copying of" * sLogicalName * " data failed due to bad data. Either duplicate records and/or bad e.g Date/DateTime data. The SQL table was renamed to:" * String(sGUIDName) * "and its Filelist.cfg entry was NOT changed.")
53135>>>>
53135>>>            End
53135>>>>
53135>>>        End
53135>>>>
53135>>>
53135>>>        // This must be after copying data...
53135>>>        If (Err = False) Begin
53137>>>            Set_Attribute DF_FILE_ROOT_NAME of hTable to (sDriverID + ":" + sRootName)
53140>>>            // It seems the Studio does not do this any more, so commented out.
53140>>>            // We also adjust the display name by prefixing it by the schema name;
53140>>>            //            If (not(Lowercase(sDisplayName) contains Lowercase(sSchema + "."))) Begin
53140>>>            //                // The max length for the display_name is 31 characters...
53140>>>            //                If (Length(sSchema + "." + sDisplayName) < 31) Begin
53140>>>            //                    Set_Attribute DF_FILE_DISPLAY_NAME of hTable to (Lowercase(sSchema) + "." + sDisplayName)
53140>>>            //                End
53140>>>            //            End
53140>>>        End
53140>>>>
53140>>>
53140>>>        Close hTable
53141>>>        Move (not(Err)) to bOK
53142>>>        Function_Return bOK
53143>>>    End_Function
53144>>>
53144>>>    // Calls a driver function directly to copy data from one table to another (table structures needs to be the same).
53144>>>    // It will first drop all indicies, copy the data and then recreate indicies.
53144>>>    // An error log file with the sRootname + ".err" will be created in the Data folder.
53144>>>    Function ApiTableCopyData Integer hFromTable String sPhysicalName String sRootName String sDriverID Returns Boolean
53146>>>        Boolean bOpened bOK
53146>>>        Integer hToTable iIndex iRetval iVoid iOrgFreq
53146>>>        String sErrorFile sEmpty sPath
53146>>>
53146>>>        Get_Attribute DF_FILE_NEXT_EMPTY of 0 to hToTable
53149>>>        Get AutoConnectionIDLogin to bOK
53150>>>        If (sDriverID = DATAFLEX_ID) Begin
53152>>>            Send IncreaseSortBufferSize
53153>>>//            Send SetAllIndexesToBatch hToTable
53153>>>        End
53153>>>>
53153>>>
53153>>>        Move False to Err
53154>>>        Open sPhysicalName as hToTable
53156>>>        Get_Attribute DF_FILE_OPENED of hToTable to bOpened
53159>>>        If (bOpened = False) Begin
53161>>>            Function_Return False
53162>>>        End
53162>>>>
53162>>>
53162>>>        If (ghoStatusPanel <> 0) Begin
53164>>>            Set TableName_Text of ghoStatusPanel to ("Copying Data for Table:" * sRootName * "Number:" * String(hFromTable))
53165>>>            Set piMinimum of ghoProgressBar to 0
53166>>>            Set piMaximum of ghoProgressBar to 100 // 100%
53167>>>        End
53167>>>>
53167>>>
53167>>>        Move "" to sEmpty
53168>>>        Move False to Err
53169>>>        Move True to bOK
53170>>>        Set Private.phCurrentTable to hToTable
53171>>>
53171>>>        // No need to get the record identifier
53171>>>        Set_Attribute DF_FILE_GET_RID_AFTER_CREATE of hToTable to False
53174>>>        Get_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
53177>>>        If (sDriverID <> DATAFLEX_ID) Begin
53179>>>            // Remove all indices to speed up copying of data:
53179>>>            Call_Driver hToTable sDriverID Function CLI_DROPINDICES Callback ghoDbUpdateHandler Passing sEmpty sEmpty iVoid Result iRetval
53184>>>            If (iRetval <> 0) Begin       
53186>>>                Error DFERR_PROGRAM ("Failed dropping indices for table Number:" * String(hToTable) * "Name:" * String(sRootName))
53187>>>>
53187>>>                Close hToTable
53188>>>                Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
53191>>>                Function_Return False
53192>>>            End
53192>>>>
53192>>>        End
53192>>>>
53192>>>
53192>>>        Move (sRootName + ".err") to sErrorFile
53193>>>        Move 0 to iIndex
53194>>>        Move False to Err
53195>>>
53195>>>        If (sDriverID = MSSQLDRV_ID) Begin
53197>>>            Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to 10
53200>>>            Call_Driver hToTable sDriverID Function CLI_BCP CallBack ghoDbUpdateHandler Passing iIndex sEmpty hFromTable Result iRetval
53205>>>            If (iRetval <> 0) Begin
53207>>>                Error DFERR_PROGRAM ("Failed copying data for table Number:" * String(hToTable) * "Name:" * String(sRootName))
53208>>>>
53208>>>                Close hToTable
53209>>>                Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
53212>>>                Function_Return False
53213>>>            End
53213>>>>
53213>>>        End
53213>>>>
53213>>>        Else Begin
53214>>>            Copy_Records hFromTable to hToTable using 0 Callback ghoDbUpdateHandler
53217>>>        End
53217>>>>
53217>>>
53217>>>        If (Err = False) Begin
53219>>>            Get psHome of (phoWorkspace(ghoApplication)) to sPath
53220>>>            Get vDeleteFile (sPath + sErrorFile) to iRetval
53221>>>        End
53221>>>>
53221>>>
53221>>>        If (sDriverID <> DATAFLEX_ID) Begin
53223>>>            // Recreate indices:
53223>>>            Call_Driver hToTable sDriverID Function CLI_CREATEINDICES Callback ghoDbUpdateHandler Passing sEmpty sEmpty iVoid Result iRetval
53228>>>            If (iRetval <> 0) Begin
53230>>>                Error DFERR_PROGRAM ("Failed creating indices for table Number:" * String(hToTable) * "Name:" * String(sRootName))
53231>>>>
53231>>>                Close hToTable
53232>>>                Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
53235>>>                Function_Return False
53236>>>            End
53236>>>>
53236>>>        End
53236>>>>
53236>>>
53236>>>        Close hToTable
53237>>>        Set_Attribute DF_RUNTIME_PROGRESS_FREQUENCY to iOrgFreq
53240>>>
53240>>>        If (bOK = True) Begin
53242>>>            Move (not(Err)) to bOK
53243>>>        End
53243>>>>
53243>>>
53243>>>        If (ghoStatusPanel <> 0) Begin
53245>>>            Set TableName_Text of ghoStatusPanel to ""
53246>>>            Set Message_Text   of ghoStatusPanel to ""
53247>>>            Set Action_Text    of ghoStatusPanel to ""
53248>>>        End
53248>>>>
53248>>>
53248>>>        Function_Return (bOK = True)
53249>>>    End_Function
53250>>>
53250>>>    // The bANSI parameter's default value = True, meaning a table in ANSI format will be created.
53250>>>    // i.e. DF_FILE_TABLE_CHARACTER_FORMAT {"OEM"|"ANSI"}
53250>>>    Function ApiTableCreate Handle hTable String sRootName String sDisplayName String sLogicalName Boolean bUseConnectionID Boolean bANSI Boolean bRecnum tAPIColumn[] aColumnIn Returns Boolean
53252>>>        Handle hFile
53252>>>        String sConnectionID sPhysicalFile sANSI_OEM sVal sSchema sOriginalDriverID sDriverID sTableName
53252>>>        Integer iIdentityType iDataType iDbType iCount iSize
53252>>>        Boolean bOk bExists bSqlDriver bDeleteDummy bExistsInFilelist bSysFile
53252>>>        tSQLConnection SQLConnection
53252>>>        tSQLConnection SQLConnection
53252>>>        tAPIColumn[] aColumns
53252>>>        tAPIColumn[] aColumns
53253>>>        tColumnType ColumnType
53253>>>        tColumnType ColumnType
53253>>>
53253>>>        // First check if the passed filenumber already exists; in case we do nothing
53253>>>        Get _UtilTableExists hTable to bOk
53254>>>        If (bOk = True) Begin
53256>>>            Function_Return False
53257>>>        End
53257>>>>
53257>>>
53257>>>        Set Private.phCurrentTable to hTable
53258>>>        Move sLogicalName to sTableName
53259>>>        If (ghoProgressBar <> 0) Begin
53261>>>            Send DoAdvance of ghoProgressBar
53262>>>            Set TableName_Text of ghoStatusPanel to ("Creating Table:" * String(sTableName) * "Number:" * String(hTable) * String(sLogicalName))
53263>>>        End
53263>>>>
53263>>>
53263>>>        Get UtilTableLogicalNameIsInUse sTableName to bExistsInFilelist
53264>>>        Get psDriverID to sDriverID
53265>>>        Get IsSQLDriver sDriverID to bSqlDriver
53266>>>        Get piDbType to iDbType
53267>>>
53267>>>        // If no columns passed in, we need to create a "dummy" column
53267>>>        Move False to bDeleteDummy
53268>>>        If (Num_Arguments = 8) Begin
53270>>>            Move aColumnIn to aColumns
53271>>>        End
53271>>>>
53271>>>        If ((SizeOfArray(aColumns)) = 0) Begin
53273>>>            Get UtilDFDataTypeToSqlTypeMapping sDriverID iDbType DF_BCD to ColumnType
53274>>>            Move ColumnType.iSQLType to iDataType
53275>>>            If (bRecnum = False) Begin
53277>>>                Move C_tAPIColumn_Identity to iIdentityType
53278>>>            End
53278>>>>
53278>>>            Else Begin
53279>>>                Move C_tAPIColumn_None     to iIdentityType
53280>>>            End
53280>>>>
53280>>>            Get _AppendAPIColumn aColumns "temp" iDataType 10 0 iIdentityType to aColumns
53281>>>            Move True to bDeleteDummy
53282>>>        End
53282>>>>
53282>>>
53282>>>        // If columns have been passed as an array we need to check if an identity column
53282>>>        // has been specified (aColumns[iCounter].iOptions = C_tAPIColumn_Identity), and
53282>>>        // if so auto-set the bRecnum to FALSE. This is because else there would be
53282>>>        // two identity columns and SQL doesn't like that and throws an error.
53282>>>        If (bRecnum = True and (SizeOfArray(aColumns)) <> 0) Begin
53284>>>            Move (SizeOfArray(aColumns)) to iSize
53285>>>            Decrement iSize
53286>>>            for iCount from 0 to iSize
53292>>>>
53292>>>                If (aColumns[iCount].iOptions = C_tAPIColumn_Identity) Begin
53294>>>                    Move False to bRecnum
53295>>>                    Move iSize to iCount
53296>>>                End
53296>>>>
53296>>>            Loop
53297>>>>
53297>>>        End
53297>>>>
53297>>>
53297>>>        // If this is a SQL based driver we also check if the table exists
53297>>>        // in the SQL back end; in case we do nothing.
53297>>>        If (bSqlDriver = True) Begin
53299>>>            // Get all connection properties
53299>>>            Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
53300>>>            Move SQLConnection.sSchema to sSchema
53301>>>            If (sSchema = "") Begin
53303>>>                Get _SqlFindKeyWord CI_SQLDBO to sSchema
53304>>>            End
53304>>>>
53304>>>
53304>>>            Get SqlUtilCheckIfTableHandleExists hTable sDriverID to bExists
53305>>>            // It can happen that the table is missing from Filelist.cfg but still
53305>>>            // exist on the SQL side, in case we want to search for the table by its name.
53305>>>            If (bExists = False) Begin
53307>>>                Get _SqlUtilCheckIfTableNameExists sTableName sDriverID to bExists
53308>>>            End
53308>>>>
53308>>>            // If the table exists on the SQL back-end but not in Filelist.cfg,
53308>>>            // we will just add it to Filelist.cfg
53308>>>            If (bExists = True) Begin
53310>>>                If (bExistsInFilelist = False) Begin
53312>>>                    If (sDriverID <> DATAFLEX_ID and not(Uppercase(sRootName) contains sDriverID)) Begin
53314>>>                        Move (sDriverID + ":" + sRootName) to sRootName
53315>>>                    End
53315>>>>
53315>>>                    Set_Attribute DF_FILE_ROOT_NAME     of hTable to sRootName
53318>>>                    Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
53321>>>                    Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
53324>>>                    Move False to bSysFile
53325>>>                    Get _SqlUtilCreateIntFile hTable sDriverID SQLConnection.sConnectionID bANSI bSysFile to bOK
53326>>>                End
53326>>>>
53326>>>                Function_Return False
53327>>>            End
53327>>>>
53327>>>        End
53327>>>>
53327>>>
53327>>>        Move CS_ANSI_Txt to sANSI_OEM
53328>>>        If (num_arguments > 6) Begin
53330>>>            If (bANSI = False) Begin
53332>>>                Move CS_OEM_Txt to sANSI_OEM
53333>>>            End
53333>>>>
53333>>>        End
53333>>>>
53333>>>
53333>>>        Move False to Err
53334>>>        If (sDriverID = DATAFLEX_ID) Begin
53336>>>            Move sRootName to sPhysicalFile
53337>>>        End
53337>>>>
53337>>>
53337>>>        If (sDriverID <> DATAFLEX_ID) Begin
53339>>>            Move SQLConnection.sConnectionID to sConnectionID
53340>>>
53340>>>            // If DAW driver and we should use a connection id we need to
53340>>>            // check if the connection ID exists; else we create it before attempting creating the table
53340>>>            If (bUseConnectionID = True) Begin
53342>>>                Get IsConnectionID sConnectionID sDriverID to bExists
53343>>>                If (bExists = False) Begin
53345>>>                    Get AutoSetConnectionID sConnectionID to bOk
53346>>>                    If (bOk = False) Begin
53348>>>                        Error DFERR_PROGRAM ("The Connection ID:" * sConnectionID * "could not be created and therefor the table can't be created.")
53349>>>>
53349>>>                        Function_Return False
53350>>>                    End
53350>>>>
53350>>>                End
53350>>>>
53350>>>            End
53350>>>>
53350>>>
53350>>>            If (sDriverID <> DATAFLEX_ID and (Uppercase(sRootName) contains sDriverID)) Begin
53352>>>                Move (sTableName + ".int") to sPhysicalFile
53353>>>            End
53353>>>>
53353>>>            Else Begin
53354>>>                Move (sRootName + ".int") to sPhysicalFile
53355>>>            End
53355>>>>
53355>>>            Move (Uppercase(sDisplayName)) to sVal
53356>>>//            If (not(sVal contains (sSchema + "."))) Begin
53356>>>//                Move (Lowercase(sSchema) + "." + sTableName) to sDisplayName
53356>>>//            End
53356>>>        End
53356>>>>
53356>>>        Move False to Err
53357>>>        Move 0 to hFile
53358>>>
53358>>>        Structure_Start hFile sDriverID
53359>>>            If (sDriverID <> DATAFLEX_ID) Begin
53361>>>                If (bUseConnectionID = True) Begin
53363>>>                    Set_Attribute DF_FILE_LOGIN                of hFile to (CS_DFCONNID + "=" + sConnectionID)
53366>>>                End
53366>>>>
53366>>>                Else Begin
53367>>>                    Set_Attribute DF_FILE_LOGIN                of hFile to SQLConnection.sConnectionString
53370>>>                End
53370>>>>
53370>>>                Set_Attribute DF_FILE_TABLE_NAME               of hFile to sTableName
53373>>>                Set_Attribute DF_FILE_USE_DUMMY_ZERO_DATE      of hFile to True
53376>>>                Set_Attribute DF_FILE_TABLE_CHARACTER_FORMAT   of hFile to sANSI_OEM
53379>>>                Set_Attribute DF_FILE_RECNUM_TABLE             of hFile to bRecnum
53382>>>
53382>>>                If (sSchema <> "") Begin
53384>>>                    Set_Attribute DF_FILE_OWNER                of hFile to sSchema
53387>>>                End
53387>>>>
53387>>>
53387>>>                If (sDriverID = DB2_DRV_ID) Begin
53389>>>                    If (SQLConnection.sLongTableSpace <> "") Begin
53391>>>                        Set_Attribute DF_FILE_LONG_TABLESPACE  of hFile to SQLConnection.sLongTableSpace
53394>>>                    End
53394>>>>
53394>>>                End
53394>>>>
53394>>>                If (sDriverID = DB2_DRV_ID) Begin
53396>>>                    If (SQLConnection.sBaseTableSpace <> "") Begin
53398>>>                        Set_Attribute DF_FILE_TABLE_TABLESPACE of hFile to SQLConnection.sBaseTableSpace
53401>>>                    End
53401>>>>
53401>>>                    If (SQLConnection.sIndexTableSpace <> "") Begin
53403>>>                        Set_Attribute DF_FILE_INDEX_TABLESPACE of hFile to SQLConnection.sIndexTableSpace
53406>>>                    End
53406>>>>
53406>>>                End
53406>>>>
53406>>>            End
53406>>>>
53406>>>
53406>>>            Set_Attribute DF_FILE_PHYSICAL_NAME of hFile to sPhysicalFile
53409>>>            Get ApiColumnsAddToTable hFile aColumns True to bOk
53410>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
53411>>>        Structure_End hFile DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
53413>>>        Set Action_Text of ghoStatusPanel to ""
53414>>>
53414>>>        Move (not(Err)) to bOK
53415>>>        If (bOk = True) Begin
53417>>>            If (sDriverID <> DATAFLEX_ID and not(Uppercase(sRootName) contains sDriverID)) Begin
53419>>>                Move (sDriverID + ":" + sRootName) to sRootName
53420>>>            End
53420>>>>
53420>>>            Set_Attribute DF_FILE_ROOT_NAME     of hTable to sRootName
53423>>>            Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
53426>>>            Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
53429>>>
53429>>>            // Lastly we remove the temporary column we created above, if all went well.
53429>>>            If (bDeleteDummy) Begin
53431>>>                Get ApiColumnRemove hTable "temp" to bOk
53432>>>            End
53432>>>>
53432>>>        End
53432>>>>
53432>>>
53432>>>        Set TableName_Text of ghoStatusPanel to ""
53433>>>        Close hTable
53434>>>        Function_Return (bOK = True)
53435>>>    End_Function
53436>>>
53436>>>    Function ApiTableCreateAlias String sFileName String sDisplayName String sAliasName Integer iFilelistSlot Returns Boolean
53438>>>        Move False to Err
53439>>>        Set_Attribute DF_FILE_ROOT_NAME     of iFilelistSlot to sFileName
53442>>>        Set_Attribute DF_FILE_DISPLAY_NAME  of iFilelistSlot to sDisplayName
53445>>>        Set_Attribute DF_FILE_LOGICAL_NAME  of iFilelistSlot to sAliasName
53448>>>
53448>>>        Function_Return (Err = False)
53449>>>    End_Function
53450>>>
53450>>>    // ToDo: Needs to be revised
53450>>>    Procedure ApiTableCreateFromDEF String sPath String sFileName String sTableName String sDisplayName Integer iFilelistSlot
53452>>>        Handle hTable
53452>>>        String sDEFName sDataPath
53452>>>        Boolean bExists
53452>>>
53452>>>        // Do nothing if MSSQL Driver.
53452>>>//        Get IsMSSQLDriver to bExists
53452>>>//        If (bExists = True) Begin
53452>>>//            Procedure_Return
53452>>>//        End
53452>>>
53452>>>        Get psDataPathFirstPart to sDataPath
53453>>>        Get vFilePathExists (sDataPath + sFileName + ".dat") to bExists
53454>>>        If (bExists = True) Begin
53456>>>            // We also needs to check if it is an Alias file, in case the sFileName.dat exists, but it may
53456>>>            // still be missing from the filelist and needs to be added.
53456>>>            Get _UtilTableNumberIsInUse iFilelistSlot to bExists
53457>>>            If (bExists = True) Begin
53459>>>                Procedure_Return
53460>>>            End
53460>>>>
53460>>>            // Do _not_ use the DEF file if an alias, it will overwrite the base table data.
53460>>>            Else Begin
53461>>>                Set_Attribute DF_FILE_ROOT_NAME    of iFilelistSlot to sFileName
53464>>>                Set_Attribute DF_FILE_LOGICAL_NAME of iFilelistSlot to sTableName
53467>>>                Set_Attribute DF_FILE_DISPLAY_NAME of iFilelistSlot to sDisplayName
53470>>>                Procedure_Return
53471>>>            End
53471>>>>
53471>>>        End
53471>>>>
53471>>>
53471>>>        Move (sPath + sFileName + ".def") to sDEFName
53472>>>        Move 0 to hTable
53473>>>        Move False to Err
53474>>>
53474>>>        Structure_Start hTable DATAFLEX_ID
53475>>>            Load_Def sDEFName Onto hTable
53476>>>            Set_Attribute DF_FILE_PHYSICAL_NAME of hTable to sFileName
53479>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
53480>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
53482>>>        Set Action_Text of ghoStatusPanel to ""
53483>>>
53483>>>        Move iFilelistSlot to hTable
53484>>>        Set_Attribute DF_FILE_ROOT_NAME    of hTable to sFileName
53487>>>        Set_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
53490>>>        Set_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplayName
53493>>>
53493>>>    End_Procedure
53494>>>
53494>>>    Function ApiTableMoveToFileSlot Integer iFromFileSlot Integer iToFileSlot String sDriverID Returns Boolean
53496>>>        Boolean bTmp bErr bOK
53496>>>        String sTableName sDisplayName sFileName
53496>>>
53496>>>        // We preserve the value of the Err flag, by saving its current state and resetting it before end of function.
53496>>>        Move Err to bTmp
53497>>>        Move False to Err
53498>>>
53498>>>        Get AutoConnectionIDLogin to bOK
53499>>>        // First get the info for the current filelist slot:
53499>>>        Open iFromFileSlot
53501>>>        Get_Attribute DF_FILE_OPENED of iFromFileSlot to bOK
53504>>>        If (bOK = True) Begin
53506>>>            Get_Attribute DF_FILE_ROOT_NAME    of iFromFileSlot to sFileName
53509>>>            Get_Attribute DF_FILE_LOGICAL_NAME of iFromFileSlot to sTableName
53512>>>            Get_Attribute DF_FILE_DISPLAY_NAME of iFromFileSlot to sDisplayName
53515>>>
53515>>>            //...then move it.
53515>>>            Set_Attribute DF_FILE_ROOT_NAME    of iToFileSlot to sFileName
53518>>>            Set_Attribute DF_FILE_LOGICAL_NAME of iToFileSlot to sTableName
53521>>>            Set_Attribute DF_FILE_DISPLAY_NAME of iToFileSlot to sDisplayName
53524>>>
53524>>>            //...and finally remove the old filelist values.
53524>>>            Set_Attribute DF_FILE_ROOT_NAME    of iFromFileSlot to ""
53527>>>            Set_Attribute DF_FILE_LOGICAL_NAME of iFromFileSlot to ""
53530>>>            Set_Attribute DF_FILE_DISPLAY_NAME of iFromFileSlot to ""
53533>>>        End
53533>>>>
53533>>>        Close iFromFileSlot
53534>>>
53534>>>        Move Err to bErr
53535>>>        Move bTmp to Err
53536>>>        Function_Return (bErr = False)
53537>>>    End_Function
53538>>>
53538>>>    Function ApiTableRelate Handle hTableFrom Handle hTableTo Integer iColumnFrom Integer iColumnTo Returns Boolean
53540>>>        Handle hTable
53540>>>        Boolean bOK
53540>>>        String sDriverID
53540>>>
53540>>>        Get _UtilTableExists hTableFrom to bOK
53541>>>        If (bOK = False) Begin
53543>>>            Set Private.phCurrentTable to hTableFrom
53544>>>            Error DFERR_PROGRAM "Table exists in Filelist.cfg but not on disk or SQL back-end."
53545>>>>
53545>>>            Function_Return False
53546>>>        End
53546>>>>
53546>>>
53546>>>        Get _UtilTableExists hTableTo to bOK
53547>>>        If (bOK = False) Begin
53549>>>            Set Private.phCurrentTable to hTableTo
53550>>>            Error DFERR_PROGRAM "Table exists in Filelist.cfg but not on disk or SQL back-end."
53551>>>>
53551>>>            Function_Return False
53552>>>        End
53552>>>>
53552>>>
53552>>>        Get AutoConnectionIDLogin to bOK
53553>>>        Get UtilTableOpen hTableFrom "" DF_EXCLUSIVE to bOK
53554>>>        If (bOK = False) Begin
53556>>>            Function_Return False
53557>>>        End
53557>>>>
53557>>>
53557>>>        Move False to Err
53558>>>        Open hTableTo
53560>>>
53560>>>        Move hTableFrom to hTable
53561>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
53564>>>        Set Private.phCurrentTable to hTable
53565>>>
53565>>>        Structure_Start hTable sDriverID
53566>>>            Set_Attribute DF_FIELD_RELATED_FILE of hTable iColumnFrom to hTableTo
53569>>>            If (iColumnTo <> 0) Begin
53571>>>                Set_Attribute DF_FIELD_RELATED_FIELD of hTable iColumnFrom to iColumnTo
53574>>>            End
53574>>>>
53574>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
53575>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
53577>>>        Set Action_Text of ghoStatusPanel to ""
53578>>>
53578>>>        If (hTableTo > 0) Begin
53580>>>            Close hTableTo
53581>>>        End
53581>>>>
53581>>>
53581>>>        Function_Return (Err = False)
53582>>>    End_Function
53583>>>
53583>>>    // Removes the passed table name completely from disk, filelist (& Sql Server if an Sql-driver)
53583>>>    Function ApiTableRemove Handle hTable Returns Boolean
53585>>>        String sTableName sDriverID
53585>>>        Boolean bOk
53585>>>        String sDataPath
53585>>>
53585>>>        Get AutoConnectionIDLogin to bOK
53586>>>        Move False to Err
53587>>>        Get psDriverID to sDriverID
53588>>>        Get UtilTableHandleToString hTable sDriverID to sTableName
53589>>>        If (sTableName = "") Begin
53591>>>            Function_Return False
53592>>>        End
53592>>>>
53592>>>
53592>>>        Set Private.phCurrentTable to hTable
53593>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_DELETE_FILE
53594>>>        Delete_db sTableName
53595>>>        Send Trap_Error of Error_Object_Id DFERR_CANT_DELETE_FILE
53596>>>
53596>>>        If (sDriverID <> DATAFLEX_ID) Begin
53598>>>//            Get SqlTableRemoveByTableName sTableName to bOk  // We don't have to do this because the database is already removed by 'delete_db' above
53598>>>            Get psDataPathFirstPart to sDataPath
53599>>>            Get vDeleteFile (sDataPath + sTableName + ".int") to bOk
53600>>>        End
53600>>>>
53600>>>        // Also remove table from filelist.cfg in case the physical file didn't exist.
53600>>>        If (hTable <> 0) Begin
53602>>>            Set_Attribute DF_FILE_ROOT_NAME     of hTable to ""
53605>>>            Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to ""
53608>>>            Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to ""
53611>>>        End
53611>>>>
53611>>>
53611>>>        Close hTable
53612>>>        Function_Return (hTable <> 0)
53613>>>    End_Function
53614>>>
53614>>>    Function ApiTableRemoveRelation Handle hTableFrom Integer iColumn Returns Boolean
53616>>>        Handle hTable
53616>>>        Boolean bOK
53616>>>
53616>>>        Get AutoConnectionIDLogin to bOK
53617>>>        Move False to Err
53618>>>        Open hTableFrom Mode DF_EXCLUSIVE
53620>>>        Move hTableFrom to hTable
53621>>>
53621>>>        Structure_Start hTable
53622>>>            Set_Attribute DF_FIELD_RELATED_FILE of hTable iColumn to 0
53625>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
53626>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
53628>>>        Set Action_Text of ghoStatusPanel to ""
53629>>>
53629>>>        Close hTableFrom
53630>>>        Function_Return (Err = False)
53631>>>    End_Function
53632>>>
53632>>>    Function ApiTableRename Handle hTable String sRootName String sDisplayName String sLogicalName Returns Boolean
53634>>>        String sPhysicalName sRootNameTo sLogicalNameTo sDataPath sDriverID sSchema sPhysicalNameTo
53634>>>        Boolean bOK bExists bOpened
53634>>>        tAPITableNameInfo APITableNameInfo
53634>>>        tAPITableNameInfo APITableNameInfo
53634>>>
53634>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
53637>>>        If (bOpened = False) Begin
53639>>>            Get OpenTableExclusive hTable to bOpened
53640>>>            If (bOpened = False) Begin
53642>>>                Send UserError DFERR_PROGRAM ("Could not open table number:" * String(hTable) * "Table could not be updated.")
53643>>>                Function_Return False
53644>>>            End
53644>>>>
53644>>>        End
53644>>>>
53644>>>
53644>>>        Set Private.phCurrentTable to hTable
53645>>>        Move hTable         to APITableNameInfo.iTableNumber
53646>>>        Move sRootName      to APITableNameInfo.sRootName
53647>>>        Move sLogicalName   to APITableNameInfo.sLogicalName
53648>>>        Move sDisplayName   to APITableNameInfo.sDisplayName
53649>>>        Get _ApiTableFilelistNamesCompare True APITableNameInfo to bExists
53650>>>        If (bExists = True) Begin
53652>>>            Function_Return True
53653>>>        End
53653>>>>
53653>>>
53653>>>        Set Private.phCurrentTable to hTable
53654>>>        Move False to Err
53655>>>        Get psDataPathFirstPart to sDataPath
53656>>>        Get_Attribute DF_FILE_PHYSICAL_NAME of hTable to sPhysicalName
53659>>>        Get_Attribute DF_FILE_ROOT_NAME     of hTable to sRootNameTo
53662>>>        Get_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalNameTo
53665>>>
53665>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
53668>>>        Close hTable
53669>>>        If (sDriverID = DATAFLEX_ID) Begin
53671>>>            Get vFilePathExists (sDataPath + sRootNameTo + ".dat") to bExists
53672>>>            If (bExists = True) Begin
53674>>>                If (Uppercase(sRootName) <> Uppercase(sRootNameTo)) Begin
53676>>>                    Copy_db (sDataPath + sRootNameTo) to (sDataPath + sRootName)
53679>>>                    // We need a short break here before attempting to delete the physical old files or Windows
53679>>>                    // might report "File in use..." and the deletion will fail.
53679>>>                    Sleep 2
53680>>>                    Get vDeleteFile (sDataPath + sRootNameTo + ".*") to bOK
53681>>>                End
53681>>>>
53681>>>            End
53681>>>>
53681>>>        End
53681>>>>
53681>>>
53681>>>        If (sDriverID <> DATAFLEX_ID) Begin
53683>>>            If (not(sPhysicalName contains ".")) Begin
53685>>>                Move (sPhysicalName + String(".int")) to sPhysicalName
53686>>>            End
53686>>>>
53686>>>
53686>>>            // Change the table name in the .int file to the new table new:
53686>>>            Get _UtilChangeSourceCodeLine (sDataPath + sPhysicalName) (CS_DATABASE_NAME * String(sLogicalNameTo)) (CS_DATABASE_NAME * String(sLogicalName)) False to bOK
53687>>>            If (bOK = False) Begin
53689>>>                Function_Return False
53690>>>            End
53690>>>>
53690>>>
53690>>>            // Change table name at the SQL side:
53690>>>            Get psSchema to sSchema
53691>>>            Get SqlTableRename hTable sLogicalNameTo sLogicalName to bOK
53692>>>
53692>>>            Get _TableNameOnly sRootName to sPhysicalNameTo
53693>>>            // Remove cache file and Rename the physical file names:
53693>>>            Get vDeleteFile (sDataPath + sPhysicalNameTo + ".cch")                                  to bOK
53694>>>            Get vRenameFile (sDataPath + sPhysicalName)            (sDataPath + sRootName + ".int") to bOK
53695>>>            Get vRenameFile (sDataPath + sPhysicalNameTo + ".tag") (sDataPath + sRootName + ".tag") to bOK
53696>>>            Move (sDriverID + ":" + sRootName) to sRootName
53697>>>
53697>>>            // The Studio no longer adds the schema to the DISPLAY_NAME, so commented out.
53697>>>//            If (not(sDisplayName contains ".")) Begin
53697>>>//                Move (sSchema + "." + sDisplayName) to sDisplayName
53697>>>//            End
53697>>>        End
53697>>>>
53697>>>
53697>>>        Set_Attribute DF_FILE_ROOT_NAME     of hTable to sRootName
53700>>>        Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
53703>>>        Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
53706>>>
53706>>>        Function_Return (Err = False)
53707>>>    End_Function
53708>>>
53708>>>    Function ApiTableRenameAlias Integer hTable String sDisplayName String sLogicalName Returns Boolean
53710>>>        Move False to Err
53711>>>        Set Private.phCurrentTable to hTable
53712>>>        Set_Attribute DF_FILE_DISPLAY_NAME  of hTable to sDisplayName
53715>>>        Set_Attribute DF_FILE_LOGICAL_NAME  of hTable to sLogicalName
53718>>>
53718>>>        Function_Return (Err = False)
53719>>>    End_Function
53720>>>
53720>>>    // Note: This table update function does _not_ convert an embedded table to SQL. Use function ApiTableConvertToSQL first for that.
53720>>>    Function ApiTableUpdate tAPITableNameInfo APITableNameInfoFrom tAPIColumn[] aColumnsFrom tAPIIndex[] aIndexesFrom tAPIRelation[] aRelationsFrom Returns Boolean
53722>>>        Handle hTable
53722>>>        String sTableName
53722>>>        String sDriverIDFrom sDriverIDTo
53722>>>        Integer iDbType
53722>>>        Boolean bOk bOpened bApiTableUpdateAuto
53722>>>        Boolean bUseConnectionID bToANSI bRecnum bCopyData bCompareDate_DateTime bCompareIndexAscending bCompareIndexUppercase bTableExists
53722>>>        Boolean bIsSame bFilelistError bIsAliasFrom bIsSQLTableFrom bIsSQLTableTo
53722>>>        tSQLConnection SQLConnection
53722>>>        tSQLConnection SQLConnection
53722>>>        tAPITable      APITableFrom APITableTo
53722>>>        tAPITable      APITableFrom APITableTo
53722>>>        tColumnType    ColumnType
53722>>>        tColumnType    ColumnType
53722>>>        tAPIColumnCompare[]   aAPIColumnCompare
53722>>>        tAPIColumnCompare[]   aAPIColumnCompare
53723>>>        tAPIIndexCompare[]    aAPIIndexCompare
53723>>>        tAPIIndexCompare[]    aAPIIndexCompare
53724>>>        tAPIRelationCompare[] aAPIRelationCompare
53724>>>        tAPIRelationCompare[] aAPIRelationCompare
53725>>>
53725>>>        // We don't allow changes to the framework's DbVersion table.
53725>>>        If (Lowercase(sTableName) = "dbversion") Begin
53727>>>            Function_Return False
53728>>>        End
53728>>>>
53728>>>
53728>>>        Move APITableNameInfoFrom.sDriverID     to sDriverIDFrom
53729>>>        Get piDbType                            to iDbType
53730>>>        Get pbRecnum                            to bRecnum
53731>>>        Get pbToANSI                            to bToANSI
53732>>>        Get pbCopyData                          to bCopyData
53733>>>        Get pbApiTableUpdateAuto                to bApiTableUpdateAuto
53734>>>        Get pbCompareDate_DateTime              to bCompareDate_DateTime
53735>>>        Get pbCompareIndexAscending             to bCompareIndexAscending
53736>>>        Get pbCompareIndexUppercase             to bCompareIndexUppercase
53737>>>        Get pbUseConnectionID                   to bUseConnectionID
53738>>>
53738>>>        Move APITableNameInfoFrom.iTableNumber  to hTable
53739>>>        Set Private.phCurrentTable              to hTable
53740>>>        Get _UtilTableExists  hTable             to bTableExists
53741>>>
53741>>>        If (ghoProgressBar <> 0) Begin
53743>>>            Send DoAdvance of ghoProgressBar
53744>>>            Set TableName_Text of ghoStatusPanel to ("Checking Table:" * "Number:" * String(hTable) * String(APITableNameInfoFrom.sLogicalName))
53745>>>            Set Message_Text   of ghoStatusPanel to ""
53746>>>            Set Action_Text    of ghoStatusPanel to ""
53747>>>        End
53747>>>>
53747>>>
53747>>>        Move APITableNameInfoFrom.bIsAlias      to bIsAliasFrom
53748>>>        Move APITableNameInfoFrom.bIsSQL        to bIsSQLTableFrom
53749>>>        Get _UtilTableIsSql hTable               to bIsSQLTableTo
53750>>>        Get UtilDriverFromTableNumber hTable    to sDriverIDTo
53751>>>        Move True                               to APITableFrom.bFromTable
53752>>>        Move hTable                             to APITableFrom.hTable
53753>>>        Move APITableNameInfoFrom               to APITableFrom.ApiTableInfo
53754>>>        Move aColumnsFrom                       to APITableFrom.aApiColumns
53755>>>        Move aIndexesFrom                       to APITableFrom.aApiIndexes
53756>>>        Move aRelationsFrom                     to APITableFrom.aApiRelations
53757>>>
53757>>>        If (bIsSQLTableFrom = True and bIsSQLTableTo = False) Begin
53759>>>            Get SqlUtilCheckIfTableHandleExists hTable sDriverIDFrom to bOk
53760>>>            If (bOk = True) Begin
53762>>>                Get ApiTableAttachToSql hTable True to bOk
53763>>>                Function_Return bOk
53764>>>            End 
53764>>>>
53764>>>        End
53764>>>>
53764>>>
53764>>>        If (bTableExists = True) Begin
53766>>>            If (bIsSQLTableTo = True) Begin
53768>>>                Get _UtilDeleteCacheFile APITableFrom.ApiTableInfo.sLogicalName to bOk
53769>>>            End
53769>>>>
53769>>>
53769>>>            Get OpenTableExclusive hTable to bOpened
53770>>>            If (bOpened = False) Begin
53772>>>                Send UserError DFERR_PROGRAM ("Could not open table number:" * String(hTable) * "Table could not be updated.")
53773>>>                Function_Return False
53774>>>            End
53774>>>>
53774>>>            Get UtilTableStructFill hTable False                                                        to APITableTo
53775>>>            Get UtilColumnCombineFromAndToArrays   APITableFrom.aApiColumns   APITableTo.aApiColumns    to aAPIColumnCompare
53776>>>            Get UtilIndexCombineFromAndToArrays    APITableFrom.aApiIndexes   APITableTo.aApiIndexes    to aAPIIndexCompare
53777>>>            Get UtilRelationCombineFromAndToArrays APITableFrom.aApiRelations APITableTo.aApiRelations  to aAPIRelationCompare
53778>>>        End
53778>>>>
53778>>>
53778>>>        Move False to Err
53779>>>        Case Begin
53779>>>            // Alias table:
53779>>>            Case (bIsAliasFrom = True)
53781>>>                Get _UtilTableCheckChangeFilelistNames APITableNameInfoFrom to bOk
53782>>>                Case Break
53783>>>
53783>>>            // New Table:
53783>>>            Case (bTableExists = False)
53786>>>                Get ApiTableCreate      hTable APITableNameInfoFrom.sRootName APITableNameInfoFrom.sDisplayName APITableNameInfoFrom.sLogicalName bUseConnectionID bToANSI bRecnum aColumnsFrom to bOk
53787>>>                //LR 20191112 Begin: Make file a system file if bIsSystemFile = True
53787>>>                If (APITableNameInfoFrom.bIsSystemFile) Begin
53789>>>                    Get ApiTableChangeAttribute hTable DF_FILE_IS_SYSTEM_FILE True to bOK
53790>>>                End                                                                 
53790>>>>
53790>>>                Get UtilIndexesUpdate   hTable bIsSQLTableFrom bIsSQLTableTo APITableFrom.aApiIndexes APITableTo.aApiIndexes bCompareIndexUppercase bCompareIndexAscending  to bOk
53791>>>                Get UtilRelationsUpdate hTable APITableFrom.aApiRelations APITableTo.aApiRelations to bOk
53792>>>                Case Break
53793>>>
53793>>>            // Update table:
53793>>>            Case (bTableExists = True)
53796>>>                Get UtilTableCompare APITableFrom APITableTo False (&bFilelistError) to bIsSame
53797>>>                If (bIsSame = True) Begin
53799>>>                    Case Break
53800>>>                End
53800>>>>
53800>>>                If (bFilelistError = True) Begin
53802>>>                    Get ApiTableRename hTable APITableNameInfoFrom.sRootName APITableNameInfoFrom.sDisplayName APITableNameInfoFrom.sLogicalName to bOk
53803>>>                    If (bOk = False) Begin
53805>>>                        Case Break
53806>>>                    End
53806>>>>
53806>>>                End
53806>>>>
53806>>>
53806>>>                If (ghoProgressBar <> 0) Begin
53808>>>                    Send DoAdvance of ghoProgressBar
53809>>>                    Set TableName_Text of ghoStatusPanel to ("Updating Table:" * "Number:" * String(hTable) * String(APITableNameInfoFrom.sLogicalName))
53810>>>                End
53810>>>>
53810>>>
53810>>>                // Columns:
53810>>>                Move True to bOk
53811>>>                Get UtilColumnsCompare sDriverIDFrom sDriverIDTo bIsSQLTableFrom bIsSQLTableTo aAPIColumnCompare bCompareDate_DateTime to bIsSame
53812>>>                If (bIsSame = False) Begin
53814>>>                    Get ApiColumnsUpdate sDriverIDFrom hTable bIsSQLTableFrom APITableFrom.aApiColumns APITableTo.aApiColumns bCompareDate_DateTime to bOk
53815>>>                End
53815>>>>
53815>>>                If (bOk = False) Begin
53817>>>                    Case Break
53818>>>                End
53818>>>>
53818>>>
53818>>>                // Indexes:
53818>>>                Get UtilIndexesCompare bIsSQLTableFrom bIsSQLTableTo aAPIIndexCompare bCompareIndexUppercase bCompareIndexAscending to bIsSame
53819>>>                If (bIsSame = False) Begin
53821>>>                    Get UtilIndexesUpdate hTable bIsSQLTableFrom bIsSQLTableTo APITableFrom.aApiIndexes APITableTo.aApiIndexes bCompareIndexUppercase bCompareIndexAscending  to bOk
53822>>>                End
53822>>>>
53822>>>
53822>>>                // Relations:
53822>>>                Get UtilRelationsCompare hTable aAPIRelationCompare to bIsSame
53823>>>                If (bIsSame = False) Begin
53825>>>                    Get UtilRelationsUpdate hTable APITableFrom.aApiRelations APITableTo.aApiRelations to bOk
53826>>>                    If (bOk = False) Begin
53828>>>                        Case Break
53829>>>                    End
53829>>>>
53829>>>                End
53829>>>>
53829>>>
53829>>>                Case Break
53830>>>
53830>>>            Case Else
53830>>>                Error DFERR_PROGRAM "Unknown Case structure exit in Function ApiTableUpdate"
53831>>>>
53831>>>                Move False to bOk
53832>>>        Case End
53832>>>        
53832>>>        // Note: If the from table was SQL; we should either connect to an existing SQL to table,
53832>>>        // or convert an embedded table to SQL
53832>>>        If (bIsSQLTableFrom = True and bIsSQLTableTo = False) Begin
53834>>>            Get SqlUtilCheckIfTableHandleExists hTable sDriverIDFrom to bOk
53835>>>            If (bOk = False) Begin
53837>>>                Get ApiTableConvertToSql_Ex hTable sDriverIDFrom bUseConnectionID bToANSI bRecnum bCopyData to bOK
53838>>>            End
53838>>>>
53838>>>        End
53838>>>>
53838>>>        Else If (bIsSQLTableFrom = False and bIsSQLTableTo = True) Begin
53841>>>            Get SqlTableConvertToEmbedded hTable True to bOk
53842>>>        End
53842>>>>
53842>>>        
53842>>>        // Filelist Names:
53842>>>        Get _UtilTableCheckChangeFilelistNames APITableNameInfoFrom to bOk
53843>>>        Close hTable
53844>>>        Set TableName_Text of ghoStatusPanel to ""
53845>>>
53845>>>        Function_Return (bOK = True)
53846>>>    End_Function
53847>>>
53847>>>    // * Dummy function for the Studio's Code Explorer *
53847>>>    Function API_COLUMN_FUNCTIONS Returns Boolean
53849>>>        Function_Return False
53850>>>    End_Function
53851>>>
53851>>>    // Adds a column name to the passed table number.
53851>>>    Function ApiColumnAdd Handle hTable String sFieldName Integer iType Integer iLength Integer iPrec Boolean bInitVal String sColVal Returns Boolean
53853>>>        Integer iColumn iCount iFile iPrecision iLastErr
53853>>>        Boolean bExists bOK bInitializeValue bRetval
53853>>>        String sDataPath sDdSrcPath sTableName sColumnValue sDriverID
53853>>>
53853>>>        Get UtilColumnExists hTable sFieldName to bExists
53854>>>        If (bExists = True) Begin
53856>>>            Function_Return False
53857>>>        End
53857>>>>
53857>>>
53857>>>        Move False to Err
53858>>>        If (num_arguments > 4) Begin
53860>>>            Move iPrec to iPrecision
53861>>>        End
53861>>>>
53861>>>        If (num_arguments > 6) Begin
53863>>>            Move bInitVal to bInitializeValue
53864>>>            Move sColVal  to sColumnValue
53865>>>        End
53865>>>>
53865>>>        If (iType < -1490) Begin
53867>>>            Move (iType + 1500) to iType
53868>>>        End
53868>>>>
53868>>>
53868>>>        Move hTable to iFile
53869>>>        Get psDriverID to sDriverID
53870>>>        Get AutoConnectionIDLogin to bOK
53871>>>        Move False to Err
53872>>>        Move LastErr to iLastErr
53873>>>        Get OpenTableExclusive iFile to bOK
53874>>>        Set Private.phCurrentTable to hTable
53875>>>
53875>>>        Structure_Start iFile sDriverID
53876>>>            Move 0 to iColumn
53877>>>            Set Private.piCurrentField to iColumn
53878>>>            Create_Field hTable At iColumn
53879>>>            Set_Attribute DF_FIELD_NAME      of iFile iColumn to sFieldName
53882>>>            Set_Attribute DF_FIELD_TYPE      of iFile iColumn to iType
53885>>>            Set_Attribute DF_FIELD_LENGTH    of iFile iColumn to (iLength + iPrecision)
53888>>>            Set_Attribute DF_FIELD_PRECISION of iFile iColumn to iPrecision
53891>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
53892>>>        Structure_End iFile DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
53894>>>
53894>>>        Set Action_Text of ghoStatusPanel to ""
53895>>>
53895>>>        // If in development environment; create .fd file:
53895>>>        Open hTable
53897>>>        Get psDdSrcPath  of (phoWorkspace(ghoApplication)) to sDDSrcPath
53898>>>        Get CountOfPaths of (phoWorkspace(ghoApplication)) sDDSrcPath to iCount
53899>>>        If (iCount > 1) Begin
53901>>>            Get PathAtIndex of (phoWorkspace(ghoApplication)) sDDSrcPath 1 to sDDSrcPath
53902>>>        End
53902>>>>
53902>>>        Get vFolderExists sDDSrcPath to bExists
53903>>>        If (bExists = True) Begin
53905>>>            Get vFolderFormat sDDSrcPath to sDDSrcPath
53906>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sTableName
53909>>>            Get _TableNameOnly sTableName to sTableName
53910>>>            Output_Aux_File DF_AUX_FILE_FD for hTable to (sDDSrcPath + sTableName + ".fd")
53912>>>        End
53912>>>>
53912>>>        If (sDriverID = DATAFLEX_ID) Begin  // We only want a tag if DataFlex embedded db
53914>>>            Get psDataPath  of (phoWorkspace(ghoApplication)) to sDataPath
53915>>>            Get CountOfPaths of (phoWorkspace(ghoApplication)) sDataPath to iCount
53916>>>            If (iCount > 1) Begin
53918>>>                Get PathAtIndex of (phoWorkspace(ghoApplication)) sDataPath 1 to sDataPath
53919>>>            End
53919>>>>
53919>>>            Get vFolderFormat sDataPath to sDataPath
53920>>>            // Add the new column name to the .tag filen (if it doesn't exist):
53920>>>            // The following line should not be necexxary for the DataFlex driver. (Thank you, Hans van de Laar)
53920>>>            //Get UtilUpdateTAGFile (sDataPath + sTableName + ".tag") sFieldName to bOK
53920>>>        End
53920>>>>
53920>>>        // Check for a default value
53920>>>        If (bInitializeValue = True and sColumnValue <> "" and Err = False) Begin
53922>>>            Get ApiColumnUpdateValue hTable sFieldName sColumnValue to bRetval
53923>>>        End
53923>>>>
53923>>>        Close hTable
53924>>>
53924>>>        Function_Return (Err = False)
53925>>>    End_Function
53926>>>
53926>>>    // Adds a column name to the passed table number.
53926>>>    Function ApiColumnInsert String sDriverIDFrom Handle hTable Integer iColumn String sFieldName Integer iType Integer iLength Integer iPrec Boolean bIsSQLType Returns Boolean
53928>>>        Integer iCount iFile iPrecision iNumberOfFields iDbType
53928>>>        Boolean bExists bOK bIsDateType bIsSQLTypeTo
53928>>>        String sDdSrcPath sTableName
53928>>>
53928>>>        Get UtilColumnExists hTable sFieldName to bExists
53929>>>        Move False to Err
53930>>>        If (bExists = True) Begin
53932>>>            Function_Return False
53933>>>        End
53933>>>>
53933>>>        If (num_arguments > 4) Begin
53935>>>            Move iPrec to iPrecision
53936>>>        End
53936>>>>
53936>>>        If (iType < -1490) Begin
53938>>>            Move (iType + 1500) to iType
53939>>>        End
53939>>>>
53939>>>
53939>>>        Get AutoConnectionIDLogin to bOK
53940>>>        Move False to Err
53941>>>        Get _UtilTableIsSql hTable to bIsSQLTypeTo
53942>>>        // If one of the two tables are SQL and the other Embedded we need to "translate"
53942>>>        // data types between Embedded and SQL, else we can't compare the data types. 
53942>>>        Get piDbType to iDbType
53943>>>        If (bIsSQLTypeTo = False) Begin
53945>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iType iLength to iType
53946>>>            If (iType = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
53948>>>                Move DF_DATE to iType
53949>>>            End
53949>>>>
53949>>>        End
53949>>>>
53949>>>
53949>>>        // Structure_start will change the value of hTable...
53949>>>        Move hTable to iFile
53950>>>        Get OpenTableExclusive iFile to bOK
53951>>>        If (bOK = False) Begin
53953>>>            Function_Return False
53954>>>        End
53954>>>>
53954>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of iFile to iNumberOfFields
53957>>>
53957>>>        // If the passed column number is higher than the current number of fields
53957>>>        // in the table, this means we should _not_ insert a field but rather add
53957>>>        // a new field to the end:
53957>>>        If (iColumn > iNumberOfFields) Begin
53959>>>            Move 0 to iColumn
53960>>>        End
53960>>>>
53960>>>
53960>>>        Set Private.phCurrentTable to hTable
53961>>>        Set Private.piCurrentField to iColumn
53962>>>
53962>>>        Structure_Start iFile
53963>>>            Create_Field iFile At iColumn
53964>>>            Set_Attribute DF_FIELD_NAME            of iFile iColumn to sFieldName
53967>>>            If (bIsSQLTypeTo = False) Begin
53969>>>                Set_Attribute DF_FIELD_TYPE        of iFile iColumn to iType
53972>>>            End
53972>>>>
53972>>>            Else Begin
53973>>>                Set_Attribute DF_FIELD_NATIVE_TYPE of iFile iColumn to iType
53976>>>            End
53976>>>>
53976>>>            Get UtilColumnIsDateType iType bIsSQLTypeTo to bIsDateType
53977>>>            If (bIsDateType = False) Begin
53979>>>                Set_Attribute DF_FIELD_LENGTH       of iFile iColumn to (iLength + iPrecision)
53982>>>                Set_Attribute DF_FIELD_PRECISION    of iFile iColumn to iPrecision
53985>>>            End
53985>>>>
53985>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
53986>>>        Structure_End iFile DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
53988>>>
53988>>>        Set Action_Text of ghoStatusPanel to ""
53989>>>        // If in development environment; create .fd file:
53989>>>        Open hTable
53991>>>        Get psDdSrcPath of (phoWorkspace(ghoApplication)) to sDDSrcPath
53992>>>        Get CountOfPaths of (phoWorkspace(ghoApplication)) sDDSrcPath to iCount
53993>>>        If (iCount > 1) Begin
53995>>>            Get PathAtIndex of (phoWorkspace(ghoApplication)) sDDSrcPath 1 to sDDSrcPath
53996>>>        End
53996>>>>
53996>>>        Get vFolderExists sDDSrcPath to bExists
53997>>>        If (bExists = True) Begin
53999>>>            Get vFolderFormat sDDSrcPath to sDDSrcPath
54000>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sTableName
54003>>>            Get _TableNameOnly sTableName to sTableName
54004>>>            Output_Aux_File DF_AUX_FILE_FD for hTable to (sDDSrcPath + sTableName + ".fd")
54006>>>        End
54006>>>>
54006>>>
54006>>>        // Check for a default value
54006>>>        Close hTable
54007>>>
54007>>>        Function_Return (Err = False)
54008>>>    End_Function
54009>>>
54009>>>    // To update all records for a table column with a fixed value.
54009>>>    Function ApiColumnUpdateValue Handle hTable String sFieldName String sColumnValue Returns Boolean
54011>>>        Integer iRecs iCurrErr iField iRecord
54011>>>        Boolean bRetval bOpen
54011>>>
54011>>>        Move 0 to iRecs
54012>>>        Move False to bRetval
54013>>>        Move Err to iCurrErr
54014>>>        Move False to Err
54015>>>
54015>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
54018>>>        If (bOpen = False) Begin
54020>>>            Open hTable
54022>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
54025>>>            If (bOpen = False) Begin
54027>>>                Function_Return bRetval
54028>>>            End
54028>>>>
54028>>>        End
54028>>>>
54028>>>
54028>>>        Field_Map hTable sFieldName to iField
54030>>>        If (iField <> 0) Begin
54032>>>            Set Private.phCurrentTable to hTable
54033>>>            Set Private.piCurrentField to iField
54034>>>            Clear hTable
54035>>>            Repeat
54035>>>>
54035>>>                Vfind hTable 0 GT
54037>>>                If (Found) Begin
54039>>>                    If (ghoStatusPanel <> 0) Begin
54041>>>                        Get_Field_Value hTable 0 to iRecord
54044>>>                        Send Update_StatusPanel of ghoStatusPanel (CS_DUF_UpdateVersion * String(iRecord))
54045>>>                    End
54045>>>>
54045>>>                    Reread hTable
54049>>>                        Set_Field_Value hTable iField to sColumnValue
54052>>>                        SaveRecord hTable
54053>>>                    Unlock
54054>>>>
54054>>>                End
54054>>>>
54054>>>           Until (not(Found))
54056>>>        End
54056>>>>
54056>>>
54056>>>        Move (Err = False) to bRetval
54057>>>        Move iCurrErr to Err
54058>>>
54058>>>        Function_Return bRetval
54059>>>    End_Function
54060>>>
54060>>>    // Note: This can only be used from within a Structure_Start/End construct.
54060>>>    Function ApiColumnsAddToTable Handle hTable tAPIColumn[] aColumns Boolean bCreating Returns Boolean
54062>>>        Integer iCount iSize iColumn iType iDataFlexType iIndex iDbType
54062>>>        Boolean bFieldExists bNativeType bIsSQLDriver bIsDAWSqlDriver bIsSqlTable bRecnumTable bIsOpen bIsDateType
54062>>>        String sFieldName sDriverID sTableName sDefaultValue
54062>>>
54062>>>        Get psDriverID to sDriverID
54063>>>        Get piDbType to iDbType
54064>>>        Get UtilTableHandleToString hTable to sTableName
54065>>>        Get IsSQLDriver    sDriverID to bIsSQLDriver
54066>>>        Get IsDAWSQLDriver sDriverID to bIsDAWSqlDriver
54067>>>        Get _UtilTableIsSql hTable to bIsSqlTable
54068>>>        If (bIsSqlTable = False and bCreating = True and bIsSQLDriver = True) Begin
54070>>>            Move True to bIsSqlTable
54071>>>        End
54071>>>>
54071>>>        Move False to bIsOpen
54072>>>        If (hTable > 0) Begin
54074>>>            Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
54077>>>        End
54077>>>>
54077>>>        If (bIsOpen = True) Begin
54079>>>            Get_Attribute DF_FILE_RECNUM_TABLE of hTable to bRecnumTable
54082>>>        End
54082>>>>
54082>>>        Else Begin
54083>>>            Get pbRecnum to bRecnumTable
54084>>>        End
54084>>>>
54084>>>
54084>>>        Move False to Err
54085>>>        Move (SizeOfArray(aColumns)) to iSize
54086>>>        Decrement iSize
54087>>>        for iCount from 0 to iSize
54093>>>>
54093>>>            Move aColumns[iCount].sFieldName to sFieldName
54094>>>            If (hTable > 0) Begin
54096>>>                Set Error_Report_Mode to DUF_ERROR_NO_REPORT
54097>>>                Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
54098>>>                Get_Attribute DF_FIELD_NAME of hTable iColumn to sFieldName
54101>>>                Move (Trim(sFieldName) <> "") to bFieldExists
54102>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
54103>>>                Send Trap_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
54104>>>            End
54104>>>>
54104>>>            Else Begin
54105>>>                Move False to bFieldExists
54106>>>            End
54106>>>>
54106>>>
54106>>>            If (bFieldExists = False) Begin
54108>>>                Move 0 to iColumn
54109>>>                Create_Field hTable At iColumn
54110>>>            End
54110>>>>
54110>>>            Else Begin
54111>>>                Move iCount to iColumn
54112>>>            End
54112>>>>
54112>>>
54112>>>            Set Private.piCurrentField to iColumn
54113>>>
54113>>>            Move                                        iColumn to aColumns[iCount].iFieldNumber
54114>>>            Set_Attribute DF_FIELD_NAME       of hTable iColumn to aColumns[iCount].sFieldName
54117>>>
54117>>>            Move aColumns[iCount].iType to iType
54118>>>            Move (not(iType < -1490)) to bNativeType
54119>>>            If (iType < -1490) Begin
54121>>>                Move (iType + 1500) to iType
54122>>>            End
54122>>>>
54122>>>
54122>>>            If (bIsSqlTable = True) Begin
54124>>>                If (aColumns[iCount].bIsSQLType = True) Begin
54126>>>                    Get UtilSQLColumnTypeToDataFlexType sDriverID iDbType iType aColumns[iCount].iLength to iDataFlexType
54127>>>                    Set_Attribute DF_FIELD_TYPE          of hTable iColumn to iDataFlexType
54130>>>                    Set_Attribute DF_FIELD_NATIVE_TYPE   of hTable iColumn to iType
54133>>>                    Set_Attribute DF_FIELD_NULL_ALLOWED  of hTable iColumn to aColumns[iCount].bAllowNULL
54136>>>
54136>>>                    Move aColumns[iCount].sDefaultValue                    to sDefaultValue
54137>>>                    If (iDataFlexType = DF_BCD and Left(String(sDefaultValue), 1) <> "[") Begin
54139>>>                        Move ("[" + String(sDefaultValue) + "]") to sDefaultValue
54140>>>                    End
54140>>>>
54140>>>                    Set_Attribute DF_FIELD_DEFAULT_VALUE of hTable iColumn to sDefaultValue
54143>>>
54143>>>                End
54143>>>>
54143>>>                Else Begin
54144>>>                    Set_Attribute DF_FIELD_TYPE        of hTable iColumn to iType
54147>>>                End
54147>>>>
54147>>>            End
54147>>>>
54147>>>            Else Begin
54148>>>                If (bCreating = False) Begin
54150>>>                    Get UtilSQLColumnTypeToDataFlexType sDriverID iDbType iType aColumns[iCount].iLength to iType
54151>>>                    If (iType = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
54153>>>                        Move DF_DATE to iType
54154>>>                    End
54154>>>>
54154>>>                End
54154>>>>
54154>>>                Set_Attribute DF_FIELD_TYPE of hTable iColumn to iType
54157>>>            End
54157>>>>
54157>>>
54157>>>            Get UtilColumnIsDateType iType bIsSqlTable to bIsDateType
54158>>>            If (bIsDateType = False) Begin
54160>>>                Set_Attribute DF_FIELD_LENGTH     of hTable iColumn to aColumns[iCount].iLength
54163>>>                Set_Attribute DF_FIELD_PRECISION  of hTable iColumn to aColumns[iCount].iPrecision
54166>>>            End
54166>>>>
54166>>>
54166>>>            If (aColumns[iCount].iOptions iand C_tAPIColumn_Identity) Begin
54168>>>                Move 0 to iIndex
54169>>>                Create_Index hTable at iIndex
54170>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to 1
54173>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD   of hTable iIndex 1 to iColumn
54176>>>                Set_Attribute DF_FILE_PRIMARY_INDEX    of hTable iIndex to 1
54179>>>
54179>>>                // If we have an identity table - we must create a primary_key table.
54179>>>                If (bIsSqlTable = True) Begin
54181>>>                        Set_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable iIndex to True
54184>>>                        Set_Attribute DF_FIELD_IS_IDENTITY of hTable iColumn to True
54187>>>                End
54187>>>>
54187>>>            End
54187>>>>
54187>>>        Loop
54188>>>>
54188>>>
54188>>>        Function_Return (Err = False)
54189>>>    End_Function
54190>>>
54190>>>    // Changes a field type, length and precision for the passed table number and field name
54190>>>    Function ApiColumnChange Handle hTable String sFieldNameFrom Integer iTypeFrom Integer iLengthFrom Integer iPrec Returns Boolean
54192>>>        Integer iColumn iPrecFrom iTypeTo iLengthTo iPrecTo
54192>>>        Boolean bOK bIsSqlTable
54192>>>        String sFieldNameTo
54192>>>
54192>>>        If (num_arguments > 4) Begin
54194>>>            Move iPrec to iPrecFrom
54195>>>        End
54195>>>>
54195>>>        If (iTypeFrom < -1490) Begin
54197>>>            Move (iTypeFrom + 1500) to iTypeFrom
54198>>>        End
54198>>>>
54198>>>
54198>>>        Get AutoConnectionIDLogin to bOK
54199>>>        Move False to Err
54200>>>        Get OpenTableExclusive hTable to bOK
54201>>>        If (bOK = False) Begin
54203>>>            Function_Return False
54204>>>        End
54204>>>>
54204>>>
54204>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
54205>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
54206>>>        Field_Map hTable sFieldNameFrom to iColumn
54208>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
54209>>>        Send Trap_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
54210>>>        If (Err = True) Begin
54212>>>            Function_Return False
54213>>>        End
54213>>>>
54213>>>
54213>>>        Get_Attribute DF_FIELD_NAME                  of hTable iColumn to sFieldNameTo
54216>>>        Get _UtilTableIsSql hTable to bIsSqlTable
54217>>>        If (bIsSqlTable = False) Begin
54219>>>            Get_Attribute DF_FIELD_TYPE              of hTable iColumn to iTypeTo
54222>>>        End
54222>>>>
54222>>>        Else Begin
54223>>>            Get_Attribute DF_FIELD_NATIVE_TYPE       of hTable iColumn to iTypeTo
54226>>>        End
54226>>>>
54226>>>        // Let the driver decide the other values;
54226>>>        Get_Attribute DF_FIELD_LENGTH                of hTable iColumn to iLengthTo
54229>>>        Get_Attribute DF_FIELD_PRECISION             of hTable iColumn to iPrecTo
54232>>>
54232>>>        If (sFieldNameFrom = sFieldNameTo and iTypeFrom = iTypeTo and iLengthFrom = iLengthTo and iPrecFrom = iPrecTo) Begin
54234>>>            Function_Return False
54235>>>        End
54235>>>>
54235>>>
54235>>>        Set Private.phCurrentTable to hTable
54236>>>        Set Private.piCurrentField to iColumn
54237>>>
54237>>>        Structure_Start hTable
54238>>>            Set_Attribute DF_FIELD_NAME              of hTable iColumn to sFieldNameFrom
54241>>>//            If (bIsSqlTable = False) Begin
54241>>>                Set_Attribute DF_FIELD_TYPE          of hTable iColumn to iTypeFrom
54244>>>//            End
54244>>>//            Else Begin
54244>>>//                Set_Attribute DF_FIELD_TYPE          of hTable iColumn to iTypeFrom
54244>>>//                Set_Attribute DF_FIELD_NATIVE_TYPE   of hTable iColumn to iTypeFrom
54244>>>//            End
54244>>>            Set_Attribute DF_FIELD_LENGTH            of hTable iColumn to (iLengthFrom + iPrecFrom)
54247>>>            Set_Attribute DF_FIELD_PRECISION         of hTable iColumn to iPrecFrom
54250>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
54251>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54253>>>
54253>>>        Set Action_Text of ghoStatusPanel to ""
54254>>>        Function_Return (Err = False)
54255>>>    End_Function
54256>>>
54256>>>    // Changes a field type, length and precision for the passed table number and field name
54256>>>    Function ApiColumnChangeByColumnNumber String sDriverIDFrom Handle hTable Boolean bIsSQLTableFrom Boolean bIsSQLTableTo String sFieldNameFrom Integer iColumn Integer iTypeFrom Integer iLengthFrom Integer iPrec Integer iOpt Returns Boolean
54258>>>        Integer iPrecFrom iTypeTo iLengthTo iPrecTo iDbType iOptionFrom iOptionTo iDataFlexType iIndex
54258>>>        Boolean bOK bCompareDate_DateTime bSkip bRecnumTable bIsSameDataType
54258>>>        String sFieldNameTo sDriverIDTo
54258>>>        tColumnType ColumnType
54258>>>        tColumnType ColumnType
54258>>>
54258>>>        Get pbCompareDate_DateTime to bCompareDate_DateTime
54259>>>        Get piDbType to iDbType
54260>>>        If (num_arguments > 4) Begin
54262>>>            Move iPrec to iPrecFrom
54263>>>            Move iOpt  to iOptionFrom
54264>>>        End
54264>>>>
54264>>>        If (iTypeFrom < -1490) Begin
54266>>>            Move (iTypeFrom + 1500) to iTypeFrom
54267>>>        End
54267>>>>
54267>>>
54267>>>        Get AutoConnectionIDLogin to bOK
54268>>>        Move False to Err
54269>>>        Close hTable
54270>>>        Get OpenTableExclusive hTable to bOK
54271>>>        If (bOK = False) Begin
54273>>>            Function_Return False
54274>>>        End
54274>>>>
54274>>>
54274>>>        Get_Attribute DF_FILE_DRIVER                of hTable         to sDriverIDTo
54277>>>        Get_Attribute DF_FILE_RECNUM_TABLE          of hTable         to bRecnumTable
54280>>>        Get UtilSQLColumnTypeToDataFlexType sDriverIDTo iDbType iTypeTo iLengthTo to iDataFlexType
54281>>>        If (iDataFlexType = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
54283>>>            Move DF_DATE to iDataFlexType
54284>>>        End
54284>>>>
54284>>>        Get_Attribute DF_FIELD_NAME                 of hTable iColumn to sFieldNameTo
54287>>>
54287>>>        If (bIsSQLTableTo = True) Begin
54289>>>                Get_Attribute DF_FIELD_NATIVE_TYPE  of hTable iColumn to iTypeTo
54292>>>        End
54292>>>>
54292>>>        Else Begin
54293>>>            Get_Attribute DF_FIELD_TYPE             of hTable iColumn to iTypeTo
54296>>>        End
54296>>>>
54296>>>
54296>>>        Get_Attribute DF_FIELD_LENGTH               of hTable iColumn to iLengthTo
54299>>>        Get_Attribute DF_FIELD_PRECISION            of hTable iColumn to iPrecTo
54302>>>            Get_Attribute DF_FIELD_IS_IDENTITY      of hTable iColumn to iOptionTo
54305>>>
54305>>>        // If one of the two tables are SQL and the other Embedded we need to "translate"
54305>>>        // data types between Embedded and SQL, else we can't compare the data types.
54305>>>        If (bIsSQLTableFrom = True and bIsSQLTableTo = False) Begin
54307>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iTypeFrom iLengthFrom to iTypeTo
54308>>>            If (iTypeTo = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
54310>>>                Move DF_DATE to iTypeTo  
54311>>>            End
54311>>>>
54311>>>        End
54311>>>>
54311>>>        Else If (bIsSQLTableFrom = False and bIsSQLTableTo = True) Begin
54314>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDTo   iDbType iTypeTo   iLengthTo   to iTypeFrom
54315>>>        End
54315>>>>
54315>>>        Move (iTypeFrom = iTypeTo) to bIsSameDataType
54316>>>
54316>>>        If (bCompareDate_DateTime = False) Begin
54318>>>            Move ((iTypeFrom = SQL_TYPE_DATE or iTypeFrom = SQL_TYPE_TIME or iTypeFrom = SQL_TYPE_TIMESTAMP) and (iTypeTo = SQL_TYPE_DATE or iTypeTo = SQL_TYPE_TIME or iTypeTo = SQL_TYPE_TIMESTAMP)) to bSkip
54319>>>            If (bSkip = True) Begin
54321>>>                If (sFieldNameFrom = sFieldNameTo and iLengthFrom = iLengthTo and iPrecFrom = iPrecTo and iOptionFrom = iOptionTo) Begin
54323>>>                    Function_Return True
54324>>>                End
54324>>>>
54324>>>            End
54324>>>>
54324>>>        End
54324>>>>
54324>>>        Else If (sFieldNameFrom = sFieldNameTo and iTypeFrom = iTypeTo and iLengthFrom = iLengthTo and iPrecFrom = iPrecTo and iOptionFrom = iOptionTo) Begin
54327>>>            Function_Return True
54328>>>        End
54328>>>>
54328>>>
54328>>>        Set Private.phCurrentTable to hTable
54329>>>        Set Private.piCurrentField to iColumn
54330>>>
54330>>>        Structure_Start hTable
54331>>>            If (sFieldNameFrom <> sFieldNameTo) Begin
54333>>>                Set_Attribute DF_FIELD_NAME             of hTable iColumn to sFieldNameFrom
54336>>>            End
54336>>>>
54336>>>
54336>>>            If (bIsSameDataType = False) Begin
54338>>>                Set_Attribute DF_FIELD_TYPE             of hTable iColumn to iDataFlexType
54341>>>                If (bIsSQLTableTo = True) Begin
54343>>>                        Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to iTypeFrom
54346>>>                End
54346>>>>
54346>>>            End
54346>>>>
54346>>>
54346>>>            If (iLengthFrom <> iLengthTo) Begin
54348>>>                Set_Attribute DF_FIELD_LENGTH           of hTable iColumn to iLengthFrom
54351>>>            End
54351>>>>
54351>>>            If (iPrecFrom <> iPrecTo) Begin
54353>>>                Set_Attribute DF_FIELD_PRECISION        of hTable iColumn to iPrecFrom
54356>>>            End
54356>>>>
54356>>>
54356>>>            If (bIsSQLTableTo = True and iOptionFrom =  C_tAPIColumn_Identity and iOptionTo <> C_tAPIColumn_Identity) Begin
54358>>>                // Can't set a recnum table to "DF_FIELD_IS_IDENTITY"
54358>>>                If (bRecnumTable = True) Begin
54360>>>                    Set_Attribute DF_FILE_RECNUM_TABLE  of hTable to False
54363>>>                End
54363>>>>
54363>>>
54363>>>                // We might need to create an index here.
54363>>>                // To be able to set the DF_FIELD_IS_IDENTITY the index must already exist, but it might not at this stage.
54363>>>                // This should probably fix that problem and if an adjustment is needed, it will get done with the normal
54363>>>                // index update checking logic.
54363>>>                Get_Attribute DF_FIELD_INDEX               of hTable iColumn to iIndex
54366>>>                If (iIndex = 0 and Uppercase(sFieldNameTo) <> "RECNUM") Begin
54368>>>                    Create_Index hTable At iIndex
54369>>>                    Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex   to 1
54372>>>                End
54372>>>>
54372>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD       of hTable iIndex 1 to iColumn
54375>>>                Set_Attribute DF_FILE_PRIMARY_INDEX        of hTable          to iIndex
54378>>>                    Set_Attribute DF_FIELD_IS_IDENTITY     of hTable iColumn  to True
54381>>>                If (bIsSQLTableTo = True) Begin
54383>>>                        Set_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable iIndex   to True
54386>>>                End
54386>>>>
54386>>>            End
54386>>>>
54386>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
54387>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54389>>>
54389>>>        Set Action_Text of ghoStatusPanel to ""
54390>>>        Function_Return (Err = False)
54391>>>    End_Function
54392>>>
54392>>>    Function ApiColumnChangeMainIndex Handle hTable Integer iIndex Integer iColumn Returns Boolean
54394>>>        Boolean bOK
54394>>>
54394>>>        Get AutoConnectionIDLogin to bOK
54395>>>        Move False to Err
54396>>>        Get OpenTableExclusive hTable to bOK
54397>>>        If (bOK = False) Begin
54399>>>            Function_Return False
54400>>>        End
54400>>>>
54400>>>
54400>>>        Structure_Start hTable
54401>>>            Set_Attribute DF_FIELD_INDEX of hTable iColumn to iIndex
54404>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
54405>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54407>>>
54407>>>        Set Action_Text of ghoStatusPanel to ""
54408>>>        Function_Return (Err = False)
54409>>>    End_Function
54410>>>
54410>>>    // To move an existing field to another position in a table.
54410>>>    Function ApiColumnMove Handle hTable Integer iOld Integer iNew Boolean bIsSQLType Integer iLength Integer iPrecision Returns Boolean
54412>>>        String sColumn sDriverID
54412>>>        Integer iType
54412>>>        Boolean bOK bIsDate
54412>>>
54412>>>        Close hTable
54413>>>        Get AutoConnectionIDLogin to bOK
54414>>>        Get OpenTableExclusive hTable to bOK
54415>>>        If (bOK = False) Begin
54417>>>            Function_Return False
54418>>>        End
54418>>>>
54418>>>
54418>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
54421>>>        If (sDriverID = DFBTRDRV_ID) Begin
54423>>>            Error DFERR_PROGRAM "Function 'ColumnMove' is not supported for the Pervasive database."
54424>>>>
54424>>>            Function_Return False
54425>>>        End
54425>>>>
54425>>>
54425>>>        Get_Attribute DF_FIELD_NAME of hTable iOld to sColumn
54428>>>        Get_Attribute DF_FIELD_TYPE of hTable iOld to iType
54431>>>        Get UtilColumnIsDateType iType bIsSQLType  to bIsDate
54432>>>
54432>>>        Set Private.phCurrentTable to hTable
54433>>>        Set Private.piCurrentField to iOld
54434>>>
54434>>>//        If (bIsDate = False) Begin
54434>>>//            Get_Attribute DF_FIELD_LENGTH    of hTable iOld to iLength
54434>>>//            Get_Attribute DF_FIELD_PRECISION of hTable iOld to iPrecision
54434>>>//        End
54434>>>//        Else Begin
54434>>>//            Move 6 to iLength
54434>>>//            Move 0 to iPrecision
54434>>>//        End
54434>>>
54434>>>        Move False to Err
54435>>>
54435>>>        Structure_Start hTable
54436>>>            Delete_Field hTable iOld
54437>>>            Create_Field hTable At iNew
54438>>>            Set_Attribute DF_FIELD_OLD_NUMBER of hTable iNew to iOld
54441>>>
54441>>>            Set_Attribute DF_FIELD_NAME of hTable iNew to sColumn
54444>>>            If (bIsSQLType = False) Begin
54446>>>                Set_Attribute DF_FIELD_TYPE of hTable iNew to iType
54449>>>            End
54449>>>>
54449>>>            Else Begin
54450>>>                Set_Attribute DF_FIELD_TYPE of hTable iNew to iType
54453>>>//                Set_Attribute DF_FIELD_NATIVE_TYPE of hTable iNew to iSQLType
54453>>>            End
54453>>>>
54453>>>
54453>>>            If (bIsDate = False) Begin
54455>>>                Set_Attribute DF_FIELD_LENGTH    of hTable iNew to iLength
54458>>>                Set_Attribute DF_FIELD_PRECISION of hTable iNew to iPrecision
54461>>>            End
54461>>>>
54461>>>
54461>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
54462>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54464>>>
54464>>>        Set Action_Text of ghoStatusPanel to ""
54465>>>        Function_Return (Err = False)
54466>>>    End_Function
54467>>>
54467>>>    // Deletes a column name for the passed table number (and column number).
54467>>>    Function ApiColumnRemove Handle hTable String sFieldName Returns Boolean
54469>>>        Integer iColumn
54469>>>        Boolean bOK
54469>>>
54469>>>        Get AutoConnectionIDLogin to bOK
54470>>>        Move False to Err
54471>>>        Close hTable
54472>>>        Get OpenTableExclusive hTable to bOK
54473>>>        If (bOK = False) Begin
54475>>>            Function_Return False
54476>>>        End
54476>>>>
54476>>>
54476>>>        If (not(Err)) Begin
54478>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
54479>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
54480>>>            Field_Map hTable sFieldName to iColumn
54482>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
54483>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
54484>>>            If (iColumn = 0) Begin
54486>>>                Move 0 to LastErr
54487>>>                Function_Return False
54488>>>            End
54488>>>>
54488>>>            Move False to Err
54489>>>
54489>>>            Set Private.phCurrentTable to hTable
54490>>>            Set Private.piCurrentField to iColumn
54491>>>
54491>>>            Structure_Start hTable
54492>>>                Delete_Field hTable iColumn
54493>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
54494>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54496>>>            Set Action_Text of ghoStatusPanel to ""
54497>>>        End
54497>>>>
54497>>>        Else Begin
54498>>>            Error DFERR_PROGRAM ("The table number:" * String(hTable) * "could not be opened exclusiv. This indicates the table is in use!")
54499>>>>
54499>>>        End
54499>>>>
54499>>>
54499>>>        Function_Return (Err = False)
54500>>>    End_Function
54501>>>
54501>>>    // Renames a field for the passed table number & old field name & new field name
54501>>>    // Returns True if no errors occured.
54501>>>    // Sample usage:
54501>>>    //   Get ColumnRename Quote.File_Number "ID#" "ID" to bOK
54501>>>    Function ApiColumnRename Integer hTable String sOldFieldName String sNewFieldName Returns Boolean
54503>>>        Integer iField
54503>>>        Boolean bOK bExists bIsOpen
54503>>>
54503>>>        Get UtilColumnExists hTable sNewFieldName to bExists
54504>>>        If (bExists = True) Begin
54506>>>            Function_Return False
54507>>>        End
54507>>>>
54507>>>
54507>>>        // Note: The Field_Map command does _not_ work if the table has been
54507>>>        //       opened exclusively, so we first open it in normal mode.
54507>>>        Close hTable
54508>>>        Open hTable
54510>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
54513>>>        If (bIsOpen = False) Begin
54515>>>            Function_Return False
54516>>>        End
54516>>>>
54516>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
54517>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
54518>>>        Field_Map hTable sOldFieldName to iField
54520>>>        Send Trap_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
54521>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
54522>>>
54522>>>        Get AutoConnectionIDLogin to bOK
54523>>>        Get OpenTableExclusive hTable to bOK
54524>>>        If (bOK = False) Begin
54526>>>            Function_Return False
54527>>>        End
54527>>>>
54527>>>
54527>>>        Move False to Err
54528>>>        Send Ignore_Error of Error_Object_Id DFERR_DUPLICATE_FIELDNAME
54529>>>        Set Private.phCurrentTable to hTable
54530>>>        Set Private.piCurrentField to iField
54531>>>
54531>>>        If (iField > 0) Begin
54533>>>            Structure_Start hTable
54534>>>                Set_Attribute DF_FIELD_NAME of hTable iField to sNewFieldName
54537>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
54538>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54540>>>        End
54540>>>>
54540>>>        Else Begin
54541>>>            Move 0 to LastErr
54542>>>            Move False to Err
54543>>>        End
54543>>>>
54543>>>
54543>>>        Set Action_Text of ghoStatusPanel to ""
54544>>>        Send Trap_Error of Error_Object_Id DFERR_DUPLICATE_FIELDNAME
54545>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
54546>>>
54546>>>        Function_Return (Err = False)
54547>>>    End_Function
54548>>>
54548>>>    Function UtilColumnsCheckForInserts Handle hTable tAPIColumnCompare[] aAPIColumnCompare Returns tAPIColumnCompare[]
54550>>>        tAPIColumnCompare[] aAPIColumnsToInsert
54550>>>        tAPIColumnCompare[] aAPIColumnsToInsert
54551>>>        Integer iSize iCount iItem iFieldTo iNumberOfFieldsTo iColumnNumber
54551>>>        Boolean bRenameField
54551>>>
54551>>>        Open hTable
54553>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
54554>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
54555>>>        Move (SizeOfArray(aAPIColumnCompare)) to iSize
54556>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumberOfFieldsTo
54559>>>        Move (iSize max iNumberOfFieldsTo) to iSize
54560>>>        Decrement iSize
54561>>>        for iCount from 0 to iSize
54567>>>>
54567>>>            If (Uppercase(aAPIColumnCompare[iCount].sFieldNameFrom) <> Uppercase(aAPIColumnCompare[iCount].sFieldNameTo)) Begin
54569>>>                Set Error_Report_Mode to DUF_ERROR_NO_REPORT
54570>>>                Send Ignore_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
54571>>>
54571>>>                Field_Map hTable aAPIColumnCompare[iCount].sFieldNameFrom to iFieldTo
54573>>>                If (aAPIColumnCompare[iCount].bExistsFrom = True and iFieldTo = 0) Begin
54575>>>                    Get UtilColumnExistsWithOtherNumber aAPIColumnCompare iCount to iColumnNumber
54576>>>                    Get UtilColumnShouldBeRenamed aAPIColumnCompare[iCount]      to bRenameField
54577>>>                    If (iColumnNumber = -1 and bRenameField = False) Begin
54579>>>                        Move aAPIColumnCompare[iCount].iFieldNumber     to aAPIColumnsToInsert[iItem].iFieldNumber
54580>>>                        Move aAPIColumnCompare[iCount].sFieldNameFrom   to aAPIColumnsToInsert[iItem].sFieldNameFrom
54581>>>                        Move aAPIColumnCompare[iCount].iTypeFrom        to aAPIColumnsToInsert[iItem].iTypeFrom
54582>>>                        Move aAPIColumnCompare[iCount].sTypeFrom        to aAPIColumnsToInsert[iItem].sTypeFrom
54583>>>                        Move aAPIColumnCompare[iCount].iLengthFrom      to aAPIColumnsToInsert[iItem].iLengthFrom
54584>>>                        Move aAPIColumnCompare[iCount].iPrecisionFrom   to aAPIColumnsToInsert[iItem].iPrecisionFrom
54585>>>                        Move aAPIColumnCompare[iCount].bIsSQLTypeFrom   to aAPIColumnsToInsert[iItem].bIsSQLTypeFrom
54586>>>                        Move aAPIColumnCompare[iCount].bIsSQLTypeTo     to aAPIColumnsToInsert[iItem].bIsSQLTypeTo
54587>>>                        Move True                                       to aAPIColumnsToInsert[iItem].bExistsFrom
54588>>>                        Move False                                      to aAPIColumnsToInsert[iItem].bExistsTo
54589>>>                        Increment iItem
54590>>>                    End
54590>>>>
54590>>>                End
54590>>>>
54590>>>            End
54590>>>>
54590>>>        Loop
54591>>>>
54591>>>
54591>>>        Move False to Err
54592>>>        Move 0 to LastErr
54593>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
54594>>>        Send Trap_Error of Error_Object_Id DFERR_CANT_FIND_FIELD
54595>>>        Function_Return aAPIColumnsToInsert
54596>>>    End_Function
54597>>>
54597>>>    Function UtilColumnsInsert String sDriverIDFrom Handle hTable tAPIColumnCompare[] aAPIColumnsToInsert Returns Boolean
54599>>>        Integer iSize iCount
54599>>>        Boolean bOK
54599>>>        tAPIColumn[] aColumnsTo
54599>>>        tAPIColumn[] aColumnsTo
54600>>>        tAPIColumnCompare[] aAPIColumnCompare
54600>>>        tAPIColumnCompare[] aAPIColumnCompare
54601>>>
54601>>>        Move (SizeOfArray(aAPIColumnsToInsert)) to iSize
54602>>>        If (iSize = 0) Begin
54604>>>            Function_Return True
54605>>>        End
54605>>>>
54605>>>
54605>>>        Move False to Err
54606>>>        Decrement iSize
54607>>>        for iCount from 0 to iSize
54613>>>>
54613>>>            Get ApiColumnInsert sDriverIDFrom hTable aAPIColumnsToInsert[iCount].iFieldNumber aAPIColumnsToInsert[iCount].sFieldNameFrom aAPIColumnsToInsert[iCount].iTypeFrom aAPIColumnsToInsert[iCount].iLengthFrom aAPIColumnsToInsert[iCount].iPrecisionFrom aAPIColumnsToInsert[iCount].bIsSQLTypeFrom to bOK
54614>>>        Loop
54615>>>>
54615>>>
54615>>>        Function_Return bOK
54616>>>    End_Function
54617>>>
54617>>>    // Returns a struct array with fields that has the same names but different field numbers.
54617>>>    Function UtilColumnsCheckForMoves Handle hTable tAPIColumnCompare[] aAPIColumnCompare Returns tAPIColumnCompare[]
54619>>>        tAPIColumnCompare[] aAPIColumnsToMove
54619>>>        tAPIColumnCompare[] aAPIColumnsToMove
54620>>>        Integer iSize iCount iItem iShouldMove
54620>>>
54620>>>        Move 0 to iItem
54621>>>        Move (SizeOfArray(aAPIColumnCompare)) to iSize
54622>>>        Decrement iSize
54623>>>        for iCount from 0 to iSize
54629>>>>
54629>>>            If (Uppercase(aAPIColumnCompare[iCount].sFieldNameFrom) <> Uppercase(aAPIColumnCompare[iCount].sFieldNameTo)) Begin
54631>>>                Get UtilColumnExistsWithOtherNumber aAPIColumnCompare iCount to iShouldMove
54632>>>                If (iShouldMove <> -1) Begin
54634>>>                    Move aAPIColumnCompare[iCount] to aAPIColumnsToMove[iItem]
54635>>>                    Move iShouldMove               to aAPIColumnsToMove[iItem].iFieldNumberTo
54636>>>                    Move aAPIColumnCompare[iShouldMove - 1].sFieldNameTo to aAPIColumnsToMove[iItem].sFieldNameTo
54637>>>                    Increment iItem
54638>>>                End
54638>>>>
54638>>>            End
54638>>>>
54638>>>        Loop
54639>>>>
54639>>>
54639>>>        Move False to Err
54640>>>        Move 0 to LastErr
54641>>>        Function_Return aAPIColumnsToMove
54642>>>    End_Function
54643>>>
54643>>>    Function UtilColumnsMove Handle hTable tAPIColumn[] aColumnsFrom tAPIColumn[] aColumnsTo tAPIColumnCompare[] aAPIColumnsToMove Returns Boolean
54645>>>        Integer iSize iCount
54645>>>        Boolean bOK
54645>>>        tAPIColumnCompare[] aAPIColumnCompare
54645>>>        tAPIColumnCompare[] aAPIColumnCompare
54646>>>
54646>>>        Move (SizeOfArray(aAPIColumnsToMove)) to iSize
54647>>>        If (iSize = 0) Begin
54649>>>            Function_Return True
54650>>>        End
54650>>>>
54650>>>
54650>>>        Move False to Err
54651>>>        Decrement iSize
54652>>>        for iCount from 0 to iSize
54658>>>>
54658>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
54659>>>            Send Ignore_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
54660>>>            If (aAPIColumnsToMove[iCount].bExistsFrom = True and aAPIColumnsToMove[iCount].bExistsTo = True) Begin
54662>>>                Get ApiColumnMove hTable aAPIColumnsToMove[iCount].iFieldNumberTo aAPIColumnsToMove[iCount].iFieldNumber aAPIColumnsToMove[iCount].bIsSQLTypeFrom aAPIColumnsToMove[iCount].iLengthFrom aAPIColumnsToMove[iCount].iPrecisionFrom to bOK
54663>>>                Get UtilColumnsStructFill hTable to aColumnsTo
54664>>>                Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
54665>>>                Get UtilColumnsCheckForMoves hTable aAPIColumnCompare to aAPIColumnsToMove
54666>>>                If (SizeOfArray(aAPIColumnsToMove)) Begin
54668>>>                    Move (SizeOfArray(aAPIColumnsToMove)) to iSize
54669>>>                    Decrement iSize
54670>>>                    Move 0 to iCount
54671>>>                End
54671>>>>
54671>>>            End
54671>>>>
54671>>>        Loop
54672>>>>
54672>>>
54672>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
54673>>>        Send Trap_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
54674>>>        If (LastErr = DFERR_ARRAY_INDEX_OUT_OF_BOUNDS) Begin
54676>>>            Move 0 to LastErr
54677>>>        End
54677>>>>
54677>>>        Function_Return bOK
54678>>>    End_Function
54679>>>
54679>>>    // Takes a tAPIColumnCompare struct as parameter and returns True if;
54679>>>    // - Field Numbers, Data Types, Lengths and Precisions are all equal.
54679>>>    // - The "FROM" field name is <> "TO" field name
54679>>>//    // - The "FROM" field name also exists in the "TO" table; or the "TO" is part
54679>>>//    //   of the "FROM" field name. E.g. "FROM" = LATEST_REPL_COST_DATE, "TO" = Latest_Repl_Cos would results in a TRUE.
54679>>>    Function UtilColumnShouldBeRenamed tAPIColumnCompare aAPIColumnCompare Returns Boolean
54681>>>        Boolean bShouldRename
54681>>>        String sFieldNameFrom sFieldNameTo
54681>>>
54681>>>        Move (Uppercase(aAPIColumnCompare.sFieldNameFrom)) to sFieldNameFrom
54682>>>        Move (Uppercase(aAPIColumnCompare.sFieldNameTo))   to sFieldNameTo
54683>>>        If (sFieldNameFrom = sFieldNameTo) Begin
54685>>>            Function_Return False
54686>>>        End
54686>>>>
54686>>>
54686>>>        Move (aAPIColumnCompare.bExistsFrom    = aAPIColumnCompare.bExistsTo      and ;              aAPIColumnCompare.iFieldNumber   = aAPIColumnCompare.iFieldNumberTo and ;              aAPIColumnCompare.iTypeFrom      = aAPIColumnCompare.iTypeTo        and ;              aAPIColumnCompare.iLengthFrom    = aAPIColumnCompare.iLengthTo      and ;              aAPIColumnCompare.iPrecisionFrom = aAPIColumnCompare.iPrecisionTo   and ;              aAPIColumnCompare.iOptionsFrom   = aAPIColumnCompare.iOptionsTo) to bShouldRename
54687>>>//        If (bShouldRename = False) Begin
54687>>>//            Function_Return False
54687>>>//        End
54687>>>//
54687>>>//        If (sFieldNameFrom contains sFieldNameTo) Begin
54687>>>//            Function_Return True
54687>>>//        End
54687>>>
54687>>>        Function_Return bShouldRename
54688>>>    End_Function
54689>>>
54689>>>    // Returns -1 if the passed iColumn number doesn't exist with the same name in the aAPIColumnCompare struct array.
54689>>>    // Else it returns the column/field number of the field that exists in another position.
54689>>>    Function UtilColumnExistsWithOtherNumber tAPIColumnCompare[] aAPIColumnCompare Integer iColumn Returns Integer
54691>>>        Integer iCount iSize iRetval
54691>>>        String sFieldNameFrom
54691>>>
54691>>>        Move -1 to iRetval
54692>>>        If (aAPIColumnCompare[iColumn].bExistsFrom = False or aAPIColumnCompare[iColumn].bExistsTo = False) Begin
54694>>>            Function_Return iRetval
54695>>>        End
54695>>>>
54695>>>
54695>>>        Move (Uppercase(aAPIColumnCompare[iColumn].sFieldNameFrom)) to sFieldNameFrom
54696>>>        Move (SizeOfArray(aAPIColumnCompare)) to iSize
54697>>>        Decrement iSize
54698>>>        for iCount from 0 to iSize
54704>>>>
54704>>>            // We're only interested in fields other than the passed field/column number:
54704>>>            If (iCount <> iColumn) Begin
54706>>>                If (Uppercase(aAPIColumnCompare[iCount].sFieldNameTo) = sFieldNameFrom) Begin
54708>>>                    Move (iCount + 1) to iRetval
54709>>>                End
54709>>>>
54709>>>            End
54709>>>>
54709>>>        Loop
54710>>>>
54710>>>
54710>>>        Move 0 to LastErr
54711>>>        Function_Return iRetval
54712>>>    End_Function
54713>>>
54713>>>    Function UtilColumnsCheckForRenames Handle hTable tAPIColumnCompare[] aAPIColumnCompare Returns tAPIColumnCompare[]
54715>>>        tAPIColumnCompare[] aAPIColumnsToRename
54715>>>        tAPIColumnCompare[] aAPIColumnsToRename
54716>>>        Integer iSize iCount iItem iFieldTo iShouldMove
54716>>>        Boolean bRenameField
54716>>>
54716>>>        Open hTable
54718>>>        Move 0 to iItem
54719>>>        Move (SizeOfArray(aAPIColumnCompare)) to iSize
54720>>>        Decrement iSize
54721>>>        for iCount from 0 to iSize
54727>>>>
54727>>>            If (Uppercase(aAPIColumnCompare[iCount].sFieldNameFrom) <> Uppercase(aAPIColumnCompare[iCount].sFieldNameTo)) Begin
54729>>>                // Check if the field exists in another position (other field number)
54729>>>                Get UtilColumnExistsWithOtherNumber aAPIColumnCompare iCount to iShouldMove
54730>>>                Get UtilColumnShouldBeRenamed aAPIColumnCompare[iCount] to bRenameField
54731>>>                If (aAPIColumnCompare[iCount].bExistsFrom = True and iShouldMove = -1 and bRenameField = True) Begin
54733>>>                    Move aAPIColumnCompare[iCount].iFieldNumber     to aAPIColumnsToRename[iItem].iFieldNumber
54734>>>                    Move iFieldTo                                   to aAPIColumnsToRename[iItem].iFieldNumberTo
54735>>>                    Move aAPIColumnCompare[iCount].sFieldNameFrom   to aAPIColumnsToRename[iItem].sFieldNameFrom
54736>>>                    Move aAPIColumnCompare[iCount].sFieldNameTo     to aAPIColumnsToRename[iItem].sFieldNameTo
54737>>>                    Increment iItem
54738>>>                End
54738>>>>
54738>>>            End
54738>>>>
54738>>>        Loop
54739>>>>
54739>>>
54739>>>        Move False to Err
54740>>>        Move 0 to LastErr
54741>>>        Function_Return aAPIColumnsToRename
54742>>>    End_Function
54743>>>
54743>>>    Function UtilColumnsRename Handle hTable tAPIColumnCompare[] aAPIColumnsToRename Returns Boolean
54745>>>        Integer iSize iCount
54745>>>        Boolean bOK
54745>>>        tAPIColumn[] aColumnsTo
54745>>>        tAPIColumn[] aColumnsTo
54746>>>        tAPIColumnCompare[] aAPIColumnCompare
54746>>>        tAPIColumnCompare[] aAPIColumnCompare
54747>>>
54747>>>        Move (SizeOfArray(aAPIColumnsToRename)) to iSize
54748>>>        If (iSize = 0) Begin
54750>>>            Function_Return True
54751>>>        End
54751>>>>
54751>>>
54751>>>        Move False to Err
54752>>>        Decrement iSize
54753>>>        For iCount from 0 to iSize
54759>>>>
54759>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
54760>>>            Get ApiColumnRename hTable aAPIColumnsToRename[iCount].sFieldNameTo aAPIColumnsToRename[iCount].sFieldNameFrom to bOK
54761>>>        Loop
54762>>>>
54762>>>
54762>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
54763>>>        Function_Return bOK
54764>>>    End_Function
54765>>>
54765>>>    Function UtilColumnIsDateType Integer iType Boolean bIsSQLTableTo Returns Boolean
54767>>>        Boolean bDateType
54767>>>
54767>>>        If (bIsSQLTableTo = True) Begin
54769>>>            Move (iType = SQL_TYPE_DATE or iType = SQL_TYPE_TIMESTAMP or iType = SQL_TYPE_TIMESTAMP2) to bDateType
54770>>>        End
54770>>>>
54770>>>        Else Begin
54771>>>            Move (iType = DF_DATE or iType = DF_DATETIME) to bDateType
54772>>>        End
54772>>>>
54772>>>
54772>>>        Function_Return bDateType
54773>>>    End_Function
54774>>>
54774>>>    Function ApiColumnsUpdate String sDriverIDFrom Handle hTable Boolean bIsSQLTableFrom tAPIColumn[] aColumnsFrom tAPIColumn[] aColumnsTo Boolean bCompareDate_DateTime Returns Boolean
54776>>>        Integer iCount iColumns iColumn iTypeFrom iTypeTo iDataFlexType iIndex iLengthFrom iLengthTo iPrecisionFrom iPrecisionTo iOptionFrom iOptionTo iDbType
54776>>>        Integer iCount2 iColumn2
54776>>>        Handle hFile
54776>>>        Boolean bFieldExistsFrom bFieldExistsTo bIsSQLDriver bIsSame bOK bSkip
54776>>>        Boolean bRecnum bIsSQLTableTo bRecnumTable bIsOpen bSkipTypeChange bIsDateType
54776>>>        String sFieldNameFrom sFieldNameTo sDriverIDTo sDefaultValue
54776>>>        tAPIColumnCompare[] aAPIColumnCompare aApiInsertColumns aAPIMoveColumns aAPIRenameColumns aAPIRemoveColumns
54776>>>        tAPIColumnCompare[] aAPIColumnCompare aApiInsertColumns aAPIMoveColumns aAPIRenameColumns aAPIRemoveColumns
54781>>>        tColumnType ColumnType
54781>>>        tColumnType ColumnType
54781>>>
54781>>>        Move False to Err
54782>>>        Close hTable
54783>>>        Get OpenTableExclusive hTable to bIsOpen
54784>>>        If (bIsOpen = False) Begin
54786>>>            Error DFERR_PROGRAM ("Function 'ApiColumnsUpdate'. Can't open table number:" * String(hTable))
54787>>>>
54787>>>            Function_Return False
54788>>>        End 
54788>>>>
54788>>>        
54788>>>        Get piDbType to iDbType
54789>>>        Get_Attribute DF_FILE_RECNUM_TABLE of hTable to bRecnumTable
54792>>>        Move bIsSQLTableFrom to bIsSQLDriver
54793>>>        Get _UtilTableIsSql hTable to bIsSQLTableTo
54794>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverIDTo
54797>>>
54797>>>        Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
54798>>>
54798>>>        // Before we start to change the table we need to do three things;
54798>>>        // 1) Insert any new fields
54798>>>        Get UtilColumnsCheckForInserts hTable aAPIColumnCompare to aApiInsertColumns
54799>>>        If (SizeOfArray(aApiInsertColumns)) Begin
54801>>>            Get UtilColumnsInsert sDriverIDFrom hTable aApiInsertColumns to bOK
54802>>>            If (bOK = False) Begin
54804>>>                Function_Return False
54805>>>            End
54805>>>>
54805>>>            // Update info with changes made.
54805>>>            Get UtilColumnsStructFill hTable to aColumnsTo
54806>>>            Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
54807>>>        End
54807>>>>
54807>>>
54807>>>        // 2) Move fields with same names
54807>>>        Get UtilColumnsCheckForMoves hTable aAPIColumnCompare to aAPIMoveColumns
54808>>>        If (SizeOfArray(aAPIMoveColumns)) Begin
54810>>>            Get UtilColumnsMove hTable aColumnsFrom aColumnsTo aAPIMoveColumns to bOK
54811>>>            If (bOK = False) Begin
54813>>>                Function_Return False
54814>>>            End
54814>>>>
54814>>>            Get UtilColumnsStructFill hTable to aColumnsTo
54815>>>            Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
54816>>>        End
54816>>>>
54816>>>        
54816>>>        // 3) Rename fields
54816>>>        Get UtilColumnsCheckForRenames hTable aAPIColumnCompare to aAPIRenameColumns
54817>>>        If (SizeOfArray(aAPIRenameColumns)) Begin
54819>>>            Get UtilColumnsRename hTable aAPIRenameColumns to bOK
54820>>>            If (bOK = False) Begin
54822>>>                Function_Return False
54823>>>            End
54823>>>>
54823>>>            Get UtilColumnsStructFill hTable to aColumnsTo
54824>>>            Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
54825>>>        End
54825>>>>
54825>>>
54825>>>        // 4) Remove fields if more fields currently exists compared to the new table definition.
54825>>>//        Get utilColumnsCheckForRemoves hTable aAPIColumnCompare to aAPIRemoveColumns
54825>>>//        If (SizeOfArray(aAPIRemoveColumns)) Begin
54825>>>//            Get UtilColumnsRemove hTable aAPIRemoveColumns to bOK
54825>>>//            If (bOK = False) Begin
54825>>>//                Function_Return False
54825>>>//            End
54825>>>//            Get UtilColumnsStructFill hTable to aColumnsTo
54825>>>//            Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
54825>>>//        End
54825>>>
54825>>>        // If any of the fields were changed by "Insert", "Rename" or "Move", we need to compare the fields again:
54825>>>        If (SizeOfArray(aApiInsertColumns) or SizeOfArray(aAPIRenameColumns) or SizeOfArray(aAPIMoveColumns)) Begin
54827>>>            Get UtilColumnsCompare sDriverIDFrom sDriverIDTo bIsSQLTableFrom bIsSQLTableTo aAPIColumnCompare bCompareDate_DateTime to bIsSame
54828>>>            If (bIsSame = True) Begin
54830>>>                Function_Return True
54831>>>            End
54831>>>>
54831>>>        End
54831>>>>
54831>>>
54831>>>        // We can now continue to make standard field changes:
54831>>>        Get OpenTableExclusive hTable to bIsOpen
54832>>>        Set Private.phCurrentTable to hTable
54833>>>        Move hTable to hFile
54834>>>        Structure_Start hFile sDriverIDTo
54835>>>
54835>>>            Move (SizeOfArray(aAPIColumnCompare)) to iColumns
54836>>>            Decrement iColumns
54837>>>            for iCount from 0 to iColumns
54843>>>>
54843>>>                Send DoAdvance of ghoProgressBar
54844>>>
54844>>>                Move aAPIColumnCompare[iCount].iFieldNumber to iColumn
54845>>>                Set Private.piCurrentField                  to iColumn
54846>>>                Get UtilColumnCompare sDriverIDFrom sDriverIDTo bIsSQLTableFrom aAPIColumnCompare[iCount].bIsSQLTypeTo aAPIColumnCompare[iCount] bCompareDate_DateTime to bIsSame
54847>>>                If (bIsSame = False) Begin
54849>>>
54849>>>                    Move aAPIColumnCompare[iCount].bExistsFrom          to bFieldExistsFrom
54850>>>                    If (bFieldExistsFrom = True) Begin
54852>>>                        Move aAPIColumnCompare[iCount].bExistsTo        to bFieldExistsTo
54853>>>                        Move aAPIColumnCompare[iCount].sFieldNameFrom   to sFieldNameFrom
54854>>>                        Move aAPIColumnCompare[iCount].iLengthFrom      to iLengthFrom
54855>>>                        Move aAPIColumnCompare[iCount].iPrecisionFrom   to iPrecisionFrom
54856>>>                        Move aAPIColumnCompare[iCount].iOptionsFrom     to iOptionFrom
54857>>>
54857>>>                        Move aAPIColumnCompare[iCount].iTypeFrom        to iTypeFrom
54858>>>                        Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iTypeFrom iLengthFrom to iDataFlexType
54859>>>                        If (iTypeFrom < -1490) Begin
54861>>>                            Move (iTypeFrom + 1500)                     to iTypeFrom
54862>>>                        End
54862>>>>
54862>>>
54862>>>                        // If one of the two tables are SQL and the other Embedded we need to "translate"
54862>>>                        // data types between Embedded and SQL, else we can't compare the data types.
54862>>>                        If (bIsSQLTableFrom = True and bIsSQLTableTo = False) Begin
54864>>>                            Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iTypeFrom iLengthFrom to iTypeFrom
54865>>>                            If (iTypeFrom = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
54867>>>                                Move DF_DATE to iTypeFrom
54868>>>                            End
54868>>>>
54868>>>                        End
54868>>>>
54868>>>                        Else If (bIsSQLTableFrom = False and bIsSQLTableTo = True) Begin
54871>>>                            Get UtilSqlColumnTypeToDataFlexType sDriverIDTo   iDbType iTypeTo   iLengthTo   to iTypeTo
54872>>>                        End
54872>>>>
54872>>>
54872>>>                        Move aAPIColumnCompare[iCount].sFieldNameTo to sFieldNameTo
54873>>>                        Move aAPIColumnCompare[iCount].iLengthTo    to iLengthTo
54874>>>                        Move aAPIColumnCompare[iCount].iPrecisionTo to iPrecisionTo
54875>>>                        Move aAPIColumnCompare[iCount].iOptionsTo   to iOptionTo
54876>>>                        Move aAPIColumnCompare[iCount].iTypeTo      to iTypeTo
54877>>>
54877>>>                        Move False to bSkipTypeChange
54878>>>                        If (bCompareDate_DateTime = False) Begin
54880>>>                            Move ((iTypeFrom = SQL_TYPE_DATE or iTypeFrom = SQL_TYPE_TIME or iTypeFrom = SQL_TYPE_TIMESTAMP) and (iTypeTo = SQL_TYPE_DATE or iTypeTo = SQL_TYPE_TIME or iTypeTo = SQL_TYPE_TIMESTAMP)) to bSkipTypeChange
54881>>>                        End
54881>>>>
54881>>>
54881>>>                        If (bFieldExistsTo = False) Begin
54883>>>                            Move 0 to iColumn
54884>>>                            Create_Field hFile At iColumn
54885>>>                            Set Private.piCurrentField to iColumn
54886>>>                        End
54886>>>>
54886>>>
54886>>>                        If (sFieldNameFrom <> sFieldNameTo) Begin
54888>>>                            Set_Attribute DF_FIELD_NAME of hFile iColumn to sFieldNameFrom
54891>>>                        End
54891>>>>
54891>>>
54891>>>                        If (bIsSQLTableFrom = True and bIsSQLTableTo = True and aAPIColumnCompare[iCount].iOptionsFrom <> C_tAPIColumn_Identity) Begin
54893>>>                            Set_Attribute DF_FIELD_NULL_ALLOWED  of hFile iColumn to aAPIColumnCompare[iCount].bAllowNULLFrom
54896>>>                            Move aAPIColumnCompare[iCount].sDefaultValueFrom to sDefaultValue
54897>>>                            If (iDataFlexType = DF_BCD and Left(String(sDefaultValue), 1) <> "[") Begin
54899>>>                                Move ("[" + String(sDefaultValue) + "]") to sDefaultValue
54900>>>                            End
54900>>>>
54900>>>                            Set_Attribute DF_FIELD_DEFAULT_VALUE of hFile iColumn to sDefaultValue
54903>>>                        End
54903>>>>
54903>>>
54903>>>                        If (bSkipTypeChange = False) Begin
54905>>>                            If (iTypeFrom <> iTypeTo) Begin
54907>>>                                If (bIsSQLTableTo = True) Begin
54909>>>                                    Set_Attribute DF_FIELD_NATIVE_TYPE of hFile iColumn to iTypeFrom
54912>>>                                End
54912>>>>
54912>>>                                Else Begin                                                   
54913>>>                                    If (iDataFlexType = DF_DATETIME) Begin // DateTime cannot be used by the embedded database.
54915>>>                                        Move DF_DATE to iDataFlexType  // Date
54916>>>                                    End
54916>>>>
54916>>>                                    Set_Attribute DF_FIELD_TYPE of hFile iColumn to iDataFlexType
54919>>>                                End
54919>>>>
54919>>>                            End
54919>>>>
54919>>>                        End
54919>>>>
54919>>>
54919>>>                        Get UtilColumnIsDateType iTypeFrom bIsSQLTableTo to bIsDateType
54920>>>                        // We can't set the length or precision for Date type columns (they are fixed).
54920>>>                        If (bIsDateType = False) Begin
54922>>>                            If (iLengthFrom <> iLengthTo) Begin
54924>>>                                Set_Attribute DF_FIELD_LENGTH of hFile iColumn to iLengthFrom
54927>>>                            End
54927>>>>
54927>>>                            If (iPrecisionFrom <> iPrecisionTo) Begin
54929>>>                                Set_Attribute DF_FIELD_PRECISION of hFile iColumn to iPrecisionFrom
54932>>>                            End
54932>>>>
54932>>>                        End
54932>>>>
54932>>>
54932>>>                        If (bIsSQLTableTo = True and iOptionFrom =  C_tAPIColumn_Identity and iOptionTo <> C_tAPIColumn_Identity) Begin
54934>>>                            // Can't set a recnum table to "DF_FIELD_IS_IDENTITY"
54934>>>                            If (bRecnumTable = True) Begin
54936>>>                                Set_Attribute DF_FILE_RECNUM_TABLE of hTable to False
54939>>>                            End
54939>>>>
54939>>>
54939>>>                            // We might need to create an index here.
54939>>>                            // To be able to set the DF_FIELD_IS_IDENTITY the index must already exist, but it might not at this stage.
54939>>>                            // This should probably fix that problem and if an adjustment is needed, it will get done with the normal
54939>>>                            // index update checking logic.
54939>>>                            Get_Attribute DF_FIELD_INDEX           of hFile iColumn to iIndex
54942>>>                            If (iIndex = 0 and Uppercase(sFieldNameTo) <> "RECNUM") Begin
54944>>>                                Create_Index hFile at iIndex
54945>>>                                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hFile iIndex to 1
54948>>>                            End
54948>>>>
54948>>>
54948>>>                            Set_Attribute DF_INDEX_SEGMENT_FIELD   of hFile iIndex 1 to iColumn
54951>>>                            Set_Attribute DF_FILE_PRIMARY_INDEX    of hFile          to iIndex
54954>>>                                // Note: The order here is crucial!
54954>>>                                Set_Attribute DF_INDEX_SQL_PRIMARY_KEY of hFile iIndex to True
54957>>>                                Set_Attribute DF_FIELD_IS_IDENTITY of hFile iColumn    to True
54960>>>                        End
54960>>>>
54960>>>                    End
54960>>>>
54960>>>                    Else Begin
54961>>>                        Delete_Field hFile iColumn
54962>>>                        Move (RemoveFromArray(aColumnsTo, iCount)) to aColumnsTo
54963>>>                        Move (SizeOfArray(aColumnsTo)) to iCount2
54964>>>                        Decrement iCount2
54965>>>                        // We need to adjust FieldNumbers in the array with one, as we just deleted a field,
54965>>>                        // starting with the array number we just deleted the field for.
54965>>>                        for iColumn2 from iCount to iCount2
54971>>>>
54971>>>                            Move (aColumnsTo[iColumn2].iFieldNumber - 1) to aColumnsTo[iColumn2].iFieldNumber
54972>>>                        Loop
54973>>>>
54973>>>                        Decrement iCount
54974>>>                        Get UtilColumnCombineFromAndToArrays aColumnsFrom aColumnsTo to aAPIColumnCompare
54975>>>                        Move (SizeOfArray(aAPIColumnCompare)) to iColumns
54976>>>                        If (SizeOfArray(aColumnsFrom) = SizeOfArray(aColumnsTo)) Begin
54978>>>                            Move iColumns to iCount 
54979>>>                        End
54979>>>>
54979>>>                    End
54979>>>>
54979>>>                End
54979>>>>
54979>>>            Loop
54980>>>>
54980>>>
54980>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
54981>>>        Structure_End hFile DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
54983>>>
54983>>>        Set Action_Text of ghoStatusPanel to ""
54984>>>        Function_Return (Err = False)
54985>>>    End_Function
54986>>>
54986>>>    // * Dummy function for the Studio's Code Explorer *
54986>>>    Function API_INDEX_FUNCTIONS Returns Boolean
54988>>>        Function_Return False
54989>>>    End_Function
54990>>>
54990>>>    // Get ApiIndexCreate Customers.File_Number 1 2 0 1 -1 -1 -1 -1 -1 -1 -1 -1 to bOK
54990>>>    // Note: the "-1" can be left out as this function is overloaded to make it easier to call.
54990>>>    // Note: This doesn't set Descending attributes - Use function IndexChangeDirection to do that.
54990>>>    Function ApiIndexCreate Handle hTable Integer iIndex Integer iSegments Integer iSgmnt1 Integer iSgmnt2 Integer iSgmnt3 Integer iSgmnt4 Integer iSgmnt5 Integer iSgmnt6 Integer iSgmnt7 Integer iSgmnt8 Integer iSgmnt9 Integer iSgmnt10 Returns Boolean
54992>>>        Integer iTableNo iSegment1 iSegment2 iSegment3 iSegment4 iSegment5 iSegment6 iSegment7 iSegment8 iSegment9 iSegment10  iIndexSegments
54992>>>        String sDriverID
54992>>>        Boolean bOK bExists bIsSQLTable
54992>>>
54992>>>        Get AutoConnectionIDLogin to bOK
54993>>>        Get OpenTableExclusive hTable to bOK
54994>>>        If (bOK = False) Begin
54996>>>            Function_Return False
54997>>>        End
54997>>>>
54997>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
55000>>>
55000>>>            Get _UtilTableIsSql hTable to bIsSQLTable
55001>>>            If (bIsSQLTable = True) Begin
55003>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
55006>>>            End
55006>>>>
55006>>>
55006>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iIndexSegments
55009>>>        Move (iIndexSegments > 0) to bExists
55010>>>        If (bExists = True) Begin
55012>>>            Function_Return True
55013>>>        End
55013>>>>
55013>>>
55013>>>        Move -1 to iSegment1
55014>>>        Move -1 to iSegment2
55015>>>        Move -1 to iSegment3
55016>>>        Move -1 to iSegment4
55017>>>        Move -1 to iSegment5
55018>>>        Move -1 to iSegment6
55019>>>        Move -1 to iSegment7
55020>>>        Move -1 to iSegment8
55021>>>        Move -1 to iSegment9
55022>>>        Move -1 to iSegment10
55023>>>
55023>>>        If (num_arguments > 3) Begin
55025>>>            Move iSgmnt1 to iSegment1
55026>>>        End
55026>>>>
55026>>>        If (num_arguments > 4) Begin
55028>>>            Move iSgmnt2 to iSegment2
55029>>>        End
55029>>>>
55029>>>        If (num_arguments > 5) Begin
55031>>>            Move iSgmnt3 to iSegment3
55032>>>        End
55032>>>>
55032>>>        If (num_arguments > 6) Begin
55034>>>            Move iSgmnt4 to iSegment4
55035>>>        End
55035>>>>
55035>>>        If (num_arguments > 7) Begin
55037>>>            Move iSgmnt5 to iSegment5
55038>>>        End
55038>>>>
55038>>>        If (num_arguments > 8) Begin
55040>>>            Move iSgmnt6 to iSegment6
55041>>>        End
55041>>>>
55041>>>        If (num_arguments > 9) Begin
55043>>>            Move iSgmnt7 to iSegment7
55044>>>        End
55044>>>>
55044>>>        If (num_arguments > 10) Begin
55046>>>            Move iSgmnt8 to iSegment8
55047>>>        End
55047>>>>
55047>>>        If (num_arguments > 11) Begin
55049>>>            Move iSgmnt9 to iSegment9
55050>>>        End
55050>>>>
55050>>>        If (num_arguments > 12) Begin
55052>>>            Move iSgmnt10 to iSegment10
55053>>>        End
55053>>>>
55053>>>
55053>>>        Move False to Err
55054>>>        Move hTable to iTableNo
55055>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55056>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_PARAMETER
55057>>>        Send Ignore_Error of Error_Object_Id DFERR_NON_FATAL_RESTRUCTURE_ERROR
55058>>>
55058>>>        // We start by deleting the index, if it exists.
55058>>>        If (bExists = True) Begin
55060>>>            Structure_Start hTable sDriverID
55061>>>                Delete_Index iTableNo iIndex
55062>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
55063>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55065>>>        End
55065>>>>
55065>>>
55065>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
55066>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_PARAMETER
55067>>>        Send Trap_Error of Error_Object_Id DFERR_NON_FATAL_RESTRUCTURE_ERROR
55068>>>        Set Action_Text of ghoStatusPanel to ""
55069>>>        Move False to Err
55070>>>        Move 0 to LastErr
55071>>>
55071>>>        // Need to re-open if index deleted.
55071>>>        Move iTableNo to hTable
55072>>>        Get OpenTableExclusive hTable to bOK
55073>>>        If (bOK = False) Begin
55075>>>            Function_Return False
55076>>>        End
55076>>>>
55076>>>
55076>>>        Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
55077>>>        Structure_Start hTable sDriverID
55078>>>            Create_Index hTable At iIndex
55079>>>            Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iSegments
55082>>>
55082>>>            If (iSgmnt1 <> -1) Begin
55084>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 1 to iSegment1
55087>>>            End
55087>>>>
55087>>>            If (iSegment2 <> -1) Begin
55089>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 2 to iSegment2
55092>>>            End
55092>>>>
55092>>>            If (iSegment3 <> -1) Begin
55094>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 3 to iSegment3
55097>>>            End
55097>>>>
55097>>>            If (iSegment4 <> -1) Begin
55099>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 4 to iSegment4
55102>>>            End
55102>>>>
55102>>>            If (iSegment5 <> -1) Begin
55104>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 5 to iSegment5
55107>>>            End
55107>>>>
55107>>>            If (iSegment6 <> -1) Begin
55109>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 6 to iSegment6
55112>>>            End
55112>>>>
55112>>>            If (iSegment7 <> -1) Begin
55114>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 7 to iSegment7
55117>>>            End
55117>>>>
55117>>>            If (iSegment8 <> -1) Begin
55119>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 8 to iSegment8
55122>>>            End
55122>>>>
55122>>>            If (iSegment9 <> -1) Begin
55124>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 9 to iSegment9
55127>>>            End
55127>>>>
55127>>>            If (iSegment10 <> -1) Begin
55129>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex 10 to iSegment10
55132>>>            End
55132>>>>
55132>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
55133>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55135>>>
55135>>>        Set Action_Text of ghoStatusPanel to ""
55136>>>        Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
55137>>>
55137>>>        Function_Return (Err = False)
55138>>>    End_Function
55139>>>
55139>>>    // Example:
55139>>>    // Get ApiIndexCreateEx hTable 1 (StrSplitToArray("1,5,6,7,8,2,3,4,10,9,11", ",")) to bOk
55139>>>    // Note: The StrSplitToArray function was introduced with DataFlex 18.2
55139>>>    Function ApiIndexCreateEx Handle hTable Integer iIndex Integer[] iSgmnts Returns Boolean
55141>>>        Integer iTableNo iNumSgmnt iNumSgmnts
55141>>>        String sDriverID
55141>>>        Boolean bOK bIsSQLTable
55141>>>
55141>>>        Get AutoConnectionIDLogin to bOK
55142>>>
55142>>>        Move False to Err
55143>>>        Move hTable to iTableNo
55144>>>        Get OpenTableExclusive hTable to bOK
55145>>>        If (bOK = False) Begin
55147>>>            Function_Return False
55148>>>        End
55148>>>>
55148>>>
55148>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
55151>>>            Get _UtilTableIsSql hTable to bIsSQLTable
55152>>>            If (bIsSQLTable = True) Begin
55154>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
55157>>>            End
55157>>>>
55157>>>
55157>>>        // We start by deleting the index
55157>>>        Structure_Start hTable sDriverID
55158>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55159>>>            Send Ignore_Error of Error_Object_Id DFERR_BAD_PARAMETER
55160>>>            Delete_Index iTableNo iIndex
55161>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
55162>>>            Send Trap_Error of Error_Object_Id DFERR_BAD_PARAMETER
55163>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE
55165>>>
55165>>>        Move False to Err
55166>>>        Move iTableNo to hTable
55167>>>        Get OpenTableExclusive hTable to bOK
55168>>>        If (bOK = False) Begin
55170>>>            Function_Return False
55171>>>        End
55171>>>>
55171>>>
55171>>>        Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
55172>>>        Structure_Start hTable sDriverID
55173>>>            Move (SizeOfArray(iSgmnts)) to iNumSgmnts
55174>>>
55174>>>            Create_Index hTable at iIndex
55175>>>            Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSgmnts
55178>>>
55178>>>            for iNumSgmnt from 0 to (iNumSgmnts - 1)
55184>>>>
55184>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD of hTable iIndex (iNumSgmnt + 1) to iSgmnts[iNumSgmnt]
55187>>>            Loop
55188>>>>
55188>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE
55190>>>
55190>>>        Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
55191>>>
55191>>>        Function_Return (Err = False)
55192>>>    End_Function
55193>>>
55193>>>    Function APIIndexCreateByFieldNames Handle hTable tAPIIndex APIIndex tAPIIndex[] APIIndexTo tAPIIndexSegment[] aIndexSegments Returns Boolean
55195>>>        Integer iCount iSegmentsFrom iFieldFrom iSegmentsTo iSQLIndexType iTableNo
55195>>>        String sDriverID sSQLIndexName
55195>>>        Boolean bOK bIsSQLTable bIsOpen bIsSQLPrimaryKey bIsSQLClustered bIsSQLTemporaryIndex bExists
55195>>>
55195>>>        Move (SizeOfArray(aIndexSegments)) to iSegmentsFrom
55196>>>        If (iSegmentsFrom = 0) Begin
55198>>>            Function_Return False
55199>>>        End
55199>>>>
55199>>>
55199>>>        Get AutoConnectionIDLogin to bOK
55200>>>        Move False to Err
55201>>>        Get OpenTableExclusive hTable to bIsOpen
55202>>>        If (bIsOpen = False) Begin
55204>>>            Function_Return False
55205>>>        End
55205>>>>
55205>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
55208>>>        Get _UtilTableIsSql hTable to bIsSQLTable
55209>>>            If (bIsSQLTable = True) Begin
55211>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
55214>>>            End
55214>>>>
55214>>>
55214>>>        Move 0     to iSegmentsTo
55215>>>        Move 0     to iSQLIndexType
55216>>>        Move ""    to sSQLIndexName
55217>>>        Move False to bIsSQLTemporaryIndex
55218>>>        Move False to bIsSQLPrimaryKey
55219>>>        Move False to bIsSQLClustered
55220>>>
55220>>>            Get UtilIndexTempRenameSQLName hTable APIIndex.sSQLIndexName sDriverID          to bOK
55221>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable APIIndex.iIndexNumber              to iSegmentsTo
55224>>>        Move (iSegmentsTo > 0) to bExists
55225>>>        If (bExists = True) Begin
55227>>>            If (bIsSQLTable = True and iSegmentsTo > 0) Begin
55229>>>                Get_Attribute DF_INDEX_NAME of hTable APIIndex.iIndexNumber                 to sSQLIndexName
55232>>>                        Get_Attribute DF_INDEX_SQL_TYPE of hTable APIIndex.iIndexNumber         to iSQLIndexType
55235>>>                        Move (iSQLIndexType = DF_INDEX_TEMPORARY)                               to bIsSQLTemporaryIndex
55236>>>                    Get_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable APIIndex.iIndexNumber  to bIsSQLPrimaryKey
55239>>>                    Get_Attribute DF_INDEX_CLUSTERED       of hTable APIIndex.iIndexNumber  to bIsSQLClustered
55242>>>            End
55242>>>>
55242>>>        End
55242>>>>
55242>>>
55242>>>        Move hTable to iTableNo
55243>>>        Move False to Err
55244>>>        Move 0 to LastErr
55245>>>
55245>>>        Structure_Start hTable sDriverID
55246>>>            If (bExists = True) Begin
55248>>>                Delete_Index iTableNo APIIndex.iIndexNumber
55249>>>            End
55249>>>>
55249>>>
55249>>>            Create_Index hTable At APIIndex.iIndexNumber
55250>>>
55250>>>                If (bIsSQLTable = True) Begin // (DF_INDEX_SQL_TYPE = DF_INDEX_SERVER, DF_INDEX_CLIENT, DF_INDEX_SERVER_ONLY or DF_INDEX_TEMPORARY)
55252>>>                    Set_Attribute DF_INDEX_SQL_TYPE        of hTable APIIndex.iIndexNumber to APIIndex.iSQLIndexType
55255>>>                    Set_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable APIIndex.iIndexNumber to APIIndex.bIsSQLPrimaryKey
55258>>>                    Set_Attribute DF_INDEX_CLUSTERED       of hTable APIIndex.iIndexNumber to APIIndex.bIsSQLClustered
55261>>>                    Set_Attribute DF_INDEX_NAME            of hTable APIIndex.iIndexNumber to APIIndex.sSQLIndexName
55264>>>                End
55264>>>>
55264>>>
55264>>>                    Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable APIIndex.iIndexNumber to iSegmentsFrom
55267>>>
55267>>>            for iCount from 0 to (iSegmentsFrom -1)
55273>>>>
55273>>>                Move aIndexSegments[iCount].iFieldNumber to iFieldFrom
55274>>>                If (iFieldFrom <> -1 ) Begin
55276>>>                        Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable APIIndex.iIndexNumber (iCount +1) to iFieldFrom
55279>>>                        Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable APIIndex.iIndexNumber (iCount +1) to aIndexSegments[iCount].bAscending
55282>>>                        Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable APIIndex.iIndexNumber (iCount +1) to aIndexSegments[iCount].bUppercase
55285>>>                End
55285>>>>
55285>>>            Loop
55286>>>>
55286>>>
55286>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
55287>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55289>>>
55289>>>        Set Action_Text of ghoStatusPanel to ""
55290>>>
55290>>>        Function_Return (Err = False)
55291>>>    End_Function
55292>>>
55292>>>    // If an SQL index is to be renamed we need to check that the name doesn't exist already, but
55292>>>    // with another index number. If we find one we temporarily renames it by adding "TMP" to the SQL name.
55292>>>    Function UtilIndexTempRenameSQLName Handle hTable String sSQLIndexName String sDriverID Returns Boolean
55294>>>        Integer iLastIndex iCount iTableNo iSegments
55294>>>        String sSQLIndexNameCompare sTmpIndexName
55294>>>        Boolean bIsOpen bExists bIsSQLDriver 
55294>>>
55294>>>        Get IsSQLDriver sDriverID to bIsSQLDriver
55295>>>        
55295>>>        If (bIsSQLDriver = False) Begin
55297>>>            Function_Return False
55298>>>        End
55298>>>>
55298>>>
55298>>>        Move False to Err
55299>>>        Move hTable to iTableNo
55300>>>        Get_Attribute DF_FILE_LAST_INDEX_NUMBER of hTable to iLastIndex
55303>>>        for iCount from 0 to iLastIndex
55309>>>>
55309>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iCount to iSegments
55312>>>            Move (iSegments > 0) to bExists
55313>>>            If (bExists = True) Begin
55315>>>                Get_Attribute DF_INDEX_NAME of hTable iCount to sSQLIndexNameCompare
55318>>>                If (Lowercase(sSQLIndexName) = Lowercase(sSQLIndexNameCompare)) Begin
55320>>>                    Move (sSQLIndexNameCompare + String("_TMP")) to sTmpIndexName
55321>>>                    Structure_Start iTableNo sDriverID
55322>>>                        Set_Attribute DF_INDEX_NAME of iTableNo iCount to sTmpIndexName
55325>>>                    Structure_End iTableNo DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55327>>>                    Open hTable
55329>>>                End
55329>>>>
55329>>>            End
55329>>>>
55329>>>        Loop
55330>>>>
55330>>>
55330>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
55333>>>        If (bIsOpen = False) Begin
55335>>>            Get OpenTableExclusive hTable to bIsOpen
55336>>>        End
55336>>>>
55336>>>        If (bIsOpen = False) Begin
55338>>>            Function_Return False
55339>>>        End
55339>>>>
55339>>>
55339>>>        Function_Return (Err = False)
55340>>>    End_Function
55341>>>
55341>>>    // Checks if an SQL Index name for the "FROM" database already exists in the TO database,
55341>>>    // but with another Index number. We can then not rename the SQL index name for the TO database table.
55341>>>    Function UtilIndexSQLIndexNameExists Handle hTable Integer iIndexNumberFrom String sSQLIndexNameFrom tAPIIndex[] APIIndexTo Returns Integer
55343>>>        Integer iSize iCount
55343>>>        Integer iRetVal
55343>>>
55343>>>        Move 0 to iRetVal
55344>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndexNumberFrom to iRetVal
55347>>>        If (iRetVal = 0) Begin
55349>>>            Function_Return 0
55350>>>        End
55350>>>>
55350>>>        Move (SizeOfArray(APIIndexTo)) to iSize
55351>>>        Decrement iSize
55352>>>        for iCount from 0 to iSize
55358>>>>
55358>>>            If (Uppercase(sSQLIndexNameFrom) = Uppercase(APIIndexTo[iCount].sSQLIndexName)) Begin
55360>>>                If (iIndexNumberFrom <> APIIndexTo[iCount].iIndexNumber) Begin
55362>>>                    Move APIIndexTo[iCount].iIndexNumber to iRetVal
55363>>>                End
55363>>>>
55363>>>            End
55363>>>>
55363>>>        Loop
55364>>>>
55364>>>
55364>>>        Function_Return iRetVal
55365>>>    End_Function
55366>>>
55366>>>    Function ApiIndexDeleteSegment Handle hTable Integer iIndex Integer iSegment Returns Boolean
55368>>>        Integer iNumSegments iCurSegment iSegmentCase iSegmentDirection iSegmentColumn
55368>>>        Boolean bIsSQLTable
55368>>>        
55368>>>            Get _UtilTableIsSql hTable to bIsSQLTable
55369>>>            If (bIsSQLTable = True) Begin
55371>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
55374>>>            End
55374>>>>
55374>>>
55374>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
55377>>>        If (iSegment = iNumSegments) Begin
55379>>>//            Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
55379>>>        End
55379>>>>
55379>>>
55379>>>        Else If (iSegment > 0 and iSegment < iNumSegments) Begin
55382>>>            for iCurSegment from iSegment to (iNumSegments - 1)
55388>>>>
55388>>>                //*** Move index segment attributes
55388>>>                Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment + 1) to iSegmentCase
55391>>>                Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment + 1) to iSegmentDirection
55394>>>                Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment + 1) to iSegmentColumn
55397>>>
55397>>>                Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment to iSegmentCase
55400>>>                Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment to iSegmentDirection
55403>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment to iSegmentColumn
55406>>>            Loop
55407>>>>
55407>>>
55407>>>            Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
55410>>>        End
55410>>>>
55410>>>
55410>>>        Function_Return (Err = False)
55411>>>    End_Function
55412>>>
55412>>>    Function APIIndexRemoveAllIndexes Handle hTable tAPIIndex[] APIIndex Returns Boolean
55414>>>        Integer iCount iSize iIndex
55414>>>        String sDriverID
55414>>>        Boolean bOK bIsSQLTable bIsOpen
55414>>>
55414>>>        Move (SizeOfArray(APIIndex)) to iSize
55415>>>        If (iSize = 0) Begin
55417>>>            Function_Return True
55418>>>        End
55418>>>>
55418>>>
55418>>>        Get AutoConnectionIDLogin to bOK
55419>>>        Move False to Err
55420>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
55423>>>        If (bIsOpen = False) Begin
55425>>>            Get OpenTableExclusive hTable to bIsOpen
55426>>>            If (bIsOpen = False) Begin
55428>>>                Function_Return False
55429>>>            End
55429>>>>
55429>>>        End
55429>>>>
55429>>>
55429>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
55432>>>        Get _UtilTableIsSql hTable to bIsSQLTable
55433>>>            If (bIsSQLTable = True) Begin
55435>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
55438>>>            End
55438>>>>
55438>>>
55438>>>        Move False to Err
55439>>>        Move 0 to LastErr
55440>>>        Decrement iSize
55441>>>
55441>>>        Structure_Start hTable sDriverID
55442>>>            for iCount from 0 to iSize
55448>>>>
55448>>>//                Move False to bIsSQLPrimaryKey
55448>>>//                #IF (!@ > 180)   // DF 18.1 and up
55448>>>//                    Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55448>>>//                    Get_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable APIIndex[iCount].iIndexNumber to bIsSQLPrimaryKey
55448>>>//                    Set Error_Report_Mode to DUF_ERROR_REPORT
55448>>>//                #ENDIF
55448>>>                // We can't delete if this is a primary key index:
55448>>>//                If (bIsSQLPrimaryKey = False) Begin
55448>>>                    Move APIIndex[iCount].iIndexNumber to iIndex
55449>>>                    Delete_Index hTable iIndex
55450>>>//                    Set Error_Report_Mode to DUF_ERROR_REPORT
55450>>>//                End
55450>>>            Loop
55451>>>>
55451>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
55452>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55454>>>//        Move False to Err
55454>>>        Move 0 to LastErr
55455>>>
55455>>>        Set Action_Text of ghoStatusPanel to ""
55456>>>        Function_Return (Err = False)
55457>>>    End_Function
55458>>>
55458>>>    Function ApiIndexChangeDirection Handle hTable Integer iIndex Integer iSegment Integer iDirection Returns Boolean
55460>>>        Boolean bOK
55460>>>
55460>>>        Get AutoConnectionIDLogin to bOK
55461>>>        Move False to Err
55462>>>        Get OpenTableExclusive hTable to bOK
55463>>>        If (bOK = False) Begin
55465>>>            Function_Return False
55466>>>        End
55466>>>>
55466>>>        Structure_Start hTable
55467>>>            Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iSegment to iDirection
55470>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
55471>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55473>>>
55473>>>        Set Action_Text of ghoStatusPanel to ""
55474>>>        Function_Return (Err = False)
55475>>>    End_Function
55476>>>
55476>>>    Function ApiIndexChangeUppercase Handle hTable Integer iIndex Integer iSegment Boolean bUppercase Returns Boolean
55478>>>        Integer iCase
55478>>>        Boolean bOK
55478>>>
55478>>>        If (bUppercase = True) Begin
55480>>>            Move DF_CASE_IGNORED to iCase
55481>>>        End
55481>>>>
55481>>>        Else Begin
55482>>>            Move DF_CASE_USED to iCase
55483>>>        End
55483>>>>
55483>>>
55483>>>        Get AutoConnectionIDLogin to bOK
55484>>>        Move False to Err
55485>>>        Get OpenTableExclusive hTable to bOK
55486>>>        If (bOK = False) Begin
55488>>>            Function_Return False
55489>>>        End
55489>>>>
55489>>>        Structure_Start hTable
55490>>>            Set_Attribute DF_INDEX_SEGMENT_CASE of hTable iIndex iSegment to iCase
55493>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
55494>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55496>>>
55496>>>        Set Action_Text of ghoStatusPanel to ""
55497>>>        Function_Return (Err = False)
55498>>>    End_Function
55499>>>
55499>>>    // To delete an index
55499>>>    Function ApiIndexRemove Handle hTable Integer iIndex Returns Boolean
55501>>>        Integer iTableNo iNumSegments
55501>>>        String sDriverID
55501>>>        Boolean bOK bIsSQLTable
55501>>>
55501>>>        Get AutoConnectionIDLogin to bOK
55502>>>        Move False to Err
55503>>>        Move hTable to iTableNo
55504>>>        Get OpenTableExclusive hTable to bOK
55505>>>        If (bOK = False) Begin
55507>>>            Function_Return False
55508>>>        End
55508>>>>
55508>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
55511>>>            Get _UtilTableIsSql hTable to bIsSQLTable
55512>>>            If (bIsSQLTable = True) Begin
55514>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
55517>>>            End
55517>>>>
55517>>>
55517>>>        // Check to see if the index exists or not...
55517>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
55520>>>        If (iNumSegments = 0) Begin
55522>>>            Function_Return True // Then nothing to do.
55523>>>        End
55523>>>>
55523>>>
55523>>>        Structure_Start hTable sDriverID
55524>>>            Send Ignore_Error of Error_Object_Id DFERR_BAD_PARAMETER
55525>>>            Delete_Index iTableNo iIndex
55526>>>            Send Trap_Error of Error_Object_Id DFERR_BAD_PARAMETER
55527>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
55528>>>        Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55530>>>
55530>>>        Set Action_Text of ghoStatusPanel to ""
55531>>>        Function_Return (Err = False)
55532>>>    End_Function
55533>>>
55533>>>    // Delete an Index Segment
55533>>>    Function ApiIndexRemoveSegment Handle hTable Integer iIndex Integer iSegment Returns Boolean
55535>>>        Boolean bOK bSQLDriver bIndexTemporary bIsSQLTable
55535>>>        Integer iNumSegments iCurSegment iSegmentCase iSegmentDirection iSegmentColumn
55535>>>        Integer iIndexType
55535>>>        String sDriverID
55535>>>
55535>>>        Get AutoConnectionIDLogin to bOK
55536>>>        Move False to Err
55537>>>
55537>>>        Get OpenTableExclusive hTable to bOK
55538>>>        If (bOK = False) Begin
55540>>>            Function_Return False
55541>>>        End
55541>>>>
55541>>>
55541>>>            Get _UtilTableIsSql hTable to bIsSQLTable
55542>>>            If (bIsSQLTable = True) Begin
55544>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
55547>>>            End
55547>>>>
55547>>>
55547>>>        // Check to see if the index exists or not...
55547>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
55550>>>        If (iNumSegments = 0) Begin
55552>>>            Function_Return False
55553>>>        End
55553>>>>
55553>>>
55553>>>        Move False to bIndexTemporary
55554>>>        Get psDriverID to sDriverID
55555>>>        Get IsSQLDriver sDriverID to bSQLDriver
55556>>>        If (bSQLDriver) Begin
55558>>>           Get_Attribute DF_INDEX_TYPE of hTable iIndex to iIndexType
55561>>>                Get_Attribute DF_INDEX_TYPE to iIndexType
55564>>>                Move True to bIndexTemporary
55565>>>        End
55565>>>>
55565>>>
55565>>>        // If SQL and Temporary Index must not use Structure_Start/Structure_End
55565>>>        If (bSQLDriver = True and bIndexTemporary = True) Begin
55567>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
55570>>>            If (iSegment = iNumSegments) Begin
55572>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
55575>>>            End
55575>>>>
55575>>>            Else If (iSegment > 0 and iSegment < iNumSegments) Begin
55578>>>                For iCurSegment from iSegment to (iNumSegments - 1)
55584>>>>
55584>>>                    //*** Move index segment attributes
55584>>>                    Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment + 1) to iSegmentCase
55587>>>                    Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment + 1) to iSegmentDirection
55590>>>                    Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment + 1) to iSegmentColumn
55593>>>                    Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment       to iSegmentCase
55596>>>                    Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment       to iSegmentDirection
55599>>>                    Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment       to iSegmentColumn
55602>>>                Loop
55603>>>>
55603>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
55606>>>            End
55606>>>>
55606>>>        End
55606>>>>
55606>>>
55606>>>        Else Begin
55607>>>           Structure_Start hTable
55608>>>               Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
55611>>>               If (iSegment = iNumSegments) Begin
55613>>>                   Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
55616>>>               End
55616>>>>
55616>>>               Else If (iSegment > 0 and iSegment < iNumSegments) Begin
55619>>>                   for iCurSegment from iSegment to (iNumSegments - 1)
55625>>>>
55625>>>                       //*** Move index segment attributes
55625>>>                       Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment + 1) to iSegmentCase
55628>>>                       Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment + 1) to iSegmentDirection
55631>>>                       Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment + 1) to iSegmentColumn
55634>>>                       Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment       to iSegmentCase
55637>>>                       Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment       to iSegmentDirection
55640>>>                       Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment       to iSegmentColumn
55643>>>                   Loop
55644>>>>
55644>>>                   Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments - 1)
55647>>>               End
55647>>>>
55647>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
55648>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55650>>>            Set Action_Text of ghoStatusPanel to ""
55651>>>        End
55651>>>>
55651>>>
55651>>>        Function_Return (Err = False)
55652>>>    End_Function
55653>>>
55653>>>    // Add/Insert an Index Segment
55653>>>    Function ApiIndexInsertSegment Handle hTable Integer iIndex Integer iSegment Integer iSegmentColumn Integer iSegmentCase Integer iSegmentDirection Returns Boolean
55655>>>        Boolean bOK bSQLDriver bIndexTemporary bIsSQLTable
55655>>>        Integer iNumSegments iCurSegment iCurSegmentColumn iCurSegmentCase iCurSegmentDirection
55655>>>        Integer iIndexType
55655>>>        String sDriverId
55655>>>
55655>>>        Get AutoConnectionIDLogin to bOK
55656>>>        Move False to Err
55657>>>
55657>>>        Get OpenTableExclusive hTable to bOK
55658>>>        If (bOK = False) Begin
55660>>>            Function_Return False
55661>>>        End
55661>>>>
55661>>>
55661>>>            Get _UtilTableIsSql hTable to bIsSQLTable
55662>>>            If (bIsSQLTable = True) Begin
55664>>>                Set_Attribute DF_FILE_ALLOWED_STRUCTURE_CHANGES of hTable to ALL_TABLE_CHANGES_ALLOWED
55667>>>            End
55667>>>>
55667>>>
55667>>>        Move False to bIndexTemporary
55668>>>        // Check to see if the index exists or not...
55668>>>        Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
55671>>>        If (iNumSegments = 0) Begin
55673>>>            Function_Return False
55674>>>        End
55674>>>>
55674>>>
55674>>>        Get psDriverID to sDriverID
55675>>>        Get IsSQLDriver sDriverID to bSQLDriver
55676>>>        If (bSQLDriver) Begin
55678>>>           Get_Attribute DF_INDEX_TYPE of hTable iIndex to iIndexType
55681>>>                Get_Attribute DF_INDEX_TYPE to iIndexType
55684>>>                Move True to bIndexTemporary
55685>>>        End
55685>>>>
55685>>>
55685>>>        // If SQL and Temporary Index must not use Structure_Start/Structure_End
55685>>>        If (bSQLDriver = True and bIndexTemporary = True) Begin
55687>>>           Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
55690>>>
55690>>>           If (iSegment > iNumSegments) Begin
55692>>>               Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments + 1)
55695>>>               Move (iNumSegments + 1) to iCurSegment
55696>>>           End
55696>>>>
55696>>>           Else If (iSegment > 0 and iSegment <= iNumSegments) Begin
55699>>>               Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments + 1)
55702>>>               Move iNumSegments to iCurSegment
55703>>>
55703>>>               While (iCurSegment > iSegment)
55707>>>                   //*** Move index segment attributes
55707>>>                   Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment - 1) to iCurSegmentCase
55710>>>                   Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment - 1) to iCurSegmentDirection
55713>>>                   Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment - 1) to iSegmentColumn
55716>>>                   Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment       to iCurSegmentCase
55719>>>                   Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment       to iCurSegmentDirection
55722>>>                   Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment       to iCurSegmentColumn
55725>>>                   Decrement iCurSegment
55726>>>               Loop
55727>>>>
55727>>>
55727>>>               //*** Now set new segment attributes
55727>>>               Set_Attribute DF_INDEX_SEGMENT_CASE          of hTable iIndex iCurSegment       to iSegmentCase
55730>>>               Set_Attribute DF_INDEX_SEGMENT_DIRECTION     of hTable iIndex iCurSegment       to iSegmentDirection
55733>>>               Set_Attribute DF_INDEX_SEGMENT_FIELD         of hTable iIndex iCurSegment       to iSegment
55736>>>           End
55736>>>>
55736>>>        End
55736>>>>
55736>>>
55736>>>        Else Begin
55737>>>        Structure_Start hTable
55738>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
55741>>>
55741>>>            If (iSegment > iNumSegments) Begin
55743>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments + 1)
55746>>>                Move (iNumSegments + 1) to iCurSegment
55747>>>            End
55747>>>>
55747>>>            Else If (iSegment > 0 and iSegment <= iNumSegments) Begin
55750>>>                Set_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to (iNumSegments + 1)
55753>>>                Move iNumSegments to iCurSegment
55754>>>
55754>>>                While (iCurSegment > iSegment)
55758>>>                    //*** Move index segment attributes
55758>>>                    Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex (iCurSegment - 1) to iSegmentCase
55761>>>                    Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex (iCurSegment - 1) to iSegmentDirection
55764>>>                    Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex (iCurSegment - 1) to iSegmentColumn
55767>>>                    Set_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iCurSegment       to iSegmentCase
55770>>>                    Set_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iCurSegment       to iSegmentDirection
55773>>>                    Set_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iCurSegment       to iSegmentColumn
55776>>>                    Decrement iCurSegment
55777>>>                Loop
55778>>>>
55778>>>
55778>>>                //*** Now set new segment attributes
55778>>>                Set_Attribute DF_INDEX_SEGMENT_CASE          of hTable iIndex iCurSegment       to iSegmentCase
55781>>>                Set_Attribute DF_INDEX_SEGMENT_DIRECTION     of hTable iIndex iCurSegment       to iSegmentDirection
55784>>>                Set_Attribute DF_INDEX_SEGMENT_FIELD         of hTable iIndex iCurSegment       to iSegment
55787>>>            End
55787>>>>
55787>>>            Set Action_Text of ghoStatusPanel to "Restructures table..."
55788>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
55790>>>            Set Action_Text of ghoStatusPanel to ""
55791>>>        End
55791>>>>
55791>>>
55791>>>        Function_Return (Err = False)
55792>>>    End_Function
55793>>>
55793>>>    // * Dummy function for the Studio's Code Explorer *
55793>>>    Function TABLE_UTILITY_FUNCTIONS Returns Boolean
55795>>>        Function_Return False
55796>>>    End_Function  
55797>>>    
55797>>>    // Preparation message before an SQL onversion. It will check and wash all embedded data tables and prepare them
55797>>>    // for an SQL conversion.
55797>>>    Function UtilPrepareDataFolderForSQLConversion Boolean bMoveMiscFilesToBackup Boolean bFixALLBogusFilelistEntries Boolean bConvertTo30Format Boolean bRepairAndReindex Boolean bFixBogusDates Returns Boolean
55799>>>        Boolean bConvertTo30FormatbOK bRepairAndReindexOK bFixBogusDatesOK bMoveMiscFilesToBackupOK
55799>>>        
55799>>>        Move True to bConvertTo30FormatbOK
55800>>>        Move True to bRepairAndReindexOK
55801>>>        Move True to bFixBogusDatesOK
55802>>>        Move True to bMoveMiscFilesToBackupOK
55803>>>        
55803>>>        If (bMoveMiscFilesToBackup = True) Begin   
55805>>>            Set Message_Text of ghoStatusPanel to "Moving misc. files to backup..."
55806>>>            Get UtilMoveMiscFilesToBackupFolder to bMoveMiscFilesToBackupOK
55807>>>        End                                                                                
55807>>>>
55807>>>        If (bFixALLBogusFilelistEntries = True) Begin
55809>>>            Set Message_Text of ghoStatusPanel to "Fixing bogus Filelist.cfg entries..."
55810>>>            Get UtilTableFixALLBogusFilelistEntries to bFixALLBogusFilelistEntries
55811>>>        End
55811>>>>
55811>>>        If (bConvertTo30Format = True) Begin
55813>>>            Set Message_Text of ghoStatusPanel to "Converting .dat files from 2.3->..."
55814>>>            Get UtilTableConvertALLTablesFrom23Format to bConvertTo30FormatbOK
55815>>>        End                                                 
55815>>>>
55815>>>        If (bRepairAndReindex = True) Begin
55817>>>            Set Message_Text of ghoStatusPanel to "Repairing and reindexing..."
55818>>>            Get UtilTableRepairAndReindexALL to bRepairAndReindexOK
55819>>>        End  
55819>>>>
55819>>>        If (bFixBogusDates = True) Begin
55821>>>            Set Message_Text of ghoStatusPanel to "Fixing bogus date values..."
55822>>>            Get UtilTablesFixAllDateBogusValues True False to bFixBogusDatesOK
55823>>>        End                                    
55823>>>>
55823>>>        
55823>>>        Function_Return (bConvertTo30FormatbOK = True and bFixALLBogusFilelistEntries = True and bRepairAndReindexOK = True and bFixBogusDatesOK = True and bMoveMiscFilesToBackupOK = True)
55824>>>    End_Function
55825>>>
55825>>>    Function UtilTableConvertALLTablesFrom23Format Returns Boolean
55827>>>        Boolean bOK bFlexErrs bTemp
55827>>>        Handle hTable
55827>>>        String sTableName
55827>>>        Integer iCount iSize
55827>>>        
55827>>>        Move True to bOK
55828>>>        Move 0 to hTable    
55829>>>
55829>>>        Get UtilFilelistNoOfTables to iSize
55830>>>        Set pbVisible    of ghoProgressBarOverall to True
55831>>>        Set piPosition   of ghoProgressBarOverall to 0
55832>>>        Set piMaximum    of ghoProgressBarOverall to iSize
55833>>>        Set piAdvanceBy  of ghoProgressBarOverall to 1
55834>>>
55834>>>        Repeat
55834>>>>
55834>>>            Set Action_Text of ghoStatusPanel to "Checking if table is in 2.3 format..."
55835>>>            Set piPosition of ghoProgressBarOverall to iCount  
55836>>>            Increment iCount
55837>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
55840>>>            If (hTable > 0) Begin
55842>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
55845>>>                Move (Uppercase(sTableName) = "FLEXERRS")  to bFlexErrs
55846>>>                If (bFlexErrs = False) Begin
55848>>>                    Get UtilTableConvertFrom23Format hTable to bTemp
55849>>>                    If (bTemp = False) Begin
55851>>>                        Move False to bOK
55852>>>                    End
55852>>>>
55852>>>                End
55852>>>>
55852>>>            End
55852>>>>
55852>>>        Until (hTable = 0)
55854>>>        
55854>>>        Set Action_Text of ghoStatusPanel to ""
55855>>>        Function_Return bOK
55856>>>    End_Function
55857>>>    
55857>>>    // Converts an embedded table from 2.3 -> 3.0.
55857>>>    // Returns: FALSE only if the table can't be opened or the conversion fails.
55857>>>    // It will return a TRUE if successful or the table is an SQL table.
55857>>>    Function UtilTableConvertFrom23Format Handle hTable Returns Boolean
55859>>>        Boolean bOK bIsEmbedded bIsAlias
55859>>>        String sRevision
55859>>>        
55859>>>        Get AutoConnectionIDLogin to bOK
55860>>>        If (bOK = False) Begin
55862>>>            Function_Return True
55863>>>        End
55863>>>>
55863>>>        Get OpenTableExclusive hTable to bOK
55864>>>        If (bOK = False) Begin
55866>>>            Function_Return True
55867>>>        End
55867>>>>
55867>>>        Get _UtilTableIsEmbedded hTable to bIsEmbedded
55868>>>        If (bIsEmbedded = False) Begin
55870>>>            Function_Return True
55871>>>        End                             
55871>>>>
55871>>>        Get UtilTableIsAlias hTable to bIsAlias
55872>>>        If (bIsAlias = True) Begin
55874>>>            Function_Return True
55875>>>        End                     
55875>>>>
55875>>>        
55875>>>        Move False to Err
55876>>>        Get_Attribute DF_FILE_REVISION of hTable to sRevision
55879>>>        If (sRevision contains "2.3") Begin
55881>>>            Move False to Err
55882>>>            Set Private.phCurrentTable to hTable
55883>>>            Structure_Start hTable    
55884>>>                Set_Attribute DF_FILE_INTEGRITY_CHECK of hTable to True
55887>>>                Set Action_Text of ghoStatusPanel to "Restructures table to 3.0/4.0"
55888>>>            Structure_End hTable DF_STRUCTEND_OPT_FORCE "." ghoDbUpdateHandler
55890>>>            Set Action_Text of ghoStatusPanel to ""
55891>>>        End
55891>>>>
55891>>>        
55891>>>        Function_Return (Err = False)
55892>>>    End_Function
55893>>>
55893>>>    Function UtilTableFixALLBogusFilelistEntries Returns Boolean
55895>>>        Boolean bIgnore bExists bOK bResponse
55895>>>        Handle hTable   
55895>>>        String sTableName
55895>>>        
55895>>>        Move False to Err 
55896>>>        Move True to bOK
55897>>>        Move 0 to hTable
55898>>>        Repeat
55898>>>>
55898>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
55901>>>            If (hTable > 0) Begin
55903>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
55906>>>                Move (Uppercase(sTableName) = "FLEXERRS" or Uppercase(sTableName) = "CODETYPE" or Uppercase(sTableName) = "CODEMAST")  to bIgnore
55907>>>                If (bIgnore = False) Begin
55909>>>                    Get _UtilTableExists hTable to bExists
55910>>>                    If (bExists = False) Begin
55912>>>                        Get ApiTableChangeFileListSlot "" "" "" hTable DATAFLEX_ID to bResponse
55913>>>                        If (bResponse = False) Begin
55915>>>                            Move False to bOK
55916>>>                        End
55916>>>>
55916>>>                        
55916>>>                    End
55916>>>>
55916>>>                End
55916>>>>
55916>>>            End
55916>>>>
55916>>>        Until (hTable = 0)                     
55918>>>        
55918>>>        Set Action_Text of ghoStatusPanel to "" 
55919>>>        Function_Return bOK
55920>>>    End_Function
55921>>>    
55921>>>    // Replaces all date values with CS_DUFLowestAllowedDateValue for all tables in Filelist.cfg,
55921>>>    // _except_ those tables that has been excluded with the "ApiTableDateCorrectionAddException" message.
55921>>>    // If the passed bAllowZeroDates = True, date columns that are = 0 will not be changed.
55921>>>    // This is for prepairing embedded tables (*.dat) before an SQL conversion.
55921>>>    //
55921>>>    // The root of the problem is the following:
55921>>>    // The data type Date in SQL has a range of accepted values from 01-01-0001 through 12-31-9999
55921>>>    // while the data type DateTime has a range of accepted values from 01-01-1753 through 12-31-9999
55921>>>    // So if you happen to have a Date from before 1753, or an empty / NULL value - this will be outside
55921>>>    // the range that DateTime can handle and if you then try to change a Date column to a DateTime,
55921>>>    // an SQL error will be thrown;
55921>>>    // "The conversion of a date data type to a datetime data type resulted in an out-of-range value".
55921>>>    Function UtilTablesFixAllDateBogusValues Boolean bFixZeroDates Boolean bResetIndexesToOnLine Returns Boolean
55923>>>        Boolean bOK bIsAlias bIsSQL
55923>>>        Integer iCount iSize iDateSize
55923>>>        Handle hTable
55923>>>        String sLogicalName
55923>>>        Integer[] aTablesToCheck aDateFields
55925>>>
55925>>>        Get _AllTablesDateCorrections to aTablesToCheck
55926>>>        Move (SizeOfArray(aTablesToCheck)) to iSize
55927>>>        Set pbVisible    of ghoProgressBarOverall to True
55928>>>        Set piPosition   of ghoProgressBarOverall to 0
55929>>>        Set piMaximum    of ghoProgressBarOverall to iSize
55930>>>        Set piAdvanceBy  of ghoProgressBarOverall to 1
55931>>>
55931>>>        Move True to bOK
55932>>>        Decrement iSize
55933>>>        for iCount from 0 to iSize
55939>>>>
55939>>>            Move aTablesToCheck[iCount] to hTable
55940>>>            Set piPosition of ghoProgressBarOverall to iCount
55941>>>            Get UtilTableIsAlias hTable to bIsAlias
55942>>>            Get _UtilTableIsSql   hTable to bIsSQL
55943>>>
55943>>>            Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
55946>>>            Set TableName_Text of ghoStatusPanel to ("Processing Table Number:" * String(hTable) * "Name:" * String(sLogicalName))
55947>>>            Set Message_Text of ghoStatusPanel to "Fixing bogus date values..."
55948>>>
55948>>>            If (bIsAlias = False and bIsSQL = False) Begin
55950>>>                Get UtilCheckForDateFields hTable to aDateFields
55951>>>                Move (SizeOfArray(aDateFields)) to iDateSize
55952>>>                If (iDateSize > 0) Begin
55954>>>                    Get UtilTableCorrectBogusDateValues hTable aDateFields bFixZeroDates bResetIndexesToOnLine to bOK
55955>>>                    Close hTable
55956>>>                End
55956>>>>
55956>>>            End
55956>>>>
55956>>>        Loop
55957>>>>
55957>>>
55957>>>        Close DF_ALL
55958>>>        Function_Return bOK
55959>>>    End_Function
55960>>>
55960>>>    // Returns all fields of type Date or DateTime in an integer array with the field numbers.
55960>>>    Function UtilCheckForDateFields Handle hTable Returns Integer[]
55962>>>        Integer[] aDateFields aDateFieldsEmpty
55964>>>        Integer iSize iCount iType
55964>>>        Boolean bOpen bOK
55964>>>        
55964>>>        Get _UtilTableExists hTable to bOK
55965>>>        If (bOK = False) Begin
55967>>>            Set Private.phCurrentTable to hTable
55968>>>            Error DFERR_PROGRAM "Table exists in Filelist.cfg but not on disk or SQL back-end."
55969>>>>
55969>>>            Function_Return aDateFieldsEmpty
55970>>>        End
55970>>>>
55970>>>        Set Private.phCurrentTable to hTable
55971>>>        Set Private.piCurrentField to 0
55972>>>
55972>>>//        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
55972>>>        Open hTable
55974>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
55977>>>//        Set Error_Report_Mode to DUF_ERROR_REPORT
55977>>>        If (bOpen = False) Begin
55979>>>//            Error DFERR_PROGRAM ("Table could not be opened." * String(hTable))
55979>>>            Function_Return aDateFieldsEmpty
55980>>>        End
55980>>>>
55980>>>
55980>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iSize
55983>>>        For iCount from 1 to iSize
55989>>>>
55989>>>            Get_Attribute DF_FIELD_TYPE of hTable iCount to iType
55992>>>            If (iType = DF_DATE or iType = DF_DATETIME) Begin
55994>>>                Move iCount to aDateFields[SizeOfArray(aDateFields)]
55995>>>            End
55995>>>>
55995>>>        Loop
55996>>>>
55996>>>
55996>>>        Function_Return aDateFields
55997>>>    End_Function
55998>>>
55998>>>    // Loops through all records for the passed hTable, and checks that all Date values
55998>>>    // for the passed aDateFields array are OK. Else the Data value is set to CS_DUFLowestAllowedDateValue
55998>>>    // and the record is saved
55998>>>    // If the passed bAllowZeroDates = True, date columns that are = 0 will not be changed.
55998>>>    // Note: It first sets all indexes to BATCH and reset them at the end.
55998>>>    Function UtilTableCorrectBogusDateValues Handle hTable Integer[] aDateFields Boolean bFixZeroDates Boolean bResetIndexesToOnLine Returns Boolean
56000>>>        Integer iSize iCount iField iRecord iTotalRecords iDateFormat iDriverIndex
56000>>>        String sDriverID sDateMin
56000>>>        Boolean bCancel bFound bOK bChange bOpened bSaveChanges 
56000>>>        Date dDate dDateMin
56000>>>        Integer[] iaChangeField
56001>>>
56001>>>        Get _UtilTableExists hTable to bOK
56002>>>        // I believe we should just skip files not found and not report an error.
56002>>>        // This is because a filelist may have entries but no files/tables on disk, but
56002>>>        // this may be adjusted by other calls to DUF in a later update package. 
56002>>>        // Especially considering that this call is probably done at the very
56002>>>        // beginning of a DUF update.
56002>>>        If (bOK = False) Begin
56004>>>//            Set Private.phCurrentTable to hTable
56004>>>//            Error DFERR_PROGRAM "Table exists in Filelist.cfg but not on disk or SQL back-end."
56004>>>//            Function_Return False
56004>>>            Function_Return True
56005>>>        End
56005>>>>
56005>>>
56005>>>        // The CS_DUFLowestAllowedDateValue is defined as "01/01/1753", so we first set the
56005>>>        // date format to "USA" = "MM/DD/YYYY"
56005>>>        Get_Attribute DF_DATE_FORMAT to iDateFormat
56008>>>        Set_Attribute DF_DATE_FORMAT to DF_DATE_USA
56011>>>
56011>>>//        Send SetAllIndexesToBatch hTable True
56011>>>        Open hTable
56013>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
56016>>>        If (bOpened = False) Begin
56018>>>            Function_Return False
56019>>>        End
56019>>>>
56019>>>        
56019>>>        Set Private.phCurrentTable to hTable
56020>>>        Move 0 to iRecord
56021>>>        Move (SizeOfArray(aDateFields)) to iSize
56022>>>        Decrement iSize
56023>>>
56023>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
56026>>>        Get DriverIndex sDriverID to iDriverIndex
56027>>>        If (iDriverIndex <> 0) Begin
56029>>>            Get_Attribute DF_DRIVER_DUMMY_ZERO_DATE_VALUE of iDriverIndex to sDateMin
56032>>>            If (sDateMin = "") Begin
56034>>>                Move CS_DUFLowestAllowedDateValue to dDateMin
56035>>>            End
56035>>>>
56035>>>            Else Begin
56036>>>                If (IsDate(sDateMin)) Begin
56038>>>                    Move sDateMin to dDateMin
56039>>>                End
56039>>>>
56039>>>                Else Begin
56040>>>                    Move CS_DUFLowestAllowedDateValue to dDateMin
56041>>>                End
56041>>>>
56041>>>            End
56041>>>>
56041>>>        End
56041>>>>
56041>>>        Else Begin
56042>>>            Move CS_DUFLowestAllowedDateValue to dDateMin
56043>>>        End
56043>>>>
56043>>>
56043>>>        Get_Attribute DF_FILE_RECORDS_USED of hTable to iTotalRecords
56046>>>        Set piPosition   of ghoProgressBar to 0
56047>>>        Set piAdvanceBy  of ghoProgressBar to 100
56048>>>        Set piMaximum    of ghoProgressBar to iTotalRecords
56049>>>        Move False to Err
56050>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
56051>>>
56051>>>        Clear hTable
56052>>>        Repeat
56052>>>>
56052>>>            Vfind hTable 0 GT
56054>>>            Move Found to bFound
56055>>>            If (bFound = True) Begin
56057>>>                Move False to bSaveChanges
56058>>>                Move (ResizeArray(iaChangeField, 0)) to iaChangeField
56059>>>                Move (SizeOfArray(aDateFields)) to iSize
56060>>>                Decrement iSize
56061>>>                For iCount from 0 to iSize
56067>>>>
56067>>>                    Move aDateFields[iCount] to iField
56068>>>                    Get_Field_Value hTable iField to dDate
56071>>>                    If (bFixZeroDates = True) Begin
56073>>>                        Move (dDate = 0 or dDate < dDateMin) to bChange
56074>>>                    End
56074>>>>
56074>>>                    Else Begin
56075>>>                        Move (dDate <> 0 and dDate < dDateMin) to bChange
56076>>>                    End
56076>>>>
56076>>>                    If (bChange = True) Begin
56078>>>                        Move iField to iaChangeField[SizeOfArray(iaChangeField)]
56079>>>                    End
56079>>>>
56079>>>                Loop
56080>>>>
56080>>>
56080>>>                // Only change Date fields that needs to be changed.
56080>>>                If (SizeOfArray(iaChangeField)) Begin
56082>>>                    Reread hTable
56086>>>                        Move (SizeOfArray(iaChangeField)) to iSize
56087>>>                        Decrement iSize
56088>>>                        For iCount from 0 to iSize
56094>>>>
56094>>>                            Move iaChangeField[iCount] to iField
56095>>>                            Set Private.piCurrentField to iField
56096>>>                            Set_Field_Value hTable iField to dDateMin
56099>>>                        Loop
56100>>>>
56100>>>                        Move False to Err
56101>>>                        SaveRecord hTable
56102>>>                    Unlock
56103>>>>
56103>>>                End
56103>>>>
56103>>>
56103>>>                Increment iRecord
56104>>>                // Increment the StatusPanel counter and check the
56104>>>                // cancel status every 100 records rather than every
56104>>>                // record, it's way faster.
56104>>>                If (Mod(iRecord, 100) = 0) Begin
56106>>>                    Send DoAdvance of ghoProgressBar
56107>>>                    Set Action_Text of ghoStatusPanel to ("Record:" * String(iRecord))
56108>>>                    Get Check_StatusPanel of ghoStatusPanel to bCancel
56109>>>                End
56109>>>>
56109>>>            End
56109>>>>
56109>>>        Until (bFound = False)
56111>>>
56111>>>        Set_Attribute DF_DATE_FORMAT to iDateFormat
56114>>>        If (bResetIndexesToOnLine = True) Begin
56116>>>            Send SetAllIndexesToBatch hTable False
56117>>>        End
56117>>>>
56117>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
56118>>>
56118>>>        Function_Return (Err = False)
56119>>>    End_Function
56120>>>
56120>>>    // Compares the RootName, LogicalName & DisplayName and returns True if they are equal.
56120>>>    // Note that it first removes any driver prefixes in the rootname.
56120>>>    Function UtilTableInfoCompare Boolean bCompareFilelistUppercase tAPITableNameInfoCompare APITableInfoCompare Returns Boolean
56122>>>        Boolean bIsSame
56122>>>        String sRootNameFrom sRootNameTo sLogicalNameFrom sLogicalNameTo sDisplayNameFrom sDisplayNameTo
56122>>>
56122>>>        Get _TableNoPrefix APITableInfoCompare.sRootNameFrom    to sRootNameFrom
56123>>>        Get _TableNoPrefix APITableInfoCompare.sRootNameTo      to sRootNameTo
56124>>>        Move APITableInfoCompare.sLogicalNameFrom               to sLogicalNameFrom
56125>>>        Move APITableInfoCompare.sLogicalNameTo                 to sLogicalNameTo
56126>>>        Get _TableNoPrefix APITableInfoCompare.sDisplayNameFrom to sDisplayNameFrom
56127>>>        Get _TableNoPrefix APITableInfoCompare.sDisplayNameTo   to sDisplayNameTo
56128>>>
56128>>>        If (bCompareFilelistUppercase = True) Begin
56130>>>            Move (Uppercase(sRootNameFrom) = Uppercase(sRootNameTo) and Uppercase(sLogicalNameFrom) = Uppercase(sLogicalNameTo)) to bIsSame
56131>>>        End
56131>>>>
56131>>>        Else Begin
56132>>>            Move (sRootNameFrom = sRootNameTo and sLogicalNameFrom = sLogicalNameTo and sDisplayNameFrom = sDisplayNameTo) to bIsSame
56133>>>        End
56133>>>>
56133>>>        If (bIsSame = False) Begin
56135>>>            Function_Return False
56136>>>        End
56136>>>>
56136>>>
56136>>>        Move (APITableInfoCompare.bIsAliasFrom = APITableInfoCompare.bIsAliasTo) to bIsSame
56137>>>        If (bIsSame = False) Begin
56139>>>            Function_Return False
56140>>>        End
56140>>>>
56140>>>
56140>>>        Move (APITableInfoCompare.bIsSQLFrom = APITableInfoCompare.bIsSQLTo) to bIsSame
56141>>>        If (bIsSame = False) Begin
56143>>>            Function_Return False
56144>>>        End
56144>>>>
56144>>>
56144>>>        Move (APITableInfoCompare.bIsSystemFileFrom = APITableInfoCompare.bIsSystemFileTo) to bIsSame
56145>>>        If (bIsSame = False) Begin
56147>>>            Function_Return False
56148>>>        End
56148>>>>
56148>>>
56148>>>        Function_Return bIsSame
56149>>>    End_Function
56150>>>
56150>>>    Function UtilTableCompare tAPITable APITableFrom tAPITable APITableTo Boolean bCodeGenerateMode Boolean ByRef bFilelistError Returns Boolean
56152>>>        Handle hTableFrom hTableTo
56152>>>        Boolean bIsSame bIsSQLFrom bIsSQLTo
56152>>>        Boolean bCompareDate_DateTime bCompareIndexAscending bCompareIndexUppercase
56152>>>        String sRootName sDriverIDFrom sDriverIDTo
56152>>>        tAPIColumnCompare[]   aAPIColumnCompare
56152>>>        tAPIColumnCompare[]   aAPIColumnCompare
56153>>>        tAPIIndexCompare[]    aAPIIndexCompare
56153>>>        tAPIIndexCompare[]    aAPIIndexCompare
56154>>>        tAPIRelationCompare[] aAPIRelationCompare
56154>>>        tAPIRelationCompare[] aAPIRelationCompare
56155>>>
56155>>>        Move (IsSameStruct(APITableFrom, APITableTo)) to bIsSame
56156>>>        If (bIsSame = True) Begin
56158>>>            Function_Return True
56159>>>        End
56159>>>>
56159>>>
56159>>>        Move False to bFilelistError
56160>>>        Move True to bIsSame
56161>>>        Get pbCompareDate_DateTime  to bCompareDate_DateTime
56162>>>        Get pbCompareIndexAscending to bCompareIndexAscending
56163>>>        Get pbCompareIndexUppercase to bCompareIndexUppercase
56164>>>        Move APITableFrom.ApiTableInfo.iTableNumber to hTableFrom
56165>>>        Move APITableTo.ApiTableInfo.iTableNumber   to hTableTo
56166>>>
56166>>>        Move APITableFrom.ApiTableInfo.sRootName to sRootName
56167>>>        Get _TableNameOnly sRootName             to sRootName
56168>>>        Move sRootName to APITableTo.ApiTableInfo.sRootName
56169>>>
56169>>>        // First we need to check that the logical table names are the same (so the order of tables in the Filelist.cfg is the same).
56169>>>        // bCodeGenerateMode = True = Code Generation mode.
56169>>>        If (bCodeGenerateMode = True) Begin
56171>>>            // If table doesn't exist in the TO database we want to create 'ApiTableUpdate' code for it.
56171>>>            If (Trim(Uppercase(APITableTo.ApiTableInfo.sLogicalName)) = "") Begin
56173>>>                Function_Return False
56174>>>            End
56174>>>>
56174>>>            Move (Trim(Uppercase(APITableFrom.ApiTableInfo.sLogicalName)) = Trim(Uppercase(APITableTo.ApiTableInfo.sLogicalName))) to bIsSame
56175>>>            If (bIsSame = False) Begin
56177>>>                Send UserError ("Yikes! There is a serious problem with the Filelist.cfg slot number:" * String(hTableFrom) + ".\nThe FROM table logical name is:" * String(APITableFrom.ApiTableInfo.sLogicalName) * "\nwhile the TO table logical name is:" * String(APITableTo.ApiTableInfo.sLogicalName) * ".\nThis needs to be fixed before you can generate code for this table number.")
56178>>>                Move True to bFilelistError
56179>>>                Function_Return False
56180>>>            End
56180>>>>
56180>>>        End
56180>>>>
56180>>>
56180>>>        If (bCodeGenerateMode = False) Begin
56182>>>            // Then we want to create this table
56182>>>            If (Trim(Uppercase(APITableTo.ApiTableInfo.sLogicalName)) = "") Begin
56184>>>                Function_Return False
56185>>>            End
56185>>>>
56185>>>
56185>>>            Move (Trim(Uppercase(APITableFrom.ApiTableInfo.sLogicalName)) = Trim(Uppercase(APITableTo.ApiTableInfo.sLogicalName))) to bIsSame
56186>>>            If (bIsSame = False) Begin
56188>>>                Error DFERR_PROGRAM ("'UtilTableCompare function' problem in Filelist.cfg! Table No:" * String(hTableFrom) + ".\nThe FROM table logical name is:" * String(APITableFrom.ApiTableInfo.sLogicalName) * "\nwhile the TO table logical name is:" * String(APITableTo.ApiTableInfo.sLogicalName) * "No changes was made for this entry.")
56189>>>>
56189>>>                Move True to bFilelistError
56190>>>                Function_Return False
56191>>>            End
56191>>>>
56191>>>        End
56191>>>>
56191>>>
56191>>>        // Check columns:
56191>>>        Move APITableFrom.ApiTableInfo.iTableNumber to hTableFrom
56192>>>        Move APITableFrom.ApiTableInfo.bIsSQL       to bIsSQLFrom
56193>>>        Move APITableFrom.ApiTableInfo.sDriverID    to sDriverIDFrom
56194>>>        Move APITableTo.ApiTableInfo.iTableNumber   to hTableTo
56195>>>        Move APITableTo.ApiTableInfo.bIsSQL         to bIsSQLTo
56196>>>        Move APITableTo.ApiTableInfo.sDriverID      to sDriverIDTo
56197>>>        Get UtilColumnsStructFill hTableTo          to APITableTo.aApiColumns
56198>>>        Get UtilColumnCombineFromAndToArrays APITableFrom.aApiColumns APITableTo.aApiColumns to aAPIColumnCompare
56199>>>        Get UtilColumnsCompare sDriverIDFrom sDriverIDTo bIsSQLFrom bIsSQLTo aAPIColumnCompare bCompareDate_DateTime to bIsSame
56200>>>        If (bIsSame = False) Begin
56202>>>            Function_Return False
56203>>>        End
56203>>>>
56203>>>
56203>>>        // ...then check indexes:
56203>>>        Get UtilIndexesStructFill hTableFrom to APITableTo.aApiIndexes
56204>>>        Get UtilIndexCombineFromAndToArrays APITableFrom.aApiIndexes APITableTo.aApiIndexes to aAPIIndexCompare
56205>>>        Get UtilIndexesCompare bIsSQLFrom bIsSQLTo aAPIIndexCompare bCompareIndexUppercase bCompareIndexAscending to bIsSame
56206>>>        If (bIsSame = False) Begin
56208>>>            Function_Return False
56209>>>        End
56209>>>>
56209>>>
56209>>>        // ...and finally relationships:
56209>>>        Get UtilRelationsStructFill hTableFrom to APITableTo.aApiRelations
56210>>>        Get UtilRelationCombineFromAndToArrays APITableFrom.aApiRelations APITableTo.aApiRelations to aAPIRelationCompare
56211>>>        Move (IsSameArray(APITableFrom.aApiRelations, APITableTo.aApiRelations)) to bIsSame
56212>>>        Get UtilRelationsCompare hTableFrom aAPIRelationCompare to bIsSame
56213>>>
56213>>>        Function_Return (bIsSame = True)
56214>>>    End_Function
56215>>>
56215>>>    // Similar to UtilTableCompare, but takes a tAPITableCompare struct array and a tAPITableBooleans struct as params.
56215>>>    Function UtilTableCompare_Ex tAPITableCompare APITableCompare tAPITableBooleans CompareTableBooleans Boolean bCodeGenerateMode Boolean ByRef bFilelistError Returns Boolean
56217>>>        Handle hTable
56217>>>        Boolean bIsSame bIsSQLFrom bIsSQLTo
56217>>>        String sRootName sDriverIDFrom sDriverIDTo
56217>>>
56217>>>        If (APITableCompare.APITableNameInfoCompare.bExistsFrom = False and APITableCompare.APITableNameInfoCompare.bExistsTo = False) Begin
56219>>>            Move True to bFilelistError
56220>>>            Function_Return False
56221>>>        End
56221>>>>
56221>>>
56221>>>        Move APITableCompare.hTable to hTable
56222>>>        Move True  to bIsSame
56223>>>        Move False to bFilelistError
56224>>>
56224>>>        If (APITableCompare.bExistsFrom = True) Begin
56226>>>            Move APITableCompare.APITableNameInfoCompare.sRootNameFrom to sRootName
56227>>>        End
56227>>>>
56227>>>        Else Begin
56228>>>            Move APITableCompare.APITableNameInfoCompare.sRootNameTo   to sRootName
56229>>>        End
56229>>>>
56229>>>        Get _TableNameOnly sRootName                                   to sRootName
56230>>>
56230>>>        Move APITableCompare.APITableNameInfoCompare.sDriverIDFrom     to sDriverIDFrom
56231>>>        Move APITableCompare.APITableNameInfoCompare.sDriverIDTo       to sDriverIDTo
56232>>>        Move APITableCompare.APITableNameInfoCompare.bIsSQLFrom        to bIsSQLFrom
56233>>>        Move APITableCompare.APITableNameInfoCompare.bIsSQLTo          to bIsSQLTo
56234>>>
56234>>>        // First we need to check that the logical table names are the same (so the order of tables in the Filelist.cfg are the same).
56234>>>        // bCodeGenerateMode = True = Code Generation mode.
56234>>>        If (bCodeGenerateMode = True) Begin
56236>>>            // If table doesn't exist in the TO database we want to create 'ApiTableUpdate' code for it.
56236>>>            If (APITableCompare.bExistsTo = False) Begin
56238>>>                Function_Return False
56239>>>            End
56239>>>>
56239>>>            Move (Uppercase(APITableCompare.APITableNameInfoCompare.sLogicalNameFrom) = Uppercase(APITableCompare.APITableNameInfoCompare.sLogicalNameTo)) to bIsSame
56240>>>            If (bIsSame = False) Begin
56242>>>                Send UserError ("Yikes! There is a problem with the Filelist.cfg slot number:" * String(hTable) + ;                    ".\nThe FROM table logical name is:" * String(APITableCompare.APITableNameInfoCompare.sLogicalNameFrom) * "\nwhile the TO table logical name is:" * ;                    String(APITableCompare.APITableNameInfoCompare.sLogicalNameTo) * ".\nThis needs to be fixed before you can generate code for this table number.")
56243>>>                Move True to bFilelistError
56244>>>                Function_Return False
56245>>>            End
56245>>>>
56245>>>        End
56245>>>>
56245>>>
56245>>>        If (bCodeGenerateMode = False) Begin
56247>>>            If (APITableCompare.bExistsTo = False) Begin
56249>>>                // Then we might want to create this table
56249>>>                Function_Return False
56250>>>            End
56250>>>>
56250>>>
56250>>>            Move (APITableCompare.APITableNameInfoCompare.bIsAliasFrom = APITableCompare.APITableNameInfoCompare.bIsAliasTo) to bIsSame
56251>>>            If (bIsSame = False) Begin
56253>>>                Function_Return False
56254>>>            End
56254>>>>
56254>>>
56254>>>            Move (APITableCompare.APITableNameInfoCompare.bIsSQLFrom = APITableCompare.APITableNameInfoCompare.bIsSQLTo) to bIsSame
56255>>>            If (bIsSame = False) Begin
56257>>>                Function_Return False
56258>>>            End
56258>>>>
56258>>>
56258>>>            Move (APITableCompare.APITableNameInfoCompare.bIsSystemFileFrom = APITableCompare.APITableNameInfoCompare.bIsSystemFileTo) to bIsSame
56259>>>            If (bIsSame = False) Begin
56261>>>                Function_Return False
56262>>>            End
56262>>>>
56262>>>
56262>>>            // Check table names et al.
56262>>>            Get UtilTableInfoCompare CompareTableBooleans.bCompareFilelistUppercase APITableCompare.APITableNameInfoCompare to bIsSame
56263>>>            If (bIsSame = False) Begin
56265>>>                Function_Return False
56266>>>            End
56266>>>>
56266>>>        End
56266>>>>
56266>>>
56266>>>        // Check Columns:
56266>>>        Get UtilColumnsCompare sDriverIDFrom sDriverIDTo bIsSQLFrom bIsSQLTo APITableCompare.aAPIColumnsCompare CompareTableBooleans.bCompareDate_DateTime to bIsSame
56267>>>        If (bIsSame = False) Begin
56269>>>            Function_Return False
56270>>>        End
56270>>>>
56270>>>
56270>>>        // ...then check Indexes:
56270>>>        Get UtilIndexesCompare bIsSQLFrom bIsSQLTo APITableCompare.aAPIIndexesCompare CompareTableBooleans.bCompareIndexUppercase CompareTableBooleans.bCompareIndexAscending to bIsSame
56271>>>        If (bIsSame = False) Begin
56273>>>            Function_Return False
56274>>>        End
56274>>>>
56274>>>
56274>>>        // ...and finally Relationships:
56274>>>        Get UtilRelationsCompare hTable APITableCompare.aAPIRelationsCompare to bIsSame
56275>>>
56275>>>        Function_Return (bIsSame = True)
56276>>>    End_Function
56277>>>
56277>>>    // To fill a complete Table array structure (tAPITable[]) with data.
56277>>>    // The data + filelist.cfg path, login et al must have been setup properly first.
56277>>>    // Pass a True as first parameter if the ghoStatusPanel is active and progress info should be shown.
56277>>>    // Pass a second True if this is a comparison and the text should either reflect "FROM" or "TO" database.
56277>>>    Function UtilTablesStructArrayFill Boolean bStatusPanel Boolean bCompareUtil Boolean bFromTables Returns tAPITable[]
56279>>>        tAPITableNameInfo ApiTableNameInfo
56279>>>        tAPITableNameInfo ApiTableNameInfo
56279>>>        tAPITable[]     aApiTables aApiTablesEmpty
56279>>>        tAPITable[]     aApiTables aApiTablesEmpty
56281>>>        tAPIColumn[]    aApiColumns
56281>>>        tAPIColumn[]    aApiColumns
56282>>>        tAPIIndex[]     aApiIndexes
56282>>>        tAPIIndex[]     aApiIndexes
56283>>>        tAPIRelation[]  aApiRelations
56283>>>        tAPIRelation[]  aApiRelations
56284>>>        Handle hTable
56284>>>        Integer iCount
56284>>>        Boolean bUserCancel bOK
56284>>>        String sLogicalName sMessageText
56284>>>
56284>>>        Get AutoConnectionIDLogin to bOK
56285>>>        Move 0 to hTable
56286>>>        If (bFromTables = True) Begin
56288>>>            Move "Reading 'FROM' Table Structure:" to sMessageText
56289>>>            If (bCompareUtil = True) Begin
56291>>>                Move (sMessageText * "(1 of 3)") to sMessageText
56292>>>            End
56292>>>>
56292>>>        End
56292>>>>
56292>>>        Else Begin
56293>>>            Move "Reading 'TO' Table Structure:" to sMessageText
56294>>>            If (bCompareUtil = True) Begin
56296>>>                Move (sMessageText * "(2 of 3)") to sMessageText
56297>>>            End
56297>>>>
56297>>>        End
56297>>>>
56297>>>        Set Message_Text of ghoStatusPanel to sMessageText
56298>>>
56298>>>        Get UtilFilelistNoOfTables to iCount
56299>>>        Set piMaximum of ghoProgressBar to iCount
56300>>>        Move 0 to iCount
56301>>>
56301>>>        Repeat
56301>>>>
56301>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
56304>>>            If (hTable > 0 and hTable <> 50) Begin
56306>>>
56306>>>                Open hTable
56308>>>                // ToDo: Needs to be revised
56308>>>                // For some reason tables may be reported as "unopened", while in
56308>>>                // fact the open was successful (!)
56308>>>//                Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
56308>>>//                If (bIsOpen = False) Begin
56308>>>//                    Move True to aApiTablesEmpty[0].bError
56308>>>//                    Move hTable to aApiTablesEmpty[0].ApiTableInfo.iTableNumber
56308>>>//                    Function_Return aApiTablesEmpty
56308>>>//                End
56308>>>
56308>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
56311>>>                Set piPosition of ghoProgressBar to iCount
56312>>>                Send DoAdvance of ghoProgressBarOverall
56313>>>                Set Action_Text of ghoStatusPanel to ("Number:" * String(hTable) * String(sLogicalName))
56314>>>
56314>>>                Get UtilTableStructFill hTable bFromTables to aApiTables[iCount]
56315>>>//                Close hTable DF_PERMANENT
56315>>>                Increment iCount
56316>>>            End
56316>>>>
56316>>>
56316>>>            If (bStatusPanel = True) Begin
56318>>>                Get Check_StatusPanel of ghoStatusPanel to bUserCancel
56319>>>                If (bUserCancel = True) Begin
56321>>>                    Move True to aApiTablesEmpty[0].bCancel
56322>>>                    Function_Return aApiTablesEmpty
56323>>>                End
56323>>>>
56323>>>            End
56323>>>>
56323>>>
56323>>>        Until (hTable = 0)
56325>>>
56325>>>        Function_Return aApiTables
56326>>>    End_Function
56327>>>
56327>>>    // Returns a 'single' table APITable struct.
56327>>>    Function UtilTableStructFill Handle hTable Boolean bFromTables Returns tAPITable
56329>>>        tAPITableNameInfo ApiTableNameInfo
56329>>>        tAPITableNameInfo ApiTableNameInfo
56329>>>        tAPITable         ApiTable ApiTableEmpty
56329>>>        tAPITable         ApiTable ApiTableEmpty
56329>>>        tAPIColumn[]     aApiColumns
56329>>>        tAPIColumn[]     aApiColumns
56330>>>        tAPIIndex[]      aApiIndexes
56330>>>        tAPIIndex[]      aApiIndexes
56331>>>        tAPIRelation[]   aApiRelations
56331>>>        tAPIRelation[]   aApiRelations
56332>>>        Boolean bIsOpen
56332>>>
56332>>>        Open hTable
56334>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
56337>>>        If (bIsOpen = False) Begin
56339>>>            Move True to ApiTableEmpty.bError
56340>>>            Move hTable to ApiTableEmpty.ApiTableInfo.iTableNumber
56341>>>            Function_Return ApiTableEmpty
56342>>>        End
56342>>>>
56342>>>
56342>>>        // Fill Table Name Info
56342>>>        Get UtilTableNameInfoStructFill hTable to ApiTableNameInfo
56343>>>
56343>>>        // Fill columns
56343>>>        Get UtilColumnsStructFill hTable to aApiColumns
56344>>>        If (SizeOfArray(aApiColumns)) Begin
56346>>>            If (aApiColumns[0].bCancel = True) Begin
56348>>>                Move True to ApiTableEmpty.bError
56349>>>                Move hTable to ApiTableEmpty.ApiTableInfo.iTableNumber
56350>>>                Function_Return ApiTableEmpty
56351>>>            End
56351>>>>
56351>>>        End
56351>>>>
56351>>>
56351>>>        // Fill indexes
56351>>>        Get UtilIndexesStructFill hTable to aApiIndexes
56352>>>        If (SizeOfArray(aApiIndexes)) Begin
56354>>>            If (aApiIndexes[0].bCancel = True) Begin
56356>>>                Move True to ApiTableEmpty.bError
56357>>>                Move hTable to ApiTableEmpty.ApiTableInfo.iTableNumber
56358>>>                Function_Return ApiTableEmpty
56359>>>            End
56359>>>>
56359>>>        End
56359>>>>
56359>>>
56359>>>        // Fill relationships
56359>>>        Get UtilRelationsStructFill hTable to aApiRelations
56360>>>        If (SizeOfArray(aApiRelations)) Begin
56362>>>            If (aApiRelations[0].bCancel = True) Begin
56364>>>                Move True to ApiTableEmpty.bError
56365>>>                Move hTable to ApiTableEmpty.ApiTableInfo.iTableNumber
56366>>>                Function_Return ApiTableEmpty
56367>>>            End
56367>>>>
56367>>>        End
56367>>>>
56367>>>
56367>>>        Move hTable             to ApiTable.hTable
56368>>>        Move bFromTables        to ApiTable.bFromTable
56369>>>        Move (not(bFromTables)) to ApiTable.bToTable
56370>>>
56370>>>        Move ApiTableNameInfo   to ApiTable.ApiTableInfo
56371>>>        Move aApiColumns        to ApiTable.aApiColumns
56372>>>        Move aApiIndexes        to ApiTable.aApiIndexes
56373>>>        Move aApiRelations      to ApiTable.aApiRelations
56374>>>
56374>>>        Function_Return ApiTable
56375>>>    End_Function
56376>>>
56376>>>    Function UtilTableNameInfoStructFill Handle hTable Returns tAPITableNameInfo
56378>>>        tAPITableNameInfo APITableNameInfo APITableNameInfoEmpty
56378>>>        tAPITableNameInfo APITableNameInfo APITableNameInfoEmpty
56378>>>        Boolean bIsOpen
56378>>>
56378>>>        Open hTable
56380>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
56383>>>        If (bIsOpen = False) Begin
56385>>>            Move True   to APITableNameInfoEmpty.bError
56386>>>            Move hTable to APITableNameInfoEmpty.iTableNumber
56387>>>            Function_Return APITableNameInfoEmpty
56388>>>        End
56388>>>>
56388>>>
56388>>>        Move hTable                                  to APITableNameInfo.iTableNumber
56389>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to APITableNameInfo.sRootName
56392>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to APITableNameInfo.sLogicalName
56395>>>        Get_Attribute DF_FILE_DISPLAY_NAME of hTable to APITableNameInfo.sDisplayName
56398>>>        Get_Attribute DF_FILE_DRIVER       of hTable to APITableNameInfo.sDriverID
56401>>>
56401>>>        Get UtilTableIsAlias                  hTable to APITableNameInfo.bIsAlias
56402>>>        Get _UtilTableIsSql                    hTable to APITableNameInfo.bIsSQL
56403>>>
56403>>>        Function_Return APITableNameInfo
56404>>>    End_Function
56405>>>
56405>>>    Function UtilFindTableArrayItem tAPITable[] ByRef aTableStructure String sLogicalTableName Returns Integer
56407>>>        Integer iSize iCount iItem
56407>>>        tAPITableNameInfo ApiTableNameInfo
56407>>>        tAPITableNameInfo ApiTableNameInfo
56407>>>
56407>>>        Move -1 to iItem
56408>>>        Move (SizeOfArray(aTableStructure)) to iSize
56409>>>        Decrement iSize
56410>>>        for iCount from 0 to iSize
56416>>>>
56416>>>            Move aTableStructure[iCount].ApiTableInfo to ApiTableNameInfo
56417>>>            If (Uppercase(ApiTableNameInfo.sLogicalName) = Uppercase(sLogicalTableName)) Begin
56419>>>                Move iCount to iItem
56420>>>                Move iSize  to iCount // We're done.
56421>>>            End
56421>>>>
56421>>>        Loop
56422>>>>
56422>>>
56422>>>        Function_Return iItem
56423>>>    End_Function
56424>>>
56424>>>    Function UtilTableArrayCompare tAPITable APITableFrom tAPITable APITableTo Returns Integer
56426>>>        If (APITableFrom.hTable  > APITableTo.hTable) ;            Function_Return (GT)
56429>>>        If (APITableFrom.hTable  < APITableTo.hTable) ;            Function_Return (LT)
56432>>>
56432>>>        If (APITableFrom.bFromTable = True)  ;            Function_Return (LT)
56435>>>        If (APITableFrom.bFromTable = False) ;            Function_Return (GT)
56438>>>
56438>>>        Function_Return (EQ)
56439>>>    End_Function
56440>>>
56440>>>    Function UtilTableCombineFromAndToArrays tAPITable[] aAPITableFrom tAPITable[] aAPITableTo Returns tAPITableCompare[]
56442>>>        Integer iCount iSize iSizeFrom iSizeTo iItemFrom iItemTo iItem
56442>>>        Handle hTable
56442>>>        tAPITable[] aAPITableFromAndTo
56442>>>        tAPITable[] aAPITableFromAndTo
56443>>>        tAPITable   APITableFrom APITableTo APITableEmpty
56443>>>        tAPITable   APITableFrom APITableTo APITableEmpty
56443>>>        tAPITableNameInfoCompare APITableNameInfoCompare
56443>>>        tAPITableNameInfoCompare APITableNameInfoCompare
56443>>>        tAPITableCompare[]    aAPITableCompare // This is the result set for this function
56443>>>        tAPITableCompare[]    aAPITableCompare // This is the result set for this function
56444>>>        tAPIColumnCompare[]   aAPIColumnCompare
56444>>>        tAPIColumnCompare[]   aAPIColumnCompare
56445>>>        tAPIIndexCompare[]    aAPIIndexCompare
56445>>>        tAPIIndexCompare[]    aAPIIndexCompare
56446>>>        tAPIRelationCompare[] aAPIRelationCompare
56446>>>        tAPIRelationCompare[] aAPIRelationCompare
56447>>>        tAPITableNameInfo ApiTableInfoEmpty ApiTableInfoFrom ApiTableInfoTo
56447>>>        tAPITableNameInfo ApiTableInfoEmpty ApiTableInfoFrom ApiTableInfoTo
56447>>>        tAPIColumn[]   aApiColumnsEmpty aApiColumnsFrom aApiColumnsTo
56447>>>        tAPIColumn[]   aApiColumnsEmpty aApiColumnsFrom aApiColumnsTo
56450>>>        tAPIIndex[]    aApiIndexEmpty aApiIndexFrom aApiIndexTo
56450>>>        tAPIIndex[]    aApiIndexEmpty aApiIndexFrom aApiIndexTo
56453>>>        tAPIRelation[] aApiRelationEmpty aApiRelationFrom aApiRelationTo
56453>>>        tAPIRelation[] aApiRelationEmpty aApiRelationFrom aApiRelationTo
56456>>>
56456>>>        Move (SizeOfArray(aAPITableFrom)) to iSizeFrom
56457>>>        Move (SizeOfArray(aAPITableTo))   to iSizeTo
56458>>>        If (iSizeFrom = 0 and iSizeTo = 0) Begin
56460>>>            Function_Return aAPITableCompare
56461>>>        End
56461>>>>
56461>>>
56461>>>        Move (AppendArray(aAPITableFrom, aAPITableTo)) to aAPITableFromAndTo
56462>>>        Move (SortArray(aAPITableFromAndTo, Self, RefFunc(UtilTableArrayCompare))) to aAPITableFromAndTo
56463>>>
56463>>>        Move 0 to iItem
56464>>>        Move (SizeOfArray(aAPITableFromAndTo)) to iSize
56465>>>        Decrement iSize
56466>>>        for iCount from 0 to iSize
56472>>>>
56472>>>
56472>>>            Move iCount to iItemFrom
56473>>>            Move iCount to iItemTo
56474>>>            Move APITableEmpty to APITableFrom
56475>>>            Move APITableEmpty to APITableTo
56476>>>
56476>>>            If (aAPITableFromAndTo[iCount].bFromTable = True) Begin
56478>>>                Move aAPITableFromAndTo[iCount]     to APITableFrom
56479>>>            End
56479>>>>
56479>>>            If (aAPITableFromAndTo[iCount].bToTable = True) Begin
56481>>>                Move aAPITableFromAndTo[iCount]     to APITableTo
56482>>>            End
56482>>>>
56482>>>            If (aAPITableFromAndTo[iCount].hTable = aAPITableFromAndTo[iCount + 1].hTable) Begin
56484>>>                Move aAPITableFromAndTo[iCount]     to APITableFrom
56485>>>                Move (iCount + 1) to iItemTo
56486>>>                Move aAPITableFromAndTo[iItemTo]    to APITableTo
56487>>>            End
56487>>>>
56487>>>            If (APITableFrom.hTable > APITableTo.hTable) Begin
56489>>>                Get FindTableNumber aAPITableTo APITableFrom.hTable to iItemTo
56490>>>                If (iItemTo <> -1) Begin
56492>>>                    Move aAPITableTo[iItemTo] to APITableTo
56493>>>                End
56493>>>>
56493>>>                Else Begin
56494>>>                    Move APITableEmpty to APITableTo
56495>>>                End
56495>>>>
56495>>>            End
56495>>>>
56495>>>
56495>>>            Move APITableFrom.ApiTableInfo  to ApiTableInfoFrom
56496>>>            Move APITableFrom.aApiColumns   to aApiColumnsFrom
56497>>>            Move APITableFrom.aApiIndexes   to aApiIndexFrom
56498>>>            Move APITableFrom.aApiRelations to aApiRelationFrom
56499>>>
56499>>>            Move APITableTo.ApiTableInfo    to ApiTableInfoTo
56500>>>            Move APITableTo.aApiColumns     to aApiColumnsTo
56501>>>            Move APITableTo.aApiIndexes     to aApiIndexTo
56502>>>            Move APITableTo.aApiRelations   to aApiRelationTo
56503>>>
56503>>>            Move aAPITableFromAndTo[iCount].hTable to hTable
56504>>>
56504>>>            If (hTable > 0) Begin
56506>>>
56506>>>                // Table info:
56506>>>                Get UtilTableINFOCombineFromAndToArrays ApiTableInfoFrom ApiTableInfoTo to APITableNameInfoCompare
56507>>>                Move APITableNameInfoCompare.iTableNumber                               to aAPITableCompare[iItem].hTable
56508>>>                Move APITableNameInfoCompare.bExistsFrom                                to aAPITableCompare[iItem].bExistsFrom
56509>>>                Move APITableNameInfoCompare.bExistsTo                                  to aAPITableCompare[iItem].bExistsTo
56510>>>                Move APITableNameInfoCompare                                            to aAPITableCompare[iItem].APITableNameInfoCompare
56511>>>
56511>>>                // Column info:
56511>>>                Get UtilColumnCombineFromAndToArrays aApiColumnsFrom aApiColumnsTo      to aAPIColumnCompare
56512>>>                Move aAPIColumnCompare                                                  to aAPITableCompare[iItem].aAPIColumnsCompare
56513>>>
56513>>>                // Index info:
56513>>>                Get UtilIndexCombineFromAndToArrays aApiIndexFrom aApiIndexTo           to aAPIIndexCompare
56514>>>                Move aAPIIndexCompare                                                   to aAPITableCompare[iItem].aAPIIndexesCompare
56515>>>
56515>>>                // Relation info:
56515>>>                Get UtilRelationCombineFromAndToArrays aApiRelationFrom aApiRelationTo  to aAPIRelationCompare
56516>>>                Move aAPIRelationCompare                                                to aAPITableCompare[iItem].aAPIRelationsCompare
56517>>>
56517>>>                Move False                                                              to aAPITableCompare[iItem].bShouldChange
56518>>>                Move False                                                              to aAPITableCompare[iItem].bCancel
56519>>>                Move False                                                              to aAPITableCompare[iItem].bError
56520>>>                If (iItemTo > iItemFrom) Begin
56522>>>                    Increment iCount
56523>>>                End
56523>>>>
56523>>>                Increment iItem
56524>>>            End
56524>>>>
56524>>>
56524>>>        Loop
56525>>>>
56525>>>
56525>>>        Function_Return aAPITableCompare
56526>>>    End_Function
56527>>>
56527>>>    Function FindTableNumber tAPITable[] ByRef aTableStructure Handle hTable Returns Integer
56529>>>        Integer iSize iCount iItem
56529>>>        tAPITableNameInfo ApiTableNameInfo
56529>>>        tAPITableNameInfo ApiTableNameInfo
56529>>>
56529>>>        Move -1 to iItem
56530>>>        Move (SizeOfArray(aTableStructure)) to iSize
56531>>>        Decrement iSize
56532>>>        For iCount from 0 to iSize
56538>>>>
56538>>>            Move aTableStructure[iCount].ApiTableInfo to ApiTableNameInfo
56539>>>            If (ApiTableNameInfo.iTableNumber = hTable) Begin
56541>>>                Move iCount to iItem
56542>>>                Move iSize  to iCount // We're done.
56543>>>            End
56543>>>>
56543>>>        Loop
56544>>>>
56544>>>
56544>>>        Function_Return iItem
56545>>>    End_Function
56546>>>
56546>>>    Function UtilTableInfoCombineFromAndToArrays tAPITableNameInfo APITableNameInfoFrom tAPITableNameInfo APITableNameInfoTo Returns tAPITableNameInfoCompare
56548>>>        tAPITableNameInfoCompare APITableNameInfoCompare
56548>>>        tAPITableNameInfoCompare APITableNameInfoCompare
56548>>>
56548>>>        If (APITableNameInfoFrom.iTableNumber = 0 and APITableNameInfoTo.iTableNumber = 0) Begin
56550>>>            Function_Return APITableNameInfoCompare
56551>>>        End
56551>>>>
56551>>>
56551>>>        // FROM database info:
56551>>>        If (APITableNameInfoFrom.iTableNumber > 0) Begin
56553>>>            Move APITableNameInfoFrom.iTableNumber  to APITableNameInfoCompare.iTableNumber
56554>>>            Move APITableNameInfoFrom.sRootName     to APITableNameInfoCompare.sRootNameFrom
56555>>>            Move APITableNameInfoFrom.sLogicalName  to APITableNameInfoCompare.sLogicalNameFrom
56556>>>            Move APITableNameInfoFrom.sDisplayName  to APITableNameInfoCompare.sDisplayNameFrom
56557>>>            Move APITableNameInfoFrom.sDriverID     to APITableNameInfoCompare.sDriverIDFrom
56558>>>            Move APITableNameInfoFrom.bIsAlias      to APITableNameInfoCompare.bIsAliasFrom
56559>>>            Move APITableNameInfoFrom.bIsSQL        to APITableNameInfoCompare.bIsSQLFrom
56560>>>            Move True                               to APITableNameInfoCompare.bExistsFrom
56561>>>        End
56561>>>>
56561>>>
56561>>>        // TO database info:
56561>>>        If (APITableNameInfoTo.iTableNumber > 0) Begin
56563>>>            Move APITableNameInfoTo.iTableNumber    to APITableNameInfoCompare.iTableNumber
56564>>>            Move APITableNameInfoTo.sRootName       to APITableNameInfoCompare.sRootNameTo
56565>>>            Move APITableNameInfoTo.sLogicalName    to APITableNameInfoCompare.sLogicalNameTo
56566>>>            Move APITableNameInfoTo.sDisplayName    to APITableNameInfoCompare.sDisplayNameTo
56567>>>            Move APITableNameInfoTo.sDriverID       to APITableNameInfoCompare.sDriverIDTo
56568>>>            Move APITableNameInfoTo.bIsAlias        to APITableNameInfoCompare.bIsAliasTo
56569>>>            Move APITableNameInfoTo.bIsSQL          to APITableNameInfoCompare.bIsSQLTo
56570>>>            Move True                               to APITableNameInfoCompare.bExistsTo
56571>>>        End
56571>>>>
56571>>>
56571>>>        Function_Return APITableNameInfoCompare
56572>>>    End_Function
56573>>>
56573>>>    // Note:
56573>>>    // The DF_FILE_TABLE_NAME attribute holds the name of the table at the back end. Depending on the back end, table
56573>>>    // names may be case sensitive, contain spaces or other special characters. This attribute is used to determine a table's
56573>>>    // back end name when using Embedded SQL. Since Embedded SQL works on the back end directly, the back end's name must be used.
56573>>>    // In most cases the back end name will be the same as the table name used in DataFlex.
56573>>>    // To do the opposite; To get the file handle from a table name string use the UtilTableNameToHandle function.
56573>>>    Function UtilTableHandleToString Handle hTable Returns String
56575>>>        String sTableName
56575>>>        Boolean bOpen bExists bOK
56575>>>
56575>>>        Get _UtilTableNumberIsInUse hTable to bExists
56576>>>        If (bExists = False) Begin
56578>>>            Function_Return ""
56579>>>        End
56579>>>>
56579>>>
56579>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
56580>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
56583>>>        If (bOpen = False) Begin
56585>>>            Get AutoConnectionIDLogin to bOK
56586>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
56587>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_INTERMEDIATE_FILE
56588>>>            Send Ignore_Error of Error_Object_Id CLIERR_GENERAL_ERROR
56589>>>            Open hTable
56591>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
56592>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_INTERMEDIATE_FILE
56593>>>            Send Trap_Error of Error_Object_Id CLIERR_GENERAL_ERROR
56594>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
56597>>>        End
56597>>>>
56597>>>        If (bOpen = True) Begin
56599>>>            Send Ignore_Error of Error_Object_Id DFERR_UNSUPPORTED_ATTRIBUTE
56600>>>            Get_Attribute DF_FILE_TABLE_NAME of hTable to sTableName
56603>>>            // If blank it is an embedded table:
56603>>>            If (sTableName = "") Begin
56605>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
56608>>>                Move 0 to LastErr
56609>>>                Move False to Err
56610>>>            End
56610>>>>
56610>>>            Send Trap_Error of Error_Object_Id DFERR_UNSUPPORTED_ATTRIBUTE
56611>>>        End
56611>>>>
56611>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
56612>>>        Move 0 to LastErr
56613>>>
56613>>>        Function_Return sTableName
56614>>>    End_Function
56615>>>
56615>>>    // Returns the filenumber for the passed Table name from Filelist.cfg.
56615>>>    // Returns 0 if unsuccessful.
56615>>>    // To do the opposite; To get the string value from a table handle string use the UtilTableHandleToString function.
56615>>>    Function UtilTableNameToHandle String sTableName Returns Integer
56617>>>        String sValue sPrefixTableName sDriverID
56617>>>        Handle hTable hRetval
56617>>>
56617>>>        Get psDriverID to sDriverID
56618>>>        If (sDriverID <> DATAFLEX_ID and not(sTableName contains ":")) Begin
56620>>>            Move (sDriverID + ":" + sTableName) to sPrefixTableName
56621>>>        End
56621>>>>
56621>>>        Move 0 to hTable
56622>>>        Move 0 to hRetval
56623>>>        Repeat
56623>>>>
56623>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
56626>>>            If (hTable <> 0) Begin
56628>>>                Get_Attribute DF_FILE_ROOT_NAME of hTable to sValue
56631>>>                If (Uppercase(sValue) = Uppercase(sTableName) or Uppercase(sValue) = Uppercase(sPrefixTableName)) Begin
56633>>>                    Move hTable to hRetval
56634>>>                    Move 0 to hTable
56635>>>                End
56635>>>>
56635>>>            End
56635>>>>
56635>>>        Until (hTable = 0)
56637>>>
56637>>>        Function_Return hRetval
56638>>>    End_Function
56639>>>
56639>>>    // Use function to move all *.dat, *.k?? & *.hdr files to a "Data\Backup" folder
56639>>>    // _after_ all tables have successfully been converted to SQL (.int files)
56639>>>    Function UtilMoveAllEmbeddedToBackupFolder Returns Boolean
56641>>>        Boolean bOK bExists
56641>>>        String sDataPath sBackupFolder
56641>>>
56641>>>        Close DF_ALL DF_PERMANENT
56642>>>        Send DoAdvance of ghoProgressBar
56643>>>
56643>>>        Set Message_Text of ghoStatusPanel to "Moving Embedded (*.dat) files to Backup folder."
56644>>>        Move CS_DUFBackupDataFolder to sBackupFolder
56645>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
56646>>>        Get vFolderFormat sDataPath to sDataPath
56647>>>
56647>>>        Get vFilePathExists (sDataPath + sBackupFolder) to bExists
56648>>>        If (bExists = False) Begin
56650>>>            Get vCreateDirectory (sDataPath + sBackupFolder) to bOK
56651>>>            Get vFilePathExists (sDataPath + sBackupFolder) to bExists
56652>>>            If (bExists = False) Begin
56654>>>                Error DFERR_PROGRAM ("Could not create the the backup data folder to move all *.dat and *.k?? files to. You need to move them somewhere manually.")
56655>>>>
56655>>>                Function_Return False
56656>>>            End
56656>>>>
56656>>>        End
56656>>>>
56656>>>
56656>>>        Get vMoveFile (sDataPath + "*.dat") (sDataPath + sBackupFolder) to bOK
56657>>>        Get vMoveFile (sDataPath + "*.hdr") (sDataPath + sBackupFolder) to bOK
56658>>>        Get vMoveFile (sDataPath + "*.k??") (sDataPath + sBackupFolder) to bOK
56659>>>        Get vMoveFile (sDataPath + "*.vld") (sDataPath + sBackupFolder) to bOK
56660>>>        // We need to wait for Windows before we can copy files back
56660>>>        Sleep 2  
56661>>>        
56661>>>        //...except for these files that needs to be copied back to the Data folder:
56661>>>        Get vCopyFile (sBackupFolder + "\CodeMast.*")  sDataPath to bOK 
56662>>>        Get vCopyFile (sBackupFolder + "\CodeType.*")  sDataPath to bOK                                 
56663>>>        Get vCopyFile (sBackupFolder + "\Flexerrs.*")  sDataPath to bOK                                 
56664>>>        Get vCopyFile (sBackupFolder + "\DFErr001.*")  sDataPath to bOK                                 
56665>>>        Get vCopyFile (sBackupFolder + "\DFErr002.*")  sDataPath to bOK                                 
56666>>>        Get vCopyFile (sBackupFolder + "\DFErr003.*")  sDataPath to bOK                                 
56667>>>//            Get vCopyFile (sBackupFolder + "\DbVersion.*") sDataPath to bOK  
56667>>>        
56667>>>
56667>>>        Set Message_Text of ghoStatusPanel to ""
56668>>>        Function_Return True
56669>>>    End_Function
56670>>>    
56670>>>    Function UtilTableRepairAndReindexALL Returns Boolean
56672>>>        Boolean bOK bRetval
56672>>>        Handle hTable
56672>>>        Integer iSize iCount
56672>>>        
56672>>>        Move True to bOK
56673>>>        Get UtilFilelistNoOfTables to iSize
56674>>>        Set pbVisible    of ghoProgressBarOverall to True
56675>>>        Set piPosition   of ghoProgressBarOverall to 0
56676>>>        Set piMaximum    of ghoProgressBarOverall to iSize
56677>>>        Set piAdvanceBy  of ghoProgressBarOverall to 1
56678>>>
56678>>>        Repeat
56678>>>>
56678>>>            Set piPosition of ghoProgressBarOverall to iCount
56679>>>            Increment iCount
56680>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
56683>>>            If (hTable <> 0 and hTable <> 50) Begin // 50 = Flexerrs.
56685>>>                Get UtilTableRepairAndReindex hTable to bRetval
56686>>>                If (bRetval = False) Begin
56688>>>                    Move False to bOK
56689>>>                End
56689>>>>
56689>>>            End
56689>>>>
56689>>>        Until (hTable = 0)
56691>>>                
56691>>>        Function_Return bOK
56692>>>    End_Function           
56693>>>    
56693>>>    // Checks if an Embedded (DataFlex) data-file needs to be repaired.
56693>>>    // After the header has been repaired - also makes a re-index.  
56693>>>    // Returns TRUE if successful OR the table was an an ALIAS or SQL table in case we do nothing.
56693>>>    Function UtilTableRepairAndReindex Handle hTable Returns Boolean
56695>>>        Boolean bOK bIsAlias bIsEmbedded bIsOpen bBadExists
56695>>>        Integer iRetval
56695>>>        String sRootName sFileName sDataPath
56695>>>        
56695>>>        Move False to Err
56696>>>        Move 0 to LastErr 
56697>>>        Move True to bOK
56698>>>        
56698>>>        Get _UtilTableIsEmbedded hTable to bIsEmbedded
56699>>>        If (bIsEmbedded = False or hTable = 50) Begin // 50 = Flexerrs
56701>>>            Function_Return True
56702>>>        End
56702>>>>
56702>>>        Get UtilTableIsAlias hTable to bIsAlias 
56703>>>        If (bIsAlias = True) Begin
56705>>>            Function_Return True
56706>>>        End
56706>>>>
56706>>>        
56706>>>        // Check for bad file and remove if exists
56706>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
56709>>>        Set private.phCurrentTable to hTable  
56710>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT  
56711>>>        
56711>>>        // This is important! Else it can happen that the table can't be opened,
56711>>>        // with a "4077 - File in use" error.
56711>>>        Close DF_ALL DF_PERMANENT    
56712>>>        Open hTable
56714>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
56717>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
56718>>>        If (bIsOpen = False) Begin
56720>>>            Error DFERR_PROGRAM ("Could not open table to be repaired and reindexed:" * String(sRootName))
56721>>>>
56721>>>            Function_Return False        
56722>>>        End
56722>>>>
56722>>>
56722>>>        Get vFilePathExists (sRootName + ".BAD")  to bBadExists
56723>>>        If (bBadExists = True) Begin
56725>>>            Get_File_Path (sRootName + ".BAD") to sFileName
56726>>>            Get vDeleteFile sFileName to iRetval
56727>>>        End
56727>>>>
56727>>>        
56727>>>        Set TableName_Text of ghoStatusPanel to ("Repairing and reindex Table Name:" * sRootName * "Number:" * String(hTable))
56728>>>        
56728>>>        Move False to Err
56729>>>        // **** Repair and reindex the table. ****
56729>>>        Get UtilTableRepairEmbedded hTable sRootName to bOK
56730>>>
56730>>>        // Check for bad file: if it exists, something went wrong
56730>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
56731>>>        Get vFolderFormat sDataPath to sDataPath
56732>>>        Get vFilePathExists (sDataPath + sRootName + ".BAD") to bBadExists
56733>>>        If (bBadExists = True) Begin
56735>>>            Error DFERR_PROGRAM ("Error while sorting data. .BAD file created:"  * String(sRootName) + ".BAD")
56736>>>>
56736>>>            Move False to bOK
56737>>>        End
56737>>>>
56737>>>        Close hTable
56738>>>
56738>>>        Function_Return bOK
56739>>>    End_Function
56740>>>
56740>>>    // Repair and reindex the named DataFlex data-table.
56740>>>    // No checks are done if the passed table name is an embedded or SQL,
56740>>>    // so use with care (make sure you only pass embedded table names).
56740>>>    Function UtilTableRepairEmbedded Handle hTable String sTableName Returns Boolean
56742>>>        String sMode
56742>>>        Integer iVoid
56742>>>
56742>>>        Set Message_Text of ghoStatusPanel to "Repair/Reindex in progress..."
56743>>>        Move "0" to sMode   // 0=Reindex after repair!    
56744>>>        Close hTable        // The table needs to be closed, else error 4177 "Table in use".
56745>>>        Call_Driver 0 DATAFLEX_ID Function FLEX_REPAIR_FILE Callback ghoDbUpdateHandler Passing sTableName sMode 0 Result iVoid 
56750>>>        Set Message_Text of ghoStatusPanel to ""
56751>>>        Function_Return (iVoid = 0)
56752>>>    End_Function
56753>>>
56753>>>    // Returns _two_ arrays.
56753>>>    // Returns all files that are Master files in array ByRef iaFileIsMaster
56753>>>    // Also returns all files that are Alias files in a second array.
56753>>>    // IMPORTANT: All master & alias files _must_ have been included into
56753>>>    //            the DoSetAllMasterAndAlias message.
56753>>>    Function UtilTableAllMasterAndAliasFiles Integer[] ByRef iaFileIsMaster Returns Integer[]
56755>>>        Integer[] iaFileIsAlias
56756>>>        Integer hTable iFileAlias iSize
56756>>>        Boolean bOpen
56756>>>
56756>>>        Move 0 to hTable
56757>>>        Repeat
56757>>>>
56757>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
56760>>>            If (hTable <> 0) Begin
56762>>>                Open hTable
56764>>>                Get_Attribute DF_FILE_OPENED of hTable to bOpen
56767>>>                If (bOpen = True) Begin
56769>>>                    Get_Attribute DF_FILE_ALIAS of hTable to iFileAlias
56772>>>                    If (iFileAlias = DF_FILE_IS_MASTER) Begin
56774>>>                        Move (SizeOfArray(iaFileIsMaster)) to iSize
56775>>>                        Move hTable to iaFileIsMaster[iSize]
56776>>>                    End
56776>>>>
56776>>>                    Else If (iFileAlias = DF_FILE_IS_ALIAS) Begin
56779>>>                        Move (SizeOfArray(iaFileIsAlias)) to iSize
56780>>>                        Move hTable to iaFileIsAlias[iSize]
56781>>>                    End
56781>>>>
56781>>>                End
56781>>>>
56781>>>            End
56781>>>>
56781>>>        Until (hTable = 0)
56783>>>
56783>>>        Function_Return iaFileIsAlias
56784>>>    End_Function  
56785>>>    
56785>>>    // Is a repair of the data-header necessary? (Embedded tables only)
56785>>>    Function UtilTableRepairIsNeeded Handle hTable String sTableName Returns Integer
56787>>>        String sMode
56787>>>        Integer iRepairNeeded bIsOpen
56787>>>
56787>>>        Move "0" to sMode
56788>>>        Set private.phCurrentTable to hTable 
56789>>>        Close hTable
56790>>>        Open hTable
56792>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
56795>>>        Call_Driver hTable DATAFLEX_ID Function FLEX_GET_REPAIRS_NEEDED Callback 0 Passing sTableName sMode 0 Result iRepairNeeded
56800>>>
56800>>>        Function_Return iRepairNeeded
56801>>>    End_Function
56802>>>
56802>>>    // Helper function
56802>>>    // Takes two params:
56802>>>    //   1. An array with all master table numbers  (Function UtilTableAllMasterAndAliasFiles)
56802>>>    //   2. An array with all alias table numbers   (Function UtilTableAllMasterAndAliasFiles)
56802>>>    // Returns:
56802>>>    //  DF_FILE_ALIAS_DEFAULT if no master or alias
56802>>>    //  DF_FILE_IS_MASTER if master
56802>>>    //  DF_FILE_IS_ALIAS if alias
56802>>>    Function UtilTableIsMasterAlias Handle hTable Integer[] iaFileIsMaster Integer[] iaFileIsAlias Returns Integer
56804>>>        Integer i iSize
56804>>>
56804>>>        Move (SizeOfArray(iaFileIsMaster)) to iSize
56805>>>        Decrement iSize
56806>>>        for i from 0 to iSize
56812>>>>
56812>>>            If (hTable = iaFileIsMaster[i]) Begin
56814>>>                Function_Return DF_FILE_IS_MASTER
56815>>>            End
56815>>>>
56815>>>        Loop
56816>>>>
56816>>>
56816>>>        Move (SizeOfArray(iaFileIsAlias)) to iSize
56817>>>        Decrement iSize
56818>>>        for i from 0 to iSize
56824>>>>
56824>>>            If (hTable = iaFileIsAlias[i]) Begin
56826>>>                Function_Return DF_FILE_IS_ALIAS
56827>>>            End
56827>>>>
56827>>>        Loop
56828>>>>
56828>>>
56828>>>        Function_Return DF_FILE_ALIAS_DEFAULT
56829>>>    End_Function
56830>>>
56830>>>    // Determine the available indexes of a table.
56830>>>    //
56830>>>    // Arguments:
56830>>>    //   Handle hTable - The number of the table
56830>>>    //
56830>>>    // Returns:
56830>>>    //   String - A string to be used with the sort command
56830>>>    //   to re-index all indexes of a table.
56830>>>    Function UtilTableIndexString Handle hTable Returns String
56832>>>        String  sSortString
56832>>>        Integer iLastIndex iNumSegments iCount
56832>>>
56832>>>        Move "" to sSortString
56833>>>        Get_Attribute DF_FILE_LAST_INDEX_NUMBER of hTable to iLastIndex
56836>>>
56836>>>        for iCount from 1 to iLastIndex
56842>>>>
56842>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iCount to iNumSegments
56845>>>            If iNumSegments Begin
56847>>>                If (Length(sSortString)) ;                    Move (Append(sSortString, " ")) to sSortString
56850>>>                Move (Append(sSortString, iCount)) to sSortString
56851>>>            End
56851>>>>
56851>>>        Loop
56852>>>>
56852>>>
56852>>>        Function_Return sSortString
56853>>>    End_Function
56854>>>
56854>>>    
56854>>>    // * Dummy function for the Studio's Code Explorer *
56854>>>    Function API_COLUMN_UTILITY_FUNCTIONS Returns Boolean
56856>>>        Function_Return False
56857>>>    End_Function
56858>>>
56858>>>    // Compare multiple columns. (For 'FROM' & 'TO' tables)
56858>>>    Function UtilColumnsCompare String sDriverIDFrom String sDriverIDTo Boolean bIsSQLFrom Boolean bIsSQLTo tAPIColumnCompare[] aAPIColumnCompare Boolean bCompareDate_DataTime Returns Boolean
56860>>>        Boolean bIsSame
56860>>>        Integer iCount iColumns iColumn
56860>>>
56860>>>        Move True to bIsSame
56861>>>        Move (SizeOfArray(aAPIColumnCompare)) to iColumns
56862>>>        Set piMaximum of ghoProgressBar  to iColumns
56863>>>        Decrement iColumns
56864>>>
56864>>>        for iCount from 0 to iColumns
56870>>>>
56870>>>            Set piPosition of ghoProgressBar to iCount
56871>>>            Get UtilColumnCompare sDriverIDFrom sDriverIDTo bIsSQLFrom bIsSQLTo aAPIColumnCompare[iCount] bCompareDate_DataTime to bIsSame
56872>>>            If (bIsSame = False) Begin
56874>>>                Function_Return False
56875>>>            End
56875>>>>
56875>>>        Loop
56876>>>>
56876>>>
56876>>>        Function_Return (bIsSame = True)
56877>>>    End_Function
56878>>>
56878>>>    // Compares a single column (For 'FROM' & 'TO' tables)
56878>>>    Function UtilColumnCompare String sDriverIDFrom String sDriverIDTo Boolean bIsSQLFrom Boolean bIsSQLTo tAPIColumnCompare APIColumnCompare Boolean bCompareDate_DataTime Returns Boolean
56880>>>        Integer iFromType iToType iDbType
56880>>>        tColumnType ColumnType
56880>>>        tColumnType ColumnType
56880>>>        Boolean bIsDateTypeFrom bIsDateTypeTo
56880>>>
56880>>>        If (APIColumnCompare.bCancelFrom = True or APIColumnCompare.bCancelTo = True) Begin
56882>>>            Function_Return False
56883>>>        End
56883>>>>
56883>>>        If (APIColumnCompare.bExistsFrom = False or APIColumnCompare.bExistsTo = False) Begin
56885>>>            Function_Return False
56886>>>        End
56886>>>>
56886>>>        If (Uppercase(APIColumnCompare.sFieldNameFrom) <> Uppercase(APIColumnCompare.sFieldNameTo)) Begin
56888>>>            Function_Return False
56889>>>        End                                                                
56889>>>>
56889>>>
56889>>>        If (bIsSQLFrom = True and bIsSQLTo = True) Begin
56891>>>            If (APIColumnCompare.bAllowNULLFrom <> APIColumnCompare.bAllowNULLTo) Begin
56893>>>                Function_Return False
56894>>>            End
56894>>>>
56894>>>            If (APIColumnCompare.sDefaultValueFrom <> APIColumnCompare.sDefaultValueTo) Begin
56896>>>                If ((APIColumnCompare.sDefaultValueFrom = ""   and APIColumnCompare.sDefaultValueTo = "''") or ;                    (APIColumnCompare.sDefaultValueFrom = "''" and APIColumnCompare.sDefaultValueTo = "")) Begin
56898>>>                    End
56898>>>>
56898>>>                Else Begin
56899>>>                    Function_Return False
56900>>>                End
56900>>>>
56900>>>            End
56900>>>>
56900>>>        End
56900>>>>
56900>>>
56900>>>        Get piDbType                       to iDbType
56901>>>        Move APIColumnCompare.iTypeFrom    to iFromType
56902>>>        Move APIColumnCompare.iTypeTo      to iToType
56903>>>
56903>>>        // If one of the two tables are SQL and the other Embedded we need to "translate"
56903>>>        // data types between Embedded and SQL.
56903>>>        If (bIsSQLFrom = True and bIsSQLTo = False) Begin
56905>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDFrom iDbType iFromType APIColumnCompare.iLengthFrom to iFromType
56906>>>        End
56906>>>>
56906>>>        If (bIsSQLFrom = False and bIsSQLTo = True) Begin
56908>>>            Get UtilSQLColumnTypeToDataFlexType sDriverIDTo iDbType iToType APIColumnCompare.iLengthTo to iToType
56909>>>        End
56909>>>>
56909>>>
56909>>>        Get UtilColumnIsDateType iFromType bIsSQLFrom to bIsDateTypeFrom
56910>>>        Get UtilColumnIsDateType iToType   bIsSQLTo   to bIsDateTypeTo
56911>>>
56911>>>        // Make Date and DateTime comparison?
56911>>>        If (bCompareDate_DataTime = True) Begin
56913>>>            If (iFromType <> iToType) Begin
56915>>>                Function_Return False
56916>>>            End
56916>>>>
56916>>>        End
56916>>>>
56916>>>
56916>>>        // This is when not checking for Date/DateTime differences but all other other field types...
56916>>>        If (bCompareDate_DataTime = False and bIsDateTypeFrom = False) Begin
56918>>>            If (iFromType <> iToType) Begin
56920>>>                Function_Return False
56921>>>            End
56921>>>>
56921>>>        End
56921>>>>
56921>>>
56921>>>        // Only if the field is not a Date type (any of them) we compare length & precision.
56921>>>        If (bIsDateTypeFrom = False) Begin
56923>>>            If (APIColumnCompare.iLengthFrom <> APIColumnCompare.iLengthTo) Begin
56925>>>                Function_Return False
56926>>>            End
56926>>>>
56926>>>            If (APIColumnCompare.iPrecisionFrom <> APIColumnCompare.iPrecisionTo) Begin
56928>>>                Function_Return False
56929>>>            End
56929>>>>
56929>>>        End
56929>>>>
56929>>>
56929>>>        If (APIColumnCompare.iOptionsFrom <> APIColumnCompare.iOptionsTo) Begin
56931>>>            Function_Return False
56932>>>        End
56932>>>>
56932>>>
56932>>>        Function_Return True
56933>>>    End_Function
56934>>>
56934>>>    Function UtilColumnsStructFill Handle hTable Returns tAPIColumn[]
56936>>>        Integer iNumColumns iColumn iCount iOptions iDbType iType iCheckFieldNumber
56936>>>        Boolean bIdentityKey bDawSqlDriver bSqlDriver bIsOpen bExists bIsSqlTable bUserCancel
56936>>>        tAPIColumn[] APIColumns APIColumnsEmpty
56936>>>        tAPIColumn[] APIColumns APIColumnsEmpty
56938>>>        String sDriverID sRootName sLogicalName
56938>>>
56938>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
56939>>>        Get piDbType to iDbType
56940>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
56943>>>        Get_Attribute DF_FILE_ROOT_NAME    of hTable to sRootName
56946>>>
56946>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
56949>>>        If (bIsOpen = False) Begin
56951>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
56952>>>            Open hTable
56954>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
56955>>>            Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
56958>>>            If (bIsOpen = False) Begin
56960>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
56961>>>                Move True to APIColumnsEmpty[0].bError
56962>>>                Function_Return APIColumnsEmpty
56963>>>            End
56963>>>>
56963>>>        End
56963>>>>
56963>>>
56963>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
56966>>>        Get IsSQLDriver    sDriverID to bSqlDriver
56967>>>        Get IsDAWSQLDriver sDriverID to bDawSqlDriver
56968>>>
56968>>>        Get _UtilTableIsSqlByRootName sRootName to bIsSqlTable
56969>>>        If (bIsSqlTable = True) Begin
56971>>>            Get _UtilTableExists hTable to bExists
56972>>>            If (bExists = False) Begin
56974>>>                Move True to APIColumnsEmpty[0].bError
56975>>>                Function_Return APIColumnsEmpty
56976>>>            End
56976>>>>
56976>>>        End
56976>>>>
56976>>>
56976>>>        Move 0 to iCount
56977>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
56980>>>        Set piMaximum of ghoProgressBar to iNumColumns
56981>>>
56981>>>        for iColumn from 1 to iNumColumns
56987>>>>
56987>>>            Move 0 to iOptions
56988>>>            Move False to bIdentityKey
56989>>>            Move False to Err
56990>>>            Move 0     to LastErr
56991>>>            Move bIsSqlTable to APIColumns[iCount].bIsSQLType
56992>>>            Set piPosition of ghoProgressBar to iColumn
56993>>>            If (bDawSqlDriver = True) Begin
56995>>>                Send Ignore_Error of Error_Object_Id DFERR_UNSUPPORTED_ATTRIBUTE
56996>>>                If (bIsSqlTable = True) Begin
56998>>>                    Get_Attribute DF_FIELD_NATIVE_TYPE      of hTable iColumn to iType
57001>>>                    Move iType                                                to APIColumns[iCount].iType
57002>>>                    Get_Attribute DF_FIELD_NATIVE_TYPE_NAME of hTable iColumn to APIColumns[iCount].sType
57005>>>                    Get_Attribute DF_FIELD_NULL_ALLOWED     of hTable iColumn to APIColumns[iCount].bAllowNULL
57008>>>                    Get_Attribute DF_FIELD_DEFAULT_VALUE    of hTable iColumn to APIColumns[iCount].sDefaultValue
57011>>>                End
57011>>>>
57011>>>                Else Begin
57012>>>                    Get_Attribute DF_FIELD_TYPE             of hTable iColumn to APIColumns[iCount].iType
57015>>>                    Get UtilColumnTypeToString sDriverID iDbType APIColumns[iCount].iType to APIColumns[iCount].sType
57016>>>                End
57016>>>>
57016>>>
57016>>>                // If the array value is out of bounce it means that this column doesn't exist on the backend.
57016>>>                Get_Attribute DF_Field_Number of hTable iColumn to iCheckFieldNumber
57019>>>                Move (iCheckFieldNumber >= 0) to bExists
57020>>>                If (bExists = False) Begin
57022>>>                    Move 0 to APIColumns[iCount].iType
57023>>>                End
57023>>>>
57023>>>                If (bExists = True) Begin
57025>>>                        Get_Attribute DF_FIELD_IS_IDENTITY of hTable iColumn to bIdentityKey
57028>>>                End
57028>>>>
57028>>>                Send Trap_Error of Error_Object_Id DFERR_UNSUPPORTED_ATTRIBUTE
57029>>>                If (bIdentityKey = True) Begin
57031>>>                    Move C_tAPIColumn_Identity to APIColumns[iCount].iOptions
57032>>>                End
57032>>>>
57032>>>            End
57032>>>>
57032>>>            Else Begin
57033>>>                Move False to Err
57034>>>                Move 0     to LastErr
57035>>>                If (bIsSqlTable = True) Begin
57037>>>                    Get_Attribute DF_FIELD_NATIVE_TYPE of hTable iColumn to APIColumns[iCount].iType
57040>>>                End
57040>>>>
57040>>>                Else Begin
57041>>>                    Get_Attribute DF_FIELD_TYPE        of hTable iColumn to APIColumns[iCount].iType
57044>>>                    Get UtilColumnTypeToString sDriverID iDbType APIColumns[iCount].iType to APIColumns[iCount].sType
57045>>>                End
57045>>>>
57045>>>                // If the array value is out of bounce it means that this column doesn't exist on the backend.
57045>>>                Move (LastErr <> DFERR_ARRAY_INDEX_OUT_OF_BOUNDS) to bExists
57046>>>                If (bExists = False) Begin
57048>>>                    Move 0 to APIColumns[iCount].iType
57049>>>                End
57049>>>>
57049>>>            End
57049>>>>
57049>>>
57049>>>            If (bExists = True) Begin
57051>>>                Move iColumn to APIColumns[iCount].iFieldNumber
57052>>>                Get_Attribute DF_FIELD_NAME        of hTable iColumn to APIColumns[iCount].sFieldName
57055>>>                // ToDo: Can't use native_size as it can get way to big and causes "out of memory" problems.
57055>>>//                If (bIsSqlTable = True) Begin
57055>>>//                    Get_Attribute DF_FIELD_NATIVE_SIZE of hTable iColumn to APIColumns[iCount].iLength
57055>>>//                    Get_Attribute DF_FIELD_PRECISION   of hTable iColumn to APIColumns[iCount].iPrecision
57055>>>//                End
57055>>>                Get_Attribute DF_FIELD_LENGTH      of hTable iColumn to APIColumns[iCount].iLength
57058>>>                Get_Attribute DF_FIELD_PRECISION   of hTable iColumn to APIColumns[iCount].iPrecision
57061>>>
57061>>>                // If the length was zero we might have an Overlap(!) field.
57061>>>                // We then need check the DF_FIELD_TYPE if it really is and reset data for this array item.
57061>>>                If (APIColumns[iCount].iLength = 0) Begin
57063>>>                    Get_Attribute DF_FIELD_TYPE    of hTable iColumn to iType
57066>>>                    If (iType = DF_OVERLAP) Begin
57068>>>                        Move 0 to APIColumns[iCount].iFieldNumber
57069>>>                        Move 0 to APIColumns[iCount].iLength
57070>>>                        Move 0 to APIColumns[iCount].iOptions
57071>>>                        Move 0 to APIColumns[iCount].iPrecision
57072>>>                        Move DF_OVERLAP to APIColumns[iCount].iType
57073>>>                        Move "" to APIColumns[iCount].sFieldName
57074>>>                        Decrement iCount
57075>>>                    End
57075>>>>
57075>>>                End
57075>>>>
57075>>>            End
57075>>>>
57075>>>            Get Check_StatusPanel of ghoStatusPanel to bUserCancel
57076>>>            If (bUserCancel = True) Begin
57078>>>                Move True to APIColumnsEmpty[0].bCancel
57079>>>                Function_Return APIColumnsEmpty
57080>>>            End
57080>>>>
57080>>>            Increment iCount
57081>>>        Loop
57082>>>>
57082>>>
57082>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
57083>>>        Function_Return APIColumns
57084>>>    End_Function
57085>>>
57085>>>    // This will return a struct array with the combined data for the passed FROM and TO index arrays.
57085>>>    // The combined data will be sorted on the first struct member: iIndexNumber
57085>>>    // This is needed because index numbers can start at any number. The range for a particular table might also
57085>>>    // have "holes" in the series of index numbers.
57085>>>    Function UtilColumnCombineFromAndToArrays tAPIColumn[] APIColumnFrom tAPIColumn[] APIColumnTo Returns tAPIIndexCompare[]
57087>>>        tAPIColumnCompare[] aAPIColumnCompare
57087>>>        tAPIColumnCompare[] aAPIColumnCompare
57088>>>        tAPIColumnCompare   APIColumnCompare
57088>>>        tAPIColumnCompare   APIColumnCompare
57088>>>        Integer iSizeFrom iSizeTo iSize iCount iItem
57088>>>
57088>>>        Move (SizeOfArray(APIColumnFrom)) to iSizeFrom
57089>>>        Decrement iSizeFrom
57090>>>        for iCount from 0 to iSizeFrom
57096>>>>
57096>>>            Move APIColumnFrom[iCount].iFieldNumber     to aAPIColumnCompare[iCount].iFieldNumber
57097>>>            Move APIColumnFrom[iCount].sFieldName       to aAPIColumnCompare[iCount].sFieldNameFrom
57098>>>            Move APIColumnFrom[iCount].iType            to aAPIColumnCompare[iCount].iTypeFrom
57099>>>            Move APIColumnFrom[iCount].sType            to aAPIColumnCompare[iCount].sTypeFrom
57100>>>            Move APIColumnFrom[iCount].iLength          to aAPIColumnCompare[iCount].iLengthFrom
57101>>>            Move APIColumnFrom[iCount].iPrecision       to aAPIColumnCompare[iCount].iPrecisionFrom
57102>>>            Move APIColumnFrom[iCount].iOptions         to aAPIColumnCompare[iCount].iOptionsFrom
57103>>>            Move APIColumnFrom[iCount].bIsSQLType       to aAPIColumnCompare[iCount].bIsSQLTypeFrom
57104>>>            Move APIColumnFrom[iCount].bAllowNULL       to aAPIColumnCompare[iCount].bAllowNULLFrom
57105>>>            Move APIColumnFrom[iCount].sDefaultValue    to aAPIColumnCompare[iCount].sDefaultValueFrom
57106>>>            Move APIColumnFrom[iCount].bShouldChange    to aAPIColumnCompare[iCount].bShouldChangeFrom
57107>>>            Move APIColumnFrom[iCount].bCancel          to aAPIColumnCompare[iCount].bCancelFrom
57108>>>            Move APIColumnFrom[iCount].bError           to aAPIColumnCompare[iCount].bErrorFrom
57109>>>            Move True                                   to aAPIColumnCompare[iCount].bExistsFrom
57110>>>        Loop
57111>>>>
57111>>>
57111>>>        Move (SizeOfArray(APIColumnTo)) to iSizeTo
57112>>>        Decrement iSizeTo
57113>>>        for iCount from 0 to iSizeTo
57119>>>>
57119>>>            Move APIColumnTo[iCount].iFieldNumber       to APIColumnCompare.iFieldNumber
57120>>>            // Search if the field number already exists in the array; else add it.
57120>>>            Move (SearchArray(APIColumnCompare, aAPIColumnCompare)) to iItem
57121>>>            If (iItem = -1) Begin
57123>>>                Move (SizeOfArray(aAPIColumnCompare))   to iItem
57124>>>            End
57124>>>>
57124>>>
57124>>>            Move APIColumnCompare.iFieldNumber          to aAPIColumnCompare[iItem].iFieldNumber
57125>>>            Move APIColumnTo[iCount].iFieldNumber       to aAPIColumnCompare[iItem].iFieldNumberTo
57126>>>            Move APIColumnTo[iCount].sFieldName         to aAPIColumnCompare[iItem].sFieldNameTo
57127>>>            Move APIColumnTo[iCount].iType              to aAPIColumnCompare[iItem].iTypeTo
57128>>>            Move APIColumnTo[iCount].sType              to aAPIColumnCompare[iItem].sTypeTo
57129>>>            Move APIColumnTo[iCount].iLength            to aAPIColumnCompare[iItem].iLengthTo
57130>>>            Move APIColumnTo[iCount].iPrecision         to aAPIColumnCompare[iItem].iPrecisionTo
57131>>>            Move APIColumnTo[iCount].iOptions           to aAPIColumnCompare[iItem].iOptionsTo
57132>>>            Move APIColumnTo[iCount].bIsSQLType         to aAPIColumnCompare[iItem].bIsSQLTypeTo
57133>>>            Move APIColumnTo[iCount].bAllowNULL         to aAPIColumnCompare[iItem].bAllowNULLTo
57134>>>            Move APIColumnTo[iCount].sDefaultValue      to aAPIColumnCompare[iItem].sDefaultValueTo
57135>>>            Move APIColumnTo[iCount].bShouldChange      to aAPIColumnCompare[iItem].bShouldChangeTo
57136>>>            Move APIColumnTo[iCount].bCancel            to aAPIColumnCompare[iItem].bCancelTo
57137>>>            Move APIColumnTo[iCount].bError             to aAPIColumnCompare[iItem].bErrorTo
57138>>>            Move True                                   to aAPIColumnCompare[iItem].bExistsTo
57139>>>        Loop
57140>>>>
57140>>>
57140>>>        Move (SortArray(aAPIColumnCompare)) to aAPIColumnCompare
57141>>>
57141>>>        Function_Return aAPIColumnCompare
57142>>>    End_Function
57143>>>
57143>>>    // Checks if a field name exists in a table definition
57143>>>    // Returns True if it does
57143>>>    // Sample:
57143>>>    //   Get UtilColumnExists MyTable.File_Number "MyColumnName" to iExists
57143>>>    Function UtilColumnExists Handle hTable String sFieldName Returns Boolean
57145>>>        Integer iNumColumns iColumn
57145>>>        String sColumn
57145>>>        Boolean bExists bOK bOpen
57145>>>
57145>>>        Get AutoConnectionIDLogin to bOK
57146>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57147>>>        Open hTable
57149>>>        Send Trap_Error   of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57150>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
57153>>>        If (bOpen = False) Begin
57155>>>            Function_Return False
57156>>>        End
57156>>>>
57156>>>
57156>>>        Move False to bExists
57157>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
57160>>>        for iColumn from 1 to iNumColumns
57166>>>>
57166>>>            Get_Attribute DF_FIELD_NAME of hTable iColumn to sColumn
57169>>>            If (Uppercase(sFieldName) = Uppercase(sColumn)) Begin
57171>>>                Move iNumColumns to iColumn
57172>>>                Move True to bExists
57173>>>            End
57173>>>>
57173>>>        Loop
57174>>>>
57174>>>        Close hTable
57175>>>
57175>>>        Function_Return bExists
57176>>>    End_Function
57177>>>
57177>>>    // Returns the field/column number for the passed FieldName as an integer.
57177>>>    Function UtilColumnNameToColumnNumber Handle hTable String sFieldName Returns Integer
57179>>>        Integer iNumColumns iColumn iRetval
57179>>>        String sColumn
57179>>>        Boolean bOK bOpen
57179>>>
57179>>>        Get AutoConnectionIDLogin to bOK
57180>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
57181>>>        Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57182>>>        Open hTable
57184>>>        Send Trap_Error   of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57185>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
57188>>>        If (bOpen = False) Begin
57190>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
57191>>>            Function_Return False
57192>>>        End
57192>>>>
57192>>>
57192>>>        Move 0 to iColumn
57193>>>        Move 0 to iRetval
57194>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
57197>>>        for iColumn from 1 to iNumColumns
57203>>>>
57203>>>            Get_Attribute DF_FIELD_NAME of hTable iColumn to sColumn
57206>>>            If (Uppercase(sFieldName) = Uppercase(sColumn)) Begin
57208>>>                Move iColumn to iRetval
57209>>>                Move iNumColumns to iColumn
57210>>>            End
57210>>>>
57210>>>        Loop
57211>>>>
57211>>>        Close hTable
57212>>>
57212>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
57213>>>        Function_Return iRetval
57214>>>    End_Function
57215>>>
57215>>>    // To convert between a data type string name and its integer constant declaration. E.g."VarChar" -> SQL_VarChar
57215>>>    // The reciprocal function is UtilColumnTypeToInteger.
57215>>>    Function UtilColumnTypeToInteger String sDriverID Integer iDbType String sDataType Returns Integer
57217>>>        tColumnType RetvalType
57217>>>        tColumnType RetvalType
57217>>>
57217>>>        Get _UtilColumnType sDriverID iDbType 0 sDataType False to RetvalType
57218>>>        Function_Return RetvalType.iSQLType
57219>>>    End_Function
57220>>>
57220>>>    // To convert between an integer data type constant and its string value. E.g. SQL_VarChar -> "VarChar".
57220>>>    // The reciprocal function is UtilColumnTypeToString.
57220>>>    Function UtilColumnTypeToString String sDriverID Integer iDbType Integer iDataType Returns String
57222>>>        tColumnType RetvalType
57222>>>        tColumnType RetvalType
57222>>>
57222>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
57223>>>        Function_Return RetvalType.sSQLType
57224>>>    End_Function
57225>>>
57225>>>    Function UtilColumnTypePrecision String sDriverID Integer iDbType Integer iDataType Returns String
57227>>>        tColumnType RetvalType
57227>>>        tColumnType RetvalType
57227>>>
57227>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
57228>>>        Function_Return RetvalType.sPrecision
57229>>>    End_Function
57230>>>
57230>>>    Function UtilColumnTypeFixed String sDriverID Integer iDbType Integer iDataType Returns Boolean
57232>>>        tColumnType RetvalType
57232>>>        tColumnType RetvalType
57232>>>
57232>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
57233>>>        // Nils 2019-02-15. This return value seems to have been wrong. The function should return False
57233>>>        // if the column type length is _not_ fixed.
57233>>>        Function_Return (RetvalType.bCanEditSize = False)
57234>>>    End_Function
57235>>>
57235>>>    Function UtilColumnTypePrecisionSize String sDriverID Integer iDbType Integer iDataType Returns Integer
57237>>>        tColumnType RetvalType
57237>>>        tColumnType RetvalType
57237>>>        String sValue
57237>>>        Integer iRetval iPos
57237>>>
57237>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
57238>>>        Move RetvalType.sPrecision to sValue
57239>>>        Move (Pos(".", sValue)) to iPos
57240>>>        If (iPos <> 0) Begin
57242>>>            Move (Left(sValue, (iPos -1))) to iRetval
57243>>>        End
57243>>>>
57243>>>        Else Begin
57244>>>            Move sValue to iRetval
57245>>>        End
57245>>>>
57245>>>        Function_Return iRetval
57246>>>    End_Function
57247>>>
57247>>>    Function UtilColumnTypePrecisionDec String sDriverID Integer iDbType Integer iDataType Returns Integer
57249>>>        tColumnType RetvalType
57249>>>        tColumnType RetvalType
57249>>>        String sValue
57249>>>        Integer iRetval iPos
57249>>>
57249>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
57250>>>        Move RetvalType.sPrecision to sValue
57251>>>        Move (Pos(".", sValue)) to iPos
57252>>>        If (iPos = 0) Begin
57254>>>            Function_Return 0
57255>>>        End
57255>>>>
57255>>>        Move (Mid(sValue, 99, (iPos + 1))) to iRetval
57256>>>
57256>>>        Function_Return iRetval
57257>>>    End_Function
57258>>>
57258>>>    // * Dummy function for the Studio's Code Explorer *
57258>>>    Function API_INDEX_UTILITY_FUNCTIONS Returns Boolean
57260>>>        Function_Return False
57261>>>    End_Function
57262>>>
57262>>>    // Compares multiple indexes for a 'FROM' and a 'TO' table.
57262>>>    Function UtilIndexesCompare Boolean bIsSQLTableFrom Boolean bIsSQLTableTo tAPIIndexCompare[] aAPIIndexCompare Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Boolean
57264>>>        Boolean bIsSame
57264>>>        Integer iCount iSize
57264>>>
57264>>>        Move True to bIsSame
57265>>>        Move (SizeOfArray(aAPIIndexCompare)) to iSize
57266>>>        Decrement iSize
57267>>>        For iCount from 0 to iSize
57273>>>>
57273>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
57274>>>            Send Ignore_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
57275>>>            Get UtilIndexCompare bIsSQLTableFrom bIsSQLTableTo aAPIIndexCompare[iCount] bCompareIndexUppercase bCompareIndexAscending to bIsSame
57276>>>            Send Trap_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
57277>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
57278>>>            If (bIsSame = False) Begin
57280>>>                Function_Return False
57281>>>            End
57281>>>>
57281>>>        Loop
57282>>>>
57282>>>
57282>>>        Function_Return bIsSame
57283>>>    End_Function
57284>>>
57284>>>    // Compares a single index for a 'FROM' and a 'TO' table.
57284>>>    Function UtilIndexCompare Boolean bIsSQLTableFrom Boolean bIsSQLTableTo tAPIIndexCompare APIIndexCompare Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Boolean
57286>>>        Boolean bIsSame
57286>>>        Integer iSegment
57286>>>
57286>>>        Move (APIIndexCompare.bExistsFrom = APIIndexCompare.bExistsTo) to bIsSame
57287>>>        If (bIsSame = False) Begin
57289>>>            Function_Return False
57290>>>        End
57290>>>>
57290>>>        Move (APIIndexCompare.iPrimaryIndexFrom = APIIndexCompare.iPrimaryIndexTo) to bIsSame
57291>>>        If (bIsSame = False) Begin
57293>>>            Function_Return False
57294>>>        End
57294>>>>
57294>>>
57294>>>        If (bIsSqlTableFrom = True and bIsSqlTableTo = True) Begin
57296>>>            // * We should probably not compare SQL index names?
57296>>>            // Move (Uppercase(aIndexFrom.sSQLIndexName) = Uppercase(aIndexTo.sSQLIndexName)) to bIsSame
57296>>>            // If (bIsSame = False) Begin   DF_INDEX_SERVER_ONLY
57296>>>            //     Function_Return False
57296>>>            // End
57296>>>            Move (APIIndexCompare.bIsSQLPrimaryKeyFrom = APIIndexCompare.bIsSQLPrimaryKeyTo) to bIsSame
57297>>>            If (bIsSame = False) Begin
57299>>>                Function_Return False
57300>>>            End
57300>>>>
57300>>>            Move (APIIndexCompare.bIsSQLClusteredFrom = APIIndexCompare.bIsSQLClusteredTo) to bIsSame
57301>>>            If (bIsSame = False) Begin
57303>>>                Function_Return False
57304>>>            End
57304>>>>
57304>>>            Move (APIIndexCompare.iSQLIndexTypeFrom = APIIndexCompare.iSQLIndexTypeTo) to bIsSame
57305>>>            If (bIsSame = False) Begin
57307>>>                Function_Return False
57308>>>            End
57308>>>>
57308>>>            Move (Uppercase(APIIndexCompare.sSQLIndexNameFrom) = Uppercase(APIIndexCompare.sSQLIndexNameTo)) to bIsSame
57309>>>            If (bIsSame = False) Begin
57311>>>                Function_Return False
57312>>>            End
57312>>>>
57312>>>        End
57312>>>>
57312>>>
57312>>>        Get UtilIndexSegmentsCompare APIIndexCompare.IndexSegmentArrayFrom APIIndexCompare.IndexSegmentArrayTo bCompareIndexUppercase bCompareIndexAscending to iSegment
57313>>>        Move (iSegment = -1) to bIsSame
57314>>>
57314>>>        Function_Return (bIsSame = True)
57315>>>    End_Function
57316>>>
57316>>>    // Compares each segment for the passed index.
57316>>>    // Returns -1 if same; else returns the index segment that differs.
57316>>>    Function UtilIndexSegmentsCompare tAPIIndexSegment[] aIndexSegmentFrom tAPIIndexSegment[] aIndexSegmentTo Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Integer
57318>>>        Integer iNumSegmentsFrom iNumSegmentsTo iNumSegments iSegment
57318>>>        Boolean bIsSame
57318>>>
57318>>>        Send Ignore_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
57319>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
57320>>>        Move (SizeOfArray(aIndexSegmentFrom))      to iNumSegmentsFrom
57321>>>        Move (SizeOfArray(aIndexSegmentTo))        to iNumSegmentsTo
57322>>>        Move (iNumSegmentsFrom max iNumSegmentsTo) to iNumSegments
57323>>>
57323>>>        Decrement iNumSegments
57324>>>        for iSegment from 0 to iNumSegments
57330>>>>
57330>>>            Move False to bIsSame
57331>>>            If (iSegment < iNumSegmentsFrom and iSegment < iNumSegmentsTo) Begin
57333>>>                Get UtilIndexSegmentCompare aIndexSegmentFrom[iSegment] aIndexSegmentTo[iSegment] bCompareIndexUppercase bCompareIndexAscending to bIsSame
57334>>>            End
57334>>>>
57334>>>            If (bIsSame = False) Begin
57336>>>                Send Trap_Error of Error_Object_Id DFERR_ARRAY_INDEX_OUT_OF_BOUNDS
57337>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
57338>>>                Function_Return iSegment
57339>>>            End
57339>>>>
57339>>>        Loop
57340>>>>
57340>>>
57340>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
57341>>>        Function_Return -1 // This means bIsSame = True
57342>>>    End_Function
57343>>>
57343>>>    Function UtilIndexSegmentCompare tAPIIndexSegment aIndexSegmentFrom tAPIIndexSegment aIndexSegmentTo Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Integer
57345>>>        Boolean bIsSame
57345>>>
57345>>>        Move (aIndexSegmentFrom.iFieldNumber = aIndexSegmentTo.iFieldNumber) to bIsSame
57346>>>        If (bIsSame = False) Begin
57348>>>            Function_Return False
57349>>>        End
57349>>>>
57349>>>        If (bCompareIndexUppercase = True) Begin
57351>>>            Move (aIndexSegmentFrom.bUppercase = aIndexSegmentTo.bUppercase) to bIsSame
57352>>>            If (bIsSame = False) Begin
57354>>>                Function_Return False
57355>>>            End
57355>>>>
57355>>>        End
57355>>>>
57355>>>        If (bCompareIndexAscending = True) Begin
57357>>>            Move (aIndexSegmentFrom.bAscending = aIndexSegmentTo.bAscending) to bIsSame
57358>>>            If (bIsSame = False) Begin
57360>>>                Function_Return False
57361>>>            End
57361>>>>
57361>>>        End
57361>>>>
57361>>>
57361>>>        Function_Return True
57362>>>    End_Function
57363>>>
57363>>>    Function UtilIndexesUpdate Handle hTable Boolean bIsSQLTableFrom Boolean bIsSQLTableTo tAPIIndex[] aIndexesFrom tAPIIndex[] aIndexesTo Boolean bCompareIndexUppercase Boolean bCompareIndexAscending Returns Boolean
57365>>>        Boolean bIsSame bOK
57365>>>        Integer iSize iSizeTo iCount
57365>>>        tAPIIndexCompare[] aAPIIndexCompare
57365>>>        tAPIIndexCompare[] aAPIIndexCompare
57366>>>
57366>>>        Move (SizeOfArray(aIndexesFrom)) to iSize
57367>>>        If (iSize = 0) Begin
57369>>>            Function_Return True
57370>>>        End
57370>>>>
57370>>>        Move (SizeOfArray(aIndexesTo)) to iSizeTo
57371>>>        Get _UtilTableIsSql hTable to bIsSQLTableTo
57372>>>        Get UtilIndexCombineFromAndToArrays aIndexesFrom aIndexesTo to aAPIIndexCompare
57373>>>
57373>>>        for iCount from 0 to (iSize - 1)
57379>>>>
57379>>>            Get UtilIndexCompare bIsSQLTableFrom bIsSQLTableTo aAPIIndexCompare[iCount] bCompareIndexUppercase bCompareIndexAscending to bIsSame
57380>>>            If (bIsSame = False) Begin
57382>>>                Get APIIndexCreateByFieldNames hTable aIndexesFrom[iCount] aIndexesTo aIndexesFrom[iCount].IndexSegmentArray to bOK
57383>>>            End
57383>>>>
57383>>>        Loop
57384>>>>
57384>>>
57384>>>        // We probably should delete other indexes if they exists.
57384>>>        for iCount from (iSize +1) to iSizeTo
57390>>>>
57390>>>            Get ApiIndexRemove hTable iCount to bOK
57391>>>        Loop
57392>>>>
57392>>>
57392>>>        Function_Return bOK
57393>>>    End_Function
57394>>>
57394>>>    Function UtilIndexesStructFill Handle hTable Returns tAPIIndex[]
57396>>>        tAPIIndex[] APIIndexes
57396>>>        tAPIIndex[] APIIndexes
57397>>>        Integer iCount iIndex iIndexes iSegment iSegmentCount iNumSegments iColumn
57397>>>        String sDriverID
57397>>>        Boolean bDAWSQLDriver bIsOpen bIsSQLTable
57397>>>
57397>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
57398>>>        Get psDriverID to sDriverID
57399>>>        Get IsDAWSQLDriver sDriverID to bDAWSQLDriver
57400>>>        Get _UtilTableIsSql hTable to bIsSQLTable
57401>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
57404>>>        If (bIsOpen = False) Begin
57406>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57407>>>            Set Error_Report_Mode to DUF_ERROR_NO_REPORT
57408>>>            Open hTable
57410>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
57411>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57412>>>            Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
57415>>>            If (bIsOpen = False) Begin
57417>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
57418>>>                Move True to APIIndexes[0].bError
57419>>>                Function_Return APIIndexes
57420>>>            End
57420>>>>
57420>>>        End
57420>>>>
57420>>>
57420>>>        Move 0 to iCount
57421>>>        Get_Attribute DF_FILE_LAST_INDEX_NUMBER of hTable to iIndexes
57424>>>        for iIndex from 1 to iIndexes
57430>>>>
57430>>>            // This is a test that the index exists as there might be "holes" aka the index
57430>>>            // numbers doesn't not need to be consequitive:
57430>>>            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
57433>>>            If (iNumSegments > 0) Begin
57435>>>
57435>>>                Move iIndex                                                     to APIIndexes[iCount].iIndexNumber
57436>>>                Get_Attribute DF_FILE_PRIMARY_INDEX of hTable                   to APIIndexes[iCount].iPrimaryIndex
57439>>>                If (bIsSQLTable = True) Begin
57441>>>                    Get_Attribute DF_INDEX_NAME         of hTable iIndex        to APIIndexes[iCount].sSQLIndexName
57444>>>                        Get_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable iIndex to APIIndexes[iCount].bIsSQLPrimaryKey
57447>>>                        Get_Attribute DF_INDEX_CLUSTERED of hTable iIndex       to APIIndexes[iCount].bIsSQLClustered
57450>>>                        Get_Attribute DF_INDEX_SQL_TYPE of hTable iIndex        to APIIndexes[iCount].iSQLIndexType // (DF_INDEX_SQL_TYPE = DF_INDEX_SERVER, DF_INDEX_CLIENT, DF_INDEX_SERVER_ONLY or DF_INDEX_TEMPORARY)
57453>>>                End
57453>>>>
57453>>>
57453>>>                Move 0 to iSegmentCount
57454>>>                Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
57457>>>                For iSegment from 1 to iNumSegments
57463>>>>
57463>>>                    Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iSegment to iColumn
57466>>>                    Move iColumn                                                       to APIIndexes[iCount].IndexSegmentArray[iSegmentCount].iFieldNumber
57467>>>                    Get_Attribute DF_FIELD_NAME              of hTable iColumn         to APIIndexes[iCount].IndexSegmentArray[iSegmentCount].sFieldName
57470>>>                    Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iSegment to APIIndexes[iCount].IndexSegmentArray[iSegmentCount].bUppercase
57473>>>                    Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iSegment to APIIndexes[iCount].IndexSegmentArray[iSegmentCount].bAscending
57476>>>                    Increment iSegmentCount
57477>>>                Loop
57478>>>>
57478>>>                Increment iCount
57479>>>            End
57479>>>>
57479>>>        Loop
57480>>>>
57480>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
57481>>>
57481>>>        Function_Return APIIndexes
57482>>>    End_Function
57483>>>
57483>>>    // This will return a struct array with the combined data for the passed FROM and TO index arrays.
57483>>>    // The combined data will be sorted on the first struct member: iIndexNumber
57483>>>    // This is needed because index numbers can start at any number. The range for a particular table might also
57483>>>    // have "holes" in the series of index numbers.
57483>>>    Function UtilIndexCombineFromAndToArrays tAPIIndex[] APIIndexFrom tAPIIndex[] APIIndexTo Returns tAPIIndexCompare[]
57485>>>        tAPIIndexCompare[] aAPIIndexCompare
57485>>>        tAPIIndexCompare[] aAPIIndexCompare
57486>>>        tAPIIndexCompare   APIIndexCompare
57486>>>        tAPIIndexCompare   APIIndexCompare
57486>>>        Integer iSizeFrom iSizeTo iSize iCount iItem
57486>>>
57486>>>        Move (SizeOfArray(APIIndexFrom)) to iSizeFrom
57487>>>        Move (SizeOfArray(APIIndexTo)) to iSizeTo
57488>>>        If (iSizeFrom = 0 and iSizeTo = 0) Begin
57490>>>            Function_Return aAPIIndexCompare
57491>>>        End
57491>>>>
57491>>>
57491>>>        Decrement iSizeFrom
57492>>>        for iCount from 0 to iSizeFrom
57498>>>>
57498>>>            Move APIIndexFrom[iCount].iIndexNumber      to aAPIIndexCompare[iCount].iIndexNumber
57499>>>            Move APIIndexFrom[iCount].iPrimaryIndex     to aAPIIndexCompare[iCount].iPrimaryIndexFrom
57500>>>            Move APIIndexFrom[iCount].sSQLIndexName     to aAPIIndexCompare[iCount].sSQLIndexNameFrom
57501>>>            Move APIIndexFrom[iCount].iSQLIndexType     to aAPIIndexCompare[iCount].iSQLIndexTypeFrom
57502>>>            Move APIIndexFrom[iCount].bIsSQLClustered   to aAPIIndexCompare[iCount].bIsSQLClusteredFrom
57503>>>            Move APIIndexFrom[iCount].bIsSQLPrimaryKey  to aAPIIndexCompare[iCount].bIsSQLPrimaryKeyFrom
57504>>>            Move APIIndexFrom[iCount].IndexSegmentArray to aAPIIndexCompare[iCount].IndexSegmentArrayFrom
57505>>>            Move APIIndexFrom[iCount].bShouldChange     to aAPIIndexCompare[iCount].bShouldChangeFrom
57506>>>            Move APIIndexFrom[iCount].bCancel           to aAPIIndexCompare[iCount].bCancelFrom
57507>>>            Move APIIndexFrom[iCount].bError            to aAPIIndexCompare[iCount].bErrorFrom
57508>>>            Move True                                   to aAPIIndexCompare[iCount].bExistsFrom
57509>>>        Loop
57510>>>>
57510>>>
57510>>>        Decrement iSizeTo
57511>>>        for iCount from 0 to iSizeTo
57517>>>>
57517>>>            Move APIIndexTo[iCount].iIndexNumber        to APIIndexCompare.iIndexNumber
57518>>>            // Search if the Index number already exists in the array; else add it.
57518>>>            Move (SearchArray(APIIndexCompare, aAPIIndexCompare)) to iItem
57519>>>            If (iItem = -1) Begin
57521>>>                Move (SizeOfArray(aAPIIndexCompare))    to iItem
57522>>>            End
57522>>>>
57522>>>
57522>>>            Move APIIndexCompare.iIndexNumber           to aAPIIndexCompare[iItem].iIndexNumber
57523>>>            Move APIIndexTo[iCount].iPrimaryIndex       to aAPIIndexCompare[iItem].iPrimaryIndexTo
57524>>>            Move APIIndexTo[iCount].sSQLIndexName       to aAPIIndexCompare[iItem].sSQLIndexNameTo
57525>>>            Move APIIndexTo[iCount].iSQLIndexType       to aAPIIndexCompare[iItem].iSQLIndexTypeTo
57526>>>            Move APIIndexTo[iCount].bIsSQLClustered     to aAPIIndexCompare[iItem].bIsSQLClusteredTo
57527>>>            Move APIIndexTo[iCount].bIsSQLPrimaryKey    to aAPIIndexCompare[iItem].bIsSQLPrimaryKeyTo
57528>>>            Move APIIndexTo[iCount].IndexSegmentArray   to aAPIIndexCompare[iItem].IndexSegmentArrayTo
57529>>>            Move APIIndexTo[iCount].bShouldChange       to aAPIIndexCompare[iItem].bShouldChangeTo
57530>>>            Move APIIndexTo[iCount].bCancel             to aAPIIndexCompare[iItem].bCancelTo
57531>>>            Move APIIndexTo[iCount].bError              to aAPIIndexCompare[iItem].bErrorTo
57532>>>            Move True                                   to aAPIIndexCompare[iItem].bExistsTo
57533>>>        Loop
57534>>>>
57534>>>
57534>>>        Move (SortArray(aAPIIndexCompare)) to aAPIIndexCompare
57535>>>
57535>>>        Function_Return aAPIIndexCompare
57536>>>    End_Function
57537>>>
57537>>>    // This is the same as the UtilIndexCompare function but it takes tAPIIndex structs as params.
57537>>>    Function UtilIndexTypeNumberCompare Handle hTable tAPIIndex aIndexFrom tAPIIndex aIndexTo Returns Boolean
57539>>>        Boolean bIsSame bDAWSQLDriver bIsSqlTable
57539>>>        String sDriverID
57539>>>
57539>>>        Get psDriverID to sDriverID
57540>>>        Get IsDAWSQLDriver sDriverID to bDAWSQLDriver
57541>>>        Get IsSQLDriver sDriverID to bIsSqlTable
57542>>>        If (bIsSqlTable = True) Begin
57544>>>            Get _UtilTableIsSql hTable to bIsSqlTable
57545>>>        End
57545>>>>
57545>>>
57545>>>        Move (aIndexFrom.iIndexNumber = aIndexTo.iIndexNumber) to bIsSame
57546>>>        If (bIsSame = False) Begin
57548>>>            Function_Return False
57549>>>        End
57549>>>>
57549>>>
57549>>>        If (bDAWSQLDriver = True and bIsSqlTable = True) Begin
57551>>>            // Don't think we should do this. Or should we?
57551>>>            // Move (aIndexesFrom[iCount].sSQLIndexName = aIndexesTo[iCount].sSQLIndexName) to bIsSame
57551>>>
57551>>>            Move (aIndexFrom.iSQLIndexType = aIndexTo.iSQLIndexType) to bIsSame
57552>>>            If (bIsSame = False) Begin
57554>>>                Function_Return False
57555>>>            End
57555>>>>
57555>>>            Move (aIndexFrom.iPrimaryIndex = aIndexTo.iPrimaryIndex) to bIsSame
57556>>>            If (bIsSame = False) Begin
57558>>>                Function_Return False
57559>>>            End
57559>>>>
57559>>>            Move (aIndexFrom.bIsSQLPrimaryKey = aIndexTo.bIsSQLPrimaryKey) to bIsSame
57560>>>            If (bIsSame = False) Begin
57562>>>                Function_Return False
57563>>>            End
57563>>>>
57563>>>            Move (aIndexFrom.bIsSQLClustered = aIndexTo.bIsSQLClustered) to bIsSame
57564>>>            If (bIsSame = False) Begin
57566>>>                Function_Return False
57567>>>            End
57567>>>>
57567>>>        End
57567>>>>
57567>>>
57567>>>        Function_Return bIsSame
57568>>>    End_Function
57569>>>
57569>>>    // DF_INDEX_SQL_TYPE values
57569>>>    // Pass one of the DF_INDEX_XXX integer constants and the function
57569>>>    // returns a string with the name.
57569>>>    Function UtilIndexTypeToString Integer iIndexType Returns String
57571>>>        String sRetval
57571>>>            Case Begin
57571>>>                Case (iIndexType = DF_INDEX_CLIENT)
57573>>>                    Move "DF_INDEX_CLIENT" to sRetval
57574>>>                    Case Break
57575>>>                Case (iIndexType = DF_INDEX_SERVER)
57578>>>                    Move "DF_INDEX_SERVER" to sRetval
57579>>>                    Case Break
57580>>>                Case (iIndexType = DF_INDEX_SERVER_ONLY)
57583>>>                    Move "DF_INDEX_SERVER_ONLY" to sRetval
57584>>>                    Case Break
57585>>>                Case (iIndexType = DF_INDEX_TEMPORARY)
57588>>>                    Move "DF_INDEX_TEMPORARY" to sRetval
57589>>>                    Case Break
57590>>>                Case Else
57590>>>                    Move "UNKNOWN INDEX TYPE" to sRetval
57591>>>            Case End
57591>>>        Function_Return sRetval
57592>>>    End_Function
57593>>>
57593>>>    // * Dummy function for the Studio's Code Explorer *
57593>>>    Function API_RELATION_UTILITY_FUNCTIONS Returns Boolean
57595>>>        Function_Return False
57596>>>    End_Function
57597>>>
57597>>>    // Compares multiple relationships for a 'FROM' and a 'TO' databases
57597>>>    Function UtilRelationsCompare Handle hTable tAPIRelationCompare[] aAPIRelationCompare Returns Boolean
57599>>>        Boolean bIsSame
57599>>>        Integer iSize iCount
57599>>>
57599>>>        Move True to bIsSame
57600>>>        Move (SizeOfArray(aAPIRelationCompare)) to iSize
57601>>>        Decrement iSize
57602>>>        For iCount from 0 to iSize
57608>>>>
57608>>>            Get UtilRelationCompare hTable aAPIRelationCompare[iCount] to bIsSame
57609>>>            If (bIsSame = False) Begin
57611>>>                Function_Return False
57612>>>            End
57612>>>>
57612>>>        Loop
57613>>>>
57613>>>
57613>>>        Function_Return bIsSame
57614>>>    End_Function
57615>>>
57615>>>    // Compares a single relationship for a 'FROM' and a 'TO' table
57615>>>    Function UtilRelationCompare Handle hTable tAPIRelationCompare APIRelationCompare Returns Boolean
57617>>>        Boolean bIsSame
57617>>>
57617>>>        Move True to bIsSame
57618>>>        If (APIRelationCompare.bExistsFrom <> APIRelationCompare.bExistsTo) Begin
57620>>>            Function_Return False
57621>>>        End
57621>>>>
57621>>>        If (APIRelationCompare.hTableFrom = 0 or APIRelationCompare.hTableTo = 0) Begin
57623>>>            Function_Return False
57624>>>        End
57624>>>>
57624>>>
57624>>>        // We could also compare field names, but I don't think that is necessary...
57624>>>
57624>>>        Function_Return bIsSame
57625>>>    End_Function
57626>>>
57626>>>    // This message is different from ApiTableCreate in that it will not do a function_return if the table
57626>>>    // already exists.
57626>>>    Function UtilRelationsUpdate Handle hTable tAPIRelation[] aRelationsFrom tAPIRelation[] aRelationsTo Returns Boolean
57628>>>        Boolean bOK
57628>>>        Integer iSizeTo iSize iCount iColumn
57628>>>        String sDriverID
57628>>>
57628>>>        Move True to bOK
57629>>>        Move (SizeOfArray(aRelationsTo))   to iSizeTo
57630>>>        If (iSizeTo > 0) Begin
57632>>>            Get AutoConnectionIDLogin to bOK
57633>>>            Move False to Err
57634>>>            Open hTable Mode DF_EXCLUSIVE
57636>>>            Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
57639>>>            Decrement iSizeTo
57640>>>
57640>>>            // We should probably not make any comparison between "FROM" and "TO" database; instead just create all "FROM" relations
57640>>>            // for the "TO" database. But start by deleting all current "TO" relations:
57640>>>            Structure_Start hTable sDriverID
57641>>>                for iCount from 0 to iSizeTo
57647>>>>
57647>>>                    Move aRelationsTo[iCount].iColumnFrom to iColumn
57648>>>                    Set_Attribute DF_FIELD_RELATED_FILE  of hTable iColumn to 0
57651>>>                    Set_Attribute DF_FIELD_RELATED_FIELD of hTable iColumn to 0
57654>>>                Loop
57655>>>>
57655>>>                Set Action_Text of ghoStatusPanel to "Restructures table..."
57656>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
57658>>>            Set Action_Text of ghoStatusPanel to ""
57659>>>        End
57659>>>>
57659>>>
57659>>>        Move (SizeOfArray(aRelationsFrom)) to iSize
57660>>>        Decrement iSize
57661>>>        for iCount from 0 to iSize
57667>>>>
57667>>>            Get ApiTableRelate aRelationsFrom[iCount].hTableFrom aRelationsFrom[iCount].hTableTo aRelationsFrom[iCount].iColumnFrom aRelationsFrom[iCount].iColumnTo aRelationsTo to bOK
57668>>>        Loop
57669>>>>
57669>>>
57669>>>        Function_Return bOK
57670>>>    End_Function
57671>>>
57671>>>    Function UtilRelationsStructFill Handle hTable Returns tAPIRelation[]
57673>>>        tAPIRelation[] APIRelations
57673>>>        tAPIRelation[] APIRelations
57674>>>        Integer iColumn iColumnTo iNumColumns iCount
57674>>>        Handle hParent
57674>>>        Boolean bIsOpen
57674>>>
57674>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
57675>>>        Move 0 to iCount
57676>>>        Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
57679>>>        If (bIsOpen = False) Begin
57681>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57682>>>            Open hTable
57684>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
57685>>>            Get_Attribute DF_FILE_OPENED of hTable to bIsOpen
57688>>>            If (bIsOpen = False) Begin
57690>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
57691>>>                Move True to APIRelations[0].bError
57692>>>                Function_Return APIRelations
57693>>>            End
57693>>>>
57693>>>        End
57693>>>>
57693>>>
57693>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iNumColumns
57696>>>        For iColumn from 1 to iNumColumns
57702>>>>
57702>>>            Get_Attribute DF_FIELD_RELATED_FILE of hTable iColumn to hParent
57705>>>            If (hParent <> 0) Begin
57707>>>                Open hParent
57709>>>                Move hTable                                             to APIRelations[iCount].hTableFrom
57710>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable            to APIRelations[iCount].sLogicalNameFrom
57713>>>                Move iColumn                                            to APIRelations[iCount].iColumnFrom
57714>>>                Get_Attribute DF_FIELD_NAME of hTable iColumn           to APIRelations[iCount].sFieldNameFrom
57717>>>
57717>>>                Move hParent                                            to APIRelations[iCount].hTableTo
57718>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hParent           to APIRelations[iCount].sLogicalNameTo
57721>>>                Get_Attribute DF_FIELD_RELATED_FIELD of hTable iColumn  to iColumnTo
57724>>>                Move iColumnTo                                          to APIRelations[iCount].iColumnTo
57725>>>                Get_Attribute DF_FIELD_NAME of hParent iColumnTo        to APIRelations[iCount].sFieldNameTo
57728>>>                Move False                                              to APIRelations[iCount].bShouldChange
57729>>>                Move False                                              to APIRelations[iCount].bCancel
57730>>>                Move False                                              to APIRelations[iCount].bError
57731>>>                Close hParent
57732>>>                Increment iCount
57733>>>            End
57733>>>>
57733>>>        Loop
57734>>>>
57734>>>
57734>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
57735>>>        Function_Return APIRelations
57736>>>    End_Function
57737>>>
57737>>>    // This will return a struct array with the combined data for the passed FROM and TO index arrays.
57737>>>    // The combined data will be sorted on the first 4 struct members: hTableFrom, iColumnFrom, hTableTo and iColumnTo
57737>>>    Function UtilRelationCombineFromAndToArrays tAPIRelation[] aAPIRelationFrom tAPIRelation[] aAPIRelationTo Returns tAPIIndexCompare[]
57739>>>        tAPIRelation[] aAPIRelationFromAndTo
57739>>>        tAPIRelation[] aAPIRelationFromAndTo
57740>>>        tAPIRelationCompare[] aAPIRelationCompare
57740>>>        tAPIRelationCompare[] aAPIRelationCompare
57741>>>        tAPIRelationCompare   APIRelationCompare
57741>>>        tAPIRelationCompare   APIRelationCompare
57741>>>        Integer iSizeFrom iSizeTo iSize iCount iItem
57741>>>
57741>>>        Move (SizeOfArray(aAPIRelationFrom)) to iSizeFrom
57742>>>        Move (SizeOfArray(aAPIRelationTo))   to iSizeTo
57743>>>        If (iSizeFrom = 0 and iSizeTo = 0) Begin
57745>>>            Function_Return aAPIRelationCompare
57746>>>        End
57746>>>>
57746>>>
57746>>>        Move (AppendArray(aAPIRelationFrom, aAPIRelationTo)) to aAPIRelationFromAndTo
57747>>>        Move (SortArray(aAPIRelationFromAndTo, Self, RefFunc(__UtilRelationArrayCompare))) to aAPIRelationFromAndTo
57748>>>
57748>>>        Decrement iSizeFrom
57749>>>        for iCount from 0 to iSizeFrom
57755>>>>
57755>>>            Move aAPIRelationFrom[iCount].hTableFrom        to aAPIRelationCompare[iCount].hTableFrom
57756>>>            Move aAPIRelationFrom[iCount].iColumnFrom       to aAPIRelationCompare[iCount].iColumnFrom
57757>>>            Move aAPIRelationFrom[iCount].hTableTo          to aAPIRelationCompare[iCount].hTableTo
57758>>>            Move aAPIRelationFrom[iCount].iColumnTo         to aAPIRelationCompare[iCount].iColumnTo
57759>>>            Move aAPIRelationFrom[iCount].sLogicalNameFrom  to aAPIRelationCompare[iCount].sLogicalNameFrom_From
57760>>>            Move aAPIRelationFrom[iCount].sLogicalNameTo    to aAPIRelationCompare[iCount].sLogicalNameTo_From
57761>>>            Move aAPIRelationFrom[iCount].sFieldNameFrom    to aAPIRelationCompare[iCount].sFieldNameFrom_From
57762>>>            Move aAPIRelationFrom[iCount].sFieldNameTo      to aAPIRelationCompare[iCount].sFieldNameTo_From
57763>>>            Move aAPIRelationFrom[iCount].bShouldChange     to aAPIRelationCompare[iCount].bShouldChange_From
57764>>>            Move aAPIRelationFrom[iCount].bCancel           to aAPIRelationCompare[iCount].bCancel_From
57765>>>            Move aAPIRelationFrom[iCount].bError            to aAPIRelationCompare[iCount].bError_From
57766>>>            Move True                                       to aAPIRelationCompare[iCount].bExistsFrom
57767>>>        Loop
57768>>>>
57768>>>
57768>>>        Decrement iSizeTo
57769>>>        for iCount from 0 to iSizeTo
57775>>>>
57775>>>            Move aAPIRelationTo[iCount].hTableFrom          to APIRelationCompare.hTableFrom
57776>>>            Move aAPIRelationTo[iCount].iColumnFrom         to APIRelationCompare.iColumnFrom
57777>>>            Move aAPIRelationTo[iCount].hTableTo            to APIRelationCompare.hTableTo
57778>>>            Move aAPIRelationTo[iCount].iColumnTo           to APIRelationCompare.iColumnTo
57779>>>
57779>>>            // Search if the relation already exists in the array; else add it.
57779>>>            Move (SearchArray(APIRelationCompare, aAPIRelationCompare, Self, RefFunc(__SearchRelationCompare))) to iItem
57780>>>            If (iItem = -1) Begin
57782>>>                Move (SizeOfArray(aAPIRelationCompare))     to iItem
57783>>>            End
57783>>>>
57783>>>
57783>>>            Move APIRelationCompare.hTableFrom              to aAPIRelationCompare[iItem].hTableFrom
57784>>>            Move APIRelationCompare.iColumnFrom             to aAPIRelationCompare[iItem].iColumnFrom
57785>>>            Move APIRelationCompare.hTableTo                to aAPIRelationCompare[iItem].hTableTo
57786>>>            Move APIRelationCompare.iColumnTo               to aAPIRelationCompare[iItem].iColumnTo
57787>>>            Move aAPIRelationTo[iCount].sLogicalNameFrom    to aAPIRelationCompare[iItem].sLogicalNameFrom_To
57788>>>            Move aAPIRelationTo[iCount].sLogicalNameTo      to aAPIRelationCompare[iItem].sLogicalNameTo_To
57789>>>            Move aAPIRelationTo[iCount].sFieldNameFrom      to aAPIRelationCompare[iItem].sFieldNameFrom_To
57790>>>            Move aAPIRelationTo[iCount].sFieldNameTo        to aAPIRelationCompare[iItem].sFieldNameTo_To
57791>>>            Move aAPIRelationTo[iCount].bShouldChange       to aAPIRelationCompare[iItem].bShouldChange_To
57792>>>            Move aAPIRelationTo[iCount].bCancel             to aAPIRelationCompare[iItem].bCancel_To
57793>>>            Move aAPIRelationTo[iCount].bError              to aAPIRelationCompare[iItem].bError_To
57794>>>            Move True                                       to aAPIRelationCompare[iItem].bExistsTo
57795>>>        Loop
57796>>>>
57796>>>
57796>>>        Move (SortArray(aAPIRelationCompare, Self, RefFunc(__SearchRelationCompare))) to aAPIRelationCompare
57797>>>
57797>>>        Function_Return aAPIRelationCompare
57798>>>    End_Function
57799>>>
57799>>>    // * Dummy function for the Studio's Code Explorer *
57799>>>    Function CODEMAST_UTILITY_FUNCTIONS Returns Boolean
57801>>>        Function_Return False
57802>>>    End_Function
57803>>>
57803>>>    // To add a value to the CodeMast & CodeType tables. Pass; a) bCodeType if it is CodeType that should be updated.
57803>>>    // Else it is CodeMast. b) sTypeValue; either to be added If bCodeType = True, or it will be used to find the correct
57803>>>    // CodeType record. c) sValue1 and d) sValue2 is the CodeType Description & Comment, or CodeMast Type and Code values.
57803>>>    Function UtilCodeMasterAddValue Boolean bCodeType String sTypeValue String sValue2 String sValue3 Returns Boolean
57805>>>        Boolean bFound
57805>>>
57805>>>        Move False to Err
57806>>>        Open CodeMast
57808>>>        Open CodeType
57810>>>
57810>>>        If (bCodeType = True) Begin
57812>>>            Set Private.phCurrentTable to CODETYPE.File_Number
57813>>>            Clear CodeType
57814>>>            Move sTypeValue to CODETYPE.Type
57815>>>            Find eq CODETYPE by 1
57816>>>>
57816>>>            Move Found to bFound
57817>>>            If (bFound = True) Begin
57819>>>                Reread CodeType
57823>>>            End
57823>>>>
57823>>>            Else Begin
57824>>>                Clear CodeType
57825>>>            End
57825>>>>
57825>>>
57825>>>            Move sTypeValue to CODETYPE.Type
57826>>>            Move sValue2    to CODETYPE.Description
57827>>>            Move sValue3    to CODETYPE.Comment
57828>>>            SaveRecord CODETYPE
57829>>>
57829>>>            If (bFound = True) Begin
57831>>>                Unlock
57832>>>>
57832>>>            End
57832>>>>
57832>>>        End
57832>>>>
57832>>>
57832>>>        If (bCodeType = False) Begin
57834>>>            Set Private.phCurrentTable to CODEMAST.File_Number
57835>>>            Clear CODEMAST
57836>>>            Move sTypeValue to CODEMAST.Type
57837>>>            Move sValue2    to CODEMAST.Code
57838>>>            Find eq CODEMAST by 1
57839>>>>
57839>>>            Move Found to bFound
57840>>>            If (bFound = True) Begin
57842>>>                Reread CODEMAST
57846>>>            End
57846>>>>
57846>>>            Else Begin
57847>>>                Clear CODEMAST
57848>>>            End
57848>>>>
57848>>>
57848>>>            Move sTypeValue to CODEMAST.Type
57849>>>            Move sValue2    to CODEMAST.Code
57850>>>            Move sValue3    to CODEMAST.Description
57851>>>            SaveRecord CODEMAST
57852>>>
57852>>>            If (bFound = True) Begin
57854>>>                Unlock
57855>>>>
57855>>>            End
57855>>>>
57855>>>        End
57855>>>>
57855>>>
57855>>>        Close CodeMast
57856>>>        Close CodeType
57857>>>
57857>>>        Function_Return (Err = False)
57858>>>    End_Function
57859>>>
57859>>>    // Changes values in CodeType & CodeMast - From type value To type value. It first changes the type value in
57859>>>    // CodeType and then spins through all CodeMast records to change all related records.
57859>>>    Function UtilCodeMasterChangeValue String sFromValue String sToValue Returns Boolean
57861>>>        Boolean bFound
57861>>>
57861>>>        Move False to Err
57862>>>        Open CodeMast
57864>>>        Open CodeType
57866>>>
57866>>>        Clear CodeType
57867>>>        Move sFromValue to CODETYPE.Type
57868>>>        Find eq CODETYPE.Type
57869>>>>
57869>>>        If (Found = True) Begin
57871>>>            Reread CODETYPE
57875>>>                Move sToValue to CODETYPE.Type
57876>>>                SaveRecord CODETYPE
57877>>>            Unlock
57878>>>>
57878>>>        End
57878>>>>
57878>>>
57878>>>        Clear CODEMAST
57879>>>        Find gt CODEMAST by Recnum
57880>>>>
57880>>>        While (Found = True)
57884>>>            Move (Trim(Uppercase(CODEMAST.Type) = Trim(Uppercase(sFromValue)))) to bFound
57885>>>            If (bFound = True) Begin
57887>>>                Reread CODEMAST
57891>>>                    Move sToValue to CODEMAST.Type
57892>>>                    SaveRecord CODEMAST
57893>>>                Unlock
57894>>>>
57894>>>            End
57894>>>>
57894>>>            Find gt CODEMAST by Recnum
57895>>>>
57895>>>        Loop
57896>>>>
57896>>>
57896>>>        Close CodeMast
57897>>>        Close CodeType
57898>>>
57898>>>        Function_Return (Err = False)
57899>>>    End_Function
57900>>>
57900>>>    // Removes a value from CodeMast. Pass the sTypeValue and the sValue2 to remove.
57900>>>    Function UtilCodeMasterRemoveValue String sTypeValue String sValue2 Returns Boolean
57902>>>        Boolean bFound
57902>>>
57902>>>        Move False to Err
57903>>>        Open CodeMast
57905>>>
57905>>>        Clear CODEMAST
57906>>>        Move sTypeValue to CODEMAST.Type
57907>>>        Move sValue2    to CODEMAST.Code
57908>>>        Find eq CODEMAST.Code
57909>>>>
57909>>>        Move Found to bFound
57910>>>        If (bFound = True) Begin
57912>>>            Delete CODEMAST
57913>>>        End
57913>>>>
57913>>>
57913>>>        Close CodeMast
57914>>>
57914>>>        Function_Return (Err = False)
57915>>>    End_Function
57916>>>
57916>>>    Function UtilTableCreateCodeMastCodeTypeIntFiles String sDataPath Returns Boolean
57918>>>        Boolean bRecnum bToAnsi
57918>>>        Integer iCh
57918>>>        String sFileName sDriverID sConnectionID sSchemaName sANSI_OEM
57918>>>
57918>>>        If (Trim(sDataPath) = "") Begin
57920>>>            Function_Return False
57921>>>        End
57921>>>>
57921>>>
57921>>>        Move False to Err
57922>>>        Get psDriverID     to sDriverID
57923>>>        Get psConnectionID to sConnectionID
57924>>>        Get psSchema       to sSchemaName
57925>>>        Get True           to bRecnum
57926>>>        Get pbToANSI       to bToAnsi
57927>>>        Move CS_ANSI_Txt to sANSI_OEM
57928>>>        If (bToAnsi = False) Begin
57930>>>            Move CS_OEM_Txt to sANSI_OEM
57931>>>        End
57931>>>>
57931>>>
57931>>>        Get vFolderFormat sDataPath to sDataPath
57932>>>        Move "CodeMast.int"         to sFileName
57933>>>        Get Seq_Open_Output_Channel (sDataPath + sFileName) to iCh
57934>>>            Writeln channel iCh ("DRIVER_NAME" * sDriverID)
57937>>>            Writeln channel iCh ("SERVER_NAME DFCONNID=" + sConnectionID)
57940>>>            Writeln channel iCh ("DATABASE_NAME CODEMAST")
57943>>>            Writeln channel iCh ("SCHEMA_NAME" * sSchemaName)
57946>>>            Writeln channel iCh ("")
57949>>>            Writeln channel iCh ("RECNUM_TABLE YES")
57952>>>            Writeln channel iCh ("PRIMARY_INDEX 0")
57955>>>            Writeln channel iCh ("TABLE_CHARACTER_FORMAT" * sANSI_OEM)
57958>>>            Writeln channel iCh ("USE_DUMMY_ZERO_DATE YES")
57961>>>            Writeln channel iCh ("")
57964>>>            Writeln channel iCh ("INDEX_NUMBER 1")
57967>>>            Writeln channel iCh ("INDEX_NAME CODEMAST001_PK")
57970>>>            Writeln channel iCh ("")
57973>>>        Send Seq_Close_Channel iCh
57974>>>
57974>>>        Get vFolderFormat sDataPath to sDataPath
57975>>>        Move "CodeType.int"         to sFileName
57976>>>        Get Seq_Open_Output_Channel (sDataPath + sFileName) to iCh
57977>>>            Writeln channel iCh ("DRIVER_NAME" * sDriverID)
57980>>>            Writeln channel iCh ("SERVER_NAME DFCONNID=" + sConnectionID)
57983>>>            Writeln channel iCh ("DATABASE_NAME CODETYPE")
57986>>>            Writeln channel iCh ("SCHEMA_NAME" * sSchemaName)
57989>>>            Writeln channel iCh ("")
57992>>>            Writeln channel iCh ("RECNUM_TABLE YES")
57995>>>            Writeln channel iCh ("PRIMARY_INDEX 0")
57998>>>            Writeln channel iCh ("TABLE_CHARACTER_FORMAT" * sANSI_OEM)
58001>>>            Writeln channel iCh ("USE_DUMMY_ZERO_DATE YES")
58004>>>            Writeln channel iCh ("")
58007>>>            Writeln channel iCh ("INDEX_NUMBER 0")
58010>>>            Writeln channel iCh ("INDEX_NAME CODETYPE000")
58013>>>            Writeln channel iCh ("")
58016>>>            Writeln channel iCh ("INDEX_NUMBER 1")
58019>>>            Writeln channel iCh ("INDEX_NAME CODETYPE001_PK")
58022>>>            Writeln channel iCh ("")
58025>>>        Send Seq_Close_Channel iCh
58026>>>
58026>>>        Function_Return (Err = False)
58027>>>    End_Function
58028>>>
58028>>>    // * Dummy function for the Studio's Code Explorer *
58028>>>    Function OTHER_UTILITY_FUNCTIONS Returns Boolean
58030>>>        Function_Return False
58031>>>    End_Function
58032>>>
58032>>>    // Use function to move *.fd, termlist.*, collate.*, dfcollate.* files to a "Data\Backup" folder,
58032>>>    // and to remove all *.cch files (DAW SQL driver cache files. They will get recreated when needed.)
58032>>>    Function UtilMoveMiscFilesToBackupFolder Returns Boolean
58034>>>        Boolean bOK bExists
58034>>>        String sDataPath sBackupFolder
58034>>>
58034>>>        Set Message_Text of ghoStatusPanel to "Moving misc. files to Backup folder."
58035>>>        Move CS_DUFBackupDataFolder to sBackupFolder
58036>>>        Get psDataPath of (phoWorkspace(ghoApplication)) to sDataPath
58037>>>        Get vFolderFormat sDataPath to sDataPath
58038>>>
58038>>>        Get vFilePathExists (sDataPath + sBackupFolder) to bExists
58039>>>        If (bExists = False) Begin
58041>>>            Get vCreateDirectory (sDataPath + sBackupFolder) to bOK
58042>>>            Get vFilePathExists (sDataPath + sBackupFolder) to bExists
58043>>>            If (bExists = False) Begin
58045>>>                Error DFERR_PROGRAM ("Could not create the the backup data folder to move all misc. files to. You need to move them somewhere manually.")
58046>>>>
58046>>>                Function_Return False
58047>>>            End
58047>>>>
58047>>>            Get vMoveFile (sDataPath + "*.fd")         (sDataPath + sBackupFolder) to bOK  
58048>>>            Get vMoveFile (sDataPath + "*.bad")        (sDataPath + sBackupFolder) to bOK  
58049>>>            Get vMoveFile (sDataPath + "*.err")        (sDataPath + sBackupFolder) to bOK  
58050>>>            Get vMoveFile (sDataPath + "*.bak")        (sDataPath + sBackupFolder) to bOK
58051>>>            Get vMoveFile (sDataPath + "*.def")        (sDataPath + sBackupFolder) to bOK
58052>>>            Get vMoveFile (sDataPath + "*.fil")        (sDataPath + sBackupFolder) to bOK
58053>>>            Get vMoveFile (sDataPath + "*.hlp")        (sDataPath + sBackupFolder) to bOK
58054>>>            Get vMoveFile (sDataPath + "*.old")        (sDataPath + sBackupFolder) to bOK           
58055>>>            Get vMoveFile (sDataPath + "*.prn")        (sDataPath + sBackupFolder) to bOK           
58056>>>            Get vMoveFile (sDataPath + "*.sts")        (sDataPath + sBackupFolder) to bOK           
58057>>>            Get vMoveFile (sDataPath + "*.td")         (sDataPath + sBackupFolder) to bOK           
58058>>>            Get vMoveFile (sDataPath + "*.log")        (sDataPath + sBackupFolder) to bOK           
58059>>>            Get vMoveFile (sDataPath + "*.bat")        (sDataPath + sBackupFolder) to bOK           
58060>>>            Get vMoveFile (sDataPath + "*.cmd")        (sDataPath + sBackupFolder) to bOK           
58061>>>            Get vMoveFile (sDataPath + "*.zip")        (sDataPath + sBackupFolder) to bOK           
58062>>>            Get vMoveFile (sDataPath + "*.abs")        (sDataPath + sBackupFolder) to bOK           
58063>>>            Get vMoveFile (sDataPath + "termlist.*")   (sDataPath + sBackupFolder) to bOK
58064>>>            Get vMoveFile (sDataPath + "*.dfr")        (sDataPath + sBackupFolder) to bOK
58065>>>            Get vMoveFile (sDataPath + "vsutil.cfg")   (sDataPath + sBackupFolder) to bOK
58066>>>            Get vMoveFile (sDataPath + "collate.*")    (sDataPath + sBackupFolder) to bOK
58067>>>            Get vMoveFile (sDataPath + "df_collate.*") (sDataPath + sBackupFolder) to bOK
58068>>>            Get vDeleteFile (sDataPath + "*.cch")                                  to bOK
58069>>>        End
58069>>>>
58069>>>
58069>>>        Set Message_Text of ghoStatusPanel to ""
58070>>>        Function_Return True
58071>>>    End_Function
58072>>>    
58072>>>    // Check if the file exists in the Data folder,
58072>>>    // else creates it from memory as it has been compiled into the program as a resource:
58072>>>    Function UtilCheckCreateIfFileExists String sFileName String sResourceName Boolean bDataFile Returns Boolean
58074>>>        String sPath
58074>>>        Boolean bExists
58074>>>
58074>>>        Get psDataPathFirstPart to sPath
58075>>>        Move (sPath + sFileName) to sFileName
58076>>>        Get vFilePathExists sFileName to bExists
58077>>>
58077>>>        If (bExists = False) Begin
58079>>>            // Read from memory & create file on disk.
58079>>>            Send SqlUtilCreateFileFromMemory sResourceName sFileName
58080>>>            Get vFilePathExists sFileName to bExists
58081>>>        End
58081>>>>
58081>>>        Function_Return bExists
58082>>>    End_Function
58083>>>
58083>>>    Function UtilSqlColumnTypeToDataFlexType String sDriverID Integer iDbType Integer iDataType Integer iLength Returns Integer
58085>>>        tColumnType RetvalType
58085>>>        tColumnType RetvalType
58085>>>        Integer iRetval
58085>>>
58085>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
58086>>>        Move RetvalType.iDataFlexType to iRetval
58087>>>        If (RetvalType.iDataFlexType = DF_TEXT) Begin
58089>>>            If (iLength <= 255) Begin
58091>>>                Move DF_ASCII to iRetval
58092>>>            End
58092>>>>
58092>>>        End
58092>>>>
58092>>>        Function_Return iRetval
58093>>>    End_Function
58094>>>
58094>>>    Function UtilDataFlexDataTypeToString Integer iDataType Returns String
58096>>>        String sRetval
58096>>>
58096>>>        Case Begin
58096>>>            Case (iDataType = DF_ASCII)
58098>>>                Move "DF_ASCII" to sRetval
58099>>>                Case Break
58100>>>            Case (iDataType = DF_BCD)
58103>>>                Move "DF_BCD" to sRetval
58104>>>                Case Break
58105>>>            Case (iDataType = DF_BINARY)
58108>>>                Move "DF_BINARY" to sRetval
58109>>>                Case Break
58110>>>            Case (iDataType = DF_DATE)
58113>>>                Move "DF_DATE" to sRetval
58114>>>                Case Break
58115>>>            Case (iDataType = DF_DATETIME)
58118>>>                Move "DF_DATETIME" to sRetval
58119>>>                Case Break
58120>>>            Case (iDataType = DF_TEXT)
58123>>>                Move "DF_TEXT" to sRetval
58124>>>                Case Break
58125>>>            Case Else
58125>>>                Move "" to sRetval
58126>>>        Case End
58126>>>
58126>>>        Function_Return sRetval
58127>>>    End_Function
58128>>>
58128>>>    // The default value used for a datatype as specified in the driver int file.
58128>>>    Function UtilDataTypeDefaultValue String sDriverID Integer iDbType Integer iDataType Returns String
58130>>>        String sRetval sServer
58130>>>        tColumnType RetvalType
58130>>>        tColumnType RetvalType
58130>>>        Integer iDriver iDataFlexType
58130>>>        Handle hDatabase
58130>>>
58130>>>        Get _UtilColumnType sDriverID iDbType iDataType "" True to RetvalType
58131>>>        Move RetvalType.iDataFlexType to iDataFlexType
58132>>>        Get DriverIndex sDriverID to iDriver
58133>>>        Get psServer to sServer
58134>>>        Get SqlUtilDatabaseHandle sDriverID sServer to hDatabase
58135>>>        If (hDatabase = 0) Begin
58137>>>            Function_Return ""
58138>>>        End
58138>>>>
58138>>>
58138>>>        Case Begin
58138>>>            Case (iDataFlexType = DF_ASCII)
58140>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_ASCII     of iDriver hDatabase to sRetval
58143>>>                Case Break
58144>>>            Case (iDataFlexType = DF_BCD)
58147>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_NUMERIC   of iDriver hDatabase to sRetval
58150>>>                Case Break
58151>>>            Case (iDataFlexType = DF_BINARY)
58154>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_BINARY    of iDriver hDatabase to sRetval
58157>>>                Case Break
58158>>>            Case (iDataFlexType = DF_DATE)
58161>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_DATE      of iDriver hDatabase to sRetval
58164>>>                Case Break
58165>>>            Case (iDataFlexType = DF_DATETIME)
58168>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_DATETIME  of iDriver hDatabase to sRetval
58171>>>                Case Break
58172>>>            Case (iDataFlexType = DF_TEXT)
58175>>>                Get_Attribute DF_DATABASE_DEFAULT_DEFAULT_TEXT      of iDriver hDatabase to sRetval
58178>>>                Case Break
58179>>>            Case Else
58179>>>                Move "" to sRetval
58180>>>        Case End
58180>>>
58180>>>        Function_Return sRetval
58181>>>    End_Function
58182>>>
58182>>>    Procedure Set Df_Database_Default_Default_Date_DUF String sDateValue
58184>>>        String sDriverID sServer
58184>>>        tColumnType RetvalType
58184>>>        tColumnType RetvalType
58184>>>        Integer iDbType iDriver
58184>>>        Handle hDatabase
58184>>>
58184>>>        Get psDriverID to sDriverID
58185>>>        Get piDbType   to iDbType
58186>>>        Get DriverIndex sDriverID to iDriver
58187>>>        Get psServer to sServer
58188>>>        Get SqlUtilDatabaseHandle sDriverID sServer to hDatabase
58189>>>        If (hDatabase = 0) Begin
58191>>>            Error DFERR_PROGRAM "Could not change the Default Date Value. Could not get a handle to the database. (Check that at least one connection is 'Enabled')"
58192>>>>
58192>>>            Procedure_Return
58193>>>        End
58193>>>>
58193>>>
58193>>>        Set_Attribute DF_DATABASE_DEFAULT_DEFAULT_DATE of iDriver hDatabase to sDateValue
58196>>>
58196>>>    End_Procedure
58197>>>
58197>>>    Procedure Set Df_Database_Default_Default_Datetime_DUF String sDateValue
58199>>>        String sDriverID sServer
58199>>>        tColumnType RetvalType
58199>>>        tColumnType RetvalType
58199>>>        Integer iDbType iDriver
58199>>>        Handle hDatabase
58199>>>
58199>>>        Get psDriverID to sDriverID
58200>>>        Get piDbType   to iDbType
58201>>>        Get DriverIndex sDriverID to iDriver
58202>>>        Get psServer to sServer
58203>>>        Get SqlUtilDatabaseHandle sDriverID sServer to hDatabase
58204>>>        If (hDatabase = 0) Begin
58206>>>            Error DFERR_PROGRAM "Could not change the Default DateTime Value. Could not get a handle to the database."
58207>>>>
58207>>>            Procedure_Return
58208>>>        End
58208>>>>
58208>>>
58208>>>        Set_Attribute DF_DATABASE_DEFAULT_DEFAULT_DATETIME of iDriver hDatabase to sDateValue
58211>>>
58211>>>    End_Procedure
58212>>>
58212>>>    // Returns a struct array with the default column types for the SQL back-end and how they
58212>>>    // are mapped to the standard DataFlex data types.
58212>>>    // The DataFlex data types are: "ASCII", "BINARY", "DATE", "DATETIME", "NUMERIC" and "TEXT".
58212>>>    Function UtilDefaultSqlTypeMappings String sDriverID Integer iDbType Returns tColumnType[]
58214>>>        tColumnType[] ColumnTypeArray EmptyArray
58214>>>        tColumnType[] ColumnTypeArray EmptyArray
58216>>>        String sDataType
58216>>>        Integer iDataType iDriverID iCount
58216>>>        Boolean bSQLDriver
58216>>>
58216>>>        Move 0 to iCount
58217>>>        Get DriverIndex sDriverID to iDriverID
58218>>>        Get IsSQLDriver sDriverID to bSQLDriver
58219>>>        If (bSQLDriver = False) Begin
58221>>>            Function_Return EmptyArray
58222>>>        End
58222>>>>
58222>>>
58222>>>        // DF_ASCII
58222>>>        If (sDriverID = ODBC_DRV_ID) Begin
58224>>>            Get_Attribute DF_DRIVER_MAP_DFASCII_TO_ODBCTYPE of iDriverID to sDataType
58227>>>        End
58227>>>>
58227>>>        Else Begin
58228>>>            Get_Attribute DF_DRIVER_MAP_DFASCII_TO_SQLTYPE  of iDriverID to sDataType
58231>>>        End
58231>>>>
58231>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
58232>>>        Move DF_ASCII    to ColumnTypeArray[iCount].iDataFlexType
58233>>>        Move "ASCII"     to ColumnTypeArray[iCount].sDataFlexType
58234>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
58235>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
58236>>>        Increment iCount
58237>>>
58237>>>        // DF_BINARY
58237>>>        If (sDriverID = ODBC_DRV_ID) Begin
58239>>>            Get_Attribute DF_DRIVER_MAP_DFBINARY_TO_ODBCTYPE of iDriverID to sDataType
58242>>>        End
58242>>>>
58242>>>        Else Begin
58243>>>            Get_Attribute DF_DRIVER_MAP_DFBINARY_TO_SQLTYPE  of iDriverID to sDataType
58246>>>        End
58246>>>>
58246>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
58247>>>        Move DF_BINARY   to ColumnTypeArray[iCount].iDataFlexType
58248>>>        Move "Binary"    to ColumnTypeArray[iCount].sDataFlexType
58249>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
58250>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
58251>>>        Increment iCount
58252>>>
58252>>>        // DF_DATE
58252>>>        If (sDriverID = ODBC_DRV_ID) Begin
58254>>>            Get_Attribute DF_DRIVER_MAP_DFDATE_TO_ODBCTYPE of iDriverID to sDataType
58257>>>        End
58257>>>>
58257>>>        Else Begin
58258>>>            Get_Attribute DF_DRIVER_MAP_DFDATE_TO_SQLTYPE  of iDriverID to sDataType
58261>>>        End
58261>>>>
58261>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
58262>>>        Move DF_DATE     to ColumnTypeArray[iCount].iDataFlexType
58263>>>        Move "Date"      to ColumnTypeArray[iCount].sDataFlexType
58264>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
58265>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
58266>>>        Increment iCount
58267>>>
58267>>>        // DF_DATETIME
58267>>>        If (sDriverID = ODBC_DRV_ID) Begin
58269>>>            Get_Attribute DF_DRIVER_MAP_DFDATETIME_TO_ODBCTYPE of iDriverID to sDataType
58272>>>        End
58272>>>>
58272>>>        Else Begin
58273>>>            Get_Attribute DF_DRIVER_MAP_DFDATETIME_TO_SQLTYPE  of iDriverID to sDataType
58276>>>        End
58276>>>>
58276>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
58277>>>        Move DF_DATETIME to ColumnTypeArray[iCount].iDataFlexType
58278>>>        Move "DateTime"  to ColumnTypeArray[iCount].sDataFlexType
58279>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
58280>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
58281>>>        Increment iCount
58282>>>
58282>>>        // DF_NUMERIC
58282>>>        // *** Why is there no DF_DRIVER_MAP available for BCD/Numeric??? ***
58282>>>        // DF_BCD can in SQL be either of "SmallInt", "Int", or "Numeric", but
58282>>>        // we make them here all "Numeric"...
58282>>>        Case Begin
58282>>>            Case (sDriverID = MSSQLDRV_ID)
58284>>>                Move SQL_NUMERIC to iDataType
58285>>>                Move "numeric"   to sDataType
58286>>>                Case Break
58287>>>            Case (sDriverID = DB2_DRV_ID)
58290>>>                Move SQL_NUMERIC to iDataType
58291>>>                Move "NUMERIC"   to sDataType
58292>>>                Case Break
58293>>>            Case Else
58293>>>                Move DF_BCD      to iDataType
58294>>>                Move "Numeric"   to sDataType
58295>>>        Case End
58295>>>        Move DF_BCD      to ColumnTypeArray[iCount].iDataFlexType
58296>>>        Move "Numeric"   to ColumnTypeArray[iCount].sDataFlexType
58297>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
58298>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
58299>>>        Increment iCount
58300>>>
58300>>>        // DF_TEXT
58300>>>        If (sDriverID = ODBC_DRV_ID) Begin
58302>>>            Get_Attribute DF_DRIVER_MAP_DFTEXT_TO_ODBCTYPE of iDriverID to sDataType
58305>>>        End
58305>>>>
58305>>>        Else Begin
58306>>>            Get_Attribute DF_DRIVER_MAP_DFTEXT_TO_SQLTYPE  of iDriverID to sDataType
58309>>>        End
58309>>>>
58309>>>        Get UtilColumnTypeToInteger sDriverID iDbType sDataType to iDataType
58310>>>        Move DF_TEXT     to ColumnTypeArray[iCount].iDataFlexType
58311>>>        Move "Text"      to ColumnTypeArray[iCount].sDataFlexType
58312>>>        Move sDataType   to ColumnTypeArray[iCount].sSQLType
58313>>>        Move iDataType   to ColumnTypeArray[iCount].iSQLType
58314>>>
58314>>>        Function_Return ColumnTypeArray
58315>>>    End_Function
58316>>>
58316>>>    Function UtilDFDataTypeToSqlTypeMapping String sDriverID Integer iDbType Integer iType Returns tColumnType
58318>>>        tColumnType[] ColumnTypeArray
58318>>>        tColumnType[] ColumnTypeArray
58319>>>        tColumnType   ColumnType
58319>>>        tColumnType   ColumnType
58319>>>        Integer iCount iSize
58319>>>
58319>>>        Get UtilDefaultSqlTypeMappings sDriverID iDbType iType to ColumnTypeArray
58320>>>        Move (SizeOfArray(ColumnTypeArray)) to iSize
58321>>>        Decrement iSize
58322>>>
58322>>>        for iCount from 0 to iSize
58328>>>>
58328>>>            If (iType = ColumnTypeArray[iCount].iDataFlexType) Begin
58330>>>                Move ColumnTypeArray[iCount].bCanEditSize   to ColumnType.bCanEditSize
58331>>>                Move ColumnTypeArray[iCount].iDataFlexType  to ColumnType.iDataFlexType
58332>>>                Move ColumnTypeArray[iCount].iSQLType       to ColumnType.iSQLType
58333>>>                Move ColumnTypeArray[iCount].sDataFlexType  to ColumnType.sDataFlexType
58334>>>                Move ColumnTypeArray[iCount].sPrecision     to ColumnType.sPrecision
58335>>>                Move ColumnTypeArray[iCount].sSQLType       to ColumnType.sSQLType
58336>>>                Move iSize to iCount
58337>>>            End
58337>>>>
58337>>>        Loop
58338>>>>
58338>>>
58338>>>        Function_Return ColumnType
58339>>>    End_Function
58340>>>
58340>>>    // Returns True if the passed hTable (filelist slot number) is an Alias table.
58340>>>    // An Alias file/table is a filelist number that share the same Physical filename
58340>>>    // but the Logical name is different.
58340>>>    // Note: If the table cannot be opened; the table is not considered to be an Alias.
58340>>>    Function UtilTableIsAlias Handle hTable Returns Boolean
58342>>>        String sRootName sRootNameCompare sLogicalName sLogicalNameCompare
58342>>>        Handle hInTable hMasterTable 
58342>>>        Boolean bIsAlias
58342>>>        
58342>>>        Move hTable to hInTable
58343>>>        Move False to bIsAlias
58344>>>        Move 0 to hMasterTable
58345>>>        
58345>>>        Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
58348>>>        // Remove any prefix with a driver name.
58348>>>        Get _TableNameOnly sRootName to sRootName     
58349>>>        Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalName
58352>>>        Get _TableNameOnly sLogicalName to sLogicalName     
58353>>>        
58353>>>        // If the table has the same root and logical name it can't be an alias,
58353>>>        // so we can safely return a "False".
58353>>>        If (Uppercase(sRootName) = Uppercase(sLogicalName)) Begin
58355>>>            Function_Return False
58356>>>        End
58356>>>>
58356>>>        
58356>>>        // Now we need to find a master table with the same root name (sRootName above),
58356>>>        // as the passed hTable root name.
58356>>>        // A master table always has the same root and logical name.
58356>>>        Move 0 to hTable
58357>>>        Repeat
58357>>>>
58357>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
58360>>>            If (hTable > 0 and hTable <> 50) Begin
58362>>>                Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootNameCompare
58365>>>                Get _TableNameOnly sRootNameCompare to sRootNameCompare
58366>>>                // If we found another table with the same root and logical name
58366>>>                // we have found a master table.
58366>>>                If (Uppercase(sRootName) = Uppercase(sRootNameCompare)) Begin
58368>>>                    Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sLogicalNameCompare
58371>>>                    Get _TableNameOnly sLogicalNameCompare to sLogicalNameCompare     
58372>>>                    If (Uppercase(sRootNameCompare) = Uppercase(sLogicalNameCompare)) Begin
58374>>>                        Move hTable to hMasterTable   
58375>>>                        Move 0 to hTable // To end the loop.
58376>>>                    End
58376>>>>
58376>>>                End
58376>>>>
58376>>>            End
58376>>>>
58376>>>        Until (hTable = 0)
58378>>>        
58378>>>        If (hMasterTable <> 0 and hMasterTable <> hInTable) Begin
58380>>>            Move True to bIsAlias
58381>>>        End
58381>>>>
58381>>>        
58381>>>        Function_Return bIsAlias
58382>>>    End_Function
58383>>>
58383>>>    // To Open a table with any driver.
58383>>>    // Note: If the driver is <> DATAFLEX_ID  - login credentials are used; it is then assumed
58383>>>    //       that the proper login properties has been setup properly with the cSQLConnections object.
58383>>>    //
58383>>>    // If the open command fails the Err flag will be reset to false, at the end of the function!
58383>>>    // The found flag is still used to indicate if the open was successful or not. The function
58383>>>    // returns a True if successful (table could be opened).
58383>>>    //
58383>>>    // Using the "Open As" syntax with drivers means that we don't need to rely on .int file settings.
58383>>>    // This is good because with DFConnectionID's those credentials doesn't need to be available in
58383>>>    // the .int file (and probably aren't). As long as the login properties of this object have been
58383>>>    // set properly we can open the table.
58383>>>    //
58383>>>    // DAW Driver Syntax:
58383>>>    //  <CKId>:<Schema>#<Table>@<ConnectString>|<Filename>.int
58383>>>    //  Now the @<ConnectString> can be followed by a pipe character '|' followed by the name of the INT file.
58383>>>    //  Doing so, the driver will apply the information from the .INT file to the passed direct Open String.
58383>>>    //  Note that when an INT file has been passed, it will skip the keyword DRIVER_NAME, SERVER_NAME,
58383>>>    //  DATABASE_NAME and SCHEMA_NAME from the INT file because those are supposed to be supplied in the String already.
58383>>>    //  Open mode; iMode = DF_SHARE or DF_EXCLUSIVE.
58383>>>    //
58383>>>    // DAW Driver Sample:
58383>>>    //   Open "MSSQLDRV:dbo#MyFile@SERVER=(local)\SQLEXPRESS;Trusted_Connection=yes;DATABASE=OrderEntry|options|intfile=MyFile.int"
58383>>>    //
58383>>>    Function UtilTableOpen Integer hTable String sTableName Integer iMode Returns Boolean
58385>>>        String sTableNameOrg
58385>>>        Boolean bOpen bOK
58385>>>        tSQLConnection SQLConnection
58385>>>        tSQLConnection SQLConnection
58385>>>        
58385>>>        Move False to bOpen
58386>>>        Move sTableName to sTableNameOrg
58387>>>        If (hTable > 0) Begin
58389>>>            Send Ignore_Error of Error_Object_Id 20529
58390>>>            Send Ignore_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
58391>>>            Send Ignore_Error of Error_Object_Id CLIERR_CONNECTIONIDNOTFOUND
58392>>>            Send Ignore_Error of Error_Object_Id 10
58393>>>            Open hTable Mode iMode
58395>>>            Send Trap_Error of Error_Object_Id 20529
58396>>>            Send Trap_Error of Error_Object_Id DFERR_CANT_OPEN_DATA_FILE
58397>>>            Send Trap_Error of Error_Object_Id CLIERR_CONNECTIONIDNOTFOUND
58398>>>            Send Trap_Error of Error_Object_Id 10
58399>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
58402>>>            If (bOpen = True) Begin
58404>>>                Function_Return True
58405>>>            End
58405>>>>
58405>>>        End
58405>>>>
58405>>>
58405>>>        Get UtilTableOpenAsIntFile hTable sTableName iMode to bOK 
58406>>>        If (hTable > 0) Begin
58408>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpen
58411>>>        End
58411>>>>
58411>>>
58411>>>        Function_Return bOpen
58412>>>    End_Function
58413>>>
58413>>>    Function UtilTableOpenAsIntFile Integer hTable String sTableName Integer iMode Returns Boolean
58415>>>        String sDriverID sConnection sSchema sExt sTableNameShort sTableNameOrg
58415>>>        Boolean bOpen bOK
58415>>>        tSQLConnection SQLConnection
58415>>>        tSQLConnection SQLConnection
58415>>>
58415>>>        If (hTable < 1) Begin
58417>>>            Function_Return False
58418>>>        End
58418>>>>
58418>>>
58418>>>        Move sTableName to sTableNameOrg
58419>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
58420>>>        Move SQLConnection.sDriverID to sDriverID
58421>>>        Move SQLConnection.sConnectionString to sConnection
58422>>>        Move SQLConnection.sSchema to sSchema
58423>>>        If (sSchema = "") Begin
58425>>>            Get _SqlFindKeyWord CI_SQLDBO to sSchema
58426>>>        End
58426>>>>
58426>>>
58426>>>        // We need to remove the ".int" part of the table name because
58426>>>        // the table name after the "#" in the connection syntax below wants the
58426>>>        // "bare" table name without any extension.
58426>>>        If (sDriverID <> DATAFLEX_ID) Begin
58428>>>            If (Lowercase(sTableName) contains ".int") Begin
58430>>>                Get ParseFileExtension sTableName to sExt
58431>>>                Move (Replace(("." + sExt), sTableName, "")) to sTableNameShort
58432>>>            End
58432>>>>
58432>>>            Else Begin
58433>>>                Move sTableName to sTableNameShort
58434>>>                Move (Append(sTableName, ".int")) to sTableName
58435>>>            End
58435>>>>
58435>>>            Move (sDriverID + ":" + sSchema + "#" + sTableNameShort + "@" + sConnection + "|options|intfile=" + sTableName) to sConnection
58436>>>            Move sConnection to sTableName
58437>>>        End
58437>>>>
58437>>>
58437>>>        Send Ignore_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
58438>>>        Send Ignore_Error of Error_Info_Object DFERR_FILE_ACCESS_VIOLATION
58439>>>        If (hTable = 0) Begin
58441>>>            Get NextFreeFilelistSlot to hTable
58442>>>        End
58442>>>>
58442>>>
58442>>>        Case Begin
58442>>>            Case (sDriverID = MSSQLDRV_ID)
58444>>>                // If not df_exclusive mode, we use the "Open As" syntax.
58444>>>                If (iMode <> DF_EXCLUSIVE) Begin
58446>>>                    Close hTable
58447>>>                    Open sTableName as hTable
58449>>>                End
58449>>>>
58449>>>                Else Begin
58450>>>                    Get OpenTableExclusive hTable to bOK
58451>>>                    If (bOK = False) Begin
58453>>>                        Function_Return False
58454>>>                    End
58454>>>>
58454>>>                End
58454>>>>
58454>>>                Case Break
58455>>>
58455>>>            Case (sDriverID = DB2_DRV_ID)
58458>>>                // If not df_exclusive mode, we use the "Open As" syntax.
58458>>>                If (iMode <> DF_EXCLUSIVE) Begin
58460>>>                    Close hTable
58461>>>                    Open sTableName as hTable
58463>>>                End
58463>>>>
58463>>>                Else Begin
58464>>>                    Get OpenTableExclusive hTable to bOK
58465>>>                    If (bOK = False) Begin
58467>>>                        Function_Return False
58468>>>                    End
58468>>>>
58468>>>                End
58468>>>>
58468>>>                Case Break
58469>>>
58469>>>            Case (sDriverID = ODBC_DRV_ID)
58472>>>                // If not df_exclusive mode, we use the "Open As" syntax.
58472>>>                If (iMode = DF_SHARE) Begin
58474>>>                    Close hTable
58475>>>                    Open sTableName as hTable
58477>>>                End
58477>>>>
58477>>>                Else Begin
58478>>>                    Get OpenTableExclusive hTable to bOK
58479>>>                    If (bOK = False) Begin
58481>>>                        Function_Return False
58482>>>                    End
58482>>>>
58482>>>                End
58482>>>>
58482>>>                Case Break
58483>>>
58483>>>            Case (sDriverID = DATAFLEX_ID)
58486>>>                If (sTableName <> "" and iMode <> DF_EXCLUSIVE) Begin
58488>>>                    Close hTable
58489>>>                    Open sTableName as hTable
58491>>>                End
58491>>>>
58491>>>                Else If (iMode = DF_EXCLUSIVE) Begin
58494>>>                    Get OpenTableExclusive hTable to bOK
58495>>>                    If (bOK = False) Begin
58497>>>                        Function_Return False
58498>>>                    End
58498>>>>
58498>>>                End
58498>>>>
58498>>>                Else Begin
58499>>>                    Open hTable
58501>>>                End
58501>>>>
58501>>>                Case Break
58502>>>
58502>>>            Case Else
58502>>>                Error DFERR_PROGRAM ("Invalid driver:" * sDriverID)
58503>>>>
58503>>>        Case End
58503>>>
58503>>>        Send Trap_Error of Error_Object_Id CLIERR_LOGIN_UNSUCCESSFUL
58504>>>        Send Trap_Error of Error_Info_Object DFERR_FILE_ACCESS_VIOLATION
58505>>>        If (LastErr = CLIERR_LOGIN_UNSUCCESSFUL) Begin
58507>>>            Move False to Found
58508>>>        End
58508>>>>
58508>>>        // If open failed, the Err is set to true,
58508>>>        // but we don't want that because it could end our loop.
58508>>>        Move False to Err
58509>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
58512>>>
58512>>>        Function_Return bOpen
58513>>>    End_Function
58514>>>
58514>>>    // Pass a table's logical name
58514>>>    // Returns True if the table exists in filelist.cfg.
58514>>>    Function UtilTableLogicalNameIsInUse String sCheckTable Returns Boolean
58516>>>        Handle hTable
58516>>>        Boolean bFound
58516>>>        String sCompareTable
58516>>>
58516>>>        Move False to bFound
58517>>>        Move 0 to hTable
58518>>>        Repeat
58518>>>>
58518>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
58521>>>            If (hTable > 0) Begin
58523>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sCompareTable
58526>>>                If (Uppercase(sCompareTable) = Uppercase(sCheckTable)) Begin
58528>>>                    Move True to bFound
58529>>>                End
58529>>>>
58529>>>            End
58529>>>>
58529>>>            If (bFound = True) ;                Break
58532>>>        Until (hTable = 0)
58534>>>
58534>>>        Function_Return (bFound = True)
58535>>>    End_Function
58536>>>
58536>>>    // Function will report the default driver "DATAFLEX" if table can't be opened
58536>>>    Function UtilDriverFromTableNumber Handle hTable Returns String
58538>>>        Boolean bOK bExists
58538>>>        String sDriverID
58538>>>
58538>>>        Get _UtilTableExists hTable to bExists
58539>>>        If (bExists = False) Begin
58541>>>            Function_Return DATAFLEX_ID
58542>>>        End
58542>>>>
58542>>>        Get OpenTableExclusive hTable to bOK
58543>>>        If (bOK = False) Begin
58545>>>            Function_Return DATAFLEX_ID
58546>>>        End
58546>>>>
58546>>>        Get_Attribute DF_FILE_DRIVER of hTable to sDriverID
58549>>>        Function_Return sDriverID
58550>>>    End_Function
58551>>>
58551>>>    // Number of tables in Filelist.cfg. Returns integger
58551>>>    Function UtilFilelistNoOfTables Returns Integer
58553>>>        Handle hTable
58553>>>        Integer iRetval
58553>>>
58553>>>        Move 0 to hTable
58554>>>        Move 0 to iRetval
58555>>>
58555>>>        Repeat
58555>>>>
58555>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
58558>>>            If (hTable > 0) Begin
58560>>>                Increment iRetval
58561>>>            End
58561>>>>
58561>>>        Until (hTable = 0)
58563>>>
58563>>>        Function_Return iRetval
58564>>>    End_Function
58565>>>
58565>>>    // Checks if any of the tables in Filelist.cfg is an SQL driver and returns the first Driver ID.
58565>>>    Function UtilIsAnyFilelistEntrySQLtable Returns String
58567>>>        Handle hTable
58567>>>        String sRoot sDriverID
58567>>>        Boolean bIsSQLTable
58567>>>        Integer iPos
58567>>>
58567>>>        Move 0 to hTable
58568>>>        Move "" to sDriverID
58569>>>        Move False to bIsSQLTable
58570>>>
58570>>>        Repeat
58570>>>>
58570>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
58573>>>            If (hTable > 0) Begin
58575>>>                Get_Attribute DF_FILE_ROOT_NAME of hTable to sRoot
58578>>>                If (sRoot contains ":") Begin
58580>>>                    Move (Pos(":", sRoot)) to iPos
58581>>>                    Move (Left(sRoot, (iPos -1))) to sDriverID
58582>>>                End
58582>>>>
58582>>>                Get IsSQLDriver sDriverID to bIsSQLTable
58583>>>            End
58583>>>>
58583>>>
58583>>>        Until (hTable = 0 or bIsSQLTable = True)
58585>>>
58585>>>        Function_Return sDriverID
58586>>>    End_Function
58587>>>
58587>>>    Function UtilIsAllFilelistEntriesDataFlexTables Returns Boolean
58589>>>        String sRootName
58589>>>        Boolean bIsSQL
58589>>>        Handle hTable
58589>>>
58589>>>        Move False to bIsSQL
58590>>>        Move 0 to hTable
58591>>>        Repeat
58591>>>>
58591>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
58594>>>            If (hTable > 0) Begin
58596>>>                Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
58599>>>                Get _UtilTableIsSqlByRootName sRootName to bIsSQL
58600>>>                If (bIsSQL = True) Begin
58602>>>                    Move 0 to hTable
58603>>>                End
58603>>>>
58603>>>            End
58603>>>>
58603>>>        Until (hTable = 0)
58605>>>
58605>>>        Function_Return (bIsSQL = False)
58606>>>    End_Function
58607>>>
58607>>>    // * Dummy function for the Studio's Code Explorer *
58607>>>    Function UTIL_ENUMERATION_FUNCTIONS Returns Boolean
58609>>>        Function_Return False
58610>>>    End_Function
58611>>>
58611>>>    Function UtilEnumerateOverlapFields Integer hTable Integer iField Returns String[]
58613>>>        String  sRetval
58613>>>        String[] sOverlapFieldsArray
58614>>>        Integer iType iColumn iColumns
58614>>>        Boolean bOpen bOverlap
58614>>>
58614>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpen
58617>>>        If (bOpen = False) Begin
58619>>>            Open hTable
58621>>>        End
58621>>>>
58621>>>
58621>>>        Move "" to sRetval
58622>>>
58622>>>        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iColumns
58625>>>
58625>>>        for iColumn from 0 to iColumns
58631>>>>
58631>>>            Get_Attribute DF_FIELD_TYPE of hTable iColumn to iType
58634>>>            If (iField <> iColumn and iType <> DF_OVERLAP) Begin
58636>>>                Get_Attribute DF_FIELD_OVERLAP of hTable iField iColumn to bOverlap
58639>>>                If (bOverlap) Begin
58641>>>                    If (sRetval <> "") Begin
58643>>>                        Append sRetval ","
58644>>>                    End
58644>>>>
58644>>>                    Append sRetval iColumn
58645>>>                End
58645>>>>
58645>>>            End
58645>>>>
58645>>>        Loop
58646>>>>
58646>>>
58646>>>        If (bOpen = False) Begin
58648>>>            Close hTable
58649>>>        End
58649>>>>
58649>>>
58649>>>        Get StrSplitToArray sRetval "," to sOverlapFieldsArray
58650>>>
58650>>>        Function_Return sOverlapFieldsArray
58651>>>    End_Function
58652>>>
58652>>>    Function UtilEnumerateODBCDrivers Returns String
58654>>>        Handle hoRegistry hoODBCDriverNames
58654>>>        Boolean bExists bKeyOpened
58654>>>        String sKey
58654>>>        String[] sDrivers
58655>>>        Integer iDriverNames iDriverName
58655>>>
58655>>>        Get Create (RefClass (cRegistry)) to hoRegistry
58656>>>        Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
58657>>>        Set pfAccessRights of hoRegistry to Key_Read
58658>>>        Move "SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers" to sKey
58659>>>        Get KeyExists of hoRegistry sKey to bExists
58660>>>        If (bExists) Begin
58662>>>            Get OpenKey of hoRegistry sKey to bKeyOpened
58663>>>            If (bKeyOpened) Begin
58665>>>                Get Create (RefClass (Array)) to hoODBCDriverNames
58666>>>                Get GetValues of hoRegistry hoODBCDriverNames to iDriverNames
58667>>>                If (iDriverNames > 0) Begin
58669>>>                    Move (ResizeArray (sDrivers, iDriverNames)) to sDrivers
58670>>>                    Decrement iDriverNames
58671>>>                    for iDriverName from 0 to iDriverNames
58677>>>>
58677>>>                        Get Value of hoODBCDriverNames iDriverName to sDrivers[iDriverName]
58678>>>                    Loop
58679>>>>
58679>>>                End
58679>>>>
58679>>>                Send CloseKey of hoRegistry
58680>>>            End
58680>>>>
58680>>>        End
58680>>>>
58680>>>        Send Destroy of hoRegistry
58681>>>
58681>>>        Function_Return sDrivers
58682>>>    End_Function
58683>>>
58683>>>    Procedure IncreaseSortBufferSize
58685>>>        String sNull
58685>>>        Integer iSortBufferSize
58685>>>        Boolean bBufferSet
58685>>>
58685>>>        Move "" to sNull
58686>>>        Move (1024 * 128) to iSortBufferSize
58687>>>        Call_Driver 0 DATAFLEX_ID Function FLEX_SET_MAX_SORT_BUFFER Callback ghoDbUpdateHandler Passing sNull sNull iSortBufferSize Result bBufferSet
58692>>>
58692>>>    End_Procedure
58693>>>
58693>>>    Procedure SetAllIndexesToBatch Handle hTable Boolean bSetToBatch
58695>>>        Integer iLastIndex iIndex iNumSegments
58695>>>        Boolean bOK
58695>>>        String sDriverID
58695>>>
58695>>>        If (hTable > 0) Begin
58697>>>            Get UtilDriverFromTableNumber hTable to sDriverID
58698>>>            Close hTable
58699>>>            Get OpenTableExclusive hTable to bOK
58700>>>            If (bOK = False) Begin
58702>>>                Procedure_Return
58703>>>            End
58703>>>>
58703>>>            Get_Attribute DF_FILE_LAST_INDEX_NUMBER of hTable to iLastIndex
58706>>>            Structure_Start hTable sDriverID
58707>>>                for iIndex from 1 to iLastIndex
58713>>>>
58713>>>                    Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iNumSegments
58716>>>                    If (iNumSegments > 0) Begin
58718>>>                        If (bSetToBatch = True) Begin
58720>>>                            Set_Attribute DF_INDEX_TYPE of hTable iIndex to DF_INDEX_TYPE_BATCH
58723>>>                        End
58723>>>>
58723>>>                        Else Begin
58724>>>                            Set_Attribute DF_INDEX_TYPE of hTable iIndex to DF_INDEX_TYPE_ONLINE
58727>>>                        End
58727>>>>
58727>>>                    End
58727>>>>
58727>>>                Loop
58728>>>>
58728>>>            Structure_End hTable DF_STRUCTEND_OPT_NONE "." ghoDbUpdateHandler
58730>>>        End
58730>>>>
58730>>>    End_Procedure
58731>>>
58731>>>    Function NextFreeFilelistSlot Returns Handle
58733>>>        Handle hTable
58733>>>
58733>>>        Move 0 to hTable
58734>>>        Get_Attribute DF_FILE_NEXT_EMPTY of hTable to hTable
58737>>>
58737>>>        Function_Return hTable
58738>>>    End_Function
58739>>>
58739>>>    // For debugging purposes. To print Sql statements as they are build...
58739>>>    Procedure DebugPrint String sStmt String sFileName
58741>>>        Integer iCh
58741>>>        Get Seq_Append_Output_Channel sFileName to iCh
58742>>>            Write channel iCh sStmt
58744>>>        Send Seq_Close_Channel iCh
58745>>>    End_Procedure
58746>>>
58746>>>    // Returns the integer number for the passed Driver ID that is
58746>>>    // needed by some database API calls.
58746>>>    Function DriverIndex String sDriverID Returns Integer
58748>>>        String  sCurrentDriver
58748>>>        Integer iNumberOfDrivers iDriver iCount
58748>>>
58748>>>        Move 0 to iDriver
58749>>>
58749>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
58752>>>        for iCount from 1 to iNumberOfDrivers
58758>>>>
58758>>>
58758>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
58761>>>            If ( Uppercase(sCurrentDriver) = Uppercase(sDriverID) ) Begin
58763>>>                Move iCount to iDriver
58764>>>            End
58764>>>>
58764>>>        Loop
58765>>>>
58765>>>
58765>>>        // In case it was not found, it wasn't loaded so we do that now.
58765>>>        If (iDriver = 0) Begin
58767>>>            Move False to Err
58768>>>            Load_Driver sDriverID
58769>>>            If (Err = False) Begin
58771>>>                Get_Attribute DF_NUMBER_DRIVERS to iDriver
58774>>>            End
58774>>>>
58774>>>        End
58774>>>>
58774>>>
58774>>>        Function_Return iDriver
58775>>>    End_Function
58776>>>
58776>>>
58776>>>    Function SqlServerClientVersionName for cMSSQLHandler Integer iClientVersion  Returns String
58778>>>        String  sSqlServerClientVersionName
58778>>>        
58778>>>        Case Begin
58778>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
58780>>>                Move SQLSERVER2017CLIENTNAME to sSqlServerClientVersionName
58781>>>                Case Break
58782>>>                
58782>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
58785>>>                Move SQLSERVER2016CLIENTNAME to sSqlServerClientVersionName
58786>>>                Case Break
58787>>>            
58787>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
58790>>>                Move SQLSERVER2014CLIENTNAME to sSqlServerClientVersionName
58791>>>                Case Break
58792>>>            
58792>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
58795>>>                Move SQLSERVER2012CLIENTNAME to sSqlServerClientVersionName
58796>>>                Case Break
58797>>>            
58797>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
58800>>>                Move SQLSERVER2008CLIENTNAME to sSqlServerClientVersionName
58801>>>                Case Break
58802>>>            
58802>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
58805>>>                Move SQLSERVER2005CLIENTNAME to sSqlServerClientVersionName
58806>>>                Case Break
58807>>>            
58807>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
58810>>>                Move SQLSERVER2000CLIENTNAME to sSqlServerClientVersionName
58811>>>                Case Break
58812>>>            
58812>>>            Case Else
58812>>>                Move SQLSERVERUNKNOWNCLIENTNAME to sSqlServerClientVersionName
58813>>>        Case End
58813>>>        
58813>>>        Function_Return sSqlServerClientVersionName
58814>>>    End_Function
58815>>>
58815>>>    Function SqlServerClientDriverName for cMSSQLHandler Integer iClientVersion  Returns String
58817>>>        String  sSqlServerClientDriverName
58817>>>        
58817>>>        Case Begin
58817>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
58819>>>                Move SQLSERVER2017DRVRSTR to sSqlServerClientDriverName
58820>>>                Case Break
58821>>>                
58821>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
58824>>>                Move SQLSERVER2016DRVRSTR to sSqlServerClientDriverName
58825>>>                Case Break
58826>>>            
58826>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
58829>>>                Move SQLSERVER2014DRVRSTR to sSqlServerClientDriverName
58830>>>                Case Break
58831>>>            
58831>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
58834>>>                Move SQLSERVER2012DRVRSTR to sSqlServerClientDriverName
58835>>>                Case Break
58836>>>            
58836>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
58839>>>                Move SQLSERVER2008DRVRSTR to sSqlServerClientDriverName
58840>>>                Case Break
58841>>>            
58841>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
58844>>>                Move SQLSERVER2005DRVRSTR to sSqlServerClientDriverName
58845>>>                Case Break
58846>>>            
58846>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
58849>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
58850>>>                Case Break
58851>>>            
58851>>>            Case Else
58851>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
58852>>>        Case End
58852>>>        
58852>>>        Function_Return sSqlServerClientDriverName
58853>>>    End_Function
58854>>>    
58854>>>    Function MinMSSQLDRV_And_ClientVersion String sMSSQLDRVVersion Integer iClientVersion Boolean bShowErrorDialog Boolean bExitProgram Returns String
58856>>>        String sDriverID sVersion sClient sClientLowest sRetval
58856>>>        Integer iNumberOfDrivers iDriver iClient
58856>>>        Handle hoCLIHandler hoMSSQLHandler   
58856>>>        Boolean bOK
58856>>>        
58856>>>        Move "" to sRetval
58857>>>        Get Create (RefClass(cCLIHandler)) to hoCLIHandler
58858>>>        Get Create (RefClass(cMSSQLHandler)) to hoMSSQLHandler
58859>>>        Load_Driver MSSQLDRV_ID
58860>>>
58860>>>        // Loop through all loaded drivers.
58860>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
58863>>>        For iDriver from 1 to iNumberOfDrivers
58869>>>>
58869>>>            Get_Attribute DF_DRIVER_NAME of iDriver to sDriverID
58872>>>            If (sDriverID = MSSQLDRV_ID) Begin
58874>>>                Set psDriverID of hoCLIHandler to sDriverID
58875>>>                Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClient   
58878>>>                Get SqlServerClientVersionName of hoMSSQLHandler iClientVersion to sClientLowest 
58879>>>                Get SqlServerClientVersionName of hoMSSQLHandler iClient to sClient 
58880>>>                Get CKRevision of hoCLIHandler to sVersion
58881>>>                Move (SFormat (String(C_$DatabaseDriver), (sDriverID * "-" * (String(C_$Version) + ": " + String(sVersion))))) to sRetval
58882>>>                If (sClient <> "" and sRetval <> "") Begin
58884>>>                    Move (String(sRetval) + "\n" + String(C_$SQL_Client_Text) + "\n" + Trim(sClient)) to sRetval
58885>>>                End                                
58885>>>>
58885>>>                Else Begin
58886>>>                    Move (String(C_$SQL_Client_Text) + "\n" + Trim(sClient) * "(" + String(iClient) + ")") to sRetval
58887>>>                End
58887>>>>
58887>>>            End
58887>>>>
58887>>>        Loop
58888>>>>
58888>>>        Send Destroy of hoCLIHandler  
58889>>>        Send Destroy of hoMSSQLHandler  
58890>>>        If (bShowErrorDialog = True) Begin
58892>>>            Get IsFirstStringGreaterThanSecond sVersion sMSSQLDRVVersion to bOK
58893>>>            If (bOK = False or (iClient < iClientVersion)) Begin
58895>>>                Move (MSSQLDRV_ID + ".dll" * String(C_$SQL_Driver_Version_Min_Text) *  String(sMSSQLDRVVersion) + String("\n") + String(C_$SQL_Client_Version_Min_Text) + "\n" + String(sClientLowest) + String("\n\n") + String(C_$SQL_Versions_Are_Text) + String("\n") + String(sRetval)) to sRetval
58896>>>                If (bExitProgram = True) Begin
58898>>>                    Move (String(sRetval) + String("\n\n") + String(C_$PleaseAdjustTxt) * String(C_$ProgramWillExit_Text)) to sRetval
58899>>>                End
58899>>>>
58899>>>                Send Stop_Box sRetval  
58900>>>                If (bExitProgram = True) Begin
58902>>>                    Send Exit_Application
58903>>>                End
58903>>>>
58903>>>            End
58903>>>>
58903>>>        End
58903>>>>
58903>>>        
58903>>>        Function_Return sRetval
58904>>>    End_Function  
58905>>>    
58905>>>    // Returns True if first "." separated string is greater than the second.
58905>>>    // It checks from left to right, one part of the string at a time.
58905>>>    // E.g. if sVersion="20.1.31.10 and sSQLVersion="6.3.0.13" the function would return TRUE.
58905>>>    Function IsFirstStringGreaterThanSecond Global String sVersion String sSQLVersion Returns Boolean
58907>>>        String[] asVersion asSQLVersion          
58909>>>        Integer iSize iCount iVersion iSQLVersion
58909>>>        
58909>>>        Move (StrSplitToArray(sVersion, "."))    to asVersion
58910>>>        Move (StrSplitToArray(sSQLVersion, ".")) to asSQLVersion
58911>>>        Move (SizeOfArray(asVersion)) to iSize
58912>>>        // Make sure the two arrays are of the same size:
58912>>>        If (SizeOfArray(asSQLVersion) < iSize) Begin
58914>>>            Move (ResizeArray(asSQLVersion, iSize, 0)) to asSQLVersion
58915>>>        End
58915>>>>
58915>>>        Decrement iSize
58916>>>        for iCount from 0 to iSize
58922>>>>
58922>>>            Move asVersion[iCount]    to iVersion
58923>>>            Move asSQLVersion[iCount] to iSQLVersion
58924>>>            CompilerWarnings Off
58924>>>            If (iVersion > iSQLVersion) Break
58927>>>            CompilerWarnings On
58927>>>        Loop
58928>>>>
58928>>>        
58928>>>        Function_Return (iVersion > iSQLVersion)
58929>>>    End_Function
58930>>>
58930>>>    // Returns TRUE if table is opened exclusive, otherwise FALSE
58930>>>    // Note: If run from the Studio, CodeMast & CodeType _is_ open by the Studio,
58930>>>    //       so in that case we "cheat" and report those tables were opened OK.
58930>>>    Function OpenTableExclusive Handle hTable Returns Boolean
58932>>>        Integer iMode iErrorObject
58932>>>        Boolean bOpened
58932>>>        String sTableName 
58932>>>        Handle hoCurrentErrorHandler
58932>>>
58932>>>        Set Error_Report_Mode to DUF_ERROR_NO_REPORT
58933>>>        // Can't open a table properly if run through the Debugger/Studio,
58933>>>        // so we generate an error here:
58933>>>        If (IsDebuggerPresent()) Begin
58935>>>            Move Error_Object_Id to hoCurrentErrorHandler
58936>>>            Get piOrgErrorHandlerID to iErrorObject
58937>>>            If (iErrorObject <> 0) Begin
58939>>>                Move iErrorObject to Error_Object_Id
58940>>>            End
58940>>>>
58940>>>            Error DFERR_OPERATOR "It is not possible to make structural changes to the database when running through the Debugger/Studio! You need to run this program from outside of the Studio."
58941>>>>
58941>>>            Move hoCurrentErrorHandler to Error_Object_Id
58942>>>            Set Error_Report_Mode to DUF_ERROR_REPORT
58943>>>            Function_Return False
58944>>>        End
58944>>>>
58944>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
58947>>>        If (bOpened) Begin
58949>>>//            If (IsDebuggerPresent()) Begin
58949>>>//                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
58949>>>//                If (Uppercase(sTableName) = "CODEMAST" or Uppercase(sTableName) = "CODETYPE") Begin
58949>>>//                    Set Error_Report_Mode to DUF_ERROR_REPORT
58949>>>//                    Function_Return True
58949>>>//                End
58949>>>//            End
58949>>>            Get_Attribute DF_FILE_OPEN_MODE of hTable to iMode
58952>>>            If (iMode=DF_EXCLUSIVE) Begin
58954>>>                    Set Error_Report_Mode to DUF_ERROR_REPORT
58955>>>                Function_Return True
58956>>>            End
58956>>>>
58956>>>            Close hTable
58957>>>        End
58957>>>>
58957>>>        Else Begin
58958>>>            Open hTable
58960>>>            Get_Attribute DF_FILE_OPENED of hTable to bOpened
58963>>>            If (bOpened and IsDebuggerPresent()) Begin
58965>>>                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
58968>>>                If (Uppercase(sTableName) = "CODEMAST" or Uppercase(sTableName) = "CODETYPE") Begin
58970>>>                    Set Error_Report_Mode to DUF_ERROR_REPORT
58971>>>                    Function_Return True
58972>>>                End
58972>>>>
58972>>>            End
58972>>>>
58972>>>
58972>>>        End
58972>>>>
58972>>>
58972>>>        Close hTable
58973>>>        Open hTable Mode DF_EXCLUSIVE
58975>>>        Get_Attribute DF_FILE_OPENED of hTable to bOpened
58978>>>
58978>>>        Set Error_Report_Mode to DUF_ERROR_REPORT
58979>>>        Function_Return bOpened
58980>>>    End_Function
58981>>>
58981>>>    Function AutoConnectionIDLogin Returns Boolean
58983>>>        String sConnectionID sConnectionString sDriverID
58983>>>        Boolean bExists bOK bSQLDriver
58983>>>        Handle hoCLI hoDriver
58983>>>        Integer iRetval
58983>>>        tSQLConnection SQLConnection
58983>>>        tSQLConnection SQLConnection
58983>>>
58983>>>        Get psDriverID to sDriverID
58984>>>        Get IsSQLDriver sDriverID to bSQLDriver
58985>>>        If (bSQLDriver = False) Begin
58987>>>            Function_Return True
58988>>>        End
58988>>>>
58988>>>
58988>>>        Get pSQLConnection of ghoSQLConnectionHandler to SQLConnection
58989>>>        Move SQLConnection.sDriverID                  to sDriverID
58990>>>        Move SQLConnection.sConnectionString          to sConnectionString
58991>>>        Move SQLConnection.sConnectionID to sConnectionID
58992>>>
58992>>>        Get IsConnectionID sConnectionID sDriverID to bExists
58993>>>        If (bExists = False) Begin
58995>>>            // We always start by deleting the current connection - if any - because the
58995>>>            // login details my have changed.
58995>>>            Get phoCLIHandler to hoCLI
58996>>>            Set psDriverID    of hoCLI to sDriverID
58997>>>            Get DeleteConnectionID of hoCLI sConnectionID -1 to iRetval
58998>>>            Get AutoSetConnectionID sConnectionID to bOk
58999>>>            If (bOk = False) Begin
59001>>>                Error DFERR_PROGRAM ("The Connection ID:" * sConnectionID * "could not be created and therefor the table can't be changed.")
59002>>>>
59002>>>                Function_Return False
59003>>>            End
59003>>>>
59003>>>            Move bOK to bExists
59004>>>        End
59004>>>>
59004>>>
59004>>>        Get Create (RefClass(cDbUpdateDatabaseDriver)) to hoDriver
59005>>>        Set psDriverID of hoDriver to SQLConnection.sDriverID
59006>>>        Get DbLogin of hoDriver sConnectionString SQLConnection.sServer SQLConnection.sDatabase SQLConnection.bTrusted SQLConnection.sUserID SQLConnection.sPassword to bOK
59007>>>        Send Destroy of hoDriver
59008>>>
59008>>>        Function_Return (bExists = True)
59009>>>    End_Function
59010>>>
59010>>>    // Scans to see if all tables can be opened exclusivly. I.e. that nobody else is running the application.
59010>>>    // Returns: False if nobody else is running
59010>>>    //          True if at least one table is open by another process (e.g. another user is running the application)
59010>>>    // N.B! Only works for Embedded DataFlex Tables! It will _not_ work for Sql tables because; these
59010>>>    //      tables are not locked as DataFlex tables are.
59010>>>    Function IsDatabaseInUse Returns Boolean
59012>>>        Handle  hTable
59012>>>        String  sRootName
59012>>>        Boolean bOpen bErr bAlias bOK bIsSQLTable bFlexErrs bExists
59012>>>        Integer iCount iTables
59012>>>
59012>>>        Move 0 to iTables
59013>>>        Set Action_Text of ghoStatusPanel to "Database in use check..."
59014>>>        Get AutoConnectionIDLogin to bOK
59015>>>        Get UtilFilelistNoOfTables to iTables
59016>>>        Set piPosition   of ghoProgressBar to 0
59017>>>        Set piAdvanceBy  of ghoProgressBar to 1
59018>>>        Set piMaximum    of ghoProgressBar to iTables
59019>>>        Move 0 to hTable
59020>>>        Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
59023>>>        Move False to bErr
59024>>>        Send Ignore_Error of Error_Object_Id DFERR_FILE_ACCESS_VIOLATION
59025>>>
59025>>>        Repeat
59025>>>>
59025>>>            Set piPosition of ghoProgressBar to iCount
59026>>>            Increment iCount
59027>>>            Get_Attribute DF_FILE_ROOT_NAME of hTable to sRootName
59030>>>            Move (Uppercase(sRootName) = "FLEXERRS")  to bFlexErrs
59031>>>
59031>>>            // This test is only applicable for DataFlex embedded tables; so skip test if driver based table.
59031>>>            Get _UtilTableIsSqlByRootName sRootName to bIsSQLTable
59032>>>            Move False to bOpen
59033>>>            Get _UtilTableExists hTable to bExists
59034>>>            // Don't bother about CodeType (253, CodeMast (254) or) FlexErrs (Normally table 50)
59034>>>            If (bIsSQLTable = False and bExists = True and hTable <> 0 and hTable <> 253 and hTable <> 254 and bFlexErrs = False) Begin
59036>>>                Set Error_Report_Mode to DUF_ERROR_NO_REPORT
59037>>>                Open hTable
59039>>>                Get_Attribute DF_FILE_OPENED of hTable to bOpen
59042>>>                Set Error_Report_Mode to DUF_ERROR_REPORT
59043>>>                If (bOpen = True) Begin
59045>>>                    // We cannot open an Alias file exclusive as it will generate an error (4177 - "File in use")
59045>>>                    Get UtilTableIsAlias hTable to bAlias
59046>>>                    If (bAlias = False) Begin
59048>>>                        Close hTable
59049>>>                        Get OpenTableExclusive hTable to bOpen
59050>>>                        If (bOpen = False) Begin
59052>>>                            Move True to bErr
59053>>>                        End
59053>>>>
59053>>>                    End
59053>>>>
59053>>>                End
59053>>>>
59053>>>                Close hTable
59054>>>            End
59054>>>>
59054>>>            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
59057>>>            If (bErr = True ) ;                Break
59060>>>        Until (not(hTable))
59062>>>
59062>>>        Set Action_Text of ghoStatusPanel to ""
59063>>>        Send Trap_Error of Error_Object_Id DFERR_FILE_ACCESS_VIOLATION
59064>>>        Move False to Err
59065>>>
59065>>>        Function_Return bErr
59066>>>    End_Function
59067>>>
59067>>>End_Class
59068>Use cRDCHeaderGroup.pkg
Including file: cRDCHeaderGroup.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\RDCToolsLib20\AppSrc\cRDCHeaderGroup.pkg)
59068>>>//****************************************************************************
59068>>>// $Module type: Package
59068>>>// $Module name: cRDCHeaderGroup.pkg
59068>>>//
59068>>>// $Author     : Nils Svedmyr, RDC Tools International.
59068>>>// Copyright (c) 2017 RDC Tools International
59068>>>// E-mail      : support@rdctools.com
59068>>>// Web-site    : http://www.rdctools.com
59068>>>//
59068>>>// Created     : 2017-01-05 @ 19:04 (Military date format - Year-Month-Day)
59068>>>//
59068>>>// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
59068>>>// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
59068>>>// This is free software; you can redistribute it and/or modify it under the terms of the
59068>>>// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
59068>>>// in the help folder for more details.
59068>>>//
59068>>>//****************************************************************************
59068>>>Use Windows.pkg
59068>>>Use cCommandLinkButton.pkg
Including file: cCommandLinkButton.pkg    (C:\Program Files\DataFlex 23.0\Pkg\cCommandLinkButton.pkg)
59068>>>>>// This requires version 6 of common controls (vista or windows server 2008). If used with
59068>>>>>// older versions you will just get a regular great big button.
59068>>>>>
59068>>>>>Use Windows.pkg
59068>>>>>Use CharTranslate.pkg
59068>>>>>
59068>>>>>Class cCommandLinkButton is a Button
59069>>>>>    
59069>>>>>    Procedure Construct_Object
59071>>>>>        Forward Send Construct_Object
59073>>>>>        Property String psPrivateNote
59074>>>>>    End_Procedure
59075>>>>>    
59075>>>>>    Procedure Set psNote String sNote
59077>>>>>        Boolean bSupported
59077>>>>>        Set psPrivateNote to sNote
59078>>>>>        Get IsExControlSupported to bSupported
59079>>>>>        If bSupported Begin
59081>>>>>            Send SetWinNote
59082>>>>>        End
59082>>>>>>
59082>>>>>    End_Procedure
59083>>>>>    
59083>>>>>    Procedure SetWinNote
59085>>>>>        WString wNote
59085>>>>>        Handle hWnd
59085>>>>>        Integer i
59085>>>>>        Pointer pVar
59085>>>>>        Get Form_Window_Handle 0 to hWnd
59086>>>>>        If hWnd Begin
59088>>>>>            Get psNote to wNote
59089>>>>>            Move (SendMessage(hwnd, BCM_SETNOTE, 0, AddressOf(wNote))) to i
59090>>>>>        End
59090>>>>>>
59090>>>>>    End_Procedure
59091>>>>>    
59091>>>>>    
59091>>>>>    Function psNote Returns String
59093>>>>>        Function_Return (psPrivateNote(Self))
59094>>>>>    End_Function
59095>>>>>    
59095>>>>>    
59095>>>>>    Procedure Page Integer iState
59097>>>>>        Integer i hWnd
59097>>>>>        Boolean bSupported
59097>>>>>        Get IsExControlSupported to bSupported
59098>>>>>        If (iState=1 and bSupported) Begin
59100>>>>>            Get form_style i to i
59101>>>>>            Set Form_Style 0 to (i ior (BS_COMMANDLINK + BS_FLAT))
59102>>>>>            Forward Send Page iState
59104>>>>>            Send SetWinNote
59105>>>>>        End
59105>>>>>>
59105>>>>>        Else Begin
59106>>>>>            Forward Send Page iState
59108>>>>>        End
59108>>>>>>
59108>>>>>    End_Procedure
59109>>>>>    
59109>>>>>End_Class
59110>>>
59110>>>Define clGreenGrey      for (RGB(64, 84, 93))
59110>>>Define clGreenGreyLight for (RGB(7, 117, 104))
59110>>>
59110>>>Class cRDCHeaderGroupImage is a cCommandLinkButton
59111>>>    Procedure Construct_Object
59113>>>        Forward Send Construct_Object
59115>>>
59115>>>        Set Size to 18 19
59116>>>        Set Focus_Mode to NonFocusable
59117>>>        Set peImageAlign to Button_ImageList_Align_Top
59118>>>        Set pbAutoResizeIcons to True
59119>>>    End_Procedure
59120>>>
59120>>>    Procedure OnClick
59122>>>        Broadcast Send Prompt of (Parent(Self))
59124>>>    End_Procedure
59125>>>
59125>>>    Procedure Set Bitmap String sBitmapName
59127>>>        Forward Set psImage to sBitmapName
59129>>>    End_Procedure
59130>>>
59130>>>    Procedure End_Construct_Object
59132>>>        Set pbShield to False
59133>>>        Forward Send End_Construct_Object
59135>>>    End_Procedure
59136>>>
59136>>>End_Class
59137>>>
59137>>>// Intermediate class - don't use.
59137>>>Class _cRDCHeaderGroup is a Container3d
59138>>>
59138>>>    Procedure Construct_Object
59140>>>        Forward Send Construct_Object
59142>>>
59142>>>        Property String private.psImage
59143>>>        Property String private.psLabel
59144>>>
59144>>>    End_Procedure
59145>>>
59145>>>    Procedure Set psImage String sImage
59147>>>        Set private.psImage to sImage
59148>>>    End_Procedure
59149>>>
59149>>>    Function psImage Returns String
59151>>>        Function_Return (private.psImage(Self))
59152>>>    End_Function
59153>>>
59153>>>    Procedure Set psLabel String sLabel
59155>>>        Set private.psLabel to sLabel
59156>>>    End_Procedure
59157>>>
59157>>>    Function psLabel Returns String
59159>>>        Function_Return (private.psLabel(Self))
59160>>>    End_Function
59161>>>
59161>>>    // Don't display but allow to use old "Label" syntax to set the value of the oInfo_tb object (header text)
59161>>>    Procedure Set Label String sLabel
59163>>>        Set psLabel to sLabel
59164>>>    End_Procedure
59165>>>
59165>>>    Function Label Returns String
59167>>>        Function_Return (private.psLabel(Self))
59168>>>    End_Function
59169>>>
59169>>>End_Class
59170>>>
59170>>>Register_Procedure NavigatePrevious
59170>>>Register_Procedure NavigateNext
59170>>>
59170>>>Class cRDCHeaderGroup is a _cRDCHeaderGroup
59171>>>
59171>>>    Procedure Construct_Object
59173>>>        Forward Send Construct_Object
59175>>>
59175>>>        Set peAnchors to anTopLeftRight
59176>>>        Set pbAcceptDropFiles to True
59177>>>        Set Border_Style to Border_Normal
59178>>>
59178>>>        Property Integer private.piColorOrg
59179>>>        Property Boolean private.pbIsHeaderGroup True // Don't touch!
59180>>>        Property String private.psToolTip ""
59181>>>
59181>>>        Property Integer piImageColOffset 4
59182>>>        Property Integer piImageRowOffset -1
59183>>>        Property String psNote ""
59184>>>        Property Boolean pbLargeImageSize True
59185>>>        Property Integer private.piLargeImageSize 24
59186>>>        Property Integer private.piSmallImageSize 16
59187>>>        Property Boolean pbUseHotspotColor False
59188>>>        Property Integer piHeaderHotspotColor clAqua
59189>>>        Property String private.psLabel ""
59190>>>        Property Integer piLabelColor clGreenGrey
59191>>>        Property Boolean pbLabelFontItalics False
59192>>>        Property Integer piLabelLargeFontHeight 12
59193>>>        Property Integer piLabelSmallFontHeight 10
59194>>>        Property Boolean pbUseLargeFontHeight False
59195>>>
59195>>>        Property Integer piLabelFontPointWeight fw_Bold
59196>>>        Property Integer piLabelColOffset 28
59197>>>        Property Integer piLabelRowOffset 4
59198>>>        Property Boolean pbCreateTooltipItem True
59199>>>
59199>>>        Set pbAcceptDropFiles to True
59200>>>
59200>>>        Send Define_ToolTip_Support_Mixin
59201>>>
59201>>>        // For the Studio to render the header image
59201>>>        Set Bitmap to "Default32x32.bmp"
59202>>>        // This doesn't work... I wonder if there's a way to "trick" the Studio
59202>>>        // to render some text in the header when in design mode?
59202>>>        Set Label to "HEADER TEXT"
59203>>>
59203>>>        On_Key kLeftArrow  Send NavigatePrevious
59204>>>        On_Key kUpArrow    Send NavigatePrevious
59205>>>        On_Key kRightArrow Send NavigateNext
59206>>>        On_Key kDownArrow  Send NavigateNext
59207>>>        On_Key kSwitch     Send Switch_Next_Area
59208>>>    End_Procedure
59209>>>
59209>>>    Import_Class_Protocol ToolTip_Support_Mixin
59210>>>
59210>>>    Procedure Set psImage String sImage
59212>>>        Set Bitmap to ""
59213>>>        Forward Set psImage to sImage
59215>>>    End_Procedure
59216>>>
59216>>>    Function psImage Returns String
59218>>>        Function_Return (psImage(Self))
59219>>>    End_Function
59220>>>
59220>>>    Procedure Set Label String sLabel
59222>>>        Forward Set psLabel to sLabel
59224>>>    End_Procedure
59225>>>
59225>>>    Procedure Set psToolTip String sToolTip
59227>>>        Set private.psToolTip to sToolTip
59228>>>    End_Procedure
59229>>>
59229>>>    Function psToolTip Returns String
59231>>>        Function_Return (private.psToolTip(Self))
59232>>>    End_Function
59233>>>
59233>>>    Procedure End_Construct_Object
59235>>>        String sNote sLabel
59235>>>        Boolean bUseLargeFontHeight bLargeImageSize bCreateTooltipItem
59235>>>        Integer iFontHeight iImageSize iLabelRowOffset iLabelColOffset iSize iTextOffset
59235>>>
59235>>>        Forward Send End_Construct_Object
59237>>>
59237>>>        Get piLabelColOffset to iLabelColOffset
59238>>>        Get pbUseLargeFontHeight to bUseLargeFontHeight
59239>>>        If (bUseLargeFontHeight = True) Begin
59241>>>            Get piLabelLargeFontHeight to iFontHeight
59242>>>            Move 8 to iLabelRowOffset
59243>>>        End
59243>>>>
59243>>>        Else Begin
59244>>>            Get piLabelSmallFontHeight to iFontHeight
59245>>>            Move 6 to iLabelRowOffset
59246>>>        End
59246>>>>
59246>>>
59246>>>        Get pbLargeImageSize to bLargeImageSize
59247>>>        If (bLargeImageSize = True) Begin
59249>>>            Get private.piLargeImageSize to iImageSize
59250>>>        End
59250>>>>
59250>>>        Else Begin
59251>>>            Get private.piSmallImageSize to iImageSize
59252>>>            Move (iLabelColOffset - 6) to iLabelColOffset
59253>>>        End
59253>>>>
59253>>>
59253>>>        Object oHeaderGroupImage is a cRDCHeaderGroupImage
59255>>>            Set piImageSize to iImageSize
59256>>>            Set Location to (piImageRowOffset(Self)) (piImageColOffset(Self))
59257>>>            Set psImage to (private.psImage(Self))
59258>>>            Set peImageAlign to Button_ImageList_Align_Center
59259>>>            Set psToolTip to (private.psToolTip(Self))
59260>>>        End_Object
59261>>>
59261>>>        Object oHeaderGroupInfo_tb is a TextBox
59263>>>            Set Size to 12 100
59264>>>            Set Location to (piLabelRowOffset(Self)) iLabelColOffset
59265>>>            Set FontWeight to (piLabelFontPointWeight(Self))
59266>>>            Set FontItalics to (pbLabelFontItalics(Self))
59267>>>            Set FontPointHeight to iFontHeight
59268>>>            Set Label to (private.psLabel(Self))
59269>>>            Set TextColor to (piLabelColor(Self))
59270>>>            Set psToolTip to (private.psToolTip(Self))
59271>>>            Get Size to iSize
59272>>>        End_Object
59273>>>
59273>>>        // ToDo: The positioning logic for placing the info image to the right of the header text is flawed.
59273>>>        // How can it be improved?
59273>>>        Get pbCreateTooltipItem to bCreateTooltipItem
59274>>>        If (bCreateTooltipItem = True and private.psToolTip(Self) <> "") Begin
59276>>>            Get private.psLabel to sLabel
59277>>>            Get Text_Extent sLabel to iTextOffset
59278>>>            Move (Low(iTextOffset) -0)  to iTextOffset
59279>>>            Object oHeaderGroupTooltip_tb is a TextBox
59281>>>                Set Size to 10 10
59282>>>                If (bUseLargeFontHeight = True) Begin
59284>>>                    //                    Set Location to (piLabelRowOffset(Self)) iTextOffset //(Low(iSize) + (iTextOffset))
59284>>>                    Set Location to (piLabelRowOffset(Self)) (Low(iSize) + (iLabelColOffset * 2) + 10)
59285>>>                End
59285>>>>
59285>>>                Else Begin
59286>>>                    //                    Set Location to (piLabelRowOffset(Self)) iTextOffset
59286>>>                    Set Location to (piLabelRowOffset(Self)) (Low(iSize) + iLabelColOffset + 25)
59287>>>                End
59287>>>>
59287>>>                Set psToolTip to (private.psToolTip(Self))
59288>>>                Set Bitmap to "ActionAbout.bmp"
59289>>>            End_Object
59290>>>        End
59290>>>>
59290>>>
59290>>>        Get psNote to sNote
59291>>>        If (Trim(sNote) <> "") Begin
59293>>>            Object oHeaderGroupNote_tb is a TextBox
59295>>>                Set Size to 12 100
59296>>>                Set Location to (Hi(iSize) + iLabelRowOffset) (iLabelColOffset + 8)
59297>>>                Set Label to ("-" * String(sNote))
59298>>>                Set TextColor to (piLabelColor(Self))
59299>>>                Set FontPointHeight to 9
59300>>>                Set psToolTip to (private.psToolTip(Self))
59301>>>            End_Object
59302>>>        End
59302>>>>
59302>>>
59302>>>    End_Procedure
59303>>>
59303>>>    Function Popup_State Returns Boolean
59305>>>        Boolean bIsPopup
59305>>>        Get Popup_State of (Parent(Self)) to bIsPopup
59306>>>        Function_Return bIsPopup
59307>>>    End_Function
59308>>>
59308>>>    Procedure OnEnterArea Handle hoFrom
59310>>>        Integer iColor
59310>>>        Forward Send OnEnterArea hoFrom
59312>>>        // Not ideal, but works most of the time.
59312>>>        //       When navigating to i.e a popup we don't want
59312>>>        //       the coloring to appear. Else there will be 2
59312>>>        //       cRDCHeaderGroup's with the highlight color...
59312>>>        // Is there a better way?
59312>>>        If (hoFrom <> Desktop and hoFrom < Parent(Self)) Begin
59314>>>            Procedure_Return
59315>>>        End
59315>>>>
59315>>>        If (pbUseHotspotColor(Self) = True) Begin
59317>>>            Get Color to iColor
59318>>>            Set private.piColorOrg to iColor
59319>>>            Get piHeaderHotspotColor to iColor
59320>>>            Set Color to iColor
59321>>>            Broadcast Recursive Set Color to iColor
59323>>>        End
59323>>>>
59323>>>    End_Procedure
59324>>>
59324>>>    Procedure OnExitArea Handle hoFrom
59326>>>        Integer iColor
59326>>>        Forward Send OnExitArea hoFrom
59328>>>        If (pbUseHotspotColor(Self) = True) Begin
59330>>>            Get private.piColorOrg to iColor
59331>>>            Set Color to iColor
59332>>>            Broadcast Recursive Set Color to iColor
59334>>>        End
59334>>>>
59334>>>    End_Procedure
59335>>>
59335>>>    // Public access message to change the group header text color at runtime.
59335>>>    Procedure Set Label_Color Integer iColor
59337>>>        Set TextColor of (oHeaderGroupInfo_tb(Self)) to iColor
59338>>>    End_Procedure
59339>>>
59339>>>    Procedure NavigatePrevious
59341>>>        Integer iMulti ivoid iLastErr
59341>>>        Handle hWnd
59341>>>        Boolean bErr
59341>>>
59341>>>        Move Err to bErr
59342>>>        Move LastErr to iLastErr
59343>>>
59343>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
59344>>>        Get Select_Mode of (Focus(Self)) to iMulti
59345>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
59346>>>        If (Err) Begin
59348>>>            Move bErr to Err
59349>>>            Move iLastErr to LastErr
59350>>>            Procedure_Return
59351>>>        End
59351>>>>
59351>>>
59351>>>        Move bErr to Err
59352>>>        Move iLastErr to LastErr
59353>>>        If (iMulti = Multi_Select) Begin
59355>>>            Send Previous
59356>>>        End
59356>>>>
59356>>>        Else Begin
59357>>>            Get Form_Window_Handle of (Focus(Self)) to hWnd
59358>>>            Move (Sendmessage(hWnd, WM_KEYDOWN, Ascii(VK_LEFT), 0)) to iVoid
59359>>>        End
59359>>>>
59359>>>    End_Procedure
59360>>>
59360>>>    Procedure NavigateNext
59362>>>        Integer iMulti iVoid iLastErr
59362>>>        Handle hWnd
59362>>>        Boolean bErr
59362>>>
59362>>>        Move Err to bErr
59363>>>        Move LastErr to iLastErr
59364>>>
59364>>>        Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
59365>>>        Get Select_Mode of (Focus(Self)) to iMulti
59366>>>        Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
59367>>>        If (Err) Begin
59369>>>            Move bErr to Err
59370>>>            Move iLastErr to LastErr
59371>>>            Procedure_Return
59372>>>        End
59372>>>>
59372>>>
59372>>>        Move bErr to Err
59373>>>        Move iLastErr to LastErr
59374>>>        If (iMulti = Multi_Select) Begin
59376>>>            Send Next
59377>>>        End
59377>>>>
59377>>>        Else Begin
59378>>>            Get Form_Window_Handle of (Focus(Self)) to hWnd
59379>>>            Move (Sendmessage(hWnd, WM_KEYDOWN, Ascii(VK_LEFT), 0)) to iVoid
59380>>>        End
59380>>>>
59380>>>
59380>>>    End_Procedure
59381>>>
59381>>>    Procedure Enable_Window Integer iState
59383>>>        Handle hWnd
59383>>>        Get Window_Handle to hWnd
59384>>>        If hWnd Begin
59386>>>            Move (EnableWindow(hWnd, iState)) to hWnd
59387>>>        End
59387>>>>
59387>>>    End_Procedure
59388>>>
59388>>>    Procedure Page_Object Integer iState
59390>>>        Handle hWnd
59390>>>        Get Window_Handle to hWnd
59391>>>        Forward Send Page_Object iState
59393>>>        If (hWnd = 0 and iState) Begin
59395>>>            Send Shadow_Display
59396>>>        End
59396>>>>
59396>>>    End_Procedure
59397>>>
59397>>>    Procedure Shadow_Display
59399>>>        Send Enable_Window (not(Object_Shadow_State(Self)))
59400>>>    End_Procedure
59401>>>
59401>>>    Function Explicit_Shadow_State Returns Boolean
59403>>>        Function_Return (Private.Explicit_Shadow_State(Self))
59404>>>    End_Function
59405>>>
59405>>>    // For some reason we need to augment this event to allow
59405>>>    // files to be dropped on a cRDCHeaderGroup object; else nothing will
59405>>>    // happen.
59405>>>    Procedure OnFileDropped String sFilename Boolean bLast
59407>>>        Delegate Send OnFileDropped sFilename bLast
59409>>>    End_Procedure
59410>>>
59410>>>End_Class
59411>>>
59411>>>// We don't want the broadcast of setting color to set the background
59411>>>// color for forms that are within a cRDCHeaderGroup object.
59411>>>// If the Form is not within a cRDCHeaderGroup the Form class should
59411>>>// behave as it always has. But if you don't like this; just comment
59411>>>// it out.
59411>>>//Procedure Set Color for Form Integer eColor
59411>>>//    Boolean bIsHeaderGroup bErr bEnabled_State
59411>>>//    Integer iLastErr
59411>>>//
59411>>>//    Move Err to bErr
59411>>>//    Move LastErr to iLastErr
59411>>>//
59411>>>//    Send Ignore_Error of Error_Object_Id DFERR_BAD_MESSAGE
59411>>>//    Delegate Get private.pbIsHeaderGroup to bIsHeaderGroup
59411>>>//    Send Trap_Error of Error_Object_Id DFERR_BAD_MESSAGE
59411>>>//    Move bErr to Err
59411>>>//    Move iLastErr to LastErr
59411>>>//    If (bIsHeaderGroup = False) Begin
59411>>>//        Forward Set Color to eColor
59411>>>//    End
59411>>>//End_Procedure
59411>Use cSQLComboForm.pkg
Including file: cSQLComboForm.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\cSQLComboForm.pkg)
59411>>>Use Windows.pkg
59411>>>Use cRDCComboForm.pkg
Including file: cRDCComboForm.pkg    (C:\Projects\DF20\DbUpdateFramework\Libraries\RDCToolsLib20\AppSrc\cRDCComboForm.pkg)
59411>>>>>//****************************************************************************
59411>>>>>// $Module type: Package
59411>>>>>// $Module name: cRDCComboform.pkg
59411>>>>>//
59411>>>>>// $Author     : Nils Svedmyr, RDC Tools International.
59411>>>>>// Copyright (c) 2014 RDC Tools International
59411>>>>>// E-mail      : support@rdctools.com
59411>>>>>// Web-site    : http://www.rdctools.com
59411>>>>>//
59411>>>>>// Created     : 2014-03-17 @ 12:35 (Military date format - Year-Month-Day)
59411>>>>>//
59411>>>>>// Portions by : Raveen Sundram, Excellent Software Ltd
59411>>>>>//               The auto-size combo width logic was developed by Raveen.
59411>>>>>//
59411>>>>>// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
59411>>>>>// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
59411>>>>>// This is free software; you can redistribute it and/or modify it under the terms of the
59411>>>>>// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
59411>>>>>// in the help folder for more details.
59411>>>>>//
59411>>>>>//****************************************************************************
59411>>>>>Use Windows.pkg
59411>>>>>
59411>>>>>// Used by the "Page" message below to show
59411>>>>>// a focus rectangle around ComboForm and Checkbox objects.
59411>>>>>Define WM_CHANGEUISTATE For |CI$0127
59411>>>>>Define WM_UPDATEUISTATE For |CI$0128
59411>>>>>Define WM_QUERYUISTATE  For |CI$0129
59411>>>>>Define UIS_SET          For 1
59411>>>>>Define UIS_CLEAR        For 2
59411>>>>>Define UIS_INITIALIZE   For 3
59411>>>>>Define UISF_HIDEFOCUS   For |CI$1
59411>>>>>Define UISF_HIDEACCEL   For |CI$2
59411>>>>>Define UISF_ACTIVE      For |CI$4
59411>>>>>
59411>>>>>Class cComboFormIdleHandler is a cIdleHandler
59412>>>>>    Procedure Construct_Object
59414>>>>>        Forward Send Construct_Object
59416>>>>>
59416>>>>>        Set Label_Row_Offset to 0
59417>>>>>        Set Label_Col_Offset to 2
59418>>>>>        Set Label_Justification_Mode to jMode_Right
59419>>>>>        Set Combo_Sort_State to False
59420>>>>>        Set Entry_State to False
59421>>>>>
59421>>>>>    End_Procedure
59422>>>>>
59422>>>>>    Procedure OnIdle
59424>>>>>        Delegate Send DoUpdate
59426>>>>>    End_Procedure
59427>>>>>
59427>>>>>End_Class
59428>>>>>
59428>>>>>Class cRDCComboForm is a ComboForm
59429>>>>>    Procedure Construct_Object
59431>>>>>        Forward Send Construct_Object
59433>>>>>
59433>>>>>        Property Boolean pbAutoListWidth True
59434>>>>>
59434>>>>>        Property Boolean pbAutoShadowLabelObject True
59435>>>>>
59435>>>>>        Property Boolean pbAutoEnable False
59436>>>>>        Set Label_Col_Offset to 2
59437>>>>>        Property Boolean pbEnabled True
59438>>>>>        Set Label_Justification_Mode to JMode_Right
59439>>>>>        Property Handle phoIdleHandler (Create(Self, RefClass(cComboFormIdleHandler)))
59440>>>>>
59440>>>>>    End_Procedure
59441>>>>>
59441>>>>>    Procedure End_Construct_Object
59443>>>>>        Boolean bAutoShadowLabelObject
59443>>>>>        String sTooltip sStatus_Help
59443>>>>>
59443>>>>>        Get pbAutoShadowLabelObject to bAutoShadowLabelObject
59444>>>>>        If (bAutoShadowLabelObject = True) Begin
59446>>>>>            Set Private.Label_Shadow_Display_Mode to TBSHADOW_ON_LOCAL
59447>>>>>        End
59447>>>>>>
59447>>>>>
59447>>>>>        Forward Send End_Construct_Object
59449>>>>>
59449>>>>>        Get psToolTip   to sTooltip
59450>>>>>        Get Status_Help to sStatus_Help
59451>>>>>        If (sTooltip = "" and sStatus_Help <> "") Begin
59453>>>>>            Set psToolTip to sStatus_Help
59454>>>>>        End
59454>>>>>>
59454>>>>>        Else If (sTooltip <> "" and sStatus_Help = "") Begin
59457>>>>>            Set Status_Help to sTooltip
59458>>>>>        End
59458>>>>>>
59458>>>>>        Set pbEnabled of (phoIdleHandler(Self)) to (pbAutoEnable(Self))
59459>>>>>
59459>>>>>    End_Procedure
59460>>>>>
59460>>>>>    Procedure DoUpdate
59462>>>>>        If (pbAutoEnable(Self) = False) Begin
59464>>>>>            Procedure_Return
59465>>>>>        End
59465>>>>>>
59465>>>>>        Set Enabled_State to (IsEnabled(Self))
59466>>>>>    End_Procedure
59467>>>>>
59467>>>>>    Function IsEnabled Returns Boolean
59469>>>>>        Boolean bEnabled
59469>>>>>        Get pbEnabled to bEnabled
59470>>>>>        Function_Return bEnabled
59471>>>>>    End_Function
59472>>>>>
59472>>>>>    // Enable the idle handler timer when the object is activated
59472>>>>>    Procedure Activating
59474>>>>>        Forward Send Activating
59476>>>>>        Set pbEnabled of (phoIdleHandler(Self)) to True
59477>>>>>    End_Procedure
59478>>>>>
59478>>>>>    // Disable the idle handler when the object is deactivated
59478>>>>>    Procedure Deactivating
59480>>>>>        Set pbEnabled of (phoIdleHandler(Self)) to False
59481>>>>>        Forward Send Deactivating
59483>>>>>    End_Procedure
59484>>>>>
59484>>>>>    // To "un-select" the text in the comboform on startup
59484>>>>>    Procedure DoApplyAnchors Integer Arg1 Integer Arg2
59486>>>>>        Integer iStart iEnd
59486>>>>>
59486>>>>>        If (Focus(Desktop)=Self) Begin
59488>>>>>            Get SelStart to iStart
59489>>>>>            Get SelEnd   to iEnd
59490>>>>>        End
59490>>>>>>
59490>>>>>        Forward Send DoApplyAnchors Arg1 Arg2
59492>>>>>        Send SetSel iStart iEnd
59493>>>>>    End_Procedure
59494>>>>>
59494>>>>>    // Message that will drop down the list without the user clicking it,
59494>>>>>    // so you can send "DropDownList" to the combo to show the list.
59494>>>>>    Procedure DropDownList
59496>>>>>        Send Windows_Message CB_SHOWDROPDOWN 1 0
59497>>>>>    End_Procedure
59498>>>>>
59498>>>>>    Procedure SizeComboWidth
59500>>>>>        Integer iCount iItem iTextExt iRows iWd iNewWd iVertAdj
59500>>>>>        String sVal
59500>>>>>
59500>>>>>        // Initialise Width
59500>>>>>        Set ListWidth to 0
59501>>>>>        Send DoSetListWidth
59502>>>>>
59502>>>>>        Get ListRowCount     to iRows
59503>>>>>        Get Combo_Item_Count to iCount
59504>>>>>
59504>>>>>        // Vertical scroll-bar adjustment is needed
59504>>>>>        Move (iRows > 0 and iCount > iRows) to iVertAdj
59505>>>>>        If (iVertAdj) Begin
59507>>>>>            Move (GetSystemMetrics(SM_CXVSCROLL)+GetSystemMetrics(SM_CXEDGE)) to iVertAdj
59508>>>>>        End
59508>>>>>>
59508>>>>>        Else Begin
59509>>>>>            Move (GetSystemMetrics(SM_CXEDGE)) to iVertAdj
59510>>>>>        End
59510>>>>>>
59510>>>>>
59510>>>>>        // Calculate New Width
59510>>>>>        Decrement iCount
59511>>>>>        For iItem from 0 to iCount
59517>>>>>>
59517>>>>>            Get Combo_Value iItem to sVal
59518>>>>>            If (sVal <> "") Begin
59520>>>>>                Get Text_Extent sVal to iTextExt
59521>>>>>                Move (Low(iTextExt) + iVertAdj) to iWd
59522>>>>>                If (iWd > iNewWd) Begin
59524>>>>>                    Move (iWd + GetSystemMetrics(SM_CXFIXEDFRAME) + GetSystemMetrics(SM_CXEDGE)) to iNewWd
59525>>>>>                End
59525>>>>>>
59525>>>>>            End
59525>>>>>>
59525>>>>>        Loop
59526>>>>>>
59526>>>>>
59526>>>>>        // Set New Width
59526>>>>>        Set ListWidth to iNewWd
59527>>>>>        Send DoSetListWidth
59528>>>>>    End_Procedure
59529>>>>>
59529>>>>>    Procedure Combo_Add_Item String sValue
59531>>>>>        Forward Send Combo_Add_Item sValue
59533>>>>>        If (pbAutoListWidth(Self)) Begin
59535>>>>>            Send SizeComboWidth
59536>>>>>        End
59536>>>>>>
59536>>>>>    End_Procedure
59537>>>>>
59537>>>>>    Procedure Combo_Fill_List
59539>>>>>        Forward Send Combo_Fill_List
59541>>>>>        If (pbAutoListWidth(Self)) Begin
59543>>>>>            Send SizeComboWidth
59544>>>>>        End
59544>>>>>>
59544>>>>>    End_Procedure
59545>>>>>
59545>>>>>    // Fix for a bug when using manifest files & running Vista and above.
59545>>>>>    // The bug being that the focus rectangle doesn't show.
59545>>>>>    Procedure Page Integer iPageObject
59547>>>>>        Handle hWnd
59547>>>>>        Integer iRet iState
59547>>>>>
59547>>>>>        Forward Send Page iPageObject
59549>>>>>
59549>>>>>        If (iPageObject) Begin
59551>>>>>            Get Window_Handle to hWnd
59552>>>>>            If (hWnd) Begin
59554>>>>>                Move (SendMessage(hWnd, WM_QUERYUISTATE, 0, 0)) to iRet
59555>>>>>                If (iRet iand UISF_HIDEFOCUS) Begin
59557>>>>>                    Move (UIS_CLEAR + (UISF_HIDEFOCUS * 65536)) to iState
59558>>>>>                    Move (SendMessage(hWnd, WM_UPDATEUISTATE, iState, 0)) to iRet
59559>>>>>                End
59559>>>>>>
59559>>>>>            End
59559>>>>>>
59559>>>>>        End
59559>>>>>>
59559>>>>>
59559>>>>>        // To "un-select" the text in the comboform
59559>>>>>        If (iPageObject = 1 and Focus(Desktop) <> Self) Begin
59561>>>>>            Send SetSel 0 0
59562>>>>>        End
59562>>>>>>
59562>>>>>    End_Procedure
59563>>>>>
59563>>>>>End_Class
59564>>>
59564>>>// Used by the "Page" message below to show
59564>>>// a rectangle around ComboForm and Checkbox objects.
59564>>>//#IFNDEF WM_CHANGEUISTATE
59564>>>//    Define WM_CHANGEUISTATE for |CI$0127
59564>>>//    Define WM_UPDATEUISTATE for |CI$0128
59564>>>//    Define WM_QUERYUISTATE  for |CI$0129
59564>>>//    Define UIS_SET          for 1
59564>>>//    Define UIS_CLEAR        for 2
59564>>>//    Define UIS_INITIALIZE   for 3
59564>>>//    Define UISF_HIDEFOCUS   for |CI$1
59564>>>//    Define UISF_HIDEACCEL   for |CI$2
59564>>>//    Define UISF_ACTIVE      for |CI$4
59564>>>//#ENDIF
59564>>>
59564>>>Class cSQLComboForm is a cRDCComboForm
59565>>>    Procedure Construct_Object
59567>>>        Forward Send Construct_Object
59569>>>
59569>>>        // This will shadow the label if the form itself has its Enabled_State=False
59569>>>//        Property Boolean pbAutoShadowLabelObject True
59569>>>
59569>>>        // The piItem should be set to the object's corresponding tSQLConnection member (One based)
59569>>>        Property Integer piItem
59570>>>
59570>>>//        Set Label_Col_Offset to 2
59570>>>//        Set Label_Justification_Mode to JMode_Right
59570>>>    End_Procedure
59571>>>
59571>>>    Procedure End_Construct_Object
59573>>>//        Boolean bAutoShadowLabelObject
59573>>>//        Get pbAutoShadowLabelObject to bAutoShadowLabelObject
59573>>>//        If (bAutoShadowLabelObject = True) Begin
59573>>>//            Set Private.Label_Shadow_Display_Mode to TBSHADOW_ON_LOCAL
59573>>>//        End
59573>>>        Forward Send End_Construct_Object
59575>>>    End_Procedure
59576>>>
59576>>>    Procedure DbTypeUpdate Integer iDbType String sDriverID
59578>>>    End_Procedure
59579>>>
59579>>>    Procedure ReadConnectionData String[] sConnectionData
59581>>>        Integer iItem
59581>>>        Get piItem to iItem
59582>>>        Set Value to sConnectionData[iItem]
59583>>>    End_Procedure
59584>>>
59584>>>    Procedure WriteConnectionData String[] ByRef sConnectionData
59586>>>        String sValue
59586>>>        Integer iItem
59586>>>        Get piItem to iItem
59587>>>        Get Value to sValue
59588>>>        Move sValue to sConnectionData[iItem]
59589>>>    End_Procedure
59590>>>
59590>>>//    Procedure Set psToolTip String sToolTip
59590>>>//        String sStatusHelp
59590>>>//
59590>>>//        Get Status_Help to sStatusHelp
59590>>>//        If (sStatusHelp = "") Begin
59590>>>//            Set Status_Help to sToolTip
59590>>>//        End
59590>>>//
59590>>>//        Forward Set psToolTip to sToolTip
59590>>>//    End_Procedure
59590>>>//
59590>>>//    // Fix for a bug when using manifest files & running Vista and above.
59590>>>//    // The bug being that the focus rectangle doesn't show.
59590>>>//    Procedure Page Integer iPageObject
59590>>>//        Handle hWnd
59590>>>//        Integer iRet iState
59590>>>//
59590>>>//        Forward Send Page iPageObject
59590>>>//
59590>>>//        If (iPageObject) Begin
59590>>>//            Get Window_Handle to hWnd
59590>>>//            If (hWnd) Begin
59590>>>//                Move (SendMessage(hWnd, WM_QUERYUISTATE, 0, 0)) to iRet
59590>>>//                If (iRet iand UISF_HIDEFOCUS) Begin
59590>>>//                    Move (UIS_CLEAR + (UISF_HIDEFOCUS * 65536)) to iState
59590>>>//                    Move (SendMessage(hWnd, WM_UPDATEUISTATE, iState, 0)) to iRet
59590>>>//                End
59590>>>//            End
59590>>>//        End
59590>>>//    End_Procedure
59590>>>
59590>>>End_Class
59591>Use ChilkatXML-9.5.0-win32.pkg
Including file: ChilkatXML-9.5.0-win32.pkg    (C:\Projects\DF20\DbUpdateFramework\AppSrc\ChilkatXML-9.5.0-win32.pkg)
59591>>>Use FlexCom20.pkg
59591>>>
59591>>>// CLSID: {2077C1B5-FBD0-40DF-B7AA-E07CBA589CB0}
59591>>>// IChilkatXml Interface v9.5.0
59591>>>Class cComIChilkatXml is a Mixin
59592>>>
59592>>>    Function ComGetImplAddrStr Returns String
59594>>>        Handle hDispatchDriver
59594>>>        String retVal
59594>>>        Get phDispatchDriver to hDispatchDriver
59595>>>        Get InvokeComMethod of hDispatchDriver 99 OLE_VT_BSTR to retVal
59596>>>        Function_Return retVal
59597>>>    End_Function
59598>>>
59598>>>    Function ComLastErrorHtml Returns String
59600>>>        Handle hDispatchDriver
59600>>>        String retVal
59600>>>        Get phDispatchDriver to hDispatchDriver
59601>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BSTR to retVal
59602>>>        Function_Return retVal
59603>>>    End_Function
59604>>>
59604>>>    Function ComLastErrorText Returns String
59606>>>        Handle hDispatchDriver
59606>>>        String retVal
59606>>>        Get phDispatchDriver to hDispatchDriver
59607>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BSTR to retVal
59608>>>        Function_Return retVal
59609>>>    End_Function
59610>>>
59610>>>    Function ComLastErrorXml Returns String
59612>>>        Handle hDispatchDriver
59612>>>        String retVal
59612>>>        Get phDispatchDriver to hDispatchDriver
59613>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BSTR to retVal
59614>>>        Function_Return retVal
59615>>>    End_Function
59616>>>
59616>>>    Function ComVersion Returns String
59618>>>        Handle hDispatchDriver
59618>>>        String retVal
59618>>>        Get phDispatchDriver to hDispatchDriver
59619>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_BSTR to retVal
59620>>>        Function_Return retVal
59621>>>    End_Function
59622>>>
59622>>>    Function ComDebugLogFilePath Returns String
59624>>>        Handle hDispatchDriver
59624>>>        String retVal
59624>>>        Get phDispatchDriver to hDispatchDriver
59625>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_BSTR to retVal
59626>>>        Function_Return retVal
59627>>>    End_Function
59628>>>
59628>>>    Procedure Set ComDebugLogFilePath String value
59630>>>        Handle hDispatchDriver
59630>>>        Get phDispatchDriver to hDispatchDriver
59631>>>        Send PrepareParams to hDispatchDriver 1
59632>>>        Set ComProperty of hDispatchDriver 5 OLE_VT_BSTR to value
59633>>>    End_Procedure
59634>>>
59634>>>    Function ComVerboseLogging Returns Integer
59636>>>        Handle hDispatchDriver
59636>>>        Integer retVal
59636>>>        Get phDispatchDriver to hDispatchDriver
59637>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_I4 to retVal
59638>>>        Function_Return retVal
59639>>>    End_Function
59640>>>
59640>>>    Procedure Set ComVerboseLogging Integer value
59642>>>        Handle hDispatchDriver
59642>>>        Get phDispatchDriver to hDispatchDriver
59643>>>        Send PrepareParams to hDispatchDriver 1
59644>>>        Set ComProperty of hDispatchDriver 6 OLE_VT_I4 to value
59645>>>    End_Procedure
59646>>>
59646>>>    Function ComLastMethodSuccess Returns Integer
59648>>>        Handle hDispatchDriver
59648>>>        Integer retVal
59648>>>        Get phDispatchDriver to hDispatchDriver
59649>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_I4 to retVal
59650>>>        Function_Return retVal
59651>>>    End_Function
59652>>>
59652>>>    Procedure Set ComLastMethodSuccess Integer value
59654>>>        Handle hDispatchDriver
59654>>>        Get phDispatchDriver to hDispatchDriver
59655>>>        Send PrepareParams to hDispatchDriver 1
59656>>>        Set ComProperty of hDispatchDriver 9 OLE_VT_I4 to value
59657>>>    End_Procedure
59658>>>
59658>>>    Function ComLastStringResult Returns String
59660>>>        Handle hDispatchDriver
59660>>>        String retVal
59660>>>        Get phDispatchDriver to hDispatchDriver
59661>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_BSTR to retVal
59662>>>        Function_Return retVal
59663>>>    End_Function
59664>>>
59664>>>    Function ComLastBinaryResult Returns Variant
59666>>>        Handle hDispatchDriver
59666>>>        Variant retVal
59666>>>        Get phDispatchDriver to hDispatchDriver
59667>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_VARIANT to retVal
59668>>>        Function_Return retVal
59669>>>    End_Function
59670>>>
59670>>>    Function ComLastStringResultLen Returns Integer
59672>>>        Handle hDispatchDriver
59672>>>        Integer retVal
59672>>>        Get phDispatchDriver to hDispatchDriver
59673>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_I4 to retVal
59674>>>        Function_Return retVal
59675>>>    End_Function
59676>>>
59676>>>    Function ComCdata Returns Integer
59678>>>        Handle hDispatchDriver
59678>>>        Integer retVal
59678>>>        Get phDispatchDriver to hDispatchDriver
59679>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_I4 to retVal
59680>>>        Function_Return retVal
59681>>>    End_Function
59682>>>
59682>>>    Procedure Set ComCdata Integer value
59684>>>        Handle hDispatchDriver
59684>>>        Get phDispatchDriver to hDispatchDriver
59685>>>        Send PrepareParams to hDispatchDriver 1
59686>>>        Set ComProperty of hDispatchDriver 100 OLE_VT_I4 to value
59687>>>    End_Procedure
59688>>>
59688>>>    Function ComContent Returns String
59690>>>        Handle hDispatchDriver
59690>>>        String retVal
59690>>>        Get phDispatchDriver to hDispatchDriver
59691>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_BSTR to retVal
59692>>>        Function_Return retVal
59693>>>    End_Function
59694>>>
59694>>>    Procedure Set ComContent String value
59696>>>        Handle hDispatchDriver
59696>>>        Get phDispatchDriver to hDispatchDriver
59697>>>        Send PrepareParams to hDispatchDriver 1
59698>>>        Set ComProperty of hDispatchDriver 101 OLE_VT_BSTR to value
59699>>>    End_Procedure
59700>>>
59700>>>    Function ComContentInt Returns Integer
59702>>>        Handle hDispatchDriver
59702>>>        Integer retVal
59702>>>        Get phDispatchDriver to hDispatchDriver
59703>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_I4 to retVal
59704>>>        Function_Return retVal
59705>>>    End_Function
59706>>>
59706>>>    Procedure Set ComContentInt Integer value
59708>>>        Handle hDispatchDriver
59708>>>        Get phDispatchDriver to hDispatchDriver
59709>>>        Send PrepareParams to hDispatchDriver 1
59710>>>        Set ComProperty of hDispatchDriver 102 OLE_VT_I4 to value
59711>>>    End_Procedure
59712>>>
59712>>>    Function ComDocType Returns String
59714>>>        Handle hDispatchDriver
59714>>>        String retVal
59714>>>        Get phDispatchDriver to hDispatchDriver
59715>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_BSTR to retVal
59716>>>        Function_Return retVal
59717>>>    End_Function
59718>>>
59718>>>    Procedure Set ComDocType String value
59720>>>        Handle hDispatchDriver
59720>>>        Get phDispatchDriver to hDispatchDriver
59721>>>        Send PrepareParams to hDispatchDriver 1
59722>>>        Set ComProperty of hDispatchDriver 103 OLE_VT_BSTR to value
59723>>>    End_Procedure
59724>>>
59724>>>    Function ComEmitXmlDecl Returns Integer
59726>>>        Handle hDispatchDriver
59726>>>        Integer retVal
59726>>>        Get phDispatchDriver to hDispatchDriver
59727>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_I4 to retVal
59728>>>        Function_Return retVal
59729>>>    End_Function
59730>>>
59730>>>    Procedure Set ComEmitXmlDecl Integer value
59732>>>        Handle hDispatchDriver
59732>>>        Get phDispatchDriver to hDispatchDriver
59733>>>        Send PrepareParams to hDispatchDriver 1
59734>>>        Set ComProperty of hDispatchDriver 104 OLE_VT_I4 to value
59735>>>    End_Procedure
59736>>>
59736>>>    Function ComEncoding Returns String
59738>>>        Handle hDispatchDriver
59738>>>        String retVal
59738>>>        Get phDispatchDriver to hDispatchDriver
59739>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_BSTR to retVal
59740>>>        Function_Return retVal
59741>>>    End_Function
59742>>>
59742>>>    Procedure Set ComEncoding String value
59744>>>        Handle hDispatchDriver
59744>>>        Get phDispatchDriver to hDispatchDriver
59745>>>        Send PrepareParams to hDispatchDriver 1
59746>>>        Set ComProperty of hDispatchDriver 105 OLE_VT_BSTR to value
59747>>>    End_Procedure
59748>>>
59748>>>    Function ComNumAttributes Returns Integer
59750>>>        Handle hDispatchDriver
59750>>>        Integer retVal
59750>>>        Get phDispatchDriver to hDispatchDriver
59751>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_I4 to retVal
59752>>>        Function_Return retVal
59753>>>    End_Function
59754>>>
59754>>>    Function ComNumChildren Returns Integer
59756>>>        Handle hDispatchDriver
59756>>>        Integer retVal
59756>>>        Get phDispatchDriver to hDispatchDriver
59757>>>        Get InvokeComMethod of hDispatchDriver 107 OLE_VT_I4 to retVal
59758>>>        Function_Return retVal
59759>>>    End_Function
59760>>>
59760>>>    Function ComSortCaseInsensitive Returns Integer
59762>>>        Handle hDispatchDriver
59762>>>        Integer retVal
59762>>>        Get phDispatchDriver to hDispatchDriver
59763>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_I4 to retVal
59764>>>        Function_Return retVal
59765>>>    End_Function
59766>>>
59766>>>    Procedure Set ComSortCaseInsensitive Integer value
59768>>>        Handle hDispatchDriver
59768>>>        Get phDispatchDriver to hDispatchDriver
59769>>>        Send PrepareParams to hDispatchDriver 1
59770>>>        Set ComProperty of hDispatchDriver 108 OLE_VT_I4 to value
59771>>>    End_Procedure
59772>>>
59772>>>    Function ComStandalone Returns Integer
59774>>>        Handle hDispatchDriver
59774>>>        Integer retVal
59774>>>        Get phDispatchDriver to hDispatchDriver
59775>>>        Get InvokeComMethod of hDispatchDriver 109 OLE_VT_I4 to retVal
59776>>>        Function_Return retVal
59777>>>    End_Function
59778>>>
59778>>>    Procedure Set ComStandalone Integer value
59780>>>        Handle hDispatchDriver
59780>>>        Get phDispatchDriver to hDispatchDriver
59781>>>        Send PrepareParams to hDispatchDriver 1
59782>>>        Set ComProperty of hDispatchDriver 109 OLE_VT_I4 to value
59783>>>    End_Procedure
59784>>>
59784>>>    Function ComTag Returns String
59786>>>        Handle hDispatchDriver
59786>>>        String retVal
59786>>>        Get phDispatchDriver to hDispatchDriver
59787>>>        Get InvokeComMethod of hDispatchDriver 110 OLE_VT_BSTR to retVal
59788>>>        Function_Return retVal
59789>>>    End_Function
59790>>>
59790>>>    Procedure Set ComTag String value
59792>>>        Handle hDispatchDriver
59792>>>        Get phDispatchDriver to hDispatchDriver
59793>>>        Send PrepareParams to hDispatchDriver 1
59794>>>        Set ComProperty of hDispatchDriver 110 OLE_VT_BSTR to value
59795>>>    End_Procedure
59796>>>
59796>>>    Function ComTreeId Returns Integer
59798>>>        Handle hDispatchDriver
59798>>>        Integer retVal
59798>>>        Get phDispatchDriver to hDispatchDriver
59799>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_I4 to retVal
59800>>>        Function_Return retVal
59801>>>    End_Function
59802>>>
59802>>>    Function ComAccumulateTagContent String llTag String llskipTags Returns String
59804>>>        Handle hDispatchDriver
59804>>>        String retVal
59804>>>        Get phDispatchDriver to hDispatchDriver
59805>>>        Send PrepareParams to hDispatchDriver 2
59806>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
59807>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llskipTags
59808>>>        Get InvokeComMethod of hDispatchDriver 112 OLE_VT_BSTR to retVal
59809>>>        Function_Return retVal
59810>>>    End_Function
59811>>>
59811>>>    Function ComAddAttribute String llname String llvalue Returns Integer
59813>>>        Handle hDispatchDriver
59813>>>        Integer retVal
59813>>>        Get phDispatchDriver to hDispatchDriver
59814>>>        Send PrepareParams to hDispatchDriver 2
59815>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
59816>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
59817>>>        Get InvokeComMethod of hDispatchDriver 113 OLE_VT_I4 to retVal
59818>>>        Function_Return retVal
59819>>>    End_Function
59820>>>
59820>>>    Function ComAddAttributeInt String llname Integer llvalue Returns Integer
59822>>>        Handle hDispatchDriver
59822>>>        Integer retVal
59822>>>        Get phDispatchDriver to hDispatchDriver
59823>>>        Send PrepareParams to hDispatchDriver 2
59824>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
59825>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
59826>>>        Get InvokeComMethod of hDispatchDriver 114 OLE_VT_I4 to retVal
59827>>>        Function_Return retVal
59828>>>    End_Function
59829>>>
59829>>>    Function ComAddChildTree Variant lltree Returns Integer
59831>>>        Handle hDispatchDriver
59831>>>        Integer retVal
59831>>>        Get phDispatchDriver to hDispatchDriver
59832>>>        Send PrepareParams to hDispatchDriver 1
59833>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH lltree
59834>>>        Get InvokeComMethod of hDispatchDriver 115 OLE_VT_I4 to retVal
59835>>>        Function_Return retVal
59836>>>    End_Function
59837>>>
59837>>>    Procedure ComAddOrUpdateAttribute String llname String llvalue
59839>>>        Handle hDispatchDriver
59839>>>        Get phDispatchDriver to hDispatchDriver
59840>>>        Send PrepareParams to hDispatchDriver 2
59841>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
59842>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
59843>>>        Send InvokeComMethod to hDispatchDriver 116 OLE_VT_VOID
59844>>>    End_Procedure
59845>>>
59845>>>    Procedure ComAddOrUpdateAttributeI String llname Integer llvalue
59847>>>        Handle hDispatchDriver
59847>>>        Get phDispatchDriver to hDispatchDriver
59848>>>        Send PrepareParams to hDispatchDriver 2
59849>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
59850>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
59851>>>        Send InvokeComMethod to hDispatchDriver 117 OLE_VT_VOID
59852>>>    End_Procedure
59853>>>
59853>>>    Procedure ComAddStyleSheet String llstyleSheet
59855>>>        Handle hDispatchDriver
59855>>>        Get phDispatchDriver to hDispatchDriver
59856>>>        Send PrepareParams to hDispatchDriver 1
59857>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstyleSheet
59858>>>        Send InvokeComMethod to hDispatchDriver 118 OLE_VT_VOID
59859>>>    End_Procedure
59860>>>
59860>>>    Procedure ComAddToAttribute String llname Integer llamount
59862>>>        Handle hDispatchDriver
59862>>>        Get phDispatchDriver to hDispatchDriver
59863>>>        Send PrepareParams to hDispatchDriver 2
59864>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
59865>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llamount
59866>>>        Send InvokeComMethod to hDispatchDriver 119 OLE_VT_VOID
59867>>>    End_Procedure
59868>>>
59868>>>    Procedure ComAddToChildContent String llTag Integer llamount
59870>>>        Handle hDispatchDriver
59870>>>        Get phDispatchDriver to hDispatchDriver
59871>>>        Send PrepareParams to hDispatchDriver 2
59872>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
59873>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llamount
59874>>>        Send InvokeComMethod to hDispatchDriver 120 OLE_VT_VOID
59875>>>    End_Procedure
59876>>>
59876>>>    Procedure ComAddToContent Integer llamount
59878>>>        Handle hDispatchDriver
59878>>>        Get phDispatchDriver to hDispatchDriver
59879>>>        Send PrepareParams to hDispatchDriver 1
59880>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llamount
59881>>>        Send InvokeComMethod to hDispatchDriver 121 OLE_VT_VOID
59882>>>    End_Procedure
59883>>>
59883>>>    Function ComAppendToContent String llstr Returns Integer
59885>>>        Handle hDispatchDriver
59885>>>        Integer retVal
59885>>>        Get phDispatchDriver to hDispatchDriver
59886>>>        Send PrepareParams to hDispatchDriver 1
59887>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstr
59888>>>        Get InvokeComMethod of hDispatchDriver 122 OLE_VT_I4 to retVal
59889>>>        Function_Return retVal
59890>>>    End_Function
59891>>>
59891>>>    Function ComBEncodeContent String llcharset Variant llinData Returns Integer
59893>>>        Handle hDispatchDriver
59893>>>        Integer retVal
59893>>>        Get phDispatchDriver to hDispatchDriver
59894>>>        Send PrepareParams to hDispatchDriver 2
59895>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcharset
59896>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llinData
59897>>>        Get InvokeComMethod of hDispatchDriver 123 OLE_VT_I4 to retVal
59898>>>        Function_Return retVal
59899>>>    End_Function
59900>>>
59900>>>    Function ComChildContentMatches String lltagPath String llpattern Integer llcaseSensitive Returns Integer
59902>>>        Handle hDispatchDriver
59902>>>        Integer retVal
59902>>>        Get phDispatchDriver to hDispatchDriver
59903>>>        Send PrepareParams to hDispatchDriver 3
59904>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
59905>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpattern
59906>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcaseSensitive
59907>>>        Get InvokeComMethod of hDispatchDriver 124 OLE_VT_I4 to retVal
59908>>>        Function_Return retVal
59909>>>    End_Function
59910>>>
59910>>>    Function ComChilkatPath String llpathCmd Returns String
59912>>>        Handle hDispatchDriver
59912>>>        String retVal
59912>>>        Get phDispatchDriver to hDispatchDriver
59913>>>        Send PrepareParams to hDispatchDriver 1
59914>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpathCmd
59915>>>        Get InvokeComMethod of hDispatchDriver 125 OLE_VT_BSTR to retVal
59916>>>        Function_Return retVal
59917>>>    End_Function
59918>>>
59918>>>    Procedure ComClear
59920>>>        Handle hDispatchDriver
59920>>>        Get phDispatchDriver to hDispatchDriver
59921>>>        Send InvokeComMethod to hDispatchDriver 126 OLE_VT_VOID
59922>>>    End_Procedure
59923>>>
59923>>>    Function ComContentMatches String llpattern Integer llcaseSensitive Returns Integer
59925>>>        Handle hDispatchDriver
59925>>>        Integer retVal
59925>>>        Get phDispatchDriver to hDispatchDriver
59926>>>        Send PrepareParams to hDispatchDriver 2
59927>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpattern
59928>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llcaseSensitive
59929>>>        Get InvokeComMethod of hDispatchDriver 127 OLE_VT_I4 to retVal
59930>>>        Function_Return retVal
59931>>>    End_Function
59932>>>
59932>>>    Procedure ComCopy Variant llnode
59934>>>        Handle hDispatchDriver
59934>>>        Get phDispatchDriver to hDispatchDriver
59935>>>        Send PrepareParams to hDispatchDriver 1
59936>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llnode
59937>>>        Send InvokeComMethod to hDispatchDriver 128 OLE_VT_VOID
59938>>>    End_Procedure
59939>>>
59939>>>    Procedure ComCopyRef Variant llcopyFromNode
59941>>>        Handle hDispatchDriver
59941>>>        Get phDispatchDriver to hDispatchDriver
59942>>>        Send PrepareParams to hDispatchDriver 1
59943>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llcopyFromNode
59944>>>        Send InvokeComMethod to hDispatchDriver 129 OLE_VT_VOID
59945>>>    End_Procedure
59946>>>
59946>>>    Function ComDecodeContent Returns Variant
59948>>>        Handle hDispatchDriver
59948>>>        Variant retVal
59948>>>        Get phDispatchDriver to hDispatchDriver
59949>>>        Get InvokeComMethod of hDispatchDriver 130 OLE_VT_VARIANT to retVal
59950>>>        Function_Return retVal
59951>>>    End_Function
59952>>>
59952>>>    Function ComDecodeEntities String llstr Returns String
59954>>>        Handle hDispatchDriver
59954>>>        String retVal
59954>>>        Get phDispatchDriver to hDispatchDriver
59955>>>        Send PrepareParams to hDispatchDriver 1
59956>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llstr
59957>>>        Get InvokeComMethod of hDispatchDriver 131 OLE_VT_BSTR to retVal
59958>>>        Function_Return retVal
59959>>>    End_Function
59960>>>
59960>>>    Function ComDecryptContent String llpassword Returns Integer
59962>>>        Handle hDispatchDriver
59962>>>        Integer retVal
59962>>>        Get phDispatchDriver to hDispatchDriver
59963>>>        Send PrepareParams to hDispatchDriver 1
59964>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
59965>>>        Get InvokeComMethod of hDispatchDriver 132 OLE_VT_I4 to retVal
59966>>>        Function_Return retVal
59967>>>    End_Function
59968>>>
59968>>>    Function ComEncryptContent String llpassword Returns Integer
59970>>>        Handle hDispatchDriver
59970>>>        Integer retVal
59970>>>        Get phDispatchDriver to hDispatchDriver
59971>>>        Send PrepareParams to hDispatchDriver 1
59972>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
59973>>>        Get InvokeComMethod of hDispatchDriver 133 OLE_VT_I4 to retVal
59974>>>        Function_Return retVal
59975>>>    End_Function
59976>>>
59976>>>    Function ComExtractChildByIndex Integer llindex Returns Variant
59978>>>        Handle hDispatchDriver
59978>>>        Variant retVal
59978>>>        Get phDispatchDriver to hDispatchDriver
59979>>>        Send PrepareParams to hDispatchDriver 1
59980>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
59981>>>        Get InvokeComMethod of hDispatchDriver 134 OLE_VT_DISPATCH to retVal
59982>>>        Function_Return retVal
59983>>>    End_Function
59984>>>
59984>>>    Function ComExtractChildByName String lltagPath String llattrName String llattrValue Returns Variant
59986>>>        Handle hDispatchDriver
59986>>>        Variant retVal
59986>>>        Get phDispatchDriver to hDispatchDriver
59987>>>        Send PrepareParams to hDispatchDriver 3
59988>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
59989>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
59990>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrValue
59991>>>        Get InvokeComMethod of hDispatchDriver 135 OLE_VT_DISPATCH to retVal
59992>>>        Function_Return retVal
59993>>>    End_Function
59994>>>
59994>>>    Function ComFindChild String lltagPath Returns Variant
59996>>>        Handle hDispatchDriver
59996>>>        Variant retVal
59996>>>        Get phDispatchDriver to hDispatchDriver
59997>>>        Send PrepareParams to hDispatchDriver 1
59998>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
59999>>>        Get InvokeComMethod of hDispatchDriver 136 OLE_VT_DISPATCH to retVal
60000>>>        Function_Return retVal
60001>>>    End_Function
60002>>>
60002>>>    Function ComFindChild2 String lltagPath Returns Integer
60004>>>        Handle hDispatchDriver
60004>>>        Integer retVal
60004>>>        Get phDispatchDriver to hDispatchDriver
60005>>>        Send PrepareParams to hDispatchDriver 1
60006>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60007>>>        Get InvokeComMethod of hDispatchDriver 137 OLE_VT_I4 to retVal
60008>>>        Function_Return retVal
60009>>>    End_Function
60010>>>
60010>>>    Function ComFindNextRecord String lltagPath String llcontentPattern Returns Variant
60012>>>        Handle hDispatchDriver
60012>>>        Variant retVal
60012>>>        Get phDispatchDriver to hDispatchDriver
60013>>>        Send PrepareParams to hDispatchDriver 2
60014>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60015>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
60016>>>        Get InvokeComMethod of hDispatchDriver 138 OLE_VT_DISPATCH to retVal
60017>>>        Function_Return retVal
60018>>>    End_Function
60019>>>
60019>>>    Function ComFindOrAddNewChild String lltagPath Returns Variant
60021>>>        Handle hDispatchDriver
60021>>>        Variant retVal
60021>>>        Get phDispatchDriver to hDispatchDriver
60022>>>        Send PrepareParams to hDispatchDriver 1
60023>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60024>>>        Get InvokeComMethod of hDispatchDriver 139 OLE_VT_DISPATCH to retVal
60025>>>        Function_Return retVal
60026>>>    End_Function
60027>>>
60027>>>    Function ComFirstChild Returns Variant
60029>>>        Handle hDispatchDriver
60029>>>        Variant retVal
60029>>>        Get phDispatchDriver to hDispatchDriver
60030>>>        Get InvokeComMethod of hDispatchDriver 140 OLE_VT_DISPATCH to retVal
60031>>>        Function_Return retVal
60032>>>    End_Function
60033>>>
60033>>>    Function ComFirstChild2 Returns Integer
60035>>>        Handle hDispatchDriver
60035>>>        Integer retVal
60035>>>        Get phDispatchDriver to hDispatchDriver
60036>>>        Get InvokeComMethod of hDispatchDriver 141 OLE_VT_I4 to retVal
60037>>>        Function_Return retVal
60038>>>    End_Function
60039>>>
60039>>>    Function ComGetAttrValue String llname Returns String
60041>>>        Handle hDispatchDriver
60041>>>        String retVal
60041>>>        Get phDispatchDriver to hDispatchDriver
60042>>>        Send PrepareParams to hDispatchDriver 1
60043>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60044>>>        Get InvokeComMethod of hDispatchDriver 142 OLE_VT_BSTR to retVal
60045>>>        Function_Return retVal
60046>>>    End_Function
60047>>>
60047>>>    Function ComGetAttrValueInt String llname Returns Integer
60049>>>        Handle hDispatchDriver
60049>>>        Integer retVal
60049>>>        Get phDispatchDriver to hDispatchDriver
60050>>>        Send PrepareParams to hDispatchDriver 1
60051>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60052>>>        Get InvokeComMethod of hDispatchDriver 143 OLE_VT_I4 to retVal
60053>>>        Function_Return retVal
60054>>>    End_Function
60055>>>
60055>>>    Function ComGetAttributeName Integer llindex Returns String
60057>>>        Handle hDispatchDriver
60057>>>        String retVal
60057>>>        Get phDispatchDriver to hDispatchDriver
60058>>>        Send PrepareParams to hDispatchDriver 1
60059>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60060>>>        Get InvokeComMethod of hDispatchDriver 144 OLE_VT_BSTR to retVal
60061>>>        Function_Return retVal
60062>>>    End_Function
60063>>>
60063>>>    Function ComGetAttributeValue Integer llindex Returns String
60065>>>        Handle hDispatchDriver
60065>>>        String retVal
60065>>>        Get phDispatchDriver to hDispatchDriver
60066>>>        Send PrepareParams to hDispatchDriver 1
60067>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60068>>>        Get InvokeComMethod of hDispatchDriver 145 OLE_VT_BSTR to retVal
60069>>>        Function_Return retVal
60070>>>    End_Function
60071>>>
60071>>>    Function ComGetAttributeValueInt Integer llindex Returns Integer
60073>>>        Handle hDispatchDriver
60073>>>        Integer retVal
60073>>>        Get phDispatchDriver to hDispatchDriver
60074>>>        Send PrepareParams to hDispatchDriver 1
60075>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60076>>>        Get InvokeComMethod of hDispatchDriver 146 OLE_VT_I4 to retVal
60077>>>        Function_Return retVal
60078>>>    End_Function
60079>>>
60079>>>    Function ComGetBinaryContent Integer llunzipFlag Integer lldecryptFlag String llpassword Returns Variant
60081>>>        Handle hDispatchDriver
60081>>>        Variant retVal
60081>>>        Get phDispatchDriver to hDispatchDriver
60082>>>        Send PrepareParams to hDispatchDriver 3
60083>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llunzipFlag
60084>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldecryptFlag
60085>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
60086>>>        Get InvokeComMethod of hDispatchDriver 147 OLE_VT_VARIANT to retVal
60087>>>        Function_Return retVal
60088>>>    End_Function
60089>>>
60089>>>    Function ComGetChild Integer llindex Returns Variant
60091>>>        Handle hDispatchDriver
60091>>>        Variant retVal
60091>>>        Get phDispatchDriver to hDispatchDriver
60092>>>        Send PrepareParams to hDispatchDriver 1
60093>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60094>>>        Get InvokeComMethod of hDispatchDriver 148 OLE_VT_DISPATCH to retVal
60095>>>        Function_Return retVal
60096>>>    End_Function
60097>>>
60097>>>    Function ComGetChild2 Integer llindex Returns Integer
60099>>>        Handle hDispatchDriver
60099>>>        Integer retVal
60099>>>        Get phDispatchDriver to hDispatchDriver
60100>>>        Send PrepareParams to hDispatchDriver 1
60101>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60102>>>        Get InvokeComMethod of hDispatchDriver 149 OLE_VT_I4 to retVal
60103>>>        Function_Return retVal
60104>>>    End_Function
60105>>>
60105>>>    Function ComGetChildBoolValue String lltagPath Returns Integer
60107>>>        Handle hDispatchDriver
60107>>>        Integer retVal
60107>>>        Get phDispatchDriver to hDispatchDriver
60108>>>        Send PrepareParams to hDispatchDriver 1
60109>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60110>>>        Get InvokeComMethod of hDispatchDriver 150 OLE_VT_I4 to retVal
60111>>>        Function_Return retVal
60112>>>    End_Function
60113>>>
60113>>>    Function ComGetChildContent String lltagPath Returns String
60115>>>        Handle hDispatchDriver
60115>>>        String retVal
60115>>>        Get phDispatchDriver to hDispatchDriver
60116>>>        Send PrepareParams to hDispatchDriver 1
60117>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60118>>>        Get InvokeComMethod of hDispatchDriver 151 OLE_VT_BSTR to retVal
60119>>>        Function_Return retVal
60120>>>    End_Function
60121>>>
60121>>>    Function ComGetChildContentByIndex Integer llindex Returns String
60123>>>        Handle hDispatchDriver
60123>>>        String retVal
60123>>>        Get phDispatchDriver to hDispatchDriver
60124>>>        Send PrepareParams to hDispatchDriver 1
60125>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60126>>>        Get InvokeComMethod of hDispatchDriver 152 OLE_VT_BSTR to retVal
60127>>>        Function_Return retVal
60128>>>    End_Function
60129>>>
60129>>>    Function ComGetChildExact String llTag String llContent Returns Variant
60131>>>        Handle hDispatchDriver
60131>>>        Variant retVal
60131>>>        Get phDispatchDriver to hDispatchDriver
60132>>>        Send PrepareParams to hDispatchDriver 2
60133>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60134>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
60135>>>        Get InvokeComMethod of hDispatchDriver 153 OLE_VT_DISPATCH to retVal
60136>>>        Function_Return retVal
60137>>>    End_Function
60138>>>
60138>>>    Function ComGetChildIntValue String lltagPath Returns Integer
60140>>>        Handle hDispatchDriver
60140>>>        Integer retVal
60140>>>        Get phDispatchDriver to hDispatchDriver
60141>>>        Send PrepareParams to hDispatchDriver 1
60142>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60143>>>        Get InvokeComMethod of hDispatchDriver 154 OLE_VT_I4 to retVal
60144>>>        Function_Return retVal
60145>>>    End_Function
60146>>>
60146>>>    Function ComGetChildTag Integer llindex Returns String
60148>>>        Handle hDispatchDriver
60148>>>        String retVal
60148>>>        Get phDispatchDriver to hDispatchDriver
60149>>>        Send PrepareParams to hDispatchDriver 1
60150>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60151>>>        Get InvokeComMethod of hDispatchDriver 155 OLE_VT_BSTR to retVal
60152>>>        Function_Return retVal
60153>>>    End_Function
60154>>>
60154>>>    Function ComGetChildTagByIndex Integer llindex Returns String
60156>>>        Handle hDispatchDriver
60156>>>        String retVal
60156>>>        Get phDispatchDriver to hDispatchDriver
60157>>>        Send PrepareParams to hDispatchDriver 1
60158>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60159>>>        Get InvokeComMethod of hDispatchDriver 156 OLE_VT_BSTR to retVal
60160>>>        Function_Return retVal
60161>>>    End_Function
60162>>>
60162>>>    Function ComGetChildWithAttr String lltagPath String llattrName String llattrValue Returns Variant
60164>>>        Handle hDispatchDriver
60164>>>        Variant retVal
60164>>>        Get phDispatchDriver to hDispatchDriver
60165>>>        Send PrepareParams to hDispatchDriver 3
60166>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60167>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
60168>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrValue
60169>>>        Get InvokeComMethod of hDispatchDriver 157 OLE_VT_DISPATCH to retVal
60170>>>        Function_Return retVal
60171>>>    End_Function
60172>>>
60172>>>    Function ComGetChildWithContent String llContent Returns Variant
60174>>>        Handle hDispatchDriver
60174>>>        Variant retVal
60174>>>        Get phDispatchDriver to hDispatchDriver
60175>>>        Send PrepareParams to hDispatchDriver 1
60176>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
60177>>>        Get InvokeComMethod of hDispatchDriver 158 OLE_VT_DISPATCH to retVal
60178>>>        Function_Return retVal
60179>>>    End_Function
60180>>>
60180>>>    Function ComGetChildWithTag String lltagPath Returns Variant
60182>>>        Handle hDispatchDriver
60182>>>        Variant retVal
60182>>>        Get phDispatchDriver to hDispatchDriver
60183>>>        Send PrepareParams to hDispatchDriver 1
60184>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60185>>>        Get InvokeComMethod of hDispatchDriver 159 OLE_VT_DISPATCH to retVal
60186>>>        Function_Return retVal
60187>>>    End_Function
60188>>>
60188>>>    Function ComGetNthChildWithTag String llTag Integer lln Returns Variant
60190>>>        Handle hDispatchDriver
60190>>>        Variant retVal
60190>>>        Get phDispatchDriver to hDispatchDriver
60191>>>        Send PrepareParams to hDispatchDriver 2
60192>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60193>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lln
60194>>>        Get InvokeComMethod of hDispatchDriver 160 OLE_VT_DISPATCH to retVal
60195>>>        Function_Return retVal
60196>>>    End_Function
60197>>>
60197>>>    Function ComGetNthChildWithTag2 String llTag Integer lln Returns Integer
60199>>>        Handle hDispatchDriver
60199>>>        Integer retVal
60199>>>        Get phDispatchDriver to hDispatchDriver
60200>>>        Send PrepareParams to hDispatchDriver 2
60201>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60202>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lln
60203>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
60204>>>        Function_Return retVal
60205>>>    End_Function
60206>>>
60206>>>    Function ComGetParent Returns Variant
60208>>>        Handle hDispatchDriver
60208>>>        Variant retVal
60208>>>        Get phDispatchDriver to hDispatchDriver
60209>>>        Get InvokeComMethod of hDispatchDriver 162 OLE_VT_DISPATCH to retVal
60210>>>        Function_Return retVal
60211>>>    End_Function
60212>>>
60212>>>    Function ComGetParent2 Returns Integer
60214>>>        Handle hDispatchDriver
60214>>>        Integer retVal
60214>>>        Get phDispatchDriver to hDispatchDriver
60215>>>        Get InvokeComMethod of hDispatchDriver 163 OLE_VT_I4 to retVal
60216>>>        Function_Return retVal
60217>>>    End_Function
60218>>>
60218>>>    Function ComGetRoot Returns Variant
60220>>>        Handle hDispatchDriver
60220>>>        Variant retVal
60220>>>        Get phDispatchDriver to hDispatchDriver
60221>>>        Get InvokeComMethod of hDispatchDriver 164 OLE_VT_DISPATCH to retVal
60222>>>        Function_Return retVal
60223>>>    End_Function
60224>>>
60224>>>    Procedure ComGetRoot2
60226>>>        Handle hDispatchDriver
60226>>>        Get phDispatchDriver to hDispatchDriver
60227>>>        Send InvokeComMethod to hDispatchDriver 165 OLE_VT_VOID
60228>>>    End_Procedure
60229>>>
60229>>>    Function ComGetSelf Returns Variant
60231>>>        Handle hDispatchDriver
60231>>>        Variant retVal
60231>>>        Get phDispatchDriver to hDispatchDriver
60232>>>        Get InvokeComMethod of hDispatchDriver 166 OLE_VT_DISPATCH to retVal
60233>>>        Function_Return retVal
60234>>>    End_Function
60235>>>
60235>>>    Function ComGetXml Returns String
60237>>>        Handle hDispatchDriver
60237>>>        String retVal
60237>>>        Get phDispatchDriver to hDispatchDriver
60238>>>        Get InvokeComMethod of hDispatchDriver 167 OLE_VT_BSTR to retVal
60239>>>        Function_Return retVal
60240>>>    End_Function
60241>>>
60241>>>    Function ComHasAttrWithValue String llname String llvalue Returns Integer
60243>>>        Handle hDispatchDriver
60243>>>        Integer retVal
60243>>>        Get phDispatchDriver to hDispatchDriver
60244>>>        Send PrepareParams to hDispatchDriver 2
60245>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60246>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
60247>>>        Get InvokeComMethod of hDispatchDriver 168 OLE_VT_I4 to retVal
60248>>>        Function_Return retVal
60249>>>    End_Function
60250>>>
60250>>>    Function ComHasAttribute String llname Returns Integer
60252>>>        Handle hDispatchDriver
60252>>>        Integer retVal
60252>>>        Get phDispatchDriver to hDispatchDriver
60253>>>        Send PrepareParams to hDispatchDriver 1
60254>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60255>>>        Get InvokeComMethod of hDispatchDriver 169 OLE_VT_I4 to retVal
60256>>>        Function_Return retVal
60257>>>    End_Function
60258>>>
60258>>>    Function ComHasChildWithContent String llContent Returns Integer
60260>>>        Handle hDispatchDriver
60260>>>        Integer retVal
60260>>>        Get phDispatchDriver to hDispatchDriver
60261>>>        Send PrepareParams to hDispatchDriver 1
60262>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
60263>>>        Get InvokeComMethod of hDispatchDriver 170 OLE_VT_I4 to retVal
60264>>>        Function_Return retVal
60265>>>    End_Function
60266>>>
60266>>>    Function ComHasChildWithTag String lltagPath Returns Integer
60268>>>        Handle hDispatchDriver
60268>>>        Integer retVal
60268>>>        Get phDispatchDriver to hDispatchDriver
60269>>>        Send PrepareParams to hDispatchDriver 1
60270>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60271>>>        Get InvokeComMethod of hDispatchDriver 171 OLE_VT_I4 to retVal
60272>>>        Function_Return retVal
60273>>>    End_Function
60274>>>
60274>>>    Function ComHasChildWithTagAndContent String lltagPath String llContent Returns Integer
60276>>>        Handle hDispatchDriver
60276>>>        Integer retVal
60276>>>        Get phDispatchDriver to hDispatchDriver
60277>>>        Send PrepareParams to hDispatchDriver 2
60278>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60279>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
60280>>>        Get InvokeComMethod of hDispatchDriver 172 OLE_VT_I4 to retVal
60281>>>        Function_Return retVal
60282>>>    End_Function
60283>>>
60283>>>    Procedure ComInsertChildTreeAfter Integer llindex Variant lltree
60285>>>        Handle hDispatchDriver
60285>>>        Get phDispatchDriver to hDispatchDriver
60286>>>        Send PrepareParams to hDispatchDriver 2
60287>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60288>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH lltree
60289>>>        Send InvokeComMethod to hDispatchDriver 173 OLE_VT_VOID
60290>>>    End_Procedure
60291>>>
60291>>>    Procedure ComInsertChildTreeBefore Integer llindex Variant lltree
60293>>>        Handle hDispatchDriver
60293>>>        Get phDispatchDriver to hDispatchDriver
60294>>>        Send PrepareParams to hDispatchDriver 2
60295>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60296>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH lltree
60297>>>        Send InvokeComMethod to hDispatchDriver 174 OLE_VT_VOID
60298>>>    End_Procedure
60299>>>
60299>>>    Function ComLastChild Returns Variant
60301>>>        Handle hDispatchDriver
60301>>>        Variant retVal
60301>>>        Get phDispatchDriver to hDispatchDriver
60302>>>        Get InvokeComMethod of hDispatchDriver 175 OLE_VT_DISPATCH to retVal
60303>>>        Function_Return retVal
60304>>>    End_Function
60305>>>
60305>>>    Function ComLastChild2 Returns Integer
60307>>>        Handle hDispatchDriver
60307>>>        Integer retVal
60307>>>        Get phDispatchDriver to hDispatchDriver
60308>>>        Get InvokeComMethod of hDispatchDriver 176 OLE_VT_I4 to retVal
60309>>>        Function_Return retVal
60310>>>    End_Function
60311>>>
60311>>>    Function ComLoadXml String llxmlData Returns Integer
60313>>>        Handle hDispatchDriver
60313>>>        Integer retVal
60313>>>        Get phDispatchDriver to hDispatchDriver
60314>>>        Send PrepareParams to hDispatchDriver 1
60315>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llxmlData
60316>>>        Get InvokeComMethod of hDispatchDriver 177 OLE_VT_I4 to retVal
60317>>>        Function_Return retVal
60318>>>    End_Function
60319>>>
60319>>>    Function ComLoadXml2 String llxmlData Integer llautoTrim Returns Integer
60321>>>        Handle hDispatchDriver
60321>>>        Integer retVal
60321>>>        Get phDispatchDriver to hDispatchDriver
60322>>>        Send PrepareParams to hDispatchDriver 2
60323>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llxmlData
60324>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoTrim
60325>>>        Get InvokeComMethod of hDispatchDriver 178 OLE_VT_I4 to retVal
60326>>>        Function_Return retVal
60327>>>    End_Function
60328>>>
60328>>>    Function ComLoadXmlFile String llfilename Returns Integer
60330>>>        Handle hDispatchDriver
60330>>>        Integer retVal
60330>>>        Get phDispatchDriver to hDispatchDriver
60331>>>        Send PrepareParams to hDispatchDriver 1
60332>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
60333>>>        Get InvokeComMethod of hDispatchDriver 179 OLE_VT_I4 to retVal
60334>>>        Function_Return retVal
60335>>>    End_Function
60336>>>
60336>>>    Function ComLoadXmlFile2 String llfilename Integer llautoTrim Returns Integer
60338>>>        Handle hDispatchDriver
60338>>>        Integer retVal
60338>>>        Get phDispatchDriver to hDispatchDriver
60339>>>        Send PrepareParams to hDispatchDriver 2
60340>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
60341>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoTrim
60342>>>        Get InvokeComMethod of hDispatchDriver 180 OLE_VT_I4 to retVal
60343>>>        Function_Return retVal
60344>>>    End_Function
60345>>>
60345>>>    Function ComNewChild String lltagPath String llContent Returns Variant
60347>>>        Handle hDispatchDriver
60347>>>        Variant retVal
60347>>>        Get phDispatchDriver to hDispatchDriver
60348>>>        Send PrepareParams to hDispatchDriver 2
60349>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60350>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
60351>>>        Get InvokeComMethod of hDispatchDriver 181 OLE_VT_DISPATCH to retVal
60352>>>        Function_Return retVal
60353>>>    End_Function
60354>>>
60354>>>    Procedure ComNewChild2 String lltagPath String llContent
60356>>>        Handle hDispatchDriver
60356>>>        Get phDispatchDriver to hDispatchDriver
60357>>>        Send PrepareParams to hDispatchDriver 2
60358>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60359>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
60360>>>        Send InvokeComMethod to hDispatchDriver 182 OLE_VT_VOID
60361>>>    End_Procedure
60362>>>
60362>>>    Function ComNewChildAfter Integer llindex String llTag String llContent Returns Variant
60364>>>        Handle hDispatchDriver
60364>>>        Variant retVal
60364>>>        Get phDispatchDriver to hDispatchDriver
60365>>>        Send PrepareParams to hDispatchDriver 3
60366>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60367>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60368>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
60369>>>        Get InvokeComMethod of hDispatchDriver 183 OLE_VT_DISPATCH to retVal
60370>>>        Function_Return retVal
60371>>>    End_Function
60372>>>
60372>>>    Function ComNewChildBefore Integer llindex String llTag String llContent Returns Variant
60374>>>        Handle hDispatchDriver
60374>>>        Variant retVal
60374>>>        Get phDispatchDriver to hDispatchDriver
60375>>>        Send PrepareParams to hDispatchDriver 3
60376>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60377>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60378>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
60379>>>        Get InvokeComMethod of hDispatchDriver 184 OLE_VT_DISPATCH to retVal
60380>>>        Function_Return retVal
60381>>>    End_Function
60382>>>
60382>>>    Procedure ComNewChildInt2 String lltagPath Integer llvalue
60384>>>        Handle hDispatchDriver
60384>>>        Get phDispatchDriver to hDispatchDriver
60385>>>        Send PrepareParams to hDispatchDriver 2
60386>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60387>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
60388>>>        Send InvokeComMethod to hDispatchDriver 185 OLE_VT_VOID
60389>>>    End_Procedure
60390>>>
60390>>>    Function ComNextSibling Returns Variant
60392>>>        Handle hDispatchDriver
60392>>>        Variant retVal
60392>>>        Get phDispatchDriver to hDispatchDriver
60393>>>        Get InvokeComMethod of hDispatchDriver 186 OLE_VT_DISPATCH to retVal
60394>>>        Function_Return retVal
60395>>>    End_Function
60396>>>
60396>>>    Function ComNextSibling2 Returns Integer
60398>>>        Handle hDispatchDriver
60398>>>        Integer retVal
60398>>>        Get phDispatchDriver to hDispatchDriver
60399>>>        Get InvokeComMethod of hDispatchDriver 187 OLE_VT_I4 to retVal
60400>>>        Function_Return retVal
60401>>>    End_Function
60402>>>
60402>>>    Function ComNumChildrenHavingTag String llTag Returns Integer
60404>>>        Handle hDispatchDriver
60404>>>        Integer retVal
60404>>>        Get phDispatchDriver to hDispatchDriver
60405>>>        Send PrepareParams to hDispatchDriver 1
60406>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60407>>>        Get InvokeComMethod of hDispatchDriver 188 OLE_VT_I4 to retVal
60408>>>        Function_Return retVal
60409>>>    End_Function
60410>>>
60410>>>    Function ComPreviousSibling Returns Variant
60412>>>        Handle hDispatchDriver
60412>>>        Variant retVal
60412>>>        Get phDispatchDriver to hDispatchDriver
60413>>>        Get InvokeComMethod of hDispatchDriver 189 OLE_VT_DISPATCH to retVal
60414>>>        Function_Return retVal
60415>>>    End_Function
60416>>>
60416>>>    Function ComPreviousSibling2 Returns Integer
60418>>>        Handle hDispatchDriver
60418>>>        Integer retVal
60418>>>        Get phDispatchDriver to hDispatchDriver
60419>>>        Get InvokeComMethod of hDispatchDriver 190 OLE_VT_I4 to retVal
60420>>>        Function_Return retVal
60421>>>    End_Function
60422>>>
60422>>>    Function ComQEncodeContent String llcharset Variant llinData Returns Integer
60424>>>        Handle hDispatchDriver
60424>>>        Integer retVal
60424>>>        Get phDispatchDriver to hDispatchDriver
60425>>>        Send PrepareParams to hDispatchDriver 2
60426>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcharset
60427>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llinData
60428>>>        Get InvokeComMethod of hDispatchDriver 191 OLE_VT_I4 to retVal
60429>>>        Function_Return retVal
60430>>>    End_Function
60431>>>
60431>>>    Function ComRemoveAllAttributes Returns Integer
60433>>>        Handle hDispatchDriver
60433>>>        Integer retVal
60433>>>        Get phDispatchDriver to hDispatchDriver
60434>>>        Get InvokeComMethod of hDispatchDriver 192 OLE_VT_I4 to retVal
60435>>>        Function_Return retVal
60436>>>    End_Function
60437>>>
60437>>>    Procedure ComRemoveAllChildren
60439>>>        Handle hDispatchDriver
60439>>>        Get phDispatchDriver to hDispatchDriver
60440>>>        Send InvokeComMethod to hDispatchDriver 193 OLE_VT_VOID
60441>>>    End_Procedure
60442>>>
60442>>>    Function ComRemoveAttribute String llname Returns Integer
60444>>>        Handle hDispatchDriver
60444>>>        Integer retVal
60444>>>        Get phDispatchDriver to hDispatchDriver
60445>>>        Send PrepareParams to hDispatchDriver 1
60446>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llname
60447>>>        Get InvokeComMethod of hDispatchDriver 194 OLE_VT_I4 to retVal
60448>>>        Function_Return retVal
60449>>>    End_Function
60450>>>
60450>>>    Procedure ComRemoveChild String lltagPath
60452>>>        Handle hDispatchDriver
60452>>>        Get phDispatchDriver to hDispatchDriver
60453>>>        Send PrepareParams to hDispatchDriver 1
60454>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60455>>>        Send InvokeComMethod to hDispatchDriver 195 OLE_VT_VOID
60456>>>    End_Procedure
60457>>>
60457>>>    Procedure ComRemoveChildByIndex Integer llindex
60459>>>        Handle hDispatchDriver
60459>>>        Get phDispatchDriver to hDispatchDriver
60460>>>        Send PrepareParams to hDispatchDriver 1
60461>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
60462>>>        Send InvokeComMethod to hDispatchDriver 196 OLE_VT_VOID
60463>>>    End_Procedure
60464>>>
60464>>>    Procedure ComRemoveChildWithContent String llContent
60466>>>        Handle hDispatchDriver
60466>>>        Get phDispatchDriver to hDispatchDriver
60467>>>        Send PrepareParams to hDispatchDriver 1
60468>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llContent
60469>>>        Send InvokeComMethod to hDispatchDriver 197 OLE_VT_VOID
60470>>>    End_Procedure
60471>>>
60471>>>    Procedure ComRemoveFromTree
60473>>>        Handle hDispatchDriver
60473>>>        Get phDispatchDriver to hDispatchDriver
60474>>>        Send InvokeComMethod to hDispatchDriver 198 OLE_VT_VOID
60475>>>    End_Procedure
60476>>>
60476>>>    Function ComSaveBinaryContent String llfilename Integer llunzipFlag Integer lldecryptFlag String llpassword Returns Integer
60478>>>        Handle hDispatchDriver
60478>>>        Integer retVal
60478>>>        Get phDispatchDriver to hDispatchDriver
60479>>>        Send PrepareParams to hDispatchDriver 4
60480>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
60481>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llunzipFlag
60482>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldecryptFlag
60483>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
60484>>>        Get InvokeComMethod of hDispatchDriver 199 OLE_VT_I4 to retVal
60485>>>        Function_Return retVal
60486>>>    End_Function
60487>>>
60487>>>    Function ComSaveXml String llfilename Returns Integer
60489>>>        Handle hDispatchDriver
60489>>>        Integer retVal
60489>>>        Get phDispatchDriver to hDispatchDriver
60490>>>        Send PrepareParams to hDispatchDriver 1
60491>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
60492>>>        Get InvokeComMethod of hDispatchDriver 200 OLE_VT_I4 to retVal
60493>>>        Function_Return retVal
60494>>>    End_Function
60495>>>
60495>>>    Function ComSearchAllForContent Variant llafterPtr String llcontentPattern Returns Variant
60497>>>        Handle hDispatchDriver
60497>>>        Variant retVal
60497>>>        Get phDispatchDriver to hDispatchDriver
60498>>>        Send PrepareParams to hDispatchDriver 2
60499>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
60500>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
60501>>>        Get InvokeComMethod of hDispatchDriver 201 OLE_VT_DISPATCH to retVal
60502>>>        Function_Return retVal
60503>>>    End_Function
60504>>>
60504>>>    Function ComSearchAllForContent2 Variant llafterPtr String llcontentPattern Returns Integer
60506>>>        Handle hDispatchDriver
60506>>>        Integer retVal
60506>>>        Get phDispatchDriver to hDispatchDriver
60507>>>        Send PrepareParams to hDispatchDriver 2
60508>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
60509>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
60510>>>        Get InvokeComMethod of hDispatchDriver 202 OLE_VT_I4 to retVal
60511>>>        Function_Return retVal
60512>>>    End_Function
60513>>>
60513>>>    Function ComSearchForAttribute Variant llafterPtr String llTag String llattr String llvaluePattern Returns Variant
60515>>>        Handle hDispatchDriver
60515>>>        Variant retVal
60515>>>        Get phDispatchDriver to hDispatchDriver
60516>>>        Send PrepareParams to hDispatchDriver 4
60517>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
60518>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60519>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattr
60520>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvaluePattern
60521>>>        Get InvokeComMethod of hDispatchDriver 203 OLE_VT_DISPATCH to retVal
60522>>>        Function_Return retVal
60523>>>    End_Function
60524>>>
60524>>>    Function ComSearchForAttribute2 Variant llafterPtr String llTag String llattr String llvaluePattern Returns Integer
60526>>>        Handle hDispatchDriver
60526>>>        Integer retVal
60526>>>        Get phDispatchDriver to hDispatchDriver
60527>>>        Send PrepareParams to hDispatchDriver 4
60528>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
60529>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60530>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattr
60531>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvaluePattern
60532>>>        Get InvokeComMethod of hDispatchDriver 204 OLE_VT_I4 to retVal
60533>>>        Function_Return retVal
60534>>>    End_Function
60535>>>
60535>>>    Function ComSearchForContent Variant llafterPtr String llTag String llcontentPattern Returns Variant
60537>>>        Handle hDispatchDriver
60537>>>        Variant retVal
60537>>>        Get phDispatchDriver to hDispatchDriver
60538>>>        Send PrepareParams to hDispatchDriver 3
60539>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
60540>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60541>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
60542>>>        Get InvokeComMethod of hDispatchDriver 205 OLE_VT_DISPATCH to retVal
60543>>>        Function_Return retVal
60544>>>    End_Function
60545>>>
60545>>>    Function ComSearchForContent2 Variant llafterPtr String llTag String llcontentPattern Returns Integer
60547>>>        Handle hDispatchDriver
60547>>>        Integer retVal
60547>>>        Get phDispatchDriver to hDispatchDriver
60548>>>        Send PrepareParams to hDispatchDriver 3
60549>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
60550>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60551>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llcontentPattern
60552>>>        Get InvokeComMethod of hDispatchDriver 206 OLE_VT_I4 to retVal
60553>>>        Function_Return retVal
60554>>>    End_Function
60555>>>
60555>>>    Function ComSearchForTag Variant llafterPtr String llTag Returns Variant
60557>>>        Handle hDispatchDriver
60557>>>        Variant retVal
60557>>>        Get phDispatchDriver to hDispatchDriver
60558>>>        Send PrepareParams to hDispatchDriver 2
60559>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
60560>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60561>>>        Get InvokeComMethod of hDispatchDriver 207 OLE_VT_DISPATCH to retVal
60562>>>        Function_Return retVal
60563>>>    End_Function
60564>>>
60564>>>    Function ComSearchForTag2 Variant llafterPtr String llTag Returns Integer
60566>>>        Handle hDispatchDriver
60566>>>        Integer retVal
60566>>>        Get phDispatchDriver to hDispatchDriver
60567>>>        Send PrepareParams to hDispatchDriver 2
60568>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llafterPtr
60569>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60570>>>        Get InvokeComMethod of hDispatchDriver 208 OLE_VT_I4 to retVal
60571>>>        Function_Return retVal
60572>>>    End_Function
60573>>>
60573>>>    Function ComSetBinaryContent Variant llinData Integer llzipFlag Integer llencryptFlag String llpassword Returns Integer
60575>>>        Handle hDispatchDriver
60575>>>        Integer retVal
60575>>>        Get phDispatchDriver to hDispatchDriver
60576>>>        Send PrepareParams to hDispatchDriver 4
60577>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llinData
60578>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llzipFlag
60579>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llencryptFlag
60580>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
60581>>>        Get InvokeComMethod of hDispatchDriver 209 OLE_VT_I4 to retVal
60582>>>        Function_Return retVal
60583>>>    End_Function
60584>>>
60584>>>    Function ComSetBinaryContentFromFile String llfilename Integer llzipFlag Integer llencryptFlag String llpassword Returns Integer
60586>>>        Handle hDispatchDriver
60586>>>        Integer retVal
60586>>>        Get phDispatchDriver to hDispatchDriver
60587>>>        Send PrepareParams to hDispatchDriver 4
60588>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llfilename
60589>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llzipFlag
60590>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llencryptFlag
60591>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpassword
60592>>>        Get InvokeComMethod of hDispatchDriver 210 OLE_VT_I4 to retVal
60593>>>        Function_Return retVal
60594>>>    End_Function
60595>>>
60595>>>    Procedure ComSortByAttribute String llattrName Integer llascending
60597>>>        Handle hDispatchDriver
60597>>>        Get phDispatchDriver to hDispatchDriver
60598>>>        Send PrepareParams to hDispatchDriver 2
60599>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
60600>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
60601>>>        Send InvokeComMethod to hDispatchDriver 211 OLE_VT_VOID
60602>>>    End_Procedure
60603>>>
60603>>>    Procedure ComSortByAttributeInt String llattrName Integer llascending
60605>>>        Handle hDispatchDriver
60605>>>        Get phDispatchDriver to hDispatchDriver
60606>>>        Send PrepareParams to hDispatchDriver 2
60607>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
60608>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
60609>>>        Send InvokeComMethod to hDispatchDriver 212 OLE_VT_VOID
60610>>>    End_Procedure
60611>>>
60611>>>    Procedure ComSortByContent Integer llascending
60613>>>        Handle hDispatchDriver
60613>>>        Get phDispatchDriver to hDispatchDriver
60614>>>        Send PrepareParams to hDispatchDriver 1
60615>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
60616>>>        Send InvokeComMethod to hDispatchDriver 213 OLE_VT_VOID
60617>>>    End_Procedure
60618>>>
60618>>>    Procedure ComSortByTag Integer llascending
60620>>>        Handle hDispatchDriver
60620>>>        Get phDispatchDriver to hDispatchDriver
60621>>>        Send PrepareParams to hDispatchDriver 1
60622>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
60623>>>        Send InvokeComMethod to hDispatchDriver 214 OLE_VT_VOID
60624>>>    End_Procedure
60625>>>
60625>>>    Procedure ComSortRecordsByAttribute String llsortTag String llattrName Integer llascending
60627>>>        Handle hDispatchDriver
60627>>>        Get phDispatchDriver to hDispatchDriver
60628>>>        Send PrepareParams to hDispatchDriver 3
60629>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsortTag
60630>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
60631>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
60632>>>        Send InvokeComMethod to hDispatchDriver 215 OLE_VT_VOID
60633>>>    End_Procedure
60634>>>
60634>>>    Procedure ComSortRecordsByContent String llsortTag Integer llascending
60636>>>        Handle hDispatchDriver
60636>>>        Get phDispatchDriver to hDispatchDriver
60637>>>        Send PrepareParams to hDispatchDriver 2
60638>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsortTag
60639>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
60640>>>        Send InvokeComMethod to hDispatchDriver 216 OLE_VT_VOID
60641>>>    End_Procedure
60642>>>
60642>>>    Procedure ComSortRecordsByContentInt String llsortTag Integer llascending
60644>>>        Handle hDispatchDriver
60644>>>        Get phDispatchDriver to hDispatchDriver
60645>>>        Send PrepareParams to hDispatchDriver 2
60646>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsortTag
60647>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llascending
60648>>>        Send InvokeComMethod to hDispatchDriver 217 OLE_VT_VOID
60649>>>    End_Procedure
60650>>>
60650>>>    Function ComSwapNode Variant llnode Returns Integer
60652>>>        Handle hDispatchDriver
60652>>>        Integer retVal
60652>>>        Get phDispatchDriver to hDispatchDriver
60653>>>        Send PrepareParams to hDispatchDriver 1
60654>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llnode
60655>>>        Get InvokeComMethod of hDispatchDriver 218 OLE_VT_I4 to retVal
60656>>>        Function_Return retVal
60657>>>    End_Function
60658>>>
60658>>>    Function ComSwapTree Variant lltree Returns Integer
60660>>>        Handle hDispatchDriver
60660>>>        Integer retVal
60660>>>        Get phDispatchDriver to hDispatchDriver
60661>>>        Send PrepareParams to hDispatchDriver 1
60662>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH lltree
60663>>>        Get InvokeComMethod of hDispatchDriver 219 OLE_VT_I4 to retVal
60664>>>        Function_Return retVal
60665>>>    End_Function
60666>>>
60666>>>    Function ComTagContent String lltagName Returns String
60668>>>        Handle hDispatchDriver
60668>>>        String retVal
60668>>>        Get phDispatchDriver to hDispatchDriver
60669>>>        Send PrepareParams to hDispatchDriver 1
60670>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagName
60671>>>        Get InvokeComMethod of hDispatchDriver 220 OLE_VT_BSTR to retVal
60672>>>        Function_Return retVal
60673>>>    End_Function
60674>>>
60674>>>    Function ComTagEquals String llTag Returns Integer
60676>>>        Handle hDispatchDriver
60676>>>        Integer retVal
60676>>>        Get phDispatchDriver to hDispatchDriver
60677>>>        Send PrepareParams to hDispatchDriver 1
60678>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llTag
60679>>>        Get InvokeComMethod of hDispatchDriver 221 OLE_VT_I4 to retVal
60680>>>        Function_Return retVal
60681>>>    End_Function
60682>>>
60682>>>    Function ComUnzipContent Returns Integer
60684>>>        Handle hDispatchDriver
60684>>>        Integer retVal
60684>>>        Get phDispatchDriver to hDispatchDriver
60685>>>        Get InvokeComMethod of hDispatchDriver 222 OLE_VT_I4 to retVal
60686>>>        Function_Return retVal
60687>>>    End_Function
60688>>>
60688>>>    Function ComUnzipTree Returns Integer
60690>>>        Handle hDispatchDriver
60690>>>        Integer retVal
60690>>>        Get phDispatchDriver to hDispatchDriver
60691>>>        Get InvokeComMethod of hDispatchDriver 223 OLE_VT_I4 to retVal
60692>>>        Function_Return retVal
60693>>>    End_Function
60694>>>
60694>>>    Function ComUpdateAttribute String llattrName String llattrValue Returns Integer
60696>>>        Handle hDispatchDriver
60696>>>        Integer retVal
60696>>>        Get phDispatchDriver to hDispatchDriver
60697>>>        Send PrepareParams to hDispatchDriver 2
60698>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
60699>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrValue
60700>>>        Get InvokeComMethod of hDispatchDriver 224 OLE_VT_I4 to retVal
60701>>>        Function_Return retVal
60702>>>    End_Function
60703>>>
60703>>>    Function ComUpdateAttributeInt String llattrName Integer llvalue Returns Integer
60705>>>        Handle hDispatchDriver
60705>>>        Integer retVal
60705>>>        Get phDispatchDriver to hDispatchDriver
60706>>>        Send PrepareParams to hDispatchDriver 2
60707>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
60708>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
60709>>>        Get InvokeComMethod of hDispatchDriver 225 OLE_VT_I4 to retVal
60710>>>        Function_Return retVal
60711>>>    End_Function
60712>>>
60712>>>    Procedure ComUpdateChildContent String lltagPath String llvalue
60714>>>        Handle hDispatchDriver
60714>>>        Get phDispatchDriver to hDispatchDriver
60715>>>        Send PrepareParams to hDispatchDriver 2
60716>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60717>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
60718>>>        Send InvokeComMethod to hDispatchDriver 226 OLE_VT_VOID
60719>>>    End_Procedure
60720>>>
60720>>>    Procedure ComUpdateChildContentInt String lltagPath Integer llvalue
60722>>>        Handle hDispatchDriver
60722>>>        Get phDispatchDriver to hDispatchDriver
60723>>>        Send PrepareParams to hDispatchDriver 2
60724>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60725>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llvalue
60726>>>        Send InvokeComMethod to hDispatchDriver 227 OLE_VT_VOID
60727>>>    End_Procedure
60728>>>
60728>>>    Function ComZipContent Returns Integer
60730>>>        Handle hDispatchDriver
60730>>>        Integer retVal
60730>>>        Get phDispatchDriver to hDispatchDriver
60731>>>        Get InvokeComMethod of hDispatchDriver 228 OLE_VT_I4 to retVal
60732>>>        Function_Return retVal
60733>>>    End_Function
60734>>>
60734>>>    Function ComZipTree Returns Integer
60736>>>        Handle hDispatchDriver
60736>>>        Integer retVal
60736>>>        Get phDispatchDriver to hDispatchDriver
60737>>>        Get InvokeComMethod of hDispatchDriver 229 OLE_VT_I4 to retVal
60738>>>        Function_Return retVal
60739>>>    End_Function
60740>>>
60740>>>    Function ComEmitBom Returns Integer
60742>>>        Handle hDispatchDriver
60742>>>        Integer retVal
60742>>>        Get phDispatchDriver to hDispatchDriver
60743>>>        Get InvokeComMethod of hDispatchDriver 237 OLE_VT_I4 to retVal
60744>>>        Function_Return retVal
60745>>>    End_Function
60746>>>
60746>>>    Procedure Set ComEmitBom Integer value
60748>>>        Handle hDispatchDriver
60748>>>        Get phDispatchDriver to hDispatchDriver
60749>>>        Send PrepareParams to hDispatchDriver 1
60750>>>        Set ComProperty of hDispatchDriver 237 OLE_VT_I4 to value
60751>>>    End_Procedure
60752>>>
60752>>>    Function ComLoadSb Variant llsb Integer llautoTrim Returns Integer
60754>>>        Handle hDispatchDriver
60754>>>        Integer retVal
60754>>>        Get phDispatchDriver to hDispatchDriver
60755>>>        Send PrepareParams to hDispatchDriver 2
60756>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llsb
60757>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoTrim
60758>>>        Get InvokeComMethod of hDispatchDriver 238 OLE_VT_I4 to retVal
60759>>>        Function_Return retVal
60760>>>    End_Function
60761>>>
60761>>>    Function ComGetXmlSb Variant llsb Returns Integer
60763>>>        Handle hDispatchDriver
60763>>>        Integer retVal
60763>>>        Get phDispatchDriver to hDispatchDriver
60764>>>        Send PrepareParams to hDispatchDriver 1
60765>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llsb
60766>>>        Get InvokeComMethod of hDispatchDriver 239 OLE_VT_I4 to retVal
60767>>>        Function_Return retVal
60768>>>    End_Function
60769>>>
60769>>>    Function ComI Returns Integer
60771>>>        Handle hDispatchDriver
60771>>>        Integer retVal
60771>>>        Get phDispatchDriver to hDispatchDriver
60772>>>        Get InvokeComMethod of hDispatchDriver 240 OLE_VT_I4 to retVal
60773>>>        Function_Return retVal
60774>>>    End_Function
60775>>>
60775>>>    Procedure Set ComI Integer value
60777>>>        Handle hDispatchDriver
60777>>>        Get phDispatchDriver to hDispatchDriver
60778>>>        Send PrepareParams to hDispatchDriver 1
60779>>>        Set ComProperty of hDispatchDriver 240 OLE_VT_I4 to value
60780>>>    End_Procedure
60781>>>
60781>>>    Function ComJ Returns Integer
60783>>>        Handle hDispatchDriver
60783>>>        Integer retVal
60783>>>        Get phDispatchDriver to hDispatchDriver
60784>>>        Get InvokeComMethod of hDispatchDriver 241 OLE_VT_I4 to retVal
60785>>>        Function_Return retVal
60786>>>    End_Function
60787>>>
60787>>>    Procedure Set ComJ Integer value
60789>>>        Handle hDispatchDriver
60789>>>        Get phDispatchDriver to hDispatchDriver
60790>>>        Send PrepareParams to hDispatchDriver 1
60791>>>        Set ComProperty of hDispatchDriver 241 OLE_VT_I4 to value
60792>>>    End_Procedure
60793>>>
60793>>>    Function ComK Returns Integer
60795>>>        Handle hDispatchDriver
60795>>>        Integer retVal
60795>>>        Get phDispatchDriver to hDispatchDriver
60796>>>        Get InvokeComMethod of hDispatchDriver 242 OLE_VT_I4 to retVal
60797>>>        Function_Return retVal
60798>>>    End_Function
60799>>>
60799>>>    Procedure Set ComK Integer value
60801>>>        Handle hDispatchDriver
60801>>>        Get phDispatchDriver to hDispatchDriver
60802>>>        Send PrepareParams to hDispatchDriver 1
60803>>>        Set ComProperty of hDispatchDriver 242 OLE_VT_I4 to value
60804>>>    End_Procedure
60805>>>
60805>>>    Function ComNumChildrenAt String lltagPath Returns Integer
60807>>>        Handle hDispatchDriver
60807>>>        Integer retVal
60807>>>        Get phDispatchDriver to hDispatchDriver
60808>>>        Send PrepareParams to hDispatchDriver 1
60809>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60810>>>        Get InvokeComMethod of hDispatchDriver 243 OLE_VT_I4 to retVal
60811>>>        Function_Return retVal
60812>>>    End_Function
60813>>>
60813>>>    Function ComUpdateAt String lltagPath Integer llautoCreate String llvalue Returns Integer
60815>>>        Handle hDispatchDriver
60815>>>        Integer retVal
60815>>>        Get phDispatchDriver to hDispatchDriver
60816>>>        Send PrepareParams to hDispatchDriver 3
60817>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60818>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoCreate
60819>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llvalue
60820>>>        Get InvokeComMethod of hDispatchDriver 244 OLE_VT_I4 to retVal
60821>>>        Function_Return retVal
60822>>>    End_Function
60823>>>
60823>>>    Function ComUpdateAttrAt String lltagPath Integer llautoCreate String llattrName String llattrValue Returns Integer
60825>>>        Handle hDispatchDriver
60825>>>        Integer retVal
60825>>>        Get phDispatchDriver to hDispatchDriver
60826>>>        Send PrepareParams to hDispatchDriver 4
60827>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR lltagPath
60828>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llautoCreate
60829>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrName
60830>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llattrValue
60831>>>        Get InvokeComMethod of hDispatchDriver 245 OLE_VT_I4 to retVal
60832>>>        Function_Return retVal
60833>>>    End_Function
60834>>>
60834>>>    Function ComEmitCompact Returns Integer
60836>>>        Handle hDispatchDriver
60836>>>        Integer retVal
60836>>>        Get phDispatchDriver to hDispatchDriver
60837>>>        Get InvokeComMethod of hDispatchDriver 246 OLE_VT_I4 to retVal
60838>>>        Function_Return retVal
60839>>>    End_Function
60840>>>
60840>>>    Procedure Set ComEmitCompact Integer value
60842>>>        Handle hDispatchDriver
60842>>>        Get phDispatchDriver to hDispatchDriver
60843>>>        Send PrepareParams to hDispatchDriver 1
60844>>>        Set ComProperty of hDispatchDriver 246 OLE_VT_I4 to value
60845>>>    End_Procedure
60846>>>End_Class
60847>>>
60847>>>// CoClass
60847>>>// ProgID: Chilkat_9_5_0.Xml.1
60847>>>// CLSID: {501B9600-382D-454D-AA0A-3BC22A87C485}
60847>>>// ChilkatXml Class 9.5.0
60847>>>Class cComChilkatXml is a cComActiveXControl
60848>>>    Import_Class_Protocol cComIChilkatXml
60849>>>
60849>>>    Procedure Construct_Object
60851>>>        Forward Send Construct_Object
60853>>>        Set psProgID to "{501B9600-382D-454D-AA0A-3BC22A87C485}"
60854>>>        Set peAutoCreate to acAutoCreate
60855>>>    End_Procedure
60856>>>End_Class
60857>
60857>Object oApplication is a cApplication
60859>    Set psCompany to "RDC Tools International"
60860>    Set psProduct to "Driver Info Import"
60861>    Set psProgram to "Read DF Driver Def XML file"
60862>    Set psVersion to "2023"
60863>    Property String psCompileDateAndTime
60865>End_Object
60866>
60866>Object oMainPanel is a BasicPanel
60868>    Set Location to 59 173
60869>    Set Size to 180 394
60870>    Set piMinSize to 180 394
60871>    Set Border_Style to Border_Thick
60872>    Set Locate_Mode to Center_On_Screen
60873>    Set Label to "Read DF Driver Def XML file - Internal Usage Only!"
60874>    Set Maximize_Icon to False
60875>    Set peNeighborhood to nhPublic
60876>    
60876>    // Struct array to keep driver XML file Data Types read by the ReadXMLDriverData message.
60876>    // Then used by the WriteXMLDriverTypeData message to write them to file.
60876>    Property tColumnType[] paColumnType
60878>
60878>    Object oCommandBarSystem is a cCJCommandBarSystem
60880>        Set pbAutoResizeIcons to True
60881>        Move Self to ghoCommandBars
60882>    End_Object                  
60883>    
60883>    Object oDbUpdateFunctionLibrary is a cDbUpdateFunctionLibrary
60885>    End_Object
60886>
60886>    Object oReadXMLFile_grp is a cRDCHeaderGroup
60888>        Set Size to 67 360
60889>        Set Location to 11 17
60890>        Set peAnchors to anTopLeftRight
60891>        Set psLabel to "Read Driver Def XML file" 
60892>        Set psImage to "ActionOpen1.ico"
60893>
60893>        Object oFileNameDialog is a OpenDialog
60895>            Set Dialog_Caption to "Select a Driver XML-file"
60896>            Set Filter_String to "XML Files (.xml)|*.xml|All files (*.*)|*.*"
60897>        End_Object
60898>
60898>        Object oDriverXMLFileName_fm is a Form
60900>            Set Size to 13 298
60901>            Set Location to 20 43
60902>//            Set Label to "XML Driver Filename to Read:"
60902>            Set Label_Justification_Mode to JMode_Top
60903>            Set Label_Col_Offset to 0
60904>            Set Prompt_Button_Mode to PB_PromptOn
60905>            Set peAnchors to anTopLeftRight
60906>            Set Label_Row_Offset to 1
60907>
60907>            Procedure Prompt
60910>                Boolean bOk
60910>                String sPath sDrive sFileName
60910>
60910>                Get Value to sFileName
60911>                Move (Trim (sFileName)) to sFileName
60912>                If (sFileName <> "") Begin
60914>                    Move (Left(sFileName, 2))     to sDrive
60915>                    Get ParseFolderName sFileName to sPath
60916>//                    Get Parse_Drive sFileName to sDrive
60916>//                    Get Parse_Path  sFileName to sPath
60916>                End
60916>                If (sPath <> "") Begin
60918>                    Set Initial_Folder of oFileNameDialog to (sDrive - sPath)
60919>                End
60919>
60919>                Get Show_Dialog of oFileNameDialog to bOk
60920>                If (bOk) Begin
60922>                    Get File_Name of oFileNameDialog to sFileName
60923>                    Set Value to sFileName
60924>                End
60924>            End_Procedure 
60925>            
60925>            Procedure OnChange
60928>                String sValue
60928>                
60928>                Get Value to sValue
60929>                If (sValue <> "") Begin
60931>                    Set psOutputFileName of oOutputFilename_fm to sValue
60932>                    
60932>                End
60932>            End_Procedure
60933>
60933>            Procedure OnStartUp
60936>                String sBinPath sXMLFileName
60936>
60936>                Get DFBinPath of ghoApplication to sBinPath
60937>                Move "\MSSQLDRV_DriverDef.xml" to sXMLFileName
60938>                Set Value to (sBinPath + sXMLFileName) 
60939>                
60939>                Set Value of oDriverID_cf to "MSSQLDRV_ID"
60940>                Set Value of oDbType_cf   to "EN_dbTypeMSSQL"
60941>
60941>            End_Procedure
60942>
60942>        End_Object
60943>
60943>        Object oDbType_cf is a cSQLComboForm
60945>            Set Size to 11 100
60946>            Set Location to 45 43
60947>            Set Label_Col_Offset to 0
60948>            Set Label to "DbType:"
60949>            Set Label_Justification_Mode to JMode_Top
60950>            Set Label_Row_Offset to 1
60951>            Set Label to "Database Type"
60952>            Set Entry_State to False
60953>            Set Combo_Sort_State to False
60954>            Set piItem to 3
60955>
60955>            Procedure Combo_Fill_List
60958>                Send Combo_Add_Item CS_dbTypeMSSQL
60959>                Send Combo_Add_Item CS_dbTypeMySQL
60960>                Send Combo_Add_Item CS_dbTypeOracle
60961>                Send Combo_Add_Item CS_dbTypeDB2
60962>                Send Combo_Add_Item CS_dbTypePostgre
60963>            End_Procedure
60964>
60964>            Procedure OnChange
60967>                Integer iDbType
60967>    
60967>                Get SelectedDbType to iDbType
60968>                Send Refill_Comboform of oDriverID_cf iDbType
60969>            End_Procedure
60970>    
60970>            Function SelectedDbType Returns Integer
60973>                Integer iRetval
60973>                String sDbType
60973>    
60973>                Get Value to sDbType
60974>                Get SqlUtilDbTypeToInteger of ghoDbUpdateFunctionLibrary sDbType to iRetval
60975>    
60975>                Function_Return iRetval
60976>            End_Function
60977>
60977>        End_Object
60978>
60978>        Object oDriverID_cf is a cSQLComboForm
60980>            Set Size to 11 100
60981>            Set Location to 45 150
60982>            Set Label_Justification_Mode to JMode_Top
60983>            Set Label_Col_Offset to 0
60984>            Set Label_Row_Offset to 1
60985>            Set Label to "Driver ID:"
60986>            Set Entry_State to False
60987>            Set Combo_Sort_State to False
60988>            Set piItem to 4
60989>
60989>            Procedure Refill_Comboform Integer iDbType
60992>                String sValue
60992>                Send Combo_Delete_Data
60993>                Case Begin
60993>                    Case (iDbType = EN_dbTypeMSSQL)
60995>                        Send Combo_Add_Item MSSQLDRV_ID
60996>                        Move MSSQLDRV_ID to sValue
60997>                        Case Break
60998>                    Case (iDbType = EN_dbTypeMySQL)
61001>                        Send Combo_Add_Item ODBC_DRV_ID
61002>                        Move ODBC_DRV_ID to sValue
61003>                        Case Break
61004>                    Case (iDbType = EN_dbTypeOracle)
61007>                        Send Combo_Add_Item ODBC_DRV_ID
61008>                        Move ODBC_DRV_ID to sValue
61009>                        Case Break
61010>                    Case (iDbType = EN_dbTypeDB2)
61013>                        Send Combo_Add_Item DB2_DRV_ID
61014>                        Move DB2_DRV_ID to sValue
61015>                        Case Break
61016>                    Case (iDbType = EN_dbTypePostgre)
61019>                        Send Combo_Add_Item ODBC_DRV_ID
61020>                        Move ODBC_DRV_ID to sValue
61021>                        Case Break
61022>                    Case Else
61022>                        Send Combo_Add_Item DATAFLEX_ID
61023>                        Move DATAFLEX_ID to sValue
61024>                Case End
61024>                Set Value to sValue
61025>            End_Procedure
61026>
61026>            Procedure OnChange
61029>                String sDriverID
61029>                Integer iDbType iPos
61029>
61029>                Get Value to sDriverID
61030>                Move (Pos("-", sDriverID)) to iPos
61031>                Move (Left(sDriverID, (iPos - 2))) to sDriverID
61032>                If (sDriverID = "") Begin
61034>                    Move MSSQLDRV_ID to sDriverID
61035>                End
61035>                Get SelectedDbType of oDbType_cf to iDbType
61036>            End_Procedure 
61037>            
61037>        End_Object
61038>
61038>        Object oOpenInEditor_btn is a Button
61040>            Set Size to 12 77
61041>            Set Location to 45 265
61042>            Set Label to "View in Editor"
61043>            Set peAnchors to anBottomRight
61044>
61044>            Procedure OnClick
61047>                String sFileName             
61047>                Boolean bExists
61047>                
61047>                Get Value of oDriverXMLFileName_fm to sFileName
61048>                Get vFilePathExists sFileName to bExists
61049>                If (bExists = False) Begin
61051>                    Send Info_Box "File doesn't exist"
61052>                    Procedure_Return
61053>                End
61053>                Runprogram Shell Background sFileName
61054>            End_Procedure
61055>
61055>        End_Object
61056>         
61056>    End_Object
61057>
61057>    Object oWriteResult_grp is a cRDCHeaderGroup
61059>        Set Size to 67 360
61060>        Set Location to 87 17
61061>        Set peAnchors to anTopLeftRight
61062>        Set psLabel to "Write Driver Data Types to Package Name:"
61063>        Set psImage to "ActionPrint1.ico"
61064>        
61064>        Object oOutputFilename_fm is a Form
61066>            Set Size to 13 298
61067>            Set Location to 20 43
61068>//            Set Label to "Output Package File Name:"
61068>            Set Label_Justification_Mode to JMode_Top
61069>            Set Label_Col_Offset to 0
61070>            Set Prompt_Button_Mode to PB_PromptOn
61071>            Set peAnchors to anTopLeftRight
61072>            Set Label_Row_Offset to 1
61073>
61073>            Procedure Prompt
61076>                String sFileName sPath sFileMask sRetval
61076>
61076>                Get Value to sFileName
61077>                Get ParseFolderName sFileName to sPath
61078>                Move "Include files (*.inc)|*.inc|Package files (*.pkg)|*.pkg" to sFileMask
61079>                Get vSelect_File sFileMask "Please enter a file name" sPath to sRetval
61080>                If (sRetval <> "") Begin
61082>                    Set Value to sRetval
61083>                End
61083>            End_Procedure
61084>
61084>            Procedure Set psOutputFileName String sXMLFileName
61087>                String sOutPutFileName sPath sExt
61087>                
61087>                Get psAppSrcPath of (phoWorkspace(ghoApplication)) to sPath
61088>                Get ParseFileName sXMLFileName to sOutPutFileName
61089>                Get ParseFileExtension sOutPutFileName to sExt
61090>                // We default to set the extension to an include file (.inc):
61090>                Move (Replace(sExt, sOutPutFileName, "inc")) to sOutPutFileName
61091>                Set Value to (sPath + "\" + sOutPutFileName)
61092>
61092>            End_Procedure
61093>
61093>        End_Object
61094>
61094>        Object oOpenInEditor_btn is a Button
61096>            Set Size to 12 77
61097>            Set Location to 45 265
61098>            Set Label to "View in Editor"
61099>            Set peAnchors to anBottomRight
61100>
61100>            Procedure OnClick
61103>                String sFileName             
61103>                Boolean bExists
61103>                
61103>                Get Value of oOutputFilename_fm to sFileName
61104>                Get vFilePathExists sFileName to bExists
61105>                If (bExists = False) Begin
61107>                    Send Info_Box "File doesn't exist"
61108>                    Procedure_Return
61109>                End
61109>                Runprogram Shell Background sFileName
61110>            End_Procedure
61111>        End_Object
61112>
61112>    End_Object
61113>
61113>    Object oReadButton is a Button
61115>        Set Size to 14 50
61116>        Set Location to 160 222
61117>        Set Label to "Read"
61118>        Set peAnchors to anBottomRight
61119>        Set Default_State to True
61120>
61120>        Procedure OnClick
61123>            String sFileName
61123>            Boolean bExists
61123>            
61123>            Get Value of oDriverXMLFileName_fm to sFileName
61124>            Get vFilePathExists sFileName to bExists
61125>            If (bExists = False) Begin
61127>                Procedure_Return
61128>            End
61128>
61128>            Send ReadXMLDriverData sFileName
61129>        End_Procedure
61130>
61130>    End_Object
61131>
61131>    Object oWriteButton is a Button
61133>        Set Size to 14 50
61134>        Set Location to 160 275
61135>        Set Label to "Write"
61136>        Set peAnchors to anBottomRight
61137>
61137>        Procedure OnClick
61140>            tColumnType[] aColumnType
61140>            tColumnType[] aColumnType
61141>            String sFileName sDriverXMLFile 
61141>            Boolean bExists          
61141>            
61141>            Get paColumnType to aColumnType
61142>            If (SizeOfArray(aColumnType) = 0) Begin
61144>                Send Info_Box "You need to read an XML driver file successfully first."
61145>                Procedure_Return
61146>            End
61146>            
61146>            Get Value of oDriverXMLFileName_fm to sDriverXMLFile
61147>            Get Value of oOutputFilename_fm to sFileName
61148>            If (sFileName = "") Begin
61150>                Send Info_Box "You need to specify an output file name first."
61151>                Procedure_Return
61152>            End
61152>            
61152>            Send WriteXMLDriverTypeData sFileName sDriverXMLFile aColumnType
61153>        End_Procedure
61154>
61154>    End_Object
61155>
61155>    Object oCloseButton is a Button
61157>        Set Size to 14 50
61158>        Set Location to 160 328
61159>        Set Label to "Exit"
61160>        Set peAnchors to anBottomRight
61161>
61161>        Procedure OnClick
61164>            Send Exit_Application
61165>        End_Procedure
61166>    End_Object
61167>
61167>    Procedure ReadXMLDriverData String sFileName
61170>        DateTime dtExecStart dtExecEnd
61170>        TimeSpan tsTotalTime
61170>        Handle hoXML hoRoot hoList hoBeginAfter hoName hoNextSibling
61170>        Integer iItems i iCount
61170>        Boolean bOK bExists
61170>        String  sNamespace sValue sError
61170>        Variant vRoot vChild vList vBeginAfter vName vNextSibling
61170>        tColumnType[] aColumnType
61170>        tColumnType[] aColumnType
61171>
61171>        Move (CurrentDateTime()) to dtExecStart
61172>        Set paColumnType to aColumnType
61173>
61173>        Get Create (RefClass(cComChilkatXml)) to hoXML
61174>        If (not(IsComObjectCreated(hoXml))) Begin
61176>            Send CreateComObject of hoXml
61177>        End
61177>
61177>        Get ComLoadXmlFile of hoXml sFileName to bOK
61178>        If (bOK <> True) Begin
61180>            Get ComLastErrorText of hoXML to sError
61181>            Send Info_Box ("Sorry, couldn't load the XML file. Error:\n" + sError)
61182>            Procedure_Return
61183>        End
61183>
61183>        Get ComGetSelf of hoXML to vBeginAfter
61184>        If (IsComObject(vBeginAfter)) Begin
61186>            Get Create (RefClass(cComChilkatXml)) to hoBeginAfter
61187>            Set pvComObject of hoBeginAfter to vBeginAfter
61188>        End
61188>
61188>        Get ComSearchForContent of hoXML vBeginAfter "name" "df_field_native_type" to vName
61189>        If (IsComObject(vName)) Begin
61191>            Get Create (RefClass(cComChilkatXml)) to hoName
61192>            Set pvComObject of hoName to vName
61193>        End
61193>        If (IsNullComObject(vName)) Begin
61195>            Send Info_Box 'The tag "df_field_native_type" not found. It is needed to enumerate data types.'
61196>            Procedure_Return
61197>        End
61197>        
61197>        // Get the parent object, from where we can continue searching:
61197>        Get ComGetParent of hoName to vRoot
61198>        If (IsComObject(vRoot)) Begin
61200>            Get Create (RefClass(cComChilkatXml)) to hoRoot
61201>            Set pvComObject of hoRoot to vRoot
61202>        End
61202>        
61202>        // Set baseline at parent level:
61202>        Get ComGetSelf of hoRoot to vBeginAfter
61203>        If (IsComObject(vBeginAfter)) Begin
61205>            Get Create (RefClass(cComChilkatXml)) to hoBeginAfter
61206>            Set pvComObject of hoBeginAfter to vBeginAfter
61207>        End
61207>
61207>        //  Navigate to the enumValues node:
61207>        Get ComSearchForTag of hoRoot vBeginAfter "enumValues" to vList
61208>        If (IsComObject(vList)) Begin
61210>            Get Create (RefClass(cComChilkatXml)) to hoList
61211>            Set pvComObject of hoList to vList
61212>        End
61212>        
61212>        // Set baseline at enum values start object:
61212>        Get ComGetSelf of hoList to vBeginAfter
61213>        If (IsComObject(vBeginAfter)) Begin
61215>            Get Create (RefClass(cComChilkatXml)) to hoBeginAfter
61216>            Set pvComObject of hoBeginAfter to vBeginAfter
61217>        End
61217>        
61217>        // Find the first "enumValue" enumeration:
61217>        Get ComNumChildren of hoList to iItems
61218>        Get ComSearchForTag2 of hoList vBeginAfter "enumValue" to bExists
61219>        If (bExists = False) Begin
61221>            Send Info_Box 'No "enumValue" found (!). Nothing to enumerate.'
61222>            Procedure_Return
61223>        End
61223>
61223>        Decrement iItems
61224>        For iCount from 0 to iItems
61230>            Send CollectDriverAttributes hoList
61231>
61231>            Get ComNextSibling of hoList to vNextSibling
61232>            If (IsComObject(vNextSibling)) Begin
61234>                Get Create (RefClass(cComChilkatXml)) to hoNextSibling
61235>                Set pvComObject of hoNextSibling to vNextSibling
61236>            End
61236>            Send Destroy of hoList
61237>            Move hoNextSibling to hoList
61238>        Loop
61239>
61239>        Send Destroy of hoRoot
61240>        Send Destroy of hoXML
61241>
61241>        Move (CurrentDateTime()) to dtExecEnd
61242>        Move (dtExecEnd - dtExecStart) to tsTotalTime
61243>        Send Info_Box ("Ready! Total Time:" * String(tsTotalTime))
61244>    End_Procedure
61245>
61245>    Procedure CollectDriverAttributes Handle hoDriverAttribute
61248>        tColumnType ColumnType
61248>        tColumnType ColumnType
61248>        tColumnType[] aColumnType
61248>        tColumnType[] aColumnType
61249>        Handle hoChild
61249>        Variant vChild
61249>
61249>        // If the value was a cDataSection it will be properly translated back
61249>        // to normal text for us.
61249>        Move True                                                   to ColumnType.bNativeDataType
61250>        Get ComGetChildContent of hoDriverAttribute "name"          to ColumnType.sSQLType
61251>        Get ComGetChildContent of hoDriverAttribute "id"            to ColumnType.iSQLType
61252>
61252>        Get ComGetChildWithTag of hoDriverAttribute "nativeTypeData" to vChild
61253>        If (IsComObject(vChild)) Begin
61255>            Get Create (RefClass(cComChilkatXml)) to hoChild
61256>            Set pvComObject of hoChild to vChild
61257>            Get ComGetChildContent of hoChild       "canEditSize"   to ColumnType.bCanEditSize
61258>            
61258>            // Some data types does not have a iDefaultSize, Min or Max size.
61258>            // Then denote "not defined" by a "-1":
61258>            Get ComGetChildContent of hoChild       "defaultSize"   to ColumnType.iDefaultSize
61259>            If (ColumnType.iDefaultSize = 0) Begin
61261>                Move    -1                                          to ColumnType.iDefaultSize
61262>            End
61262>            Get ComGetChildContent of hoChild       "minSize"       to ColumnType.iMinSize
61263>            If (ColumnType.iMinSize = 0) Begin
61265>                Move        -1                                      to ColumnType.iMinSize
61266>            End
61266>            Get ComGetChildContent of hoChild       "maxSize"       to ColumnType.nMaxSize
61267>            If (ColumnType.nMaxSize = 0) Begin
61269>                Move        -1                                      to ColumnType.nMaxSize
61270>            End
61270>            Send Destroy           of hoChild
61271>        End
61271>
61271>        Get paColumnType to aColumnType
61272>        Move ColumnType to aColumnType[SizeOfArray(aColumnType)]
61273>        // paColumnType is a Panel array struct property
61273>        Set paColumnType to aColumnType
61274>    End_Procedure  
61275>    
61275>    Function MakeStringLength String sValue Integer iReportColumnPos Returns String
61278>        Move (Pad(sValue, (Length(sValue) + (iReportColumnPos - Length(sValue))))) to sValue
61279>
61279>        Function_Return sValue
61280>    End_Function
61281>
61281>    Procedure WriteXMLDriverTypeData String sFileName String sDriverXMLFile tColumnType[] aColumnType
61284>        Integer iSize iCount iCh iDbType iDataFlexType
61284>        String sSpace sDriverID sDataFlexType sValue
61284>        DateTime dtExecStart dtExecEnd
61284>        
61284>        Get Seq_Open_Output_Channel sFileName to iCh
61285>        If (iCh = DF_SEQ_CHANNEL_ERROR) Begin
61287>            Send Info_Box "Could not get a free output channel number."
61288>            Procedure_Return
61289>        End                 
61289>        
61289>        Move (CurrentDateTime()) to dtExecStart
61290>        Get SelectedDbType of oDbType_cf   to iDbType
61291>        Get Value          of oDriverID_cf to sDriverID
61292>        Writeln channel iCh "/" "/ Generated By The Database Update Framework"
61296>        Writeln channel iCh "/" "/ Driver XML File: " sDriverXMLFile
61301>        Writeln channel iCh "/" "/ Driver COLUMN DATA TYPES"
61305>        Writeln channel iCh "/" "/"
61309>        Writeln channel iCh "/" "/ Created: " (String(dtExecStart))
61314>        Writeln channel iCh
61316>        Move "            " to sSpace
61317>        
61317>        Move (SizeOfArray(aColumnType)) to iSize
61318>        Decrement iSize
61319>        For iCount from 0 to iSize                    
61325>            Get UtilSqlColumnTypeToDataFlexType of ghoDbUpdateFunctionLibrary sDriverID iDbType aColumnType[iCount].iSQLType aColumnType[iCount].iDefaultSize to iDataFlexType 
61326>            Get UtilDataFlexDataTypeToString    of ghoDbUpdateFunctionLibrary iDataFlexType to sDataFlexType
61327>            
61327>            If (Lowercase(aColumnType[iCount].sSQLType) <> "unknown type") Begin
61329>                // sSQLType:
61329>                Move ('Move "' + String(aColumnType[iCount].sSQLType) + '"') to sValue
61330>                Get MakeStringLength sValue 45 to sValue
61331>                Writeln channel iCh sSpace sValue 'to aColumnType[i].sSQLType'                                     
61336>                // iSQLType:
61336>                Move ('Move' * String(aColumnType[iCount].iSQLType)) to sValue
61337>                Get MakeStringLength sValue 45 to sValue
61338>                Writeln channel iCh sSpace sValue 'to aColumnType[i].iSQLType'
61343>                // bCanEditSize:
61343>                Move ('Move' * (If(aColumnType[iCount].bCanEditSize = True, 'True', 'False'))) to sValue
61344>                Get MakeStringLength sValue 45 to sValue
61345>                Writeln channel iCh sSpace sValue 'to aColumnType[i].bCanEditSize'
61350>                // bNativeDataType:
61350>                Move ('Move' * (If(aColumnType[iCount].bNativeDataType = True, 'True', 'False'))) to sValue
61351>                Get MakeStringLength sValue 45 to sValue
61352>                Writeln channel iCh sSpace sValue 'to aColumnType[i].bNativeDataType' 
61357>                // iDefaultSize:
61357>                Move ('Move' * String(aColumnType[iCount].iDefaultSize)) to sValue 
61358>                Get MakeStringLength sValue 45 to sValue
61359>                Writeln channel iCh sSpace sValue 'to aColumnType[i].iDefaultSize'
61364>                // iMinSize:
61364>                Move ('Move' * String(aColumnType[iCount].iMinSize)) to sValue 
61365>                Get MakeStringLength sValue 45 to sValue
61366>                Writeln channel iCh sSpace sValue 'to aColumnType[i].iMinSize'
61371>                // iMaxSize:
61371>                Move ('Move' * String(aColumnType[iCount].nMaxSize)) to sValue 
61372>                Get MakeStringLength sValue 45 to sValue
61373>                Writeln channel iCh sSpace sValue 'to aColumnType[i].nMaxSize'
61378>                // sDataFlexType:
61378>                Move ('Move "' + String(sDataFlexType) + '"') to sValue    
61379>                Get MakeStringLength sValue 45 to sValue
61380>                Writeln channel iCh sSpace sValue 'to aColumnType[i].sDataFlexType'
61385>                // iDataFlexType:
61385>                Move ('Move' * String(sDataFlexType)) to sValue    
61386>                Get MakeStringLength sValue 45 to sValue
61387>                Writeln channel iCh sSpace sValue 'to aColumnType[i].iDataFlexType'
61392>                // sPrecision:
61392>                // ToDo: Should this be .DefaultSize or .nMaxSize? ...Or removed !
61392>                // Maybe change the struct?
61392>                If (iDataFlexType = DF_DATE) Begin
61394>                    Move  6 to aColumnType[iCount].nMaxSize
61395>                End
61395>                If (Lowercase(aColumnType[iCount].sSQLType) = "datetime" or Lowercase(aColumnType[iCount].sSQLType) = "datetime2") Begin
61397>                    Move 23 to aColumnType[iCount].nMaxSize
61398>                End                                           
61398>                If (aColumnType[iCount].nMaxSize = 0) Begin
61400>                    Move  1 to aColumnType[iCount].nMaxSize
61401>                End
61401>                Move ('Move' * String(aColumnType[iCount].nMaxSize)) to sValue 
61402>                Get MakeStringLength sValue 45 to sValue
61403>                Writeln channel iCh sSpace sValue 'to aColumnType[i].sPrecision'
61408>
61408>                Writeln channel iCh sSpace 'Increment i'
61412>                Writeln channel iCh
61414>            End
61414>        Loop
61415>
61415>        Send Seq_Close_Channel iCh
61416>        Send Info_Box "Ready!"    
61417>    End_Procedure
61418>    
61418>    Send OnStartUp of oDriverXMLFileName_fm
61419>    
61419>    On_Key Key_Ctrl+Key_R Send KeyAction of oReadButton
61420>    On_Key Key_Ctrl+Key_W Send KeyAction of oWriteButton
61421>End_Object
61422>
61422>Start_UI oMainPanel
61424>
Including Resources...
Summary
Memory Available: 2147483646
Total Warnings : 1
Total Errors   : 0
Total Symbols  : 34636
Total Resources: 5
Total Commands : 61423
Total Windows  : 0
Total Pages    : 0
Static Data    : 513193
Message area   : 377919
Total Blocks   : 22880
